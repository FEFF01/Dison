{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/syntax/head.ts","webpack:///./js/character.ts","webpack:///./js/tokenizer.ts","webpack:///./js/interfaces.ts","webpack:///./js/lexical/head.ts","webpack:///./js/lexical/index.ts","webpack:///(webpack)/buildin/module.js","webpack:///./js/parser.ts","webpack:///./js/syntax/expression.ts","webpack:///./js/syntax/declaration.ts","webpack:///./js/index.ts","webpack:///./js/syntax/pattern.ts","webpack:///./js/syntax/statement.ts","webpack:///./js/syntax/module_declaration.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","type_punctuator","TYPE_ENUMS","Punctuator","type_keyword","Keyword","type_identifier","Identifier","_Punctuator","values","unshift","_Or","_Keyword","_Identifier","_Pattern","args","OPERATOR_ID","_calc_nth","props","nth","Cover","length","Mark","prop","_key","undefined","data","origin","operands","sub_operators","pipe","this","_pipes","push","walk","walker","bind_env","_walker","_bind_env","_factors","operand","Operator","parts","replace","split","slice","map","parents","factor","pipes","result","concat","attach","type","prev_item","root","getNode","reduce","res","value_node","console","warn","parent","child","setWrap","records","getDeepNodes","children","factors","getNextNodes","Array","apply","context","index","MATCHED_RECORD","_get_wrapper_function","_Option","Option","some","Or","_Series","Series","_NonCapturing","NonCapturing","_NonCollecting","NonCollecting","_Loop","Loop","_Mark","NODES","Grouping","node","grouping","range","loc","Directive","expression","directive","Script","body","sourceType","Module","_get_adapt","eval","createMatchTree","block_list","prevent_update","item","wrapper","collectors","handlers","overload","precedences","filters","validators","indexOf","filter","handler","validator","collector","precedence","Number","_collector","nodes","operator","last_node","matched_record","_Context","parser","state_stack","wrap","unwrap","store","restore_point","arguments","restore","point","getToken","tokens","pop","FutureReservedWord","StrictModeReservedWord","RestrictedWord","isFutureReservedWord","id","isStrictModeReservedWord","isRestrictedWord","_if_strict_throw_err","token","err","_if_reserved_throw_err","validateIdentifier","THROW_RESTRICT_WORDS_PATTERN","THROW_STRICT_RESERVED_WORDS_PATTERN","IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN","EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN","IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN","EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN","validateAssignment","validateBinding","binding_set","validateLineTerminator","collected","right","_next","next_token","start","line","end","_SuccessCollector","pattern","Success","join_content","success","content","TYPE_ALIAS","ASSIGNMENT_PUNCTUATORS_PATTERN","MODULE_ITEM_PATTERN","STATEMANT_LIST_ITEM_PATTERN","RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN","TOPLEVEL_ITEM_PATTERN","isAligned","left","attachLocation","source","reinterpretKeywordAsIdentifier","tokenizer","_volatility","identifier","configurable","reinterpretIdentifierAsKeyword","_Validate","is_right_parentheses","is_right_brackets","is_right_braces","extract_success","parse_and_extract","match_tree","parseCustom","get_inner_group","parse_next_statement","SYNTAX_TREE","isStatementListItem","token_hooks","AsyncGetter","await_tasks","async_data","is_open","async_mapper","open","tasks","task","callback","set","cbfun","async_getter","IdentifierStart","IdentifierPart","testCodePoint","regexp","input","charCodeAt","test","testUnicodeEscape","code","cp","hexValue","len","fromCodePoint","scanHex","ch","decimalValue","octalValue","binaryValue","isWhiteSpace","isLineTerminator","String","fromCharCode","inIdentifierStart","inIdentifierPart","options","save_comments","error_logs","init","line_number","line_start","terminator_stack","curly_stack","tokenize","nextToken","_nextToken","hook","Comments","createToken","column","match","prev_node","target","scanner","nextIdentifier","str","TOKEN_TYPE_MAPPERS","is_primary_expr_start","nextPunctuator","PRIMARY_EXPR_START_PUNCTUATORS_TREE","PUNCTUATORS_TREE","nextNumeric","number","flags","_get_token","Numeric","_get_error","message","error","NUMERIC_KEYWORD_MAPPINGS","skipNonsenses","createSearchTree","part","_Scanner","use_escape_mode","char","scan_tree","backslash_count","self","has_escape","_finally","splice","end_index","_scopes","TOKEN_TYPE_SET","octal_escape","octal","octal_escape_tree","strbase_scan_tree","not_allow_octal_escape","template_base","shift","PUNCTUATORS","escape_scan","bound","REGEXP_DESCRIPTOR","class_marker","regex","Boolean","RegularExpression","Template","TemplateElement","Null","webpackPolyfill","deprecate","paths","padding_token","parse","parseScript","parseModule","_parse","script","parseExpression","parseNode","EXPRESSION_TREE","isExpression","parseRangeAsNode","lexcal_terminator","parseRange","parseRangeAsExpression","parseRangeAsBlock","match_tree_stack","context_stack","environments","begin","extreme","state","cursor","backflow_tape","finallize","longest","longest_precedence","extreme_precedence","before_token","after_token","next","minimum","explore","matched","get_records","matched_node","has_backflow","type_node","alias","createNode","offset","restore_volatility","start_token","end_token","record","parseArrayPattern","parseObjectPattern","walk_primary_expression","PRIMARY_EXPRESSION_TREE","getLiteral","parse_value","raw","getStringLiteral","getRegularLiteral","RegExp","e","init_token_hooks","ARGUMENTS_PATTERN","ARGUMENTS_TREE","PARAMS_PATTERN","PARAMS_TREE","kind","params","params_count","BODY_PATTERN","generator","async","body_context","block","BlockStatement","FUNCTION_BODY_PATTERN","PrimaryExpressions","PROPERTIES_TREE","_","expressions","quasis","tail","cooked","__","parse_params","superClass","METHOD_DEFINITIONS_TREE","Expressions","elements","ARRAY_ELEMENTS_TREE","properties","OBJECT_PROPERTIES_TREE","tag","quasi","computed","meta","callee","first_token","first_token_type","argument","prefix","delegate","expr","SequenceExpression","UNIT_EXPRESSION_TREE","COMPUTED_PROPERTY_NAME_PATTERN","LITERAL_PROPERTY_NAME_PATTERN","PROPERTY_NAME_PATTERN","MethodDefinitions","MethodDefinition","_prev","static","_static","FunctionExpression","Arguments","Params","ArrayElements","Properties","method","shorthand","ObjectProperties","window","test1","Patterns","type_name","get_variable_declarator","VARIABLE_DECLARATOR_TREE","VariableDeclarators","reinterpreat_expression_as_declaration","Declarations","declarations","EXPRESSION_ITEM_PATTERN","DECLARATION_ITEM_PATTERN","STATEMENT_ITEM_PATTERN","STATEMENT_LIST_ITEM_PATTERN","descriptor","patterns","isDeclaration","isStatement","isModuleItem","Tokenizer","Parser","Dison","PETTERN_ELEMENTS_TREE","PATTERN_PROPERTIES_TREE","PatternElements","PatternProperties","ArrayPattern","is_binding","ObjectPattern","AssignmentPattern","Property","_value","VariableDeclaration","BLOCK_STATEMENT_PATTERN","GROUPING_EXPRESSION","Statements","label","keyword","iterator","FOR_ITERATOR_TREE","consequent","alternate","label_name","label_set","discriminant","cases","has_default","param","finalizer","statements","ForIterator","ForStatement","update","declarator","STRING_LITERAL_PATTERN","ImportSpecifiers","ImportSpecifier","imported","local","IMPORT_SPECIFIERS_TREE","EXPORT_SPECIFIERS_TREE","ExportSpecifier","exported","ModuleDeclarations","specifiers","declaration"],"mappings":"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","file":"js/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","\r\n\r\n\r\nimport {\r\n    NodeProp,\r\n    Cover as CoverInterface,\r\n    Mark as MarkInterface,\r\n    Node, Pipe, Connector,\r\n    Matched, CONTEXT, Context, Token, SourceLocation,\r\n    MATCHED,\r\n    MARKS,\r\n    /*PRECEDENCE_FEATURES,*/ PRECEDENCE, Precedence as PrecedenceInterface, MATCHED_RECORDS, Validate\r\n} from '../interfaces';\r\n\r\n\r\nimport {\r\n    TYPE_ENUMS\r\n} from \"../lexical/index\";\r\n\r\nimport Tokenizer from \"../tokenizer\"\r\nlet type_punctuator = TYPE_ENUMS.Punctuator;\r\nlet type_keyword = TYPE_ENUMS.Keyword;\r\nlet type_identifier = TYPE_ENUMS.Identifier;\r\n\r\n\r\nfunction _Punctuator(...values: Array<string | number>) {\r\n    values.unshift(type_punctuator);\r\n    return _Or(values);\r\n}\r\nfunction _Keyword(...values: Array<string | number>) {\r\n    values.unshift(type_keyword);\r\n    return _Or(values);\r\n}\r\nfunction _Identifier(...values: Array<string | number>) {\r\n    values.unshift(type_identifier);\r\n    return _Or(values);\r\n}\r\nfunction _Pattern(...args: Array<string | number>) {\r\n    return _Or(args);\r\n}\r\n\r\nimport Parser from '../parser'\r\nlet OPERATOR_ID = 0;\r\n\r\nfunction _calc_nth(props: Array<NodeProp>, key: string | Mark | Cover) {\r\n    let nth = 0;\r\n    if (!(key instanceof Cover) && props.length) {\r\n        key instanceof Mark && (key = key.key);\r\n        for (let i = props.length - 1; i >= 0; i--) {\r\n            let prop = props[i], _key = prop[0];\r\n            if (\r\n                _key === key\r\n                || _key instanceof Mark\r\n                && _key.key === key\r\n                && (_key.value !== undefined || _key.data !== Mark.prototype.data)\r\n            ) {\r\n                if (prop[1] === 0) {\r\n                    prop = props[i] = [prop[0], 1, prop[2]];\r\n                }\r\n                nth = prop[1] + 1;\r\n            } else if (\r\n                !(_key instanceof Cover && _key.origin === key)\r\n            ) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return nth;\r\n}\r\n\r\nabstract class Operator {\r\n    private _factors: Array<[string | number, Array<string | number>] | Operator | Mark>;\r\n    private _pipes: Array<Pipe>;\r\n    private _walker: Connector;\r\n    private _bind_env: boolean;\r\n    public sub_operators = [];\r\n    public test: (token: Token, index?: number) => boolean;\r\n    constructor(public operands: Operands) { }\r\n    public pipe(pipe: Pipe) {\r\n        if (this._pipes) {\r\n            this._pipes.push(pipe);\r\n        } else {\r\n            this._pipes = [pipe];\r\n        }\r\n        return this;\r\n    }\r\n    public walk(walker: Connector, bind_env?: boolean) {\r\n        this._walker = walker;\r\n        this._bind_env = !!bind_env;\r\n        return this;\r\n    }\r\n    public get factors() {\r\n        if (!this._factors) {\r\n            this._factors = [];\r\n            for (const operand of this.operands) {\r\n                if (operand instanceof Operator || operand instanceof Mark) {\r\n                    this._factors.push(operand);\r\n                } else {\r\n\r\n                    let parts = typeof operand === \"string\" ?\r\n                        operand.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/) :\r\n                        operand;\r\n                    this._factors.push(\r\n                        [\r\n                            parts[0],\r\n                            parts.length > 1\r\n                                ? parts.slice(1)\r\n                                : [MARKS.TYPE_ONLY]\r\n                        ]);\r\n                }\r\n            }\r\n        }\r\n        return this._factors;\r\n    }\r\n    abstract attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>): IterationRecord;\r\n\r\n    protected map(\r\n        parents: IterationRecord,\r\n        factor: [string | number, Array<string | number>] | Operator | Mark,\r\n        key: string | Cover,\r\n        pipes?: Array<Pipe>\r\n    ) {\r\n        let result: IterationRecord = [];\r\n        let _pipes = pipes\r\n            ? this._pipes ?\r\n                this._pipes.concat(pipes)\r\n                : pipes\r\n            : this._pipes;\r\n        if (factor instanceof Operator || factor instanceof Mark) {\r\n            return factor.attach(parents, key, _pipes);\r\n        } else {\r\n            let type = factor[0], values = factor[1];\r\n            for (const prev_item of parents) {\r\n                let [root, props] = prev_item;\r\n                props = props.slice();\r\n                props.push([key, _calc_nth(props, key), _pipes]);\r\n                let parent = this.getNode(root, type);\r\n\r\n                let walker = this._walker;\r\n                if (walker && this._bind_env) {\r\n                    walker = walker.bind(\r\n                        props.reduce((res, prop) => {\r\n                            let key = prop[0];\r\n                            if (key instanceof Mark) {\r\n                                res[key.key] = key.value;\r\n                            } else {\r\n                                res[key instanceof Cover ? key.origin : key] = true;\r\n                            }\r\n                            return res;\r\n                        }, {})\r\n                    );\r\n                }\r\n\r\n                for (const value of values) {\r\n                    let value_node = this.getNode(parent, value, root);\r\n                    if (\r\n                        value_node[MARKS.WALKER]\r\n                        && value_node[MARKS.WALKER] !== walker\r\n                    ) {\r\n                        console.warn(\r\n                            \"conflict:\",\r\n                            value_node,\r\n                            value_node[MARKS.WALKER],\r\n                            walker\r\n                        );\r\n                    }\r\n                    if (walker) {\r\n                        value_node[MARKS.WALKER] = walker;\r\n                    }\r\n                    result.push(\r\n                        [\r\n                            value_node,\r\n                            props,\r\n                            null/*[root, factor[0], value, prev_item]//Loop*/\r\n                        ]\r\n                    );\r\n                }\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n    private getNode(parent: any, key: string | number, root?: any) {\r\n        let child = parent[key];\r\n        if (child) {\r\n            if (child[MARKS.IDENTIFIER] !== OPERATOR_ID) {\r\n                parent[key] = child = { ...child };\r\n                child[MARKS.IDENTIFIER] = OPERATOR_ID;\r\n            }\r\n            return child;\r\n        }\r\n\r\n        child = parent[key] = {\r\n            [MARKS.IDENTIFIER]: OPERATOR_ID\r\n        };\r\n        if (root) {\r\n            child[MARKS.DEEPTH] = root[MARKS.DEEPTH] + 1;\r\n            root[MARKS.TERMINAL] = false;\r\n            child[MARKS.TERMINAL] = true;\r\n            /*if (root[MATCH_MARKS.MATCH_END]) {\r\n                root[MATCH_MARKS.MATCH_END][MATCHED_RECORDS.precedence][PRECEDENCE.TERMINAL] = false;\r\n            }*/\r\n        }\r\n        return child;\r\n    }\r\n    protected setWrap(records: IterationRecord) {//Loop\r\n        throw 'not used';\r\n        for (const record of records) {\r\n            let prev_item = record, curr_item = prev_item;\r\n            while ((curr_item = prev_item[2] && prev_item[2][3]) && curr_item[2]) {\r\n                prev_item = curr_item;\r\n            }\r\n            if (prev_item[2]) {\r\n                let linked = prev_item[2];\r\n                let node = this.getNode(record[0], linked[1]);\r\n                if (node[linked[2]] && node[linked[2]] !== prev_item[0]) {\r\n                    throw node[linked[2]];\r\n                }\r\n                node[linked[2]] = prev_item[0];\r\n            }\r\n        }\r\n        return records;\r\n    }\r\n    protected getDeepNodes(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let children = parents, factors = this.factors;\r\n        for (const factor of factors) {\r\n            children = this.map(children, factor, key, pipes);\r\n        }\r\n        return children;\r\n    }\r\n    protected getNextNodes(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let children = [], factors = this.factors;\r\n        for (const factor of factors) {\r\n            Array.prototype.push.apply(children, this.map(parents, factor, key, pipes));\r\n        }\r\n        return children;\r\n    }\r\n}\r\n\r\ntype Operand = string | /*number |*/ Operator | Mark | Array<string | number>;\r\ntype Operands = Array<Operand>;\r\ntype IterationRecordItem = [\r\n    Record<string, any>,\r\n    Array<NodeProp>,\r\n    [Record<string, any>, string, string, IterationRecordItem] | null\r\n]\r\ntype IterationRecord = Array<IterationRecordItem>;\r\n\r\nclass Option extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        let children = this.getNextNodes(parents, key, pipes).concat(parents);\r\n        return children;\r\n    }\r\n}\r\nclass Or extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, key, pipes);\r\n    }\r\n}\r\n\r\nclass Series extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        return this.getDeepNodes(parents, key, pipes);\r\n    }\r\n}\r\n/*\r\nclass And extends Operator  {\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw \"not used\";\r\n        return [];\r\n    }\r\n}\r\nclass Not extends Operator {\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw \"not used\";\r\n        return [];\r\n        \r\n    }\r\n}*/\r\nclass Cover implements CoverInterface {\r\n    constructor(public origin: any, public value: any) {\r\n        if (origin instanceof Cover) {\r\n            this.origin = origin.origin;\r\n        }\r\n    }\r\n}\r\nclass NonCapturing extends Operator {\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, new Cover(key, null), pipes);\r\n    }\r\n}\r\n\r\nclass NonCollecting extends Operator {\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, new Cover(key, \"\"), pipes);\r\n    }\r\n}\r\n\r\nclass Loop extends Operator {\r\n    //Loop 内部的 Option 可能会导致 Loop 取值混乱(当前用不到这种情况，不处理这种情况能减少消耗)\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw 'not used';\r\n        //有点耗费性能，不是很必要用这个，已在parser核心部分去除Loop的支持\r\n        let baks = [];\r\n        for (const parent of parents) {\r\n            baks.push(parent[2]);\r\n            parent[2] = null;\r\n        }\r\n        let res = this.setWrap(this.getNextNodes(parents, key));\r\n        for (const index in parents) {\r\n            parents[index][2] = baks[index];\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nclass Mark implements MarkInterface {\r\n    static MATCHED_RECORD: Matched;\r\n    public key: string;\r\n    public value: any;\r\n    constructor(value?: any) {\r\n        if (typeof value === \"function\") {\r\n            this.data = value;\r\n        } else {\r\n            this.value = value;\r\n        }\r\n    }\r\n    data(context: Context, index: number) {\r\n        return this.value;\r\n    }\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let value = this.value;\r\n        if (!(key instanceof Cover) && (value !== undefined || this.data !== Mark.prototype.data)) {\r\n            if (key === \"type\") {\r\n                Mark.MATCHED_RECORD[MATCHED.wrapper] = _get_wrapper_function(value);;\r\n            } else {\r\n                let result: IterationRecord = [];\r\n                this.key = key;\r\n                for (const parent of parents) {\r\n                    let props = parent[1].slice();\r\n                    props.push([this, _calc_nth(props, this), undefined]);\r\n                    result.push([parent[0], props, parent[2]]);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        return parents;\r\n    }\r\n}\r\n\r\nfunction _Option(...some: Operands) {\r\n    return new Option(some);\r\n}\r\n/*\r\nfunction _Not(...some: Operands) {\r\n    return new Not(some);\r\n}\r\nfunction _And(...some: Operands) {\r\n    return new And(some);\r\n}*/\r\nfunction _Or(...some: Operands) {\r\n    return new Or(some);\r\n}\r\nfunction _Series(...some: Operands) {\r\n    return new Series(some);\r\n}\r\nfunction _NonCapturing(...some: Operands) {\r\n    return new NonCapturing(some);\r\n}\r\nfunction _NonCollecting(...some: Operands) {\r\n    return new NonCollecting(some);\r\n}\r\n\r\n\r\nfunction _Loop(...some: Operands) {\r\n    return new Loop(some);\r\n}\r\nfunction _Mark(some?: any) {\r\n    return new Mark(some);\r\n}\r\nlet NODES: Record<string, (...args: any) => void> = {\r\n    Grouping(node?: Record<string, any>, grouping?: Token) {\r\n        this.type = \"Grouping\";\r\n        for (const key in node) {\r\n            this[key] = node[key];\r\n        }\r\n        if (grouping) {\r\n            this.range = grouping.range;\r\n            this.loc = grouping.loc;\r\n        }\r\n    },\r\n    Directive(\r\n        type: string,\r\n        expression: Node,\r\n        directive: string,\r\n        range: [number, number],\r\n        loc: SourceLocation\r\n    ) {\r\n        this.type = type;\r\n        this.expression = expression;\r\n        this.directive = directive;\r\n        this.range = range;\r\n        this.loc = loc;\r\n    },\r\n    Script(body: Array<Node>) {\r\n        this.type = \"Program\";\r\n        this.sourceType = \"script\";\r\n        this.body = body;\r\n    },\r\n    Module(body: Array<Node>) {\r\n        this.type = \"Program\";\r\n        this.sourceType = \"module\";\r\n        this.body = body;\r\n    }\r\n};\r\nfunction _get_adapt(data: any, index: number) {\r\n    return data instanceof Array ? index < data.length\r\n        ? data[index]\r\n        : data[data.length - 1] : data;\r\n}\r\nfunction _get_wrapper_function(type: string) {\r\n    return NODES[type]\r\n        || (\r\n            NODES[type]\r\n            = type ? eval(`(function ${type}(){this.type=\"${type}\"})`) : function () { }\r\n        );\r\n}\r\nfunction createMatchTree(\r\n    data: Record<string, any> | Array<Record<string, any>>,\r\n    root?: Record<string, any>,\r\n    block_list: Array<string> = [],\r\n    prevent_update = false\r\n) {\r\n    prevent_update || (OPERATOR_ID += 1);\r\n    root = root ? prevent_update ? root : { ...root } : { [MARKS.DEEPTH]: -1 };\r\n\r\n    if (data instanceof Array) {\r\n        for (const item of data) {\r\n            root = createMatchTree(item, root, block_list, true);\r\n        }\r\n    } else {\r\n        for (const type in data) {\r\n            let wrapper = _get_wrapper_function(type);\r\n            for (let item of data[type] instanceof Array ? data[type] : [data[type]]) {\r\n                let {\r\n                    collector: collectors,\r\n                    handler: handlers,\r\n                    overload,\r\n                    precedence: precedences = true/*PRECEDENCE_FEATURES.IMMEDIATE*/,\r\n                    filter: filters,\r\n                    validator: validators\r\n                } = item;\r\n                if (!collectors || ~block_list.indexOf(type)) {\r\n                    continue;\r\n                }\r\n                typeof filters === \"string\" && (filters = data[filters].filter);\r\n                typeof handlers === \"string\" && (handlers = data[handlers].handler);\r\n                typeof validators === \"string\" && (validators = data[validators].validator);\r\n                collectors instanceof Array || (collectors = [collectors]);\r\n\r\n                for (let index = 0; index < collectors.length; index++) {\r\n                    let collector = collectors[index];\r\n\r\n                    let precedence: any = _get_adapt(precedences, index);\r\n                    let handler: Matched[MATCHED.handler] = _get_adapt(handlers, index);\r\n                    let filter: Matched[MATCHED.filter] = _get_adapt(filters, index);\r\n                    let validator: Matched[MATCHED.validator] = _get_adapt(validators, index);\r\n                    Mark.MATCHED_RECORD = [\r\n                        [precedence instanceof Number ? Number(precedence) : precedence, precedence],\r\n                        null,\r\n                        wrapper,\r\n                        handler,\r\n                        validator,\r\n                        filter\r\n                    ];\r\n                    if (collector instanceof Array) {\r\n                        let _collector = { ...collectors[index - 1] };\r\n                        collector[0] && !(collector[0] instanceof Array) && (collector = [collector]);\r\n                        for (const [key, value] of collector) {\r\n                            _collector[key] = value;\r\n                        }\r\n                        collectors[index] = collector = _collector;\r\n                    }\r\n\r\n                    let nodes: IterationRecord = [[root, [], null]];\r\n\r\n                    //保证所有 key 都是同类型字符开头(否则可能会出现遍历顺序与定义顺序不同)\r\n                    for (const key in collector) {\r\n                        let operator = collector[key];\r\n                        if (!(operator instanceof Operator || operator instanceof Mark)) {\r\n                            operator = _Or(operator);\r\n                        }\r\n                        nodes = operator.attach(nodes, key);\r\n                    }\r\n\r\n                    for (const [last_node, props] of nodes) {\r\n                        let matched_record = Mark.MATCHED_RECORD.slice();\r\n                        matched_record[MATCHED.props] = props;\r\n                        if (!overload && last_node[MARKS.END]) {\r\n                            console.warn(\r\n                                \"conflict:\",\r\n                                last_node,\r\n                                last_node[MARKS.END],\r\n                                matched_record\r\n                            );\r\n                        }\r\n                        last_node[MARKS.END] = matched_record\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n\r\n}\r\n\r\nfunction _Context(parser: Parser): Context {\r\n    let state_stack = [];\r\n    let context: any = new Array(CONTEXT.length);\r\n    context[CONTEXT.parser] = parser;\r\n    context[CONTEXT.labelSet] = [];\r\n    //context[CONTEXT.tokens] = tokens;\r\n    context.wrap = wrap;\r\n    context.unwrap = unwrap;\r\n    context.store = store;\r\n    context.restore = restore;\r\n    context.getToken = getToken;\r\n    Object.defineProperty(context, \"tokens\", {\r\n        get() {\r\n            return this[CONTEXT.tokens] || this[CONTEXT.parser].tokens;\r\n        }\r\n    })\r\n    return context;\r\n\r\n    function getToken(index: number) {\r\n        let tokens = this[CONTEXT.tokens];\r\n        return !tokens ? this[CONTEXT.parser].getToken(index) : tokens[index];\r\n        //return context[CONTEXT.tokens][index];\r\n    }\r\n    function wrap(key: CONTEXT, value: any) {\r\n        state_stack.push(context[key], key);\r\n        context[key] = value;\r\n        return context;\r\n    };\r\n    function unwrap() {\r\n        context[state_stack.pop()] = state_stack.pop();\r\n        return context;\r\n    };\r\n    function store() {\r\n        let restore_point = state_stack.length;\r\n        for (let index = 0; index < arguments.length; index += 2) {\r\n            wrap(arguments[index], arguments[index + 1]);\r\n        }\r\n        return restore_point;\r\n    }\r\n    function restore(point: number) {\r\n        while (state_stack.length > point) {\r\n            unwrap();\r\n        }\r\n        return state_stack.length;\r\n    }\r\n}\r\nconst FutureReservedWord = [\"enum\", \"export\", \"import\", \"super\"];\r\nconst StrictModeReservedWord = [\r\n    \"implements\", \"interface\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"let\"\r\n];\r\nconst RestrictedWord = [\"eval\", \"arguments\"];\r\n\r\nfunction isFutureReservedWord(id: string) {\r\n    return FutureReservedWord.indexOf(id) >= 0;\r\n}\r\nfunction isStrictModeReservedWord(id: string) {\r\n    return StrictModeReservedWord.indexOf(id) >= 0;\r\n}\r\nfunction isRestrictedWord(id: string) {\r\n    return RestrictedWord.indexOf(id) >= 0;\r\n}\r\n\r\n\r\nfunction _if_strict_throw_err(context: Context, token: Token) {\r\n    if (context[CONTEXT.strict]) {\r\n        context[CONTEXT.parser].err(token);\r\n    }\r\n}\r\nfunction _if_reserved_throw_err(context: Context, token: Token) {\r\n    validateIdentifier(context, token);\r\n}\r\nconst THROW_RESTRICT_WORDS_PATTERN = _Or(\r\n    \"Identifier eval arguments\"\r\n).pipe(_if_strict_throw_err);\r\nconst THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\r\n    \"Identifier implements interface package private protected public static yield let\"\r\n).pipe(_if_strict_throw_err);\r\n\r\nconst IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\", THROW_STRICT_RESERVED_WORDS_PATTERN);\r\nconst EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"[Expression]\", THROW_STRICT_RESERVED_WORDS_PATTERN);\r\n\r\nconst IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\").pipe(_if_reserved_throw_err);\r\nconst EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\r\n    \"[Expression]\",\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n);\r\n\r\n\r\n/*const STRICT_RESERVED_WORDS = _Or(\r\n    \"Identifier implements interface package private protected public static yield let\"\r\n);*/\r\nfunction validateIdentifier(context: Context, node: Node) {\r\n    if (\r\n        context[CONTEXT.strict]\r\n    ) {\r\n        if (!isStrictModeReservedWord(node.name)) {\r\n            return true;\r\n        }\r\n        context[CONTEXT.parser].err(node);\r\n        return false;\r\n    }\r\n}\r\nfunction validateAssignment(context: Context, node: Node) {\r\n    if (\r\n        context[CONTEXT.strict]\r\n    ) {\r\n        if (!(\r\n            isRestrictedWord(node.name)\r\n            || isStrictModeReservedWord(node.name)\r\n        )) {\r\n            return true;\r\n        }\r\n        context[CONTEXT.parser].err(node);\r\n        return false;\r\n    }\r\n}\r\nfunction validateBinding(context: Context, node: Node) {\r\n    if (validateAssignment(context, node) === true) {\r\n        let binding_set = context[CONTEXT.bindingSet];\r\n        if (binding_set) {\r\n            binding_set.push(node.name);\r\n            if (binding_set.indexOf(node.name) !== binding_set.length - 1) {\r\n                context[CONTEXT.parser].err(node);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction validateLineTerminator(context: Context) {\r\n    let [collected, parser, , right] = context;\r\n    if (collected._next) {\r\n        delete collected._next;\r\n    } else {\r\n        let next_token = context.getToken(right + 1);\r\n        if (\r\n            next_token\r\n            && !(next_token.type === type_punctuator && next_token.value === \"}\")\r\n            && next_token.loc.start.line === collected.loc.end.line\r\n        ) {\r\n            parser.err(next_token);\r\n        }\r\n    }\r\n    return collected;\r\n}\r\n\r\nfunction _SuccessCollector(pattern: string | Operator) {\r\n    return {\r\n        Success: {\r\n            handler:join_content,\r\n            precedence: 0,\r\n            collector: [\r\n                {\r\n                    success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                    content: pattern,\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlet join_content = function ([collected]: Context) {\r\n    let { success, content } = collected;\r\n    if (success) {\r\n        success.content.push(content);\r\n        return success;\r\n    } else {\r\n        collected.content = [content];\r\n        return collected;\r\n    }\r\n};\r\n\r\nlet TYPE_ALIAS = {};\r\n\r\nconst ASSIGNMENT_PUNCTUATORS_PATTERN = _Or(\"Punctuator = += -= **= *= /= %= <<= >>= >>>= &= ^= |=\");\r\n\r\n\r\nconst MODULE_ITEM_PATTERN = _Or(\r\n    \"ImportDeclaration\",\r\n    \"ExportAllDeclaration\",\r\n    \"ExportNamedDeclaration\",\r\n    \"ExportDefaultDeclaration\"\r\n);\r\nconst STATEMANT_LIST_ITEM_PATTERN = _Or(\"[Declaration]\", \"[Statement]\");\r\n\r\nconst RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN = _Or(\r\n    \"SwitchCase\",\r\n    MODULE_ITEM_PATTERN,\r\n    STATEMANT_LIST_ITEM_PATTERN\r\n);\r\nconst TOPLEVEL_ITEM_PATTERN = _Or(\r\n    MARKS.BOUNDARY,\r\n    \"SwitchCase\",\r\n    MODULE_ITEM_PATTERN,\r\n    STATEMANT_LIST_ITEM_PATTERN\r\n);\r\n\r\nfunction isAligned(context: Context, left: number, right: number) {\r\n    let tokens = context.tokens;\r\n    for (let index = left; index < right; index++) {\r\n        if (tokens[index].loc.end.line !== tokens[index + 1].loc.start.line) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction attachLocation(source: Node, start: Node, end: Node = start) {\r\n    source.range = [start.range[0], end.range[1]];\r\n    source.loc = {\r\n        start: start.loc.start,\r\n        end: end.loc.end\r\n    };\r\n}\r\n\r\n\r\nfunction reinterpretKeywordAsIdentifier({ value, range, loc }: Token, tokenizer?: Tokenizer): Node {\r\n    let name = tokenizer ? tokenizer._volatility : value;\r\n    let identifier = {\r\n        type: \"Identifier\", name, range, loc\r\n    };\r\n    Object.defineProperty(identifier, \"value\", {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: name\r\n    });\r\n    return identifier;\r\n}\r\nfunction reinterpretIdentifierAsKeyword({ value, range, loc }: Token): Node {\r\n    return {\r\n        type: \"Keyword\",\r\n        value,\r\n        range,\r\n        loc\r\n    };\r\n}\r\n\r\nfunction _Validate(type: string | number, value: string): Validate {\r\n    return function (token: Token) {\r\n        return token.type === type && token.value === value;\r\n    }\r\n}\r\n\r\n\r\nlet is_right_parentheses = _Validate(type_punctuator, \")\");\r\nlet is_right_brackets = _Validate(type_punctuator, \"]\");\r\nlet is_right_braces = _Validate(type_punctuator, \"}\");\r\n\r\n\r\n\r\nfunction extract_success(parser: Parser, nodes: Array<Node>) {\r\n    let res: Array<Node> = nodes;\r\n    if (nodes.length) {\r\n        let index = 0;\r\n        if (nodes[0].type === \"Success\") {\r\n            index = 1;\r\n            res = nodes[0].content;\r\n        } else {\r\n            res = [];\r\n        }\r\n        if (nodes.length > index) {\r\n            parser.err(...nodes.slice(index));\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction parse_and_extract(match_tree: Record<string, any>, context: Context, node: Node) {\r\n    let [, parser] = context;\r\n    let tokens = node.content;\r\n    if (tokens.length) {\r\n        context.wrap(CONTEXT.tokens, tokens)\r\n        //context[CONTEXT.tokens] = tokens;\r\n        parser.parseCustom(match_tree, context);\r\n        tokens = extract_success(parser, tokens)\r\n        context.unwrap();\r\n    }\r\n    return tokens;\r\n}\r\n\r\nfunction get_inner_group(token: Token) {\r\n    while (\r\n        token.content.length === 1\r\n        && token.content[0].value === \"()\"\r\n        && token.content[0].type === type_punctuator\r\n    ) {\r\n        token = token.content[0];\r\n    }\r\n    return token;\r\n}\r\n\r\nfunction parse_next_statement(context: Context, start = context[CONTEXT.right] + 1) {\r\n    let parser = context[CONTEXT.parser];\r\n    if (\r\n        parser.parseCustom(\r\n            parser.SYNTAX_TREE,\r\n            context,\r\n            start,\r\n            parser.isStatementListItem\r\n        )\r\n    ) {\r\n        return 0;\r\n    }\r\n}\r\nlet token_hooks: Record<string, (token: Token, tokenizer?: Tokenizer | Parser) => Token> = {};\r\nfunction AsyncGetter() {\r\n    let await_tasks = {};\r\n    let async_data = {};\r\n    let is_open = false;\r\n    let async_mapper: Record<string, any> = {\r\n        open() {\r\n            is_open = true;\r\n            let tasks = [];\r\n            for (const key in await_tasks) {\r\n                if (async_data.hasOwnProperty(key)) {\r\n                    let data = async_data[key];\r\n                    for (let task of await_tasks[key]) {\r\n                        tasks.push([task, data]);\r\n                    }\r\n                }\r\n            }\r\n            for (const task of tasks) {\r\n                task[0](task[1]);\r\n            }\r\n        },\r\n        get(key: string, callback: (data: any) => any) {\r\n            if (await_tasks[key]) {\r\n                await_tasks[key].push(callback);\r\n                if (is_open && async_data.hasOwnProperty(key)) {\r\n                    callback(async_data[key]);\r\n                }\r\n            } else {\r\n                if (async_mapper.hasOwnProperty(key)) {\r\n                    async_data[key] = async_mapper[key];\r\n                    is_open && callback(async_data[key]);\r\n                }\r\n                Object.defineProperty(async_mapper, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    set(data: any) {\r\n                        if (async_data.hasOwnProperty(key)) {\r\n                            debugger;\r\n                        }\r\n                        async_data[key] = data;\r\n                        if (is_open) {\r\n                            for (const cbfun of await_tasks[key]) {\r\n                                cbfun(data);\r\n                            }\r\n                        }\r\n                    },\r\n                    get() {\r\n                        return async_data[key];\r\n                    }\r\n                });\r\n                await_tasks[key] = [callback];\r\n            }\r\n        }\r\n    };\r\n    return async_mapper;\r\n}\r\nlet async_getter = AsyncGetter();\r\nexport {\r\n    async_getter,\r\n    token_hooks,\r\n    parse_next_statement,\r\n    get_inner_group,\r\n    extract_success,\r\n    parse_and_extract,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    _Validate,\r\n    reinterpretIdentifierAsKeyword,\r\n    reinterpretKeywordAsIdentifier,\r\n    attachLocation,\r\n    Cover,\r\n    Mark, isAligned,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    _SuccessCollector,\r\n    join_content,\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    ASSIGNMENT_PUNCTUATORS_PATTERN,\r\n    validateBinding, validateLineTerminator,\r\n    NODES,\r\n    TYPE_ALIAS,\r\n    createMatchTree,\r\n    isRestrictedWord,\r\n    isFutureReservedWord,\r\n    isStrictModeReservedWord,\r\n    validateIdentifier,\r\n    validateAssignment,\r\n    _Context,\r\n    _Option, _Or, _Series, _NonCapturing, _NonCollecting, _Mark, _Loop,\r\n}\r\n","//import { Token } from './interfaces'\r\nconst IdentifierStart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a]|[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\r\nconst IdentifierPart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a\\x30-\\x39]|[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\r\n\r\nexport default class {\r\n    public input: string;\r\n    public index: number;\r\n    public end: number;\r\n    public _volatility: any;\r\n    public _scopes: any;\r\n    private testCodePoint(regexp: RegExp) {\r\n        if (\r\n            (this.input.charCodeAt(this.index) & 0xfc00) === 0xd800\r\n            && (this.input.charCodeAt(this.index + 1) & 0xfc00) === 0xdc00\r\n        ) {\r\n            this._volatility = this.input[this.index] + this.input[this.index + 1];\r\n            return regexp.test(this._volatility) ? 2 : 0;\r\n        } else {\r\n            return regexp.test(this.input[this.index]) ? 1 : 0;\r\n        }\r\n    }\r\n    testUnicodeEscape(regexp: RegExp) {\r\n        let index = this.index + 1, code = 0;\r\n        if (this.input[index++] === \"u\") {\r\n            let cp = 0;\r\n            if (this.input[index] === \"{\") {\r\n                while (\r\n                    (code = this.hexValue(this.input.charCodeAt(++index))) >= 0\r\n                ) {\r\n                    cp = cp * 16 + code;\r\n                }\r\n                if (this.input[index++] !== \"}\") {/* || index < this.index + 5*/\r\n                    return 0;\r\n                }\r\n            } else {\r\n                let len = 4;\r\n                while (len--) {\r\n                    code = this.hexValue(this.input.charCodeAt(index++));\r\n                    if (code >= 0) {\r\n                        cp = cp * 16 + code;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return regexp.test(this.fromCodePoint(cp))\r\n                ? index - this.index\r\n                : -(index - this.index);\r\n        }\r\n        return 0;\r\n    }\r\n    scanHex(length: number = this.end): [number, number] {\r\n        let value = 0, code = 0, len = length;\r\n        while (len) {\r\n            code = this.hexValue(this.input.charCodeAt(this.index));\r\n            if (code >= 0) {\r\n                len--;\r\n                value = value * 16 + code;\r\n            } else {\r\n                break;\r\n            }\r\n            this.index++;\r\n        }\r\n        return [value, length - len];\r\n    }\r\n    hexValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 :\r\n            ch >= 0x41 && ch <= 0x46 ? ch - 0x41 + 10 :\r\n                ch >= 0x61 && ch <= 0x66 ? ch - 0x61 + 10 : -1;\r\n    }\r\n    decimalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 : -1;\r\n    }\r\n    octalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x37 ? ch - 0x30 : -1;\r\n    }\r\n    binaryValue(ch: number) {\r\n        return ch === 0x30 || ch == 0x31 ? ch - 0x30 : -1;\r\n    }\r\n    //https://github.com/jquery/esprima/blob/master/src/character.ts\r\n    isWhiteSpace(ch: number) {\r\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\r\n            (ch >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\r\n        /*return /^\\x20|\\x09|\\x0B|\\x0C|\\xA0|\\xfeff$/.test(char);*/\r\n    }\r\n    isLineTerminator(ch: number) {\r\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\r\n        /*return /^\\x0A|\\x0D|\\x2028|\\x2029$/.test(char);*/\r\n    }\r\n    fromCodePoint(cp: number) {\r\n        return this._volatility = cp < 0x10000\r\n            ? String.fromCharCode(cp)\r\n            : String.fromCharCode(0xd800 + (cp - 0x10000) >> 10)\r\n            + String.fromCharCode(0xdc00 + (cp - 0x10000) & 1023);\r\n    }\r\n    inIdentifierStart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierStart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierStart) : 0)\r\n            );\r\n        /*return /^[_$a-zA-Z\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n    inIdentifierPart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ||\r\n            (ch >= 0x30 && ch <= 0x39) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierPart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierPart) : 0)\r\n            );\r\n        /*return /^[\\w$\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n}","\r\n\r\nimport Character from './character'\r\nimport {\r\n    Position, SourceLocation, Token, SearchTree, NUMERIC_TYPE, Validate, NUMERIC_KEYWORD_MAPPINGS, MARKS\r\n} from \"./interfaces\";\r\n\r\n\r\nexport default class extends Character {\r\n    constructor(options?: Record<string, any>) {\r\n        super()\r\n        for (const key in options) {\r\n            this[key] = options[key];\r\n        }\r\n        //console.log(333, TOKEN_TYPES,TOKEN_TYPE_MAP);\r\n    }\r\n    tokens: Array<Token>;\r\n    curly_stack: Array<any>;\r\n    TYPE_ENUMS: Record<string, string | number>;\r\n    TOKEN_TYPE_MAPPERS: Record<string, string | number>;\r\n    PUNCTUATORS_TREE: SearchTree;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE: SearchTree;\r\n    public token_hooks: Record<string, (token: Token, tokenizer: this) => Token> = {};\r\n    public line_number: number;\r\n    public line_start: number;\r\n    public save_comments: boolean = true;\r\n    public error_logs: Array<any>;\r\n    public terminator_stack: Array<Validate>;\r\n    err(...args: any) {\r\n        //debugger;\r\n        this.error_logs.push.apply(this.error_logs, arguments);\r\n    }\r\n    init(input: string) {\r\n        this.line_number = 0;\r\n        this.line_start = 0;\r\n        this.index = 0;\r\n        this.input = input;\r\n        this.end = this.input.length;\r\n        this.error_logs = [];\r\n        this.tokens = [];\r\n        this.terminator_stack = [];\r\n        this.curly_stack = [];\r\n    }\r\n    tokenize(input: string): Array<Token> {\r\n        this.init(input);\r\n        while (this.nextToken());\r\n        return this.tokens;\r\n    }\r\n    nextToken() {\r\n        while (\r\n            this.index < this.end\r\n            && (\r\n                this.terminator_stack.length === 0\r\n                || this.tokens.length === 0\r\n                || !this.terminator_stack[0](this.tokens[this.tokens.length - 1])\r\n            )\r\n        ) {\r\n            let token = this._nextToken();\r\n            if (token) {\r\n                let hook = this.token_hooks[token.type];\r\n                hook && (token = hook(token, this));\r\n                if (this.save_comments || token.type !== this.TYPE_ENUMS.Comments) {\r\n                    this.tokens.push(token);\r\n                    return token;\r\n                }\r\n            } else if (this.index < this.end) {\r\n                this.err(this.createToken(\"error\", [this.index, ++this.index]))\r\n            }\r\n        }\r\n    }\r\n    createToken(\r\n        type: string | number,\r\n        range: [number, number],\r\n        value: any = this.input.slice(range[0], range[1]),\r\n        start: Position = {\r\n            line: this.line_number,\r\n            column: range[0] - this.line_start\r\n        },\r\n        end: Position = {\r\n            line: this.line_number,\r\n            column: range[1] - this.line_start\r\n        },\r\n    ): Token {\r\n        return {\r\n            type: type,\r\n            value,\r\n            range,\r\n            loc: {\r\n                start, end\r\n            }\r\n        };\r\n    }\r\n    match(node: SearchTree) {\r\n        let start = this.index, end = this.index;\r\n        let prev_node: Token;\r\n        do {\r\n            prev_node = node;\r\n            node = prev_node[this.input[end++]];\r\n        } while (node)\r\n        let target: any = prev_node[MARKS.END];\r\n        if (target && (target.type || (target = target(this)))) {\r\n            this.index = end - 1;\r\n            return target.scanner ?\r\n                target.scanner(this, start) :\r\n                this.createToken(\r\n                    this.TYPE_ENUMS[target.type] || target.type,\r\n                    [start, this.index],\r\n                    target.key\r\n                );\r\n        }\r\n    }\r\n    nextIdentifier(): Token | void {\r\n        let length = this.inIdentifierStart();\r\n        let token: Token;\r\n        if (length > 0) {\r\n            let start = this.index;\r\n            let str = \"\";\r\n            do {\r\n                str += length === 1 ? this.input[this.index] : this._volatility;\r\n                this.index += length;\r\n                length = this.inIdentifierPart();\r\n            } while (length > 0)\r\n            let type = this.TOKEN_TYPE_MAPPERS[\" \" + str];\r\n            token = this.createToken(\r\n                this.TYPE_ENUMS[type || \"Identifier\"],\r\n                [start, this.index]\r\n            );\r\n            this._volatility = str;\r\n            if (type && str.length !== this.index - start) {\r\n                this.err(token);\r\n            }\r\n        }\r\n        if (length < 0) {\r\n            this.err(this.createToken(\"error\", [this.index, this.index -= length]));\r\n        }\r\n        return token;\r\n    }\r\n    is_primary_expr_start() {\r\n        if (this.tokens.length) {\r\n            let last_node: any = this.tokens[this.tokens.length - 1];\r\n            return last_node.type === this.TYPE_ENUMS.Keyword\r\n                || last_node.type === this.TYPE_ENUMS.Punctuator && last_node.content === undefined;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    nextPunctuator(): Token | void {\r\n        return this.match(!this.is_primary_expr_start() ? this.PUNCTUATORS_TREE : this.PRIMARY_EXPR_START_PUNCTUATORS_TREE);\r\n    }\r\n\r\n    nextNumeric(): Token | void {\r\n        let start = this.index;\r\n        let ch = this.input.charCodeAt(this.index);\r\n        let number: number;\r\n        let flags = NUMERIC_TYPE.DECIMAL;\r\n        let _get_token = () => {\r\n            this._volatility = flags & NUMERIC_TYPE.OCTAL ? (flags & ~NUMERIC_TYPE.DECIMAL) : flags;\r\n            return this.createToken(this.TYPE_ENUMS.Numeric, [start, this.index]);\r\n        }\r\n        let _get_error = (message: string = \"Invalid or unexpected token\") => {\r\n            let error = _get_token();\r\n            error.error = message;\r\n            error.input = this.input.slice(start, this.index + 1);\r\n            this.err(error);\r\n            return error;\r\n        }\r\n        let decimalValue = this.decimalValue;\r\n        switch (ch) {\r\n            case 0x2e://\".\"\r\n                if (decimalValue(this.input.charCodeAt(this.index + 1)) >= 0) {\r\n                    this.index += 1;\r\n                    flags |= NUMERIC_TYPE.FLOAT;\r\n                    break;\r\n                } else {\r\n                    return;\r\n                }\r\n            case 0x30://\"0\"\r\n                flags = NUMERIC_KEYWORD_MAPPINGS[this.input[++this.index]];\r\n                if (!flags) {\r\n                    number = decimalValue(this.input.charCodeAt(this.index));\r\n                    if (number >= 0) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        number < 8 && (flags |= NUMERIC_TYPE.OCTAL);\r\n                    } else if (!this.inIdentifierStart()) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        return _get_token();\r\n                    } else {\r\n                        return _get_error();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                if (decimalValue(ch) < 0) {\r\n                    return;\r\n                }\r\n        }\r\n        if (flags & NUMERIC_TYPE.DECIMAL) {\r\n            while ((ch = this.input.charCodeAt(++this.index))) {\r\n                number = decimalValue(ch)\r\n                if (number >= 0) {\r\n                    number < 8 || (flags &= ~NUMERIC_TYPE.OCTAL);\r\n                    continue;\r\n                }\r\n                switch (ch) {\r\n                    case 0x65://\"e\"\r\n                    case 0x45://\"E\"\r\n                        if (!(flags & (NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.E;\r\n                            ch = this.input.charCodeAt(this.index + 1);\r\n                            if (ch === 0x2b || ch === 0x2d) {//+ -\r\n                                this.index += 1;\r\n                            }\r\n                            continue;\r\n                        } else {\r\n                            return _get_error();\r\n                        }\r\n                    case 0x2e://\".\"\r\n                        if (!(flags & (NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.FLOAT;\r\n                            continue;\r\n                        }\r\n                    default:\r\n                        return this.inIdentifierStart()\r\n                            ? _get_error()\r\n                            : _get_token();\r\n                }\r\n            }\r\n            return _get_token();\r\n        } else {\r\n            let test = flags & NUMERIC_TYPE.HEX\r\n                ? this.hexValue : (\r\n                    flags & NUMERIC_TYPE.BINARY\r\n                        ? this.binaryValue\r\n                        : this.octalValue\r\n                );\r\n            while (test(this.input.charCodeAt(++this.index)) >= 0);\r\n            return this.index > start + 3 && !this.inIdentifierStart()\r\n                ? _get_token()\r\n                : _get_error();\r\n        }\r\n    }\r\n    skipNonsenses() {\r\n        for (let cp: number; this.index < this.end; this.index++) {\r\n            cp = this.input.charCodeAt(this.index);\r\n            switch (true) {\r\n                case this.isWhiteSpace(cp):\r\n                    break;\r\n                case this.isLineTerminator(cp):\r\n                    this.line_number++;\r\n                    this.line_start = this.index + 1;\r\n                    break;\r\n                default:\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n    private _nextToken() {\r\n        return this.skipNonsenses() && (\r\n            this.nextIdentifier() ||\r\n            this.nextNumeric() ||\r\n            this.nextPunctuator()\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import Parser from './parser'\r\n\r\ninterface Position {\r\n    line: number,// >=0\r\n    column: number// >=0\r\n}\r\ninterface SourceLocation {\r\n    start: Position,\r\n    end: Position\r\n}\r\n\r\ninterface Node {\r\n    type?: string | number,\r\n    range?: [number, number],\r\n    loc?: SourceLocation,\r\n    [propName: string]: any\r\n}\r\n\r\ninterface Token extends Node {\r\n    value?: any,\r\n    content?: any,\r\n    regex?: { pattern: string, flags: string },\r\n    [propName: string]: any\r\n}\r\ninterface Expression extends Node {\r\n    elements?: Array<Expression>,\r\n    expressions?: Array<Expression>\r\n}\r\n\r\ntype Program = Expression;\r\ntype MatchTree = Record<\r\n    string,\r\n    any\r\n//(...args: any) => any | { [propName: string]: MatchTree }\r\n>;\r\ntype SearchTree = MatchTree | Record<\r\n    string,\r\n    number | string | Array<string>\r\n>;\r\n\r\nconst enum NUMERIC_TYPE {\r\n    BINARY = 0b1 << 0,\r\n    OCTAL = 0b1 << 1,\r\n    DECIMAL = 0b1 << 2,\r\n    HEX = 0b1 << 3,\r\n    //INTEGER = 0b1 << 4,\r\n    FLOAT = 0b1 << 5,\r\n    E = 0b1 << 6,\r\n    NAN = 0b1 << 7,\r\n}\r\n\r\nconst enum CONTEXT {\r\n    collected,\r\n    parser,\r\n    left,\r\n    right,\r\n    start,\r\n    end,\r\n    begin,\r\n    tokens,\r\n    rightAssociativeNode,\r\n    matched,\r\n    bindingSet,\r\n    labelSet,\r\n    strict,\r\n    isModule,\r\n    isExpression,\r\n    inFunctionBody,\r\n    inIteration,\r\n    inSwitch,\r\n    bindingElement,\r\n    spreadElement,\r\n    allowAwait,\r\n    allowYield,\r\n    length\r\n}\r\ninterface Context extends Array<any> {\r\n    [CONTEXT.collected]?: Record<string, Node | string | any | Array<Node | string | any>>,\r\n    [CONTEXT.parser]: Parser,\r\n    [CONTEXT.left]?: number,\r\n    [CONTEXT.right]?: number,\r\n    [CONTEXT.start]?: number,\r\n    [CONTEXT.end]?: number,\r\n    [CONTEXT.begin]?: number,\r\n    [CONTEXT.tokens]?: Array<Node>,\r\n    [CONTEXT.rightAssociativeNode]?: Node,\r\n    [CONTEXT.matched]?: Matched,\r\n    [CONTEXT.bindingSet]?: Array<string>,\r\n    [CONTEXT.labelSet]?: Array<string>,\r\n    [CONTEXT.strict]?: boolean,\r\n    [CONTEXT.isModule]?: boolean,\r\n    [CONTEXT.isExpression]?: boolean,\r\n    [CONTEXT.inIteration]?: boolean,\r\n    [CONTEXT.inFunctionBody]?: number,\r\n    [CONTEXT.inSwitch]?: boolean,\r\n    [CONTEXT.bindingElement]?: boolean,\r\n    [CONTEXT.spreadElement]?: boolean,\r\n\r\n    [CONTEXT.allowAwait]?: boolean,\r\n    [CONTEXT.allowYield]?: boolean,\r\n\r\n    tokens: Array<Token>,\r\n    getToken(index: number): Token,\r\n    wrap(key: number, value: any): Context,\r\n    unwrap(): Context,\r\n    store(...args: Array<CONTEXT | any>): number,\r\n    restore(point: number): number,\r\n}\r\n/*\r\nconst enum MATCH_STATUS {\r\n    END = 1,\r\n    ERROR = -1,\r\n    NEXT = 2,\r\n    ATTACH = 3\r\n}*/\r\n\r\ninterface Wrapper {\r\n    (): void,\r\n    [propName: string]: any\r\n}\r\nconst enum MATCHED {\r\n    precedence,\r\n    props,\r\n    wrapper,\r\n    handler,\r\n    validator,\r\n    filter,\r\n}\r\ninterface Mark {\r\n    key: string,\r\n    value: string,\r\n    data: (context: Context, index: number) => any\r\n}\r\ninterface Cover {\r\n    origin: any,\r\n    value: any\r\n}\r\ntype Operation = null | 0 | undefined | false;\r\ntype NodeProp = [string | Cover | Mark, number, Array<Pipe> | undefined] /*| Mark*/;\r\ntype Pipe = (context: Context, token: Token | null, index: number) => any | undefined;\r\ntype Connector = (context: Context, index: number) => void;\r\ninterface Matched extends Array<any> {\r\n    [MATCHED.precedence]: Precedence,\r\n    [MATCHED.props]: Array<NodeProp>,\r\n    [MATCHED.wrapper]: Wrapper,\r\n    [MATCHED.handler]?: (context: Context) => Operation | Node | Array<Node>,\r\n    [MATCHED.validator]?: (context: Context) => Operation | true | Node | Array<Node>,\r\n    [MATCHED.filter]?: (context: Context, left?: number, right?: number) => boolean,\r\n}\r\n\r\nconst enum MATCHED_RECORDS {\r\n    precedence,\r\n    left,\r\n    right,\r\n    matched\r\n}\r\ninterface MatchedRecords extends Array<any> {\r\n    [MATCHED_RECORDS.precedence]: Precedence,\r\n    [MATCHED_RECORDS.left]: number,\r\n    [MATCHED_RECORDS.right]: number,\r\n    [MATCHED_RECORDS.matched]: Matched\r\n}\r\n\r\n\r\nconst enum PRECEDENCE {\r\n    VALUE,\r\n    RIGHT_ASSOCIATIVE\r\n}\r\ninterface Precedence extends Array<any> {\r\n    [PRECEDENCE.VALUE]: number | true,\r\n    [PRECEDENCE.RIGHT_ASSOCIATIVE]: number | Number\r\n}\r\ntype Validate = (token: Token) => boolean;\r\n\r\n\r\nconst enum MARKS {\r\n    BOUNDARY = \"\",\r\n    DEEPTH = \" DEEP\",\r\n    IDENTIFIER = \" ID\",\r\n    END = \" END\",\r\n    TYPE_ONLY = \" TYPE\",\r\n    WALKER = \" WAL\",\r\n    TERMINAL = \" TER\",\r\n\r\n    EOF = \"\",\r\n    ESCAPE = \"\\\\\",\r\n\r\n    ERROR = \" ERR\",\r\n    NEXT = \" NEXT\",\r\n    ATTACH = \" ATT\",\r\n    STRING = \" STR\"\r\n\r\n    /*\r\n    FOLLOW = \" FOLLOW\",\r\n    NOT = \" NOT\",\r\n    OR = \" OR\",\r\n    AND = \" AND\",*/\r\n}\r\n\r\n\r\nenum NUMERIC_KEYWORD_MAPPINGS {\r\n    \".\" = NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.DECIMAL,\r\n    \"x\" = NUMERIC_TYPE.HEX,\r\n    \"b\" = NUMERIC_TYPE.BINARY,\r\n    \"o\" = NUMERIC_TYPE.OCTAL,\r\n\r\n    \"X\" = NUMERIC_TYPE.HEX,\r\n    \"B\" = NUMERIC_TYPE.BINARY,\r\n    \"O\" = NUMERIC_TYPE.OCTAL,\r\n};\r\nexport {\r\n    NUMERIC_KEYWORD_MAPPINGS,\r\n    MARKS,\r\n    Validate,\r\n    PRECEDENCE, Precedence,\r\n    NodeProp,\r\n    Mark, Cover,\r\n    Pipe,\r\n    Connector,\r\n    Position,\r\n    SourceLocation,\r\n    MATCHED_RECORDS,\r\n    MatchedRecords,\r\n    Matched,\r\n    MATCHED,\r\n    Token, Context,\r\n    CONTEXT, Expression,\r\n    Program, NUMERIC_TYPE, MatchTree, SearchTree,/* Tokenizer, Parser,*/ Node\r\n}","\r\nimport {\r\n    Token, SearchTree, MARKS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\n\r\nfunction createSearchTree(\r\n    data: Array<string | string[] | Record<string, any>>,\r\n    root: Record<string, any> = {},\r\n    block_list: Array<string> = []\r\n): SearchTree {\r\n    for (let item of data as any) {\r\n        let node = root;\r\n        switch (true) {\r\n            case typeof item === \"string\":\r\n                item = {\r\n                    type: \"Punctuator\",\r\n                    key: item,\r\n                }\r\n                break;\r\n            default:\r\n                item.type === undefined && (item.type = \"Punctuator\");\r\n                break;\r\n        }\r\n        if (~block_list.indexOf(item.key)) {\r\n            continue;\r\n        }\r\n        for (const part of item.key) {\r\n            node = node[part] || (node[part] = {});\r\n        }\r\n        if (node[MARKS.END] && !item.overload) {\r\n            let next_item = node[MARKS.END];\r\n            let curr_item = item;\r\n            if (typeof next_item === \"function\") {\r\n                if (curr_item.filter) {\r\n                    node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                        return curr_item.filter(tokenizer) ? curr_item : next_item(tokenizer);\r\n                    }\r\n                } else {\r\n                    node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                        return next_item(tokenizer) || curr_item;\r\n                    }\r\n                }\r\n                continue;\r\n            } else if (curr_item.filter) {\r\n                node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                    return curr_item.filter(tokenizer) ? curr_item : next_item;\r\n                }\r\n                continue;\r\n            } else {\r\n                console.warn(\"conflict:\", node, node[MARKS.END], item);\r\n            }\r\n        }\r\n        node[MARKS.END] = item.filter ?\r\n            function (tokenizer: Tokenizer) { return item.filter(tokenizer) && item; } :\r\n            item;\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\nfunction _Scanner(\r\n    use_escape_mode: boolean = false\r\n) {\r\n    return function (\r\n        tokenizer: Tokenizer,\r\n        start: number = tokenizer.index\r\n    ) {\r\n        let error: string;\r\n        let line_number = tokenizer.line_number;\r\n        let line_start = tokenizer.line_start;\r\n        let root = this.scan_tree;\r\n        let nodes: Array<any> = [];\r\n        let str = \"\";\r\n        let char: string;\r\n        let backslash_count = 0;\r\n        let token: Token;\r\n        let self = this;\r\n        if (use_escape_mode) {\r\n            let has_escape: number;\r\n            while (char = tokenizer.input[tokenizer.index++]) {\r\n                has_escape = backslash_count % 2;\r\n                if (char === MARKS.ESCAPE) {\r\n                    backslash_count += 1;\r\n                    if (has_escape) {\r\n                        str += char;\r\n                        token = _next(MARKS.ESCAPE);\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                    }\r\n                } else {\r\n                    str += char;\r\n                    backslash_count = 0;\r\n                    if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n                        tokenizer.index -= 1;\r\n                        token = _next(has_escape ? `${MARKS.ESCAPE}\\n` : \"\\n\");\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                        tokenizer.index += 1;\r\n                        tokenizer.line_number += 1;\r\n                        tokenizer.line_start = tokenizer.index;\r\n                    } else {\r\n                        token = _next(!has_escape ? char : MARKS.ESCAPE + char);\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            while (char = tokenizer.input[tokenizer.index]) {\r\n                str += char;\r\n                backslash_count = 0;\r\n                if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n                    token = _next(\"\\n\");\r\n                    if (token) {\r\n                        return token;\r\n                    }\r\n                    tokenizer.index += 1;\r\n                    tokenizer.line_number += 1;\r\n                    tokenizer.line_start = tokenizer.index;\r\n                } else {\r\n                    tokenizer.index += 1;\r\n                    token = _next(char);\r\n                    if (token) {\r\n                        return token;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if ((token = _next(MARKS.EOF))) {\r\n            return token;\r\n        } else {\r\n            let token = _get_token(tokenizer.index);\r\n            tokenizer.err(token);\r\n            return token;\r\n        }\r\n\r\n        function _next(key: string) {\r\n            let index = 0, node: any, res: any;\r\n            for (; index < nodes.length; index += 2) {\r\n                node = nodes[index][key];\r\n                if (node) {\r\n                    if (res = _finally(node, nodes[index + 1])) {\r\n                        return res;\r\n                    }\r\n                    nodes[index] = node;\r\n                } else {\r\n                    nodes.splice(index, 2);\r\n                    index -= 2;\r\n                }\r\n            }\r\n            if (node = root[key]) {\r\n                if (res = _finally(node, str.length - 1)) {\r\n                    return res;\r\n                }\r\n                nodes.push(node, str.length - 1);\r\n            }\r\n        }\r\n        function _get_token(end_index: number) {\r\n            tokenizer._scopes = self;\r\n            tokenizer._volatility = str.slice(0, end_index);\r\n            return tokenizer.createToken(\r\n                self.type,\r\n                [start, tokenizer.index],\r\n                undefined,\r\n                { line: line_number, column: start - line_start }\r\n            );\r\n        }\r\n        function _finally(node: Record<string, any>, end_index: number) {\r\n            node[MARKS.ERROR] && (error = node[MARKS.ERROR]);\r\n            let part: string = node[MARKS.ATTACH] ? node[MARKS.ATTACH](tokenizer, self) : node[MARKS.STRING];\r\n            if (part !== undefined) {\r\n                str = str.slice(0, end_index) + part;\r\n            }\r\n            switch (true) {\r\n                case node[MARKS.END] && true:\r\n                    if (node[MARKS.END] === true || node[MARKS.END](tokenizer, self)) {\r\n                        let token = _get_token(end_index);\r\n                        if (error) {\r\n                            token.error = error;\r\n                            tokenizer.err(token);\r\n                        }\r\n                        return token;\r\n                    }\r\n                    break;\r\n                case node[MARKS.NEXT] && true:\r\n                    tokenizer._scopes = self;\r\n                    tokenizer._volatility = str.slice(0, end_index);\r\n                    return node[MARKS.NEXT](tokenizer, self);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n    createSearchTree, _Scanner\r\n}\r\n\r\n\r\n/**\r\nfunction createScanTree(data: Array<any>[]) {\r\n    let root: Record<string, any> = {};\r\n    for (let branch of data) {\r\n        let node = root;\r\n        for (let i = 0, limit = branch.length - 1, part: string; i < limit; i++) {\r\n            part = branch[i];\r\n            node = node[part] || (node[part] = {});\r\n        }\r\n        let actions = branch[branch.length - 1];\r\n        for (let i = 0; i < actions.length; i += 2) {\r\n            node[actions[i]] = actions[i + 1];\r\n        }\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\n\r\n */","import {\r\n    Token, NUMERIC_TYPE, MARKS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\nimport { _Scanner, createSearchTree } from './head'\r\n\r\n\r\nlet TOKEN_TYPE_SET = [\r\n    [\r\n        \"Keyword\",\r\n        [\r\n            \"void\",\r\n            \"delete\",\r\n            \"new\",\r\n            \"class\", \"extends\",\r\n            \"function\",\r\n            \"throw\",\r\n            \"with\",\r\n            \"yield\",\r\n            \"in\", \"instanceof\", \"typeof\",\r\n            \"this\", \"super\",\r\n            \"var\", \"const\",// \"let\",\r\n            \"break\", \"continue\", \"return\",\r\n            \"if\", \"else\",\r\n            \"switch\", \"case\", \"default\",\r\n            \"try\", \"catch\", \"finally\",\r\n            \"do\", \"while\", \"for\",\r\n            \"await\",/*\"async\",*/\r\n            \"import\", \"export\",\r\n            \"debugger\",\r\n\r\n            \"enum\"//用于错误检测\r\n        ]\r\n    ],\r\n    [\"Identifier\", [\"let\", \"async\"]],//使 UnicodeEscape 的情况能被检测到报错\r\n    [\"Boolean\", [\"true\", \"false\"]],\r\n    [\"Null\", [\"null\"]]\r\n];\r\n\r\n\r\nlet octal_escape = {\r\n    //_state: MATCH_STATUS.ATTACH,\r\n    [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n        let code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index - 1));\r\n        let value = 0;\r\n        code && (self.octal = true);\r\n        let len = code <= 3 ? 2 : 1;\r\n        while (true) {\r\n            value = value * 8 + code;\r\n            code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index));\r\n            if (code < 0 || --len < 0) {\r\n                break;\r\n            }\r\n            self.octal = true;\r\n            tokenizer.index += 1;\r\n        }\r\n        return String.fromCharCode(value);\r\n    }\r\n};\r\nlet octal_escape_tree = {\r\n    \"\\\\0\": octal_escape,\r\n    \"\\\\1\": octal_escape,\r\n    \"\\\\2\": octal_escape,\r\n    \"\\\\3\": octal_escape,\r\n    \"\\\\4\": octal_escape,\r\n    \"\\\\5\": octal_escape,\r\n    \"\\\\6\": octal_escape,\r\n    \"\\\\7\": octal_escape,\r\n}\r\n\r\nlet strbase_scan_tree = {\r\n    [MARKS.ESCAPE + \"\\n\"]: { [MARKS.STRING]: \"\" },\r\n    \"\\\\n\": { [MARKS.STRING]: \"\\n\" },\r\n    \"\\\\r\": { [MARKS.STRING]: \"\\r\" },\r\n    \"\\\\t\": { [MARKS.STRING]: \"\\t\" },\r\n    \"\\\\b\": { [MARKS.STRING]: \"\\b\" },\r\n    \"\\\\f\": { [MARKS.STRING]: \"\\f\" },\r\n    \"\\\\v\": { [MARKS.STRING]: \"\\v\" },\r\n    \"\\\\u\": {\r\n        //_state: MATCH_STATUS.ATTACH,\r\n        [MARKS.ATTACH](tokenizer: Tokenizer) {\r\n            if (tokenizer.input[tokenizer.index] === \"{\") {\r\n                tokenizer.index++;\r\n                let [code] = tokenizer.scanHex();\r\n                if (tokenizer.input[tokenizer.index] === \"}\") {\r\n                    tokenizer.index++;\r\n                    if (code <= 0x10ffff) {\r\n                        return String.fromCharCode(code);\r\n                    }\r\n                }\r\n            } else {\r\n                let [code, len] = tokenizer.scanHex(4);\r\n                if (len === 4) {\r\n                    return String.fromCharCode(code);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    \"\\\\x\": {\r\n        //_state: MATCH_STATUS.ATTACH,\r\n        [MARKS.ATTACH](tokenizer: Tokenizer) {\r\n            let [code, len] = tokenizer.scanHex(2);\r\n            if (len === 2) {\r\n                return String.fromCharCode(code);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nlet not_allow_octal_escape = {\r\n    //_state: MATCH_STATUS.ERROR,\r\n    [MARKS.ERROR]: \"Octal escape sequences are not allowed in template strings\"\r\n}\r\n\r\n//let template_curly_stack = [];\r\nlet template_base = {\r\n    type: \"Template\",\r\n    scan_tree: {\r\n        [MARKS.EOF]: {\r\n            //_state: MATCH_STATUS.END,\r\n            [MARKS.ERROR]: \"Unexpected token\",\r\n            [MARKS.END](tokenizer: Tokenizer) {\r\n                tokenizer.curly_stack.shift();\r\n                return true;\r\n            }\r\n        },\r\n        \"\\\\0\": { [MARKS.STRING]: \"\\0\" },\r\n        \"\\\\1\": not_allow_octal_escape,\r\n        \"\\\\2\": not_allow_octal_escape,\r\n        \"\\\\3\": not_allow_octal_escape,\r\n        \"\\\\4\": not_allow_octal_escape,\r\n        \"\\\\5\": not_allow_octal_escape,\r\n        \"\\\\6\": not_allow_octal_escape,\r\n        \"\\\\7\": not_allow_octal_escape,\r\n        \"`\": {\r\n            [MARKS.END](tokenizer: Tokenizer) {\r\n                tokenizer.curly_stack.shift();\r\n                return true;\r\n            }\r\n        },\r\n        \"$\": {\r\n            \"{\": {\r\n                [MARKS.END]: true\r\n            }\r\n        },\r\n        ...strbase_scan_tree\r\n    },\r\n    scanner: _Scanner(true)\r\n}\r\nconst PUNCTUATORS: Array<any> = [\r\n    {\r\n        key: `\"`, type: \"String\",\r\n        scan_tree: {\r\n            '\"': {\r\n                [MARKS.END]: true\r\n            },\r\n            \"\\n\": {\r\n                //_state: MATCH_STATUS.ERROR\r\n                [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n            },\r\n            ...strbase_scan_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan: _Scanner(true),\r\n        octal: false,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            this.octal = false;\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: `'`, type: \"String\",\r\n        scan_tree: {\r\n            \"'\": {\r\n                [MARKS.END]: true\r\n            },\r\n            \"\\n\": {\r\n                //_state: MATCH_STATUS.ERROR\r\n                [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n            },\r\n            ...strbase_scan_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan: _Scanner(true),\r\n        octal: false,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            this.octal = false;\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: \"`\",\r\n        ...template_base,\r\n        escape_scan: _Scanner(true),\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            tokenizer.curly_stack.unshift(\"`\");\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: \"}\",\r\n        ...template_base,\r\n        filter(tokenizer: Tokenizer) {\r\n            return tokenizer.curly_stack[0] === \"`\";\r\n        }\r\n    },\r\n    {\r\n        key: '/*', bound: '*/', type: \"Comments\",\r\n        scan_tree: {\r\n            \"*\": {\r\n                \"/\": {\r\n                    //_state: MATCH_STATUS.END\r\n                    [MARKS.END]: true\r\n                }\r\n            },\r\n            [MARKS.EOF]: {\r\n                [MARKS.END]: true,\r\n                [MARKS.ERROR]: \"Unexpected token\"\r\n            }\r\n        },\r\n        scanner: _Scanner(false)\r\n    },\r\n    {\r\n        key: '//', bound: '\\n', type: \"Comments\",\r\n        scan_tree: {\r\n            \"\\n\": {\r\n                [MARKS.END]: true\r\n            },\r\n            [MARKS.EOF]: {\r\n                [MARKS.END]: true\r\n            }\r\n        },\r\n        scanner: _Scanner(false)\r\n    },\r\n\r\n    //[\"(\", \")\"], [\"[\", \"]\"], [\"{\", \"}\"],\r\n\r\n    \"(\", \")\", \"[\", \"]\", \"{\", \"}\",\r\n    ';', '.', '?.',\r\n    '++', '--', '~', '!',\r\n    '**', '*', '/', '%',\r\n    '+', '-',\r\n    '<<', '>>', '>>>',\r\n    '<', '>', '<=', '>=', '==', '!=', '===', '!==',\r\n    '&',\r\n    '^',\r\n    '|',\r\n    '&&',\r\n    '||',\r\n    '?', \":\",\r\n    '=', '+=', '-=', '*=', '/=', '%=', '**=', '<<=', '>>=', '>>>=', '&=', '|=', '^=',\r\n    '...',\r\n    ',',\r\n    '=>'\r\n];\r\n\r\nconst REGEXP_DESCRIPTOR = {\r\n    key: '/', type: \"RegularExpression\",\r\n    scan_tree: {\r\n        '/': {\r\n            [MARKS.END](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                return !self.class_marker;\r\n            }\r\n        },\r\n        '[': {\r\n            [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                self.class_marker = true;\r\n            }\r\n        },\r\n        ']': {\r\n            [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                self.class_marker = false;\r\n            }\r\n        },\r\n        '\\n': {\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        },\r\n        '\\\\\\n': {\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        },\r\n        [MARKS.EOF]: {\r\n            [MARKS.END]: true,\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        }\r\n    },\r\n    overload: true,\r\n    escape_scan: _Scanner(true),\r\n    class_marker: false,\r\n    scanner(tokenizer: Tokenizer, start: number) {\r\n        this.class_marker = false;\r\n        let token = this.escape_scan(tokenizer, start);\r\n        if (token) {\r\n            token.regex = {\r\n                pattern: token.value.slice(\r\n                    1, token.value[token.value.length - 1] !== \"/\" ? undefined : -1\r\n                ),\r\n                flags: \"\"\r\n            };\r\n            let start = tokenizer.index;\r\n            let length = 0;\r\n            do {\r\n                tokenizer.index += length;\r\n                length = tokenizer.inIdentifierPart();\r\n            } while (length)\r\n            if (start !== tokenizer.index) {\r\n                token.regex.flags = tokenizer.input.slice(start, tokenizer.index)\r\n                token.value += token.regex.flags;\r\n                token.range[1] += tokenizer.index - start;\r\n                token.loc.end.column += tokenizer.index - start;\r\n            }\r\n            return token;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n//const IS_RADIX = NUMERIC_TYPE.BINARY | NUMERIC_TYPE.OCTAL | NUMERIC_TYPE.HEX;\r\n\r\n\r\nconst TYPE_ENUMS = {\r\n    Identifier: \"Identifier\",\r\n    Keyword: \"Keyword\",\r\n    String: \"String\",\r\n    Boolean: \"Boolean\",\r\n    Numeric: \"Numeric\",\r\n    Punctuator: \"Punctuator\",\r\n    RegularExpression: \"RegularExpression\",\r\n    Template: \"Template\",\r\n    TemplateElement: \"TemplateElement\",\r\n    Comments: \"Comments\",\r\n    Null: \"Null\"\r\n};\r\n\r\n\r\nexport {\r\n    TYPE_ENUMS,\r\n    PUNCTUATORS,\r\n    TOKEN_TYPE_SET,\r\n    REGEXP_DESCRIPTOR\r\n}\r\n\r\n\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\r\nimport Tokenizer from \"./tokenizer\"\r\nimport {\r\n    NodeProp,\r\n    MATCHED,\r\n    Matched,\r\n    MATCHED_RECORDS,\r\n    MatchedRecords,\r\n    Token, Node, Pipe,\r\n    Mark as MarkInterface,\r\n    SearchTree, NUMERIC_TYPE, Context, CONTEXT,\r\n    SourceLocation,\r\n    PRECEDENCE, Precedence, Validate, MARKS, MatchTree\r\n} from \"./interfaces\";\r\n\r\nimport { _Context, TYPE_ALIAS, NODES, Mark, Cover, attachLocation, is_right_braces } from \"./syntax/head\";\r\n\r\ntype Extreme = MatchedRecords;\r\ntype Longest = MatchedRecords;\r\n\r\nconst { Script, Module } = NODES;\r\n\r\n\r\n\r\nexport default class extends Tokenizer {\r\n    SYNTAX_TREE: MatchTree;\r\n    EXPRESSION_TREE: MatchTree;\r\n    TYPE_ALIAS: Record<string, string[]> = TYPE_ALIAS;\r\n    padding_token: Token = {\r\n        type: MARKS.BOUNDARY,\r\n        value: MARKS.BOUNDARY\r\n    };\r\n    error_logs: Array<any>;\r\n    save_comments = false;\r\n    match_tree_stack: Array<MatchTree>;\r\n    context_stack: Array<Context>;\r\n    isExpression: (token: Token) => boolean;\r\n    isStatement: (token: Token) => boolean;\r\n    isStatementListItem: (token: Token) => boolean;\r\n    is_primary_expr_start() {\r\n        if (this.tokens.length) {\r\n            let last_node: any = this.tokens[this.tokens.length - 1];\r\n            return this.isStatementListItem(last_node)\r\n                || last_node.type === this.TYPE_ENUMS.Keyword\r\n                || last_node.type === this.TYPE_ENUMS.Punctuator && !(/^\\{\\}|\\(\\)|\\[\\]$/.test(last_node.value));\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    //token_hooks: Record<string, (token: Token, tokenizer?: Tokenizer) => Token> = token_hooks;\r\n    err(...args: any) {\r\n        debugger;\r\n        this.error_logs.push.apply(this.error_logs, args);\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n    parse(input: string) {\r\n        return this.parseScript(input);\r\n    }\r\n    parseModule(input: string) {\r\n        let tokens = this._parse(input, CONTEXT.isModule, true, CONTEXT.strict, true);\r\n        let module = new Module(tokens);\r\n        if (tokens.length) {\r\n            attachLocation(module, tokens[0], tokens[tokens.length - 1]);\r\n        }\r\n        return module;\r\n    }\r\n    parseScript(input: string) {\r\n        let tokens = this._parse(input);\r\n        let script = new Script(tokens);\r\n        if (tokens.length) {\r\n            attachLocation(module, tokens[0], tokens[tokens.length - 1]);\r\n        }\r\n        return script;\r\n    }\r\n    parseExpression(context: Context): Node {\r\n        context.wrap(CONTEXT.isExpression, true);\r\n        let res = this.parseNode(this.EXPRESSION_TREE, context, this.isExpression);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n    parseNode(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        test: (node: Node) => boolean\r\n    ): Node {\r\n        let tokens = context.tokens;\r\n        this.parseCustom(match_tree, context);\r\n        let res: Node;\r\n        if (tokens.length) {\r\n            let index = 0;\r\n            if (test(tokens[0])) {\r\n                index = 1;\r\n                res = tokens[0];\r\n            }\r\n            if (tokens.length > index) {\r\n                this.err(...tokens.slice(index));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    parseRangeAsNode(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n        test: (node: Node) => boolean\r\n    ): Node {\r\n        let res = this.parseRange(match_tree, context, left, lexcal_terminator, test);\r\n        if (!res.content) {\r\n            this.err(res);\r\n        }\r\n        return res.content;\r\n    }\r\n    parseRangeAsExpression(\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n    ): Node {\r\n        context.wrap(CONTEXT.isExpression, true);\r\n        let res = this.parseRangeAsNode(this.EXPRESSION_TREE, context, left, lexcal_terminator, this.isExpression);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n    parseRangeAsBlock(\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate = is_right_braces,\r\n    ) {\r\n        let res = this.parseRange(this.SYNTAX_TREE, context, left, lexcal_terminator);\r\n        res.type = \"Block\";\r\n        let tokens = res.content\r\n        if (tokens.length) {\r\n            if (!this.isStatementListItem(tokens[tokens.length - 1])) {\r\n                this.err(tokens.pop());\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private _parse(input: string, ...environments: Array<number | any>) {\r\n        //this.logs = [];\r\n        this.match_tree_stack = [];\r\n        this.context_stack = [];\r\n        this.init(input);\r\n        let context = _Context(this);\r\n        environments.length && context.store(...environments);\r\n        //this.parseBlock(context);\r\n        let tokens = context.tokens;\r\n        this.parseCustom(\r\n            this.SYNTAX_TREE,\r\n            context\r\n        );\r\n        if (tokens.length) {\r\n            if (!this.isStatementListItem(tokens[tokens.length - 1])) {\r\n                this.err(tokens.pop());\r\n            }\r\n        }\r\n        if (this.error_logs.length) {\r\n            console.warn(\"error:\", this.error_logs);\r\n        }\r\n        //console.log(\"logs:\", this.logs);\r\n        return this.tokens;\r\n    }\r\n    parseCustom(\r\n        root: MatchTree,\r\n        context: Context,\r\n        begin: number = 0,\r\n        test?: Function\r\n    ) {\r\n        let point = context.store(CONTEXT.begin, begin);\r\n        let cursor: number = begin - 1;\r\n        let backflow_tape: Array<number> = new Array(begin);\r\n        backflow_tape.push(cursor);\r\n        let extreme: Extreme;\r\n        let state: number;\r\n        this.context_stack.unshift(context);\r\n        this.match_tree_stack.unshift(root);\r\n        while (true) {\r\n            if (cursor < begin || context.getToken(cursor)) {\r\n                if (\r\n                    !(\r\n                        extreme\r\n                        && (\r\n                            extreme[MATCHED_RECORDS.right] < cursor\r\n                            && backflow_tape.length <= 3 + extreme[MATCHED_RECORDS.right]\r\n                            //匹配边界断句\r\n                        )\r\n                        && (\r\n                            (state = this.finallize(context, extreme))\r\n                            || (extreme = undefined)\r\n                        )\r\n                    )\r\n                ) {\r\n                    let longest = this.walk(\r\n                        root,\r\n                        context,\r\n                        cursor,\r\n                        backflow_tape,\r\n                        extreme?.[MATCHED_RECORDS.right]\r\n                    );\r\n                    //longest && this.logs.push(\"walk\", longest[MATCHED_RECORDS.left], longest[MATCHED_RECORDS.right], longest[MATCHED_RECORDS.matched][MATCHED.wrapper].name);\r\n                    if (longest) {\r\n                        let longest_precedence = longest[MATCHED_RECORDS.precedence];\r\n                        let extreme_precedence = extreme && extreme[MATCHED_RECORDS.precedence];\r\n                        if (\r\n                            (//如果该记录优先级为true，则立即处理\r\n                                longest_precedence[PRECEDENCE.VALUE] !== true\r\n                                || (extreme = longest, false)\r\n                            ) && (\r\n                                !extreme_precedence\r\n                                || !(\r\n                                    extreme_precedence[PRECEDENCE.VALUE] > longest_precedence[PRECEDENCE.VALUE]\r\n                                    || extreme_precedence[PRECEDENCE.RIGHT_ASSOCIATIVE] === longest_precedence[PRECEDENCE.VALUE] //左结合\r\n                                )\r\n                            ) || !(state = this.finallize(context, extreme))\r\n                        ) {\r\n\r\n                            extreme = longest;\r\n                            //cursor += 1;\r\n                            //也可以单步步进，不过这样更效率一些也和当前收集器无冲突\r\n                            cursor += longest[MATCHED_RECORDS.right] - longest[MATCHED_RECORDS.left] || 1;\r\n                            continue;\r\n                        }\r\n                    } else {\r\n                        cursor += 1;\r\n                        continue;\r\n                    }\r\n                }\r\n            } else if (\r\n                !(\r\n                    extreme\r\n                    && (state = this.finallize(context, extreme))\r\n                )\r\n            ) {\r\n                break;\r\n            }\r\n            if (extreme) {\r\n                if (\r\n                    test\r\n                    && extreme[MATCHED_RECORDS.left] <= begin\r\n                    && test(context.getToken(begin))\r\n                ) {\r\n                    context.restore(point);\r\n                    this.context_stack.shift();\r\n                    this.match_tree_stack.shift();\r\n                    return context.getToken(begin);\r\n                }\r\n                cursor = extreme[MATCHED_RECORDS.left];\r\n            }\r\n            cursor >= begin && state !== -1 && (cursor = backflow_tape[cursor]);\r\n            state = 0;\r\n            extreme = undefined;\r\n            backflow_tape.splice(cursor + 1, backflow_tape.length - (cursor + 1));\r\n        }\r\n        this.context_stack.shift();\r\n        this.match_tree_stack.shift();\r\n        context.restore(point);\r\n    }\r\n    parseRange(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n        test?: (node: Node) => boolean,\r\n    ) {\r\n        let tokens = context.tokens;\r\n        this.terminator_stack.unshift(lexcal_terminator);\r\n        this.parseCustom(\r\n            match_tree,\r\n            context,\r\n            left + 1\r\n        );\r\n        this.terminator_stack.shift();\r\n        let before_token = tokens[left];\r\n        let after_token = tokens[tokens.length - 1];\r\n        let value = before_token.value;\r\n        let end = tokens.length - 1;\r\n        if (lexcal_terminator(after_token)) {\r\n            value += after_token.value;\r\n        } else {\r\n            end += 1;\r\n            this.err(before_token);\r\n        }\r\n        let content: any = null, next = left + 1;\r\n        if (test) {\r\n            if (test(tokens[next])) {\r\n                content = tokens[next];\r\n                next += 1;\r\n            }\r\n            if (next < end) {\r\n                this.err(...this.tokens.splice(next, end - next));\r\n            }\r\n        } else {\r\n            content = tokens.splice(next, end - next);\r\n        }\r\n        let res: Token = {\r\n            type: this.TYPE_ENUMS.Punctuator,\r\n            value,\r\n            content\r\n        };\r\n        attachLocation(res, before_token, after_token);\r\n        tokens.splice(left, tokens.length - left, res);\r\n        return res;\r\n    }\r\n    walk(\r\n        root: MatchTree,\r\n        context: Context,\r\n        start: number,\r\n        backflow_tape: Array<number>,\r\n        minimum: number\r\n    ): Longest {\r\n        let padding_token = this.padding_token;\r\n        let TYPE_ALIAS = this.TYPE_ALIAS;\r\n        let tokens = context.tokens;\r\n        let begin = context[CONTEXT.begin];\r\n        //let steps: Array<number> = [];\r\n        return explore(\r\n            root,\r\n            start\r\n        );\r\n        function get_records(matched: Matched, end: number): MatchedRecords {\r\n            if (\r\n                !matched[MATCHED.filter]\r\n                || matched[MATCHED.filter](context, start, end)\r\n            ) {\r\n                return [\r\n                    matched[MATCHED.precedence],\r\n                    start,\r\n                    end,\r\n                    matched\r\n                ];\r\n            }\r\n        }\r\n        function explore(parent: MatchTree, index: number): Longest {\r\n\r\n            let res: Longest;\r\n            let matched: Matched;\r\n            if (parent[MARKS.WALKER]) {\r\n                parent[MARKS.WALKER](context, index - 1);\r\n            }\r\n            if (parent[MARKS.TERMINAL]) {\r\n                if (!(index - 1 <= minimum)) {\r\n                    matched = parent[MARKS.END];\r\n                    if (matched && (res = get_records(matched, index - 1))) {\r\n                        minimum = index - 1;\r\n                    }\r\n                }\r\n                return res;\r\n            }\r\n\r\n            let token = index >= begin\r\n                ? context.getToken(index) || (index <= tokens.length && padding_token)\r\n                : padding_token;\r\n            if (!token) {\r\n                return;\r\n            }\r\n            let has_backflow = false;\r\n            if (backflow_tape.length <= index + 1) {\r\n                has_backflow = true;\r\n                backflow_tape.push(start);\r\n            }\r\n            let matched_node: MatchTree;\r\n            let alias = TYPE_ALIAS[token.type];\r\n            let cursor = 0, length = 1, type: string | number;\r\n            let longest: Longest;\r\n            let node: MatchTree;\r\n            let value_node: MatchTree, type_node: MatchTree;\r\n            if (alias) {\r\n                length = alias.length;\r\n                type = alias[cursor];\r\n            } else {\r\n                type = token.type;\r\n            }\r\n            while (true) {\r\n                if (node = parent[type]) {\r\n                    res = undefined;\r\n                    if (\r\n                        !(\r\n                            (value_node = node[token.value])\r\n                            && (res = explore(value_node, index + 1))\r\n                        )\r\n                        && !(\r\n                            (type_node = node[MARKS.TYPE_ONLY])\r\n                            && (res = explore(type_node, index + 1))\r\n                        )\r\n                        && !(index <= minimum)\r\n                    ) {\r\n                        if (\r\n                            matched = (matched_node = value_node) && matched_node[MARKS.END]\r\n                            || (matched_node = type_node) && matched_node[MARKS.END]\r\n                        ) {\r\n                            if (\r\n                                (res = get_records(matched, index))\r\n                            ) {\r\n                                minimum = index;\r\n                            } else if (has_backflow && index > start) {\r\n                                backflow_tape.splice(index + 1, backflow_tape.length - index - 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    longest = res || longest;\r\n                }\r\n                if (++cursor >= length) {\r\n                    return longest;\r\n                } else {\r\n                    type = alias[cursor];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createNode(context: Context) {\r\n        let left = context[CONTEXT.left];\r\n        let right = context[CONTEXT.right];\r\n        let matched = context[CONTEXT.matched];\r\n        let tokens = context.tokens;\r\n        let begin = context[CONTEXT.begin];\r\n        let node: any = new matched[MATCHED.wrapper]();\r\n        let length = tokens.length;\r\n        let start = left, end = right < length ? right : length - 1;\r\n        let offset = left, key: string | Cover | Mark, pipes: Array<Pipe>, nth: number;\r\n        let token: any, res: any;\r\n        context[CONTEXT.collected] = node;\r\n\r\n        function restore_volatility() {\r\n            context[CONTEXT.left] = left;\r\n            context[CONTEXT.right] = right;\r\n            context[CONTEXT.matched] = matched;\r\n            context[CONTEXT.collected] = node\r\n        }\r\n\r\n        for (const prop of matched[MATCHED.props]) {\r\n            [key, nth, pipes] = prop as any;\r\n            if (key instanceof Mark) {\r\n                token = key.data(context, offset);\r\n                restore_volatility();\r\n                if (token === undefined) {\r\n                    continue;\r\n                }\r\n                key = key.key;\r\n            } else {\r\n                token = offset >= begin && offset < length ? tokens[offset] : null;\r\n\r\n                for (let i in pipes) {\r\n                    res = pipes[i](context, token, offset);\r\n                    res === undefined || (token = res);\r\n                    restore_volatility();\r\n                }\r\n                if (key instanceof Cover) {\r\n                    if (key.value === null) {\r\n                        if (offset === start) {\r\n                            offset < end && (start = offset + 1);\r\n                        } else if (offset > begin && offset - 1 < end) {\r\n                            end = offset - 1;\r\n                        }\r\n                    } else if (offset < length && end < offset) {\r\n                        end = offset;\r\n                    }\r\n                    offset += 1;\r\n                    continue;\r\n                } else if (offset < length && end < offset) {\r\n                    end = offset;\r\n                }\r\n                offset += 1;\r\n            }\r\n            if (nth <= 1) {\r\n                node[key] = nth === 0 ? token : [token];\r\n            } else {\r\n                node[key].push(token);\r\n            }\r\n        }\r\n\r\n        start >= begin || (start = begin);\r\n\r\n        let start_token = tokens[start];\r\n        let end_token = tokens[end];\r\n        attachLocation(node, start_token, end_token);\r\n        context[CONTEXT.start] = start;\r\n        context[CONTEXT.end] = end;\r\n        return node;\r\n    }\r\n    getToken(index: number) {\r\n        return this.tokens.length > index ? this.tokens[index] : this.nextToken();\r\n    }\r\n    finallize(\r\n        context: Context,\r\n        record: Extreme\r\n    ) {\r\n        let [, left, right, matched/*, steps*/] = record;\r\n        let validator = matched[MATCHED.validator];\r\n        let collected: any;\r\n        let start: number, end: number;\r\n        context[CONTEXT.left] = left;\r\n        context[CONTEXT.right] = right;\r\n        context[CONTEXT.matched] = matched;\r\n        let tokens = context.tokens;\r\n        let handler = matched[MATCHED.handler];\r\n        //this.logs.push(\"finallize\", left, right, matched[MATCHED.wrapper].name);\r\n        if (!validator || (collected = validator(context)) === true) {\r\n            collected = this.createNode(context);\r\n            start = context[CONTEXT.start];\r\n            end = context[CONTEXT.end];\r\n            if (handler) {\r\n                collected = handler(context);\r\n            }\r\n        } else if (collected) {\r\n            start = context[CONTEXT.start];\r\n            end = context[CONTEXT.end];\r\n        }\r\n        if (!collected) {\r\n            return collected === undefined || collected === false\r\n                ? 0\r\n                : (collected === null ? 1 : -1);\r\n        }\r\n        //debugger;\r\n        //this.logs.push(\"finallize\", collected);\r\n        let length = end - start + 1;\r\n        if (collected instanceof Array) {\r\n            tokens.splice(start, length, ...collected);\r\n        } else {\r\n            tokens.splice(start, length, collected);\r\n        }\r\n        return length;\r\n    }\r\n}\r\n","import {\r\n    Node, Token, Context, CONTEXT, MATCHED, MatchTree, MARKS\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    token_hooks,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    _Validate,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    createMatchTree,\r\n    _Option, _Or, _Series, _NonCollecting, _NonCapturing, _Mark,\r\n    TYPE_ALIAS, _Context, _Loop, NODES, validateIdentifier, validateAssignment,\r\n    validateBinding, validateLineTerminator, ASSIGNMENT_PUNCTUATORS_PATTERN, _SuccessCollector, join_content,\r\n\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    isAligned,\r\n    attachLocation,\r\n\r\n    reinterpretIdentifierAsKeyword,\r\n    reinterpretKeywordAsIdentifier,\r\n\r\n    extract_success,\r\n    parse_and_extract,\r\n} from './head'\r\n\r\nimport Parser from '../parser'\r\nimport Tokenizer from '../tokenizer'\r\n\r\nimport {\r\n    parseArrayPattern,\r\n    parseObjectPattern\r\n} from './pattern';\r\nconst Grouping = NODES.Grouping;\r\n\r\ninit_token_hooks();\r\n\r\nfunction walk_primary_expression(context: Context, index: number) {\r\n    context[CONTEXT.parser].parseRange(PRIMARY_EXPRESSION_TREE, context, index, is_right_parentheses);\r\n}\r\n\r\n\r\nconst ARGUMENTS_PATTERN = _Or(\r\n    _Punctuator(\"(\").walk(\r\n        walk_primary_expression\r\n    ),\r\n    \"Punctuator ()\"\r\n).pipe(\r\n    function (context: Context, token: Token, index: number) {\r\n        let parser = context[CONTEXT.parser];\r\n        let store = context.store(\r\n            CONTEXT.bindingElement, false,\r\n            CONTEXT.spreadElement, true,\r\n            CONTEXT.tokens, token.content\r\n        );\r\n        let res = parser.parseNode(ARGUMENTS_TREE, context, function (node: Token) { return node.type === \"Success\"; })\r\n        context.restore(store);\r\n        return res ? res.content : [];\r\n    }\r\n);\r\n\r\n\r\nconst PARAMS_PATTERN = _Or(\r\n    _Punctuator(\"(\").walk(\r\n        function (context: Context, left: number) {\r\n            let parser = context[CONTEXT.parser];\r\n            let store = context.store(\r\n                CONTEXT.bindingElement, true,\r\n                CONTEXT.spreadElement, true,\r\n                CONTEXT.bindingSet, []\r\n            );\r\n            parser.parseRange(\r\n                PARAMS_TREE, context, left, is_right_parentheses,\r\n                function (node: Token) { return node.type === \"Success\"; }\r\n            ).type = \"Params\";\r\n            context.restore(store);\r\n        }\r\n    ), _Pattern(\"Params\")\r\n).pipe(\r\n    function (context: Context, token: Token, left: number) {\r\n        let [collected, parser] = context;\r\n        let kind = collected.kind;\r\n        let params = token.content ? token.content.content : [];\r\n        let params_count = kind === \"get\" ? 0 : kind === \"set\" ? 1 : false;\r\n        if (params_count !== false && params.length !== params_count) {\r\n            parser.err(...params.splice(params_count, params.length - params_count));\r\n        }\r\n        return params;\r\n    }\r\n);\r\nconst BODY_PATTERN = _Or(\r\n    _Punctuator(\"{\").walk(\r\n        function (context: Context, left: number) {\r\n            let generator = !!this.generator, async = !!this.async;\r\n            let parser = context[CONTEXT.parser];\r\n            let body_context = _Context(parser);\r\n            body_context[CONTEXT.inFunctionBody] = left + 1;\r\n            body_context[CONTEXT.strict] = context[CONTEXT.strict];\r\n            body_context[CONTEXT.allowYield] = generator;\r\n            body_context[CONTEXT.allowAwait] = async;\r\n\r\n            let node = parser.parseRangeAsBlock(body_context, left);\r\n            /*parser.parseRange(\r\n                parser.SYNTAX_TREE, body_context, left, is_right_braces\r\n            )*/\r\n            node.type = \"Body\";\r\n            node.generator = generator;\r\n            node.async = async;\r\n            let block = new NODES.BlockStatement();\r\n            block.body = node.content;\r\n            attachLocation(block, node);\r\n            node.content = block;\r\n        },\r\n        true\r\n    ), \"Body\"\r\n);\r\nconst FUNCTION_BODY_PATTERN = _Or(\r\n    BODY_PATTERN\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        return token.content;\r\n    }\r\n);\r\n\r\nconst PrimaryExpressions: Record<string, any> = {\r\n    \"\": [\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"{}\"),\r\n                content: _Punctuator(\"{\").pipe(\r\n                    function (context: Context, token: Token, left: number) {\r\n                        return context[CONTEXT.parser].parseRange(\r\n                            PROPERTIES_TREE, context, left, is_right_braces\r\n                        ).content || [];\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"()\"),\r\n                content: _Punctuator(\"(\").walk(\r\n                    walk_primary_expression\r\n                ).pipe(\r\n                    function (context: Context, token: Token, index: number) {\r\n                        return token.content;\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"[]\"),\r\n                content: _Punctuator(\"[\").pipe(\r\n                    function (context: Context, node: Node, index: number) {\r\n                        return context[CONTEXT.parser].parseRange(\r\n                            PRIMARY_EXPRESSION_TREE, context, index, is_right_brackets\r\n                        ).content;\r\n                    }\r\n                )\r\n            }\r\n        },\r\n    ],\r\n    \"Identifier\": [\r\n    ],\r\n    \"Literal\": [//已在 tokenizer => token_hooks 中处理\r\n    ],\r\n    \"ThisExpression\": {\r\n        collector: {\r\n            token: _NonCollecting(\"Keyword this\")\r\n        }\r\n    },\r\n    \"TemplateLiteral\": {\r\n        filter(context: Context, left: number, right: number) {\r\n            let value = context.getToken(right).value;\r\n            return value[0] === \"`\";\r\n        },\r\n        collector: [\r\n            {\r\n                _: _NonCapturing(_Option(\"[Expression]\")),\r\n                expressions: _Mark(() => []),\r\n                quasis: _Pattern(\"Template\").pipe(\r\n                    function (context: Context, token: Token, index: number) {\r\n                        let [collected, parser] = context;\r\n                        let value: string;\r\n                        let expressions = collected.expressions;\r\n                        let quasis = [];\r\n                        let tail: boolean = false;\r\n                        let end: number;\r\n                        while (true) {\r\n                            token = context.getToken(index);\r\n                            value = token.value;\r\n                            token.value = \"\";\r\n                            if (value[value.length - 1] === \"`\") {\r\n                                end = -1;\r\n                                tail = true;\r\n                            } else {\r\n                                end = -2;\r\n                                tail = false;\r\n                            }\r\n                            quasis.push(\r\n                                {\r\n                                    type: \"TemplateElement\",\r\n                                    value: {\r\n                                        raw: value.slice(1, end),\r\n                                        cooked: parser._volatility\r\n                                    },\r\n                                    tail\r\n                                }\r\n                            );\r\n                            if (tail) {\r\n                                break;\r\n                            }\r\n                            expressions.push(\r\n                                parser.parseRangeAsExpression(context, index,\r\n                                    function (token: Token) {\r\n                                        return token.type === parser.TYPE_ENUMS.Template\r\n                                            && token.value[0] === \"}\";\r\n                                    }\r\n                                )\r\n                            )\r\n                        }\r\n                        return quasis;\r\n                    }\r\n                ),\r\n            }\r\n        ]\r\n    },\r\n    \"FunctionExpression\": [\r\n\r\n        {\r\n            collector: [\r\n                {\r\n                    async: _Or(\r\n                        _Series(_Mark(true), _NonCollecting(\"Keyword async\")),\r\n                        _Mark(false)\r\n                    ),\r\n                    __: _NonCollecting(\"Keyword function\"),\r\n                    generator: _Or(\r\n                        _Series(_Mark(true), _NonCollecting(\"Punctuator *\")),\r\n                        _Mark(false)\r\n                    ),\r\n                    id: _Or(IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                    params: PARAMS_PATTERN,\r\n                    body: FUNCTION_BODY_PATTERN,\r\n                    expression: _Mark(false)\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, left] = context;\r\n                context[CONTEXT.start] = context[CONTEXT.end] = left;\r\n                return reinterpretIdentifierAsKeyword(context.getToken(left))\r\n                //return parser.parseKeyword(context.getToken(left));\r\n            },\r\n            filter: [\r\n                function () {\r\n                    return false;\r\n                },\r\n                isAligned\r\n            ],\r\n            collector: [\r\n                { _: _Series(\"Identifier async\", \"Identifier\") },\r\n                {\r\n                    async: \"Identifier async\",\r\n                    _next: _NonCapturing(\"Keyword function\"),\r\n                },\r\n                {\r\n                    async: \"Identifier async\",\r\n                    params: _NonCapturing(\r\n                        _Punctuator(\"(\").walk(\r\n                            walk_primary_expression\r\n                        ), \"Punctuator ()\", \"Identifier\"),\r\n                    token: _NonCapturing(\"Punctuator =>\"),\r\n                },\r\n            ]\r\n        }\r\n    ],\r\n    \"ArrowFunctionExpression\": {\r\n        handler: [\r\n            null,\r\n            function (context: Context) {\r\n                let [collected, parser, left, right] = context;\r\n                let token = context.getToken(right);\r\n                token.value = \"_=>\";\r\n                let body_context = _Context(parser);\r\n                body_context[CONTEXT.strict] = context[CONTEXT.strict];\r\n                body_context[CONTEXT.allowAwait] = collected.async;\r\n                if (\r\n                    parser.parseCustom(\r\n                        parser.EXPRESSION_TREE,\r\n                        body_context,\r\n                        left,\r\n                        (node: Node) => true\r\n                    )\r\n                ) {\r\n                    return null;\r\n                }\r\n            },\r\n            null\r\n        ],\r\n        precedence: [3, true, new Number(3)],\r\n        collector: [\r\n            {//占位使 () 不会被单独收集为表达式\r\n                async: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Keyword async\")),\r\n                    _Mark(false)\r\n                ),\r\n                generator: _Mark(false),\r\n                id: _Mark(null),\r\n                params: _Or(\r\n                    _Punctuator(\"()\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context.wrap(CONTEXT.tokens, token.content);\r\n                            let res = parse_params(context, token.content);\r\n                            context.unwrap();\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    _Pattern(\"Identifier\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            validateAssignment(context, token);\r\n                            return [token];\r\n                        }\r\n                    )\r\n                ),\r\n                token: _NonCollecting(\"Punctuator =>\"),\r\n                body: FUNCTION_BODY_PATTERN,\r\n                expression: _Mark(false)\r\n            },\r\n            [\"body\", _Mark()],\r\n            [\r\n                //_=>作用为隔断匹配，使后续的表达式使用当前方法声明的环境\r\n                [\"token\", _NonCollecting(\"Punctuator _=>\")],//\"Punctuator _=>\"\r\n                [\"body\", \"[Expression]\"],\r\n                [\"expression\", _Mark(true)]\r\n            ]\r\n        ]\r\n    },\r\n    \"ClassExpression\": {\r\n        collector: [\r\n            {\r\n                _: _NonCollecting(\"Keyword class\"),\r\n                id: _Or(IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                superClass: _Or(\r\n                    _Series(\r\n                        _NonCollecting(\"Keyword extends\"),\r\n                        IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n                    ),\r\n                    _Mark(null)\r\n                ),\r\n                body:\r\n                    _Punctuator(\"{\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let parser = context[CONTEXT.parser];\r\n                            let res = parser.parseRange(\r\n                                METHOD_DEFINITIONS_TREE, context, left, is_right_braces,\r\n                                function (node: Token) { return node.type === \"Success\"; }\r\n                            );\r\n\r\n                            return {\r\n                                type: \"ClassBody\",\r\n                                body: res.content?.content || [],\r\n                                range: res.range,\r\n                                loc: res.loc\r\n                            };\r\n                        }\r\n                    )\r\n            }\r\n        ]\r\n    },\r\n    \"Super\": {\r\n        validator(context: Context) {\r\n            let [, parser, left, right] = context;\r\n            if (!context[CONTEXT.inFunctionBody] || right === left) {\r\n                parser.err(context.getToken(left));\r\n            }\r\n            return true;\r\n        },\r\n        collector: {\r\n            token: _NonCollecting(\"Keyword super\"),\r\n            _next: _NonCapturing(\"Punctuator ( . [\")\r\n        }\r\n    },\r\n}\r\n\r\nconst Expressions: Record<string, any> = async_getter.Expressions = {\r\n    ...PrimaryExpressions,\r\n    \"\": PrimaryExpressions[\"\"].concat(\r\n        {\r\n            validator(context: Context) {\r\n                let parser = context[CONTEXT.parser];\r\n                let left = context[CONTEXT.left];\r\n                let token = context.getToken(left);\r\n                let store = context.store(\r\n                    CONTEXT.bindingSet, null,\r\n                    CONTEXT.bindingElement, false,\r\n                    CONTEXT.tokens, token.content\r\n                );\r\n                let grouping = new Grouping(\r\n                    parser.parseExpression(context)\r\n                );\r\n                context.restore(store);\r\n                context[CONTEXT.start] = context[CONTEXT.end] = left;\r\n                return grouping;\r\n            },\r\n            collector: {\r\n                token: \"Punctuator ()\"\r\n            }\r\n        }\r\n    ),\r\n    \"ArrayExpression\": {\r\n        precedence: 20,\r\n        collector: {\r\n            elements: _Punctuator(\"[]\").pipe(\r\n                function (context: Context, node: Node, index: number) {\r\n                    let store = context.store(\r\n                        CONTEXT.spreadElement, true,\r\n                        CONTEXT.bindingElement, false\r\n                    );\r\n                    let res = parse_and_extract(ARRAY_ELEMENTS_TREE, context, node);\r\n                    context.restore(store);\r\n                    return res;\r\n                }\r\n            ),\r\n        }\r\n\r\n    },\r\n    \"ObjectExpression\": {\r\n        precedence: 20,\r\n        collector: {\r\n            properties: _Punctuator(\"{}\").pipe(\r\n                function (context: Context, node: Node, index: number) {\r\n                    return parse_and_extract(OBJECT_PROPERTIES_TREE, context, node);\r\n                    //return node.content || [];\r\n                }\r\n            ),\r\n        }\r\n\r\n    },\r\n    \"TaggedTemplateExpression\": {\r\n        collector: [\r\n            {\r\n                tag: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                quasi: \"TemplateLiteral\"\r\n            }\r\n        ]\r\n    },\r\n    \"MemberExpression\": [\r\n        {\r\n            precedence: 20,\r\n            collector: {\r\n                object: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                property: _Series(\r\n                    _NonCollecting(\"Punctuator .\"),\r\n                    _Or(\r\n                        \"Identifier\",\r\n                        _Pattern(\"Keyword\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                return reinterpretKeywordAsIdentifier(token);\r\n                                //return context[CONTEXT.parser].parseIdentifier(token);\r\n                            }\r\n                        )\r\n                    )\r\n                ),\r\n                computed: _Mark(false)\r\n            }\r\n        },\r\n        {\r\n            filter: \"CallExpression\",\r\n            precedence: 20,\r\n            collector: {\r\n                object: EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                property: _Or(\r\n                    _Punctuator(\"[\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let store = context.store(CONTEXT.bindingElement, false);\r\n                            let res = context[CONTEXT.parser].parseRangeAsExpression(context, left, is_right_brackets);\r\n                            context.restore(store);\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    _Punctuator(\"[]\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let store = context.store(CONTEXT.tokens, token.content, CONTEXT.bindingElement, false);\r\n                            let res = context[CONTEXT.parser].parseExpression(context);\r\n                            context.restore(store);\r\n                            return res;\r\n                        }\r\n                    )\r\n                ),\r\n                computed: _Mark(true)\r\n            }\r\n        }\r\n    ],\r\n\r\n    \"MetaProperty\": {\r\n        handler([collected]: Context) {\r\n            collected.meta.type = \"Identifier\";\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                meta: \"Keyword import\",\r\n                _: _NonCollecting(\"Punctuator .\"),\r\n                property: \"Identifier meta\"\r\n            },\r\n            {\r\n                meta: \"Keyword new\",\r\n                _: _NonCollecting(\"Punctuator .\"),\r\n                property: \"Identifier target\"\r\n            }\r\n        ]\r\n    },\r\n    \"NewExpression\": {\r\n        precedence: new Number(20)/*_Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,//memberexpression new Number(20)\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword new\"),\r\n                callee: _Or(\r\n                    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _Pattern(\"ArrowFunctionExpression\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context[CONTEXT.parser].err(token);\r\n                        }\r\n                    )\r\n                ),\r\n                arguments: _Or(_Mark(() => []), ARGUMENTS_PATTERN)\r\n            }\r\n        ]\r\n    },\r\n    \"CallExpression\": {\r\n        precedence: 20/* _Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,\r\n        filter(context: Context, left: number) {\r\n            let tokens = context.tokens;\r\n            let first_token = tokens[left], second_token = tokens[left + 1];\r\n            if (second_token === context[CONTEXT.rightAssociativeNode]) {\r\n                return false;\r\n            }\r\n            let first_token_type = first_token.type;\r\n            if (\r\n                first_token instanceof Grouping\r\n                || first_token_type !== \"ArrowFunctionExpression\"\r\n            ) {\r\n                return true;\r\n            }\r\n        },\r\n        collector: {\r\n            callee: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n            arguments: ARGUMENTS_PATTERN\r\n        }\r\n\r\n    },\r\n    \"UpdateExpression\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [collected] = context;\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            },\r\n            precedence: 17,\r\n            collector: {\r\n                operator: \"Punctuator ++ --\",\r\n                argument: _Or(\"MemberExpression\", IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n                prefix: _Mark(true),\r\n                /*_: _++a(b)*/\r\n            }\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let collected = context[CONTEXT.parser].createNode(context);\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            },\r\n            filter(context: Context, left: number, right: number) {\r\n                return isAligned(context, left, left + 1);\r\n            },\r\n            precedence: 18,\r\n            collector: {\r\n                argument: _Or(\"MemberExpression\", IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n                operator: \"Punctuator ++ --\",\r\n                prefix: _Mark(false),\r\n                _: _Option(\r\n                    _NonCapturing(\r\n                        _Punctuator(\"[\", \"(\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                context[CONTEXT.rightAssociativeNode] = token;\r\n                            }\r\n                        ),\r\n                        _Punctuator(\".\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                context[CONTEXT.parser].err(token);\r\n                            }\r\n                        )\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    ],\r\n    \"AwaitExpression\": [\r\n        {\r\n            precedence: 17,\r\n            filter(context: Context) {\r\n                return context[CONTEXT.allowAwait];\r\n            },\r\n            collector: {\r\n                token: _NonCollecting(\"Keyword await\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n            }\r\n        },\r\n        {\r\n            handler([{ token }]: Context) {\r\n                return reinterpretKeywordAsIdentifier(token);\r\n                //return parser.parseIdentifier(collected.token);\r\n            },\r\n            filter(context: Context) {\r\n                return !context[CONTEXT.allowAwait];\r\n            },\r\n            collector: {\r\n                token: \"Keyword await\",\r\n            }\r\n        },\r\n    ],\r\n    \"UnaryExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.operator = collected.operator.value;\r\n            return collected;\r\n        },\r\n        precedence: 17,\r\n        collector: [\r\n            {\r\n                operator: _Or(\"Punctuator ~ ! + -\", \"Keyword delete void typeof\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                prefix: _Mark(true)\r\n            }\r\n        ]\r\n    },\r\n    \"BinaryExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.operator = collected.operator.value;\r\n            return collected;\r\n        },\r\n        validator(context: Context) {\r\n            return context[CONTEXT.right] - context[CONTEXT.left] >= 2\r\n        },\r\n        precedence: [16, 15, 14, 13, 12, 11, 10, 9, 8, 7],\r\n        collector: [\r\n            {\r\n                left: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                operator: `Punctuator **`,\r\n                right: _Option(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN)\r\n            },\r\n            [\"operator\", `Punctuator * / %`],\r\n            [\"operator\", `Punctuator + -`],\r\n            [\"operator\", `Punctuator << >> >>>`],\r\n            [\"operator\", _Or(`Punctuator < <= > >=`, `Keyword in instanceof`)],\r\n            [\"operator\", `Punctuator == != === !==`],\r\n            [\"operator\", `Punctuator &`],\r\n            [\"operator\", `Punctuator ^`],\r\n            [\"operator\", `Punctuator |`],\r\n            [\"operator\", `Punctuator ??`]\r\n        ]\r\n    },\r\n    \"LogicalExpression\": {\r\n        validator(context: Context) {\r\n            if (context[CONTEXT.right] - context[CONTEXT.left] === 2) {\r\n                let collected = context[CONTEXT.parser].createNode(context);\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            }\r\n        },\r\n        precedence: [6, 5],\r\n        collector: [\r\n            {\r\n                left: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                operator: \"Punctuator &&\",\r\n                right: _Option(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN)\r\n            },\r\n            [\"operator\", \"Punctuator ||\"]\r\n        ]\r\n    },\r\n    \"ConditionalExpression\": [\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, left, right] = context;\r\n                if (right - left >= 4) {\r\n                    return true;\r\n                }\r\n                if (!context[CONTEXT.isExpression] || context[CONTEXT.bindingElement]) {\r\n                    let store = context.store(CONTEXT.isExpression, true, CONTEXT.bindingElement, null);\r\n                    parser.parseCustom(\r\n                        parser.EXPRESSION_TREE,\r\n                        context,\r\n                        left,\r\n                        (node: Node) => node.type === \"ConditionalExpression\"\r\n                    );\r\n                    context.restore(store);\r\n                    return null;\r\n                }\r\n            },\r\n            precedence: new Number(3),//与 Assignment 为右优先\r\n            collector: [\r\n                {\r\n                    test: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,//EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS\r\n                    token: _NonCollecting(\"Punctuator ?\")\r\n                },\r\n                [\"consequent\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN],\r\n                [\"_\", _NonCollecting(\"Punctuator :\")],\r\n                [\"alternate\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN]\r\n            ]\r\n        },\r\n    ],\r\n    \"YieldExpression\": [\r\n        {\r\n            /*filter(context: Context) {\r\n                return context[CONTEXT.allowYield];\r\n            },*/\r\n            precedence: 2,\r\n            collector: [\r\n                {\r\n                    token: _NonCollecting(\"Keyword yield\"),\r\n                    _: _NonCollecting(\"Punctuator *\"),\r\n                    argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    delegate: _Mark(true)\r\n                },\r\n                {\r\n                    token: _NonCollecting(\"Keyword yield\"),\r\n                    argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    delegate: _Mark(false)\r\n                }\r\n            ]\r\n        },\r\n        /*{\r\n            handler([{ token }]: Context) {\r\n                return reinterpretKeywordAsIdentifier(token)\r\n                //return parser.parseIdentifier(collected.token);\r\n            },\r\n            filter(context: Context) {\r\n                return !context[CONTEXT.allowYield];\r\n            },\r\n            collector: {\r\n                token: \"Keyword yield\"\r\n            }\r\n        },*/\r\n    ],\r\n    \"AssignmentExpression\": {\r\n        validator: \"LogicalExpression\",\r\n        precedence: new Number(3),//Right-associative\r\n        collector: {\r\n            left: _Or(\r\n                _Or(\"[Expression]\").pipe(\r\n                    function (context: Context, expr: Node) {\r\n                        context[CONTEXT.parser].err(expr);\r\n                    }\r\n                ),\r\n                \"AssignmentExpression\",\r\n                \"MemberExpression\",\r\n                \"AssignmentPattern\",\r\n                \"ArrayPattern\",\r\n                \"ObjectPattern\",\r\n                IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n            ),\r\n            operator: ASSIGNMENT_PUNCTUATORS_PATTERN,\r\n            right: _Option(\"[Expression]\")//占位避免错误断句\r\n        }\r\n    },\r\n    \"SequenceExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            let expressions: Array<Node> = collected.expressions;\r\n            if (expressions[0] instanceof NODES.SequenceExpression) {\r\n                expressions[0].expressions.push(expressions[1]);\r\n                collected.expressions = expressions[0].expressions\r\n            }\r\n            return collected\r\n        },\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if (right - left === 2) {\r\n                return true;\r\n            }\r\n        },\r\n        precedence: 1,\r\n        collector: {\r\n            expressions: _Series(\r\n                EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _NonCollecting(\"Punctuator ,\"),\r\n                _Option(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst COMPUTED_PROPERTY_NAME_PATTERN = _Punctuator(\"[]\").pipe(\r\n    function (context: Context, token: Token) {\r\n        let [collected, parser] = context;\r\n        collected.computed = true;\r\n        context.wrap(CONTEXT.tokens, token.content)\r\n        let res = parser.parseExpression(context);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n);\r\n\r\nconst LITERAL_PROPERTY_NAME_PATTERN = _Or(\"Identifier\", \"Keyword\", \"Literal\").pipe(\r\n    function (context: Context, key: Token) {\r\n        let [, parser] = context;\r\n        if (key instanceof Grouping) {\r\n            parser.err(key);\r\n        } else {\r\n            switch (key.type) {\r\n                case \"Keyword\":\r\n                    return reinterpretKeywordAsIdentifier(key);\r\n                //return parser.parseIdentifier(key);\r\n                case \"Literal\":\r\n                    if (key.regex) {\r\n                        parser.err(key);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n);\r\nconst PROPERTY_NAME_PATTERN = _Or(COMPUTED_PROPERTY_NAME_PATTERN, LITERAL_PROPERTY_NAME_PATTERN);\r\n\r\n\r\nconst MethodDefinitions = {\r\n    ..._SuccessCollector(_Pattern(\"MethodDefinition\")),\r\n    \"\": {\r\n        validator(context: Context) {\r\n            context[CONTEXT.start] = context[CONTEXT.end] = context[CONTEXT.right];\r\n            return [];\r\n        },\r\n        collector: {\r\n            _: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n            __: \"Punctuator ;\"\r\n        }\r\n    },\r\n    MethodDefinition: {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            let { value } = collected;\r\n            collected.kind = value.kind;\r\n            delete value.kind;\r\n            collected.computed = value.computed;\r\n            delete value.computed;\r\n            collected.key = value.key;\r\n            delete value.key;\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                key: _Mark(\"\"),\r\n                static: _Mark(true),\r\n                computed: _Mark(false),\r\n                _static: _NonCollecting(\"Identifier static\"),\r\n                value: \"FunctionExpression\",\r\n                kind: _Mark(\"\"),\r\n            },\r\n            [\r\n                [\"static\", _Mark(false)],\r\n                [\"_static\", _Mark()]\r\n            ]\r\n        ]\r\n    },\r\n    FunctionExpression: {\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                static: _Option(_NonCapturing(\"Identifier static\")),\r\n                async: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Identifier async\")),\r\n                    _Mark(false)\r\n                ),\r\n                generator: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Punctuator *\")),\r\n                    _Mark(false)\r\n                ),\r\n                kind: _Mark(\"method\"),\r\n                computed: _Mark(false),\r\n                key: PROPERTY_NAME_PATTERN,\r\n                id: _Mark(null),\r\n                params: PARAMS_PATTERN,\r\n                expression: _Mark(false),\r\n                body: FUNCTION_BODY_PATTERN\r\n            },\r\n            [\r\n                [\"generator\", _Mark(false)],\r\n                [\r\n                    \"kind\", _Or(\"Identifier get set\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            return token.value;\r\n                        }\r\n                    )\r\n                ]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst Arguments = {\r\n    \"Success\": {\r\n        handler: join_content,\r\n        //precedence: 0,\r\n        collector: {\r\n            success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n            content: _Or(\"SpreadElement\", EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n            _: _Or(_NonCollecting(\"Punctuator ,\"), MARKS.BOUNDARY, _NonCapturing(\"Punctuator )\")),\r\n        }\r\n    }\r\n}\r\n\r\nconst Params = {\r\n    \"Success\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            if (collected.content instanceof Grouping) {\r\n                parser.err(collected.content);\r\n            }\r\n            return join_content(context);\r\n        },\r\n        collector: [\r\n            {\r\n                success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                content: \"AssignmentPattern\",\r\n                _: _Or(_NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY), _NonCapturing(\"Punctuator )\")),\r\n            },\r\n            [\r\n                \"content\", _Or(\"Identifier\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        validateBinding(context, token);\r\n                    }\r\n                )\r\n            ],\r\n            [\"content\", _Or(\"ArrayPattern\", \"ObjectPattern\")],\r\n            [\r\n                [\"content\", \"RestElement\"],\r\n                [\"_\", _Or(_NonCollecting(MARKS.BOUNDARY), _NonCapturing(\"Punctuator )\"))]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst ArrayElements = {\r\n    \"Success\": {\r\n        handler: join_content,\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                content: _Or(\"SpreadElement\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN),\r\n                _: _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY),\r\n            },\r\n            [\r\n                [\"content\", _Mark(null)],\r\n                [\"_\", _NonCollecting(\"Punctuator ,\")]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst Properties = {\r\n    \"Property\": {\r\n        handler(context: Context) {\r\n            let [collected, parser, left, right] = context;\r\n            let { value: [params, body] } = collected;\r\n            let expr = new NODES.FunctionExpression();\r\n            expr.id = null;\r\n            expr.params = params;\r\n            expr.body = body.content;\r\n            expr.generator = body.generator;\r\n            expr.expression = false;\r\n            expr.async = body.async;\r\n            attachLocation(expr, collected, context.getToken(right - 1));\r\n            collected.value = expr;\r\n            collected.type = \"ObjectProperty\"\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Punctuator ,\", \"ObjectProperty\"),\r\n                async: _Option(_NonCollecting(\"Identifier async\")),\r\n                generator: _Option(_NonCollecting(\"Punctuator *\")),\r\n                kind: _Mark(\"init\"),\r\n                computed: _Mark(false),\r\n                key: PROPERTY_NAME_PATTERN,\r\n                value: _Series(PARAMS_PATTERN, BODY_PATTERN),\r\n                _next: _Or(\r\n                    _NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"),\r\n                    _NonCapturing(\"Punctuator }\")\r\n                ),\r\n                //_NonCapturing(MATCH_MARKS.BOUNDARY, \"Punctuator ,\", \"Punctuator }\"),\r\n                method: _Mark(true),\r\n                shorthand: _Mark(false)\r\n            },\r\n            [\r\n                [\"async\", _Mark()],\r\n                [\"generator\", _Mark()],\r\n                [\r\n                    \"kind\", _Or(\r\n                        _Series(_NonCollecting(\"Identifier get\"), _Mark(\"get\")),\r\n                        _Series(_NonCollecting(\"Identifier set\"), _Mark(\"set\"))\r\n                    )\r\n                ],//\"Identifier get set\"\r\n                [\"method\", _Mark(false)]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst ObjectProperties = {\r\n    ..._SuccessCollector(_Or(\r\n        \"Property\",\r\n        _Or(\"ObjectProperty\").pipe(\r\n            function (context: Context, token: Token) {\r\n                token.type = \"Property\";\r\n            }\r\n        )\r\n    )),\r\n    \"Property\": {\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                key: PROPERTY_NAME_PATTERN,//\"TemplateLiteral\"\r\n                value: _Series(\r\n                    _NonCollecting(\"Punctuator :\"),\r\n                    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n                ),\r\n                _next: _Or(_NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"), _NonCapturing(\"Punctuator }\")),\r\n                kind: _Mark(\"init\"),\r\n                computed: _Mark(false),\r\n                method: _Mark(false),\r\n                shorthand: _Mark(false),\r\n            },\r\n            [\r\n                [\"key\", \"Identifier\"],\r\n                [\"value\", (window as any).test1 = _Mark(function (context: Context) {\r\n                    return context[CONTEXT.collected].key;\r\n                })],\r\n                [\"shorthand\", _Mark(true)]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n/*\r\nlet PRIMARY_EXPRESSION_TREE = createMatchTree(\r\n    PrimaryExpressions\r\n)\r\nlet METHOD_DEFINITIONS_TREE = createMatchTree(\r\n    MethodDefinitions, PRIMARY_EXPRESSION_TREE\r\n);\r\nlet PROPERTIES_TREE = createMatchTree(\r\n    Properties,\r\n    PRIMARY_EXPRESSION_TREE\r\n);*/\r\n\r\nlet PRIMARY_EXPRESSION_TREE: MatchTree,\r\n    METHOD_DEFINITIONS_TREE: MatchTree,\r\n    PROPERTIES_TREE: MatchTree,\r\n    UNIT_EXPRESSION_TREE: MatchTree,\r\n    ARRAY_ELEMENTS_TREE: MatchTree,\r\n    OBJECT_PROPERTIES_TREE: MatchTree,\r\n    PARAMS_TREE: MatchTree,\r\n    ARGUMENTS_TREE: MatchTree,\r\n    EXPRESSION_TREE: MatchTree;\r\n\r\n\r\n\r\nasync_getter.get(\r\n    \"Patterns\",\r\n    function (Patterns: Record<string, any>) {\r\n        PRIMARY_EXPRESSION_TREE = createMatchTree(\r\n            PrimaryExpressions\r\n        )\r\n        METHOD_DEFINITIONS_TREE = createMatchTree(\r\n            MethodDefinitions, PRIMARY_EXPRESSION_TREE\r\n        );\r\n        PROPERTIES_TREE = createMatchTree(\r\n            Properties,\r\n            PRIMARY_EXPRESSION_TREE\r\n        );\r\n\r\n        UNIT_EXPRESSION_TREE = createMatchTree(\r\n            [Expressions, Patterns],\r\n            undefined,\r\n            [\"SequenceExpression\"]\r\n        );\r\n        ARRAY_ELEMENTS_TREE = createMatchTree(ArrayElements, UNIT_EXPRESSION_TREE);\r\n\r\n        OBJECT_PROPERTIES_TREE = createMatchTree(\r\n            ObjectProperties,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        PARAMS_TREE = createMatchTree(\r\n            Params,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        ARGUMENTS_TREE = createMatchTree(\r\n            Arguments,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        EXPRESSION_TREE = createMatchTree(\r\n            { SequenceExpression: Expressions.SequenceExpression }\r\n            , UNIT_EXPRESSION_TREE\r\n        );\r\n        async_getter.EXPRESSION_TREE = EXPRESSION_TREE;\r\n        async_getter.UNIT_EXPRESSION_TREE = UNIT_EXPRESSION_TREE;\r\n    }\r\n)\r\n\r\n\r\nasync_getter.get(\"Expressions\", function (expressions: Record<string, any>) {\r\n    for (const type_name in expressions) {\r\n        if (type_name) {\r\n            TYPE_ALIAS[type_name] = [type_name, \"[Expression]\"];\r\n        }\r\n    }\r\n});\r\nexport default Expressions;\r\nexport {\r\n    PrimaryExpressions,\r\n    Expressions,\r\n    parseArrayPattern,\r\n    parseObjectPattern,\r\n    parse_params\r\n};\r\nfunction parse_params(context: Context, tokens: Array<Token>) {//\r\n    if (tokens.length) {\r\n        let parser = context[CONTEXT.parser];\r\n        let restore = context.store(\r\n            CONTEXT.tokens, tokens,\r\n            CONTEXT.bindingElement, true\r\n        );\r\n        context[CONTEXT.strict] && context.wrap(CONTEXT.bindingSet, []);\r\n        parser.parseCustom(PARAMS_TREE, context);\r\n        context.restore(restore);\r\n        return extract_success(parser, tokens);\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\nfunction init_token_hooks() {\r\n    function getLiteral(parse_value: (token: Token, tokenizer: Tokenizer) => any, token: Token, tokenizer: Tokenizer) {\r\n        return {\r\n            type: \"Literal\",\r\n            value: parse_value(token, tokenizer),\r\n            raw: token.value,\r\n            range: token.range,\r\n            loc: token.loc\r\n        }\r\n    }\r\n\r\n    let getStringLiteral = getLiteral.bind(null, (token: Token, tokenizer: Tokenizer) => tokenizer._volatility);\r\n    let getRegularLiteral = getLiteral.bind(null, (token: Token, tokenizer: Tokenizer) => {\r\n        let regex = token.regex;\r\n        try {\r\n            return new RegExp(regex.pattern, regex.flags);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    token_hooks.Keyword = function (token: Token, parser: Parser) {\r\n        let context = parser.context_stack[0];\r\n        if (!context[CONTEXT.allowYield] && token.value === \"yield\") {\r\n            return reinterpretKeywordAsIdentifier(token);\r\n        }\r\n        return token;\r\n    };\r\n    token_hooks.Identifier = reinterpretKeywordAsIdentifier;\r\n    token_hooks.Numeric = getLiteral.bind(null, (token: Token) => Number(token.value));\r\n    token_hooks.Boolean = getLiteral.bind(null, (token: Token) => token.value === \"true\");\r\n    token_hooks.String = function (token: Token, parser: Parser) {\r\n        token = getStringLiteral(token, parser);\r\n        if (parser._scopes.octal && parser.context_stack[0][CONTEXT.strict]) {\r\n            parser.err(token);\r\n        }\r\n        return token;\r\n    };\r\n    token_hooks.Null = getLiteral.bind(null, () => null);\r\n    token_hooks.RegularExpression = function (token: Token, tokenizer: Tokenizer) {\r\n        let res = getRegularLiteral(token, tokenizer);\r\n        res.regex = token.regex;\r\n        return res;\r\n    };\r\n}\r\n","\r\n\r\nimport {\r\n    Context, CONTEXT, SourceLocation, Node, Token, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    isRestrictedWord,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, NODES, TYPE_ALIAS,\r\n    validateBinding, validateLineTerminator, createMatchTree, join_content, _NonCapturing\r\n} from './head'\r\n//import { Expressions, UNIT_EXPRESSION_TREE } from './expression';\r\n\r\nlet Grouping = NODES.Grouping;\r\n\r\n\r\nfunction get_variable_declarator(context: Context, id: Node, init: Node, range: [number, number], loc: SourceLocation): Node {\r\n    let parser = context[CONTEXT.parser];\r\n    if (id instanceof Grouping) {\r\n        parser.err(id);\r\n    } else if (context[CONTEXT.strict]) {\r\n        init || validateBinding(context, id);\r\n    } if (id.name === \"let\") {\r\n        let kind = context.tokens[context[CONTEXT.begin] - 1];\r\n        if (kind.value === \"let\" || kind.value === \"const\") {\r\n            parser.err(id);\r\n        }\r\n    }\r\n    return {\r\n        type: \"VariableDeclarator\",\r\n        id, init, range, loc\r\n    };\r\n}\r\n\r\nlet VariableDeclarators = {\r\n    Success: {\r\n        handler: [\r\n            join_content,\r\n            function (context: Context) {\r\n                let [collected] = context;\r\n                validateLineTerminator(context);\r\n                collected.content = join_content(context).content;\r\n                return collected;\r\n            }\r\n        ],\r\n        precedence: [true, 0],\r\n        collector: [\r\n            {\r\n                success: _Or(\"Success\", MARKS.BOUNDARY),\r\n                content: _Or(\r\n                    _Pattern(\"Identifier\").pipe(\r\n                        function (context: Context, identifier: Node) {\r\n                            return get_variable_declarator(\r\n                                context,\r\n                                identifier,\r\n                                null,\r\n                                identifier.range,\r\n                                identifier.loc\r\n                            );\r\n                        }\r\n                    ),\r\n                    _Pattern(\"AssignmentPattern\").pipe(\r\n                        function (context: Context, pattern: Node) {\r\n                            return get_variable_declarator(\r\n                                context,\r\n                                pattern.left,\r\n                                pattern.right,\r\n                                pattern.range,\r\n                                pattern.loc\r\n                            );\r\n                        }\r\n                    )\r\n                ),\r\n                _next: _NonCollecting(\"Punctuator ,\"),\r\n            },\r\n            [\r\n                [\"type\", _Mark(\"VariableDeclarators\")],\r\n                [\"_next\", _Option(\"Punctuator ;\")]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nlet VARIABLE_DECLARATOR_TREE: MatchTree;\r\n\r\nasync_getter.get(\r\n    \"UNIT_EXPRESSION_TREE\",\r\n    function (UNIT_EXPRESSION_TREE: MatchTree) {\r\n        VARIABLE_DECLARATOR_TREE = createMatchTree(VariableDeclarators, UNIT_EXPRESSION_TREE);\r\n    }\r\n);\r\n\r\nfunction reinterpreat_expression_as_declaration(context: Context, expr: Node) {\r\n    let [collected, parser] = context;\r\n    expr.type = collected.type;\r\n    if (expr.id) {\r\n        if (isRestrictedWord(expr.id.name)) {\r\n            parser.err(expr.id);\r\n        }\r\n    } else {\r\n        parser.err(expr);\r\n    }\r\n    for (let key in expr) {\r\n        collected[key] = expr[key];\r\n    }\r\n    return expr.id;\r\n}\r\n\r\nconst Declarations: Record<string, any> = async_getter.Declarations = {\r\n    \"ClassDeclaration\": { //<= ClassExpression\r\n        filter(context: Context, left: number, right: number) {\r\n            let tokens = context.tokens;\r\n            return !(tokens[right] instanceof Grouping);\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                id: _Pattern(\"ClassExpression\").pipe(reinterpreat_expression_as_declaration)\r\n            }\r\n        ]\r\n    },\r\n    \"FunctionDeclaration\": {\r\n        filter: \"ClassDeclaration\",\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                id: _Pattern(\"FunctionExpression\").pipe(reinterpreat_expression_as_declaration)\r\n            }\r\n        ]\r\n    },\r\n    \"VariableDeclaration\": [\r\n        {\r\n            validator: [\r\n                function (context: Context) {\r\n                    let [, parser, left] = context;\r\n                    context.wrap(CONTEXT.bindingElement, true);\r\n                    let res = parser.parseCustom(\r\n                        VARIABLE_DECLARATOR_TREE,\r\n                        context,\r\n                        left + 1,\r\n                        (node: Node) => node.type === \"VariableDeclarators\"\r\n                    );\r\n                    context.unwrap();\r\n                    return res && 0;\r\n                }, null\r\n            ],\r\n            collector: [\r\n                {\r\n                    //_: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                    kind: _Or(\"Keyword var const let\", \"Identifier let\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return token.name === undefined ? token.value : token.name;\r\n                        }\r\n                    ),\r\n                    declarations: _Or(\r\n                        \"Identifier\",\r\n                        \"Punctuator [ {\"\r\n                    )\r\n                },\r\n                [\r\n                    [\"declarations\", _Pattern(\"VariableDeclarators\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return token.content;\r\n                        }\r\n                    )],\r\n                ]\r\n            ]\r\n        }\r\n    ]\r\n\r\n};\r\nasync_getter.get(\"Declarations\", function (declarations: Record<string, any>) {\r\n    for (const type_name in declarations) {\r\n        type_name && (TYPE_ALIAS[type_name] = [type_name, \"[Declaration]\"]);\r\n    }\r\n\r\n})\r\nexport default Declarations;\r\n","\r\n\r\nimport {\r\n    Token, Node, Context, CONTEXT, MatchTree\r\n} from './interfaces';\r\n\r\nimport { createSearchTree } from './lexical/head'\r\n\r\nimport {\r\n    TYPE_ENUMS,\r\n    PUNCTUATORS,\r\n    TOKEN_TYPE_SET,\r\n    REGEXP_DESCRIPTOR\r\n} from \"./lexical/index\";\r\n\r\nimport Parser from './parser';\r\nimport TokenizerOrigin from './tokenizer';\r\n\r\nimport { async_getter, token_hooks, createMatchTree } from './syntax/head'\r\n\r\nimport Expressions from './syntax/expression'\r\nimport Declarations from './syntax/declaration'\r\nimport Statements from './syntax/statement'\r\nimport ModuleDeclarations from './syntax/module_declaration'\r\n\r\n\r\nasync_getter.open();\r\nlet EXPRESSION_TREE: MatchTree = async_getter.EXPRESSION_TREE;\r\n\r\nconst SYNTAX_TREE = createMatchTree([\r\n    Declarations,\r\n    ModuleDeclarations,\r\n    Statements\r\n], EXPRESSION_TREE);\r\n\r\n\r\nlet EXPRESSION_ITEM_PATTERN = {};\r\nlet DECLARATION_ITEM_PATTERN = {};\r\nlet STATEMENT_ITEM_PATTERN = {};\r\nlet STATEMENT_LIST_ITEM_PATTERN = {};\r\nlet MODULE_ITEM_PATTERN = {};\r\nfor (\r\n    const [descriptor, patterns]\r\n    of\r\n    [\r\n        [\r\n            Expressions,\r\n            [EXPRESSION_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            Declarations,\r\n            [DECLARATION_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            Statements,\r\n            [STATEMENT_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            ModuleDeclarations,\r\n            [MODULE_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n    ] as Array<[Record<string, any>, Array<Record<string, boolean>>]>\r\n) {\r\n    for (const key in descriptor) {\r\n        if (key) {\r\n            for (const pattern of patterns) {\r\n                pattern[key] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isExpression(node: Node) {\r\n    return EXPRESSION_ITEM_PATTERN[node.type];\r\n}\r\nfunction isDeclaration(node: Node) {\r\n    return DECLARATION_ITEM_PATTERN[node.type];\r\n}\r\nfunction isStatement(node: Node) {\r\n    return STATEMENT_ITEM_PATTERN[node.type];\r\n}\r\nfunction isStatementListItem(node: Node) {\r\n    return STATEMENT_LIST_ITEM_PATTERN[node.type];\r\n}\r\nfunction isModuleItem(node: Node) {\r\n    return MODULE_ITEM_PATTERN[node.type];\r\n}\r\n\r\n\r\nconst TOKEN_TYPE_MAPPERS: Record<string, string | number> = TOKEN_TYPE_SET.reduce(\r\n    (map, [type, id_set]) => {\r\n        for (let id of id_set) {\r\n            map[\" \" + id] = type;\r\n        }\r\n        return map;\r\n    }, {}\r\n);\r\nconst PUNCTUATORS_TREE = createSearchTree(PUNCTUATORS);\r\nconst PRIMARY_EXPR_START_PUNCTUATORS_TREE = createSearchTree(\r\n    [REGEXP_DESCRIPTOR],\r\n    createSearchTree(PUNCTUATORS, undefined, [\"/=\"]),\r\n);\r\n\r\n\r\n\r\nclass Tokenizer extends TokenizerOrigin {\r\n    TYPE_ENUMS = TYPE_ENUMS;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\r\n    PUNCTUATORS_TREE = PUNCTUATORS_TREE;\r\n}\r\nclass Dison extends Parser {\r\n    token_hooks = token_hooks;\r\n    TYPE_ENUMS = TYPE_ENUMS;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\r\n    PUNCTUATORS_TREE = PUNCTUATORS_TREE;\r\n    TOKEN_TYPE_MAPPERS = TOKEN_TYPE_MAPPERS;\r\n    SYNTAX_TREE = SYNTAX_TREE;\r\n    EXPRESSION_TREE = EXPRESSION_TREE;\r\n\r\n    isExpression = isExpression;\r\n    isStatement = isStatement;\r\n    isStatementListItem = isStatementListItem;\r\n    isDeclaration = isDeclaration;\r\n    isModuleItem = isModuleItem;\r\n}\r\nexport {\r\n    Tokenizer,\r\n    Dison as Parser\r\n};\r\nexport default Dison;\r\n","\r\nimport {\r\n    Node, Token, Context, CONTEXT, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    attachLocation,\r\n    createMatchTree,\r\n    _Option, _Or, _Series, _NonCollecting, _NonCapturing, _Mark,\r\n    TYPE_ALIAS, _Context, _Loop, NODES,\r\n    validateBinding, validateLineTerminator, ASSIGNMENT_PUNCTUATORS_PATTERN, _SuccessCollector, join_content, TOPLEVEL_ITEM_PATTERN,\r\n    extract_success,\r\n    parse_and_extract,\r\n    get_inner_group,\r\n    _Pattern,\r\n} from './head'\r\n\r\n//import { UNIT_EXPRESSION_TREE } from './expression';\r\nconst Grouping = NODES.Grouping;\r\n\r\nlet UNIT_EXPRESSION_TREE: Record<string, any>;\r\nlet PETTERN_ELEMENTS_TREE: Record<string, any>;\r\nlet PATTERN_PROPERTIES_TREE: Record<string, any>;\r\n\r\n//console.log(123123, UNIT_EXPRESSION_TREE, UNIT_EXPRESSION_TREE);\r\n\r\nasync_getter.get(\"UNIT_EXPRESSION_TREE\", function (data: MatchTree) {\r\n    UNIT_EXPRESSION_TREE = data;\r\n    PETTERN_ELEMENTS_TREE = createMatchTree(\r\n        PatternElements,\r\n        UNIT_EXPRESSION_TREE\r\n    );\r\n    PATTERN_PROPERTIES_TREE = createMatchTree(\r\n        PatternProperties,\r\n        UNIT_EXPRESSION_TREE\r\n    );\r\n});\r\n\r\n\r\nconst Patterns: Record<string, any> = async_getter.Patterns = {\r\n    ArrayPattern: {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.is_binding || context.wrap(CONTEXT.bindingSet, null);\r\n            let res = parseArrayPattern(context, collected.elements);\r\n            collected.is_binding || context.unwrap();\r\n            return res;\r\n        },\r\n        precedence: 20,\r\n        filter: [\r\n            null,\r\n            function (context: Context) {\r\n                return context[CONTEXT.bindingElement]/* === context[CONTEXT.tokens]*/;\r\n            }\r\n        ],\r\n        collector: [\r\n            {\r\n                elements: _Or(\"Punctuator []\"),\r\n                _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN),//+=\r\n            },\r\n            {\r\n                _prev: _NonCapturing(\"Punctuator  ...\", MARKS.BOUNDARY, \"Success\"),\r\n                elements: _Or(\"Punctuator []\"),\r\n                is_binding: _Mark(true)\r\n            }\r\n        ]\r\n    },\r\n    ObjectPattern: {\r\n        handler: function (context: Context) {\r\n            let [collected] = context;\r\n            collected.is_binding || context.wrap(CONTEXT.bindingSet, null);\r\n            let res = parseObjectPattern(context, collected.properties);\r\n            collected.is_binding || context.unwrap();\r\n            return res;\r\n        },\r\n        precedence: 20,\r\n        filter: [\r\n            null, null,\r\n            function (context: Context, left: number, right: number) {\r\n                return context[CONTEXT.bindingElement]/* === tokens*/\r\n                    || context[CONTEXT.isExpression];\r\n            },\r\n            function (context: Context) {\r\n                return context[CONTEXT.bindingElement] /*=== context[CONTEXT.tokens]*/;\r\n            }\r\n        ],\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN),\r\n                properties: _Or(\"Punctuator {}\"),\r\n                _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN)\r\n            },\r\n            [\r\n                [\"_prev\", _NonCapturing(\"Punctuator  ,\")],\r\n                [\"is_binding\", _Mark(true)]\r\n            ],\r\n            [\"_prev\", _Mark()],\r\n            [\r\n                [\"_prev\", _NonCapturing(\"Punctuator ...\", MARKS.BOUNDARY, \"Success\")],\r\n                [\"_next\", _Mark()],\r\n            ]\r\n        ]\r\n    },\r\n    AssignmentPattern: {\r\n        filter(context: Context) {\r\n            return context[CONTEXT.bindingElement]/* === context[CONTEXT.tokens]*/;\r\n        },\r\n        precedence: 1.5,\r\n        collector: {\r\n            _: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n            left: _Or(\r\n                \"ArrayPattern\", \"ObjectPattern\",\r\n                _Or(\"Identifier\").pipe(\r\n                    function (context: Context, identifier: Node) {\r\n                        if (identifier instanceof Grouping) {\r\n                            context[CONTEXT.parser].err(identifier);\r\n                        } else {\r\n                            validateBinding(context, identifier);\r\n                        }\r\n                    }\r\n                )\r\n            ),\r\n            __: _NonCollecting(\"Punctuator =\"),\r\n            right: \"[Expression]\"\r\n        }\r\n    },\r\n    \"\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [{ token }, parser, left, right] = context;\r\n                token = get_inner_group(token);\r\n                let store = context.store(\r\n                    CONTEXT.tokens, token.content,\r\n                    CONTEXT.bindingElement, true,\r\n                    CONTEXT.bindingSet, null\r\n                );\r\n                let node = parser.parseNode(\r\n                    UNIT_EXPRESSION_TREE,\r\n                    context,\r\n                    node => parser.isExpression(node)\r\n                        || node.type === \"ArrayPattern\"\r\n                        || node.type === \"ObjectPattern\"\r\n                        || node.type === \"AssignmentPattern\",\r\n                );\r\n                context.restore(store);\r\n                if (!node) {\r\n                    parser.err(token);\r\n                }\r\n                return new Grouping(node, token);\r\n            },\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(\r\n                        _Series(\"Keyword export\", \"Keyword default\"),\r\n                        \"Punctuator ,\", \"Success\", TOPLEVEL_ITEM_PATTERN, ASSIGNMENT_PUNCTUATORS_PATTERN\r\n                    ),\r\n                    token: _Or(\"Punctuator ()\"),\r\n                    _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN)\r\n                }\r\n            ]\r\n        },\r\n\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, , right] = context;\r\n                let argument = context.getToken(right);\r\n                argument instanceof Grouping && parser.err(argument);\r\n                return true;\r\n            },\r\n            filter(context: Context) {\r\n                return context[CONTEXT.spreadElement];\r\n            },\r\n            precedence: 1.5,\r\n            collector: {\r\n                type: _Mark(\"SpreadElement\"),\r\n                token: _NonCollecting(\"Punctuator ...\"),\r\n                argument: \"[Expression]\"\r\n            }\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, , right] = context;\r\n                let argument = context.getToken(right);\r\n                argument instanceof Grouping && parser.err(argument);\r\n                return true;\r\n            },\r\n            filter: function (context: Context) {\r\n                return context[CONTEXT.bindingElement];\r\n            },\r\n            precedence: 1.5,\r\n            collector: {\r\n                type: _Mark(\"RestElement\"),\r\n                token: _NonCollecting(\"Punctuator ...\"),\r\n                argument: _Or(_Or(\"Identifier\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        validateBinding(context, token)\r\n                    }\r\n                ), \"ArrayPattern\", \"ObjectPattern\")\r\n            }\r\n        }\r\n    ]\r\n};\r\nexport {\r\n    Patterns,\r\n    parseArrayPattern,\r\n    parseObjectPattern\r\n}\r\n\r\n\r\nfunction parseArrayPattern(context: Context, token: Token): Node {\r\n    let pattern = new NODES.ArrayPattern();\r\n    context.wrap(CONTEXT.bindingElement, true);\r\n    pattern.elements = parse_and_extract(PETTERN_ELEMENTS_TREE, context, token);\r\n    context.unwrap();\r\n    pattern.range = token.range;\r\n    pattern.loc = token.loc;\r\n    return pattern;\r\n}\r\nfunction parseObjectPattern(context: Context, token: Token): Node {\r\n    let pattern = new NODES.ObjectPattern();\r\n    context.wrap(CONTEXT.bindingElement, true);\r\n    pattern.properties = parse_and_extract(PATTERN_PROPERTIES_TREE, context, token);\r\n    context.unwrap();\r\n    pattern.range = token.range;\r\n    pattern.loc = token.loc;\r\n    return pattern;\r\n}\r\n\r\nlet PatternElements = {\r\n    Success: {\r\n        handler: join_content,\r\n        collector: [\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: _Or(\r\n                    _Or(\"Identifier\").pipe(\r\n                        function (context: Context, identifier: Token) {\r\n                            if (identifier instanceof Grouping) {\r\n                                context[CONTEXT.parser].err(identifier);\r\n                            } else {\r\n                                validateBinding(context, identifier);\r\n                            }\r\n                        }\r\n                    ),\r\n                    _Or(\"ArrayPattern\", \"ObjectPattern\", \"AssignmentPattern\")\r\n                ),\r\n                _next: _NonCollecting(_Or(\"Punctuator ,\", MARKS.BOUNDARY))\r\n            },\r\n            [\r\n                [\"content\", \"RestElement\"],\r\n                [\"_next\", _NonCollecting(MARKS.BOUNDARY)]\r\n            ],\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: _Mark(null),\r\n                _next: _NonCollecting(\"Punctuator ,\")\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nconst PatternProperties = {\r\n    ..._SuccessCollector(_Pattern(\"Property\")),\r\n    Property: [\r\n        {\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                    key: _Or(\"Punctuator []\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context.wrap(CONTEXT.tokens, token.content);\r\n                            let res = context[CONTEXT.parser].parseExpression(context);\r\n                            context.unwrap();\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    value: _Series(\r\n                        _NonCollecting(\"Punctuator :\"),\r\n                        _Or(\r\n                            _Or(\"Identifier\").pipe(function (context: Context, token: Token) {\r\n                                validateBinding(context, token);\r\n                            }),\r\n                            _Or(\"Punctuator []\").pipe(parseArrayPattern),\r\n                            _Or(\"Punctuator {}\").pipe(parseObjectPattern),\r\n                        ),\r\n                        _Option(_Series(_NonCollecting(\"Punctuator =\"), \"[Expression]\")),\r\n                        _Mark(\r\n                            function (context: Context) {\r\n                                let [collected] = context;\r\n                                let { value } = collected;\r\n                                if (value.length > 1) {\r\n                                    let _value = new NODES.AssignmentPattern();\r\n                                    _value.left = value[0];\r\n                                    _value.right = value[1];\r\n                                    attachLocation(_value, value[0], value[1]);\r\n                                    collected.value = _value;\r\n                                } else {\r\n                                    collected.value = value[0];\r\n                                }\r\n                                return undefined;\r\n                            }\r\n                        )\r\n                    ),\r\n                    _next: _NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"),\r\n                    computed: _Mark(true),\r\n                    kind: _Mark(\"init\"),\r\n                    method: _Mark(false),\r\n                    shorthand: _Mark(false),\r\n                },\r\n                [\r\n                    [\r\n                        \"key\",\r\n                        _Or(\"Identifier\").pipe(\r\n                            function (context: Context, identifier: Node) {\r\n                                if (identifier instanceof Grouping) {\r\n                                    context[CONTEXT.parser].err(identifier);\r\n                                }\r\n                            }\r\n                        )\r\n                    ],\r\n                    [\"computed\", _Mark(false)]\r\n                ],\r\n                [\r\n                    [\r\n                        \"value\", _Or(\r\n                            _Series(_NonCollecting(\"Punctuator =\"), \"[Expression]\").pipe(\r\n                                function (context: Context, token: Token) {\r\n                                    let [collected] = context;\r\n                                    let left = collected.key;\r\n                                    let res = new NODES.AssignmentPattern();\r\n                                    res.left = left;\r\n                                    res.right = token;\r\n                                    attachLocation(res, left, token);\r\n                                    return res;\r\n                                }\r\n                            ),\r\n                            _Mark(\r\n                                function (context: Context) {\r\n                                    return context[CONTEXT.collected].key;\r\n                                }\r\n                            )\r\n                        )\r\n                    ],\r\n                    [\r\n                        \"shorthand\",\r\n                        _Mark(\r\n                            function (context: Context) {\r\n                                validateBinding(context, context[CONTEXT.collected].key);\r\n                                return true;\r\n                            }\r\n                        )\r\n                    ]\r\n                ]\r\n            ]\r\n        },\r\n        {\r\n            validator() {//匹配占位\r\n                return false;\r\n            },\r\n            precedence: new Number(3),\r\n            collector: {\r\n                __: _Series(\r\n                    _Or(MARKS.BOUNDARY, \"Success\"),\r\n                    _Or(\r\n                        \"Punctuator []\",\r\n                        \"Identifier\",\r\n                    ),\r\n                    \"Punctuator :\",\r\n                    _Or(\r\n                        \"Identifier\",\r\n                        \"Punctuator [] {}\",\r\n                    ),\r\n                    \"Punctuator =\"\r\n                )\r\n            }\r\n        }\r\n    ]\r\n}\r\n","\r\nimport {\r\n    Context, CONTEXT, Node, Token, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    createMatchTree,\r\n    NODES,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, _Loop, TYPE_ALIAS,\r\n    validateBinding, validateLineTerminator, _NonCapturing,\r\n    validateIdentifier, validateAssignment,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    isAligned,\r\n    attachLocation,\r\n    get_inner_group,\r\n    parse_next_statement,\r\n} from './head'\r\nimport {\r\n    parseArrayPattern,\r\n    parseObjectPattern,\r\n    parse_params\r\n} from './expression';\r\nimport Declaration from './declaration';\r\n\r\nconst Grouping = NODES.Grouping;\r\nlet { VariableDeclaration } = Declaration;\r\n\r\n\r\nlet BLOCK_STATEMENT_PATTERN = _Or(\r\n    \"Block\",\r\n    _Or(\"Punctuator {\").walk(\r\n        function (context: Context, left: number) {\r\n            let parser = context[CONTEXT.parser];\r\n            parser.parseRangeAsBlock(context, left);\r\n            //parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).type = \"Block\";\r\n        }\r\n    )\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        let res = new NODES.BlockStatement();\r\n        res.body = token.content;\r\n        attachLocation(res, token);\r\n        return res;\r\n    }\r\n)\r\n\r\nlet GROUPING_EXPRESSION = _Or(\r\n    \"Punctuator ()\",\r\n    _Punctuator(\"(\").walk(\r\n        function (context: Context, index: number) {\r\n            let [, parser] = context;\r\n            let store = context.store(\r\n                CONTEXT.bindingSet, null,\r\n                CONTEXT.bindingElement, false\r\n            );\r\n            parser.parseRange(parser.EXPRESSION_TREE, context, index, is_right_parentheses, parser.isExpression);\r\n            context.restore(store);\r\n        }\r\n    )\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        if (token.content) {\r\n            return token.content;\r\n        } else {\r\n            context[CONTEXT.parser].err(token);\r\n            return null;\r\n        }\r\n    }\r\n)\r\n\r\nconst Statements: Record<string, any> = async_getter.Statements = {\r\n    \"\": {\r\n        handler([collected, parser]: Context) {\r\n            parser.err(collected.error);\r\n            return [];\r\n        },\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                error: _Or(\"Punctuator\", \"Keyword\"),\r\n                _next: _NonCapturing(RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN),/*, \"Punctuator }\"*/\r\n            }\r\n        ]\r\n    },\r\n    \"BreakStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            let label = collected.label;\r\n            if (label) {\r\n                if (\r\n                    label instanceof Grouping\r\n                    || context[CONTEXT.labelSet].indexOf(label.name) < 0\r\n                ) {\r\n                    parser.err(label);\r\n                }\r\n            } else if (!context[CONTEXT.inIteration] && !context[CONTEXT.inSwitch]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        filter: [\r\n            function (context: Context, left: number) {\r\n                return isAligned(context, left, left + 1);\r\n            },\r\n            null,\r\n        ],\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword break\"),\r\n                label: IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"label\", _Mark(null)]\r\n        ]\r\n    },\r\n    \"ContinueStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            let label = collected.label;\r\n            validateLineTerminator(context);\r\n            if (label) {\r\n                if (\r\n                    label instanceof Grouping\r\n                    || context[CONTEXT.labelSet].indexOf(label.name) < 0\r\n                ) {\r\n                    parser.err(label);\r\n                }\r\n            } else if (!context[CONTEXT.inIteration]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        filter: \"BreakStatement\",\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword continue\"),\r\n                label: IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"label\", _Mark(null)],\r\n        ]\r\n    },\r\n    \"ReturnStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.inFunctionBody]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if (left === right) {\r\n                let next_token = context.getToken(left + 1);\r\n                if (next_token && context.getToken(left).loc.end.line === next_token.loc.start.line) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        filter: \"BreakStatement\",\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword return\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"argument\", _Mark(null)]\r\n        ]\r\n    },\r\n    \"BlockStatement\": {\r\n        overload: true,//和 ObjectPattern 收集器有重叠，在存在 BlockStatement 的环境， ObjectPattern 的 filter 不会返回 true，这里强制覆盖\r\n        //precedence: 0,\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                body: _Punctuator(\"{\").pipe(\r\n                    function (context: Context, token: Token, left: number) {\r\n                        let parser = context[CONTEXT.parser];\r\n                        return parser.parseRangeAsBlock(context, left).content;\r\n                        //return parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).content;\r\n                    }\r\n                )\r\n            }\r\n        ]\r\n    },\r\n    \"DoWhileStatement\": {\r\n        validator: \"ForStatement\",\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            //collected.test = parser.parseExpression(context, collected.test);\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                keyword: _NonCollecting(\"Keyword do\"),\r\n            },\r\n            [\r\n                [\"body\", STATEMANT_LIST_ITEM_PATTERN],\r\n                [\"test\", _Series(\r\n                    _NonCollecting(\"Keyword while\"),\r\n                    GROUPING_EXPRESSION\r\n                )],\r\n                [\"_next\", _Option(\"Punctuator ;\")]\r\n            ]\r\n        ]\r\n    },\r\n    \"EmptyStatement\": [\r\n        {\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                    _: _NonCollecting(\"Punctuator ;\")\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"ExpressionStatement\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [collected, parser, left] = context;\r\n                validateLineTerminator(context);\r\n                let begin = context[CONTEXT.begin];\r\n                if (\r\n                    (\r\n                        !context[CONTEXT.tokens] ||\r\n                        context[CONTEXT.inFunctionBody] === begin\r\n                    )\r\n                    && (\r\n                        begin >= left ||\r\n                        context.getToken(left - 1).directive\r\n                    )\r\n                ) {\r\n                    let expression = collected.expression;\r\n                    if (\r\n                        expression\r\n                        && expression.type === \"Literal\"\r\n                        && typeof expression.value === \"string\"\r\n                        && expression.raw.length > 2\r\n                    ) {\r\n                        collected = new NODES.Directive(\r\n                            collected.type,\r\n                            expression,\r\n                            expression.raw.slice(1, -1),\r\n                            collected.range,\r\n                            collected.loc\r\n                        );\r\n                        if (collected.directive === \"use strict\") {\r\n                            context[CONTEXT.strict] = true;\r\n                        }\r\n                    }\r\n                }\r\n                return collected;\r\n            },\r\n            precedence: 0,\r\n            collector: [\r\n                {\r\n                    expression: EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _next: _Option(\"Punctuator ;\")\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"ForStatement\": {\r\n        validator: [\r\n            function (context: Context) {\r\n                context.wrap(CONTEXT.inIteration, true);\r\n                let res = parse_next_statement(context);\r\n                context.unwrap();\r\n                return res;\r\n            },\r\n            null\r\n        ],\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            let { iterator, body, range, loc } = collected;\r\n            collected = iterator.content;\r\n            if (collected) {\r\n                collected.body = body;\r\n                collected.range = range;\r\n                collected.loc = loc;\r\n                return collected;\r\n            } else {\r\n                parser.err(iterator);\r\n                return [];\r\n            }\r\n        },\r\n        collector: [\r\n            {\r\n                keyword: _NonCollecting(\"Keyword for\"),\r\n                iterator: _Or(\r\n                    \"Punctuator ()\",\r\n                    _Punctuator(\"(\").walk(\r\n                        function (context: Context, left: number) {\r\n                            let parser = context[CONTEXT.parser];\r\n                            context.wrap(CONTEXT.isExpression, true);\r\n                            parser.parseRange(FOR_ITERATOR_TREE, context, left, is_right_parentheses, parser.isStatement)\r\n                            context.unwrap();\r\n                        }\r\n                    )\r\n                )\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_PATTERN]\r\n        ]\r\n    },\r\n    \"ForInStatement\": {//ForStatement\r\n    },\r\n    \"ForOfStatement\": {//ForStatement\r\n    },\r\n    \"IfStatement\": {\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if ((right - left) % 2 === 1) {\r\n                return parse_next_statement(context);\r\n            }\r\n            return true;\r\n        },\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword if\"),\r\n                test: GROUPING_EXPRESSION,\r\n                consequent: _Mark(null),\r\n                alternate: _Mark(null)\r\n            },\r\n            [\"consequent\", STATEMANT_LIST_ITEM_PATTERN],\r\n            [\r\n                \"alternate\", _Series(\r\n                    _NonCollecting(\"Keyword else\"),\r\n                    _Option(STATEMANT_LIST_ITEM_PATTERN)\r\n                )\r\n            ]\r\n        ]\r\n    },\r\n    \"LabeledStatement\": {\r\n        validator: [\r\n            function (context: Context) {\r\n                let [, parser, left] = context;\r\n                let label = context.getToken(left);\r\n                let label_name = label.name;\r\n                let label_set = context[CONTEXT.labelSet];\r\n                if (label_set.indexOf(label_name) >= 0) {\r\n                    parser.err(label);\r\n                }\r\n                label_set.unshift(label_name);\r\n                let res = parse_next_statement(context);\r\n                label_set.shift();\r\n                return res;\r\n            },\r\n            null\r\n        ],\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                label: _Series(\r\n                    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _NonCollecting(\"Punctuator :\")\r\n                )\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_PATTERN]\r\n        ]\r\n    },\r\n    \"SwitchStatement\": [\r\n        {\r\n            collector: [\r\n                {\r\n                    token: _NonCollecting(\"Keyword switch\"),\r\n                    discriminant: GROUPING_EXPRESSION,\r\n                    cases: _Punctuator(\"{\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let parser = context[CONTEXT.parser]\r\n                            context.wrap(CONTEXT.inSwitch, true);\r\n                            let cases = parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).content\r\n                            context.unwrap();\r\n\r\n                            let has_default = false;\r\n                            for (const item of cases) {\r\n                                if (item.type === \"SwitchCase\") {\r\n                                    if (item.test) {\r\n                                        continue;\r\n                                    }\r\n                                    if (!has_default) {\r\n                                        has_default = true;\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                                parser.err(item);\r\n                            }\r\n                            return cases;\r\n                        }\r\n                    )\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            handler([collected]: Context) {\r\n                collected.consequent = [];\r\n                return collected;\r\n            },\r\n            precedence: 0,\r\n            filter(content: Context) {\r\n                return content[CONTEXT.inSwitch] /*=== content[CONTEXT.tokens]*/;\r\n            },\r\n            collector: [\r\n                {\r\n                    type: _Mark(\"SwitchCase\"),\r\n                    test: _Or(\r\n                        _Series(\r\n                            _NonCollecting(\"Keyword case\"),\r\n                            EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n                        ),\r\n                        _Series(\r\n                            _NonCollecting(\"Keyword default\"),\r\n                            _Mark(null)\r\n                        )\r\n                    ),\r\n                    __: _NonCollecting(\"Punctuator :\")\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            handler([collected]: Context) {\r\n                collected.token.consequent.push(collected.consequent)\r\n                return collected.token;\r\n            },\r\n            collector: {\r\n                token: \"SwitchCase\",\r\n                consequent: STATEMANT_LIST_ITEM_PATTERN\r\n            }\r\n        }\r\n    ],\r\n    \"ThrowStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (collected.loc.start.line !== collected.argument.loc.start.line) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword throw\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"TryStatement\": {\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword try\"),\r\n                block: BLOCK_STATEMENT_PATTERN/*\"Punctuator {}\"*/,\r\n                handler: _Series(\r\n                    _NonCollecting(\"Keyword catch\"), \"Punctuator ()\", BLOCK_STATEMENT_PATTERN,\r\n                    _Mark(\r\n                        function (context: Context) {\r\n                            let [collected, parser] = context;\r\n                            let [param, body] = collected.handler;\r\n                            let params = parse_params(context, param.content);\r\n                            if (params.length !== 1) {\r\n                                parser.err(param);\r\n                            }\r\n                            collected.handler = {\r\n                                type: \"CatchClause\",\r\n                                param: params[0],\r\n                                body\r\n                            };\r\n                        }\r\n                    )\r\n                ),\r\n                finalizer: _Mark(null)\r\n            },\r\n            [\"finalizer\", _Series(_NonCollecting(\"Keyword finally\"), BLOCK_STATEMENT_PATTERN)],\r\n            [\"handler\", _Mark(null)],\r\n        ]\r\n    },\r\n    \"WhileStatement\": {\r\n        validator: \"ForStatement\",\r\n        /*handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            //collected.test = parser.parseExpression(context, collected.test);\r\n            return collected;\r\n        },*/\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword while\"),\r\n                test: GROUPING_EXPRESSION\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_PATTERN]\r\n        ]\r\n    },\r\n    \"WithStatement\": {\r\n        validator: [\r\n            parse_next_statement,\r\n            null\r\n        ],\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            if (context[CONTEXT.strict]) {\r\n                parser.err(collected);\r\n            }\r\n            //collected.object = parser.parseExpression(context, collected.object);\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                token: \"Keyword with\",\r\n                object: \"Punctuator ()\"\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_PATTERN]\r\n        ]\r\n    }\r\n};\r\n\r\nasync_getter.get(\"Statements\", function (statements: Record<string, any>) {\r\n    for (const type_name in statements) {\r\n        if (type_name) {\r\n            type_name && (TYPE_ALIAS[type_name] = [type_name, \"[Statement]\"]);\r\n        }\r\n    }\r\n});\r\nexport default Statements;\r\n\r\nlet ForIterator = {\r\n    VariableDeclaration,\r\n    ForStatement: [\r\n        {\r\n            collector: [\r\n                {\r\n                    init: _Or(\r\n                        \"VariableDeclaration\",\r\n                        _Series(\r\n                            _NonCollecting(MARKS.BOUNDARY),\r\n                            _Or(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),//EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS\r\n                            _NonCollecting(\"Punctuator ;\")\r\n                        )\r\n                    ),\r\n                    test: _Series(\r\n                        _Or(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                        _NonCollecting(\"Punctuator ;\")\r\n                    ),\r\n                    update: _Series(\r\n                        _Or(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                        _NonCapturing(\"Punctuator )\")\r\n                    ),\r\n                    body: _Mark(null)\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            handler(context: Context) {\r\n                let [collected, parser] = context;\r\n                let { left } = collected;\r\n                let kind: Node, declarator: Node;\r\n                if (left instanceof Array) {\r\n                    [kind, declarator] = left;\r\n                } else {\r\n                    declarator = left;\r\n                }\r\n                if (declarator.value === \"()\" && declarator.type === \"Punctuator\") {\r\n                    let wrapper = declarator;\r\n                    declarator = get_inner_group(declarator);\r\n                    if (declarator.content.length > 0) {\r\n                        if (kind) {\r\n                            parser.err(declarator);\r\n                        } else if (declarator.content.length > 1) {\r\n                            parser.err(...declarator.content.slice(1));\r\n                        }\r\n                        declarator = new Grouping(declarator.content[0], wrapper);\r\n                    }\r\n                }\r\n                if (declarator.type === \"Punctuator\") {\r\n                    switch (declarator.value) {\r\n                        case \"{}\":\r\n                            declarator = parseObjectPattern(context, declarator);\r\n                            break;\r\n                        case \"[]\":\r\n                            declarator = parseArrayPattern(context, declarator);\r\n                            break;\r\n                        default:\r\n                            parser.err(declarator);\r\n                            declarator = null;\r\n                    }\r\n                } else if (declarator.type !== \"Identifier\") {\r\n                    parser.err(declarator);\r\n                    declarator = null;\r\n                } else {\r\n                    validateAssignment(context, declarator);\r\n                }\r\n                if (kind) {\r\n                    left = new NODES.VariableDeclaration();\r\n                    left.declarations = [\r\n                        {\r\n                            type: \"VariableDeclarator\",\r\n                            id: declarator,\r\n                            init: null\r\n                        }\r\n                    ];\r\n                    left.kind = kind.value;\r\n                    left.range = [kind.range[0], declarator.range[1]];\r\n                    left.loc = {\r\n                        start: kind.loc.start,\r\n                        end: declarator.loc.end\r\n                    };\r\n                    collected.left = left;\r\n                } else {\r\n                    collected.left = declarator;\r\n                }\r\n                return collected;\r\n            },\r\n            validator(context: Context) {\r\n                return context[CONTEXT.right] >= context.tokens.length - 1;\r\n            },\r\n            filter: [function () { return false }, null],\r\n            precedence: 1.5,\r\n            collector: [\r\n                {\r\n                    _: _Series(//和 VariableDeclaration 不冲突的占位 \r\n                        MARKS.BOUNDARY,\r\n                        _Or(\r\n                            _Series(\r\n                                _Or(\"Keyword var const let\"),\r\n                                _Or(\"Identifier\", \"Punctuator {} [] ()\")\r\n                            ),\r\n                            _Series(\r\n                                \"Identifier let\",\r\n                                _Or(\"Identifier\", \"Punctuator {} ()\")\r\n                            )\r\n                        )\r\n\r\n                    )\r\n                },\r\n                {\r\n                    type: _Mark(\"ForOfStatement\"),\r\n                    _prev: _NonCollecting(MARKS.BOUNDARY),\r\n                    left: _Series(\r\n                        _Option(_Or(\"Identifier let\", \"Keyword var const let\")),\r\n                        _Or(\"Identifier\", \"Punctuator {} [] ()\")\r\n                    ),\r\n                    token: _NonCollecting(\"Identifier of\"),\r\n                    right: _Option(\r\n                        _Series(\r\n                            EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                            _Option(_NonCapturing(\"Punctuator )\"))\r\n                        )\r\n                    ),\r\n                    body: _Mark(null),\r\n                },\r\n                [\r\n                    [\"type\", _Mark(\"ForInStatement\")],\r\n                    [\"token\", _NonCollecting(\"Keyword in\")],\r\n                    [\"each\", _Mark(false)]\r\n                ]\r\n            ]\r\n\r\n        }\r\n    ]\r\n};\r\nlet FOR_ITERATOR_TREE: MatchTree;\r\nasync_getter.get(\"EXPRESSION_TREE\", function (EXPRESSION_TREE: MatchTree) {\r\n    FOR_ITERATOR_TREE = createMatchTree(ForIterator, EXPRESSION_TREE);\r\n});\r\n","import {\r\n    Context, CONTEXT, Token, Node\r\n    , MARKS\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, TYPE_ALIAS,\r\n    validateLineTerminator, NODES, _NonCapturing, _SuccessCollector, createMatchTree,\r\n\r\n    extract_success,\r\n    parse_and_extract,\r\n} from './head'\r\nlet Grouping = NODES.Grouping;\r\n\r\nconst STRING_LITERAL_PATTERN = _Or(\"Literal\").pipe(\r\n    function (context: Context, token: Token) {\r\n        if (token instanceof Grouping || typeof token.value !== \"string\") {\r\n            context[CONTEXT.parser].err(token);\r\n        }\r\n    }\r\n)\r\n\r\nlet ImportSpecifiers = {\r\n    ..._SuccessCollector(_Pattern(\"ImportSpecifier\")),\r\n    /*\"Success\": {\r\n        handler: join_content,\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: \"ImportSpecifier\",\r\n            }\r\n        ]\r\n    },*/\r\n    ImportSpecifier: {\r\n        collector: {\r\n            _prev: _NonCapturing(\"Success\", MARKS.BOUNDARY),\r\n            imported: \"Identifier\",\r\n            local: _Or(\r\n                _Series(\r\n                    _NonCollecting(\"Identifier as\"),\r\n                    \"Identifier\",\r\n                    _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY)\r\n                ),\r\n                _Or(\"Punctuator ,\", MARKS.BOUNDARY).pipe(\r\n                    function (context: Context) {\r\n                        let [collected] = context;\r\n                        return collected.imported;\r\n                    }\r\n                )\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst IMPORT_SPECIFIERS_TREE = createMatchTree(ImportSpecifiers);\r\nconst EXPORT_SPECIFIERS_TREE = createMatchTree({\r\n    ..._SuccessCollector(_Pattern(\"ExportSpecifier\")),\r\n    ExportSpecifier: {\r\n        collector: {\r\n            _prev: _NonCapturing(\"Success\", MARKS.BOUNDARY),\r\n            local: \"Identifier\",\r\n            exported: _Or(\r\n                _Series(\r\n                    _NonCollecting(\"Identifier as\"),\r\n                    \"Identifier\",\r\n                    _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY)\r\n                ),\r\n                _Or(\"Punctuator ,\", MARKS.BOUNDARY).pipe(\r\n                    function (context: Context) {\r\n                        let [collected] = context;\r\n                        return collected.local;\r\n                    }\r\n                )\r\n            )\r\n        }\r\n    }\r\n});\r\n\r\nconst ModuleDeclarations: Record<string, any> = {\r\n    \"ImportDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword import\"),\r\n                specifiers: _Or(\r\n                    _Punctuator(\"{}\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\r\n                        }\r\n                    ),\r\n                    _Series(\r\n                        _NonCollecting(\"Punctuator *\"),\r\n                        _NonCollecting(\"Identifier as\"),\r\n                        _Identifier().pipe(\r\n                            function (context: Context, token: Token) {\r\n                                return [\r\n                                    {\r\n                                        type: \"ImportNamespaceSpecifier\",\r\n                                        local: token\r\n                                    }\r\n                                ]\r\n                            }\r\n                        )\r\n                    ),\r\n                    _Series(\r\n                        _Identifier().pipe(\r\n                            function (context: Context, Identifier: Token) {\r\n                                return {\r\n                                    type: \"ImportDefaultSpecifier\",\r\n                                    local: Identifier\r\n                                }\r\n                            }\r\n                        ),\r\n                        _Option(\r\n                            _Series(\r\n                                _NonCollecting(\"Punctuator ,\"),\r\n                                _Or(\r\n                                    _Series(\r\n                                        _Punctuator(\"{}\").pipe(\r\n                                            function (context: Context, token: Token) {\r\n                                                return parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\r\n                                            }\r\n                                        ),\r\n                                        _Mark(\r\n                                            function (context: Context) {\r\n                                                let [collected] = context;\r\n                                                let specifiers = collected.specifiers;\r\n                                                specifiers.splice(1, 1, ...specifiers[1]);\r\n                                            }\r\n                                        )\r\n                                    ),\r\n                                    _Series(\r\n                                        _NonCollecting(\"Punctuator *\"),\r\n                                        _NonCollecting(\"Identifier as\"),\r\n                                        _Identifier().pipe(\r\n                                            function (context: Context, token: Token) {\r\n                                                return {\r\n                                                    type: \"ImportNamespaceSpecifier\",\r\n                                                    local: token\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    )\r\n                                )\r\n                            )\r\n                        ),\r\n                        _Mark(function () { })//使结果收集为数组\r\n                    )\r\n                ),\r\n                _: _NonCollecting(\"Identifier from\"),\r\n                source: STRING_LITERAL_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"ExportAllDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: {\r\n            _: _NonCollecting(_Series(\"Keyword export\", \"Punctuator *\", \"Identifier from\")),\r\n            source: STRING_LITERAL_PATTERN,\r\n            _next: _Option(\"Punctuator ;\"),\r\n        },\r\n    },\r\n    \"ExportNamedDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            collected.declaration || validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                declaration: \"VariableDeclaration\",\r\n                specifiers: _Mark(() => []),\r\n                source: _Mark(null)\r\n            },\r\n            {\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                declaration: _Mark(null),\r\n                specifiers: _Punctuator(\"{}\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        return parse_and_extract(EXPORT_SPECIFIERS_TREE, context, token);\r\n                    }\r\n                ),\r\n                source: _Mark(null),\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"ExportDefaultDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                context[CONTEXT.parser].err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        precedence: 1.5,\r\n        collector: [\r\n            {\r\n                type: _Mark(\"ExportDefaultDeclaration\"),\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                __: _NonCollecting(\"Keyword default\"),\r\n                declaration: \"[Expression]\",\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    }\r\n}\r\nexport default ModuleDeclarations;"],"sourceRoot":""}