{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/lexical/index.ts","webpack:///./js/character.ts","webpack:///./js/tokenizer.ts","webpack:///./js/lexical/head.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TOKEN_TYPE_ENUMS","Identifier","Keyword","String","Boolean","Numeric","Punctuator","RegularExpression","Template","TemplateElement","Comments","Null","NUMERIC_KEYWORD_MAP","TOKEN_TYPE_MAPPERS","reduce","map","type","octal_escape","_state","_attach","tokenizer","scope","code","octalValue","input","charCodeAt","index","octal","len","fromCharCode","octal_escape_tree","strbase_match_tree","_str","scanHex","not_allow_octal_escape","_error","template_curly_stack","template_base","match_tree","_end","shift","scanner","escape_scan","PUNCTUATORS","start","this","unshift","filter","bound","REGEXP_DESCRIPTOR","class_marker","overload","token","regex","pattern","slice","length","undefined","flags","inIdentifierPart","range","loc","end","column","PUNCTUATORS_TREE","createSearchTree","PRIOR_REGEXP_PUNCTUATORS_TREE","IdentifierStart","IdentifierPart","testCodePoint","regexp","_bak","test","testUnicodeEscape","cp","hexValue","fromCodePoint","ch","decimalValue","binaryValue","isWhiteSpace","indexOf","isLineTerminator","inIdentifierStart","console","log","options","token_hooks","save_comments","err","error_logs","push","apply","arguments","init","line_number","line_start","tokens","terminator_stack","tokenize","nextToken","_nextToken","hook","createToken","line","match","node","prev_node","target","__","nextIdentifier","str","is_primary_expr_start","nextPunctuator","maybe_regex","nextNumeric","number","_get_token","_get_error","message","error","data","root","block_list","item","part","warn","char","path","backslash_count","self","has_escape","_next","_finally","_scope","res"],"mappings":"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","file":"js/tokenizer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import {\r\n    Token, NUMERIC_TYPE, MATCH_STATUS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\nimport { escape_scan, createSearchTree, MARKS } from './head'\r\n\r\nlet TOKEN_TYPE_ENUMS: Record<string, string | number> = {\r\n    Identifier: \"Identifier\",\r\n    Keyword: \"Keyword\",\r\n    String: \"String\",\r\n    Boolean: \"Boolean\",\r\n    Numeric: \"Numeric\",\r\n    Punctuator: \"Punctuator\",\r\n    RegularExpression: \"RegularExpression\",\r\n    Template: \"Template\",\r\n    TemplateElement: \"TemplateElement\",\r\n    Comments: \"Comments\",\r\n    Null: \"Null\"\r\n};\r\n\r\n//const IS_RADIX = NUMERIC_TYPE.BINARY | NUMERIC_TYPE.OCTAL | NUMERIC_TYPE.HEX;\r\nconst NUMERIC_KEYWORD_MAP = {\r\n    \".\": NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.DECIMAL,\r\n    \"x\": NUMERIC_TYPE.HEX,\r\n    \"b\": NUMERIC_TYPE.BINARY,\r\n    \"o\": NUMERIC_TYPE.OCTAL,\r\n\r\n    \"X\": NUMERIC_TYPE.HEX,\r\n    \"B\": NUMERIC_TYPE.BINARY,\r\n    \"O\": NUMERIC_TYPE.OCTAL,\r\n};\r\n\r\nlet TOKEN_TYPE_SET = [\r\n    [\r\n        \"Keyword\",\r\n        [\r\n            \"void\",\r\n            \"delete\",\r\n            \"new\",\r\n            \"class\", \"extends\",\r\n            \"function\",\r\n            \"throw\",\r\n            \"with\",\r\n            \"yield\",\r\n            \"in\", \"instanceof\", \"typeof\",\r\n            \"this\", \"super\",\r\n            \"var\", \"const\",// \"let\",\r\n            \"break\", \"continue\", \"return\",\r\n            \"if\", \"else\",\r\n            \"switch\", \"case\", \"default\",\r\n            \"try\", \"catch\", \"finally\",\r\n            \"do\", \"while\", \"for\",\r\n            \"await\",/*\"async\",*/\r\n            \"import\", \"export\",\r\n            \"debugger\",\r\n\r\n            \"enum\"//用于错误检测\r\n        ]\r\n    ],\r\n    [\"Identifier\", [\"let\", \"async\"]],//使 UnicodeEscape 的情况能被检测到报错\r\n    [\"Boolean\", [\"true\", \"false\"]],\r\n    [\"Null\", [\"null\"]]\r\n];\r\n\r\nconst TOKEN_TYPE_MAPPERS = TOKEN_TYPE_SET.reduce(\r\n    (map, [type, id_set]) => {\r\n        for (let id of id_set) {\r\n            map[\" \" + id] = type;\r\n        }\r\n        return map;\r\n    }, {}\r\n);\r\n\r\nlet octal_escape = {\r\n    _state: MATCH_STATUS.ATTACH,\r\n    _attach(tokenizer: Tokenizer, scope: Record<string, any>) {\r\n        let code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index - 1));\r\n        let value = 0;\r\n        code && (scope.octal = true);\r\n        let len = code <= 3 ? 2 : 1;\r\n        while (true) {\r\n            value = value * 8 + code;\r\n            code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index));\r\n            if (code < 0 || --len < 0) {\r\n                break;\r\n            }\r\n            scope.octal = true;\r\n            tokenizer.index += 1;\r\n        }\r\n        return String.fromCharCode(value);\r\n    }\r\n};\r\nlet octal_escape_tree = {\r\n    \"\\\\0\": octal_escape,\r\n    \"\\\\1\": octal_escape,\r\n    \"\\\\2\": octal_escape,\r\n    \"\\\\3\": octal_escape,\r\n    \"\\\\4\": octal_escape,\r\n    \"\\\\5\": octal_escape,\r\n    \"\\\\6\": octal_escape,\r\n    \"\\\\7\": octal_escape,\r\n}\r\n\r\nlet strbase_match_tree = {\r\n    \"\\\\\\n\": { _str: \"\" },\r\n    \"\\\\n\": { _str: \"\\n\" },\r\n    \"\\\\r\": { _str: \"\\r\" },\r\n    \"\\\\t\": { _str: \"\\t\" },\r\n    \"\\\\b\": { _str: \"\\b\" },\r\n    \"\\\\f\": { _str: \"\\f\" },\r\n    \"\\\\v\": { _str: \"\\v\" },\r\n    \"\\\\u\": {\r\n        _state: MATCH_STATUS.ATTACH,\r\n        _attach(tokenizer: Tokenizer) {\r\n            if (tokenizer.input[tokenizer.index] === \"{\") {\r\n                tokenizer.index++;\r\n                let [code] = tokenizer.scanHex();\r\n                if (tokenizer.input[tokenizer.index] === \"}\") {\r\n                    tokenizer.index++;\r\n                    if (code <= 0x10ffff) {\r\n                        return String.fromCharCode(code);\r\n                    }\r\n                }\r\n            } else {\r\n                let [code, len] = tokenizer.scanHex(4);\r\n                if (len === 4) {\r\n                    return String.fromCharCode(code);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    \"\\\\x\": {\r\n        _state: MATCH_STATUS.ATTACH,\r\n        _attach(tokenizer: Tokenizer) {\r\n            let [code, len] = tokenizer.scanHex(2);\r\n            if (len === 2) {\r\n                return String.fromCharCode(code);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nlet not_allow_octal_escape = {\r\n    _state: MATCH_STATUS.ERROR,\r\n    _error: \"Octal escape sequences are not allowed in template strings\"\r\n}\r\n\r\nlet template_curly_stack = [];\r\nlet template_base = {\r\n    type: \"Template\",\r\n    match_tree: {\r\n        \"\\\\0\": { _str: \"\\0\" },\r\n        \"\\\\1\": not_allow_octal_escape,\r\n        \"\\\\2\": not_allow_octal_escape,\r\n        \"\\\\3\": not_allow_octal_escape,\r\n        \"\\\\4\": not_allow_octal_escape,\r\n        \"\\\\5\": not_allow_octal_escape,\r\n        \"\\\\6\": not_allow_octal_escape,\r\n        \"\\\\7\": not_allow_octal_escape,\r\n        \"`\": {\r\n            _state: MATCH_STATUS.END,\r\n            _end(tokenizer: Tokenizer) {\r\n                template_curly_stack.shift();\r\n                return true;\r\n            }\r\n        },\r\n        \"$\": {\r\n            \"{\": {\r\n                _state: MATCH_STATUS.END\r\n            }\r\n        },\r\n        ...strbase_match_tree\r\n    },\r\n    scanner: escape_scan\r\n}\r\nconst PUNCTUATORS = [\r\n    {\r\n        key: `\"`, type: \"String\",\r\n        match_tree: {\r\n            '\"': {\r\n                _state: MATCH_STATUS.END\r\n            },\r\n            \"\\n\": {\r\n                _state: MATCH_STATUS.ERROR\r\n            },\r\n            ...strbase_match_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            return this.escape_scan(tokenizer, start, {});\r\n        }\r\n    },\r\n    {\r\n        key: `'`, type: \"String\",\r\n        match_tree: {\r\n            \"'\": {\r\n                _state: MATCH_STATUS.END\r\n            },\r\n            \"\\n\": {\r\n                _state: MATCH_STATUS.ERROR\r\n            },\r\n            ...strbase_match_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            return this.escape_scan(tokenizer, start, {});\r\n        }\r\n    },\r\n    {\r\n        key: \"`\",\r\n        ...template_base,\r\n        escape_scan,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            template_curly_stack.unshift(\"`\");\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: \"}\",\r\n        ...template_base,\r\n        filter(tokenizer: Tokenizer) {\r\n            let env = template_curly_stack[0];\r\n            return env === \"`\";\r\n        }\r\n    },\r\n    {\r\n        key: '/*', bound: '*/', type: \"Comments\",\r\n        match_tree: {\r\n            \"*\": {\r\n                \"/\": {\r\n                    _state: MATCH_STATUS.END\r\n                }\r\n            },\r\n            \"\\\\*\": {\r\n                \"/\": {\r\n                    _state: MATCH_STATUS.END\r\n                }\r\n            },\r\n            [MARKS.EOF]: {\r\n                _state: MATCH_STATUS.END,\r\n                _error: \"Unexpected token\"\r\n            }\r\n        },\r\n        scanner: escape_scan\r\n    },\r\n    {\r\n        key: '//', bound: '\\n', type: \"Comments\",\r\n        match_tree: {\r\n            \"\\n\": {\r\n                _state: MATCH_STATUS.END\r\n            },\r\n            \"\\\\\\n\": {\r\n                _state: MATCH_STATUS.END\r\n            },\r\n            [MARKS.EOF]: {\r\n                _state: MATCH_STATUS.END\r\n            }\r\n        },\r\n        scanner: escape_scan\r\n    },\r\n\r\n    //[\"(\", \")\"], [\"[\", \"]\"], [\"{\", \"}\"],\r\n\r\n    \"(\", \")\", \"[\", \"]\", \"{\", \"}\",\r\n    ';', '.', '?.',\r\n    '++', '--', '~', '!',\r\n    '**', '*', '/', '%',\r\n    '+', '-',\r\n    '<<', '>>', '>>>',\r\n    '<', '>', '<=', '>=', '==', '!=', '===', '!==',\r\n    '&',\r\n    '^',\r\n    '|',\r\n    '&&',\r\n    '||',\r\n    '?', \":\",\r\n    '=', '+=', '-=', '*=', '/=', '%=', '**=', '<<=', '>>=', '>>>=', '&=', '|=', '^=',\r\n    '...',\r\n    ',',\r\n    '=>'\r\n];\r\n\r\nconst REGEXP_DESCRIPTOR = {\r\n    key: '/', type: \"RegularExpression\",\r\n    match_tree: {\r\n        '/': {\r\n            _state: MATCH_STATUS.END,\r\n            _end(tokenizer: Tokenizer, scope: Record<string, any>) {\r\n                return !scope.class_marker;\r\n            }\r\n        },\r\n        '[': {\r\n            _state: MATCH_STATUS.ATTACH,\r\n            _attach(tokenizer: Tokenizer, scope: Record<string, any>) {\r\n                scope.class_marker = true;\r\n            }\r\n        },\r\n        ']': {\r\n            _state: MATCH_STATUS.ATTACH,\r\n            _attach(tokenizer: Tokenizer, scope: Record<string, any>) {\r\n                scope.class_marker = false;\r\n            }\r\n        },\r\n        '\\n': {\r\n            _state: MATCH_STATUS.ERROR\r\n        },\r\n        '\\\\\\n': {\r\n            _state: MATCH_STATUS.ERROR\r\n        },\r\n        [MARKS.EOF]: {\r\n            _state: MATCH_STATUS.END,\r\n            _error: \"Invalid or unexpected token\"\r\n        }\r\n    },\r\n    overload: true,\r\n    escape_scan,\r\n    scanner(tokenizer: Tokenizer, start: number) {\r\n        let scope: Record<string, any> = {};\r\n        let token = this.escape_scan(tokenizer, start, scope);\r\n        if (token) {\r\n            token.regex = {\r\n                pattern: token.value.slice(\r\n                    1, token.value[token.value.length - 1] !== \"/\" ? undefined : -1\r\n                ),\r\n                flags: \"\"\r\n            };\r\n            let start = tokenizer.index;\r\n            let length = 0;\r\n            do {\r\n                tokenizer.index += length;\r\n                length = tokenizer.inIdentifierPart();\r\n            } while (length)\r\n            if (start !== tokenizer.index) {\r\n                token.regex.flags = tokenizer.input.slice(start, tokenizer.index)\r\n                token.value += token.regex.flags;\r\n                token.range[1] += tokenizer.index - start;\r\n                token.loc.end.column += tokenizer.index - start;\r\n            }\r\n            return token;\r\n        }\r\n    }\r\n};\r\nconst PUNCTUATORS_TREE = createSearchTree(PUNCTUATORS);\r\nconst PRIOR_REGEXP_PUNCTUATORS_TREE = createSearchTree(\r\n    [REGEXP_DESCRIPTOR],\r\n    createSearchTree(PUNCTUATORS, [\"/=\"]),\r\n);\r\n\r\n\r\nexport {\r\n    PRIOR_REGEXP_PUNCTUATORS_TREE,\r\n    PUNCTUATORS_TREE,\r\n    NUMERIC_KEYWORD_MAP,\r\n    TOKEN_TYPE_MAPPERS, TOKEN_TYPE_ENUMS\r\n}\r\n\r\n\r\n","//import { Token } from './interfaces'\r\nconst IdentifierStart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a]|[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\r\nconst IdentifierPart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a\\x30-\\x39]|[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\r\n\r\nexport default class {\r\n    public input: string;\r\n    public index: number;\r\n    public end: number;\r\n    public _bak: any;\r\n    public _scope: any;\r\n    private testCodePoint(regexp: RegExp) {\r\n        if (\r\n            (this.input.charCodeAt(this.index) & 0xfc00) === 0xd800\r\n            && (this.input.charCodeAt(this.index + 1) & 0xfc00) === 0xdc00\r\n        ) {\r\n            this._bak = this.input[this.index] + this.input[this.index + 1];\r\n            return regexp.test(this._bak) ? 2 : 0;\r\n        } else {\r\n            return regexp.test(this.input[this.index]) ? 1 : 0;\r\n        }\r\n    }\r\n    testUnicodeEscape(regexp: RegExp) {\r\n        let index = this.index + 1, code = 0;\r\n        if (this.input[index++] === \"u\") {\r\n            let cp = 0;\r\n            if (this.input[index] === \"{\") {\r\n                while (\r\n                    (code = this.hexValue(this.input.charCodeAt(++index))) >= 0\r\n                ) {\r\n                    cp = cp * 16 + code;\r\n                }\r\n                if (this.input[index++] !== \"}\") {/* || index < this.index + 5*/\r\n                    return 0;\r\n                }\r\n            } else {\r\n                let len = 4;\r\n                while (len--) {\r\n                    code = this.hexValue(this.input.charCodeAt(index++));\r\n                    if (code >= 0) {\r\n                        cp = cp * 16 + code;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return regexp.test(this.fromCodePoint(cp))\r\n                ? index - this.index\r\n                : -(index - this.index);\r\n        }\r\n        return 0;\r\n    }\r\n    scanHex(length: number = this.end): [number, number] {\r\n        let value = 0, code = 0, len = length;\r\n        while (len) {\r\n            code = this.hexValue(this.input.charCodeAt(this.index));\r\n            if (code >= 0) {\r\n                len--;\r\n                value = value * 16 + code;\r\n            } else {\r\n                break;\r\n            }\r\n            this.index++;\r\n        }\r\n        return [value, length - len];\r\n    }\r\n    hexValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 :\r\n            ch >= 0x41 && ch <= 0x46 ? ch - 0x41 + 10 :\r\n                ch >= 0x61 && ch <= 0x66 ? ch - 0x61 + 10 : -1;\r\n    }\r\n    decimalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 : -1;\r\n    }\r\n    octalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x37 ? ch - 0x30 : -1;\r\n    }\r\n    binaryValue(ch: number) {\r\n        return ch === 0x30 || ch == 0x31 ? ch - 0x30 : -1;\r\n    }\r\n    //https://github.com/jquery/esprima/blob/master/src/character.ts\r\n    isWhiteSpace(ch: number) {\r\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\r\n            (ch >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\r\n        /*return /^\\x20|\\x09|\\x0B|\\x0C|\\xA0|\\xfeff$/.test(char);*/\r\n    }\r\n    isLineTerminator(ch: number) {\r\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\r\n        /*return /^\\x0A|\\x0D|\\x2028|\\x2029$/.test(char);*/\r\n    }\r\n    fromCodePoint(cp: number) {\r\n        return this._bak = cp < 0x10000\r\n            ? String.fromCharCode(cp)\r\n            : String.fromCharCode(0xd800 + (cp - 0x10000) >> 10)\r\n            + String.fromCharCode(0xdc00 + (cp - 0x10000) & 1023);\r\n    }\r\n    inIdentifierStart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierStart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierStart) : 0)\r\n            );\r\n        /*return /^[_$a-zA-Z\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n    inIdentifierPart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ||\r\n            (ch >= 0x30 && ch <= 0x39) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierPart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierPart) : 0)\r\n            );\r\n        /*return /^[\\w$\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n    /*isFollowingAnExpression(token?: Token) {\r\n        return token ? [\r\n            'in', 'typeof', 'instanceof', 'new',\r\n            'return', 'case', 'delete', 'throw', 'void',\r\n            // assignment operators\r\n            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\r\n            '&=', '|=', '^=', ',',\r\n            // binary/unary operators\r\n            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\r\n            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\r\n            '<=', '<', '>', '!=', '!=='\r\n        ].indexOf(token.value) >= 0 : false;\r\n    }*/\r\n}","\r\n\r\nimport {\r\n    PRIOR_REGEXP_PUNCTUATORS_TREE,\r\n    PUNCTUATORS_TREE,\r\n    NUMERIC_KEYWORD_MAP,\r\n    TOKEN_TYPE_MAPPERS, TOKEN_TYPE_ENUMS\r\n} from \"./lexical/index\";\r\nimport Character from './character'\r\nimport {\r\n    Position, SourceLocation, Token, SearchTree, NUMERIC_TYPE, Validate\r\n} from \"./interfaces\";\r\n\r\nconsole.log(23, TOKEN_TYPE_ENUMS,TOKEN_TYPE_MAPPERS);\r\n\r\nexport default class extends Character {\r\n    constructor(options?: Record<string, any>) {\r\n        super()\r\n        for (const key in options) {\r\n            this[key] = options[key];\r\n        }\r\n        //console.log(333, TOKEN_TYPES,TOKEN_TYPE_MAP);\r\n    }\r\n    tokens: Array<Token>;\r\n    public token_hooks: Record<string, (token: Token, tokenizer: this) => Token> = {};\r\n    public line_number: number;\r\n    public line_start: number;\r\n    public save_comments: boolean = true;\r\n    public error_logs: Array<any>;\r\n    public terminator_stack: Array<Validate>;\r\n    err(...args: any) {\r\n        //debugger;\r\n        this.error_logs.push.apply(this.error_logs, arguments);\r\n    }\r\n    init(input: string) {\r\n        this.line_number = 0;\r\n        this.line_start = 0;\r\n        this.index = 0;\r\n        this.input = input;\r\n        this.end = this.input.length;\r\n        this.error_logs = [];\r\n        this.tokens = [];\r\n        this.terminator_stack = [];\r\n    }\r\n    tokenize(input: string): Array<Token> {\r\n        this.init(input);\r\n        while (this.nextToken());\r\n        return this.tokens;\r\n    }\r\n    nextToken() {\r\n        while (\r\n            this.index < this.end\r\n            && (\r\n                this.terminator_stack.length === 0\r\n                || this.tokens.length === 0\r\n                || !this.terminator_stack[0](this.tokens[this.tokens.length - 1])\r\n            )\r\n        ) {\r\n            let token = this._nextToken();\r\n            if (token) {\r\n                let hook = this.token_hooks[token.type];\r\n                hook && (token = hook(token, this));\r\n                if (this.save_comments || token.type !== TOKEN_TYPE_ENUMS.Comments) {\r\n                    this.tokens.push(token);\r\n                    return token;\r\n                }\r\n            } else if (this.index < this.end) {\r\n                this.err(this.createToken(\"error\", [this.index, ++this.index]))\r\n            }\r\n        }\r\n    }\r\n    createToken(\r\n        type: string | number,\r\n        range: [number, number],\r\n        value: any = this.input.slice(range[0], range[1]),\r\n        start: Position = {\r\n            line: this.line_number,\r\n            column: range[0] - this.line_start\r\n        },\r\n        end: Position = {\r\n            line: this.line_number,\r\n            column: range[1] - this.line_start\r\n        },\r\n    ): Token {\r\n        return {\r\n            type: type,\r\n            value,\r\n            range,\r\n            loc: {\r\n                start, end\r\n            }\r\n        };\r\n    }\r\n    private match(node: SearchTree) {\r\n        let start = this.index, end = this.index;\r\n        let prev_node: Token;\r\n        do {\r\n            prev_node = node;\r\n            node = prev_node[this.input[end++]];\r\n        } while (node)\r\n        let target: any = prev_node.__;\r\n        if (target && (target.type || (target = target(this)))) {\r\n            this.index = end - 1;\r\n            return target.scanner ?\r\n                target.scanner(this, start) :\r\n                this.createToken(\r\n                    TOKEN_TYPE_ENUMS[target.type],\r\n                    [start, this.index],\r\n                    target.key\r\n                );\r\n        }\r\n    }\r\n    private nextIdentifier(): Token | void {\r\n        let length = this.inIdentifierStart();\r\n        let token: Token;\r\n        if (length > 0) {\r\n            let start = this.index;\r\n            let str = \"\";\r\n            do {\r\n                str += length === 1 ? this.input[this.index] : this._bak;\r\n                this.index += length;\r\n                length = this.inIdentifierPart();\r\n            } while (length > 0)\r\n            let type = TOKEN_TYPE_MAPPERS[\" \" + str];\r\n            token = this.createToken(\r\n                TOKEN_TYPE_ENUMS[type || \"Identifier\"],\r\n                [start, this.index]\r\n            );\r\n            this._bak = str;\r\n            if (type && str.length !== this.index - start) {\r\n                this.err(token);\r\n            }\r\n        }\r\n        if (length < 0) {\r\n            this.err(this.createToken(\"error\", [this.index, this.index -= length]));\r\n        }\r\n        return token;\r\n    }\r\n    get maybe_regex() {\r\n        if (this.input[this.index] === \"/\") {\r\n            let is_primary_expr_start = (this as any).is_primary_expr_start;\r\n            return is_primary_expr_start !== undefined\r\n                ? is_primary_expr_start\r\n                : !this.tokens.length || this.tokens[this.tokens.length - 1].type === TOKEN_TYPE_ENUMS.Punctuator;\r\n        }\r\n    }\r\n    private nextPunctuator(): Token | void {\r\n        return this.match(!this.maybe_regex ? PUNCTUATORS_TREE : PRIOR_REGEXP_PUNCTUATORS_TREE);\r\n    }\r\n\r\n    private nextNumeric(): Token | void {\r\n        let start = this.index;\r\n        let ch = this.input.charCodeAt(this.index);\r\n        let number: number;\r\n        let flags = NUMERIC_TYPE.DECIMAL;\r\n        let _get_token = () => {\r\n            this._bak = flags & NUMERIC_TYPE.OCTAL ? (flags & ~NUMERIC_TYPE.DECIMAL) : flags;\r\n            return this.createToken(TOKEN_TYPE_ENUMS.Numeric, [start, this.index]);\r\n        }\r\n        let _get_error = (message: string = \"Invalid or unexpected token\") => {\r\n            let error = _get_token();\r\n            error.error = message;\r\n            error.input = this.input.slice(start, this.index + 1);\r\n            this.err(error);\r\n            return error;\r\n        }\r\n        let decimalValue = this.decimalValue;\r\n        switch (ch) {\r\n            case 0x2e://\".\"\r\n                if (decimalValue(this.input.charCodeAt(this.index + 1)) >= 0) {\r\n                    this.index += 1;\r\n                    flags |= NUMERIC_TYPE.FLOAT;\r\n                    break;\r\n                } else {\r\n                    return;\r\n                }\r\n            case 0x30://\"0\"\r\n                flags = NUMERIC_KEYWORD_MAP[this.input[++this.index]];\r\n                if (!flags) {\r\n                    number = decimalValue(this.input.charCodeAt(this.index));\r\n                    if (number >= 0) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        number < 8 && (flags |= NUMERIC_TYPE.OCTAL);\r\n                    } else if (!this.inIdentifierStart()) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        return _get_token();\r\n                    } else {\r\n                        return _get_error();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                if (decimalValue(ch) < 0) {\r\n                    return;\r\n                }\r\n        }\r\n        if (flags & NUMERIC_TYPE.DECIMAL) {\r\n            while ((ch = this.input.charCodeAt(++this.index))) {\r\n                number = decimalValue(ch)\r\n                if (number >= 0) {\r\n                    number < 8 || (flags &= ~NUMERIC_TYPE.OCTAL);\r\n                    continue;\r\n                }\r\n                switch (ch) {\r\n                    case 0x65://\"e\"\r\n                    case 0x45://\"E\"\r\n                        if (!(flags & (NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.E;\r\n                            ch = this.input.charCodeAt(this.index + 1);\r\n                            if (ch === 0x2b || ch === 0x2d) {//+ -\r\n                                this.index += 1;\r\n                            }\r\n                            continue;\r\n                        } else {\r\n                            return _get_error();\r\n                        }\r\n                    case 0x2e://\".\"\r\n                        if (!(flags & (NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.FLOAT;\r\n                            continue;\r\n                        }\r\n                    default:\r\n                        return this.inIdentifierStart()\r\n                            ? _get_error()\r\n                            : _get_token();\r\n                }\r\n            }\r\n            return _get_token();\r\n        } else {\r\n            let test = flags & NUMERIC_TYPE.HEX\r\n                ? this.hexValue : (\r\n                    flags & NUMERIC_TYPE.BINARY\r\n                        ? this.binaryValue\r\n                        : this.octalValue\r\n                );\r\n            while (test(this.input.charCodeAt(++this.index)) >= 0);\r\n            return this.index > start + 3 && !this.inIdentifierStart()\r\n                ? _get_token()\r\n                : _get_error();\r\n        }\r\n    }\r\n    private _nextToken(): Token | void {\r\n        for (let cp: number; this.index < this.end; this.index++) {\r\n            cp = this.input.charCodeAt(this.index);\r\n            switch (true) {\r\n                case this.isWhiteSpace(cp):\r\n                    break;\r\n                case this.isLineTerminator(cp):\r\n                    this.line_number++;\r\n                    this.line_start = this.index + 1;\r\n                    break;\r\n                default:\r\n                    return this.nextIdentifier() ||\r\n                        this.nextNumeric() ||\r\n                        this.nextPunctuator();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\nimport {\r\n    Token, SearchTree, MATCH_STATUS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\n\r\nfunction createSearchTree(\r\n    data: Array<string | string[] | Record<string, any>>,\r\n    root: Record<string, any> = {},\r\n    block_list: Array<string> = []\r\n): SearchTree {\r\n    for (let item of data as any) {\r\n        let node = root;\r\n        switch (true) {\r\n            case typeof item === \"string\":\r\n                item = {\r\n                    type: \"Punctuator\",\r\n                    key: item,\r\n                }\r\n                break;\r\n            default:\r\n                item.type === undefined && (item.type = \"Punctuator\");\r\n                break;\r\n        }\r\n        if (~block_list.indexOf(item.key)) {\r\n            continue;\r\n        }\r\n        for (const part of item.key) {\r\n            node = node[part] || (node[part] = {});\r\n        }\r\n        if (node.__ && !item.overload) {\r\n            let next_item = node.__;\r\n            let curr_item = item;\r\n            if (typeof next_item === \"function\") {\r\n                if (curr_item.filter) {\r\n                    node.__ = function (tokenizer: Tokenizer) {\r\n                        return curr_item.filter(tokenizer) ? curr_item : next_item(tokenizer);\r\n                    }\r\n                } else {\r\n                    node.__ = function (tokenizer: Tokenizer) {\r\n                        return next_item(tokenizer) || curr_item;\r\n                    }\r\n                }\r\n                continue;\r\n            } else if (curr_item.filter) {\r\n                node.__ = function (tokenizer: Tokenizer) {\r\n                    return curr_item.filter(tokenizer) ? curr_item : next_item;\r\n                }\r\n                continue;\r\n            } else {\r\n                console.warn(\"conflict:\", node, node.__, item);\r\n            }\r\n        }\r\n        node.__ = item.filter ?\r\n            function (tokenizer: Tokenizer) { return item.filter(tokenizer) && item; } :\r\n            item;\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\nconst enum MARKS {\r\n    EOF = \"\",\r\n    ESCAPE = \"\\\\\"\r\n}\r\nfunction escape_scan(\r\n    tokenizer: Tokenizer,\r\n    start: number,\r\n    scope?: Record<string, any>,\r\n) {\r\n    let error: string;\r\n    let line_number = tokenizer.line_number;\r\n    let line_start = tokenizer.line_start;\r\n    let root = this.match_tree;\r\n    let node = root;\r\n    let path = \"\";\r\n    let str = \"\";\r\n    let char: string;\r\n    let backslash_count = 0;\r\n    let token: Token;\r\n    let self = this;\r\n\r\n    while (char = tokenizer.input[tokenizer.index++]) {\r\n        let has_escape = backslash_count % 2;\r\n        if (char === MARKS.ESCAPE) {\r\n            backslash_count += 1;\r\n            if (has_escape) {\r\n                path += char;\r\n                node = node[MARKS.ESCAPE]\r\n            }\r\n        } else {\r\n            path += char;\r\n            backslash_count = 0;\r\n            if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n                node = node[\r\n                    has_escape\r\n                        ? `${MARKS.ESCAPE}\\n`\r\n                        : \"\\n\"\r\n                ];\r\n                if (node && node._state === MATCH_STATUS.END) {\r\n                    tokenizer.index -= 1;\r\n                    if ((token = _next())) {\r\n                        return token;\r\n                    }\r\n                    tokenizer.index += 1;\r\n                }\r\n                tokenizer.line_number += 1;\r\n                tokenizer.line_start = tokenizer.index;\r\n            } else {\r\n                node = node[!has_escape ? char : MARKS.ESCAPE + char];\r\n            }\r\n        }\r\n        if (node && (token = _next())) {\r\n            return token;\r\n        }\r\n        if (!node) {\r\n            str += path;\r\n            node = root;\r\n            path = \"\";\r\n        }\r\n    }\r\n    if ((node = root[MARKS.EOF])) {\r\n        return _next();\r\n    } else {\r\n        tokenizer.err(_finally());\r\n    }\r\n    function _finally() {\r\n        tokenizer._scope = scope;\r\n        tokenizer._bak = str;\r\n        return tokenizer.createToken(\r\n            self.type,\r\n            [start, tokenizer.index],\r\n            undefined, { line: line_number, column: start - line_start }\r\n        );\r\n    }\r\n    function _next() {\r\n        node._error && (error = node._error);\r\n        switch (node._state) {\r\n            case MATCH_STATUS.END:\r\n                if (\r\n                    !node._end\r\n                    || node._end(tokenizer, scope, start, error)\r\n                ) {\r\n                    let token = _finally();\r\n                    if (node._error || error) {\r\n                        token.error = (node._error || error);\r\n                        tokenizer.err(token);\r\n                    }\r\n                    return token;\r\n                }\r\n                break;\r\n            case MATCH_STATUS.ATTACH:\r\n                let res = node._attach(tokenizer, scope, start, error);\r\n                res && (path = res);\r\n                break;\r\n            case MATCH_STATUS.ERROR:\r\n                error || (error = \"Invalid or unexpected token\");\r\n            case MATCH_STATUS.NEXT:\r\n                if (node._next) {\r\n                    tokenizer._bak = str;\r\n                    return node._next(tokenizer, scope, start, error);\r\n                }\r\n                break;\r\n            default:\r\n                if (node._str === undefined) {\r\n                    return;\r\n                } else {\r\n                    path = node._str;\r\n                }\r\n        }\r\n        node = null;\r\n    }\r\n}\r\n/*\r\nfunction search_scan(tokenizer: Tokenizer, start: number) {\r\n    let bound = this.bound;\r\n    let start_line = tokenizer.line_number;\r\n    let start_column = start - tokenizer.line_start;\r\n    let matched_count = 0;\r\n    for (\r\n        let char = tokenizer.input[tokenizer.index++];\r\n        char;\r\n        char = tokenizer.input[tokenizer.index++]\r\n    ) {\r\n        if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n            if (bound === \"\\n\") {\r\n                tokenizer.index -= 1;\r\n                break;\r\n            }\r\n            tokenizer.line_number += 1;\r\n            tokenizer.line_start = tokenizer.index;\r\n        } else if (char === bound[matched_count]) {\r\n            if (bound.length > ++matched_count) {\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        matched_count = 0;\r\n    }\r\n    let token = tokenizer.createToken(\r\n        this.type,\r\n        [start, tokenizer.index],\r\n        undefined,\r\n        { line: start_line, column: start_column }\r\n    );\r\n    if (matched_count !== bound.length && bound !== \"\\n\" && bound !== \"EOF\") {\r\n        token.error = \"Invalid or unexpected token\";\r\n        tokenizer.err(token);\r\n    }\r\n    return token;\r\n}*/\r\nexport {\r\n    createSearchTree, escape_scan, MARKS\r\n}"],"sourceRoot":""}