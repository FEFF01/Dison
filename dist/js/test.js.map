{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/syntax/head.ts","webpack:///./js/character.ts","webpack:///./js/tokenizer.ts","webpack:///./js/interfaces.ts","webpack:///./js/lexical/head.ts","webpack:///./js/lexical/index.ts","webpack:///(webpack)/buildin/module.js","webpack:///./js/parser.ts","webpack:///./js/syntax/expression.ts","webpack:///./js/syntax/declaration.ts","webpack:///./js/index.ts","webpack:///./js/syntax/pattern.ts","webpack:///./js/syntax/statement.ts","webpack:///./js/syntax/module_declaration.ts","webpack:///./js/test.ts","webpack:///./js/test/esprima.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","type_punctuator","TYPE_ENUMS","Punctuator","type_keyword","Keyword","type_identifier","Identifier","_Punctuator","values","unshift","_Or","_Keyword","_Identifier","_Pattern","args","OPERATOR_ID","_calc_nth","props","nth","Cover","length","Mark","prop","_key","undefined","data","origin","operands","sub_operators","pipe","this","_pipes","push","walk","walker","bind_env","_walker","_bind_env","_factors","operand","Operator","parts","replace","split","slice","map","parents","factor","pipes","result","concat","attach","type","prev_item","root","getNode","reduce","res","value_node","console","warn","parent","child","setWrap","records","getDeepNodes","children","factors","getNextNodes","Array","apply","context","index","MATCHED_RECORD","_get_wrapper_function","_Option","Option","some","Or","_Series","Series","_NonCapturing","NonCapturing","_NonCollecting","NonCollecting","_Loop","Loop","_Mark","NODES","Grouping","node","grouping","range","loc","Directive","expression","directive","Script","body","sourceType","Module","_get_adapt","eval","createMatchTree","block_list","prevent_update","item","wrapper","collectors","handlers","overload","precedences","filters","validators","indexOf","filter","handler","validator","collector","precedence","Number","_collector","nodes","operator","last_node","matched_record","_Context","parser","state_stack","wrap","unwrap","store","restore_point","arguments","restore","point","getToken","tokens","pop","FutureReservedWord","StrictModeReservedWord","RestrictedWord","isFutureReservedWord","id","isStrictModeReservedWord","isRestrictedWord","_if_strict_throw_err","token","err","_if_reserved_throw_err","validateIdentifier","THROW_RESTRICT_WORDS_PATTERN","THROW_STRICT_RESERVED_WORDS_PATTERN","IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN","EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN","IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN","EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN","validateAssignment","validateBinding","binding_set","validateLineTerminator","collected","right","_next","next_token","start","line","end","_SuccessCollector","pattern","Success","join_content","success","content","TYPE_ALIAS","ASSIGNMENT_PUNCTUATORS_PATTERN","MODULE_ITEM_PATTERN","STATEMANT_LIST_ITEM_PATTERN","RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN","TOPLEVEL_ITEM_PATTERN","isAligned","left","attachLocation","source","reinterpretKeywordAsIdentifier","tokenizer","_volatility","identifier","configurable","reinterpretIdentifierAsKeyword","_Validate","is_right_parentheses","is_right_brackets","is_right_braces","extract_success","parse_and_extract","match_tree","parseCustom","get_inner_group","parse_next_statement","SYNTAX_TREE","isStatementListItem","token_hooks","AsyncGetter","await_tasks","async_data","is_open","async_mapper","open","tasks","task","callback","set","cbfun","async_getter","IdentifierStart","IdentifierPart","testCodePoint","regexp","input","charCodeAt","test","testUnicodeEscape","code","cp","hexValue","len","fromCodePoint","scanHex","ch","decimalValue","octalValue","binaryValue","isWhiteSpace","isLineTerminator","String","fromCharCode","inIdentifierStart","inIdentifierPart","options","save_comments","error_logs","init","line_number","line_start","terminator_stack","curly_stack","tokenize","nextToken","_nextToken","hook","Comments","createToken","column","match","prev_node","target","scanner","nextIdentifier","str","TOKEN_TYPE_MAPPERS","is_primary_expr_start","nextPunctuator","PRIMARY_EXPR_START_PUNCTUATORS_TREE","PUNCTUATORS_TREE","nextNumeric","number","flags","_get_token","Numeric","_get_error","message","error","NUMERIC_KEYWORD_MAPPINGS","skipNonsenses","createSearchTree","part","_Scanner","use_escape_mode","char","scan_tree","backslash_count","self","has_escape","_finally","splice","end_index","_scopes","TOKEN_TYPE_SET","octal_escape","octal","octal_escape_tree","strbase_scan_tree","not_allow_octal_escape","template_base","shift","PUNCTUATORS","escape_scan","bound","REGEXP_DESCRIPTOR","class_marker","regex","Boolean","RegularExpression","Template","TemplateElement","Null","webpackPolyfill","deprecate","paths","padding_token","parse","parseScript","parseModule","_parse","script","parseExpression","parseNode","EXPRESSION_TREE","isExpression","parseRangeAsNode","lexcal_terminator","parseRange","parseRangeAsExpression","parseRangeAsBlock","match_tree_stack","context_stack","environments","begin","extreme","state","cursor","backflow_tape","finallize","longest","longest_precedence","extreme_precedence","before_token","after_token","next","minimum","explore","matched","get_records","matched_node","has_backflow","type_node","alias","createNode","offset","restore_volatility","start_token","end_token","record","parseArrayPattern","parseObjectPattern","walk_primary_expression","PRIMARY_EXPRESSION_TREE","getLiteral","parse_value","raw","getStringLiteral","getRegularLiteral","RegExp","e","init_token_hooks","ARGUMENTS_PATTERN","ARGUMENTS_TREE","PARAMS_PATTERN","PARAMS_TREE","kind","params","params_count","BODY_PATTERN","generator","async","body_context","block","BlockStatement","FUNCTION_BODY_PATTERN","PrimaryExpressions","PROPERTIES_TREE","_","expressions","quasis","tail","cooked","__","parse_params","superClass","METHOD_DEFINITIONS_TREE","Expressions","elements","ARRAY_ELEMENTS_TREE","properties","OBJECT_PROPERTIES_TREE","tag","quasi","computed","meta","callee","first_token","first_token_type","argument","prefix","delegate","expr","SequenceExpression","UNIT_EXPRESSION_TREE","COMPUTED_PROPERTY_NAME_PATTERN","LITERAL_PROPERTY_NAME_PATTERN","PROPERTY_NAME_PATTERN","MethodDefinitions","MethodDefinition","_prev","static","_static","FunctionExpression","Arguments","Params","ArrayElements","Properties","method","shorthand","ObjectProperties","window","test1","Patterns","type_name","get_variable_declarator","VARIABLE_DECLARATOR_TREE","VariableDeclarators","reinterpreat_expression_as_declaration","Declarations","declarations","EXPRESSION_ITEM_PATTERN","DECLARATION_ITEM_PATTERN","STATEMENT_ITEM_PATTERN","STATEMENT_LIST_ITEM_PATTERN","descriptor","patterns","isDeclaration","isStatement","isModuleItem","Tokenizer","Parser","Dison","PETTERN_ELEMENTS_TREE","PATTERN_PROPERTIES_TREE","PatternElements","PatternProperties","ArrayPattern","is_binding","ObjectPattern","AssignmentPattern","Property","_value","VariableDeclaration","STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN","BLOCK_STATEMENT_PATTERN","GROUPING_EXPRESSION","Statements","label","keyword","iterator","FOR_ITERATOR_TREE","consequent","alternate","label_name","label_set","discriminant","cases","has_default","param","finalizer","statements","ForIterator","ForStatement","update","declarator","STRING_LITERAL_PATTERN","ImportSpecifiers","ImportSpecifier","imported","local","IMPORT_SPECIFIERS_TREE","EXPORT_SPECIFIERS_TREE","ExportSpecifier","exported","ModuleDeclarations","specifiers","declaration","a","b","esprima","data0","innerHTML","test_data","time","log","timeEnd","weakEqual","table","control","output","equal","keys","Set","from","factory","loaded","comment_handler_1","jsx_parser_1","parser_1","tokenizer_1","commentHandler","proxyDelegate","metadata","visit","parserDelegate","collectComment","comment","attachComment","CommentHandler","isModule","jsx","JSXParser","ast","comments","config","tolerant","errors","errorHandler","parsingOptions","getNextToken","tolerate","syntax_1","Syntax","version","stack","leading","trailing","insertInnerComments","innerComments","entry","findTrailingComments","trailingComments","last","firstComment","findLeadingComments","leadingComments","visitNode","Program","visitComment","AssignmentExpression","ArrayExpression","ArrowFunctionExpression","AwaitExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExpressionStatement","ForOfStatement","ForInStatement","FunctionDeclaration","IfStatement","Import","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","NewExpression","ObjectExpression","RestElement","ReturnStatement","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","extendStatics","__extends","setPrototypeOf","__proto__","constructor","character_1","JSXNode","jsx_syntax_1","Node","token_1","xhtml_entities_1","getQualifiedElementName","elementName","qualifiedName","JSXSyntax","JSXIdentifier","JSXNamespacedName","namespace","JSXMemberExpression","TokenName","_super","parsePrimaryExpression","parseJSXRoot","startJSX","startMarker","lineNumber","lineStart","finishJSX","reenterJSX","expectJSX","createJSXNode","collectComments","createJSXChildNode","scanXHTMLEntity","quote","valid","terminated","numeric","hex","eof","Character","isDecimalDigit","isHexDigit","substr","parseInt","XHTMLEntities","lexJSX","n1","n2","isIdentifierStart","isIdentifierPart","lex","nextJSXToken","lastMarker","convertToken","nextJSXText","text","peekJSXToken","saveState","scanComments","restoreState","throwUnexpectedToken","matchJSX","parseJSXIdentifier","finalize","parseJSXElementName","name_1","parseJSXAttributeName","attributeName","name_2","parseJSXStringLiteralAttribute","getTokenRaw","parseJSXExpressionAttribute","tolerateError","parseAssignmentExpression","JSXExpressionContainer","parseJSXAttributeValue","parseJSXElement","parseJSXNameValueAttribute","JSXAttribute","parseJSXSpreadAttribute","JSXSpreadAttribute","parseJSXAttributes","attributes","attribute","parseJSXOpeningElement","selfClosing","JSXOpeningElement","parseJSXBoundaryElement","JSXClosingElement","parseJSXEmptyExpression","JSXEmptyExpression","parseJSXExpressionContainer","parseJSXChildren","JSXText","container","parseComplexJSXElement","el","element","opening","JSXElement","closing","open_1","isStartOfExpression","Regex","NonAsciiIdentifierStart","NonAsciiIdentifierPart","isOctalDigit","openingElement","closingElement","AsyncArrowFunctionExpression","AsyncFunctionDeclaration","AsyncFunctionExpression","logical","ComputedMemberExpression","each","isStatic","RegexLiteral","StaticMemberExpression","assert_1","error_handler_1","messages_1","scanner_1","ErrorHandler","Scanner","trackComment","operatorPrecedence","lookahead","hasLineTerminator","await","allowIn","allowStrictDirective","allowYield","firstCoverInitializedNameError","isAssignmentTarget","isBindingElement","inFunctionBody","inIteration","inSwitch","labelSet","strict","throwError","messageFormat","_i","msg","whole","idx","assert","createError","unexpectedTokenError","Messages","UnexpectedToken","UnexpectedEOS","UnexpectedIdentifier","UnexpectedNumber","UnexpectedString","UnexpectedTemplate","UnexpectedReserved","StrictReservedWord","lastMarkerLineStart","tolerateUnexpectedToken","multiLine","nextRegexToken","scanRegExp","startNode","lastLineStart","marker","expect","expectCommaSeparator","expectKeyword","matchKeyword","matchContextualKeyword","matchAssign","op","isolateCoverGrammar","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","inheritCoverGrammar","consumeSemicolon","matchAsyncFunction","parseFunctionExpression","StrictOctalLiteral","parseTemplateLiteral","parseGroupExpression","parseArrayInitializer","parseObjectInitializer","parseIdentifierName","parseClassExpression","matchImportCall","parseImportCall","parseSpreadElement","arg","parsePropertyMethod","previousStrict","previousAllowStrictDirective","simple","parseFunctionSourceElements","firstRestricted","stricted","parsePropertyMethodFunction","previousAllowYield","parseFormalParameters","parsePropertyMethodAsyncFunction","previousAwait","parseObjectPropertyKey","isPropertyKey","parseObjectProperty","hasProto","isAsync","lookaheadPropertyKey","qualifiedPropertyName","parseGetterMethod","parseSetterMethod","parseGeneratorMethod","DuplicateProtoProperty","parseTemplateHead","head","parseTemplateElement","reinterpretExpressionAsPattern","startToken","parseRestElement","arrow","parseArguments","isIdentifierName","parseNewExpression","parseLeftHandSideExpression","parseAsyncArgument","parseAsyncArguments","parseLeftHandSideExpressionAllowCall","maybeAsync","previousAllowIn","asyncArrow","BadImportCallArity","parseSuper","parseUpdateExpression","parseUnaryExpression","StrictLHSPrefix","InvalidLHSInAssignment","StrictLHSPostfix","parseAwaitExpression","StrictDelete","parseExponentiationExpression","binaryPrecedence","parseBinaryExpression","prec","markers","parseConditionalExpression","checkPatternParam","validateParam","reinterpretAsCoverFormalsList","paramSet","StrictParamDupe","parseYieldExpression","list","StrictLHSAssignment","parseStatementListItem","statement","IllegalExportDeclaration","parseExportDeclaration","parseExpressionStatement","IllegalImportDeclaration","parseImportDeclaration","parseLexicalDeclaration","inFor","parseFunctionDeclaration","parseClassDeclaration","isLexicalDeclaration","parseStatement","parseBlock","parseLexicalBinding","parsePattern","StrictVarName","DeclarationMissingInitializer","parseBindingList","parseBindingRestElement","parsePatternWithDefault","parsePropertyPattern","keyToken","parseVariableIdentifier","parseRestProperty","DefaultRestProperty","PropertyAfterRestProperty","LetInLexicalBinding","parseVariableDeclaration","parseVariableDeclarationList","opt","parseVariableStatement","parseEmptyStatement","parseIfClause","StrictFunction","parseIfStatement","parseDoWhileStatement","previousInIteration","parseWhileStatement","parseForStatement","forIn","decl","ForInOfLoopInitializer","initStartToken","InvalidLHSInForIn","InvalidLHSInForLoop","initSeq","parseContinueStatement","UnknownLabel","IllegalContinue","parseBreakStatement","IllegalBreak","parseReturnStatement","IllegalReturn","parseWithStatement","StrictModeWith","parseSwitchCase","parseSwitchStatement","previousInSwitch","defaultFound","clause","MultipleDefaultsInSwitch","parseLabelledStatement","Redeclaration","GeneratorInLegacyContext","parseThrowStatement","NewlineAfterThrow","parseCatchClause","paramMap","DuplicateBinding","StrictCatchVariable","parseFinallyClause","parseTryStatement","NoCatchOrFinally","parseDebuggerStatement","parseDirectivePrologues","previousLabelSet","previousInFunctionBody","StrictParamName","writable","DefaultRestParameter","ParameterAfterRestParameter","parseFormalParameter","identifierIsOptional","isGenerator","StrictFunctionName","previousAllowAwait","formalParameters","parseDirective","IllegalLanguageModeDirective","BadGetterArity","BadSetterArity","BadSetterRestParameter","parseClassElement","hasConstructor","punctuator","ConstructorIsAsync","StaticPrototype","ConstructorSpecialMethod","DuplicateConstructor","parseClassElementList","parseClassBody","elementList","classBody","parseModuleSpecifier","InvalidModuleSpecifier","parseImportSpecifier","parseNamedImports","parseImportDefaultSpecifier","parseImportNamespaceSpecifier","NoAsAfterImportNamespace","src","MissingFromClause","parseExportSpecifier","exportDeclaration","isExportFromIdentifier","condition","Error","recordError","constructError","base","col","description","InvalidEscapedReservedWord","InvalidHexEscapeSequence","InvalidRegExp","TemplateOctalLiteral","UnexpectedTokenIllegal","UnterminatedRegExp","toLowerCase","curlyStack","skipSingleLineComment","skipMultiLineComment","isKeyword","codePointAt","second","scanHexEscape","scanUnicodeCodePointEscape","getIdentifier","getComplexIdentifier","octalToDecimal","scanIdentifier","scanPunctuator","scanHexLiteral","num","scanBinaryLiteral","scanOctalLiteral","isImplicitOctalLiteral","scanNumericLiteral","parseFloat","scanStringLiteral","unescapedChar","unescaped","octToDec","scanTemplate","rawOffset","testRegExp","_this","tmp","$0","$1","$2","codePoint","exception","scanRegExpBody","classMarker","scanRegExpFlags","quot","amp","apos","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","loz","spades","clubs","hearts","diams","lang","rang","Reader","curly","paren","beforeFunctionExpression","isRegexStart","previous","check","trackRange","trackLoc","buffer","reader","define"],"mappings":"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","file":"js/test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","\r\n\r\n\r\nimport {\r\n    NodeProp,\r\n    Cover as CoverInterface,\r\n    Mark as MarkInterface,\r\n    Node, Pipe, Connector,\r\n    Matched, CONTEXT, Context, Token, SourceLocation,\r\n    MATCHED,\r\n    MARKS,\r\n    /*PRECEDENCE_FEATURES,*/ PRECEDENCE, Precedence as PrecedenceInterface, MATCHED_RECORDS, Validate\r\n} from '../interfaces';\r\n\r\n\r\nimport {\r\n    TYPE_ENUMS\r\n} from \"../lexical/index\";\r\n\r\nimport Tokenizer from \"../tokenizer\"\r\nlet type_punctuator = TYPE_ENUMS.Punctuator;\r\nlet type_keyword = TYPE_ENUMS.Keyword;\r\nlet type_identifier = TYPE_ENUMS.Identifier;\r\n\r\n\r\nfunction _Punctuator(...values: Array<string | number>) {\r\n    values.unshift(type_punctuator);\r\n    return _Or(values);\r\n}\r\nfunction _Keyword(...values: Array<string | number>) {\r\n    values.unshift(type_keyword);\r\n    return _Or(values);\r\n}\r\nfunction _Identifier(...values: Array<string | number>) {\r\n    values.unshift(type_identifier);\r\n    return _Or(values);\r\n}\r\nfunction _Pattern(...args: Array<string | number>) {\r\n    return _Or(args);\r\n}\r\n\r\nimport Parser from '../parser'\r\nlet OPERATOR_ID = 0;\r\n\r\nfunction _calc_nth(props: Array<NodeProp>, key: string | Mark | Cover) {\r\n    let nth = 0;\r\n    if (!(key instanceof Cover) && props.length) {\r\n        key instanceof Mark && (key = key.key);\r\n        for (let i = props.length - 1; i >= 0; i--) {\r\n            let prop = props[i], _key = prop[0];\r\n            if (\r\n                _key === key\r\n                || _key instanceof Mark\r\n                && _key.key === key\r\n                && (_key.value !== undefined || _key.data !== Mark.prototype.data)\r\n            ) {\r\n                if (prop[1] === 0) {\r\n                    prop = props[i] = [prop[0], 1, prop[2]];\r\n                }\r\n                nth = prop[1] + 1;\r\n            } else if (\r\n                !(_key instanceof Cover && _key.origin === key)\r\n            ) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return nth;\r\n}\r\n\r\nabstract class Operator {\r\n    private _factors: Array<[string | number, Array<string | number>] | Operator | Mark>;\r\n    private _pipes: Array<Pipe>;\r\n    private _walker: Connector;\r\n    private _bind_env: boolean;\r\n    public sub_operators = [];\r\n    public test: (token: Token, index?: number) => boolean;\r\n    constructor(public operands: Operands) { }\r\n    public pipe(pipe: Pipe) {\r\n        if (this._pipes) {\r\n            this._pipes.push(pipe);\r\n        } else {\r\n            this._pipes = [pipe];\r\n        }\r\n        return this;\r\n    }\r\n    public walk(walker: Connector, bind_env?: boolean) {\r\n        this._walker = walker;\r\n        this._bind_env = !!bind_env;\r\n        return this;\r\n    }\r\n    public get factors() {\r\n        if (!this._factors) {\r\n            this._factors = [];\r\n            for (const operand of this.operands) {\r\n                if (operand instanceof Operator || operand instanceof Mark) {\r\n                    this._factors.push(operand);\r\n                } else {\r\n\r\n                    let parts = typeof operand === \"string\" ?\r\n                        operand.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/) :\r\n                        operand;\r\n                    this._factors.push(\r\n                        [\r\n                            parts[0],\r\n                            parts.length > 1\r\n                                ? parts.slice(1)\r\n                                : [MARKS.TYPE_ONLY]\r\n                        ]);\r\n                }\r\n            }\r\n        }\r\n        return this._factors;\r\n    }\r\n    abstract attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>): IterationRecord;\r\n\r\n    protected map(\r\n        parents: IterationRecord,\r\n        factor: [string | number, Array<string | number>] | Operator | Mark,\r\n        key: string | Cover,\r\n        pipes?: Array<Pipe>\r\n    ) {\r\n        let result: IterationRecord = [];\r\n        let _pipes = pipes\r\n            ? this._pipes ?\r\n                this._pipes.concat(pipes)\r\n                : pipes\r\n            : this._pipes;\r\n        if (factor instanceof Operator || factor instanceof Mark) {\r\n            return factor.attach(parents, key, _pipes);\r\n        } else {\r\n            let type = factor[0], values = factor[1];\r\n            for (const prev_item of parents) {\r\n                let [root, props] = prev_item;\r\n                props = props.slice();\r\n                props.push([key, _calc_nth(props, key), _pipes]);\r\n                let parent = this.getNode(root, type);\r\n\r\n                let walker = this._walker;\r\n                if (walker && this._bind_env) {\r\n                    walker = walker.bind(\r\n                        props.reduce((res, prop) => {\r\n                            let key = prop[0];\r\n                            if (key instanceof Mark) {\r\n                                res[key.key] = key.value;\r\n                            } else {\r\n                                res[key instanceof Cover ? key.origin : key] = true;\r\n                            }\r\n                            return res;\r\n                        }, {})\r\n                    );\r\n                }\r\n\r\n                for (const value of values) {\r\n                    let value_node = this.getNode(parent, value, root);\r\n                    if (\r\n                        value_node[MARKS.WALKER]\r\n                        && value_node[MARKS.WALKER] !== walker\r\n                    ) {\r\n                        console.warn(\r\n                            \"conflict:\",\r\n                            value_node,\r\n                            value_node[MARKS.WALKER],\r\n                            walker\r\n                        );\r\n                    }\r\n                    if (walker) {\r\n                        value_node[MARKS.WALKER] = walker;\r\n                    }\r\n                    result.push(\r\n                        [\r\n                            value_node,\r\n                            props,\r\n                            null/*[root, factor[0], value, prev_item]//Loop*/\r\n                        ]\r\n                    );\r\n                }\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n    private getNode(parent: any, key: string | number, root?: any) {\r\n        let child = parent[key];\r\n        if (child) {\r\n            if (child[MARKS.IDENTIFIER] !== OPERATOR_ID) {\r\n                parent[key] = child = { ...child };\r\n                child[MARKS.IDENTIFIER] = OPERATOR_ID;\r\n            }\r\n            return child;\r\n        }\r\n\r\n        child = parent[key] = {\r\n            [MARKS.IDENTIFIER]: OPERATOR_ID\r\n        };\r\n        if (root) {\r\n            child[MARKS.DEEPTH] = root[MARKS.DEEPTH] + 1;\r\n            root[MARKS.TERMINAL] = false;\r\n            child[MARKS.TERMINAL] = true;\r\n            /*if (root[MATCH_MARKS.MATCH_END]) {\r\n                root[MATCH_MARKS.MATCH_END][MATCHED_RECORDS.precedence][PRECEDENCE.TERMINAL] = false;\r\n            }*/\r\n        }\r\n        return child;\r\n    }\r\n    protected setWrap(records: IterationRecord) {//Loop\r\n        throw 'not used';\r\n        for (const record of records) {\r\n            let prev_item = record, curr_item = prev_item;\r\n            while ((curr_item = prev_item[2] && prev_item[2][3]) && curr_item[2]) {\r\n                prev_item = curr_item;\r\n            }\r\n            if (prev_item[2]) {\r\n                let linked = prev_item[2];\r\n                let node = this.getNode(record[0], linked[1]);\r\n                if (node[linked[2]] && node[linked[2]] !== prev_item[0]) {\r\n                    throw node[linked[2]];\r\n                }\r\n                node[linked[2]] = prev_item[0];\r\n            }\r\n        }\r\n        return records;\r\n    }\r\n    protected getDeepNodes(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let children = parents, factors = this.factors;\r\n        for (const factor of factors) {\r\n            children = this.map(children, factor, key, pipes);\r\n        }\r\n        return children;\r\n    }\r\n    protected getNextNodes(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let children = [], factors = this.factors;\r\n        for (const factor of factors) {\r\n            Array.prototype.push.apply(children, this.map(parents, factor, key, pipes));\r\n        }\r\n        return children;\r\n    }\r\n}\r\n\r\ntype Operand = string | /*number |*/ Operator | Mark | Array<string | number>;\r\ntype Operands = Array<Operand>;\r\ntype IterationRecordItem = [\r\n    Record<string, any>,\r\n    Array<NodeProp>,\r\n    [Record<string, any>, string, string, IterationRecordItem] | null\r\n]\r\ntype IterationRecord = Array<IterationRecordItem>;\r\n\r\nclass Option extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        let children = this.getNextNodes(parents, key, pipes).concat(parents);\r\n        return children;\r\n    }\r\n}\r\nclass Or extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, key, pipes);\r\n    }\r\n}\r\n\r\nclass Series extends Operator {\r\n    attach(parents: IterationRecord, key: string, pipes?: Array<Pipe>) {\r\n        return this.getDeepNodes(parents, key, pipes);\r\n    }\r\n}\r\n/*\r\nclass And extends Operator  {\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw \"not used\";\r\n        return [];\r\n    }\r\n}\r\nclass Not extends Operator {\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw \"not used\";\r\n        return [];\r\n        \r\n    }\r\n}*/\r\nclass Cover implements CoverInterface {\r\n    constructor(public origin: any, public value: any) {\r\n        if (origin instanceof Cover) {\r\n            this.origin = origin.origin;\r\n        }\r\n    }\r\n}\r\nclass NonCapturing extends Operator {\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, new Cover(key, null), pipes);\r\n    }\r\n}\r\n\r\nclass NonCollecting extends Operator {\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        return this.getNextNodes(parents, new Cover(key, \"\"), pipes);\r\n    }\r\n}\r\n\r\nclass Loop extends Operator {\r\n    //Loop 内部的 Option 可能会导致 Loop 取值混乱(当前用不到这种情况，不处理这种情况能减少消耗)\r\n    attach(parents: IterationRecord, key: string) {\r\n        throw 'not used';\r\n        //有点耗费性能，不是很必要用这个，已在parser核心部分去除Loop的支持\r\n        let baks = [];\r\n        for (const parent of parents) {\r\n            baks.push(parent[2]);\r\n            parent[2] = null;\r\n        }\r\n        let res = this.setWrap(this.getNextNodes(parents, key));\r\n        for (const index in parents) {\r\n            parents[index][2] = baks[index];\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nclass Mark implements MarkInterface {\r\n    static MATCHED_RECORD: Matched;\r\n    public key: string;\r\n    public value: any;\r\n    constructor(value?: any) {\r\n        if (typeof value === \"function\") {\r\n            this.data = value;\r\n        } else {\r\n            this.value = value;\r\n        }\r\n    }\r\n    data(context: Context, index: number) {\r\n        return this.value;\r\n    }\r\n    attach(parents: IterationRecord, key: string | Cover, pipes?: Array<Pipe>) {\r\n        let value = this.value;\r\n        if (!(key instanceof Cover) && (value !== undefined || this.data !== Mark.prototype.data)) {\r\n            if (key === \"type\") {\r\n                Mark.MATCHED_RECORD[MATCHED.wrapper] = _get_wrapper_function(value);;\r\n            } else {\r\n                let result: IterationRecord = [];\r\n                this.key = key;\r\n                for (const parent of parents) {\r\n                    let props = parent[1].slice();\r\n                    props.push([this, _calc_nth(props, this), undefined]);\r\n                    result.push([parent[0], props, parent[2]]);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        return parents;\r\n    }\r\n}\r\n\r\nfunction _Option(...some: Operands) {\r\n    return new Option(some);\r\n}\r\n/*\r\nfunction _Not(...some: Operands) {\r\n    return new Not(some);\r\n}\r\nfunction _And(...some: Operands) {\r\n    return new And(some);\r\n}*/\r\nfunction _Or(...some: Operands) {\r\n    return new Or(some);\r\n}\r\nfunction _Series(...some: Operands) {\r\n    return new Series(some);\r\n}\r\nfunction _NonCapturing(...some: Operands) {\r\n    return new NonCapturing(some);\r\n}\r\nfunction _NonCollecting(...some: Operands) {\r\n    return new NonCollecting(some);\r\n}\r\n\r\n\r\nfunction _Loop(...some: Operands) {\r\n    return new Loop(some);\r\n}\r\nfunction _Mark(some?: any) {\r\n    return new Mark(some);\r\n}\r\nlet NODES: Record<string, (...args: any) => void> = {\r\n    Grouping(node?: Record<string, any>, grouping?: Token) {\r\n        this.type = \"Grouping\";\r\n        for (const key in node) {\r\n            this[key] = node[key];\r\n        }\r\n        if (grouping) {\r\n            this.range = grouping.range;\r\n            this.loc = grouping.loc;\r\n        }\r\n    },\r\n    Directive(\r\n        type: string,\r\n        expression: Node,\r\n        directive: string,\r\n        range: [number, number],\r\n        loc: SourceLocation\r\n    ) {\r\n        this.type = type;\r\n        this.expression = expression;\r\n        this.directive = directive;\r\n        this.range = range;\r\n        this.loc = loc;\r\n    },\r\n    Script(body: Array<Node>) {\r\n        this.type = \"Program\";\r\n        this.sourceType = \"script\";\r\n        this.body = body;\r\n    },\r\n    Module(body: Array<Node>) {\r\n        this.type = \"Program\";\r\n        this.sourceType = \"module\";\r\n        this.body = body;\r\n    }\r\n};\r\nfunction _get_adapt(data: any, index: number) {\r\n    return data instanceof Array ? index < data.length\r\n        ? data[index]\r\n        : data[data.length - 1] : data;\r\n}\r\nfunction _get_wrapper_function(type: string) {\r\n    return NODES[type]\r\n        || (\r\n            NODES[type]\r\n            = type ? eval(`(function ${type}(){this.type=\"${type}\"})`) : function () { }\r\n        );\r\n}\r\nfunction createMatchTree(\r\n    data: Record<string, any> | Array<Record<string, any>>,\r\n    root?: Record<string, any>,\r\n    block_list: Array<string> = [],\r\n    prevent_update = false\r\n) {\r\n    prevent_update || (OPERATOR_ID += 1);\r\n    root = root ? prevent_update ? root : { ...root } : { [MARKS.DEEPTH]: -1 };\r\n\r\n    if (data instanceof Array) {\r\n        for (const item of data) {\r\n            root = createMatchTree(item, root, block_list, true);\r\n        }\r\n    } else {\r\n        for (const type in data) {\r\n            let wrapper = _get_wrapper_function(type);\r\n            for (let item of data[type] instanceof Array ? data[type] : [data[type]]) {\r\n                let {\r\n                    collector: collectors,\r\n                    handler: handlers,\r\n                    overload,\r\n                    precedence: precedences = true/*PRECEDENCE_FEATURES.IMMEDIATE*/,\r\n                    filter: filters,\r\n                    validator: validators\r\n                } = item;\r\n                if (!collectors || ~block_list.indexOf(type)) {\r\n                    continue;\r\n                }\r\n                typeof filters === \"string\" && (filters = data[filters].filter);\r\n                typeof handlers === \"string\" && (handlers = data[handlers].handler);\r\n                typeof validators === \"string\" && (validators = data[validators].validator);\r\n                collectors instanceof Array || (collectors = [collectors]);\r\n\r\n                for (let index = 0; index < collectors.length; index++) {\r\n                    let collector = collectors[index];\r\n\r\n                    let precedence: any = _get_adapt(precedences, index);\r\n                    let handler: Matched[MATCHED.handler] = _get_adapt(handlers, index);\r\n                    let filter: Matched[MATCHED.filter] = _get_adapt(filters, index);\r\n                    let validator: Matched[MATCHED.validator] = _get_adapt(validators, index);\r\n                    Mark.MATCHED_RECORD = [\r\n                        [precedence instanceof Number ? Number(precedence) : precedence, precedence],\r\n                        null,\r\n                        wrapper,\r\n                        handler,\r\n                        validator,\r\n                        filter\r\n                    ];\r\n                    if (collector instanceof Array) {\r\n                        let _collector = { ...collectors[index - 1] };\r\n                        collector[0] && !(collector[0] instanceof Array) && (collector = [collector]);\r\n                        for (const [key, value] of collector) {\r\n                            _collector[key] = value;\r\n                        }\r\n                        collectors[index] = collector = _collector;\r\n                    }\r\n\r\n                    let nodes: IterationRecord = [[root, [], null]];\r\n\r\n                    //保证所有 key 都是同类型字符开头(否则可能会出现遍历顺序与定义顺序不同)\r\n                    for (const key in collector) {\r\n                        let operator = collector[key];\r\n                        if (!(operator instanceof Operator || operator instanceof Mark)) {\r\n                            operator = _Or(operator);\r\n                        }\r\n                        nodes = operator.attach(nodes, key);\r\n                    }\r\n\r\n                    for (const [last_node, props] of nodes) {\r\n                        let matched_record = Mark.MATCHED_RECORD.slice();\r\n                        matched_record[MATCHED.props] = props;\r\n                        if (!overload && last_node[MARKS.END]) {\r\n                            console.warn(\r\n                                \"conflict:\",\r\n                                last_node,\r\n                                last_node[MARKS.END],\r\n                                matched_record\r\n                            );\r\n                        }\r\n                        last_node[MARKS.END] = matched_record\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n\r\n}\r\n\r\nfunction _Context(parser: Parser): Context {\r\n    let state_stack = [];\r\n    let context: any = new Array(CONTEXT.length);\r\n    context[CONTEXT.parser] = parser;\r\n    context[CONTEXT.labelSet] = [];\r\n    //context[CONTEXT.tokens] = tokens;\r\n    context.wrap = wrap;\r\n    context.unwrap = unwrap;\r\n    context.store = store;\r\n    context.restore = restore;\r\n    context.getToken = getToken;\r\n    Object.defineProperty(context, \"tokens\", {\r\n        get() {\r\n            return this[CONTEXT.tokens] || this[CONTEXT.parser].tokens;\r\n        }\r\n    })\r\n    return context;\r\n\r\n    function getToken(index: number) {\r\n        let tokens = this[CONTEXT.tokens];\r\n        return !tokens ? this[CONTEXT.parser].getToken(index) : tokens[index];\r\n        //return context[CONTEXT.tokens][index];\r\n    }\r\n    function wrap(key: CONTEXT, value: any) {\r\n        state_stack.push(context[key], key);\r\n        context[key] = value;\r\n        return context;\r\n    };\r\n    function unwrap() {\r\n        context[state_stack.pop()] = state_stack.pop();\r\n        return context;\r\n    };\r\n    function store() {\r\n        let restore_point = state_stack.length;\r\n        for (let index = 0; index < arguments.length; index += 2) {\r\n            wrap(arguments[index], arguments[index + 1]);\r\n        }\r\n        return restore_point;\r\n    }\r\n    function restore(point: number) {\r\n        while (state_stack.length > point) {\r\n            unwrap();\r\n        }\r\n        return state_stack.length;\r\n    }\r\n}\r\nconst FutureReservedWord = [\"enum\", \"export\", \"import\", \"super\"];\r\nconst StrictModeReservedWord = [\r\n    \"implements\", \"interface\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"let\"\r\n];\r\nconst RestrictedWord = [\"eval\", \"arguments\"];\r\n\r\nfunction isFutureReservedWord(id: string) {\r\n    return FutureReservedWord.indexOf(id) >= 0;\r\n}\r\nfunction isStrictModeReservedWord(id: string) {\r\n    return StrictModeReservedWord.indexOf(id) >= 0;\r\n}\r\nfunction isRestrictedWord(id: string) {\r\n    return RestrictedWord.indexOf(id) >= 0;\r\n}\r\n\r\n\r\nfunction _if_strict_throw_err(context: Context, token: Token) {\r\n    if (context[CONTEXT.strict]) {\r\n        context[CONTEXT.parser].err(token);\r\n    }\r\n}\r\nfunction _if_reserved_throw_err(context: Context, token: Token) {\r\n    validateIdentifier(context, token);\r\n}\r\nconst THROW_RESTRICT_WORDS_PATTERN = _Or(\r\n    \"Identifier eval arguments\"\r\n).pipe(_if_strict_throw_err);\r\nconst THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\r\n    \"Identifier implements interface package private protected public static yield let\"\r\n).pipe(_if_strict_throw_err);\r\n\r\nconst IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\", THROW_STRICT_RESERVED_WORDS_PATTERN);\r\nconst EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"[Expression]\", THROW_STRICT_RESERVED_WORDS_PATTERN);\r\n\r\nconst IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\").pipe(_if_reserved_throw_err);\r\nconst EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\r\n    \"[Expression]\",\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n);\r\n\r\n\r\n/*const STRICT_RESERVED_WORDS = _Or(\r\n    \"Identifier implements interface package private protected public static yield let\"\r\n);*/\r\nfunction validateIdentifier(context: Context, node: Node) {\r\n    if (\r\n        context[CONTEXT.strict]\r\n    ) {\r\n        if (!isStrictModeReservedWord(node.name)) {\r\n            return true;\r\n        }\r\n        context[CONTEXT.parser].err(node);\r\n        return false;\r\n    }\r\n}\r\nfunction validateAssignment(context: Context, node: Node) {\r\n    if (\r\n        context[CONTEXT.strict]\r\n    ) {\r\n        if (!(\r\n            isRestrictedWord(node.name)\r\n            || isStrictModeReservedWord(node.name)\r\n        )) {\r\n            return true;\r\n        }\r\n        context[CONTEXT.parser].err(node);\r\n        return false;\r\n    }\r\n}\r\nfunction validateBinding(context: Context, node: Node) {\r\n    if (validateAssignment(context, node) === true) {\r\n        let binding_set = context[CONTEXT.bindingSet];\r\n        if (binding_set) {\r\n            binding_set.push(node.name);\r\n            if (binding_set.indexOf(node.name) !== binding_set.length - 1) {\r\n                context[CONTEXT.parser].err(node);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction validateLineTerminator(context: Context) {\r\n    let [collected, parser, , right] = context;\r\n    if (collected._next) {\r\n        delete collected._next;\r\n    } else {\r\n        let next_token = context.getToken(right + 1);\r\n        if (\r\n            next_token\r\n            && !(next_token.type === type_punctuator && next_token.value === \"}\")\r\n            && next_token.loc.start.line === collected.loc.end.line\r\n        ) {\r\n            parser.err(next_token);\r\n        }\r\n    }\r\n    return collected;\r\n}\r\n\r\nfunction _SuccessCollector(pattern: string | Operator) {\r\n    return {\r\n        Success: {\r\n            handler:join_content,\r\n            precedence: 0,\r\n            collector: [\r\n                {\r\n                    success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                    content: pattern,\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlet join_content = function ([collected]: Context) {\r\n    let { success, content } = collected;\r\n    if (success) {\r\n        success.content.push(content);\r\n        return success;\r\n    } else {\r\n        collected.content = [content];\r\n        return collected;\r\n    }\r\n};\r\n\r\nlet TYPE_ALIAS = {};\r\n\r\nconst ASSIGNMENT_PUNCTUATORS_PATTERN = _Or(\"Punctuator = += -= **= *= /= %= <<= >>= >>>= &= ^= |=\");\r\n\r\n\r\nconst MODULE_ITEM_PATTERN = _Or(\r\n    \"ImportDeclaration\",\r\n    \"ExportAllDeclaration\",\r\n    \"ExportNamedDeclaration\",\r\n    \"ExportDefaultDeclaration\"\r\n);\r\nconst STATEMANT_LIST_ITEM_PATTERN = _Or(\"[Declaration]\", \"[Statement]\");\r\n\r\nconst RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN = _Or(\r\n    \"SwitchCase\",\r\n    MODULE_ITEM_PATTERN,\r\n    STATEMANT_LIST_ITEM_PATTERN\r\n);\r\nconst TOPLEVEL_ITEM_PATTERN = _Or(\r\n    MARKS.BOUNDARY,\r\n    \"SwitchCase\",\r\n    MODULE_ITEM_PATTERN,\r\n    STATEMANT_LIST_ITEM_PATTERN\r\n);\r\n\r\nfunction isAligned(context: Context, left: number, right: number) {\r\n    let tokens = context.tokens;\r\n    for (let index = left; index < right; index++) {\r\n        if (tokens[index].loc.end.line !== tokens[index + 1].loc.start.line) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction attachLocation(source: Node, start: Node, end: Node = start) {\r\n    source.range = [start.range[0], end.range[1]];\r\n    source.loc = {\r\n        start: start.loc.start,\r\n        end: end.loc.end\r\n    };\r\n}\r\n\r\n\r\nfunction reinterpretKeywordAsIdentifier({ value, range, loc }: Token, tokenizer?: Tokenizer): Node {\r\n    let name = tokenizer ? tokenizer._volatility : value;\r\n    let identifier = {\r\n        type: \"Identifier\", name, range, loc\r\n    };\r\n    Object.defineProperty(identifier, \"value\", {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: name\r\n    });\r\n    return identifier;\r\n}\r\nfunction reinterpretIdentifierAsKeyword({ value, range, loc }: Token): Node {\r\n    return {\r\n        type: \"Keyword\",\r\n        value,\r\n        range,\r\n        loc\r\n    };\r\n}\r\n\r\nfunction _Validate(type: string | number, value: string): Validate {\r\n    return function (token: Token) {\r\n        return token.type === type && token.value === value;\r\n    }\r\n}\r\n\r\n\r\nlet is_right_parentheses = _Validate(type_punctuator, \")\");\r\nlet is_right_brackets = _Validate(type_punctuator, \"]\");\r\nlet is_right_braces = _Validate(type_punctuator, \"}\");\r\n\r\n\r\n\r\nfunction extract_success(parser: Parser, nodes: Array<Node>) {\r\n    let res: Array<Node> = nodes;\r\n    if (nodes.length) {\r\n        let index = 0;\r\n        if (nodes[0].type === \"Success\") {\r\n            index = 1;\r\n            res = nodes[0].content;\r\n        } else {\r\n            res = [];\r\n        }\r\n        if (nodes.length > index) {\r\n            parser.err(...nodes.slice(index));\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction parse_and_extract(match_tree: Record<string, any>, context: Context, node: Node) {\r\n    let [, parser] = context;\r\n    let tokens = node.content;\r\n    if (tokens.length) {\r\n        context.wrap(CONTEXT.tokens, tokens)\r\n        //context[CONTEXT.tokens] = tokens;\r\n        parser.parseCustom(match_tree, context);\r\n        tokens = extract_success(parser, tokens)\r\n        context.unwrap();\r\n    }\r\n    return tokens;\r\n}\r\n\r\nfunction get_inner_group(token: Token) {\r\n    while (\r\n        token.content.length === 1\r\n        && token.content[0].value === \"()\"\r\n        && token.content[0].type === type_punctuator\r\n    ) {\r\n        token = token.content[0];\r\n    }\r\n    return token;\r\n}\r\n\r\nfunction parse_next_statement(context: Context, start = context[CONTEXT.right] + 1) {\r\n    let parser = context[CONTEXT.parser];\r\n    if (\r\n        parser.parseCustom(\r\n            parser.SYNTAX_TREE,\r\n            context,\r\n            start,\r\n            parser.isStatementListItem\r\n        )\r\n    ) {\r\n        return 0;\r\n    }\r\n}\r\nlet token_hooks: Record<string, (token: Token, tokenizer?: Tokenizer | Parser) => Token> = {};\r\nfunction AsyncGetter() {\r\n    let await_tasks = {};\r\n    let async_data = {};\r\n    let is_open = false;\r\n    let async_mapper: Record<string, any> = {\r\n        open() {\r\n            is_open = true;\r\n            let tasks = [];\r\n            for (const key in await_tasks) {\r\n                if (async_data.hasOwnProperty(key)) {\r\n                    let data = async_data[key];\r\n                    for (let task of await_tasks[key]) {\r\n                        tasks.push([task, data]);\r\n                    }\r\n                }\r\n            }\r\n            for (const task of tasks) {\r\n                task[0](task[1]);\r\n            }\r\n        },\r\n        get(key: string, callback: (data: any) => any) {\r\n            if (await_tasks[key]) {\r\n                await_tasks[key].push(callback);\r\n                if (is_open && async_data.hasOwnProperty(key)) {\r\n                    callback(async_data[key]);\r\n                }\r\n            } else {\r\n                if (async_mapper.hasOwnProperty(key)) {\r\n                    async_data[key] = async_mapper[key];\r\n                    is_open && callback(async_data[key]);\r\n                }\r\n                Object.defineProperty(async_mapper, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    set(data: any) {\r\n                        if (async_data.hasOwnProperty(key)) {\r\n                            debugger;\r\n                        }\r\n                        async_data[key] = data;\r\n                        if (is_open) {\r\n                            for (const cbfun of await_tasks[key]) {\r\n                                cbfun(data);\r\n                            }\r\n                        }\r\n                    },\r\n                    get() {\r\n                        return async_data[key];\r\n                    }\r\n                });\r\n                await_tasks[key] = [callback];\r\n            }\r\n        }\r\n    };\r\n    return async_mapper;\r\n}\r\nlet async_getter = AsyncGetter();\r\nexport {\r\n    async_getter,\r\n    token_hooks,\r\n    parse_next_statement,\r\n    get_inner_group,\r\n    extract_success,\r\n    parse_and_extract,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    _Validate,\r\n    reinterpretIdentifierAsKeyword,\r\n    reinterpretKeywordAsIdentifier,\r\n    attachLocation,\r\n    Cover,\r\n    Mark, isAligned,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    _SuccessCollector,\r\n    join_content,\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    ASSIGNMENT_PUNCTUATORS_PATTERN,\r\n    validateBinding, validateLineTerminator,\r\n    NODES,\r\n    TYPE_ALIAS,\r\n    createMatchTree,\r\n    isRestrictedWord,\r\n    isFutureReservedWord,\r\n    isStrictModeReservedWord,\r\n    validateIdentifier,\r\n    validateAssignment,\r\n    _Context,\r\n    _Option, _Or, _Series, _NonCapturing, _NonCollecting, _Mark, _Loop,\r\n}\r\n","//import { Token } from './interfaces'\r\nconst IdentifierStart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a]|[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\r\nconst IdentifierPart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a\\x30-\\x39]|[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\r\n\r\nexport default class {\r\n    public input: string;\r\n    public index: number;\r\n    public end: number;\r\n    public _volatility: any;\r\n    public _scopes: any;\r\n    private testCodePoint(regexp: RegExp) {\r\n        if (\r\n            (this.input.charCodeAt(this.index) & 0xfc00) === 0xd800\r\n            && (this.input.charCodeAt(this.index + 1) & 0xfc00) === 0xdc00\r\n        ) {\r\n            this._volatility = this.input[this.index] + this.input[this.index + 1];\r\n            return regexp.test(this._volatility) ? 2 : 0;\r\n        } else {\r\n            return regexp.test(this.input[this.index]) ? 1 : 0;\r\n        }\r\n    }\r\n    testUnicodeEscape(regexp: RegExp) {\r\n        let index = this.index + 1, code = 0;\r\n        if (this.input[index++] === \"u\") {\r\n            let cp = 0;\r\n            if (this.input[index] === \"{\") {\r\n                while (\r\n                    (code = this.hexValue(this.input.charCodeAt(++index))) >= 0\r\n                ) {\r\n                    cp = cp * 16 + code;\r\n                }\r\n                if (this.input[index++] !== \"}\") {/* || index < this.index + 5*/\r\n                    return 0;\r\n                }\r\n            } else {\r\n                let len = 4;\r\n                while (len--) {\r\n                    code = this.hexValue(this.input.charCodeAt(index++));\r\n                    if (code >= 0) {\r\n                        cp = cp * 16 + code;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return regexp.test(this.fromCodePoint(cp))\r\n                ? index - this.index\r\n                : -(index - this.index);\r\n        }\r\n        return 0;\r\n    }\r\n    scanHex(length: number = this.end): [number, number] {\r\n        let value = 0, code = 0, len = length;\r\n        while (len) {\r\n            code = this.hexValue(this.input.charCodeAt(this.index));\r\n            if (code >= 0) {\r\n                len--;\r\n                value = value * 16 + code;\r\n            } else {\r\n                break;\r\n            }\r\n            this.index++;\r\n        }\r\n        return [value, length - len];\r\n    }\r\n    hexValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 :\r\n            ch >= 0x41 && ch <= 0x46 ? ch - 0x41 + 10 :\r\n                ch >= 0x61 && ch <= 0x66 ? ch - 0x61 + 10 : -1;\r\n    }\r\n    decimalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 : -1;\r\n    }\r\n    octalValue(ch: number) {\r\n        return ch >= 0x30 && ch <= 0x37 ? ch - 0x30 : -1;\r\n    }\r\n    binaryValue(ch: number) {\r\n        return ch === 0x30 || ch == 0x31 ? ch - 0x30 : -1;\r\n    }\r\n    //https://github.com/jquery/esprima/blob/master/src/character.ts\r\n    isWhiteSpace(ch: number) {\r\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\r\n            (ch >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\r\n        /*return /^\\x20|\\x09|\\x0B|\\x0C|\\xA0|\\xfeff$/.test(char);*/\r\n    }\r\n    isLineTerminator(ch: number) {\r\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\r\n        /*return /^\\x0A|\\x0D|\\x2028|\\x2029$/.test(char);*/\r\n    }\r\n    fromCodePoint(cp: number) {\r\n        return this._volatility = cp < 0x10000\r\n            ? String.fromCharCode(cp)\r\n            : String.fromCharCode(0xd800 + (cp - 0x10000) >> 10)\r\n            + String.fromCharCode(0xdc00 + (cp - 0x10000) & 1023);\r\n    }\r\n    inIdentifierStart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierStart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierStart) : 0)\r\n            );\r\n        /*return /^[_$a-zA-Z\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n    inIdentifierPart() {\r\n        let ch = this.input.charCodeAt(this.index);\r\n        return (ch === 0x24) || (ch === 0x5F) ||\r\n            (ch >= 0x41 && ch <= 0x5A) ||\r\n            (ch >= 0x61 && ch <= 0x7A) ||\r\n            (ch >= 0x30 && ch <= 0x39) ? 1 : (\r\n                ch >= 0x80\r\n                    ? this.testCodePoint(IdentifierPart)\r\n                    : (ch === 0x5c ? this.testUnicodeEscape(IdentifierPart) : 0)\r\n            );\r\n        /*return /^[\\w$\\u0080-\\uffffff]$/.test(char);*/\r\n    }\r\n}","\r\n\r\nimport Character from './character'\r\nimport {\r\n    Position, SourceLocation, Token, SearchTree, NUMERIC_TYPE, Validate, NUMERIC_KEYWORD_MAPPINGS, MARKS\r\n} from \"./interfaces\";\r\n\r\n\r\nexport default class extends Character {\r\n    constructor(options?: Record<string, any>) {\r\n        super()\r\n        for (const key in options) {\r\n            this[key] = options[key];\r\n        }\r\n        //console.log(333, TOKEN_TYPES,TOKEN_TYPE_MAP);\r\n    }\r\n    tokens: Array<Token>;\r\n    curly_stack: Array<any>;\r\n    TYPE_ENUMS: Record<string, string | number>;\r\n    TOKEN_TYPE_MAPPERS: Record<string, string | number>;\r\n    PUNCTUATORS_TREE: SearchTree;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE: SearchTree;\r\n    public token_hooks: Record<string, (token: Token, tokenizer: this) => Token> = {};\r\n    public line_number: number;\r\n    public line_start: number;\r\n    public save_comments: boolean = true;\r\n    public error_logs: Array<any>;\r\n    public terminator_stack: Array<Validate>;\r\n    err(...args: any) {\r\n        //debugger;\r\n        this.error_logs.push.apply(this.error_logs, arguments);\r\n    }\r\n    init(input: string) {\r\n        this.line_number = 0;\r\n        this.line_start = 0;\r\n        this.index = 0;\r\n        this.input = input;\r\n        this.end = this.input.length;\r\n        this.error_logs = [];\r\n        this.tokens = [];\r\n        this.terminator_stack = [];\r\n        this.curly_stack = [];\r\n    }\r\n    tokenize(input: string): Array<Token> {\r\n        this.init(input);\r\n        while (this.nextToken());\r\n        return this.tokens;\r\n    }\r\n    nextToken() {\r\n        while (\r\n            this.index < this.end\r\n            && (\r\n                this.terminator_stack.length === 0\r\n                || this.tokens.length === 0\r\n                || !this.terminator_stack[0](this.tokens[this.tokens.length - 1])\r\n            )\r\n        ) {\r\n            let token = this._nextToken();\r\n            if (token) {\r\n                let hook = this.token_hooks[token.type];\r\n                hook && (token = hook(token, this));\r\n                if (this.save_comments || token.type !== this.TYPE_ENUMS.Comments) {\r\n                    this.tokens.push(token);\r\n                    return token;\r\n                }\r\n            } else if (this.index < this.end) {\r\n                this.err(this.createToken(\"error\", [this.index, ++this.index]))\r\n            }\r\n        }\r\n    }\r\n    createToken(\r\n        type: string | number,\r\n        range: [number, number],\r\n        value: any = this.input.slice(range[0], range[1]),\r\n        start: Position = {\r\n            line: this.line_number,\r\n            column: range[0] - this.line_start\r\n        },\r\n        end: Position = {\r\n            line: this.line_number,\r\n            column: range[1] - this.line_start\r\n        },\r\n    ): Token {\r\n        return {\r\n            type: type,\r\n            value,\r\n            range,\r\n            loc: {\r\n                start, end\r\n            }\r\n        };\r\n    }\r\n    match(node: SearchTree) {\r\n        let start = this.index, end = this.index;\r\n        let prev_node: Token;\r\n        do {\r\n            prev_node = node;\r\n            node = prev_node[this.input[end++]];\r\n        } while (node)\r\n        let target: any = prev_node[MARKS.END];\r\n        if (target && (target.type || (target = target(this)))) {\r\n            this.index = end - 1;\r\n            return target.scanner ?\r\n                target.scanner(this, start) :\r\n                this.createToken(\r\n                    this.TYPE_ENUMS[target.type] || target.type,\r\n                    [start, this.index],\r\n                    target.key\r\n                );\r\n        }\r\n    }\r\n    nextIdentifier(): Token | void {\r\n        let length = this.inIdentifierStart();\r\n        let token: Token;\r\n        if (length > 0) {\r\n            let start = this.index;\r\n            let str = \"\";\r\n            do {\r\n                str += length === 1 ? this.input[this.index] : this._volatility;\r\n                this.index += length;\r\n                length = this.inIdentifierPart();\r\n            } while (length > 0)\r\n            let type = this.TOKEN_TYPE_MAPPERS[\" \" + str];\r\n            token = this.createToken(\r\n                this.TYPE_ENUMS[type || \"Identifier\"],\r\n                [start, this.index]\r\n            );\r\n            this._volatility = str;\r\n            if (type && str.length !== this.index - start) {\r\n                this.err(token);\r\n            }\r\n        }\r\n        if (length < 0) {\r\n            this.err(this.createToken(\"error\", [this.index, this.index -= length]));\r\n        }\r\n        return token;\r\n    }\r\n    is_primary_expr_start() {\r\n        if (this.tokens.length) {\r\n            let last_node: any = this.tokens[this.tokens.length - 1];\r\n            return last_node.type === this.TYPE_ENUMS.Keyword\r\n                || last_node.type === this.TYPE_ENUMS.Punctuator && last_node.content === undefined;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    nextPunctuator(): Token | void {\r\n        return this.match(!this.is_primary_expr_start() ? this.PUNCTUATORS_TREE : this.PRIMARY_EXPR_START_PUNCTUATORS_TREE);\r\n    }\r\n\r\n    nextNumeric(): Token | void {\r\n        let start = this.index;\r\n        let ch = this.input.charCodeAt(this.index);\r\n        let number: number;\r\n        let flags = NUMERIC_TYPE.DECIMAL;\r\n        let _get_token = () => {\r\n            this._volatility = flags & NUMERIC_TYPE.OCTAL ? (flags & ~NUMERIC_TYPE.DECIMAL) : flags;\r\n            return this.createToken(this.TYPE_ENUMS.Numeric, [start, this.index]);\r\n        }\r\n        let _get_error = (message: string = \"Invalid or unexpected token\") => {\r\n            let error = _get_token();\r\n            error.error = message;\r\n            error.input = this.input.slice(start, this.index + 1);\r\n            this.err(error);\r\n            return error;\r\n        }\r\n        let decimalValue = this.decimalValue;\r\n        switch (ch) {\r\n            case 0x2e://\".\"\r\n                if (decimalValue(this.input.charCodeAt(this.index + 1)) >= 0) {\r\n                    this.index += 1;\r\n                    flags |= NUMERIC_TYPE.FLOAT;\r\n                    break;\r\n                } else {\r\n                    return;\r\n                }\r\n            case 0x30://\"0\"\r\n                flags = NUMERIC_KEYWORD_MAPPINGS[this.input[++this.index]];\r\n                if (!flags) {\r\n                    number = decimalValue(this.input.charCodeAt(this.index));\r\n                    if (number >= 0) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        number < 8 && (flags |= NUMERIC_TYPE.OCTAL);\r\n                    } else if (!this.inIdentifierStart()) {\r\n                        flags = NUMERIC_TYPE.DECIMAL;\r\n                        return _get_token();\r\n                    } else {\r\n                        return _get_error();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                if (decimalValue(ch) < 0) {\r\n                    return;\r\n                }\r\n        }\r\n        if (flags & NUMERIC_TYPE.DECIMAL) {\r\n            while ((ch = this.input.charCodeAt(++this.index))) {\r\n                number = decimalValue(ch)\r\n                if (number >= 0) {\r\n                    number < 8 || (flags &= ~NUMERIC_TYPE.OCTAL);\r\n                    continue;\r\n                }\r\n                switch (ch) {\r\n                    case 0x65://\"e\"\r\n                    case 0x45://\"E\"\r\n                        if (!(flags & (NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.E;\r\n                            ch = this.input.charCodeAt(this.index + 1);\r\n                            if (ch === 0x2b || ch === 0x2d) {//+ -\r\n                                this.index += 1;\r\n                            }\r\n                            continue;\r\n                        } else {\r\n                            return _get_error();\r\n                        }\r\n                    case 0x2e://\".\"\r\n                        if (!(flags & (NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.E | NUMERIC_TYPE.OCTAL))) {\r\n                            flags |= NUMERIC_TYPE.FLOAT;\r\n                            continue;\r\n                        }\r\n                    default:\r\n                        return this.inIdentifierStart()\r\n                            ? _get_error()\r\n                            : _get_token();\r\n                }\r\n            }\r\n            return _get_token();\r\n        } else {\r\n            let test = flags & NUMERIC_TYPE.HEX\r\n                ? this.hexValue : (\r\n                    flags & NUMERIC_TYPE.BINARY\r\n                        ? this.binaryValue\r\n                        : this.octalValue\r\n                );\r\n            while (test(this.input.charCodeAt(++this.index)) >= 0);\r\n            return this.index > start + 3 && !this.inIdentifierStart()\r\n                ? _get_token()\r\n                : _get_error();\r\n        }\r\n    }\r\n    skipNonsenses() {\r\n        for (let cp: number; this.index < this.end; this.index++) {\r\n            cp = this.input.charCodeAt(this.index);\r\n            switch (true) {\r\n                case this.isWhiteSpace(cp):\r\n                    break;\r\n                case this.isLineTerminator(cp):\r\n                    this.line_number++;\r\n                    this.line_start = this.index + 1;\r\n                    break;\r\n                default:\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n    private _nextToken() {\r\n        return this.skipNonsenses() && (\r\n            this.nextIdentifier() ||\r\n            this.nextNumeric() ||\r\n            this.nextPunctuator()\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n","import Parser from './parser'\r\n\r\ninterface Position {\r\n    line: number,// >=0\r\n    column: number// >=0\r\n}\r\ninterface SourceLocation {\r\n    start: Position,\r\n    end: Position\r\n}\r\n\r\ninterface Node {\r\n    type?: string | number,\r\n    range?: [number, number],\r\n    loc?: SourceLocation,\r\n    [propName: string]: any\r\n}\r\n\r\ninterface Token extends Node {\r\n    value?: any,\r\n    content?: any,\r\n    regex?: { pattern: string, flags: string },\r\n    [propName: string]: any\r\n}\r\ninterface Expression extends Node {\r\n    elements?: Array<Expression>,\r\n    expressions?: Array<Expression>\r\n}\r\n\r\ntype Program = Expression;\r\ntype MatchTree = Record<\r\n    string,\r\n    any\r\n//(...args: any) => any | { [propName: string]: MatchTree }\r\n>;\r\ntype SearchTree = MatchTree | Record<\r\n    string,\r\n    number | string | Array<string>\r\n>;\r\n\r\nconst enum NUMERIC_TYPE {\r\n    BINARY = 0b1 << 0,\r\n    OCTAL = 0b1 << 1,\r\n    DECIMAL = 0b1 << 2,\r\n    HEX = 0b1 << 3,\r\n    //INTEGER = 0b1 << 4,\r\n    FLOAT = 0b1 << 5,\r\n    E = 0b1 << 6,\r\n    NAN = 0b1 << 7,\r\n}\r\n\r\nconst enum CONTEXT {\r\n    collected,\r\n    parser,\r\n    left,\r\n    right,\r\n    start,\r\n    end,\r\n    begin,\r\n    tokens,\r\n    rightAssociativeNode,\r\n    matched,\r\n    bindingSet,\r\n    labelSet,\r\n    strict,\r\n    isModule,\r\n    isExpression,\r\n    inFunctionBody,\r\n    inIteration,\r\n    inSwitch,\r\n    bindingElement,\r\n    spreadElement,\r\n    allowAwait,\r\n    allowYield,\r\n    length\r\n}\r\ninterface Context extends Array<any> {\r\n    [CONTEXT.collected]?: Record<string, Node | string | any | Array<Node | string | any>>,\r\n    [CONTEXT.parser]: Parser,\r\n    [CONTEXT.left]?: number,\r\n    [CONTEXT.right]?: number,\r\n    [CONTEXT.start]?: number,\r\n    [CONTEXT.end]?: number,\r\n    [CONTEXT.begin]?: number,\r\n    [CONTEXT.tokens]?: Array<Node>,\r\n    [CONTEXT.rightAssociativeNode]?: Node,\r\n    [CONTEXT.matched]?: Matched,\r\n    [CONTEXT.bindingSet]?: Array<string>,\r\n    [CONTEXT.labelSet]?: Array<string>,\r\n    [CONTEXT.strict]?: boolean,\r\n    [CONTEXT.isModule]?: boolean,\r\n    [CONTEXT.isExpression]?: boolean,\r\n    [CONTEXT.inIteration]?: boolean,\r\n    [CONTEXT.inFunctionBody]?: number,\r\n    [CONTEXT.inSwitch]?: boolean,\r\n    [CONTEXT.bindingElement]?: boolean,\r\n    [CONTEXT.spreadElement]?: boolean,\r\n\r\n    [CONTEXT.allowAwait]?: boolean,\r\n    [CONTEXT.allowYield]?: boolean,\r\n\r\n    tokens: Array<Token>,\r\n    getToken(index: number): Token,\r\n    wrap(key: number, value: any): Context,\r\n    unwrap(): Context,\r\n    store(...args: Array<CONTEXT | any>): number,\r\n    restore(point: number): number,\r\n}\r\n/*\r\nconst enum MATCH_STATUS {\r\n    END = 1,\r\n    ERROR = -1,\r\n    NEXT = 2,\r\n    ATTACH = 3\r\n}*/\r\n\r\ninterface Wrapper {\r\n    (): void,\r\n    [propName: string]: any\r\n}\r\nconst enum MATCHED {\r\n    precedence,\r\n    props,\r\n    wrapper,\r\n    handler,\r\n    validator,\r\n    filter,\r\n}\r\ninterface Mark {\r\n    key: string,\r\n    value: string,\r\n    data: (context: Context, index: number) => any\r\n}\r\ninterface Cover {\r\n    origin: any,\r\n    value: any\r\n}\r\ntype Operation = null | 0 | undefined | false;\r\ntype NodeProp = [string | Cover | Mark, number, Array<Pipe> | undefined] /*| Mark*/;\r\ntype Pipe = (context: Context, token: Token | null, index: number) => any | undefined;\r\ntype Connector = (context: Context, index: number) => void;\r\ninterface Matched extends Array<any> {\r\n    [MATCHED.precedence]: Precedence,\r\n    [MATCHED.props]: Array<NodeProp>,\r\n    [MATCHED.wrapper]: Wrapper,\r\n    [MATCHED.handler]?: (context: Context) => Operation | Node | Array<Node>,\r\n    [MATCHED.validator]?: (context: Context) => Operation | true | Node | Array<Node>,\r\n    [MATCHED.filter]?: (context: Context, left?: number, right?: number) => boolean,\r\n}\r\n\r\nconst enum MATCHED_RECORDS {\r\n    precedence,\r\n    left,\r\n    right,\r\n    matched\r\n}\r\ninterface MatchedRecords extends Array<any> {\r\n    [MATCHED_RECORDS.precedence]: Precedence,\r\n    [MATCHED_RECORDS.left]: number,\r\n    [MATCHED_RECORDS.right]: number,\r\n    [MATCHED_RECORDS.matched]: Matched\r\n}\r\n\r\n\r\nconst enum PRECEDENCE {\r\n    VALUE,\r\n    RIGHT_ASSOCIATIVE\r\n}\r\ninterface Precedence extends Array<any> {\r\n    [PRECEDENCE.VALUE]: number | true,\r\n    [PRECEDENCE.RIGHT_ASSOCIATIVE]: number | Number\r\n}\r\ntype Validate = (token: Token) => boolean;\r\n\r\n\r\nconst enum MARKS {\r\n    BOUNDARY = \"\",\r\n    DEEPTH = \" DEEP\",\r\n    IDENTIFIER = \" ID\",\r\n    END = \" END\",\r\n    TYPE_ONLY = \" TYPE\",\r\n    WALKER = \" WAL\",\r\n    TERMINAL = \" TER\",\r\n\r\n    EOF = \"\",\r\n    ESCAPE = \"\\\\\",\r\n\r\n    ERROR = \" ERR\",\r\n    NEXT = \" NEXT\",\r\n    ATTACH = \" ATT\",\r\n    STRING = \" STR\"\r\n\r\n    /*\r\n    FOLLOW = \" FOLLOW\",\r\n    NOT = \" NOT\",\r\n    OR = \" OR\",\r\n    AND = \" AND\",*/\r\n}\r\n\r\n\r\nenum NUMERIC_KEYWORD_MAPPINGS {\r\n    \".\" = NUMERIC_TYPE.FLOAT | NUMERIC_TYPE.DECIMAL,\r\n    \"x\" = NUMERIC_TYPE.HEX,\r\n    \"b\" = NUMERIC_TYPE.BINARY,\r\n    \"o\" = NUMERIC_TYPE.OCTAL,\r\n\r\n    \"X\" = NUMERIC_TYPE.HEX,\r\n    \"B\" = NUMERIC_TYPE.BINARY,\r\n    \"O\" = NUMERIC_TYPE.OCTAL,\r\n};\r\nexport {\r\n    NUMERIC_KEYWORD_MAPPINGS,\r\n    MARKS,\r\n    Validate,\r\n    PRECEDENCE, Precedence,\r\n    NodeProp,\r\n    Mark, Cover,\r\n    Pipe,\r\n    Connector,\r\n    Position,\r\n    SourceLocation,\r\n    MATCHED_RECORDS,\r\n    MatchedRecords,\r\n    Matched,\r\n    MATCHED,\r\n    Token, Context,\r\n    CONTEXT, Expression,\r\n    Program, NUMERIC_TYPE, MatchTree, SearchTree,/* Tokenizer, Parser,*/ Node\r\n}","\r\nimport {\r\n    Token, SearchTree, MARKS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\n\r\nfunction createSearchTree(\r\n    data: Array<string | string[] | Record<string, any>>,\r\n    root: Record<string, any> = {},\r\n    block_list: Array<string> = []\r\n): SearchTree {\r\n    for (let item of data as any) {\r\n        let node = root;\r\n        switch (true) {\r\n            case typeof item === \"string\":\r\n                item = {\r\n                    type: \"Punctuator\",\r\n                    key: item,\r\n                }\r\n                break;\r\n            default:\r\n                item.type === undefined && (item.type = \"Punctuator\");\r\n                break;\r\n        }\r\n        if (~block_list.indexOf(item.key)) {\r\n            continue;\r\n        }\r\n        for (const part of item.key) {\r\n            node = node[part] || (node[part] = {});\r\n        }\r\n        if (node[MARKS.END] && !item.overload) {\r\n            let next_item = node[MARKS.END];\r\n            let curr_item = item;\r\n            if (typeof next_item === \"function\") {\r\n                if (curr_item.filter) {\r\n                    node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                        return curr_item.filter(tokenizer) ? curr_item : next_item(tokenizer);\r\n                    }\r\n                } else {\r\n                    node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                        return next_item(tokenizer) || curr_item;\r\n                    }\r\n                }\r\n                continue;\r\n            } else if (curr_item.filter) {\r\n                node[MARKS.END] = function (tokenizer: Tokenizer) {\r\n                    return curr_item.filter(tokenizer) ? curr_item : next_item;\r\n                }\r\n                continue;\r\n            } else {\r\n                console.warn(\"conflict:\", node, node[MARKS.END], item);\r\n            }\r\n        }\r\n        node[MARKS.END] = item.filter ?\r\n            function (tokenizer: Tokenizer) { return item.filter(tokenizer) && item; } :\r\n            item;\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\nfunction _Scanner(\r\n    use_escape_mode: boolean = false\r\n) {\r\n    return function (\r\n        tokenizer: Tokenizer,\r\n        start: number = tokenizer.index\r\n    ) {\r\n        let error: string;\r\n        let line_number = tokenizer.line_number;\r\n        let line_start = tokenizer.line_start;\r\n        let root = this.scan_tree;\r\n        let nodes: Array<any> = [];\r\n        let str = \"\";\r\n        let char: string;\r\n        let backslash_count = 0;\r\n        let token: Token;\r\n        let self = this;\r\n        if (use_escape_mode) {\r\n            let has_escape: number;\r\n            while (char = tokenizer.input[tokenizer.index++]) {\r\n                has_escape = backslash_count % 2;\r\n                if (char === MARKS.ESCAPE) {\r\n                    backslash_count += 1;\r\n                    if (has_escape) {\r\n                        str += char;\r\n                        token = _next(MARKS.ESCAPE);\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                    }\r\n                } else {\r\n                    str += char;\r\n                    backslash_count = 0;\r\n                    if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n                        tokenizer.index -= 1;\r\n                        token = _next(has_escape ? `${MARKS.ESCAPE}\\n` : \"\\n\");\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                        tokenizer.index += 1;\r\n                        tokenizer.line_number += 1;\r\n                        tokenizer.line_start = tokenizer.index;\r\n                    } else {\r\n                        token = _next(!has_escape ? char : MARKS.ESCAPE + char);\r\n                        if (token) {\r\n                            return token;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            while (char = tokenizer.input[tokenizer.index]) {\r\n                str += char;\r\n                backslash_count = 0;\r\n                if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\r\n                    token = _next(\"\\n\");\r\n                    if (token) {\r\n                        return token;\r\n                    }\r\n                    tokenizer.index += 1;\r\n                    tokenizer.line_number += 1;\r\n                    tokenizer.line_start = tokenizer.index;\r\n                } else {\r\n                    tokenizer.index += 1;\r\n                    token = _next(char);\r\n                    if (token) {\r\n                        return token;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if ((token = _next(MARKS.EOF))) {\r\n            return token;\r\n        } else {\r\n            let token = _get_token(tokenizer.index);\r\n            tokenizer.err(token);\r\n            return token;\r\n        }\r\n\r\n        function _next(key: string) {\r\n            let index = 0, node: any, res: any;\r\n            for (; index < nodes.length; index += 2) {\r\n                node = nodes[index][key];\r\n                if (node) {\r\n                    if (res = _finally(node, nodes[index + 1])) {\r\n                        return res;\r\n                    }\r\n                    nodes[index] = node;\r\n                } else {\r\n                    nodes.splice(index, 2);\r\n                    index -= 2;\r\n                }\r\n            }\r\n            if (node = root[key]) {\r\n                if (res = _finally(node, str.length - 1)) {\r\n                    return res;\r\n                }\r\n                nodes.push(node, str.length - 1);\r\n            }\r\n        }\r\n        function _get_token(end_index: number) {\r\n            tokenizer._scopes = self;\r\n            tokenizer._volatility = str.slice(0, end_index);\r\n            return tokenizer.createToken(\r\n                self.type,\r\n                [start, tokenizer.index],\r\n                undefined,\r\n                { line: line_number, column: start - line_start }\r\n            );\r\n        }\r\n        function _finally(node: Record<string, any>, end_index: number) {\r\n            node[MARKS.ERROR] && (error = node[MARKS.ERROR]);\r\n            let part: string = node[MARKS.ATTACH] ? node[MARKS.ATTACH](tokenizer, self) : node[MARKS.STRING];\r\n            if (part !== undefined) {\r\n                str = str.slice(0, end_index) + part;\r\n            }\r\n            switch (true) {\r\n                case node[MARKS.END] && true:\r\n                    if (node[MARKS.END] === true || node[MARKS.END](tokenizer, self)) {\r\n                        let token = _get_token(end_index);\r\n                        if (error) {\r\n                            token.error = error;\r\n                            tokenizer.err(token);\r\n                        }\r\n                        return token;\r\n                    }\r\n                    break;\r\n                case node[MARKS.NEXT] && true:\r\n                    tokenizer._scopes = self;\r\n                    tokenizer._volatility = str.slice(0, end_index);\r\n                    return node[MARKS.NEXT](tokenizer, self);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n    createSearchTree, _Scanner\r\n}\r\n\r\n\r\n/**\r\nfunction createScanTree(data: Array<any>[]) {\r\n    let root: Record<string, any> = {};\r\n    for (let branch of data) {\r\n        let node = root;\r\n        for (let i = 0, limit = branch.length - 1, part: string; i < limit; i++) {\r\n            part = branch[i];\r\n            node = node[part] || (node[part] = {});\r\n        }\r\n        let actions = branch[branch.length - 1];\r\n        for (let i = 0; i < actions.length; i += 2) {\r\n            node[actions[i]] = actions[i + 1];\r\n        }\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\n\r\n */","import {\r\n    Token, NUMERIC_TYPE, MARKS\r\n} from '../interfaces';\r\n\r\nimport Tokenizer from '../tokenizer'\r\nimport { _Scanner, createSearchTree } from './head'\r\n\r\n\r\nlet TOKEN_TYPE_SET = [\r\n    [\r\n        \"Keyword\",\r\n        [\r\n            \"void\",\r\n            \"delete\",\r\n            \"new\",\r\n            \"class\", \"extends\",\r\n            \"function\",\r\n            \"throw\",\r\n            \"with\",\r\n            \"yield\",\r\n            \"in\", \"instanceof\", \"typeof\",\r\n            \"this\", \"super\",\r\n            \"var\", \"const\",// \"let\",\r\n            \"break\", \"continue\", \"return\",\r\n            \"if\", \"else\",\r\n            \"switch\", \"case\", \"default\",\r\n            \"try\", \"catch\", \"finally\",\r\n            \"do\", \"while\", \"for\",\r\n            \"await\",/*\"async\",*/\r\n            \"import\", \"export\",\r\n            \"debugger\",\r\n\r\n            \"enum\"//用于错误检测\r\n        ]\r\n    ],\r\n    [\"Identifier\", [\"let\", \"async\"]],//使 UnicodeEscape 的情况能被检测到报错\r\n    [\"Boolean\", [\"true\", \"false\"]],\r\n    [\"Null\", [\"null\"]]\r\n];\r\n\r\n\r\nlet octal_escape = {\r\n    //_state: MATCH_STATUS.ATTACH,\r\n    [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n        let code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index - 1));\r\n        let value = 0;\r\n        code && (self.octal = true);\r\n        let len = code <= 3 ? 2 : 1;\r\n        while (true) {\r\n            value = value * 8 + code;\r\n            code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index));\r\n            if (code < 0 || --len < 0) {\r\n                break;\r\n            }\r\n            self.octal = true;\r\n            tokenizer.index += 1;\r\n        }\r\n        return String.fromCharCode(value);\r\n    }\r\n};\r\nlet octal_escape_tree = {\r\n    \"\\\\0\": octal_escape,\r\n    \"\\\\1\": octal_escape,\r\n    \"\\\\2\": octal_escape,\r\n    \"\\\\3\": octal_escape,\r\n    \"\\\\4\": octal_escape,\r\n    \"\\\\5\": octal_escape,\r\n    \"\\\\6\": octal_escape,\r\n    \"\\\\7\": octal_escape,\r\n}\r\n\r\nlet strbase_scan_tree = {\r\n    [MARKS.ESCAPE + \"\\n\"]: { [MARKS.STRING]: \"\" },\r\n    \"\\\\n\": { [MARKS.STRING]: \"\\n\" },\r\n    \"\\\\r\": { [MARKS.STRING]: \"\\r\" },\r\n    \"\\\\t\": { [MARKS.STRING]: \"\\t\" },\r\n    \"\\\\b\": { [MARKS.STRING]: \"\\b\" },\r\n    \"\\\\f\": { [MARKS.STRING]: \"\\f\" },\r\n    \"\\\\v\": { [MARKS.STRING]: \"\\v\" },\r\n    \"\\\\u\": {\r\n        //_state: MATCH_STATUS.ATTACH,\r\n        [MARKS.ATTACH](tokenizer: Tokenizer) {\r\n            if (tokenizer.input[tokenizer.index] === \"{\") {\r\n                tokenizer.index++;\r\n                let [code] = tokenizer.scanHex();\r\n                if (tokenizer.input[tokenizer.index] === \"}\") {\r\n                    tokenizer.index++;\r\n                    if (code <= 0x10ffff) {\r\n                        return String.fromCharCode(code);\r\n                    }\r\n                }\r\n            } else {\r\n                let [code, len] = tokenizer.scanHex(4);\r\n                if (len === 4) {\r\n                    return String.fromCharCode(code);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    \"\\\\x\": {\r\n        //_state: MATCH_STATUS.ATTACH,\r\n        [MARKS.ATTACH](tokenizer: Tokenizer) {\r\n            let [code, len] = tokenizer.scanHex(2);\r\n            if (len === 2) {\r\n                return String.fromCharCode(code);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n};\r\n\r\nlet not_allow_octal_escape = {\r\n    //_state: MATCH_STATUS.ERROR,\r\n    [MARKS.ERROR]: \"Octal escape sequences are not allowed in template strings\"\r\n}\r\n\r\n//let template_curly_stack = [];\r\nlet template_base = {\r\n    type: \"Template\",\r\n    scan_tree: {\r\n        [MARKS.EOF]: {\r\n            //_state: MATCH_STATUS.END,\r\n            [MARKS.ERROR]: \"Unexpected token\",\r\n            [MARKS.END](tokenizer: Tokenizer) {\r\n                tokenizer.curly_stack.shift();\r\n                return true;\r\n            }\r\n        },\r\n        \"\\\\0\": { [MARKS.STRING]: \"\\0\" },\r\n        \"\\\\1\": not_allow_octal_escape,\r\n        \"\\\\2\": not_allow_octal_escape,\r\n        \"\\\\3\": not_allow_octal_escape,\r\n        \"\\\\4\": not_allow_octal_escape,\r\n        \"\\\\5\": not_allow_octal_escape,\r\n        \"\\\\6\": not_allow_octal_escape,\r\n        \"\\\\7\": not_allow_octal_escape,\r\n        \"`\": {\r\n            [MARKS.END](tokenizer: Tokenizer) {\r\n                tokenizer.curly_stack.shift();\r\n                return true;\r\n            }\r\n        },\r\n        \"$\": {\r\n            \"{\": {\r\n                [MARKS.END]: true\r\n            }\r\n        },\r\n        ...strbase_scan_tree\r\n    },\r\n    scanner: _Scanner(true)\r\n}\r\nconst PUNCTUATORS: Array<any> = [\r\n    {\r\n        key: `\"`, type: \"String\",\r\n        scan_tree: {\r\n            '\"': {\r\n                [MARKS.END]: true\r\n            },\r\n            \"\\n\": {\r\n                //_state: MATCH_STATUS.ERROR\r\n                [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n            },\r\n            ...strbase_scan_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan: _Scanner(true),\r\n        octal: false,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            this.octal = false;\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: `'`, type: \"String\",\r\n        scan_tree: {\r\n            \"'\": {\r\n                [MARKS.END]: true\r\n            },\r\n            \"\\n\": {\r\n                //_state: MATCH_STATUS.ERROR\r\n                [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n            },\r\n            ...strbase_scan_tree,\r\n            ...octal_escape_tree\r\n        },\r\n        escape_scan: _Scanner(true),\r\n        octal: false,\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            this.octal = false;\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: \"`\",\r\n        ...template_base,\r\n        escape_scan: _Scanner(true),\r\n        scanner(tokenizer: Tokenizer, start: number) {\r\n            tokenizer.curly_stack.unshift(\"`\");\r\n            return this.escape_scan(tokenizer, start);\r\n        }\r\n    },\r\n    {\r\n        key: \"}\",\r\n        ...template_base,\r\n        filter(tokenizer: Tokenizer) {\r\n            return tokenizer.curly_stack[0] === \"`\";\r\n        }\r\n    },\r\n    {\r\n        key: '/*', bound: '*/', type: \"Comments\",\r\n        scan_tree: {\r\n            \"*\": {\r\n                \"/\": {\r\n                    //_state: MATCH_STATUS.END\r\n                    [MARKS.END]: true\r\n                }\r\n            },\r\n            [MARKS.EOF]: {\r\n                [MARKS.END]: true,\r\n                [MARKS.ERROR]: \"Unexpected token\"\r\n            }\r\n        },\r\n        scanner: _Scanner(false)\r\n    },\r\n    {\r\n        key: '//', bound: '\\n', type: \"Comments\",\r\n        scan_tree: {\r\n            \"\\n\": {\r\n                [MARKS.END]: true\r\n            },\r\n            [MARKS.EOF]: {\r\n                [MARKS.END]: true\r\n            }\r\n        },\r\n        scanner: _Scanner(false)\r\n    },\r\n\r\n    //[\"(\", \")\"], [\"[\", \"]\"], [\"{\", \"}\"],\r\n\r\n    \"(\", \")\", \"[\", \"]\", \"{\", \"}\",\r\n    ';', '.', '?.',\r\n    '++', '--', '~', '!',\r\n    '**', '*', '/', '%',\r\n    '+', '-',\r\n    '<<', '>>', '>>>',\r\n    '<', '>', '<=', '>=', '==', '!=', '===', '!==',\r\n    '&',\r\n    '^',\r\n    '|',\r\n    '&&',\r\n    '||',\r\n    '?', \":\",\r\n    '=', '+=', '-=', '*=', '/=', '%=', '**=', '<<=', '>>=', '>>>=', '&=', '|=', '^=',\r\n    '...',\r\n    ',',\r\n    '=>'\r\n];\r\n\r\nconst REGEXP_DESCRIPTOR = {\r\n    key: '/', type: \"RegularExpression\",\r\n    scan_tree: {\r\n        '/': {\r\n            [MARKS.END](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                return !self.class_marker;\r\n            }\r\n        },\r\n        '[': {\r\n            [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                self.class_marker = true;\r\n            }\r\n        },\r\n        ']': {\r\n            [MARKS.ATTACH](tokenizer: Tokenizer, self: Record<string, any>) {\r\n                self.class_marker = false;\r\n            }\r\n        },\r\n        '\\n': {\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        },\r\n        '\\\\\\n': {\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        },\r\n        [MARKS.EOF]: {\r\n            [MARKS.END]: true,\r\n            [MARKS.ERROR]: \"Invalid or unexpected token\"\r\n        }\r\n    },\r\n    overload: true,\r\n    escape_scan: _Scanner(true),\r\n    class_marker: false,\r\n    scanner(tokenizer: Tokenizer, start: number) {\r\n        this.class_marker = false;\r\n        let token = this.escape_scan(tokenizer, start);\r\n        if (token) {\r\n            token.regex = {\r\n                pattern: token.value.slice(\r\n                    1, token.value[token.value.length - 1] !== \"/\" ? undefined : -1\r\n                ),\r\n                flags: \"\"\r\n            };\r\n            let start = tokenizer.index;\r\n            let length = 0;\r\n            do {\r\n                tokenizer.index += length;\r\n                length = tokenizer.inIdentifierPart();\r\n            } while (length)\r\n            if (start !== tokenizer.index) {\r\n                token.regex.flags = tokenizer.input.slice(start, tokenizer.index)\r\n                token.value += token.regex.flags;\r\n                token.range[1] += tokenizer.index - start;\r\n                token.loc.end.column += tokenizer.index - start;\r\n            }\r\n            return token;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n//const IS_RADIX = NUMERIC_TYPE.BINARY | NUMERIC_TYPE.OCTAL | NUMERIC_TYPE.HEX;\r\n\r\n\r\nconst TYPE_ENUMS = {\r\n    Identifier: \"Identifier\",\r\n    Keyword: \"Keyword\",\r\n    String: \"String\",\r\n    Boolean: \"Boolean\",\r\n    Numeric: \"Numeric\",\r\n    Punctuator: \"Punctuator\",\r\n    RegularExpression: \"RegularExpression\",\r\n    Template: \"Template\",\r\n    TemplateElement: \"TemplateElement\",\r\n    Comments: \"Comments\",\r\n    Null: \"Null\"\r\n};\r\n\r\n\r\nexport {\r\n    TYPE_ENUMS,\r\n    PUNCTUATORS,\r\n    TOKEN_TYPE_SET,\r\n    REGEXP_DESCRIPTOR\r\n}\r\n\r\n\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\r\nimport Tokenizer from \"./tokenizer\"\r\nimport {\r\n    NodeProp,\r\n    MATCHED,\r\n    Matched,\r\n    MATCHED_RECORDS,\r\n    MatchedRecords,\r\n    Token, Node, Pipe,\r\n    Mark as MarkInterface,\r\n    SearchTree, NUMERIC_TYPE, Context, CONTEXT,\r\n    SourceLocation,\r\n    PRECEDENCE, Precedence, Validate, MARKS, MatchTree\r\n} from \"./interfaces\";\r\n\r\nimport { _Context, TYPE_ALIAS, NODES, Mark, Cover, attachLocation, is_right_braces } from \"./syntax/head\";\r\n\r\ntype Extreme = MatchedRecords;\r\ntype Longest = MatchedRecords;\r\n\r\nconst { Script, Module } = NODES;\r\n\r\n\r\n\r\nexport default class extends Tokenizer {\r\n    SYNTAX_TREE: MatchTree;\r\n    EXPRESSION_TREE: MatchTree;\r\n    TYPE_ALIAS: Record<string, string[]> = TYPE_ALIAS;\r\n    padding_token: Token = {\r\n        type: MARKS.BOUNDARY,\r\n        value: MARKS.BOUNDARY\r\n    };\r\n    error_logs: Array<any>;\r\n    save_comments = false;\r\n    match_tree_stack: Array<MatchTree>;\r\n    context_stack: Array<Context>;\r\n    isExpression: (token: Token) => boolean;\r\n    isStatement: (token: Token) => boolean;\r\n    isStatementListItem: (token: Token) => boolean;\r\n    is_primary_expr_start() {\r\n        if (this.tokens.length) {\r\n            let last_node: any = this.tokens[this.tokens.length - 1];\r\n            return this.isStatementListItem(last_node)\r\n                || last_node.type === this.TYPE_ENUMS.Keyword\r\n                || last_node.type === this.TYPE_ENUMS.Punctuator && !(/^\\{\\}|\\(\\)|\\[\\]$/.test(last_node.value));\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    //token_hooks: Record<string, (token: Token, tokenizer?: Tokenizer) => Token> = token_hooks;\r\n    err(...args: any) {\r\n        debugger;\r\n        this.error_logs.push.apply(this.error_logs, args);\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n    parse(input: string) {\r\n        return this.parseScript(input);\r\n    }\r\n    parseModule(input: string) {\r\n        let tokens = this._parse(input, CONTEXT.isModule, true, CONTEXT.strict, true);\r\n        let module = new Module(tokens);\r\n        if (tokens.length) {\r\n            attachLocation(module, tokens[0], tokens[tokens.length - 1]);\r\n        }\r\n        return module;\r\n    }\r\n    parseScript(input: string) {\r\n        let tokens = this._parse(input);\r\n        let script = new Script(tokens);\r\n        if (tokens.length) {\r\n            attachLocation(module, tokens[0], tokens[tokens.length - 1]);\r\n        }\r\n        return script;\r\n    }\r\n    parseExpression(context: Context): Node {\r\n        context.wrap(CONTEXT.isExpression, true);\r\n        let res = this.parseNode(this.EXPRESSION_TREE, context, this.isExpression);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n    parseNode(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        test: (node: Node) => boolean\r\n    ): Node {\r\n        let tokens = context.tokens;\r\n        this.parseCustom(match_tree, context);\r\n        let res: Node;\r\n        if (tokens.length) {\r\n            let index = 0;\r\n            if (test(tokens[0])) {\r\n                index = 1;\r\n                res = tokens[0];\r\n            }\r\n            if (tokens.length > index) {\r\n                this.err(...tokens.slice(index));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    parseRangeAsNode(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n        test: (node: Node) => boolean\r\n    ): Node {\r\n        let res = this.parseRange(match_tree, context, left, lexcal_terminator, test);\r\n        if (!res.content) {\r\n            this.err(res);\r\n        }\r\n        return res.content;\r\n    }\r\n    parseRangeAsExpression(\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n    ): Node {\r\n        context.wrap(CONTEXT.isExpression, true);\r\n        let res = this.parseRangeAsNode(this.EXPRESSION_TREE, context, left, lexcal_terminator, this.isExpression);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n    parseRangeAsBlock(\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate = is_right_braces,\r\n    ) {\r\n        let res = this.parseRange(this.SYNTAX_TREE, context, left, lexcal_terminator);\r\n        res.type = \"Block\";\r\n        let tokens = res.content\r\n        if (tokens.length) {\r\n            if (!this.isStatementListItem(tokens[tokens.length - 1])) {\r\n                this.err(tokens.pop());\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private _parse(input: string, ...environments: Array<number | any>) {\r\n        //this.logs = [];\r\n        this.match_tree_stack = [];\r\n        this.context_stack = [];\r\n        this.init(input);\r\n        let context = _Context(this);\r\n        environments.length && context.store(...environments);\r\n        //this.parseBlock(context);\r\n        let tokens = context.tokens;\r\n        this.parseCustom(\r\n            this.SYNTAX_TREE,\r\n            context\r\n        );\r\n        if (tokens.length) {\r\n            if (!this.isStatementListItem(tokens[tokens.length - 1])) {\r\n                this.err(tokens.pop());\r\n            }\r\n        }\r\n        if (this.error_logs.length) {\r\n            console.warn(\"error:\", this.error_logs);\r\n        }\r\n        //console.log(\"logs:\", this.logs);\r\n        return this.tokens;\r\n    }\r\n    parseCustom(\r\n        root: MatchTree,\r\n        context: Context,\r\n        begin: number = 0,\r\n        test?: Function\r\n    ) {\r\n        let point = context.store(CONTEXT.begin, begin);\r\n        let cursor: number = begin - 1;\r\n        let backflow_tape: Array<number> = new Array(begin);\r\n        backflow_tape.push(cursor);\r\n        let extreme: Extreme;\r\n        let state: number;\r\n        this.context_stack.unshift(context);\r\n        this.match_tree_stack.unshift(root);\r\n        while (true) {\r\n            if (cursor < begin || context.getToken(cursor)) {\r\n                if (\r\n                    !(\r\n                        extreme\r\n                        && (\r\n                            extreme[MATCHED_RECORDS.right] < cursor\r\n                            && backflow_tape.length <= 3 + extreme[MATCHED_RECORDS.right]\r\n                            //匹配边界断句\r\n                        )\r\n                        && (\r\n                            (state = this.finallize(context, extreme))\r\n                            || (extreme = undefined)\r\n                        )\r\n                    )\r\n                ) {\r\n                    let longest = this.walk(\r\n                        root,\r\n                        context,\r\n                        cursor,\r\n                        backflow_tape,\r\n                        extreme?.[MATCHED_RECORDS.right]\r\n                    );\r\n                    //longest && this.logs.push(\"walk\", longest[MATCHED_RECORDS.left], longest[MATCHED_RECORDS.right], longest[MATCHED_RECORDS.matched][MATCHED.wrapper].name);\r\n                    if (longest) {\r\n                        let longest_precedence = longest[MATCHED_RECORDS.precedence];\r\n                        let extreme_precedence = extreme && extreme[MATCHED_RECORDS.precedence];\r\n                        if (\r\n                            (//如果该记录优先级为true，则立即处理\r\n                                longest_precedence[PRECEDENCE.VALUE] !== true\r\n                                || (extreme = longest, false)\r\n                            ) && (\r\n                                !extreme_precedence\r\n                                || !(\r\n                                    extreme_precedence[PRECEDENCE.VALUE] > longest_precedence[PRECEDENCE.VALUE]\r\n                                    || extreme_precedence[PRECEDENCE.RIGHT_ASSOCIATIVE] === longest_precedence[PRECEDENCE.VALUE] //左结合\r\n                                )\r\n                            ) || !(state = this.finallize(context, extreme))\r\n                        ) {\r\n\r\n                            extreme = longest;\r\n                            //cursor += 1;\r\n                            //也可以单步步进，不过这样更效率一些也和当前收集器无冲突\r\n                            cursor += longest[MATCHED_RECORDS.right] - longest[MATCHED_RECORDS.left] || 1;\r\n                            continue;\r\n                        }\r\n                    } else {\r\n                        cursor += 1;\r\n                        continue;\r\n                    }\r\n                }\r\n            } else if (\r\n                !(\r\n                    extreme\r\n                    && (state = this.finallize(context, extreme))\r\n                )\r\n            ) {\r\n                break;\r\n            }\r\n            if (extreme) {\r\n                if (\r\n                    test\r\n                    && extreme[MATCHED_RECORDS.left] <= begin\r\n                    && test(context.getToken(begin))\r\n                ) {\r\n                    context.restore(point);\r\n                    this.context_stack.shift();\r\n                    this.match_tree_stack.shift();\r\n                    return context.getToken(begin);\r\n                }\r\n                cursor = extreme[MATCHED_RECORDS.left];\r\n            }\r\n            cursor >= begin && state !== -1 && (cursor = backflow_tape[cursor]);\r\n            state = 0;\r\n            extreme = undefined;\r\n            backflow_tape.splice(cursor + 1, backflow_tape.length - (cursor + 1));\r\n        }\r\n        this.context_stack.shift();\r\n        this.match_tree_stack.shift();\r\n        context.restore(point);\r\n    }\r\n    parseRange(\r\n        match_tree: MatchTree,\r\n        context: Context,\r\n        left: number,\r\n        lexcal_terminator: Validate,\r\n        test?: (node: Node) => boolean,\r\n    ) {\r\n        let tokens = context.tokens;\r\n        this.terminator_stack.unshift(lexcal_terminator);\r\n        this.parseCustom(\r\n            match_tree,\r\n            context,\r\n            left + 1\r\n        );\r\n        this.terminator_stack.shift();\r\n        let before_token = tokens[left];\r\n        let after_token = tokens[tokens.length - 1];\r\n        let value = before_token.value;\r\n        let end = tokens.length - 1;\r\n        if (lexcal_terminator(after_token)) {\r\n            value += after_token.value;\r\n        } else {\r\n            end += 1;\r\n            this.err(before_token);\r\n        }\r\n        let content: any = null, next = left + 1;\r\n        if (test) {\r\n            if (test(tokens[next])) {\r\n                content = tokens[next];\r\n                next += 1;\r\n            }\r\n            if (next < end) {\r\n                this.err(...this.tokens.splice(next, end - next));\r\n            }\r\n        } else {\r\n            content = tokens.splice(next, end - next);\r\n        }\r\n        let res: Token = {\r\n            type: this.TYPE_ENUMS.Punctuator,\r\n            value,\r\n            content\r\n        };\r\n        attachLocation(res, before_token, after_token);\r\n        tokens.splice(left, tokens.length - left, res);\r\n        return res;\r\n    }\r\n    walk(\r\n        root: MatchTree,\r\n        context: Context,\r\n        start: number,\r\n        backflow_tape: Array<number>,\r\n        minimum: number\r\n    ): Longest {\r\n        let padding_token = this.padding_token;\r\n        let TYPE_ALIAS = this.TYPE_ALIAS;\r\n        let tokens = context.tokens;\r\n        let begin = context[CONTEXT.begin];\r\n        //let steps: Array<number> = [];\r\n        return explore(\r\n            root,\r\n            start\r\n        );\r\n        function get_records(matched: Matched, end: number): MatchedRecords {\r\n            if (\r\n                !matched[MATCHED.filter]\r\n                || matched[MATCHED.filter](context, start, end)\r\n            ) {\r\n                return [\r\n                    matched[MATCHED.precedence],\r\n                    start,\r\n                    end,\r\n                    matched\r\n                ];\r\n            }\r\n        }\r\n        function explore(parent: MatchTree, index: number): Longest {\r\n\r\n            let res: Longest;\r\n            let matched: Matched;\r\n            if (parent[MARKS.WALKER]) {\r\n                parent[MARKS.WALKER](context, index - 1);\r\n            }\r\n            if (parent[MARKS.TERMINAL]) {\r\n                if (!(index - 1 <= minimum)) {\r\n                    matched = parent[MARKS.END];\r\n                    if (matched && (res = get_records(matched, index - 1))) {\r\n                        minimum = index - 1;\r\n                    }\r\n                }\r\n                return res;\r\n            }\r\n\r\n            let token = index >= begin\r\n                ? context.getToken(index) || (index <= tokens.length && padding_token)\r\n                : padding_token;\r\n            if (!token) {\r\n                return;\r\n            }\r\n            let has_backflow = false;\r\n            if (backflow_tape.length <= index + 1) {\r\n                has_backflow = true;\r\n                backflow_tape.push(start);\r\n            }\r\n            let matched_node: MatchTree;\r\n            let alias = TYPE_ALIAS[token.type];\r\n            let cursor = 0, length = 1, type: string | number;\r\n            let longest: Longest;\r\n            let node: MatchTree;\r\n            let value_node: MatchTree, type_node: MatchTree;\r\n            if (alias) {\r\n                length = alias.length;\r\n                type = alias[cursor];\r\n            } else {\r\n                type = token.type;\r\n            }\r\n            while (true) {\r\n                if (node = parent[type]) {\r\n                    res = undefined;\r\n                    if (\r\n                        !(\r\n                            (value_node = node[token.value])\r\n                            && (res = explore(value_node, index + 1))\r\n                        )\r\n                        && !(\r\n                            (type_node = node[MARKS.TYPE_ONLY])\r\n                            && (res = explore(type_node, index + 1))\r\n                        )\r\n                        && !(index <= minimum)\r\n                    ) {\r\n                        if (\r\n                            matched = (matched_node = value_node) && matched_node[MARKS.END]\r\n                            || (matched_node = type_node) && matched_node[MARKS.END]\r\n                        ) {\r\n                            if (\r\n                                (res = get_records(matched, index))\r\n                            ) {\r\n                                minimum = index;\r\n                            } else if (has_backflow && index > start) {\r\n                                backflow_tape.splice(index + 1, backflow_tape.length - index - 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    longest = res || longest;\r\n                }\r\n                if (++cursor >= length) {\r\n                    return longest;\r\n                } else {\r\n                    type = alias[cursor];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createNode(context: Context) {\r\n        let left = context[CONTEXT.left];\r\n        let right = context[CONTEXT.right];\r\n        let matched = context[CONTEXT.matched];\r\n        let tokens = context.tokens;\r\n        let begin = context[CONTEXT.begin];\r\n        let node: any = new matched[MATCHED.wrapper]();\r\n        let length = tokens.length;\r\n        let start = left, end = right < length ? right : length - 1;\r\n        let offset = left, key: string | Cover | Mark, pipes: Array<Pipe>, nth: number;\r\n        let token: any, res: any;\r\n        context[CONTEXT.collected] = node;\r\n\r\n        function restore_volatility() {\r\n            context[CONTEXT.left] = left;\r\n            context[CONTEXT.right] = right;\r\n            context[CONTEXT.matched] = matched;\r\n            context[CONTEXT.collected] = node\r\n        }\r\n\r\n        for (const prop of matched[MATCHED.props]) {\r\n            [key, nth, pipes] = prop as any;\r\n            if (key instanceof Mark) {\r\n                token = key.data(context, offset);\r\n                restore_volatility();\r\n                if (token === undefined) {\r\n                    continue;\r\n                }\r\n                key = key.key;\r\n            } else {\r\n                token = offset >= begin && offset < length ? tokens[offset] : null;\r\n\r\n                for (let i in pipes) {\r\n                    res = pipes[i](context, token, offset);\r\n                    res === undefined || (token = res);\r\n                    restore_volatility();\r\n                }\r\n                if (key instanceof Cover) {\r\n                    if (key.value === null) {\r\n                        if (offset === start) {\r\n                            offset < end && (start = offset + 1);\r\n                        } else if (offset > begin && offset - 1 < end) {\r\n                            end = offset - 1;\r\n                        }\r\n                    } else if (offset < length && end < offset) {\r\n                        end = offset;\r\n                    }\r\n                    offset += 1;\r\n                    continue;\r\n                } else if (offset < length && end < offset) {\r\n                    end = offset;\r\n                }\r\n                offset += 1;\r\n            }\r\n            if (nth <= 1) {\r\n                node[key] = nth === 0 ? token : [token];\r\n            } else {\r\n                node[key].push(token);\r\n            }\r\n        }\r\n\r\n        start >= begin || (start = begin);\r\n\r\n        let start_token = tokens[start];\r\n        let end_token = tokens[end];\r\n        attachLocation(node, start_token, end_token);\r\n        context[CONTEXT.start] = start;\r\n        context[CONTEXT.end] = end;\r\n        return node;\r\n    }\r\n    getToken(index: number) {\r\n        return this.tokens.length > index ? this.tokens[index] : this.nextToken();\r\n    }\r\n    finallize(\r\n        context: Context,\r\n        record: Extreme\r\n    ) {\r\n        let [, left, right, matched/*, steps*/] = record;\r\n        let validator = matched[MATCHED.validator];\r\n        let collected: any;\r\n        let start: number, end: number;\r\n        context[CONTEXT.left] = left;\r\n        context[CONTEXT.right] = right;\r\n        context[CONTEXT.matched] = matched;\r\n        let tokens = context.tokens;\r\n        let handler = matched[MATCHED.handler];\r\n        //this.logs.push(\"finallize\", left, right, matched[MATCHED.wrapper].name);\r\n        if (!validator || (collected = validator(context)) === true) {\r\n            collected = this.createNode(context);\r\n            start = context[CONTEXT.start];\r\n            end = context[CONTEXT.end];\r\n            if (handler) {\r\n                collected = handler(context);\r\n            }\r\n        } else if (collected) {\r\n            start = context[CONTEXT.start];\r\n            end = context[CONTEXT.end];\r\n        }\r\n        if (!collected) {\r\n            return collected === undefined || collected === false\r\n                ? 0\r\n                : (collected === null ? 1 : -1);\r\n        }\r\n        //debugger;\r\n        //this.logs.push(\"finallize\", collected);\r\n        let length = end - start + 1;\r\n        if (collected instanceof Array) {\r\n            tokens.splice(start, length, ...collected);\r\n        } else {\r\n            tokens.splice(start, length, collected);\r\n        }\r\n        return length;\r\n    }\r\n}\r\n","import {\r\n    Node, Token, Context, CONTEXT, MATCHED, MatchTree, MARKS\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    token_hooks,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    _Validate,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    createMatchTree,\r\n    _Option, _Or, _Series, _NonCollecting, _NonCapturing, _Mark,\r\n    TYPE_ALIAS, _Context, _Loop, NODES, validateIdentifier, validateAssignment,\r\n    validateBinding, validateLineTerminator, ASSIGNMENT_PUNCTUATORS_PATTERN, _SuccessCollector, join_content,\r\n\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    isAligned,\r\n    attachLocation,\r\n\r\n    reinterpretIdentifierAsKeyword,\r\n    reinterpretKeywordAsIdentifier,\r\n\r\n    extract_success,\r\n    parse_and_extract,\r\n} from './head'\r\n\r\nimport Parser from '../parser'\r\nimport Tokenizer from '../tokenizer'\r\n\r\nimport {\r\n    parseArrayPattern,\r\n    parseObjectPattern\r\n} from './pattern';\r\nconst Grouping = NODES.Grouping;\r\n\r\ninit_token_hooks();\r\n\r\nfunction walk_primary_expression(context: Context, index: number) {\r\n    context[CONTEXT.parser].parseRange(PRIMARY_EXPRESSION_TREE, context, index, is_right_parentheses);\r\n}\r\n\r\n\r\nconst ARGUMENTS_PATTERN = _Or(\r\n    _Punctuator(\"(\").walk(\r\n        walk_primary_expression\r\n    ),\r\n    \"Punctuator ()\"\r\n).pipe(\r\n    function (context: Context, token: Token, index: number) {\r\n        let parser = context[CONTEXT.parser];\r\n        let store = context.store(\r\n            CONTEXT.bindingElement, false,\r\n            CONTEXT.spreadElement, true,\r\n            CONTEXT.tokens, token.content\r\n        );\r\n        let res = parser.parseNode(ARGUMENTS_TREE, context, function (node: Token) { return node.type === \"Success\"; })\r\n        context.restore(store);\r\n        return res ? res.content : [];\r\n    }\r\n);\r\n\r\n\r\nconst PARAMS_PATTERN = _Or(\r\n    _Punctuator(\"(\").walk(\r\n        function (context: Context, left: number) {\r\n            let parser = context[CONTEXT.parser];\r\n            let store = context.store(\r\n                CONTEXT.bindingElement, true,\r\n                CONTEXT.spreadElement, true,\r\n                CONTEXT.bindingSet, []\r\n            );\r\n            parser.parseRange(\r\n                PARAMS_TREE, context, left, is_right_parentheses,\r\n                function (node: Token) { return node.type === \"Success\"; }\r\n            ).type = \"Params\";\r\n            context.restore(store);\r\n        }\r\n    ), _Pattern(\"Params\")\r\n).pipe(\r\n    function (context: Context, token: Token, left: number) {\r\n        let [collected, parser] = context;\r\n        let kind = collected.kind;\r\n        let params = token.content ? token.content.content : [];\r\n        let params_count = kind === \"get\" ? 0 : kind === \"set\" ? 1 : false;\r\n        if (params_count !== false && params.length !== params_count) {\r\n            parser.err(...params.splice(params_count, params.length - params_count));\r\n        }\r\n        return params;\r\n    }\r\n);\r\nconst BODY_PATTERN = _Or(\r\n    _Punctuator(\"{\").walk(\r\n        function (context: Context, left: number) {\r\n            let generator = !!this.generator, async = !!this.async;\r\n            let parser = context[CONTEXT.parser];\r\n            let body_context = _Context(parser);\r\n            body_context[CONTEXT.inFunctionBody] = left + 1;\r\n            body_context[CONTEXT.strict] = context[CONTEXT.strict];\r\n            body_context[CONTEXT.allowYield] = generator;\r\n            body_context[CONTEXT.allowAwait] = async;\r\n\r\n            let node = parser.parseRangeAsBlock(body_context, left);\r\n            /*parser.parseRange(\r\n                parser.SYNTAX_TREE, body_context, left, is_right_braces\r\n            )*/\r\n            node.type = \"Body\";\r\n            node.generator = generator;\r\n            node.async = async;\r\n            let block = new NODES.BlockStatement();\r\n            block.body = node.content;\r\n            attachLocation(block, node);\r\n            node.content = block;\r\n        },\r\n        true\r\n    ), \"Body\"\r\n);\r\nconst FUNCTION_BODY_PATTERN = _Or(\r\n    BODY_PATTERN\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        return token.content;\r\n    }\r\n);\r\n\r\nconst PrimaryExpressions: Record<string, any> = {\r\n    \"\": [\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"{}\"),\r\n                content: _Punctuator(\"{\").pipe(\r\n                    function (context: Context, token: Token, left: number) {\r\n                        return context[CONTEXT.parser].parseRange(\r\n                            PROPERTIES_TREE, context, left, is_right_braces\r\n                        ).content || [];\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"()\"),\r\n                content: _Punctuator(\"(\").walk(\r\n                    walk_primary_expression\r\n                ).pipe(\r\n                    function (context: Context, token: Token, index: number) {\r\n                        return token.content;\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        {\r\n            collector: {\r\n                type: _Mark(\"Punctuator\"),\r\n                value: _Mark(\"[]\"),\r\n                content: _Punctuator(\"[\").pipe(\r\n                    function (context: Context, node: Node, index: number) {\r\n                        return context[CONTEXT.parser].parseRange(\r\n                            PRIMARY_EXPRESSION_TREE, context, index, is_right_brackets\r\n                        ).content;\r\n                    }\r\n                )\r\n            }\r\n        },\r\n    ],\r\n    \"Identifier\": [\r\n    ],\r\n    \"Literal\": [//已在 tokenizer => token_hooks 中处理\r\n    ],\r\n    \"ThisExpression\": {\r\n        collector: {\r\n            token: _NonCollecting(\"Keyword this\")\r\n        }\r\n    },\r\n    \"TemplateLiteral\": {\r\n        filter(context: Context, left: number, right: number) {\r\n            let value = context.getToken(right).value;\r\n            return value[0] === \"`\";\r\n        },\r\n        collector: [\r\n            {\r\n                _: _NonCapturing(_Option(\"[Expression]\")),\r\n                expressions: _Mark(() => []),\r\n                quasis: _Pattern(\"Template\").pipe(\r\n                    function (context: Context, token: Token, index: number) {\r\n                        let [collected, parser] = context;\r\n                        let value: string;\r\n                        let expressions = collected.expressions;\r\n                        let quasis = [];\r\n                        let tail: boolean = false;\r\n                        let end: number;\r\n                        while (true) {\r\n                            token = context.getToken(index);\r\n                            value = token.value;\r\n                            token.value = \"\";\r\n                            if (value[value.length - 1] === \"`\") {\r\n                                end = -1;\r\n                                tail = true;\r\n                            } else {\r\n                                end = -2;\r\n                                tail = false;\r\n                            }\r\n                            quasis.push(\r\n                                {\r\n                                    type: \"TemplateElement\",\r\n                                    value: {\r\n                                        raw: value.slice(1, end),\r\n                                        cooked: parser._volatility\r\n                                    },\r\n                                    tail\r\n                                }\r\n                            );\r\n                            if (tail) {\r\n                                break;\r\n                            }\r\n                            expressions.push(\r\n                                parser.parseRangeAsExpression(context, index,\r\n                                    function (token: Token) {\r\n                                        return token.type === parser.TYPE_ENUMS.Template\r\n                                            && token.value[0] === \"}\";\r\n                                    }\r\n                                )\r\n                            )\r\n                        }\r\n                        return quasis;\r\n                    }\r\n                ),\r\n            }\r\n        ]\r\n    },\r\n    \"FunctionExpression\": [\r\n\r\n        {\r\n            collector: [\r\n                {\r\n                    async: _Or(\r\n                        _Series(_Mark(true), _NonCollecting(\"Keyword async\")),\r\n                        _Mark(false)\r\n                    ),\r\n                    __: _NonCollecting(\"Keyword function\"),\r\n                    generator: _Or(\r\n                        _Series(_Mark(true), _NonCollecting(\"Punctuator *\")),\r\n                        _Mark(false)\r\n                    ),\r\n                    id: _Or(IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                    params: PARAMS_PATTERN,\r\n                    body: FUNCTION_BODY_PATTERN,\r\n                    expression: _Mark(false)\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, left] = context;\r\n                context[CONTEXT.start] = context[CONTEXT.end] = left;\r\n                return reinterpretIdentifierAsKeyword(context.getToken(left))\r\n                //return parser.parseKeyword(context.getToken(left));\r\n            },\r\n            filter: [\r\n                function () {\r\n                    return false;\r\n                },\r\n                isAligned\r\n            ],\r\n            collector: [\r\n                { _: _Series(\"Identifier async\", \"Identifier\") },\r\n                {\r\n                    async: \"Identifier async\",\r\n                    _next: _NonCapturing(\"Keyword function\"),\r\n                },\r\n                {\r\n                    async: \"Identifier async\",\r\n                    params: _NonCapturing(\r\n                        _Punctuator(\"(\").walk(\r\n                            walk_primary_expression\r\n                        ), \"Punctuator ()\", \"Identifier\"),\r\n                    token: _NonCapturing(\"Punctuator =>\"),\r\n                },\r\n            ]\r\n        }\r\n    ],\r\n    \"ArrowFunctionExpression\": {\r\n        handler: [\r\n            null,\r\n            function (context: Context) {\r\n                let [collected, parser, left, right] = context;\r\n                let token = context.getToken(right);\r\n                token.value = \"_=>\";\r\n                let body_context = _Context(parser);\r\n                body_context[CONTEXT.strict] = context[CONTEXT.strict];\r\n                body_context[CONTEXT.allowAwait] = collected.async;\r\n                if (\r\n                    parser.parseCustom(\r\n                        parser.EXPRESSION_TREE,\r\n                        body_context,\r\n                        left,\r\n                        (node: Node) => true\r\n                    )\r\n                ) {\r\n                    return null;\r\n                }\r\n            },\r\n            null\r\n        ],\r\n        precedence: [3, true, new Number(3)],\r\n        collector: [\r\n            {//占位使 () 不会被单独收集为表达式\r\n                async: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Keyword async\")),\r\n                    _Mark(false)\r\n                ),\r\n                generator: _Mark(false),\r\n                id: _Mark(null),\r\n                params: _Or(\r\n                    _Punctuator(\"()\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context.wrap(CONTEXT.tokens, token.content);\r\n                            let res = parse_params(context, token.content);\r\n                            context.unwrap();\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    _Pattern(\"Identifier\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            validateAssignment(context, token);\r\n                            return [token];\r\n                        }\r\n                    )\r\n                ),\r\n                token: _NonCollecting(\"Punctuator =>\"),\r\n                body: FUNCTION_BODY_PATTERN,\r\n                expression: _Mark(false)\r\n            },\r\n            [\"body\", _Mark()],\r\n            [\r\n                //_=>作用为隔断匹配，使后续的表达式使用当前方法声明的环境\r\n                [\"token\", _NonCollecting(\"Punctuator _=>\")],//\"Punctuator _=>\"\r\n                [\"body\", \"[Expression]\"],\r\n                [\"expression\", _Mark(true)]\r\n            ]\r\n        ]\r\n    },\r\n    \"ClassExpression\": {\r\n        collector: [\r\n            {\r\n                _: _NonCollecting(\"Keyword class\"),\r\n                id: _Or(IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                superClass: _Or(\r\n                    _Series(\r\n                        _NonCollecting(\"Keyword extends\"),\r\n                        IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n                    ),\r\n                    _Mark(null)\r\n                ),\r\n                body:\r\n                    _Punctuator(\"{\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let parser = context[CONTEXT.parser];\r\n                            let res = parser.parseRange(\r\n                                METHOD_DEFINITIONS_TREE, context, left, is_right_braces,\r\n                                function (node: Token) { return node.type === \"Success\"; }\r\n                            );\r\n\r\n                            return {\r\n                                type: \"ClassBody\",\r\n                                body: res.content?.content || [],\r\n                                range: res.range,\r\n                                loc: res.loc\r\n                            };\r\n                        }\r\n                    )\r\n            }\r\n        ]\r\n    },\r\n    \"Super\": {\r\n        validator(context: Context) {\r\n            let [, parser, left, right] = context;\r\n            if (!context[CONTEXT.inFunctionBody] || right === left) {\r\n                parser.err(context.getToken(left));\r\n            }\r\n            return true;\r\n        },\r\n        collector: {\r\n            token: _NonCollecting(\"Keyword super\"),\r\n            _next: _NonCapturing(\"Punctuator ( . [\")\r\n        }\r\n    },\r\n}\r\n\r\nconst Expressions: Record<string, any> = async_getter.Expressions = {\r\n    ...PrimaryExpressions,\r\n    \"\": PrimaryExpressions[\"\"].concat(\r\n        {\r\n            validator(context: Context) {\r\n                let parser = context[CONTEXT.parser];\r\n                let left = context[CONTEXT.left];\r\n                let token = context.getToken(left);\r\n                let store = context.store(\r\n                    CONTEXT.bindingSet, null,\r\n                    CONTEXT.bindingElement, false,\r\n                    CONTEXT.tokens, token.content\r\n                );\r\n                let grouping = new Grouping(\r\n                    parser.parseExpression(context)\r\n                );\r\n                context.restore(store);\r\n                context[CONTEXT.start] = context[CONTEXT.end] = left;\r\n                return grouping;\r\n            },\r\n            collector: {\r\n                token: \"Punctuator ()\"\r\n            }\r\n        }\r\n    ),\r\n    \"ArrayExpression\": {\r\n        precedence: 20,\r\n        collector: {\r\n            elements: _Punctuator(\"[]\").pipe(\r\n                function (context: Context, node: Node, index: number) {\r\n                    let store = context.store(\r\n                        CONTEXT.spreadElement, true,\r\n                        CONTEXT.bindingElement, false\r\n                    );\r\n                    let res = parse_and_extract(ARRAY_ELEMENTS_TREE, context, node);\r\n                    context.restore(store);\r\n                    return res;\r\n                }\r\n            ),\r\n        }\r\n\r\n    },\r\n    \"ObjectExpression\": {\r\n        precedence: 20,\r\n        collector: {\r\n            properties: _Punctuator(\"{}\").pipe(\r\n                function (context: Context, node: Node, index: number) {\r\n                    return parse_and_extract(OBJECT_PROPERTIES_TREE, context, node);\r\n                    //return node.content || [];\r\n                }\r\n            ),\r\n        }\r\n\r\n    },\r\n    \"TaggedTemplateExpression\": {\r\n        collector: [\r\n            {\r\n                tag: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                quasi: \"TemplateLiteral\"\r\n            }\r\n        ]\r\n    },\r\n    \"MemberExpression\": [\r\n        {\r\n            precedence: 20,\r\n            collector: {\r\n                object: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                property: _Series(\r\n                    _NonCollecting(\"Punctuator .\"),\r\n                    _Or(\r\n                        \"Identifier\",\r\n                        _Pattern(\"Keyword\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                return reinterpretKeywordAsIdentifier(token);\r\n                                //return context[CONTEXT.parser].parseIdentifier(token);\r\n                            }\r\n                        )\r\n                    )\r\n                ),\r\n                computed: _Mark(false)\r\n            }\r\n        },\r\n        {\r\n            filter: \"CallExpression\",\r\n            precedence: 20,\r\n            collector: {\r\n                object: EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                property: _Or(\r\n                    _Punctuator(\"[\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let store = context.store(CONTEXT.bindingElement, false);\r\n                            let res = context[CONTEXT.parser].parseRangeAsExpression(context, left, is_right_brackets);\r\n                            context.restore(store);\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    _Punctuator(\"[]\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let store = context.store(CONTEXT.tokens, token.content, CONTEXT.bindingElement, false);\r\n                            let res = context[CONTEXT.parser].parseExpression(context);\r\n                            context.restore(store);\r\n                            return res;\r\n                        }\r\n                    )\r\n                ),\r\n                computed: _Mark(true)\r\n            }\r\n        }\r\n    ],\r\n\r\n    \"MetaProperty\": {\r\n        handler([collected]: Context) {\r\n            collected.meta.type = \"Identifier\";\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                meta: \"Keyword import\",\r\n                _: _NonCollecting(\"Punctuator .\"),\r\n                property: \"Identifier meta\"\r\n            },\r\n            {\r\n                meta: \"Keyword new\",\r\n                _: _NonCollecting(\"Punctuator .\"),\r\n                property: \"Identifier target\"\r\n            }\r\n        ]\r\n    },\r\n    \"NewExpression\": {\r\n        precedence: new Number(20)/*_Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,//memberexpression new Number(20)\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword new\"),\r\n                callee: _Or(\r\n                    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _Pattern(\"ArrowFunctionExpression\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context[CONTEXT.parser].err(token);\r\n                        }\r\n                    )\r\n                ),\r\n                arguments: _Or(_Mark(() => []), ARGUMENTS_PATTERN)\r\n            }\r\n        ]\r\n    },\r\n    \"CallExpression\": {\r\n        precedence: 20/* _Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,\r\n        filter(context: Context, left: number) {\r\n            let tokens = context.tokens;\r\n            let first_token = tokens[left], second_token = tokens[left + 1];\r\n            if (second_token === context[CONTEXT.rightAssociativeNode]) {\r\n                return false;\r\n            }\r\n            let first_token_type = first_token.type;\r\n            if (\r\n                first_token instanceof Grouping\r\n                || first_token_type !== \"ArrowFunctionExpression\"\r\n            ) {\r\n                return true;\r\n            }\r\n        },\r\n        collector: {\r\n            callee: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n            arguments: ARGUMENTS_PATTERN\r\n        }\r\n\r\n    },\r\n    \"UpdateExpression\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [collected] = context;\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            },\r\n            precedence: 17,\r\n            collector: {\r\n                operator: \"Punctuator ++ --\",\r\n                argument: _Or(\"MemberExpression\", IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n                prefix: _Mark(true),\r\n                /*_: _++a(b)*/\r\n            }\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let collected = context[CONTEXT.parser].createNode(context);\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            },\r\n            filter(context: Context, left: number, right: number) {\r\n                return isAligned(context, left, left + 1);\r\n            },\r\n            precedence: 18,\r\n            collector: {\r\n                argument: _Or(\"MemberExpression\", IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n                operator: \"Punctuator ++ --\",\r\n                prefix: _Mark(false),\r\n                _: _Option(\r\n                    _NonCapturing(\r\n                        _Punctuator(\"[\", \"(\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                context[CONTEXT.rightAssociativeNode] = token;\r\n                            }\r\n                        ),\r\n                        _Punctuator(\".\").pipe(\r\n                            function (context: Context, token: Token) {\r\n                                context[CONTEXT.parser].err(token);\r\n                            }\r\n                        )\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    ],\r\n    \"AwaitExpression\": [\r\n        {\r\n            precedence: 17,\r\n            filter(context: Context) {\r\n                return context[CONTEXT.allowAwait];\r\n            },\r\n            collector: {\r\n                token: _NonCollecting(\"Keyword await\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n            }\r\n        },\r\n        {\r\n            handler([{ token }]: Context) {\r\n                return reinterpretKeywordAsIdentifier(token);\r\n                //return parser.parseIdentifier(collected.token);\r\n            },\r\n            filter(context: Context) {\r\n                return !context[CONTEXT.allowAwait];\r\n            },\r\n            collector: {\r\n                token: \"Keyword await\",\r\n            }\r\n        },\r\n    ],\r\n    \"UnaryExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.operator = collected.operator.value;\r\n            return collected;\r\n        },\r\n        precedence: 17,\r\n        collector: [\r\n            {\r\n                operator: _Or(\"Punctuator ~ ! + -\", \"Keyword delete void typeof\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                prefix: _Mark(true)\r\n            }\r\n        ]\r\n    },\r\n    \"BinaryExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.operator = collected.operator.value;\r\n            return collected;\r\n        },\r\n        validator(context: Context) {\r\n            return context[CONTEXT.right] - context[CONTEXT.left] >= 2\r\n        },\r\n        precedence: [16, 15, 14, 13, 12, 11, 10, 9, 8, 7],\r\n        collector: [\r\n            {\r\n                left: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                operator: `Punctuator **`,\r\n                right: _Option(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN)\r\n            },\r\n            [\"operator\", `Punctuator * / %`],\r\n            [\"operator\", `Punctuator + -`],\r\n            [\"operator\", `Punctuator << >> >>>`],\r\n            [\"operator\", _Or(`Punctuator < <= > >=`, `Keyword in instanceof`)],\r\n            [\"operator\", `Punctuator == != === !==`],\r\n            [\"operator\", `Punctuator &`],\r\n            [\"operator\", `Punctuator ^`],\r\n            [\"operator\", `Punctuator |`],\r\n            [\"operator\", `Punctuator ??`]\r\n        ]\r\n    },\r\n    \"LogicalExpression\": {\r\n        validator(context: Context) {\r\n            if (context[CONTEXT.right] - context[CONTEXT.left] === 2) {\r\n                let collected = context[CONTEXT.parser].createNode(context);\r\n                collected.operator = collected.operator.value;\r\n                return collected;\r\n            }\r\n        },\r\n        precedence: [6, 5],\r\n        collector: [\r\n            {\r\n                left: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                operator: \"Punctuator &&\",\r\n                right: _Option(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN)\r\n            },\r\n            [\"operator\", \"Punctuator ||\"]\r\n        ]\r\n    },\r\n    \"ConditionalExpression\": [\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, left, right] = context;\r\n                if (right - left >= 4) {\r\n                    return true;\r\n                }\r\n                if (!context[CONTEXT.isExpression] || context[CONTEXT.bindingElement]) {\r\n                    let store = context.store(CONTEXT.isExpression, true, CONTEXT.bindingElement, null);\r\n                    parser.parseCustom(\r\n                        parser.EXPRESSION_TREE,\r\n                        context,\r\n                        left,\r\n                        (node: Node) => node.type === \"ConditionalExpression\"\r\n                    );\r\n                    context.restore(store);\r\n                    return null;\r\n                }\r\n            },\r\n            precedence: new Number(3),//与 Assignment 为右优先\r\n            collector: [\r\n                {\r\n                    test: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,//EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS\r\n                    token: _NonCollecting(\"Punctuator ?\")\r\n                },\r\n                [\"consequent\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN],\r\n                [\"_\", _NonCollecting(\"Punctuator :\")],\r\n                [\"alternate\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN]\r\n            ]\r\n        },\r\n    ],\r\n    \"YieldExpression\": [\r\n        {\r\n            /*filter(context: Context) {\r\n                return context[CONTEXT.allowYield];\r\n            },*/\r\n            precedence: 2,\r\n            collector: [\r\n                {\r\n                    token: _NonCollecting(\"Keyword yield\"),\r\n                    _: _NonCollecting(\"Punctuator *\"),\r\n                    argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    delegate: _Mark(true)\r\n                },\r\n                {\r\n                    token: _NonCollecting(\"Keyword yield\"),\r\n                    argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    delegate: _Mark(false)\r\n                }\r\n            ]\r\n        },\r\n        /*{\r\n            handler([{ token }]: Context) {\r\n                return reinterpretKeywordAsIdentifier(token)\r\n                //return parser.parseIdentifier(collected.token);\r\n            },\r\n            filter(context: Context) {\r\n                return !context[CONTEXT.allowYield];\r\n            },\r\n            collector: {\r\n                token: \"Keyword yield\"\r\n            }\r\n        },*/\r\n    ],\r\n    \"AssignmentExpression\": {\r\n        validator: \"LogicalExpression\",\r\n        precedence: new Number(3),//Right-associative\r\n        collector: {\r\n            left: _Or(\r\n                _Or(\"[Expression]\").pipe(\r\n                    function (context: Context, expr: Node) {\r\n                        context[CONTEXT.parser].err(expr);\r\n                    }\r\n                ),\r\n                \"AssignmentExpression\",\r\n                \"MemberExpression\",\r\n                \"AssignmentPattern\",\r\n                \"ArrayPattern\",\r\n                \"ObjectPattern\",\r\n                IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n            ),\r\n            operator: ASSIGNMENT_PUNCTUATORS_PATTERN,\r\n            right: _Option(\"[Expression]\")//占位避免错误断句\r\n        }\r\n    },\r\n    \"SequenceExpression\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            let expressions: Array<Node> = collected.expressions;\r\n            if (expressions[0] instanceof NODES.SequenceExpression) {\r\n                expressions[0].expressions.push(expressions[1]);\r\n                collected.expressions = expressions[0].expressions\r\n            }\r\n            return collected\r\n        },\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if (right - left === 2) {\r\n                return true;\r\n            }\r\n        },\r\n        precedence: 1,\r\n        collector: {\r\n            expressions: _Series(\r\n                EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _NonCollecting(\"Punctuator ,\"),\r\n                _Option(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst COMPUTED_PROPERTY_NAME_PATTERN = _Punctuator(\"[]\").pipe(\r\n    function (context: Context, token: Token) {\r\n        let [collected, parser] = context;\r\n        collected.computed = true;\r\n        context.wrap(CONTEXT.tokens, token.content)\r\n        let res = parser.parseExpression(context);\r\n        context.unwrap();\r\n        return res;\r\n    }\r\n);\r\n\r\nconst LITERAL_PROPERTY_NAME_PATTERN = _Or(\"Identifier\", \"Keyword\", \"Literal\").pipe(\r\n    function (context: Context, key: Token) {\r\n        let [, parser] = context;\r\n        if (key instanceof Grouping) {\r\n            parser.err(key);\r\n        } else {\r\n            switch (key.type) {\r\n                case \"Keyword\":\r\n                    return reinterpretKeywordAsIdentifier(key);\r\n                //return parser.parseIdentifier(key);\r\n                case \"Literal\":\r\n                    if (key.regex) {\r\n                        parser.err(key);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n);\r\nconst PROPERTY_NAME_PATTERN = _Or(COMPUTED_PROPERTY_NAME_PATTERN, LITERAL_PROPERTY_NAME_PATTERN);\r\n\r\n\r\nconst MethodDefinitions = {\r\n    ..._SuccessCollector(_Pattern(\"MethodDefinition\")),\r\n    \"\": {\r\n        validator(context: Context) {\r\n            context[CONTEXT.start] = context[CONTEXT.end] = context[CONTEXT.right];\r\n            return [];\r\n        },\r\n        collector: {\r\n            _: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n            __: \"Punctuator ;\"\r\n        }\r\n    },\r\n    MethodDefinition: {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            let { value } = collected;\r\n            collected.kind = value.kind;\r\n            delete value.kind;\r\n            collected.computed = value.computed;\r\n            delete value.computed;\r\n            collected.key = value.key;\r\n            delete value.key;\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                key: _Mark(\"\"),\r\n                static: _Mark(true),\r\n                computed: _Mark(false),\r\n                _static: _NonCollecting(\"Identifier static\"),\r\n                value: \"FunctionExpression\",\r\n                kind: _Mark(\"\"),\r\n            },\r\n            [\r\n                [\"static\", _Mark(false)],\r\n                [\"_static\", _Mark()]\r\n            ]\r\n        ]\r\n    },\r\n    FunctionExpression: {\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                static: _Option(_NonCapturing(\"Identifier static\")),\r\n                async: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Identifier async\")),\r\n                    _Mark(false)\r\n                ),\r\n                generator: _Or(\r\n                    _Series(_Mark(true), _NonCollecting(\"Punctuator *\")),\r\n                    _Mark(false)\r\n                ),\r\n                kind: _Mark(\"method\"),\r\n                computed: _Mark(false),\r\n                key: PROPERTY_NAME_PATTERN,\r\n                id: _Mark(null),\r\n                params: PARAMS_PATTERN,\r\n                expression: _Mark(false),\r\n                body: FUNCTION_BODY_PATTERN\r\n            },\r\n            [\r\n                [\"generator\", _Mark(false)],\r\n                [\r\n                    \"kind\", _Or(\"Identifier get set\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            return token.value;\r\n                        }\r\n                    )\r\n                ]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst Arguments = {\r\n    \"Success\": {\r\n        handler: join_content,\r\n        //precedence: 0,\r\n        collector: {\r\n            success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n            content: _Or(\"SpreadElement\", EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\r\n            _: _Or(_NonCollecting(\"Punctuator ,\"), MARKS.BOUNDARY, _NonCapturing(\"Punctuator )\")),\r\n        }\r\n    }\r\n}\r\n\r\nconst Params = {\r\n    \"Success\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            if (collected.content instanceof Grouping) {\r\n                parser.err(collected.content);\r\n            }\r\n            return join_content(context);\r\n        },\r\n        collector: [\r\n            {\r\n                success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                content: \"AssignmentPattern\",\r\n                _: _Or(_NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY), _NonCapturing(\"Punctuator )\")),\r\n            },\r\n            [\r\n                \"content\", _Or(\"Identifier\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        validateBinding(context, token);\r\n                    }\r\n                )\r\n            ],\r\n            [\"content\", _Or(\"ArrayPattern\", \"ObjectPattern\")],\r\n            [\r\n                [\"content\", \"RestElement\"],\r\n                [\"_\", _Or(_NonCollecting(MARKS.BOUNDARY), _NonCapturing(\"Punctuator )\"))]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst ArrayElements = {\r\n    \"Success\": {\r\n        handler: join_content,\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                success: _Or(_NonCollecting(MARKS.BOUNDARY), \"Success\"),\r\n                content: _Or(\"SpreadElement\", EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN),\r\n                _: _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY),\r\n            },\r\n            [\r\n                [\"content\", _Mark(null)],\r\n                [\"_\", _NonCollecting(\"Punctuator ,\")]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst Properties = {\r\n    \"Property\": {\r\n        handler(context: Context) {\r\n            let [collected, parser, left, right] = context;\r\n            let { value: [params, body] } = collected;\r\n            let expr = new NODES.FunctionExpression();\r\n            expr.id = null;\r\n            expr.params = params;\r\n            expr.body = body.content;\r\n            expr.generator = body.generator;\r\n            expr.expression = false;\r\n            expr.async = body.async;\r\n            attachLocation(expr, collected, context.getToken(right - 1));\r\n            collected.value = expr;\r\n            collected.type = \"ObjectProperty\"\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Punctuator ,\", \"ObjectProperty\"),\r\n                async: _Option(_NonCollecting(\"Identifier async\")),\r\n                generator: _Option(_NonCollecting(\"Punctuator *\")),\r\n                kind: _Mark(\"init\"),\r\n                computed: _Mark(false),\r\n                key: PROPERTY_NAME_PATTERN,\r\n                value: _Series(PARAMS_PATTERN, BODY_PATTERN),\r\n                _next: _Or(\r\n                    _NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"),\r\n                    _NonCapturing(\"Punctuator }\")\r\n                ),\r\n                //_NonCapturing(MATCH_MARKS.BOUNDARY, \"Punctuator ,\", \"Punctuator }\"),\r\n                method: _Mark(true),\r\n                shorthand: _Mark(false)\r\n            },\r\n            [\r\n                [\"async\", _Mark()],\r\n                [\"generator\", _Mark()],\r\n                [\r\n                    \"kind\", _Or(\r\n                        _Series(_NonCollecting(\"Identifier get\"), _Mark(\"get\")),\r\n                        _Series(_NonCollecting(\"Identifier set\"), _Mark(\"set\"))\r\n                    )\r\n                ],//\"Identifier get set\"\r\n                [\"method\", _Mark(false)]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\nconst ObjectProperties = {\r\n    ..._SuccessCollector(_Or(\r\n        \"Property\",\r\n        _Or(\"ObjectProperty\").pipe(\r\n            function (context: Context, token: Token) {\r\n                token.type = \"Property\";\r\n            }\r\n        )\r\n    )),\r\n    \"Property\": {\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                key: PROPERTY_NAME_PATTERN,//\"TemplateLiteral\"\r\n                value: _Series(\r\n                    _NonCollecting(\"Punctuator :\"),\r\n                    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN\r\n                ),\r\n                _next: _Or(_NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"), _NonCapturing(\"Punctuator }\")),\r\n                kind: _Mark(\"init\"),\r\n                computed: _Mark(false),\r\n                method: _Mark(false),\r\n                shorthand: _Mark(false),\r\n            },\r\n            [\r\n                [\"key\", \"Identifier\"],\r\n                [\"value\", (window as any).test1 = _Mark(function (context: Context) {\r\n                    return context[CONTEXT.collected].key;\r\n                })],\r\n                [\"shorthand\", _Mark(true)]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n/*\r\nlet PRIMARY_EXPRESSION_TREE = createMatchTree(\r\n    PrimaryExpressions\r\n)\r\nlet METHOD_DEFINITIONS_TREE = createMatchTree(\r\n    MethodDefinitions, PRIMARY_EXPRESSION_TREE\r\n);\r\nlet PROPERTIES_TREE = createMatchTree(\r\n    Properties,\r\n    PRIMARY_EXPRESSION_TREE\r\n);*/\r\n\r\nlet PRIMARY_EXPRESSION_TREE: MatchTree,\r\n    METHOD_DEFINITIONS_TREE: MatchTree,\r\n    PROPERTIES_TREE: MatchTree,\r\n    UNIT_EXPRESSION_TREE: MatchTree,\r\n    ARRAY_ELEMENTS_TREE: MatchTree,\r\n    OBJECT_PROPERTIES_TREE: MatchTree,\r\n    PARAMS_TREE: MatchTree,\r\n    ARGUMENTS_TREE: MatchTree,\r\n    EXPRESSION_TREE: MatchTree;\r\n\r\n\r\n\r\nasync_getter.get(\r\n    \"Patterns\",\r\n    function (Patterns: Record<string, any>) {\r\n        PRIMARY_EXPRESSION_TREE = createMatchTree(\r\n            PrimaryExpressions\r\n        )\r\n        METHOD_DEFINITIONS_TREE = createMatchTree(\r\n            MethodDefinitions, PRIMARY_EXPRESSION_TREE\r\n        );\r\n        PROPERTIES_TREE = createMatchTree(\r\n            Properties,\r\n            PRIMARY_EXPRESSION_TREE\r\n        );\r\n\r\n        UNIT_EXPRESSION_TREE = createMatchTree(\r\n            [Expressions, Patterns],\r\n            undefined,\r\n            [\"SequenceExpression\"]\r\n        );\r\n        ARRAY_ELEMENTS_TREE = createMatchTree(ArrayElements, UNIT_EXPRESSION_TREE);\r\n\r\n        OBJECT_PROPERTIES_TREE = createMatchTree(\r\n            ObjectProperties,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        PARAMS_TREE = createMatchTree(\r\n            Params,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        ARGUMENTS_TREE = createMatchTree(\r\n            Arguments,\r\n            UNIT_EXPRESSION_TREE\r\n        );\r\n        EXPRESSION_TREE = createMatchTree(\r\n            { SequenceExpression: Expressions.SequenceExpression }\r\n            , UNIT_EXPRESSION_TREE\r\n        );\r\n        async_getter.EXPRESSION_TREE = EXPRESSION_TREE;\r\n        async_getter.UNIT_EXPRESSION_TREE = UNIT_EXPRESSION_TREE;\r\n    }\r\n)\r\n\r\n\r\nasync_getter.get(\"Expressions\", function (expressions: Record<string, any>) {\r\n    for (const type_name in expressions) {\r\n        if (type_name) {\r\n            TYPE_ALIAS[type_name] = [type_name, \"[Expression]\"];\r\n        }\r\n    }\r\n});\r\nexport default Expressions;\r\nexport {\r\n    PrimaryExpressions,\r\n    Expressions,\r\n    parseArrayPattern,\r\n    parseObjectPattern,\r\n    parse_params\r\n};\r\nfunction parse_params(context: Context, tokens: Array<Token>) {//\r\n    if (tokens.length) {\r\n        let parser = context[CONTEXT.parser];\r\n        let restore = context.store(\r\n            CONTEXT.tokens, tokens,\r\n            CONTEXT.bindingElement, true\r\n        );\r\n        context[CONTEXT.strict] && context.wrap(CONTEXT.bindingSet, []);\r\n        parser.parseCustom(PARAMS_TREE, context);\r\n        context.restore(restore);\r\n        return extract_success(parser, tokens);\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\nfunction init_token_hooks() {\r\n    function getLiteral(parse_value: (token: Token, tokenizer: Tokenizer) => any, token: Token, tokenizer: Tokenizer) {\r\n        return {\r\n            type: \"Literal\",\r\n            value: parse_value(token, tokenizer),\r\n            raw: token.value,\r\n            range: token.range,\r\n            loc: token.loc\r\n        }\r\n    }\r\n\r\n    let getStringLiteral = getLiteral.bind(null, (token: Token, tokenizer: Tokenizer) => tokenizer._volatility);\r\n    let getRegularLiteral = getLiteral.bind(null, (token: Token, tokenizer: Tokenizer) => {\r\n        let regex = token.regex;\r\n        try {\r\n            return new RegExp(regex.pattern, regex.flags);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    token_hooks.Keyword = function (token: Token, parser: Parser) {\r\n        let context = parser.context_stack[0];\r\n        if (!context[CONTEXT.allowYield] && token.value === \"yield\") {\r\n            return reinterpretKeywordAsIdentifier(token);\r\n        }\r\n        return token;\r\n    };\r\n    token_hooks.Identifier = reinterpretKeywordAsIdentifier;\r\n    token_hooks.Numeric = getLiteral.bind(null, (token: Token) => Number(token.value));\r\n    token_hooks.Boolean = getLiteral.bind(null, (token: Token) => token.value === \"true\");\r\n    token_hooks.String = function (token: Token, parser: Parser) {\r\n        token = getStringLiteral(token, parser);\r\n        if (parser._scopes.octal && parser.context_stack[0][CONTEXT.strict]) {\r\n            parser.err(token);\r\n        }\r\n        return token;\r\n    };\r\n    token_hooks.Null = getLiteral.bind(null, () => null);\r\n    token_hooks.RegularExpression = function (token: Token, tokenizer: Tokenizer) {\r\n        let res = getRegularLiteral(token, tokenizer);\r\n        res.regex = token.regex;\r\n        return res;\r\n    };\r\n}\r\n","\r\n\r\nimport {\r\n    Context, CONTEXT, SourceLocation, Node, Token, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    isRestrictedWord,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, NODES, TYPE_ALIAS,\r\n    validateBinding, validateLineTerminator, createMatchTree, join_content, _NonCapturing\r\n} from './head'\r\n//import { Expressions, UNIT_EXPRESSION_TREE } from './expression';\r\n\r\nlet Grouping = NODES.Grouping;\r\n\r\n\r\nfunction get_variable_declarator(context: Context, id: Node, init: Node, range: [number, number], loc: SourceLocation): Node {\r\n    let parser = context[CONTEXT.parser];\r\n    if (id instanceof Grouping) {\r\n        parser.err(id);\r\n    } else if (context[CONTEXT.strict]) {\r\n        init || validateBinding(context, id);\r\n    } if (id.name === \"let\") {\r\n        let kind = context.tokens[context[CONTEXT.begin] - 1];\r\n        if (kind.value === \"let\" || kind.value === \"const\") {\r\n            parser.err(id);\r\n        }\r\n    }\r\n    return {\r\n        type: \"VariableDeclarator\",\r\n        id, init, range, loc\r\n    };\r\n}\r\n\r\nlet VariableDeclarators = {\r\n    Success: {\r\n        handler: [\r\n            join_content,\r\n            function (context: Context) {\r\n                let [collected] = context;\r\n                validateLineTerminator(context);\r\n                collected.content = join_content(context).content;\r\n                return collected;\r\n            }\r\n        ],\r\n        precedence: [true, 0],\r\n        collector: [\r\n            {\r\n                success: _Or(\"Success\", MARKS.BOUNDARY),\r\n                content: _Or(\r\n                    _Pattern(\"Identifier\").pipe(\r\n                        function (context: Context, identifier: Node) {\r\n                            return get_variable_declarator(\r\n                                context,\r\n                                identifier,\r\n                                null,\r\n                                identifier.range,\r\n                                identifier.loc\r\n                            );\r\n                        }\r\n                    ),\r\n                    _Pattern(\"AssignmentPattern\").pipe(\r\n                        function (context: Context, pattern: Node) {\r\n                            return get_variable_declarator(\r\n                                context,\r\n                                pattern.left,\r\n                                pattern.right,\r\n                                pattern.range,\r\n                                pattern.loc\r\n                            );\r\n                        }\r\n                    )\r\n                ),\r\n                _next: _NonCollecting(\"Punctuator ,\"),\r\n            },\r\n            [\r\n                [\"type\", _Mark(\"VariableDeclarators\")],\r\n                [\"_next\", _Option(\"Punctuator ;\")]\r\n            ]\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nlet VARIABLE_DECLARATOR_TREE: MatchTree;\r\n\r\nasync_getter.get(\r\n    \"UNIT_EXPRESSION_TREE\",\r\n    function (UNIT_EXPRESSION_TREE: MatchTree) {\r\n        VARIABLE_DECLARATOR_TREE = createMatchTree(VariableDeclarators, UNIT_EXPRESSION_TREE);\r\n    }\r\n);\r\n\r\nfunction reinterpreat_expression_as_declaration(context: Context, expr: Node) {\r\n    let [collected, parser] = context;\r\n    expr.type = collected.type;\r\n    if (expr.id) {\r\n        if (isRestrictedWord(expr.id.name)) {\r\n            parser.err(expr.id);\r\n        }\r\n    } else {\r\n        parser.err(expr);\r\n    }\r\n    for (let key in expr) {\r\n        collected[key] = expr[key];\r\n    }\r\n    return expr.id;\r\n}\r\n\r\nconst Declarations: Record<string, any> = async_getter.Declarations = {\r\n    \"ClassDeclaration\": { //<= ClassExpression\r\n        filter(context: Context, left: number, right: number) {\r\n            let tokens = context.tokens;\r\n            return !(tokens[right] instanceof Grouping);\r\n        },\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                id: _Pattern(\"ClassExpression\").pipe(reinterpreat_expression_as_declaration)\r\n            }\r\n        ]\r\n    },\r\n    \"FunctionDeclaration\": {\r\n        filter: \"ClassDeclaration\",\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                id: _Pattern(\"FunctionExpression\").pipe(reinterpreat_expression_as_declaration)\r\n            }\r\n        ]\r\n    },\r\n    \"VariableDeclaration\": [\r\n        {\r\n            validator: [\r\n                function (context: Context) {\r\n                    let [, parser, left] = context;\r\n                    context.wrap(CONTEXT.bindingElement, true);\r\n                    let res = parser.parseCustom(\r\n                        VARIABLE_DECLARATOR_TREE,\r\n                        context,\r\n                        left + 1,\r\n                        (node: Node) => node.type === \"VariableDeclarators\"\r\n                    );\r\n                    context.unwrap();\r\n                    return res && 0;\r\n                }, null\r\n            ],\r\n            collector: [\r\n                {\r\n                    //_: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                    kind: _Or(\"Keyword var const let\", \"Identifier let\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return token.name === undefined ? token.value : token.name;\r\n                        }\r\n                    ),\r\n                    declarations: _Or(\r\n                        \"Identifier\",\r\n                        \"Punctuator [ {\"\r\n                    )\r\n                },\r\n                [\r\n                    [\"declarations\", _Pattern(\"VariableDeclarators\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return token.content;\r\n                        }\r\n                    )],\r\n                ]\r\n            ]\r\n        }\r\n    ]\r\n\r\n};\r\nasync_getter.get(\"Declarations\", function (declarations: Record<string, any>) {\r\n    for (const type_name in declarations) {\r\n        type_name && (TYPE_ALIAS[type_name] = [type_name, \"[Declaration]\"]);\r\n    }\r\n\r\n})\r\nexport default Declarations;\r\n","\r\n\r\nimport {\r\n    Token, Node, Context, CONTEXT, MatchTree\r\n} from './interfaces';\r\n\r\nimport { createSearchTree } from './lexical/head'\r\n\r\nimport {\r\n    TYPE_ENUMS,\r\n    PUNCTUATORS,\r\n    TOKEN_TYPE_SET,\r\n    REGEXP_DESCRIPTOR\r\n} from \"./lexical/index\";\r\n\r\nimport Parser from './parser';\r\nimport TokenizerOrigin from './tokenizer';\r\n\r\nimport { async_getter, token_hooks, createMatchTree } from './syntax/head'\r\n\r\nimport Expressions from './syntax/expression'\r\nimport Declarations from './syntax/declaration'\r\nimport Statements from './syntax/statement'\r\nimport ModuleDeclarations from './syntax/module_declaration'\r\n\r\n\r\nasync_getter.open();\r\nlet EXPRESSION_TREE: MatchTree = async_getter.EXPRESSION_TREE;\r\n\r\nconst SYNTAX_TREE = createMatchTree([\r\n    Declarations,\r\n    ModuleDeclarations,\r\n    Statements\r\n], EXPRESSION_TREE);\r\n\r\n\r\nlet EXPRESSION_ITEM_PATTERN = {};\r\nlet DECLARATION_ITEM_PATTERN = {};\r\nlet STATEMENT_ITEM_PATTERN = {};\r\nlet STATEMENT_LIST_ITEM_PATTERN = {};\r\nlet MODULE_ITEM_PATTERN = {};\r\nfor (\r\n    const [descriptor, patterns]\r\n    of\r\n    [\r\n        [\r\n            Expressions,\r\n            [EXPRESSION_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            Declarations,\r\n            [DECLARATION_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            Statements,\r\n            [STATEMENT_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n        [\r\n            ModuleDeclarations,\r\n            [MODULE_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\r\n        ],\r\n    ] as Array<[Record<string, any>, Array<Record<string, boolean>>]>\r\n) {\r\n    for (const key in descriptor) {\r\n        if (key) {\r\n            for (const pattern of patterns) {\r\n                pattern[key] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isExpression(node: Node) {\r\n    return EXPRESSION_ITEM_PATTERN[node.type];\r\n}\r\nfunction isDeclaration(node: Node) {\r\n    return DECLARATION_ITEM_PATTERN[node.type];\r\n}\r\nfunction isStatement(node: Node) {\r\n    return STATEMENT_ITEM_PATTERN[node.type];\r\n}\r\nfunction isStatementListItem(node: Node) {\r\n    return STATEMENT_LIST_ITEM_PATTERN[node.type];\r\n}\r\nfunction isModuleItem(node: Node) {\r\n    return MODULE_ITEM_PATTERN[node.type];\r\n}\r\n\r\n\r\nconst TOKEN_TYPE_MAPPERS: Record<string, string | number> = TOKEN_TYPE_SET.reduce(\r\n    (map, [type, id_set]) => {\r\n        for (let id of id_set) {\r\n            map[\" \" + id] = type;\r\n        }\r\n        return map;\r\n    }, {}\r\n);\r\nconst PUNCTUATORS_TREE = createSearchTree(PUNCTUATORS);\r\nconst PRIMARY_EXPR_START_PUNCTUATORS_TREE = createSearchTree(\r\n    [REGEXP_DESCRIPTOR],\r\n    createSearchTree(PUNCTUATORS, undefined, [\"/=\"]),\r\n);\r\n\r\n\r\n\r\nclass Tokenizer extends TokenizerOrigin {\r\n    TYPE_ENUMS = TYPE_ENUMS;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\r\n    PUNCTUATORS_TREE = PUNCTUATORS_TREE;\r\n}\r\nclass Dison extends Parser {\r\n    token_hooks = token_hooks;\r\n    TYPE_ENUMS = TYPE_ENUMS;\r\n    PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\r\n    PUNCTUATORS_TREE = PUNCTUATORS_TREE;\r\n    TOKEN_TYPE_MAPPERS = TOKEN_TYPE_MAPPERS;\r\n    SYNTAX_TREE = SYNTAX_TREE;\r\n    EXPRESSION_TREE = EXPRESSION_TREE;\r\n\r\n    isExpression = isExpression;\r\n    isStatement = isStatement;\r\n    isStatementListItem = isStatementListItem;\r\n    isDeclaration = isDeclaration;\r\n    isModuleItem = isModuleItem;\r\n}\r\nexport {\r\n    Tokenizer,\r\n    Dison as Parser\r\n};\r\nexport default Dison;\r\n","\r\nimport {\r\n    Node, Token, Context, CONTEXT, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    attachLocation,\r\n    createMatchTree,\r\n    _Option, _Or, _Series, _NonCollecting, _NonCapturing, _Mark,\r\n    TYPE_ALIAS, _Context, _Loop, NODES,\r\n    validateBinding, validateLineTerminator, ASSIGNMENT_PUNCTUATORS_PATTERN, _SuccessCollector, join_content, TOPLEVEL_ITEM_PATTERN,\r\n    extract_success,\r\n    parse_and_extract,\r\n    get_inner_group,\r\n    _Pattern,\r\n} from './head'\r\n\r\n//import { UNIT_EXPRESSION_TREE } from './expression';\r\nconst Grouping = NODES.Grouping;\r\n\r\nlet UNIT_EXPRESSION_TREE: Record<string, any>;\r\nlet PETTERN_ELEMENTS_TREE: Record<string, any>;\r\nlet PATTERN_PROPERTIES_TREE: Record<string, any>;\r\n\r\n//console.log(123123, UNIT_EXPRESSION_TREE, UNIT_EXPRESSION_TREE);\r\n\r\nasync_getter.get(\"UNIT_EXPRESSION_TREE\", function (data: MatchTree) {\r\n    UNIT_EXPRESSION_TREE = data;\r\n    PETTERN_ELEMENTS_TREE = createMatchTree(\r\n        PatternElements,\r\n        UNIT_EXPRESSION_TREE\r\n    );\r\n    PATTERN_PROPERTIES_TREE = createMatchTree(\r\n        PatternProperties,\r\n        UNIT_EXPRESSION_TREE\r\n    );\r\n});\r\n\r\n\r\nconst Patterns: Record<string, any> = async_getter.Patterns = {\r\n    ArrayPattern: {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            collected.is_binding || context.wrap(CONTEXT.bindingSet, null);\r\n            let res = parseArrayPattern(context, collected.elements);\r\n            collected.is_binding || context.unwrap();\r\n            return res;\r\n        },\r\n        precedence: 20,\r\n        filter: [\r\n            null,\r\n            function (context: Context) {\r\n                return context[CONTEXT.bindingElement]/* === context[CONTEXT.tokens]*/;\r\n            }\r\n        ],\r\n        collector: [\r\n            {\r\n                elements: _Or(\"Punctuator []\"),\r\n                _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN),//+=\r\n            },\r\n            {\r\n                _prev: _NonCapturing(\"Punctuator  ...\", MARKS.BOUNDARY, \"Success\"),\r\n                elements: _Or(\"Punctuator []\"),\r\n                is_binding: _Mark(true)\r\n            }\r\n        ]\r\n    },\r\n    ObjectPattern: {\r\n        handler: function (context: Context) {\r\n            let [collected] = context;\r\n            collected.is_binding || context.wrap(CONTEXT.bindingSet, null);\r\n            let res = parseObjectPattern(context, collected.properties);\r\n            collected.is_binding || context.unwrap();\r\n            return res;\r\n        },\r\n        precedence: 20,\r\n        filter: [\r\n            null, null,\r\n            function (context: Context, left: number, right: number) {\r\n                return context[CONTEXT.bindingElement]/* === tokens*/\r\n                    || context[CONTEXT.isExpression];\r\n            },\r\n            function (context: Context) {\r\n                return context[CONTEXT.bindingElement] /*=== context[CONTEXT.tokens]*/;\r\n            }\r\n        ],\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN),\r\n                properties: _Or(\"Punctuator {}\"),\r\n                _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN)\r\n            },\r\n            [\r\n                [\"_prev\", _NonCapturing(\"Punctuator  ,\")],\r\n                [\"is_binding\", _Mark(true)]\r\n            ],\r\n            [\"_prev\", _Mark()],\r\n            [\r\n                [\"_prev\", _NonCapturing(\"Punctuator ...\", MARKS.BOUNDARY, \"Success\")],\r\n                [\"_next\", _Mark()],\r\n            ]\r\n        ]\r\n    },\r\n    AssignmentPattern: {\r\n        filter(context: Context) {\r\n            return context[CONTEXT.bindingElement]/* === context[CONTEXT.tokens]*/;\r\n        },\r\n        precedence: 1.5,\r\n        collector: {\r\n            _: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n            left: _Or(\r\n                \"ArrayPattern\", \"ObjectPattern\",\r\n                _Or(\"Identifier\").pipe(\r\n                    function (context: Context, identifier: Node) {\r\n                        if (identifier instanceof Grouping) {\r\n                            context[CONTEXT.parser].err(identifier);\r\n                        } else {\r\n                            validateBinding(context, identifier);\r\n                        }\r\n                    }\r\n                )\r\n            ),\r\n            __: _NonCollecting(\"Punctuator =\"),\r\n            right: \"[Expression]\"\r\n        }\r\n    },\r\n    \"\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [{ token }, parser, left, right] = context;\r\n                token = get_inner_group(token);\r\n                let store = context.store(\r\n                    CONTEXT.tokens, token.content,\r\n                    CONTEXT.bindingElement, true,\r\n                    CONTEXT.bindingSet, null\r\n                );\r\n                let node = parser.parseNode(\r\n                    UNIT_EXPRESSION_TREE,\r\n                    context,\r\n                    node => parser.isExpression(node)\r\n                        || node.type === \"ArrayPattern\"\r\n                        || node.type === \"ObjectPattern\"\r\n                        || node.type === \"AssignmentPattern\",\r\n                );\r\n                context.restore(store);\r\n                if (!node) {\r\n                    parser.err(token);\r\n                }\r\n                return new Grouping(node, token);\r\n            },\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(\r\n                        _Series(\"Keyword export\", \"Keyword default\"),\r\n                        \"Punctuator ,\", \"Success\", TOPLEVEL_ITEM_PATTERN, ASSIGNMENT_PUNCTUATORS_PATTERN\r\n                    ),\r\n                    token: _Or(\"Punctuator ()\"),\r\n                    _next: _NonCapturing(ASSIGNMENT_PUNCTUATORS_PATTERN)\r\n                }\r\n            ]\r\n        },\r\n\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, , right] = context;\r\n                let argument = context.getToken(right);\r\n                argument instanceof Grouping && parser.err(argument);\r\n                return true;\r\n            },\r\n            filter(context: Context) {\r\n                return context[CONTEXT.spreadElement];\r\n            },\r\n            precedence: 1.5,\r\n            collector: {\r\n                type: _Mark(\"SpreadElement\"),\r\n                token: _NonCollecting(\"Punctuator ...\"),\r\n                argument: \"[Expression]\"\r\n            }\r\n        },\r\n        {\r\n            validator(context: Context) {\r\n                let [, parser, , right] = context;\r\n                let argument = context.getToken(right);\r\n                argument instanceof Grouping && parser.err(argument);\r\n                return true;\r\n            },\r\n            filter: function (context: Context) {\r\n                return context[CONTEXT.bindingElement];\r\n            },\r\n            precedence: 1.5,\r\n            collector: {\r\n                type: _Mark(\"RestElement\"),\r\n                token: _NonCollecting(\"Punctuator ...\"),\r\n                argument: _Or(_Or(\"Identifier\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        validateBinding(context, token)\r\n                    }\r\n                ), \"ArrayPattern\", \"ObjectPattern\")\r\n            }\r\n        }\r\n    ]\r\n};\r\nexport {\r\n    Patterns,\r\n    parseArrayPattern,\r\n    parseObjectPattern\r\n}\r\n\r\n\r\nfunction parseArrayPattern(context: Context, token: Token): Node {\r\n    let pattern = new NODES.ArrayPattern();\r\n    context.wrap(CONTEXT.bindingElement, true);\r\n    pattern.elements = parse_and_extract(PETTERN_ELEMENTS_TREE, context, token);\r\n    context.unwrap();\r\n    pattern.range = token.range;\r\n    pattern.loc = token.loc;\r\n    return pattern;\r\n}\r\nfunction parseObjectPattern(context: Context, token: Token): Node {\r\n    let pattern = new NODES.ObjectPattern();\r\n    context.wrap(CONTEXT.bindingElement, true);\r\n    pattern.properties = parse_and_extract(PATTERN_PROPERTIES_TREE, context, token);\r\n    context.unwrap();\r\n    pattern.range = token.range;\r\n    pattern.loc = token.loc;\r\n    return pattern;\r\n}\r\n\r\nlet PatternElements = {\r\n    Success: {\r\n        handler: join_content,\r\n        collector: [\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: _Or(\r\n                    _Or(\"Identifier\").pipe(\r\n                        function (context: Context, identifier: Token) {\r\n                            if (identifier instanceof Grouping) {\r\n                                context[CONTEXT.parser].err(identifier);\r\n                            } else {\r\n                                validateBinding(context, identifier);\r\n                            }\r\n                        }\r\n                    ),\r\n                    _Or(\"ArrayPattern\", \"ObjectPattern\", \"AssignmentPattern\")\r\n                ),\r\n                _next: _NonCollecting(_Or(\"Punctuator ,\", MARKS.BOUNDARY))\r\n            },\r\n            [\r\n                [\"content\", \"RestElement\"],\r\n                [\"_next\", _NonCollecting(MARKS.BOUNDARY)]\r\n            ],\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: _Mark(null),\r\n                _next: _NonCollecting(\"Punctuator ,\")\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\nconst PatternProperties = {\r\n    ..._SuccessCollector(_Pattern(\"Property\")),\r\n    Property: [\r\n        {\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(MARKS.BOUNDARY, \"Success\"),\r\n                    key: _Or(\"Punctuator []\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            context.wrap(CONTEXT.tokens, token.content);\r\n                            let res = context[CONTEXT.parser].parseExpression(context);\r\n                            context.unwrap();\r\n                            return res;\r\n                        }\r\n                    ),\r\n                    value: _Series(\r\n                        _NonCollecting(\"Punctuator :\"),\r\n                        _Or(\r\n                            _Or(\"Identifier\").pipe(function (context: Context, token: Token) {\r\n                                validateBinding(context, token);\r\n                            }),\r\n                            _Or(\"Punctuator []\").pipe(parseArrayPattern),\r\n                            _Or(\"Punctuator {}\").pipe(parseObjectPattern),\r\n                        ),\r\n                        _Option(_Series(_NonCollecting(\"Punctuator =\"), \"[Expression]\")),\r\n                        _Mark(\r\n                            function (context: Context) {\r\n                                let [collected] = context;\r\n                                let { value } = collected;\r\n                                if (value.length > 1) {\r\n                                    let _value = new NODES.AssignmentPattern();\r\n                                    _value.left = value[0];\r\n                                    _value.right = value[1];\r\n                                    attachLocation(_value, value[0], value[1]);\r\n                                    collected.value = _value;\r\n                                } else {\r\n                                    collected.value = value[0];\r\n                                }\r\n                                return undefined;\r\n                            }\r\n                        )\r\n                    ),\r\n                    _next: _NonCollecting(MARKS.BOUNDARY, \"Punctuator ,\"),\r\n                    computed: _Mark(true),\r\n                    kind: _Mark(\"init\"),\r\n                    method: _Mark(false),\r\n                    shorthand: _Mark(false),\r\n                },\r\n                [\r\n                    [\r\n                        \"key\",\r\n                        _Or(\"Identifier\").pipe(\r\n                            function (context: Context, identifier: Node) {\r\n                                if (identifier instanceof Grouping) {\r\n                                    context[CONTEXT.parser].err(identifier);\r\n                                }\r\n                            }\r\n                        )\r\n                    ],\r\n                    [\"computed\", _Mark(false)]\r\n                ],\r\n                [\r\n                    [\r\n                        \"value\", _Or(\r\n                            _Series(_NonCollecting(\"Punctuator =\"), \"[Expression]\").pipe(\r\n                                function (context: Context, token: Token) {\r\n                                    let [collected] = context;\r\n                                    let left = collected.key;\r\n                                    let res = new NODES.AssignmentPattern();\r\n                                    res.left = left;\r\n                                    res.right = token;\r\n                                    attachLocation(res, left, token);\r\n                                    return res;\r\n                                }\r\n                            ),\r\n                            _Mark(\r\n                                function (context: Context) {\r\n                                    return context[CONTEXT.collected].key;\r\n                                }\r\n                            )\r\n                        )\r\n                    ],\r\n                    [\r\n                        \"shorthand\",\r\n                        _Mark(\r\n                            function (context: Context) {\r\n                                validateBinding(context, context[CONTEXT.collected].key);\r\n                                return true;\r\n                            }\r\n                        )\r\n                    ]\r\n                ]\r\n            ]\r\n        },\r\n        {\r\n            validator() {//匹配占位\r\n                return false;\r\n            },\r\n            precedence: new Number(3),\r\n            collector: {\r\n                __: _Series(\r\n                    _Or(MARKS.BOUNDARY, \"Success\"),\r\n                    _Or(\r\n                        \"Punctuator []\",\r\n                        \"Identifier\",\r\n                    ),\r\n                    \"Punctuator :\",\r\n                    _Or(\r\n                        \"Identifier\",\r\n                        \"Punctuator [] {}\",\r\n                    ),\r\n                    \"Punctuator =\"\r\n                )\r\n            }\r\n        }\r\n    ]\r\n}\r\n","\r\nimport {\r\n    Context, CONTEXT, Node, Token, MARKS, MatchTree\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    is_right_parentheses,\r\n    is_right_brackets,\r\n    is_right_braces,\r\n    createMatchTree,\r\n    NODES,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, _Loop, TYPE_ALIAS,\r\n    validateBinding, validateLineTerminator, _NonCapturing,\r\n    validateIdentifier, validateAssignment,\r\n    STATEMANT_LIST_ITEM_PATTERN,\r\n    TOPLEVEL_ITEM_PATTERN,\r\n    RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN,\r\n    EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n    isAligned,\r\n    attachLocation,\r\n    get_inner_group,\r\n    parse_next_statement,\r\n} from './head'\r\nimport {\r\n    parseArrayPattern,\r\n    parseObjectPattern,\r\n    parse_params\r\n} from './expression';\r\nimport Declaration from './declaration';\r\n\r\nconst Grouping = NODES.Grouping;\r\nlet { VariableDeclaration } = Declaration;\r\n\r\nlet STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN = _Or(STATEMANT_LIST_ITEM_PATTERN).pipe(\r\n    function (context: Context, node: Node) {\r\n        if (node.type === \"VariableDeclaration\" && node.kind !== \"var\") {\r\n            context[CONTEXT.parser].err(node);\r\n        }\r\n    }\r\n)\r\n\r\nlet BLOCK_STATEMENT_PATTERN = _Or(\r\n    \"Block\",\r\n    _Or(\"Punctuator {\").walk(\r\n        function (context: Context, left: number) {\r\n            let parser = context[CONTEXT.parser];\r\n            parser.parseRangeAsBlock(context, left);\r\n            //parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).type = \"Block\";\r\n        }\r\n    )\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        let res = new NODES.BlockStatement();\r\n        res.body = token.content;\r\n        attachLocation(res, token);\r\n        return res;\r\n    }\r\n)\r\n\r\nlet GROUPING_EXPRESSION = _Or(\r\n    \"Punctuator ()\",\r\n    _Punctuator(\"(\").walk(\r\n        function (context: Context, index: number) {\r\n            let [, parser] = context;\r\n            let store = context.store(\r\n                CONTEXT.bindingSet, null,\r\n                CONTEXT.bindingElement, false\r\n            );\r\n            parser.parseRange(parser.EXPRESSION_TREE, context, index, is_right_parentheses, parser.isExpression);\r\n            context.restore(store);\r\n        }\r\n    )\r\n).pipe(\r\n    function (context: Context, token: Token) {\r\n        if (token.content) {\r\n            return token.content;\r\n        } else {\r\n            context[CONTEXT.parser].err(token);\r\n            return null;\r\n        }\r\n    }\r\n)\r\n\r\nconst Statements: Record<string, any> = async_getter.Statements = {\r\n    \"\": {\r\n        handler([collected, parser]: Context) {\r\n            parser.err(collected.error);\r\n            return [];\r\n        },\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                error: _Or(\"Punctuator\", \"Keyword\"),\r\n                _next: _NonCapturing(RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN),/*, \"Punctuator }\"*/\r\n            }\r\n        ]\r\n    },\r\n    \"BreakStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            let label = collected.label;\r\n            if (label) {\r\n                if (\r\n                    label instanceof Grouping\r\n                    || context[CONTEXT.labelSet].indexOf(label.name) < 0\r\n                ) {\r\n                    parser.err(label);\r\n                }\r\n            } else if (!context[CONTEXT.inIteration] && !context[CONTEXT.inSwitch]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        filter: [\r\n            function (context: Context, left: number) {\r\n                return isAligned(context, left, left + 1);\r\n            },\r\n            null,\r\n        ],\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword break\"),\r\n                label: IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"label\", _Mark(null)]\r\n        ]\r\n    },\r\n    \"ContinueStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            let label = collected.label;\r\n            validateLineTerminator(context);\r\n            if (label) {\r\n                if (\r\n                    label instanceof Grouping\r\n                    || context[CONTEXT.labelSet].indexOf(label.name) < 0\r\n                ) {\r\n                    parser.err(label);\r\n                }\r\n            } else if (!context[CONTEXT.inIteration]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        filter: \"BreakStatement\",\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword continue\"),\r\n                label: IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"label\", _Mark(null)],\r\n        ]\r\n    },\r\n    \"ReturnStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.inFunctionBody]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if (left === right) {\r\n                let next_token = context.getToken(left + 1);\r\n                if (next_token && context.getToken(left).loc.end.line === next_token.loc.start.line) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        filter: \"BreakStatement\",\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword return\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            },\r\n            [\"argument\", _Mark(null)]\r\n        ]\r\n    },\r\n    \"BlockStatement\": {\r\n        overload: true,//和 ObjectPattern 收集器有重叠，在存在 BlockStatement 的环境， ObjectPattern 的 filter 不会返回 true，这里强制覆盖\r\n        //precedence: 0,\r\n        collector: [\r\n            {\r\n                _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                body: _Punctuator(\"{\").pipe(\r\n                    function (context: Context, token: Token, left: number) {\r\n                        let parser = context[CONTEXT.parser];\r\n                        return parser.parseRangeAsBlock(context, left).content;\r\n                        //return parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).content;\r\n                    }\r\n                )\r\n            }\r\n        ]\r\n    },\r\n    \"DoWhileStatement\": {\r\n        validator: \"ForStatement\",\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            //collected.test = parser.parseExpression(context, collected.test);\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                keyword: _NonCollecting(\"Keyword do\"),\r\n            },\r\n            [\r\n                [\"body\", STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN],\r\n                [\"test\", _Series(\r\n                    _NonCollecting(\"Keyword while\"),\r\n                    GROUPING_EXPRESSION\r\n                )],\r\n                [\"_next\", _Option(\"Punctuator ;\")]\r\n            ]\r\n        ]\r\n    },\r\n    \"DebuggerStatement\": {\r\n        handler: validateLineTerminator,\r\n        collector: {\r\n            _: _NonCollecting(_Keyword(\"debugger\")),\r\n            _next: _Option(\"Punctuator ;\")\r\n        }\r\n    },\r\n    \"EmptyStatement\": [\r\n        {\r\n            collector: [\r\n                {\r\n                    _prev: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\r\n                    _: _NonCollecting(\"Punctuator ;\")\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"ExpressionStatement\": [\r\n        {\r\n            handler(context: Context) {\r\n                let [collected, parser, left] = context;\r\n                validateLineTerminator(context);\r\n                let begin = context[CONTEXT.begin];\r\n                if (\r\n                    (\r\n                        !context[CONTEXT.tokens] ||\r\n                        context[CONTEXT.inFunctionBody] === begin\r\n                    )\r\n                    && (\r\n                        begin >= left ||\r\n                        context.getToken(left - 1).directive\r\n                    )\r\n                ) {\r\n                    let expression = collected.expression;\r\n                    if (\r\n                        expression\r\n                        && expression.type === \"Literal\"\r\n                        && typeof expression.value === \"string\"\r\n                        && expression.raw.length > 2\r\n                    ) {\r\n                        collected = new NODES.Directive(\r\n                            collected.type,\r\n                            expression,\r\n                            expression.raw.slice(1, -1),\r\n                            collected.range,\r\n                            collected.loc\r\n                        );\r\n                        if (collected.directive === \"use strict\") {\r\n                            context[CONTEXT.strict] = true;\r\n                        }\r\n                    }\r\n                }\r\n                return collected;\r\n            },\r\n            precedence: 0,\r\n            collector: [\r\n                {\r\n                    expression: EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _next: _Option(\"Punctuator ;\")\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"ForStatement\": {\r\n        validator: [\r\n            function (context: Context) {\r\n                context.wrap(CONTEXT.inIteration, true);\r\n                let res = parse_next_statement(context);\r\n                context.unwrap();\r\n                return res;\r\n            },\r\n            null\r\n        ],\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            let { iterator, body, range, loc } = collected;\r\n            collected = iterator.content;\r\n            if (collected) {\r\n                collected.body = body;\r\n                collected.range = range;\r\n                collected.loc = loc;\r\n                return collected;\r\n            } else {\r\n                parser.err(iterator);\r\n                return [];\r\n            }\r\n        },\r\n        collector: [\r\n            {\r\n                keyword: _NonCollecting(\"Keyword for\"),\r\n                iterator: _Or(\r\n                    \"Punctuator ()\",\r\n                    _Punctuator(\"(\").walk(\r\n                        function (context: Context, left: number) {\r\n                            let parser = context[CONTEXT.parser];\r\n                            context.wrap(CONTEXT.isExpression, true);\r\n                            parser.parseRange(FOR_ITERATOR_TREE, context, left, is_right_parentheses, parser.isStatement)\r\n                            context.unwrap();\r\n                        }\r\n                    )\r\n                )\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN]\r\n        ]\r\n    },\r\n    \"ForInStatement\": {//ForStatement\r\n    },\r\n    \"ForOfStatement\": {//ForStatement\r\n    },\r\n    \"IfStatement\": {\r\n        validator(context: Context) {\r\n            let [, , left, right] = context;\r\n            if ((right - left) % 2 === 1) {\r\n                return parse_next_statement(context);\r\n            }\r\n            return true;\r\n        },\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword if\"),\r\n                test: GROUPING_EXPRESSION,\r\n                consequent: _Mark(null),\r\n                alternate: _Mark(null)\r\n            },\r\n            [\"consequent\", STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN],\r\n            [\r\n                \"alternate\", _Series(\r\n                    _NonCollecting(\"Keyword else\"),\r\n                    _Option(STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN)\r\n                )\r\n            ]\r\n        ]\r\n    },\r\n    \"LabeledStatement\": {\r\n        validator: [\r\n            function (context: Context) {\r\n                let [, parser, left] = context;\r\n                let label = context.getToken(left);\r\n                let label_name = label.name;\r\n                let label_set = context[CONTEXT.labelSet];\r\n                if (label_set.indexOf(label_name) >= 0) {\r\n                    parser.err(label);\r\n                }\r\n                label_set.unshift(label_name);\r\n                let res = parse_next_statement(context);\r\n                label_set.shift();\r\n                return res;\r\n            },\r\n            null\r\n        ],\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                label: _Series(\r\n                    IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                    _NonCollecting(\"Punctuator :\")\r\n                )\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_PATTERN]\r\n        ]\r\n    },\r\n    \"SwitchStatement\": [\r\n        {\r\n            collector: [\r\n                {\r\n                    token: _NonCollecting(\"Keyword switch\"),\r\n                    discriminant: GROUPING_EXPRESSION,\r\n                    cases: _Punctuator(\"{\").pipe(\r\n                        function (context: Context, token: Token, left: number) {\r\n                            let parser = context[CONTEXT.parser]\r\n                            context.wrap(CONTEXT.inSwitch, true);\r\n                            let cases = parser.parseRange(parser.SYNTAX_TREE, context, left, is_right_braces).content\r\n                            context.unwrap();\r\n\r\n                            let has_default = false;\r\n                            for (const item of cases) {\r\n                                if (item.type === \"SwitchCase\") {\r\n                                    if (item.test) {\r\n                                        continue;\r\n                                    }\r\n                                    if (!has_default) {\r\n                                        has_default = true;\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                                parser.err(item);\r\n                            }\r\n                            return cases;\r\n                        }\r\n                    )\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            handler([collected]: Context) {\r\n                collected.consequent = [];\r\n                return collected;\r\n            },\r\n            precedence: 0,\r\n            filter(content: Context) {\r\n                return content[CONTEXT.inSwitch] /*=== content[CONTEXT.tokens]*/;\r\n            },\r\n            collector: [\r\n                {\r\n                    type: _Mark(\"SwitchCase\"),\r\n                    test: _Or(\r\n                        _Series(\r\n                            _NonCollecting(\"Keyword case\"),\r\n                            EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\r\n                        ),\r\n                        _Series(\r\n                            _NonCollecting(\"Keyword default\"),\r\n                            _Mark(null)\r\n                        )\r\n                    ),\r\n                    __: _NonCollecting(\"Punctuator :\")\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            handler([collected]: Context) {\r\n                collected.token.consequent.push(collected.consequent)\r\n                return collected.token;\r\n            },\r\n            collector: {\r\n                token: \"SwitchCase\",\r\n                consequent: STATEMANT_LIST_ITEM_PATTERN\r\n            }\r\n        }\r\n    ],\r\n    \"ThrowStatement\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (collected.loc.start.line !== collected.argument.loc.start.line) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword throw\"),\r\n                argument: EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"TryStatement\": {\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword try\"),\r\n                block: BLOCK_STATEMENT_PATTERN/*\"Punctuator {}\"*/,\r\n                handler: _Series(\r\n                    _NonCollecting(\"Keyword catch\"), \"Punctuator ()\", BLOCK_STATEMENT_PATTERN,\r\n                    _Mark(\r\n                        function (context: Context) {\r\n                            let [collected, parser] = context;\r\n                            let [param, body] = collected.handler;\r\n                            let params = parse_params(context, param.content);\r\n                            if (params.length !== 1) {\r\n                                parser.err(param);\r\n                            }\r\n                            collected.handler = {\r\n                                type: \"CatchClause\",\r\n                                param: params[0],\r\n                                body\r\n                            };\r\n                        }\r\n                    )\r\n                ),\r\n                finalizer: _Mark(null)\r\n            },\r\n            [\"finalizer\", _Series(_NonCollecting(\"Keyword finally\"), BLOCK_STATEMENT_PATTERN)],\r\n            [\"handler\", _Mark(null)],\r\n        ]\r\n    },\r\n    \"WhileStatement\": {\r\n        validator: \"ForStatement\",\r\n        /*handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            //collected.test = parser.parseExpression(context, collected.test);\r\n            return collected;\r\n        },*/\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword while\"),\r\n                test: GROUPING_EXPRESSION\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN]\r\n        ]\r\n    },\r\n    \"WithStatement\": {\r\n        validator: [\r\n            parse_next_statement,\r\n            null\r\n        ],\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            if (context[CONTEXT.strict]) {\r\n                parser.err(collected);\r\n            }\r\n            //collected.object = parser.parseExpression(context, collected.object);\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                token: \"Keyword with\",\r\n                object: \"Punctuator ()\"\r\n            },\r\n            [\"body\", STATEMANT_LIST_ITEM_AND_VALIDATE_DECLARATION_PATTERN]\r\n        ]\r\n    }\r\n};\r\n\r\nasync_getter.get(\"Statements\", function (statements: Record<string, any>) {\r\n    for (const type_name in statements) {\r\n        if (type_name) {\r\n            type_name && (TYPE_ALIAS[type_name] = [type_name, \"[Statement]\"]);\r\n        }\r\n    }\r\n});\r\nexport default Statements;\r\n\r\nlet ForIterator = {\r\n    VariableDeclaration,\r\n    ForStatement: [\r\n        {\r\n            collector: [\r\n                {\r\n                    init: _Or(\r\n                        \"VariableDeclaration\",\r\n                        _Series(\r\n                            _NonCollecting(MARKS.BOUNDARY),\r\n                            _Or(EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),//EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS\r\n                            _NonCollecting(\"Punctuator ;\")\r\n                        )\r\n                    ),\r\n                    test: _Series(\r\n                        _Or(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                        _NonCollecting(\"Punctuator ;\")\r\n                    ),\r\n                    update: _Series(\r\n                        _Or(EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, _Mark(null)),\r\n                        _NonCapturing(\"Punctuator )\")\r\n                    ),\r\n                    body: _Mark(null)\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            handler(context: Context) {\r\n                let [collected, parser] = context;\r\n                let { left } = collected;\r\n                let kind: Node, declarator: Node;\r\n                if (left instanceof Array) {\r\n                    [kind, declarator] = left;\r\n                } else {\r\n                    declarator = left;\r\n                }\r\n                if (declarator.value === \"()\" && declarator.type === \"Punctuator\") {\r\n                    let wrapper = declarator;\r\n                    declarator = get_inner_group(declarator);\r\n                    if (declarator.content.length > 0) {\r\n                        if (kind) {\r\n                            parser.err(declarator);\r\n                        } else if (declarator.content.length > 1) {\r\n                            parser.err(...declarator.content.slice(1));\r\n                        }\r\n                        declarator = new Grouping(declarator.content[0], wrapper);\r\n                    }\r\n                }\r\n                if (declarator.type === \"Punctuator\") {\r\n                    switch (declarator.value) {\r\n                        case \"{}\":\r\n                            declarator = parseObjectPattern(context, declarator);\r\n                            break;\r\n                        case \"[]\":\r\n                            declarator = parseArrayPattern(context, declarator);\r\n                            break;\r\n                        default:\r\n                            parser.err(declarator);\r\n                            declarator = null;\r\n                    }\r\n                } else if (declarator.type !== \"Identifier\") {\r\n                    parser.err(declarator);\r\n                    declarator = null;\r\n                } else {\r\n                    validateAssignment(context, declarator);\r\n                }\r\n                if (kind) {\r\n                    left = new NODES.VariableDeclaration();\r\n                    left.declarations = [\r\n                        {\r\n                            type: \"VariableDeclarator\",\r\n                            id: declarator,\r\n                            init: null\r\n                        }\r\n                    ];\r\n                    left.kind = kind.value;\r\n                    left.range = [kind.range[0], declarator.range[1]];\r\n                    left.loc = {\r\n                        start: kind.loc.start,\r\n                        end: declarator.loc.end\r\n                    };\r\n                    collected.left = left;\r\n                } else {\r\n                    collected.left = declarator;\r\n                }\r\n                return collected;\r\n            },\r\n            validator(context: Context) {\r\n                return context[CONTEXT.right] >= context.tokens.length - 1;\r\n            },\r\n            filter: [function () { return false }, null],\r\n            precedence: 1.5,\r\n            collector: [\r\n                {\r\n                    _: _Series(//和 VariableDeclaration 不冲突的占位 \r\n                        MARKS.BOUNDARY,\r\n                        _Or(\r\n                            _Series(\r\n                                _Or(\"Keyword var const let\"),\r\n                                _Or(\"Identifier\", \"Punctuator {} [] ()\")\r\n                            ),\r\n                            _Series(\r\n                                \"Identifier let\",\r\n                                _Or(\"Identifier\", \"Punctuator {} ()\")\r\n                            )\r\n                        )\r\n\r\n                    )\r\n                },\r\n                {\r\n                    type: _Mark(\"ForOfStatement\"),\r\n                    _prev: _NonCollecting(MARKS.BOUNDARY),\r\n                    left: _Series(\r\n                        _Option(_Or(\"Identifier let\", \"Keyword var const let\")),\r\n                        _Or(\"Identifier\", \"Punctuator {} [] ()\")\r\n                    ),\r\n                    token: _NonCollecting(\"Identifier of\"),\r\n                    right: _Option(\r\n                        _Series(\r\n                            EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\r\n                            _Option(_NonCapturing(\"Punctuator )\"))\r\n                        )\r\n                    ),\r\n                    body: _Mark(null),\r\n                },\r\n                [\r\n                    [\"type\", _Mark(\"ForInStatement\")],\r\n                    [\"token\", _NonCollecting(\"Keyword in\")],\r\n                    [\"each\", _Mark(false)]\r\n                ]\r\n            ]\r\n\r\n        }\r\n    ]\r\n};\r\nlet FOR_ITERATOR_TREE: MatchTree;\r\nasync_getter.get(\"EXPRESSION_TREE\", function (EXPRESSION_TREE: MatchTree) {\r\n    FOR_ITERATOR_TREE = createMatchTree(ForIterator, EXPRESSION_TREE);\r\n});\r\n","import {\r\n    Context, CONTEXT, Token, Node\r\n    , MARKS\r\n} from '../interfaces';\r\nimport {\r\n    async_getter,\r\n    _Punctuator,\r\n    _Keyword,\r\n    _Identifier,\r\n    _Pattern,\r\n    _Option, _Or, _Series, _NonCollecting, _Mark, TYPE_ALIAS,\r\n    validateLineTerminator, NODES, _NonCapturing, _SuccessCollector, createMatchTree,\r\n\r\n    extract_success,\r\n    parse_and_extract,\r\n} from './head'\r\nlet Grouping = NODES.Grouping;\r\n\r\nconst STRING_LITERAL_PATTERN = _Or(\"Literal\").pipe(\r\n    function (context: Context, token: Token) {\r\n        if (token instanceof Grouping || typeof token.value !== \"string\") {\r\n            context[CONTEXT.parser].err(token);\r\n        }\r\n    }\r\n)\r\n\r\nlet ImportSpecifiers = {\r\n    ..._SuccessCollector(_Pattern(\"ImportSpecifier\")),\r\n    /*\"Success\": {\r\n        handler: join_content,\r\n        precedence: 0,\r\n        collector: [\r\n            {\r\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\r\n                content: \"ImportSpecifier\",\r\n            }\r\n        ]\r\n    },*/\r\n    ImportSpecifier: {\r\n        collector: {\r\n            _prev: _NonCapturing(\"Success\", MARKS.BOUNDARY),\r\n            imported: \"Identifier\",\r\n            local: _Or(\r\n                _Series(\r\n                    _NonCollecting(\"Identifier as\"),\r\n                    \"Identifier\",\r\n                    _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY)\r\n                ),\r\n                _Or(\"Punctuator ,\", MARKS.BOUNDARY).pipe(\r\n                    function (context: Context) {\r\n                        let [collected] = context;\r\n                        return collected.imported;\r\n                    }\r\n                )\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst IMPORT_SPECIFIERS_TREE = createMatchTree(ImportSpecifiers);\r\nconst EXPORT_SPECIFIERS_TREE = createMatchTree({\r\n    ..._SuccessCollector(_Pattern(\"ExportSpecifier\")),\r\n    ExportSpecifier: {\r\n        collector: {\r\n            _prev: _NonCapturing(\"Success\", MARKS.BOUNDARY),\r\n            local: \"Identifier\",\r\n            exported: _Or(\r\n                _Series(\r\n                    _NonCollecting(\"Identifier as\"),\r\n                    \"Identifier\",\r\n                    _NonCollecting(\"Punctuator ,\", MARKS.BOUNDARY)\r\n                ),\r\n                _Or(\"Punctuator ,\", MARKS.BOUNDARY).pipe(\r\n                    function (context: Context) {\r\n                        let [collected] = context;\r\n                        return collected.local;\r\n                    }\r\n                )\r\n            )\r\n        }\r\n    }\r\n});\r\n\r\nconst ModuleDeclarations: Record<string, any> = {\r\n    \"ImportDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                token: _NonCollecting(\"Keyword import\"),\r\n                specifiers: _Or(\r\n                    _Punctuator(\"{}\").pipe(\r\n                        function (context: Context, token: Token) {\r\n                            return parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\r\n                        }\r\n                    ),\r\n                    _Series(\r\n                        _NonCollecting(\"Punctuator *\"),\r\n                        _NonCollecting(\"Identifier as\"),\r\n                        _Identifier().pipe(\r\n                            function (context: Context, token: Token) {\r\n                                return [\r\n                                    {\r\n                                        type: \"ImportNamespaceSpecifier\",\r\n                                        local: token\r\n                                    }\r\n                                ]\r\n                            }\r\n                        )\r\n                    ),\r\n                    _Series(\r\n                        _Identifier().pipe(\r\n                            function (context: Context, Identifier: Token) {\r\n                                return {\r\n                                    type: \"ImportDefaultSpecifier\",\r\n                                    local: Identifier\r\n                                }\r\n                            }\r\n                        ),\r\n                        _Option(\r\n                            _Series(\r\n                                _NonCollecting(\"Punctuator ,\"),\r\n                                _Or(\r\n                                    _Series(\r\n                                        _Punctuator(\"{}\").pipe(\r\n                                            function (context: Context, token: Token) {\r\n                                                return parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\r\n                                            }\r\n                                        ),\r\n                                        _Mark(\r\n                                            function (context: Context) {\r\n                                                let [collected] = context;\r\n                                                let specifiers = collected.specifiers;\r\n                                                specifiers.splice(1, 1, ...specifiers[1]);\r\n                                            }\r\n                                        )\r\n                                    ),\r\n                                    _Series(\r\n                                        _NonCollecting(\"Punctuator *\"),\r\n                                        _NonCollecting(\"Identifier as\"),\r\n                                        _Identifier().pipe(\r\n                                            function (context: Context, token: Token) {\r\n                                                return {\r\n                                                    type: \"ImportNamespaceSpecifier\",\r\n                                                    local: token\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    )\r\n                                )\r\n                            )\r\n                        ),\r\n                        _Mark(function () { })//使结果收集为数组\r\n                    )\r\n                ),\r\n                _: _NonCollecting(\"Identifier from\"),\r\n                source: STRING_LITERAL_PATTERN,\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"ExportAllDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: {\r\n            _: _NonCollecting(_Series(\"Keyword export\", \"Punctuator *\", \"Identifier from\")),\r\n            source: STRING_LITERAL_PATTERN,\r\n            _next: _Option(\"Punctuator ;\"),\r\n        },\r\n    },\r\n    \"ExportNamedDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected, parser] = context;\r\n            collected.declaration || validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                parser.err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        collector: [\r\n            {\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                declaration: \"VariableDeclaration\",\r\n                specifiers: _Mark(() => []),\r\n                source: _Mark(null)\r\n            },\r\n            {\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                declaration: _Mark(null),\r\n                specifiers: _Punctuator(\"{}\").pipe(\r\n                    function (context: Context, token: Token) {\r\n                        return parse_and_extract(EXPORT_SPECIFIERS_TREE, context, token);\r\n                    }\r\n                ),\r\n                source: _Mark(null),\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    },\r\n    \"ExportDefaultDeclaration\": {\r\n        handler(context: Context) {\r\n            let [collected] = context;\r\n            validateLineTerminator(context);\r\n            if (!context[CONTEXT.isModule]) {\r\n                context[CONTEXT.parser].err(collected);\r\n            }\r\n            return collected;\r\n        },\r\n        precedence: 1.5,\r\n        collector: [\r\n            {\r\n                type: _Mark(\"ExportDefaultDeclaration\"),\r\n                _: _NonCollecting(\"Keyword export\"),\r\n                __: _NonCollecting(\"Keyword default\"),\r\n                declaration: \"[Expression]\",\r\n                _next: _Option(\"Punctuator ;\")\r\n            }\r\n        ]\r\n    }\r\n}\r\nexport default ModuleDeclarations;","\r\nimport Dison, { Tokenizer } from './index';\r\n\r\nlet esprima = require(\"./test/esprima.js\")\r\n\r\nconst parser = new Dison();\r\n\r\nimport data1 from './test/test_data1.js'\r\nimport data2 from './test/test_data2.js'\r\nimport data3 from './test/test_data3.js'\r\nimport data4 from './test/test_data4.js'\r\nimport data5 from './test/test_data5.js'\r\nimport data6 from './test/test_data6.js'\r\nimport data7 from './test/test_data7.js'\r\n\r\nlet data0 = (window as any).test.innerHTML;\r\n\r\nlet test_data = data0\r\nlet a, b;\r\n\r\nconsole.time(\"dison\");\r\nconsole.log(a = parser.parseModule(test_data));\r\nconsole.timeEnd(\"dison\");\r\nconsole.time(\"esprima\");\r\nconsole.log(b = esprima.parseModule(test_data, {\r\n    range: true,\r\n    loc: true\r\n}));\r\nconsole.timeEnd(\"esprima\");\r\n\r\nconsole.log(123, weakEqual(a, b));\r\n(window as any).parser = parser;\r\n(window as any).esprima = esprima;\r\n\r\nlet tokenizer = new Tokenizer();\r\n(window as any).tokenizer = tokenizer;\r\n\r\n\r\nconsole.log(parser.parseModule(data0).body);\r\n\r\nlet tast_list: Array<[string, any]> = [\r\n    [\r\n        `\r\n        let test1\\\\u0061asd = \"\\\\u{0000000be} \\\\u0044 \\\\\\\\ \\\\x44s \\\\0112  \\\\ns\"+/s[s/]/\r\n        `,\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"VariableDeclaration\", \"kind\": \"let\", \"declarations\": [{ \"type\": \"VariableDeclarator\", \"id\": { \"type\": \"Identifier\", \"name\": \"test1aasd\", \"range\": [13, 27], \"loc\": { \"start\": { \"line\": 1, \"column\": 12 }, \"end\": { \"line\": 1, \"column\": 26 } } }, \"init\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Literal\", \"value\": \"¾ D \\\\ Ds \\t2  \\ns\", \"raw\": \"\\\"\\\\u{0000000be} \\\\u0044 \\\\\\\\ \\\\x44s \\\\0112  \\\\ns\\\"\", \"range\": [30, 72], \"loc\": { \"start\": { \"line\": 1, \"column\": 29 }, \"end\": { \"line\": 1, \"column\": 71 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Literal\", \"value\": {}, \"raw\": \"/s[s/]/\", \"regex\": { \"pattern\": \"s[s/]\", \"flags\": \"\" }, \"range\": [73, 80], \"loc\": { \"start\": { \"line\": 1, \"column\": 72 }, \"end\": { \"line\": 1, \"column\": 79 } } }, \"range\": [30, 80], \"loc\": { \"start\": { \"line\": 1, \"column\": 29 }, \"end\": { \"line\": 1, \"column\": 79 } } }, \"range\": [13, 80], \"loc\": { \"start\": { \"line\": 1, \"column\": 12 }, \"end\": { \"line\": 1, \"column\": 79 } } }], \"range\": [9, 80], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 79 } } }], \"range\": [0, 89], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 8 } } }\r\n    ],\r\n    [\r\n        `\r\n        ++a\r\n        ++\r\n        b+c++\r\n        (e)\r\n        c++\r\n        [D]\r\n        ++\r\n        b+(c++)[D]\r\n        //b+c++[D]\r\n        `,\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"UpdateExpression\", \"operator\": \"++\", \"argument\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [11, 12], \"loc\": { \"start\": { \"line\": 1, \"column\": 10 }, \"end\": { \"line\": 1, \"column\": 11 } } }, \"prefix\": true, \"range\": [9, 12], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 11 } } }, \"range\": [9, 12], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 11 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"UpdateExpression\", \"operator\": \"++\", \"argument\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [32, 33], \"loc\": { \"start\": { \"line\": 3, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 9 } } }, \"prefix\": true, \"range\": [21, 33], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 9 } } }, \"operator\": \"+\", \"right\": { \"type\": \"UpdateExpression\", \"argument\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [34, 35], \"loc\": { \"start\": { \"line\": 3, \"column\": 10 }, \"end\": { \"line\": 3, \"column\": 11 } } }, \"operator\": \"++\", \"prefix\": false, \"range\": [34, 37], \"loc\": { \"start\": { \"line\": 3, \"column\": 10 }, \"end\": { \"line\": 3, \"column\": 13 } } }, \"range\": [21, 37], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 13 } } }, \"range\": [21, 37], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 13 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"Identifier\", \"name\": \"e\", \"range\": [46, 49], \"loc\": { \"start\": { \"line\": 4, \"column\": 8 }, \"end\": { \"line\": 4, \"column\": 11 } } }, \"range\": [46, 49], \"loc\": { \"start\": { \"line\": 4, \"column\": 8 }, \"end\": { \"line\": 4, \"column\": 11 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"UpdateExpression\", \"argument\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [58, 59], \"loc\": { \"start\": { \"line\": 5, \"column\": 8 }, \"end\": { \"line\": 5, \"column\": 9 } } }, \"operator\": \"++\", \"prefix\": false, \"range\": [58, 61], \"loc\": { \"start\": { \"line\": 5, \"column\": 8 }, \"end\": { \"line\": 5, \"column\": 11 } } }, \"range\": [58, 61], \"loc\": { \"start\": { \"line\": 5, \"column\": 8 }, \"end\": { \"line\": 5, \"column\": 11 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"ArrayExpression\", \"elements\": [{ \"type\": \"Identifier\", \"name\": \"D\", \"range\": [71, 72], \"loc\": { \"start\": { \"line\": 6, \"column\": 9 }, \"end\": { \"line\": 6, \"column\": 10 } } }], \"range\": [70, 73], \"loc\": { \"start\": { \"line\": 6, \"column\": 8 }, \"end\": { \"line\": 6, \"column\": 11 } } }, \"range\": [70, 73], \"loc\": { \"start\": { \"line\": 6, \"column\": 8 }, \"end\": { \"line\": 6, \"column\": 11 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"UpdateExpression\", \"operator\": \"++\", \"argument\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [93, 94], \"loc\": { \"start\": { \"line\": 8, \"column\": 8 }, \"end\": { \"line\": 8, \"column\": 9 } } }, \"prefix\": true, \"range\": [82, 94], \"loc\": { \"start\": { \"line\": 7, \"column\": 8 }, \"end\": { \"line\": 8, \"column\": 9 } } }, \"operator\": \"+\", \"right\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"UpdateExpression\", \"argument\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [96, 97], \"loc\": { \"start\": { \"line\": 8, \"column\": 11 }, \"end\": { \"line\": 8, \"column\": 12 } } }, \"operator\": \"++\", \"prefix\": false, \"range\": [95, 100], \"loc\": { \"start\": { \"line\": 8, \"column\": 10 }, \"end\": { \"line\": 8, \"column\": 15 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"D\", \"range\": [101, 102], \"loc\": { \"start\": { \"line\": 8, \"column\": 16 }, \"end\": { \"line\": 8, \"column\": 17 } } }, \"computed\": true, \"range\": [95, 103], \"loc\": { \"start\": { \"line\": 8, \"column\": 10 }, \"end\": { \"line\": 8, \"column\": 18 } } }, \"range\": [82, 103], \"loc\": { \"start\": { \"line\": 7, \"column\": 8 }, \"end\": { \"line\": 8, \"column\": 18 } } }, \"range\": [82, 103], \"loc\": { \"start\": { \"line\": 7, \"column\": 8 }, \"end\": { \"line\": 8, \"column\": 18 } } }], \"range\": [0, 131], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 10, \"column\": 8 } } }\r\n    ],\r\n    [\r\n        `6*a%[a][b]()*c,a,b?new [].c[10][20]()[10]:d`,\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"SequenceExpression\", \"expressions\": [{ \"type\": \"BinaryExpression\", \"left\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Literal\", \"value\": 6, \"raw\": \"6\", \"range\": [0, 1], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 1 } } }, \"operator\": \"*\", \"right\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [2, 3], \"loc\": { \"start\": { \"line\": 0, \"column\": 2 }, \"end\": { \"line\": 0, \"column\": 3 } } }, \"range\": [0, 3], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 3 } } }, \"operator\": \"%\", \"right\": { \"type\": \"CallExpression\", \"callee\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"ArrayExpression\", \"elements\": [{ \"type\": \"Identifier\", \"name\": \"a\", \"range\": [5, 6], \"loc\": { \"start\": { \"line\": 0, \"column\": 5 }, \"end\": { \"line\": 0, \"column\": 6 } } }], \"range\": [4, 7], \"loc\": { \"start\": { \"line\": 0, \"column\": 4 }, \"end\": { \"line\": 0, \"column\": 7 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [8, 9], \"loc\": { \"start\": { \"line\": 0, \"column\": 8 }, \"end\": { \"line\": 0, \"column\": 9 } } }, \"computed\": true, \"range\": [4, 10], \"loc\": { \"start\": { \"line\": 0, \"column\": 4 }, \"end\": { \"line\": 0, \"column\": 10 } } }, \"arguments\": [], \"range\": [4, 12], \"loc\": { \"start\": { \"line\": 0, \"column\": 4 }, \"end\": { \"line\": 0, \"column\": 12 } } }, \"range\": [0, 12], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 12 } } }, \"operator\": \"*\", \"right\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [13, 14], \"loc\": { \"start\": { \"line\": 0, \"column\": 13 }, \"end\": { \"line\": 0, \"column\": 14 } } }, \"range\": [0, 14], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 14 } } }, { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [15, 16], \"loc\": { \"start\": { \"line\": 0, \"column\": 15 }, \"end\": { \"line\": 0, \"column\": 16 } } }, { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [17, 18], \"loc\": { \"start\": { \"line\": 0, \"column\": 17 }, \"end\": { \"line\": 0, \"column\": 18 } } }, \"consequent\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"NewExpression\", \"callee\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"ArrayExpression\", \"elements\": [], \"range\": [23, 25], \"loc\": { \"start\": { \"line\": 0, \"column\": 23 }, \"end\": { \"line\": 0, \"column\": 25 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [26, 27], \"loc\": { \"start\": { \"line\": 0, \"column\": 26 }, \"end\": { \"line\": 0, \"column\": 27 } } }, \"computed\": false, \"range\": [23, 27], \"loc\": { \"start\": { \"line\": 0, \"column\": 23 }, \"end\": { \"line\": 0, \"column\": 27 } } }, \"property\": { \"type\": \"Literal\", \"value\": 10, \"raw\": \"10\", \"range\": [28, 30], \"loc\": { \"start\": { \"line\": 0, \"column\": 28 }, \"end\": { \"line\": 0, \"column\": 30 } } }, \"computed\": true, \"range\": [23, 31], \"loc\": { \"start\": { \"line\": 0, \"column\": 23 }, \"end\": { \"line\": 0, \"column\": 31 } } }, \"property\": { \"type\": \"Literal\", \"value\": 20, \"raw\": \"20\", \"range\": [32, 34], \"loc\": { \"start\": { \"line\": 0, \"column\": 32 }, \"end\": { \"line\": 0, \"column\": 34 } } }, \"computed\": true, \"range\": [23, 35], \"loc\": { \"start\": { \"line\": 0, \"column\": 23 }, \"end\": { \"line\": 0, \"column\": 35 } } }, \"arguments\": [], \"range\": [19, 37], \"loc\": { \"start\": { \"line\": 0, \"column\": 19 }, \"end\": { \"line\": 0, \"column\": 37 } } }, \"property\": { \"type\": \"Literal\", \"value\": 10, \"raw\": \"10\", \"range\": [38, 40], \"loc\": { \"start\": { \"line\": 0, \"column\": 38 }, \"end\": { \"line\": 0, \"column\": 40 } } }, \"computed\": true, \"range\": [19, 41], \"loc\": { \"start\": { \"line\": 0, \"column\": 19 }, \"end\": { \"line\": 0, \"column\": 41 } } }, \"alternate\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [42, 43], \"loc\": { \"start\": { \"line\": 0, \"column\": 42 }, \"end\": { \"line\": 0, \"column\": 43 } } }, \"range\": [17, 43], \"loc\": { \"start\": { \"line\": 0, \"column\": 17 }, \"end\": { \"line\": 0, \"column\": 43 } } }], \"range\": [0, 43], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 43 } } }, \"range\": [0, 43], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 43 } } }], \"range\": [0, 43], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 43 } } }\r\n    ], [\r\n        `yield* a.b.c?a+b:/fsd/ig&&d;void function *(){yield* a.b.c?a+b:/fsd/ig&&d}`,\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"yield\", \"range\": [0, 5], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 5 } } }, \"operator\": \"*\", \"right\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [7, 8], \"loc\": { \"start\": { \"line\": 0, \"column\": 7 }, \"end\": { \"line\": 0, \"column\": 8 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [9, 10], \"loc\": { \"start\": { \"line\": 0, \"column\": 9 }, \"end\": { \"line\": 0, \"column\": 10 } } }, \"computed\": false, \"range\": [7, 10], \"loc\": { \"start\": { \"line\": 0, \"column\": 7 }, \"end\": { \"line\": 0, \"column\": 10 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [11, 12], \"loc\": { \"start\": { \"line\": 0, \"column\": 11 }, \"end\": { \"line\": 0, \"column\": 12 } } }, \"computed\": false, \"range\": [7, 12], \"loc\": { \"start\": { \"line\": 0, \"column\": 7 }, \"end\": { \"line\": 0, \"column\": 12 } } }, \"range\": [0, 12], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 12 } } }, \"consequent\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [13, 14], \"loc\": { \"start\": { \"line\": 0, \"column\": 13 }, \"end\": { \"line\": 0, \"column\": 14 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [15, 16], \"loc\": { \"start\": { \"line\": 0, \"column\": 15 }, \"end\": { \"line\": 0, \"column\": 16 } } }, \"range\": [13, 16], \"loc\": { \"start\": { \"line\": 0, \"column\": 13 }, \"end\": { \"line\": 0, \"column\": 16 } } }, \"alternate\": { \"type\": \"LogicalExpression\", \"left\": { \"type\": \"Literal\", \"value\": {}, \"raw\": \"/fsd/ig\", \"regex\": { \"pattern\": \"fsd\", \"flags\": \"ig\" }, \"range\": [17, 24], \"loc\": { \"start\": { \"line\": 0, \"column\": 17 }, \"end\": { \"line\": 0, \"column\": 24 } } }, \"operator\": \"&&\", \"right\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [26, 27], \"loc\": { \"start\": { \"line\": 0, \"column\": 26 }, \"end\": { \"line\": 0, \"column\": 27 } } }, \"range\": [17, 27], \"loc\": { \"start\": { \"line\": 0, \"column\": 17 }, \"end\": { \"line\": 0, \"column\": 27 } } }, \"range\": [0, 27], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 27 } } }, \"range\": [0, 28], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 28 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"UnaryExpression\", \"operator\": \"void\", \"argument\": { \"type\": \"FunctionExpression\", \"async\": false, \"generator\": true, \"id\": null, \"params\": [], \"body\": { \"type\": \"BlockStatement\", \"body\": [{ \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"YieldExpression\", \"argument\": { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [53, 54], \"loc\": { \"start\": { \"line\": 0, \"column\": 53 }, \"end\": { \"line\": 0, \"column\": 54 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [55, 56], \"loc\": { \"start\": { \"line\": 0, \"column\": 55 }, \"end\": { \"line\": 0, \"column\": 56 } } }, \"computed\": false, \"range\": [53, 56], \"loc\": { \"start\": { \"line\": 0, \"column\": 53 }, \"end\": { \"line\": 0, \"column\": 56 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [57, 58], \"loc\": { \"start\": { \"line\": 0, \"column\": 57 }, \"end\": { \"line\": 0, \"column\": 58 } } }, \"computed\": false, \"range\": [53, 58], \"loc\": { \"start\": { \"line\": 0, \"column\": 53 }, \"end\": { \"line\": 0, \"column\": 58 } } }, \"consequent\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [59, 60], \"loc\": { \"start\": { \"line\": 0, \"column\": 59 }, \"end\": { \"line\": 0, \"column\": 60 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [61, 62], \"loc\": { \"start\": { \"line\": 0, \"column\": 61 }, \"end\": { \"line\": 0, \"column\": 62 } } }, \"range\": [59, 62], \"loc\": { \"start\": { \"line\": 0, \"column\": 59 }, \"end\": { \"line\": 0, \"column\": 62 } } }, \"alternate\": { \"type\": \"LogicalExpression\", \"left\": { \"type\": \"Literal\", \"value\": {}, \"raw\": \"/fsd/ig\", \"regex\": { \"pattern\": \"fsd\", \"flags\": \"ig\" }, \"range\": [63, 70], \"loc\": { \"start\": { \"line\": 0, \"column\": 63 }, \"end\": { \"line\": 0, \"column\": 70 } } }, \"operator\": \"&&\", \"right\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [72, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 72 }, \"end\": { \"line\": 0, \"column\": 73 } } }, \"range\": [63, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 63 }, \"end\": { \"line\": 0, \"column\": 73 } } }, \"range\": [53, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 53 }, \"end\": { \"line\": 0, \"column\": 73 } } }, \"delegate\": true, \"range\": [46, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 46 }, \"end\": { \"line\": 0, \"column\": 73 } } }, \"range\": [46, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 46 }, \"end\": { \"line\": 0, \"column\": 73 } } }] }, \"expression\": false, \"range\": [33, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 33 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"prefix\": true, \"range\": [28, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 28 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [28, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 28 }, \"end\": { \"line\": 0, \"column\": 74 } } }], \"range\": [0, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 74 } } }\r\n    ], [\r\n        `\r\n        a,b?new [].c[10][20]()[10]:d;\r\n        await- a.b.c?a+b:/fsd/ig&&d;\r\n        async a=>await- a.b.c?a+b:/fsd/ig&&d;\r\n        `,\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"SequenceExpression\", \"expressions\": [{ \"type\": \"Identifier\", \"name\": \"a\", \"range\": [9, 10], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 9 } } }, { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [11, 12], \"loc\": { \"start\": { \"line\": 1, \"column\": 10 }, \"end\": { \"line\": 1, \"column\": 11 } } }, \"consequent\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"NewExpression\", \"callee\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"ArrayExpression\", \"elements\": [], \"range\": [17, 19], \"loc\": { \"start\": { \"line\": 1, \"column\": 16 }, \"end\": { \"line\": 1, \"column\": 18 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [20, 21], \"loc\": { \"start\": { \"line\": 1, \"column\": 19 }, \"end\": { \"line\": 1, \"column\": 20 } } }, \"computed\": false, \"range\": [17, 21], \"loc\": { \"start\": { \"line\": 1, \"column\": 16 }, \"end\": { \"line\": 1, \"column\": 20 } } }, \"property\": { \"type\": \"Literal\", \"value\": 10, \"raw\": \"10\", \"range\": [22, 24], \"loc\": { \"start\": { \"line\": 1, \"column\": 21 }, \"end\": { \"line\": 1, \"column\": 23 } } }, \"computed\": true, \"range\": [17, 25], \"loc\": { \"start\": { \"line\": 1, \"column\": 16 }, \"end\": { \"line\": 1, \"column\": 24 } } }, \"property\": { \"type\": \"Literal\", \"value\": 20, \"raw\": \"20\", \"range\": [26, 28], \"loc\": { \"start\": { \"line\": 1, \"column\": 25 }, \"end\": { \"line\": 1, \"column\": 27 } } }, \"computed\": true, \"range\": [17, 29], \"loc\": { \"start\": { \"line\": 1, \"column\": 16 }, \"end\": { \"line\": 1, \"column\": 28 } } }, \"arguments\": [], \"range\": [13, 31], \"loc\": { \"start\": { \"line\": 1, \"column\": 12 }, \"end\": { \"line\": 1, \"column\": 30 } } }, \"property\": { \"type\": \"Literal\", \"value\": 10, \"raw\": \"10\", \"range\": [32, 34], \"loc\": { \"start\": { \"line\": 1, \"column\": 31 }, \"end\": { \"line\": 1, \"column\": 33 } } }, \"computed\": true, \"range\": [13, 35], \"loc\": { \"start\": { \"line\": 1, \"column\": 12 }, \"end\": { \"line\": 1, \"column\": 34 } } }, \"alternate\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [36, 37], \"loc\": { \"start\": { \"line\": 1, \"column\": 35 }, \"end\": { \"line\": 1, \"column\": 36 } } }, \"range\": [11, 37], \"loc\": { \"start\": { \"line\": 1, \"column\": 10 }, \"end\": { \"line\": 1, \"column\": 36 } } }], \"range\": [9, 37], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 36 } } }, \"range\": [9, 38], \"loc\": { \"start\": { \"line\": 1, \"column\": 8 }, \"end\": { \"line\": 1, \"column\": 37 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"await\", \"range\": [47, 52], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 2, \"column\": 13 } } }, \"operator\": \"-\", \"right\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [54, 55], \"loc\": { \"start\": { \"line\": 2, \"column\": 15 }, \"end\": { \"line\": 2, \"column\": 16 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [56, 57], \"loc\": { \"start\": { \"line\": 2, \"column\": 17 }, \"end\": { \"line\": 2, \"column\": 18 } } }, \"computed\": false, \"range\": [54, 57], \"loc\": { \"start\": { \"line\": 2, \"column\": 15 }, \"end\": { \"line\": 2, \"column\": 18 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [58, 59], \"loc\": { \"start\": { \"line\": 2, \"column\": 19 }, \"end\": { \"line\": 2, \"column\": 20 } } }, \"computed\": false, \"range\": [54, 59], \"loc\": { \"start\": { \"line\": 2, \"column\": 15 }, \"end\": { \"line\": 2, \"column\": 20 } } }, \"range\": [47, 59], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 2, \"column\": 20 } } }, \"consequent\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [60, 61], \"loc\": { \"start\": { \"line\": 2, \"column\": 21 }, \"end\": { \"line\": 2, \"column\": 22 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [62, 63], \"loc\": { \"start\": { \"line\": 2, \"column\": 23 }, \"end\": { \"line\": 2, \"column\": 24 } } }, \"range\": [60, 63], \"loc\": { \"start\": { \"line\": 2, \"column\": 21 }, \"end\": { \"line\": 2, \"column\": 24 } } }, \"alternate\": { \"type\": \"LogicalExpression\", \"left\": { \"type\": \"Literal\", \"value\": {}, \"raw\": \"/fsd/ig\", \"regex\": { \"pattern\": \"fsd\", \"flags\": \"ig\" }, \"range\": [64, 71], \"loc\": { \"start\": { \"line\": 2, \"column\": 25 }, \"end\": { \"line\": 2, \"column\": 32 } } }, \"operator\": \"&&\", \"right\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [73, 74], \"loc\": { \"start\": { \"line\": 2, \"column\": 34 }, \"end\": { \"line\": 2, \"column\": 35 } } }, \"range\": [64, 74], \"loc\": { \"start\": { \"line\": 2, \"column\": 25 }, \"end\": { \"line\": 2, \"column\": 35 } } }, \"range\": [47, 74], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 2, \"column\": 35 } } }, \"range\": [47, 75], \"loc\": { \"start\": { \"line\": 2, \"column\": 8 }, \"end\": { \"line\": 2, \"column\": 36 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"ArrowFunctionExpression\", \"async\": true, \"generator\": false, \"id\": null, \"params\": [{ \"type\": \"Identifier\", \"name\": \"a\", \"range\": [90, 91], \"loc\": { \"start\": { \"line\": 3, \"column\": 14 }, \"end\": { \"line\": 3, \"column\": 15 } } }], \"body\": { \"type\": \"ConditionalExpression\", \"test\": { \"type\": \"AwaitExpression\", \"argument\": { \"type\": \"UnaryExpression\", \"operator\": \"-\", \"argument\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [100, 101], \"loc\": { \"start\": { \"line\": 3, \"column\": 24 }, \"end\": { \"line\": 3, \"column\": 25 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [102, 103], \"loc\": { \"start\": { \"line\": 3, \"column\": 26 }, \"end\": { \"line\": 3, \"column\": 27 } } }, \"computed\": false, \"range\": [100, 103], \"loc\": { \"start\": { \"line\": 3, \"column\": 24 }, \"end\": { \"line\": 3, \"column\": 27 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [104, 105], \"loc\": { \"start\": { \"line\": 3, \"column\": 28 }, \"end\": { \"line\": 3, \"column\": 29 } } }, \"computed\": false, \"range\": [100, 105], \"loc\": { \"start\": { \"line\": 3, \"column\": 24 }, \"end\": { \"line\": 3, \"column\": 29 } } }, \"prefix\": true, \"range\": [98, 105], \"loc\": { \"start\": { \"line\": 3, \"column\": 22 }, \"end\": { \"line\": 3, \"column\": 29 } } }, \"range\": [93, 105], \"loc\": { \"start\": { \"line\": 3, \"column\": 17 }, \"end\": { \"line\": 3, \"column\": 29 } } }, \"consequent\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [106, 107], \"loc\": { \"start\": { \"line\": 3, \"column\": 30 }, \"end\": { \"line\": 3, \"column\": 31 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [108, 109], \"loc\": { \"start\": { \"line\": 3, \"column\": 32 }, \"end\": { \"line\": 3, \"column\": 33 } } }, \"range\": [106, 109], \"loc\": { \"start\": { \"line\": 3, \"column\": 30 }, \"end\": { \"line\": 3, \"column\": 33 } } }, \"alternate\": { \"type\": \"LogicalExpression\", \"left\": { \"type\": \"Literal\", \"value\": {}, \"raw\": \"/fsd/ig\", \"regex\": { \"pattern\": \"fsd\", \"flags\": \"ig\" }, \"range\": [110, 117], \"loc\": { \"start\": { \"line\": 3, \"column\": 34 }, \"end\": { \"line\": 3, \"column\": 41 } } }, \"operator\": \"&&\", \"right\": { \"type\": \"Identifier\", \"name\": \"d\", \"range\": [119, 120], \"loc\": { \"start\": { \"line\": 3, \"column\": 43 }, \"end\": { \"line\": 3, \"column\": 44 } } }, \"range\": [110, 120], \"loc\": { \"start\": { \"line\": 3, \"column\": 34 }, \"end\": { \"line\": 3, \"column\": 44 } } }, \"range\": [93, 120], \"loc\": { \"start\": { \"line\": 3, \"column\": 17 }, \"end\": { \"line\": 3, \"column\": 44 } } }, \"expression\": true, \"range\": [84, 120], \"loc\": { \"start\": { \"line\": 3, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 44 } } }, \"range\": [84, 121], \"loc\": { \"start\": { \"line\": 3, \"column\": 8 }, \"end\": { \"line\": 3, \"column\": 45 } } }], \"range\": [0, 130], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 4, \"column\": 8 } } }\r\n    ],\r\n    [\r\n        \"if(a){}else if(b+c){}else if('') console.log();else a:while(b)b:{break a;} !function a(){}[10] ;new function(){}``()\",\r\n        { \"type\": \"Program\", \"sourceType\": \"script\", \"body\": [{ \"type\": \"IfStatement\", \"test\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [3, 4], \"loc\": { \"start\": { \"line\": 0, \"column\": 3 }, \"end\": { \"line\": 0, \"column\": 4 } } }, \"consequent\": { \"type\": \"BlockStatement\", \"body\": [], \"range\": [5, 7], \"loc\": { \"start\": { \"line\": 0, \"column\": 5 }, \"end\": { \"line\": 0, \"column\": 7 } } }, \"alternate\": { \"type\": \"IfStatement\", \"test\": { \"type\": \"BinaryExpression\", \"left\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [15, 16], \"loc\": { \"start\": { \"line\": 0, \"column\": 15 }, \"end\": { \"line\": 0, \"column\": 16 } } }, \"operator\": \"+\", \"right\": { \"type\": \"Identifier\", \"name\": \"c\", \"range\": [17, 18], \"loc\": { \"start\": { \"line\": 0, \"column\": 17 }, \"end\": { \"line\": 0, \"column\": 18 } } }, \"range\": [15, 18], \"loc\": { \"start\": { \"line\": 0, \"column\": 15 }, \"end\": { \"line\": 0, \"column\": 18 } } }, \"consequent\": { \"type\": \"BlockStatement\", \"body\": [], \"range\": [19, 21], \"loc\": { \"start\": { \"line\": 0, \"column\": 19 }, \"end\": { \"line\": 0, \"column\": 21 } } }, \"alternate\": { \"type\": \"IfStatement\", \"test\": { \"type\": \"Literal\", \"value\": \"\", \"raw\": \"''\", \"range\": [29, 31], \"loc\": { \"start\": { \"line\": 0, \"column\": 29 }, \"end\": { \"line\": 0, \"column\": 31 } } }, \"consequent\": { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"CallExpression\", \"callee\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"Identifier\", \"name\": \"console\", \"range\": [33, 40], \"loc\": { \"start\": { \"line\": 0, \"column\": 33 }, \"end\": { \"line\": 0, \"column\": 40 } } }, \"property\": { \"type\": \"Identifier\", \"name\": \"log\", \"range\": [41, 44], \"loc\": { \"start\": { \"line\": 0, \"column\": 41 }, \"end\": { \"line\": 0, \"column\": 44 } } }, \"computed\": false, \"range\": [33, 44], \"loc\": { \"start\": { \"line\": 0, \"column\": 33 }, \"end\": { \"line\": 0, \"column\": 44 } } }, \"arguments\": [], \"range\": [33, 46], \"loc\": { \"start\": { \"line\": 0, \"column\": 33 }, \"end\": { \"line\": 0, \"column\": 46 } } }, \"range\": [33, 47], \"loc\": { \"start\": { \"line\": 0, \"column\": 33 }, \"end\": { \"line\": 0, \"column\": 47 } } }, \"alternate\": { \"type\": \"LabeledStatement\", \"label\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [52, 53], \"loc\": { \"start\": { \"line\": 0, \"column\": 52 }, \"end\": { \"line\": 0, \"column\": 53 } } }, \"body\": { \"type\": \"WhileStatement\", \"test\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [60, 61], \"loc\": { \"start\": { \"line\": 0, \"column\": 60 }, \"end\": { \"line\": 0, \"column\": 61 } } }, \"body\": { \"type\": \"LabeledStatement\", \"label\": { \"type\": \"Identifier\", \"name\": \"b\", \"range\": [62, 63], \"loc\": { \"start\": { \"line\": 0, \"column\": 62 }, \"end\": { \"line\": 0, \"column\": 63 } } }, \"body\": { \"type\": \"BlockStatement\", \"body\": [{ \"type\": \"BreakStatement\", \"label\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [71, 72], \"loc\": { \"start\": { \"line\": 0, \"column\": 71 }, \"end\": { \"line\": 0, \"column\": 72 } } }, \"range\": [65, 73], \"loc\": { \"start\": { \"line\": 0, \"column\": 65 }, \"end\": { \"line\": 0, \"column\": 73 } } }], \"range\": [64, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 64 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [62, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 62 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [54, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 54 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [52, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 52 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [26, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 26 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [12, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 12 }, \"end\": { \"line\": 0, \"column\": 74 } } }, \"range\": [0, 74], \"loc\": { \"start\": { \"line\": 0, \"column\": 0 }, \"end\": { \"line\": 0, \"column\": 74 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"UnaryExpression\", \"operator\": \"!\", \"argument\": { \"type\": \"MemberExpression\", \"object\": { \"type\": \"FunctionExpression\", \"async\": false, \"generator\": false, \"id\": { \"type\": \"Identifier\", \"name\": \"a\", \"range\": [85, 86], \"loc\": { \"start\": { \"line\": 0, \"column\": 85 }, \"end\": { \"line\": 0, \"column\": 86 } } }, \"params\": [], \"body\": { \"type\": \"BlockStatement\", \"body\": [], \"range\": [88, 90], \"loc\": { \"start\": { \"line\": 0, \"column\": 88 }, \"end\": { \"line\": 0, \"column\": 90 } } }, \"expression\": false, \"range\": [76, 90], \"loc\": { \"start\": { \"line\": 0, \"column\": 76 }, \"end\": { \"line\": 0, \"column\": 90 } } }, \"property\": { \"type\": \"Literal\", \"value\": 10, \"raw\": \"10\", \"range\": [91, 93], \"loc\": { \"start\": { \"line\": 0, \"column\": 91 }, \"end\": { \"line\": 0, \"column\": 93 } } }, \"computed\": true, \"range\": [76, 94], \"loc\": { \"start\": { \"line\": 0, \"column\": 76 }, \"end\": { \"line\": 0, \"column\": 94 } } }, \"prefix\": true, \"range\": [75, 94], \"loc\": { \"start\": { \"line\": 0, \"column\": 75 }, \"end\": { \"line\": 0, \"column\": 94 } } }, \"range\": [75, 96], \"loc\": { \"start\": { \"line\": 0, \"column\": 75 }, \"end\": { \"line\": 0, \"column\": 96 } } }, { \"type\": \"ExpressionStatement\", \"expression\": { \"type\": \"NewExpression\", \"callee\": { \"type\": \"TaggedTemplateExpression\", \"tag\": { \"type\": \"FunctionExpression\", \"async\": false, \"generator\": false, \"id\": null, \"params\": [], \"body\": { \"type\": \"BlockStatement\", \"body\": [], \"range\": [110, 112], \"loc\": { \"start\": { \"line\": 0, \"column\": 110 }, \"end\": { \"line\": 0, \"column\": 112 } } }, \"expression\": false, \"range\": [100, 112], \"loc\": { \"start\": { \"line\": 0, \"column\": 100 }, \"end\": { \"line\": 0, \"column\": 112 } } }, \"quasi\": { \"type\": \"TemplateLiteral\", \"expressions\": [], \"quasis\": [{ \"type\": \"TemplateElement\", \"value\": { \"raw\": \"\", \"cooked\": \"\" }, \"tail\": true }], \"range\": [112, 114], \"loc\": { \"start\": { \"line\": 0, \"column\": 112 }, \"end\": { \"line\": 0, \"column\": 114 } } }, \"range\": [100, 114], \"loc\": { \"start\": { \"line\": 0, \"column\": 100 }, \"end\": { \"line\": 0, \"column\": 114 } } }, \"arguments\": [], \"range\": [96, 116], \"loc\": { \"start\": { \"line\": 0, \"column\": 96 }, \"end\": { \"line\": 0, \"column\": 116 } } }, \"range\": [96, 116], \"loc\": { \"start\": { \"line\": 0, \"column\": 96 }, \"end\": { \"line\": 0, \"column\": 116 } } }] }\r\n    ]\r\n]\r\nlet table = [];\r\n\r\nfor (const [input, control] of tast_list) {\r\n    let output = parser.parse(input);\r\n    table.push(\r\n        {\r\n            equal: weakEqual(control, output),\r\n            source: input,\r\n            control,\r\n            output\r\n        }\r\n    )\r\n}\r\nconsole.table(table);\r\n\r\n\r\n\r\nfunction weakEqual(a: any, b: any) {\r\n    if (typeof a === \"object\") {\r\n        if (typeof b === \"object\") {\r\n            if (a !== b) {\r\n                if (a === null || b === null) {\r\n                    return [a, b];\r\n                }\r\n                let keys = new Set(Object.keys(a).concat(Object.keys(b)));\r\n                for (const key of Array.from(keys)) {\r\n                    if (key === \"range\" || key === \"loc\") {\r\n                        continue;\r\n                    }\r\n                    let res = weakEqual(a[key], b[key]);\r\n                    if (res !== true) {\r\n                        res.unshift(a, b, key);\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return [a, b];\r\n        }\r\n    } else {\r\n        return a === b || [a, b];\r\n    }\r\n}\r\n\r\nfunction deepEqual(a: any, b: any) {\r\n    if (typeof a === \"object\") {\r\n        if (typeof b === \"object\") {\r\n            if (a !== b) {\r\n                if (a === null || b === null) {\r\n                    return [a, b];\r\n                }\r\n                let keys = new Set(Object.keys(a).concat(Object.keys(b)));\r\n                for (const key of Array.from(keys)) {\r\n                    let res = deepEqual(a[key], b[key]);\r\n                    if (res !== true) {\r\n                        res.unshift(a, b, key);\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return [a, b];\r\n        }\r\n    } else {\r\n        return a === b || [a, b];\r\n    }\r\n}\r\n\r\n\r\n","\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n/* istanbul ignore next */\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n/* istanbul ignore next */\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"esprima\"] = factory();\r\n\telse\r\n\t\troot[\"esprima\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n\r\n/******/ \t\t// Check if module is in cache\r\n/* istanbul ignore if */\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n\r\n\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\t/*\r\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\r\n\r\n\t  Redistribution and use in source and binary forms, with or without\r\n\t  modification, are permitted provided that the following conditions are met:\r\n\r\n\t    * Redistributions of source code must retain the above copyright\r\n\t      notice, this list of conditions and the following disclaimer.\r\n\t    * Redistributions in binary form must reproduce the above copyright\r\n\t      notice, this list of conditions and the following disclaimer in the\r\n\t      documentation and/or other materials provided with the distribution.\r\n\r\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\t*/\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar comment_handler_1 = __webpack_require__(1);\r\n\tvar jsx_parser_1 = __webpack_require__(3);\r\n\tvar parser_1 = __webpack_require__(8);\r\n\tvar tokenizer_1 = __webpack_require__(15);\r\n\tfunction parse(code, options, delegate) {\r\n\t    var commentHandler = null;\r\n\t    var proxyDelegate = function (node, metadata) {\r\n\t        if (delegate) {\r\n\t            delegate(node, metadata);\r\n\t        }\r\n\t        if (commentHandler) {\r\n\t            commentHandler.visit(node, metadata);\r\n\t        }\r\n\t    };\r\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\r\n\t    var collectComment = false;\r\n\t    if (options) {\r\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\r\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\r\n\t        if (collectComment || attachComment) {\r\n\t            commentHandler = new comment_handler_1.CommentHandler();\r\n\t            commentHandler.attach = attachComment;\r\n\t            options.comment = true;\r\n\t            parserDelegate = proxyDelegate;\r\n\t        }\r\n\t    }\r\n\t    var isModule = false;\r\n\t    if (options && typeof options.sourceType === 'string') {\r\n\t        isModule = (options.sourceType === 'module');\r\n\t    }\r\n\t    var parser;\r\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\r\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\r\n\t    }\r\n\t    else {\r\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\r\n\t    }\r\n\t    var program = isModule ? parser.parseModule() : parser.parseScript();\r\n\t    var ast = program;\r\n\t    if (collectComment && commentHandler) {\r\n\t        ast.comments = commentHandler.comments;\r\n\t    }\r\n\t    if (parser.config.tokens) {\r\n\t        ast.tokens = parser.tokens;\r\n\t    }\r\n\t    if (parser.config.tolerant) {\r\n\t        ast.errors = parser.errorHandler.errors;\r\n\t    }\r\n\t    return ast;\r\n\t}\r\n\texports.parse = parse;\r\n\tfunction parseModule(code, options, delegate) {\r\n\t    var parsingOptions = options || {};\r\n\t    parsingOptions.sourceType = 'module';\r\n\t    return parse(code, parsingOptions, delegate);\r\n\t}\r\n\texports.parseModule = parseModule;\r\n\tfunction parseScript(code, options, delegate) {\r\n\t    var parsingOptions = options || {};\r\n\t    parsingOptions.sourceType = 'script';\r\n\t    return parse(code, parsingOptions, delegate);\r\n\t}\r\n\texports.parseScript = parseScript;\r\n\tfunction tokenize(code, options, delegate) {\r\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\r\n\t    var tokens = [];\r\n\t    try {\r\n\t        while (true) {\r\n\t            var token = tokenizer.getNextToken();\r\n\t            if (!token) {\r\n\t                break;\r\n\t            }\r\n\t            if (delegate) {\r\n\t                token = delegate(token);\r\n\t            }\r\n\t            tokens.push(token);\r\n\t        }\r\n\t    }\r\n\t    catch (e) {\r\n\t        tokenizer.errorHandler.tolerate(e);\r\n\t    }\r\n\t    if (tokenizer.errorHandler.tolerant) {\r\n\t        tokens.errors = tokenizer.errors();\r\n\t    }\r\n\t    return tokens;\r\n\t}\r\n\texports.tokenize = tokenize;\r\n\tvar syntax_1 = __webpack_require__(2);\r\n\texports.Syntax = syntax_1.Syntax;\r\n\t// Sync with *.json manifests.\r\n\texports.version = '4.0.0-dev';\r\n\r\n\r\n/***/ },\r\n/* 1 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar syntax_1 = __webpack_require__(2);\r\n\tvar CommentHandler = /** @class */ (function () {\r\n\t    function CommentHandler() {\r\n\t        this.attach = false;\r\n\t        this.comments = [];\r\n\t        this.stack = [];\r\n\t        this.leading = [];\r\n\t        this.trailing = [];\r\n\t    }\r\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\r\n\t        //  innnerComments for properties empty block\r\n\t        //  `function a() {/** comments **\\/}`\r\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\r\n\t            var innerComments = [];\r\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\r\n\t                var entry = this.leading[i];\r\n\t                if (metadata.end.offset >= entry.start) {\r\n\t                    innerComments.unshift(entry.comment);\r\n\t                    this.leading.splice(i, 1);\r\n\t                    this.trailing.splice(i, 1);\r\n\t                }\r\n\t            }\r\n\t            if (innerComments.length) {\r\n\t                node.innerComments = innerComments;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    CommentHandler.prototype.findTrailingComments = function (metadata) {\r\n\t        var trailingComments = [];\r\n\t        if (this.trailing.length > 0) {\r\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\r\n\t                var entry = this.trailing[i];\r\n\t                if (entry.start >= metadata.end.offset) {\r\n\t                    trailingComments.unshift(entry.comment);\r\n\t                }\r\n\t            }\r\n\t            this.trailing.length = 0;\r\n\t            return trailingComments;\r\n\t        }\r\n\t        var last = this.stack[this.stack.length - 1];\r\n\t        if (last && last.node.trailingComments) {\r\n\t            var firstComment = last.node.trailingComments[0];\r\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\r\n\t                trailingComments = last.node.trailingComments;\r\n\t                delete last.node.trailingComments;\r\n\t            }\r\n\t        }\r\n\t        return trailingComments;\r\n\t    };\r\n\t    CommentHandler.prototype.findLeadingComments = function (metadata) {\r\n\t        var leadingComments = [];\r\n\t        var target;\r\n\t        while (this.stack.length > 0) {\r\n\t            var entry = this.stack[this.stack.length - 1];\r\n\t            if (entry && entry.start >= metadata.start.offset) {\r\n\t                target = entry.node;\r\n\t                this.stack.pop();\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        if (target) {\r\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\r\n\t            for (var i = count - 1; i >= 0; --i) {\r\n\t                var comment = target.leadingComments[i];\r\n\t                if (comment.range[1] <= metadata.start.offset) {\r\n\t                    leadingComments.unshift(comment);\r\n\t                    target.leadingComments.splice(i, 1);\r\n\t                }\r\n\t            }\r\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\r\n\t                delete target.leadingComments;\r\n\t            }\r\n\t            return leadingComments;\r\n\t        }\r\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\r\n\t            var entry = this.leading[i];\r\n\t            if (entry.start <= metadata.start.offset) {\r\n\t                leadingComments.unshift(entry.comment);\r\n\t                this.leading.splice(i, 1);\r\n\t            }\r\n\t        }\r\n\t        return leadingComments;\r\n\t    };\r\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\r\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\r\n\t            return;\r\n\t        }\r\n\t        this.insertInnerComments(node, metadata);\r\n\t        var trailingComments = this.findTrailingComments(metadata);\r\n\t        var leadingComments = this.findLeadingComments(metadata);\r\n\t        if (leadingComments.length > 0) {\r\n\t            node.leadingComments = leadingComments;\r\n\t        }\r\n\t        if (trailingComments.length > 0) {\r\n\t            node.trailingComments = trailingComments;\r\n\t        }\r\n\t        this.stack.push({\r\n\t            node: node,\r\n\t            start: metadata.start.offset\r\n\t        });\r\n\t    };\r\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\r\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\r\n\t        var comment = {\r\n\t            type: type,\r\n\t            value: node.value\r\n\t        };\r\n\t        if (node.range) {\r\n\t            comment.range = node.range;\r\n\t        }\r\n\t        if (node.loc) {\r\n\t            comment.loc = node.loc;\r\n\t        }\r\n\t        this.comments.push(comment);\r\n\t        if (this.attach) {\r\n\t            var entry = {\r\n\t                comment: {\r\n\t                    type: type,\r\n\t                    value: node.value,\r\n\t                    range: [metadata.start.offset, metadata.end.offset]\r\n\t                },\r\n\t                start: metadata.start.offset\r\n\t            };\r\n\t            if (node.loc) {\r\n\t                entry.comment.loc = node.loc;\r\n\t            }\r\n\t            node.type = type;\r\n\t            this.leading.push(entry);\r\n\t            this.trailing.push(entry);\r\n\t        }\r\n\t    };\r\n\t    CommentHandler.prototype.visit = function (node, metadata) {\r\n\t        if (node.type === 'LineComment') {\r\n\t            this.visitComment(node, metadata);\r\n\t        }\r\n\t        else if (node.type === 'BlockComment') {\r\n\t            this.visitComment(node, metadata);\r\n\t        }\r\n\t        else if (this.attach) {\r\n\t            this.visitNode(node, metadata);\r\n\t        }\r\n\t    };\r\n\t    return CommentHandler;\r\n\t}());\r\n\texports.CommentHandler = CommentHandler;\r\n\r\n\r\n/***/ },\r\n/* 2 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.Syntax = {\r\n\t    AssignmentExpression: 'AssignmentExpression',\r\n\t    AssignmentPattern: 'AssignmentPattern',\r\n\t    ArrayExpression: 'ArrayExpression',\r\n\t    ArrayPattern: 'ArrayPattern',\r\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n\t    AwaitExpression: 'AwaitExpression',\r\n\t    BlockStatement: 'BlockStatement',\r\n\t    BinaryExpression: 'BinaryExpression',\r\n\t    BreakStatement: 'BreakStatement',\r\n\t    CallExpression: 'CallExpression',\r\n\t    CatchClause: 'CatchClause',\r\n\t    ClassBody: 'ClassBody',\r\n\t    ClassDeclaration: 'ClassDeclaration',\r\n\t    ClassExpression: 'ClassExpression',\r\n\t    ConditionalExpression: 'ConditionalExpression',\r\n\t    ContinueStatement: 'ContinueStatement',\r\n\t    DoWhileStatement: 'DoWhileStatement',\r\n\t    DebuggerStatement: 'DebuggerStatement',\r\n\t    EmptyStatement: 'EmptyStatement',\r\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\r\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\r\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\r\n\t    ExportSpecifier: 'ExportSpecifier',\r\n\t    ExpressionStatement: 'ExpressionStatement',\r\n\t    ForStatement: 'ForStatement',\r\n\t    ForOfStatement: 'ForOfStatement',\r\n\t    ForInStatement: 'ForInStatement',\r\n\t    FunctionDeclaration: 'FunctionDeclaration',\r\n\t    FunctionExpression: 'FunctionExpression',\r\n\t    Identifier: 'Identifier',\r\n\t    IfStatement: 'IfStatement',\r\n\t    Import: 'Import',\r\n\t    ImportDeclaration: 'ImportDeclaration',\r\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\r\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\r\n\t    ImportSpecifier: 'ImportSpecifier',\r\n\t    Literal: 'Literal',\r\n\t    LabeledStatement: 'LabeledStatement',\r\n\t    LogicalExpression: 'LogicalExpression',\r\n\t    MemberExpression: 'MemberExpression',\r\n\t    MetaProperty: 'MetaProperty',\r\n\t    MethodDefinition: 'MethodDefinition',\r\n\t    NewExpression: 'NewExpression',\r\n\t    ObjectExpression: 'ObjectExpression',\r\n\t    ObjectPattern: 'ObjectPattern',\r\n\t    Program: 'Program',\r\n\t    Property: 'Property',\r\n\t    RestElement: 'RestElement',\r\n\t    ReturnStatement: 'ReturnStatement',\r\n\t    SequenceExpression: 'SequenceExpression',\r\n\t    SpreadElement: 'SpreadElement',\r\n\t    Super: 'Super',\r\n\t    SwitchCase: 'SwitchCase',\r\n\t    SwitchStatement: 'SwitchStatement',\r\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\r\n\t    TemplateElement: 'TemplateElement',\r\n\t    TemplateLiteral: 'TemplateLiteral',\r\n\t    ThisExpression: 'ThisExpression',\r\n\t    ThrowStatement: 'ThrowStatement',\r\n\t    TryStatement: 'TryStatement',\r\n\t    UnaryExpression: 'UnaryExpression',\r\n\t    UpdateExpression: 'UpdateExpression',\r\n\t    VariableDeclaration: 'VariableDeclaration',\r\n\t    VariableDeclarator: 'VariableDeclarator',\r\n\t    WhileStatement: 'WhileStatement',\r\n\t    WithStatement: 'WithStatement',\r\n\t    YieldExpression: 'YieldExpression'\r\n\t};\r\n\r\n\r\n/***/ },\r\n/* 3 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n/* istanbul ignore next */\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = function (d, b) {\r\n\t        extendStatics = Object.setPrototypeOf ||\r\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t        return extendStatics(d, b);\r\n\t    };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar character_1 = __webpack_require__(4);\r\n\tvar JSXNode = __webpack_require__(5);\r\n\tvar jsx_syntax_1 = __webpack_require__(6);\r\n\tvar Node = __webpack_require__(7);\r\n\tvar parser_1 = __webpack_require__(8);\r\n\tvar token_1 = __webpack_require__(13);\r\n\tvar xhtml_entities_1 = __webpack_require__(14);\r\n\ttoken_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\r\n\ttoken_1.TokenName[101 /* Text */] = 'JSXText';\r\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\r\n\tfunction getQualifiedElementName(elementName) {\r\n\t    var qualifiedName;\r\n\t    switch (elementName.type) {\r\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\r\n\t            var id = elementName;\r\n\t            qualifiedName = id.name;\r\n\t            break;\r\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\r\n\t            var ns = elementName;\r\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\r\n\t                getQualifiedElementName(ns.name);\r\n\t            break;\r\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\r\n\t            var expr = elementName;\r\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\r\n\t                getQualifiedElementName(expr.property);\r\n\t            break;\r\n\t        /* istanbul ignore next */\r\n\t        default:\r\n\t            break;\r\n\t    }\r\n\t    return qualifiedName;\r\n\t}\r\n\tvar JSXParser = /** @class */ (function (_super) {\r\n\t    __extends(JSXParser, _super);\r\n\t    function JSXParser(code, options, delegate) {\r\n\t        return _super.call(this, code, options, delegate) || this;\r\n\t    }\r\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\r\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\r\n\t    };\r\n\t    JSXParser.prototype.startJSX = function () {\r\n\t        // Unwind the scanner before the lookahead token.\r\n\t        this.scanner.index = this.startMarker.index;\r\n\t        this.scanner.lineNumber = this.startMarker.line;\r\n\t        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\r\n\t    };\r\n\t    JSXParser.prototype.finishJSX = function () {\r\n\t        // Prime the next lookahead.\r\n\t        this.nextToken();\r\n\t    };\r\n\t    JSXParser.prototype.reenterJSX = function () {\r\n\t        this.startJSX();\r\n\t        this.expectJSX('}');\r\n\t        // Pop the closing '}' added from the lookahead.\r\n\t        if (this.config.tokens) {\r\n\t            this.tokens.pop();\r\n\t        }\r\n\t    };\r\n\t    JSXParser.prototype.createJSXNode = function () {\r\n\t        this.collectComments();\r\n\t        return {\r\n\t            index: this.scanner.index,\r\n\t            line: this.scanner.lineNumber,\r\n\t            column: this.scanner.index - this.scanner.lineStart\r\n\t        };\r\n\t    };\r\n\t    JSXParser.prototype.createJSXChildNode = function () {\r\n\t        return {\r\n\t            index: this.scanner.index,\r\n\t            line: this.scanner.lineNumber,\r\n\t            column: this.scanner.index - this.scanner.lineStart\r\n\t        };\r\n\t    };\r\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\r\n\t        var result = '&';\r\n\t        var valid = true;\r\n\t        var terminated = false;\r\n\t        var numeric = false;\r\n\t        var hex = false;\r\n\t        while (!this.scanner.eof() && valid && !terminated) {\r\n\t            var ch = this.scanner.source[this.scanner.index];\r\n\t            if (ch === quote) {\r\n\t                break;\r\n\t            }\r\n\t            terminated = (ch === ';');\r\n\t            result += ch;\r\n\t            ++this.scanner.index;\r\n\t            if (!terminated) {\r\n\t                switch (result.length) {\r\n\t                    case 2:\r\n\t                        // e.g. '&#123;'\r\n\t                        numeric = (ch === '#');\r\n\t                        break;\r\n\t                    case 3:\r\n\t                        if (numeric) {\r\n\t                            // e.g. '&#x41;'\r\n\t                            hex = (ch === 'x');\r\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\r\n\t                            numeric = numeric && !hex;\r\n\t                        }\r\n\t                        break;\r\n\t                    default:\r\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\r\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (valid && terminated && result.length > 2) {\r\n\t            // e.g. '&#x41;' becomes just '#x41'\r\n\t            var str = result.substr(1, result.length - 2);\r\n\t            if (numeric && str.length > 1) {\r\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\r\n\t            }\r\n\t            else if (hex && str.length > 2) {\r\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\r\n\t            }\r\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\r\n\t                result = xhtml_entities_1.XHTMLEntities[str];\r\n\t            }\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\r\n\t    JSXParser.prototype.lexJSX = function () {\r\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\r\n\t        // < > / : = { }\r\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\r\n\t            var value = this.scanner.source[this.scanner.index++];\r\n\t            return {\r\n\t                type: 7 /* Punctuator */,\r\n\t                value: value,\r\n\t                lineNumber: this.scanner.lineNumber,\r\n\t                lineStart: this.scanner.lineStart,\r\n\t                start: this.scanner.index - 1,\r\n\t                end: this.scanner.index\r\n\t            };\r\n\t        }\r\n\t        // \" '\r\n\t        if (cp === 34 || cp === 39) {\r\n\t            var start = this.scanner.index;\r\n\t            var quote = this.scanner.source[this.scanner.index++];\r\n\t            var str = '';\r\n\t            while (!this.scanner.eof()) {\r\n\t                var ch = this.scanner.source[this.scanner.index++];\r\n\t                if (ch === quote) {\r\n\t                    break;\r\n\t                }\r\n\t                else if (ch === '&') {\r\n\t                    str += this.scanXHTMLEntity(quote);\r\n\t                }\r\n\t                else {\r\n\t                    str += ch;\r\n\t                }\r\n\t            }\r\n\t            return {\r\n\t                type: 8 /* StringLiteral */,\r\n\t                value: str,\r\n\t                lineNumber: this.scanner.lineNumber,\r\n\t                lineStart: this.scanner.lineStart,\r\n\t                start: start,\r\n\t                end: this.scanner.index\r\n\t            };\r\n\t        }\r\n\t        // ... or .\r\n\t        if (cp === 46) {\r\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\r\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\r\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\r\n\t            var start = this.scanner.index;\r\n\t            this.scanner.index += value.length;\r\n\t            return {\r\n\t                type: 7 /* Punctuator */,\r\n\t                value: value,\r\n\t                lineNumber: this.scanner.lineNumber,\r\n\t                lineStart: this.scanner.lineStart,\r\n\t                start: start,\r\n\t                end: this.scanner.index\r\n\t            };\r\n\t        }\r\n\t        // `\r\n\t        if (cp === 96) {\r\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\r\n\t            return {\r\n\t                type: 10 /* Template */,\r\n\t                value: '',\r\n\t                lineNumber: this.scanner.lineNumber,\r\n\t                lineStart: this.scanner.lineStart,\r\n\t                start: this.scanner.index,\r\n\t                end: this.scanner.index\r\n\t            };\r\n\t        }\r\n\t        // Identifer can not contain backslash (char code 92).\r\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\r\n\t            var start = this.scanner.index;\r\n\t            ++this.scanner.index;\r\n\t            while (!this.scanner.eof()) {\r\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\r\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\r\n\t                    ++this.scanner.index;\r\n\t                }\r\n\t                else if (ch === 45) {\r\n\t                    // Hyphen (char code 45) can be part of an identifier.\r\n\t                    ++this.scanner.index;\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\r\n\t            return {\r\n\t                type: 100 /* Identifier */,\r\n\t                value: id,\r\n\t                lineNumber: this.scanner.lineNumber,\r\n\t                lineStart: this.scanner.lineStart,\r\n\t                start: start,\r\n\t                end: this.scanner.index\r\n\t            };\r\n\t        }\r\n\t        return this.scanner.lex();\r\n\t    };\r\n\t    JSXParser.prototype.nextJSXToken = function () {\r\n\t        this.collectComments();\r\n\t        this.startMarker.index = this.scanner.index;\r\n\t        this.startMarker.line = this.scanner.lineNumber;\r\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        var token = this.lexJSX();\r\n\t        this.lastMarker.index = this.scanner.index;\r\n\t        this.lastMarker.line = this.scanner.lineNumber;\r\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        if (this.config.tokens) {\r\n\t            this.tokens.push(this.convertToken(token));\r\n\t        }\r\n\t        return token;\r\n\t    };\r\n\t    JSXParser.prototype.nextJSXText = function () {\r\n\t        this.startMarker.index = this.scanner.index;\r\n\t        this.startMarker.line = this.scanner.lineNumber;\r\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        var start = this.scanner.index;\r\n\t        var text = '';\r\n\t        while (!this.scanner.eof()) {\r\n\t            var ch = this.scanner.source[this.scanner.index];\r\n\t            if (ch === '{' || ch === '<') {\r\n\t                break;\r\n\t            }\r\n\t            ++this.scanner.index;\r\n\t            text += ch;\r\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                ++this.scanner.lineNumber;\r\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\r\n\t                    ++this.scanner.index;\r\n\t                }\r\n\t                this.scanner.lineStart = this.scanner.index;\r\n\t            }\r\n\t        }\r\n\t        this.lastMarker.index = this.scanner.index;\r\n\t        this.lastMarker.line = this.scanner.lineNumber;\r\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        var token = {\r\n\t            type: 101 /* Text */,\r\n\t            value: text,\r\n\t            lineNumber: this.scanner.lineNumber,\r\n\t            lineStart: this.scanner.lineStart,\r\n\t            start: start,\r\n\t            end: this.scanner.index\r\n\t        };\r\n\t        if ((text.length > 0) && this.config.tokens) {\r\n\t            this.tokens.push(this.convertToken(token));\r\n\t        }\r\n\t        return token;\r\n\t    };\r\n\t    JSXParser.prototype.peekJSXToken = function () {\r\n\t        var state = this.scanner.saveState();\r\n\t        this.scanner.scanComments();\r\n\t        var next = this.lexJSX();\r\n\t        this.scanner.restoreState(state);\r\n\t        return next;\r\n\t    };\r\n\t    // Expect the next JSX token to match the specified punctuator.\r\n\t    // If not, an exception will be thrown.\r\n\t    JSXParser.prototype.expectJSX = function (value) {\r\n\t        var token = this.nextJSXToken();\r\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t    };\r\n\t    // Return true if the next JSX token matches the specified punctuator.\r\n\t    JSXParser.prototype.matchJSX = function (value) {\r\n\t        var next = this.peekJSXToken();\r\n\t        return next.type === 7 /* Punctuator */ && next.value === value;\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var token = this.nextJSXToken();\r\n\t        if (token.type !== 100 /* Identifier */) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXElementName = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var elementName = this.parseJSXIdentifier();\r\n\t        if (this.matchJSX(':')) {\r\n\t            var namespace = elementName;\r\n\t            this.expectJSX(':');\r\n\t            var name_1 = this.parseJSXIdentifier();\r\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\r\n\t        }\r\n\t        else if (this.matchJSX('.')) {\r\n\t            while (this.matchJSX('.')) {\r\n\t                var object = elementName;\r\n\t                this.expectJSX('.');\r\n\t                var property = this.parseJSXIdentifier();\r\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\r\n\t            }\r\n\t        }\r\n\t        return elementName;\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var attributeName;\r\n\t        var identifier = this.parseJSXIdentifier();\r\n\t        if (this.matchJSX(':')) {\r\n\t            var namespace = identifier;\r\n\t            this.expectJSX(':');\r\n\t            var name_2 = this.parseJSXIdentifier();\r\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\r\n\t        }\r\n\t        else {\r\n\t            attributeName = identifier;\r\n\t        }\r\n\t        return attributeName;\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var token = this.nextJSXToken();\r\n\t        if (token.type !== 8 /* StringLiteral */) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t        var raw = this.getTokenRaw(token);\r\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        this.expectJSX('{');\r\n\t        this.finishJSX();\r\n\t        if (this.match('}')) {\r\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\r\n\t        }\r\n\t        var expression = this.parseAssignmentExpression();\r\n\t        this.reenterJSX();\r\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\r\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\r\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var name = this.parseJSXAttributeName();\r\n\t        var value = null;\r\n\t        if (this.matchJSX('=')) {\r\n\t            this.expectJSX('=');\r\n\t            value = this.parseJSXAttributeValue();\r\n\t        }\r\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        this.expectJSX('{');\r\n\t        this.expectJSX('...');\r\n\t        this.finishJSX();\r\n\t        var argument = this.parseAssignmentExpression();\r\n\t        this.reenterJSX();\r\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXAttributes = function () {\r\n\t        var attributes = [];\r\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\r\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\r\n\t                this.parseJSXNameValueAttribute();\r\n\t            attributes.push(attribute);\r\n\t        }\r\n\t        return attributes;\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        this.expectJSX('<');\r\n\t        var name = this.parseJSXElementName();\r\n\t        var attributes = this.parseJSXAttributes();\r\n\t        var selfClosing = this.matchJSX('/');\r\n\t        if (selfClosing) {\r\n\t            this.expectJSX('/');\r\n\t        }\r\n\t        this.expectJSX('>');\r\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        this.expectJSX('<');\r\n\t        if (this.matchJSX('/')) {\r\n\t            this.expectJSX('/');\r\n\t            var elementName = this.parseJSXElementName();\r\n\t            this.expectJSX('>');\r\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(elementName));\r\n\t        }\r\n\t        var name = this.parseJSXElementName();\r\n\t        var attributes = this.parseJSXAttributes();\r\n\t        var selfClosing = this.matchJSX('/');\r\n\t        if (selfClosing) {\r\n\t            this.expectJSX('/');\r\n\t        }\r\n\t        this.expectJSX('>');\r\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\r\n\t        var node = this.createJSXChildNode();\r\n\t        this.collectComments();\r\n\t        this.lastMarker.index = this.scanner.index;\r\n\t        this.lastMarker.line = this.scanner.lineNumber;\r\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        this.expectJSX('{');\r\n\t        var expression;\r\n\t        if (this.matchJSX('}')) {\r\n\t            expression = this.parseJSXEmptyExpression();\r\n\t            this.expectJSX('}');\r\n\t        }\r\n\t        else {\r\n\t            this.finishJSX();\r\n\t            expression = this.parseAssignmentExpression();\r\n\t            this.reenterJSX();\r\n\t        }\r\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXChildren = function () {\r\n\t        var children = [];\r\n\t        while (!this.scanner.eof()) {\r\n\t            var node = this.createJSXChildNode();\r\n\t            var token = this.nextJSXText();\r\n\t            if (token.start < token.end) {\r\n\t                var raw = this.getTokenRaw(token);\r\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\r\n\t                children.push(child);\r\n\t            }\r\n\t            if (this.scanner.source[this.scanner.index] === '{') {\r\n\t                var container = this.parseJSXExpressionContainer();\r\n\t                children.push(container);\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        return children;\r\n\t    };\r\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\r\n\t        var stack = [];\r\n\t        while (!this.scanner.eof()) {\r\n\t            el.children = el.children.concat(this.parseJSXChildren());\r\n\t            var node = this.createJSXChildNode();\r\n\t            var element = this.parseJSXBoundaryElement();\r\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\r\n\t                var opening = element;\r\n\t                if (opening.selfClosing) {\r\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\r\n\t                    el.children.push(child);\r\n\t                }\r\n\t                else {\r\n\t                    stack.push(el);\r\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\r\n\t                }\r\n\t            }\r\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\r\n\t                el.closing = element;\r\n\t                var open_1 = getQualifiedElementName(el.opening.name);\r\n\t                var close_1 = getQualifiedElementName(el.closing.name);\r\n\t                if (open_1 !== close_1) {\r\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\r\n\t                }\r\n\t                if (stack.length > 0) {\r\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\r\n\t                    el = stack[stack.length - 1];\r\n\t                    el.children.push(child);\r\n\t                    stack.pop();\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return el;\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXElement = function () {\r\n\t        var node = this.createJSXNode();\r\n\t        var opening = this.parseJSXOpeningElement();\r\n\t        var children = [];\r\n\t        var closing = null;\r\n\t        if (!opening.selfClosing) {\r\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\r\n\t            children = el.children;\r\n\t            closing = el.closing;\r\n\t        }\r\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\r\n\t    };\r\n\t    JSXParser.prototype.parseJSXRoot = function () {\r\n\t        // Pop the opening '<' added from the lookahead.\r\n\t        if (this.config.tokens) {\r\n\t            this.tokens.pop();\r\n\t        }\r\n\t        this.startJSX();\r\n\t        var element = this.parseJSXElement();\r\n\t        this.finishJSX();\r\n\t        return element;\r\n\t    };\r\n\t    JSXParser.prototype.isStartOfExpression = function () {\r\n\t        return _super.prototype.isStartOfExpression.call(this) || this.match('<');\r\n\t    };\r\n\t    return JSXParser;\r\n\t}(parser_1.Parser));\r\n\texports.JSXParser = JSXParser;\r\n\r\n/***/ },\r\n/* 4 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t// See also tools/generate-unicode-regex.js.\r\n\tvar Regex = {\r\n\t    // Unicode v12.1.0 NonAsciiIdentifierStart:\r\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/,\r\n\t    // Unicode v12.1.0 NonAsciiIdentifierPart:\r\n\t    // eslint-disable-next-line no-misleading-character-class\r\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\r\n\t};\r\n\texports.Character = {\r\n\t    fromCodePoint: function (cp) {\r\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\r\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\r\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\r\n\t    },\r\n\t    // https://tc39.github.io/ecma262/#sec-white-space\r\n\t    isWhiteSpace: function (cp) {\r\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\r\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\r\n\t    },\r\n\t    // https://tc39.github.io/ecma262/#sec-line-terminators\r\n\t    isLineTerminator: function (cp) {\r\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\r\n\t    },\r\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n\t    isIdentifierStart: function (cp) {\r\n\t        return (cp === 0x24) || (cp === 0x5F) || // $ (dollar) and _ (underscore)\r\n\t            (cp >= 0x41 && cp <= 0x5A) || // A..Z\r\n\t            (cp >= 0x61 && cp <= 0x7A) || // a..z\r\n\t            (cp === 0x5C) || // \\ (backslash)\r\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\r\n\t    },\r\n\t    isIdentifierPart: function (cp) {\r\n\t        return (cp === 0x24) || (cp === 0x5F) || // $ (dollar) and _ (underscore)\r\n\t            (cp >= 0x41 && cp <= 0x5A) || // A..Z\r\n\t            (cp >= 0x61 && cp <= 0x7A) || // a..z\r\n\t            (cp >= 0x30 && cp <= 0x39) || // 0..9\r\n\t            (cp === 0x5C) || // \\ (backslash)\r\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\r\n\t    },\r\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n\t    isDecimalDigit: function (cp) {\r\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\r\n\t    },\r\n\t    isHexDigit: function (cp) {\r\n\t        return (cp >= 0x30 && cp <= 0x39) || // 0..9\r\n\t            (cp >= 0x41 && cp <= 0x46) || // A..F\r\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\r\n\t    },\r\n\t    isOctalDigit: function (cp) {\r\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\r\n\t    }\r\n\t};\r\n\r\n\r\n/***/ },\r\n/* 5 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar jsx_syntax_1 = __webpack_require__(6);\r\n\tvar JSXClosingElement = /** @class */ (function () {\r\n\t    function JSXClosingElement(name) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\r\n\t        this.name = name;\r\n\t    }\r\n\t    return JSXClosingElement;\r\n\t}());\r\n\texports.JSXClosingElement = JSXClosingElement;\r\n\tvar JSXElement = /** @class */ (function () {\r\n\t    function JSXElement(openingElement, children, closingElement) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\r\n\t        this.openingElement = openingElement;\r\n\t        this.children = children;\r\n\t        this.closingElement = closingElement;\r\n\t    }\r\n\t    return JSXElement;\r\n\t}());\r\n\texports.JSXElement = JSXElement;\r\n\tvar JSXEmptyExpression = /** @class */ (function () {\r\n\t    function JSXEmptyExpression() {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\r\n\t    }\r\n\t    return JSXEmptyExpression;\r\n\t}());\r\n\texports.JSXEmptyExpression = JSXEmptyExpression;\r\n\tvar JSXExpressionContainer = /** @class */ (function () {\r\n\t    function JSXExpressionContainer(expression) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\r\n\t        this.expression = expression;\r\n\t    }\r\n\t    return JSXExpressionContainer;\r\n\t}());\r\n\texports.JSXExpressionContainer = JSXExpressionContainer;\r\n\tvar JSXIdentifier = /** @class */ (function () {\r\n\t    function JSXIdentifier(name) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\r\n\t        this.name = name;\r\n\t    }\r\n\t    return JSXIdentifier;\r\n\t}());\r\n\texports.JSXIdentifier = JSXIdentifier;\r\n\tvar JSXMemberExpression = /** @class */ (function () {\r\n\t    function JSXMemberExpression(object, property) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\r\n\t        this.object = object;\r\n\t        this.property = property;\r\n\t    }\r\n\t    return JSXMemberExpression;\r\n\t}());\r\n\texports.JSXMemberExpression = JSXMemberExpression;\r\n\tvar JSXAttribute = /** @class */ (function () {\r\n\t    function JSXAttribute(name, value) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\r\n\t        this.name = name;\r\n\t        this.value = value;\r\n\t    }\r\n\t    return JSXAttribute;\r\n\t}());\r\n\texports.JSXAttribute = JSXAttribute;\r\n\tvar JSXNamespacedName = /** @class */ (function () {\r\n\t    function JSXNamespacedName(namespace, name) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\r\n\t        this.namespace = namespace;\r\n\t        this.name = name;\r\n\t    }\r\n\t    return JSXNamespacedName;\r\n\t}());\r\n\texports.JSXNamespacedName = JSXNamespacedName;\r\n\tvar JSXOpeningElement = /** @class */ (function () {\r\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\r\n\t        this.name = name;\r\n\t        this.selfClosing = selfClosing;\r\n\t        this.attributes = attributes;\r\n\t    }\r\n\t    return JSXOpeningElement;\r\n\t}());\r\n\texports.JSXOpeningElement = JSXOpeningElement;\r\n\tvar JSXSpreadAttribute = /** @class */ (function () {\r\n\t    function JSXSpreadAttribute(argument) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return JSXSpreadAttribute;\r\n\t}());\r\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\r\n\tvar JSXText = /** @class */ (function () {\r\n\t    function JSXText(value, raw) {\r\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\r\n\t        this.value = value;\r\n\t        this.raw = raw;\r\n\t    }\r\n\t    return JSXText;\r\n\t}());\r\n\texports.JSXText = JSXText;\r\n\r\n\r\n/***/ },\r\n/* 6 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.JSXSyntax = {\r\n\t    JSXAttribute: 'JSXAttribute',\r\n\t    JSXClosingElement: 'JSXClosingElement',\r\n\t    JSXElement: 'JSXElement',\r\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\r\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\r\n\t    JSXIdentifier: 'JSXIdentifier',\r\n\t    JSXMemberExpression: 'JSXMemberExpression',\r\n\t    JSXNamespacedName: 'JSXNamespacedName',\r\n\t    JSXOpeningElement: 'JSXOpeningElement',\r\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\r\n\t    JSXText: 'JSXText'\r\n\t};\r\n\r\n\r\n/***/ },\r\n/* 7 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar syntax_1 = __webpack_require__(2);\r\n\tvar ArrayExpression = /** @class */ (function () {\r\n\t    function ArrayExpression(elements) {\r\n\t        this.type = syntax_1.Syntax.ArrayExpression;\r\n\t        this.elements = elements;\r\n\t    }\r\n\t    return ArrayExpression;\r\n\t}());\r\n\texports.ArrayExpression = ArrayExpression;\r\n\tvar ArrayPattern = /** @class */ (function () {\r\n\t    function ArrayPattern(elements) {\r\n\t        this.type = syntax_1.Syntax.ArrayPattern;\r\n\t        this.elements = elements;\r\n\t    }\r\n\t    return ArrayPattern;\r\n\t}());\r\n\texports.ArrayPattern = ArrayPattern;\r\n\tvar ArrowFunctionExpression = /** @class */ (function () {\r\n\t    function ArrowFunctionExpression(params, body, expression) {\r\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\r\n\t        this.id = null;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = false;\r\n\t        this.expression = expression;\r\n\t        this.async = false;\r\n\t    }\r\n\t    return ArrowFunctionExpression;\r\n\t}());\r\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\r\n\tvar AssignmentExpression = /** @class */ (function () {\r\n\t    function AssignmentExpression(operator, left, right) {\r\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\r\n\t        this.operator = operator;\r\n\t        this.left = left;\r\n\t        this.right = right;\r\n\t    }\r\n\t    return AssignmentExpression;\r\n\t}());\r\n\texports.AssignmentExpression = AssignmentExpression;\r\n\tvar AssignmentPattern = /** @class */ (function () {\r\n\t    function AssignmentPattern(left, right) {\r\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\r\n\t        this.left = left;\r\n\t        this.right = right;\r\n\t    }\r\n\t    return AssignmentPattern;\r\n\t}());\r\n\texports.AssignmentPattern = AssignmentPattern;\r\n\tvar AsyncArrowFunctionExpression = /** @class */ (function () {\r\n\t    function AsyncArrowFunctionExpression(params, body, expression) {\r\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\r\n\t        this.id = null;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = false;\r\n\t        this.expression = expression;\r\n\t        this.async = true;\r\n\t    }\r\n\t    return AsyncArrowFunctionExpression;\r\n\t}());\r\n\texports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\r\n\tvar AsyncFunctionDeclaration = /** @class */ (function () {\r\n\t    function AsyncFunctionDeclaration(id, params, body) {\r\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\r\n\t        this.id = id;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = false;\r\n\t        this.expression = false;\r\n\t        this.async = true;\r\n\t    }\r\n\t    return AsyncFunctionDeclaration;\r\n\t}());\r\n\texports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\r\n\tvar AsyncFunctionExpression = /** @class */ (function () {\r\n\t    function AsyncFunctionExpression(id, params, body) {\r\n\t        this.type = syntax_1.Syntax.FunctionExpression;\r\n\t        this.id = id;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = false;\r\n\t        this.expression = false;\r\n\t        this.async = true;\r\n\t    }\r\n\t    return AsyncFunctionExpression;\r\n\t}());\r\n\texports.AsyncFunctionExpression = AsyncFunctionExpression;\r\n\tvar AwaitExpression = /** @class */ (function () {\r\n\t    function AwaitExpression(argument) {\r\n\t        this.type = syntax_1.Syntax.AwaitExpression;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return AwaitExpression;\r\n\t}());\r\n\texports.AwaitExpression = AwaitExpression;\r\n\tvar BinaryExpression = /** @class */ (function () {\r\n\t    function BinaryExpression(operator, left, right) {\r\n\t        var logical = (operator === '||' || operator === '&&');\r\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\r\n\t        this.operator = operator;\r\n\t        this.left = left;\r\n\t        this.right = right;\r\n\t    }\r\n\t    return BinaryExpression;\r\n\t}());\r\n\texports.BinaryExpression = BinaryExpression;\r\n\tvar BlockStatement = /** @class */ (function () {\r\n\t    function BlockStatement(body) {\r\n\t        this.type = syntax_1.Syntax.BlockStatement;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return BlockStatement;\r\n\t}());\r\n\texports.BlockStatement = BlockStatement;\r\n\tvar BreakStatement = /** @class */ (function () {\r\n\t    function BreakStatement(label) {\r\n\t        this.type = syntax_1.Syntax.BreakStatement;\r\n\t        this.label = label;\r\n\t    }\r\n\t    return BreakStatement;\r\n\t}());\r\n\texports.BreakStatement = BreakStatement;\r\n\tvar CallExpression = /** @class */ (function () {\r\n\t    function CallExpression(callee, args) {\r\n\t        this.type = syntax_1.Syntax.CallExpression;\r\n\t        this.callee = callee;\r\n\t        this.arguments = args;\r\n\t    }\r\n\t    return CallExpression;\r\n\t}());\r\n\texports.CallExpression = CallExpression;\r\n\tvar CatchClause = /** @class */ (function () {\r\n\t    function CatchClause(param, body) {\r\n\t        this.type = syntax_1.Syntax.CatchClause;\r\n\t        this.param = param;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return CatchClause;\r\n\t}());\r\n\texports.CatchClause = CatchClause;\r\n\tvar ClassBody = /** @class */ (function () {\r\n\t    function ClassBody(body) {\r\n\t        this.type = syntax_1.Syntax.ClassBody;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return ClassBody;\r\n\t}());\r\n\texports.ClassBody = ClassBody;\r\n\tvar ClassDeclaration = /** @class */ (function () {\r\n\t    function ClassDeclaration(id, superClass, body) {\r\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\r\n\t        this.id = id;\r\n\t        this.superClass = superClass;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return ClassDeclaration;\r\n\t}());\r\n\texports.ClassDeclaration = ClassDeclaration;\r\n\tvar ClassExpression = /** @class */ (function () {\r\n\t    function ClassExpression(id, superClass, body) {\r\n\t        this.type = syntax_1.Syntax.ClassExpression;\r\n\t        this.id = id;\r\n\t        this.superClass = superClass;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return ClassExpression;\r\n\t}());\r\n\texports.ClassExpression = ClassExpression;\r\n\tvar ComputedMemberExpression = /** @class */ (function () {\r\n\t    function ComputedMemberExpression(object, property) {\r\n\t        this.type = syntax_1.Syntax.MemberExpression;\r\n\t        this.computed = true;\r\n\t        this.object = object;\r\n\t        this.property = property;\r\n\t    }\r\n\t    return ComputedMemberExpression;\r\n\t}());\r\n\texports.ComputedMemberExpression = ComputedMemberExpression;\r\n\tvar ConditionalExpression = /** @class */ (function () {\r\n\t    function ConditionalExpression(test, consequent, alternate) {\r\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\r\n\t        this.test = test;\r\n\t        this.consequent = consequent;\r\n\t        this.alternate = alternate;\r\n\t    }\r\n\t    return ConditionalExpression;\r\n\t}());\r\n\texports.ConditionalExpression = ConditionalExpression;\r\n\tvar ContinueStatement = /** @class */ (function () {\r\n\t    function ContinueStatement(label) {\r\n\t        this.type = syntax_1.Syntax.ContinueStatement;\r\n\t        this.label = label;\r\n\t    }\r\n\t    return ContinueStatement;\r\n\t}());\r\n\texports.ContinueStatement = ContinueStatement;\r\n\tvar DebuggerStatement = /** @class */ (function () {\r\n\t    function DebuggerStatement() {\r\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\r\n\t    }\r\n\t    return DebuggerStatement;\r\n\t}());\r\n\texports.DebuggerStatement = DebuggerStatement;\r\n\tvar Directive = /** @class */ (function () {\r\n\t    function Directive(expression, directive) {\r\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\r\n\t        this.expression = expression;\r\n\t        this.directive = directive;\r\n\t    }\r\n\t    return Directive;\r\n\t}());\r\n\texports.Directive = Directive;\r\n\tvar DoWhileStatement = /** @class */ (function () {\r\n\t    function DoWhileStatement(body, test) {\r\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\r\n\t        this.body = body;\r\n\t        this.test = test;\r\n\t    }\r\n\t    return DoWhileStatement;\r\n\t}());\r\n\texports.DoWhileStatement = DoWhileStatement;\r\n\tvar EmptyStatement = /** @class */ (function () {\r\n\t    function EmptyStatement() {\r\n\t        this.type = syntax_1.Syntax.EmptyStatement;\r\n\t    }\r\n\t    return EmptyStatement;\r\n\t}());\r\n\texports.EmptyStatement = EmptyStatement;\r\n\tvar ExportAllDeclaration = /** @class */ (function () {\r\n\t    function ExportAllDeclaration(source) {\r\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\r\n\t        this.source = source;\r\n\t    }\r\n\t    return ExportAllDeclaration;\r\n\t}());\r\n\texports.ExportAllDeclaration = ExportAllDeclaration;\r\n\tvar ExportDefaultDeclaration = /** @class */ (function () {\r\n\t    function ExportDefaultDeclaration(declaration) {\r\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\r\n\t        this.declaration = declaration;\r\n\t    }\r\n\t    return ExportDefaultDeclaration;\r\n\t}());\r\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\r\n\tvar ExportNamedDeclaration = /** @class */ (function () {\r\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\r\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\r\n\t        this.declaration = declaration;\r\n\t        this.specifiers = specifiers;\r\n\t        this.source = source;\r\n\t    }\r\n\t    return ExportNamedDeclaration;\r\n\t}());\r\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\r\n\tvar ExportSpecifier = /** @class */ (function () {\r\n\t    function ExportSpecifier(local, exported) {\r\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\r\n\t        this.exported = exported;\r\n\t        this.local = local;\r\n\t    }\r\n\t    return ExportSpecifier;\r\n\t}());\r\n\texports.ExportSpecifier = ExportSpecifier;\r\n\tvar ExpressionStatement = /** @class */ (function () {\r\n\t    function ExpressionStatement(expression) {\r\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\r\n\t        this.expression = expression;\r\n\t    }\r\n\t    return ExpressionStatement;\r\n\t}());\r\n\texports.ExpressionStatement = ExpressionStatement;\r\n\tvar ForInStatement = /** @class */ (function () {\r\n\t    function ForInStatement(left, right, body) {\r\n\t        this.type = syntax_1.Syntax.ForInStatement;\r\n\t        this.left = left;\r\n\t        this.right = right;\r\n\t        this.body = body;\r\n\t        this.each = false;\r\n\t    }\r\n\t    return ForInStatement;\r\n\t}());\r\n\texports.ForInStatement = ForInStatement;\r\n\tvar ForOfStatement = /** @class */ (function () {\r\n\t    function ForOfStatement(left, right, body) {\r\n\t        this.type = syntax_1.Syntax.ForOfStatement;\r\n\t        this.left = left;\r\n\t        this.right = right;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return ForOfStatement;\r\n\t}());\r\n\texports.ForOfStatement = ForOfStatement;\r\n\tvar ForStatement = /** @class */ (function () {\r\n\t    function ForStatement(init, test, update, body) {\r\n\t        this.type = syntax_1.Syntax.ForStatement;\r\n\t        this.init = init;\r\n\t        this.test = test;\r\n\t        this.update = update;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return ForStatement;\r\n\t}());\r\n\texports.ForStatement = ForStatement;\r\n\tvar FunctionDeclaration = /** @class */ (function () {\r\n\t    function FunctionDeclaration(id, params, body, generator) {\r\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\r\n\t        this.id = id;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = generator;\r\n\t        this.expression = false;\r\n\t        this.async = false;\r\n\t    }\r\n\t    return FunctionDeclaration;\r\n\t}());\r\n\texports.FunctionDeclaration = FunctionDeclaration;\r\n\tvar FunctionExpression = /** @class */ (function () {\r\n\t    function FunctionExpression(id, params, body, generator) {\r\n\t        this.type = syntax_1.Syntax.FunctionExpression;\r\n\t        this.id = id;\r\n\t        this.params = params;\r\n\t        this.body = body;\r\n\t        this.generator = generator;\r\n\t        this.expression = false;\r\n\t        this.async = false;\r\n\t    }\r\n\t    return FunctionExpression;\r\n\t}());\r\n\texports.FunctionExpression = FunctionExpression;\r\n\tvar Identifier = /** @class */ (function () {\r\n\t    function Identifier(name) {\r\n\t        this.type = syntax_1.Syntax.Identifier;\r\n\t        this.name = name;\r\n\t    }\r\n\t    return Identifier;\r\n\t}());\r\n\texports.Identifier = Identifier;\r\n\tvar IfStatement = /** @class */ (function () {\r\n\t    function IfStatement(test, consequent, alternate) {\r\n\t        this.type = syntax_1.Syntax.IfStatement;\r\n\t        this.test = test;\r\n\t        this.consequent = consequent;\r\n\t        this.alternate = alternate;\r\n\t    }\r\n\t    return IfStatement;\r\n\t}());\r\n\texports.IfStatement = IfStatement;\r\n\tvar Import = /** @class */ (function () {\r\n\t    function Import() {\r\n\t        this.type = syntax_1.Syntax.Import;\r\n\t    }\r\n\t    return Import;\r\n\t}());\r\n\texports.Import = Import;\r\n\tvar ImportDeclaration = /** @class */ (function () {\r\n\t    function ImportDeclaration(specifiers, source) {\r\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\r\n\t        this.specifiers = specifiers;\r\n\t        this.source = source;\r\n\t    }\r\n\t    return ImportDeclaration;\r\n\t}());\r\n\texports.ImportDeclaration = ImportDeclaration;\r\n\tvar ImportDefaultSpecifier = /** @class */ (function () {\r\n\t    function ImportDefaultSpecifier(local) {\r\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\r\n\t        this.local = local;\r\n\t    }\r\n\t    return ImportDefaultSpecifier;\r\n\t}());\r\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\r\n\tvar ImportNamespaceSpecifier = /** @class */ (function () {\r\n\t    function ImportNamespaceSpecifier(local) {\r\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\r\n\t        this.local = local;\r\n\t    }\r\n\t    return ImportNamespaceSpecifier;\r\n\t}());\r\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\r\n\tvar ImportSpecifier = /** @class */ (function () {\r\n\t    function ImportSpecifier(local, imported) {\r\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\r\n\t        this.local = local;\r\n\t        this.imported = imported;\r\n\t    }\r\n\t    return ImportSpecifier;\r\n\t}());\r\n\texports.ImportSpecifier = ImportSpecifier;\r\n\tvar LabeledStatement = /** @class */ (function () {\r\n\t    function LabeledStatement(label, body) {\r\n\t        this.type = syntax_1.Syntax.LabeledStatement;\r\n\t        this.label = label;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return LabeledStatement;\r\n\t}());\r\n\texports.LabeledStatement = LabeledStatement;\r\n\tvar Literal = /** @class */ (function () {\r\n\t    function Literal(value, raw) {\r\n\t        this.type = syntax_1.Syntax.Literal;\r\n\t        this.value = value;\r\n\t        this.raw = raw;\r\n\t    }\r\n\t    return Literal;\r\n\t}());\r\n\texports.Literal = Literal;\r\n\tvar MetaProperty = /** @class */ (function () {\r\n\t    function MetaProperty(meta, property) {\r\n\t        this.type = syntax_1.Syntax.MetaProperty;\r\n\t        this.meta = meta;\r\n\t        this.property = property;\r\n\t    }\r\n\t    return MetaProperty;\r\n\t}());\r\n\texports.MetaProperty = MetaProperty;\r\n\tvar MethodDefinition = /** @class */ (function () {\r\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\r\n\t        this.type = syntax_1.Syntax.MethodDefinition;\r\n\t        this.key = key;\r\n\t        this.computed = computed;\r\n\t        this.value = value;\r\n\t        this.kind = kind;\r\n\t        this.static = isStatic;\r\n\t    }\r\n\t    return MethodDefinition;\r\n\t}());\r\n\texports.MethodDefinition = MethodDefinition;\r\n\tvar Module = /** @class */ (function () {\r\n\t    function Module(body) {\r\n\t        this.type = syntax_1.Syntax.Program;\r\n\t        this.body = body;\r\n\t        this.sourceType = 'module';\r\n\t    }\r\n\t    return Module;\r\n\t}());\r\n\texports.Module = Module;\r\n\tvar NewExpression = /** @class */ (function () {\r\n\t    function NewExpression(callee, args) {\r\n\t        this.type = syntax_1.Syntax.NewExpression;\r\n\t        this.callee = callee;\r\n\t        this.arguments = args;\r\n\t    }\r\n\t    return NewExpression;\r\n\t}());\r\n\texports.NewExpression = NewExpression;\r\n\tvar ObjectExpression = /** @class */ (function () {\r\n\t    function ObjectExpression(properties) {\r\n\t        this.type = syntax_1.Syntax.ObjectExpression;\r\n\t        this.properties = properties;\r\n\t    }\r\n\t    return ObjectExpression;\r\n\t}());\r\n\texports.ObjectExpression = ObjectExpression;\r\n\tvar ObjectPattern = /** @class */ (function () {\r\n\t    function ObjectPattern(properties) {\r\n\t        this.type = syntax_1.Syntax.ObjectPattern;\r\n\t        this.properties = properties;\r\n\t    }\r\n\t    return ObjectPattern;\r\n\t}());\r\n\texports.ObjectPattern = ObjectPattern;\r\n\tvar Property = /** @class */ (function () {\r\n\t    function Property(kind, key, computed, value, method, shorthand) {\r\n\t        this.type = syntax_1.Syntax.Property;\r\n\t        this.key = key;\r\n\t        this.computed = computed;\r\n\t        this.value = value;\r\n\t        this.kind = kind;\r\n\t        this.method = method;\r\n\t        this.shorthand = shorthand;\r\n\t    }\r\n\t    return Property;\r\n\t}());\r\n\texports.Property = Property;\r\n\tvar RegexLiteral = /** @class */ (function () {\r\n\t    function RegexLiteral(value, raw, pattern, flags) {\r\n\t        this.type = syntax_1.Syntax.Literal;\r\n\t        this.value = value;\r\n\t        this.raw = raw;\r\n\t        this.regex = { pattern: pattern, flags: flags };\r\n\t    }\r\n\t    return RegexLiteral;\r\n\t}());\r\n\texports.RegexLiteral = RegexLiteral;\r\n\tvar RestElement = /** @class */ (function () {\r\n\t    function RestElement(argument) {\r\n\t        this.type = syntax_1.Syntax.RestElement;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return RestElement;\r\n\t}());\r\n\texports.RestElement = RestElement;\r\n\tvar ReturnStatement = /** @class */ (function () {\r\n\t    function ReturnStatement(argument) {\r\n\t        this.type = syntax_1.Syntax.ReturnStatement;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return ReturnStatement;\r\n\t}());\r\n\texports.ReturnStatement = ReturnStatement;\r\n\tvar Script = /** @class */ (function () {\r\n\t    function Script(body) {\r\n\t        this.type = syntax_1.Syntax.Program;\r\n\t        this.body = body;\r\n\t        this.sourceType = 'script';\r\n\t    }\r\n\t    return Script;\r\n\t}());\r\n\texports.Script = Script;\r\n\tvar SequenceExpression = /** @class */ (function () {\r\n\t    function SequenceExpression(expressions) {\r\n\t        this.type = syntax_1.Syntax.SequenceExpression;\r\n\t        this.expressions = expressions;\r\n\t    }\r\n\t    return SequenceExpression;\r\n\t}());\r\n\texports.SequenceExpression = SequenceExpression;\r\n\tvar SpreadElement = /** @class */ (function () {\r\n\t    function SpreadElement(argument) {\r\n\t        this.type = syntax_1.Syntax.SpreadElement;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return SpreadElement;\r\n\t}());\r\n\texports.SpreadElement = SpreadElement;\r\n\tvar StaticMemberExpression = /** @class */ (function () {\r\n\t    function StaticMemberExpression(object, property) {\r\n\t        this.type = syntax_1.Syntax.MemberExpression;\r\n\t        this.computed = false;\r\n\t        this.object = object;\r\n\t        this.property = property;\r\n\t    }\r\n\t    return StaticMemberExpression;\r\n\t}());\r\n\texports.StaticMemberExpression = StaticMemberExpression;\r\n\tvar Super = /** @class */ (function () {\r\n\t    function Super() {\r\n\t        this.type = syntax_1.Syntax.Super;\r\n\t    }\r\n\t    return Super;\r\n\t}());\r\n\texports.Super = Super;\r\n\tvar SwitchCase = /** @class */ (function () {\r\n\t    function SwitchCase(test, consequent) {\r\n\t        this.type = syntax_1.Syntax.SwitchCase;\r\n\t        this.test = test;\r\n\t        this.consequent = consequent;\r\n\t    }\r\n\t    return SwitchCase;\r\n\t}());\r\n\texports.SwitchCase = SwitchCase;\r\n\tvar SwitchStatement = /** @class */ (function () {\r\n\t    function SwitchStatement(discriminant, cases) {\r\n\t        this.type = syntax_1.Syntax.SwitchStatement;\r\n\t        this.discriminant = discriminant;\r\n\t        this.cases = cases;\r\n\t    }\r\n\t    return SwitchStatement;\r\n\t}());\r\n\texports.SwitchStatement = SwitchStatement;\r\n\tvar TaggedTemplateExpression = /** @class */ (function () {\r\n\t    function TaggedTemplateExpression(tag, quasi) {\r\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\r\n\t        this.tag = tag;\r\n\t        this.quasi = quasi;\r\n\t    }\r\n\t    return TaggedTemplateExpression;\r\n\t}());\r\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\r\n\tvar TemplateElement = /** @class */ (function () {\r\n\t    function TemplateElement(value, tail) {\r\n\t        this.type = syntax_1.Syntax.TemplateElement;\r\n\t        this.value = value;\r\n\t        this.tail = tail;\r\n\t    }\r\n\t    return TemplateElement;\r\n\t}());\r\n\texports.TemplateElement = TemplateElement;\r\n\tvar TemplateLiteral = /** @class */ (function () {\r\n\t    function TemplateLiteral(quasis, expressions) {\r\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\r\n\t        this.quasis = quasis;\r\n\t        this.expressions = expressions;\r\n\t    }\r\n\t    return TemplateLiteral;\r\n\t}());\r\n\texports.TemplateLiteral = TemplateLiteral;\r\n\tvar ThisExpression = /** @class */ (function () {\r\n\t    function ThisExpression() {\r\n\t        this.type = syntax_1.Syntax.ThisExpression;\r\n\t    }\r\n\t    return ThisExpression;\r\n\t}());\r\n\texports.ThisExpression = ThisExpression;\r\n\tvar ThrowStatement = /** @class */ (function () {\r\n\t    function ThrowStatement(argument) {\r\n\t        this.type = syntax_1.Syntax.ThrowStatement;\r\n\t        this.argument = argument;\r\n\t    }\r\n\t    return ThrowStatement;\r\n\t}());\r\n\texports.ThrowStatement = ThrowStatement;\r\n\tvar TryStatement = /** @class */ (function () {\r\n\t    function TryStatement(block, handler, finalizer) {\r\n\t        this.type = syntax_1.Syntax.TryStatement;\r\n\t        this.block = block;\r\n\t        this.handler = handler;\r\n\t        this.finalizer = finalizer;\r\n\t    }\r\n\t    return TryStatement;\r\n\t}());\r\n\texports.TryStatement = TryStatement;\r\n\tvar UnaryExpression = /** @class */ (function () {\r\n\t    function UnaryExpression(operator, argument) {\r\n\t        this.type = syntax_1.Syntax.UnaryExpression;\r\n\t        this.operator = operator;\r\n\t        this.argument = argument;\r\n\t        this.prefix = true;\r\n\t    }\r\n\t    return UnaryExpression;\r\n\t}());\r\n\texports.UnaryExpression = UnaryExpression;\r\n\tvar UpdateExpression = /** @class */ (function () {\r\n\t    function UpdateExpression(operator, argument, prefix) {\r\n\t        this.type = syntax_1.Syntax.UpdateExpression;\r\n\t        this.operator = operator;\r\n\t        this.argument = argument;\r\n\t        this.prefix = prefix;\r\n\t    }\r\n\t    return UpdateExpression;\r\n\t}());\r\n\texports.UpdateExpression = UpdateExpression;\r\n\tvar VariableDeclaration = /** @class */ (function () {\r\n\t    function VariableDeclaration(declarations, kind) {\r\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\r\n\t        this.declarations = declarations;\r\n\t        this.kind = kind;\r\n\t    }\r\n\t    return VariableDeclaration;\r\n\t}());\r\n\texports.VariableDeclaration = VariableDeclaration;\r\n\tvar VariableDeclarator = /** @class */ (function () {\r\n\t    function VariableDeclarator(id, init) {\r\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\r\n\t        this.id = id;\r\n\t        this.init = init;\r\n\t    }\r\n\t    return VariableDeclarator;\r\n\t}());\r\n\texports.VariableDeclarator = VariableDeclarator;\r\n\tvar WhileStatement = /** @class */ (function () {\r\n\t    function WhileStatement(test, body) {\r\n\t        this.type = syntax_1.Syntax.WhileStatement;\r\n\t        this.test = test;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return WhileStatement;\r\n\t}());\r\n\texports.WhileStatement = WhileStatement;\r\n\tvar WithStatement = /** @class */ (function () {\r\n\t    function WithStatement(object, body) {\r\n\t        this.type = syntax_1.Syntax.WithStatement;\r\n\t        this.object = object;\r\n\t        this.body = body;\r\n\t    }\r\n\t    return WithStatement;\r\n\t}());\r\n\texports.WithStatement = WithStatement;\r\n\tvar YieldExpression = /** @class */ (function () {\r\n\t    function YieldExpression(argument, delegate) {\r\n\t        this.type = syntax_1.Syntax.YieldExpression;\r\n\t        this.argument = argument;\r\n\t        this.delegate = delegate;\r\n\t    }\r\n\t    return YieldExpression;\r\n\t}());\r\n\texports.YieldExpression = YieldExpression;\r\n\r\n\r\n/***/ },\r\n/* 8 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar assert_1 = __webpack_require__(9);\r\n\tvar error_handler_1 = __webpack_require__(10);\r\n\tvar messages_1 = __webpack_require__(11);\r\n\tvar Node = __webpack_require__(7);\r\n\tvar scanner_1 = __webpack_require__(12);\r\n\tvar syntax_1 = __webpack_require__(2);\r\n\tvar token_1 = __webpack_require__(13);\r\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\r\n\t/* eslint-disable @typescript-eslint/unbound-method */\r\n\tvar Parser = /** @class */ (function () {\r\n\t    function Parser(code, options, delegate) {\r\n\t        if (options === void 0) { options = {}; }\r\n\t        this.config = {\r\n\t            range: (typeof options.range === 'boolean') && options.range,\r\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\r\n\t            source: null,\r\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\r\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\r\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\r\n\t        };\r\n\t        if (this.config.loc && options.source && options.source !== null) {\r\n\t            this.config.source = String(options.source);\r\n\t        }\r\n\t        this.delegate = delegate;\r\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\r\n\t        this.errorHandler.tolerant = this.config.tolerant;\r\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\r\n\t        this.scanner.trackComment = this.config.comment;\r\n\t        this.operatorPrecedence = {\r\n\t            ')': 0,\r\n\t            ';': 0,\r\n\t            ',': 0,\r\n\t            '=': 0,\r\n\t            ']': 0,\r\n\t            '||': 1,\r\n\t            '&&': 2,\r\n\t            '|': 3,\r\n\t            '^': 4,\r\n\t            '&': 5,\r\n\t            '==': 6,\r\n\t            '!=': 6,\r\n\t            '===': 6,\r\n\t            '!==': 6,\r\n\t            '<': 7,\r\n\t            '>': 7,\r\n\t            '<=': 7,\r\n\t            '>=': 7,\r\n\t            '<<': 8,\r\n\t            '>>': 8,\r\n\t            '>>>': 8,\r\n\t            '+': 9,\r\n\t            '-': 9,\r\n\t            '*': 11,\r\n\t            '/': 11,\r\n\t            '%': 11\r\n\t        };\r\n\t        this.lookahead = {\r\n\t            type: 2 /* EOF */,\r\n\t            value: '',\r\n\t            lineNumber: this.scanner.lineNumber,\r\n\t            lineStart: 0,\r\n\t            start: 0,\r\n\t            end: 0\r\n\t        };\r\n\t        this.hasLineTerminator = false;\r\n\t        this.context = {\r\n\t            isModule: false,\r\n\t            await: false,\r\n\t            allowIn: true,\r\n\t            allowStrictDirective: true,\r\n\t            allowYield: true,\r\n\t            firstCoverInitializedNameError: null,\r\n\t            isAssignmentTarget: false,\r\n\t            isBindingElement: false,\r\n\t            inFunctionBody: false,\r\n\t            inIteration: false,\r\n\t            inSwitch: false,\r\n\t            labelSet: {},\r\n\t            strict: false\r\n\t        };\r\n\t        this.tokens = [];\r\n\t        this.startMarker = {\r\n\t            index: 0,\r\n\t            line: this.scanner.lineNumber,\r\n\t            column: 0\r\n\t        };\r\n\t        this.lastMarker = {\r\n\t            index: 0,\r\n\t            line: this.scanner.lineNumber,\r\n\t            column: 0\r\n\t        };\r\n\t        this.nextToken();\r\n\t        this.lastMarker = {\r\n\t            index: this.scanner.index,\r\n\t            line: this.scanner.lineNumber,\r\n\t            column: this.scanner.index - this.scanner.lineStart\r\n\t        };\r\n\t    }\r\n\t    Parser.prototype.throwError = function (messageFormat) {\r\n\t        var values = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            values[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        var args = values.slice();\r\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\r\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\r\n\t            return args[idx];\r\n\t        });\r\n\t        var index = this.lastMarker.index;\r\n\t        var line = this.lastMarker.line;\r\n\t        var column = this.lastMarker.column + 1;\r\n\t        throw this.errorHandler.createError(index, line, column, msg);\r\n\t    };\r\n\t    Parser.prototype.tolerateError = function (messageFormat) {\r\n\t        var values = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            values[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        var args = values.slice();\r\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\r\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\r\n\t            return args[idx];\r\n\t        });\r\n\t        var index = this.lastMarker.index;\r\n\t        var line = this.scanner.lineNumber;\r\n\t        var column = this.lastMarker.column + 1;\r\n\t        this.errorHandler.tolerateError(index, line, column, msg);\r\n\t    };\r\n\t    // Throw an exception because of the token.\r\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\r\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\r\n\t        var value;\r\n\t        if (token) {\r\n\t            if (!message) {\r\n\t                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :\r\n\t                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :\r\n\t                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :\r\n\t                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :\r\n\t                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :\r\n\t                                    messages_1.Messages.UnexpectedToken;\r\n\t                if (token.type === 4 /* Keyword */) {\r\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\r\n\t                        msg = messages_1.Messages.UnexpectedReserved;\r\n\t                    }\r\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\r\n\t                        msg = messages_1.Messages.StrictReservedWord;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            value = token.value;\r\n\t        }\r\n\t        else {\r\n\t            value = 'ILLEGAL';\r\n\t        }\r\n\t        msg = msg.replace('%0', value);\r\n\t        if (token && typeof token.lineNumber === 'number') {\r\n\t            var index = token.start;\r\n\t            var line = token.lineNumber;\r\n\t            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\r\n\t            var column = token.start - lastMarkerLineStart + 1;\r\n\t            return this.errorHandler.createError(index, line, column, msg);\r\n\t        }\r\n\t        else {\r\n\t            var index = this.lastMarker.index;\r\n\t            var line = this.lastMarker.line;\r\n\t            var column = this.lastMarker.column + 1;\r\n\t            return this.errorHandler.createError(index, line, column, msg);\r\n\t        }\r\n\t    };\r\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\r\n\t        throw this.unexpectedTokenError(token, message);\r\n\t    };\r\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\r\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\r\n\t    };\r\n\t    Parser.prototype.collectComments = function () {\r\n\t        if (!this.config.comment) {\r\n\t            this.scanner.scanComments();\r\n\t        }\r\n\t        else {\r\n\t            var comments = this.scanner.scanComments();\r\n\t            if (comments.length > 0 && this.delegate) {\r\n\t                for (var i = 0; i < comments.length; ++i) {\r\n\t                    var e = comments[i];\r\n\t                    var node = {\r\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\r\n\t                    };\r\n\t                    if (this.config.range) {\r\n\t                        node.range = e.range;\r\n\t                    }\r\n\t                    if (this.config.loc) {\r\n\t                        node.loc = e.loc;\r\n\t                    }\r\n\t                    var metadata = {\r\n\t                        start: {\r\n\t                            line: e.loc.start.line,\r\n\t                            column: e.loc.start.column,\r\n\t                            offset: e.range[0]\r\n\t                        },\r\n\t                        end: {\r\n\t                            line: e.loc.end.line,\r\n\t                            column: e.loc.end.column,\r\n\t                            offset: e.range[1]\r\n\t                        }\r\n\t                    };\r\n\t                    this.delegate(node, metadata);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    // From internal representation to an external structure\r\n\t    Parser.prototype.getTokenRaw = function (token) {\r\n\t        return this.scanner.source.slice(token.start, token.end);\r\n\t    };\r\n\t    Parser.prototype.convertToken = function (token) {\r\n\t        var t = {\r\n\t            type: token_1.TokenName[token.type],\r\n\t            value: this.getTokenRaw(token)\r\n\t        };\r\n\t        if (this.config.range) {\r\n\t            t.range = [token.start, token.end];\r\n\t        }\r\n\t        if (this.config.loc) {\r\n\t            t.loc = {\r\n\t                start: {\r\n\t                    line: this.startMarker.line,\r\n\t                    column: this.startMarker.column\r\n\t                },\r\n\t                end: {\r\n\t                    line: this.scanner.lineNumber,\r\n\t                    column: this.scanner.index - this.scanner.lineStart\r\n\t                }\r\n\t            };\r\n\t        }\r\n\t        if (token.type === 9 /* RegularExpression */) {\r\n\t            var pattern = token.pattern;\r\n\t            var flags = token.flags;\r\n\t            t.regex = { pattern: pattern, flags: flags };\r\n\t        }\r\n\t        return t;\r\n\t    };\r\n\t    Parser.prototype.nextToken = function () {\r\n\t        var token = this.lookahead;\r\n\t        this.lastMarker.index = this.scanner.index;\r\n\t        this.lastMarker.line = this.scanner.lineNumber;\r\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        this.collectComments();\r\n\t        if (this.scanner.index !== this.startMarker.index) {\r\n\t            this.startMarker.index = this.scanner.index;\r\n\t            this.startMarker.line = this.scanner.lineNumber;\r\n\t            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\t        }\r\n\t\t\tvar next = this.scanner.lex();\r\n\t        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\r\n\t        if (next && this.context.strict && next.type === 3 /* Identifier */) {\r\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\r\n\t                next.type = 4 /* Keyword */;\r\n\t            }\r\n\t        }\r\n\t        this.lookahead = next;\r\n\t        if (this.config.tokens && next.type !== 2 /* EOF */) {\r\n\t            this.tokens.push(this.convertToken(next));\r\n\t        }\r\n\t        return token;\r\n\t    };\r\n\t    Parser.prototype.nextRegexToken = function () {\r\n\t\t\tthis.collectComments();\r\n\t        var token = this.scanner.scanRegExp();\r\n\t        if (this.config.tokens) {\r\n\t            // Pop the previous token, '/' or '/='\r\n\t            // This is added from the lookahead token.\r\n\t            this.tokens.pop();\r\n\t            this.tokens.push(this.convertToken(token));\r\n\t        }\r\n\t        // Prime the next lookahead.\r\n\t        this.lookahead = token;\r\n\t        this.nextToken();\r\n\t        return token;\r\n\t    };\r\n\t    Parser.prototype.createNode = function () {\r\n\t        return {\r\n\t            index: this.startMarker.index,\r\n\t            line: this.startMarker.line,\r\n\t            column: this.startMarker.column\r\n\t        };\r\n\t    };\r\n\t    Parser.prototype.startNode = function (token, lastLineStart) {\r\n\t        if (lastLineStart === void 0) { lastLineStart = 0; }\r\n\t        var column = token.start - token.lineStart;\r\n\t        var line = token.lineNumber;\r\n\t        if (column < 0) {\r\n\t            column += lastLineStart;\r\n\t            line--;\r\n\t        }\r\n\t        return {\r\n\t            index: token.start,\r\n\t            line: line,\r\n\t            column: column\r\n\t        };\r\n\t    };\r\n\t    Parser.prototype.finalize = function (marker, node) {\r\n\t        if (this.config.range) {\r\n\t            node.range = [marker.index, this.lastMarker.index];\r\n\t        }\r\n\t        if (this.config.loc) {\r\n\t            node.loc = {\r\n\t                start: {\r\n\t                    line: marker.line,\r\n\t                    column: marker.column,\r\n\t                },\r\n\t                end: {\r\n\t                    line: this.lastMarker.line,\r\n\t                    column: this.lastMarker.column\r\n\t                }\r\n\t            };\r\n\t            if (this.config.source) {\r\n\t                node.loc.source = this.config.source;\r\n\t            }\r\n\t        }\r\n\t        if (this.delegate) {\r\n\t            var metadata = {\r\n\t                start: {\r\n\t                    line: marker.line,\r\n\t                    column: marker.column,\r\n\t                    offset: marker.index\r\n\t                },\r\n\t                end: {\r\n\t                    line: this.lastMarker.line,\r\n\t                    column: this.lastMarker.column,\r\n\t                    offset: this.lastMarker.index\r\n\t                }\r\n\t            };\r\n\t            this.delegate(node, metadata);\r\n\t        }\r\n\t        return node;\r\n\t    };\r\n\t    // Expect the next token to match the specified punctuator.\r\n\t    // If not, an exception will be thrown.\r\n\t    Parser.prototype.expect = function (value) {\r\n\t        var token = this.nextToken();\r\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t    };\r\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\r\n\t    Parser.prototype.expectCommaSeparator = function () {\r\n\t        if (this.config.tolerant) {\r\n\t            var token = this.lookahead;\r\n\t            if (token.type === 7 /* Punctuator */ && token.value === ',') {\r\n\t                this.nextToken();\r\n\t            }\r\n\t            else if (token.type === 7 /* Punctuator */ && token.value === ';') {\r\n\t                this.nextToken();\r\n\t                this.tolerateUnexpectedToken(token);\r\n\t            }\r\n\t            else {\r\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            this.expect(',');\r\n\t        }\r\n\t    };\r\n\t    // Expect the next token to match the specified keyword.\r\n\t    // If not, an exception will be thrown.\r\n\t    Parser.prototype.expectKeyword = function (keyword) {\r\n\t        var token = this.nextToken();\r\n\t        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t    };\r\n\t    // Return true if the next token matches the specified punctuator.\r\n\t    Parser.prototype.match = function (value) {\r\n\t        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\r\n\t    };\r\n\t    // Return true if the next token matches the specified keyword\r\n\t    Parser.prototype.matchKeyword = function (keyword) {\r\n\t        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\r\n\t    };\r\n\t    // Return true if the next token matches the specified contextual keyword\r\n\t    // (where an identifier is sometimes a keyword depending on the context)\r\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\r\n\t        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\r\n\t    };\r\n\t    // Return true if the next token is an assignment operator\r\n\t    Parser.prototype.matchAssign = function () {\r\n\t        if (this.lookahead.type !== 7 /* Punctuator */) {\r\n\t            return false;\r\n\t        }\r\n\t        var op = this.lookahead.value;\r\n\t        return op === '=' ||\r\n\t            op === '*=' ||\r\n\t            op === '**=' ||\r\n\t            op === '/=' ||\r\n\t            op === '%=' ||\r\n\t            op === '+=' ||\r\n\t            op === '-=' ||\r\n\t            op === '<<=' ||\r\n\t            op === '>>=' ||\r\n\t            op === '>>>=' ||\r\n\t            op === '&=' ||\r\n\t            op === '^=' ||\r\n\t            op === '|=';\r\n\t    };\r\n\t    // Cover grammar support.\r\n\t    //\r\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\r\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\r\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\r\n\t    //\r\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\r\n\t    // after the outermost pair is closed. They are:\r\n\t    //\r\n\t    //   1. AssignmentExpression\r\n\t    //   2. BindingElements\r\n\t    //   3. AssignmentTargets\r\n\t    //\r\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\r\n\t    // binding element or assignment target.\r\n\t    //\r\n\t    // The three productions have the relationship:\r\n\t    //\r\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\r\n\t    //\r\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\r\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\r\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\r\n\t    //\r\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\r\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\r\n\t    // the CoverInitializedName check is conducted.\r\n\t    //\r\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\r\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\r\n\t    // pattern. The CoverInitializedName check is deferred.\r\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\r\n\t        var previousIsBindingElement = this.context.isBindingElement;\r\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n\t        this.context.isBindingElement = true;\r\n\t        this.context.isAssignmentTarget = true;\r\n\t        this.context.firstCoverInitializedNameError = null;\r\n\t        var result = parseFunction.call(this);\r\n\t        if (this.context.firstCoverInitializedNameError !== null) {\r\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\r\n\t        }\r\n\t        this.context.isBindingElement = previousIsBindingElement;\r\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\r\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\r\n\t        return result;\r\n\t    };\r\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\r\n\t        var previousIsBindingElement = this.context.isBindingElement;\r\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n\t        this.context.isBindingElement = true;\r\n\t        this.context.isAssignmentTarget = true;\r\n\t        this.context.firstCoverInitializedNameError = null;\r\n\t        var result = parseFunction.call(this);\r\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\r\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\r\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\r\n\t        return result;\r\n\t    };\r\n\t    Parser.prototype.consumeSemicolon = function () {\r\n\t        if (this.match(';')) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        else if (!this.hasLineTerminator) {\r\n\t            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\r\n\t                this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t            this.lastMarker.index = this.startMarker.index;\r\n\t            this.lastMarker.line = this.startMarker.line;\r\n\t            this.lastMarker.column = this.startMarker.column;\r\n\t        }\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-primary-expression\r\n\t    Parser.prototype.parsePrimaryExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        var expr;\r\n\t        var token, raw;\r\n\t        switch (this.lookahead.type) {\r\n\t            case 3 /* Identifier */:\r\n\t                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\r\n\t                    this.tolerateUnexpectedToken(this.lookahead);\r\n\t                }\r\n\t                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\r\n\t                break;\r\n\t            case 6 /* NumericLiteral */:\r\n\t            case 8 /* StringLiteral */:\r\n\t                if (this.context.strict && this.lookahead.octal) {\r\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\r\n\t                }\r\n\t                this.context.isAssignmentTarget = false;\r\n\t                this.context.isBindingElement = false;\r\n\t                token = this.nextToken();\r\n\t                raw = this.getTokenRaw(token);\r\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\r\n\t                break;\r\n\t            case 1 /* BooleanLiteral */:\r\n\t                this.context.isAssignmentTarget = false;\r\n\t                this.context.isBindingElement = false;\r\n\t                token = this.nextToken();\r\n\t                raw = this.getTokenRaw(token);\r\n\t                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\r\n\t                break;\r\n\t            case 5 /* NullLiteral */:\r\n\t                this.context.isAssignmentTarget = false;\r\n\t                this.context.isBindingElement = false;\r\n\t                token = this.nextToken();\r\n\t                raw = this.getTokenRaw(token);\r\n\t                expr = this.finalize(node, new Node.Literal(null, raw));\r\n\t                break;\r\n\t            case 10 /* Template */:\r\n\t                expr = this.parseTemplateLiteral();\r\n\t                break;\r\n\t            case 7 /* Punctuator */:\r\n\t                switch (this.lookahead.value) {\r\n\t                    case '(':\r\n\t                        this.context.isBindingElement = false;\r\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\r\n\t                        break;\r\n\t                    case '[':\r\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\r\n\t                        break;\r\n\t                    case '{':\r\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\r\n\t                        break;\r\n\t                    case '/':\r\n\t                    case '/=':\r\n\t                        this.context.isAssignmentTarget = false;\r\n\t                        this.context.isBindingElement = false;\r\n\t                        this.scanner.index = this.startMarker.index;\r\n\t                        token = this.nextRegexToken();\r\n\t                        raw = this.getTokenRaw(token);\r\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\r\n\t                        break;\r\n\t                    default:\r\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\r\n\t                }\r\n\t                break;\r\n\t            case 4 /* Keyword */:\r\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\r\n\t                    expr = this.parseIdentifierName();\r\n\t                }\r\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\r\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\r\n\t                }\r\n\t                else {\r\n\t                    this.context.isAssignmentTarget = false;\r\n\t                    this.context.isBindingElement = false;\r\n\t                    if (this.matchKeyword('function')) {\r\n\t                        expr = this.parseFunctionExpression();\r\n\t                    }\r\n\t                    else if (this.matchKeyword('this')) {\r\n\t                        this.nextToken();\r\n\t                        expr = this.finalize(node, new Node.ThisExpression());\r\n\t                    }\r\n\t                    else if (this.matchKeyword('class')) {\r\n\t                        expr = this.parseClassExpression();\r\n\t                    }\r\n\t                    else if (this.matchImportCall()) {\r\n\t                        expr = this.parseImportCall();\r\n\t                    }\r\n\t                    else {\r\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                expr = this.throwUnexpectedToken(this.nextToken());\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-array-initializer\r\n\t    Parser.prototype.parseSpreadElement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect('...');\r\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\t        return this.finalize(node, new Node.SpreadElement(arg));\r\n\t    };\r\n\t    Parser.prototype.parseArrayInitializer = function () {\r\n\t        var node = this.createNode();\r\n\t        var elements = [];\r\n\t        this.expect('[');\r\n\t        while (!this.match(']')) {\r\n\t            if (this.match(',')) {\r\n\t                this.nextToken();\r\n\t                elements.push(null);\r\n\t            }\r\n\t            else if (this.match('...')) {\r\n\t                var element = this.parseSpreadElement();\r\n\t                if (!this.match(']')) {\r\n\t                    this.context.isAssignmentTarget = false;\r\n\t                    this.context.isBindingElement = false;\r\n\t                    this.expect(',');\r\n\t                }\r\n\t                elements.push(element);\r\n\t            }\r\n\t            else {\r\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n\t                if (!this.match(']')) {\r\n\t                    this.expect(',');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this.expect(']');\r\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-object-initializer\r\n\t    Parser.prototype.parsePropertyMethod = function (params) {\r\n\t        this.context.isAssignmentTarget = false;\r\n\t        this.context.isBindingElement = false;\r\n\t        var previousStrict = this.context.strict;\r\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\r\n\t        this.context.allowStrictDirective = params.simple;\r\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\r\n\t        if (this.context.strict && params.firstRestricted) {\r\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\r\n\t        }\r\n\t        if (this.context.strict && params.stricted) {\r\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\r\n\t        }\r\n\t        this.context.strict = previousStrict;\r\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n\t        return body;\r\n\t    };\r\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\r\n\t        var isGenerator = false;\r\n\t        var node = this.createNode();\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.allowYield = true;\r\n\t        var params = this.parseFormalParameters();\r\n\t        var method = this.parsePropertyMethod(params);\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\r\n\t    };\r\n\t    Parser.prototype.parsePropertyMethodAsyncFunction = function () {\r\n\t        var node = this.createNode();\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        var previousAwait = this.context.await;\r\n\t        this.context.allowYield = false;\r\n\t        this.context.await = true;\r\n\t        var params = this.parseFormalParameters();\r\n\t        var method = this.parsePropertyMethod(params);\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        this.context.await = previousAwait;\r\n\t        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\r\n\t    };\r\n\t    Parser.prototype.parseObjectPropertyKey = function () {\r\n\t        var node = this.createNode();\r\n\t        var token = this.nextToken();\r\n\t\t\tvar key;\r\n\t        switch (token.type) {\r\n\t            case 8 /* StringLiteral */:\r\n\t            case 6 /* NumericLiteral */:\r\n\t                if (this.context.strict && token.octal) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\r\n\t                }\r\n\t                var raw = this.getTokenRaw(token);\r\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\r\n\t                break;\r\n\t            case 3 /* Identifier */:\r\n\t            case 1 /* BooleanLiteral */:\r\n\t            case 5 /* NullLiteral */:\r\n\t            case 4 /* Keyword */:\r\n\t                key = this.finalize(node, new Node.Identifier(token.value));\r\n\t                break;\r\n\t            case 7 /* Punctuator */:\r\n\t                if (token.value === '[') {\r\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                    this.expect(']');\r\n\t                }\r\n\t                else {\r\n\t                    key = this.throwUnexpectedToken(token);\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                key = this.throwUnexpectedToken(token);\r\n\t        }\r\n\t        return key;\r\n\t    };\r\n\t    Parser.prototype.isPropertyKey = function (key, value) {\r\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\r\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\r\n\t    };\r\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\r\n\t        var node = this.createNode();\r\n\t        var token = this.lookahead;\r\n\t        var kind;\r\n\t        var key = null;\r\n\t        var value = null;\r\n\t        var computed = false;\r\n\t        var method = false;\r\n\t        var shorthand = false;\r\n\t        var isAsync = false;\r\n\t        if (token.type === 3 /* Identifier */) {\r\n\t\t\t\tvar id = token.value;\r\n\t            this.nextToken();\r\n\t            computed = this.match('[');\r\n\t            isAsync = !this.hasLineTerminator && (id === 'async') &&\r\n\t                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\r\n\t            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\r\n\t        }\r\n\t        else if (this.match('*')) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        else {\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t        }\r\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n\t        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\r\n\t            kind = 'get';\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            this.context.allowYield = false;\r\n\t            value = this.parseGetterMethod();\r\n\t        }\r\n\t        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\r\n\t            kind = 'set';\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            value = this.parseSetterMethod();\r\n\t        }\r\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\r\n\t            kind = 'init';\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            value = this.parseGeneratorMethod();\r\n\t            method = true;\r\n\t        }\r\n\t        else {\r\n\t            if (!key) {\r\n\t                this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t            kind = 'init';\r\n\t            if (this.match(':') && !isAsync) {\r\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\r\n\t                    if (hasProto.value) {\r\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\r\n\t                    }\r\n\t                    hasProto.value = true;\r\n\t                }\r\n\t                this.nextToken();\r\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\t            }\r\n\t            else if (this.match('(')) {\r\n\t                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\r\n\t                method = true;\r\n\t            }\r\n\t            else if (token.type === 3 /* Identifier */) {\r\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\r\n\t                if (this.match('=')) {\r\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\r\n\t                    this.nextToken();\r\n\t                    shorthand = true;\r\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\r\n\t                }\r\n\t                else {\r\n\t                    shorthand = true;\r\n\t                    value = id;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this.throwUnexpectedToken(this.nextToken());\r\n\t            }\r\n\t        }\r\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\r\n\t    };\r\n\t    Parser.prototype.parseObjectInitializer = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect('{');\r\n\t        var properties = [];\r\n\t        var hasProto = { value: false };\r\n\t        while (!this.match('}')) {\r\n\t            properties.push(this.match('...') ? this.parseSpreadElement() : this.parseObjectProperty(hasProto));\r\n\t            if (!this.match('}')) {\r\n\t                this.expectCommaSeparator();\r\n\t            }\r\n\t        }\r\n\t        this.expect('}');\r\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-template-literals\r\n\t    Parser.prototype.parseTemplateHead = function () {\r\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\r\n\t        var node = this.createNode();\r\n\t        var token = this.nextToken();\r\n\t        var raw = token.value;\r\n\t        var cooked = token.cooked;\r\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\r\n\t    };\r\n\t    Parser.prototype.parseTemplateElement = function () {\r\n\t        if (this.lookahead.type !== 10 /* Template */) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        var node = this.createNode();\r\n\t        var token = this.nextToken();\r\n\t        var raw = token.value;\r\n\t        var cooked = token.cooked;\r\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\r\n\t    };\r\n\t    Parser.prototype.parseTemplateLiteral = function () {\r\n\t        var node = this.createNode();\r\n\t        var expressions = [];\r\n\t        var quasis = [];\r\n\t        var quasi = this.parseTemplateHead();\r\n\t        quasis.push(quasi);\r\n\t        while (!quasi.tail) {\r\n\t            expressions.push(this.parseExpression());\r\n\t            quasi = this.parseTemplateElement();\r\n\t            quasis.push(quasi);\r\n\t        }\r\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-grouping-operator\r\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\r\n\t        switch (expr.type) {\r\n\t            case syntax_1.Syntax.Identifier:\r\n\t            case syntax_1.Syntax.MemberExpression:\r\n\t            case syntax_1.Syntax.RestElement:\r\n\t            case syntax_1.Syntax.AssignmentPattern:\r\n\t                break;\r\n\t            case syntax_1.Syntax.SpreadElement:\r\n\t                expr.type = syntax_1.Syntax.RestElement;\r\n\t                this.reinterpretExpressionAsPattern(expr.argument);\r\n\t                break;\r\n\t            case syntax_1.Syntax.ArrayExpression:\r\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\r\n\t                for (var i = 0; i < expr.elements.length; i++) {\r\n\t                    if (expr.elements[i] !== null) {\r\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t            case syntax_1.Syntax.ObjectExpression:\r\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\r\n\t                for (var i = 0; i < expr.properties.length; i++) {\r\n\t                    var property = expr.properties[i];\r\n\t                    this.reinterpretExpressionAsPattern(property.type === syntax_1.Syntax.SpreadElement ? property : property.value);\r\n\t                }\r\n\t                break;\r\n\t            case syntax_1.Syntax.AssignmentExpression:\r\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\r\n\t                delete expr.operator;\r\n\t                this.reinterpretExpressionAsPattern(expr.left);\r\n\t                break;\r\n\t            default:\r\n\t                // Allow other node type for tolerant parsing.\r\n\t                break;\r\n\t        }\r\n\t    };\r\n\t    Parser.prototype.parseGroupExpression = function () {\r\n\t        var expr;\r\n\t        this.expect('(');\r\n\t        if (this.match(')')) {\r\n\t            this.nextToken();\r\n\t            if (!this.match('=>')) {\r\n\t                this.expect('=>');\r\n\t            }\r\n\t            expr = {\r\n\t                type: ArrowParameterPlaceHolder,\r\n\t                params: [],\r\n\t                async: false\r\n\t            };\r\n\t        }\r\n\t        else {\r\n\t            var startToken = this.lookahead;\r\n\t            var params = [];\r\n\t            if (this.match('...')) {\r\n\t                expr = this.parseRestElement(params);\r\n\t                this.expect(')');\r\n\t                if (!this.match('=>')) {\r\n\t                    this.expect('=>');\r\n\t                }\r\n\t                expr = {\r\n\t                    type: ArrowParameterPlaceHolder,\r\n\t                    params: [expr],\r\n\t                    async: false\r\n\t                };\r\n\t            }\r\n\t            else {\r\n\t                var arrow = false;\r\n\t                this.context.isBindingElement = true;\r\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\t                if (this.match(',')) {\r\n\t                    var expressions = [];\r\n\t                    this.context.isAssignmentTarget = false;\r\n\t                    expressions.push(expr);\r\n\t                    while (this.lookahead.type !== 2 /* EOF */) {\r\n\t                        if (!this.match(',')) {\r\n\t                            break;\r\n\t                        }\r\n\t                        this.nextToken();\r\n\t                        if (this.match(')')) {\r\n\t                            this.nextToken();\r\n\t                            for (var i = 0; i < expressions.length; i++) {\r\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n\t                            }\r\n\t                            arrow = true;\r\n\t                            expr = {\r\n\t                                type: ArrowParameterPlaceHolder,\r\n\t                                params: expressions,\r\n\t                                async: false\r\n\t                            };\r\n\t                        }\r\n\t                        else if (this.match('...')) {\r\n\t                            if (!this.context.isBindingElement) {\r\n\t                                this.throwUnexpectedToken(this.lookahead);\r\n\t                            }\r\n\t                            expressions.push(this.parseRestElement(params));\r\n\t                            this.expect(')');\r\n\t                            if (!this.match('=>')) {\r\n\t                                this.expect('=>');\r\n\t                            }\r\n\t                            this.context.isBindingElement = false;\r\n\t                            for (var i = 0; i < expressions.length; i++) {\r\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n\t                            }\r\n\t                            arrow = true;\r\n\t                            expr = {\r\n\t                                type: ArrowParameterPlaceHolder,\r\n\t                                params: expressions,\r\n\t                                async: false\r\n\t                            };\r\n\t                        }\r\n\t                        else {\r\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n\t                        }\r\n\t                        if (arrow) {\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                    if (!arrow) {\r\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\r\n\t                    }\r\n\t                }\r\n\t                if (!arrow) {\r\n\t                    this.expect(')');\r\n\t                    if (this.match('=>')) {\r\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\r\n\t                            arrow = true;\r\n\t                            expr = {\r\n\t                                type: ArrowParameterPlaceHolder,\r\n\t                                params: [expr],\r\n\t                                async: false\r\n\t                            };\r\n\t                        }\r\n\t                        if (!arrow) {\r\n\t                            if (!this.context.isBindingElement) {\r\n\t                                this.throwUnexpectedToken(this.lookahead);\r\n\t                            }\r\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\r\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\r\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                this.reinterpretExpressionAsPattern(expr);\r\n\t                            }\r\n\t                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\r\n\t                            expr = {\r\n\t                                type: ArrowParameterPlaceHolder,\r\n\t                                params: parameters,\r\n\t                                async: false\r\n\t                            };\r\n\t                        }\r\n\t                    }\r\n\t                    this.context.isBindingElement = false;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\r\n\t    Parser.prototype.parseArguments = function () {\r\n\t        this.expect('(');\r\n\t        var args = [];\r\n\t        if (!this.match(')')) {\r\n\t            while (true) {\r\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\r\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                args.push(expr);\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t                this.expectCommaSeparator();\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this.expect(')');\r\n\t        return args;\r\n\t    };\r\n\t    Parser.prototype.isIdentifierName = function (token) {\r\n\t        return token.type === 3 /* Identifier */ ||\r\n\t            token.type === 4 /* Keyword */ ||\r\n\t            token.type === 1 /* BooleanLiteral */ ||\r\n\t            token.type === 5 /* NullLiteral */;\r\n\t    };\r\n\t    Parser.prototype.parseIdentifierName = function () {\r\n\t        var node = this.createNode();\r\n\t        var token = this.nextToken();\r\n\t        if (!this.isIdentifierName(token)) {\r\n\t            this.throwUnexpectedToken(token);\r\n\t        }\r\n\t        return this.finalize(node, new Node.Identifier(token.value));\r\n\t    };\r\n\t    Parser.prototype.parseNewExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        var id = this.parseIdentifierName();\r\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\r\n\t        var expr;\r\n\t        if (this.match('.')) {\r\n\t            this.nextToken();\r\n\t            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\r\n\t                var property = this.parseIdentifierName();\r\n\t                expr = new Node.MetaProperty(id, property);\r\n\t            }\r\n\t            else {\r\n\t                this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t        }\r\n\t        else if (this.matchKeyword('import')) {\r\n\t            this.throwUnexpectedToken(this.lookahead);\r\n\t        }\r\n\t        else {\r\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\r\n\t            var args = this.match('(') ? this.parseArguments() : [];\r\n\t            expr = new Node.NewExpression(callee, args);\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t        }\r\n\t        return this.finalize(node, expr);\r\n\t    };\r\n\t    Parser.prototype.parseAsyncArgument = function () {\r\n\t        var arg = this.parseAssignmentExpression();\r\n\t        this.context.firstCoverInitializedNameError = null;\r\n\t        return arg;\r\n\t    };\r\n\t    Parser.prototype.parseAsyncArguments = function () {\r\n\t        this.expect('(');\r\n\t        var args = [];\r\n\t        if (!this.match(')')) {\r\n\t            while (true) {\r\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\r\n\t                    this.isolateCoverGrammar(this.parseAsyncArgument);\r\n\t                args.push(expr);\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t                this.expectCommaSeparator();\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this.expect(')');\r\n\t        return args;\r\n\t    };\r\n\t    Parser.prototype.matchImportCall = function () {\r\n\t        var match = this.matchKeyword('import');\r\n\t        if (match) {\r\n\t            var state = this.scanner.saveState();\r\n\t            this.scanner.scanComments();\r\n\t            var next = this.scanner.lex();\r\n\t            this.scanner.restoreState(state);\r\n\t            match = (next.type === 7 /* Punctuator */) && (next.value === '(');\r\n\t        }\r\n\t        return match;\r\n\t    };\r\n\t    Parser.prototype.parseImportCall = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('import');\r\n\t        return this.finalize(node, new Node.Import());\r\n\t    };\r\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\r\n\t        var startToken = this.lookahead;\r\n\t        var maybeAsync = this.matchContextualKeyword('async');\r\n\t        var previousAllowIn = this.context.allowIn;\r\n\t        this.context.allowIn = true;\r\n\t        var expr;\r\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\r\n\t            expr = this.createNode();\r\n\t            this.nextToken();\r\n\t            expr = this.finalize(expr, new Node.Super());\r\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\r\n\t                this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\r\n\t        }\r\n\t        while (true) {\r\n\t            if (this.match('.')) {\r\n\t                this.context.isBindingElement = false;\r\n\t                this.context.isAssignmentTarget = true;\r\n\t                this.expect('.');\r\n\t                var property = this.parseIdentifierName();\r\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\r\n\t            }\r\n\t            else if (this.match('(')) {\r\n\t                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\r\n\t                this.context.isBindingElement = false;\r\n\t                this.context.isAssignmentTarget = false;\r\n\t                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\r\n\t                if (expr.type === syntax_1.Syntax.Import && args.length !== 1) {\r\n\t                    this.tolerateError(messages_1.Messages.BadImportCallArity);\r\n\t                }\r\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\r\n\t                if (asyncArrow && this.match('=>')) {\r\n\t                    for (var i = 0; i < args.length; ++i) {\r\n\t                        this.reinterpretExpressionAsPattern(args[i]);\r\n\t                    }\r\n\t                    expr = {\r\n\t                        type: ArrowParameterPlaceHolder,\r\n\t                        params: args,\r\n\t                        async: true\r\n\t                    };\r\n\t                }\r\n\t            }\r\n\t            else if (this.match('[')) {\r\n\t                this.context.isBindingElement = false;\r\n\t                this.context.isAssignmentTarget = true;\r\n\t                this.expect('[');\r\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\r\n\t                this.expect(']');\r\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\r\n\t            }\r\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\r\n\t                var quasi = this.parseTemplateLiteral();\r\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        this.context.allowIn = previousAllowIn;\r\n\t        return expr;\r\n\t    };\r\n\t    Parser.prototype.parseSuper = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('super');\r\n\t        if (!this.match('[') && !this.match('.')) {\r\n\t            this.throwUnexpectedToken(this.lookahead);\r\n\t        }\r\n\t        return this.finalize(node, new Node.Super());\r\n\t    };\r\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\r\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\r\n\t        var node = this.startNode(this.lookahead);\r\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\r\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\r\n\t        while (true) {\r\n\t            if (this.match('[')) {\r\n\t                this.context.isBindingElement = false;\r\n\t                this.context.isAssignmentTarget = true;\r\n\t                this.expect('[');\r\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\r\n\t                this.expect(']');\r\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\r\n\t            }\r\n\t            else if (this.match('.')) {\r\n\t                this.context.isBindingElement = false;\r\n\t                this.context.isAssignmentTarget = true;\r\n\t                this.expect('.');\r\n\t                var property = this.parseIdentifierName();\r\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\r\n\t            }\r\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\r\n\t                var quasi = this.parseTemplateLiteral();\r\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-update-expressions\r\n\t    Parser.prototype.parseUpdateExpression = function () {\r\n\t        var expr;\r\n\t        var startToken = this.lookahead;\r\n\t        if (this.match('++') || this.match('--')) {\r\n\t            var node = this.startNode(startToken);\r\n\t            var token = this.nextToken();\r\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\r\n\t            }\r\n\t            if (!this.context.isAssignmentTarget) {\r\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\r\n\t            }\r\n\t            var prefix = true;\r\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t        }\r\n\t        else {\r\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n\t            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\r\n\t                if (this.match('++') || this.match('--')) {\r\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\r\n\t                    }\r\n\t                    if (!this.context.isAssignmentTarget) {\r\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\r\n\t                    }\r\n\t                    this.context.isAssignmentTarget = false;\r\n\t                    this.context.isBindingElement = false;\r\n\t                    var operator = this.nextToken().value;\r\n\t                    var prefix = false;\r\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-unary-operators\r\n\t    Parser.prototype.parseAwaitExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        this.nextToken();\r\n\t        var argument = this.parseUnaryExpression();\r\n\t        return this.finalize(node, new Node.AwaitExpression(argument));\r\n\t    };\r\n\t    Parser.prototype.parseUnaryExpression = function () {\r\n\t        var expr;\r\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\r\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\r\n\t            var node = this.startNode(this.lookahead);\r\n\t            var token = this.nextToken();\r\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\r\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\r\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\r\n\t            }\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t        }\r\n\t        else if (this.context.await && this.matchContextualKeyword('await')) {\r\n\t            expr = this.parseAwaitExpression();\r\n\t        }\r\n\t        else {\r\n\t            expr = this.parseUpdateExpression();\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    Parser.prototype.parseExponentiationExpression = function () {\r\n\t        var startToken = this.lookahead;\r\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\r\n\t            this.nextToken();\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t            var left = expr;\r\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-exp-operator\r\n\t    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-additive-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-relational-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-equality-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\r\n\t    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\r\n\t    Parser.prototype.binaryPrecedence = function (token) {\r\n\t        var op = token.value;\r\n\t        var precedence;\r\n\t        if (token.type === 7 /* Punctuator */) {\r\n\t            precedence = this.operatorPrecedence[op] || 0;\r\n\t        }\r\n\t        else if (token.type === 4 /* Keyword */) {\r\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\r\n\t        }\r\n\t        else {\r\n\t            precedence = 0;\r\n\t        }\r\n\t        return precedence;\r\n\t    };\r\n\t    Parser.prototype.parseBinaryExpression = function () {\r\n\t        var startToken = this.lookahead;\r\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\r\n\t        var token = this.lookahead;\r\n\t        var prec = this.binaryPrecedence(token);\r\n\t        if (prec > 0) {\r\n\t            this.nextToken();\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t            var markers = [startToken, this.lookahead];\r\n\t            var left = expr;\r\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n\t            var stack = [left, token.value, right];\r\n\t            var precedences = [prec];\r\n\t            while (true) {\r\n\t                prec = this.binaryPrecedence(this.lookahead);\r\n\t                if (prec <= 0) {\r\n\t                    break;\r\n\t                }\r\n\t                // Reduce: make a binary expression from the three topmost entries.\r\n\t                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\r\n\t                    right = stack.pop();\r\n\t                    var operator = stack.pop();\r\n\t                    precedences.pop();\r\n\t                    left = stack.pop();\r\n\t                    markers.pop();\r\n\t                    var node = this.startNode(markers[markers.length - 1]);\r\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\r\n\t                }\r\n\t                // Shift.\r\n\t                stack.push(this.nextToken().value);\r\n\t                precedences.push(prec);\r\n\t                markers.push(this.lookahead);\r\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\r\n\t            }\r\n\t            // Final reduce to clean-up the stack.\r\n\t            var i = stack.length - 1;\r\n\t            expr = stack[i];\r\n\t            var lastMarker = markers.pop();\r\n\t            while (i > 1) {\r\n\t                var marker = markers.pop();\r\n\t                var lastLineStart = lastMarker && lastMarker.lineStart;\r\n\t                var node = this.startNode(marker, lastLineStart);\r\n\t                var operator = stack[i - 1];\r\n\t                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\r\n\t                i -= 2;\r\n\t                lastMarker = marker;\r\n\t            }\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-conditional-operator\r\n\t    Parser.prototype.parseConditionalExpression = function () {\r\n\t        var startToken = this.lookahead;\r\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\r\n\t        if (this.match('?')) {\r\n\t            this.nextToken();\r\n\t            var previousAllowIn = this.context.allowIn;\r\n\t            this.context.allowIn = true;\r\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t            this.context.allowIn = previousAllowIn;\r\n\t            this.expect(':');\r\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\r\n\t            this.context.isAssignmentTarget = false;\r\n\t            this.context.isBindingElement = false;\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-assignment-operators\r\n\t    Parser.prototype.checkPatternParam = function (options, param) {\r\n\t        switch (param.type) {\r\n\t            case syntax_1.Syntax.Identifier:\r\n\t                this.validateParam(options, param, param.name);\r\n\t                break;\r\n\t            case syntax_1.Syntax.RestElement:\r\n\t                this.checkPatternParam(options, param.argument);\r\n\t                break;\r\n\t            case syntax_1.Syntax.AssignmentPattern:\r\n\t                this.checkPatternParam(options, param.left);\r\n\t                break;\r\n\t            case syntax_1.Syntax.ArrayPattern:\r\n\t                for (var i = 0; i < param.elements.length; i++) {\r\n\t                    if (param.elements[i] !== null) {\r\n\t                        this.checkPatternParam(options, param.elements[i]);\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t            case syntax_1.Syntax.ObjectPattern:\r\n\t                for (var i = 0; i < param.properties.length; i++) {\r\n\t                    var property = param.properties[i];\r\n\t                    this.checkPatternParam(options, (property.type === syntax_1.Syntax.RestElement) ? property : property.value);\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\r\n\t    };\r\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\r\n\t        var params = [expr];\r\n\t        var options = {\r\n\t            simple: true,\r\n\t            paramSet: {}\r\n\t        };\r\n\t        var asyncArrow = false;\r\n\t        switch (expr.type) {\r\n\t            case syntax_1.Syntax.Identifier:\r\n\t                break;\r\n\t            case ArrowParameterPlaceHolder:\r\n\t                params = expr.params;\r\n\t                asyncArrow = expr.async;\r\n\t                break;\r\n\t            default:\r\n\t                return null;\r\n\t        }\r\n\t        for (var i = 0; i < params.length; ++i) {\r\n\t            var param = params[i];\r\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\r\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\r\n\t                    if (param.right.argument) {\r\n\t                        this.throwUnexpectedToken(this.lookahead);\r\n\t                    }\r\n\t                    param.right.type = syntax_1.Syntax.Identifier;\r\n\t                    param.right.name = 'yield';\r\n\t                    delete param.right.argument;\r\n\t                    delete param.right.delegate;\r\n\t                }\r\n\t            }\r\n\t            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\r\n\t                this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t            this.checkPatternParam(options, param);\r\n\t            params[i] = param;\r\n\t        }\r\n\t        if (this.context.strict || !this.context.allowYield) {\r\n\t            for (var i = 0; i < params.length; ++i) {\r\n\t                var param = params[i];\r\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\r\n\t                    this.throwUnexpectedToken(this.lookahead);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\r\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\r\n\t            this.throwUnexpectedToken(token, options.message);\r\n\t        }\r\n\t        return {\r\n\t            simple: options.simple,\r\n\t            params: params,\r\n\t            stricted: options.stricted,\r\n\t            firstRestricted: options.firstRestricted,\r\n\t            message: options.message\r\n\t        };\r\n\t    };\r\n\t    Parser.prototype.parseAssignmentExpression = function () {\r\n\t        var expr;\r\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\r\n\t            expr = this.parseYieldExpression();\r\n\t        }\r\n\t        else {\r\n\t            var startToken = this.lookahead;\r\n\t            var token = startToken;\r\n\t            expr = this.parseConditionalExpression();\r\n\t            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\r\n\t                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\r\n\t                    var arg = this.parsePrimaryExpression();\r\n\t                    this.reinterpretExpressionAsPattern(arg);\r\n\t                    expr = {\r\n\t                        type: ArrowParameterPlaceHolder,\r\n\t                        params: [arg],\r\n\t                        async: true\r\n\t                    };\r\n\t                }\r\n\t            }\r\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\r\n\t                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\r\n\t                this.context.isAssignmentTarget = false;\r\n\t                this.context.isBindingElement = false;\r\n\t                var isAsync = expr.async;\r\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\r\n\t                if (list) {\r\n\t                    if (this.hasLineTerminator) {\r\n\t                        this.tolerateUnexpectedToken(this.lookahead);\r\n\t                    }\r\n\t                    this.context.firstCoverInitializedNameError = null;\r\n\t                    var previousStrict = this.context.strict;\r\n\t                    var previousAllowStrictDirective = this.context.allowStrictDirective;\r\n\t                    this.context.allowStrictDirective = list.simple;\r\n\t                    var previousAllowYield = this.context.allowYield;\r\n\t                    var previousAwait = this.context.await;\r\n\t                    this.context.allowYield = true;\r\n\t                    this.context.await = isAsync;\r\n\t                    var node = this.startNode(startToken);\r\n\t                    this.expect('=>');\r\n\t                    var body = void 0;\r\n\t                    if (this.match('{')) {\r\n\t                        var previousAllowIn = this.context.allowIn;\r\n\t                        this.context.allowIn = true;\r\n\t                        body = this.parseFunctionSourceElements();\r\n\t                        this.context.allowIn = previousAllowIn;\r\n\t                    }\r\n\t                    else {\r\n\t                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                    }\r\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\r\n\t                    if (this.context.strict && list.firstRestricted) {\r\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\r\n\t                    }\r\n\t                    if (this.context.strict && list.stricted) {\r\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\r\n\t                    }\r\n\t                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\r\n\t                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\r\n\t                    this.context.strict = previousStrict;\r\n\t                    this.context.allowStrictDirective = previousAllowStrictDirective;\r\n\t                    this.context.allowYield = previousAllowYield;\r\n\t                    this.context.await = previousAwait;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (this.matchAssign()) {\r\n\t                    if (!this.context.isAssignmentTarget) {\r\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\r\n\t                    }\r\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\r\n\t                        var id = expr;\r\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\r\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\r\n\t                        }\r\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\r\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\r\n\t                        }\r\n\t                    }\r\n\t                    if (!this.match('=')) {\r\n\t                        this.context.isAssignmentTarget = false;\r\n\t                        this.context.isBindingElement = false;\r\n\t                    }\r\n\t                    else {\r\n\t                        this.reinterpretExpressionAsPattern(expr);\r\n\t                    }\r\n\t                    token = this.nextToken();\r\n\t                    var operator = token.value;\r\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\r\n\t                    this.context.firstCoverInitializedNameError = null;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-comma-operator\r\n\t    Parser.prototype.parseExpression = function () {\r\n\t        var startToken = this.lookahead;\r\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t        if (this.match(',')) {\r\n\t            var expressions = [];\r\n\t            expressions.push(expr);\r\n\t            while (this.lookahead.type !== 2 /* EOF */) {\r\n\t                if (!this.match(',')) {\r\n\t                    break;\r\n\t                }\r\n\t                this.nextToken();\r\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n\t            }\r\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\r\n\t        }\r\n\t        return expr;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-block\r\n\t    Parser.prototype.parseStatementListItem = function () {\r\n\t        var statement;\r\n\t        this.context.isAssignmentTarget = true;\r\n\t        this.context.isBindingElement = true;\r\n\t        if (this.lookahead.type === 4 /* Keyword */) {\r\n\t            switch (this.lookahead.value) {\r\n\t                case 'export':\r\n\t                    if (!this.context.isModule) {\r\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\r\n\t                    }\r\n\t                    statement = this.parseExportDeclaration();\r\n\t                    break;\r\n\t                case 'import':\r\n\t                    if (this.matchImportCall()) {\r\n\t                        statement = this.parseExpressionStatement();\r\n\t                    }\r\n\t                    else {\r\n\t                        if (!this.context.isModule) {\r\n\t                            this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\r\n\t                        }\r\n\t                        statement = this.parseImportDeclaration();\r\n\t                    }\r\n\t                    break;\r\n\t                case 'const':\r\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\r\n\t                    break;\r\n\t                case 'function':\r\n\t                    statement = this.parseFunctionDeclaration();\r\n\t                    break;\r\n\t                case 'class':\r\n\t                    statement = this.parseClassDeclaration();\r\n\t                    break;\r\n\t                case 'let':\r\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\r\n\t                    break;\r\n\t                default:\r\n\t                    statement = this.parseStatement();\r\n\t                    break;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            statement = this.parseStatement();\r\n\t        }\r\n\t        return statement;\r\n\t    };\r\n\t    Parser.prototype.parseBlock = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect('{');\r\n\t        var block = [];\r\n\t        while (true) {\r\n\t            if (this.match('}')) {\r\n\t                break;\r\n\t            }\r\n\t            block.push(this.parseStatementListItem());\r\n\t        }\r\n\t        this.expect('}');\r\n\t        return this.finalize(node, new Node.BlockStatement(block));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\r\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\r\n\t        var node = this.createNode();\r\n\t        var params = [];\r\n\t        var id = this.parsePattern(params, kind);\r\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\r\n\t            if (this.scanner.isRestrictedWord(id.name)) {\r\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\r\n\t            }\r\n\t        }\r\n\t        var init = null;\r\n\t        if (kind === 'const') {\r\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\r\n\t                if (this.match('=')) {\r\n\t                    this.nextToken();\r\n\t                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t                }\r\n\t                else {\r\n\t                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\r\n\t            this.expect('=');\r\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t        }\r\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\r\n\t    };\r\n\t    Parser.prototype.parseBindingList = function (kind, options) {\r\n\t        var list = [this.parseLexicalBinding(kind, options)];\r\n\t        while (this.match(',')) {\r\n\t            this.nextToken();\r\n\t            list.push(this.parseLexicalBinding(kind, options));\r\n\t        }\r\n\t        return list;\r\n\t    };\r\n\t    Parser.prototype.isLexicalDeclaration = function () {\r\n\t        var state = this.scanner.saveState();\r\n\t        this.scanner.scanComments();\r\n\t        var next = this.scanner.lex();\r\n\t        this.scanner.restoreState(state);\r\n\t        return (next.type === 3 /* Identifier */) ||\r\n\t            (next.type === 7 /* Punctuator */ && next.value === '[') ||\r\n\t            (next.type === 7 /* Punctuator */ && next.value === '{') ||\r\n\t            (next.type === 4 /* Keyword */ && next.value === 'let') ||\r\n\t            (next.type === 4 /* Keyword */ && next.value === 'yield');\r\n\t    };\r\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\r\n\t        var node = this.createNode();\r\n\t        var kind = this.nextToken().value;\r\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\r\n\t        var declarations = this.parseBindingList(kind, options);\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\r\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\r\n\t        var node = this.createNode();\r\n\t        this.expect('...');\r\n\t        var arg = this.parsePattern(params, kind);\r\n\t        return this.finalize(node, new Node.RestElement(arg));\r\n\t    };\r\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\r\n\t        var node = this.createNode();\r\n\t        this.expect('[');\r\n\t        var elements = [];\r\n\t        while (!this.match(']')) {\r\n\t            if (this.match(',')) {\r\n\t                this.nextToken();\r\n\t                elements.push(null);\r\n\t            }\r\n\t            else {\r\n\t                if (this.match('...')) {\r\n\t                    elements.push(this.parseBindingRestElement(params, kind));\r\n\t                    break;\r\n\t                }\r\n\t                else {\r\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\r\n\t                }\r\n\t                if (!this.match(']')) {\r\n\t                    this.expect(',');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this.expect(']');\r\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\r\n\t    };\r\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\r\n\t        var node = this.createNode();\r\n\t        var computed = false;\r\n\t        var shorthand = false;\r\n\t        var method = false;\r\n\t        var key;\r\n\t        var value;\r\n\t        if (this.lookahead.type === 3 /* Identifier */) {\r\n\t            var keyToken = this.lookahead;\r\n\t            key = this.parseVariableIdentifier();\r\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\r\n\t            if (this.match('=')) {\r\n\t                params.push(keyToken);\r\n\t                shorthand = true;\r\n\t                this.nextToken();\r\n\t                var expr = this.parseAssignmentExpression();\r\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\r\n\t            }\r\n\t            else if (!this.match(':')) {\r\n\t                params.push(keyToken);\r\n\t                shorthand = true;\r\n\t                value = init;\r\n\t            }\r\n\t            else {\r\n\t                this.expect(':');\r\n\t                value = this.parsePatternWithDefault(params, kind);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            this.expect(':');\r\n\t            value = this.parsePatternWithDefault(params, kind);\r\n\t        }\r\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\r\n\t    };\r\n\t    Parser.prototype.parseRestProperty = function (params, kind) {\r\n\t        var node = this.createNode();\r\n\t        this.expect('...');\r\n\t        var arg = this.parsePattern(params);\r\n\t        if (this.match('=')) {\r\n\t            this.throwError(messages_1.Messages.DefaultRestProperty);\r\n\t        }\r\n\t        if (!this.match('}')) {\r\n\t            this.throwError(messages_1.Messages.PropertyAfterRestProperty);\r\n\t        }\r\n\t        return this.finalize(node, new Node.RestElement(arg));\r\n\t    };\r\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\r\n\t        var node = this.createNode();\r\n\t        var properties = [];\r\n\t        this.expect('{');\r\n\t        while (!this.match('}')) {\r\n\t            properties.push(this.match('...') ? this.parseRestProperty(params, kind) : this.parsePropertyPattern(params, kind));\r\n\t            if (!this.match('}')) {\r\n\t                this.expect(',');\r\n\t            }\r\n\t        }\r\n\t        this.expect('}');\r\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\r\n\t    };\r\n\t    Parser.prototype.parsePattern = function (params, kind) {\r\n\t        var pattern;\r\n\t        if (this.match('[')) {\r\n\t            pattern = this.parseArrayPattern(params, kind);\r\n\t        }\r\n\t        else if (this.match('{')) {\r\n\t            pattern = this.parseObjectPattern(params, kind);\r\n\t        }\r\n\t        else {\r\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\r\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\r\n\t            }\r\n\t            params.push(this.lookahead);\r\n\t            pattern = this.parseVariableIdentifier(kind);\r\n\t        }\r\n\t        return pattern;\r\n\t    };\r\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\r\n\t        var startToken = this.lookahead;\r\n\t        var pattern = this.parsePattern(params, kind);\r\n\t        if (this.match('=')) {\r\n\t            this.nextToken();\r\n\t            var previousAllowYield = this.context.allowYield;\r\n\t            this.context.allowYield = true;\r\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t            this.context.allowYield = previousAllowYield;\r\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\r\n\t        }\r\n\t        return pattern;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-variable-statement\r\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\r\n\t        var node = this.createNode();\r\n\t        var token = this.nextToken();\r\n\t        if (token.type === 4 /* Keyword */ && token.value === 'yield') {\r\n\t            if (this.context.strict) {\r\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\r\n\t            }\r\n\t            else if (!this.context.allowYield) {\r\n\t                this.throwUnexpectedToken(token);\r\n\t            }\r\n\t        }\r\n\t        else if (token.type !== 3 /* Identifier */) {\r\n\t            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\r\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\r\n\t            }\r\n\t            else {\r\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\r\n\t                    this.throwUnexpectedToken(token);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\r\n\t            this.tolerateUnexpectedToken(token);\r\n\t        }\r\n\t        return this.finalize(node, new Node.Identifier(token.value));\r\n\t    };\r\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\r\n\t        var node = this.createNode();\r\n\t        var params = [];\r\n\t        var id = this.parsePattern(params, 'var');\r\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\r\n\t            if (this.scanner.isRestrictedWord(id.name)) {\r\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\r\n\t            }\r\n\t        }\r\n\t        var init = null;\r\n\t        if (this.match('=')) {\r\n\t            this.nextToken();\r\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\t        }\r\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\r\n\t            this.expect('=');\r\n\t        }\r\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\r\n\t    };\r\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\r\n\t        var opt = { inFor: options.inFor };\r\n\t        var list = [];\r\n\t        list.push(this.parseVariableDeclaration(opt));\r\n\t        while (this.match(',')) {\r\n\t            this.nextToken();\r\n\t            list.push(this.parseVariableDeclaration(opt));\r\n\t        }\r\n\t        return list;\r\n\t    };\r\n\t    Parser.prototype.parseVariableStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('var');\r\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-empty-statement\r\n\t    Parser.prototype.parseEmptyStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect(';');\r\n\t        return this.finalize(node, new Node.EmptyStatement());\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-expression-statement\r\n\t    Parser.prototype.parseExpressionStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        var expr = this.parseExpression();\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-if-statement\r\n\t    Parser.prototype.parseIfClause = function () {\r\n\t        if (this.context.strict && this.matchKeyword('function')) {\r\n\t            this.tolerateError(messages_1.Messages.StrictFunction);\r\n\t        }\r\n\t        return this.parseStatement();\r\n\t    };\r\n\t    Parser.prototype.parseIfStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        var consequent;\r\n\t        var alternate = null;\r\n\t        this.expectKeyword('if');\r\n\t        this.expect('(');\r\n\t        var test = this.parseExpression();\r\n\t        if (!this.match(')') && this.config.tolerant) {\r\n\t\t\t\tthis.tolerateUnexpectedToken(this.nextToken());\r\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n\t        }\r\n\t        else {\r\n\t            this.expect(')');\r\n\t            consequent = this.parseIfClause();\r\n\t            if (this.matchKeyword('else')) {\r\n\t                this.nextToken();\r\n\t                alternate = this.parseIfClause();\r\n\t            }\r\n\t        }\r\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-do-while-statement\r\n\t    Parser.prototype.parseDoWhileStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('do');\r\n\t        var previousInIteration = this.context.inIteration;\r\n\t        this.context.inIteration = true;\r\n\t        var body = this.parseStatement();\r\n\t        this.context.inIteration = previousInIteration;\r\n\t        this.expectKeyword('while');\r\n\t        this.expect('(');\r\n\t        var test = this.parseExpression();\r\n\t        if (!this.match(')') && this.config.tolerant) {\r\n\t            this.tolerateUnexpectedToken(this.nextToken());\r\n\t        }\r\n\t        else {\r\n\t            this.expect(')');\r\n\t            if (this.match(';')) {\r\n\t                this.nextToken();\r\n\t            }\r\n\t        }\r\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-while-statement\r\n\t    Parser.prototype.parseWhileStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        var body;\r\n\t        this.expectKeyword('while');\r\n\t        this.expect('(');\r\n\t        var test = this.parseExpression();\r\n\t        if (!this.match(')') && this.config.tolerant) {\r\n\t            this.tolerateUnexpectedToken(this.nextToken());\r\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n\t        }\r\n\t        else {\r\n\t            this.expect(')');\r\n\t            var previousInIteration = this.context.inIteration;\r\n\t            this.context.inIteration = true;\r\n\t            body = this.parseStatement();\r\n\t            this.context.inIteration = previousInIteration;\r\n\t        }\r\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-for-statement\r\n\t    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\r\n\t    Parser.prototype.parseForStatement = function () {\r\n\t        var init = null;\r\n\t        var test = null;\r\n\t        var update = null;\r\n\t        var forIn = true;\r\n\t        var left, right;\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('for');\r\n\t        this.expect('(');\r\n\t        if (this.match(';')) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        else {\r\n\t            if (this.matchKeyword('var')) {\r\n\t                init = this.createNode();\r\n\t                this.nextToken();\r\n\t                var previousAllowIn = this.context.allowIn;\r\n\t                this.context.allowIn = false;\r\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\r\n\t                this.context.allowIn = previousAllowIn;\r\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\r\n\t                    var decl = declarations[0];\r\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\r\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\r\n\t                    }\r\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n\t                    this.nextToken();\r\n\t                    left = init;\r\n\t                    right = this.parseExpression();\r\n\t                    init = null;\r\n\t                }\r\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n\t                    this.nextToken();\r\n\t                    left = init;\r\n\t                    right = this.parseAssignmentExpression();\r\n\t                    init = null;\r\n\t                    forIn = false;\r\n\t                }\r\n\t                else {\r\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n\t                    this.expect(';');\r\n\t                }\r\n\t            }\r\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\r\n\t                init = this.createNode();\r\n\t                var kind = this.nextToken().value;\r\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\r\n\t                    init = this.finalize(init, new Node.Identifier(kind));\r\n\t                    this.nextToken();\r\n\t                    left = init;\r\n\t                    right = this.parseExpression();\r\n\t                    init = null;\r\n\t                }\r\n\t                else {\r\n\t                    var previousAllowIn = this.context.allowIn;\r\n\t                    this.context.allowIn = false;\r\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\r\n\t                    this.context.allowIn = previousAllowIn;\r\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\r\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n\t                        this.nextToken();\r\n\t                        left = init;\r\n\t                        right = this.parseExpression();\r\n\t                        init = null;\r\n\t                    }\r\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n\t                        this.nextToken();\r\n\t                        left = init;\r\n\t                        right = this.parseAssignmentExpression();\r\n\t                        init = null;\r\n\t                        forIn = false;\r\n\t                    }\r\n\t                    else {\r\n\t                        this.consumeSemicolon();\r\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                var initStartToken = this.lookahead;\r\n\t                var previousIsBindingElement = this.context.isBindingElement;\r\n\t                var previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n\t                var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n\t                var previousAllowIn = this.context.allowIn;\r\n\t                this.context.allowIn = false;\r\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\t                this.context.allowIn = previousAllowIn;\r\n\t                if (this.matchKeyword('in')) {\r\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\r\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\r\n\t                    }\r\n\t                    this.nextToken();\r\n\t                    this.reinterpretExpressionAsPattern(init);\r\n\t                    left = init;\r\n\t                    right = this.parseExpression();\r\n\t                    init = null;\r\n\t                }\r\n\t                else if (this.matchContextualKeyword('of')) {\r\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\r\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\r\n\t                    }\r\n\t                    this.nextToken();\r\n\t                    this.reinterpretExpressionAsPattern(init);\r\n\t                    left = init;\r\n\t                    right = this.parseAssignmentExpression();\r\n\t                    init = null;\r\n\t                    forIn = false;\r\n\t                }\r\n\t                else {\r\n\t                    // The `init` node was not parsed isolated, but we would have wanted it to.\r\n\t                    this.context.isBindingElement = previousIsBindingElement;\r\n\t                    this.context.isAssignmentTarget = previousIsAssignmentTarget;\r\n\t                    this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\r\n\t                    if (this.match(',')) {\r\n\t                        var initSeq = [init];\r\n\t                        while (this.match(',')) {\r\n\t                            this.nextToken();\r\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n\t                        }\r\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\r\n\t                    }\r\n\t                    this.expect(';');\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (typeof left === 'undefined') {\r\n\t            if (!this.match(';')) {\r\n\t                test = this.isolateCoverGrammar(this.parseExpression);\r\n\t            }\r\n\t            this.expect(';');\r\n\t            if (!this.match(')')) {\r\n\t                update = this.isolateCoverGrammar(this.parseExpression);\r\n\t            }\r\n\t        }\r\n\t        var body;\r\n\t        if (!this.match(')') && this.config.tolerant) {\r\n\t            this.tolerateUnexpectedToken(this.nextToken());\r\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n\t        }\r\n\t        else {\r\n\t            this.expect(')');\r\n\t            var previousInIteration = this.context.inIteration;\r\n\t            this.context.inIteration = true;\r\n\t            body = this.isolateCoverGrammar(this.parseStatement);\r\n\t            this.context.inIteration = previousInIteration;\r\n\t        }\r\n\t        return (typeof left === 'undefined') ?\r\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\r\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\r\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-continue-statement\r\n\t    Parser.prototype.parseContinueStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('continue');\r\n\t        var label = null;\r\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\r\n\t            var id = this.parseVariableIdentifier();\r\n\t            label = id;\r\n\t            var key = '$' + id.name;\r\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\r\n\t            }\r\n\t        }\r\n\t        this.consumeSemicolon();\r\n\t        if (label === null && !this.context.inIteration) {\r\n\t            this.throwError(messages_1.Messages.IllegalContinue);\r\n\t        }\r\n\t        return this.finalize(node, new Node.ContinueStatement(label));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-break-statement\r\n\t    Parser.prototype.parseBreakStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('break');\r\n\t        var label = null;\r\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\r\n\t            var id = this.parseVariableIdentifier();\r\n\t            var key = '$' + id.name;\r\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\r\n\t            }\r\n\t            label = id;\r\n\t        }\r\n\t        this.consumeSemicolon();\r\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\r\n\t            this.throwError(messages_1.Messages.IllegalBreak);\r\n\t        }\r\n\t        return this.finalize(node, new Node.BreakStatement(label));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-return-statement\r\n\t    Parser.prototype.parseReturnStatement = function () {\r\n\t        if (!this.context.inFunctionBody) {\r\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\r\n\t        }\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('return');\r\n\t        var hasArgument = (!this.match(';') && !this.match('}') &&\r\n\t            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||\r\n\t            this.lookahead.type === 8 /* StringLiteral */ ||\r\n\t            this.lookahead.type === 10 /* Template */;\r\n\t        var argument = hasArgument ? this.parseExpression() : null;\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-with-statement\r\n\t    Parser.prototype.parseWithStatement = function () {\r\n\t        if (this.context.strict) {\r\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\r\n\t        }\r\n\t        var node = this.createNode();\r\n\t        var body;\r\n\t        this.expectKeyword('with');\r\n\t        this.expect('(');\r\n\t        var object = this.parseExpression();\r\n\t        if (!this.match(')') && this.config.tolerant) {\r\n\t            this.tolerateUnexpectedToken(this.nextToken());\r\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n\t        }\r\n\t        else {\r\n\t            this.expect(')');\r\n\t            body = this.parseStatement();\r\n\t        }\r\n\t        return this.finalize(node, new Node.WithStatement(object, body));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-switch-statement\r\n\t    Parser.prototype.parseSwitchCase = function () {\r\n\t        var node = this.createNode();\r\n\t        var test;\r\n\t        if (this.matchKeyword('default')) {\r\n\t            this.nextToken();\r\n\t            test = null;\r\n\t        }\r\n\t        else {\r\n\t            this.expectKeyword('case');\r\n\t            test = this.parseExpression();\r\n\t        }\r\n\t        this.expect(':');\r\n\t        var consequent = [];\r\n\t        while (true) {\r\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\r\n\t                break;\r\n\t            }\r\n\t            consequent.push(this.parseStatementListItem());\r\n\t        }\r\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\r\n\t    };\r\n\t    Parser.prototype.parseSwitchStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('switch');\r\n\t        this.expect('(');\r\n\t        var discriminant = this.parseExpression();\r\n\t        this.expect(')');\r\n\t        var previousInSwitch = this.context.inSwitch;\r\n\t        this.context.inSwitch = true;\r\n\t        var cases = [];\r\n\t        var defaultFound = false;\r\n\t        this.expect('{');\r\n\t        while (true) {\r\n\t            if (this.match('}')) {\r\n\t                break;\r\n\t            }\r\n\t            var clause = this.parseSwitchCase();\r\n\t            if (clause.test === null) {\r\n\t                if (defaultFound) {\r\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\r\n\t                }\r\n\t                defaultFound = true;\r\n\t            }\r\n\t            cases.push(clause);\r\n\t        }\r\n\t        this.expect('}');\r\n\t        this.context.inSwitch = previousInSwitch;\r\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-labelled-statements\r\n\t    Parser.prototype.parseLabelledStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        var expr = this.parseExpression();\r\n\t        var statement;\r\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\r\n\t            this.nextToken();\r\n\t            var id = expr;\r\n\t            var key = '$' + id.name;\r\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\r\n\t            }\r\n\t            this.context.labelSet[key] = true;\r\n\t            var body = void 0;\r\n\t            if (this.matchKeyword('class')) {\r\n\t                this.tolerateUnexpectedToken(this.lookahead);\r\n\t                body = this.parseClassDeclaration();\r\n\t            }\r\n\t            else if (this.matchKeyword('function')) {\r\n\t                var token = this.lookahead;\r\n\t                var declaration = this.parseFunctionDeclaration();\r\n\t                if (this.context.strict) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\r\n\t                }\r\n\t                else if (declaration.generator) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\r\n\t                }\r\n\t                body = declaration;\r\n\t            }\r\n\t            else {\r\n\t                body = this.parseStatement();\r\n\t            }\r\n\t            delete this.context.labelSet[key];\r\n\t            statement = new Node.LabeledStatement(id, body);\r\n\t        }\r\n\t        else {\r\n\t            this.consumeSemicolon();\r\n\t            statement = new Node.ExpressionStatement(expr);\r\n\t        }\r\n\t        return this.finalize(node, statement);\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-throw-statement\r\n\t    Parser.prototype.parseThrowStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('throw');\r\n\t        if (this.hasLineTerminator) {\r\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\r\n\t        }\r\n\t        var argument = this.parseExpression();\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-try-statement\r\n\t    Parser.prototype.parseCatchClause = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('catch');\r\n\t        this.expect('(');\r\n\t        if (this.match(')')) {\r\n\t            this.throwUnexpectedToken(this.lookahead);\r\n\t        }\r\n\t        var params = [];\r\n\t        var param = this.parsePattern(params);\r\n\t        var paramMap = {};\r\n\t        for (var i = 0; i < params.length; i++) {\r\n\t            var key = '$' + params[i].value;\r\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\r\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\r\n\t            }\r\n\t            paramMap[key] = true;\r\n\t        }\r\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\r\n\t            if (this.scanner.isRestrictedWord(param.name)) {\r\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\r\n\t            }\r\n\t        }\r\n\t        this.expect(')');\r\n\t        var body = this.parseBlock();\r\n\t        return this.finalize(node, new Node.CatchClause(param, body));\r\n\t    };\r\n\t    Parser.prototype.parseFinallyClause = function () {\r\n\t        this.expectKeyword('finally');\r\n\t        return this.parseBlock();\r\n\t    };\r\n\t    Parser.prototype.parseTryStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('try');\r\n\t        var block = this.parseBlock();\r\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\r\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\r\n\t        if (!handler && !finalizer) {\r\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\r\n\t        }\r\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-debugger-statement\r\n\t    Parser.prototype.parseDebuggerStatement = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('debugger');\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.DebuggerStatement());\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\r\n\t    Parser.prototype.parseStatement = function () {\r\n\t        var statement;\r\n\t        switch (this.lookahead.type) {\r\n\t            case 1 /* BooleanLiteral */:\r\n\t            case 5 /* NullLiteral */:\r\n\t            case 6 /* NumericLiteral */:\r\n\t            case 8 /* StringLiteral */:\r\n\t            case 10 /* Template */:\r\n\t            case 9 /* RegularExpression */:\r\n\t                statement = this.parseExpressionStatement();\r\n\t                break;\r\n\t            case 7 /* Punctuator */:\r\n\t                var value = this.lookahead.value;\r\n\t                if (value === '{') {\r\n\t                    statement = this.parseBlock();\r\n\t                }\r\n\t                else if (value === '(') {\r\n\t                    statement = this.parseExpressionStatement();\r\n\t                }\r\n\t                else if (value === ';') {\r\n\t                    statement = this.parseEmptyStatement();\r\n\t                }\r\n\t                else {\r\n\t                    statement = this.parseExpressionStatement();\r\n\t                }\r\n\t                break;\r\n\t            case 3 /* Identifier */:\r\n\t                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\r\n\t                break;\r\n\t            case 4 /* Keyword */:\r\n\t                switch (this.lookahead.value) {\r\n\t                    case 'break':\r\n\t                        statement = this.parseBreakStatement();\r\n\t                        break;\r\n\t                    case 'continue':\r\n\t                        statement = this.parseContinueStatement();\r\n\t                        break;\r\n\t                    case 'debugger':\r\n\t                        statement = this.parseDebuggerStatement();\r\n\t                        break;\r\n\t                    case 'do':\r\n\t                        statement = this.parseDoWhileStatement();\r\n\t                        break;\r\n\t                    case 'for':\r\n\t                        statement = this.parseForStatement();\r\n\t                        break;\r\n\t                    case 'function':\r\n\t                        statement = this.parseFunctionDeclaration();\r\n\t                        break;\r\n\t                    case 'if':\r\n\t                        statement = this.parseIfStatement();\r\n\t                        break;\r\n\t                    case 'return':\r\n\t                        statement = this.parseReturnStatement();\r\n\t                        break;\r\n\t                    case 'switch':\r\n\t                        statement = this.parseSwitchStatement();\r\n\t                        break;\r\n\t                    case 'throw':\r\n\t                        statement = this.parseThrowStatement();\r\n\t                        break;\r\n\t                    case 'try':\r\n\t                        statement = this.parseTryStatement();\r\n\t                        break;\r\n\t                    case 'var':\r\n\t                        statement = this.parseVariableStatement();\r\n\t                        break;\r\n\t                    case 'while':\r\n\t                        statement = this.parseWhileStatement();\r\n\t                        break;\r\n\t                    case 'with':\r\n\t                        statement = this.parseWithStatement();\r\n\t                        break;\r\n\t                    default:\r\n\t                        statement = this.parseExpressionStatement();\r\n\t                        break;\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                statement = this.throwUnexpectedToken(this.lookahead);\r\n\t        }\r\n\t        return statement;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-function-definitions\r\n\t    Parser.prototype.parseFunctionSourceElements = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect('{');\r\n\t        var body = this.parseDirectivePrologues();\r\n\t        var previousLabelSet = this.context.labelSet;\r\n\t        var previousInIteration = this.context.inIteration;\r\n\t        var previousInSwitch = this.context.inSwitch;\r\n\t        var previousInFunctionBody = this.context.inFunctionBody;\r\n\t        this.context.labelSet = {};\r\n\t        this.context.inIteration = false;\r\n\t        this.context.inSwitch = false;\r\n\t        this.context.inFunctionBody = true;\r\n\t        while (this.lookahead.type !== 2 /* EOF */) {\r\n\t            if (this.match('}')) {\r\n\t                break;\r\n\t            }\r\n\t            body.push(this.parseStatementListItem());\r\n\t        }\r\n\t        this.expect('}');\r\n\t        this.context.labelSet = previousLabelSet;\r\n\t        this.context.inIteration = previousInIteration;\r\n\t        this.context.inSwitch = previousInSwitch;\r\n\t        this.context.inFunctionBody = previousInFunctionBody;\r\n\t        return this.finalize(node, new Node.BlockStatement(body));\r\n\t    };\r\n\t    Parser.prototype.validateParam = function (options, param, name) {\r\n\t        var key = '$' + name;\r\n\t        if (this.context.strict) {\r\n\t            if (this.scanner.isRestrictedWord(name)) {\r\n\t                options.stricted = param;\r\n\t                options.message = messages_1.Messages.StrictParamName;\r\n\t            }\r\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n\t                options.stricted = param;\r\n\t                options.message = messages_1.Messages.StrictParamDupe;\r\n\t            }\r\n\t        }\r\n\t        else if (!options.firstRestricted) {\r\n\t            if (this.scanner.isRestrictedWord(name)) {\r\n\t                options.firstRestricted = param;\r\n\t                options.message = messages_1.Messages.StrictParamName;\r\n\t            }\r\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\r\n\t                options.firstRestricted = param;\r\n\t                options.message = messages_1.Messages.StrictReservedWord;\r\n\t            }\r\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n\t                options.stricted = param;\r\n\t                options.message = messages_1.Messages.StrictParamDupe;\r\n\t            }\r\n\t        }\r\n\t        /* istanbul ignore next */\r\n\t        if (typeof Object.defineProperty === 'function') {\r\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\r\n\t        }\r\n\t        else {\r\n\t            options.paramSet[key] = true;\r\n\t        }\r\n\t    };\r\n\t    Parser.prototype.parseRestElement = function (params) {\r\n\t        var node = this.createNode();\r\n\t        this.expect('...');\r\n\t        var arg = this.parsePattern(params);\r\n\t        if (this.match('=')) {\r\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\r\n\t        }\r\n\t        if (!this.match(')')) {\r\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\r\n\t\t\t}\r\n\t        return this.finalize(node, new Node.RestElement(arg));\r\n\t    };\r\n\t    Parser.prototype.parseFormalParameter = function (options) {\r\n\t        var params = [];\r\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < params.length; i++) {\r\n\t            this.validateParam(options, params[i], params[i].value);\r\n\t        }\r\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\r\n\t        options.params.push(param);\r\n\t    };\r\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\r\n\t        var options = {\r\n\t            simple: true,\r\n\t            params: [],\r\n\t            firstRestricted: firstRestricted\r\n\t        };\r\n\t        this.expect('(');\r\n\t        if (!this.match(')')) {\r\n\t            options.paramSet = {};\r\n\t            while (this.lookahead.type !== 2 /* EOF */) {\r\n\t                this.parseFormalParameter(options);\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t                this.expect(',');\r\n\t                if (this.match(')')) {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        this.expect(')');\r\n\t        return {\r\n\t            simple: options.simple,\r\n\t            params: options.params,\r\n\t            stricted: options.stricted,\r\n\t            firstRestricted: options.firstRestricted,\r\n\t            message: options.message\r\n\t        };\r\n\t    };\r\n\t    Parser.prototype.matchAsyncFunction = function () {\r\n\t        var match = this.matchContextualKeyword('async');\r\n\t        if (match) {\r\n\t            var state = this.scanner.saveState();\r\n\t            this.scanner.scanComments();\r\n\t            var next = this.scanner.lex();\r\n\t            this.scanner.restoreState(state);\r\n\t            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');\r\n\t        }\r\n\t        return match;\r\n\t    };\r\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\r\n\t        var node = this.createNode();\r\n\t        var isAsync = this.matchContextualKeyword('async');\r\n\t        if (isAsync) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        this.expectKeyword('function');\r\n\t        var isGenerator = isAsync ? false : this.match('*');\r\n\t        if (isGenerator) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        var message;\r\n\t        var id = null;\r\n\t        var firstRestricted = null;\r\n\t        if (!identifierIsOptional || !this.match('(')) {\r\n\t            var token = this.lookahead;\r\n\t            id = this.parseVariableIdentifier();\r\n\t            if (this.context.strict) {\r\n\t                if (this.scanner.isRestrictedWord(token.value)) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (this.scanner.isRestrictedWord(token.value)) {\r\n\t                    firstRestricted = token;\r\n\t                    message = messages_1.Messages.StrictFunctionName;\r\n\t                }\r\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\r\n\t                    firstRestricted = token;\r\n\t                    message = messages_1.Messages.StrictReservedWord;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        var previousAllowAwait = this.context.await;\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.await = isAsync;\r\n\t        this.context.allowYield = !isGenerator;\r\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\r\n\t        var params = formalParameters.params;\r\n\t        var stricted = formalParameters.stricted;\r\n\t        firstRestricted = formalParameters.firstRestricted;\r\n\t        if (formalParameters.message) {\r\n\t            message = formalParameters.message;\r\n\t        }\r\n\t        var previousStrict = this.context.strict;\r\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\r\n\t        this.context.allowStrictDirective = formalParameters.simple;\r\n\t        var body = this.parseFunctionSourceElements();\r\n\t        if (this.context.strict && firstRestricted) {\r\n\t            this.throwUnexpectedToken(firstRestricted, message);\r\n\t        }\r\n\t        if (this.context.strict && stricted) {\r\n\t            this.tolerateUnexpectedToken(stricted, message);\r\n\t        }\r\n\t        this.context.strict = previousStrict;\r\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n\t        this.context.await = previousAllowAwait;\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\r\n\t            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\r\n\t    };\r\n\t    Parser.prototype.parseFunctionExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        var isAsync = this.matchContextualKeyword('async');\r\n\t        if (isAsync) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        this.expectKeyword('function');\r\n\t        var isGenerator = isAsync ? false : this.match('*');\r\n\t        if (isGenerator) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        var message;\r\n\t        var id = null;\r\n\t        var firstRestricted;\r\n\t        var previousAllowAwait = this.context.await;\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.await = isAsync;\r\n\t        this.context.allowYield = !isGenerator;\r\n\t        if (!this.match('(')) {\r\n\t            var token = this.lookahead;\r\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\r\n\t            if (this.context.strict) {\r\n\t                if (this.scanner.isRestrictedWord(token.value)) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (this.scanner.isRestrictedWord(token.value)) {\r\n\t                    firstRestricted = token;\r\n\t                    message = messages_1.Messages.StrictFunctionName;\r\n\t                }\r\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\r\n\t                    firstRestricted = token;\r\n\t                    message = messages_1.Messages.StrictReservedWord;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\r\n\t        var params = formalParameters.params;\r\n\t        var stricted = formalParameters.stricted;\r\n\t        firstRestricted = formalParameters.firstRestricted;\r\n\t        if (formalParameters.message) {\r\n\t            message = formalParameters.message;\r\n\t        }\r\n\t        var previousStrict = this.context.strict;\r\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\r\n\t        this.context.allowStrictDirective = formalParameters.simple;\r\n\t        var body = this.parseFunctionSourceElements();\r\n\t        if (this.context.strict && firstRestricted) {\r\n\t            this.throwUnexpectedToken(firstRestricted, message);\r\n\t        }\r\n\t        if (this.context.strict && stricted) {\r\n\t            this.tolerateUnexpectedToken(stricted, message);\r\n\t        }\r\n\t        this.context.strict = previousStrict;\r\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n\t        this.context.await = previousAllowAwait;\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\r\n\t            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\r\n\t    Parser.prototype.parseDirective = function () {\r\n\t        var token = this.lookahead;\r\n\t        var node = this.createNode();\r\n\t        var expr = this.parseExpression();\r\n\t        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\r\n\t    };\r\n\t    Parser.prototype.parseDirectivePrologues = function () {\r\n\t        var firstRestricted = null;\r\n\t        var body = [];\r\n\t        while (true) {\r\n\t            var token = this.lookahead;\r\n\t            if (token.type !== 8 /* StringLiteral */) {\r\n\t                break;\r\n\t            }\r\n\t            var statement = this.parseDirective();\r\n\t            body.push(statement);\r\n\t            var directive = statement.directive;\r\n\t            if (typeof directive !== 'string') {\r\n\t                break;\r\n\t            }\r\n\t            if (directive === 'use strict') {\r\n\t                this.context.strict = true;\r\n\t                if (firstRestricted) {\r\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\r\n\t                }\r\n\t                if (!this.context.allowStrictDirective) {\r\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (!firstRestricted && token.octal) {\r\n\t                    firstRestricted = token;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return body;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-method-definitions\r\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\r\n\t        switch (token.type) {\r\n\t            case 3 /* Identifier */:\r\n\t            case 8 /* StringLiteral */:\r\n\t            case 1 /* BooleanLiteral */:\r\n\t            case 5 /* NullLiteral */:\r\n\t            case 6 /* NumericLiteral */:\r\n\t            case 4 /* Keyword */:\r\n\t                return true;\r\n\t            case 7 /* Punctuator */:\r\n\t                return token.value === '[';\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    Parser.prototype.parseGetterMethod = function () {\r\n\t        var node = this.createNode();\r\n\t        var isGenerator = false;\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.allowYield = !isGenerator;\r\n\t        var formalParameters = this.parseFormalParameters();\r\n\t        if (formalParameters.params.length > 0) {\r\n\t            this.tolerateError(messages_1.Messages.BadGetterArity);\r\n\t        }\r\n\t        var method = this.parsePropertyMethod(formalParameters);\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\r\n\t    };\r\n\t    Parser.prototype.parseSetterMethod = function () {\r\n\t        var node = this.createNode();\r\n\t        var isGenerator = false;\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.allowYield = !isGenerator;\r\n\t        var formalParameters = this.parseFormalParameters();\r\n\t        if (formalParameters.params.length !== 1) {\r\n\t            this.tolerateError(messages_1.Messages.BadSetterArity);\r\n\t        }\r\n\t        else if (formalParameters.params[0] instanceof Node.RestElement) {\r\n\t            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\r\n\t        }\r\n\t        var method = this.parsePropertyMethod(formalParameters);\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\r\n\t    };\r\n\t    Parser.prototype.parseGeneratorMethod = function () {\r\n\t        var node = this.createNode();\r\n\t        var isGenerator = true;\r\n\t        var previousAllowYield = this.context.allowYield;\r\n\t        this.context.allowYield = true;\r\n\t        var params = this.parseFormalParameters();\r\n\t        this.context.allowYield = false;\r\n\t        var method = this.parsePropertyMethod(params);\r\n\t        this.context.allowYield = previousAllowYield;\r\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\r\n\t    Parser.prototype.isStartOfExpression = function () {\r\n\t        var start = true;\r\n\t        var value = this.lookahead.value;\r\n\t        switch (this.lookahead.type) {\r\n\t            case 7 /* Punctuator */:\r\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\r\n\t                    (value === '+') || (value === '-') ||\r\n\t                    (value === '!') || (value === '~') ||\r\n\t                    (value === '++') || (value === '--') ||\r\n\t                    (value === '/') || (value === '/='); // regular expression literal\r\n\t                break;\r\n\t            case 4 /* Keyword */:\r\n\t                start = (value === 'class') || (value === 'delete') ||\r\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\r\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\r\n\t                    (value === 'void') || (value === 'yield');\r\n\t                break;\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t        return start;\r\n\t    };\r\n\t    Parser.prototype.parseYieldExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('yield');\r\n\t        var argument = null;\r\n\t        var delegate = false;\r\n\t        if (!this.hasLineTerminator) {\r\n\t            var previousAllowYield = this.context.allowYield;\r\n\t            this.context.allowYield = false;\r\n\t            delegate = this.match('*');\r\n\t            if (delegate) {\r\n\t                this.nextToken();\r\n\t                argument = this.parseAssignmentExpression();\r\n\t            }\r\n\t            else if (this.isStartOfExpression()) {\r\n\t                argument = this.parseAssignmentExpression();\r\n\t            }\r\n\t            this.context.allowYield = previousAllowYield;\r\n\t        }\r\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-class-definitions\r\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\r\n\t        var token = this.lookahead;\r\n\t        var node = this.createNode();\r\n\t        var kind = '';\r\n\t        var key = null;\r\n\t        var value = null;\r\n\t        var computed = false;\r\n\t        var method = false;\r\n\t        var isStatic = false;\r\n\t        var isAsync = false;\r\n\t        if (this.match('*')) {\r\n\t            this.nextToken();\r\n\t        }\r\n\t        else {\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            var id = key;\r\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\r\n\t                token = this.lookahead;\r\n\t                isStatic = true;\r\n\t                computed = this.match('[');\r\n\t                if (this.match('*')) {\r\n\t                    this.nextToken();\r\n\t                }\r\n\t                else {\r\n\t                    key = this.parseObjectPropertyKey();\r\n\t                }\r\n\t            }\r\n\t            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\r\n\t                var punctuator = this.lookahead.value;\r\n\t                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\r\n\t                    isAsync = true;\r\n\t                    token = this.lookahead;\r\n\t                    key = this.parseObjectPropertyKey();\r\n\t                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\r\n\t                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n\t        if (token.type === 3 /* Identifier */) {\r\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\r\n\t                kind = 'get';\r\n\t                computed = this.match('[');\r\n\t                key = this.parseObjectPropertyKey();\r\n\t                this.context.allowYield = false;\r\n\t                value = this.parseGetterMethod();\r\n\t            }\r\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\r\n\t                kind = 'set';\r\n\t                computed = this.match('[');\r\n\t                key = this.parseObjectPropertyKey();\r\n\t                value = this.parseSetterMethod();\r\n\t            }\r\n\t        }\r\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\r\n\t            kind = 'init';\r\n\t            computed = this.match('[');\r\n\t            key = this.parseObjectPropertyKey();\r\n\t            value = this.parseGeneratorMethod();\r\n\t            method = true;\r\n\t        }\r\n\t        if (!kind && key && this.match('(')) {\r\n\t            kind = 'init';\r\n\t            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\r\n\t            method = true;\r\n\t        }\r\n\t        if (!kind) {\r\n\t            this.throwUnexpectedToken(this.lookahead);\r\n\t        }\r\n\t        if (kind === 'init') {\r\n\t            kind = 'method';\r\n\t        }\r\n\t        if (!computed) {\r\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\r\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\r\n\t            }\r\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\r\n\t                if (kind !== 'method' || !method || (value && value.generator)) {\r\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\r\n\t                }\r\n\t                if (hasConstructor.value) {\r\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\r\n\t                }\r\n\t                else {\r\n\t                    hasConstructor.value = true;\r\n\t                }\r\n\t                kind = 'constructor';\r\n\t            }\r\n\t        }\r\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\r\n\t    };\r\n\t    Parser.prototype.parseClassElementList = function () {\r\n\t        var body = [];\r\n\t        var hasConstructor = { value: false };\r\n\t        this.expect('{');\r\n\t        while (!this.match('}')) {\r\n\t            if (this.match(';')) {\r\n\t                this.nextToken();\r\n\t            }\r\n\t            else {\r\n\t                body.push(this.parseClassElement(hasConstructor));\r\n\t            }\r\n\t        }\r\n\t        this.expect('}');\r\n\t        return body;\r\n\t    };\r\n\t    Parser.prototype.parseClassBody = function () {\r\n\t        var node = this.createNode();\r\n\t        var elementList = this.parseClassElementList();\r\n\t        return this.finalize(node, new Node.ClassBody(elementList));\r\n\t    };\r\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\r\n\t        var node = this.createNode();\r\n\t        var previousStrict = this.context.strict;\r\n\t        this.context.strict = true;\r\n\t        this.expectKeyword('class');\r\n\t        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();\r\n\t        var superClass = null;\r\n\t        if (this.matchKeyword('extends')) {\r\n\t            this.nextToken();\r\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n\t        }\r\n\t        var classBody = this.parseClassBody();\r\n\t        this.context.strict = previousStrict;\r\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\r\n\t    };\r\n\t    Parser.prototype.parseClassExpression = function () {\r\n\t        var node = this.createNode();\r\n\t        var previousStrict = this.context.strict;\r\n\t        this.context.strict = true;\r\n\t        this.expectKeyword('class');\r\n\t        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;\r\n\t        var superClass = null;\r\n\t        if (this.matchKeyword('extends')) {\r\n\t            this.nextToken();\r\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n\t        }\r\n\t        var classBody = this.parseClassBody();\r\n\t        this.context.strict = previousStrict;\r\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-scripts\r\n\t    // https://tc39.github.io/ecma262/#sec-modules\r\n\t    Parser.prototype.parseModule = function () {\r\n\t        this.context.strict = true;\r\n\t        this.context.isModule = true;\r\n\t        this.scanner.isModule = true;\r\n\t        var node = this.createNode();\r\n\t        var body = this.parseDirectivePrologues();\r\n\t        while (this.lookahead.type !== 2 /* EOF */) {\r\n\t            body.push(this.parseStatementListItem());\r\n\t        }\r\n\t        return this.finalize(node, new Node.Module(body));\r\n\t    };\r\n\t    Parser.prototype.parseScript = function () {\r\n\t        var node = this.createNode();\r\n\t        var body = this.parseDirectivePrologues();\r\n\t        while (this.lookahead.type !== 2 /* EOF */) {\r\n\t            body.push(this.parseStatementListItem());\r\n\t        }\r\n\t        return this.finalize(node, new Node.Script(body));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-imports\r\n\t    Parser.prototype.parseModuleSpecifier = function () {\r\n\t        var node = this.createNode();\r\n\t        if (this.lookahead.type !== 8 /* StringLiteral */) {\r\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\r\n\t        }\r\n\t        var token = this.nextToken();\r\n\t        var raw = this.getTokenRaw(token);\r\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\r\n\t    };\r\n\t    // import {<foo as bar>} ...;\r\n\t    Parser.prototype.parseImportSpecifier = function () {\r\n\t        var node = this.createNode();\r\n\t        var imported;\r\n\t        var local;\r\n\t        if (this.lookahead.type === 3 /* Identifier */) {\r\n\t            imported = this.parseVariableIdentifier();\r\n\t            local = imported;\r\n\t            if (this.matchContextualKeyword('as')) {\r\n\t                this.nextToken();\r\n\t                local = this.parseVariableIdentifier();\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            imported = this.parseIdentifierName();\r\n\t            local = imported;\r\n\t            if (this.matchContextualKeyword('as')) {\r\n\t                this.nextToken();\r\n\t                local = this.parseVariableIdentifier();\r\n\t            }\r\n\t            else {\r\n\t                this.throwUnexpectedToken(this.nextToken());\r\n\t            }\r\n\t        }\r\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\r\n\t    };\r\n\t    // {foo, bar as bas}\r\n\t    Parser.prototype.parseNamedImports = function () {\r\n\t        this.expect('{');\r\n\t        var specifiers = [];\r\n\t        while (!this.match('}')) {\r\n\t            specifiers.push(this.parseImportSpecifier());\r\n\t            if (!this.match('}')) {\r\n\t                this.expect(',');\r\n\t            }\r\n\t        }\r\n\t        this.expect('}');\r\n\t        return specifiers;\r\n\t    };\r\n\t    // import <foo> ...;\r\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\r\n\t        var node = this.createNode();\r\n\t        var local = this.parseIdentifierName();\r\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\r\n\t    };\r\n\t    // import <* as foo> ...;\r\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\r\n\t        var node = this.createNode();\r\n\t        this.expect('*');\r\n\t        if (!this.matchContextualKeyword('as')) {\r\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\r\n\t        }\r\n\t        this.nextToken();\r\n\t        var local = this.parseIdentifierName();\r\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\r\n\t    };\r\n\t    Parser.prototype.parseImportDeclaration = function () {\r\n\t        if (this.context.inFunctionBody) {\r\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\r\n\t        }\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('import');\r\n\t        var src;\r\n\t        var specifiers = [];\r\n\t        if (this.lookahead.type === 8 /* StringLiteral */) {\r\n\t            // import 'foo';\r\n\t            src = this.parseModuleSpecifier();\r\n\t        }\r\n\t        else {\r\n\t            if (this.match('{')) {\r\n\t                // import {bar}\r\n\t                specifiers = specifiers.concat(this.parseNamedImports());\r\n\t            }\r\n\t            else if (this.match('*')) {\r\n\t                // import * as foo\r\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\r\n\t            }\r\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\r\n\t                // import foo\r\n\t                specifiers.push(this.parseImportDefaultSpecifier());\r\n\t                if (this.match(',')) {\r\n\t                    this.nextToken();\r\n\t                    if (this.match('*')) {\r\n\t                        // import foo, * as foo\r\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\r\n\t                    }\r\n\t                    else if (this.match('{')) {\r\n\t                        // import foo, {bar}\r\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\r\n\t                    }\r\n\t                    else {\r\n\t                        this.throwUnexpectedToken(this.lookahead);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this.throwUnexpectedToken(this.nextToken());\r\n\t            }\r\n\t            if (!this.matchContextualKeyword('from')) {\r\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\r\n\t                this.throwError(message, this.lookahead.value);\r\n\t            }\r\n\t            this.nextToken();\r\n\t            src = this.parseModuleSpecifier();\r\n\t        }\r\n\t        this.consumeSemicolon();\r\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-exports\r\n\t    Parser.prototype.parseExportSpecifier = function () {\r\n\t        var node = this.createNode();\r\n\t        var local = this.parseIdentifierName();\r\n\t        var exported = local;\r\n\t        if (this.matchContextualKeyword('as')) {\r\n\t            this.nextToken();\r\n\t            exported = this.parseIdentifierName();\r\n\t        }\r\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\r\n\t    };\r\n\t    Parser.prototype.parseExportDeclaration = function () {\r\n\t        if (this.context.inFunctionBody) {\r\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\r\n\t        }\r\n\t        var node = this.createNode();\r\n\t        this.expectKeyword('export');\r\n\t        var exportDeclaration;\r\n\t        if (this.matchKeyword('default')) {\r\n\t            // export default ...\r\n\t            this.nextToken();\r\n\t            if (this.matchKeyword('function')) {\r\n\t                // export default function foo () {}\r\n\t                // export default function () {}\r\n\t                var declaration = this.parseFunctionDeclaration(true);\r\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n\t            }\r\n\t            else if (this.matchKeyword('class')) {\r\n\t                // export default class foo {}\r\n\t                var declaration = this.parseClassDeclaration(true);\r\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n\t            }\r\n\t            else if (this.matchContextualKeyword('async')) {\r\n\t                // export default async function f () {}\r\n\t                // export default async function () {}\r\n\t                // export default async x => x\r\n\t                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\r\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n\t            }\r\n\t            else {\r\n\t                if (this.matchContextualKeyword('from')) {\r\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\r\n\t                }\r\n\t                // export default {};\r\n\t                // export default [];\r\n\t                // export default (1 + 2);\r\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\r\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\r\n\t                this.consumeSemicolon();\r\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n\t            }\r\n\t        }\r\n\t        else if (this.match('*')) {\r\n\t            // export * from 'foo';\r\n\t            this.nextToken();\r\n\t            if (!this.matchContextualKeyword('from')) {\r\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\r\n\t                this.throwError(message, this.lookahead.value);\r\n\t            }\r\n\t            this.nextToken();\r\n\t            var src = this.parseModuleSpecifier();\r\n\t            this.consumeSemicolon();\r\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\r\n\t        }\r\n\t        else if (this.lookahead.type === 4 /* Keyword */) {\r\n\t            // export var f = 1;\r\n\t            var declaration = void 0;\r\n\t            switch (this.lookahead.value) {\r\n\t                case 'let':\r\n\t                case 'const':\r\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\r\n\t                    break;\r\n\t                case 'var':\r\n\t                case 'class':\r\n\t                case 'function':\r\n\t                    declaration = this.parseStatementListItem();\r\n\t                    break;\r\n\t                default:\r\n\t                    this.throwUnexpectedToken(this.lookahead);\r\n\t            }\r\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\r\n\t        }\r\n\t        else if (this.matchAsyncFunction()) {\r\n\t            var declaration = this.parseFunctionDeclaration();\r\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\r\n\t        }\r\n\t        else {\r\n\t            var specifiers = [];\r\n\t            var source = null;\r\n\t            var isExportFromIdentifier = false;\r\n\t            this.expect('{');\r\n\t            while (!this.match('}')) {\r\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\r\n\t                specifiers.push(this.parseExportSpecifier());\r\n\t                if (!this.match('}')) {\r\n\t                    this.expect(',');\r\n\t                }\r\n\t            }\r\n\t            this.expect('}');\r\n\t            if (this.matchContextualKeyword('from')) {\r\n\t                // export {default} from 'foo';\r\n\t                // export {foo} from 'foo';\r\n\t                this.nextToken();\r\n\t                source = this.parseModuleSpecifier();\r\n\t                this.consumeSemicolon();\r\n\t            }\r\n\t            else if (isExportFromIdentifier) {\r\n\t                // export {default}; // missing fromClause\r\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\r\n\t                this.throwError(message, this.lookahead.value);\r\n\t            }\r\n\t            else {\r\n\t                // export {foo};\r\n\t                this.consumeSemicolon();\r\n\t            }\r\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\r\n\t        }\r\n\t        return exportDeclaration;\r\n\t    };\r\n\t    return Parser;\r\n\t}());\r\n\texports.Parser = Parser;\r\n\r\n\r\n/***/ },\r\n/* 9 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\t// Ensure the condition is true, otherwise throw an error.\r\n\t// This is only to have a better contract semantic, i.e. another safety net\r\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\r\n\t// Do NOT use this to enforce a certain condition on any user input.\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tfunction assert(condition, message) {\r\n\t    /* istanbul ignore if */\r\n\t    if (!condition) {\r\n\t        throw new Error('ASSERT: ' + message);\r\n\t    }\r\n\t}\r\n\texports.assert = assert;\r\n\r\n\r\n/***/ },\r\n/* 10 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar ErrorHandler = /** @class */ (function () {\r\n\t    function ErrorHandler() {\r\n\t        this.errors = [];\r\n\t        this.tolerant = false;\r\n\t    }\r\n\t    ErrorHandler.prototype.recordError = function (error) {\r\n\t        this.errors.push(error);\r\n\t    };\r\n\t    ErrorHandler.prototype.tolerate = function (error) {\r\n\t        if (this.tolerant) {\r\n\t            this.recordError(error);\r\n\t        }\r\n\t        else {\r\n\t            throw error;\r\n\t        }\r\n\t    };\r\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\r\n\t        var error = new Error(msg);\r\n\t        try {\r\n\t            throw error;\r\n\t        }\r\n\t        catch (base) {\r\n\t            /* istanbul ignore else */\r\n\t            if (Object.create && Object.defineProperty) {\r\n\t                error = Object.create(base);\r\n\t                Object.defineProperty(error, 'column', { value: column });\r\n\t            }\r\n\t        }\r\n\t        /* istanbul ignore next */\r\n\t        return error;\r\n\t    };\r\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\r\n\t        var msg = 'Line ' + line + ': ' + description;\r\n\t        var error = this.constructError(msg, col);\r\n\t        error.index = index;\r\n\t        error.lineNumber = line;\r\n\t        error.description = description;\r\n\t        return error;\r\n\t    };\r\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\r\n\t        throw this.createError(index, line, col, description);\r\n\t    };\r\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\r\n\t        var error = this.createError(index, line, col, description);\r\n\t        if (this.tolerant) {\r\n\t            this.recordError(error);\r\n\t        }\r\n\t        else {\r\n\t            throw error;\r\n\t        }\r\n\t    };\r\n\t    return ErrorHandler;\r\n\t}());\r\n\texports.ErrorHandler = ErrorHandler;\r\n\r\n\r\n/***/ },\r\n/* 11 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t// Error messages should be identical to V8.\r\n\texports.Messages = {\r\n\t    BadImportCallArity: 'Unexpected token',\r\n\t    BadGetterArity: 'Getter must not have any formal parameters',\r\n\t    BadSetterArity: 'Setter must have exactly one formal parameter',\r\n\t    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\r\n\t    ConstructorIsAsync: 'Class constructor may not be an async method',\r\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\r\n\t    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\r\n\t    DefaultRestParameter: 'Unexpected token =',\r\n\t    DefaultRestProperty: 'Unexpected token =',\r\n\t    DuplicateBinding: 'Duplicate binding %0',\r\n\t    DuplicateConstructor: 'A class may only have one constructor',\r\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\r\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\r\n\t    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\r\n\t    IllegalBreak: 'Illegal break statement',\r\n\t    IllegalContinue: 'Illegal continue statement',\r\n\t    IllegalExportDeclaration: 'Unexpected token',\r\n\t    IllegalImportDeclaration: 'Unexpected token',\r\n\t    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\r\n\t    IllegalReturn: 'Illegal return statement',\r\n\t    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\r\n\t    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\r\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\r\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\r\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\r\n\t    InvalidModuleSpecifier: 'Unexpected token',\r\n\t    InvalidRegExp: 'Invalid regular expression',\r\n\t    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\r\n\t    MissingFromClause: 'Unexpected token',\r\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\r\n\t    NewlineAfterThrow: 'Illegal newline after throw',\r\n\t    NoAsAfterImportNamespace: 'Unexpected token',\r\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\r\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\r\n\t    PropertyAfterRestProperty: 'Unexpected token',\r\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\r\n\t    StaticPrototype: 'Classes may not have static property named prototype',\r\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\r\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\r\n\t    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\r\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\r\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\r\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\r\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\r\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\r\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\r\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\r\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\r\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\r\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\r\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\r\n\t    UnexpectedEOS: 'Unexpected end of input',\r\n\t    UnexpectedIdentifier: 'Unexpected identifier',\r\n\t    UnexpectedNumber: 'Unexpected number',\r\n\t    UnexpectedReserved: 'Unexpected reserved word',\r\n\t    UnexpectedString: 'Unexpected string',\r\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\r\n\t    UnexpectedToken: 'Unexpected token %0',\r\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\r\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\r\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /'\r\n\t};\r\n\r\n\r\n/***/ },\r\n/* 12 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar assert_1 = __webpack_require__(9);\r\n\tvar character_1 = __webpack_require__(4);\r\n\tvar messages_1 = __webpack_require__(11);\r\n\tfunction hexValue(ch) {\r\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\r\n\t}\r\n\tfunction octalValue(ch) {\r\n\t    return '01234567'.indexOf(ch);\r\n\t}\r\n\tvar Scanner = /** @class */ (function () {\r\n\t    function Scanner(code, handler) {\r\n\t        this.source = code;\r\n\t        this.errorHandler = handler;\r\n\t        this.trackComment = false;\r\n\t        this.isModule = false;\r\n\t        this.length = code.length;\r\n\t        this.index = 0;\r\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\r\n\t        this.lineStart = 0;\r\n\t        this.curlyStack = [];\r\n\t    }\r\n\t    Scanner.prototype.saveState = function () {\r\n\t        return {\r\n\t            index: this.index,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            curlyStack: this.curlyStack.slice()\r\n\t        };\r\n\t    };\r\n\t    Scanner.prototype.restoreState = function (state) {\r\n\t        this.index = state.index;\r\n\t        this.lineNumber = state.lineNumber;\r\n\t        this.lineStart = state.lineStart;\r\n\t        this.curlyStack = state.curlyStack;\r\n\t    };\r\n\t    Scanner.prototype.eof = function () {\r\n\t        return this.index >= this.length;\r\n\t    };\r\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\r\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\r\n\t        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\r\n\t    };\r\n\t    Scanner.prototype.tolerateUnexpectedToken = function (message) {\r\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\r\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-comments\r\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\r\n\t        var comments = [];\r\n\t        var start, loc;\r\n\t        if (this.trackComment) {\r\n\t            comments = [];\r\n\t            start = this.index - offset;\r\n\t            loc = {\r\n\t                start: {\r\n\t                    line: this.lineNumber,\r\n\t                    column: this.index - this.lineStart - offset\r\n\t                },\r\n\t                end: {}\r\n\t            };\r\n\t        }\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source.charCodeAt(this.index);\r\n\t            ++this.index;\r\n\t            if (character_1.Character.isLineTerminator(ch)) {\r\n\t                if (this.trackComment) {\r\n\t                    loc.end = {\r\n\t                        line: this.lineNumber,\r\n\t                        column: this.index - this.lineStart - 1\r\n\t                    };\r\n\t                    var entry = {\r\n\t                        multiLine: false,\r\n\t                        slice: [start + offset, this.index - 1],\r\n\t                        range: [start, this.index - 1],\r\n\t                        loc: loc\r\n\t                    };\r\n\t                    comments.push(entry);\r\n\t                }\r\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\r\n\t                    ++this.index;\r\n\t                }\r\n\t                ++this.lineNumber;\r\n\t                this.lineStart = this.index;\r\n\t                return comments;\r\n\t            }\r\n\t        }\r\n\t        if (this.trackComment) {\r\n\t            loc.end = {\r\n\t                line: this.lineNumber,\r\n\t                column: this.index - this.lineStart\r\n\t            };\r\n\t            var entry = {\r\n\t                multiLine: false,\r\n\t                slice: [start + offset, this.index],\r\n\t                range: [start, this.index],\r\n\t                loc: loc\r\n\t            };\r\n\t            comments.push(entry);\r\n\t        }\r\n\t        return comments;\r\n\t    };\r\n\t    Scanner.prototype.skipMultiLineComment = function () {\r\n\t        var comments = [];\r\n\t        var start, loc;\r\n\t        if (this.trackComment) {\r\n\t            comments = [];\r\n\t            start = this.index - 2;\r\n\t            loc = {\r\n\t                start: {\r\n\t                    line: this.lineNumber,\r\n\t                    column: this.index - this.lineStart - 2\r\n\t                },\r\n\t                end: {}\r\n\t            };\r\n\t        }\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source.charCodeAt(this.index);\r\n\t            if (character_1.Character.isLineTerminator(ch)) {\r\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\r\n\t                    ++this.index;\r\n\t                }\r\n\t                ++this.lineNumber;\r\n\t                ++this.index;\r\n\t                this.lineStart = this.index;\r\n\t            }\r\n\t            else if (ch === 0x2A) {\r\n\t                // Block comment ends with '*/'.\r\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\r\n\t                    this.index += 2;\r\n\t                    if (this.trackComment) {\r\n\t                        loc.end = {\r\n\t                            line: this.lineNumber,\r\n\t                            column: this.index - this.lineStart\r\n\t                        };\r\n\t                        var entry = {\r\n\t                            multiLine: true,\r\n\t                            slice: [start + 2, this.index - 2],\r\n\t                            range: [start, this.index],\r\n\t                            loc: loc\r\n\t                        };\r\n\t                        comments.push(entry);\r\n\t                    }\r\n\t                    return comments;\r\n\t                }\r\n\t                ++this.index;\r\n\t            }\r\n\t            else {\r\n\t                ++this.index;\r\n\t            }\r\n\t        }\r\n\t        // Ran off the end of the file - the whole thing is a comment\r\n\t        if (this.trackComment) {\r\n\t            loc.end = {\r\n\t                line: this.lineNumber,\r\n\t                column: this.index - this.lineStart\r\n\t            };\r\n\t            var entry = {\r\n\t                multiLine: true,\r\n\t                slice: [start + 2, this.index],\r\n\t                range: [start, this.index],\r\n\t                loc: loc\r\n\t            };\r\n\t            comments.push(entry);\r\n\t        }\r\n\t        this.tolerateUnexpectedToken();\r\n\t        return comments;\r\n\t    };\r\n\t    Scanner.prototype.scanComments = function () {\r\n\t        var comments;\r\n\t        if (this.trackComment) {\r\n\t            comments = [];\r\n\t        }\r\n\t        var start = (this.index === 0);\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source.charCodeAt(this.index);\r\n\t            if (character_1.Character.isWhiteSpace(ch)) {\r\n\t                ++this.index;\r\n\t            }\r\n\t            else if (character_1.Character.isLineTerminator(ch)) {\r\n\t                ++this.index;\r\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\r\n\t                    ++this.index;\r\n\t                }\r\n\t                ++this.lineNumber;\r\n\t                this.lineStart = this.index;\r\n\t                start = true;\r\n\t            }\r\n\t            else if (ch === 0x2F) { // U+002F is '/'\r\n\t                ch = this.source.charCodeAt(this.index + 1);\r\n\t                if (ch === 0x2F) {\r\n\t                    this.index += 2;\r\n\t                    var comment = this.skipSingleLineComment(2);\r\n\t                    if (this.trackComment) {\r\n\t                        comments = comments.concat(comment);\r\n\t                    }\r\n\t                    start = true;\r\n\t                }\r\n\t                else if (ch === 0x2A) { // U+002A is '*'\r\n\t                    this.index += 2;\r\n\t                    var comment = this.skipMultiLineComment();\r\n\t                    if (this.trackComment) {\r\n\t                        comments = comments.concat(comment);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            else if (start && ch === 0x2D) { // U+002D is '-'\r\n\t                // U+003E is '>'\r\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\r\n\t                    // '-->' is a single-line comment\r\n\t                    this.index += 3;\r\n\t                    var comment = this.skipSingleLineComment(3);\r\n\t                    if (this.trackComment) {\r\n\t                        comments = comments.concat(comment);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            else if (ch === 0x3C && !this.isModule) { // U+003C is '<'\r\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\r\n\t                    this.index += 4; // `<!--`\r\n\t                    var comment = this.skipSingleLineComment(4);\r\n\t                    if (this.trackComment) {\r\n\t                        comments = comments.concat(comment);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        return comments;\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-future-reserved-words\r\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\r\n\t        switch (id) {\r\n\t            case 'enum':\r\n\t            case 'export':\r\n\t            case 'import':\r\n\t            case 'super':\r\n\t                return true;\r\n\t            default:\r\n\t                return false;\r\n\t        }\r\n\t    };\r\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\r\n\t        switch (id) {\r\n\t            case 'implements':\r\n\t            case 'interface':\r\n\t            case 'package':\r\n\t            case 'private':\r\n\t            case 'protected':\r\n\t            case 'public':\r\n\t            case 'static':\r\n\t            case 'yield':\r\n\t            case 'let':\r\n\t                return true;\r\n\t            default:\r\n\t                return false;\r\n\t        }\r\n\t    };\r\n\t    Scanner.prototype.isRestrictedWord = function (id) {\r\n\t        return id === 'eval' || id === 'arguments';\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-keywords\r\n\t    Scanner.prototype.isKeyword = function (id) {\r\n\t        switch (id.length) {\r\n\t            case 2:\r\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\r\n\t            case 3:\r\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\r\n\t                    (id === 'try') || (id === 'let');\r\n\t            case 4:\r\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\r\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\r\n\t            case 5:\r\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\r\n\t                    (id === 'class') || (id === 'super');\r\n\t            case 6:\r\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\r\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\r\n\t            case 7:\r\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\r\n\t            case 8:\r\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\r\n\t            case 10:\r\n\t                return (id === 'instanceof');\r\n\t            default:\r\n\t                return false;\r\n\t        }\r\n\t    };\r\n\t    Scanner.prototype.codePointAt = function (i) {\r\n\t        var cp = this.source.charCodeAt(i);\r\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\r\n\t            var second = this.source.charCodeAt(i + 1);\r\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\r\n\t                var first = cp;\r\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n\t            }\r\n\t        }\r\n\t        return cp;\r\n\t    };\r\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\r\n\t        var len = (prefix === 'u') ? 4 : 2;\r\n\t        var code = 0;\r\n\t        for (var i = 0; i < len; ++i) {\r\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\r\n\t                code = code * 16 + hexValue(this.source[this.index++]);\r\n\t            }\r\n\t            else {\r\n\t                return null;\r\n\t            }\r\n\t        }\r\n\t        return String.fromCharCode(code);\r\n\t    };\r\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\r\n\t        var ch = this.source[this.index];\r\n\t        var code = 0;\r\n\t        // At least, one hex digit is required.\r\n\t        if (ch === '}') {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        while (!this.eof()) {\r\n\t            ch = this.source[this.index++];\r\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\r\n\t                break;\r\n\t            }\r\n\t            code = code * 16 + hexValue(ch);\r\n\t        }\r\n\t        if (code > 0x10FFFF || ch !== '}') {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return character_1.Character.fromCodePoint(code);\r\n\t    };\r\n\t    Scanner.prototype.getIdentifier = function () {\r\n\t        var start = this.index++;\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source.charCodeAt(this.index);\r\n\t            if (ch === 0x5C) {\r\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\r\n\t                this.index = start;\r\n\t                return this.getComplexIdentifier();\r\n\t            }\r\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\r\n\t                // Need to handle surrogate pairs.\r\n\t                this.index = start;\r\n\t                return this.getComplexIdentifier();\r\n\t            }\r\n\t            if (character_1.Character.isIdentifierPart(ch)) {\r\n\t                ++this.index;\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        return this.source.slice(start, this.index);\r\n\t    };\r\n\t    Scanner.prototype.getComplexIdentifier = function () {\r\n\t        var cp = this.codePointAt(this.index);\r\n\t        var id = character_1.Character.fromCodePoint(cp);\r\n\t        this.index += id.length;\r\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n\t        var ch;\r\n\t        if (cp === 0x5C) {\r\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\r\n\t                this.throwUnexpectedToken();\r\n\t            }\r\n\t            ++this.index;\r\n\t            if (this.source[this.index] === '{') {\r\n\t                ++this.index;\r\n\t                ch = this.scanUnicodeCodePointEscape();\r\n\t            }\r\n\t            else {\r\n\t                ch = this.scanHexEscape('u');\r\n\t                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\r\n\t                    this.throwUnexpectedToken();\r\n\t                }\r\n\t            }\r\n\t            id = ch;\r\n\t        }\r\n\t        while (!this.eof()) {\r\n\t            cp = this.codePointAt(this.index);\r\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\r\n\t                break;\r\n\t            }\r\n\t            ch = character_1.Character.fromCodePoint(cp);\r\n\t            id += ch;\r\n\t            this.index += ch.length;\r\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n\t            if (cp === 0x5C) {\r\n\t                id = id.substr(0, id.length - 1);\r\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\r\n\t                    this.throwUnexpectedToken();\r\n\t                }\r\n\t                ++this.index;\r\n\t                if (this.source[this.index] === '{') {\r\n\t                    ++this.index;\r\n\t                    ch = this.scanUnicodeCodePointEscape();\r\n\t                }\r\n\t                else {\r\n\t                    ch = this.scanHexEscape('u');\r\n\t                    if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n\t                        this.throwUnexpectedToken();\r\n\t                    }\r\n\t                }\r\n\t                id += ch;\r\n\t            }\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    Scanner.prototype.octalToDecimal = function (ch) {\r\n\t        // \\0 is not octal escape sequence\r\n\t        var octal = (ch !== '0');\r\n\t        var code = octalValue(ch);\r\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n\t            octal = true;\r\n\t            code = code * 8 + octalValue(this.source[this.index++]);\r\n\t            // 3 digits are only allowed when string starts\r\n\t            // with 0, 1, 2, 3\r\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n\t                code = code * 8 + octalValue(this.source[this.index++]);\r\n\t            }\r\n\t        }\r\n\t        return {\r\n\t            code: code,\r\n\t            octal: octal\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n\t    Scanner.prototype.scanIdentifier = function () {\r\n\t        var type;\r\n\t        var start = this.index;\r\n\t        // Backslash (U+005C) starts an escaped character.\r\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\r\n\t        // There is no keyword or literal with only one character.\r\n\t        // Thus, it must be an identifier.\r\n\t        if (id.length === 1) {\r\n\t            type = 3 /* Identifier */;\r\n\t        }\r\n\t        else if (this.isKeyword(id)) {\r\n\t            type = 4 /* Keyword */;\r\n\t        }\r\n\t        else if (id === 'null') {\r\n\t            type = 5 /* NullLiteral */;\r\n\t        }\r\n\t        else if (id === 'true' || id === 'false') {\r\n\t            type = 1 /* BooleanLiteral */;\r\n\t        }\r\n\t        else {\r\n\t            type = 3 /* Identifier */;\r\n\t        }\r\n\t        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {\r\n\t            var restore = this.index;\r\n\t            this.index = start;\r\n\t            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\r\n\t            this.index = restore;\r\n\t        }\r\n\t        return {\r\n\t            type: type,\r\n\t            value: id,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-punctuators\r\n\t    Scanner.prototype.scanPunctuator = function () {\r\n\t        var start = this.index;\r\n\t        // Check for most common single-character punctuators.\r\n\t        var str = this.source[this.index];\r\n\t        switch (str) {\r\n\t            case '(':\r\n\t            case '{':\r\n\t                if (str === '{') {\r\n\t                    this.curlyStack.push('{');\r\n\t                }\r\n\t                ++this.index;\r\n\t                break;\r\n\t            case '.':\r\n\t                ++this.index;\r\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\r\n\t                    // Spread operator: ...\r\n\t                    this.index += 2;\r\n\t                    str = '...';\r\n\t                }\r\n\t                break;\r\n\t            case '}':\r\n\t                ++this.index;\r\n\t                this.curlyStack.pop();\r\n\t                break;\r\n\t            case ')':\r\n\t            case ';':\r\n\t            case ',':\r\n\t            case '[':\r\n\t            case ']':\r\n\t            case ':':\r\n\t            case '?':\r\n\t            case '~':\r\n\t                ++this.index;\r\n\t                break;\r\n\t            default:\r\n\t                // 4-character punctuator.\r\n\t                str = this.source.substr(this.index, 4);\r\n\t                if (str === '>>>=') {\r\n\t                    this.index += 4;\r\n\t                }\r\n\t                else {\r\n\t                    // 3-character punctuators.\r\n\t                    str = str.substr(0, 3);\r\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\r\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\r\n\t                        this.index += 3;\r\n\t                    }\r\n\t                    else {\r\n\t                        // 2-character punctuators.\r\n\t                        str = str.substr(0, 2);\r\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\r\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\r\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\r\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\r\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\r\n\t                            this.index += 2;\r\n\t                        }\r\n\t                        else {\r\n\t                            // 1-character punctuators.\r\n\t                            str = this.source[this.index];\r\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\r\n\t                                ++this.index;\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t        }\r\n\t        if (this.index === start) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return {\r\n\t            type: 7 /* Punctuator */,\r\n\t            value: str,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n\t    Scanner.prototype.scanHexLiteral = function (start) {\r\n\t        var num = '';\r\n\t        while (!this.eof()) {\r\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\r\n\t                break;\r\n\t            }\r\n\t            num += this.source[this.index++];\r\n\t        }\r\n\t        if (num.length === 0) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return {\r\n\t            type: 6 /* NumericLiteral */,\r\n\t            value: parseInt('0x' + num, 16),\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\r\n\t        var num = '';\r\n\t        var ch;\r\n\t        while (!this.eof()) {\r\n\t            ch = this.source[this.index];\r\n\t            if (ch !== '0' && ch !== '1') {\r\n\t                break;\r\n\t            }\r\n\t            num += this.source[this.index++];\r\n\t        }\r\n\t        if (num.length === 0) {\r\n\t            // only 0b or 0B\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        if (!this.eof()) {\r\n\t            ch = this.source.charCodeAt(this.index);\r\n\t            /* istanbul ignore else */\r\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\r\n\t                this.throwUnexpectedToken();\r\n\t            }\r\n\t        }\r\n\t        return {\r\n\t            type: 6 /* NumericLiteral */,\r\n\t            value: parseInt(num, 2),\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\r\n\t        var num = '';\r\n\t        var octal = false;\r\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\r\n\t            octal = true;\r\n\t            num = '0' + this.source[this.index++];\r\n\t        }\r\n\t        else {\r\n\t            ++this.index;\r\n\t        }\r\n\t        while (!this.eof()) {\r\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n\t                break;\r\n\t            }\r\n\t            num += this.source[this.index++];\r\n\t        }\r\n\t        if (!octal && num.length === 0) {\r\n\t            // only 0o or 0O\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return {\r\n\t            type: 6 /* NumericLiteral */,\r\n\t            value: parseInt(num, 8),\r\n\t            octal: octal,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\r\n\t        // Implicit octal, unless there is a non-octal digit.\r\n\t        // (Annex B.1.1 on Numeric Literals)\r\n\t        for (var i = this.index + 1; i < this.length; ++i) {\r\n\t            var ch = this.source[i];\r\n\t            if (ch === '8' || ch === '9') {\r\n\t                return false;\r\n\t            }\r\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t    Scanner.prototype.scanNumericLiteral = function () {\r\n\t        var start = this.index;\r\n\t        var ch = this.source[start];\r\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\r\n\t        var num = '';\r\n\t        if (ch !== '.') {\r\n\t            num = this.source[this.index++];\r\n\t            ch = this.source[this.index];\r\n\t            // Hex number starts with '0x'.\r\n\t            // Octal number starts with '0'.\r\n\t            // Octal number in ES6 starts with '0o'.\r\n\t            // Binary number in ES6 starts with '0b'.\r\n\t            if (num === '0') {\r\n\t                if (ch === 'x' || ch === 'X') {\r\n\t                    ++this.index;\r\n\t                    return this.scanHexLiteral(start);\r\n\t                }\r\n\t                if (ch === 'b' || ch === 'B') {\r\n\t                    ++this.index;\r\n\t                    return this.scanBinaryLiteral(start);\r\n\t                }\r\n\t                if (ch === 'o' || ch === 'O') {\r\n\t                    return this.scanOctalLiteral(ch, start);\r\n\t                }\r\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\r\n\t                    if (this.isImplicitOctalLiteral()) {\r\n\t                        return this.scanOctalLiteral(ch, start);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t                num += this.source[this.index++];\r\n\t            }\r\n\t            ch = this.source[this.index];\r\n\t        }\r\n\t        if (ch === '.') {\r\n\t            num += this.source[this.index++];\r\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t                num += this.source[this.index++];\r\n\t            }\r\n\t            ch = this.source[this.index];\r\n\t        }\r\n\t        if (ch === 'e' || ch === 'E') {\r\n\t            num += this.source[this.index++];\r\n\t            ch = this.source[this.index];\r\n\t            if (ch === '+' || ch === '-') {\r\n\t                num += this.source[this.index++];\r\n\t            }\r\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t                    num += this.source[this.index++];\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                this.throwUnexpectedToken();\r\n\t            }\r\n\t        }\r\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return {\r\n\t            type: 6 /* NumericLiteral */,\r\n\t            value: parseFloat(num),\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-literals-string-literals\r\n\t    Scanner.prototype.scanStringLiteral = function () {\r\n\t        var start = this.index;\r\n\t        var quote = this.source[start];\r\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\r\n\t        ++this.index;\r\n\t        var octal = false;\r\n\t        var str = '';\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source[this.index++];\r\n\t            if (ch === quote) {\r\n\t                quote = '';\r\n\t                break;\r\n\t            }\r\n\t            else if (ch === '\\\\') {\r\n\t                ch = this.source[this.index++];\r\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                    switch (ch) {\r\n\t                        case 'u':\r\n\t                            if (this.source[this.index] === '{') {\r\n\t                                ++this.index;\r\n\t                                str += this.scanUnicodeCodePointEscape();\r\n\t                            }\r\n\t                            else {\r\n\t                                var unescapedChar = this.scanHexEscape(ch);\r\n\t                                if (unescapedChar === null) {\r\n\t                                    this.throwUnexpectedToken();\r\n\t                                }\r\n\t                                str += unescapedChar;\r\n\t                            }\r\n\t                            break;\r\n\t                        case 'x':\r\n\t                            var unescaped = this.scanHexEscape(ch);\r\n\t                            if (unescaped === null) {\r\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\r\n\t                            }\r\n\t                            str += unescaped;\r\n\t                            break;\r\n\t                        case 'n':\r\n\t                            str += '\\n';\r\n\t                            break;\r\n\t                        case 'r':\r\n\t                            str += '\\r';\r\n\t                            break;\r\n\t                        case 't':\r\n\t                            str += '\\t';\r\n\t                            break;\r\n\t                        case 'b':\r\n\t                            str += '\\b';\r\n\t                            break;\r\n\t                        case 'f':\r\n\t                            str += '\\f';\r\n\t                            break;\r\n\t                        case 'v':\r\n\t                            str += '\\x0B';\r\n\t                            break;\r\n\t                        case '8':\r\n\t                        case '9':\r\n\t                            str += ch;\r\n\t                            this.tolerateUnexpectedToken();\r\n\t                            break;\r\n\t                        default:\r\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\r\n\t                                var octToDec = this.octalToDecimal(ch);\r\n\t                                octal = octToDec.octal || octal;\r\n\t                                str += String.fromCharCode(octToDec.code);\r\n\t                            }\r\n\t                            else {\r\n\t                                str += ch;\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    ++this.lineNumber;\r\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n\t                        ++this.index;\r\n\t                    }\r\n\t                    this.lineStart = this.index;\r\n\t                }\r\n\t            }\r\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                break;\r\n\t            }\r\n\t            else {\r\n\t                str += ch;\r\n\t            }\r\n\t        }\r\n\t        if (quote !== '') {\r\n\t            this.index = start;\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        return {\r\n\t            type: 8 /* StringLiteral */,\r\n\t            value: str,\r\n\t            octal: octal,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\r\n\t    Scanner.prototype.scanTemplate = function () {\r\n\t        var cooked = '';\r\n\t        var terminated = false;\r\n\t        var start = this.index;\r\n\t        var head = (this.source[start] === '`');\r\n\t        var tail = false;\r\n\t        var rawOffset = 2;\r\n\t        ++this.index;\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source[this.index++];\r\n\t            if (ch === '`') {\r\n\t                rawOffset = 1;\r\n\t                tail = true;\r\n\t                terminated = true;\r\n\t                break;\r\n\t            }\r\n\t            else if (ch === '$') {\r\n\t                if (this.source[this.index] === '{') {\r\n\t                    this.curlyStack.push('${');\r\n\t                    ++this.index;\r\n\t                    terminated = true;\r\n\t                    break;\r\n\t                }\r\n\t                cooked += ch;\r\n\t            }\r\n\t            else if (ch === '\\\\') {\r\n\t                ch = this.source[this.index++];\r\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                    switch (ch) {\r\n\t                        case 'n':\r\n\t                            cooked += '\\n';\r\n\t                            break;\r\n\t                        case 'r':\r\n\t                            cooked += '\\r';\r\n\t                            break;\r\n\t                        case 't':\r\n\t                            cooked += '\\t';\r\n\t                            break;\r\n\t                        case 'u':\r\n\t                            if (this.source[this.index] === '{') {\r\n\t                                ++this.index;\r\n\t                                cooked += this.scanUnicodeCodePointEscape();\r\n\t                            }\r\n\t                            else {\r\n\t                                var restore = this.index;\r\n\t                                var unescapedChar = this.scanHexEscape(ch);\r\n\t                                if (unescapedChar !== null) {\r\n\t                                    cooked += unescapedChar;\r\n\t                                }\r\n\t                                else {\r\n\t                                    this.index = restore;\r\n\t                                    cooked += ch;\r\n\t                                }\r\n\t                            }\r\n\t                            break;\r\n\t                        case 'x':\r\n\t                            var unescaped = this.scanHexEscape(ch);\r\n\t                            if (unescaped === null) {\r\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\r\n\t                            }\r\n\t                            cooked += unescaped;\r\n\t                            break;\r\n\t                        case 'b':\r\n\t                            cooked += '\\b';\r\n\t                            break;\r\n\t                        case 'f':\r\n\t                            cooked += '\\f';\r\n\t                            break;\r\n\t                        case 'v':\r\n\t                            cooked += '\\v';\r\n\t                            break;\r\n\t                        default:\r\n\t                            if (ch === '0') {\r\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n\t                                    // Illegal: \\01 \\02 and so on\r\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\r\n\t                                }\r\n\t                                cooked += '\\0';\r\n\t                            }\r\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\r\n\t                                // Illegal: \\1 \\2\r\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\r\n\t                            }\r\n\t                            else {\r\n\t                                cooked += ch;\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    ++this.lineNumber;\r\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n\t                        ++this.index;\r\n\t                    }\r\n\t                    this.lineStart = this.index;\r\n\t                }\r\n\t            }\r\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                ++this.lineNumber;\r\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n\t                    ++this.index;\r\n\t                }\r\n\t                this.lineStart = this.index;\r\n\t                cooked += '\\n';\r\n\t            }\r\n\t            else {\r\n\t                cooked += ch;\r\n\t            }\r\n\t        }\r\n\t        if (!terminated) {\r\n\t            this.throwUnexpectedToken();\r\n\t        }\r\n\t        if (!head) {\r\n\t            this.curlyStack.pop();\r\n\t        }\r\n\t        return {\r\n\t            type: 10 /* Template */,\r\n\t            value: this.source.slice(start + 1, this.index - rawOffset),\r\n\t            cooked: cooked,\r\n\t            head: head,\r\n\t            tail: tail,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\r\n\t        var _this = this;\r\n\t        // The BMP character to use as a replacement for astral symbols when\r\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\r\n\t        // approximation.\r\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\r\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\r\n\t        // pattern that would not be detected by this substitution.\r\n\t        var astralSubstitute = '\\uFFFF';\r\n\t        var tmp = pattern;\r\n\t        if (flags.indexOf('u') >= 0) {\r\n\t            tmp = tmp\r\n\t                // Replace every Unicode escape sequence with the equivalent\r\n\t                // BMP character or a constant ASCII code point in the case of\r\n\t                // astral symbols. (See the above note on `astralSubstitute`\r\n\t                // for more information.)\r\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\r\n\t                var codePoint = parseInt($1 || $2, 16);\r\n\t                if (codePoint > 0x10FFFF) {\r\n\t                    _this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\r\n\t                }\r\n\t                if (codePoint <= 0xFFFF) {\r\n\t                    return String.fromCharCode(codePoint);\r\n\t                }\r\n\t                return astralSubstitute;\r\n\t            })\r\n\t                // Replace each paired surrogate with a single ASCII symbol to\r\n\t                // avoid throwing on regular expressions that are only valid in\r\n\t                // combination with the \"u\" flag.\r\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\r\n\t        }\r\n\t        // First, detect invalid regular expressions.\r\n\t        try {\r\n\t            RegExp(tmp);\r\n\t        }\r\n\t        catch (e) {\r\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\r\n\t        }\r\n\t        // Return a regular expression object for this pattern-flag pair, or\r\n\t        // `null` in case the current environment doesn't support the flags it\r\n\t        // uses.\r\n\t        try {\r\n\t            return new RegExp(pattern, flags);\r\n\t        }\r\n\t        catch (exception) {\r\n\t            /* istanbul ignore next */\r\n\t            return null;\r\n\t        }\r\n\t    };\r\n\t    Scanner.prototype.scanRegExpBody = function () {\r\n\t        var ch = this.source[this.index];\r\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\r\n\t        var str = this.source[this.index++];\r\n\t        var classMarker = false;\r\n\t        var terminated = false;\r\n\t        while (!this.eof()) {\r\n\t            ch = this.source[this.index++];\r\n\t            str += ch;\r\n\t            if (ch === '\\\\') {\r\n\t                ch = this.source[this.index++];\r\n\t                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\r\n\t                }\r\n\t                str += ch;\r\n\t            }\r\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\r\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\r\n\t            }\r\n\t            else if (classMarker) {\r\n\t                if (ch === ']') {\r\n\t                    classMarker = false;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                if (ch === '/') {\r\n\t                    terminated = true;\r\n\t                    break;\r\n\t                }\r\n\t                else if (ch === '[') {\r\n\t                    classMarker = true;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (!terminated) {\r\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\r\n\t        }\r\n\t        // Exclude leading and trailing slash.\r\n\t        return str.substr(1, str.length - 2);\r\n\t    };\r\n\t    Scanner.prototype.scanRegExpFlags = function () {\r\n\t        var str = '';\r\n\t        var flags = '';\r\n\t        while (!this.eof()) {\r\n\t            var ch = this.source[this.index];\r\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n\t                break;\r\n\t            }\r\n\t            ++this.index;\r\n\t            if (ch === '\\\\' && !this.eof()) {\r\n\t                ch = this.source[this.index];\r\n\t                if (ch === 'u') {\r\n\t                    ++this.index;\r\n\t                    var restore = this.index;\r\n\t                    var char = this.scanHexEscape('u');\r\n\t                    if (char !== null) {\r\n\t                        flags += char;\r\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\r\n\t                            str += this.source[restore];\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        this.index = restore;\r\n\t                        flags += 'u';\r\n\t                        str += '\\\\u';\r\n\t                    }\r\n\t                    this.tolerateUnexpectedToken();\r\n\t                }\r\n\t                else {\r\n\t                    str += '\\\\';\r\n\t                    this.tolerateUnexpectedToken();\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                flags += ch;\r\n\t                str += ch;\r\n\t            }\r\n\t        }\r\n\t        return flags;\r\n\t    };\r\n\t    Scanner.prototype.scanRegExp = function () {\r\n\t        var start = this.index;\r\n\t        var pattern = this.scanRegExpBody();\r\n\t        var flags = this.scanRegExpFlags();\r\n\t        var value = this.testRegExp(pattern, flags);\r\n\t        return {\r\n\t            type: 9 /* RegularExpression */,\r\n\t            value: '',\r\n\t            pattern: pattern,\r\n\t            flags: flags,\r\n\t            regex: value,\r\n\t            lineNumber: this.lineNumber,\r\n\t            lineStart: this.lineStart,\r\n\t            start: start,\r\n\t            end: this.index\r\n\t        };\r\n\t    };\r\n\t    Scanner.prototype.lex = function () {\r\n\t        if (this.eof()) {\r\n\t            return {\r\n\t                type: 2 /* EOF */,\r\n\t                value: '',\r\n\t                lineNumber: this.lineNumber,\r\n\t                lineStart: this.lineStart,\r\n\t                start: this.index,\r\n\t                end: this.index\r\n\t            };\r\n\t        }\r\n\t        var cp = this.source.charCodeAt(this.index);\r\n\t        if (character_1.Character.isIdentifierStart(cp)) {\r\n\t            return this.scanIdentifier();\r\n\t        }\r\n\t        // Very common: ( and ) and ;\r\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\r\n\t            return this.scanPunctuator();\r\n\t        }\r\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\r\n\t        if (cp === 0x27 || cp === 0x22) {\r\n\t            return this.scanStringLiteral();\r\n\t        }\r\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\r\n\t        // to check the next character.\r\n\t        if (cp === 0x2E) {\r\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\r\n\t                return this.scanNumericLiteral();\r\n\t            }\r\n\t            return this.scanPunctuator();\r\n\t        }\r\n\t        if (character_1.Character.isDecimalDigit(cp)) {\r\n\t            return this.scanNumericLiteral();\r\n\t        }\r\n\t        // Template literals start with ` (U+0060) for template head\r\n\t        // or } (U+007D) for template middle or template tail.\r\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\r\n\t            return this.scanTemplate();\r\n\t        }\r\n\t        // Possible identifier start in a surrogate pair.\r\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\r\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\r\n\t                return this.scanIdentifier();\r\n\t            }\r\n\t        }\r\n\t        return this.scanPunctuator();\r\n\t    };\r\n\t    return Scanner;\r\n\t}());\r\n\texports.Scanner = Scanner;\r\n\r\n\r\n/***/ },\r\n/* 13 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.TokenName = {};\r\n\texports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\r\n\texports.TokenName[2 /* EOF */] = '<end>';\r\n\texports.TokenName[3 /* Identifier */] = 'Identifier';\r\n\texports.TokenName[4 /* Keyword */] = 'Keyword';\r\n\texports.TokenName[5 /* NullLiteral */] = 'Null';\r\n\texports.TokenName[6 /* NumericLiteral */] = 'Numeric';\r\n\texports.TokenName[7 /* Punctuator */] = 'Punctuator';\r\n\texports.TokenName[8 /* StringLiteral */] = 'String';\r\n\texports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\r\n\texports.TokenName[10 /* Template */] = 'Template';\r\n\r\n\r\n/***/ },\r\n/* 14 */\r\n/***/ function(module, exports) {\r\n\r\n\t\"use strict\";\r\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\texports.XHTMLEntities = {\r\n\t    quot: '\\u0022',\r\n\t    amp: '\\u0026',\r\n\t    apos: '\\u0027',\r\n\t    gt: '\\u003E',\r\n\t    nbsp: '\\u00A0',\r\n\t    iexcl: '\\u00A1',\r\n\t    cent: '\\u00A2',\r\n\t    pound: '\\u00A3',\r\n\t    curren: '\\u00A4',\r\n\t    yen: '\\u00A5',\r\n\t    brvbar: '\\u00A6',\r\n\t    sect: '\\u00A7',\r\n\t    uml: '\\u00A8',\r\n\t    copy: '\\u00A9',\r\n\t    ordf: '\\u00AA',\r\n\t    laquo: '\\u00AB',\r\n\t    not: '\\u00AC',\r\n\t    shy: '\\u00AD',\r\n\t    reg: '\\u00AE',\r\n\t    macr: '\\u00AF',\r\n\t    deg: '\\u00B0',\r\n\t    plusmn: '\\u00B1',\r\n\t    sup2: '\\u00B2',\r\n\t    sup3: '\\u00B3',\r\n\t    acute: '\\u00B4',\r\n\t    micro: '\\u00B5',\r\n\t    para: '\\u00B6',\r\n\t    middot: '\\u00B7',\r\n\t    cedil: '\\u00B8',\r\n\t    sup1: '\\u00B9',\r\n\t    ordm: '\\u00BA',\r\n\t    raquo: '\\u00BB',\r\n\t    frac14: '\\u00BC',\r\n\t    frac12: '\\u00BD',\r\n\t    frac34: '\\u00BE',\r\n\t    iquest: '\\u00BF',\r\n\t    Agrave: '\\u00C0',\r\n\t    Aacute: '\\u00C1',\r\n\t    Acirc: '\\u00C2',\r\n\t    Atilde: '\\u00C3',\r\n\t    Auml: '\\u00C4',\r\n\t    Aring: '\\u00C5',\r\n\t    AElig: '\\u00C6',\r\n\t    Ccedil: '\\u00C7',\r\n\t    Egrave: '\\u00C8',\r\n\t    Eacute: '\\u00C9',\r\n\t    Ecirc: '\\u00CA',\r\n\t    Euml: '\\u00CB',\r\n\t    Igrave: '\\u00CC',\r\n\t    Iacute: '\\u00CD',\r\n\t    Icirc: '\\u00CE',\r\n\t    Iuml: '\\u00CF',\r\n\t    ETH: '\\u00D0',\r\n\t    Ntilde: '\\u00D1',\r\n\t    Ograve: '\\u00D2',\r\n\t    Oacute: '\\u00D3',\r\n\t    Ocirc: '\\u00D4',\r\n\t    Otilde: '\\u00D5',\r\n\t    Ouml: '\\u00D6',\r\n\t    times: '\\u00D7',\r\n\t    Oslash: '\\u00D8',\r\n\t    Ugrave: '\\u00D9',\r\n\t    Uacute: '\\u00DA',\r\n\t    Ucirc: '\\u00DB',\r\n\t    Uuml: '\\u00DC',\r\n\t    Yacute: '\\u00DD',\r\n\t    THORN: '\\u00DE',\r\n\t    szlig: '\\u00DF',\r\n\t    agrave: '\\u00E0',\r\n\t    aacute: '\\u00E1',\r\n\t    acirc: '\\u00E2',\r\n\t    atilde: '\\u00E3',\r\n\t    auml: '\\u00E4',\r\n\t    aring: '\\u00E5',\r\n\t    aelig: '\\u00E6',\r\n\t    ccedil: '\\u00E7',\r\n\t    egrave: '\\u00E8',\r\n\t    eacute: '\\u00E9',\r\n\t    ecirc: '\\u00EA',\r\n\t    euml: '\\u00EB',\r\n\t    igrave: '\\u00EC',\r\n\t    iacute: '\\u00ED',\r\n\t    icirc: '\\u00EE',\r\n\t    iuml: '\\u00EF',\r\n\t    eth: '\\u00F0',\r\n\t    ntilde: '\\u00F1',\r\n\t    ograve: '\\u00F2',\r\n\t    oacute: '\\u00F3',\r\n\t    ocirc: '\\u00F4',\r\n\t    otilde: '\\u00F5',\r\n\t    ouml: '\\u00F6',\r\n\t    divide: '\\u00F7',\r\n\t    oslash: '\\u00F8',\r\n\t    ugrave: '\\u00F9',\r\n\t    uacute: '\\u00FA',\r\n\t    ucirc: '\\u00FB',\r\n\t    uuml: '\\u00FC',\r\n\t    yacute: '\\u00FD',\r\n\t    thorn: '\\u00FE',\r\n\t    yuml: '\\u00FF',\r\n\t    OElig: '\\u0152',\r\n\t    oelig: '\\u0153',\r\n\t    Scaron: '\\u0160',\r\n\t    scaron: '\\u0161',\r\n\t    Yuml: '\\u0178',\r\n\t    fnof: '\\u0192',\r\n\t    circ: '\\u02C6',\r\n\t    tilde: '\\u02DC',\r\n\t    Alpha: '\\u0391',\r\n\t    Beta: '\\u0392',\r\n\t    Gamma: '\\u0393',\r\n\t    Delta: '\\u0394',\r\n\t    Epsilon: '\\u0395',\r\n\t    Zeta: '\\u0396',\r\n\t    Eta: '\\u0397',\r\n\t    Theta: '\\u0398',\r\n\t    Iota: '\\u0399',\r\n\t    Kappa: '\\u039A',\r\n\t    Lambda: '\\u039B',\r\n\t    Mu: '\\u039C',\r\n\t    Nu: '\\u039D',\r\n\t    Xi: '\\u039E',\r\n\t    Omicron: '\\u039F',\r\n\t    Pi: '\\u03A0',\r\n\t    Rho: '\\u03A1',\r\n\t    Sigma: '\\u03A3',\r\n\t    Tau: '\\u03A4',\r\n\t    Upsilon: '\\u03A5',\r\n\t    Phi: '\\u03A6',\r\n\t    Chi: '\\u03A7',\r\n\t    Psi: '\\u03A8',\r\n\t    Omega: '\\u03A9',\r\n\t    alpha: '\\u03B1',\r\n\t    beta: '\\u03B2',\r\n\t    gamma: '\\u03B3',\r\n\t    delta: '\\u03B4',\r\n\t    epsilon: '\\u03B5',\r\n\t    zeta: '\\u03B6',\r\n\t    eta: '\\u03B7',\r\n\t    theta: '\\u03B8',\r\n\t    iota: '\\u03B9',\r\n\t    kappa: '\\u03BA',\r\n\t    lambda: '\\u03BB',\r\n\t    mu: '\\u03BC',\r\n\t    nu: '\\u03BD',\r\n\t    xi: '\\u03BE',\r\n\t    omicron: '\\u03BF',\r\n\t    pi: '\\u03C0',\r\n\t    rho: '\\u03C1',\r\n\t    sigmaf: '\\u03C2',\r\n\t    sigma: '\\u03C3',\r\n\t    tau: '\\u03C4',\r\n\t    upsilon: '\\u03C5',\r\n\t    phi: '\\u03C6',\r\n\t    chi: '\\u03C7',\r\n\t    psi: '\\u03C8',\r\n\t    omega: '\\u03C9',\r\n\t    thetasym: '\\u03D1',\r\n\t    upsih: '\\u03D2',\r\n\t    piv: '\\u03D6',\r\n\t    ensp: '\\u2002',\r\n\t    emsp: '\\u2003',\r\n\t    thinsp: '\\u2009',\r\n\t    zwnj: '\\u200C',\r\n\t    zwj: '\\u200D',\r\n\t    lrm: '\\u200E',\r\n\t    rlm: '\\u200F',\r\n\t    ndash: '\\u2013',\r\n\t    mdash: '\\u2014',\r\n\t    lsquo: '\\u2018',\r\n\t    rsquo: '\\u2019',\r\n\t    sbquo: '\\u201A',\r\n\t    ldquo: '\\u201C',\r\n\t    rdquo: '\\u201D',\r\n\t    bdquo: '\\u201E',\r\n\t    dagger: '\\u2020',\r\n\t    Dagger: '\\u2021',\r\n\t    bull: '\\u2022',\r\n\t    hellip: '\\u2026',\r\n\t    permil: '\\u2030',\r\n\t    prime: '\\u2032',\r\n\t    Prime: '\\u2033',\r\n\t    lsaquo: '\\u2039',\r\n\t    rsaquo: '\\u203A',\r\n\t    oline: '\\u203E',\r\n\t    frasl: '\\u2044',\r\n\t    euro: '\\u20AC',\r\n\t    image: '\\u2111',\r\n\t    weierp: '\\u2118',\r\n\t    real: '\\u211C',\r\n\t    trade: '\\u2122',\r\n\t    alefsym: '\\u2135',\r\n\t    larr: '\\u2190',\r\n\t    uarr: '\\u2191',\r\n\t    rarr: '\\u2192',\r\n\t    darr: '\\u2193',\r\n\t    harr: '\\u2194',\r\n\t    crarr: '\\u21B5',\r\n\t    lArr: '\\u21D0',\r\n\t    uArr: '\\u21D1',\r\n\t    rArr: '\\u21D2',\r\n\t    dArr: '\\u21D3',\r\n\t    hArr: '\\u21D4',\r\n\t    forall: '\\u2200',\r\n\t    part: '\\u2202',\r\n\t    exist: '\\u2203',\r\n\t    empty: '\\u2205',\r\n\t    nabla: '\\u2207',\r\n\t    isin: '\\u2208',\r\n\t    notin: '\\u2209',\r\n\t    ni: '\\u220B',\r\n\t    prod: '\\u220F',\r\n\t    sum: '\\u2211',\r\n\t    minus: '\\u2212',\r\n\t    lowast: '\\u2217',\r\n\t    radic: '\\u221A',\r\n\t    prop: '\\u221D',\r\n\t    infin: '\\u221E',\r\n\t    ang: '\\u2220',\r\n\t    and: '\\u2227',\r\n\t    or: '\\u2228',\r\n\t    cap: '\\u2229',\r\n\t    cup: '\\u222A',\r\n\t    int: '\\u222B',\r\n\t    there4: '\\u2234',\r\n\t    sim: '\\u223C',\r\n\t    cong: '\\u2245',\r\n\t    asymp: '\\u2248',\r\n\t    ne: '\\u2260',\r\n\t    equiv: '\\u2261',\r\n\t    le: '\\u2264',\r\n\t    ge: '\\u2265',\r\n\t    sub: '\\u2282',\r\n\t    sup: '\\u2283',\r\n\t    nsub: '\\u2284',\r\n\t    sube: '\\u2286',\r\n\t    supe: '\\u2287',\r\n\t    oplus: '\\u2295',\r\n\t    otimes: '\\u2297',\r\n\t    perp: '\\u22A5',\r\n\t    sdot: '\\u22C5',\r\n\t    lceil: '\\u2308',\r\n\t    rceil: '\\u2309',\r\n\t    lfloor: '\\u230A',\r\n\t    rfloor: '\\u230B',\r\n\t    loz: '\\u25CA',\r\n\t    spades: '\\u2660',\r\n\t    clubs: '\\u2663',\r\n\t    hearts: '\\u2665',\r\n\t    diams: '\\u2666',\r\n\t    lang: '\\u27E8',\r\n\t    rang: '\\u27E9'\r\n\t};\r\n\r\n\r\n/***/ },\r\n/* 15 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar error_handler_1 = __webpack_require__(10);\r\n\tvar scanner_1 = __webpack_require__(12);\r\n\tvar token_1 = __webpack_require__(13);\r\n\tvar Reader = /** @class */ (function () {\r\n\t    function Reader() {\r\n\t        this.values = [];\r\n\t        this.curly = this.paren = -1;\r\n\t    }\r\n\t    // A function following one of those tokens is an expression.\r\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\r\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\r\n\t            'return', 'case', 'delete', 'throw', 'void',\r\n\t            // assignment operators\r\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\r\n\t            '&=', '|=', '^=', ',',\r\n\t            // binary/unary operators\r\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\r\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\r\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\r\n\t    };\r\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\r\n\t    // https://github.com/mozilla/sweet.js/wiki/design\r\n\t    Reader.prototype.isRegexStart = function () {\r\n\t        var previous = this.values[this.values.length - 1];\r\n\t        var regex = (previous !== null);\r\n\t        switch (previous) {\r\n\t            case 'this':\r\n\t            case ']':\r\n\t                regex = false;\r\n\t                break;\r\n\t            case ')':\r\n\t                var keyword = this.values[this.paren - 1];\r\n\t                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\r\n\t                break;\r\n\t            case '}':\r\n\t                // Dividing a function by anything makes little sense,\r\n\t                // but we have to check for that.\r\n\t                regex = true;\r\n\t                if (this.values[this.curly - 3] === 'function') {\r\n\t                    // Anonymous function, e.g. function(){} /42\r\n\t                    var check = this.values[this.curly - 4];\r\n\t                    regex = check ? !this.beforeFunctionExpression(check) : false;\r\n\t                }\r\n\t                else if (this.values[this.curly - 4] === 'function') {\r\n\t                    // Named function, e.g. function f(){} /42/\r\n\t                    var check = this.values[this.curly - 5];\r\n\t                    regex = check ? !this.beforeFunctionExpression(check) : true;\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t        return regex;\r\n\t    };\r\n\t    Reader.prototype.push = function (token) {\r\n\t        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\r\n\t            if (token.value === '{') {\r\n\t                this.curly = this.values.length;\r\n\t            }\r\n\t            else if (token.value === '(') {\r\n\t                this.paren = this.values.length;\r\n\t            }\r\n\t            this.values.push(token.value);\r\n\t        }\r\n\t        else {\r\n\t            this.values.push(null);\r\n\t        }\r\n\t    };\r\n\t    return Reader;\r\n\t}());\r\n\tvar Tokenizer = /** @class */ (function () {\r\n\t    function Tokenizer(code, config) {\r\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\r\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\r\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\r\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\r\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\r\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\r\n\t        this.buffer = [];\r\n\t        this.reader = new Reader();\r\n\t    }\r\n\t    Tokenizer.prototype.errors = function () {\r\n\t        return this.errorHandler.errors;\r\n\t    };\r\n\t    Tokenizer.prototype.getNextToken = function () {\r\n\t        if (this.buffer.length === 0) {\r\n\t\t\t\tvar comments = this.scanner.scanComments();\r\n\t            if (this.scanner.trackComment) {\r\n\t                for (var i = 0; i < comments.length; ++i) {\r\n\t                    var e = comments[i];\r\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\r\n\t                    var comment = {\r\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n\t                        value: value\r\n\t                    };\r\n\t                    if (this.trackRange) {\r\n\t                        comment.range = e.range;\r\n\t                    }\r\n\t                    if (this.trackLoc) {\r\n\t                        comment.loc = e.loc;\r\n\t                    }\r\n\t                    this.buffer.push(comment);\r\n\t                }\r\n\t            }\r\n\t            if (!this.scanner.eof()) {\r\n\t                var loc = void 0;\r\n\t                if (this.trackLoc) {\r\n\t                    loc = {\r\n\t                        start: {\r\n\t                            line: this.scanner.lineNumber,\r\n\t                            column: this.scanner.index - this.scanner.lineStart\r\n\t                        },\r\n\t                        end: {}\r\n\t                    };\r\n\t                }\r\n\t                var maybeRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\r\n\t                var token = void 0;\r\n\t                if (maybeRegex) {\r\n\t                    var state = this.scanner.saveState();\r\n\t                    try {\r\n\t                        token = this.scanner.scanRegExp();\r\n\t                    }\r\n\t                    catch (e) {\r\n\t                        this.scanner.restoreState(state);\r\n\t                        token = this.scanner.lex();\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    token = this.scanner.lex();\r\n\t                }\r\n\t                this.reader.push(token);\r\n\t                var entry = {\r\n\t                    type: token_1.TokenName[token.type],\r\n\t                    value: this.scanner.source.slice(token.start, token.end)\r\n\t                };\r\n\t                if (this.trackRange) {\r\n\t                    entry.range = [token.start, token.end];\r\n\t                }\r\n\t                if (this.trackLoc) {\r\n\t                    loc.end = {\r\n\t                        line: this.scanner.lineNumber,\r\n\t                        column: this.scanner.index - this.scanner.lineStart\r\n\t                    };\r\n\t                    entry.loc = loc;\r\n\t                }\r\n\t                if (token.type === 9 /* RegularExpression */) {\r\n\t                    var pattern = token.pattern;\r\n\t                    var flags = token.flags;\r\n\t                    entry.regex = { pattern: pattern, flags: flags };\r\n\t                }\r\n\t                this.buffer.push(entry);\r\n\t            }\r\n\t        }\r\n\t        return this.buffer.shift();\r\n\t    };\r\n\t    return Tokenizer;\r\n\t}());\r\n\texports.Tokenizer = Tokenizer;\r\n\r\n\r\n/***/ }\r\n/******/ ])\r\n});\r\n;"],"sourceRoot":""}