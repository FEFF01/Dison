(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[36],{

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar compatTransforms = __webpack_require__(/*! ./transforms */ \"./node_modules/regexp-tree/dist/compat-transpiler/transforms/index.js\");\n\nvar _transform = __webpack_require__(/*! ../transform */ \"./node_modules/regexp-tree/dist/transform/index.js\");\n\nmodule.exports = {\n  /**\n   * Translates a regexp in new syntax to equivalent regexp in old syntax.\n   *\n   * @param string|RegExp|AST - regexp\n   * @param Array transformsWhitelist - names of the transforms to apply\n   */\n  transform: function transform(regexp) {\n    var transformsWhitelist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var transformToApply = transformsWhitelist.length > 0 ? transformsWhitelist : Object.keys(compatTransforms);\n    var result = void 0; // Collect extra data per transform.\n\n    var extra = {};\n    transformToApply.forEach(function (transformName) {\n      if (!compatTransforms.hasOwnProperty(transformName)) {\n        throw new Error('Unknown compat-transform: ' + transformName + '. ' + 'Available transforms are: ' + Object.keys(compatTransforms).join(', '));\n      }\n\n      var handler = compatTransforms[transformName];\n      result = _transform.transform(regexp, handler);\n      regexp = result.getAST(); // Collect `extra` transform result.\n\n      if (typeof handler.getExtra === 'function') {\n        extra[transformName] = handler.getExtra();\n      }\n    }); // Set the final extras for all transforms.\n\n    result.setExtra(extra);\n    return result;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L2NvbXBhdC10cmFuc3BpbGVyL2luZGV4LmpzP2IzMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNvbXBhdFRyYW5zZm9ybXMgPSByZXF1aXJlKCcuL3RyYW5zZm9ybXMnKTtcbnZhciBfdHJhbnNmb3JtID0gcmVxdWlyZSgnLi4vdHJhbnNmb3JtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogVHJhbnNsYXRlcyBhIHJlZ2V4cCBpbiBuZXcgc3ludGF4IHRvIGVxdWl2YWxlbnQgcmVnZXhwIGluIG9sZCBzeW50YXguXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmd8UmVnRXhwfEFTVCAtIHJlZ2V4cFxuICAgKiBAcGFyYW0gQXJyYXkgdHJhbnNmb3Jtc1doaXRlbGlzdCAtIG5hbWVzIG9mIHRoZSB0cmFuc2Zvcm1zIHRvIGFwcGx5XG4gICAqL1xuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShyZWdleHApIHtcbiAgICB2YXIgdHJhbnNmb3Jtc1doaXRlbGlzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG5cbiAgICB2YXIgdHJhbnNmb3JtVG9BcHBseSA9IHRyYW5zZm9ybXNXaGl0ZWxpc3QubGVuZ3RoID4gMCA/IHRyYW5zZm9ybXNXaGl0ZWxpc3QgOiBPYmplY3Qua2V5cyhjb21wYXRUcmFuc2Zvcm1zKTtcblxuICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cbiAgICAvLyBDb2xsZWN0IGV4dHJhIGRhdGEgcGVyIHRyYW5zZm9ybS5cbiAgICB2YXIgZXh0cmEgPSB7fTtcblxuICAgIHRyYW5zZm9ybVRvQXBwbHkuZm9yRWFjaChmdW5jdGlvbiAodHJhbnNmb3JtTmFtZSkge1xuXG4gICAgICBpZiAoIWNvbXBhdFRyYW5zZm9ybXMuaGFzT3duUHJvcGVydHkodHJhbnNmb3JtTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGNvbXBhdC10cmFuc2Zvcm06ICcgKyB0cmFuc2Zvcm1OYW1lICsgJy4gJyArICdBdmFpbGFibGUgdHJhbnNmb3JtcyBhcmU6ICcgKyBPYmplY3Qua2V5cyhjb21wYXRUcmFuc2Zvcm1zKS5qb2luKCcsICcpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZXIgPSBjb21wYXRUcmFuc2Zvcm1zW3RyYW5zZm9ybU5hbWVdO1xuXG4gICAgICByZXN1bHQgPSBfdHJhbnNmb3JtLnRyYW5zZm9ybShyZWdleHAsIGhhbmRsZXIpO1xuICAgICAgcmVnZXhwID0gcmVzdWx0LmdldEFTVCgpO1xuXG4gICAgICAvLyBDb2xsZWN0IGBleHRyYWAgdHJhbnNmb3JtIHJlc3VsdC5cbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlci5nZXRFeHRyYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBleHRyYVt0cmFuc2Zvcm1OYW1lXSA9IGhhbmRsZXIuZ2V0RXh0cmEoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNldCB0aGUgZmluYWwgZXh0cmFzIGZvciBhbGwgdHJhbnNmb3Jtcy5cbiAgICByZXN1bHQuc2V0RXh0cmEoZXh0cmEpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQXRDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/runtime/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/runtime/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * The `RegExpTree` class provides runtime support for `compat-transpiler`\n * module from `regexp-tree`.\n *\n * E.g. it tracks names of the capturing groups, in order to access the\n * names on the matched result.\n *\n * It's a thin-wrapper on top of original regexp.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar RegExpTree = function () {\n  /**\n   * Initializes a `RegExpTree` instance.\n   *\n   * @param RegExp - a regular expression\n   *\n   * @param Object state:\n   *\n   *   An extra state which may store any related to transformation\n   *   data, for example, names of the groups.\n   *\n   *   - flags - original flags\n   *   - groups - names of the groups, and their indices\n   *   - source - original source\n   */\n  function RegExpTree(re, _ref) {\n    var flags = _ref.flags,\n        groups = _ref.groups,\n        source = _ref.source;\n\n    _classCallCheck(this, RegExpTree);\n\n    this._re = re;\n    this._groups = groups; // Original props.\n\n    this.flags = flags;\n    this.source = source || re.source;\n    this.dotAll = flags.includes('s'); // Inherited directly from `re`.\n\n    this.global = re.global;\n    this.ignoreCase = re.ignoreCase;\n    this.multiline = re.multiline;\n    this.sticky = re.sticky;\n    this.unicode = re.unicode;\n  }\n  /**\n   * Facade wrapper for RegExp `test` method.\n   */\n\n\n  _createClass(RegExpTree, [{\n    key: 'test',\n    value: function test(string) {\n      return this._re.test(string);\n    }\n    /**\n     * Facade wrapper for RegExp `compile` method.\n     */\n\n  }, {\n    key: 'compile',\n    value: function compile(string) {\n      return this._re.compile(string);\n    }\n    /**\n     * Facade wrapper for RegExp `toString` method.\n     */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (!this._toStringResult) {\n        this._toStringResult = '/' + this.source + '/' + this.flags;\n      }\n\n      return this._toStringResult;\n    }\n    /**\n     * Facade wrapper for RegExp `exec` method.\n     */\n\n  }, {\n    key: 'exec',\n    value: function exec(string) {\n      var result = this._re.exec(string);\n\n      if (!this._groups || !result) {\n        return result;\n      }\n\n      result.groups = {};\n\n      for (var group in this._groups) {\n        var groupNumber = this._groups[group];\n        result.groups[group] = result[groupNumber];\n      }\n\n      return result;\n    }\n  }]);\n\n  return RegExpTree;\n}();\n\nmodule.exports = {\n  RegExpTree: RegExpTree\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci9ydW50aW1lL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3QvY29tcGF0LXRyYW5zcGlsZXIvcnVudGltZS9pbmRleC5qcz9iYjkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhlIGBSZWdFeHBUcmVlYCBjbGFzcyBwcm92aWRlcyBydW50aW1lIHN1cHBvcnQgZm9yIGBjb21wYXQtdHJhbnNwaWxlcmBcbiAqIG1vZHVsZSBmcm9tIGByZWdleHAtdHJlZWAuXG4gKlxuICogRS5nLiBpdCB0cmFja3MgbmFtZXMgb2YgdGhlIGNhcHR1cmluZyBncm91cHMsIGluIG9yZGVyIHRvIGFjY2VzcyB0aGVcbiAqIG5hbWVzIG9uIHRoZSBtYXRjaGVkIHJlc3VsdC5cbiAqXG4gKiBJdCdzIGEgdGhpbi13cmFwcGVyIG9uIHRvcCBvZiBvcmlnaW5hbCByZWdleHAuXG4gKi9cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlZ0V4cFRyZWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBhIGBSZWdFeHBUcmVlYCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIFJlZ0V4cCAtIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqXG4gICAqIEBwYXJhbSBPYmplY3Qgc3RhdGU6XG4gICAqXG4gICAqICAgQW4gZXh0cmEgc3RhdGUgd2hpY2ggbWF5IHN0b3JlIGFueSByZWxhdGVkIHRvIHRyYW5zZm9ybWF0aW9uXG4gICAqICAgZGF0YSwgZm9yIGV4YW1wbGUsIG5hbWVzIG9mIHRoZSBncm91cHMuXG4gICAqXG4gICAqICAgLSBmbGFncyAtIG9yaWdpbmFsIGZsYWdzXG4gICAqICAgLSBncm91cHMgLSBuYW1lcyBvZiB0aGUgZ3JvdXBzLCBhbmQgdGhlaXIgaW5kaWNlc1xuICAgKiAgIC0gc291cmNlIC0gb3JpZ2luYWwgc291cmNlXG4gICAqL1xuICBmdW5jdGlvbiBSZWdFeHBUcmVlKHJlLCBfcmVmKSB7XG4gICAgdmFyIGZsYWdzID0gX3JlZi5mbGFncyxcbiAgICAgICAgZ3JvdXBzID0gX3JlZi5ncm91cHMsXG4gICAgICAgIHNvdXJjZSA9IF9yZWYuc291cmNlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZ0V4cFRyZWUpO1xuXG4gICAgdGhpcy5fcmUgPSByZTtcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG5cbiAgICAvLyBPcmlnaW5hbCBwcm9wcy5cbiAgICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2UgfHwgcmUuc291cmNlO1xuICAgIHRoaXMuZG90QWxsID0gZmxhZ3MuaW5jbHVkZXMoJ3MnKTtcblxuICAgIC8vIEluaGVyaXRlZCBkaXJlY3RseSBmcm9tIGByZWAuXG4gICAgdGhpcy5nbG9iYWwgPSByZS5nbG9iYWw7XG4gICAgdGhpcy5pZ25vcmVDYXNlID0gcmUuaWdub3JlQ2FzZTtcbiAgICB0aGlzLm11bHRpbGluZSA9IHJlLm11bHRpbGluZTtcbiAgICB0aGlzLnN0aWNreSA9IHJlLnN0aWNreTtcbiAgICB0aGlzLnVuaWNvZGUgPSByZS51bmljb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhY2FkZSB3cmFwcGVyIGZvciBSZWdFeHAgYHRlc3RgIG1ldGhvZC5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUmVnRXhwVHJlZSwgW3tcbiAgICBrZXk6ICd0ZXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGVzdChzdHJpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZS50ZXN0KHN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjYWRlIHdyYXBwZXIgZm9yIFJlZ0V4cCBgY29tcGlsZWAgbWV0aG9kLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb21waWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGlsZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZS5jb21waWxlKHN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjYWRlIHdyYXBwZXIgZm9yIFJlZ0V4cCBgdG9TdHJpbmdgIG1ldGhvZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIGlmICghdGhpcy5fdG9TdHJpbmdSZXN1bHQpIHtcbiAgICAgICAgdGhpcy5fdG9TdHJpbmdSZXN1bHQgPSAnLycgKyB0aGlzLnNvdXJjZSArICcvJyArIHRoaXMuZmxhZ3M7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fdG9TdHJpbmdSZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmFjYWRlIHdyYXBwZXIgZm9yIFJlZ0V4cCBgZXhlY2AgbWV0aG9kLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdleGVjJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9yZS5leGVjKHN0cmluZyk7XG5cbiAgICAgIGlmICghdGhpcy5fZ3JvdXBzIHx8ICFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0Lmdyb3VwcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBncm91cCBpbiB0aGlzLl9ncm91cHMpIHtcbiAgICAgICAgdmFyIGdyb3VwTnVtYmVyID0gdGhpcy5fZ3JvdXBzW2dyb3VwXTtcbiAgICAgICAgcmVzdWx0Lmdyb3Vwc1tncm91cF0gPSByZXN1bHRbZ3JvdXBOdW1iZXJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWdFeHBUcmVlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmVnRXhwVHJlZTogUmVnRXhwVHJlZVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFFQTs7Ozs7Ozs7OztBQVVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQU5BO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQU5BO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7O0FBVEE7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBakJBO0FBQ0E7QUFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/runtime/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-dotall-s-transform.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-dotall-s-transform.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to translate `/./s` to `/[\\0-\\uFFFF]/`.\n */\n\nmodule.exports = {\n  // Whether `u` flag present. In which case we transform to\n  // \\u{10FFFF} instead of \\uFFFF.\n  _hasUFlag: false,\n  // Only run this plugin if we have `s` flag.\n  shouldRun: function shouldRun(ast) {\n    var shouldRun = ast.flags.includes('s');\n\n    if (!shouldRun) {\n      return false;\n    } // Strip the `s` flag.\n\n\n    ast.flags = ast.flags.replace('s', ''); // Whether we have also `u`.\n\n    this._hasUFlag = ast.flags.includes('u');\n    return true;\n  },\n  Char: function Char(path) {\n    var node = path.node;\n\n    if (node.kind !== 'meta' || node.value !== '.') {\n      return;\n    }\n\n    var toValue = \"\\\\uFFFF\";\n    var toSymbol = \"\\uFFFF\";\n\n    if (this._hasUFlag) {\n      toValue = \"\\\\u{10FFFF}\";\n      toSymbol = \"\\uDBFF\\uDFFF\";\n    }\n\n    path.replace({\n      type: 'CharacterClass',\n      expressions: [{\n        type: 'ClassRange',\n        from: {\n          type: 'Char',\n          value: '\\\\0',\n          kind: 'decimal',\n          symbol: '\\0'\n        },\n        to: {\n          type: 'Char',\n          value: toValue,\n          kind: 'unicode',\n          symbol: toSymbol\n        }\n      }]\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci90cmFuc2Zvcm1zL2NvbXBhdC1kb3RhbGwtcy10cmFuc2Zvcm0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci90cmFuc2Zvcm1zL2NvbXBhdC1kb3RhbGwtcy10cmFuc2Zvcm0uanM/MTYzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIHRyYW5zbGF0ZSBgLy4vc2AgdG8gYC9bXFwwLVxcdUZGRkZdL2AuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy8gV2hldGhlciBgdWAgZmxhZyBwcmVzZW50LiBJbiB3aGljaCBjYXNlIHdlIHRyYW5zZm9ybSB0b1xuICAvLyBcXHV7MTBGRkZGfSBpbnN0ZWFkIG9mIFxcdUZGRkYuXG4gIF9oYXNVRmxhZzogZmFsc2UsXG5cbiAgLy8gT25seSBydW4gdGhpcyBwbHVnaW4gaWYgd2UgaGF2ZSBgc2AgZmxhZy5cbiAgc2hvdWxkUnVuOiBmdW5jdGlvbiBzaG91bGRSdW4oYXN0KSB7XG4gICAgdmFyIHNob3VsZFJ1biA9IGFzdC5mbGFncy5pbmNsdWRlcygncycpO1xuXG4gICAgaWYgKCFzaG91bGRSdW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTdHJpcCB0aGUgYHNgIGZsYWcuXG4gICAgYXN0LmZsYWdzID0gYXN0LmZsYWdzLnJlcGxhY2UoJ3MnLCAnJyk7XG5cbiAgICAvLyBXaGV0aGVyIHdlIGhhdmUgYWxzbyBgdWAuXG4gICAgdGhpcy5faGFzVUZsYWcgPSBhc3QuZmxhZ3MuaW5jbHVkZXMoJ3UnKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBDaGFyOiBmdW5jdGlvbiBDaGFyKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKG5vZGUua2luZCAhPT0gJ21ldGEnIHx8IG5vZGUudmFsdWUgIT09ICcuJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0b1ZhbHVlID0gJ1xcXFx1RkZGRic7XG4gICAgdmFyIHRvU3ltYm9sID0gJ1xcdUZGRkYnO1xuXG4gICAgaWYgKHRoaXMuX2hhc1VGbGFnKSB7XG4gICAgICB0b1ZhbHVlID0gJ1xcXFx1ezEwRkZGRn0nO1xuICAgICAgdG9TeW1ib2wgPSAnXFx1REJGRlxcdURGRkYnO1xuICAgIH1cblxuICAgIHBhdGgucmVwbGFjZSh7XG4gICAgICB0eXBlOiAnQ2hhcmFjdGVyQ2xhc3MnLFxuICAgICAgZXhwcmVzc2lvbnM6IFt7XG4gICAgICAgIHR5cGU6ICdDbGFzc1JhbmdlJyxcbiAgICAgICAgZnJvbToge1xuICAgICAgICAgIHR5cGU6ICdDaGFyJyxcbiAgICAgICAgICB2YWx1ZTogJ1xcXFwwJyxcbiAgICAgICAgICBraW5kOiAnZGVjaW1hbCcsXG4gICAgICAgICAgc3ltYm9sOiAnXFwwJ1xuICAgICAgICB9LFxuICAgICAgICB0bzoge1xuICAgICAgICAgIHR5cGU6ICdDaGFyJyxcbiAgICAgICAgICB2YWx1ZTogdG9WYWx1ZSxcbiAgICAgICAgICBraW5kOiAndW5pY29kZScsXG4gICAgICAgICAgc3ltYm9sOiB0b1N5bWJvbFxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH0pO1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7O0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFSQTtBQUZBO0FBa0JBO0FBeERBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-dotall-s-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-named-capturing-groups-transform.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-named-capturing-groups-transform.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to translate `/(?<name>a)\\k<name>/` to `/(a)\\1/`.\n */\n\nmodule.exports = {\n  // To track the names of the groups, and return them\n  // in the transform result state.\n  //\n  // A map from name to number: {foo: 2, bar: 4}\n  _groupNames: {},\n\n  /**\n   * Initialises the trasnform.\n   */\n  init: function init() {\n    this._groupNames = {};\n  },\n\n  /**\n   * Returns extra state, which eventually is returned to\n   */\n  getExtra: function getExtra() {\n    return this._groupNames;\n  },\n  Group: function Group(path) {\n    var node = path.node;\n\n    if (!node.name) {\n      return;\n    } // Record group name.\n\n\n    this._groupNames[node.name] = node.number;\n    delete node.name;\n    delete node.nameRaw;\n  },\n  Backreference: function Backreference(path) {\n    var node = path.node;\n\n    if (node.kind !== 'name') {\n      return;\n    }\n\n    node.kind = 'number';\n    node.reference = node.number;\n    delete node.referenceRaw;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci90cmFuc2Zvcm1zL2NvbXBhdC1uYW1lZC1jYXB0dXJpbmctZ3JvdXBzLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L2NvbXBhdC10cmFuc3BpbGVyL3RyYW5zZm9ybXMvY29tcGF0LW5hbWVkLWNhcHR1cmluZy1ncm91cHMtdHJhbnNmb3JtLmpzP2ViZTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byB0cmFuc2xhdGUgYC8oPzxuYW1lPmEpXFxrPG5hbWU+L2AgdG8gYC8oYSlcXDEvYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gVG8gdHJhY2sgdGhlIG5hbWVzIG9mIHRoZSBncm91cHMsIGFuZCByZXR1cm4gdGhlbVxuICAvLyBpbiB0aGUgdHJhbnNmb3JtIHJlc3VsdCBzdGF0ZS5cbiAgLy9cbiAgLy8gQSBtYXAgZnJvbSBuYW1lIHRvIG51bWJlcjoge2ZvbzogMiwgYmFyOiA0fVxuICBfZ3JvdXBOYW1lczoge30sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpc2VzIHRoZSB0cmFzbmZvcm0uXG4gICAqL1xuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuX2dyb3VwTmFtZXMgPSB7fTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGV4dHJhIHN0YXRlLCB3aGljaCBldmVudHVhbGx5IGlzIHJldHVybmVkIHRvXG4gICAqL1xuICBnZXRFeHRyYTogZnVuY3Rpb24gZ2V0RXh0cmEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3VwTmFtZXM7XG4gIH0sXG4gIEdyb3VwOiBmdW5jdGlvbiBHcm91cChwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cblxuICAgIGlmICghbm9kZS5uYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVjb3JkIGdyb3VwIG5hbWUuXG4gICAgdGhpcy5fZ3JvdXBOYW1lc1tub2RlLm5hbWVdID0gbm9kZS5udW1iZXI7XG5cbiAgICBkZWxldGUgbm9kZS5uYW1lO1xuICAgIGRlbGV0ZSBub2RlLm5hbWVSYXc7XG4gIH0sXG4gIEJhY2tyZWZlcmVuY2U6IGZ1bmN0aW9uIEJhY2tyZWZlcmVuY2UocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlO1xuXG5cbiAgICBpZiAobm9kZS5raW5kICE9PSAnbmFtZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub2RlLmtpbmQgPSAnbnVtYmVyJztcbiAgICBub2RlLnJlZmVyZW5jZSA9IG5vZGUubnVtYmVyO1xuICAgIGRlbGV0ZSBub2RlLnJlZmVyZW5jZVJhdztcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE5Q0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-named-capturing-groups-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-x-flag-transform.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-x-flag-transform.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to remove `x` flag `/foo/x` to `/foo/`.\n *\n * Note: other features of `x` flags (whitespace, comments) are\n * already removed at parsing stage.\n */\n\nmodule.exports = {\n  RegExp: function RegExp(_ref) {\n    var node = _ref.node;\n\n    if (node.flags.includes('x')) {\n      node.flags = node.flags.replace('x', '');\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci90cmFuc2Zvcm1zL2NvbXBhdC14LWZsYWctdHJhbnNmb3JtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3QvY29tcGF0LXRyYW5zcGlsZXIvdHJhbnNmb3Jtcy9jb21wYXQteC1mbGFnLXRyYW5zZm9ybS5qcz9jZDI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSByZWdleHAtdHJlZSBwbHVnaW4gdG8gcmVtb3ZlIGB4YCBmbGFnIGAvZm9vL3hgIHRvIGAvZm9vL2AuXG4gKlxuICogTm90ZTogb3RoZXIgZmVhdHVyZXMgb2YgYHhgIGZsYWdzICh3aGl0ZXNwYWNlLCBjb21tZW50cykgYXJlXG4gKiBhbHJlYWR5IHJlbW92ZWQgYXQgcGFyc2luZyBzdGFnZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmVnRXhwOiBmdW5jdGlvbiBSZWdFeHAoX3JlZikge1xuICAgIHZhciBub2RlID0gX3JlZi5ub2RlO1xuXG4gICAgaWYgKG5vZGUuZmxhZ3MuaW5jbHVkZXMoJ3gnKSkge1xuICAgICAgbm9kZS5mbGFncyA9IG5vZGUuZmxhZ3MucmVwbGFjZSgneCcsICcnKTtcbiAgICB9XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-x-flag-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/compat-transpiler/transforms/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/compat-transpiler/transforms/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nmodule.exports = {\n  // \"dotAll\" `s` flag\n  dotAll: __webpack_require__(/*! ./compat-dotall-s-transform */ \"./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-dotall-s-transform.js\"),\n  // Named capturing groups.\n  namedCapturingGroups: __webpack_require__(/*! ./compat-named-capturing-groups-transform */ \"./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-named-capturing-groups-transform.js\"),\n  // `x` flag\n  xFlag: __webpack_require__(/*! ./compat-x-flag-transform */ \"./node_modules/regexp-tree/dist/compat-transpiler/transforms/compat-x-flag-transform.js\")\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9jb21wYXQtdHJhbnNwaWxlci90cmFuc2Zvcm1zL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3QvY29tcGF0LXRyYW5zcGlsZXIvdHJhbnNmb3Jtcy9pbmRleC5qcz8zMWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBcImRvdEFsbFwiIGBzYCBmbGFnXG4gIGRvdEFsbDogcmVxdWlyZSgnLi9jb21wYXQtZG90YWxsLXMtdHJhbnNmb3JtJyksXG5cbiAgLy8gTmFtZWQgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgbmFtZWRDYXB0dXJpbmdHcm91cHM6IHJlcXVpcmUoJy4vY29tcGF0LW5hbWVkLWNhcHR1cmluZy1ncm91cHMtdHJhbnNmb3JtJyksXG5cbiAgLy8gYHhgIGZsYWdcbiAgeEZsYWc6IHJlcXVpcmUoJy4vY29tcGF0LXgtZmxhZy10cmFuc2Zvcm0nKVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBUkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/compat-transpiler/transforms/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/generator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/regexp-tree/dist/generator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * Helper `gen` function calls node type handler.\n */\n\nfunction gen(node) {\n  return node ? generator[node.type](node) : '';\n}\n/**\n * AST handler.\n */\n\n\nvar generator = {\n  RegExp: function RegExp(node) {\n    return '/' + gen(node.body) + '/' + node.flags;\n  },\n  Alternative: function Alternative(node) {\n    return (node.expressions || []).map(gen).join('');\n  },\n  Disjunction: function Disjunction(node) {\n    return gen(node.left) + '|' + gen(node.right);\n  },\n  Group: function Group(node) {\n    var expression = gen(node.expression);\n\n    if (node.capturing) {\n      // A named group.\n      if (node.name) {\n        return '(?<' + (node.nameRaw || node.name) + '>' + expression + ')';\n      }\n\n      return '(' + expression + ')';\n    }\n\n    return '(?:' + expression + ')';\n  },\n  Backreference: function Backreference(node) {\n    switch (node.kind) {\n      case 'number':\n        return '\\\\' + node.reference;\n\n      case 'name':\n        return '\\\\k<' + (node.referenceRaw || node.reference) + '>';\n\n      default:\n        throw new TypeError('Unknown Backreference kind: ' + node.kind);\n    }\n  },\n  Assertion: function Assertion(node) {\n    switch (node.kind) {\n      case '^':\n      case '$':\n      case '\\\\b':\n      case '\\\\B':\n        return node.kind;\n\n      case 'Lookahead':\n        {\n          var assertion = gen(node.assertion);\n\n          if (node.negative) {\n            return '(?!' + assertion + ')';\n          }\n\n          return '(?=' + assertion + ')';\n        }\n\n      case 'Lookbehind':\n        {\n          var _assertion = gen(node.assertion);\n\n          if (node.negative) {\n            return '(?<!' + _assertion + ')';\n          }\n\n          return '(?<=' + _assertion + ')';\n        }\n\n      default:\n        throw new TypeError('Unknown Assertion kind: ' + node.kind);\n    }\n  },\n  CharacterClass: function CharacterClass(node) {\n    var expressions = node.expressions.map(gen).join('');\n\n    if (node.negative) {\n      return '[^' + expressions + ']';\n    }\n\n    return '[' + expressions + ']';\n  },\n  ClassRange: function ClassRange(node) {\n    return gen(node.from) + '-' + gen(node.to);\n  },\n  Repetition: function Repetition(node) {\n    return '' + gen(node.expression) + gen(node.quantifier);\n  },\n  Quantifier: function Quantifier(node) {\n    var quantifier = void 0;\n    var greedy = node.greedy ? '' : '?';\n\n    switch (node.kind) {\n      case '+':\n      case '?':\n      case '*':\n        quantifier = node.kind;\n        break;\n\n      case 'Range':\n        // Exact: {1}\n        if (node.from === node.to) {\n          quantifier = '{' + node.from + '}';\n        } // Open: {1,}\n        else if (!node.to) {\n            quantifier = '{' + node.from + ',}';\n          } // Closed: {1,3}\n          else {\n              quantifier = '{' + node.from + ',' + node.to + '}';\n            }\n\n        break;\n\n      default:\n        throw new TypeError('Unknown Quantifier kind: ' + node.kind);\n    }\n\n    return '' + quantifier + greedy;\n  },\n  Char: function Char(node) {\n    var value = node.value;\n\n    switch (node.kind) {\n      case 'simple':\n        {\n          if (node.escaped) {\n            return '\\\\' + value;\n          }\n\n          return value;\n        }\n\n      case 'hex':\n      case 'unicode':\n      case 'oct':\n      case 'decimal':\n      case 'control':\n      case 'meta':\n        return value;\n\n      default:\n        throw new TypeError('Unknown Char kind: ' + node.kind);\n    }\n  },\n  UnicodeProperty: function UnicodeProperty(node) {\n    var escapeChar = node.negative ? 'P' : 'p';\n    var namePart = void 0;\n\n    if (!node.shorthand && !node.binary) {\n      namePart = node.name + '=';\n    } else {\n      namePart = '';\n    }\n\n    return '\\\\' + escapeChar + '{' + namePart + node.value + '}';\n  }\n};\nmodule.exports = {\n  /**\n   * Generates a regexp string from an AST.\n   *\n   * @param Object ast - an AST node\n   */\n  generate: gen\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9nZW5lcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9nZW5lcmF0b3IvaW5kZXguanM/NzcwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEhlbHBlciBgZ2VuYCBmdW5jdGlvbiBjYWxscyBub2RlIHR5cGUgaGFuZGxlci5cbiAqL1xuXG5mdW5jdGlvbiBnZW4obm9kZSkge1xuICByZXR1cm4gbm9kZSA/IGdlbmVyYXRvcltub2RlLnR5cGVdKG5vZGUpIDogJyc7XG59XG5cbi8qKlxuICogQVNUIGhhbmRsZXIuXG4gKi9cbnZhciBnZW5lcmF0b3IgPSB7XG4gIFJlZ0V4cDogZnVuY3Rpb24gUmVnRXhwKG5vZGUpIHtcbiAgICByZXR1cm4gJy8nICsgZ2VuKG5vZGUuYm9keSkgKyAnLycgKyBub2RlLmZsYWdzO1xuICB9LFxuICBBbHRlcm5hdGl2ZTogZnVuY3Rpb24gQWx0ZXJuYXRpdmUobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5leHByZXNzaW9ucyB8fCBbXSkubWFwKGdlbikuam9pbignJyk7XG4gIH0sXG4gIERpc2p1bmN0aW9uOiBmdW5jdGlvbiBEaXNqdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdlbihub2RlLmxlZnQpICsgJ3wnICsgZ2VuKG5vZGUucmlnaHQpO1xuICB9LFxuICBHcm91cDogZnVuY3Rpb24gR3JvdXAobm9kZSkge1xuICAgIHZhciBleHByZXNzaW9uID0gZ2VuKG5vZGUuZXhwcmVzc2lvbik7XG5cbiAgICBpZiAobm9kZS5jYXB0dXJpbmcpIHtcbiAgICAgIC8vIEEgbmFtZWQgZ3JvdXAuXG4gICAgICBpZiAobm9kZS5uYW1lKSB7XG4gICAgICAgIHJldHVybiAnKD88JyArIChub2RlLm5hbWVSYXcgfHwgbm9kZS5uYW1lKSArICc+JyArIGV4cHJlc3Npb24gKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnKCcgKyBleHByZXNzaW9uICsgJyknO1xuICAgIH1cblxuICAgIHJldHVybiAnKD86JyArIGV4cHJlc3Npb24gKyAnKSc7XG4gIH0sXG4gIEJhY2tyZWZlcmVuY2U6IGZ1bmN0aW9uIEJhY2tyZWZlcmVuY2Uobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICByZXR1cm4gJ1xcXFwnICsgbm9kZS5yZWZlcmVuY2U7XG4gICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgcmV0dXJuICdcXFxcazwnICsgKG5vZGUucmVmZXJlbmNlUmF3IHx8IG5vZGUucmVmZXJlbmNlKSArICc+JztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gQmFja3JlZmVyZW5jZSBraW5kOiAnICsgbm9kZS5raW5kKTtcbiAgICB9XG4gIH0sXG4gIEFzc2VydGlvbjogZnVuY3Rpb24gQXNzZXJ0aW9uKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgICAgY2FzZSAnXic6XG4gICAgICBjYXNlICckJzpcbiAgICAgIGNhc2UgJ1xcXFxiJzpcbiAgICAgIGNhc2UgJ1xcXFxCJzpcbiAgICAgICAgcmV0dXJuIG5vZGUua2luZDtcblxuICAgICAgY2FzZSAnTG9va2FoZWFkJzpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBnZW4obm9kZS5hc3NlcnRpb24pO1xuXG4gICAgICAgICAgaWYgKG5vZGUubmVnYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnKD8hJyArIGFzc2VydGlvbiArICcpJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gJyg/PScgKyBhc3NlcnRpb24gKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnTG9va2JlaGluZCc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2Fzc2VydGlvbiA9IGdlbihub2RlLmFzc2VydGlvbik7XG5cbiAgICAgICAgICBpZiAobm9kZS5uZWdhdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuICcoPzwhJyArIF9hc3NlcnRpb24gKyAnKSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuICcoPzw9JyArIF9hc3NlcnRpb24gKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBBc3NlcnRpb24ga2luZDogJyArIG5vZGUua2luZCk7XG4gICAgfVxuICB9LFxuICBDaGFyYWN0ZXJDbGFzczogZnVuY3Rpb24gQ2hhcmFjdGVyQ2xhc3Mobm9kZSkge1xuICAgIHZhciBleHByZXNzaW9ucyA9IG5vZGUuZXhwcmVzc2lvbnMubWFwKGdlbikuam9pbignJyk7XG5cbiAgICBpZiAobm9kZS5uZWdhdGl2ZSkge1xuICAgICAgcmV0dXJuICdbXicgKyBleHByZXNzaW9ucyArICddJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ1snICsgZXhwcmVzc2lvbnMgKyAnXSc7XG4gIH0sXG4gIENsYXNzUmFuZ2U6IGZ1bmN0aW9uIENsYXNzUmFuZ2Uobm9kZSkge1xuICAgIHJldHVybiBnZW4obm9kZS5mcm9tKSArICctJyArIGdlbihub2RlLnRvKTtcbiAgfSxcbiAgUmVwZXRpdGlvbjogZnVuY3Rpb24gUmVwZXRpdGlvbihub2RlKSB7XG4gICAgcmV0dXJuICcnICsgZ2VuKG5vZGUuZXhwcmVzc2lvbikgKyBnZW4obm9kZS5xdWFudGlmaWVyKTtcbiAgfSxcbiAgUXVhbnRpZmllcjogZnVuY3Rpb24gUXVhbnRpZmllcihub2RlKSB7XG4gICAgdmFyIHF1YW50aWZpZXIgPSB2b2lkIDA7XG4gICAgdmFyIGdyZWVkeSA9IG5vZGUuZ3JlZWR5ID8gJycgOiAnPyc7XG5cbiAgICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgICAgY2FzZSAnKyc6XG4gICAgICBjYXNlICc/JzpcbiAgICAgIGNhc2UgJyonOlxuICAgICAgICBxdWFudGlmaWVyID0gbm9kZS5raW5kO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1JhbmdlJzpcbiAgICAgICAgLy8gRXhhY3Q6IHsxfVxuICAgICAgICBpZiAobm9kZS5mcm9tID09PSBub2RlLnRvKSB7XG4gICAgICAgICAgcXVhbnRpZmllciA9ICd7JyArIG5vZGUuZnJvbSArICd9JztcbiAgICAgICAgfVxuICAgICAgICAvLyBPcGVuOiB7MSx9XG4gICAgICAgIGVsc2UgaWYgKCFub2RlLnRvKSB7XG4gICAgICAgICAgICBxdWFudGlmaWVyID0gJ3snICsgbm9kZS5mcm9tICsgJyx9JztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2xvc2VkOiB7MSwzfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBxdWFudGlmaWVyID0gJ3snICsgbm9kZS5mcm9tICsgJywnICsgbm9kZS50byArICd9JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIFF1YW50aWZpZXIga2luZDogJyArIG5vZGUua2luZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnICsgcXVhbnRpZmllciArIGdyZWVkeTtcbiAgfSxcbiAgQ2hhcjogZnVuY3Rpb24gQ2hhcihub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gbm9kZS52YWx1ZTtcblxuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlICdzaW1wbGUnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKG5vZGUuZXNjYXBlZCkge1xuICAgICAgICAgICAgcmV0dXJuICdcXFxcJyArIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgIGNhc2UgJ3VuaWNvZGUnOlxuICAgICAgY2FzZSAnb2N0JzpcbiAgICAgIGNhc2UgJ2RlY2ltYWwnOlxuICAgICAgY2FzZSAnY29udHJvbCc6XG4gICAgICBjYXNlICdtZXRhJzpcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIENoYXIga2luZDogJyArIG5vZGUua2luZCk7XG4gICAgfVxuICB9LFxuICBVbmljb2RlUHJvcGVydHk6IGZ1bmN0aW9uIFVuaWNvZGVQcm9wZXJ0eShub2RlKSB7XG4gICAgdmFyIGVzY2FwZUNoYXIgPSBub2RlLm5lZ2F0aXZlID8gJ1AnIDogJ3AnO1xuICAgIHZhciBuYW1lUGFydCA9IHZvaWQgMDtcblxuICAgIGlmICghbm9kZS5zaG9ydGhhbmQgJiYgIW5vZGUuYmluYXJ5KSB7XG4gICAgICBuYW1lUGFydCA9IG5vZGUubmFtZSArICc9JztcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZVBhcnQgPSAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ1xcXFwnICsgZXNjYXBlQ2hhciArICd7JyArIG5hbWVQYXJ0ICsgbm9kZS52YWx1ZSArICd9JztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByZWdleHAgc3RyaW5nIGZyb20gYW4gQVNULlxuICAgKlxuICAgKiBAcGFyYW0gT2JqZWN0IGFzdCAtIGFuIEFTVCBub2RlXG4gICAqL1xuICBnZW5lcmF0ZTogZ2VuXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlCQTtBQWdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQXJCQTtBQUNBO0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcEpBO0FBdUpBO0FBQ0E7Ozs7O0FBS0E7QUFOQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/generator/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa-minimizer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa-minimizer.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n // DFA minization.\n\n/**\n * Map from state to current set it goes.\n */\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar currentTransitionMap = null;\n/**\n * Takes a DFA, and returns a minimized version of it\n * compressing some states to groups (using standard, 0-, 1-,\n * 2-, ... N-equivalence algorithm).\n */\n\nfunction minimize(dfa) {\n  var table = dfa.getTransitionTable();\n  var allStates = Object.keys(table);\n  var alphabet = dfa.getAlphabet();\n  var accepting = dfa.getAcceptingStateNumbers();\n  currentTransitionMap = {};\n  var nonAccepting = new Set();\n  allStates.forEach(function (state) {\n    state = Number(state);\n    var isAccepting = accepting.has(state);\n\n    if (isAccepting) {\n      currentTransitionMap[state] = accepting;\n    } else {\n      nonAccepting.add(state);\n      currentTransitionMap[state] = nonAccepting;\n    }\n  }); // ---------------------------------------------------------------------------\n  // Step 1: build equivalent sets.\n  // All [1..N] equivalent sets.\n\n  var all = [// 0-equivalent sets.\n  [nonAccepting, accepting].filter(function (set) {\n    return set.size > 0;\n  })];\n  var current = void 0;\n  var previous = void 0; // Top of the stack is the current list of sets to analyze.\n\n  current = all[all.length - 1]; // Previous set (to check whether we need to stop).\n\n  previous = all[all.length - 2]; // Until we'll not have the same N and N-1 equivalent rows.\n\n  var _loop = function _loop() {\n    var newTransitionMap = {};\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = current[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _set = _step3.value; // Handled states for this set.\n\n        var handledStates = {};\n\n        var _set2 = _toArray(_set),\n            first = _set2[0],\n            rest = _set2.slice(1);\n\n        handledStates[first] = new Set([first]); // Have to compare each from the rest states with\n        // the already handled states, and see if they are equivalent.\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          restSets: for (var _iterator4 = rest[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var state = _step4.value;\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = Object.keys(handledStates)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var handledState = _step5.value; // This and some previously handled state are equivalent --\n                // just append this state to the same set.\n\n                if (areEquivalent(state, handledState, table, alphabet)) {\n                  handledStates[handledState].add(state);\n                  handledStates[state] = handledStates[handledState];\n                  continue restSets;\n                }\n              } // Else, this state is not equivalent to any of the\n              // handled states -- allocate a new set for it.\n\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            handledStates[state] = new Set([state]);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        } // Add these handled states to all states map.\n\n\n        Object.assign(newTransitionMap, handledStates);\n      } // Update current transition map for the handled row.\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    currentTransitionMap = newTransitionMap;\n    var newSets = new Set(Object.keys(newTransitionMap).map(function (state) {\n      return newTransitionMap[state];\n    }));\n    all.push([].concat(_toConsumableArray(newSets))); // Top of the stack is the current.\n\n    current = all[all.length - 1]; // Previous set.\n\n    previous = all[all.length - 2];\n  };\n\n  while (!sameRow(current, previous)) {\n    _loop();\n  } // ---------------------------------------------------------------------------\n  // Step 2: build minimized table from the equivalent sets.\n  // Remap state numbers from sets to index-based.\n\n\n  var remaped = new Map();\n  var idx = 1;\n  current.forEach(function (set) {\n    return remaped.set(set, idx++);\n  }); // Build the minimized table from the calculated equivalent sets.\n\n  var minimizedTable = {};\n  var minimizedAcceptingStates = new Set();\n\n  var updateAcceptingStates = function updateAcceptingStates(set, idx) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var state = _step.value;\n\n        if (accepting.has(state)) {\n          minimizedAcceptingStates.add(idx);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = remaped.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ref = _step2.value;\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var set = _ref2[0];\n      var _idx = _ref2[1];\n      minimizedTable[_idx] = {};\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = alphabet[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var symbol = _step6.value;\n          updateAcceptingStates(set, _idx); // Determine original transition for this symbol from the set.\n\n          var originalTransition = void 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = set[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var originalState = _step7.value;\n              originalTransition = table[originalState][symbol];\n\n              if (originalTransition) {\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          if (originalTransition) {\n            minimizedTable[_idx][symbol] = remaped.get(currentTransitionMap[originalTransition]);\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    } // Update the table, and accepting states on the original DFA.\n\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  dfa.setTransitionTable(minimizedTable);\n  dfa.setAcceptingStateNumbers(minimizedAcceptingStates);\n  return dfa;\n}\n\nfunction sameRow(r1, r2) {\n  if (!r2) {\n    return false;\n  }\n\n  if (r1.length !== r2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < r1.length; i++) {\n    var s1 = r1[i];\n    var s2 = r2[i];\n\n    if (s1.size !== s2.size) {\n      return false;\n    }\n\n    if ([].concat(_toConsumableArray(s1)).sort().join(',') !== [].concat(_toConsumableArray(s2)).sort().join(',')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Checks whether two states are N-equivalent, i.e. whether they go\n * to the same set on a symbol.\n */\n\n\nfunction areEquivalent(s1, s2, table, alphabet) {\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = alphabet[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var symbol = _step8.value;\n\n      if (!goToSameSet(s1, s2, table, symbol)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Checks whether states go to the same set.\n */\n\n\nfunction goToSameSet(s1, s2, table, symbol) {\n  if (!currentTransitionMap[s1] || !currentTransitionMap[s2]) {\n    return false;\n  }\n\n  var originalTransitionS1 = table[s1][symbol];\n  var originalTransitionS2 = table[s2][symbol]; // If no actual transition on this symbol, treat it as positive.\n\n  if (!originalTransitionS1 && !originalTransitionS2) {\n    return true;\n  } // Otherwise, check if they are in the same sets.\n\n\n  return currentTransitionMap[s1].has(originalTransitionS1) && currentTransitionMap[s2].has(originalTransitionS2);\n}\n\nmodule.exports = {\n  minimize: minimize\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa-minimizer.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DFAMinimizer = __webpack_require__(/*! ./dfa-minimizer */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa-minimizer.js\");\n\nvar _require = __webpack_require__(/*! ../special-symbols */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js\"),\n    EPSILON_CLOSURE = _require.EPSILON_CLOSURE;\n/**\n * DFA is build by converting from NFA (subset construction).\n */\n\n\nvar DFA = function () {\n  function DFA(nfa) {\n    _classCallCheck(this, DFA);\n\n    this._nfa = nfa;\n  }\n  /**\n   * Minimizes DFA.\n   */\n\n\n  _createClass(DFA, [{\n    key: 'minimize',\n    value: function minimize() {\n      this.getTransitionTable();\n      this._originalAcceptingStateNumbers = this._acceptingStateNumbers;\n      this._originalTransitionTable = this._transitionTable;\n      DFAMinimizer.minimize(this);\n    }\n    /**\n     * Returns alphabet for this DFA.\n     */\n\n  }, {\n    key: 'getAlphabet',\n    value: function getAlphabet() {\n      return this._nfa.getAlphabet();\n    }\n    /**\n     * Returns accepting states.\n     */\n\n  }, {\n    key: 'getAcceptingStateNumbers',\n    value: function getAcceptingStateNumbers() {\n      if (!this._acceptingStateNumbers) {\n        // Accepting states are determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._acceptingStateNumbers;\n    }\n    /**\n     * Returns original accepting states.\n     */\n\n  }, {\n    key: 'getOriginaAcceptingStateNumbers',\n    value: function getOriginaAcceptingStateNumbers() {\n      if (!this._originalAcceptingStateNumbers) {\n        // Accepting states are determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._originalAcceptingStateNumbers;\n    }\n    /**\n     * Sets transition table.\n     */\n\n  }, {\n    key: 'setTransitionTable',\n    value: function setTransitionTable(table) {\n      this._transitionTable = table;\n    }\n    /**\n     * Sets accepting states.\n     */\n\n  }, {\n    key: 'setAcceptingStateNumbers',\n    value: function setAcceptingStateNumbers(stateNumbers) {\n      this._acceptingStateNumbers = stateNumbers;\n    }\n    /**\n     * DFA transition table is built from NFA table.\n     */\n\n  }, {\n    key: 'getTransitionTable',\n    value: function getTransitionTable() {\n      var _this = this;\n\n      if (this._transitionTable) {\n        return this._transitionTable;\n      } // Calculate from NFA transition table.\n\n\n      var nfaTable = this._nfa.getTransitionTable();\n\n      var nfaStates = Object.keys(nfaTable);\n      this._acceptingStateNumbers = new Set(); // Start state of DFA is E(S[nfa])\n\n      var startState = nfaTable[nfaStates[0]][EPSILON_CLOSURE]; // Init the worklist (states which should be in the DFA).\n\n      var worklist = [startState];\n      var alphabet = this.getAlphabet();\n\n      var nfaAcceptingStates = this._nfa.getAcceptingStateNumbers();\n\n      var dfaTable = {}; // Determine whether the combined DFA state is accepting.\n\n      var updateAcceptingStates = function updateAcceptingStates(states) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = nfaAcceptingStates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var nfaAcceptingState = _step.value; // If any of the states from NFA is accepting, DFA's\n            // state is accepting as well.\n\n            if (states.indexOf(nfaAcceptingState) !== -1) {\n              _this._acceptingStateNumbers.add(states.join(','));\n\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      while (worklist.length > 0) {\n        var states = worklist.shift();\n        var dfaStateLabel = states.join(',');\n        dfaTable[dfaStateLabel] = {};\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = alphabet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var symbol = _step2.value;\n            var onSymbol = []; // Determine whether the combined state is accepting.\n\n            updateAcceptingStates(states);\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = states[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var state = _step3.value;\n                var nfaStatesOnSymbol = nfaTable[state][symbol];\n\n                if (!nfaStatesOnSymbol) {\n                  continue;\n                }\n\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                  for (var _iterator4 = nfaStatesOnSymbol[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var nfaStateOnSymbol = _step4.value;\n\n                    if (!nfaTable[nfaStateOnSymbol]) {\n                      continue;\n                    }\n\n                    onSymbol.push.apply(onSymbol, _toConsumableArray(nfaTable[nfaStateOnSymbol][EPSILON_CLOSURE]));\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                      _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            var dfaStatesOnSymbolSet = new Set(onSymbol);\n            var dfaStatesOnSymbol = [].concat(_toConsumableArray(dfaStatesOnSymbolSet));\n\n            if (dfaStatesOnSymbol.length > 0) {\n              var dfaOnSymbolStr = dfaStatesOnSymbol.join(',');\n              dfaTable[dfaStateLabel][symbol] = dfaOnSymbolStr;\n\n              if (!dfaTable.hasOwnProperty(dfaOnSymbolStr)) {\n                worklist.unshift(dfaStatesOnSymbol);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return this._transitionTable = this._remapStateNumbers(dfaTable);\n    }\n    /**\n     * Remaps state numbers in the resulting table:\n     * combined states '1,2,3' -> 1, '3,4' -> 2, etc.\n     */\n\n  }, {\n    key: '_remapStateNumbers',\n    value: function _remapStateNumbers(calculatedDFATable) {\n      var newStatesMap = {};\n      this._originalTransitionTable = calculatedDFATable;\n      var transitionTable = {};\n      Object.keys(calculatedDFATable).forEach(function (originalNumber, newNumber) {\n        newStatesMap[originalNumber] = newNumber + 1;\n      });\n\n      for (var originalNumber in calculatedDFATable) {\n        var originalRow = calculatedDFATable[originalNumber];\n        var row = {};\n\n        for (var symbol in originalRow) {\n          row[symbol] = newStatesMap[originalRow[symbol]];\n        }\n\n        transitionTable[newStatesMap[originalNumber]] = row;\n      } // Remap accepting states.\n\n\n      this._originalAcceptingStateNumbers = this._acceptingStateNumbers;\n      this._acceptingStateNumbers = new Set();\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this._originalAcceptingStateNumbers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var _originalNumber = _step5.value;\n\n          this._acceptingStateNumbers.add(newStatesMap[_originalNumber]);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return transitionTable;\n    }\n    /**\n     * Returns original DFA table, where state numbers\n     * are combined numbers from NFA.\n     */\n\n  }, {\n    key: 'getOriginalTransitionTable',\n    value: function getOriginalTransitionTable() {\n      if (!this._originalTransitionTable) {\n        // Original table is determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._originalTransitionTable;\n    }\n    /**\n     * Checks whether this DFA accepts a string.\n     */\n\n  }, {\n    key: 'matches',\n    value: function matches(string) {\n      var state = 1;\n      var i = 0;\n      var table = this.getTransitionTable();\n\n      while (string[i]) {\n        state = table[state][string[i++]];\n\n        if (!state) {\n          return false;\n        }\n      }\n\n      if (!this.getAcceptingStateNumbers().has(state)) {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return DFA;\n}();\n\nmodule.exports = DFA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar NFA = __webpack_require__(/*! ./nfa/nfa */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa.js\");\n\nvar DFA = __webpack_require__(/*! ./dfa/dfa */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/dfa/dfa.js\");\n\nvar nfaFromRegExp = __webpack_require__(/*! ./nfa/nfa-from-regexp */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-from-regexp.js\");\n\nvar builders = __webpack_require__(/*! ./nfa/builders */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/builders.js\");\n\nmodule.exports = {\n  /**\n   * Export NFA and DFA classes.\n   */\n  NFA: NFA,\n  DFA: DFA,\n\n  /**\n   * Expose builders.\n   */\n  builders: builders,\n\n  /**\n   * Builds an NFA for the passed regexp.\n   *\n   * @param string | AST | RegExp:\n   *\n   *   a regular expression in different representations: a string,\n   *   a RegExp object, or an AST.\n   */\n  toNFA: function toNFA(regexp) {\n    return nfaFromRegExp.build(regexp);\n  },\n\n  /**\n   * Builds DFA for the passed regexp.\n   *\n   * @param string | AST | RegExp:\n   *\n   *   a regular expression in different representations: a string,\n   *   a RegExp object, or an AST.\n   */\n  toDFA: function toDFA(regexp) {\n    return new DFA(this.toNFA(regexp));\n  },\n\n  /**\n   * Returns true if regexp accepts the string.\n   */\n  test: function test(regexp, string) {\n    return this.toDFA(regexp).matches(string);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3QvaW50ZXJwcmV0ZXIvZmluaXRlLWF1dG9tYXRvbi9pbmRleC5qcz80MTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBORkEgPSByZXF1aXJlKCcuL25mYS9uZmEnKTtcbnZhciBERkEgPSByZXF1aXJlKCcuL2RmYS9kZmEnKTtcblxudmFyIG5mYUZyb21SZWdFeHAgPSByZXF1aXJlKCcuL25mYS9uZmEtZnJvbS1yZWdleHAnKTtcbnZhciBidWlsZGVycyA9IHJlcXVpcmUoJy4vbmZhL2J1aWxkZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qKlxuICAgKiBFeHBvcnQgTkZBIGFuZCBERkEgY2xhc3Nlcy5cbiAgICovXG4gIE5GQTogTkZBLFxuICBERkE6IERGQSxcblxuICAvKipcbiAgICogRXhwb3NlIGJ1aWxkZXJzLlxuICAgKi9cbiAgYnVpbGRlcnM6IGJ1aWxkZXJzLFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gTkZBIGZvciB0aGUgcGFzc2VkIHJlZ2V4cC5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyB8IEFTVCB8IFJlZ0V4cDpcbiAgICpcbiAgICogICBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBpbiBkaWZmZXJlbnQgcmVwcmVzZW50YXRpb25zOiBhIHN0cmluZyxcbiAgICogICBhIFJlZ0V4cCBvYmplY3QsIG9yIGFuIEFTVC5cbiAgICovXG4gIHRvTkZBOiBmdW5jdGlvbiB0b05GQShyZWdleHApIHtcbiAgICByZXR1cm4gbmZhRnJvbVJlZ0V4cC5idWlsZChyZWdleHApO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBERkEgZm9yIHRoZSBwYXNzZWQgcmVnZXhwLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIHwgQVNUIHwgUmVnRXhwOlxuICAgKlxuICAgKiAgIGEgcmVndWxhciBleHByZXNzaW9uIGluIGRpZmZlcmVudCByZXByZXNlbnRhdGlvbnM6IGEgc3RyaW5nLFxuICAgKiAgIGEgUmVnRXhwIG9iamVjdCwgb3IgYW4gQVNULlxuICAgKi9cbiAgdG9ERkE6IGZ1bmN0aW9uIHRvREZBKHJlZ2V4cCkge1xuICAgIHJldHVybiBuZXcgREZBKHRoaXMudG9ORkEocmVnZXhwKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHJlZ2V4cCBhY2NlcHRzIHRoZSBzdHJpbmcuXG4gICAqL1xuICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHJlZ2V4cCwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudG9ERkEocmVnZXhwKS5tYXRjaGVzKHN0cmluZyk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQTVDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/builders.js":
/*!************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/builders.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar NFA = __webpack_require__(/*! ./nfa */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa.js\");\n\nvar NFAState = __webpack_require__(/*! ./nfa-state */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-state.js\");\n\nvar _require = __webpack_require__(/*! ../special-symbols */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js\"),\n    EPSILON = _require.EPSILON; // -----------------------------------------------------------------------------\n// Char NFA fragment: `c`\n\n/**\n * Char factory.\n *\n * Creates an NFA fragment for a single char.\n *\n * [in] --c--> [out]\n */\n\n\nfunction char(c) {\n  var inState = new NFAState();\n  var outState = new NFAState({\n    accepting: true\n  });\n  return new NFA(inState.addTransition(c, outState), outState);\n} // -----------------------------------------------------------------------------\n// Epsilon NFA fragment\n\n/**\n * Epsilon factory.\n *\n * Creates an NFA fragment for ε (recognizes an empty string).\n *\n * [in] --ε--> [out]\n */\n\n\nfunction e() {\n  return char(EPSILON);\n} // -----------------------------------------------------------------------------\n// Alteration NFA fragment: `abc`\n\n/**\n * Creates a connection between two NFA fragments on epsilon transition.\n *\n * [in-a] --a--> [out-a] --ε--> [in-b] --b--> [out-b]\n */\n\n\nfunction altPair(first, second) {\n  first.out.accepting = false;\n  second.out.accepting = true;\n  first.out.addTransition(EPSILON, second.in);\n  return new NFA(first.in, second.out);\n}\n/**\n * Alteration factory.\n *\n * Creates a alteration NFA for (at least) two NFA-fragments.\n */\n\n\nfunction alt(first) {\n  for (var _len = arguments.length, fragments = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    fragments[_key - 1] = arguments[_key];\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = fragments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var fragment = _step.value;\n      first = altPair(first, fragment);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return first;\n} // -----------------------------------------------------------------------------\n// Disjunction NFA fragment: `a|b`\n\n/**\n * Creates a disjunction choice between two fragments.\n */\n\n\nfunction orPair(first, second) {\n  var inState = new NFAState();\n  var outState = new NFAState();\n  inState.addTransition(EPSILON, first.in);\n  inState.addTransition(EPSILON, second.in);\n  outState.accepting = true;\n  first.out.accepting = false;\n  second.out.accepting = false;\n  first.out.addTransition(EPSILON, outState);\n  second.out.addTransition(EPSILON, outState);\n  return new NFA(inState, outState);\n}\n/**\n * Disjunction factory.\n *\n * Creates a disjunction NFA for (at least) two NFA-fragments.\n */\n\n\nfunction or(first) {\n  for (var _len2 = arguments.length, fragments = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    fragments[_key2 - 1] = arguments[_key2];\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = fragments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var fragment = _step2.value;\n      first = orPair(first, fragment);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return first;\n} // -----------------------------------------------------------------------------\n// Kleene-closure\n\n/**\n * Kleene star/closure.\n *\n * a*\n */\n\n\nfunction repExplicit(fragment) {\n  var inState = new NFAState();\n  var outState = new NFAState({\n    accepting: true\n  }); // 0 or more.\n\n  inState.addTransition(EPSILON, fragment.in);\n  inState.addTransition(EPSILON, outState);\n  fragment.out.accepting = false;\n  fragment.out.addTransition(EPSILON, outState);\n  outState.addTransition(EPSILON, fragment.in);\n  return new NFA(inState, outState);\n}\n/**\n * Optimized Kleene-star: just adds ε-transitions from\n * input to the output, and back.\n */\n\n\nfunction rep(fragment) {\n  fragment.in.addTransition(EPSILON, fragment.out);\n  fragment.out.addTransition(EPSILON, fragment.in);\n  return fragment;\n}\n/**\n * Optimized Plus: just adds ε-transitions from\n * the output to the input.\n */\n\n\nfunction plusRep(fragment) {\n  fragment.out.addTransition(EPSILON, fragment.in);\n  return fragment;\n}\n/**\n * Optimized ? repetition: just adds ε-transitions from\n * the input to the output.\n */\n\n\nfunction questionRep(fragment) {\n  fragment.in.addTransition(EPSILON, fragment.out);\n  return fragment;\n}\n\nmodule.exports = {\n  alt: alt,\n  char: char,\n  e: e,\n  or: or,\n  rep: rep,\n  repExplicit: repExplicit,\n  plusRep: plusRep,\n  questionRep: questionRep\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/builders.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-from-regexp.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-from-regexp.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar parser = __webpack_require__(/*! ../../../parser */ \"./node_modules/regexp-tree/dist/parser/index.js\");\n\nvar _require = __webpack_require__(/*! ./builders */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/builders.js\"),\n    alt = _require.alt,\n    char = _require.char,\n    or = _require.or,\n    rep = _require.rep,\n    plusRep = _require.plusRep,\n    questionRep = _require.questionRep;\n/**\n * Helper `gen` function calls node type handler.\n */\n\n\nfunction gen(node) {\n  if (node && !generator[node.type]) {\n    throw new Error(node.type + ' is not supported in NFA/DFA interpreter.');\n  }\n\n  return node ? generator[node.type](node) : '';\n}\n/**\n * AST handler.\n */\n\n\nvar generator = {\n  RegExp: function RegExp(node) {\n    if (node.flags !== '') {\n      throw new Error('NFA/DFA: Flags are not supported yet.');\n    }\n\n    return gen(node.body);\n  },\n  Alternative: function Alternative(node) {\n    var fragments = (node.expressions || []).map(gen);\n    return alt.apply(undefined, _toConsumableArray(fragments));\n  },\n  Disjunction: function Disjunction(node) {\n    return or(gen(node.left), gen(node.right));\n  },\n  Repetition: function Repetition(node) {\n    switch (node.quantifier.kind) {\n      case '*':\n        return rep(gen(node.expression));\n\n      case '+':\n        return plusRep(gen(node.expression));\n\n      case '?':\n        return questionRep(gen(node.expression));\n\n      default:\n        throw new Error('Unknown repeatition: ' + node.quantifier.kind + '.');\n    }\n  },\n  Char: function Char(node) {\n    if (node.kind !== 'simple') {\n      throw new Error('NFA/DFA: Only simple chars are supported yet.');\n    }\n\n    return char(node.value);\n  },\n  Group: function Group(node) {\n    return gen(node.expression);\n  }\n};\nmodule.exports = {\n  /**\n   * Builds an NFA from the passed regexp.\n   */\n  build: function build(regexp) {\n    var ast = regexp;\n\n    if (regexp instanceof RegExp) {\n      regexp = '' + regexp;\n    }\n\n    if (typeof regexp === 'string') {\n      ast = parser.parse(regexp, {\n        captureLocations: true\n      });\n    }\n\n    return gen(ast);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uL25mYS9uZmEtZnJvbS1yZWdleHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uL25mYS9uZmEtZnJvbS1yZWdleHAuanM/NDA2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3BhcnNlcicpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2J1aWxkZXJzJyksXG4gICAgYWx0ID0gX3JlcXVpcmUuYWx0LFxuICAgIGNoYXIgPSBfcmVxdWlyZS5jaGFyLFxuICAgIG9yID0gX3JlcXVpcmUub3IsXG4gICAgcmVwID0gX3JlcXVpcmUucmVwLFxuICAgIHBsdXNSZXAgPSBfcmVxdWlyZS5wbHVzUmVwLFxuICAgIHF1ZXN0aW9uUmVwID0gX3JlcXVpcmUucXVlc3Rpb25SZXA7XG5cbi8qKlxuICogSGVscGVyIGBnZW5gIGZ1bmN0aW9uIGNhbGxzIG5vZGUgdHlwZSBoYW5kbGVyLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuKG5vZGUpIHtcbiAgaWYgKG5vZGUgJiYgIWdlbmVyYXRvcltub2RlLnR5cGVdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG5vZGUudHlwZSArICcgaXMgbm90IHN1cHBvcnRlZCBpbiBORkEvREZBIGludGVycHJldGVyLicpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGUgPyBnZW5lcmF0b3Jbbm9kZS50eXBlXShub2RlKSA6ICcnO1xufVxuXG4vKipcbiAqIEFTVCBoYW5kbGVyLlxuICovXG52YXIgZ2VuZXJhdG9yID0ge1xuICBSZWdFeHA6IGZ1bmN0aW9uIFJlZ0V4cChub2RlKSB7XG4gICAgaWYgKG5vZGUuZmxhZ3MgIT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05GQS9ERkE6IEZsYWdzIGFyZSBub3Qgc3VwcG9ydGVkIHlldC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuKG5vZGUuYm9keSk7XG4gIH0sXG4gIEFsdGVybmF0aXZlOiBmdW5jdGlvbiBBbHRlcm5hdGl2ZShub2RlKSB7XG4gICAgdmFyIGZyYWdtZW50cyA9IChub2RlLmV4cHJlc3Npb25zIHx8IFtdKS5tYXAoZ2VuKTtcbiAgICByZXR1cm4gYWx0LmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGZyYWdtZW50cykpO1xuICB9LFxuICBEaXNqdW5jdGlvbjogZnVuY3Rpb24gRGlzanVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBvcihnZW4obm9kZS5sZWZ0KSwgZ2VuKG5vZGUucmlnaHQpKTtcbiAgfSxcbiAgUmVwZXRpdGlvbjogZnVuY3Rpb24gUmVwZXRpdGlvbihub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLnF1YW50aWZpZXIua2luZCkge1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHJldHVybiByZXAoZ2VuKG5vZGUuZXhwcmVzc2lvbikpO1xuICAgICAgY2FzZSAnKyc6XG4gICAgICAgIHJldHVybiBwbHVzUmVwKGdlbihub2RlLmV4cHJlc3Npb24pKTtcbiAgICAgIGNhc2UgJz8nOlxuICAgICAgICByZXR1cm4gcXVlc3Rpb25SZXAoZ2VuKG5vZGUuZXhwcmVzc2lvbikpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHJlcGVhdGl0aW9uOiAnICsgbm9kZS5xdWFudGlmaWVyLmtpbmQgKyAnLicpO1xuICAgIH1cbiAgfSxcbiAgQ2hhcjogZnVuY3Rpb24gQ2hhcihub2RlKSB7XG4gICAgaWYgKG5vZGUua2luZCAhPT0gJ3NpbXBsZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTkZBL0RGQTogT25seSBzaW1wbGUgY2hhcnMgYXJlIHN1cHBvcnRlZCB5ZXQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXIobm9kZS52YWx1ZSk7XG4gIH0sXG4gIEdyb3VwOiBmdW5jdGlvbiBHcm91cChub2RlKSB7XG4gICAgcmV0dXJuIGdlbihub2RlLmV4cHJlc3Npb24pO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEJ1aWxkcyBhbiBORkEgZnJvbSB0aGUgcGFzc2VkIHJlZ2V4cC5cbiAgICovXG4gIGJ1aWxkOiBmdW5jdGlvbiBidWlsZChyZWdleHApIHtcbiAgICB2YXIgYXN0ID0gcmVnZXhwO1xuXG4gICAgaWYgKHJlZ2V4cCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmVnZXhwID0gJycgKyByZWdleHA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWdleHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhc3QgPSBwYXJzZXIucGFyc2UocmVnZXhwLCB7XG4gICAgICAgIGNhcHR1cmVMb2NhdGlvbnM6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBnZW4oYXN0KTtcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVFBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFwQ0E7QUF1Q0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-from-regexp.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-state.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-state.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((0, _typeof2.default)(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (0, _typeof2.default)(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar State = __webpack_require__(/*! ../state */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/state.js\");\n\nvar _require = __webpack_require__(/*! ../special-symbols */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js\"),\n    EPSILON = _require.EPSILON;\n/**\n * NFA state.\n *\n * Allows nondeterministic transitions to several states on the\n * same symbol, and also epsilon-transitions.\n */\n\n\nvar NFAState = function (_State) {\n  _inherits(NFAState, _State);\n\n  function NFAState() {\n    _classCallCheck(this, NFAState);\n\n    return _possibleConstructorReturn(this, (NFAState.__proto__ || Object.getPrototypeOf(NFAState)).apply(this, arguments));\n  }\n\n  _createClass(NFAState, [{\n    key: 'matches',\n\n    /**\n     * Whether this state matches a string.\n     *\n     * We maintain set of visited epsilon-states to avoid infinite loops\n     * when an epsilon-transition goes eventually to itself.\n     *\n     * NOTE: this function is rather \"educational\", since we use DFA for strings\n     * matching. DFA is built on top of NFA, and uses fast transition table.\n     */\n    value: function matches(string) {\n      var visited = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set(); // An epsilon-state has been visited, stop to avoid infinite loop.\n\n      if (visited.has(this)) {\n        return false;\n      }\n\n      visited.add(this); // No symbols left..\n\n      if (string.length === 0) {\n        // .. and we're in the accepting state.\n        if (this.accepting) {\n          return true;\n        } // Check if we can reach any accepting state from\n        // on the epsilon transitions.\n\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.getTransitionsOnSymbol(EPSILON)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var nextState = _step.value;\n\n            if (nextState.matches('', visited)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return false;\n      } // Else, we get some symbols.\n\n\n      var symbol = string[0];\n      var rest = string.slice(1);\n      var symbolTransitions = this.getTransitionsOnSymbol(symbol);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = symbolTransitions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _nextState = _step2.value;\n\n          if (_nextState.matches(rest)) {\n            return true;\n          }\n        } // If we couldn't match on symbol, check still epsilon-transitions\n        // without consuming the symbol (i.e. continue from `string`, not `rest`).\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.getTransitionsOnSymbol(EPSILON)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _nextState2 = _step3.value;\n\n          if (_nextState2.matches(string, visited)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns an ε-closure for this state:\n     * self + all states following ε-transitions.\n     */\n\n  }, {\n    key: 'getEpsilonClosure',\n    value: function getEpsilonClosure() {\n      var _this2 = this;\n\n      if (!this._epsilonClosure) {\n        (function () {\n          var epsilonTransitions = _this2.getTransitionsOnSymbol(EPSILON);\n\n          var closure = _this2._epsilonClosure = new Set();\n          closure.add(_this2);\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = epsilonTransitions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var nextState = _step4.value;\n\n              if (!closure.has(nextState)) {\n                closure.add(nextState);\n                var nextClosure = nextState.getEpsilonClosure();\n                nextClosure.forEach(function (state) {\n                  return closure.add(state);\n                });\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        })();\n      }\n\n      return this._epsilonClosure;\n    }\n  }]);\n\n  return NFAState;\n}(State);\n\nmodule.exports = NFAState;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa-state.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _require = __webpack_require__(/*! ../special-symbols */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js\"),\n    EPSILON = _require.EPSILON,\n    EPSILON_CLOSURE = _require.EPSILON_CLOSURE;\n/**\n * NFA fragment.\n *\n * NFA sub-fragments can be combined to a larger NFAs building\n * the resulting machine. Combining the fragments is done by patching\n * edges of the in- and out-states.\n *\n * 2-states implementation, `in`, and `out`. Eventually all transitions\n * go to the same `out`, which can further be connected via ε-transition\n * with other fragment.\n */\n\n\nvar NFA = function () {\n  function NFA(inState, outState) {\n    _classCallCheck(this, NFA);\n\n    this.in = inState;\n    this.out = outState;\n  }\n  /**\n   * Tries to recognize a string based on this NFA fragment.\n   */\n\n\n  _createClass(NFA, [{\n    key: 'matches',\n    value: function matches(string) {\n      return this.in.matches(string);\n    }\n    /**\n     * Returns an alphabet for this NFA.\n     */\n\n  }, {\n    key: 'getAlphabet',\n    value: function getAlphabet() {\n      if (!this._alphabet) {\n        this._alphabet = new Set();\n        var table = this.getTransitionTable();\n\n        for (var state in table) {\n          var transitions = table[state];\n\n          for (var symbol in transitions) {\n            if (symbol !== EPSILON_CLOSURE) {\n              this._alphabet.add(symbol);\n            }\n          }\n        }\n      }\n\n      return this._alphabet;\n    }\n    /**\n     * Returns set of accepting states.\n     */\n\n  }, {\n    key: 'getAcceptingStates',\n    value: function getAcceptingStates() {\n      if (!this._acceptingStates) {\n        // States are determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._acceptingStates;\n    }\n    /**\n     * Returns accepting state numbers.\n     */\n\n  }, {\n    key: 'getAcceptingStateNumbers',\n    value: function getAcceptingStateNumbers() {\n      if (!this._acceptingStateNumbers) {\n        this._acceptingStateNumbers = new Set();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.getAcceptingStates()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var acceptingState = _step.value;\n\n            this._acceptingStateNumbers.add(acceptingState.number);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return this._acceptingStateNumbers;\n    }\n    /**\n     * Builds and returns transition table.\n     */\n\n  }, {\n    key: 'getTransitionTable',\n    value: function getTransitionTable() {\n      var _this = this;\n\n      if (!this._transitionTable) {\n        this._transitionTable = {};\n        this._acceptingStates = new Set();\n        var visited = new Set();\n        var symbols = new Set();\n\n        var visitState = function visitState(state) {\n          if (visited.has(state)) {\n            return;\n          }\n\n          visited.add(state);\n          state.number = visited.size;\n          _this._transitionTable[state.number] = {};\n\n          if (state.accepting) {\n            _this._acceptingStates.add(state);\n          }\n\n          var transitions = state.getTransitions();\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = transitions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _ref = _step2.value;\n\n              var _ref2 = _slicedToArray(_ref, 2);\n\n              var symbol = _ref2[0];\n              var symbolTransitions = _ref2[1];\n              var combinedState = [];\n              symbols.add(symbol);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                for (var _iterator3 = symbolTransitions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var nextState = _step3.value;\n                  visitState(nextState);\n                  combinedState.push(nextState.number);\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n\n              _this._transitionTable[state.number][symbol] = combinedState;\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }; // Traverse the graph starting from the `in`.\n\n\n        visitState(this.in); // Append epsilon-closure column.\n\n        visited.forEach(function (state) {\n          delete _this._transitionTable[state.number][EPSILON];\n          _this._transitionTable[state.number][EPSILON_CLOSURE] = [].concat(_toConsumableArray(state.getEpsilonClosure())).map(function (s) {\n            return s.number;\n          });\n        });\n      }\n\n      return this._transitionTable;\n    }\n  }]);\n\n  return NFA;\n}();\n\nmodule.exports = NFA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/nfa/nfa.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * Epsilon, the empty string.\n */\n\nvar EPSILON = 'ε';\n/**\n * Epsilon-closure.\n */\n\nvar EPSILON_CLOSURE = EPSILON + '*';\nmodule.exports = {\n  EPSILON: EPSILON,\n  EPSILON_CLOSURE: EPSILON_CLOSURE\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uL3NwZWNpYWwtc3ltYm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L2ludGVycHJldGVyL2Zpbml0ZS1hdXRvbWF0b24vc3BlY2lhbC1zeW1ib2xzLmpzPzNhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBFcHNpbG9uLCB0aGUgZW1wdHkgc3RyaW5nLlxuICovXG5cbnZhciBFUFNJTE9OID0gJ861JztcblxuLyoqXG4gKiBFcHNpbG9uLWNsb3N1cmUuXG4gKi9cbnZhciBFUFNJTE9OX0NMT1NVUkUgPSBFUFNJTE9OICsgJyonO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVBTSUxPTjogRVBTSUxPTixcbiAgRVBTSUxPTl9DTE9TVVJFOiBFUFNJTE9OX0NMT1NVUkVcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7QUFJQTtBQUVBOzs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFGQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/special-symbols.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/interpreter/finite-automaton/state.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/interpreter/finite-automaton/state.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A generic FA State class (base for NFA and DFA).\n *\n * Maintains the transition map, and the flag whether\n * the state is accepting.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar State = function () {\n  function State() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$accepting = _ref.accepting,\n        accepting = _ref$accepting === undefined ? false : _ref$accepting;\n\n    _classCallCheck(this, State);\n    /**\n     * Outgoing transitions to other states.\n     */\n\n\n    this._transitions = new Map();\n    /**\n     * Whether the state is accepting.\n     */\n\n    this.accepting = accepting;\n  }\n  /**\n   * Returns transitions for this state.\n   */\n\n\n  _createClass(State, [{\n    key: 'getTransitions',\n    value: function getTransitions() {\n      return this._transitions;\n    }\n    /**\n     * Creates a transition on symbol.\n     */\n\n  }, {\n    key: 'addTransition',\n    value: function addTransition(symbol, toState) {\n      this.getTransitionsOnSymbol(symbol).add(toState);\n      return this;\n    }\n    /**\n     * Returns transitions set on symbol.\n     */\n\n  }, {\n    key: 'getTransitionsOnSymbol',\n    value: function getTransitionsOnSymbol(symbol) {\n      var transitions = this._transitions.get(symbol);\n\n      if (!transitions) {\n        transitions = new Set();\n\n        this._transitions.set(symbol, transitions);\n      }\n\n      return transitions;\n    }\n  }]);\n\n  return State;\n}();\n\nmodule.exports = State;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uL3N0YXRlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3QvaW50ZXJwcmV0ZXIvZmluaXRlLWF1dG9tYXRvbi9zdGF0ZS5qcz9iYjY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBnZW5lcmljIEZBIFN0YXRlIGNsYXNzIChiYXNlIGZvciBORkEgYW5kIERGQSkuXG4gKlxuICogTWFpbnRhaW5zIHRoZSB0cmFuc2l0aW9uIG1hcCwgYW5kIHRoZSBmbGFnIHdoZXRoZXJcbiAqIHRoZSBzdGF0ZSBpcyBhY2NlcHRpbmcuXG4gKi9cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0ZSgpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkYWNjZXB0aW5nID0gX3JlZi5hY2NlcHRpbmcsXG4gICAgICAgIGFjY2VwdGluZyA9IF9yZWYkYWNjZXB0aW5nID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkYWNjZXB0aW5nO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRlKTtcblxuICAgIC8qKlxuICAgICAqIE91dGdvaW5nIHRyYW5zaXRpb25zIHRvIG90aGVyIHN0YXRlcy5cbiAgICAgKi9cbiAgICB0aGlzLl90cmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHN0YXRlIGlzIGFjY2VwdGluZy5cbiAgICAgKi9cbiAgICB0aGlzLmFjY2VwdGluZyA9IGFjY2VwdGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRyYW5zaXRpb25zIGZvciB0aGlzIHN0YXRlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTdGF0ZSwgW3tcbiAgICBrZXk6ICdnZXRUcmFuc2l0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0cmFuc2l0aW9uIG9uIHN5bWJvbC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkVHJhbnNpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRyYW5zaXRpb24oc3ltYm9sLCB0b1N0YXRlKSB7XG4gICAgICB0aGlzLmdldFRyYW5zaXRpb25zT25TeW1ib2woc3ltYm9sKS5hZGQodG9TdGF0ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRyYW5zaXRpb25zIHNldCBvbiBzeW1ib2wuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFRyYW5zaXRpb25zT25TeW1ib2wnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uc09uU3ltYm9sKHN5bWJvbCkge1xuICAgICAgdmFyIHRyYW5zaXRpb25zID0gdGhpcy5fdHJhbnNpdGlvbnMuZ2V0KHN5bWJvbCk7XG5cbiAgICAgIGlmICghdHJhbnNpdGlvbnMpIHtcbiAgICAgICAgdHJhbnNpdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25zLnNldChzeW1ib2wsIHRyYW5zaXRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdGF0ZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFFQTs7Ozs7OztBQU9BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBRUE7Ozs7O0FBR0E7QUFFQTs7OztBQUdBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFOQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQVBBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/interpreter/finite-automaton/state.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar clone = __webpack_require__(/*! ../utils/clone */ \"./node_modules/regexp-tree/dist/utils/clone.js\");\n\nvar parser = __webpack_require__(/*! ../parser */ \"./node_modules/regexp-tree/dist/parser/index.js\");\n\nvar transform = __webpack_require__(/*! ../transform */ \"./node_modules/regexp-tree/dist/transform/index.js\");\n\nvar optimizationTransforms = __webpack_require__(/*! ./transforms */ \"./node_modules/regexp-tree/dist/optimizer/transforms/index.js\");\n\nmodule.exports = {\n  /**\n   * Optimizer transforms a regular expression into an optimized version,\n   * replacing some sub-expressions with their idiomatic patterns.\n   *\n   * @param string | RegExp | AST - a regexp to optimize.\n   *\n   * @return TransformResult - an optimized regexp.\n   *\n   * Example:\n   *\n   *   /[a-zA-Z_0-9][a-zA-Z_0-9]*\\e{1,}/\n   *\n   * Optimized to:\n   *\n   *   /\\w+e+/\n   */\n  optimize: function optimize(regexp) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$whitelist = _ref.whitelist,\n        whitelist = _ref$whitelist === undefined ? [] : _ref$whitelist,\n        _ref$blacklist = _ref.blacklist,\n        blacklist = _ref$blacklist === undefined ? [] : _ref$blacklist;\n\n    var transformsRaw = whitelist.length > 0 ? whitelist : Array.from(optimizationTransforms.keys());\n    var transformToApply = transformsRaw.filter(function (transform) {\n      return !blacklist.includes(transform);\n    });\n    var ast = regexp;\n\n    if (regexp instanceof RegExp) {\n      regexp = '' + regexp;\n    }\n\n    if (typeof regexp === 'string') {\n      ast = parser.parse(regexp);\n    }\n\n    var result = new transform.TransformResult(ast);\n    var prevResultString = void 0;\n\n    do {\n      // Get a copy of the current state here so\n      // we can compare it with the state at the\n      // end of the loop.\n      prevResultString = result.toString();\n      ast = clone(result.getAST());\n      transformToApply.forEach(function (transformName) {\n        if (!optimizationTransforms.has(transformName)) {\n          throw new Error('Unknown optimization-transform: ' + transformName + '. ' + 'Available transforms are: ' + Array.from(optimizationTransforms.keys()).join(', '));\n        }\n\n        var transformer = optimizationTransforms.get(transformName); // Don't override result just yet since we\n        // might want to rollback the transform\n\n        var newResult = transform.transform(ast, transformer);\n\n        if (newResult.toString() !== result.toString()) {\n          if (newResult.toString().length <= result.toString().length) {\n            result = newResult;\n          } else {\n            // Result has changed but is not shorter:\n            // restore ast to its previous state.\n            ast = clone(result.getAST());\n          }\n        }\n      }); // Keep running the optimizer until it stops\n      // making any change to the regexp.\n    } while (result.toString() !== prevResultString);\n\n    return result;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvaW5kZXguanM/YjBjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xvbmUgPSByZXF1aXJlKCcuLi91dGlscy9jbG9uZScpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4uL3BhcnNlcicpO1xudmFyIHRyYW5zZm9ybSA9IHJlcXVpcmUoJy4uL3RyYW5zZm9ybScpO1xudmFyIG9wdGltaXphdGlvblRyYW5zZm9ybXMgPSByZXF1aXJlKCcuL3RyYW5zZm9ybXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBPcHRpbWl6ZXIgdHJhbnNmb3JtcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBpbnRvIGFuIG9wdGltaXplZCB2ZXJzaW9uLFxuICAgKiByZXBsYWNpbmcgc29tZSBzdWItZXhwcmVzc2lvbnMgd2l0aCB0aGVpciBpZGlvbWF0aWMgcGF0dGVybnMuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgfCBSZWdFeHAgfCBBU1QgLSBhIHJlZ2V4cCB0byBvcHRpbWl6ZS5cbiAgICpcbiAgICogQHJldHVybiBUcmFuc2Zvcm1SZXN1bHQgLSBhbiBvcHRpbWl6ZWQgcmVnZXhwLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgIC9bYS16QS1aXzAtOV1bYS16QS1aXzAtOV0qXFxlezEsfS9cbiAgICpcbiAgICogT3B0aW1pemVkIHRvOlxuICAgKlxuICAgKiAgIC9cXHcrZSsvXG4gICAqL1xuICBvcHRpbWl6ZTogZnVuY3Rpb24gb3B0aW1pemUocmVnZXhwKSB7XG4gICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICBfcmVmJHdoaXRlbGlzdCA9IF9yZWYud2hpdGVsaXN0LFxuICAgICAgICB3aGl0ZWxpc3QgPSBfcmVmJHdoaXRlbGlzdCA9PT0gdW5kZWZpbmVkID8gW10gOiBfcmVmJHdoaXRlbGlzdCxcbiAgICAgICAgX3JlZiRibGFja2xpc3QgPSBfcmVmLmJsYWNrbGlzdCxcbiAgICAgICAgYmxhY2tsaXN0ID0gX3JlZiRibGFja2xpc3QgPT09IHVuZGVmaW5lZCA/IFtdIDogX3JlZiRibGFja2xpc3Q7XG5cbiAgICB2YXIgdHJhbnNmb3Jtc1JhdyA9IHdoaXRlbGlzdC5sZW5ndGggPiAwID8gd2hpdGVsaXN0IDogQXJyYXkuZnJvbShvcHRpbWl6YXRpb25UcmFuc2Zvcm1zLmtleXMoKSk7XG5cbiAgICB2YXIgdHJhbnNmb3JtVG9BcHBseSA9IHRyYW5zZm9ybXNSYXcuZmlsdGVyKGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiAhYmxhY2tsaXN0LmluY2x1ZGVzKHRyYW5zZm9ybSk7XG4gICAgfSk7XG5cbiAgICB2YXIgYXN0ID0gcmVnZXhwO1xuICAgIGlmIChyZWdleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJlZ2V4cCA9ICcnICsgcmVnZXhwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVnZXhwID09PSAnc3RyaW5nJykge1xuICAgICAgYXN0ID0gcGFyc2VyLnBhcnNlKHJlZ2V4cCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyB0cmFuc2Zvcm0uVHJhbnNmb3JtUmVzdWx0KGFzdCk7XG4gICAgdmFyIHByZXZSZXN1bHRTdHJpbmcgPSB2b2lkIDA7XG5cbiAgICBkbyB7XG4gICAgICAvLyBHZXQgYSBjb3B5IG9mIHRoZSBjdXJyZW50IHN0YXRlIGhlcmUgc29cbiAgICAgIC8vIHdlIGNhbiBjb21wYXJlIGl0IHdpdGggdGhlIHN0YXRlIGF0IHRoZVxuICAgICAgLy8gZW5kIG9mIHRoZSBsb29wLlxuICAgICAgcHJldlJlc3VsdFN0cmluZyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgYXN0ID0gY2xvbmUocmVzdWx0LmdldEFTVCgpKTtcblxuICAgICAgdHJhbnNmb3JtVG9BcHBseS5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc2Zvcm1OYW1lKSB7XG4gICAgICAgIGlmICghb3B0aW1pemF0aW9uVHJhbnNmb3Jtcy5oYXModHJhbnNmb3JtTmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gb3B0aW1pemF0aW9uLXRyYW5zZm9ybTogJyArIHRyYW5zZm9ybU5hbWUgKyAnLiAnICsgJ0F2YWlsYWJsZSB0cmFuc2Zvcm1zIGFyZTogJyArIEFycmF5LmZyb20ob3B0aW1pemF0aW9uVHJhbnNmb3Jtcy5rZXlzKCkpLmpvaW4oJywgJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gb3B0aW1pemF0aW9uVHJhbnNmb3Jtcy5nZXQodHJhbnNmb3JtTmFtZSk7XG5cbiAgICAgICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgcmVzdWx0IGp1c3QgeWV0IHNpbmNlIHdlXG4gICAgICAgIC8vIG1pZ2h0IHdhbnQgdG8gcm9sbGJhY2sgdGhlIHRyYW5zZm9ybVxuICAgICAgICB2YXIgbmV3UmVzdWx0ID0gdHJhbnNmb3JtLnRyYW5zZm9ybShhc3QsIHRyYW5zZm9ybWVyKTtcblxuICAgICAgICBpZiAobmV3UmVzdWx0LnRvU3RyaW5nKCkgIT09IHJlc3VsdC50b1N0cmluZygpKSB7XG4gICAgICAgICAgaWYgKG5ld1Jlc3VsdC50b1N0cmluZygpLmxlbmd0aCA8PSByZXN1bHQudG9TdHJpbmcoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ld1Jlc3VsdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVzdWx0IGhhcyBjaGFuZ2VkIGJ1dCBpcyBub3Qgc2hvcnRlcjpcbiAgICAgICAgICAgIC8vIHJlc3RvcmUgYXN0IHRvIGl0cyBwcmV2aW91cyBzdGF0ZS5cblxuICAgICAgICAgICAgYXN0ID0gY2xvbmUocmVzdWx0LmdldEFTVCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBLZWVwIHJ1bm5pbmcgdGhlIG9wdGltaXplciB1bnRpbCBpdCBzdG9wc1xuICAgICAgLy8gbWFraW5nIGFueSBjaGFuZ2UgdG8gdGhlIHJlZ2V4cC5cbiAgICB9IHdoaWxlIChyZXN1bHQudG9TdHJpbmcoKSAhPT0gcHJldlJlc3VsdFN0cmluZyk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE3RUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-case-insensitive-lowercase-transform.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-case-insensitive-lowercase-transform.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar UPPER_A_CP = 'A'.codePointAt(0);\nvar UPPER_Z_CP = 'Z'.codePointAt(0);\n/**\n * Transforms case-insensitive regexp to lowercase\n *\n * /AaBbÏ/i -> /aabbï/i\n */\n\nmodule.exports = {\n  _AZClassRanges: null,\n  _hasUFlag: false,\n  init: function init(ast) {\n    this._AZClassRanges = new Set();\n    this._hasUFlag = ast.flags.includes('u');\n  },\n  shouldRun: function shouldRun(ast) {\n    return ast.flags.includes('i');\n  },\n  Char: function Char(path) {\n    var node = path.node,\n        parent = path.parent;\n\n    if (isNaN(node.codePoint)) {\n      return;\n    } // Engine support for case-insensitive matching without the u flag\n    // for characters above \\u1000 does not seem reliable.\n\n\n    if (!this._hasUFlag && node.codePoint >= 0x1000) {\n      return;\n    }\n\n    if (parent.type === 'ClassRange') {\n      // The only class ranges we handle must be inside A-Z.\n      // After the `from` char is processed, the isAZClassRange test\n      // will be false, so we use a Set to keep track of parents and\n      // process the `to` char.\n      if (!this._AZClassRanges.has(parent) && !isAZClassRange(parent)) {\n        return;\n      }\n\n      this._AZClassRanges.add(parent);\n    }\n\n    var lower = node.symbol.toLowerCase();\n\n    if (lower !== node.symbol) {\n      node.value = displaySymbolAsValue(lower, node);\n      node.symbol = lower;\n      node.codePoint = lower.codePointAt(0);\n    }\n  }\n};\n\nfunction isAZClassRange(classRange) {\n  var from = classRange.from,\n      to = classRange.to; // A-Z\n\n  return from.codePoint >= UPPER_A_CP && from.codePoint <= UPPER_Z_CP && to.codePoint >= UPPER_A_CP && to.codePoint <= UPPER_Z_CP;\n}\n\nfunction displaySymbolAsValue(symbol, node) {\n  var codePoint = symbol.codePointAt(0);\n\n  if (node.kind === 'decimal') {\n    return '\\\\' + codePoint;\n  }\n\n  if (node.kind === 'oct') {\n    return '\\\\0' + codePoint.toString(8);\n  }\n\n  if (node.kind === 'hex') {\n    return '\\\\x' + codePoint.toString(16);\n  }\n\n  if (node.kind === 'unicode') {\n    if (node.isSurrogatePair) {\n      var _getSurrogatePairFrom = getSurrogatePairFromCodePoint(codePoint),\n          lead = _getSurrogatePairFrom.lead,\n          trail = _getSurrogatePairFrom.trail;\n\n      return \"\\\\u\" + '0'.repeat(4 - lead.length) + lead + \"\\\\u\" + '0'.repeat(4 - trail.length) + trail;\n    } else if (node.value.includes('{')) {\n      return \"\\\\u{\" + codePoint.toString(16) + '}';\n    } else {\n      var code = codePoint.toString(16);\n      return \"\\\\u\" + '0'.repeat(4 - code.length) + code;\n    }\n  } // simple\n\n\n  return symbol;\n}\n/**\n * Converts a code point to a surrogate pair.\n * Conversion algorithm is taken from The Unicode Standard 3.0 Section 3.7\n * (https://www.unicode.org/versions/Unicode3.0.0/ch03.pdf)\n * @param {number} codePoint - Between 0x10000 and 0x10ffff\n * @returns {{lead: string, trail: string}}\n */\n\n\nfunction getSurrogatePairFromCodePoint(codePoint) {\n  var lead = Math.floor((codePoint - 0x10000) / 0x400) + 0xd800;\n  var trail = (codePoint - 0x10000) % 0x400 + 0xdc00;\n  return {\n    lead: lead.toString(16),\n    trail: trail.toString(16)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWNhc2UtaW5zZW5zaXRpdmUtbG93ZXJjYXNlLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2NoYXItY2FzZS1pbnNlbnNpdGl2ZS1sb3dlcmNhc2UtdHJhbnNmb3JtLmpzP2IxZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVQUEVSX0FfQ1AgPSAnQScuY29kZVBvaW50QXQoMCk7XG52YXIgVVBQRVJfWl9DUCA9ICdaJy5jb2RlUG9pbnRBdCgwKTtcbi8qKlxuICogVHJhbnNmb3JtcyBjYXNlLWluc2Vuc2l0aXZlIHJlZ2V4cCB0byBsb3dlcmNhc2VcbiAqXG4gKiAvQWFCYsOPL2kgLT4gL2FhYmLDry9pXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBfQVpDbGFzc1JhbmdlczogbnVsbCxcbiAgX2hhc1VGbGFnOiBmYWxzZSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChhc3QpIHtcbiAgICB0aGlzLl9BWkNsYXNzUmFuZ2VzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX2hhc1VGbGFnID0gYXN0LmZsYWdzLmluY2x1ZGVzKCd1Jyk7XG4gIH0sXG4gIHNob3VsZFJ1bjogZnVuY3Rpb24gc2hvdWxkUnVuKGFzdCkge1xuICAgIHJldHVybiBhc3QuZmxhZ3MuaW5jbHVkZXMoJ2knKTtcbiAgfSxcbiAgQ2hhcjogZnVuY3Rpb24gQ2hhcihwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGUsXG4gICAgICAgIHBhcmVudCA9IHBhdGgucGFyZW50O1xuXG4gICAgaWYgKGlzTmFOKG5vZGUuY29kZVBvaW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEVuZ2luZSBzdXBwb3J0IGZvciBjYXNlLWluc2Vuc2l0aXZlIG1hdGNoaW5nIHdpdGhvdXQgdGhlIHUgZmxhZ1xuICAgIC8vIGZvciBjaGFyYWN0ZXJzIGFib3ZlIFxcdTEwMDAgZG9lcyBub3Qgc2VlbSByZWxpYWJsZS5cbiAgICBpZiAoIXRoaXMuX2hhc1VGbGFnICYmIG5vZGUuY29kZVBvaW50ID49IDB4MTAwMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ0NsYXNzUmFuZ2UnKSB7XG4gICAgICAvLyBUaGUgb25seSBjbGFzcyByYW5nZXMgd2UgaGFuZGxlIG11c3QgYmUgaW5zaWRlIEEtWi5cbiAgICAgIC8vIEFmdGVyIHRoZSBgZnJvbWAgY2hhciBpcyBwcm9jZXNzZWQsIHRoZSBpc0FaQ2xhc3NSYW5nZSB0ZXN0XG4gICAgICAvLyB3aWxsIGJlIGZhbHNlLCBzbyB3ZSB1c2UgYSBTZXQgdG8ga2VlcCB0cmFjayBvZiBwYXJlbnRzIGFuZFxuICAgICAgLy8gcHJvY2VzcyB0aGUgYHRvYCBjaGFyLlxuICAgICAgaWYgKCF0aGlzLl9BWkNsYXNzUmFuZ2VzLmhhcyhwYXJlbnQpICYmICFpc0FaQ2xhc3NSYW5nZShwYXJlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX0FaQ2xhc3NSYW5nZXMuYWRkKHBhcmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGxvd2VyID0gbm9kZS5zeW1ib2wudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXIgIT09IG5vZGUuc3ltYm9sKSB7XG4gICAgICBub2RlLnZhbHVlID0gZGlzcGxheVN5bWJvbEFzVmFsdWUobG93ZXIsIG5vZGUpO1xuICAgICAgbm9kZS5zeW1ib2wgPSBsb3dlcjtcbiAgICAgIG5vZGUuY29kZVBvaW50ID0gbG93ZXIuY29kZVBvaW50QXQoMCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpc0FaQ2xhc3NSYW5nZShjbGFzc1JhbmdlKSB7XG4gIHZhciBmcm9tID0gY2xhc3NSYW5nZS5mcm9tLFxuICAgICAgdG8gPSBjbGFzc1JhbmdlLnRvO1xuICAvLyBBLVpcblxuICByZXR1cm4gZnJvbS5jb2RlUG9pbnQgPj0gVVBQRVJfQV9DUCAmJiBmcm9tLmNvZGVQb2ludCA8PSBVUFBFUl9aX0NQICYmIHRvLmNvZGVQb2ludCA+PSBVUFBFUl9BX0NQICYmIHRvLmNvZGVQb2ludCA8PSBVUFBFUl9aX0NQO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5U3ltYm9sQXNWYWx1ZShzeW1ib2wsIG5vZGUpIHtcbiAgdmFyIGNvZGVQb2ludCA9IHN5bWJvbC5jb2RlUG9pbnRBdCgwKTtcbiAgaWYgKG5vZGUua2luZCA9PT0gJ2RlY2ltYWwnKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGNvZGVQb2ludDtcbiAgfVxuICBpZiAobm9kZS5raW5kID09PSAnb2N0Jykge1xuICAgIHJldHVybiAnXFxcXDAnICsgY29kZVBvaW50LnRvU3RyaW5nKDgpO1xuICB9XG4gIGlmIChub2RlLmtpbmQgPT09ICdoZXgnKSB7XG4gICAgcmV0dXJuICdcXFxceCcgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpO1xuICB9XG4gIGlmIChub2RlLmtpbmQgPT09ICd1bmljb2RlJykge1xuICAgIGlmIChub2RlLmlzU3Vycm9nYXRlUGFpcikge1xuICAgICAgdmFyIF9nZXRTdXJyb2dhdGVQYWlyRnJvbSA9IGdldFN1cnJvZ2F0ZVBhaXJGcm9tQ29kZVBvaW50KGNvZGVQb2ludCksXG4gICAgICAgICAgbGVhZCA9IF9nZXRTdXJyb2dhdGVQYWlyRnJvbS5sZWFkLFxuICAgICAgICAgIHRyYWlsID0gX2dldFN1cnJvZ2F0ZVBhaXJGcm9tLnRyYWlsO1xuXG4gICAgICByZXR1cm4gJ1xcXFx1JyArICcwJy5yZXBlYXQoNCAtIGxlYWQubGVuZ3RoKSArIGxlYWQgKyAnXFxcXHUnICsgJzAnLnJlcGVhdCg0IC0gdHJhaWwubGVuZ3RoKSArIHRyYWlsO1xuICAgIH0gZWxzZSBpZiAobm9kZS52YWx1ZS5pbmNsdWRlcygneycpKSB7XG4gICAgICByZXR1cm4gJ1xcXFx1eycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpICsgJ30nO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29kZSA9IGNvZGVQb2ludC50b1N0cmluZygxNik7XG4gICAgICByZXR1cm4gJ1xcXFx1JyArICcwJy5yZXBlYXQoNCAtIGNvZGUubGVuZ3RoKSArIGNvZGU7XG4gICAgfVxuICB9XG4gIC8vIHNpbXBsZVxuICByZXR1cm4gc3ltYm9sO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29kZSBwb2ludCB0byBhIHN1cnJvZ2F0ZSBwYWlyLlxuICogQ29udmVyc2lvbiBhbGdvcml0aG0gaXMgdGFrZW4gZnJvbSBUaGUgVW5pY29kZSBTdGFuZGFyZCAzLjAgU2VjdGlvbiAzLjdcbiAqIChodHRwczovL3d3dy51bmljb2RlLm9yZy92ZXJzaW9ucy9Vbmljb2RlMy4wLjAvY2gwMy5wZGYpXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVBvaW50IC0gQmV0d2VlbiAweDEwMDAwIGFuZCAweDEwZmZmZlxuICogQHJldHVybnMge3tsZWFkOiBzdHJpbmcsIHRyYWlsOiBzdHJpbmd9fVxuICovXG5mdW5jdGlvbiBnZXRTdXJyb2dhdGVQYWlyRnJvbUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgdmFyIGxlYWQgPSBNYXRoLmZsb29yKChjb2RlUG9pbnQgLSAweDEwMDAwKSAvIDB4NDAwKSArIDB4ZDgwMDtcbiAgdmFyIHRyYWlsID0gKGNvZGVQb2ludCAtIDB4MTAwMDApICUgMHg0MDAgKyAweGRjMDA7XG4gIHJldHVybiB7XG4gICAgbGVhZDogbGVhZC50b1N0cmluZygxNiksXG4gICAgdHJhaWw6IHRyYWlsLnRvU3RyaW5nKDE2KVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekNBO0FBQ0E7QUEyQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-case-insensitive-lowercase-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-merge-transform.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-merge-transform.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to merge class ranges.\n *\n * [a-ec] -> [a-e]\n * [a-ec-e] -> [a-e]\n * [\\w\\da-f] -> [\\w]\n * [abcdef] -> [a-f]\n */\n\nmodule.exports = {\n  _hasIUFlags: false,\n  init: function init(ast) {\n    this._hasIUFlags = ast.flags.includes('i') && ast.flags.includes('u');\n  },\n  CharacterClass: function CharacterClass(path) {\n    var node = path.node;\n    var expressions = node.expressions;\n    var metas = []; // Extract metas\n\n    expressions.forEach(function (expression) {\n      if (isMeta(expression)) {\n        metas.push(expression.value);\n      }\n    });\n    expressions.sort(sortCharClass);\n\n    for (var i = 0; i < expressions.length; i++) {\n      var expression = expressions[i];\n\n      if (fitsInMetas(expression, metas, this._hasIUFlags) || combinesWithPrecedingClassRange(expression, expressions[i - 1]) || combinesWithFollowingClassRange(expression, expressions[i + 1])) {\n        expressions.splice(i, 1);\n        i--;\n      } else {\n        var nbMergedChars = charCombinesWithPrecedingChars(expression, i, expressions);\n        expressions.splice(i - nbMergedChars + 1, nbMergedChars);\n        i -= nbMergedChars;\n      }\n    }\n  }\n};\n/**\n * Sorts expressions in char class in the following order:\n * - meta chars, ordered alphabetically by value\n * - chars (except `control` kind) and class ranges, ordered alphabetically (`from` char is used for class ranges)\n * - if ambiguous, class range comes before char\n * - if ambiguous between two class ranges, orders alphabetically by `to` char\n * - control chars, ordered alphabetically by value\n * @param {Object} a - Left Char or ClassRange node\n * @param {Object} b - Right Char or ClassRange node\n * @returns {number}\n */\n\nfunction sortCharClass(a, b) {\n  var aValue = getSortValue(a);\n  var bValue = getSortValue(b);\n\n  if (aValue === bValue) {\n    // We want ClassRange before Char\n    // [bb-d] -> [b-db]\n    if (a.type === 'ClassRange' && b.type !== 'ClassRange') {\n      return -1;\n    }\n\n    if (b.type === 'ClassRange' && a.type !== 'ClassRange') {\n      return 1;\n    }\n\n    if (a.type === 'ClassRange' && b.type === 'ClassRange') {\n      return getSortValue(a.to) - getSortValue(b.to);\n    }\n\n    if (isMeta(a) && isMeta(b) || isControl(a) && isControl(b)) {\n      return a.value < b.value ? -1 : 1;\n    }\n  }\n\n  return aValue - bValue;\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @returns {number}\n */\n\n\nfunction getSortValue(expression) {\n  if (expression.type === 'Char') {\n    if (expression.value === '-') {\n      return Infinity;\n    }\n\n    if (expression.kind === 'control') {\n      return Infinity;\n    }\n\n    if (expression.kind === 'meta' && isNaN(expression.codePoint)) {\n      return -1;\n    }\n\n    return expression.codePoint;\n  } // ClassRange\n\n\n  return expression.from.codePoint;\n}\n/**\n * Checks if a node is a meta char from the set \\d\\w\\s\\D\\W\\S\n * @param {Object} expression - Char or ClassRange node\n * @param {?string} value\n * @returns {boolean}\n */\n\n\nfunction isMeta(expression) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return expression.type === 'Char' && expression.kind === 'meta' && (value ? expression.value === value : /^\\\\[dws]$/i.test(expression.value));\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @returns {boolean}\n */\n\n\nfunction isControl(expression) {\n  return expression.type === 'Char' && expression.kind === 'control';\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {string[]} metas - Array of meta chars, e.g. [\"\\\\w\", \"\\\\s\"]\n * @param {boolean} hasIUFlags\n * @returns {boolean}\n */\n\n\nfunction fitsInMetas(expression, metas, hasIUFlags) {\n  for (var i = 0; i < metas.length; i++) {\n    if (fitsInMeta(expression, metas[i], hasIUFlags)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {string} meta - e.g. \"\\\\w\"\n * @param {boolean} hasIUFlags\n * @returns {boolean}\n */\n\n\nfunction fitsInMeta(expression, meta, hasIUFlags) {\n  if (expression.type === 'ClassRange') {\n    return fitsInMeta(expression.from, meta, hasIUFlags) && fitsInMeta(expression.to, meta, hasIUFlags);\n  } // Special cases:\n  // \\S contains \\w and \\d\n\n\n  if (meta === '\\\\S' && (isMeta(expression, '\\\\w') || isMeta(expression, '\\\\d'))) {\n    return true;\n  } // \\D contains \\W and \\s\n\n\n  if (meta === '\\\\D' && (isMeta(expression, '\\\\W') || isMeta(expression, '\\\\s'))) {\n    return true;\n  } // \\w contains \\d\n\n\n  if (meta === '\\\\w' && isMeta(expression, '\\\\d')) {\n    return true;\n  } // \\W contains \\s\n\n\n  if (meta === '\\\\W' && isMeta(expression, '\\\\s')) {\n    return true;\n  }\n\n  if (expression.type !== 'Char' || isNaN(expression.codePoint)) {\n    return false;\n  }\n\n  if (meta === '\\\\s') {\n    return fitsInMetaS(expression);\n  }\n\n  if (meta === '\\\\S') {\n    return !fitsInMetaS(expression);\n  }\n\n  if (meta === '\\\\d') {\n    return fitsInMetaD(expression);\n  }\n\n  if (meta === '\\\\D') {\n    return !fitsInMetaD(expression);\n  }\n\n  if (meta === '\\\\w') {\n    return fitsInMetaW(expression, hasIUFlags);\n  }\n\n  if (meta === '\\\\W') {\n    return !fitsInMetaW(expression, hasIUFlags);\n  }\n\n  return false;\n}\n/**\n * @param {Object} expression - Char node with codePoint\n * @returns {boolean}\n */\n\n\nfunction fitsInMetaS(expression) {\n  return expression.codePoint === 0x0009 || // \\t\n  expression.codePoint === 0x000a || // \\n\n  expression.codePoint === 0x000b || // \\v\n  expression.codePoint === 0x000c || // \\f\n  expression.codePoint === 0x000d || // \\r\n  expression.codePoint === 0x0020 || // space\n  expression.codePoint === 0x00a0 || // nbsp\n  expression.codePoint === 0x1680 || // part of Zs\n  expression.codePoint >= 0x2000 && expression.codePoint <= 0x200a || // part of Zs\n  expression.codePoint === 0x2028 || // line separator\n  expression.codePoint === 0x2029 || // paragraph separator\n  expression.codePoint === 0x202f || // part of Zs\n  expression.codePoint === 0x205f || // part of Zs\n  expression.codePoint === 0x3000 || // part of Zs\n  expression.codePoint === 0xfeff; // zwnbsp\n}\n/**\n * @param {Object} expression - Char node with codePoint\n * @returns {boolean}\n */\n\n\nfunction fitsInMetaD(expression) {\n  return expression.codePoint >= 0x30 && expression.codePoint <= 0x39; // 0-9\n}\n/**\n * @param {Object} expression - Char node with codePoint\n * @param {boolean} hasIUFlags\n * @returns {boolean}\n */\n\n\nfunction fitsInMetaW(expression, hasIUFlags) {\n  return fitsInMetaD(expression) || expression.codePoint >= 0x41 && expression.codePoint <= 0x5a || // A-Z\n  expression.codePoint >= 0x61 && expression.codePoint <= 0x7a || // a-z\n  expression.value === '_' || hasIUFlags && (expression.codePoint === 0x017f || expression.codePoint === 0x212a);\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {Object} classRange - Char or ClassRange node\n * @returns {boolean}\n */\n\n\nfunction combinesWithPrecedingClassRange(expression, classRange) {\n  if (classRange && classRange.type === 'ClassRange') {\n    if (fitsInClassRange(expression, classRange)) {\n      // [a-gc] -> [a-g]\n      // [a-gc-e] -> [a-g]\n      return true;\n    } else if ( // We only want \\w chars or char codes to keep readability\n    isMetaWCharOrCode(expression) && classRange.to.codePoint === expression.codePoint - 1) {\n      // [a-de] -> [a-e]\n      classRange.to = expression;\n      return true;\n    } else if (expression.type === 'ClassRange' && expression.from.codePoint <= classRange.to.codePoint + 1 && expression.to.codePoint >= classRange.from.codePoint - 1) {\n      // [a-db-f] -> [a-f]\n      // [b-fa-d] -> [a-f]\n      // [a-cd-f] -> [a-f]\n      if (expression.from.codePoint < classRange.from.codePoint) {\n        classRange.from = expression.from;\n      }\n\n      if (expression.to.codePoint > classRange.to.codePoint) {\n        classRange.to = expression.to;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {Object} classRange - Char or ClassRange node\n * @returns {boolean}\n */\n\n\nfunction combinesWithFollowingClassRange(expression, classRange) {\n  if (classRange && classRange.type === 'ClassRange') {\n    // Considering the elements were ordered alphabetically,\n    // there is only one case to handle\n    // [ab-e] -> [a-e]\n    if ( // We only want \\w chars or char codes to keep readability\n    isMetaWCharOrCode(expression) && classRange.from.codePoint === expression.codePoint + 1) {\n      classRange.from = expression;\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {Object} classRange - ClassRange node\n * @returns {boolean}\n */\n\n\nfunction fitsInClassRange(expression, classRange) {\n  if (expression.type === 'Char' && isNaN(expression.codePoint)) {\n    return false;\n  }\n\n  if (expression.type === 'ClassRange') {\n    return fitsInClassRange(expression.from, classRange) && fitsInClassRange(expression.to, classRange);\n  }\n\n  return expression.codePoint >= classRange.from.codePoint && expression.codePoint <= classRange.to.codePoint;\n}\n/**\n * @param {Object} expression - Char or ClassRange node\n * @param {Number} index\n * @param {Object[]} expressions - expressions in CharClass\n * @returns {number} - Number of characters combined with expression\n */\n\n\nfunction charCombinesWithPrecedingChars(expression, index, expressions) {\n  // We only want \\w chars or char codes to keep readability\n  if (!isMetaWCharOrCode(expression)) {\n    return 0;\n  }\n\n  var nbMergedChars = 0;\n\n  while (index > 0) {\n    var currentExpression = expressions[index];\n    var precedingExpresion = expressions[index - 1];\n\n    if (isMetaWCharOrCode(precedingExpresion) && precedingExpresion.codePoint === currentExpression.codePoint - 1) {\n      nbMergedChars++;\n      index--;\n    } else {\n      break;\n    }\n  }\n\n  if (nbMergedChars > 1) {\n    expressions[index] = {\n      type: 'ClassRange',\n      from: expressions[index],\n      to: expression\n    };\n    return nbMergedChars;\n  }\n\n  return 0;\n}\n\nfunction isMetaWCharOrCode(expression) {\n  return expression && expression.type === 'Char' && !isNaN(expression.codePoint) && (fitsInMetaW(expression, false) || expression.kind === 'unicode' || expression.kind === 'hex' || expression.kind === 'oct' || expression.kind === 'decimal');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-merge-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-to-chars-transform.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-to-chars-transform.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to simplify character classes\n * spanning only one or two chars.\n *\n * [a-a] -> [a]\n * [a-b] -> [ab]\n */\n\nmodule.exports = {\n  ClassRange: function ClassRange(path) {\n    var node = path.node;\n\n    if (node.from.codePoint === node.to.codePoint) {\n      path.replace(node.from);\n    } else if (node.from.codePoint === node.to.codePoint - 1) {\n      path.getParent().insertChildAt(node.to, path.index + 1);\n      path.replace(node.from);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWNsYXNzLWNsYXNzcmFuZ2VzLXRvLWNoYXJzLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2NoYXItY2xhc3MtY2xhc3NyYW5nZXMtdG8tY2hhcnMtdHJhbnNmb3JtLmpzP2ZiNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byBzaW1wbGlmeSBjaGFyYWN0ZXIgY2xhc3Nlc1xuICogc3Bhbm5pbmcgb25seSBvbmUgb3IgdHdvIGNoYXJzLlxuICpcbiAqIFthLWFdIC0+IFthXVxuICogW2EtYl0gLT4gW2FiXVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDbGFzc1JhbmdlOiBmdW5jdGlvbiBDbGFzc1JhbmdlKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKG5vZGUuZnJvbS5jb2RlUG9pbnQgPT09IG5vZGUudG8uY29kZVBvaW50KSB7XG5cbiAgICAgIHBhdGgucmVwbGFjZShub2RlLmZyb20pO1xuICAgIH0gZWxzZSBpZiAobm9kZS5mcm9tLmNvZGVQb2ludCA9PT0gbm9kZS50by5jb2RlUG9pbnQgLSAxKSB7XG5cbiAgICAgIHBhdGguZ2V0UGFyZW50KCkuaW5zZXJ0Q2hpbGRBdChub2RlLnRvLCBwYXRoLmluZGV4ICsgMSk7XG4gICAgICBwYXRoLnJlcGxhY2Uobm9kZS5mcm9tKTtcbiAgICB9XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-to-chars-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-class-remove-duplicates-transform.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-class-remove-duplicates-transform.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to remove duplicates from character classes.\n */\n\nmodule.exports = {\n  CharacterClass: function CharacterClass(path) {\n    var node = path.node;\n    var sources = {};\n\n    for (var i = 0; i < node.expressions.length; i++) {\n      var childPath = path.getChild(i);\n      var source = childPath.jsonEncode();\n\n      if (sources.hasOwnProperty(source)) {\n        childPath.remove(); // Since we remove the current node.\n        // TODO: make it simpler for users with a method.\n\n        i--;\n      }\n\n      sources[source] = true;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWNsYXNzLXJlbW92ZS1kdXBsaWNhdGVzLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2NoYXItY2xhc3MtcmVtb3ZlLWR1cGxpY2F0ZXMtdHJhbnNmb3JtLmpzP2MwNzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byByZW1vdmUgZHVwbGljYXRlcyBmcm9tIGNoYXJhY3RlciBjbGFzc2VzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDaGFyYWN0ZXJDbGFzczogZnVuY3Rpb24gQ2hhcmFjdGVyQ2xhc3MocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlO1xuXG4gICAgdmFyIHNvdXJjZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5leHByZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguZ2V0Q2hpbGQoaSk7XG4gICAgICB2YXIgc291cmNlID0gY2hpbGRQYXRoLmpzb25FbmNvZGUoKTtcblxuICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoc291cmNlKSkge1xuICAgICAgICBjaGlsZFBhdGgucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gU2luY2Ugd2UgcmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICAgIC8vIFRPRE86IG1ha2UgaXQgc2ltcGxlciBmb3IgdXNlcnMgd2l0aCBhIG1ldGhvZC5cbiAgICAgICAgaS0tO1xuICAgICAgfVxuXG4gICAgICBzb3VyY2VzW3NvdXJjZV0gPSB0cnVlO1xuICAgIH1cbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcEJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-class-remove-duplicates-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-meta-transform.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-meta-transform.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to replace standard character classes with\n * their meta symbols equivalents.\n */\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nmodule.exports = {\n  _hasIFlag: false,\n  _hasUFlag: false,\n  init: function init(ast) {\n    this._hasIFlag = ast.flags.includes('i');\n    this._hasUFlag = ast.flags.includes('u');\n  },\n  CharacterClass: function CharacterClass(path) {\n    // [0-9] -> \\d\n    rewriteNumberRanges(path); // [a-zA-Z_0-9] -> \\w\n\n    rewriteWordRanges(path, this._hasIFlag, this._hasUFlag); // [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff] -> \\s\n\n    rewriteWhitespaceRanges(path);\n  }\n};\n/**\n * Rewrites number ranges: [0-9] -> \\d\n */\n\nfunction rewriteNumberRanges(path) {\n  var node = path.node;\n  node.expressions.forEach(function (expression, i) {\n    if (isFullNumberRange(expression)) {\n      path.getChild(i).replace({\n        type: 'Char',\n        value: '\\\\d',\n        kind: 'meta'\n      });\n    }\n  });\n}\n/**\n * Rewrites word ranges: [a-zA-Z_0-9] -> \\w\n * Thus, the ranges may go in any order, and other symbols/ranges\n * are kept untouched, e.g. [a-z_\\dA-Z$] -> [\\w$]\n */\n\n\nfunction rewriteWordRanges(path, hasIFlag, hasUFlag) {\n  var node = path.node;\n  var numberPath = null;\n  var lowerCasePath = null;\n  var upperCasePath = null;\n  var underscorePath = null;\n  var u017fPath = null;\n  var u212aPath = null;\n  node.expressions.forEach(function (expression, i) {\n    // \\d\n    if (isMetaChar(expression, '\\\\d')) {\n      numberPath = path.getChild(i);\n    } // a-z\n    else if (isLowerCaseRange(expression)) {\n        lowerCasePath = path.getChild(i);\n      } // A-Z\n      else if (isUpperCaseRange(expression)) {\n          upperCasePath = path.getChild(i);\n        } // _\n        else if (isUnderscore(expression)) {\n            underscorePath = path.getChild(i);\n          } else if (hasIFlag && hasUFlag && isCodePoint(expression, 0x017f)) {\n            u017fPath = path.getChild(i);\n          } else if (hasIFlag && hasUFlag && isCodePoint(expression, 0x212a)) {\n            u212aPath = path.getChild(i);\n          }\n  }); // If we found the whole pattern, replace it.\n\n  if (numberPath && (lowerCasePath && upperCasePath || hasIFlag && (lowerCasePath || upperCasePath)) && underscorePath && (!hasUFlag || !hasIFlag || u017fPath && u212aPath)) {\n    // Put \\w in place of \\d.\n    numberPath.replace({\n      type: 'Char',\n      value: '\\\\w',\n      kind: 'meta'\n    }); // Other paths are removed.\n\n    if (lowerCasePath) {\n      lowerCasePath.remove();\n    }\n\n    if (upperCasePath) {\n      upperCasePath.remove();\n    }\n\n    underscorePath.remove();\n\n    if (u017fPath) {\n      u017fPath.remove();\n    }\n\n    if (u212aPath) {\n      u212aPath.remove();\n    }\n  }\n}\n/**\n * Rewrites whitespace ranges: [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff] -> \\s.\n */\n\n\nvar whitespaceRangeTests = [function (node) {\n  return isChar(node, ' ');\n}].concat(_toConsumableArray(['\\\\f', '\\\\n', '\\\\r', '\\\\t', '\\\\v'].map(function (char) {\n  return function (node) {\n    return isMetaChar(node, char);\n  };\n})), _toConsumableArray([0x00a0, 0x1680, 0x2028, 0x2029, 0x202f, 0x205f, 0x3000, 0xfeff].map(function (codePoint) {\n  return function (node) {\n    return isCodePoint(node, codePoint);\n  };\n})), [function (node) {\n  return node.type === 'ClassRange' && isCodePoint(node.from, 0x2000) && isCodePoint(node.to, 0x200a);\n}]);\n\nfunction rewriteWhitespaceRanges(path) {\n  var node = path.node;\n\n  if (node.expressions.length < whitespaceRangeTests.length || !whitespaceRangeTests.every(function (test) {\n    return node.expressions.some(function (expression) {\n      return test(expression);\n    });\n  })) {\n    return;\n  } // If we found the whole pattern, replace it.\n  // Put \\s in place of \\n.\n\n\n  var nNode = node.expressions.find(function (expression) {\n    return isMetaChar(expression, '\\\\n');\n  });\n  nNode.value = '\\\\s';\n  nNode.symbol = undefined;\n  nNode.codePoint = NaN; // Other paths are removed.\n\n  node.expressions.map(function (expression, i) {\n    return whitespaceRangeTests.some(function (test) {\n      return test(expression);\n    }) ? path.getChild(i) : undefined;\n  }).filter(Boolean).forEach(function (path) {\n    return path.remove();\n  });\n}\n\nfunction isFullNumberRange(node) {\n  return node.type === 'ClassRange' && node.from.value === '0' && node.to.value === '9';\n}\n\nfunction isChar(node, value) {\n  var kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'simple';\n  return node.type === 'Char' && node.value === value && node.kind === kind;\n}\n\nfunction isMetaChar(node, value) {\n  return isChar(node, value, 'meta');\n}\n\nfunction isLowerCaseRange(node) {\n  return node.type === 'ClassRange' && node.from.value === 'a' && node.to.value === 'z';\n}\n\nfunction isUpperCaseRange(node) {\n  return node.type === 'ClassRange' && node.from.value === 'A' && node.to.value === 'Z';\n}\n\nfunction isUnderscore(node) {\n  return node.type === 'Char' && node.value === '_' && node.kind === 'simple';\n}\n\nfunction isCodePoint(node, codePoint) {\n  return node.type === 'Char' && node.kind === 'unicode' && node.codePoint === codePoint;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-meta-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-single-char-transform.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-single-char-transform.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to replace single char character classes with\n * just that character.\n *\n * [\\d] -> \\d, [^\\w] -> \\W\n */\n\nmodule.exports = {\n  CharacterClass: function CharacterClass(path) {\n    var node = path.node;\n\n    if (node.expressions.length !== 1 || !hasAppropriateSiblings(path) || !isAppropriateChar(node.expressions[0])) {\n      return;\n    }\n\n    var _node$expressions$ = node.expressions[0],\n        value = _node$expressions$.value,\n        kind = _node$expressions$.kind,\n        escaped = _node$expressions$.escaped;\n\n    if (node.negative) {\n      // For negative can extract only meta chars like [^\\w] -> \\W\n      // cannot do for [^a] -> a (wrong).\n      if (!isMeta(value)) {\n        return;\n      }\n\n      value = getInverseMeta(value);\n    }\n\n    path.replace({\n      type: 'Char',\n      value: value,\n      kind: kind,\n      escaped: escaped || shouldEscape(value)\n    });\n  }\n};\n\nfunction isAppropriateChar(node) {\n  return node.type === 'Char' && // We don't extract [\\b] (backspace) since \\b has different\n  // semantics (word boundary).\n  node.value !== '\\\\b';\n}\n\nfunction isMeta(value) {\n  return /^\\\\[dwsDWS]$/.test(value);\n}\n\nfunction getInverseMeta(value) {\n  return /[dws]/.test(value) ? value.toUpperCase() : value.toLowerCase();\n}\n\nfunction hasAppropriateSiblings(path) {\n  var parent = path.parent,\n      index = path.index;\n\n  if (parent.type !== 'Alternative') {\n    return true;\n  }\n\n  var previousNode = parent.expressions[index - 1];\n\n  if (previousNode == null) {\n    return true;\n  } // Don't optimized \\1[0] to \\10\n\n\n  if (previousNode.type === 'Backreference' && previousNode.kind === 'number') {\n    return false;\n  } // Don't optimized \\2[0] to \\20\n\n\n  if (previousNode.type === 'Char' && previousNode.kind === 'decimal') {\n    return false;\n  }\n\n  return true;\n} // Note: \\{ and \\} are always preserved to avoid `a[{]2[}]` turning\n// into `a{2}`.\n\n\nfunction shouldEscape(value) {\n  return /[*[()+?$./{}|]/.test(value);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWNsYXNzLXRvLXNpbmdsZS1jaGFyLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2NoYXItY2xhc3MtdG8tc2luZ2xlLWNoYXItdHJhbnNmb3JtLmpzPzdlNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byByZXBsYWNlIHNpbmdsZSBjaGFyIGNoYXJhY3RlciBjbGFzc2VzIHdpdGhcbiAqIGp1c3QgdGhhdCBjaGFyYWN0ZXIuXG4gKlxuICogW1xcZF0gLT4gXFxkLCBbXlxcd10gLT4gXFxXXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENoYXJhY3RlckNsYXNzOiBmdW5jdGlvbiBDaGFyYWN0ZXJDbGFzcyhwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cblxuICAgIGlmIChub2RlLmV4cHJlc3Npb25zLmxlbmd0aCAhPT0gMSB8fCAhaGFzQXBwcm9wcmlhdGVTaWJsaW5ncyhwYXRoKSB8fCAhaXNBcHByb3ByaWF0ZUNoYXIobm9kZS5leHByZXNzaW9uc1swXSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX25vZGUkZXhwcmVzc2lvbnMkID0gbm9kZS5leHByZXNzaW9uc1swXSxcbiAgICAgICAgdmFsdWUgPSBfbm9kZSRleHByZXNzaW9ucyQudmFsdWUsXG4gICAgICAgIGtpbmQgPSBfbm9kZSRleHByZXNzaW9ucyQua2luZCxcbiAgICAgICAgZXNjYXBlZCA9IF9ub2RlJGV4cHJlc3Npb25zJC5lc2NhcGVkO1xuXG5cbiAgICBpZiAobm9kZS5uZWdhdGl2ZSkge1xuICAgICAgLy8gRm9yIG5lZ2F0aXZlIGNhbiBleHRyYWN0IG9ubHkgbWV0YSBjaGFycyBsaWtlIFteXFx3XSAtPiBcXFdcbiAgICAgIC8vIGNhbm5vdCBkbyBmb3IgW15hXSAtPiBhICh3cm9uZykuXG4gICAgICBpZiAoIWlzTWV0YSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGdldEludmVyc2VNZXRhKHZhbHVlKTtcbiAgICB9XG5cbiAgICBwYXRoLnJlcGxhY2Uoe1xuICAgICAgdHlwZTogJ0NoYXInLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAga2luZDoga2luZCxcbiAgICAgIGVzY2FwZWQ6IGVzY2FwZWQgfHwgc2hvdWxkRXNjYXBlKHZhbHVlKVxuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc0FwcHJvcHJpYXRlQ2hhcihub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICdDaGFyJyAmJlxuICAvLyBXZSBkb24ndCBleHRyYWN0IFtcXGJdIChiYWNrc3BhY2UpIHNpbmNlIFxcYiBoYXMgZGlmZmVyZW50XG4gIC8vIHNlbWFudGljcyAod29yZCBib3VuZGFyeSkuXG4gIG5vZGUudmFsdWUgIT09ICdcXFxcYic7XG59XG5cbmZ1bmN0aW9uIGlzTWV0YSh2YWx1ZSkge1xuICByZXR1cm4gKC9eXFxcXFtkd3NEV1NdJC8udGVzdCh2YWx1ZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW52ZXJzZU1ldGEodmFsdWUpIHtcbiAgcmV0dXJuICgvW2R3c10vLnRlc3QodmFsdWUpID8gdmFsdWUudG9VcHBlckNhc2UoKSA6IHZhbHVlLnRvTG93ZXJDYXNlKClcbiAgKTtcbn1cblxuZnVuY3Rpb24gaGFzQXBwcm9wcmlhdGVTaWJsaW5ncyhwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSBwYXRoLnBhcmVudCxcbiAgICAgIGluZGV4ID0gcGF0aC5pbmRleDtcblxuXG4gIGlmIChwYXJlbnQudHlwZSAhPT0gJ0FsdGVybmF0aXZlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzTm9kZSA9IHBhcmVudC5leHByZXNzaW9uc1tpbmRleCAtIDFdO1xuICBpZiAocHJldmlvdXNOb2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIERvbid0IG9wdGltaXplZCBcXDFbMF0gdG8gXFwxMFxuICBpZiAocHJldmlvdXNOb2RlLnR5cGUgPT09ICdCYWNrcmVmZXJlbmNlJyAmJiBwcmV2aW91c05vZGUua2luZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEb24ndCBvcHRpbWl6ZWQgXFwyWzBdIHRvIFxcMjBcbiAgaWYgKHByZXZpb3VzTm9kZS50eXBlID09PSAnQ2hhcicgJiYgcHJldmlvdXNOb2RlLmtpbmQgPT09ICdkZWNpbWFsJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBOb3RlOiBcXHsgYW5kIFxcfSBhcmUgYWx3YXlzIHByZXNlcnZlZCB0byBhdm9pZCBgYVt7XTJbfV1gIHR1cm5pbmdcbi8vIGludG8gYGF7Mn1gLlxuZnVuY3Rpb24gc2hvdWxkRXNjYXBlKHZhbHVlKSB7XG4gIHJldHVybiAoL1sqWygpKz8kLi97fXxdLy50ZXN0KHZhbHVlKVxuICApO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBL0JBO0FBQ0E7QUFpQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-single-char-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-code-to-simple-char-transform.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-code-to-simple-char-transform.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar UPPER_A_CP = 'A'.codePointAt(0);\nvar UPPER_Z_CP = 'Z'.codePointAt(0);\nvar LOWER_A_CP = 'a'.codePointAt(0);\nvar LOWER_Z_CP = 'z'.codePointAt(0);\nvar DIGIT_0_CP = '0'.codePointAt(0);\nvar DIGIT_9_CP = '9'.codePointAt(0);\n/**\n * A regexp-tree plugin to transform coded chars into simple chars.\n *\n * \\u0061 -> a\n */\n\nmodule.exports = {\n  Char: function Char(path) {\n    var node = path.node,\n        parent = path.parent;\n\n    if (isNaN(node.codePoint) || node.kind === 'simple') {\n      return;\n    }\n\n    if (parent.type === 'ClassRange') {\n      if (!isSimpleRange(parent)) {\n        return;\n      }\n    }\n\n    if (!isPrintableASCIIChar(node.codePoint)) {\n      return;\n    }\n\n    var symbol = String.fromCodePoint(node.codePoint);\n    var newChar = {\n      type: 'Char',\n      kind: 'simple',\n      value: symbol,\n      symbol: symbol,\n      codePoint: node.codePoint\n    };\n\n    if (needsEscape(symbol, parent.type)) {\n      newChar.escaped = true;\n    }\n\n    path.replace(newChar);\n  }\n};\n/**\n * Checks if a range is included either in 0-9, a-z or A-Z\n * @param classRange\n * @returns {boolean}\n */\n\nfunction isSimpleRange(classRange) {\n  var from = classRange.from,\n      to = classRange.to;\n  return from.codePoint >= DIGIT_0_CP && from.codePoint <= DIGIT_9_CP && to.codePoint >= DIGIT_0_CP && to.codePoint <= DIGIT_9_CP || from.codePoint >= UPPER_A_CP && from.codePoint <= UPPER_Z_CP && to.codePoint >= UPPER_A_CP && to.codePoint <= UPPER_Z_CP || from.codePoint >= LOWER_A_CP && from.codePoint <= LOWER_Z_CP && to.codePoint >= LOWER_A_CP && to.codePoint <= LOWER_Z_CP;\n}\n/**\n * Checks if a code point in the range of printable ASCII chars\n * (DEL char excluded)\n * @param codePoint\n * @returns {boolean}\n */\n\n\nfunction isPrintableASCIIChar(codePoint) {\n  return codePoint >= 0x20 && codePoint <= 0x7e;\n}\n\nfunction needsEscape(symbol, parentType) {\n  if (parentType === 'ClassRange' || parentType === 'CharacterClass') {\n    return /[\\]\\\\^-]/.test(symbol);\n  }\n\n  return /[*[()+?^$./\\\\|{}]/.test(symbol);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWNvZGUtdG8tc2ltcGxlLWNoYXItdHJhbnNmb3JtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3Qvb3B0aW1pemVyL3RyYW5zZm9ybXMvY2hhci1jb2RlLXRvLXNpbXBsZS1jaGFyLXRyYW5zZm9ybS5qcz9lZDI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVUFBFUl9BX0NQID0gJ0EnLmNvZGVQb2ludEF0KDApO1xudmFyIFVQUEVSX1pfQ1AgPSAnWicuY29kZVBvaW50QXQoMCk7XG52YXIgTE9XRVJfQV9DUCA9ICdhJy5jb2RlUG9pbnRBdCgwKTtcbnZhciBMT1dFUl9aX0NQID0gJ3onLmNvZGVQb2ludEF0KDApO1xudmFyIERJR0lUXzBfQ1AgPSAnMCcuY29kZVBvaW50QXQoMCk7XG52YXIgRElHSVRfOV9DUCA9ICc5Jy5jb2RlUG9pbnRBdCgwKTtcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byB0cmFuc2Zvcm0gY29kZWQgY2hhcnMgaW50byBzaW1wbGUgY2hhcnMuXG4gKlxuICogXFx1MDA2MSAtPiBhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDaGFyOiBmdW5jdGlvbiBDaGFyKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZSxcbiAgICAgICAgcGFyZW50ID0gcGF0aC5wYXJlbnQ7XG5cbiAgICBpZiAoaXNOYU4obm9kZS5jb2RlUG9pbnQpIHx8IG5vZGUua2luZCA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50LnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgICAgaWYgKCFpc1NpbXBsZVJhbmdlKHBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNQcmludGFibGVBU0NJSUNoYXIobm9kZS5jb2RlUG9pbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN5bWJvbCA9IFN0cmluZy5mcm9tQ29kZVBvaW50KG5vZGUuY29kZVBvaW50KTtcbiAgICB2YXIgbmV3Q2hhciA9IHtcbiAgICAgIHR5cGU6ICdDaGFyJyxcbiAgICAgIGtpbmQ6ICdzaW1wbGUnLFxuICAgICAgdmFsdWU6IHN5bWJvbCxcbiAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgY29kZVBvaW50OiBub2RlLmNvZGVQb2ludFxuICAgIH07XG4gICAgaWYgKG5lZWRzRXNjYXBlKHN5bWJvbCwgcGFyZW50LnR5cGUpKSB7XG4gICAgICBuZXdDaGFyLmVzY2FwZWQgPSB0cnVlO1xuICAgIH1cbiAgICBwYXRoLnJlcGxhY2UobmV3Q2hhcik7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcmFuZ2UgaXMgaW5jbHVkZWQgZWl0aGVyIGluIDAtOSwgYS16IG9yIEEtWlxuICogQHBhcmFtIGNsYXNzUmFuZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NpbXBsZVJhbmdlKGNsYXNzUmFuZ2UpIHtcbiAgdmFyIGZyb20gPSBjbGFzc1JhbmdlLmZyb20sXG4gICAgICB0byA9IGNsYXNzUmFuZ2UudG87XG5cbiAgcmV0dXJuIGZyb20uY29kZVBvaW50ID49IERJR0lUXzBfQ1AgJiYgZnJvbS5jb2RlUG9pbnQgPD0gRElHSVRfOV9DUCAmJiB0by5jb2RlUG9pbnQgPj0gRElHSVRfMF9DUCAmJiB0by5jb2RlUG9pbnQgPD0gRElHSVRfOV9DUCB8fCBmcm9tLmNvZGVQb2ludCA+PSBVUFBFUl9BX0NQICYmIGZyb20uY29kZVBvaW50IDw9IFVQUEVSX1pfQ1AgJiYgdG8uY29kZVBvaW50ID49IFVQUEVSX0FfQ1AgJiYgdG8uY29kZVBvaW50IDw9IFVQUEVSX1pfQ1AgfHwgZnJvbS5jb2RlUG9pbnQgPj0gTE9XRVJfQV9DUCAmJiBmcm9tLmNvZGVQb2ludCA8PSBMT1dFUl9aX0NQICYmIHRvLmNvZGVQb2ludCA+PSBMT1dFUl9BX0NQICYmIHRvLmNvZGVQb2ludCA8PSBMT1dFUl9aX0NQO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNvZGUgcG9pbnQgaW4gdGhlIHJhbmdlIG9mIHByaW50YWJsZSBBU0NJSSBjaGFyc1xuICogKERFTCBjaGFyIGV4Y2x1ZGVkKVxuICogQHBhcmFtIGNvZGVQb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUHJpbnRhYmxlQVNDSUlDaGFyKGNvZGVQb2ludCkge1xuICByZXR1cm4gY29kZVBvaW50ID49IDB4MjAgJiYgY29kZVBvaW50IDw9IDB4N2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzRXNjYXBlKHN5bWJvbCwgcGFyZW50VHlwZSkge1xuICBpZiAocGFyZW50VHlwZSA9PT0gJ0NsYXNzUmFuZ2UnIHx8IHBhcmVudFR5cGUgPT09ICdDaGFyYWN0ZXJDbGFzcycpIHtcbiAgICByZXR1cm4gKC9bXFxdXFxcXF4tXS8udGVzdChzeW1ib2wpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoL1sqWygpKz9eJC4vXFxcXHx7fV0vLnRlc3Qoc3ltYm9sKVxuICApO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBL0JBO0FBa0NBOzs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-code-to-simple-char-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-escape-unescape-transform.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-escape-unescape-transform.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to remove unnecessary escape.\n *\n * \\e -> e\n *\n * [\\(] -> [(]\n */\n\nmodule.exports = {\n  _hasXFlag: false,\n  init: function init(ast) {\n    this._hasXFlag = ast.flags.includes('x');\n  },\n  Char: function Char(path) {\n    var node = path.node;\n\n    if (!node.escaped) {\n      return;\n    }\n\n    if (shouldUnescape(path, this._hasXFlag)) {\n      delete node.escaped;\n    }\n  }\n};\n\nfunction shouldUnescape(path, hasXFlag) {\n  var value = path.node.value,\n      index = path.index,\n      parent = path.parent; // In char class (, etc are allowed.\n\n  if (parent.type !== 'CharacterClass' && parent.type !== 'ClassRange') {\n    return !preservesEscape(value, index, parent, hasXFlag);\n  }\n\n  return !preservesInCharClass(value, index, parent);\n}\n/**\n * \\], \\\\, \\^, \\-\n */\n\n\nfunction preservesInCharClass(value, index, parent) {\n  if (value === '^') {\n    // Avoid [\\^a] turning into [^a]\n    return index === 0 && !parent.negative;\n  }\n\n  if (value === '-') {\n    // Avoid [a\\-z] turning into [a-z]\n    return true;\n  }\n\n  return /[\\]\\\\]/.test(value);\n}\n\nfunction preservesEscape(value, index, parent, hasXFlag) {\n  if (value === '{') {\n    return preservesOpeningCurlyBraceEscape(index, parent);\n  }\n\n  if (value === '}') {\n    return preservesClosingCurlyBraceEscape(index, parent);\n  }\n\n  if (hasXFlag && /[ #]/.test(value)) {\n    return true;\n  }\n\n  return /[*[()+?^$./\\\\|]/.test(value);\n}\n\nfunction consumeNumbers(startIndex, parent, rtl) {\n  var i = startIndex;\n  var siblingNode = (rtl ? i >= 0 : i < parent.expressions.length) && parent.expressions[i];\n\n  while (siblingNode && siblingNode.type === 'Char' && siblingNode.kind === 'simple' && !siblingNode.escaped && /\\d/.test(siblingNode.value)) {\n    rtl ? i-- : i++;\n    siblingNode = (rtl ? i >= 0 : i < parent.expressions.length) && parent.expressions[i];\n  }\n\n  return Math.abs(startIndex - i);\n}\n\nfunction isSimpleChar(node, value) {\n  return node && node.type === 'Char' && node.kind === 'simple' && !node.escaped && node.value === value;\n}\n\nfunction preservesOpeningCurlyBraceEscape(index, parent) {\n  // (?:\\{) -> (?:{)\n  if (index == null) {\n    return false;\n  }\n\n  var nbFollowingNumbers = consumeNumbers(index + 1, parent);\n  var i = index + nbFollowingNumbers + 1;\n  var nextSiblingNode = i < parent.expressions.length && parent.expressions[i];\n\n  if (nbFollowingNumbers) {\n    // Avoid \\{3} turning into {3}\n    if (isSimpleChar(nextSiblingNode, '}')) {\n      return true;\n    }\n\n    if (isSimpleChar(nextSiblingNode, ',')) {\n      nbFollowingNumbers = consumeNumbers(i + 1, parent);\n      i = i + nbFollowingNumbers + 1;\n      nextSiblingNode = i < parent.expressions.length && parent.expressions[i]; // Avoid \\{3,} turning into {3,}\n\n      return isSimpleChar(nextSiblingNode, '}');\n    }\n  }\n\n  return false;\n}\n\nfunction preservesClosingCurlyBraceEscape(index, parent) {\n  // (?:\\{) -> (?:{)\n  if (index == null) {\n    return false;\n  }\n\n  var nbPrecedingNumbers = consumeNumbers(index - 1, parent, true);\n  var i = index - nbPrecedingNumbers - 1;\n  var previousSiblingNode = i >= 0 && parent.expressions[i]; // Avoid {3\\} turning into {3}\n\n  if (nbPrecedingNumbers && isSimpleChar(previousSiblingNode, '{')) {\n    return true;\n  }\n\n  if (isSimpleChar(previousSiblingNode, ',')) {\n    nbPrecedingNumbers = consumeNumbers(i - 1, parent, true);\n    i = i - nbPrecedingNumbers - 1;\n    previousSiblingNode = i < parent.expressions.length && parent.expressions[i]; // Avoid {3,\\} turning into {3,}\n\n    return nbPrecedingNumbers && isSimpleChar(previousSiblingNode, '{');\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWVzY2FwZS11bmVzY2FwZS10cmFuc2Zvcm0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLWVzY2FwZS11bmVzY2FwZS10cmFuc2Zvcm0uanM/MTVmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIHJlbW92ZSB1bm5lY2Vzc2FyeSBlc2NhcGUuXG4gKlxuICogXFxlIC0+IGVcbiAqXG4gKiBbXFwoXSAtPiBbKF1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgX2hhc1hGbGFnOiBmYWxzZSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChhc3QpIHtcbiAgICB0aGlzLl9oYXNYRmxhZyA9IGFzdC5mbGFncy5pbmNsdWRlcygneCcpO1xuICB9LFxuICBDaGFyOiBmdW5jdGlvbiBDaGFyKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKCFub2RlLmVzY2FwZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVW5lc2NhcGUocGF0aCwgdGhpcy5faGFzWEZsYWcpKSB7XG4gICAgICBkZWxldGUgbm9kZS5lc2NhcGVkO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2hvdWxkVW5lc2NhcGUocGF0aCwgaGFzWEZsYWcpIHtcbiAgdmFyIHZhbHVlID0gcGF0aC5ub2RlLnZhbHVlLFxuICAgICAgaW5kZXggPSBwYXRoLmluZGV4LFxuICAgICAgcGFyZW50ID0gcGF0aC5wYXJlbnQ7XG5cbiAgLy8gSW4gY2hhciBjbGFzcyAoLCBldGMgYXJlIGFsbG93ZWQuXG5cbiAgaWYgKHBhcmVudC50eXBlICE9PSAnQ2hhcmFjdGVyQ2xhc3MnICYmIHBhcmVudC50eXBlICE9PSAnQ2xhc3NSYW5nZScpIHtcbiAgICByZXR1cm4gIXByZXNlcnZlc0VzY2FwZSh2YWx1ZSwgaW5kZXgsIHBhcmVudCwgaGFzWEZsYWcpO1xuICB9XG5cbiAgcmV0dXJuICFwcmVzZXJ2ZXNJbkNoYXJDbGFzcyh2YWx1ZSwgaW5kZXgsIHBhcmVudCk7XG59XG5cbi8qKlxuICogXFxdLCBcXFxcLCBcXF4sIFxcLVxuICovXG5mdW5jdGlvbiBwcmVzZXJ2ZXNJbkNoYXJDbGFzcyh2YWx1ZSwgaW5kZXgsIHBhcmVudCkge1xuICBpZiAodmFsdWUgPT09ICdeJykge1xuICAgIC8vIEF2b2lkIFtcXF5hXSB0dXJuaW5nIGludG8gW15hXVxuICAgIHJldHVybiBpbmRleCA9PT0gMCAmJiAhcGFyZW50Lm5lZ2F0aXZlO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gJy0nKSB7XG4gICAgLy8gQXZvaWQgW2FcXC16XSB0dXJuaW5nIGludG8gW2Etel1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gKC9bXFxdXFxcXF0vLnRlc3QodmFsdWUpXG4gICk7XG59XG5cbmZ1bmN0aW9uIHByZXNlcnZlc0VzY2FwZSh2YWx1ZSwgaW5kZXgsIHBhcmVudCwgaGFzWEZsYWcpIHtcbiAgaWYgKHZhbHVlID09PSAneycpIHtcbiAgICByZXR1cm4gcHJlc2VydmVzT3BlbmluZ0N1cmx5QnJhY2VFc2NhcGUoaW5kZXgsIHBhcmVudCk7XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICd9Jykge1xuICAgIHJldHVybiBwcmVzZXJ2ZXNDbG9zaW5nQ3VybHlCcmFjZUVzY2FwZShpbmRleCwgcGFyZW50KTtcbiAgfVxuXG4gIGlmIChoYXNYRmxhZyAmJiAvWyAjXS8udGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAoL1sqWygpKz9eJC4vXFxcXHxdLy50ZXN0KHZhbHVlKVxuICApO1xufVxuXG5mdW5jdGlvbiBjb25zdW1lTnVtYmVycyhzdGFydEluZGV4LCBwYXJlbnQsIHJ0bCkge1xuICB2YXIgaSA9IHN0YXJ0SW5kZXg7XG4gIHZhciBzaWJsaW5nTm9kZSA9IChydGwgPyBpID49IDAgOiBpIDwgcGFyZW50LmV4cHJlc3Npb25zLmxlbmd0aCkgJiYgcGFyZW50LmV4cHJlc3Npb25zW2ldO1xuXG4gIHdoaWxlIChzaWJsaW5nTm9kZSAmJiBzaWJsaW5nTm9kZS50eXBlID09PSAnQ2hhcicgJiYgc2libGluZ05vZGUua2luZCA9PT0gJ3NpbXBsZScgJiYgIXNpYmxpbmdOb2RlLmVzY2FwZWQgJiYgL1xcZC8udGVzdChzaWJsaW5nTm9kZS52YWx1ZSkpIHtcbiAgICBydGwgPyBpLS0gOiBpKys7XG4gICAgc2libGluZ05vZGUgPSAocnRsID8gaSA+PSAwIDogaSA8IHBhcmVudC5leHByZXNzaW9ucy5sZW5ndGgpICYmIHBhcmVudC5leHByZXNzaW9uc1tpXTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLmFicyhzdGFydEluZGV4IC0gaSk7XG59XG5cbmZ1bmN0aW9uIGlzU2ltcGxlQ2hhcihub2RlLCB2YWx1ZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnR5cGUgPT09ICdDaGFyJyAmJiBub2RlLmtpbmQgPT09ICdzaW1wbGUnICYmICFub2RlLmVzY2FwZWQgJiYgbm9kZS52YWx1ZSA9PT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHByZXNlcnZlc09wZW5pbmdDdXJseUJyYWNlRXNjYXBlKGluZGV4LCBwYXJlbnQpIHtcbiAgLy8gKD86XFx7KSAtPiAoPzp7KVxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBuYkZvbGxvd2luZ051bWJlcnMgPSBjb25zdW1lTnVtYmVycyhpbmRleCArIDEsIHBhcmVudCk7XG4gIHZhciBpID0gaW5kZXggKyBuYkZvbGxvd2luZ051bWJlcnMgKyAxO1xuICB2YXIgbmV4dFNpYmxpbmdOb2RlID0gaSA8IHBhcmVudC5leHByZXNzaW9ucy5sZW5ndGggJiYgcGFyZW50LmV4cHJlc3Npb25zW2ldO1xuXG4gIGlmIChuYkZvbGxvd2luZ051bWJlcnMpIHtcbiAgICAvLyBBdm9pZCBcXHszfSB0dXJuaW5nIGludG8gezN9XG4gICAgaWYgKGlzU2ltcGxlQ2hhcihuZXh0U2libGluZ05vZGUsICd9JykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc1NpbXBsZUNoYXIobmV4dFNpYmxpbmdOb2RlLCAnLCcpKSB7XG4gICAgICBuYkZvbGxvd2luZ051bWJlcnMgPSBjb25zdW1lTnVtYmVycyhpICsgMSwgcGFyZW50KTtcbiAgICAgIGkgPSBpICsgbmJGb2xsb3dpbmdOdW1iZXJzICsgMTtcbiAgICAgIG5leHRTaWJsaW5nTm9kZSA9IGkgPCBwYXJlbnQuZXhwcmVzc2lvbnMubGVuZ3RoICYmIHBhcmVudC5leHByZXNzaW9uc1tpXTtcblxuICAgICAgLy8gQXZvaWQgXFx7Myx9IHR1cm5pbmcgaW50byB7Myx9XG4gICAgICByZXR1cm4gaXNTaW1wbGVDaGFyKG5leHRTaWJsaW5nTm9kZSwgJ30nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmVzZXJ2ZXNDbG9zaW5nQ3VybHlCcmFjZUVzY2FwZShpbmRleCwgcGFyZW50KSB7XG4gIC8vICg/OlxceykgLT4gKD86eylcbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbmJQcmVjZWRpbmdOdW1iZXJzID0gY29uc3VtZU51bWJlcnMoaW5kZXggLSAxLCBwYXJlbnQsIHRydWUpO1xuICB2YXIgaSA9IGluZGV4IC0gbmJQcmVjZWRpbmdOdW1iZXJzIC0gMTtcbiAgdmFyIHByZXZpb3VzU2libGluZ05vZGUgPSBpID49IDAgJiYgcGFyZW50LmV4cHJlc3Npb25zW2ldO1xuXG4gIC8vIEF2b2lkIHszXFx9IHR1cm5pbmcgaW50byB7M31cbiAgaWYgKG5iUHJlY2VkaW5nTnVtYmVycyAmJiBpc1NpbXBsZUNoYXIocHJldmlvdXNTaWJsaW5nTm9kZSwgJ3snKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzU2ltcGxlQ2hhcihwcmV2aW91c1NpYmxpbmdOb2RlLCAnLCcpKSB7XG4gICAgbmJQcmVjZWRpbmdOdW1iZXJzID0gY29uc3VtZU51bWJlcnMoaSAtIDEsIHBhcmVudCwgdHJ1ZSk7XG4gICAgaSA9IGkgLSBuYlByZWNlZGluZ051bWJlcnMgLSAxO1xuICAgIHByZXZpb3VzU2libGluZ05vZGUgPSBpIDwgcGFyZW50LmV4cHJlc3Npb25zLmxlbmd0aCAmJiBwYXJlbnQuZXhwcmVzc2lvbnNbaV07XG5cbiAgICAvLyBBdm9pZCB7MyxcXH0gdHVybmluZyBpbnRvIHszLH1cbiAgICByZXR1cm4gbmJQcmVjZWRpbmdOdW1iZXJzICYmIGlzU2ltcGxlQ2hhcihwcmV2aW91c1NpYmxpbmdOb2RlLCAneycpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFFQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQTtBQUNBO0FBa0JBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-escape-unescape-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/char-surrogate-pair-to-single-unicode-transform.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/char-surrogate-pair-to-single-unicode-transform.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to transform surrogate pairs into single unicode code point\n *\n * \\ud83d\\ude80 -> \\u{1f680}\n */\n\nmodule.exports = {\n  shouldRun: function shouldRun(ast) {\n    return ast.flags.includes('u');\n  },\n  Char: function Char(path) {\n    var node = path.node;\n\n    if (node.kind !== 'unicode' || !node.isSurrogatePair || isNaN(node.codePoint)) {\n      return;\n    }\n\n    node.value = \"\\\\u{\" + node.codePoint.toString(16) + '}';\n    delete node.isSurrogatePair;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9jaGFyLXN1cnJvZ2F0ZS1wYWlyLXRvLXNpbmdsZS11bmljb2RlLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2NoYXItc3Vycm9nYXRlLXBhaXItdG8tc2luZ2xlLXVuaWNvZGUtdHJhbnNmb3JtLmpzP2EzOTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byB0cmFuc2Zvcm0gc3Vycm9nYXRlIHBhaXJzIGludG8gc2luZ2xlIHVuaWNvZGUgY29kZSBwb2ludFxuICpcbiAqIFxcdWQ4M2RcXHVkZTgwIC0+IFxcdXsxZjY4MH1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2hvdWxkUnVuOiBmdW5jdGlvbiBzaG91bGRSdW4oYXN0KSB7XG4gICAgcmV0dXJuIGFzdC5mbGFncy5pbmNsdWRlcygndScpO1xuICB9LFxuICBDaGFyOiBmdW5jdGlvbiBDaGFyKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuICAgIGlmIChub2RlLmtpbmQgIT09ICd1bmljb2RlJyB8fCAhbm9kZS5pc1N1cnJvZ2F0ZVBhaXIgfHwgaXNOYU4obm9kZS5jb2RlUG9pbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUudmFsdWUgPSAnXFxcXHV7JyArIG5vZGUuY29kZVBvaW50LnRvU3RyaW5nKDE2KSArICd9JztcbiAgICBkZWxldGUgbm9kZS5pc1N1cnJvZ2F0ZVBhaXI7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFaQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/char-surrogate-pair-to-single-unicode-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/combine-repeating-patterns-transform.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/combine-repeating-patterns-transform.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar NodePath = __webpack_require__(/*! ../../traverse/node-path */ \"./node_modules/regexp-tree/dist/traverse/node-path.js\");\n\nvar _require = __webpack_require__(/*! ../../transform/utils */ \"./node_modules/regexp-tree/dist/transform/utils.js\"),\n    increaseQuantifierByOne = _require.increaseQuantifierByOne;\n/**\n * A regexp-tree plugin to combine repeating patterns.\n *\n * /^abcabcabc/ -> /^abc{3}/\n * /^(?:abc){2}abc/ -> /^(?:abc){3}/\n * /^abc(?:abc){2}/ -> /^(?:abc){3}/\n */\n\n\nmodule.exports = {\n  Alternative: function Alternative(path) {\n    var node = path.node; // We can skip the first child\n\n    var index = 1;\n\n    while (index < node.expressions.length) {\n      var child = path.getChild(index);\n      index = Math.max(1, combineRepeatingPatternLeft(path, child, index));\n\n      if (index >= node.expressions.length) {\n        break;\n      }\n\n      child = path.getChild(index);\n      index = Math.max(1, combineWithPreviousRepetition(path, child, index));\n\n      if (index >= node.expressions.length) {\n        break;\n      }\n\n      child = path.getChild(index);\n      index = Math.max(1, combineRepetitionWithPrevious(path, child, index));\n      index++;\n    }\n  }\n}; // abcabc -> (?:abc){2}\n\nfunction combineRepeatingPatternLeft(alternative, child, index) {\n  var node = alternative.node;\n  var nbPossibleLengths = Math.ceil(index / 2);\n  var i = 0;\n\n  while (i < nbPossibleLengths) {\n    var startIndex = index - 2 * i - 1;\n    var right = void 0,\n        left = void 0;\n\n    if (i === 0) {\n      right = child;\n      left = alternative.getChild(startIndex);\n    } else {\n      right = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - i, index)), [child.node])\n      });\n      left = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(startIndex, index - i)))\n      });\n    }\n\n    if (right.hasEqualSource(left)) {\n      for (var j = 0; j < 2 * i + 1; j++) {\n        alternative.getChild(startIndex).remove();\n      }\n\n      child.replace({\n        type: 'Repetition',\n        expression: i === 0 ? right.node : {\n          type: 'Group',\n          capturing: false,\n          expression: right.node\n        },\n        quantifier: {\n          type: 'Quantifier',\n          kind: 'Range',\n          from: 2,\n          to: 2,\n          greedy: true\n        }\n      });\n      return startIndex;\n    }\n\n    i++;\n  }\n\n  return index;\n} // (?:abc){2}abc -> (?:abc){3}\n\n\nfunction combineWithPreviousRepetition(alternative, child, index) {\n  var node = alternative.node;\n  var i = 0;\n\n  while (i < index) {\n    var previousChild = alternative.getChild(i);\n\n    if (previousChild.node.type === 'Repetition' && previousChild.node.quantifier.greedy) {\n      var left = previousChild.getChild();\n      var right = void 0;\n\n      if (left.node.type === 'Group' && !left.node.capturing) {\n        left = left.getChild();\n      }\n\n      if (i + 1 === index) {\n        right = child;\n\n        if (right.node.type === 'Group' && !right.node.capturing) {\n          right = right.getChild();\n        }\n      } else {\n        right = NodePath.getForNode({\n          type: 'Alternative',\n          expressions: [].concat(_toConsumableArray(node.expressions.slice(i + 1, index + 1)))\n        });\n      }\n\n      if (left.hasEqualSource(right)) {\n        for (var j = i; j < index; j++) {\n          alternative.getChild(i + 1).remove();\n        }\n\n        increaseQuantifierByOne(previousChild.node.quantifier);\n        return i;\n      }\n    }\n\n    i++;\n  }\n\n  return index;\n} // abc(?:abc){2} -> (?:abc){3}\n\n\nfunction combineRepetitionWithPrevious(alternative, child, index) {\n  var node = alternative.node;\n\n  if (child.node.type === 'Repetition' && child.node.quantifier.greedy) {\n    var right = child.getChild();\n    var left = void 0;\n\n    if (right.node.type === 'Group' && !right.node.capturing) {\n      right = right.getChild();\n    }\n\n    var rightLength = void 0;\n\n    if (right.node.type === 'Alternative') {\n      rightLength = right.node.expressions.length;\n      left = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - rightLength, index)))\n      });\n    } else {\n      rightLength = 1;\n      left = alternative.getChild(index - 1);\n\n      if (left.node.type === 'Group' && !left.node.capturing) {\n        left = left.getChild();\n      }\n    }\n\n    if (left.hasEqualSource(right)) {\n      for (var j = index - rightLength; j < index; j++) {\n        alternative.getChild(index - rightLength).remove();\n      }\n\n      increaseQuantifierByOne(child.node.quantifier);\n      return index - rightLength;\n    }\n  }\n\n  return index;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/combine-repeating-patterns-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/disjunction-remove-duplicates-transform.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/disjunction-remove-duplicates-transform.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar NodePath = __webpack_require__(/*! ../../traverse/node-path */ \"./node_modules/regexp-tree/dist/traverse/node-path.js\");\n\nvar _require = __webpack_require__(/*! ../../transform/utils */ \"./node_modules/regexp-tree/dist/transform/utils.js\"),\n    disjunctionToList = _require.disjunctionToList,\n    listToDisjunction = _require.listToDisjunction;\n/**\n * Removes duplicates from a disjunction sequence:\n *\n * /(ab|bc|ab)+(xy|xy)+/ -> /(ab|bc)+(xy)+/\n */\n\n\nmodule.exports = {\n  Disjunction: function Disjunction(path) {\n    var node = path.node; // Make unique nodes.\n\n    var uniqueNodesMap = {};\n    var parts = disjunctionToList(node).filter(function (part) {\n      var encoded = part ? NodePath.getForNode(part).jsonEncode() : 'null'; // Already recorded this part, filter out.\n\n      if (uniqueNodesMap.hasOwnProperty(encoded)) {\n        return false;\n      }\n\n      uniqueNodesMap[encoded] = part;\n      return true;\n    }); // Replace with the optimized disjunction.\n\n    path.replace(listToDisjunction(parts));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9kaXNqdW5jdGlvbi1yZW1vdmUtZHVwbGljYXRlcy10cmFuc2Zvcm0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9kaXNqdW5jdGlvbi1yZW1vdmUtZHVwbGljYXRlcy10cmFuc2Zvcm0uanM/ZDhkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTm9kZVBhdGggPSByZXF1aXJlKCcuLi8uLi90cmF2ZXJzZS9ub2RlLXBhdGgnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNmb3JtL3V0aWxzJyksXG4gICAgZGlzanVuY3Rpb25Ub0xpc3QgPSBfcmVxdWlyZS5kaXNqdW5jdGlvblRvTGlzdCxcbiAgICBsaXN0VG9EaXNqdW5jdGlvbiA9IF9yZXF1aXJlLmxpc3RUb0Rpc2p1bmN0aW9uO1xuXG4vKipcbiAqIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGEgZGlzanVuY3Rpb24gc2VxdWVuY2U6XG4gKlxuICogLyhhYnxiY3xhYikrKHh5fHh5KSsvIC0+IC8oYWJ8YmMpKyh4eSkrL1xuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERpc2p1bmN0aW9uOiBmdW5jdGlvbiBEaXNqdW5jdGlvbihwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cbiAgICAvLyBNYWtlIHVuaXF1ZSBub2Rlcy5cblxuICAgIHZhciB1bmlxdWVOb2Rlc01hcCA9IHt9O1xuXG4gICAgdmFyIHBhcnRzID0gZGlzanVuY3Rpb25Ub0xpc3Qobm9kZSkuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICB2YXIgZW5jb2RlZCA9IHBhcnQgPyBOb2RlUGF0aC5nZXRGb3JOb2RlKHBhcnQpLmpzb25FbmNvZGUoKSA6ICdudWxsJztcblxuICAgICAgLy8gQWxyZWFkeSByZWNvcmRlZCB0aGlzIHBhcnQsIGZpbHRlciBvdXQuXG4gICAgICBpZiAodW5pcXVlTm9kZXNNYXAuaGFzT3duUHJvcGVydHkoZW5jb2RlZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB1bmlxdWVOb2Rlc01hcFtlbmNvZGVkXSA9IHBhcnQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIFJlcGxhY2Ugd2l0aCB0aGUgb3B0aW1pemVkIGRpc2p1bmN0aW9uLlxuICAgIHBhdGgucmVwbGFjZShsaXN0VG9EaXNqdW5jdGlvbihwYXJ0cykpO1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBdEJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/disjunction-remove-duplicates-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/group-single-chars-to-char-class.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/group-single-chars-to-char-class.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to replace single char group disjunction to char group\n *\n * a|b|c -> [abc]\n * [12]|3|4 -> [1234]\n * (a|b|c) -> ([abc])\n * (?:a|b|c) -> [abc]\n */\n\nmodule.exports = {\n  Disjunction: function Disjunction(path) {\n    var node = path.node,\n        parent = path.parent;\n\n    if (!handlers[parent.type]) {\n      return;\n    }\n\n    var charset = new Map();\n\n    if (!shouldProcess(node, charset) || !charset.size) {\n      return;\n    }\n\n    var characterClass = {\n      type: 'CharacterClass',\n      expressions: Array.from(charset.keys()).sort().map(function (key) {\n        return charset.get(key);\n      })\n    };\n    handlers[parent.type](path.getParent(), characterClass);\n  }\n};\nvar handlers = {\n  RegExp: function RegExp(path, characterClass) {\n    var node = path.node;\n    node.body = characterClass;\n  },\n  Group: function Group(path, characterClass) {\n    var node = path.node;\n\n    if (node.capturing) {\n      node.expression = characterClass;\n    } else {\n      path.replace(characterClass);\n    }\n  }\n};\n\nfunction shouldProcess(expression, charset) {\n  if (!expression) {\n    // Abort on empty disjunction part\n    return false;\n  }\n\n  var type = expression.type;\n\n  if (type === 'Disjunction') {\n    var left = expression.left,\n        right = expression.right;\n    return shouldProcess(left, charset) && shouldProcess(right, charset);\n  } else if (type === 'Char') {\n    var value = expression.value;\n    charset.set(value, expression);\n    return true;\n  } else if (type === 'CharacterClass' && !expression.negative) {\n    return expression.expressions.every(function (expression) {\n      return shouldProcess(expression, charset);\n    });\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9ncm91cC1zaW5nbGUtY2hhcnMtdG8tY2hhci1jbGFzcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2dyb3VwLXNpbmdsZS1jaGFycy10by1jaGFyLWNsYXNzLmpzPzZlYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byByZXBsYWNlIHNpbmdsZSBjaGFyIGdyb3VwIGRpc2p1bmN0aW9uIHRvIGNoYXIgZ3JvdXBcbiAqXG4gKiBhfGJ8YyAtPiBbYWJjXVxuICogWzEyXXwzfDQgLT4gWzEyMzRdXG4gKiAoYXxifGMpIC0+IChbYWJjXSlcbiAqICg/OmF8YnxjKSAtPiBbYWJjXVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEaXNqdW5jdGlvbjogZnVuY3Rpb24gRGlzanVuY3Rpb24ocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlLFxuICAgICAgICBwYXJlbnQgPSBwYXRoLnBhcmVudDtcblxuXG4gICAgaWYgKCFoYW5kbGVyc1twYXJlbnQudHlwZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnNldCA9IG5ldyBNYXAoKTtcblxuICAgIGlmICghc2hvdWxkUHJvY2Vzcyhub2RlLCBjaGFyc2V0KSB8fCAhY2hhcnNldC5zaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoYXJhY3RlckNsYXNzID0ge1xuICAgICAgdHlwZTogJ0NoYXJhY3RlckNsYXNzJyxcbiAgICAgIGV4cHJlc3Npb25zOiBBcnJheS5mcm9tKGNoYXJzZXQua2V5cygpKS5zb3J0KCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzZXQuZ2V0KGtleSk7XG4gICAgICB9KVxuICAgIH07XG5cbiAgICBoYW5kbGVyc1twYXJlbnQudHlwZV0ocGF0aC5nZXRQYXJlbnQoKSwgY2hhcmFjdGVyQ2xhc3MpO1xuICB9XG59O1xuXG52YXIgaGFuZGxlcnMgPSB7XG4gIFJlZ0V4cDogZnVuY3Rpb24gUmVnRXhwKHBhdGgsIGNoYXJhY3RlckNsYXNzKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cblxuICAgIG5vZGUuYm9keSA9IGNoYXJhY3RlckNsYXNzO1xuICB9LFxuICBHcm91cDogZnVuY3Rpb24gR3JvdXAocGF0aCwgY2hhcmFjdGVyQ2xhc3MpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKG5vZGUuY2FwdHVyaW5nKSB7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSBjaGFyYWN0ZXJDbGFzcztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aC5yZXBsYWNlKGNoYXJhY3RlckNsYXNzKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3MoZXhwcmVzc2lvbiwgY2hhcnNldCkge1xuICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAvLyBBYm9ydCBvbiBlbXB0eSBkaXNqdW5jdGlvbiBwYXJ0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBleHByZXNzaW9uLnR5cGU7XG5cblxuICBpZiAodHlwZSA9PT0gJ0Rpc2p1bmN0aW9uJykge1xuICAgIHZhciBsZWZ0ID0gZXhwcmVzc2lvbi5sZWZ0LFxuICAgICAgICByaWdodCA9IGV4cHJlc3Npb24ucmlnaHQ7XG5cblxuICAgIHJldHVybiBzaG91bGRQcm9jZXNzKGxlZnQsIGNoYXJzZXQpICYmIHNob3VsZFByb2Nlc3MocmlnaHQsIGNoYXJzZXQpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaGFyJykge1xuICAgIHZhciB2YWx1ZSA9IGV4cHJlc3Npb24udmFsdWU7XG5cblxuICAgIGNoYXJzZXQuc2V0KHZhbHVlLCBleHByZXNzaW9uKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaGFyYWN0ZXJDbGFzcycgJiYgIWV4cHJlc3Npb24ubmVnYXRpdmUpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbi5leHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIHNob3VsZFByb2Nlc3MoZXhwcmVzc2lvbiwgY2hhcnNldCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUF4QkE7QUEyQkE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQTtBQUNBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/group-single-chars-to-char-class.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nmodule.exports = new Map([// \\ud83d\\ude80 -> \\u{1f680}\n['charSurrogatePairToSingleUnicode', __webpack_require__(/*! ./char-surrogate-pair-to-single-unicode-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-surrogate-pair-to-single-unicode-transform.js\")], // \\u0061 -> a\n['charCodeToSimpleChar', __webpack_require__(/*! ./char-code-to-simple-char-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-code-to-simple-char-transform.js\")], // /Aa/i -> /aa/i\n['charCaseInsensitiveLowerCaseTransform', __webpack_require__(/*! ./char-case-insensitive-lowercase-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-case-insensitive-lowercase-transform.js\")], // [\\d\\d] -> [\\d]\n['charClassRemoveDuplicates', __webpack_require__(/*! ./char-class-remove-duplicates-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-class-remove-duplicates-transform.js\")], // a{1,2}a{2,3} -> a{3,5}\n['quantifiersMerge', __webpack_require__(/*! ./quantifiers-merge-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/quantifiers-merge-transform.js\")], // a{1,} -> a+, a{3,3} -> a{3}, a{1} -> a\n['quantifierRangeToSymbol', __webpack_require__(/*! ./quantifier-range-to-symbol-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/quantifier-range-to-symbol-transform.js\")], // [a-a] -> [a], [a-b] -> [ab]\n['charClassClassrangesToChars', __webpack_require__(/*! ./char-class-classranges-to-chars-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-to-chars-transform.js\")], // [0-9] -> [\\d]\n['charClassToMeta', __webpack_require__(/*! ./char-class-to-meta-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-meta-transform.js\")], // [\\d] -> \\d, [^\\w] -> \\W\n['charClassToSingleChar', __webpack_require__(/*! ./char-class-to-single-char-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-class-to-single-char-transform.js\")], // \\e -> e\n['charEscapeUnescape', __webpack_require__(/*! ./char-escape-unescape-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-escape-unescape-transform.js\")], // [a-de-f] -> [a-f]\n['charClassClassrangesMerge', __webpack_require__(/*! ./char-class-classranges-merge-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/char-class-classranges-merge-transform.js\")], // (ab|ab) -> (ab)\n['disjunctionRemoveDuplicates', __webpack_require__(/*! ./disjunction-remove-duplicates-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/disjunction-remove-duplicates-transform.js\")], // (a|b|c) -> [abc]\n['groupSingleCharsToCharClass', __webpack_require__(/*! ./group-single-chars-to-char-class */ \"./node_modules/regexp-tree/dist/optimizer/transforms/group-single-chars-to-char-class.js\")], // (?:)a -> a\n['removeEmptyGroup', __webpack_require__(/*! ./remove-empty-group-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/remove-empty-group-transform.js\")], // (?:a) -> a\n['ungroup', __webpack_require__(/*! ./ungroup-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/ungroup-transform.js\")], // abcabcabc -> (?:abc){3}\n['combineRepeatingPatterns', __webpack_require__(/*! ./combine-repeating-patterns-transform */ \"./node_modules/regexp-tree/dist/optimizer/transforms/combine-repeating-patterns-transform.js\")]]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL2luZGV4LmpzPzU1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgTWFwKFtcbi8vIFxcdWQ4M2RcXHVkZTgwIC0+IFxcdXsxZjY4MH1cblsnY2hhclN1cnJvZ2F0ZVBhaXJUb1NpbmdsZVVuaWNvZGUnLCByZXF1aXJlKCcuL2NoYXItc3Vycm9nYXRlLXBhaXItdG8tc2luZ2xlLXVuaWNvZGUtdHJhbnNmb3JtJyldLFxuXG4vLyBcXHUwMDYxIC0+IGFcblsnY2hhckNvZGVUb1NpbXBsZUNoYXInLCByZXF1aXJlKCcuL2NoYXItY29kZS10by1zaW1wbGUtY2hhci10cmFuc2Zvcm0nKV0sXG5cbi8vIC9BYS9pIC0+IC9hYS9pXG5bJ2NoYXJDYXNlSW5zZW5zaXRpdmVMb3dlckNhc2VUcmFuc2Zvcm0nLCByZXF1aXJlKCcuL2NoYXItY2FzZS1pbnNlbnNpdGl2ZS1sb3dlcmNhc2UtdHJhbnNmb3JtJyldLFxuXG4vLyBbXFxkXFxkXSAtPiBbXFxkXVxuWydjaGFyQ2xhc3NSZW1vdmVEdXBsaWNhdGVzJywgcmVxdWlyZSgnLi9jaGFyLWNsYXNzLXJlbW92ZS1kdXBsaWNhdGVzLXRyYW5zZm9ybScpXSxcblxuLy8gYXsxLDJ9YXsyLDN9IC0+IGF7Myw1fVxuWydxdWFudGlmaWVyc01lcmdlJywgcmVxdWlyZSgnLi9xdWFudGlmaWVycy1tZXJnZS10cmFuc2Zvcm0nKV0sXG5cbi8vIGF7MSx9IC0+IGErLCBhezMsM30gLT4gYXszfSwgYXsxfSAtPiBhXG5bJ3F1YW50aWZpZXJSYW5nZVRvU3ltYm9sJywgcmVxdWlyZSgnLi9xdWFudGlmaWVyLXJhbmdlLXRvLXN5bWJvbC10cmFuc2Zvcm0nKV0sXG5cbi8vIFthLWFdIC0+IFthXSwgW2EtYl0gLT4gW2FiXVxuWydjaGFyQ2xhc3NDbGFzc3Jhbmdlc1RvQ2hhcnMnLCByZXF1aXJlKCcuL2NoYXItY2xhc3MtY2xhc3NyYW5nZXMtdG8tY2hhcnMtdHJhbnNmb3JtJyldLFxuXG4vLyBbMC05XSAtPiBbXFxkXVxuWydjaGFyQ2xhc3NUb01ldGEnLCByZXF1aXJlKCcuL2NoYXItY2xhc3MtdG8tbWV0YS10cmFuc2Zvcm0nKV0sXG5cbi8vIFtcXGRdIC0+IFxcZCwgW15cXHddIC0+IFxcV1xuWydjaGFyQ2xhc3NUb1NpbmdsZUNoYXInLCByZXF1aXJlKCcuL2NoYXItY2xhc3MtdG8tc2luZ2xlLWNoYXItdHJhbnNmb3JtJyldLFxuXG4vLyBcXGUgLT4gZVxuWydjaGFyRXNjYXBlVW5lc2NhcGUnLCByZXF1aXJlKCcuL2NoYXItZXNjYXBlLXVuZXNjYXBlLXRyYW5zZm9ybScpXSxcblxuLy8gW2EtZGUtZl0gLT4gW2EtZl1cblsnY2hhckNsYXNzQ2xhc3NyYW5nZXNNZXJnZScsIHJlcXVpcmUoJy4vY2hhci1jbGFzcy1jbGFzc3Jhbmdlcy1tZXJnZS10cmFuc2Zvcm0nKV0sXG5cbi8vIChhYnxhYikgLT4gKGFiKVxuWydkaXNqdW5jdGlvblJlbW92ZUR1cGxpY2F0ZXMnLCByZXF1aXJlKCcuL2Rpc2p1bmN0aW9uLXJlbW92ZS1kdXBsaWNhdGVzLXRyYW5zZm9ybScpXSxcblxuLy8gKGF8YnxjKSAtPiBbYWJjXVxuWydncm91cFNpbmdsZUNoYXJzVG9DaGFyQ2xhc3MnLCByZXF1aXJlKCcuL2dyb3VwLXNpbmdsZS1jaGFycy10by1jaGFyLWNsYXNzJyldLFxuXG4vLyAoPzopYSAtPiBhXG5bJ3JlbW92ZUVtcHR5R3JvdXAnLCByZXF1aXJlKCcuL3JlbW92ZS1lbXB0eS1ncm91cC10cmFuc2Zvcm0nKV0sXG5cbi8vICg/OmEpIC0+IGFcblsndW5ncm91cCcsIHJlcXVpcmUoJy4vdW5ncm91cC10cmFuc2Zvcm0nKV0sXG5cbi8vIGFiY2FiY2FiYyAtPiAoPzphYmMpezN9XG5bJ2NvbWJpbmVSZXBlYXRpbmdQYXR0ZXJucycsIHJlcXVpcmUoJy4vY29tYmluZS1yZXBlYXRpbmctcGF0dGVybnMtdHJhbnNmb3JtJyldXSk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/quantifier-range-to-symbol-transform.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/quantifier-range-to-symbol-transform.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to replace different range-based quantifiers\n * with their symbol equivalents.\n *\n * a{0,} -> a*\n * a{1,} -> a+\n * a{1} -> a\n *\n * NOTE: the following is automatically handled in the generator:\n *\n * a{3,3} -> a{3}\n */\n\nmodule.exports = {\n  Quantifier: function Quantifier(path) {\n    var node = path.node;\n\n    if (node.kind !== 'Range') {\n      return;\n    } // a{0,} -> a*\n\n\n    rewriteOpenZero(path); // a{1,} -> a+\n\n    rewriteOpenOne(path); // a{1} -> a\n\n    rewriteExactOne(path);\n  }\n};\n\nfunction rewriteOpenZero(path) {\n  var node = path.node;\n\n  if (node.from !== 0 || node.to) {\n    return;\n  }\n\n  node.kind = '*';\n  delete node.from;\n}\n\nfunction rewriteOpenOne(path) {\n  var node = path.node;\n\n  if (node.from !== 1 || node.to) {\n    return;\n  }\n\n  node.kind = '+';\n  delete node.from;\n}\n\nfunction rewriteExactOne(path) {\n  var node = path.node;\n\n  if (node.from !== 1 || node.to !== 1) {\n    return;\n  }\n\n  path.parentPath.replace(path.parentPath.node.expression);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9xdWFudGlmaWVyLXJhbmdlLXRvLXN5bWJvbC10cmFuc2Zvcm0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9xdWFudGlmaWVyLXJhbmdlLXRvLXN5bWJvbC10cmFuc2Zvcm0uanM/ZmJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIHJlcGxhY2UgZGlmZmVyZW50IHJhbmdlLWJhc2VkIHF1YW50aWZpZXJzXG4gKiB3aXRoIHRoZWlyIHN5bWJvbCBlcXVpdmFsZW50cy5cbiAqXG4gKiBhezAsfSAtPiBhKlxuICogYXsxLH0gLT4gYStcbiAqIGF7MX0gLT4gYVxuICpcbiAqIE5PVEU6IHRoZSBmb2xsb3dpbmcgaXMgYXV0b21hdGljYWxseSBoYW5kbGVkIGluIHRoZSBnZW5lcmF0b3I6XG4gKlxuICogYXszLDN9IC0+IGF7M31cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUXVhbnRpZmllcjogZnVuY3Rpb24gUXVhbnRpZmllcihwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cblxuICAgIGlmIChub2RlLmtpbmQgIT09ICdSYW5nZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhezAsfSAtPiBhKlxuICAgIHJld3JpdGVPcGVuWmVybyhwYXRoKTtcblxuICAgIC8vIGF7MSx9IC0+IGErXG4gICAgcmV3cml0ZU9wZW5PbmUocGF0aCk7XG5cbiAgICAvLyBhezF9IC0+IGFcbiAgICByZXdyaXRlRXhhY3RPbmUocGF0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJld3JpdGVPcGVuWmVybyhwYXRoKSB7XG4gIHZhciBub2RlID0gcGF0aC5ub2RlO1xuXG5cbiAgaWYgKG5vZGUuZnJvbSAhPT0gMCB8fCBub2RlLnRvKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbm9kZS5raW5kID0gJyonO1xuICBkZWxldGUgbm9kZS5mcm9tO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlT3Blbk9uZShwYXRoKSB7XG4gIHZhciBub2RlID0gcGF0aC5ub2RlO1xuXG5cbiAgaWYgKG5vZGUuZnJvbSAhPT0gMSB8fCBub2RlLnRvKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbm9kZS5raW5kID0gJysnO1xuICBkZWxldGUgbm9kZS5mcm9tO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRXhhY3RPbmUocGF0aCkge1xuICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gIGlmIChub2RlLmZyb20gIT09IDEgfHwgbm9kZS50byAhPT0gMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhdGgucGFyZW50UGF0aC5yZXBsYWNlKHBhdGgucGFyZW50UGF0aC5ub2RlLmV4cHJlc3Npb24pO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7Ozs7Ozs7Ozs7O0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBakJBO0FBQ0E7QUFtQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/quantifier-range-to-symbol-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/quantifiers-merge-transform.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/quantifiers-merge-transform.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _require = __webpack_require__(/*! ../../transform/utils */ \"./node_modules/regexp-tree/dist/transform/utils.js\"),\n    increaseQuantifierByOne = _require.increaseQuantifierByOne;\n/**\n * A regexp-tree plugin to merge quantifiers\n *\n * a+a+ -> a{2,}\n * a{2}a{3} -> a{5}\n * a{1,2}a{2,3} -> a{3,5}\n */\n\n\nmodule.exports = {\n  Repetition: function Repetition(path) {\n    var node = path.node,\n        parent = path.parent;\n\n    if (parent.type !== 'Alternative' || !path.index) {\n      return;\n    }\n\n    var previousSibling = path.getPreviousSibling();\n\n    if (!previousSibling) {\n      return;\n    }\n\n    if (previousSibling.node.type === 'Repetition') {\n      if (!previousSibling.getChild().hasEqualSource(path.getChild())) {\n        return;\n      }\n\n      var _extractFromTo = extractFromTo(previousSibling.node.quantifier),\n          previousSiblingFrom = _extractFromTo.from,\n          previousSiblingTo = _extractFromTo.to;\n\n      var _extractFromTo2 = extractFromTo(node.quantifier),\n          nodeFrom = _extractFromTo2.from,\n          nodeTo = _extractFromTo2.to; // It's does not seem reliable to merge quantifiers with different greediness\n      // when none of both is a greedy open range\n\n\n      if (previousSibling.node.quantifier.greedy !== node.quantifier.greedy && !isGreedyOpenRange(previousSibling.node.quantifier) && !isGreedyOpenRange(node.quantifier)) {\n        return;\n      } // a*a* -> a*\n      // a*a+ -> a+\n      // a+a+ -> a{2,}\n      // a{2}a{4} -> a{6}\n      // a{1,2}a{2,3} -> a{3,5}\n      // a{1,}a{2,} -> a{3,}\n      // a+a{2,} -> a{3,}\n      // a??a{2,} -> a{2,}\n      // a*?a{2,} -> a{2,}\n      // a+?a{2,} -> a{3,}\n\n\n      node.quantifier.kind = 'Range';\n      node.quantifier.from = previousSiblingFrom + nodeFrom;\n\n      if (previousSiblingTo && nodeTo) {\n        node.quantifier.to = previousSiblingTo + nodeTo;\n      } else {\n        delete node.quantifier.to;\n      }\n\n      if (isGreedyOpenRange(previousSibling.node.quantifier) || isGreedyOpenRange(node.quantifier)) {\n        node.quantifier.greedy = true;\n      }\n\n      previousSibling.remove();\n    } else {\n      if (!previousSibling.hasEqualSource(path.getChild())) {\n        return;\n      }\n\n      increaseQuantifierByOne(node.quantifier);\n      previousSibling.remove();\n    }\n  }\n};\n\nfunction isGreedyOpenRange(quantifier) {\n  return quantifier.greedy && (quantifier.kind === '+' || quantifier.kind === '*' || quantifier.kind === 'Range' && !quantifier.to);\n}\n\nfunction extractFromTo(quantifier) {\n  var from = void 0,\n      to = void 0;\n\n  if (quantifier.kind === '*') {\n    from = 0;\n  } else if (quantifier.kind === '+') {\n    from = 1;\n  } else if (quantifier.kind === '?') {\n    from = 0;\n    to = 1;\n  } else {\n    from = quantifier.from;\n\n    if (quantifier.to) {\n      to = quantifier.to;\n    }\n  }\n\n  return {\n    from: from,\n    to: to\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9xdWFudGlmaWVycy1tZXJnZS10cmFuc2Zvcm0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9xdWFudGlmaWVycy1tZXJnZS10cmFuc2Zvcm0uanM/NjJiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi8uLi90cmFuc2Zvcm0vdXRpbHMnKSxcbiAgICBpbmNyZWFzZVF1YW50aWZpZXJCeU9uZSA9IF9yZXF1aXJlLmluY3JlYXNlUXVhbnRpZmllckJ5T25lO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIG1lcmdlIHF1YW50aWZpZXJzXG4gKlxuICogYSthKyAtPiBhezIsfVxuICogYXsyfWF7M30gLT4gYXs1fVxuICogYXsxLDJ9YXsyLDN9IC0+IGF7Myw1fVxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJlcGV0aXRpb246IGZ1bmN0aW9uIFJlcGV0aXRpb24ocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlLFxuICAgICAgICBwYXJlbnQgPSBwYXRoLnBhcmVudDtcblxuXG4gICAgaWYgKHBhcmVudC50eXBlICE9PSAnQWx0ZXJuYXRpdmUnIHx8ICFwYXRoLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzU2libGluZyA9IHBhdGguZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG5cbiAgICBpZiAoIXByZXZpb3VzU2libGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c1NpYmxpbmcubm9kZS50eXBlID09PSAnUmVwZXRpdGlvbicpIHtcbiAgICAgIGlmICghcHJldmlvdXNTaWJsaW5nLmdldENoaWxkKCkuaGFzRXF1YWxTb3VyY2UocGF0aC5nZXRDaGlsZCgpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfZXh0cmFjdEZyb21UbyA9IGV4dHJhY3RGcm9tVG8ocHJldmlvdXNTaWJsaW5nLm5vZGUucXVhbnRpZmllciksXG4gICAgICAgICAgcHJldmlvdXNTaWJsaW5nRnJvbSA9IF9leHRyYWN0RnJvbVRvLmZyb20sXG4gICAgICAgICAgcHJldmlvdXNTaWJsaW5nVG8gPSBfZXh0cmFjdEZyb21Uby50bztcblxuICAgICAgdmFyIF9leHRyYWN0RnJvbVRvMiA9IGV4dHJhY3RGcm9tVG8obm9kZS5xdWFudGlmaWVyKSxcbiAgICAgICAgICBub2RlRnJvbSA9IF9leHRyYWN0RnJvbVRvMi5mcm9tLFxuICAgICAgICAgIG5vZGVUbyA9IF9leHRyYWN0RnJvbVRvMi50bztcblxuICAgICAgLy8gSXQncyBkb2VzIG5vdCBzZWVtIHJlbGlhYmxlIHRvIG1lcmdlIHF1YW50aWZpZXJzIHdpdGggZGlmZmVyZW50IGdyZWVkaW5lc3NcbiAgICAgIC8vIHdoZW4gbm9uZSBvZiBib3RoIGlzIGEgZ3JlZWR5IG9wZW4gcmFuZ2VcblxuXG4gICAgICBpZiAocHJldmlvdXNTaWJsaW5nLm5vZGUucXVhbnRpZmllci5ncmVlZHkgIT09IG5vZGUucXVhbnRpZmllci5ncmVlZHkgJiYgIWlzR3JlZWR5T3BlblJhbmdlKHByZXZpb3VzU2libGluZy5ub2RlLnF1YW50aWZpZXIpICYmICFpc0dyZWVkeU9wZW5SYW5nZShub2RlLnF1YW50aWZpZXIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYSphKiAtPiBhKlxuICAgICAgLy8gYSphKyAtPiBhK1xuICAgICAgLy8gYSthKyAtPiBhezIsfVxuICAgICAgLy8gYXsyfWF7NH0gLT4gYXs2fVxuICAgICAgLy8gYXsxLDJ9YXsyLDN9IC0+IGF7Myw1fVxuICAgICAgLy8gYXsxLH1hezIsfSAtPiBhezMsfVxuICAgICAgLy8gYSthezIsfSAtPiBhezMsfVxuXG4gICAgICAvLyBhPz9hezIsfSAtPiBhezIsfVxuICAgICAgLy8gYSo/YXsyLH0gLT4gYXsyLH1cbiAgICAgIC8vIGErP2F7Mix9IC0+IGF7Myx9XG5cbiAgICAgIG5vZGUucXVhbnRpZmllci5raW5kID0gJ1JhbmdlJztcbiAgICAgIG5vZGUucXVhbnRpZmllci5mcm9tID0gcHJldmlvdXNTaWJsaW5nRnJvbSArIG5vZGVGcm9tO1xuICAgICAgaWYgKHByZXZpb3VzU2libGluZ1RvICYmIG5vZGVUbykge1xuICAgICAgICBub2RlLnF1YW50aWZpZXIudG8gPSBwcmV2aW91c1NpYmxpbmdUbyArIG5vZGVUbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBub2RlLnF1YW50aWZpZXIudG87XG4gICAgICB9XG4gICAgICBpZiAoaXNHcmVlZHlPcGVuUmFuZ2UocHJldmlvdXNTaWJsaW5nLm5vZGUucXVhbnRpZmllcikgfHwgaXNHcmVlZHlPcGVuUmFuZ2Uobm9kZS5xdWFudGlmaWVyKSkge1xuICAgICAgICBub2RlLnF1YW50aWZpZXIuZ3JlZWR5ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNTaWJsaW5nLnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXByZXZpb3VzU2libGluZy5oYXNFcXVhbFNvdXJjZShwYXRoLmdldENoaWxkKCkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5jcmVhc2VRdWFudGlmaWVyQnlPbmUobm9kZS5xdWFudGlmaWVyKTtcbiAgICAgIHByZXZpb3VzU2libGluZy5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzR3JlZWR5T3BlblJhbmdlKHF1YW50aWZpZXIpIHtcbiAgcmV0dXJuIHF1YW50aWZpZXIuZ3JlZWR5ICYmIChxdWFudGlmaWVyLmtpbmQgPT09ICcrJyB8fCBxdWFudGlmaWVyLmtpbmQgPT09ICcqJyB8fCBxdWFudGlmaWVyLmtpbmQgPT09ICdSYW5nZScgJiYgIXF1YW50aWZpZXIudG8pO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RnJvbVRvKHF1YW50aWZpZXIpIHtcbiAgdmFyIGZyb20gPSB2b2lkIDAsXG4gICAgICB0byA9IHZvaWQgMDtcbiAgaWYgKHF1YW50aWZpZXIua2luZCA9PT0gJyonKSB7XG4gICAgZnJvbSA9IDA7XG4gIH0gZWxzZSBpZiAocXVhbnRpZmllci5raW5kID09PSAnKycpIHtcbiAgICBmcm9tID0gMTtcbiAgfSBlbHNlIGlmIChxdWFudGlmaWVyLmtpbmQgPT09ICc/Jykge1xuICAgIGZyb20gPSAwO1xuICAgIHRvID0gMTtcbiAgfSBlbHNlIHtcbiAgICBmcm9tID0gcXVhbnRpZmllci5mcm9tO1xuICAgIGlmIChxdWFudGlmaWVyLnRvKSB7XG4gICAgICB0byA9IHF1YW50aWZpZXIudG87XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGZyb206IGZyb20sIHRvOiB0byB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUdBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXJFQTtBQUNBO0FBdUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/quantifiers-merge-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/remove-empty-group-transform.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/remove-empty-group-transform.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to remove non-capturing empty groups.\n *\n * /(?:)a/ -> /a/\n * /a|(?:)/ -> /a|/\n */\n\nmodule.exports = {\n  Group: function Group(path) {\n    var node = path.node,\n        parent = path.parent;\n    var childPath = path.getChild();\n\n    if (node.capturing || childPath) {\n      return;\n    }\n\n    if (parent.type === 'Repetition') {\n      path.getParent().replace(node);\n    } else if (parent.type !== 'RegExp') {\n      path.remove();\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy9yZW1vdmUtZW1wdHktZ3JvdXAtdHJhbnNmb3JtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC10cmVlL2Rpc3Qvb3B0aW1pemVyL3RyYW5zZm9ybXMvcmVtb3ZlLWVtcHR5LWdyb3VwLXRyYW5zZm9ybS5qcz9lZjA4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSByZWdleHAtdHJlZSBwbHVnaW4gdG8gcmVtb3ZlIG5vbi1jYXB0dXJpbmcgZW1wdHkgZ3JvdXBzLlxuICpcbiAqIC8oPzopYS8gLT4gL2EvXG4gKiAvYXwoPzopLyAtPiAvYXwvXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdyb3VwOiBmdW5jdGlvbiBHcm91cChwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGUsXG4gICAgICAgIHBhcmVudCA9IHBhdGgucGFyZW50O1xuXG4gICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguZ2V0Q2hpbGQoKTtcblxuICAgIGlmIChub2RlLmNhcHR1cmluZyB8fCBjaGlsZFBhdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50LnR5cGUgPT09ICdSZXBldGl0aW9uJykge1xuXG4gICAgICBwYXRoLmdldFBhcmVudCgpLnJlcGxhY2Uobm9kZSk7XG4gICAgfSBlbHNlIGlmIChwYXJlbnQudHlwZSAhPT0gJ1JlZ0V4cCcpIHtcblxuICAgICAgcGF0aC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQWxCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/remove-empty-group-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/optimizer/transforms/ungroup-transform.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/optimizer/transforms/ungroup-transform.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * A regexp-tree plugin to remove unnecessary groups.\n *\n * /(?:a)/ -> /a/\n */\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nmodule.exports = {\n  Group: function Group(path) {\n    var node = path.node,\n        parent = path.parent;\n    var childPath = path.getChild();\n\n    if (node.capturing || !childPath) {\n      return;\n    } // Don't optimize \\1(?:0) to \\10\n\n\n    if (!hasAppropriateSiblings(path)) {\n      return;\n    } // Don't optimize /a(?:b|c)/ to /ab|c/\n    // but /(?:b|c)/ to /b|c/ is ok\n\n\n    if (childPath.node.type === 'Disjunction' && parent.type !== 'RegExp') {\n      return;\n    } // Don't optimize /(?:ab)+/ to /ab+/\n    // but /(?:a)+/ to /a+/ is ok\n    // and /(?:[a-d])+/ to /[a-d]+/ is ok too\n\n\n    if (parent.type === 'Repetition' && childPath.node.type !== 'Char' && childPath.node.type !== 'CharacterClass') {\n      return;\n    }\n\n    if (childPath.node.type === 'Alternative') {\n      var parentPath = path.getParent();\n\n      if (parentPath.node.type === 'Alternative') {\n        // /abc(?:def)ghi/ When (?:def) is ungrouped its content must be merged with parent alternative\n        parentPath.replace({\n          type: 'Alternative',\n          expressions: [].concat(_toConsumableArray(parent.expressions.slice(0, path.index)), _toConsumableArray(childPath.node.expressions), _toConsumableArray(parent.expressions.slice(path.index + 1)))\n        });\n      }\n    } else {\n      path.replace(childPath.node);\n    }\n  }\n};\n\nfunction hasAppropriateSiblings(path) {\n  var parent = path.parent,\n      index = path.index;\n\n  if (parent.type !== 'Alternative') {\n    return true;\n  }\n\n  var previousNode = parent.expressions[index - 1];\n\n  if (previousNode == null) {\n    return true;\n  } // Don't optimized \\1(?:0) to \\10\n\n\n  if (previousNode.type === 'Backreference' && previousNode.kind === 'number') {\n    return false;\n  } // Don't optimized \\2(?:0) to \\20\n\n\n  if (previousNode.type === 'Char' && previousNode.kind === 'decimal') {\n    return false;\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9vcHRpbWl6ZXIvdHJhbnNmb3Jtcy91bmdyb3VwLXRyYW5zZm9ybS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L29wdGltaXplci90cmFuc2Zvcm1zL3VuZ3JvdXAtdHJhbnNmb3JtLmpzPzliMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byByZW1vdmUgdW5uZWNlc3NhcnkgZ3JvdXBzLlxuICpcbiAqIC8oPzphKS8gLT4gL2EvXG4gKi9cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBHcm91cDogZnVuY3Rpb24gR3JvdXAocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlLFxuICAgICAgICBwYXJlbnQgPSBwYXRoLnBhcmVudDtcblxuICAgIHZhciBjaGlsZFBhdGggPSBwYXRoLmdldENoaWxkKCk7XG5cbiAgICBpZiAobm9kZS5jYXB0dXJpbmcgfHwgIWNoaWxkUGF0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IG9wdGltaXplIFxcMSg/OjApIHRvIFxcMTBcbiAgICBpZiAoIWhhc0FwcHJvcHJpYXRlU2libGluZ3MocGF0aCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBvcHRpbWl6ZSAvYSg/OmJ8YykvIHRvIC9hYnxjL1xuICAgIC8vIGJ1dCAvKD86YnxjKS8gdG8gL2J8Yy8gaXMgb2tcbiAgICBpZiAoY2hpbGRQYXRoLm5vZGUudHlwZSA9PT0gJ0Rpc2p1bmN0aW9uJyAmJiBwYXJlbnQudHlwZSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBvcHRpbWl6ZSAvKD86YWIpKy8gdG8gL2FiKy9cbiAgICAvLyBidXQgLyg/OmEpKy8gdG8gL2ErLyBpcyBva1xuICAgIC8vIGFuZCAvKD86W2EtZF0pKy8gdG8gL1thLWRdKy8gaXMgb2sgdG9vXG4gICAgaWYgKHBhcmVudC50eXBlID09PSAnUmVwZXRpdGlvbicgJiYgY2hpbGRQYXRoLm5vZGUudHlwZSAhPT0gJ0NoYXInICYmIGNoaWxkUGF0aC5ub2RlLnR5cGUgIT09ICdDaGFyYWN0ZXJDbGFzcycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRQYXRoLm5vZGUudHlwZSA9PT0gJ0FsdGVybmF0aXZlJykge1xuICAgICAgdmFyIHBhcmVudFBhdGggPSBwYXRoLmdldFBhcmVudCgpO1xuICAgICAgaWYgKHBhcmVudFBhdGgubm9kZS50eXBlID09PSAnQWx0ZXJuYXRpdmUnKSB7XG4gICAgICAgIC8vIC9hYmMoPzpkZWYpZ2hpLyBXaGVuICg/OmRlZikgaXMgdW5ncm91cGVkIGl0cyBjb250ZW50IG11c3QgYmUgbWVyZ2VkIHdpdGggcGFyZW50IGFsdGVybmF0aXZlXG5cbiAgICAgICAgcGFyZW50UGF0aC5yZXBsYWNlKHtcbiAgICAgICAgICB0eXBlOiAnQWx0ZXJuYXRpdmUnLFxuICAgICAgICAgIGV4cHJlc3Npb25zOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudC5leHByZXNzaW9ucy5zbGljZSgwLCBwYXRoLmluZGV4KSksIF90b0NvbnN1bWFibGVBcnJheShjaGlsZFBhdGgubm9kZS5leHByZXNzaW9ucyksIF90b0NvbnN1bWFibGVBcnJheShwYXJlbnQuZXhwcmVzc2lvbnMuc2xpY2UocGF0aC5pbmRleCArIDEpKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGgucmVwbGFjZShjaGlsZFBhdGgubm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBoYXNBcHByb3ByaWF0ZVNpYmxpbmdzKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHBhdGgucGFyZW50LFxuICAgICAgaW5kZXggPSBwYXRoLmluZGV4O1xuXG5cbiAgaWYgKHBhcmVudC50eXBlICE9PSAnQWx0ZXJuYXRpdmUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgcHJldmlvdXNOb2RlID0gcGFyZW50LmV4cHJlc3Npb25zW2luZGV4IC0gMV07XG4gIGlmIChwcmV2aW91c05vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRG9uJ3Qgb3B0aW1pemVkIFxcMSg/OjApIHRvIFxcMTBcbiAgaWYgKHByZXZpb3VzTm9kZS50eXBlID09PSAnQmFja3JlZmVyZW5jZScgJiYgcHJldmlvdXNOb2RlLmtpbmQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRG9uJ3Qgb3B0aW1pemVkIFxcMig/OjApIHRvIFxcMjBcbiAgaWYgKHByZXZpb3VzTm9kZS50eXBlID09PSAnQ2hhcicgJiYgcHJldmlvdXNOb2RlLmtpbmQgPT09ICdkZWNpbWFsJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7Ozs7QUFNQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQ0E7QUFDQTtBQTRDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/optimizer/transforms/ungroup-transform.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/parser/generated/regexp-tree.js":
/*!***********************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/parser/generated/regexp-tree.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * LR parser generated by the Syntax tool.\n *\n * https://www.npmjs.com/package/syntax-cli\n *\n *   npm install -g syntax-cli\n *\n *   syntax-cli --help\n *\n * To regenerate run:\n *\n *   syntax-cli \\\n *     --grammar ~/path-to-grammar-file \\\n *     --mode <parsing-mode> \\\n *     --output ~/path-to-output-parser-file.js\n */\n\n/**\n * Matched token text.\n */\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar yytext = void 0;\n/**\n * Length of the matched token text.\n */\n\nvar yyleng = void 0;\n/**\n * Storage object.\n */\n\nvar yy = {};\n/**\n * Result of semantic action.\n */\n\nvar __ = void 0;\n/**\n * Result location object.\n */\n\n\nvar __loc = void 0;\n\nfunction yyloc(start, end) {\n  if (!yy.options.captureLocations) {\n    return null;\n  } // Epsilon doesn't produce location.\n\n\n  if (!start || !end) {\n    return start || end;\n  }\n\n  return {\n    startOffset: start.startOffset,\n    endOffset: end.endOffset,\n    startLine: start.startLine,\n    endLine: end.endLine,\n    startColumn: start.startColumn,\n    endColumn: end.endColumn\n  };\n}\n\nvar EOF = '$';\n/**\n * List of productions (generated by Syntax tool).\n */\n\nvar productions = [[-1, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [0, 4, function (_1, _2, _3, _4, _1loc, _2loc, _3loc, _4loc) {\n  __loc = yyloc(_1loc, _4loc);\n  __ = Node({\n    type: 'RegExp',\n    body: _2,\n    flags: checkFlags(_4)\n  }, loc(_1loc, _4loc || _3loc));\n}], [1, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [1, 0, function () {\n  __loc = null;\n  __ = '';\n}], [2, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [2, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  __ = _1 + _2;\n}], [3, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [4, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [4, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc); // Location for empty disjunction: /|/\n\n  var _loc = null;\n\n  if (_2loc) {\n    _loc = loc(_1loc || _2loc, _3loc || _2loc);\n  }\n\n  ;\n  __ = Node({\n    type: 'Disjunction',\n    left: _1,\n    right: _3\n  }, _loc);\n}], [5, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n\n  if (_1.length === 0) {\n    __ = null;\n    return;\n  }\n\n  if (_1.length === 1) {\n    __ = Node(_1[0], __loc);\n  } else {\n    __ = Node({\n      type: 'Alternative',\n      expressions: _1\n    }, __loc);\n  }\n}], [6, 0, function () {\n  __loc = null;\n  __ = [];\n}], [6, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  __ = _1.concat(_2);\n}], [7, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Node(Object.assign({\n    type: 'Assertion'\n  }, _1), __loc);\n}], [7, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  __ = _1;\n\n  if (_2) {\n    __ = Node({\n      type: 'Repetition',\n      expression: _1,\n      quantifier: _2\n    }, __loc);\n  }\n}], [8, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = {\n    kind: '^'\n  };\n}], [8, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = {\n    kind: '$'\n  };\n}], [8, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = {\n    kind: '\\\\b'\n  };\n}], [8, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = {\n    kind: '\\\\B'\n  };\n}], [8, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = {\n    kind: 'Lookahead',\n    assertion: _2\n  };\n}], [8, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = {\n    kind: 'Lookahead',\n    negative: true,\n    assertion: _2\n  };\n}], [8, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = {\n    kind: 'Lookbehind',\n    assertion: _2\n  };\n}], [8, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = {\n    kind: 'Lookbehind',\n    negative: true,\n    assertion: _2\n  };\n}], [9, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [9, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [9, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'simple', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1.slice(1), 'simple', __loc);\n  __.escaped = true;\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'unicode', __loc);\n  __.isSurrogatePair = true;\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'unicode', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = UnicodeProperty(_1, __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'control', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'hex', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'oct', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = GroupRefOrDecChar(_1, __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'meta', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'meta', __loc);\n}], [10, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = NamedGroupRefOrChars(_1, _1loc);\n}], [11, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [11, 0], [12, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [12, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  _1.greedy = false;\n  __ = _1;\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Node({\n    type: 'Quantifier',\n    kind: _1,\n    greedy: true\n  }, __loc);\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Node({\n    type: 'Quantifier',\n    kind: _1,\n    greedy: true\n  }, __loc);\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Node({\n    type: 'Quantifier',\n    kind: _1,\n    greedy: true\n  }, __loc);\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  var range = getRange(_1);\n  __ = Node({\n    type: 'Quantifier',\n    kind: 'Range',\n    from: range[0],\n    to: range[0],\n    greedy: true\n  }, __loc);\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Node({\n    type: 'Quantifier',\n    kind: 'Range',\n    from: getRange(_1)[0],\n    greedy: true\n  }, __loc);\n}], [13, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  var range = getRange(_1);\n  __ = Node({\n    type: 'Quantifier',\n    kind: 'Range',\n    from: range[0],\n    to: range[1],\n    greedy: true\n  }, __loc);\n}], [14, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [14, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [15, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  var nameRaw = String(_1);\n  var name = decodeUnicodeGroupName(nameRaw);\n\n  if (namedGroups.hasOwnProperty(name)) {\n    throw new SyntaxError('Duplicate of the named group \"' + name + '\".');\n  }\n\n  namedGroups[name] = _1.groupNumber;\n  __ = Node({\n    type: 'Group',\n    capturing: true,\n    name: name,\n    nameRaw: nameRaw,\n    number: _1.groupNumber,\n    expression: _2\n  }, __loc);\n}], [15, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = Node({\n    type: 'Group',\n    capturing: true,\n    number: _1.groupNumber,\n    expression: _2\n  }, __loc);\n}], [16, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = Node({\n    type: 'Group',\n    capturing: false,\n    expression: _2\n  }, __loc);\n}], [17, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = Node({\n    type: 'CharacterClass',\n    negative: true,\n    expressions: _2\n  }, __loc);\n}], [17, 3, function (_1, _2, _3, _1loc, _2loc, _3loc) {\n  __loc = yyloc(_1loc, _3loc);\n  __ = Node({\n    type: 'CharacterClass',\n    expressions: _2\n  }, __loc);\n}], [18, 0, function () {\n  __loc = null;\n  __ = [];\n}], [18, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [19, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = [_1];\n}], [19, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  __ = [_1].concat(_2);\n}], [19, 4, function (_1, _2, _3, _4, _1loc, _2loc, _3loc, _4loc) {\n  __loc = yyloc(_1loc, _4loc);\n  checkClassRange(_1, _3);\n  __ = [Node({\n    type: 'ClassRange',\n    from: _1,\n    to: _3\n  }, loc(_1loc, _3loc))];\n\n  if (_4) {\n    __ = __.concat(_4);\n  }\n}], [20, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [20, 2, function (_1, _2, _1loc, _2loc) {\n  __loc = yyloc(_1loc, _2loc);\n  __ = [_1].concat(_2);\n}], [20, 4, function (_1, _2, _3, _4, _1loc, _2loc, _3loc, _4loc) {\n  __loc = yyloc(_1loc, _4loc);\n  checkClassRange(_1, _3);\n  __ = [Node({\n    type: 'ClassRange',\n    from: _1,\n    to: _3\n  }, loc(_1loc, _3loc))];\n\n  if (_4) {\n    __ = __.concat(_4);\n  }\n}], [21, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'simple', __loc);\n}], [21, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [22, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = _1;\n}], [22, 1, function (_1, _1loc) {\n  __loc = yyloc(_1loc, _1loc);\n  __ = Char(_1, 'meta', __loc);\n}]];\n/**\n * Encoded tokens map.\n */\n\nvar tokens = {\n  \"SLASH\": \"23\",\n  \"CHAR\": \"24\",\n  \"BAR\": \"25\",\n  \"BOS\": \"26\",\n  \"EOS\": \"27\",\n  \"ESC_b\": \"28\",\n  \"ESC_B\": \"29\",\n  \"POS_LA_ASSERT\": \"30\",\n  \"R_PAREN\": \"31\",\n  \"NEG_LA_ASSERT\": \"32\",\n  \"POS_LB_ASSERT\": \"33\",\n  \"NEG_LB_ASSERT\": \"34\",\n  \"ESC_CHAR\": \"35\",\n  \"U_CODE_SURROGATE\": \"36\",\n  \"U_CODE\": \"37\",\n  \"U_PROP_VALUE_EXP\": \"38\",\n  \"CTRL_CH\": \"39\",\n  \"HEX_CODE\": \"40\",\n  \"OCT_CODE\": \"41\",\n  \"DEC_CODE\": \"42\",\n  \"META_CHAR\": \"43\",\n  \"ANY\": \"44\",\n  \"NAMED_GROUP_REF\": \"45\",\n  \"Q_MARK\": \"46\",\n  \"STAR\": \"47\",\n  \"PLUS\": \"48\",\n  \"RANGE_EXACT\": \"49\",\n  \"RANGE_OPEN\": \"50\",\n  \"RANGE_CLOSED\": \"51\",\n  \"NAMED_CAPTURE_GROUP\": \"52\",\n  \"L_PAREN\": \"53\",\n  \"NON_CAPTURE_GROUP\": \"54\",\n  \"NEG_CLASS\": \"55\",\n  \"R_BRACKET\": \"56\",\n  \"L_BRACKET\": \"57\",\n  \"DASH\": \"58\",\n  \"$\": \"59\"\n};\n/**\n * Parsing table (generated by Syntax tool).\n */\n\nvar table = [{\n  \"0\": 1,\n  \"23\": \"s2\"\n}, {\n  \"59\": \"acc\"\n}, {\n  \"3\": 3,\n  \"4\": 4,\n  \"5\": 5,\n  \"6\": 6,\n  \"23\": \"r10\",\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"23\": \"s7\"\n}, {\n  \"23\": \"r6\",\n  \"25\": \"s12\"\n}, {\n  \"23\": \"r7\",\n  \"25\": \"r7\",\n  \"31\": \"r7\"\n}, {\n  \"7\": 14,\n  \"8\": 15,\n  \"9\": 16,\n  \"10\": 25,\n  \"14\": 27,\n  \"15\": 42,\n  \"16\": 43,\n  \"17\": 26,\n  \"23\": \"r9\",\n  \"24\": \"s28\",\n  \"25\": \"r9\",\n  \"26\": \"s17\",\n  \"27\": \"s18\",\n  \"28\": \"s19\",\n  \"29\": \"s20\",\n  \"30\": \"s21\",\n  \"31\": \"r9\",\n  \"32\": \"s22\",\n  \"33\": \"s23\",\n  \"34\": \"s24\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"52\": \"s44\",\n  \"53\": \"s45\",\n  \"54\": \"s46\",\n  \"55\": \"s40\",\n  \"57\": \"s41\"\n}, {\n  \"1\": 8,\n  \"2\": 9,\n  \"24\": \"s10\",\n  \"59\": \"r3\"\n}, {\n  \"59\": \"r1\"\n}, {\n  \"24\": \"s11\",\n  \"59\": \"r2\"\n}, {\n  \"24\": \"r4\",\n  \"59\": \"r4\"\n}, {\n  \"24\": \"r5\",\n  \"59\": \"r5\"\n}, {\n  \"5\": 13,\n  \"6\": 6,\n  \"23\": \"r10\",\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"23\": \"r8\",\n  \"25\": \"r8\",\n  \"31\": \"r8\"\n}, {\n  \"23\": \"r11\",\n  \"24\": \"r11\",\n  \"25\": \"r11\",\n  \"26\": \"r11\",\n  \"27\": \"r11\",\n  \"28\": \"r11\",\n  \"29\": \"r11\",\n  \"30\": \"r11\",\n  \"31\": \"r11\",\n  \"32\": \"r11\",\n  \"33\": \"r11\",\n  \"34\": \"r11\",\n  \"35\": \"r11\",\n  \"36\": \"r11\",\n  \"37\": \"r11\",\n  \"38\": \"r11\",\n  \"39\": \"r11\",\n  \"40\": \"r11\",\n  \"41\": \"r11\",\n  \"42\": \"r11\",\n  \"43\": \"r11\",\n  \"44\": \"r11\",\n  \"45\": \"r11\",\n  \"52\": \"r11\",\n  \"53\": \"r11\",\n  \"54\": \"r11\",\n  \"55\": \"r11\",\n  \"57\": \"r11\"\n}, {\n  \"23\": \"r12\",\n  \"24\": \"r12\",\n  \"25\": \"r12\",\n  \"26\": \"r12\",\n  \"27\": \"r12\",\n  \"28\": \"r12\",\n  \"29\": \"r12\",\n  \"30\": \"r12\",\n  \"31\": \"r12\",\n  \"32\": \"r12\",\n  \"33\": \"r12\",\n  \"34\": \"r12\",\n  \"35\": \"r12\",\n  \"36\": \"r12\",\n  \"37\": \"r12\",\n  \"38\": \"r12\",\n  \"39\": \"r12\",\n  \"40\": \"r12\",\n  \"41\": \"r12\",\n  \"42\": \"r12\",\n  \"43\": \"r12\",\n  \"44\": \"r12\",\n  \"45\": \"r12\",\n  \"52\": \"r12\",\n  \"53\": \"r12\",\n  \"54\": \"r12\",\n  \"55\": \"r12\",\n  \"57\": \"r12\"\n}, {\n  \"11\": 47,\n  \"12\": 48,\n  \"13\": 49,\n  \"23\": \"r38\",\n  \"24\": \"r38\",\n  \"25\": \"r38\",\n  \"26\": \"r38\",\n  \"27\": \"r38\",\n  \"28\": \"r38\",\n  \"29\": \"r38\",\n  \"30\": \"r38\",\n  \"31\": \"r38\",\n  \"32\": \"r38\",\n  \"33\": \"r38\",\n  \"34\": \"r38\",\n  \"35\": \"r38\",\n  \"36\": \"r38\",\n  \"37\": \"r38\",\n  \"38\": \"r38\",\n  \"39\": \"r38\",\n  \"40\": \"r38\",\n  \"41\": \"r38\",\n  \"42\": \"r38\",\n  \"43\": \"r38\",\n  \"44\": \"r38\",\n  \"45\": \"r38\",\n  \"46\": \"s52\",\n  \"47\": \"s50\",\n  \"48\": \"s51\",\n  \"49\": \"s53\",\n  \"50\": \"s54\",\n  \"51\": \"s55\",\n  \"52\": \"r38\",\n  \"53\": \"r38\",\n  \"54\": \"r38\",\n  \"55\": \"r38\",\n  \"57\": \"r38\"\n}, {\n  \"23\": \"r14\",\n  \"24\": \"r14\",\n  \"25\": \"r14\",\n  \"26\": \"r14\",\n  \"27\": \"r14\",\n  \"28\": \"r14\",\n  \"29\": \"r14\",\n  \"30\": \"r14\",\n  \"31\": \"r14\",\n  \"32\": \"r14\",\n  \"33\": \"r14\",\n  \"34\": \"r14\",\n  \"35\": \"r14\",\n  \"36\": \"r14\",\n  \"37\": \"r14\",\n  \"38\": \"r14\",\n  \"39\": \"r14\",\n  \"40\": \"r14\",\n  \"41\": \"r14\",\n  \"42\": \"r14\",\n  \"43\": \"r14\",\n  \"44\": \"r14\",\n  \"45\": \"r14\",\n  \"52\": \"r14\",\n  \"53\": \"r14\",\n  \"54\": \"r14\",\n  \"55\": \"r14\",\n  \"57\": \"r14\"\n}, {\n  \"23\": \"r15\",\n  \"24\": \"r15\",\n  \"25\": \"r15\",\n  \"26\": \"r15\",\n  \"27\": \"r15\",\n  \"28\": \"r15\",\n  \"29\": \"r15\",\n  \"30\": \"r15\",\n  \"31\": \"r15\",\n  \"32\": \"r15\",\n  \"33\": \"r15\",\n  \"34\": \"r15\",\n  \"35\": \"r15\",\n  \"36\": \"r15\",\n  \"37\": \"r15\",\n  \"38\": \"r15\",\n  \"39\": \"r15\",\n  \"40\": \"r15\",\n  \"41\": \"r15\",\n  \"42\": \"r15\",\n  \"43\": \"r15\",\n  \"44\": \"r15\",\n  \"45\": \"r15\",\n  \"52\": \"r15\",\n  \"53\": \"r15\",\n  \"54\": \"r15\",\n  \"55\": \"r15\",\n  \"57\": \"r15\"\n}, {\n  \"23\": \"r16\",\n  \"24\": \"r16\",\n  \"25\": \"r16\",\n  \"26\": \"r16\",\n  \"27\": \"r16\",\n  \"28\": \"r16\",\n  \"29\": \"r16\",\n  \"30\": \"r16\",\n  \"31\": \"r16\",\n  \"32\": \"r16\",\n  \"33\": \"r16\",\n  \"34\": \"r16\",\n  \"35\": \"r16\",\n  \"36\": \"r16\",\n  \"37\": \"r16\",\n  \"38\": \"r16\",\n  \"39\": \"r16\",\n  \"40\": \"r16\",\n  \"41\": \"r16\",\n  \"42\": \"r16\",\n  \"43\": \"r16\",\n  \"44\": \"r16\",\n  \"45\": \"r16\",\n  \"52\": \"r16\",\n  \"53\": \"r16\",\n  \"54\": \"r16\",\n  \"55\": \"r16\",\n  \"57\": \"r16\"\n}, {\n  \"23\": \"r17\",\n  \"24\": \"r17\",\n  \"25\": \"r17\",\n  \"26\": \"r17\",\n  \"27\": \"r17\",\n  \"28\": \"r17\",\n  \"29\": \"r17\",\n  \"30\": \"r17\",\n  \"31\": \"r17\",\n  \"32\": \"r17\",\n  \"33\": \"r17\",\n  \"34\": \"r17\",\n  \"35\": \"r17\",\n  \"36\": \"r17\",\n  \"37\": \"r17\",\n  \"38\": \"r17\",\n  \"39\": \"r17\",\n  \"40\": \"r17\",\n  \"41\": \"r17\",\n  \"42\": \"r17\",\n  \"43\": \"r17\",\n  \"44\": \"r17\",\n  \"45\": \"r17\",\n  \"52\": \"r17\",\n  \"53\": \"r17\",\n  \"54\": \"r17\",\n  \"55\": \"r17\",\n  \"57\": \"r17\"\n}, {\n  \"4\": 57,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"4\": 59,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"4\": 61,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"4\": 63,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"23\": \"r22\",\n  \"24\": \"r22\",\n  \"25\": \"r22\",\n  \"26\": \"r22\",\n  \"27\": \"r22\",\n  \"28\": \"r22\",\n  \"29\": \"r22\",\n  \"30\": \"r22\",\n  \"31\": \"r22\",\n  \"32\": \"r22\",\n  \"33\": \"r22\",\n  \"34\": \"r22\",\n  \"35\": \"r22\",\n  \"36\": \"r22\",\n  \"37\": \"r22\",\n  \"38\": \"r22\",\n  \"39\": \"r22\",\n  \"40\": \"r22\",\n  \"41\": \"r22\",\n  \"42\": \"r22\",\n  \"43\": \"r22\",\n  \"44\": \"r22\",\n  \"45\": \"r22\",\n  \"46\": \"r22\",\n  \"47\": \"r22\",\n  \"48\": \"r22\",\n  \"49\": \"r22\",\n  \"50\": \"r22\",\n  \"51\": \"r22\",\n  \"52\": \"r22\",\n  \"53\": \"r22\",\n  \"54\": \"r22\",\n  \"55\": \"r22\",\n  \"57\": \"r22\"\n}, {\n  \"23\": \"r23\",\n  \"24\": \"r23\",\n  \"25\": \"r23\",\n  \"26\": \"r23\",\n  \"27\": \"r23\",\n  \"28\": \"r23\",\n  \"29\": \"r23\",\n  \"30\": \"r23\",\n  \"31\": \"r23\",\n  \"32\": \"r23\",\n  \"33\": \"r23\",\n  \"34\": \"r23\",\n  \"35\": \"r23\",\n  \"36\": \"r23\",\n  \"37\": \"r23\",\n  \"38\": \"r23\",\n  \"39\": \"r23\",\n  \"40\": \"r23\",\n  \"41\": \"r23\",\n  \"42\": \"r23\",\n  \"43\": \"r23\",\n  \"44\": \"r23\",\n  \"45\": \"r23\",\n  \"46\": \"r23\",\n  \"47\": \"r23\",\n  \"48\": \"r23\",\n  \"49\": \"r23\",\n  \"50\": \"r23\",\n  \"51\": \"r23\",\n  \"52\": \"r23\",\n  \"53\": \"r23\",\n  \"54\": \"r23\",\n  \"55\": \"r23\",\n  \"57\": \"r23\"\n}, {\n  \"23\": \"r24\",\n  \"24\": \"r24\",\n  \"25\": \"r24\",\n  \"26\": \"r24\",\n  \"27\": \"r24\",\n  \"28\": \"r24\",\n  \"29\": \"r24\",\n  \"30\": \"r24\",\n  \"31\": \"r24\",\n  \"32\": \"r24\",\n  \"33\": \"r24\",\n  \"34\": \"r24\",\n  \"35\": \"r24\",\n  \"36\": \"r24\",\n  \"37\": \"r24\",\n  \"38\": \"r24\",\n  \"39\": \"r24\",\n  \"40\": \"r24\",\n  \"41\": \"r24\",\n  \"42\": \"r24\",\n  \"43\": \"r24\",\n  \"44\": \"r24\",\n  \"45\": \"r24\",\n  \"46\": \"r24\",\n  \"47\": \"r24\",\n  \"48\": \"r24\",\n  \"49\": \"r24\",\n  \"50\": \"r24\",\n  \"51\": \"r24\",\n  \"52\": \"r24\",\n  \"53\": \"r24\",\n  \"54\": \"r24\",\n  \"55\": \"r24\",\n  \"57\": \"r24\"\n}, {\n  \"23\": \"r25\",\n  \"24\": \"r25\",\n  \"25\": \"r25\",\n  \"26\": \"r25\",\n  \"27\": \"r25\",\n  \"28\": \"r25\",\n  \"29\": \"r25\",\n  \"30\": \"r25\",\n  \"31\": \"r25\",\n  \"32\": \"r25\",\n  \"33\": \"r25\",\n  \"34\": \"r25\",\n  \"35\": \"r25\",\n  \"36\": \"r25\",\n  \"37\": \"r25\",\n  \"38\": \"r25\",\n  \"39\": \"r25\",\n  \"40\": \"r25\",\n  \"41\": \"r25\",\n  \"42\": \"r25\",\n  \"43\": \"r25\",\n  \"44\": \"r25\",\n  \"45\": \"r25\",\n  \"46\": \"r25\",\n  \"47\": \"r25\",\n  \"48\": \"r25\",\n  \"49\": \"r25\",\n  \"50\": \"r25\",\n  \"51\": \"r25\",\n  \"52\": \"r25\",\n  \"53\": \"r25\",\n  \"54\": \"r25\",\n  \"55\": \"r25\",\n  \"56\": \"r25\",\n  \"57\": \"r25\",\n  \"58\": \"r25\"\n}, {\n  \"23\": \"r26\",\n  \"24\": \"r26\",\n  \"25\": \"r26\",\n  \"26\": \"r26\",\n  \"27\": \"r26\",\n  \"28\": \"r26\",\n  \"29\": \"r26\",\n  \"30\": \"r26\",\n  \"31\": \"r26\",\n  \"32\": \"r26\",\n  \"33\": \"r26\",\n  \"34\": \"r26\",\n  \"35\": \"r26\",\n  \"36\": \"r26\",\n  \"37\": \"r26\",\n  \"38\": \"r26\",\n  \"39\": \"r26\",\n  \"40\": \"r26\",\n  \"41\": \"r26\",\n  \"42\": \"r26\",\n  \"43\": \"r26\",\n  \"44\": \"r26\",\n  \"45\": \"r26\",\n  \"46\": \"r26\",\n  \"47\": \"r26\",\n  \"48\": \"r26\",\n  \"49\": \"r26\",\n  \"50\": \"r26\",\n  \"51\": \"r26\",\n  \"52\": \"r26\",\n  \"53\": \"r26\",\n  \"54\": \"r26\",\n  \"55\": \"r26\",\n  \"56\": \"r26\",\n  \"57\": \"r26\",\n  \"58\": \"r26\"\n}, {\n  \"23\": \"r27\",\n  \"24\": \"r27\",\n  \"25\": \"r27\",\n  \"26\": \"r27\",\n  \"27\": \"r27\",\n  \"28\": \"r27\",\n  \"29\": \"r27\",\n  \"30\": \"r27\",\n  \"31\": \"r27\",\n  \"32\": \"r27\",\n  \"33\": \"r27\",\n  \"34\": \"r27\",\n  \"35\": \"r27\",\n  \"36\": \"r27\",\n  \"37\": \"r27\",\n  \"38\": \"r27\",\n  \"39\": \"r27\",\n  \"40\": \"r27\",\n  \"41\": \"r27\",\n  \"42\": \"r27\",\n  \"43\": \"r27\",\n  \"44\": \"r27\",\n  \"45\": \"r27\",\n  \"46\": \"r27\",\n  \"47\": \"r27\",\n  \"48\": \"r27\",\n  \"49\": \"r27\",\n  \"50\": \"r27\",\n  \"51\": \"r27\",\n  \"52\": \"r27\",\n  \"53\": \"r27\",\n  \"54\": \"r27\",\n  \"55\": \"r27\",\n  \"56\": \"r27\",\n  \"57\": \"r27\",\n  \"58\": \"r27\"\n}, {\n  \"23\": \"r28\",\n  \"24\": \"r28\",\n  \"25\": \"r28\",\n  \"26\": \"r28\",\n  \"27\": \"r28\",\n  \"28\": \"r28\",\n  \"29\": \"r28\",\n  \"30\": \"r28\",\n  \"31\": \"r28\",\n  \"32\": \"r28\",\n  \"33\": \"r28\",\n  \"34\": \"r28\",\n  \"35\": \"r28\",\n  \"36\": \"r28\",\n  \"37\": \"r28\",\n  \"38\": \"r28\",\n  \"39\": \"r28\",\n  \"40\": \"r28\",\n  \"41\": \"r28\",\n  \"42\": \"r28\",\n  \"43\": \"r28\",\n  \"44\": \"r28\",\n  \"45\": \"r28\",\n  \"46\": \"r28\",\n  \"47\": \"r28\",\n  \"48\": \"r28\",\n  \"49\": \"r28\",\n  \"50\": \"r28\",\n  \"51\": \"r28\",\n  \"52\": \"r28\",\n  \"53\": \"r28\",\n  \"54\": \"r28\",\n  \"55\": \"r28\",\n  \"56\": \"r28\",\n  \"57\": \"r28\",\n  \"58\": \"r28\"\n}, {\n  \"23\": \"r29\",\n  \"24\": \"r29\",\n  \"25\": \"r29\",\n  \"26\": \"r29\",\n  \"27\": \"r29\",\n  \"28\": \"r29\",\n  \"29\": \"r29\",\n  \"30\": \"r29\",\n  \"31\": \"r29\",\n  \"32\": \"r29\",\n  \"33\": \"r29\",\n  \"34\": \"r29\",\n  \"35\": \"r29\",\n  \"36\": \"r29\",\n  \"37\": \"r29\",\n  \"38\": \"r29\",\n  \"39\": \"r29\",\n  \"40\": \"r29\",\n  \"41\": \"r29\",\n  \"42\": \"r29\",\n  \"43\": \"r29\",\n  \"44\": \"r29\",\n  \"45\": \"r29\",\n  \"46\": \"r29\",\n  \"47\": \"r29\",\n  \"48\": \"r29\",\n  \"49\": \"r29\",\n  \"50\": \"r29\",\n  \"51\": \"r29\",\n  \"52\": \"r29\",\n  \"53\": \"r29\",\n  \"54\": \"r29\",\n  \"55\": \"r29\",\n  \"56\": \"r29\",\n  \"57\": \"r29\",\n  \"58\": \"r29\"\n}, {\n  \"23\": \"r30\",\n  \"24\": \"r30\",\n  \"25\": \"r30\",\n  \"26\": \"r30\",\n  \"27\": \"r30\",\n  \"28\": \"r30\",\n  \"29\": \"r30\",\n  \"30\": \"r30\",\n  \"31\": \"r30\",\n  \"32\": \"r30\",\n  \"33\": \"r30\",\n  \"34\": \"r30\",\n  \"35\": \"r30\",\n  \"36\": \"r30\",\n  \"37\": \"r30\",\n  \"38\": \"r30\",\n  \"39\": \"r30\",\n  \"40\": \"r30\",\n  \"41\": \"r30\",\n  \"42\": \"r30\",\n  \"43\": \"r30\",\n  \"44\": \"r30\",\n  \"45\": \"r30\",\n  \"46\": \"r30\",\n  \"47\": \"r30\",\n  \"48\": \"r30\",\n  \"49\": \"r30\",\n  \"50\": \"r30\",\n  \"51\": \"r30\",\n  \"52\": \"r30\",\n  \"53\": \"r30\",\n  \"54\": \"r30\",\n  \"55\": \"r30\",\n  \"56\": \"r30\",\n  \"57\": \"r30\",\n  \"58\": \"r30\"\n}, {\n  \"23\": \"r31\",\n  \"24\": \"r31\",\n  \"25\": \"r31\",\n  \"26\": \"r31\",\n  \"27\": \"r31\",\n  \"28\": \"r31\",\n  \"29\": \"r31\",\n  \"30\": \"r31\",\n  \"31\": \"r31\",\n  \"32\": \"r31\",\n  \"33\": \"r31\",\n  \"34\": \"r31\",\n  \"35\": \"r31\",\n  \"36\": \"r31\",\n  \"37\": \"r31\",\n  \"38\": \"r31\",\n  \"39\": \"r31\",\n  \"40\": \"r31\",\n  \"41\": \"r31\",\n  \"42\": \"r31\",\n  \"43\": \"r31\",\n  \"44\": \"r31\",\n  \"45\": \"r31\",\n  \"46\": \"r31\",\n  \"47\": \"r31\",\n  \"48\": \"r31\",\n  \"49\": \"r31\",\n  \"50\": \"r31\",\n  \"51\": \"r31\",\n  \"52\": \"r31\",\n  \"53\": \"r31\",\n  \"54\": \"r31\",\n  \"55\": \"r31\",\n  \"56\": \"r31\",\n  \"57\": \"r31\",\n  \"58\": \"r31\"\n}, {\n  \"23\": \"r32\",\n  \"24\": \"r32\",\n  \"25\": \"r32\",\n  \"26\": \"r32\",\n  \"27\": \"r32\",\n  \"28\": \"r32\",\n  \"29\": \"r32\",\n  \"30\": \"r32\",\n  \"31\": \"r32\",\n  \"32\": \"r32\",\n  \"33\": \"r32\",\n  \"34\": \"r32\",\n  \"35\": \"r32\",\n  \"36\": \"r32\",\n  \"37\": \"r32\",\n  \"38\": \"r32\",\n  \"39\": \"r32\",\n  \"40\": \"r32\",\n  \"41\": \"r32\",\n  \"42\": \"r32\",\n  \"43\": \"r32\",\n  \"44\": \"r32\",\n  \"45\": \"r32\",\n  \"46\": \"r32\",\n  \"47\": \"r32\",\n  \"48\": \"r32\",\n  \"49\": \"r32\",\n  \"50\": \"r32\",\n  \"51\": \"r32\",\n  \"52\": \"r32\",\n  \"53\": \"r32\",\n  \"54\": \"r32\",\n  \"55\": \"r32\",\n  \"56\": \"r32\",\n  \"57\": \"r32\",\n  \"58\": \"r32\"\n}, {\n  \"23\": \"r33\",\n  \"24\": \"r33\",\n  \"25\": \"r33\",\n  \"26\": \"r33\",\n  \"27\": \"r33\",\n  \"28\": \"r33\",\n  \"29\": \"r33\",\n  \"30\": \"r33\",\n  \"31\": \"r33\",\n  \"32\": \"r33\",\n  \"33\": \"r33\",\n  \"34\": \"r33\",\n  \"35\": \"r33\",\n  \"36\": \"r33\",\n  \"37\": \"r33\",\n  \"38\": \"r33\",\n  \"39\": \"r33\",\n  \"40\": \"r33\",\n  \"41\": \"r33\",\n  \"42\": \"r33\",\n  \"43\": \"r33\",\n  \"44\": \"r33\",\n  \"45\": \"r33\",\n  \"46\": \"r33\",\n  \"47\": \"r33\",\n  \"48\": \"r33\",\n  \"49\": \"r33\",\n  \"50\": \"r33\",\n  \"51\": \"r33\",\n  \"52\": \"r33\",\n  \"53\": \"r33\",\n  \"54\": \"r33\",\n  \"55\": \"r33\",\n  \"56\": \"r33\",\n  \"57\": \"r33\",\n  \"58\": \"r33\"\n}, {\n  \"23\": \"r34\",\n  \"24\": \"r34\",\n  \"25\": \"r34\",\n  \"26\": \"r34\",\n  \"27\": \"r34\",\n  \"28\": \"r34\",\n  \"29\": \"r34\",\n  \"30\": \"r34\",\n  \"31\": \"r34\",\n  \"32\": \"r34\",\n  \"33\": \"r34\",\n  \"34\": \"r34\",\n  \"35\": \"r34\",\n  \"36\": \"r34\",\n  \"37\": \"r34\",\n  \"38\": \"r34\",\n  \"39\": \"r34\",\n  \"40\": \"r34\",\n  \"41\": \"r34\",\n  \"42\": \"r34\",\n  \"43\": \"r34\",\n  \"44\": \"r34\",\n  \"45\": \"r34\",\n  \"46\": \"r34\",\n  \"47\": \"r34\",\n  \"48\": \"r34\",\n  \"49\": \"r34\",\n  \"50\": \"r34\",\n  \"51\": \"r34\",\n  \"52\": \"r34\",\n  \"53\": \"r34\",\n  \"54\": \"r34\",\n  \"55\": \"r34\",\n  \"56\": \"r34\",\n  \"57\": \"r34\",\n  \"58\": \"r34\"\n}, {\n  \"23\": \"r35\",\n  \"24\": \"r35\",\n  \"25\": \"r35\",\n  \"26\": \"r35\",\n  \"27\": \"r35\",\n  \"28\": \"r35\",\n  \"29\": \"r35\",\n  \"30\": \"r35\",\n  \"31\": \"r35\",\n  \"32\": \"r35\",\n  \"33\": \"r35\",\n  \"34\": \"r35\",\n  \"35\": \"r35\",\n  \"36\": \"r35\",\n  \"37\": \"r35\",\n  \"38\": \"r35\",\n  \"39\": \"r35\",\n  \"40\": \"r35\",\n  \"41\": \"r35\",\n  \"42\": \"r35\",\n  \"43\": \"r35\",\n  \"44\": \"r35\",\n  \"45\": \"r35\",\n  \"46\": \"r35\",\n  \"47\": \"r35\",\n  \"48\": \"r35\",\n  \"49\": \"r35\",\n  \"50\": \"r35\",\n  \"51\": \"r35\",\n  \"52\": \"r35\",\n  \"53\": \"r35\",\n  \"54\": \"r35\",\n  \"55\": \"r35\",\n  \"56\": \"r35\",\n  \"57\": \"r35\",\n  \"58\": \"r35\"\n}, {\n  \"23\": \"r36\",\n  \"24\": \"r36\",\n  \"25\": \"r36\",\n  \"26\": \"r36\",\n  \"27\": \"r36\",\n  \"28\": \"r36\",\n  \"29\": \"r36\",\n  \"30\": \"r36\",\n  \"31\": \"r36\",\n  \"32\": \"r36\",\n  \"33\": \"r36\",\n  \"34\": \"r36\",\n  \"35\": \"r36\",\n  \"36\": \"r36\",\n  \"37\": \"r36\",\n  \"38\": \"r36\",\n  \"39\": \"r36\",\n  \"40\": \"r36\",\n  \"41\": \"r36\",\n  \"42\": \"r36\",\n  \"43\": \"r36\",\n  \"44\": \"r36\",\n  \"45\": \"r36\",\n  \"46\": \"r36\",\n  \"47\": \"r36\",\n  \"48\": \"r36\",\n  \"49\": \"r36\",\n  \"50\": \"r36\",\n  \"51\": \"r36\",\n  \"52\": \"r36\",\n  \"53\": \"r36\",\n  \"54\": \"r36\",\n  \"55\": \"r36\",\n  \"56\": \"r36\",\n  \"57\": \"r36\",\n  \"58\": \"r36\"\n}, {\n  \"10\": 70,\n  \"18\": 65,\n  \"19\": 66,\n  \"21\": 67,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r54\",\n  \"58\": \"s68\"\n}, {\n  \"10\": 70,\n  \"18\": 83,\n  \"19\": 66,\n  \"21\": 67,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r54\",\n  \"58\": \"s68\"\n}, {\n  \"23\": \"r47\",\n  \"24\": \"r47\",\n  \"25\": \"r47\",\n  \"26\": \"r47\",\n  \"27\": \"r47\",\n  \"28\": \"r47\",\n  \"29\": \"r47\",\n  \"30\": \"r47\",\n  \"31\": \"r47\",\n  \"32\": \"r47\",\n  \"33\": \"r47\",\n  \"34\": \"r47\",\n  \"35\": \"r47\",\n  \"36\": \"r47\",\n  \"37\": \"r47\",\n  \"38\": \"r47\",\n  \"39\": \"r47\",\n  \"40\": \"r47\",\n  \"41\": \"r47\",\n  \"42\": \"r47\",\n  \"43\": \"r47\",\n  \"44\": \"r47\",\n  \"45\": \"r47\",\n  \"46\": \"r47\",\n  \"47\": \"r47\",\n  \"48\": \"r47\",\n  \"49\": \"r47\",\n  \"50\": \"r47\",\n  \"51\": \"r47\",\n  \"52\": \"r47\",\n  \"53\": \"r47\",\n  \"54\": \"r47\",\n  \"55\": \"r47\",\n  \"57\": \"r47\"\n}, {\n  \"23\": \"r48\",\n  \"24\": \"r48\",\n  \"25\": \"r48\",\n  \"26\": \"r48\",\n  \"27\": \"r48\",\n  \"28\": \"r48\",\n  \"29\": \"r48\",\n  \"30\": \"r48\",\n  \"31\": \"r48\",\n  \"32\": \"r48\",\n  \"33\": \"r48\",\n  \"34\": \"r48\",\n  \"35\": \"r48\",\n  \"36\": \"r48\",\n  \"37\": \"r48\",\n  \"38\": \"r48\",\n  \"39\": \"r48\",\n  \"40\": \"r48\",\n  \"41\": \"r48\",\n  \"42\": \"r48\",\n  \"43\": \"r48\",\n  \"44\": \"r48\",\n  \"45\": \"r48\",\n  \"46\": \"r48\",\n  \"47\": \"r48\",\n  \"48\": \"r48\",\n  \"49\": \"r48\",\n  \"50\": \"r48\",\n  \"51\": \"r48\",\n  \"52\": \"r48\",\n  \"53\": \"r48\",\n  \"54\": \"r48\",\n  \"55\": \"r48\",\n  \"57\": \"r48\"\n}, {\n  \"4\": 85,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"4\": 87,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"4\": 89,\n  \"5\": 5,\n  \"6\": 6,\n  \"24\": \"r10\",\n  \"25\": \"r10\",\n  \"26\": \"r10\",\n  \"27\": \"r10\",\n  \"28\": \"r10\",\n  \"29\": \"r10\",\n  \"30\": \"r10\",\n  \"31\": \"r10\",\n  \"32\": \"r10\",\n  \"33\": \"r10\",\n  \"34\": \"r10\",\n  \"35\": \"r10\",\n  \"36\": \"r10\",\n  \"37\": \"r10\",\n  \"38\": \"r10\",\n  \"39\": \"r10\",\n  \"40\": \"r10\",\n  \"41\": \"r10\",\n  \"42\": \"r10\",\n  \"43\": \"r10\",\n  \"44\": \"r10\",\n  \"45\": \"r10\",\n  \"52\": \"r10\",\n  \"53\": \"r10\",\n  \"54\": \"r10\",\n  \"55\": \"r10\",\n  \"57\": \"r10\"\n}, {\n  \"23\": \"r13\",\n  \"24\": \"r13\",\n  \"25\": \"r13\",\n  \"26\": \"r13\",\n  \"27\": \"r13\",\n  \"28\": \"r13\",\n  \"29\": \"r13\",\n  \"30\": \"r13\",\n  \"31\": \"r13\",\n  \"32\": \"r13\",\n  \"33\": \"r13\",\n  \"34\": \"r13\",\n  \"35\": \"r13\",\n  \"36\": \"r13\",\n  \"37\": \"r13\",\n  \"38\": \"r13\",\n  \"39\": \"r13\",\n  \"40\": \"r13\",\n  \"41\": \"r13\",\n  \"42\": \"r13\",\n  \"43\": \"r13\",\n  \"44\": \"r13\",\n  \"45\": \"r13\",\n  \"52\": \"r13\",\n  \"53\": \"r13\",\n  \"54\": \"r13\",\n  \"55\": \"r13\",\n  \"57\": \"r13\"\n}, {\n  \"23\": \"r37\",\n  \"24\": \"r37\",\n  \"25\": \"r37\",\n  \"26\": \"r37\",\n  \"27\": \"r37\",\n  \"28\": \"r37\",\n  \"29\": \"r37\",\n  \"30\": \"r37\",\n  \"31\": \"r37\",\n  \"32\": \"r37\",\n  \"33\": \"r37\",\n  \"34\": \"r37\",\n  \"35\": \"r37\",\n  \"36\": \"r37\",\n  \"37\": \"r37\",\n  \"38\": \"r37\",\n  \"39\": \"r37\",\n  \"40\": \"r37\",\n  \"41\": \"r37\",\n  \"42\": \"r37\",\n  \"43\": \"r37\",\n  \"44\": \"r37\",\n  \"45\": \"r37\",\n  \"52\": \"r37\",\n  \"53\": \"r37\",\n  \"54\": \"r37\",\n  \"55\": \"r37\",\n  \"57\": \"r37\"\n}, {\n  \"23\": \"r39\",\n  \"24\": \"r39\",\n  \"25\": \"r39\",\n  \"26\": \"r39\",\n  \"27\": \"r39\",\n  \"28\": \"r39\",\n  \"29\": \"r39\",\n  \"30\": \"r39\",\n  \"31\": \"r39\",\n  \"32\": \"r39\",\n  \"33\": \"r39\",\n  \"34\": \"r39\",\n  \"35\": \"r39\",\n  \"36\": \"r39\",\n  \"37\": \"r39\",\n  \"38\": \"r39\",\n  \"39\": \"r39\",\n  \"40\": \"r39\",\n  \"41\": \"r39\",\n  \"42\": \"r39\",\n  \"43\": \"r39\",\n  \"44\": \"r39\",\n  \"45\": \"r39\",\n  \"46\": \"s56\",\n  \"52\": \"r39\",\n  \"53\": \"r39\",\n  \"54\": \"r39\",\n  \"55\": \"r39\",\n  \"57\": \"r39\"\n}, {\n  \"23\": \"r41\",\n  \"24\": \"r41\",\n  \"25\": \"r41\",\n  \"26\": \"r41\",\n  \"27\": \"r41\",\n  \"28\": \"r41\",\n  \"29\": \"r41\",\n  \"30\": \"r41\",\n  \"31\": \"r41\",\n  \"32\": \"r41\",\n  \"33\": \"r41\",\n  \"34\": \"r41\",\n  \"35\": \"r41\",\n  \"36\": \"r41\",\n  \"37\": \"r41\",\n  \"38\": \"r41\",\n  \"39\": \"r41\",\n  \"40\": \"r41\",\n  \"41\": \"r41\",\n  \"42\": \"r41\",\n  \"43\": \"r41\",\n  \"44\": \"r41\",\n  \"45\": \"r41\",\n  \"46\": \"r41\",\n  \"52\": \"r41\",\n  \"53\": \"r41\",\n  \"54\": \"r41\",\n  \"55\": \"r41\",\n  \"57\": \"r41\"\n}, {\n  \"23\": \"r42\",\n  \"24\": \"r42\",\n  \"25\": \"r42\",\n  \"26\": \"r42\",\n  \"27\": \"r42\",\n  \"28\": \"r42\",\n  \"29\": \"r42\",\n  \"30\": \"r42\",\n  \"31\": \"r42\",\n  \"32\": \"r42\",\n  \"33\": \"r42\",\n  \"34\": \"r42\",\n  \"35\": \"r42\",\n  \"36\": \"r42\",\n  \"37\": \"r42\",\n  \"38\": \"r42\",\n  \"39\": \"r42\",\n  \"40\": \"r42\",\n  \"41\": \"r42\",\n  \"42\": \"r42\",\n  \"43\": \"r42\",\n  \"44\": \"r42\",\n  \"45\": \"r42\",\n  \"46\": \"r42\",\n  \"52\": \"r42\",\n  \"53\": \"r42\",\n  \"54\": \"r42\",\n  \"55\": \"r42\",\n  \"57\": \"r42\"\n}, {\n  \"23\": \"r43\",\n  \"24\": \"r43\",\n  \"25\": \"r43\",\n  \"26\": \"r43\",\n  \"27\": \"r43\",\n  \"28\": \"r43\",\n  \"29\": \"r43\",\n  \"30\": \"r43\",\n  \"31\": \"r43\",\n  \"32\": \"r43\",\n  \"33\": \"r43\",\n  \"34\": \"r43\",\n  \"35\": \"r43\",\n  \"36\": \"r43\",\n  \"37\": \"r43\",\n  \"38\": \"r43\",\n  \"39\": \"r43\",\n  \"40\": \"r43\",\n  \"41\": \"r43\",\n  \"42\": \"r43\",\n  \"43\": \"r43\",\n  \"44\": \"r43\",\n  \"45\": \"r43\",\n  \"46\": \"r43\",\n  \"52\": \"r43\",\n  \"53\": \"r43\",\n  \"54\": \"r43\",\n  \"55\": \"r43\",\n  \"57\": \"r43\"\n}, {\n  \"23\": \"r44\",\n  \"24\": \"r44\",\n  \"25\": \"r44\",\n  \"26\": \"r44\",\n  \"27\": \"r44\",\n  \"28\": \"r44\",\n  \"29\": \"r44\",\n  \"30\": \"r44\",\n  \"31\": \"r44\",\n  \"32\": \"r44\",\n  \"33\": \"r44\",\n  \"34\": \"r44\",\n  \"35\": \"r44\",\n  \"36\": \"r44\",\n  \"37\": \"r44\",\n  \"38\": \"r44\",\n  \"39\": \"r44\",\n  \"40\": \"r44\",\n  \"41\": \"r44\",\n  \"42\": \"r44\",\n  \"43\": \"r44\",\n  \"44\": \"r44\",\n  \"45\": \"r44\",\n  \"46\": \"r44\",\n  \"52\": \"r44\",\n  \"53\": \"r44\",\n  \"54\": \"r44\",\n  \"55\": \"r44\",\n  \"57\": \"r44\"\n}, {\n  \"23\": \"r45\",\n  \"24\": \"r45\",\n  \"25\": \"r45\",\n  \"26\": \"r45\",\n  \"27\": \"r45\",\n  \"28\": \"r45\",\n  \"29\": \"r45\",\n  \"30\": \"r45\",\n  \"31\": \"r45\",\n  \"32\": \"r45\",\n  \"33\": \"r45\",\n  \"34\": \"r45\",\n  \"35\": \"r45\",\n  \"36\": \"r45\",\n  \"37\": \"r45\",\n  \"38\": \"r45\",\n  \"39\": \"r45\",\n  \"40\": \"r45\",\n  \"41\": \"r45\",\n  \"42\": \"r45\",\n  \"43\": \"r45\",\n  \"44\": \"r45\",\n  \"45\": \"r45\",\n  \"46\": \"r45\",\n  \"52\": \"r45\",\n  \"53\": \"r45\",\n  \"54\": \"r45\",\n  \"55\": \"r45\",\n  \"57\": \"r45\"\n}, {\n  \"23\": \"r46\",\n  \"24\": \"r46\",\n  \"25\": \"r46\",\n  \"26\": \"r46\",\n  \"27\": \"r46\",\n  \"28\": \"r46\",\n  \"29\": \"r46\",\n  \"30\": \"r46\",\n  \"31\": \"r46\",\n  \"32\": \"r46\",\n  \"33\": \"r46\",\n  \"34\": \"r46\",\n  \"35\": \"r46\",\n  \"36\": \"r46\",\n  \"37\": \"r46\",\n  \"38\": \"r46\",\n  \"39\": \"r46\",\n  \"40\": \"r46\",\n  \"41\": \"r46\",\n  \"42\": \"r46\",\n  \"43\": \"r46\",\n  \"44\": \"r46\",\n  \"45\": \"r46\",\n  \"46\": \"r46\",\n  \"52\": \"r46\",\n  \"53\": \"r46\",\n  \"54\": \"r46\",\n  \"55\": \"r46\",\n  \"57\": \"r46\"\n}, {\n  \"23\": \"r40\",\n  \"24\": \"r40\",\n  \"25\": \"r40\",\n  \"26\": \"r40\",\n  \"27\": \"r40\",\n  \"28\": \"r40\",\n  \"29\": \"r40\",\n  \"30\": \"r40\",\n  \"31\": \"r40\",\n  \"32\": \"r40\",\n  \"33\": \"r40\",\n  \"34\": \"r40\",\n  \"35\": \"r40\",\n  \"36\": \"r40\",\n  \"37\": \"r40\",\n  \"38\": \"r40\",\n  \"39\": \"r40\",\n  \"40\": \"r40\",\n  \"41\": \"r40\",\n  \"42\": \"r40\",\n  \"43\": \"r40\",\n  \"44\": \"r40\",\n  \"45\": \"r40\",\n  \"52\": \"r40\",\n  \"53\": \"r40\",\n  \"54\": \"r40\",\n  \"55\": \"r40\",\n  \"57\": \"r40\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s58\"\n}, {\n  \"23\": \"r18\",\n  \"24\": \"r18\",\n  \"25\": \"r18\",\n  \"26\": \"r18\",\n  \"27\": \"r18\",\n  \"28\": \"r18\",\n  \"29\": \"r18\",\n  \"30\": \"r18\",\n  \"31\": \"r18\",\n  \"32\": \"r18\",\n  \"33\": \"r18\",\n  \"34\": \"r18\",\n  \"35\": \"r18\",\n  \"36\": \"r18\",\n  \"37\": \"r18\",\n  \"38\": \"r18\",\n  \"39\": \"r18\",\n  \"40\": \"r18\",\n  \"41\": \"r18\",\n  \"42\": \"r18\",\n  \"43\": \"r18\",\n  \"44\": \"r18\",\n  \"45\": \"r18\",\n  \"52\": \"r18\",\n  \"53\": \"r18\",\n  \"54\": \"r18\",\n  \"55\": \"r18\",\n  \"57\": \"r18\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s60\"\n}, {\n  \"23\": \"r19\",\n  \"24\": \"r19\",\n  \"25\": \"r19\",\n  \"26\": \"r19\",\n  \"27\": \"r19\",\n  \"28\": \"r19\",\n  \"29\": \"r19\",\n  \"30\": \"r19\",\n  \"31\": \"r19\",\n  \"32\": \"r19\",\n  \"33\": \"r19\",\n  \"34\": \"r19\",\n  \"35\": \"r19\",\n  \"36\": \"r19\",\n  \"37\": \"r19\",\n  \"38\": \"r19\",\n  \"39\": \"r19\",\n  \"40\": \"r19\",\n  \"41\": \"r19\",\n  \"42\": \"r19\",\n  \"43\": \"r19\",\n  \"44\": \"r19\",\n  \"45\": \"r19\",\n  \"52\": \"r19\",\n  \"53\": \"r19\",\n  \"54\": \"r19\",\n  \"55\": \"r19\",\n  \"57\": \"r19\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s62\"\n}, {\n  \"23\": \"r20\",\n  \"24\": \"r20\",\n  \"25\": \"r20\",\n  \"26\": \"r20\",\n  \"27\": \"r20\",\n  \"28\": \"r20\",\n  \"29\": \"r20\",\n  \"30\": \"r20\",\n  \"31\": \"r20\",\n  \"32\": \"r20\",\n  \"33\": \"r20\",\n  \"34\": \"r20\",\n  \"35\": \"r20\",\n  \"36\": \"r20\",\n  \"37\": \"r20\",\n  \"38\": \"r20\",\n  \"39\": \"r20\",\n  \"40\": \"r20\",\n  \"41\": \"r20\",\n  \"42\": \"r20\",\n  \"43\": \"r20\",\n  \"44\": \"r20\",\n  \"45\": \"r20\",\n  \"52\": \"r20\",\n  \"53\": \"r20\",\n  \"54\": \"r20\",\n  \"55\": \"r20\",\n  \"57\": \"r20\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s64\"\n}, {\n  \"23\": \"r21\",\n  \"24\": \"r21\",\n  \"25\": \"r21\",\n  \"26\": \"r21\",\n  \"27\": \"r21\",\n  \"28\": \"r21\",\n  \"29\": \"r21\",\n  \"30\": \"r21\",\n  \"31\": \"r21\",\n  \"32\": \"r21\",\n  \"33\": \"r21\",\n  \"34\": \"r21\",\n  \"35\": \"r21\",\n  \"36\": \"r21\",\n  \"37\": \"r21\",\n  \"38\": \"r21\",\n  \"39\": \"r21\",\n  \"40\": \"r21\",\n  \"41\": \"r21\",\n  \"42\": \"r21\",\n  \"43\": \"r21\",\n  \"44\": \"r21\",\n  \"45\": \"r21\",\n  \"52\": \"r21\",\n  \"53\": \"r21\",\n  \"54\": \"r21\",\n  \"55\": \"r21\",\n  \"57\": \"r21\"\n}, {\n  \"56\": \"s72\"\n}, {\n  \"56\": \"r55\"\n}, {\n  \"10\": 70,\n  \"20\": 73,\n  \"21\": 75,\n  \"22\": 76,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r56\",\n  \"58\": \"s74\"\n}, {\n  \"24\": \"r62\",\n  \"28\": \"r62\",\n  \"35\": \"r62\",\n  \"36\": \"r62\",\n  \"37\": \"r62\",\n  \"38\": \"r62\",\n  \"39\": \"r62\",\n  \"40\": \"r62\",\n  \"41\": \"r62\",\n  \"42\": \"r62\",\n  \"43\": \"r62\",\n  \"44\": \"r62\",\n  \"45\": \"r62\",\n  \"56\": \"r62\",\n  \"58\": \"r62\"\n}, {\n  \"24\": \"r63\",\n  \"28\": \"r63\",\n  \"35\": \"r63\",\n  \"36\": \"r63\",\n  \"37\": \"r63\",\n  \"38\": \"r63\",\n  \"39\": \"r63\",\n  \"40\": \"r63\",\n  \"41\": \"r63\",\n  \"42\": \"r63\",\n  \"43\": \"r63\",\n  \"44\": \"r63\",\n  \"45\": \"r63\",\n  \"56\": \"r63\",\n  \"58\": \"r63\"\n}, {\n  \"24\": \"r64\",\n  \"28\": \"r64\",\n  \"35\": \"r64\",\n  \"36\": \"r64\",\n  \"37\": \"r64\",\n  \"38\": \"r64\",\n  \"39\": \"r64\",\n  \"40\": \"r64\",\n  \"41\": \"r64\",\n  \"42\": \"r64\",\n  \"43\": \"r64\",\n  \"44\": \"r64\",\n  \"45\": \"r64\",\n  \"56\": \"r64\",\n  \"58\": \"r64\"\n}, {\n  \"24\": \"r65\",\n  \"28\": \"r65\",\n  \"35\": \"r65\",\n  \"36\": \"r65\",\n  \"37\": \"r65\",\n  \"38\": \"r65\",\n  \"39\": \"r65\",\n  \"40\": \"r65\",\n  \"41\": \"r65\",\n  \"42\": \"r65\",\n  \"43\": \"r65\",\n  \"44\": \"r65\",\n  \"45\": \"r65\",\n  \"56\": \"r65\",\n  \"58\": \"r65\"\n}, {\n  \"23\": \"r52\",\n  \"24\": \"r52\",\n  \"25\": \"r52\",\n  \"26\": \"r52\",\n  \"27\": \"r52\",\n  \"28\": \"r52\",\n  \"29\": \"r52\",\n  \"30\": \"r52\",\n  \"31\": \"r52\",\n  \"32\": \"r52\",\n  \"33\": \"r52\",\n  \"34\": \"r52\",\n  \"35\": \"r52\",\n  \"36\": \"r52\",\n  \"37\": \"r52\",\n  \"38\": \"r52\",\n  \"39\": \"r52\",\n  \"40\": \"r52\",\n  \"41\": \"r52\",\n  \"42\": \"r52\",\n  \"43\": \"r52\",\n  \"44\": \"r52\",\n  \"45\": \"r52\",\n  \"46\": \"r52\",\n  \"47\": \"r52\",\n  \"48\": \"r52\",\n  \"49\": \"r52\",\n  \"50\": \"r52\",\n  \"51\": \"r52\",\n  \"52\": \"r52\",\n  \"53\": \"r52\",\n  \"54\": \"r52\",\n  \"55\": \"r52\",\n  \"57\": \"r52\"\n}, {\n  \"56\": \"r57\"\n}, {\n  \"10\": 70,\n  \"21\": 77,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r62\",\n  \"58\": \"s68\"\n}, {\n  \"56\": \"r59\"\n}, {\n  \"10\": 70,\n  \"20\": 79,\n  \"21\": 75,\n  \"22\": 76,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r63\",\n  \"58\": \"s80\"\n}, {\n  \"10\": 70,\n  \"18\": 78,\n  \"19\": 66,\n  \"21\": 67,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r54\",\n  \"58\": \"s68\"\n}, {\n  \"56\": \"r58\"\n}, {\n  \"56\": \"r60\"\n}, {\n  \"10\": 70,\n  \"21\": 81,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r62\",\n  \"58\": \"s68\"\n}, {\n  \"10\": 70,\n  \"18\": 82,\n  \"19\": 66,\n  \"21\": 67,\n  \"22\": 69,\n  \"24\": \"s28\",\n  \"28\": \"s71\",\n  \"35\": \"s29\",\n  \"36\": \"s30\",\n  \"37\": \"s31\",\n  \"38\": \"s32\",\n  \"39\": \"s33\",\n  \"40\": \"s34\",\n  \"41\": \"s35\",\n  \"42\": \"s36\",\n  \"43\": \"s37\",\n  \"44\": \"s38\",\n  \"45\": \"s39\",\n  \"56\": \"r54\",\n  \"58\": \"s68\"\n}, {\n  \"56\": \"r61\"\n}, {\n  \"56\": \"s84\"\n}, {\n  \"23\": \"r53\",\n  \"24\": \"r53\",\n  \"25\": \"r53\",\n  \"26\": \"r53\",\n  \"27\": \"r53\",\n  \"28\": \"r53\",\n  \"29\": \"r53\",\n  \"30\": \"r53\",\n  \"31\": \"r53\",\n  \"32\": \"r53\",\n  \"33\": \"r53\",\n  \"34\": \"r53\",\n  \"35\": \"r53\",\n  \"36\": \"r53\",\n  \"37\": \"r53\",\n  \"38\": \"r53\",\n  \"39\": \"r53\",\n  \"40\": \"r53\",\n  \"41\": \"r53\",\n  \"42\": \"r53\",\n  \"43\": \"r53\",\n  \"44\": \"r53\",\n  \"45\": \"r53\",\n  \"46\": \"r53\",\n  \"47\": \"r53\",\n  \"48\": \"r53\",\n  \"49\": \"r53\",\n  \"50\": \"r53\",\n  \"51\": \"r53\",\n  \"52\": \"r53\",\n  \"53\": \"r53\",\n  \"54\": \"r53\",\n  \"55\": \"r53\",\n  \"57\": \"r53\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s86\"\n}, {\n  \"23\": \"r49\",\n  \"24\": \"r49\",\n  \"25\": \"r49\",\n  \"26\": \"r49\",\n  \"27\": \"r49\",\n  \"28\": \"r49\",\n  \"29\": \"r49\",\n  \"30\": \"r49\",\n  \"31\": \"r49\",\n  \"32\": \"r49\",\n  \"33\": \"r49\",\n  \"34\": \"r49\",\n  \"35\": \"r49\",\n  \"36\": \"r49\",\n  \"37\": \"r49\",\n  \"38\": \"r49\",\n  \"39\": \"r49\",\n  \"40\": \"r49\",\n  \"41\": \"r49\",\n  \"42\": \"r49\",\n  \"43\": \"r49\",\n  \"44\": \"r49\",\n  \"45\": \"r49\",\n  \"46\": \"r49\",\n  \"47\": \"r49\",\n  \"48\": \"r49\",\n  \"49\": \"r49\",\n  \"50\": \"r49\",\n  \"51\": \"r49\",\n  \"52\": \"r49\",\n  \"53\": \"r49\",\n  \"54\": \"r49\",\n  \"55\": \"r49\",\n  \"57\": \"r49\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s88\"\n}, {\n  \"23\": \"r50\",\n  \"24\": \"r50\",\n  \"25\": \"r50\",\n  \"26\": \"r50\",\n  \"27\": \"r50\",\n  \"28\": \"r50\",\n  \"29\": \"r50\",\n  \"30\": \"r50\",\n  \"31\": \"r50\",\n  \"32\": \"r50\",\n  \"33\": \"r50\",\n  \"34\": \"r50\",\n  \"35\": \"r50\",\n  \"36\": \"r50\",\n  \"37\": \"r50\",\n  \"38\": \"r50\",\n  \"39\": \"r50\",\n  \"40\": \"r50\",\n  \"41\": \"r50\",\n  \"42\": \"r50\",\n  \"43\": \"r50\",\n  \"44\": \"r50\",\n  \"45\": \"r50\",\n  \"46\": \"r50\",\n  \"47\": \"r50\",\n  \"48\": \"r50\",\n  \"49\": \"r50\",\n  \"50\": \"r50\",\n  \"51\": \"r50\",\n  \"52\": \"r50\",\n  \"53\": \"r50\",\n  \"54\": \"r50\",\n  \"55\": \"r50\",\n  \"57\": \"r50\"\n}, {\n  \"25\": \"s12\",\n  \"31\": \"s90\"\n}, {\n  \"23\": \"r51\",\n  \"24\": \"r51\",\n  \"25\": \"r51\",\n  \"26\": \"r51\",\n  \"27\": \"r51\",\n  \"28\": \"r51\",\n  \"29\": \"r51\",\n  \"30\": \"r51\",\n  \"31\": \"r51\",\n  \"32\": \"r51\",\n  \"33\": \"r51\",\n  \"34\": \"r51\",\n  \"35\": \"r51\",\n  \"36\": \"r51\",\n  \"37\": \"r51\",\n  \"38\": \"r51\",\n  \"39\": \"r51\",\n  \"40\": \"r51\",\n  \"41\": \"r51\",\n  \"42\": \"r51\",\n  \"43\": \"r51\",\n  \"44\": \"r51\",\n  \"45\": \"r51\",\n  \"46\": \"r51\",\n  \"47\": \"r51\",\n  \"48\": \"r51\",\n  \"49\": \"r51\",\n  \"50\": \"r51\",\n  \"51\": \"r51\",\n  \"52\": \"r51\",\n  \"53\": \"r51\",\n  \"54\": \"r51\",\n  \"55\": \"r51\",\n  \"57\": \"r51\"\n}];\n/**\n * Parsing stack.\n */\n\nvar stack = [];\n/**\n * Tokenizer instance.\n */\n\nvar tokenizer = void 0;\n/**\n * Generic tokenizer used by the parser in the Syntax tool.\n *\n * https://www.npmjs.com/package/syntax-cli\n *\n * See `--custom-tokinzer` to skip this generation, and use a custom one.\n */\n\nvar lexRules = [[/^#[^\\n]+/, function () {\n  /* skip comments */\n}], [/^\\s+/, function () {\n  /* skip whitespace */\n}], [/^-/, function () {\n  return 'DASH';\n}], [/^\\//, function () {\n  return 'CHAR';\n}], [/^#/, function () {\n  return 'CHAR';\n}], [/^\\|/, function () {\n  return 'CHAR';\n}], [/^\\./, function () {\n  return 'CHAR';\n}], [/^\\{/, function () {\n  return 'CHAR';\n}], [/^\\{\\d+\\}/, function () {\n  return 'RANGE_EXACT';\n}], [/^\\{\\d+,\\}/, function () {\n  return 'RANGE_OPEN';\n}], [/^\\{\\d+,\\d+\\}/, function () {\n  return 'RANGE_CLOSED';\n}], [/^\\\\k<(([\\u0041-\\u005a\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4-\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09f0-\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60-\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0cf1-\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32-\\u0e33\\u0e40-\\u0e46\\u0e81-\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae-\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5-\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a-\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd-\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5-\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b\\udc0d-\\udc26\\udc28-\\udc3a\\udc3c-\\udc3d\\udc3f-\\udc4d\\udc50-\\udc5d\\udc80-\\udcfa\\udd40-\\udd74\\ude80-\\ude9c\\udea0-\\uded0\\udf00-\\udf1f\\udf2d-\\udf4a\\udf50-\\udf75\\udf80-\\udf9d\\udfa0-\\udfc3\\udfc8-\\udfcf\\udfd1-\\udfd5]|\\ud801[\\udc00-\\udc9d\\udcb0-\\udcd3\\udcd8-\\udcfb\\udd00-\\udd27\\udd30-\\udd63\\ude00-\\udf36\\udf40-\\udf55\\udf60-\\udf67]|\\ud802[\\udc00-\\udc05\\udc08\\udc0a-\\udc35\\udc37-\\udc38\\udc3c\\udc3f-\\udc55\\udc60-\\udc76\\udc80-\\udc9e\\udce0-\\udcf2\\udcf4-\\udcf5\\udd00-\\udd15\\udd20-\\udd39\\udd80-\\uddb7\\uddbe-\\uddbf\\ude00\\ude10-\\ude13\\ude15-\\ude17\\ude19-\\ude35\\ude60-\\ude7c\\ude80-\\ude9c\\udec0-\\udec7\\udec9-\\udee4\\udf00-\\udf35\\udf40-\\udf55\\udf60-\\udf72\\udf80-\\udf91]|\\ud803[\\udc00-\\udc48\\udc80-\\udcb2\\udcc0-\\udcf2\\udd00-\\udd23\\udf00-\\udf1c\\udf27\\udf30-\\udf45\\udfe0-\\udff6]|\\ud804[\\udc03-\\udc37\\udc83-\\udcaf\\udcd0-\\udce8\\udd03-\\udd26\\udd44\\udd50-\\udd72\\udd76\\udd83-\\uddb2\\uddc1-\\uddc4\\uddda\\udddc\\ude00-\\ude11\\ude13-\\ude2b\\ude80-\\ude86\\ude88\\ude8a-\\ude8d\\ude8f-\\ude9d\\ude9f-\\udea8\\udeb0-\\udede\\udf05-\\udf0c\\udf0f-\\udf10\\udf13-\\udf28\\udf2a-\\udf30\\udf32-\\udf33\\udf35-\\udf39\\udf3d\\udf50\\udf5d-\\udf61]|\\ud805[\\udc00-\\udc34\\udc47-\\udc4a\\udc5f\\udc80-\\udcaf\\udcc4-\\udcc5\\udcc7\\udd80-\\uddae\\uddd8-\\udddb\\ude00-\\ude2f\\ude44\\ude80-\\udeaa\\udeb8\\udf00-\\udf1a]|\\ud806[\\udc00-\\udc2b\\udca0-\\udcdf\\udcff\\udda0-\\udda7\\uddaa-\\uddd0\\udde1\\udde3\\ude00\\ude0b-\\ude32\\ude3a\\ude50\\ude5c-\\ude89\\ude9d\\udec0-\\udef8]|\\ud807[\\udc00-\\udc08\\udc0a-\\udc2e\\udc40\\udc72-\\udc8f\\udd00-\\udd06\\udd08-\\udd09\\udd0b-\\udd30\\udd46\\udd60-\\udd65\\udd67-\\udd68\\udd6a-\\udd89\\udd98\\udee0-\\udef2]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38\\ude40-\\ude5e\\uded0-\\udeed\\udf00-\\udf2f\\udf40-\\udf43\\udf63-\\udf77\\udf7d-\\udf8f]|\\ud81b[\\ude40-\\ude7f\\udf00-\\udf4a\\udf50\\udf93-\\udf9f\\udfe0-\\udfe1\\udfe3]|\\ud81c[\\udc00-\\udfff]|\\ud81d[\\udc00-\\udfff]|\\ud81e[\\udc00-\\udfff]|\\ud81f[\\udc00-\\udfff]|\\ud820[\\udc00-\\udfff]|\\ud821[\\udc00-\\udff7]|\\ud822[\\udc00-\\udef2]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67\\udd70-\\udefb]|\\ud82f[\\udc00-\\udc6a\\udc70-\\udc7c\\udc80-\\udc88\\udc90-\\udc99]|\\ud835[\\udc00-\\udc54\\udc56-\\udc9c\\udc9e-\\udc9f\\udca2\\udca5-\\udca6\\udca9-\\udcac\\udcae-\\udcb9\\udcbb\\udcbd-\\udcc3\\udcc5-\\udd05\\udd07-\\udd0a\\udd0d-\\udd14\\udd16-\\udd1c\\udd1e-\\udd39\\udd3b-\\udd3e\\udd40-\\udd44\\udd46\\udd4a-\\udd50\\udd52-\\udea5\\udea8-\\udec0\\udec2-\\udeda\\udedc-\\udefa\\udefc-\\udf14\\udf16-\\udf34\\udf36-\\udf4e\\udf50-\\udf6e\\udf70-\\udf88\\udf8a-\\udfa8\\udfaa-\\udfc2\\udfc4-\\udfcb]|\\ud838[\\udd00-\\udd2c\\udd37-\\udd3d\\udd4e\\udec0-\\udeeb]|\\ud83a[\\udc00-\\udcc4\\udd00-\\udd43\\udd4b]|\\ud83b[\\ude00-\\ude03\\ude05-\\ude1f\\ude21-\\ude22\\ude24\\ude27\\ude29-\\ude32\\ude34-\\ude37\\ude39\\ude3b\\ude42\\ude47\\ude49\\ude4b\\ude4d-\\ude4f\\ude51-\\ude52\\ude54\\ude57\\ude59\\ude5b\\ude5d\\ude5f\\ude61-\\ude62\\ude64\\ude67-\\ude6a\\ude6c-\\ude72\\ude74-\\ude77\\ude79-\\ude7c\\ude7e\\ude80-\\ude89\\ude8b-\\ude9b\\udea1-\\udea3\\udea5-\\udea9\\udeab-\\udebb]|\\ud840[\\udc00-\\udfff]|\\ud841[\\udc00-\\udfff]|\\ud842[\\udc00-\\udfff]|\\ud843[\\udc00-\\udfff]|\\ud844[\\udc00-\\udfff]|\\ud845[\\udc00-\\udfff]|\\ud846[\\udc00-\\udfff]|\\ud847[\\udc00-\\udfff]|\\ud848[\\udc00-\\udfff]|\\ud849[\\udc00-\\udfff]|\\ud84a[\\udc00-\\udfff]|\\ud84b[\\udc00-\\udfff]|\\ud84c[\\udc00-\\udfff]|\\ud84d[\\udc00-\\udfff]|\\ud84e[\\udc00-\\udfff]|\\ud84f[\\udc00-\\udfff]|\\ud850[\\udc00-\\udfff]|\\ud851[\\udc00-\\udfff]|\\ud852[\\udc00-\\udfff]|\\ud853[\\udc00-\\udfff]|\\ud854[\\udc00-\\udfff]|\\ud855[\\udc00-\\udfff]|\\ud856[\\udc00-\\udfff]|\\ud857[\\udc00-\\udfff]|\\ud858[\\udc00-\\udfff]|\\ud859[\\udc00-\\udfff]|\\ud85a[\\udc00-\\udfff]|\\ud85b[\\udc00-\\udfff]|\\ud85c[\\udc00-\\udfff]|\\ud85d[\\udc00-\\udfff]|\\ud85e[\\udc00-\\udfff]|\\ud85f[\\udc00-\\udfff]|\\ud860[\\udc00-\\udfff]|\\ud861[\\udc00-\\udfff]|\\ud862[\\udc00-\\udfff]|\\ud863[\\udc00-\\udfff]|\\ud864[\\udc00-\\udfff]|\\ud865[\\udc00-\\udfff]|\\ud866[\\udc00-\\udfff]|\\ud867[\\udc00-\\udfff]|\\ud868[\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86a[\\udc00-\\udfff]|\\ud86b[\\udc00-\\udfff]|\\ud86c[\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud86f[\\udc00-\\udfff]|\\ud870[\\udc00-\\udfff]|\\ud871[\\udc00-\\udfff]|\\ud872[\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud874[\\udc00-\\udfff]|\\ud875[\\udc00-\\udfff]|\\ud876[\\udc00-\\udfff]|\\ud877[\\udc00-\\udfff]|\\ud878[\\udc00-\\udfff]|\\ud879[\\udc00-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d])|[$_]|(\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]{1,}\\}))(([\\u0030-\\u0039\\u0041-\\u005a\\u005f\\u0061-\\u007a\\u00aa\\u00b5\\u00b7\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u037f\\u0386-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05bd\\u05bf\\u05c1-\\u05c2\\u05c4-\\u05c5\\u05c7\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u07fd\\u0800-\\u082d\\u0840-\\u085b\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u08d3-\\u08e1\\u08e3-\\u0963\\u0966-\\u096f\\u0971-\\u0983\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7-\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc-\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u09fc\\u09fe\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47-\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0af9-\\u0aff\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47-\\u0b48\\u0b4b-\\u0b4d\\u0b56-\\u0b57\\u0b5c-\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82-\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55-\\u0c56\\u0c58-\\u0c5a\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c80-\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5-\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1-\\u0cf2\\u0d00-\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d54-\\u0d57\\u0d5f-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82-\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2-\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81-\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18-\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1369-\\u1371\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772-\\u1773\\u1780-\\u17d3\\u17d7\\u17dc-\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19da\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1ab0-\\u1abd\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1cd0-\\u1cd2\\u1cd4-\\u1cfa\\u1d00-\\u1df9\\u1dfb-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u203f-\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua827\\ua840-\\ua873\\ua880-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua8fd-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\ua9e0-\\ua9fe\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabea\\uabec-\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b\\udc0d-\\udc26\\udc28-\\udc3a\\udc3c-\\udc3d\\udc3f-\\udc4d\\udc50-\\udc5d\\udc80-\\udcfa\\udd40-\\udd74\\uddfd\\ude80-\\ude9c\\udea0-\\uded0\\udee0\\udf00-\\udf1f\\udf2d-\\udf4a\\udf50-\\udf7a\\udf80-\\udf9d\\udfa0-\\udfc3\\udfc8-\\udfcf\\udfd1-\\udfd5]|\\ud801[\\udc00-\\udc9d\\udca0-\\udca9\\udcb0-\\udcd3\\udcd8-\\udcfb\\udd00-\\udd27\\udd30-\\udd63\\ude00-\\udf36\\udf40-\\udf55\\udf60-\\udf67]|\\ud802[\\udc00-\\udc05\\udc08\\udc0a-\\udc35\\udc37-\\udc38\\udc3c\\udc3f-\\udc55\\udc60-\\udc76\\udc80-\\udc9e\\udce0-\\udcf2\\udcf4-\\udcf5\\udd00-\\udd15\\udd20-\\udd39\\udd80-\\uddb7\\uddbe-\\uddbf\\ude00-\\ude03\\ude05-\\ude06\\ude0c-\\ude13\\ude15-\\ude17\\ude19-\\ude35\\ude38-\\ude3a\\ude3f\\ude60-\\ude7c\\ude80-\\ude9c\\udec0-\\udec7\\udec9-\\udee6\\udf00-\\udf35\\udf40-\\udf55\\udf60-\\udf72\\udf80-\\udf91]|\\ud803[\\udc00-\\udc48\\udc80-\\udcb2\\udcc0-\\udcf2\\udd00-\\udd27\\udd30-\\udd39\\udf00-\\udf1c\\udf27\\udf30-\\udf50\\udfe0-\\udff6]|\\ud804[\\udc00-\\udc46\\udc66-\\udc6f\\udc7f-\\udcba\\udcd0-\\udce8\\udcf0-\\udcf9\\udd00-\\udd34\\udd36-\\udd3f\\udd44-\\udd46\\udd50-\\udd73\\udd76\\udd80-\\uddc4\\uddc9-\\uddcc\\uddd0-\\uddda\\udddc\\ude00-\\ude11\\ude13-\\ude37\\ude3e\\ude80-\\ude86\\ude88\\ude8a-\\ude8d\\ude8f-\\ude9d\\ude9f-\\udea8\\udeb0-\\udeea\\udef0-\\udef9\\udf00-\\udf03\\udf05-\\udf0c\\udf0f-\\udf10\\udf13-\\udf28\\udf2a-\\udf30\\udf32-\\udf33\\udf35-\\udf39\\udf3b-\\udf44\\udf47-\\udf48\\udf4b-\\udf4d\\udf50\\udf57\\udf5d-\\udf63\\udf66-\\udf6c\\udf70-\\udf74]|\\ud805[\\udc00-\\udc4a\\udc50-\\udc59\\udc5e-\\udc5f\\udc80-\\udcc5\\udcc7\\udcd0-\\udcd9\\udd80-\\uddb5\\uddb8-\\uddc0\\uddd8-\\udddd\\ude00-\\ude40\\ude44\\ude50-\\ude59\\ude80-\\udeb8\\udec0-\\udec9\\udf00-\\udf1a\\udf1d-\\udf2b\\udf30-\\udf39]|\\ud806[\\udc00-\\udc3a\\udca0-\\udce9\\udcff\\udda0-\\udda7\\uddaa-\\uddd7\\uddda-\\udde1\\udde3-\\udde4\\ude00-\\ude3e\\ude47\\ude50-\\ude99\\ude9d\\udec0-\\udef8]|\\ud807[\\udc00-\\udc08\\udc0a-\\udc36\\udc38-\\udc40\\udc50-\\udc59\\udc72-\\udc8f\\udc92-\\udca7\\udca9-\\udcb6\\udd00-\\udd06\\udd08-\\udd09\\udd0b-\\udd36\\udd3a\\udd3c-\\udd3d\\udd3f-\\udd47\\udd50-\\udd59\\udd60-\\udd65\\udd67-\\udd68\\udd6a-\\udd8e\\udd90-\\udd91\\udd93-\\udd98\\udda0-\\udda9\\udee0-\\udef6]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38\\ude40-\\ude5e\\ude60-\\ude69\\uded0-\\udeed\\udef0-\\udef4\\udf00-\\udf36\\udf40-\\udf43\\udf50-\\udf59\\udf63-\\udf77\\udf7d-\\udf8f]|\\ud81b[\\ude40-\\ude7f\\udf00-\\udf4a\\udf4f-\\udf87\\udf8f-\\udf9f\\udfe0-\\udfe1\\udfe3]|\\ud81c[\\udc00-\\udfff]|\\ud81d[\\udc00-\\udfff]|\\ud81e[\\udc00-\\udfff]|\\ud81f[\\udc00-\\udfff]|\\ud820[\\udc00-\\udfff]|\\ud821[\\udc00-\\udff7]|\\ud822[\\udc00-\\udef2]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67\\udd70-\\udefb]|\\ud82f[\\udc00-\\udc6a\\udc70-\\udc7c\\udc80-\\udc88\\udc90-\\udc99\\udc9d-\\udc9e]|\\ud834[\\udd65-\\udd69\\udd6d-\\udd72\\udd7b-\\udd82\\udd85-\\udd8b\\uddaa-\\uddad\\ude42-\\ude44]|\\ud835[\\udc00-\\udc54\\udc56-\\udc9c\\udc9e-\\udc9f\\udca2\\udca5-\\udca6\\udca9-\\udcac\\udcae-\\udcb9\\udcbb\\udcbd-\\udcc3\\udcc5-\\udd05\\udd07-\\udd0a\\udd0d-\\udd14\\udd16-\\udd1c\\udd1e-\\udd39\\udd3b-\\udd3e\\udd40-\\udd44\\udd46\\udd4a-\\udd50\\udd52-\\udea5\\udea8-\\udec0\\udec2-\\udeda\\udedc-\\udefa\\udefc-\\udf14\\udf16-\\udf34\\udf36-\\udf4e\\udf50-\\udf6e\\udf70-\\udf88\\udf8a-\\udfa8\\udfaa-\\udfc2\\udfc4-\\udfcb\\udfce-\\udfff]|\\ud836[\\ude00-\\ude36\\ude3b-\\ude6c\\ude75\\ude84\\ude9b-\\ude9f\\udea1-\\udeaf]|\\ud838[\\udc00-\\udc06\\udc08-\\udc18\\udc1b-\\udc21\\udc23-\\udc24\\udc26-\\udc2a\\udd00-\\udd2c\\udd30-\\udd3d\\udd40-\\udd49\\udd4e\\udec0-\\udef9]|\\ud83a[\\udc00-\\udcc4\\udcd0-\\udcd6\\udd00-\\udd4b\\udd50-\\udd59]|\\ud83b[\\ude00-\\ude03\\ude05-\\ude1f\\ude21-\\ude22\\ude24\\ude27\\ude29-\\ude32\\ude34-\\ude37\\ude39\\ude3b\\ude42\\ude47\\ude49\\ude4b\\ude4d-\\ude4f\\ude51-\\ude52\\ude54\\ude57\\ude59\\ude5b\\ude5d\\ude5f\\ude61-\\ude62\\ude64\\ude67-\\ude6a\\ude6c-\\ude72\\ude74-\\ude77\\ude79-\\ude7c\\ude7e\\ude80-\\ude89\\ude8b-\\ude9b\\udea1-\\udea3\\udea5-\\udea9\\udeab-\\udebb]|\\ud840[\\udc00-\\udfff]|\\ud841[\\udc00-\\udfff]|\\ud842[\\udc00-\\udfff]|\\ud843[\\udc00-\\udfff]|\\ud844[\\udc00-\\udfff]|\\ud845[\\udc00-\\udfff]|\\ud846[\\udc00-\\udfff]|\\ud847[\\udc00-\\udfff]|\\ud848[\\udc00-\\udfff]|\\ud849[\\udc00-\\udfff]|\\ud84a[\\udc00-\\udfff]|\\ud84b[\\udc00-\\udfff]|\\ud84c[\\udc00-\\udfff]|\\ud84d[\\udc00-\\udfff]|\\ud84e[\\udc00-\\udfff]|\\ud84f[\\udc00-\\udfff]|\\ud850[\\udc00-\\udfff]|\\ud851[\\udc00-\\udfff]|\\ud852[\\udc00-\\udfff]|\\ud853[\\udc00-\\udfff]|\\ud854[\\udc00-\\udfff]|\\ud855[\\udc00-\\udfff]|\\ud856[\\udc00-\\udfff]|\\ud857[\\udc00-\\udfff]|\\ud858[\\udc00-\\udfff]|\\ud859[\\udc00-\\udfff]|\\ud85a[\\udc00-\\udfff]|\\ud85b[\\udc00-\\udfff]|\\ud85c[\\udc00-\\udfff]|\\ud85d[\\udc00-\\udfff]|\\ud85e[\\udc00-\\udfff]|\\ud85f[\\udc00-\\udfff]|\\ud860[\\udc00-\\udfff]|\\ud861[\\udc00-\\udfff]|\\ud862[\\udc00-\\udfff]|\\ud863[\\udc00-\\udfff]|\\ud864[\\udc00-\\udfff]|\\ud865[\\udc00-\\udfff]|\\ud866[\\udc00-\\udfff]|\\ud867[\\udc00-\\udfff]|\\ud868[\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86a[\\udc00-\\udfff]|\\ud86b[\\udc00-\\udfff]|\\ud86c[\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud86f[\\udc00-\\udfff]|\\ud870[\\udc00-\\udfff]|\\ud871[\\udc00-\\udfff]|\\ud872[\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud874[\\udc00-\\udfff]|\\ud875[\\udc00-\\udfff]|\\ud876[\\udc00-\\udfff]|\\ud877[\\udc00-\\udfff]|\\ud878[\\udc00-\\udfff]|\\ud879[\\udc00-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d]|\\udb40[\\udd00-\\uddef])|[$_]|(\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]{1,}\\})|[\\u200c\\u200d])*>/, function () {\n  var groupName = yytext.slice(3, -1);\n  validateUnicodeGroupName(groupName, this.getCurrentState());\n  return 'NAMED_GROUP_REF';\n}], [/^\\\\b/, function () {\n  return 'ESC_b';\n}], [/^\\\\B/, function () {\n  return 'ESC_B';\n}], [/^\\\\c[a-zA-Z]/, function () {\n  return 'CTRL_CH';\n}], [/^\\\\0\\d{1,2}/, function () {\n  return 'OCT_CODE';\n}], [/^\\\\0/, function () {\n  return 'DEC_CODE';\n}], [/^\\\\\\d{1,3}/, function () {\n  return 'DEC_CODE';\n}], [/^\\\\u[dD][89abAB][0-9a-fA-F]{2}\\\\u[dD][c-fC-F][0-9a-fA-F]{2}/, function () {\n  return 'U_CODE_SURROGATE';\n}], [/^\\\\u\\{[0-9a-fA-F]{1,}\\}/, function () {\n  return 'U_CODE';\n}], [/^\\\\u[0-9a-fA-F]{4}/, function () {\n  return 'U_CODE';\n}], [/^\\\\[pP]\\{\\w+(?:=\\w+)?\\}/, function () {\n  return 'U_PROP_VALUE_EXP';\n}], [/^\\\\x[0-9a-fA-F]{2}/, function () {\n  return 'HEX_CODE';\n}], [/^\\\\[tnrdDsSwWvf]/, function () {\n  return 'META_CHAR';\n}], [/^\\\\\\//, function () {\n  return 'ESC_CHAR';\n}], [/^\\\\[ #]/, function () {\n  return 'ESC_CHAR';\n}], [/^\\\\[\\^\\$\\.\\*\\+\\?\\(\\)\\\\\\[\\]\\{\\}\\|\\/]/, function () {\n  return 'ESC_CHAR';\n}], [/^\\\\[^*?+\\[()\\\\|]/, function () {\n  var s = this.getCurrentState();\n\n  if (s === 'u' || s === 'xu' || s === 'u_class') {\n    throw new SyntaxError('invalid Unicode escape ' + yytext);\n  }\n\n  return 'ESC_CHAR';\n}], [/^\\(/, function () {\n  return 'CHAR';\n}], [/^\\)/, function () {\n  return 'CHAR';\n}], [/^\\(\\?=/, function () {\n  return 'POS_LA_ASSERT';\n}], [/^\\(\\?!/, function () {\n  return 'NEG_LA_ASSERT';\n}], [/^\\(\\?<=/, function () {\n  return 'POS_LB_ASSERT';\n}], [/^\\(\\?<!/, function () {\n  return 'NEG_LB_ASSERT';\n}], [/^\\(\\?:/, function () {\n  return 'NON_CAPTURE_GROUP';\n}], [/^\\(\\?<(([\\u0041-\\u005a\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4-\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09f0-\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60-\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0cf1-\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32-\\u0e33\\u0e40-\\u0e46\\u0e81-\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae-\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5-\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a-\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd-\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5-\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b\\udc0d-\\udc26\\udc28-\\udc3a\\udc3c-\\udc3d\\udc3f-\\udc4d\\udc50-\\udc5d\\udc80-\\udcfa\\udd40-\\udd74\\ude80-\\ude9c\\udea0-\\uded0\\udf00-\\udf1f\\udf2d-\\udf4a\\udf50-\\udf75\\udf80-\\udf9d\\udfa0-\\udfc3\\udfc8-\\udfcf\\udfd1-\\udfd5]|\\ud801[\\udc00-\\udc9d\\udcb0-\\udcd3\\udcd8-\\udcfb\\udd00-\\udd27\\udd30-\\udd63\\ude00-\\udf36\\udf40-\\udf55\\udf60-\\udf67]|\\ud802[\\udc00-\\udc05\\udc08\\udc0a-\\udc35\\udc37-\\udc38\\udc3c\\udc3f-\\udc55\\udc60-\\udc76\\udc80-\\udc9e\\udce0-\\udcf2\\udcf4-\\udcf5\\udd00-\\udd15\\udd20-\\udd39\\udd80-\\uddb7\\uddbe-\\uddbf\\ude00\\ude10-\\ude13\\ude15-\\ude17\\ude19-\\ude35\\ude60-\\ude7c\\ude80-\\ude9c\\udec0-\\udec7\\udec9-\\udee4\\udf00-\\udf35\\udf40-\\udf55\\udf60-\\udf72\\udf80-\\udf91]|\\ud803[\\udc00-\\udc48\\udc80-\\udcb2\\udcc0-\\udcf2\\udd00-\\udd23\\udf00-\\udf1c\\udf27\\udf30-\\udf45\\udfe0-\\udff6]|\\ud804[\\udc03-\\udc37\\udc83-\\udcaf\\udcd0-\\udce8\\udd03-\\udd26\\udd44\\udd50-\\udd72\\udd76\\udd83-\\uddb2\\uddc1-\\uddc4\\uddda\\udddc\\ude00-\\ude11\\ude13-\\ude2b\\ude80-\\ude86\\ude88\\ude8a-\\ude8d\\ude8f-\\ude9d\\ude9f-\\udea8\\udeb0-\\udede\\udf05-\\udf0c\\udf0f-\\udf10\\udf13-\\udf28\\udf2a-\\udf30\\udf32-\\udf33\\udf35-\\udf39\\udf3d\\udf50\\udf5d-\\udf61]|\\ud805[\\udc00-\\udc34\\udc47-\\udc4a\\udc5f\\udc80-\\udcaf\\udcc4-\\udcc5\\udcc7\\udd80-\\uddae\\uddd8-\\udddb\\ude00-\\ude2f\\ude44\\ude80-\\udeaa\\udeb8\\udf00-\\udf1a]|\\ud806[\\udc00-\\udc2b\\udca0-\\udcdf\\udcff\\udda0-\\udda7\\uddaa-\\uddd0\\udde1\\udde3\\ude00\\ude0b-\\ude32\\ude3a\\ude50\\ude5c-\\ude89\\ude9d\\udec0-\\udef8]|\\ud807[\\udc00-\\udc08\\udc0a-\\udc2e\\udc40\\udc72-\\udc8f\\udd00-\\udd06\\udd08-\\udd09\\udd0b-\\udd30\\udd46\\udd60-\\udd65\\udd67-\\udd68\\udd6a-\\udd89\\udd98\\udee0-\\udef2]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38\\ude40-\\ude5e\\uded0-\\udeed\\udf00-\\udf2f\\udf40-\\udf43\\udf63-\\udf77\\udf7d-\\udf8f]|\\ud81b[\\ude40-\\ude7f\\udf00-\\udf4a\\udf50\\udf93-\\udf9f\\udfe0-\\udfe1\\udfe3]|\\ud81c[\\udc00-\\udfff]|\\ud81d[\\udc00-\\udfff]|\\ud81e[\\udc00-\\udfff]|\\ud81f[\\udc00-\\udfff]|\\ud820[\\udc00-\\udfff]|\\ud821[\\udc00-\\udff7]|\\ud822[\\udc00-\\udef2]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67\\udd70-\\udefb]|\\ud82f[\\udc00-\\udc6a\\udc70-\\udc7c\\udc80-\\udc88\\udc90-\\udc99]|\\ud835[\\udc00-\\udc54\\udc56-\\udc9c\\udc9e-\\udc9f\\udca2\\udca5-\\udca6\\udca9-\\udcac\\udcae-\\udcb9\\udcbb\\udcbd-\\udcc3\\udcc5-\\udd05\\udd07-\\udd0a\\udd0d-\\udd14\\udd16-\\udd1c\\udd1e-\\udd39\\udd3b-\\udd3e\\udd40-\\udd44\\udd46\\udd4a-\\udd50\\udd52-\\udea5\\udea8-\\udec0\\udec2-\\udeda\\udedc-\\udefa\\udefc-\\udf14\\udf16-\\udf34\\udf36-\\udf4e\\udf50-\\udf6e\\udf70-\\udf88\\udf8a-\\udfa8\\udfaa-\\udfc2\\udfc4-\\udfcb]|\\ud838[\\udd00-\\udd2c\\udd37-\\udd3d\\udd4e\\udec0-\\udeeb]|\\ud83a[\\udc00-\\udcc4\\udd00-\\udd43\\udd4b]|\\ud83b[\\ude00-\\ude03\\ude05-\\ude1f\\ude21-\\ude22\\ude24\\ude27\\ude29-\\ude32\\ude34-\\ude37\\ude39\\ude3b\\ude42\\ude47\\ude49\\ude4b\\ude4d-\\ude4f\\ude51-\\ude52\\ude54\\ude57\\ude59\\ude5b\\ude5d\\ude5f\\ude61-\\ude62\\ude64\\ude67-\\ude6a\\ude6c-\\ude72\\ude74-\\ude77\\ude79-\\ude7c\\ude7e\\ude80-\\ude89\\ude8b-\\ude9b\\udea1-\\udea3\\udea5-\\udea9\\udeab-\\udebb]|\\ud840[\\udc00-\\udfff]|\\ud841[\\udc00-\\udfff]|\\ud842[\\udc00-\\udfff]|\\ud843[\\udc00-\\udfff]|\\ud844[\\udc00-\\udfff]|\\ud845[\\udc00-\\udfff]|\\ud846[\\udc00-\\udfff]|\\ud847[\\udc00-\\udfff]|\\ud848[\\udc00-\\udfff]|\\ud849[\\udc00-\\udfff]|\\ud84a[\\udc00-\\udfff]|\\ud84b[\\udc00-\\udfff]|\\ud84c[\\udc00-\\udfff]|\\ud84d[\\udc00-\\udfff]|\\ud84e[\\udc00-\\udfff]|\\ud84f[\\udc00-\\udfff]|\\ud850[\\udc00-\\udfff]|\\ud851[\\udc00-\\udfff]|\\ud852[\\udc00-\\udfff]|\\ud853[\\udc00-\\udfff]|\\ud854[\\udc00-\\udfff]|\\ud855[\\udc00-\\udfff]|\\ud856[\\udc00-\\udfff]|\\ud857[\\udc00-\\udfff]|\\ud858[\\udc00-\\udfff]|\\ud859[\\udc00-\\udfff]|\\ud85a[\\udc00-\\udfff]|\\ud85b[\\udc00-\\udfff]|\\ud85c[\\udc00-\\udfff]|\\ud85d[\\udc00-\\udfff]|\\ud85e[\\udc00-\\udfff]|\\ud85f[\\udc00-\\udfff]|\\ud860[\\udc00-\\udfff]|\\ud861[\\udc00-\\udfff]|\\ud862[\\udc00-\\udfff]|\\ud863[\\udc00-\\udfff]|\\ud864[\\udc00-\\udfff]|\\ud865[\\udc00-\\udfff]|\\ud866[\\udc00-\\udfff]|\\ud867[\\udc00-\\udfff]|\\ud868[\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86a[\\udc00-\\udfff]|\\ud86b[\\udc00-\\udfff]|\\ud86c[\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud86f[\\udc00-\\udfff]|\\ud870[\\udc00-\\udfff]|\\ud871[\\udc00-\\udfff]|\\ud872[\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud874[\\udc00-\\udfff]|\\ud875[\\udc00-\\udfff]|\\ud876[\\udc00-\\udfff]|\\ud877[\\udc00-\\udfff]|\\ud878[\\udc00-\\udfff]|\\ud879[\\udc00-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d])|[$_]|(\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]{1,}\\}))(([\\u0030-\\u0039\\u0041-\\u005a\\u005f\\u0061-\\u007a\\u00aa\\u00b5\\u00b7\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u037f\\u0386-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05bd\\u05bf\\u05c1-\\u05c2\\u05c4-\\u05c5\\u05c7\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u07fd\\u0800-\\u082d\\u0840-\\u085b\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u08d3-\\u08e1\\u08e3-\\u0963\\u0966-\\u096f\\u0971-\\u0983\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7-\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc-\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u09fc\\u09fe\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47-\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0af9-\\u0aff\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47-\\u0b48\\u0b4b-\\u0b4d\\u0b56-\\u0b57\\u0b5c-\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82-\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55-\\u0c56\\u0c58-\\u0c5a\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c80-\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5-\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1-\\u0cf2\\u0d00-\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d54-\\u0d57\\u0d5f-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82-\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2-\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81-\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18-\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1369-\\u1371\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772-\\u1773\\u1780-\\u17d3\\u17d7\\u17dc-\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19da\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1ab0-\\u1abd\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1cd0-\\u1cd2\\u1cd4-\\u1cfa\\u1d00-\\u1df9\\u1dfb-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u203f-\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua827\\ua840-\\ua873\\ua880-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua8fd-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\ua9e0-\\ua9fe\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabea\\uabec-\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]|\\ud800[\\udc00-\\udc0b\\udc0d-\\udc26\\udc28-\\udc3a\\udc3c-\\udc3d\\udc3f-\\udc4d\\udc50-\\udc5d\\udc80-\\udcfa\\udd40-\\udd74\\uddfd\\ude80-\\ude9c\\udea0-\\uded0\\udee0\\udf00-\\udf1f\\udf2d-\\udf4a\\udf50-\\udf7a\\udf80-\\udf9d\\udfa0-\\udfc3\\udfc8-\\udfcf\\udfd1-\\udfd5]|\\ud801[\\udc00-\\udc9d\\udca0-\\udca9\\udcb0-\\udcd3\\udcd8-\\udcfb\\udd00-\\udd27\\udd30-\\udd63\\ude00-\\udf36\\udf40-\\udf55\\udf60-\\udf67]|\\ud802[\\udc00-\\udc05\\udc08\\udc0a-\\udc35\\udc37-\\udc38\\udc3c\\udc3f-\\udc55\\udc60-\\udc76\\udc80-\\udc9e\\udce0-\\udcf2\\udcf4-\\udcf5\\udd00-\\udd15\\udd20-\\udd39\\udd80-\\uddb7\\uddbe-\\uddbf\\ude00-\\ude03\\ude05-\\ude06\\ude0c-\\ude13\\ude15-\\ude17\\ude19-\\ude35\\ude38-\\ude3a\\ude3f\\ude60-\\ude7c\\ude80-\\ude9c\\udec0-\\udec7\\udec9-\\udee6\\udf00-\\udf35\\udf40-\\udf55\\udf60-\\udf72\\udf80-\\udf91]|\\ud803[\\udc00-\\udc48\\udc80-\\udcb2\\udcc0-\\udcf2\\udd00-\\udd27\\udd30-\\udd39\\udf00-\\udf1c\\udf27\\udf30-\\udf50\\udfe0-\\udff6]|\\ud804[\\udc00-\\udc46\\udc66-\\udc6f\\udc7f-\\udcba\\udcd0-\\udce8\\udcf0-\\udcf9\\udd00-\\udd34\\udd36-\\udd3f\\udd44-\\udd46\\udd50-\\udd73\\udd76\\udd80-\\uddc4\\uddc9-\\uddcc\\uddd0-\\uddda\\udddc\\ude00-\\ude11\\ude13-\\ude37\\ude3e\\ude80-\\ude86\\ude88\\ude8a-\\ude8d\\ude8f-\\ude9d\\ude9f-\\udea8\\udeb0-\\udeea\\udef0-\\udef9\\udf00-\\udf03\\udf05-\\udf0c\\udf0f-\\udf10\\udf13-\\udf28\\udf2a-\\udf30\\udf32-\\udf33\\udf35-\\udf39\\udf3b-\\udf44\\udf47-\\udf48\\udf4b-\\udf4d\\udf50\\udf57\\udf5d-\\udf63\\udf66-\\udf6c\\udf70-\\udf74]|\\ud805[\\udc00-\\udc4a\\udc50-\\udc59\\udc5e-\\udc5f\\udc80-\\udcc5\\udcc7\\udcd0-\\udcd9\\udd80-\\uddb5\\uddb8-\\uddc0\\uddd8-\\udddd\\ude00-\\ude40\\ude44\\ude50-\\ude59\\ude80-\\udeb8\\udec0-\\udec9\\udf00-\\udf1a\\udf1d-\\udf2b\\udf30-\\udf39]|\\ud806[\\udc00-\\udc3a\\udca0-\\udce9\\udcff\\udda0-\\udda7\\uddaa-\\uddd7\\uddda-\\udde1\\udde3-\\udde4\\ude00-\\ude3e\\ude47\\ude50-\\ude99\\ude9d\\udec0-\\udef8]|\\ud807[\\udc00-\\udc08\\udc0a-\\udc36\\udc38-\\udc40\\udc50-\\udc59\\udc72-\\udc8f\\udc92-\\udca7\\udca9-\\udcb6\\udd00-\\udd06\\udd08-\\udd09\\udd0b-\\udd36\\udd3a\\udd3c-\\udd3d\\udd3f-\\udd47\\udd50-\\udd59\\udd60-\\udd65\\udd67-\\udd68\\udd6a-\\udd8e\\udd90-\\udd91\\udd93-\\udd98\\udda0-\\udda9\\udee0-\\udef6]|\\ud808[\\udc00-\\udf99]|\\ud809[\\udc00-\\udc6e\\udc80-\\udd43]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud811[\\udc00-\\ude46]|\\ud81a[\\udc00-\\ude38\\ude40-\\ude5e\\ude60-\\ude69\\uded0-\\udeed\\udef0-\\udef4\\udf00-\\udf36\\udf40-\\udf43\\udf50-\\udf59\\udf63-\\udf77\\udf7d-\\udf8f]|\\ud81b[\\ude40-\\ude7f\\udf00-\\udf4a\\udf4f-\\udf87\\udf8f-\\udf9f\\udfe0-\\udfe1\\udfe3]|\\ud81c[\\udc00-\\udfff]|\\ud81d[\\udc00-\\udfff]|\\ud81e[\\udc00-\\udfff]|\\ud81f[\\udc00-\\udfff]|\\ud820[\\udc00-\\udfff]|\\ud821[\\udc00-\\udff7]|\\ud822[\\udc00-\\udef2]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67\\udd70-\\udefb]|\\ud82f[\\udc00-\\udc6a\\udc70-\\udc7c\\udc80-\\udc88\\udc90-\\udc99\\udc9d-\\udc9e]|\\ud834[\\udd65-\\udd69\\udd6d-\\udd72\\udd7b-\\udd82\\udd85-\\udd8b\\uddaa-\\uddad\\ude42-\\ude44]|\\ud835[\\udc00-\\udc54\\udc56-\\udc9c\\udc9e-\\udc9f\\udca2\\udca5-\\udca6\\udca9-\\udcac\\udcae-\\udcb9\\udcbb\\udcbd-\\udcc3\\udcc5-\\udd05\\udd07-\\udd0a\\udd0d-\\udd14\\udd16-\\udd1c\\udd1e-\\udd39\\udd3b-\\udd3e\\udd40-\\udd44\\udd46\\udd4a-\\udd50\\udd52-\\udea5\\udea8-\\udec0\\udec2-\\udeda\\udedc-\\udefa\\udefc-\\udf14\\udf16-\\udf34\\udf36-\\udf4e\\udf50-\\udf6e\\udf70-\\udf88\\udf8a-\\udfa8\\udfaa-\\udfc2\\udfc4-\\udfcb\\udfce-\\udfff]|\\ud836[\\ude00-\\ude36\\ude3b-\\ude6c\\ude75\\ude84\\ude9b-\\ude9f\\udea1-\\udeaf]|\\ud838[\\udc00-\\udc06\\udc08-\\udc18\\udc1b-\\udc21\\udc23-\\udc24\\udc26-\\udc2a\\udd00-\\udd2c\\udd30-\\udd3d\\udd40-\\udd49\\udd4e\\udec0-\\udef9]|\\ud83a[\\udc00-\\udcc4\\udcd0-\\udcd6\\udd00-\\udd4b\\udd50-\\udd59]|\\ud83b[\\ude00-\\ude03\\ude05-\\ude1f\\ude21-\\ude22\\ude24\\ude27\\ude29-\\ude32\\ude34-\\ude37\\ude39\\ude3b\\ude42\\ude47\\ude49\\ude4b\\ude4d-\\ude4f\\ude51-\\ude52\\ude54\\ude57\\ude59\\ude5b\\ude5d\\ude5f\\ude61-\\ude62\\ude64\\ude67-\\ude6a\\ude6c-\\ude72\\ude74-\\ude77\\ude79-\\ude7c\\ude7e\\ude80-\\ude89\\ude8b-\\ude9b\\udea1-\\udea3\\udea5-\\udea9\\udeab-\\udebb]|\\ud840[\\udc00-\\udfff]|\\ud841[\\udc00-\\udfff]|\\ud842[\\udc00-\\udfff]|\\ud843[\\udc00-\\udfff]|\\ud844[\\udc00-\\udfff]|\\ud845[\\udc00-\\udfff]|\\ud846[\\udc00-\\udfff]|\\ud847[\\udc00-\\udfff]|\\ud848[\\udc00-\\udfff]|\\ud849[\\udc00-\\udfff]|\\ud84a[\\udc00-\\udfff]|\\ud84b[\\udc00-\\udfff]|\\ud84c[\\udc00-\\udfff]|\\ud84d[\\udc00-\\udfff]|\\ud84e[\\udc00-\\udfff]|\\ud84f[\\udc00-\\udfff]|\\ud850[\\udc00-\\udfff]|\\ud851[\\udc00-\\udfff]|\\ud852[\\udc00-\\udfff]|\\ud853[\\udc00-\\udfff]|\\ud854[\\udc00-\\udfff]|\\ud855[\\udc00-\\udfff]|\\ud856[\\udc00-\\udfff]|\\ud857[\\udc00-\\udfff]|\\ud858[\\udc00-\\udfff]|\\ud859[\\udc00-\\udfff]|\\ud85a[\\udc00-\\udfff]|\\ud85b[\\udc00-\\udfff]|\\ud85c[\\udc00-\\udfff]|\\ud85d[\\udc00-\\udfff]|\\ud85e[\\udc00-\\udfff]|\\ud85f[\\udc00-\\udfff]|\\ud860[\\udc00-\\udfff]|\\ud861[\\udc00-\\udfff]|\\ud862[\\udc00-\\udfff]|\\ud863[\\udc00-\\udfff]|\\ud864[\\udc00-\\udfff]|\\ud865[\\udc00-\\udfff]|\\ud866[\\udc00-\\udfff]|\\ud867[\\udc00-\\udfff]|\\ud868[\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86a[\\udc00-\\udfff]|\\ud86b[\\udc00-\\udfff]|\\ud86c[\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud86f[\\udc00-\\udfff]|\\ud870[\\udc00-\\udfff]|\\ud871[\\udc00-\\udfff]|\\ud872[\\udc00-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud874[\\udc00-\\udfff]|\\ud875[\\udc00-\\udfff]|\\ud876[\\udc00-\\udfff]|\\ud877[\\udc00-\\udfff]|\\ud878[\\udc00-\\udfff]|\\ud879[\\udc00-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d]|\\udb40[\\udd00-\\uddef])|[$_]|(\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]{1,}\\})|[\\u200c\\u200d])*>/, function () {\n  yytext = yytext.slice(3, -1);\n  validateUnicodeGroupName(yytext, this.getCurrentState());\n  return 'NAMED_CAPTURE_GROUP';\n}], [/^\\(/, function () {\n  return 'L_PAREN';\n}], [/^\\)/, function () {\n  return 'R_PAREN';\n}], [/^[*?+[^$]/, function () {\n  return 'CHAR';\n}], [/^\\\\\\]/, function () {\n  return 'ESC_CHAR';\n}], [/^\\]/, function () {\n  this.popState();\n  return 'R_BRACKET';\n}], [/^\\^/, function () {\n  return 'BOS';\n}], [/^\\$/, function () {\n  return 'EOS';\n}], [/^\\*/, function () {\n  return 'STAR';\n}], [/^\\?/, function () {\n  return 'Q_MARK';\n}], [/^\\+/, function () {\n  return 'PLUS';\n}], [/^\\|/, function () {\n  return 'BAR';\n}], [/^\\./, function () {\n  return 'ANY';\n}], [/^\\//, function () {\n  return 'SLASH';\n}], [/^[^*?+\\[()\\\\|]/, function () {\n  return 'CHAR';\n}], [/^\\[\\^/, function () {\n  var s = this.getCurrentState();\n  this.pushState(s === 'u' || s === 'xu' ? 'u_class' : 'class');\n  return 'NEG_CLASS';\n}], [/^\\[/, function () {\n  var s = this.getCurrentState();\n  this.pushState(s === 'u' || s === 'xu' ? 'u_class' : 'class');\n  return 'L_BRACKET';\n}]];\nvar lexRulesByConditions = {\n  \"INITIAL\": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],\n  \"u\": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],\n  \"xu\": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],\n  \"x\": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],\n  \"u_class\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51],\n  \"class\": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]\n};\nvar EOF_TOKEN = {\n  type: EOF,\n  value: ''\n};\ntokenizer = {\n  initString: function initString(string) {\n    this._string = string;\n    this._cursor = 0;\n    this._states = ['INITIAL'];\n    this._tokensQueue = [];\n    this._currentLine = 1;\n    this._currentColumn = 0;\n    this._currentLineBeginOffset = 0;\n    /**\n     * Matched token location data.\n     */\n\n    this._tokenStartOffset = 0;\n    this._tokenEndOffset = 0;\n    this._tokenStartLine = 1;\n    this._tokenEndLine = 1;\n    this._tokenStartColumn = 0;\n    this._tokenEndColumn = 0;\n    return this;\n  },\n\n  /**\n   * Returns tokenizer states.\n   */\n  getStates: function getStates() {\n    return this._states;\n  },\n  getCurrentState: function getCurrentState() {\n    return this._states[this._states.length - 1];\n  },\n  pushState: function pushState(state) {\n    this._states.push(state);\n  },\n  begin: function begin(state) {\n    this.pushState(state);\n  },\n  popState: function popState() {\n    if (this._states.length > 1) {\n      return this._states.pop();\n    }\n\n    return this._states[0];\n  },\n  getNextToken: function getNextToken() {\n    // Something was queued, return it.\n    if (this._tokensQueue.length > 0) {\n      return this.onToken(this._toToken(this._tokensQueue.shift()));\n    }\n\n    if (!this.hasMoreTokens()) {\n      return this.onToken(EOF_TOKEN);\n    }\n\n    var string = this._string.slice(this._cursor);\n\n    var lexRulesForState = lexRulesByConditions[this.getCurrentState()];\n\n    for (var i = 0; i < lexRulesForState.length; i++) {\n      var lexRuleIndex = lexRulesForState[i];\n      var lexRule = lexRules[lexRuleIndex];\n\n      var matched = this._match(string, lexRule[0]); // Manual handling of EOF token (the end of string). Return it\n      // as `EOF` symbol.\n\n\n      if (string === '' && matched === '') {\n        this._cursor++;\n      }\n\n      if (matched !== null) {\n        yytext = matched;\n        yyleng = yytext.length;\n        var token = lexRule[1].call(this);\n\n        if (!token) {\n          return this.getNextToken();\n        } // If multiple tokens are returned, save them to return\n        // on next `getNextToken` call.\n\n\n        if (Array.isArray(token)) {\n          var tokensToQueue = token.slice(1);\n          token = token[0];\n\n          if (tokensToQueue.length > 0) {\n            var _tokensQueue;\n\n            (_tokensQueue = this._tokensQueue).unshift.apply(_tokensQueue, _toConsumableArray(tokensToQueue));\n          }\n        }\n\n        return this.onToken(this._toToken(token, yytext));\n      }\n    }\n\n    if (this.isEOF()) {\n      this._cursor++;\n      return EOF_TOKEN;\n    }\n\n    this.throwUnexpectedToken(string[0], this._currentLine, this._currentColumn);\n  },\n\n  /**\n   * Throws default \"Unexpected token\" exception, showing the actual\n   * line from the source, pointing with the ^ marker to the bad token.\n   * In addition, shows `line:column` location.\n   */\n  throwUnexpectedToken: function throwUnexpectedToken(symbol, line, column) {\n    var lineSource = this._string.split('\\n')[line - 1];\n\n    var lineData = '';\n\n    if (lineSource) {\n      var pad = ' '.repeat(column);\n      lineData = '\\n\\n' + lineSource + '\\n' + pad + '^\\n';\n    }\n\n    throw new SyntaxError(lineData + 'Unexpected token: \"' + symbol + '\" ' + ('at ' + line + ':' + column + '.'));\n  },\n  getCursor: function getCursor() {\n    return this._cursor;\n  },\n  getCurrentLine: function getCurrentLine() {\n    return this._currentLine;\n  },\n  getCurrentColumn: function getCurrentColumn() {\n    return this._currentColumn;\n  },\n  _captureLocation: function _captureLocation(matched) {\n    var nlRe = /\\n/g; // Absolute offsets.\n\n    this._tokenStartOffset = this._cursor; // Line-based locations, start.\n\n    this._tokenStartLine = this._currentLine;\n    this._tokenStartColumn = this._tokenStartOffset - this._currentLineBeginOffset; // Extract `\\n` in the matched token.\n\n    var nlMatch = void 0;\n\n    while ((nlMatch = nlRe.exec(matched)) !== null) {\n      this._currentLine++;\n      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;\n    }\n\n    this._tokenEndOffset = this._cursor + matched.length; // Line-based locations, end.\n\n    this._tokenEndLine = this._currentLine;\n    this._tokenEndColumn = this._currentColumn = this._tokenEndOffset - this._currentLineBeginOffset;\n  },\n  _toToken: function _toToken(tokenType) {\n    var yytext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return {\n      // Basic data.\n      type: tokenType,\n      value: yytext,\n      // Location data.\n      startOffset: this._tokenStartOffset,\n      endOffset: this._tokenEndOffset,\n      startLine: this._tokenStartLine,\n      endLine: this._tokenEndLine,\n      startColumn: this._tokenStartColumn,\n      endColumn: this._tokenEndColumn\n    };\n  },\n  isEOF: function isEOF() {\n    return this._cursor === this._string.length;\n  },\n  hasMoreTokens: function hasMoreTokens() {\n    return this._cursor <= this._string.length;\n  },\n  _match: function _match(string, regexp) {\n    var matched = string.match(regexp);\n\n    if (matched) {\n      // Handle `\\n` in the matched token to track line numbers.\n      this._captureLocation(matched[0]);\n\n      this._cursor += matched[0].length;\n      return matched[0];\n    }\n\n    return null;\n  },\n\n  /**\n   * Allows analyzing, and transforming token. Default implementation\n   * just passes the token through.\n   */\n  onToken: function onToken(token) {\n    return token;\n  }\n};\n/**\n * Expose tokenizer so it can be accessed in semantic actions.\n */\n\nyy.lexer = tokenizer;\nyy.tokenizer = tokenizer;\n/**\n * Global parsing options. Some options can be shadowed per\n * each `parse` call, if the optations are passed.\n *\n * Initalized to the `captureLocations` which is passed\n * from the generator. Other options can be added at runtime.\n */\n\nyy.options = {\n  captureLocations: true\n};\n/**\n * Parsing module.\n */\n\nvar yyparse = {\n  /**\n   * Sets global parsing options.\n   */\n  setOptions: function setOptions(options) {\n    yy.options = options;\n    return this;\n  },\n\n  /**\n   * Returns parsing options.\n   */\n  getOptions: function getOptions() {\n    return yy.options;\n  },\n\n  /**\n   * Parses a string.\n   */\n  parse: function parse(string, parseOptions) {\n    if (!tokenizer) {\n      throw new Error('Tokenizer instance wasn\\'t specified.');\n    }\n\n    tokenizer.initString(string);\n    /**\n     * If parse options are passed, override global parse options for\n     * this call, and later restore global options.\n     */\n\n    var globalOptions = yy.options;\n\n    if (parseOptions) {\n      yy.options = Object.assign({}, yy.options, parseOptions);\n    }\n    /**\n     * Allow callers to do setup work based on the\n     * parsing string, and passed options.\n     */\n\n\n    yyparse.onParseBegin(string, tokenizer, yy.options);\n    stack.length = 0;\n    stack.push(0);\n    var token = tokenizer.getNextToken();\n    var shiftedToken = null;\n\n    do {\n      if (!token) {\n        // Restore options.\n        yy.options = globalOptions;\n        unexpectedEndOfInput();\n      }\n\n      var state = stack[stack.length - 1];\n      var column = tokens[token.type];\n\n      if (!table[state].hasOwnProperty(column)) {\n        yy.options = globalOptions;\n        unexpectedToken(token);\n      }\n\n      var entry = table[state][column]; // Shift action.\n\n      if (entry[0] === 's') {\n        var _loc2 = null;\n\n        if (yy.options.captureLocations) {\n          _loc2 = {\n            startOffset: token.startOffset,\n            endOffset: token.endOffset,\n            startLine: token.startLine,\n            endLine: token.endLine,\n            startColumn: token.startColumn,\n            endColumn: token.endColumn\n          };\n        }\n\n        shiftedToken = this.onShift(token);\n        stack.push({\n          symbol: tokens[shiftedToken.type],\n          semanticValue: shiftedToken.value,\n          loc: _loc2\n        }, Number(entry.slice(1)));\n        token = tokenizer.getNextToken();\n      } // Reduce action.\n      else if (entry[0] === 'r') {\n          var productionNumber = entry.slice(1);\n          var production = productions[productionNumber];\n          var hasSemanticAction = typeof production[2] === 'function';\n          var semanticValueArgs = hasSemanticAction ? [] : null;\n          var locationArgs = hasSemanticAction && yy.options.captureLocations ? [] : null;\n\n          if (production[1] !== 0) {\n            var rhsLength = production[1];\n\n            while (rhsLength-- > 0) {\n              stack.pop();\n              var stackEntry = stack.pop();\n\n              if (hasSemanticAction) {\n                semanticValueArgs.unshift(stackEntry.semanticValue);\n\n                if (locationArgs) {\n                  locationArgs.unshift(stackEntry.loc);\n                }\n              }\n            }\n          }\n\n          var reduceStackEntry = {\n            symbol: production[0]\n          };\n\n          if (hasSemanticAction) {\n            yytext = shiftedToken ? shiftedToken.value : null;\n            yyleng = shiftedToken ? shiftedToken.value.length : null;\n            var semanticActionArgs = locationArgs !== null ? semanticValueArgs.concat(locationArgs) : semanticValueArgs;\n            production[2].apply(production, _toConsumableArray(semanticActionArgs));\n            reduceStackEntry.semanticValue = __;\n\n            if (locationArgs) {\n              reduceStackEntry.loc = __loc;\n            }\n          }\n\n          var nextState = stack[stack.length - 1];\n          var symbolToReduceWith = production[0];\n          stack.push(reduceStackEntry, table[nextState][symbolToReduceWith]);\n        } // Accept.\n        else if (entry === 'acc') {\n            stack.pop();\n            var parsed = stack.pop();\n\n            if (stack.length !== 1 || stack[0] !== 0 || tokenizer.hasMoreTokens()) {\n              // Restore options.\n              yy.options = globalOptions;\n              unexpectedToken(token);\n            }\n\n            if (parsed.hasOwnProperty('semanticValue')) {\n              yy.options = globalOptions;\n              yyparse.onParseEnd(parsed.semanticValue);\n              return parsed.semanticValue;\n            }\n\n            yyparse.onParseEnd(); // Restore options.\n\n            yy.options = globalOptions;\n            return true;\n          }\n    } while (tokenizer.hasMoreTokens() || stack.length > 1);\n  },\n  setTokenizer: function setTokenizer(customTokenizer) {\n    tokenizer = customTokenizer;\n    return yyparse;\n  },\n  getTokenizer: function getTokenizer() {\n    return tokenizer;\n  },\n  onParseBegin: function onParseBegin(string, tokenizer, options) {},\n  onParseEnd: function onParseEnd(parsed) {},\n\n  /**\n   * Allows analyzing, and transforming shifted token. Default implementation\n   * just passes the token through.\n   */\n  onShift: function onShift(token) {\n    return token;\n  }\n};\n/**\n * Tracks capturing groups.\n */\n\nvar capturingGroupsCount = 0;\n/**\n * Tracks named groups.\n */\n\nvar namedGroups = {};\n/**\n * Parsing string.\n */\n\nvar parsingString = '';\n\nyyparse.onParseBegin = function (string, lexer) {\n  parsingString = string;\n  capturingGroupsCount = 0;\n  namedGroups = {};\n  var lastSlash = string.lastIndexOf('/');\n  var flags = string.slice(lastSlash);\n\n  if (flags.includes('x') && flags.includes('u')) {\n    lexer.pushState('xu');\n  } else {\n    if (flags.includes('x')) {\n      lexer.pushState('x');\n    }\n\n    if (flags.includes('u')) {\n      lexer.pushState('u');\n    }\n  }\n};\n/**\n * On shifting `(` remember its number to used on reduce.\n */\n\n\nyyparse.onShift = function (token) {\n  if (token.type === 'L_PAREN' || token.type === 'NAMED_CAPTURE_GROUP') {\n    token.value = new String(token.value);\n    token.value.groupNumber = ++capturingGroupsCount;\n  }\n\n  return token;\n};\n/**\n * Extracts ranges from the range string.\n */\n\n\nfunction getRange(text) {\n  var range = text.match(/\\d+/g).map(Number);\n\n  if (Number.isFinite(range[1]) && range[1] < range[0]) {\n    throw new SyntaxError('Numbers out of order in ' + text + ' quantifier');\n  }\n\n  return range;\n}\n/**\n * Checks class range\n */\n\n\nfunction checkClassRange(from, to) {\n  if (from.kind === 'control' || to.kind === 'control' || !isNaN(from.codePoint) && !isNaN(to.codePoint) && from.codePoint > to.codePoint) {\n    throw new SyntaxError('Range ' + from.value + '-' + to.value + ' out of order in character class');\n  }\n} // ---------------------- Unicode property -------------------------------------------\n\n\nvar unicodeProperties = __webpack_require__(/*! ../unicode/parser-unicode-properties.js */ \"./node_modules/regexp-tree/dist/parser/unicode/parser-unicode-properties.js\");\n/**\n * Unicode property.\n */\n\n\nfunction UnicodeProperty(matched, loc) {\n  var negative = matched[1] === 'P';\n  var separatorIdx = matched.indexOf('=');\n  var name = matched.slice(3, separatorIdx !== -1 ? separatorIdx : -1);\n  var value = void 0; // General_Category allows using only value as a shorthand.\n\n  var isShorthand = separatorIdx === -1 && unicodeProperties.isGeneralCategoryValue(name); // Binary propery name.\n\n  var isBinaryProperty = separatorIdx === -1 && unicodeProperties.isBinaryPropertyName(name);\n\n  if (isShorthand) {\n    value = name;\n    name = 'General_Category';\n  } else if (isBinaryProperty) {\n    value = name;\n  } else {\n    if (!unicodeProperties.isValidName(name)) {\n      throw new SyntaxError('Invalid unicode property name: ' + name + '.');\n    }\n\n    value = matched.slice(separatorIdx + 1, -1);\n\n    if (!unicodeProperties.isValidValue(name, value)) {\n      throw new SyntaxError('Invalid ' + name + ' unicode property value: ' + value + '.');\n    }\n  }\n\n  return Node({\n    type: 'UnicodeProperty',\n    name: name,\n    value: value,\n    negative: negative,\n    shorthand: isShorthand,\n    binary: isBinaryProperty,\n    canonicalName: unicodeProperties.getCanonicalName(name) || name,\n    canonicalValue: unicodeProperties.getCanonicalValue(value) || value\n  }, loc);\n} // ----------------------------------------------------------------------------------\n\n/**\n * Creates a character node.\n */\n\n\nfunction Char(value, kind, loc) {\n  var symbol = void 0;\n  var codePoint = void 0;\n\n  switch (kind) {\n    case 'decimal':\n      {\n        codePoint = Number(value.slice(1));\n        symbol = String.fromCodePoint(codePoint);\n        break;\n      }\n\n    case 'oct':\n      {\n        codePoint = parseInt(value.slice(1), 8);\n        symbol = String.fromCodePoint(codePoint);\n        break;\n      }\n\n    case 'hex':\n    case 'unicode':\n      {\n        if (value.lastIndexOf(\"\\\\u\") > 0) {\n          var _value$split$slice = value.split(\"\\\\u\").slice(1),\n              _value$split$slice2 = _slicedToArray(_value$split$slice, 2),\n              lead = _value$split$slice2[0],\n              trail = _value$split$slice2[1];\n\n          lead = parseInt(lead, 16);\n          trail = parseInt(trail, 16);\n          codePoint = (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;\n          symbol = String.fromCodePoint(codePoint);\n        } else {\n          var hex = value.slice(2).replace('{', '');\n          codePoint = parseInt(hex, 16);\n\n          if (codePoint > 0x10ffff) {\n            throw new SyntaxError('Bad character escape sequence: ' + value);\n          }\n\n          symbol = String.fromCodePoint(codePoint);\n        }\n\n        break;\n      }\n\n    case 'meta':\n      {\n        switch (value) {\n          case '\\\\t':\n            symbol = '\\t';\n            codePoint = symbol.codePointAt(0);\n            break;\n\n          case '\\\\n':\n            symbol = '\\n';\n            codePoint = symbol.codePointAt(0);\n            break;\n\n          case '\\\\r':\n            symbol = '\\r';\n            codePoint = symbol.codePointAt(0);\n            break;\n\n          case '\\\\v':\n            symbol = '\\v';\n            codePoint = symbol.codePointAt(0);\n            break;\n\n          case '\\\\f':\n            symbol = '\\f';\n            codePoint = symbol.codePointAt(0);\n            break;\n\n          case '\\\\b':\n            symbol = '\\b';\n            codePoint = symbol.codePointAt(0);\n\n          case '\\\\0':\n            symbol = '\\0';\n            codePoint = 0;\n\n          case '.':\n            symbol = '.';\n            codePoint = NaN;\n            break;\n\n          default:\n            codePoint = NaN;\n        }\n\n        break;\n      }\n\n    case 'simple':\n      {\n        symbol = value;\n        codePoint = symbol.codePointAt(0);\n        break;\n      }\n  }\n\n  return Node({\n    type: 'Char',\n    value: value,\n    kind: kind,\n    symbol: symbol,\n    codePoint: codePoint\n  }, loc);\n}\n/**\n * Valid flags per current ECMAScript spec and\n * stage 3+ proposals.\n */\n\n\nvar validFlags = 'gimsuxy';\n/**\n * Checks the flags are valid, and that\n * we don't duplicate flags.\n */\n\nfunction checkFlags(flags) {\n  var seen = new Set();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = flags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var flag = _step.value;\n\n      if (seen.has(flag) || !validFlags.includes(flag)) {\n        throw new SyntaxError('Invalid flags: ' + flags);\n      }\n\n      seen.add(flag);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return flags.split('').sort().join('');\n}\n/**\n * Parses patterns like \\1, \\2, etc. either as a backreference\n * to a group, or a deciaml char code.\n */\n\n\nfunction GroupRefOrDecChar(text, textLoc) {\n  var reference = Number(text.slice(1));\n\n  if (reference > 0 && reference <= capturingGroupsCount) {\n    return Node({\n      type: 'Backreference',\n      kind: 'number',\n      number: reference,\n      reference: reference\n    }, textLoc);\n  }\n\n  return Char(text, 'decimal', textLoc);\n}\n/**\n * Unicode names.\n */\n\n\nvar uReStart = /^\\\\u[0-9a-fA-F]{4}/; // only matches start of string\n\nvar ucpReStart = /^\\\\u\\{[0-9a-fA-F]{1,}\\}/; // only matches start of string\n\nvar ucpReAnywhere = /\\\\u\\{[0-9a-fA-F]{1,}\\}/; // matches anywhere in string\n\n/**\n * Validates Unicode group name.\n */\n\nfunction validateUnicodeGroupName(name, state) {\n  var isUnicodeName = ucpReAnywhere.test(name);\n  var isUnicodeState = state === 'u' || state === 'xu' || state === 'u_class';\n\n  if (isUnicodeName && !isUnicodeState) {\n    throw new SyntaxError('invalid group Unicode name \"' + name + '\", use `u` flag.');\n  }\n\n  return name;\n} // Matches the following production: https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence\n//\n//  RegExpUnicodeEscapeSequence ::\n//    `u` LeadSurrogate `\\u` TrailSurrogate   # as 'leadSurrogate', 'trailSurrogate'\n//    `u` LeadSurrogate                       # as 'leadSurrogateOnly'\n//    `u` TrailSurrogate                      # as 'trailSurrogateOnly'\n//    `u` NonSurrogate                        # as 'nonSurrogate'\n//    `u` `{` CodePoint `}`                   # as 'codePoint'\n//\n//  LeadSurrogate ::\n//    Hex4Digits but only if the SV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF        # [dD][89aAbB][0-9a-fA-F]{2}\n//\n//  TrailSurrogate ::\n//    Hex4Digits but only if the SV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF        # [dD][c-fC-F][0-9a-fA-F]{2}\n//\n//  NonSurrogate ::\n//    Hex4Digits but only if the SV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF    # [0-9a-ce-fA-CE-F][0-9a-fA-F]{3}|[dD][0-7][0-9a-fA-F]{2}\n//\n//  CodePoint ::\n//    HexDigits but only if MV of HexDigits ≤ 0x10FFFF                                              # 0*(?:[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4})\n//\n\n\nvar uidRe = /\\\\u(?:([dD][89aAbB][0-9a-fA-F]{2})\\\\u([dD][c-fC-F][0-9a-fA-F]{2})|([dD][89aAbB][0-9a-fA-F]{2})|([dD][c-fC-F][0-9a-fA-F]{2})|([0-9a-ce-fA-CE-F][0-9a-fA-F]{3}|[dD][0-7][0-9a-fA-F]{2})|\\{(0*(?:[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4}))\\})/;\n\nfunction decodeUnicodeGroupName(name) {\n  return name.replace(new RegExp(uidRe, 'g'), function (_, leadSurrogate, trailSurrogate, leadSurrogateOnly, trailSurrogateOnly, nonSurrogate, codePoint) {\n    if (leadSurrogate) {\n      return String.fromCodePoint(parseInt(leadSurrogate, 16), parseInt(trailSurrogate, 16));\n    }\n\n    if (leadSurrogateOnly) {\n      return String.fromCodePoint(parseInt(leadSurrogateOnly, 16));\n    }\n\n    if (trailSurrogateOnly) {\n      // TODO: Per the spec: https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence\n      // > Each `\\u` TrailSurrogate for which the choice of associated `u` LeadSurrogate is ambiguous shall be associated with the nearest possible `u` LeadSurrogate that would otherwise have no corresponding `\\u` TrailSurrogate.\n      return String.fromCodePoint(parseInt(trailSurrogateOnly, 16));\n    }\n\n    if (nonSurrogate) {\n      return String.fromCodePoint(parseInt(nonSurrogate, 16));\n    }\n\n    if (codePoint) {\n      return String.fromCodePoint(parseInt(codePoint, 16));\n    }\n\n    return _;\n  });\n}\n/**\n * Extracts from `\\k<foo>` pattern either a backreference\n * to a named capturing group (if it presents), or parses it\n * as a list of char: `\\k`, `<`, `f`, etc.\n */\n\n\nfunction NamedGroupRefOrChars(text, textLoc) {\n  var referenceRaw = text.slice(3, -1);\n  var reference = decodeUnicodeGroupName(referenceRaw);\n\n  if (namedGroups.hasOwnProperty(reference)) {\n    return Node({\n      type: 'Backreference',\n      kind: 'name',\n      number: namedGroups[reference],\n      reference: reference,\n      referenceRaw: referenceRaw\n    }, textLoc);\n  } // Else `\\k<foo>` should be parsed as a list of `Char`s.\n  // This is really a 0.01% edge case, but we should handle it.\n\n\n  var startOffset = null;\n  var startLine = null;\n  var endLine = null;\n  var startColumn = null;\n\n  if (textLoc) {\n    startOffset = textLoc.startOffset;\n    startLine = textLoc.startLine;\n    endLine = textLoc.endLine;\n    startColumn = textLoc.startColumn;\n  }\n\n  var charRe = /^[\\w$<>]/;\n  var loc = void 0;\n  var chars = [// Init to first \\k, taking 2 symbols.\n  Char(text.slice(1, 2), 'simple', startOffset ? {\n    startLine: startLine,\n    endLine: endLine,\n    startColumn: startColumn,\n    startOffset: startOffset,\n    endOffset: startOffset += 2,\n    endColumn: startColumn += 2\n  } : null)]; // For \\k\n\n  chars[0].escaped = true; // Other symbols.\n\n  text = text.slice(2);\n\n  while (text.length > 0) {\n    var matched = null; // Unicode, \\u003B or \\u{003B}\n\n    if ((matched = text.match(uReStart)) || (matched = text.match(ucpReStart))) {\n      if (startOffset) {\n        loc = {\n          startLine: startLine,\n          endLine: endLine,\n          startColumn: startColumn,\n          startOffset: startOffset,\n          endOffset: startOffset += matched[0].length,\n          endColumn: startColumn += matched[0].length\n        };\n      }\n\n      chars.push(Char(matched[0], 'unicode', loc));\n      text = text.slice(matched[0].length);\n    } // Simple char.\n    else if (matched = text.match(charRe)) {\n        if (startOffset) {\n          loc = {\n            startLine: startLine,\n            endLine: endLine,\n            startColumn: startColumn,\n            startOffset: startOffset,\n            endOffset: ++startOffset,\n            endColumn: ++startColumn\n          };\n        }\n\n        chars.push(Char(matched[0], 'simple', loc));\n        text = text.slice(1);\n      }\n  }\n\n  return chars;\n}\n/**\n * Creates an AST node with a location.\n */\n\n\nfunction Node(node, loc) {\n  if (yy.options.captureLocations) {\n    node.loc = {\n      source: parsingString.slice(loc.startOffset, loc.endOffset),\n      start: {\n        line: loc.startLine,\n        column: loc.startColumn,\n        offset: loc.startOffset\n      },\n      end: {\n        line: loc.endLine,\n        column: loc.endColumn,\n        offset: loc.endOffset\n      }\n    };\n  }\n\n  return node;\n}\n/**\n * Creates location node.\n */\n\n\nfunction loc(start, end) {\n  if (!yy.options.captureLocations) {\n    return null;\n  }\n\n  return {\n    startOffset: start.startOffset,\n    endOffset: end.endOffset,\n    startLine: start.startLine,\n    endLine: end.endLine,\n    startColumn: start.startColumn,\n    endColumn: end.endColumn\n  };\n}\n\nfunction unexpectedToken(token) {\n  if (token.type === EOF) {\n    unexpectedEndOfInput();\n  }\n\n  tokenizer.throwUnexpectedToken(token.value, token.startLine, token.startColumn);\n}\n\nfunction unexpectedEndOfInput() {\n  parseError('Unexpected end of input.');\n}\n\nfunction parseError(message) {\n  throw new SyntaxError(message);\n}\n\nmodule.exports = yyparse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/parser/generated/regexp-tree.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/parser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/regexp-tree/dist/parser/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar regexpTreeParser = __webpack_require__(/*! ./generated/regexp-tree */ \"./node_modules/regexp-tree/dist/parser/generated/regexp-tree.js\");\n/**\n * Original parse function.\n */\n\n\nvar generatedParseFn = regexpTreeParser.parse.bind(regexpTreeParser);\n/**\n * Parses a regular expression.\n *\n * Override original `regexpTreeParser.parse` to convert a value to a string,\n * since in regexp-tree we may pass strings, and RegExp instance.\n */\n\nregexpTreeParser.parse = function (regexp, options) {\n  return generatedParseFn('' + regexp, options);\n}; // By default do not capture locations; callers may override.\n\n\nregexpTreeParser.setOptions({\n  captureLocations: false\n});\nmodule.exports = regexpTreeParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9wYXJzZXIvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9wYXJzZXIvaW5kZXguanM/YTU1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwVHJlZVBhcnNlciA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVkL3JlZ2V4cC10cmVlJyk7XG5cbi8qKlxuICogT3JpZ2luYWwgcGFyc2UgZnVuY3Rpb24uXG4gKi9cbnZhciBnZW5lcmF0ZWRQYXJzZUZuID0gcmVnZXhwVHJlZVBhcnNlci5wYXJzZS5iaW5kKHJlZ2V4cFRyZWVQYXJzZXIpO1xuXG4vKipcbiAqIFBhcnNlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBPdmVycmlkZSBvcmlnaW5hbCBgcmVnZXhwVHJlZVBhcnNlci5wYXJzZWAgdG8gY29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nLFxuICogc2luY2UgaW4gcmVnZXhwLXRyZWUgd2UgbWF5IHBhc3Mgc3RyaW5ncywgYW5kIFJlZ0V4cCBpbnN0YW5jZS5cbiAqL1xucmVnZXhwVHJlZVBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uIChyZWdleHAsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdlbmVyYXRlZFBhcnNlRm4oJycgKyByZWdleHAsIG9wdGlvbnMpO1xufTtcblxuLy8gQnkgZGVmYXVsdCBkbyBub3QgY2FwdHVyZSBsb2NhdGlvbnM7IGNhbGxlcnMgbWF5IG92ZXJyaWRlLlxucmVnZXhwVHJlZVBhcnNlci5zZXRPcHRpb25zKHsgY2FwdHVyZUxvY2F0aW9uczogZmFsc2UgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVnZXhwVHJlZVBhcnNlcjsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFFQTs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/parser/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/parser/unicode/parser-unicode-properties.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/parser/unicode/parser-unicode-properties.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\nvar NON_BINARY_PROP_NAMES_TO_ALIASES = {\n  General_Category: 'gc',\n  Script: 'sc',\n  Script_Extensions: 'scx'\n};\nvar NON_BINARY_ALIASES_TO_PROP_NAMES = inverseMap(NON_BINARY_PROP_NAMES_TO_ALIASES);\nvar BINARY_PROP_NAMES_TO_ALIASES = {\n  ASCII: 'ASCII',\n  ASCII_Hex_Digit: 'AHex',\n  Alphabetic: 'Alpha',\n  Any: 'Any',\n  Assigned: 'Assigned',\n  Bidi_Control: 'Bidi_C',\n  Bidi_Mirrored: 'Bidi_M',\n  Case_Ignorable: 'CI',\n  Cased: 'Cased',\n  Changes_When_Casefolded: 'CWCF',\n  Changes_When_Casemapped: 'CWCM',\n  Changes_When_Lowercased: 'CWL',\n  Changes_When_NFKC_Casefolded: 'CWKCF',\n  Changes_When_Titlecased: 'CWT',\n  Changes_When_Uppercased: 'CWU',\n  Dash: 'Dash',\n  Default_Ignorable_Code_Point: 'DI',\n  Deprecated: 'Dep',\n  Diacritic: 'Dia',\n  Emoji: 'Emoji',\n  Emoji_Component: 'Emoji_Component',\n  Emoji_Modifier: 'Emoji_Modifier',\n  Emoji_Modifier_Base: 'Emoji_Modifier_Base',\n  Emoji_Presentation: 'Emoji_Presentation',\n  Extended_Pictographic: 'Extended_Pictographic',\n  Extender: 'Ext',\n  Grapheme_Base: 'Gr_Base',\n  Grapheme_Extend: 'Gr_Ext',\n  Hex_Digit: 'Hex',\n  IDS_Binary_Operator: 'IDSB',\n  IDS_Trinary_Operator: 'IDST',\n  ID_Continue: 'IDC',\n  ID_Start: 'IDS',\n  Ideographic: 'Ideo',\n  Join_Control: 'Join_C',\n  Logical_Order_Exception: 'LOE',\n  Lowercase: 'Lower',\n  Math: 'Math',\n  Noncharacter_Code_Point: 'NChar',\n  Pattern_Syntax: 'Pat_Syn',\n  Pattern_White_Space: 'Pat_WS',\n  Quotation_Mark: 'QMark',\n  Radical: 'Radical',\n  Regional_Indicator: 'RI',\n  Sentence_Terminal: 'STerm',\n  Soft_Dotted: 'SD',\n  Terminal_Punctuation: 'Term',\n  Unified_Ideograph: 'UIdeo',\n  Uppercase: 'Upper',\n  Variation_Selector: 'VS',\n  White_Space: 'space',\n  XID_Continue: 'XIDC',\n  XID_Start: 'XIDS'\n};\nvar BINARY_ALIASES_TO_PROP_NAMES = inverseMap(BINARY_PROP_NAMES_TO_ALIASES);\nvar GENERAL_CATEGORY_VALUE_TO_ALIASES = {\n  Cased_Letter: 'LC',\n  Close_Punctuation: 'Pe',\n  Connector_Punctuation: 'Pc',\n  Control: ['Cc', 'cntrl'],\n  Currency_Symbol: 'Sc',\n  Dash_Punctuation: 'Pd',\n  Decimal_Number: ['Nd', 'digit'],\n  Enclosing_Mark: 'Me',\n  Final_Punctuation: 'Pf',\n  Format: 'Cf',\n  Initial_Punctuation: 'Pi',\n  Letter: 'L',\n  Letter_Number: 'Nl',\n  Line_Separator: 'Zl',\n  Lowercase_Letter: 'Ll',\n  Mark: ['M', 'Combining_Mark'],\n  Math_Symbol: 'Sm',\n  Modifier_Letter: 'Lm',\n  Modifier_Symbol: 'Sk',\n  Nonspacing_Mark: 'Mn',\n  Number: 'N',\n  Open_Punctuation: 'Ps',\n  Other: 'C',\n  Other_Letter: 'Lo',\n  Other_Number: 'No',\n  Other_Punctuation: 'Po',\n  Other_Symbol: 'So',\n  Paragraph_Separator: 'Zp',\n  Private_Use: 'Co',\n  Punctuation: ['P', 'punct'],\n  Separator: 'Z',\n  Space_Separator: 'Zs',\n  Spacing_Mark: 'Mc',\n  Surrogate: 'Cs',\n  Symbol: 'S',\n  Titlecase_Letter: 'Lt',\n  Unassigned: 'Cn',\n  Uppercase_Letter: 'Lu'\n};\nvar GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES = inverseMap(GENERAL_CATEGORY_VALUE_TO_ALIASES);\nvar SCRIPT_VALUE_TO_ALIASES = {\n  Adlam: 'Adlm',\n  Ahom: 'Ahom',\n  Anatolian_Hieroglyphs: 'Hluw',\n  Arabic: 'Arab',\n  Armenian: 'Armn',\n  Avestan: 'Avst',\n  Balinese: 'Bali',\n  Bamum: 'Bamu',\n  Bassa_Vah: 'Bass',\n  Batak: 'Batk',\n  Bengali: 'Beng',\n  Bhaiksuki: 'Bhks',\n  Bopomofo: 'Bopo',\n  Brahmi: 'Brah',\n  Braille: 'Brai',\n  Buginese: 'Bugi',\n  Buhid: 'Buhd',\n  Canadian_Aboriginal: 'Cans',\n  Carian: 'Cari',\n  Caucasian_Albanian: 'Aghb',\n  Chakma: 'Cakm',\n  Cham: 'Cham',\n  Cherokee: 'Cher',\n  Common: 'Zyyy',\n  Coptic: ['Copt', 'Qaac'],\n  Cuneiform: 'Xsux',\n  Cypriot: 'Cprt',\n  Cyrillic: 'Cyrl',\n  Deseret: 'Dsrt',\n  Devanagari: 'Deva',\n  Dogra: 'Dogr',\n  Duployan: 'Dupl',\n  Egyptian_Hieroglyphs: 'Egyp',\n  Elbasan: 'Elba',\n  Ethiopic: 'Ethi',\n  Georgian: 'Geor',\n  Glagolitic: 'Glag',\n  Gothic: 'Goth',\n  Grantha: 'Gran',\n  Greek: 'Grek',\n  Gujarati: 'Gujr',\n  Gunjala_Gondi: 'Gong',\n  Gurmukhi: 'Guru',\n  Han: 'Hani',\n  Hangul: 'Hang',\n  Hanifi_Rohingya: 'Rohg',\n  Hanunoo: 'Hano',\n  Hatran: 'Hatr',\n  Hebrew: 'Hebr',\n  Hiragana: 'Hira',\n  Imperial_Aramaic: 'Armi',\n  Inherited: ['Zinh', 'Qaai'],\n  Inscriptional_Pahlavi: 'Phli',\n  Inscriptional_Parthian: 'Prti',\n  Javanese: 'Java',\n  Kaithi: 'Kthi',\n  Kannada: 'Knda',\n  Katakana: 'Kana',\n  Kayah_Li: 'Kali',\n  Kharoshthi: 'Khar',\n  Khmer: 'Khmr',\n  Khojki: 'Khoj',\n  Khudawadi: 'Sind',\n  Lao: 'Laoo',\n  Latin: 'Latn',\n  Lepcha: 'Lepc',\n  Limbu: 'Limb',\n  Linear_A: 'Lina',\n  Linear_B: 'Linb',\n  Lisu: 'Lisu',\n  Lycian: 'Lyci',\n  Lydian: 'Lydi',\n  Mahajani: 'Mahj',\n  Makasar: 'Maka',\n  Malayalam: 'Mlym',\n  Mandaic: 'Mand',\n  Manichaean: 'Mani',\n  Marchen: 'Marc',\n  Medefaidrin: 'Medf',\n  Masaram_Gondi: 'Gonm',\n  Meetei_Mayek: 'Mtei',\n  Mende_Kikakui: 'Mend',\n  Meroitic_Cursive: 'Merc',\n  Meroitic_Hieroglyphs: 'Mero',\n  Miao: 'Plrd',\n  Modi: 'Modi',\n  Mongolian: 'Mong',\n  Mro: 'Mroo',\n  Multani: 'Mult',\n  Myanmar: 'Mymr',\n  Nabataean: 'Nbat',\n  New_Tai_Lue: 'Talu',\n  Newa: 'Newa',\n  Nko: 'Nkoo',\n  Nushu: 'Nshu',\n  Ogham: 'Ogam',\n  Ol_Chiki: 'Olck',\n  Old_Hungarian: 'Hung',\n  Old_Italic: 'Ital',\n  Old_North_Arabian: 'Narb',\n  Old_Permic: 'Perm',\n  Old_Persian: 'Xpeo',\n  Old_Sogdian: 'Sogo',\n  Old_South_Arabian: 'Sarb',\n  Old_Turkic: 'Orkh',\n  Oriya: 'Orya',\n  Osage: 'Osge',\n  Osmanya: 'Osma',\n  Pahawh_Hmong: 'Hmng',\n  Palmyrene: 'Palm',\n  Pau_Cin_Hau: 'Pauc',\n  Phags_Pa: 'Phag',\n  Phoenician: 'Phnx',\n  Psalter_Pahlavi: 'Phlp',\n  Rejang: 'Rjng',\n  Runic: 'Runr',\n  Samaritan: 'Samr',\n  Saurashtra: 'Saur',\n  Sharada: 'Shrd',\n  Shavian: 'Shaw',\n  Siddham: 'Sidd',\n  SignWriting: 'Sgnw',\n  Sinhala: 'Sinh',\n  Sogdian: 'Sogd',\n  Sora_Sompeng: 'Sora',\n  Soyombo: 'Soyo',\n  Sundanese: 'Sund',\n  Syloti_Nagri: 'Sylo',\n  Syriac: 'Syrc',\n  Tagalog: 'Tglg',\n  Tagbanwa: 'Tagb',\n  Tai_Le: 'Tale',\n  Tai_Tham: 'Lana',\n  Tai_Viet: 'Tavt',\n  Takri: 'Takr',\n  Tamil: 'Taml',\n  Tangut: 'Tang',\n  Telugu: 'Telu',\n  Thaana: 'Thaa',\n  Thai: 'Thai',\n  Tibetan: 'Tibt',\n  Tifinagh: 'Tfng',\n  Tirhuta: 'Tirh',\n  Ugaritic: 'Ugar',\n  Vai: 'Vaii',\n  Warang_Citi: 'Wara',\n  Yi: 'Yiii',\n  Zanabazar_Square: 'Zanb'\n};\nvar SCRIPT_VALUE_ALIASES_TO_VALUE = inverseMap(SCRIPT_VALUE_TO_ALIASES);\n\nfunction inverseMap(data) {\n  var inverse = {};\n\n  for (var name in data) {\n    if (!data.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var value = data[name];\n\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        inverse[value[i]] = name;\n      }\n    } else {\n      inverse[value] = name;\n    }\n  }\n\n  return inverse;\n}\n\nfunction isValidName(name) {\n  return NON_BINARY_PROP_NAMES_TO_ALIASES.hasOwnProperty(name) || NON_BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name) || BINARY_PROP_NAMES_TO_ALIASES.hasOwnProperty(name) || BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name);\n}\n\nfunction isValidValue(name, value) {\n  if (isGeneralCategoryName(name)) {\n    return isGeneralCategoryValue(value);\n  }\n\n  if (isScriptCategoryName(name)) {\n    return isScriptCategoryValue(value);\n  }\n\n  return false;\n}\n\nfunction isAlias(name) {\n  return NON_BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name) || BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name);\n}\n\nfunction isGeneralCategoryName(name) {\n  return name === 'General_Category' || name == 'gc';\n}\n\nfunction isScriptCategoryName(name) {\n  return name === 'Script' || name === 'Script_Extensions' || name === 'sc' || name === 'scx';\n}\n\nfunction isGeneralCategoryValue(value) {\n  return GENERAL_CATEGORY_VALUE_TO_ALIASES.hasOwnProperty(value) || GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES.hasOwnProperty(value);\n}\n\nfunction isScriptCategoryValue(value) {\n  return SCRIPT_VALUE_TO_ALIASES.hasOwnProperty(value) || SCRIPT_VALUE_ALIASES_TO_VALUE.hasOwnProperty(value);\n}\n\nfunction isBinaryPropertyName(name) {\n  return BINARY_PROP_NAMES_TO_ALIASES.hasOwnProperty(name) || BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name);\n}\n\nfunction getCanonicalName(name) {\n  if (NON_BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name)) {\n    return NON_BINARY_ALIASES_TO_PROP_NAMES[name];\n  }\n\n  if (BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(name)) {\n    return BINARY_ALIASES_TO_PROP_NAMES[name];\n  }\n\n  return null;\n}\n\nfunction getCanonicalValue(value) {\n  if (GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES.hasOwnProperty(value)) {\n    return GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES[value];\n  }\n\n  if (SCRIPT_VALUE_ALIASES_TO_VALUE.hasOwnProperty(value)) {\n    return SCRIPT_VALUE_ALIASES_TO_VALUE[value];\n  }\n\n  if (BINARY_ALIASES_TO_PROP_NAMES.hasOwnProperty(value)) {\n    return BINARY_ALIASES_TO_PROP_NAMES[value];\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  isAlias: isAlias,\n  isValidName: isValidName,\n  isValidValue: isValidValue,\n  isGeneralCategoryValue: isGeneralCategoryValue,\n  isScriptCategoryValue: isScriptCategoryValue,\n  isBinaryPropertyName: isBinaryPropertyName,\n  getCanonicalName: getCanonicalName,\n  getCanonicalValue: getCanonicalValue,\n  NON_BINARY_PROP_NAMES_TO_ALIASES: NON_BINARY_PROP_NAMES_TO_ALIASES,\n  NON_BINARY_ALIASES_TO_PROP_NAMES: NON_BINARY_ALIASES_TO_PROP_NAMES,\n  BINARY_PROP_NAMES_TO_ALIASES: BINARY_PROP_NAMES_TO_ALIASES,\n  BINARY_ALIASES_TO_PROP_NAMES: BINARY_ALIASES_TO_PROP_NAMES,\n  GENERAL_CATEGORY_VALUE_TO_ALIASES: GENERAL_CATEGORY_VALUE_TO_ALIASES,\n  GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES: GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES,\n  SCRIPT_VALUE_TO_ALIASES: SCRIPT_VALUE_TO_ALIASES,\n  SCRIPT_VALUE_ALIASES_TO_VALUE: SCRIPT_VALUE_ALIASES_TO_VALUE\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/parser/unicode/parser-unicode-properties.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/regexp-tree.js":
/*!******************************************************!*\
  !*** ./node_modules/regexp-tree/dist/regexp-tree.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar compatTranspiler = __webpack_require__(/*! ./compat-transpiler */ \"./node_modules/regexp-tree/dist/compat-transpiler/index.js\");\n\nvar generator = __webpack_require__(/*! ./generator */ \"./node_modules/regexp-tree/dist/generator/index.js\");\n\nvar optimizer = __webpack_require__(/*! ./optimizer */ \"./node_modules/regexp-tree/dist/optimizer/index.js\");\n\nvar parser = __webpack_require__(/*! ./parser */ \"./node_modules/regexp-tree/dist/parser/index.js\");\n\nvar _transform = __webpack_require__(/*! ./transform */ \"./node_modules/regexp-tree/dist/transform/index.js\");\n\nvar _traverse = __webpack_require__(/*! ./traverse */ \"./node_modules/regexp-tree/dist/traverse/index.js\");\n\nvar fa = __webpack_require__(/*! ./interpreter/finite-automaton */ \"./node_modules/regexp-tree/dist/interpreter/finite-automaton/index.js\");\n\nvar _require = __webpack_require__(/*! ./compat-transpiler/runtime */ \"./node_modules/regexp-tree/dist/compat-transpiler/runtime/index.js\"),\n    RegExpTree = _require.RegExpTree;\n/**\n * An API object for RegExp processing (parsing/transform/generation).\n */\n\n\nvar regexpTree = {\n  /**\n   * Parser module exposed.\n   */\n  parser: parser,\n\n  /**\n   * Expose finite-automaton module.\n   */\n  fa: fa,\n\n  /**\n   * `TransformResult` exposed.\n   */\n  TransformResult: _transform.TransformResult,\n\n  /**\n   * Parses a regexp string, producing an AST.\n   *\n   * @param string regexp\n   *\n   *   a regular expression in different formats: string, AST, RegExp.\n   *\n   * @param Object options\n   *\n   *   parsing options for this parse call. Default are:\n   *\n   *     - captureLocations: boolean\n   *     - any other custom options\n   *\n   * @return Object AST\n   */\n  parse: function parse(regexp, options) {\n    return parser.parse('' + regexp, options);\n  },\n\n  /**\n   * Traverses a RegExp AST.\n   *\n   * @param Object ast\n   * @param Object | Array<Object> handlers\n   *\n   * Each `handler` is an object containing handler function for needed\n   * node types. Example:\n   *\n   *   regexpTree.traverse(ast, {\n   *     onChar(node) {\n   *       ...\n   *     },\n   *   });\n   *\n   * The value for a node type may also be an object with functions pre and post.\n   * This enables more context-aware analyses, e.g. measuring star height.\n   */\n  traverse: function traverse(ast, handlers, options) {\n    return _traverse.traverse(ast, handlers, options);\n  },\n\n  /**\n   * Transforms a regular expression.\n   *\n   * A regexp can be passed in different formats (string, regexp or AST),\n   * applying a set of transformations. It is a convenient wrapper\n   * on top of \"parse-traverse-generate\" tool chain.\n   *\n   * @param string | AST | RegExp regexp - a regular expression;\n   * @param Object | Array<Object> handlers - a list of handlers.\n   *\n   * @return TransformResult - a transformation result.\n   */\n  transform: function transform(regexp, handlers) {\n    return _transform.transform(regexp, handlers);\n  },\n\n  /**\n   * Generates a RegExp string from an AST.\n   *\n   * @param Object ast\n   *\n   * Invariant:\n   *\n   *   regexpTree.generate(regexpTree.parse('/[a-z]+/i')); // '/[a-z]+/i'\n   */\n  generate: function generate(ast) {\n    return generator.generate(ast);\n  },\n\n  /**\n   * Creates a RegExp object from a regexp string.\n   *\n   * @param string regexp\n   */\n  toRegExp: function toRegExp(regexp) {\n    var compat = this.compatTranspile(regexp);\n    return new RegExp(compat.getSource(), compat.getFlags());\n  },\n\n  /**\n   * Optimizes a regular expression by replacing some\n   * sub-expressions with their idiomatic patterns.\n   *\n   * @param string regexp\n   *\n   * @return TransformResult object\n   */\n  optimize: function optimize(regexp, whitelist) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        blacklist = _ref.blacklist;\n\n    return optimizer.optimize(regexp, {\n      whitelist: whitelist,\n      blacklist: blacklist\n    });\n  },\n\n  /**\n   * Translates a regular expression in new syntax or in new format\n   * into equivalent expressions in old syntax.\n   *\n   * @param string regexp\n   *\n   * @return TransformResult object\n   */\n  compatTranspile: function compatTranspile(regexp, whitelist) {\n    return compatTranspiler.transform(regexp, whitelist);\n  },\n\n  /**\n   * Executes a regular expression on a string.\n   *\n   * @param RegExp|string re - a regular expression.\n   * @param string string - a testing string.\n   */\n  exec: function exec(re, string) {\n    if (typeof re === 'string') {\n      var compat = this.compatTranspile(re);\n      var extra = compat.getExtra();\n\n      if (extra.namedCapturingGroups) {\n        re = new RegExpTree(compat.toRegExp(), {\n          flags: compat.getFlags(),\n          source: compat.getSource(),\n          groups: extra.namedCapturingGroups\n        });\n      } else {\n        re = compat.toRegExp();\n      }\n    }\n\n    return re.exec(string);\n  }\n};\nmodule.exports = regexpTree;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC9yZWdleHAtdHJlZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L3JlZ2V4cC10cmVlLmpzP2M0Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNvbXBhdFRyYW5zcGlsZXIgPSByZXF1aXJlKCcuL2NvbXBhdC10cmFuc3BpbGVyJyk7XG52YXIgZ2VuZXJhdG9yID0gcmVxdWlyZSgnLi9nZW5lcmF0b3InKTtcbnZhciBvcHRpbWl6ZXIgPSByZXF1aXJlKCcuL29wdGltaXplcicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG52YXIgX3RyYW5zZm9ybSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtJyk7XG52YXIgX3RyYXZlcnNlID0gcmVxdWlyZSgnLi90cmF2ZXJzZScpO1xudmFyIGZhID0gcmVxdWlyZSgnLi9pbnRlcnByZXRlci9maW5pdGUtYXV0b21hdG9uJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vY29tcGF0LXRyYW5zcGlsZXIvcnVudGltZScpLFxuICAgIFJlZ0V4cFRyZWUgPSBfcmVxdWlyZS5SZWdFeHBUcmVlO1xuXG4vKipcbiAqIEFuIEFQSSBvYmplY3QgZm9yIFJlZ0V4cCBwcm9jZXNzaW5nIChwYXJzaW5nL3RyYW5zZm9ybS9nZW5lcmF0aW9uKS5cbiAqL1xuXG5cbnZhciByZWdleHBUcmVlID0ge1xuICAvKipcbiAgICogUGFyc2VyIG1vZHVsZSBleHBvc2VkLlxuICAgKi9cbiAgcGFyc2VyOiBwYXJzZXIsXG5cbiAgLyoqXG4gICAqIEV4cG9zZSBmaW5pdGUtYXV0b21hdG9uIG1vZHVsZS5cbiAgICovXG4gIGZhOiBmYSxcblxuICAvKipcbiAgICogYFRyYW5zZm9ybVJlc3VsdGAgZXhwb3NlZC5cbiAgICovXG4gIFRyYW5zZm9ybVJlc3VsdDogX3RyYW5zZm9ybS5UcmFuc2Zvcm1SZXN1bHQsXG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhIHJlZ2V4cCBzdHJpbmcsIHByb2R1Y2luZyBhbiBBU1QuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgcmVnZXhwXG4gICAqXG4gICAqICAgYSByZWd1bGFyIGV4cHJlc3Npb24gaW4gZGlmZmVyZW50IGZvcm1hdHM6IHN0cmluZywgQVNULCBSZWdFeHAuXG4gICAqXG4gICAqIEBwYXJhbSBPYmplY3Qgb3B0aW9uc1xuICAgKlxuICAgKiAgIHBhcnNpbmcgb3B0aW9ucyBmb3IgdGhpcyBwYXJzZSBjYWxsLiBEZWZhdWx0IGFyZTpcbiAgICpcbiAgICogICAgIC0gY2FwdHVyZUxvY2F0aW9uczogYm9vbGVhblxuICAgKiAgICAgLSBhbnkgb3RoZXIgY3VzdG9tIG9wdGlvbnNcbiAgICpcbiAgICogQHJldHVybiBPYmplY3QgQVNUXG4gICAqL1xuICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocmVnZXhwLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZSgnJyArIHJlZ2V4cCwgb3B0aW9ucyk7XG4gIH0sXG5cblxuICAvKipcbiAgICogVHJhdmVyc2VzIGEgUmVnRXhwIEFTVC5cbiAgICpcbiAgICogQHBhcmFtIE9iamVjdCBhc3RcbiAgICogQHBhcmFtIE9iamVjdCB8IEFycmF5PE9iamVjdD4gaGFuZGxlcnNcbiAgICpcbiAgICogRWFjaCBgaGFuZGxlcmAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgaGFuZGxlciBmdW5jdGlvbiBmb3IgbmVlZGVkXG4gICAqIG5vZGUgdHlwZXMuIEV4YW1wbGU6XG4gICAqXG4gICAqICAgcmVnZXhwVHJlZS50cmF2ZXJzZShhc3QsIHtcbiAgICogICAgIG9uQ2hhcihub2RlKSB7XG4gICAqICAgICAgIC4uLlxuICAgKiAgICAgfSxcbiAgICogICB9KTtcbiAgICpcbiAgICogVGhlIHZhbHVlIGZvciBhIG5vZGUgdHlwZSBtYXkgYWxzbyBiZSBhbiBvYmplY3Qgd2l0aCBmdW5jdGlvbnMgcHJlIGFuZCBwb3N0LlxuICAgKiBUaGlzIGVuYWJsZXMgbW9yZSBjb250ZXh0LWF3YXJlIGFuYWx5c2VzLCBlLmcuIG1lYXN1cmluZyBzdGFyIGhlaWdodC5cbiAgICovXG4gIHRyYXZlcnNlOiBmdW5jdGlvbiB0cmF2ZXJzZShhc3QsIGhhbmRsZXJzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF90cmF2ZXJzZS50cmF2ZXJzZShhc3QsIGhhbmRsZXJzLCBvcHRpb25zKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgcmVndWxhciBleHByZXNzaW9uLlxuICAgKlxuICAgKiBBIHJlZ2V4cCBjYW4gYmUgcGFzc2VkIGluIGRpZmZlcmVudCBmb3JtYXRzIChzdHJpbmcsIHJlZ2V4cCBvciBBU1QpLFxuICAgKiBhcHBseWluZyBhIHNldCBvZiB0cmFuc2Zvcm1hdGlvbnMuIEl0IGlzIGEgY29udmVuaWVudCB3cmFwcGVyXG4gICAqIG9uIHRvcCBvZiBcInBhcnNlLXRyYXZlcnNlLWdlbmVyYXRlXCIgdG9vbCBjaGFpbi5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyB8IEFTVCB8IFJlZ0V4cCByZWdleHAgLSBhIHJlZ3VsYXIgZXhwcmVzc2lvbjtcbiAgICogQHBhcmFtIE9iamVjdCB8IEFycmF5PE9iamVjdD4gaGFuZGxlcnMgLSBhIGxpc3Qgb2YgaGFuZGxlcnMuXG4gICAqXG4gICAqIEByZXR1cm4gVHJhbnNmb3JtUmVzdWx0IC0gYSB0cmFuc2Zvcm1hdGlvbiByZXN1bHQuXG4gICAqL1xuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShyZWdleHAsIGhhbmRsZXJzKSB7XG4gICAgcmV0dXJuIF90cmFuc2Zvcm0udHJhbnNmb3JtKHJlZ2V4cCwgaGFuZGxlcnMpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFJlZ0V4cCBzdHJpbmcgZnJvbSBhbiBBU1QuXG4gICAqXG4gICAqIEBwYXJhbSBPYmplY3QgYXN0XG4gICAqXG4gICAqIEludmFyaWFudDpcbiAgICpcbiAgICogICByZWdleHBUcmVlLmdlbmVyYXRlKHJlZ2V4cFRyZWUucGFyc2UoJy9bYS16XSsvaScpKTsgLy8gJy9bYS16XSsvaSdcbiAgICovXG4gIGdlbmVyYXRlOiBmdW5jdGlvbiBnZW5lcmF0ZShhc3QpIHtcbiAgICByZXR1cm4gZ2VuZXJhdG9yLmdlbmVyYXRlKGFzdCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFJlZ0V4cCBvYmplY3QgZnJvbSBhIHJlZ2V4cCBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgcmVnZXhwXG4gICAqL1xuICB0b1JlZ0V4cDogZnVuY3Rpb24gdG9SZWdFeHAocmVnZXhwKSB7XG4gICAgdmFyIGNvbXBhdCA9IHRoaXMuY29tcGF0VHJhbnNwaWxlKHJlZ2V4cCk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoY29tcGF0LmdldFNvdXJjZSgpLCBjb21wYXQuZ2V0RmxhZ3MoKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogT3B0aW1pemVzIGEgcmVndWxhciBleHByZXNzaW9uIGJ5IHJlcGxhY2luZyBzb21lXG4gICAqIHN1Yi1leHByZXNzaW9ucyB3aXRoIHRoZWlyIGlkaW9tYXRpYyBwYXR0ZXJucy5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyByZWdleHBcbiAgICpcbiAgICogQHJldHVybiBUcmFuc2Zvcm1SZXN1bHQgb2JqZWN0XG4gICAqL1xuICBvcHRpbWl6ZTogZnVuY3Rpb24gb3B0aW1pemUocmVnZXhwLCB3aGl0ZWxpc3QpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICAgIGJsYWNrbGlzdCA9IF9yZWYuYmxhY2tsaXN0O1xuXG4gICAgcmV0dXJuIG9wdGltaXplci5vcHRpbWl6ZShyZWdleHAsIHsgd2hpdGVsaXN0OiB3aGl0ZWxpc3QsIGJsYWNrbGlzdDogYmxhY2tsaXN0IH0pO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gaW4gbmV3IHN5bnRheCBvciBpbiBuZXcgZm9ybWF0XG4gICAqIGludG8gZXF1aXZhbGVudCBleHByZXNzaW9ucyBpbiBvbGQgc3ludGF4LlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIHJlZ2V4cFxuICAgKlxuICAgKiBAcmV0dXJuIFRyYW5zZm9ybVJlc3VsdCBvYmplY3RcbiAgICovXG4gIGNvbXBhdFRyYW5zcGlsZTogZnVuY3Rpb24gY29tcGF0VHJhbnNwaWxlKHJlZ2V4cCwgd2hpdGVsaXN0KSB7XG4gICAgcmV0dXJuIGNvbXBhdFRyYW5zcGlsZXIudHJhbnNmb3JtKHJlZ2V4cCwgd2hpdGVsaXN0KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvbiBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIFJlZ0V4cHxzdHJpbmcgcmUgLSBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHN0cmluZyBzdHJpbmcgLSBhIHRlc3Rpbmcgc3RyaW5nLlxuICAgKi9cbiAgZXhlYzogZnVuY3Rpb24gZXhlYyhyZSwgc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiByZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBjb21wYXQgPSB0aGlzLmNvbXBhdFRyYW5zcGlsZShyZSk7XG4gICAgICB2YXIgZXh0cmEgPSBjb21wYXQuZ2V0RXh0cmEoKTtcblxuICAgICAgaWYgKGV4dHJhLm5hbWVkQ2FwdHVyaW5nR3JvdXBzKSB7XG4gICAgICAgIHJlID0gbmV3IFJlZ0V4cFRyZWUoY29tcGF0LnRvUmVnRXhwKCksIHtcbiAgICAgICAgICBmbGFnczogY29tcGF0LmdldEZsYWdzKCksXG4gICAgICAgICAgc291cmNlOiBjb21wYXQuZ2V0U291cmNlKCksXG4gICAgICAgICAgZ3JvdXBzOiBleHRyYS5uYW1lZENhcHR1cmluZ0dyb3Vwc1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlID0gY29tcGF0LnRvUmVnRXhwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlLmV4ZWMoc3RyaW5nKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWdleHBUcmVlOyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFHQTs7Ozs7QUFLQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTFKQTtBQTZKQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/regexp-tree.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/transform/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/regexp-tree/dist/transform/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar generator = __webpack_require__(/*! ../generator */ \"./node_modules/regexp-tree/dist/generator/index.js\");\n\nvar parser = __webpack_require__(/*! ../parser */ \"./node_modules/regexp-tree/dist/parser/index.js\");\n\nvar traverse = __webpack_require__(/*! ../traverse */ \"./node_modules/regexp-tree/dist/traverse/index.js\");\n/**\n * Transform result.\n */\n\n\nvar TransformResult = function () {\n  /**\n   * Initializes a transform result for an AST.\n   *\n   * @param Object ast - an AST node\n   * @param mixed extra - any extra data a transform may return\n   */\n  function TransformResult(ast) {\n    var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, TransformResult);\n\n    this._ast = ast;\n    this._source = null;\n    this._string = null;\n    this._regexp = null;\n    this._extra = extra;\n  }\n\n  _createClass(TransformResult, [{\n    key: 'getAST',\n    value: function getAST() {\n      return this._ast;\n    }\n  }, {\n    key: 'setExtra',\n    value: function setExtra(extra) {\n      this._extra = extra;\n    }\n  }, {\n    key: 'getExtra',\n    value: function getExtra() {\n      return this._extra;\n    }\n  }, {\n    key: 'toRegExp',\n    value: function toRegExp() {\n      if (!this._regexp) {\n        this._regexp = new RegExp(this.getSource(), this._ast.flags);\n      }\n\n      return this._regexp;\n    }\n  }, {\n    key: 'getSource',\n    value: function getSource() {\n      if (!this._source) {\n        this._source = generator.generate(this._ast.body);\n      }\n\n      return this._source;\n    }\n  }, {\n    key: 'getFlags',\n    value: function getFlags() {\n      return this._ast.flags;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      if (!this._string) {\n        this._string = generator.generate(this._ast);\n      }\n\n      return this._string;\n    }\n  }]);\n\n  return TransformResult;\n}();\n\nmodule.exports = {\n  /**\n   * Expose `TransformResult`.\n   */\n  TransformResult: TransformResult,\n\n  /**\n   * Transforms a regular expression applying a set of\n   * transformation handlers.\n   *\n   * @param string | AST | RegExp:\n   *\n   *   a regular expression in different representations: a string,\n   *   a RegExp object, or an AST.\n   *\n   * @param Object | Array<Object>:\n   *\n   *   a handler (or a list of handlers) from `traverse` API.\n   *\n   * @return TransformResult instance.\n   *\n   * Example:\n   *\n   *   transform(/[a-z]/i, {\n   *     onChar(path) {\n   *       const {node} = path;\n   *\n   *       if (...) {\n   *         path.remove();\n   *       }\n   *     }\n   *   });\n   */\n  transform: function transform(regexp, handlers) {\n    var ast = regexp;\n\n    if (regexp instanceof RegExp) {\n      regexp = '' + regexp;\n    }\n\n    if (typeof regexp === 'string') {\n      ast = parser.parse(regexp, {\n        captureLocations: true\n      });\n    }\n\n    traverse.traverse(ast, handlers);\n    return new TransformResult(ast);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC90cmFuc2Zvcm0vaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC90cmFuc2Zvcm0vaW5kZXguanM/OGJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZ2VuZXJhdG9yID0gcmVxdWlyZSgnLi4vZ2VuZXJhdG9yJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnLi4vcGFyc2VyJyk7XG52YXIgdHJhdmVyc2UgPSByZXF1aXJlKCcuLi90cmF2ZXJzZScpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSByZXN1bHQuXG4gKi9cblxudmFyIFRyYW5zZm9ybVJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgdHJhbnNmb3JtIHJlc3VsdCBmb3IgYW4gQVNULlxuICAgKlxuICAgKiBAcGFyYW0gT2JqZWN0IGFzdCAtIGFuIEFTVCBub2RlXG4gICAqIEBwYXJhbSBtaXhlZCBleHRyYSAtIGFueSBleHRyYSBkYXRhIGEgdHJhbnNmb3JtIG1heSByZXR1cm5cbiAgICovXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybVJlc3VsdChhc3QpIHtcbiAgICB2YXIgZXh0cmEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNmb3JtUmVzdWx0KTtcblxuICAgIHRoaXMuX2FzdCA9IGFzdDtcbiAgICB0aGlzLl9zb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuX3N0cmluZyA9IG51bGw7XG4gICAgdGhpcy5fcmVnZXhwID0gbnVsbDtcbiAgICB0aGlzLl9leHRyYSA9IGV4dHJhO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRyYW5zZm9ybVJlc3VsdCwgW3tcbiAgICBrZXk6ICdnZXRBU1QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBU1QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYXN0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEV4dHJhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RXh0cmEoZXh0cmEpIHtcbiAgICAgIHRoaXMuX2V4dHJhID0gZXh0cmE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RXh0cmEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFeHRyYSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9leHRyYTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1JlZ0V4cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvUmVnRXhwKCkge1xuICAgICAgaWYgKCF0aGlzLl9yZWdleHApIHtcbiAgICAgICAgdGhpcy5fcmVnZXhwID0gbmV3IFJlZ0V4cCh0aGlzLmdldFNvdXJjZSgpLCB0aGlzLl9hc3QuZmxhZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3JlZ2V4cDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTb3VyY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTb3VyY2UoKSB7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZSkge1xuICAgICAgICB0aGlzLl9zb3VyY2UgPSBnZW5lcmF0b3IuZ2VuZXJhdGUodGhpcy5fYXN0LmJvZHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGbGFncycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZsYWdzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FzdC5mbGFncztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgaWYgKCF0aGlzLl9zdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fc3RyaW5nID0gZ2VuZXJhdG9yLmdlbmVyYXRlKHRoaXMuX2FzdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFuc2Zvcm1SZXN1bHQ7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogRXhwb3NlIGBUcmFuc2Zvcm1SZXN1bHRgLlxuICAgKi9cbiAgVHJhbnNmb3JtUmVzdWx0OiBUcmFuc2Zvcm1SZXN1bHQsXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYXBwbHlpbmcgYSBzZXQgb2ZcbiAgICogdHJhbnNmb3JtYXRpb24gaGFuZGxlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgfCBBU1QgfCBSZWdFeHA6XG4gICAqXG4gICAqICAgYSByZWd1bGFyIGV4cHJlc3Npb24gaW4gZGlmZmVyZW50IHJlcHJlc2VudGF0aW9uczogYSBzdHJpbmcsXG4gICAqICAgYSBSZWdFeHAgb2JqZWN0LCBvciBhbiBBU1QuXG4gICAqXG4gICAqIEBwYXJhbSBPYmplY3QgfCBBcnJheTxPYmplY3Q+OlxuICAgKlxuICAgKiAgIGEgaGFuZGxlciAob3IgYSBsaXN0IG9mIGhhbmRsZXJzKSBmcm9tIGB0cmF2ZXJzZWAgQVBJLlxuICAgKlxuICAgKiBAcmV0dXJuIFRyYW5zZm9ybVJlc3VsdCBpbnN0YW5jZS5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogICB0cmFuc2Zvcm0oL1thLXpdL2ksIHtcbiAgICogICAgIG9uQ2hhcihwYXRoKSB7XG4gICAqICAgICAgIGNvbnN0IHtub2RlfSA9IHBhdGg7XG4gICAqXG4gICAqICAgICAgIGlmICguLi4pIHtcbiAgICogICAgICAgICBwYXRoLnJlbW92ZSgpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqL1xuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShyZWdleHAsIGhhbmRsZXJzKSB7XG4gICAgdmFyIGFzdCA9IHJlZ2V4cDtcblxuICAgIGlmIChyZWdleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJlZ2V4cCA9ICcnICsgcmVnZXhwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVnZXhwID09PSAnc3RyaW5nJykge1xuICAgICAgYXN0ID0gcGFyc2VyLnBhcnNlKHJlZ2V4cCwge1xuICAgICAgICBjYXB0dXJlTG9jYXRpb25zOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0cmF2ZXJzZS50cmF2ZXJzZShhc3QsIGhhbmRsZXJzKTtcblxuICAgIHJldHVybiBuZXcgVHJhbnNmb3JtUmVzdWx0KGFzdCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7Ozs7O0FBSUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBUEE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBUEE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQVBBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWpEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/transform/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/transform/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/regexp-tree/dist/transform/utils.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * Flattens a nested disjunction node to a list.\n *\n * /a|b|c|d/\n *\n * {{{a, b}, c}, d} -> [a, b, c, d]\n */\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction disjunctionToList(node) {\n  if (node.type !== 'Disjunction') {\n    throw new TypeError('Expected \"Disjunction\" node, got \"' + node.type + '\"');\n  }\n\n  var list = [];\n\n  if (node.left && node.left.type === 'Disjunction') {\n    list.push.apply(list, _toConsumableArray(disjunctionToList(node.left)).concat([node.right]));\n  } else {\n    list.push(node.left, node.right);\n  }\n\n  return list;\n}\n/**\n * Builds a nested disjunction node from a list.\n *\n * /a|b|c|d/\n *\n * [a, b, c, d] -> {{{a, b}, c}, d}\n */\n\n\nfunction listToDisjunction(list) {\n  return list.reduce(function (left, right) {\n    return {\n      type: 'Disjunction',\n      left: left,\n      right: right\n    };\n  });\n}\n/**\n * Increases a quantifier by one.\n * Does not change greediness.\n * * -> +\n * + -> {2,}\n * ? -> {1,2}\n * {2} -> {3}\n * {2,} -> {3,}\n * {2,3} -> {3,4}\n */\n\n\nfunction increaseQuantifierByOne(quantifier) {\n  if (quantifier.kind === '*') {\n    quantifier.kind = '+';\n  } else if (quantifier.kind === '+') {\n    quantifier.kind = 'Range';\n    quantifier.from = 2;\n    delete quantifier.to;\n  } else if (quantifier.kind === '?') {\n    quantifier.kind = 'Range';\n    quantifier.from = 1;\n    quantifier.to = 2;\n  } else if (quantifier.kind === 'Range') {\n    quantifier.from += 1;\n\n    if (quantifier.to) {\n      quantifier.to += 1;\n    }\n  }\n}\n\nmodule.exports = {\n  disjunctionToList: disjunctionToList,\n  listToDisjunction: listToDisjunction,\n  increaseQuantifierByOne: increaseQuantifierByOne\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC90cmFuc2Zvcm0vdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC90cmFuc2Zvcm0vdXRpbHMuanM/Mjg3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEZsYXR0ZW5zIGEgbmVzdGVkIGRpc2p1bmN0aW9uIG5vZGUgdG8gYSBsaXN0LlxuICpcbiAqIC9hfGJ8Y3xkL1xuICpcbiAqIHt7e2EsIGJ9LCBjfSwgZH0gLT4gW2EsIGIsIGMsIGRdXG4gKi9cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIGRpc2p1bmN0aW9uVG9MaXN0KG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSAhPT0gJ0Rpc2p1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiRGlzanVuY3Rpb25cIiBub2RlLCBnb3QgXCInICsgbm9kZS50eXBlICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgbGlzdCA9IFtdO1xuXG4gIGlmIChub2RlLmxlZnQgJiYgbm9kZS5sZWZ0LnR5cGUgPT09ICdEaXNqdW5jdGlvbicpIHtcbiAgICBsaXN0LnB1c2guYXBwbHkobGlzdCwgX3RvQ29uc3VtYWJsZUFycmF5KGRpc2p1bmN0aW9uVG9MaXN0KG5vZGUubGVmdCkpLmNvbmNhdChbbm9kZS5yaWdodF0pKTtcbiAgfSBlbHNlIHtcbiAgICBsaXN0LnB1c2gobm9kZS5sZWZ0LCBub2RlLnJpZ2h0KTtcbiAgfVxuXG4gIHJldHVybiBsaXN0O1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIG5lc3RlZCBkaXNqdW5jdGlvbiBub2RlIGZyb20gYSBsaXN0LlxuICpcbiAqIC9hfGJ8Y3xkL1xuICpcbiAqIFthLCBiLCBjLCBkXSAtPiB7e3thLCBifSwgY30sIGR9XG4gKi9cbmZ1bmN0aW9uIGxpc3RUb0Rpc2p1bmN0aW9uKGxpc3QpIHtcbiAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnRGlzanVuY3Rpb24nLFxuICAgICAgbGVmdDogbGVmdCxcbiAgICAgIHJpZ2h0OiByaWdodFxuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIEluY3JlYXNlcyBhIHF1YW50aWZpZXIgYnkgb25lLlxuICogRG9lcyBub3QgY2hhbmdlIGdyZWVkaW5lc3MuXG4gKiAqIC0+ICtcbiAqICsgLT4gezIsfVxuICogPyAtPiB7MSwyfVxuICogezJ9IC0+IHszfVxuICogezIsfSAtPiB7Myx9XG4gKiB7MiwzfSAtPiB7Myw0fVxuICovXG5mdW5jdGlvbiBpbmNyZWFzZVF1YW50aWZpZXJCeU9uZShxdWFudGlmaWVyKSB7XG4gIGlmIChxdWFudGlmaWVyLmtpbmQgPT09ICcqJykge1xuXG4gICAgcXVhbnRpZmllci5raW5kID0gJysnO1xuICB9IGVsc2UgaWYgKHF1YW50aWZpZXIua2luZCA9PT0gJysnKSB7XG5cbiAgICBxdWFudGlmaWVyLmtpbmQgPSAnUmFuZ2UnO1xuICAgIHF1YW50aWZpZXIuZnJvbSA9IDI7XG4gICAgZGVsZXRlIHF1YW50aWZpZXIudG87XG4gIH0gZWxzZSBpZiAocXVhbnRpZmllci5raW5kID09PSAnPycpIHtcblxuICAgIHF1YW50aWZpZXIua2luZCA9ICdSYW5nZSc7XG4gICAgcXVhbnRpZmllci5mcm9tID0gMTtcbiAgICBxdWFudGlmaWVyLnRvID0gMjtcbiAgfSBlbHNlIGlmIChxdWFudGlmaWVyLmtpbmQgPT09ICdSYW5nZScpIHtcblxuICAgIHF1YW50aWZpZXIuZnJvbSArPSAxO1xuICAgIGlmIChxdWFudGlmaWVyLnRvKSB7XG4gICAgICBxdWFudGlmaWVyLnRvICs9IDE7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXNqdW5jdGlvblRvTGlzdDogZGlzanVuY3Rpb25Ub0xpc3QsXG4gIGxpc3RUb0Rpc2p1bmN0aW9uOiBsaXN0VG9EaXNqdW5jdGlvbixcbiAgaW5jcmVhc2VRdWFudGlmaWVyQnlPbmU6IGluY3JlYXNlUXVhbnRpZmllckJ5T25lXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUVBOzs7Ozs7OztBQVFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/transform/utils.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/traverse/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/regexp-tree/dist/traverse/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\n\nvar NodePath = __webpack_require__(/*! ./node-path */ \"./node_modules/regexp-tree/dist/traverse/node-path.js\");\n/**\n * Does an actual AST traversal, using visitor pattern,\n * and calling set of callbacks.\n *\n * Based on https://github.com/olov/ast-traverse\n *\n * Expects AST in Mozilla Parser API: nodes which are supposed to be\n * handled should have `type` property.\n *\n * @param Object root - a root node to start traversal from.\n *\n * @param Object options - an object with set of callbacks:\n *\n *   - `pre(node, parent, prop, index)` - a hook called on node enter\n *   - `post`(node, parent, prop, index) - a hook called on node exit\n *   - `skipProperty(prop)` - a predicated whether a property should be skipped\n */\n\n\nfunction astTraverse(root) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pre = options.pre;\n  var post = options.post;\n  var skipProperty = options.skipProperty;\n\n  function visit(node, parent, prop, idx) {\n    if (!node || typeof node.type !== 'string') {\n      return;\n    }\n\n    var res = undefined;\n\n    if (pre) {\n      res = pre(node, parent, prop, idx);\n    }\n\n    if (res !== false) {\n      // A node can be replaced during traversal, so we have to\n      // recalculate it from the parent, to avoid traversing \"dead\" nodes.\n      if (parent && parent[prop]) {\n        if (!isNaN(idx)) {\n          node = parent[prop][idx];\n        } else {\n          node = parent[prop];\n        }\n      }\n\n      for (var _prop in node) {\n        if (node.hasOwnProperty(_prop)) {\n          if (skipProperty ? skipProperty(_prop, node) : _prop[0] === '$') {\n            continue;\n          }\n\n          var child = node[_prop]; // Collection node.\n          //\n          // NOTE: a node (or several nodes) can be removed or inserted\n          // during traversal.\n          //\n          // Current traversing index is stored on top of the\n          // `NodePath.traversingIndexStack`. The stack is used to support\n          // recursive nature of the traversal.\n          //\n          // In this case `NodePath.traversingIndex` (which we use here) is\n          // updated in the NodePath remove/insert methods.\n          //\n\n          if (Array.isArray(child)) {\n            var index = 0;\n            NodePath.traversingIndexStack.push(index);\n\n            while (index < child.length) {\n              visit(child[index], node, _prop, index);\n              index = NodePath.updateTraversingIndex(+1);\n            }\n\n            NodePath.traversingIndexStack.pop();\n          } // Simple node.\n          else {\n              visit(child, node, _prop);\n            }\n        }\n      }\n    }\n\n    if (post) {\n      post(node, parent, prop, idx);\n    }\n  }\n\n  visit(root, null);\n}\n\nmodule.exports = {\n  /**\n   * Traverses an AST.\n   *\n   * @param Object ast - an AST node\n   *\n   * @param Object | Array<Object> handlers:\n   *\n   *   an object (or an array of objects)\n   *\n   *   Each such object contains a handler function per node.\n   *   In case of an array of handlers, they are applied in order.\n   *   A handler may return a transformed node (or a different type).\n   *\n   *   The per-node function may instead be an object with functions pre and post.\n   *   pre is called before visiting the node, post after.\n   *   If a handler is a function, it is treated as the pre function, with an empty post.\n   *\n   * @param Object options:\n   *\n   *   a config object, specifying traversal options:\n   *\n   *   `asNodes`: boolean - whether handlers should receives raw AST nodes\n   *   (false by default), instead of a `NodePath` wrapper. Note, by default\n   *   `NodePath` wrapper provides a set of convenient method to manipulate\n   *   a traversing AST, and also has access to all parents list. A raw\n   *   nodes traversal should be used in rare cases, when no `NodePath`\n   *   features are needed.\n   *\n   * Special hooks:\n   *\n   *   - `shouldRun(ast)` - a predicate determining whether the handler\n   *                        should be applied.\n   *\n   * NOTE: Multiple handlers are used as an optimization of applying all of\n   * them in one AST traversal pass.\n   */\n  traverse: function traverse(ast, handlers) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      asNodes: false\n    };\n\n    if (!Array.isArray(handlers)) {\n      handlers = [handlers];\n    } // Filter out handlers by result of `shouldRun`, if the method is present.\n\n\n    handlers = handlers.filter(function (handler) {\n      if (typeof handler.shouldRun !== 'function') {\n        return true;\n      }\n\n      return handler.shouldRun(ast);\n    });\n    NodePath.initRegistry(); // Allow handlers to initializer themselves.\n\n    handlers.forEach(function (handler) {\n      if (typeof handler.init === 'function') {\n        handler.init(ast);\n      }\n    });\n\n    function getPathFor(node, parent, prop, index) {\n      var parentPath = NodePath.getForNode(parent);\n      var nodePath = NodePath.getForNode(node, parentPath, prop, index);\n      return nodePath;\n    } // Handle actual nodes.\n\n\n    astTraverse(ast, {\n      /**\n       * Handler on node enter.\n       */\n      pre: function pre(node, parent, prop, index) {\n        var nodePath = void 0;\n\n        if (!options.asNodes) {\n          nodePath = getPathFor(node, parent, prop, index);\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var handler = _step.value; // \"Catch-all\" `*` handler.\n\n            if (typeof handler['*'] === 'function') {\n              if (nodePath) {\n                // A path/node can be removed by some previous handler.\n                if (!nodePath.isRemoved()) {\n                  var handlerResult = handler['*'](nodePath); // Explicitly stop traversal.\n\n                  if (handlerResult === false) {\n                    return false;\n                  }\n                }\n              } else {\n                handler['*'](node, parent, prop, index);\n              }\n            } // Per-node handler.\n\n\n            var handlerFuncPre = void 0;\n\n            if (typeof handler[node.type] === 'function') {\n              handlerFuncPre = handler[node.type];\n            } else if ((0, _typeof2.default)(handler[node.type]) === 'object' && typeof handler[node.type].pre === 'function') {\n              handlerFuncPre = handler[node.type].pre;\n            }\n\n            if (handlerFuncPre) {\n              if (nodePath) {\n                // A path/node can be removed by some previous handler.\n                if (!nodePath.isRemoved()) {\n                  var _handlerResult = handlerFuncPre.call(handler, nodePath); // Explicitly stop traversal.\n\n\n                  if (_handlerResult === false) {\n                    return false;\n                  }\n                }\n              } else {\n                handlerFuncPre.call(handler, node, parent, prop, index);\n              }\n            }\n          } // Loop over handlers\n\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      },\n      // pre func\n\n      /**\n       * Handler on node exit.\n       */\n      post: function post(node, parent, prop, index) {\n        if (!node) {\n          return;\n        }\n\n        var nodePath = void 0;\n\n        if (!options.asNodes) {\n          nodePath = getPathFor(node, parent, prop, index);\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var handler = _step2.value; // Per-node handler.\n\n            var handlerFuncPost = void 0;\n\n            if ((0, _typeof2.default)(handler[node.type]) === 'object' && typeof handler[node.type].post === 'function') {\n              handlerFuncPost = handler[node.type].post;\n            }\n\n            if (handlerFuncPost) {\n              if (nodePath) {\n                // A path/node can be removed by some previous handler.\n                if (!nodePath.isRemoved()) {\n                  var handlerResult = handlerFuncPost.call(handler, nodePath); // Explicitly stop traversal.\n\n                  if (handlerResult === false) {\n                    return false;\n                  }\n                }\n              } else {\n                handlerFuncPost.call(handler, node, parent, prop, index);\n              }\n            }\n          } // Loop over handlers\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      },\n      // post func\n\n      /**\n       * Skip locations by default.\n       */\n      skipProperty: function skipProperty(prop) {\n        return prop === 'loc';\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/traverse/index.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/traverse/node-path.js":
/*!*************************************************************!*\
  !*** ./node_modules/regexp-tree/dist/traverse/node-path.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DEFAULT_COLLECTION_PROP = 'expressions';\nvar DEFAULT_SINGLE_PROP = 'expression';\n/**\n * NodePath class encapsulates a traversing node,\n * its parent node, property name in the parent node, and\n * an index (in case if a node is part of a collection).\n * It also provides set of methods for AST manipulation.\n */\n\nvar NodePath = function () {\n  /**\n   * NodePath constructor.\n   *\n   * @param Object node - an AST node\n   * @param NodePath parentPath - a nullable parent path\n   * @param string property - property name of the node in the parent\n   * @param number index - index of the node in a collection.\n   */\n  function NodePath(node) {\n    var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    _classCallCheck(this, NodePath);\n\n    this.node = node;\n    this.parentPath = parentPath;\n    this.parent = parentPath ? parentPath.node : null;\n    this.property = property;\n    this.index = index;\n  }\n\n  _createClass(NodePath, [{\n    key: '_enforceProp',\n    value: function _enforceProp(property) {\n      if (!this.node.hasOwnProperty(property)) {\n        throw new Error('Node of type ' + this.node.type + ' doesn\\'t have \"' + property + '\" collection.');\n      }\n    }\n    /**\n     * Sets a node into a children collection or the single child.\n     * By default child nodes are supposed to be under `expressions` property.\n     * An explicit property can be passed.\n     *\n     * @param Object node - a node to set into a collection or as single child\n     * @param number index - index at which to set\n     * @param string property - name of the collection or single property\n     */\n\n  }, {\n    key: 'setChild',\n    value: function setChild(node) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var childPath = void 0;\n\n      if (index != null) {\n        if (!property) {\n          property = DEFAULT_COLLECTION_PROP;\n        }\n\n        this._enforceProp(property);\n\n        this.node[property][index] = node;\n        childPath = NodePath.getForNode(node, this, property, index);\n      } else {\n        if (!property) {\n          property = DEFAULT_SINGLE_PROP;\n        }\n\n        this._enforceProp(property);\n\n        this.node[property] = node;\n        childPath = NodePath.getForNode(node, this, property, null);\n      }\n\n      return childPath;\n    }\n    /**\n     * Appends a node to a children collection.\n     * By default child nodes are supposed to be under `expressions` property.\n     * An explicit property can be passed.\n     *\n     * @param Object node - a node to set into a collection or as single child\n     * @param string property - name of the collection or single property\n     */\n\n  }, {\n    key: 'appendChild',\n    value: function appendChild(node) {\n      var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!property) {\n        property = DEFAULT_COLLECTION_PROP;\n      }\n\n      this._enforceProp(property);\n\n      var end = this.node[property].length;\n      return this.setChild(node, end, property);\n    }\n    /**\n     * Inserts a node into a collection.\n     * By default child nodes are supposed to be under `expressions` property.\n     * An explicit property can be passed.\n     *\n     * @param Object node - a node to insert into a collection\n     * @param number index - index at which to insert\n     * @param string property - name of the collection property\n     */\n\n  }, {\n    key: 'insertChildAt',\n    value: function insertChildAt(node, index) {\n      var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_COLLECTION_PROP;\n\n      this._enforceProp(property);\n\n      this.node[property].splice(index, 0, node); // If we inserted a node before the traversing index,\n      // we should increase the later.\n\n      if (index <= NodePath.getTraversingIndex()) {\n        NodePath.updateTraversingIndex(+1);\n      }\n\n      this._rebuildIndex(this.node, property);\n    }\n    /**\n     * Removes a node.\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n      if (this.isRemoved()) {\n        return;\n      }\n\n      NodePath.registry.delete(this.node);\n      this.node = null;\n\n      if (!this.parent) {\n        return;\n      } // A node is in a collection.\n\n\n      if (this.index !== null) {\n        this.parent[this.property].splice(this.index, 1); // If we remove a node before the traversing index,\n        // we should increase the later.\n\n        if (this.index <= NodePath.getTraversingIndex()) {\n          NodePath.updateTraversingIndex(-1);\n        } // Rebuild index.\n\n\n        this._rebuildIndex(this.parent, this.property);\n\n        this.index = null;\n        this.property = null;\n        return;\n      } // A simple node.\n\n\n      delete this.parent[this.property];\n      this.property = null;\n    }\n    /**\n     * Rebuilds child nodes index (used on remove/insert).\n     */\n\n  }, {\n    key: '_rebuildIndex',\n    value: function _rebuildIndex(parent, property) {\n      var parentPath = NodePath.getForNode(parent);\n\n      for (var i = 0; i < parent[property].length; i++) {\n        var path = NodePath.getForNode(parent[property][i], parentPath, property, i);\n        path.index = i;\n      }\n    }\n    /**\n     * Whether the path was removed.\n     */\n\n  }, {\n    key: 'isRemoved',\n    value: function isRemoved() {\n      return this.node === null;\n    }\n    /**\n     * Replaces a node with the passed one.\n     */\n\n  }, {\n    key: 'replace',\n    value: function replace(newNode) {\n      NodePath.registry.delete(this.node);\n      this.node = newNode;\n\n      if (!this.parent) {\n        return null;\n      } // A node is in a collection.\n\n\n      if (this.index !== null) {\n        this.parent[this.property][this.index] = newNode;\n      } // A simple node.\n      else {\n          this.parent[this.property] = newNode;\n        } // Rebuild the node path for the new node.\n\n\n      return NodePath.getForNode(newNode, this.parentPath, this.property, this.index);\n    }\n    /**\n     * Updates a node inline.\n     */\n\n  }, {\n    key: 'update',\n    value: function update(nodeProps) {\n      Object.assign(this.node, nodeProps);\n    }\n    /**\n     * Returns parent.\n     */\n\n  }, {\n    key: 'getParent',\n    value: function getParent() {\n      return this.parentPath;\n    }\n    /**\n     * Returns nth child.\n     */\n\n  }, {\n    key: 'getChild',\n    value: function getChild() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.node.expressions) {\n        return NodePath.getForNode(this.node.expressions[n], this, DEFAULT_COLLECTION_PROP, n);\n      } else if (this.node.expression && n == 0) {\n        return NodePath.getForNode(this.node.expression, this, DEFAULT_SINGLE_PROP);\n      }\n\n      return null;\n    }\n    /**\n     * Whether a path node is syntactically equal to the passed one.\n     *\n     * NOTE: we don't rely on `source` property from the `loc` data\n     * (which would be the fastest comparison), since it might be unsync\n     * after several modifications. We use here simple `JSON.stringify`\n     * excluding the `loc` data.\n     *\n     * @param NodePath other - path to compare to.\n     * @return boolean\n     */\n\n  }, {\n    key: 'hasEqualSource',\n    value: function hasEqualSource(path) {\n      return JSON.stringify(this.node, jsonSkipLoc) === JSON.stringify(path.node, jsonSkipLoc);\n    }\n    /**\n     * JSON-encodes a node skipping location.\n     */\n\n  }, {\n    key: 'jsonEncode',\n    value: function jsonEncode() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref.format,\n          useLoc = _ref.useLoc;\n\n      return JSON.stringify(this.node, useLoc ? null : jsonSkipLoc, format);\n    }\n    /**\n     * Returns previous sibling.\n     */\n\n  }, {\n    key: 'getPreviousSibling',\n    value: function getPreviousSibling() {\n      if (!this.parent || this.index == null) {\n        return null;\n      }\n\n      return NodePath.getForNode(this.parent[this.property][this.index - 1], NodePath.getForNode(this.parent), this.property, this.index - 1);\n    }\n    /**\n     * Returns next sibling.\n     */\n\n  }, {\n    key: 'getNextSibling',\n    value: function getNextSibling() {\n      if (!this.parent || this.index == null) {\n        return null;\n      }\n\n      return NodePath.getForNode(this.parent[this.property][this.index + 1], NodePath.getForNode(this.parent), this.property, this.index + 1);\n    }\n    /**\n     * Returns a NodePath instance for a node.\n     *\n     * The same NodePath can be reused in several places, e.g.\n     * a parent node passed for all its children.\n     */\n\n  }], [{\n    key: 'getForNode',\n    value: function getForNode(node) {\n      var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var prop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n\n      if (!node) {\n        return null;\n      }\n\n      if (!NodePath.registry.has(node)) {\n        NodePath.registry.set(node, new NodePath(node, parentPath, prop, index == -1 ? null : index));\n      }\n\n      var path = NodePath.registry.get(node);\n\n      if (parentPath !== null) {\n        path.parentPath = parentPath;\n        path.parent = path.parentPath.node;\n      }\n\n      if (prop !== null) {\n        path.property = prop;\n      }\n\n      if (index >= 0) {\n        path.index = index;\n      }\n\n      return path;\n    }\n    /**\n     * Initializes the NodePath registry. The registry is a map from\n     * a node to its NodePath instance.\n     */\n\n  }, {\n    key: 'initRegistry',\n    value: function initRegistry() {\n      if (!NodePath.registry) {\n        NodePath.registry = new Map();\n      }\n\n      NodePath.registry.clear();\n    }\n    /**\n     * Updates index of a currently traversing collection.\n     */\n\n  }, {\n    key: 'updateTraversingIndex',\n    value: function updateTraversingIndex(dx) {\n      return NodePath.traversingIndexStack[NodePath.traversingIndexStack.length - 1] += dx;\n    }\n    /**\n     * Returns current traversing index.\n     */\n\n  }, {\n    key: 'getTraversingIndex',\n    value: function getTraversingIndex() {\n      return NodePath.traversingIndexStack[NodePath.traversingIndexStack.length - 1];\n    }\n  }]);\n\n  return NodePath;\n}();\n\nNodePath.initRegistry();\n/**\n * Index of a currently traversing collection is stored on top of the\n * `NodePath.traversingIndexStack`. Remove/insert methods can adjust\n * this index.\n */\n\nNodePath.traversingIndexStack = []; // Helper function used to skip `loc` in JSON operations.\n\nfunction jsonSkipLoc(prop, value) {\n  if (prop === 'loc') {\n    return undefined;\n  }\n\n  return value;\n}\n\nmodule.exports = NodePath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/traverse/node-path.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/dist/utils/clone.js":
/*!******************************************************!*\
  !*** ./node_modules/regexp-tree/dist/utils/clone.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n/**\n * Performs a deep copy of an simple object.\n * Only handles scalar values, arrays and objects.\n *\n * @param obj Object\n */\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\n\nmodule.exports = function clone(obj) {\n  if (obj === null || (0, _typeof2.default)(obj) !== 'object') {\n    return obj;\n  }\n\n  var res = void 0;\n\n  if (Array.isArray(obj)) {\n    res = [];\n  } else {\n    res = {};\n  }\n\n  for (var i in obj) {\n    res[i] = clone(obj[i]);\n  }\n\n  return res;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvZGlzdC91dGlscy9jbG9uZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAtdHJlZS9kaXN0L3V0aWxzL2Nsb25lLmpzPzNjNTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29weSBvZiBhbiBzaW1wbGUgb2JqZWN0LlxuICogT25seSBoYW5kbGVzIHNjYWxhciB2YWx1ZXMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gb2JqIE9iamVjdFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIHZhciByZXMgPSB2b2lkIDA7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXMgPSBbXTtcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIHJlc1tpXSA9IGNsb25lKG9ialtpXSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBRUE7Ozs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/dist/utils/clone.js\n");

/***/ }),

/***/ "./node_modules/regexp-tree/index.js":
/*!*******************************************!*\
  !*** ./node_modules/regexp-tree/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n\nmodule.exports = __webpack_require__(/*! ./dist/regexp-tree */ \"./node_modules/regexp-tree/dist/regexp-tree.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLXRyZWUvaW5kZXguanM/MTdlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWdleHAtdHJlZScpOyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/regexp-tree/index.js\n");

/***/ })

}]);