(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[75],{

/***/ "./node_modules/babylon6/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/babylon6/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint max-len: 0 */\n\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\nfunction makePredicate(words) {\n  words = words.split(\" \");\n  return function (str) {\n    return words.indexOf(str) >= 0;\n  };\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  6: makePredicate(\"enum await\"),\n  strict: makePredicate(\"implements interface let package private protected public static yield\"),\n  strictBind: makePredicate(\"eval arguments\")\n};\n\n// And the keywords\n\nvar isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super\");\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA900-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `bin/generate-identifier-regex.js`.\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n// A second optional argument can be given to further configure\nvar defaultOptions = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var key in defaultOptions) {\n    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nvar KeywordTokenType = function (_TokenType) {\n  inherits(KeywordTokenType, _TokenType);\n\n  function KeywordTokenType(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, KeywordTokenType);\n\n    options.keyword = name;\n\n    return possibleConstructorReturn(this, _TokenType.call(this, name, options));\n  }\n\n  return KeywordTokenType;\n}(TokenType);\n\nvar BinopTokenType = function (_TokenType2) {\n  inherits(BinopTokenType, _TokenType2);\n\n  function BinopTokenType(name, prec) {\n    classCallCheck(this, BinopTokenType);\n    return possibleConstructorReturn(this, _TokenType2.call(this, name, { beforeExpr: beforeExpr, binop: prec }));\n  }\n\n  return BinopTokenType;\n}(TokenType);\n\nvar types = {\n  num: new TokenType(\"num\", { startsExpr: startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr: startsExpr }),\n  string: new TokenType(\"string\", { startsExpr: startsExpr }),\n  name: new TokenType(\"name\", { startsExpr: startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr: beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr: beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr: beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr: beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr: beforeExpr }),\n  arrow: new TokenType(\"=>\", { beforeExpr: beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr: beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr: startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  at: new TokenType(\"@\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr: beforeExpr, isAssign: isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix: prefix, postfix: postfix, startsExpr: startsExpr }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  logicalOR: new BinopTokenType(\"||\", 1),\n  logicalAND: new BinopTokenType(\"&&\", 2),\n  bitwiseOR: new BinopTokenType(\"|\", 3),\n  bitwiseXOR: new BinopTokenType(\"^\", 4),\n  bitwiseAND: new BinopTokenType(\"&\", 5),\n  equality: new BinopTokenType(\"==/!=\", 6),\n  relational: new BinopTokenType(\"</>\", 7),\n  bitShift: new BinopTokenType(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: beforeExpr, binop: 9, prefix: prefix, startsExpr: startsExpr }),\n  modulo: new BinopTokenType(\"%\", 10),\n  star: new BinopTokenType(\"*\", 10),\n  slash: new BinopTokenType(\"/\", 10),\n  exponent: new TokenType(\"**\", { beforeExpr: beforeExpr, binop: 11, rightAssociative: true })\n};\n\nvar keywords = {\n  \"break\": new KeywordTokenType(\"break\"),\n  \"case\": new KeywordTokenType(\"case\", { beforeExpr: beforeExpr }),\n  \"catch\": new KeywordTokenType(\"catch\"),\n  \"continue\": new KeywordTokenType(\"continue\"),\n  \"debugger\": new KeywordTokenType(\"debugger\"),\n  \"default\": new KeywordTokenType(\"default\", { beforeExpr: beforeExpr }),\n  \"do\": new KeywordTokenType(\"do\", { isLoop: isLoop, beforeExpr: beforeExpr }),\n  \"else\": new KeywordTokenType(\"else\", { beforeExpr: beforeExpr }),\n  \"finally\": new KeywordTokenType(\"finally\"),\n  \"for\": new KeywordTokenType(\"for\", { isLoop: isLoop }),\n  \"function\": new KeywordTokenType(\"function\", { startsExpr: startsExpr }),\n  \"if\": new KeywordTokenType(\"if\"),\n  \"return\": new KeywordTokenType(\"return\", { beforeExpr: beforeExpr }),\n  \"switch\": new KeywordTokenType(\"switch\"),\n  \"throw\": new KeywordTokenType(\"throw\", { beforeExpr: beforeExpr }),\n  \"try\": new KeywordTokenType(\"try\"),\n  \"var\": new KeywordTokenType(\"var\"),\n  \"let\": new KeywordTokenType(\"let\"),\n  \"const\": new KeywordTokenType(\"const\"),\n  \"while\": new KeywordTokenType(\"while\", { isLoop: isLoop }),\n  \"with\": new KeywordTokenType(\"with\"),\n  \"new\": new KeywordTokenType(\"new\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"this\": new KeywordTokenType(\"this\", { startsExpr: startsExpr }),\n  \"super\": new KeywordTokenType(\"super\", { startsExpr: startsExpr }),\n  \"class\": new KeywordTokenType(\"class\"),\n  \"extends\": new KeywordTokenType(\"extends\", { beforeExpr: beforeExpr }),\n  \"export\": new KeywordTokenType(\"export\"),\n  \"import\": new KeywordTokenType(\"import\", { startsExpr: startsExpr }),\n  \"yield\": new KeywordTokenType(\"yield\", { beforeExpr: beforeExpr, startsExpr: startsExpr }),\n  \"null\": new KeywordTokenType(\"null\", { startsExpr: startsExpr }),\n  \"true\": new KeywordTokenType(\"true\", { startsExpr: startsExpr }),\n  \"false\": new KeywordTokenType(\"false\", { startsExpr: startsExpr }),\n  \"in\": new KeywordTokenType(\"in\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"instanceof\": new KeywordTokenType(\"instanceof\", { beforeExpr: beforeExpr, binop: 7 }),\n  \"typeof\": new KeywordTokenType(\"typeof\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"void\": new KeywordTokenType(\"void\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr }),\n  \"delete\": new KeywordTokenType(\"delete\", { beforeExpr: beforeExpr, prefix: prefix, startsExpr: startsExpr })\n};\n\n// Map keyword names to token types.\nObject.keys(keywords).forEach(function (name) {\n  types[\"_\" + name] = keywords[name];\n});\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", true),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true)\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n  if (out === types$1.braceStatement && this.curContext() === types$1.functionExpression) {\n    this.state.context.pop();\n    this.state.exprAllowed = false;\n  } else if (out === types$1.templateQuasi) {\n    this.state.exprAllowed = true;\n  } else {\n    this.state.exprAllowed = !out.isExpr;\n  }\n};\n\ntypes.name.updateContext = function (prevType) {\n  this.state.exprAllowed = false;\n\n  if (prevType === types._let || prevType === types._const || prevType === types._var) {\n    if (lineBreak.test(this.input.slice(this.state.end))) {\n      this.state.exprAllowed = true;\n    }\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = function () {\n  if (this.curContext() !== types$1.braceStatement) {\n    this.state.context.push(types$1.functionExpression);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  classCallCheck(this, Position);\n\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\nvar State = function () {\n  function State() {\n    classCallCheck(this, State);\n  }\n\n  State.prototype.init = function init(options, input) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.input = input;\n\n    this.potentialArrowAt = -1;\n\n    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = this.inPropertyName = this.inType = this.inClassProperty = this.noAnonFunctionType = false;\n\n    this.labels = [];\n\n    this.decorators = [];\n\n    this.tokens = [];\n\n    this.comments = [];\n\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n\n    this.pos = this.lineStart = 0;\n    this.curLine = options.startLine;\n\n    this.type = types.eof;\n    this.value = null;\n    this.start = this.end = this.pos;\n    this.startLoc = this.endLoc = this.curPosition();\n\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n\n    this.containsEsc = this.containsOctal = false;\n    this.octalPosition = null;\n\n    this.invalidTemplateEscapePosition = null;\n\n    this.exportedIdentifiers = [];\n\n    return this;\n  };\n\n  // TODO\n\n\n  // TODO\n\n\n  // Used to signify the start of a potential arrow function\n\n\n  // Flags to track whether we are in a function, a generator.\n\n\n  // Labels in scope.\n\n\n  // Leading decorators.\n\n\n  // Token store.\n\n\n  // Comment store.\n\n\n  // Comment attachment store\n\n\n  // The current position of the tokenizer in the input.\n\n\n  // Properties of the current token:\n  // Its type\n\n\n  // For tokens that include more information than their type, the value\n\n\n  // Its start and end offset\n\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n\n\n  // Position information for the previous token\n\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n\n  // TODO\n\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n\n\n  State.prototype.curPosition = function curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  };\n\n  State.prototype.clone = function clone(skipArrays) {\n    var state = new State();\n    for (var key in this) {\n      var val = this[key];\n\n      if ((!skipArrays || key === \"context\") && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n    return state;\n  };\n\n  return State;\n}();\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(state) {\n  classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\n// ## Tokenizer\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  } else {\n    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);\n  }\n}\n\nvar Tokenizer = function () {\n  function Tokenizer(options, input) {\n    classCallCheck(this, Tokenizer);\n\n    this.state = new State();\n    this.state.init(options, input);\n  }\n\n  // Move to the next token\n\n  Tokenizer.prototype.next = function next() {\n    if (!this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  };\n\n  // TODO\n\n  Tokenizer.prototype.eat = function eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // TODO\n\n  Tokenizer.prototype.match = function match(type) {\n    return this.state.type === type;\n  };\n\n  // TODO\n\n  Tokenizer.prototype.isKeyword = function isKeyword$$1(word) {\n    return isKeyword(word);\n  };\n\n  // TODO\n\n  Tokenizer.prototype.lookahead = function lookahead() {\n    var old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    var curr = this.state.clone(true);\n    this.state = old;\n    return curr;\n  };\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  Tokenizer.prototype.setStrict = function setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  };\n\n  Tokenizer.prototype.curContext = function curContext() {\n    return this.state.context[this.state.context.length - 1];\n  };\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  Tokenizer.prototype.nextToken = function nextToken() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.input.length) return this.finishToken(types.eof);\n\n    if (curContext.override) {\n      return curContext.override(this);\n    } else {\n      return this.readToken(this.fullCharCodeAtPos());\n    }\n  };\n\n  Tokenizer.prototype.readToken = function readToken(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code) || code === 92 /* '\\' */) {\n        return this.readWord();\n      } else {\n      return this.getTokenFromCode(code);\n    }\n  };\n\n  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {\n    var code = this.input.charCodeAt(this.state.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n  };\n\n  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n\n    if (!this.isLookahead) {\n      this.state.tokens.push(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  };\n\n  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {\n    var startLoc = this.state.curPosition();\n    var start = this.state.pos;\n    var end = this.input.indexOf(\"*/\", this.state.pos += 2);\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    var match = void 0;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {\n    var start = this.state.pos;\n    var startLoc = this.state.curPosition();\n    var ch = this.input.charCodeAt(this.state.pos += startSkip);\n    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this.state.pos;\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  Tokenizer.prototype.skipSpace = function skipSpace() {\n    loop: while (this.state.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:case 160:\n          // ' '\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:case 8232:case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          // '/'\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              // '*'\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  Tokenizer.prototype.finishToken = function finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    var prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n\n\n  Tokenizer.prototype.readToken_dot = function readToken_dot() {\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      return this.readNumber(true);\n    }\n\n    var next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 46 && next2 === 46) {\n      // 46 = dot '.'\n      this.state.pos += 3;\n      return this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      return this.finishToken(types.dot);\n    }\n  };\n\n  Tokenizer.prototype.readToken_slash = function readToken_slash() {\n    // '/'\n    if (this.state.exprAllowed) {\n      ++this.state.pos;\n      return this.readRegexp();\n    }\n\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.slash, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {\n    // '%*'\n    var type = code === 42 ? types.star : types.modulo;\n    var width = 1;\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 42) {\n      // '*'\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61) {\n      width++;\n      type = types.assign;\n    }\n\n    return this.finishOp(type, width);\n  };\n\n  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {\n    // '|&'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n    if (next === 61) return this.finishOp(types.assign, 2);\n    if (code === 124 && next === 125 && this.hasPlugin(\"flow\")) return this.finishOp(types.braceBarR, 2);\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  };\n\n  Tokenizer.prototype.readToken_caret = function readToken_caret() {\n    // '^'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.bitwiseXOR, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {\n    // '+-'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken();\n      }\n      return this.finishOp(types.incDec, 2);\n    }\n\n    if (next === 61) {\n      return this.finishOp(types.assign, 2);\n    } else {\n      return this.finishOp(types.plusMin, 1);\n    }\n  };\n\n  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {\n    // '<>'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    var size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(types.assign, size + 1);\n      return this.finishOp(types.bitShift, size);\n    }\n\n    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      if (this.inModule) this.unexpected();\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    if (next === 61) {\n      // <= | >=\n      size = 2;\n    }\n\n    return this.finishOp(types.relational, size);\n  };\n\n  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {\n    // '=!'\n    var next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) return this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n    if (code === 61 && next === 62) {\n      // '=>'\n      this.state.pos += 2;\n      return this.finishToken(types.arrow);\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n  };\n\n  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n      case 46:\n        // '.'\n        return this.readToken_dot();\n\n      // Punctuation tokens.\n      case 40:\n        ++this.state.pos;return this.finishToken(types.parenL);\n      case 41:\n        ++this.state.pos;return this.finishToken(types.parenR);\n      case 59:\n        ++this.state.pos;return this.finishToken(types.semi);\n      case 44:\n        ++this.state.pos;return this.finishToken(types.comma);\n      case 91:\n        ++this.state.pos;return this.finishToken(types.bracketL);\n      case 93:\n        ++this.state.pos;return this.finishToken(types.bracketR);\n\n      case 123:\n        if (this.hasPlugin(\"flow\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.braceL);\n        }\n\n      case 125:\n        ++this.state.pos;return this.finishToken(types.braceR);\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          return this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          return this.finishToken(types.colon);\n        }\n\n      case 63:\n        ++this.state.pos;return this.finishToken(types.question);\n      case 64:\n        ++this.state.pos;return this.finishToken(types.at);\n\n      case 96:\n        // '`'\n        ++this.state.pos;\n        return this.finishToken(types.backQuote);\n\n      case 48:\n        // '0'\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n        // 1-9\n        return this.readNumber(false);\n\n      // Quotes produce strings.\n      case 34:case 39:\n        // '\"', \"'\"\n        return this.readString(code);\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case 47:\n        // '/'\n        return this.readToken_slash();\n\n      case 37:case 42:\n        // '%*'\n        return this.readToken_mult_modulo(code);\n\n      case 124:case 38:\n        // '|&'\n        return this.readToken_pipe_amp(code);\n\n      case 94:\n        // '^'\n        return this.readToken_caret();\n\n      case 43:case 45:\n        // '+-'\n        return this.readToken_plus_min(code);\n\n      case 60:case 62:\n        // '<>'\n        return this.readToken_lt_gt(code);\n\n      case 61:case 33:\n        // '=!'\n        return this.readToken_eq_excl(code);\n\n      case 126:\n        // '~'\n        return this.finishOp(types.prefix, 1);\n    }\n\n    this.raise(this.state.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  Tokenizer.prototype.finishOp = function finishOp(type, size) {\n    var str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    return this.finishToken(type, str);\n  };\n\n  Tokenizer.prototype.readRegexp = function readRegexp() {\n    var start = this.state.pos;\n    var escaped = void 0,\n        inClass = void 0;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n      var ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    var content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1();\n    if (mods) {\n      var validFlags = /^[gmsiyu]*$/;\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    }\n    return this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  Tokenizer.prototype.readInt = function readInt(radix, len) {\n    var start = this.state.pos;\n    var total = 0;\n\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.state.pos);\n      var val = void 0;\n      if (code >= 97) {\n        val = code - 97 + 10; // a\n      } else if (code >= 65) {\n        val = code - 65 + 10; // A\n      } else if (code >= 48 && code <= 57) {\n        val = code - 48; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;\n\n    return total;\n  };\n\n  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {\n    this.state.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n    return this.finishToken(types.num, val);\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {\n    var start = this.state.pos;\n    var octal = this.input.charCodeAt(start) === 48; // '0'\n    var isFloat = false;\n\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    if (octal && this.state.pos == start + 1) octal = false; // number === 0\n\n    var next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !octal) {\n      // '.'\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      // 'eE'\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) ++this.state.pos; // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, \"Identifier directly after number\");\n\n    var str = this.input.slice(start, this.state.pos);\n    var val = void 0;\n    if (isFloat) {\n      val = parseFloat(str);\n    } else if (!octal || str.length === 1) {\n      val = parseInt(str, 10);\n    } else if (this.state.strict) {\n      this.raise(start, \"Invalid number\");\n    } else if (/[89]/.test(str)) {\n      val = parseInt(str, 10);\n    } else {\n      val = parseInt(str, 8);\n    }\n    return this.finishToken(types.num, val);\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  Tokenizer.prototype.readCodePoint = function readCodePoint(throwOnInvalid) {\n    var ch = this.input.charCodeAt(this.state.pos);\n    var code = void 0;\n\n    if (ch === 123) {\n      // '{'\n      var codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, throwOnInvalid);\n      ++this.state.pos;\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition; // to point to the '\\'' instead of the 'u'\n      } else if (code > 0x10FFFF) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n    return code;\n  };\n\n  Tokenizer.prototype.readString = function readString(quote) {\n    var out = \"\",\n        chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated string constant\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else {\n        if (isNewLine(ch)) this.raise(this.state.start, \"Unterminated string constant\");\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  };\n\n  // Reads template string tokens.\n\n  Tokenizer.prototype.readTmplToken = function readTmplToken() {\n    var out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.input.length) this.raise(this.state.start, \"Unterminated template\");\n      var ch = this.input.charCodeAt(this.state.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        // '`', '${'\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            return this.finishToken(types.dollarBraceL);\n          } else {\n            ++this.state.pos;\n            return this.finishToken(types.backQuote);\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.template, containsInvalid ? null : out);\n      }\n      if (ch === 92) {\n        // '\\'\n        out += this.input.slice(chunkStart, this.state.pos);\n        var escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;\n          case 10:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  };\n\n  // Used to read escaped characters\n\n  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {\n    var throwOnInvalid = !inTemplate;\n    var ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case 110:\n        return \"\\n\"; // 'n' -> '\\n'\n      case 114:\n        return \"\\r\"; // 'r' -> '\\r'\n      case 120:\n        {\n          // 'x'\n          var code = this.readHexChar(2, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n      case 117:\n        {\n          // 'u'\n          var _code = this.readCodePoint(throwOnInvalid);\n          return _code === null ? null : codePointToString(_code);\n        }\n      case 116:\n        return \"\\t\"; // 't' -> '\\t'\n      case 98:\n        return \"\\b\"; // 'b' -> '\\b'\n      case 118:\n        return \"\\x0B\"; // 'v' -> '\\u000b'\n      case 102:\n        return \"\\f\"; // 'f' -> '\\f'\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\\r\\n'\n      case 10:\n        // ' \\n'\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n        return \"\";\n      default:\n        if (ch >= 48 && ch <= 55) {\n          var codePos = this.state.pos - 1;\n          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          var octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          if (octal > 0) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n          this.state.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n        return String.fromCharCode(ch);\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  Tokenizer.prototype.readHexChar = function readHexChar(len, throwOnInvalid) {\n    var codePos = this.state.pos;\n    var n = this.readInt(16, len);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n    return n;\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  Tokenizer.prototype.readWord1 = function readWord1() {\n    this.state.containsEsc = false;\n    var word = \"\",\n        first = true,\n        chunkStart = this.state.pos;\n    while (this.state.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        // \"\\\"\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        var escStart = this.state.pos;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          // \"u\"\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n        ++this.state.pos;\n        var esc = this.readCodePoint(true);\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, true)) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        word += codePointToString(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  Tokenizer.prototype.readWord = function readWord() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (!this.state.containsEsc && this.isKeyword(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word);\n  };\n\n  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {\n    if (prevType === types.colon) {\n      var parent = this.curContext();\n      if (parent === types$1.braceStatement || parent === types$1.braceExpression) {\n        return !parent.isExpr;\n      }\n    }\n\n    if (prevType === types._return) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return this.curContext() === types$1.braceStatement;\n    }\n\n    return !this.state.exprAllowed;\n  };\n\n  Tokenizer.prototype.updateContext = function updateContext(prevType) {\n    var type = this.state.type;\n    var update = void 0;\n\n    if (type.keyword && prevType === types.dot) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  };\n\n  return Tokenizer;\n}();\n\nvar plugins = {};\nvar frozenDeprecatedWildcardPluginList = [\"jsx\", \"doExpressions\", \"objectRestSpread\", \"decorators\", \"classProperties\", \"exportExtensions\", \"asyncGenerators\", \"functionBind\", \"functionSent\", \"dynamicImport\", \"flow\"];\n\nvar Parser = function (_Tokenizer) {\n  inherits(Parser, _Tokenizer);\n\n  function Parser(options, input) {\n    classCallCheck(this, Parser);\n\n    options = getOptions(options);\n\n    var _this = possibleConstructorReturn(this, _Tokenizer.call(this, options, input));\n\n    _this.options = options;\n    _this.inModule = _this.options.sourceType === \"module\";\n    _this.input = input;\n    _this.plugins = _this.loadPlugins(_this.options.plugins);\n    _this.filename = options.sourceFilename;\n\n    // If enabled, skip leading hashbang line.\n    if (_this.state.pos === 0 && _this.input[0] === \"#\" && _this.input[1] === \"!\") {\n      _this.skipLineComment(2);\n    }\n    return _this;\n  }\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    if (word === \"await\") {\n      return this.inModule;\n    } else {\n      return reservedWords[6](word);\n    }\n  };\n\n  Parser.prototype.hasPlugin = function hasPlugin(name) {\n    if (this.plugins[\"*\"] && frozenDeprecatedWildcardPluginList.indexOf(name) > -1) {\n      return true;\n    }\n\n    return !!this.plugins[name];\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadAllPlugins = function loadAllPlugins() {\n    var _this2 = this;\n\n    // ensure flow plugin loads last, also ensure estree is not loaded with *\n    var pluginNames = Object.keys(plugins).filter(function (name) {\n      return name !== \"flow\" && name !== \"estree\";\n    });\n    pluginNames.push(\"flow\");\n\n    pluginNames.forEach(function (name) {\n      var plugin = plugins[name];\n      if (plugin) plugin(_this2);\n    });\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginList) {\n    // TODO: Deprecate \"*\" option in next major version of Babylon\n    if (pluginList.indexOf(\"*\") >= 0) {\n      this.loadAllPlugins();\n\n      return { \"*\": true };\n    }\n\n    var pluginMap = {};\n\n    if (pluginList.indexOf(\"flow\") >= 0) {\n      // ensure flow plugin loads last\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"flow\";\n      });\n      pluginList.push(\"flow\");\n    }\n\n    if (pluginList.indexOf(\"estree\") >= 0) {\n      // ensure estree plugin loads first\n      pluginList = pluginList.filter(function (plugin) {\n        return plugin !== \"estree\";\n      });\n      pluginList.unshift(\"estree\");\n    }\n\n    for (var _iterator = pluginList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var name = _ref;\n\n      if (!pluginMap[name]) {\n        pluginMap[name] = true;\n\n        var plugin = plugins[name];\n        if (plugin) plugin(this);\n      }\n    }\n\n    return pluginMap;\n  };\n\n  Parser.prototype.parse = function parse() {\n    var file = this.startNode();\n    var program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  };\n\n  return Parser;\n}(Tokenizer);\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\n// TODO\n\npp.addExtra = function (node, key, val) {\n  if (!node) return;\n\n  var extra = node.extra = node.extra || {};\n  extra[key] = val;\n};\n\n// TODO\n\npp.isRelational = function (op) {\n  return this.match(types.relational) && this.state.value === op;\n};\n\n// TODO\n\npp.expectRelational = function (op) {\n  if (this.isRelational(op)) {\n    this.next();\n  } else {\n    this.unexpected(null, types.relational);\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.match(types.name) && this.state.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.state.value === name && this.eat(types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name, message) {\n  if (!this.eatContextual(name)) this.unexpected(null, message);\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.match(types.eof) || this.match(types.braceR) || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n};\n\n// TODO\n\npp.isLineTerminator = function () {\n  return this.eat(types.semi) || this.canInsertSemicolon();\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\n\npp.expect = function (type, pos) {\n  return this.eat(type) || this.unexpected(pos, type);\n};\n\n// Raise an unexpected token error. Can take the expected token type\n// instead of a message string.\n\npp.unexpected = function (pos) {\n  var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n  if (messageOrType && (typeof messageOrType === \"undefined\" ? \"undefined\" : _typeof(messageOrType)) === \"object\" && messageOrType.label) {\n    messageOrType = \"Unexpected token, expected \" + messageOrType.label;\n  }\n  this.raise(pos != null ? pos : this.state.start, messageOrType);\n};\n\n/* eslint max-len: 0 */\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function (file, program) {\n  program.sourceType = this.options.sourceType;\n\n  this.parseBlockBody(program, true, true, types.eof);\n\n  file.program = this.finishNode(program, \"Program\");\n  file.comments = this.state.comments;\n  file.tokens = this.state.tokens;\n\n  return this.finishNode(file, \"File\");\n};\n\nvar loopLabel = { kind: \"loop\" };\nvar switchLabel = { kind: \"switch\" };\n\n// TODO\n\npp$1.stmtToDirective = function (stmt) {\n  var expr = stmt.expression;\n\n  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n  var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n  var raw = this.input.slice(expr.start, expr.end);\n  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes\n\n  this.addExtra(directiveLiteral, \"raw\", raw);\n  this.addExtra(directiveLiteral, \"rawValue\", val);\n\n  directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n\n  return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function (declaration, topLevel) {\n  if (this.match(types.at)) {\n    this.parseDecorators(true);\n  }\n\n  var starttype = this.state.type;\n  var node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case types._break:case types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case types._debugger:\n      return this.parseDebuggerStatement(node);\n    case types._do:\n      return this.parseDoStatement(node);\n    case types._for:\n      return this.parseForStatement(node);\n    case types._function:\n      if (!declaration) this.unexpected();\n      return this.parseFunctionStatement(node);\n\n    case types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n\n    case types._if:\n      return this.parseIfStatement(node);\n    case types._return:\n      return this.parseReturnStatement(node);\n    case types._switch:\n      return this.parseSwitchStatement(node);\n    case types._throw:\n      return this.parseThrowStatement(node);\n    case types._try:\n      return this.parseTryStatement(node);\n\n    case types._let:\n    case types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n\n    case types._var:\n      return this.parseVarStatement(node, starttype);\n\n    case types._while:\n      return this.parseWhileStatement(node);\n    case types._with:\n      return this.parseWithStatement(node);\n    case types.braceL:\n      return this.parseBlock();\n    case types.semi:\n      return this.parseEmptyStatement(node);\n    case types._export:\n    case types._import:\n      if (this.hasPlugin(\"dynamicImport\") && this.lookahead().type === types.parenL) break;\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) {\n          this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n        }\n\n        if (!this.inModule) {\n          this.raise(this.state.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\");\n        }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node);\n\n    case types.name:\n      if (this.state.value === \"async\") {\n        // peek ahead and see if next token is a function\n        var state = this.state.clone();\n        this.next();\n        if (this.match(types._function) && !this.canInsertSemicolon()) {\n          this.expect(types._function);\n          return this.parseFunction(node, true, false, true);\n        } else {\n          this.state = state;\n        }\n      }\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  var maybeName = this.state.value;\n  var expr = this.parseExpression();\n\n  if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n    return this.parseLabeledStatement(node, maybeName, expr);\n  } else {\n    return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp$1.takeDecorators = function (node) {\n  if (this.state.decorators.length) {\n    node.decorators = this.state.decorators;\n    this.state.decorators = [];\n  }\n};\n\npp$1.parseDecorators = function (allowExport) {\n  while (this.match(types.at)) {\n    var decorator = this.parseDecorator();\n    this.state.decorators.push(decorator);\n  }\n\n  if (allowExport && this.match(types._export)) {\n    return;\n  }\n\n  if (!this.match(types._class)) {\n    this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n  }\n};\n\npp$1.parseDecorator = function () {\n  if (!this.hasPlugin(\"decorators\")) {\n    this.unexpected();\n  }\n  var node = this.startNode();\n  this.next();\n  node.expression = this.parseMaybeAssign();\n  return this.finishNode(node, \"Decorator\");\n};\n\npp$1.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n\n  if (this.isLineTerminator()) {\n    node.label = null;\n  } else if (!this.match(types.name)) {\n    this.unexpected();\n  } else {\n    node.label = this.parseIdentifier();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = void 0;\n  for (i = 0; i < this.state.labels.length; ++i) {\n    var lab = this.state.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.state.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp$1.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp$1.parseDoStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  this.eat(types.semi);\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function (node) {\n  this.next();\n  this.state.labels.push(loopLabel);\n\n  var forAwait = false;\n  if (this.hasPlugin(\"asyncGenerators\") && this.state.inAsync && this.isContextual(\"await\")) {\n    forAwait = true;\n    this.next();\n  }\n  this.expect(types.parenL);\n\n  if (this.match(types.semi)) {\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, null);\n  }\n\n  if (this.match(types._var) || this.match(types._let) || this.match(types._const)) {\n    var _init = this.startNode();\n    var varKind = this.state.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      if (_init.declarations.length === 1 && !_init.declarations[0].init) {\n        return this.parseForIn(node, _init, forAwait);\n      }\n    }\n    if (forAwait) {\n      this.unexpected();\n    }\n    return this.parseFor(node, _init);\n  }\n\n  var refShorthandDefaultPos = { start: 0 };\n  var init = this.parseExpression(true, refShorthandDefaultPos);\n  if (this.match(types._in) || this.isContextual(\"of\")) {\n    var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n    this.toAssignable(init, undefined, description);\n    this.checkLVal(init, undefined, undefined, description);\n    return this.parseForIn(node, init, forAwait);\n  } else if (refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n  if (forAwait) {\n    this.unexpected();\n  }\n  return this.parseFor(node, init);\n};\n\npp$1.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp$1.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp$1.parseReturnStatement = function (node) {\n  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {\n    this.raise(this.state.start, \"'return' outside of function\");\n  }\n\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.isLineTerminator()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp$1.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.state.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur = void 0;\n  for (var sawDefault; !this.match(types.braceR);) {\n    if (this.match(types._case) || this.match(types._default)) {\n      var isCase = this.match(types._case);\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (cur) {\n        cur.consequent.push(this.parseStatement(true));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.state.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp$1.parseThrowStatement = function (node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function (node) {\n  this.next();\n\n  node.block = this.parseBlock();\n  node.handler = null;\n\n  if (this.match(types._catch)) {\n    var clause = this.startNode();\n    this.next();\n\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true, Object.create(null), \"catch clause\");\n    this.expect(types.parenR);\n\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n\n  node.guardedHandlers = empty;\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n  if (!node.handler && !node.finalizer) {\n    this.raise(node.start, \"Missing catch or finally clause\");\n  }\n\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp$1.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp$1.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.state.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp$1.parseWithStatement = function (node) {\n  if (this.state.strict) this.raise(this.state.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp$1.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp$1.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var _iterator = this.state.labels, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _label = _ref;\n\n    if (_label.name === maybeName) {\n      this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n  }\n\n  var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n  for (var i = this.state.labels.length - 1; i >= 0; i--) {\n    var label = this.state.labels[i];\n    if (label.statementStart === node.start) {\n      label.statementStart = this.state.start;\n      label.kind = kind;\n    } else {\n      break;\n    }\n  }\n\n  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });\n  node.body = this.parseStatement(true);\n  this.state.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp$1.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function (allowDirectives) {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.parseBlockBody(node, allowDirectives, false, types.braceR);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\npp$1.isValidDirective = function (stmt) {\n  return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n};\n\npp$1.parseBlockBody = function (node, allowDirectives, topLevel, end) {\n  node.body = [];\n  node.directives = [];\n\n  var parsedNonDirective = false;\n  var oldStrict = void 0;\n  var octalPosition = void 0;\n\n  while (!this.eat(end)) {\n    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n      octalPosition = this.state.octalPosition;\n    }\n\n    var stmt = this.parseStatement(true, topLevel);\n\n    if (allowDirectives && !parsedNonDirective && this.isValidDirective(stmt)) {\n      var directive = this.stmtToDirective(stmt);\n      node.directives.push(directive);\n\n      if (oldStrict === undefined && directive.value.value === \"use strict\") {\n        oldStrict = this.state.strict;\n        this.setStrict(true);\n\n        if (octalPosition) {\n          this.raise(octalPosition, \"Octal literal in strict mode\");\n        }\n      }\n\n      continue;\n    }\n\n    parsedNonDirective = true;\n    node.body.push(stmt);\n  }\n\n  if (oldStrict === false) {\n    this.setStrict(false);\n  }\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.match(types.semi) ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.match(types.parenR) ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function (node, init, forAwait) {\n  var type = void 0;\n  if (forAwait) {\n    this.eatContextual(\"of\");\n    type = \"ForAwaitStatement\";\n  } else {\n    type = this.match(types._in) ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n  }\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.state.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarHead(decl);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === types._const && !(this.match(types._in) || this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n      this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) break;\n  }\n  return node;\n};\n\npp$1.parseVarHead = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true, undefined, \"variable declaration\");\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = false;\n\n  this.initFunction(node, isAsync);\n\n  if (this.match(types.star)) {\n    if (node.async && !this.hasPlugin(\"asyncGenerators\")) {\n      this.unexpected();\n    } else {\n      node.generator = true;\n      this.next();\n    }\n  }\n\n  if (isStatement && !optionalId && !this.match(types.name) && !this.match(types._yield)) {\n    this.unexpected();\n  }\n\n  if (this.match(types.name) || this.match(types._yield)) {\n    node.id = this.parseBindingIdentifier();\n  }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.state.inMethod = oldInMethod;\n\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp$1.parseFunctionParams = function (node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function (node, isStatement, optionalId) {\n  this.next();\n  this.takeDecorators(node);\n  this.parseClassId(node, isStatement, optionalId);\n  this.parseClassSuper(node);\n  this.parseClassBody(node);\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp$1.isClassProperty = function () {\n  return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n};\n\npp$1.isClassMethod = function () {\n  return this.match(types.parenL);\n};\n\npp$1.isNonstaticConstructor = function (method) {\n  return !method.computed && !method.static && (method.key.name === \"constructor\" || // Identifier\n  method.key.value === \"constructor\" // Literal\n  );\n};\n\npp$1.parseClassBody = function (node) {\n  // class bodies are implicitly strict\n  var oldStrict = this.state.strict;\n  this.state.strict = true;\n\n  var hadConstructorCall = false;\n  var hadConstructor = false;\n  var decorators = [];\n  var classBody = this.startNode();\n\n  classBody.body = [];\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (this.eat(types.semi)) {\n      if (decorators.length > 0) {\n        this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n      }\n      continue;\n    }\n\n    if (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n      continue;\n    }\n\n    var method = this.startNode();\n\n    // steal the decorators if there are any\n    if (decorators.length) {\n      method.decorators = decorators;\n      decorators = [];\n    }\n\n    method.static = false;\n    if (this.match(types.name) && this.state.value === \"static\") {\n      var key = this.parseIdentifier(true); // eats 'static'\n      if (this.isClassMethod()) {\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        this.parseClassMethod(classBody, method, false, false);\n        continue;\n      } else if (this.isClassProperty()) {\n        // a property named 'static'\n        method.computed = false;\n        method.key = key;\n        classBody.body.push(this.parseClassProperty(method));\n        continue;\n      }\n      // otherwise something static\n      method.static = true;\n    }\n\n    if (this.eat(types.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parsePropertyName(method);\n      if (this.isNonstaticConstructor(method)) {\n        this.raise(method.key.start, \"Constructor can't be a generator\");\n      }\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      this.parseClassMethod(classBody, method, true, false);\n    } else {\n      var isSimple = this.match(types.name);\n      var _key = this.parsePropertyName(method);\n      if (!method.computed && method.static && (method.key.name === \"prototype\" || method.key.value === \"prototype\")) {\n        this.raise(method.key.start, \"Classes may not have static property named prototype\");\n      }\n      if (this.isClassMethod()) {\n        // a normal method\n        if (this.isNonstaticConstructor(method)) {\n          if (hadConstructor) {\n            this.raise(_key.start, \"Duplicate constructor in the same class\");\n          } else if (method.decorators) {\n            this.raise(method.start, \"You can't attach decorators to a class constructor\");\n          }\n          hadConstructor = true;\n          method.kind = \"constructor\";\n        } else {\n          method.kind = \"method\";\n        }\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isClassProperty()) {\n        // a normal property\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else if (isSimple && _key.name === \"async\" && !this.isLineTerminator()) {\n        // an async method\n        var isGenerator = this.hasPlugin(\"asyncGenerators\") && this.eat(types.star);\n        method.kind = \"method\";\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't be an async function\");\n        }\n        this.parseClassMethod(classBody, method, isGenerator, true);\n      } else if (isSimple && (_key.name === \"get\" || _key.name === \"set\") && !(this.isLineTerminator() && this.match(types.star))) {\n        // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n        // a getter or setter\n        method.kind = _key.name;\n        this.parsePropertyName(method);\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Constructor can't have get/set modifier\");\n        }\n        this.parseClassMethod(classBody, method, false, false);\n        this.checkGetterSetterParamCount(method);\n      } else if (this.hasPlugin(\"classConstructorCall\") && isSimple && _key.name === \"call\" && this.match(types.name) && this.state.value === \"constructor\") {\n        // a (deprecated) call constructor\n        if (hadConstructorCall) {\n          this.raise(method.start, \"Duplicate constructor call in the same class\");\n        } else if (method.decorators) {\n          this.raise(method.start, \"You can't attach decorators to a class constructor\");\n        }\n        hadConstructorCall = true;\n        method.kind = \"constructorCall\";\n        this.parsePropertyName(method); // consume \"constructor\" and make it the method's name\n        this.parseClassMethod(classBody, method, false, false);\n      } else if (this.isLineTerminator()) {\n        // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n        if (this.isNonstaticConstructor(method)) {\n          this.raise(method.key.start, \"Classes may not have a non-static field named 'constructor'\");\n        }\n        classBody.body.push(this.parseClassProperty(method));\n      } else {\n        this.unexpected();\n      }\n    }\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no method\");\n  }\n\n  node.body = this.finishNode(classBody, \"ClassBody\");\n\n  this.state.strict = oldStrict;\n};\n\npp$1.parseClassProperty = function (node) {\n  this.state.inClassProperty = true;\n  if (this.match(types.eq)) {\n    if (!this.hasPlugin(\"classProperties\")) this.unexpected();\n    this.next();\n    node.value = this.parseMaybeAssign();\n  } else {\n    node.value = null;\n  }\n  this.semicolon();\n  this.state.inClassProperty = false;\n  return this.finishNode(node, \"ClassProperty\");\n};\n\npp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {\n  this.parseMethod(method, isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"ClassMethod\"));\n};\n\npp$1.parseClassId = function (node, isStatement, optionalId) {\n  if (this.match(types.name)) {\n    node.id = this.parseIdentifier();\n  } else {\n    if (optionalId || !isStatement) {\n      node.id = null;\n    } else {\n      this.unexpected();\n    }\n  }\n};\n\npp$1.parseClassSuper = function (node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"exportExtensions\") && this.eatContextual(\"as\")) {\n      specifier.exported = this.parseIdentifier();\n      node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n      this.parseExportSpecifiersMaybe(node);\n      this.parseExportFrom(node, true);\n    } else {\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n  } else if (this.hasPlugin(\"exportExtensions\") && this.isExportDefaultSpecifier()) {\n    var _specifier = this.startNode();\n    _specifier.exported = this.parseIdentifier(true);\n    node.specifiers = [this.finishNode(_specifier, \"ExportDefaultSpecifier\")];\n    if (this.match(types.comma) && this.lookahead().type === types.star) {\n      this.expect(types.comma);\n      var _specifier2 = this.startNode();\n      this.expect(types.star);\n      this.expectContextual(\"as\");\n      _specifier2.exported = this.parseIdentifier();\n      node.specifiers.push(this.finishNode(_specifier2, \"ExportNamespaceSpecifier\"));\n    } else {\n      this.parseExportSpecifiersMaybe(node);\n    }\n    this.parseExportFrom(node, true);\n  } else if (this.eat(types._default)) {\n    // export default ...\n    var expr = this.startNode();\n    var needsSemi = false;\n    if (this.eat(types._function)) {\n      expr = this.parseFunction(expr, true, false, false, true);\n    } else if (this.match(types._class)) {\n      expr = this.parseClass(expr, true, true);\n    } else {\n      needsSemi = true;\n      expr = this.parseMaybeAssign();\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    this.checkExport(node, true, true);\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  } else if (this.shouldParseExportDeclaration()) {\n    node.specifiers = [];\n    node.source = null;\n    node.declaration = this.parseExportDeclaration(node);\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    this.parseExportFrom(node);\n  }\n  this.checkExport(node, true);\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp$1.parseExportDeclaration = function () {\n  return this.parseStatement(true);\n};\n\npp$1.isExportDefaultSpecifier = function () {\n  if (this.match(types.name)) {\n    return this.state.value !== \"async\";\n  }\n\n  if (!this.match(types._default)) {\n    return false;\n  }\n\n  var lookahead = this.lookahead();\n  return lookahead.type === types.comma || lookahead.type === types.name && lookahead.value === \"from\";\n};\n\npp$1.parseExportSpecifiersMaybe = function (node) {\n  if (this.eat(types.comma)) {\n    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());\n  }\n};\n\npp$1.parseExportFrom = function (node, expect) {\n  if (this.eatContextual(\"from\")) {\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n    this.checkExport(node);\n  } else {\n    if (expect) {\n      this.unexpected();\n    } else {\n      node.source = null;\n    }\n  }\n\n  this.semicolon();\n};\n\npp$1.shouldParseExportDeclaration = function () {\n  return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"let\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isContextual(\"async\");\n};\n\npp$1.checkExport = function (node, checkNames, isDefault) {\n  if (checkNames) {\n    // Check for duplicate exports\n    if (isDefault) {\n      // Default exports\n      this.checkDuplicateExports(node, \"default\");\n    } else if (node.specifiers && node.specifiers.length) {\n      // Named exports\n      for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var specifier = _ref2;\n\n        this.checkDuplicateExports(specifier, specifier.exported.name);\n      }\n    } else if (node.declaration) {\n      // Exported declarations\n      if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n        this.checkDuplicateExports(node, node.declaration.id.name);\n      } else if (node.declaration.type === \"VariableDeclaration\") {\n        for (var _iterator3 = node.declaration.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref3 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref3 = _i3.value;\n          }\n\n          var declaration = _ref3;\n\n          this.checkDeclaration(declaration.id);\n        }\n      }\n    }\n  }\n\n  if (this.state.decorators.length) {\n    var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n    if (!node.declaration || !isClass) {\n      this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n    }\n    this.takeDecorators(node.declaration);\n  }\n};\n\npp$1.checkDeclaration = function (node) {\n  if (node.type === \"ObjectPattern\") {\n    for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var prop = _ref4;\n\n      this.checkDeclaration(prop);\n    }\n  } else if (node.type === \"ArrayPattern\") {\n    for (var _iterator5 = node.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var elem = _ref5;\n\n      if (elem) {\n        this.checkDeclaration(elem);\n      }\n    }\n  } else if (node.type === \"ObjectProperty\") {\n    this.checkDeclaration(node.value);\n  } else if (node.type === \"RestElement\" || node.type === \"RestProperty\") {\n    this.checkDeclaration(node.argument);\n  } else if (node.type === \"Identifier\") {\n    this.checkDuplicateExports(node, node.name);\n  }\n};\n\npp$1.checkDuplicateExports = function (node, name) {\n  if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n    this.raiseDuplicateExportError(node, name);\n  }\n  this.state.exportedIdentifiers.push(name);\n};\n\npp$1.raiseDuplicateExportError = function (node, name) {\n  this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : \"`\" + name + \"` has already been exported. Exported identifiers must be unique.\");\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function () {\n  var nodes = [];\n  var first = true;\n  var needsFrom = void 0;\n\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    var isDefault = this.match(types._default);\n    if (isDefault && !needsFrom) needsFrom = true;\n\n    var node = this.startNode();\n    node.local = this.parseIdentifier(isDefault);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n\n  // https://github.com/ember-cli/ember-cli/pull/3739\n  if (needsFrom && !this.isContextual(\"from\")) {\n    this.unexpected();\n  }\n\n  return nodes;\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function (node) {\n  this.eat(types._import);\n\n  // import '...'\n  if (this.match(types.string)) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = [];\n    this.parseImportSpecifiers(node);\n    this.expectContextual(\"from\");\n    node.source = this.match(types.string) ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function (node) {\n  var first = true;\n  if (this.match(types.name)) {\n    // import defaultObj, { x, y as z } from '...'\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));\n    if (!this.eat(types.comma)) return;\n  }\n\n  if (this.match(types.star)) {\n    var specifier = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, \"import namespace specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportNamespaceSpecifier\"));\n    return;\n  }\n\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (this.eat(types.colon)) {\n        this.unexpected(null, \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\");\n      }\n\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    this.parseImportSpecifier(node);\n  }\n};\n\npp$1.parseImportSpecifier = function (node) {\n  var specifier = this.startNode();\n  specifier.imported = this.parseIdentifier(true);\n  if (this.eatContextual(\"as\")) {\n    specifier.local = this.parseIdentifier();\n  } else {\n    this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n    specifier.local = specifier.imported.__clone();\n  }\n  this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n  node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n};\n\npp$1.parseImportSpecifierDefault = function (id, startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.local = id;\n  this.checkLVal(node.local, true, undefined, \"default import specifier\");\n  return this.finishNode(node, \"ImportDefaultSpecifier\");\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function (node, isBinding, contextDescription) {\n  if (node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var prop = _ref;\n\n          if (prop.type === \"ObjectMethod\") {\n            if (prop.kind === \"get\" || prop.kind === \"set\") {\n              this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n            } else {\n              this.raise(prop.key.start, \"Object pattern can't contain methods\");\n            }\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isBinding, contextDescription);\n        break;\n\n      case \"SpreadProperty\":\n        node.type = \"RestProperty\";\n        var arg = node.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding, contextDescription);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        {\n          var message = \"Invalid left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n          this.raise(node.start, message);\n        }\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function (exprList, isBinding, contextDescription) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type === \"RestElement\") {\n      --end;\n    } else if (last && last.type === \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding, contextDescription);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") {\n        this.unexpected(arg.start);\n      }\n      --end;\n    }\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding, contextDescription);\n  }\n  return exprList;\n};\n\n// Convert list of expression atoms to a list of\n\npp$2.toReferencedList = function (exprList) {\n  return exprList;\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function (refShorthandDefaultPos) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp$2.parseRest = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseBindingIdentifier();\n  return this.finishNode(node, \"RestElement\");\n};\n\npp$2.shouldAllowYieldIdentifier = function () {\n  return this.match(types._yield) && !this.state.strict && !this.state.inGenerator;\n};\n\npp$2.parseBindingIdentifier = function () {\n  return this.parseIdentifier(this.shouldAllowYieldIdentifier());\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function () {\n  switch (this.state.type) {\n    case types._yield:\n      if (this.state.strict || this.state.inGenerator) this.unexpected();\n    // fall-through\n    case types.name:\n      return this.parseIdentifier(true);\n\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$2.parseBindingList = function (close, allowEmpty) {\n  var elts = [];\n  var first = true;\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n    }\n    if (allowEmpty && this.match(types.comma)) {\n      elts.push(null);\n    } else if (this.eat(close)) {\n      break;\n    } else if (this.match(types.ellipsis)) {\n      elts.push(this.parseAssignableListItemTypes(this.parseRest()));\n      this.expect(close);\n      break;\n    } else {\n      var decorators = [];\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n      var left = this.parseMaybeDefault();\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n      this.parseAssignableListItemTypes(left);\n      elts.push(this.parseMaybeDefault(left.start, left.loc.start, left));\n    }\n  }\n  return elts;\n};\n\npp$2.parseAssignableListItemTypes = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n  startLoc = startLoc || this.state.startLoc;\n  startPos = startPos || this.state.start;\n  left = left || this.parseBindingAtom();\n  if (!this.eat(types.eq)) return left;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp$2.checkLVal = function (expr, isBinding, checkClashes, contextDescription) {\n  switch (expr.type) {\n    case \"Identifier\":\n      this.checkReservedWord(expr.name, expr.start, false, true);\n\n      if (checkClashes) {\n        // we need to prefix this with an underscore for the cases where we have a key of\n        // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n        //\n        //   > var obj = Object.create(null);\n        //   undefined\n        //   > obj.__proto__\n        //   null\n        //   > obj.__proto__ = true;\n        //   true\n        //   > obj.__proto__\n        //   null\n        var key = \"_\" + expr.name;\n\n        if (checkClashes[key]) {\n          this.raise(expr.start, \"Argument name clash in strict mode\");\n        } else {\n          checkClashes[key] = true;\n        }\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var prop = _ref2;\n\n        if (prop.type === \"ObjectProperty\") prop = prop.value;\n        this.checkLVal(prop, isBinding, checkClashes, \"object destructuring pattern\");\n      }\n      break;\n\n    case \"ArrayPattern\":\n      for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var elem = _ref3;\n\n        if (elem) this.checkLVal(elem, isBinding, checkClashes, \"array destructuring pattern\");\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes, \"assignment pattern\");\n      break;\n\n    case \"RestProperty\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest property\");\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes, \"rest element\");\n      break;\n\n    default:\n      {\n        var message = (isBinding ? /* istanbul ignore next */\"Binding invalid\" : \"Invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : /* istanbul ignore next */\"expression\");\n        this.raise(expr.start, message);\n      }\n  }\n};\n\n/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function (prop, propHash) {\n  if (prop.computed || prop.kind) return;\n\n  var key = prop.key;\n  // It is either an Identifier or a String/NumericLiteral\n  var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n  if (name === \"__proto__\") {\n    if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n    propHash.proto = true;\n  }\n};\n\n// Convenience method to parse an Expression only\npp$3.getExpression = function () {\n  this.nextToken();\n  var expr = this.parseExpression();\n  if (!this.match(types.eof)) {\n    this.unexpected();\n  }\n  return expr;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initialization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n  if (this.match(types.comma)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) {\n      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n    }\n    this.toReferencedList(node.expressions);\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n\n  if (this.match(types._yield) && this.state.inGenerator) {\n    var _left = this.parseYield();\n    if (afterLeftParse) _left = afterLeftParse.call(this, _left, startPos, startLoc);\n    return _left;\n  }\n\n  var failOnShorthandAssign = void 0;\n  if (refShorthandDefaultPos) {\n    failOnShorthandAssign = false;\n  } else {\n    refShorthandDefaultPos = { start: 0 };\n    failOnShorthandAssign = true;\n  }\n\n  if (this.match(types.parenL) || this.match(types.name)) {\n    this.state.potentialArrowAt = this.state.start;\n  }\n\n  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.state.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.state.value;\n    node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n\n    this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n    if (left.extra && left.extra.parenthesized) {\n      var errorMsg = void 0;\n      if (left.type === \"ObjectPattern\") {\n        errorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (left.type === \"ArrayPattern\") {\n        errorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n      if (errorMsg) {\n        this.raise(left.start, \"You're trying to assign to a parenthesized expression, eg. instead of \" + errorMsg);\n      }\n    }\n\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start);\n  }\n\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function (noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n  return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n};\n\npp$3.parseConditional = function (expr, noIn, startPos, startLoc) {\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function (noIn, refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  } else {\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.state.type.binop;\n  if (prec != null && (!noIn || !this.match(types._in))) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.state.value;\n\n      if (node.operator === \"**\" && left.type === \"UnaryExpression\" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {\n        this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n      }\n\n      var op = this.state.type;\n      this.next();\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n\n      this.finishNode(node, op === types.logicalOR || op === types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function (refShorthandDefaultPos) {\n  if (this.state.type.prefix) {\n    var node = this.startNode();\n    var update = this.match(types.incDec);\n    node.operator = this.state.value;\n    node.prefix = true;\n    this.next();\n\n    var argType = this.state.type;\n    node.argument = this.parseMaybeUnary();\n\n    this.addExtra(node, \"parenthesizedArgument\", argType === types.parenL && (!node.argument.extra || !node.argument.extra.parenthesized));\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n    } else if (this.state.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n      this.raise(node.start, \"Deleting local variable in strict mode\");\n    }\n\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n  while (this.state.type.postfix && !this.canInsertSemicolon()) {\n    var _node = this.startNodeAt(startPos, startLoc);\n    _node.operator = this.state.value;\n    _node.prefix = false;\n    _node.argument = expr;\n    this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n    this.next();\n    expr = this.finishNode(_node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function (refShorthandDefaultPos) {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var potentialArrowAt = this.state.potentialArrowAt;\n  var expr = this.parseExprAtom(refShorthandDefaultPos);\n\n  if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n    return expr;\n  }\n\n  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n    return expr;\n  }\n\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.eat(types.dot)) {\n      var _node2 = this.startNodeAt(startPos, startLoc);\n      _node2.object = base;\n      _node2.property = this.parseIdentifier(true);\n      _node2.computed = false;\n      base = this.finishNode(_node2, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      var _node3 = this.startNodeAt(startPos, startLoc);\n      _node3.object = base;\n      _node3.property = this.parseExpression();\n      _node3.computed = true;\n      this.expect(types.bracketR);\n      base = this.finishNode(_node3, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n      this.next();\n\n      var _node4 = this.startNodeAt(startPos, startLoc);\n      _node4.callee = base;\n      _node4.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync);\n      if (_node4.callee.type === \"Import\" && _node4.arguments.length !== 1) {\n        this.raise(_node4.start, \"import() requires exactly one argument\");\n      }\n      base = this.finishNode(_node4, \"CallExpression\");\n\n      if (possibleAsync && this.shouldParseAsyncArrow()) {\n        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);\n      } else {\n        this.toReferencedList(_node4.arguments);\n      }\n    } else if (this.match(types.backQuote)) {\n      var _node5 = this.startNodeAt(startPos, startLoc);\n      _node5.tag = base;\n      _node5.quasi = this.parseTemplate(true);\n      base = this.finishNode(_node5, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\npp$3.parseCallExpressionArguments = function (close, possibleAsyncArrow) {\n  var elts = [];\n  var innerParenStart = void 0;\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params\n    if (this.match(types.parenL) && !innerParenStart) {\n      innerParenStart = this.state.start;\n    }\n\n    elts.push(this.parseExprListItem(false, possibleAsyncArrow ? { start: 0 } : undefined, possibleAsyncArrow ? { start: 0 } : undefined));\n  }\n\n  // we found an async arrow function so let's not allow any inner parens\n  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n    this.unexpected();\n  }\n\n  return elts;\n};\n\npp$3.shouldParseAsyncArrow = function () {\n  return this.match(types.arrow);\n};\n\npp$3.parseAsyncArrowFromCallExpression = function (node, call) {\n  this.expect(types.arrow);\n  return this.parseArrowExpression(node, call.arguments, true);\n};\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\npp$3.parseNoCallExpr = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function (refShorthandDefaultPos) {\n  var canBeArrow = this.state.potentialArrowAt === this.state.start;\n  var node = void 0;\n\n  switch (this.state.type) {\n    case types._super:\n      if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {\n        this.raise(this.state.start, \"'super' outside of function or class\");\n      }\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n        this.unexpected();\n      }\n      if (this.match(types.parenL) && this.state.inMethod !== \"constructor\" && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, \"super() outside of class constructor\");\n      }\n      return this.finishNode(node, \"Super\");\n\n    case types._import:\n      if (!this.hasPlugin(\"dynamicImport\")) this.unexpected();\n\n      node = this.startNode();\n      this.next();\n      if (!this.match(types.parenL)) {\n        this.unexpected(null, types.parenL);\n      }\n      return this.finishNode(node, \"Import\");\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\");\n\n    case types._yield:\n      if (this.state.inGenerator) this.unexpected();\n\n    case types.name:\n      node = this.startNode();\n      var allowAwait = this.state.value === \"await\" && this.state.inAsync;\n      var allowYield = this.shouldAllowYieldIdentifier();\n      var id = this.parseIdentifier(allowAwait || allowYield);\n\n      if (id.name === \"await\") {\n        if (this.state.inAsync || this.inModule) {\n          return this.parseAwait(node);\n        }\n      } else if (id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n        this.next();\n        return this.parseFunction(node, false, false, true);\n      } else if (canBeArrow && id.name === \"async\" && this.match(types.name)) {\n        var params = [this.parseIdentifier()];\n        this.expect(types.arrow);\n        // let foo = bar => {};\n        return this.parseArrowExpression(node, params, true);\n      }\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        return this.parseArrowExpression(node, [id]);\n      }\n\n      return id;\n\n    case types._do:\n      if (this.hasPlugin(\"doExpressions\")) {\n        var _node6 = this.startNode();\n        this.next();\n        var oldInFunction = this.state.inFunction;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.state.inFunction = false;\n        _node6.body = this.parseBlock(false, true);\n        this.state.inFunction = oldInFunction;\n        this.state.labels = oldLabels;\n        return this.finishNode(_node6, \"DoExpression\");\n      }\n\n    case types.regexp:\n      var value = this.state.value;\n      node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n    case types._null:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n\n    case types._true:case types._false:\n      node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n\n    case types.parenL:\n      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos);\n      this.toReferencedList(node.elements);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case types.braceL:\n      return this.parseObj(false, refShorthandDefaultPos);\n\n    case types._function:\n      return this.parseFunctionExpression();\n\n    case types.at:\n      this.parseDecorators();\n\n    case types._class:\n      node = this.startNode();\n      this.takeDecorators(node);\n      return this.parseClass(node, false);\n\n    case types._new:\n      return this.parseNew();\n\n    case types.backQuote:\n      return this.parseTemplate(false);\n\n    case types.doubleColon:\n      node = this.startNode();\n      this.next();\n      node.object = null;\n      var callee = node.callee = this.parseNoCallExpr();\n      if (callee.type === \"MemberExpression\") {\n        return this.finishNode(node, \"BindExpression\");\n      } else {\n        this.raise(callee.start, \"Binding should be performed on object property.\");\n      }\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$3.parseFunctionExpression = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n  if (this.state.inGenerator && this.eat(types.dot) && this.hasPlugin(\"functionSent\")) {\n    return this.parseMetaProperty(node, meta, \"sent\");\n  } else {\n    return this.parseFunction(node, false);\n  }\n};\n\npp$3.parseMetaProperty = function (node, meta, propertyName) {\n  node.meta = meta;\n  node.property = this.parseIdentifier(true);\n\n  if (node.property.name !== propertyName) {\n    this.raise(node.property.start, \"The only valid meta property for new is \" + meta.name + \".\" + propertyName);\n  }\n\n  return this.finishNode(node, \"MetaProperty\");\n};\n\npp$3.parseLiteral = function (value, type, startPos, startLoc) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  this.addExtra(node, \"rawValue\", value);\n  this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n  node.value = value;\n  this.next();\n  return this.finishNode(node, type);\n};\n\npp$3.parseParenExpression = function () {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val;\n};\n\npp$3.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n\n  var val = void 0;\n  this.expect(types.parenL);\n\n  var innerStartPos = this.state.start;\n  var innerStartLoc = this.state.startLoc;\n  var exprList = [];\n  var refShorthandDefaultPos = { start: 0 };\n  var refNeedsArrowPos = { start: 0 };\n  var first = true;\n  var spreadStart = void 0;\n  var optionalCommaStart = void 0;\n\n  while (!this.match(types.parenR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma, refNeedsArrowPos.start || null);\n      if (this.match(types.parenR)) {\n        optionalCommaStart = this.state.start;\n        break;\n      }\n    }\n\n    if (this.match(types.ellipsis)) {\n      var spreadNodeStartPos = this.state.start;\n      var spreadNodeStartLoc = this.state.startLoc;\n      spreadStart = this.state.start;\n      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));\n      break;\n    } else {\n      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n    }\n  }\n\n  var innerEndPos = this.state.start;\n  var innerEndLoc = this.state.startLoc;\n  this.expect(types.parenR);\n\n  var arrowNode = this.startNodeAt(startPos, startLoc);\n  if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n    for (var _iterator = exprList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var param = _ref;\n\n      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);\n    }\n\n    return this.parseArrowExpression(arrowNode, exprList);\n  }\n\n  if (!exprList.length) {\n    this.unexpected(this.state.lastTokStart);\n  }\n  if (optionalCommaStart) this.unexpected(optionalCommaStart);\n  if (spreadStart) this.unexpected(spreadStart);\n  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);\n  if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n  if (exprList.length > 1) {\n    val = this.startNodeAt(innerStartPos, innerStartLoc);\n    val.expressions = exprList;\n    this.toReferencedList(val.expressions);\n    this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n  } else {\n    val = exprList[0];\n  }\n\n  this.addExtra(val, \"parenthesized\", true);\n  this.addExtra(val, \"parenStart\", startPos);\n\n  return val;\n};\n\npp$3.shouldParseArrow = function () {\n  return !this.canInsertSemicolon();\n};\n\npp$3.parseArrow = function (node) {\n  if (this.eat(types.arrow)) {\n    return node;\n  }\n};\n\npp$3.parseParenItem = function (node) {\n  return node;\n};\n\n// New's precedence is slightly tricky. It must allow its argument\n// to be a `[]` or dot subscript expression, but not a call — at\n// least, not without wrapping it in parentheses. Thus, it uses the\n\npp$3.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdentifier(true);\n\n  if (this.eat(types.dot)) {\n    var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n    if (!this.state.inFunction) {\n      this.raise(metaProp.property.start, \"new.target can only be used in functions\");\n    }\n\n    return metaProp;\n  }\n\n  node.callee = this.parseNoCallExpr();\n\n  if (this.eat(types.parenL)) {\n    node.arguments = this.parseExprList(types.parenR);\n    this.toReferencedList(node.arguments);\n  } else {\n    node.arguments = [];\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function (isTagged) {\n  var elem = this.startNode();\n  if (this.state.value === null) {\n    if (!isTagged || !this.hasPlugin(\"templateInvalidEscapes\")) {\n      this.raise(this.state.invalidTemplateEscapePosition, \"Invalid escape sequence in template\");\n    } else {\n      this.state.invalidTemplateEscapePosition = null;\n    }\n  }\n  elem.value = {\n    raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n    cooked: this.state.value\n  };\n  this.next();\n  elem.tail = this.match(types.backQuote);\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp$3.parseTemplate = function (isTagged) {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement(isTagged);\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function (isPattern, refShorthandDefaultPos) {\n  var decorators = [];\n  var propHash = Object.create(null);\n  var first = true;\n  var node = this.startNode();\n\n  node.properties = [];\n  this.next();\n\n  var firstRestLocation = null;\n\n  while (!this.eat(types.braceR)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(types.braceR)) break;\n    }\n\n    while (this.match(types.at)) {\n      decorators.push(this.parseDecorator());\n    }\n\n    var prop = this.startNode(),\n        isGenerator = false,\n        isAsync = false,\n        startPos = void 0,\n        startLoc = void 0;\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    if (this.hasPlugin(\"objectRestSpread\") && this.match(types.ellipsis)) {\n      prop = this.parseSpread(isPattern ? { start: 0 } : undefined);\n      prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\";\n      if (isPattern) this.toAssignable(prop.argument, true, \"object pattern\");\n      node.properties.push(prop);\n      if (isPattern) {\n        var position = this.state.start;\n        if (firstRestLocation !== null) {\n          this.unexpected(firstRestLocation, \"Cannot have multiple rest elements when destructuring\");\n        } else if (this.eat(types.braceR)) {\n          break;\n        } else if (this.match(types.comma) && this.lookahead().type === types.braceR) {\n          // TODO: temporary rollback\n          // this.unexpected(position, \"A trailing comma is not permitted after the rest element\");\n          continue;\n        } else {\n          firstRestLocation = position;\n          continue;\n        }\n      } else {\n        continue;\n      }\n    }\n\n    prop.method = false;\n    prop.shorthand = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    if (!isPattern && this.isContextual(\"async\")) {\n      if (isGenerator) this.unexpected();\n\n      var asyncId = this.parseIdentifier();\n      if (this.match(types.colon) || this.match(types.parenL) || this.match(types.braceR) || this.match(types.eq) || this.match(types.comma)) {\n        prop.key = asyncId;\n        prop.computed = false;\n      } else {\n        isAsync = true;\n        if (this.hasPlugin(\"asyncGenerators\")) isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop);\n      }\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);\n    this.checkPropClash(prop, propHash);\n\n    if (prop.shorthand) {\n      this.addExtra(prop, \"shorthand\", true);\n    }\n\n    node.properties.push(prop);\n  }\n\n  if (firstRestLocation !== null) {\n    this.unexpected(firstRestLocation, \"The rest element has to be the last element when destructuring\");\n  }\n\n  if (decorators.length) {\n    this.raise(this.state.start, \"You have trailing decorators with no property\");\n  }\n\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp$3.isGetterOrSetterMethod = function (prop, isPattern) {\n  return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || // get \"string\"() {}\n  this.match(types.num) || // get 1() {}\n  this.match(types.bracketL) || // get [\"string\"]() {}\n  this.match(types.name) || // get foo() {}\n  this.state.type.keyword // get debugger() {}\n  );\n};\n\n// get methods aren't allowed to have any parameters\n// set methods must have exactly 1 parameter\npp$3.checkGetterSetterParamCount = function (method) {\n  var paramCount = method.kind === \"get\" ? 0 : 1;\n  if (method.params.length !== paramCount) {\n    var start = method.start;\n    if (method.kind === \"get\") {\n      this.raise(start, \"getter should have no params\");\n    } else {\n      this.raise(start, \"setter should have exactly one param\");\n    }\n  }\n};\n\npp$3.parseObjectMethod = function (prop, isGenerator, isAsync, isPattern) {\n  if (isAsync || isGenerator || this.match(types.parenL)) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"method\";\n    prop.method = true;\n    this.parseMethod(prop, isGenerator, isAsync);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n\n  if (this.isGetterOrSetterMethod(prop, isPattern)) {\n    if (isGenerator || isAsync) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    this.parseMethod(prop);\n    this.checkGetterSetterParamCount(prop);\n\n    return this.finishNode(prop, \"ObjectMethod\");\n  }\n};\n\npp$3.parseObjectProperty = function (prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n\n  if (!prop.computed && prop.key.type === \"Identifier\") {\n    this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else if (this.match(types.eq) && refShorthandDefaultPos) {\n      if (!refShorthandDefaultPos.start) {\n        refShorthandDefaultPos.start = this.state.start;\n      }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n    } else {\n      prop.value = prop.key.__clone();\n    }\n    prop.shorthand = true;\n\n    return this.finishNode(prop, \"ObjectProperty\");\n  }\n};\n\npp$3.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {\n  var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n  if (!node) this.unexpected();\n\n  return node;\n};\n\npp$3.parsePropertyName = function (prop) {\n  if (this.eat(types.bracketL)) {\n    prop.computed = true;\n    prop.key = this.parseMaybeAssign();\n    this.expect(types.bracketR);\n  } else {\n    prop.computed = false;\n    var oldInPropertyName = this.state.inPropertyName;\n    this.state.inPropertyName = true;\n    prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    this.state.inPropertyName = oldInPropertyName;\n  }\n  return prop.key;\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function (node, isAsync) {\n  node.id = null;\n  node.generator = false;\n  node.expression = false;\n  node.async = !!isAsync;\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function (node, isGenerator, isAsync) {\n  var oldInMethod = this.state.inMethod;\n  this.state.inMethod = node.kind || true;\n  this.initFunction(node, isAsync);\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR);\n  node.generator = !!isGenerator;\n  this.parseFunctionBody(node);\n  this.state.inMethod = oldInMethod;\n  return node;\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function (node, params, isAsync) {\n  this.initFunction(node, isAsync);\n  node.params = this.toAssignableList(params, true, \"arrow function parameters\");\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\npp$3.isStrictBody = function (node, isExpression) {\n  if (!isExpression && node.body.directives.length) {\n    for (var _iterator2 = node.body.directives, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var directive = _ref2;\n\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// Parse function body and check parameters.\npp$3.parseFunctionBody = function (node, allowExpression) {\n  var isExpression = allowExpression && !this.match(types.braceL);\n\n  var oldInAsync = this.state.inAsync;\n  this.state.inAsync = node.async;\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.state.inFunction;\n    var oldInGen = this.state.inGenerator;\n    var oldLabels = this.state.labels;\n    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;\n  }\n  this.state.inAsync = oldInAsync;\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  var isStrict = this.isStrictBody(node, isExpression);\n  // Also check when allowExpression === true for arrow functions\n  var checkLVal = this.state.strict || allowExpression || isStrict;\n\n  if (isStrict && node.id && node.id.type === \"Identifier\" && node.id.name === \"yield\") {\n    this.raise(node.id.start, \"Binding yield in strict mode\");\n  }\n\n  if (checkLVal) {\n    var nameHash = Object.create(null);\n    var oldStrict = this.state.strict;\n    if (isStrict) this.state.strict = true;\n    if (node.id) {\n      this.checkLVal(node.id, true, undefined, \"function name\");\n    }\n    for (var _iterator3 = node.params, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var param = _ref3;\n\n      if (isStrict && param.type !== \"Identifier\") {\n        this.raise(param.start, \"Non-simple parameter in strict mode\");\n      }\n      this.checkLVal(param, true, nameHash, \"function parameter list\");\n    }\n    this.state.strict = oldStrict;\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function (close, allowEmpty, refShorthandDefaultPos) {\n  var elts = [];\n  var first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n      if (this.eat(close)) break;\n    }\n\n    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n  }\n  return elts;\n};\n\npp$3.parseExprListItem = function (allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {\n  var elt = void 0;\n  if (allowEmpty && this.match(types.comma)) {\n    elt = null;\n  } else if (this.match(types.ellipsis)) {\n    elt = this.parseSpread(refShorthandDefaultPos);\n  } else {\n    elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n  }\n  return elt;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdentifier = function (liberal) {\n  var node = this.startNode();\n  if (!liberal) {\n    this.checkReservedWord(this.state.value, this.state.start, !!this.state.type.keyword, false);\n  }\n\n  if (this.match(types.name)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n\n  if (!liberal && node.name === \"await\" && this.state.inAsync) {\n    this.raise(node.start, \"invalid use of await inside of an async function\");\n  }\n\n  node.loc.identifierName = node.name;\n\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\npp$3.checkReservedWord = function (word, startLoc, checkKeywords, isBinding) {\n  if (this.isReservedWord(word) || checkKeywords && this.isKeyword(word)) {\n    this.raise(startLoc, word + \" is a reserved word\");\n  }\n\n  if (this.state.strict && (reservedWords.strict(word) || isBinding && reservedWords.strictBind(word))) {\n    this.raise(startLoc, word + \" is a reserved word in strict mode\");\n  }\n};\n\n// Parses await expression inside async function.\n\npp$3.parseAwait = function (node) {\n  // istanbul ignore next: this condition is checked at the call site so won't be hit here\n  if (!this.state.inAsync) {\n    this.unexpected();\n  }\n  if (this.match(types.star)) {\n    this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n  }\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\");\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.semi) || this.canInsertSemicolon() || !this.match(types.star) && !this.state.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$4 = Parser.prototype;\nvar commentKeys = [\"leadingComments\", \"trailingComments\", \"innerComments\"];\n\nvar Node = function () {\n  function Node(pos, loc, filename) {\n    classCallCheck(this, Node);\n\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (filename) this.loc.filename = filename;\n  }\n\n  Node.prototype.__clone = function __clone() {\n    var node2 = new Node();\n    for (var key in this) {\n      // Do not clone comments that are already attached to the node\n      if (commentKeys.indexOf(key) < 0) {\n        node2[key] = this[key];\n      }\n    }\n\n    return node2;\n  };\n\n  return Node;\n}();\n\npp$4.startNode = function () {\n  return new Node(this.state.start, this.state.startLoc, this.filename);\n};\n\npp$4.startNodeAt = function (pos, loc) {\n  return new Node(pos, loc, this.filename);\n};\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  node.loc.end = loc;\n  this.processComment(node);\n  return node;\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\npp$4.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp$4.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\nvar pp$5 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$5.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;\n  err.loc = loc;\n  throw err;\n};\n\n/* eslint max-len: 0 */\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar pp$6 = Parser.prototype;\n\npp$6.addComment = function (comment) {\n  if (this.filename) comment.loc.filename = this.filename;\n  this.state.trailingComments.push(comment);\n  this.state.leadingComments.push(comment);\n};\n\npp$6.processComment = function (node) {\n  if (node.type === \"Program\" && node.body.length > 0) return;\n\n  var stack = this.state.commentStack;\n\n  var firstChild = void 0,\n      lastChild = void 0,\n      trailingComments = void 0,\n      i = void 0,\n      j = void 0;\n\n  if (this.state.trailingComments.length > 0) {\n    // If the first comment in trailingComments comes after the\n    // current node, then we're good - all comments in the array will\n    // come after the node and so it's safe to add them as official\n    // trailingComments.\n    if (this.state.trailingComments[0].start >= node.end) {\n      trailingComments = this.state.trailingComments;\n      this.state.trailingComments = [];\n    } else {\n      // Otherwise, if the first comment doesn't come after the\n      // current node, that means we have a mix of leading and trailing\n      // comments in the array and that leadingComments contains the\n      // same items as trailingComments. Reset trailingComments to\n      // zero items and we'll handle this by evaluating leadingComments\n      // later.\n      this.state.trailingComments.length = 0;\n    }\n  } else {\n    var lastInStack = last(stack);\n    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n      trailingComments = lastInStack.trailingComments;\n      lastInStack.trailingComments = null;\n    }\n  }\n\n  // Eating the stack.\n  if (stack.length > 0 && last(stack).start >= node.start) {\n    firstChild = stack.pop();\n  }\n\n  while (stack.length > 0 && last(stack).start >= node.start) {\n    lastChild = stack.pop();\n  }\n\n  if (!lastChild && firstChild) lastChild = firstChild;\n\n  // Attach comments that follow a trailing comma on the last\n  // property in an object literal or a trailing comma in function arguments\n  // as trailing comments\n  if (firstChild && this.state.leadingComments.length > 0) {\n    var lastComment = last(this.state.leadingComments);\n\n    if (firstChild.type === \"ObjectProperty\") {\n      if (lastComment.start >= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            firstChild.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    } else if (node.type === \"CallExpression\" && node.arguments && node.arguments.length) {\n      var lastArg = last(node.arguments);\n\n      if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {\n        if (this.state.commentPreviousNode) {\n          if (this.state.leadingComments.length > 0) {\n            lastArg.trailingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        }\n      }\n    }\n  }\n\n  if (lastChild) {\n    if (lastChild.leadingComments) {\n      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {\n        node.leadingComments = lastChild.leadingComments;\n        lastChild.leadingComments = null;\n      } else {\n        // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n        // so this takes back the leading comment.\n        // See also: https://github.com/eslint/espree/issues/158\n        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n          if (lastChild.leadingComments[i].end <= node.start) {\n            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n            break;\n          }\n        }\n      }\n    }\n  } else if (this.state.leadingComments.length > 0) {\n    if (last(this.state.leadingComments).end <= node.start) {\n      if (this.state.commentPreviousNode) {\n        for (j = 0; j < this.state.leadingComments.length; j++) {\n          if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n            this.state.leadingComments.splice(j, 1);\n            j--;\n          }\n        }\n      }\n      if (this.state.leadingComments.length > 0) {\n        node.leadingComments = this.state.leadingComments;\n        this.state.leadingComments = [];\n      }\n    } else {\n      // https://github.com/eslint/espree/issues/2\n      //\n      // In special cases, such as return (without a value) and\n      // debugger, all comments will end up as leadingComments and\n      // will otherwise be eliminated. This step runs when the\n      // commentStack is empty and there are comments left\n      // in leadingComments.\n      //\n      // This loop figures out the stopping point between the actual\n      // leading and trailing comments by finding the location of the\n      // first comment that comes after the given node.\n      for (i = 0; i < this.state.leadingComments.length; i++) {\n        if (this.state.leadingComments[i].end > node.start) {\n          break;\n        }\n      }\n\n      // Split the array based on the location of the first comment\n      // that comes after the node. Keep in mind that this could\n      // result in an empty array, and if so, the array must be\n      // deleted.\n      node.leadingComments = this.state.leadingComments.slice(0, i);\n      if (node.leadingComments.length === 0) {\n        node.leadingComments = null;\n      }\n\n      // Similarly, trailing comments are attached later. The variable\n      // must be reset to null if there are no trailing comments.\n      trailingComments = this.state.leadingComments.slice(i);\n      if (trailingComments.length === 0) {\n        trailingComments = null;\n      }\n    }\n  }\n\n  this.state.commentPreviousNode = node;\n\n  if (trailingComments) {\n    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n      node.innerComments = trailingComments;\n    } else {\n      node.trailingComments = trailingComments;\n    }\n  }\n\n  stack.push(node);\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.estreeParseRegExpLiteral = function (_ref) {\n  var pattern = _ref.pattern,\n      flags = _ref.flags;\n\n  var regex = null;\n  try {\n    regex = new RegExp(pattern, flags);\n  } catch (e) {\n    // In environments that don't support these flags value will\n    // be null as the regex can't be represented natively.\n  }\n  var node = this.estreeParseLiteral(regex);\n  node.regex = { pattern: pattern, flags: flags };\n\n  return node;\n};\n\npp$7.estreeParseLiteral = function (value) {\n  return this.parseLiteral(value, \"Literal\");\n};\n\npp$7.directiveToStmt = function (directive) {\n  var directiveLiteral = directive.value;\n\n  var stmt = this.startNodeAt(directive.start, directive.loc.start);\n  var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n\n  expression.value = directiveLiteral.value;\n  expression.raw = directiveLiteral.extra.raw;\n\n  stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n  stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n  return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n};\n\nfunction isSimpleProperty(node) {\n  return node && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estreePlugin = function (instance) {\n  instance.extend(\"checkDeclaration\", function (inner) {\n    return function (node) {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(node.value);\n      } else {\n        inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"checkGetterSetterParamCount\", function () {\n    return function (prop) {\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.start;\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter should have no params\");\n        } else {\n          this.raise(start, \"setter should have exactly one param\");\n        }\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (expr, isBinding, checkClashes) {\n      var _this = this;\n\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(function (prop) {\n            _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, isBinding, checkClashes, \"object destructuring pattern\");\n          });\n          break;\n        default:\n          for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n            args[_key - 3] = arguments[_key];\n          }\n\n          inner.call.apply(inner, [this, expr, isBinding, checkClashes].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"checkPropClash\", function () {\n    return function (prop, propHash) {\n      if (prop.computed || !isSimpleProperty(prop)) return;\n\n      var key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\") {\n        if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n        propHash.proto = true;\n      }\n    };\n  });\n\n  instance.extend(\"isStrictBody\", function () {\n    return function (node, isExpression) {\n      if (!isExpression && node.body.body.length > 0) {\n        for (var _iterator = node.body.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var directive = _ref2;\n\n          if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            // Break for the first non literal expression\n            break;\n          }\n        }\n      }\n\n      return false;\n    };\n  });\n\n  instance.extend(\"isValidDirective\", function () {\n    return function (stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n    };\n  });\n\n  instance.extend(\"stmtToDirective\", function (inner) {\n    return function (stmt) {\n      var directive = inner.call(this, stmt);\n      var value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    };\n  });\n\n  instance.extend(\"parseBlockBody\", function (inner) {\n    return function (node) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, node].concat(args));\n\n      node.directives.reverse().forEach(function (directive) {\n        node.body.unshift(_this2.directiveToStmt(directive));\n      });\n      delete node.directives;\n    };\n  });\n\n  instance.extend(\"parseClassMethod\", function () {\n    return function (classBody, method, isGenerator, isAsync) {\n      this.parseMethod(method, isGenerator, isAsync);\n      if (method.typeParameters) {\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n    };\n  });\n\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function () {\n      switch (this.state.type) {\n        case types.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case types.num:\n        case types.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case types._null:\n          return this.estreeParseLiteral(null);\n\n        case types._true:\n          return this.estreeParseLiteral(true);\n\n        case types._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return inner.call.apply(inner, [this].concat(args));\n      }\n    };\n  });\n\n  instance.extend(\"parseLiteral\", function (inner) {\n    return function () {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseMethod\", function (inner) {\n    return function (node) {\n      var funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so inner method correctly sets state\n\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      funcNode = inner.call.apply(inner, [this, funcNode].concat(args));\n      delete funcNode.kind;\n      node.value = this.finishNode(funcNode, \"FunctionExpression\");\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectMethod\", function (inner) {\n    return function () {\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        if (node.kind === \"method\") node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseObjectProperty\", function (inner) {\n    return function () {\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding) {\n      for (var _len8 = arguments.length, args = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n        args[_key8 - 2] = arguments[_key8];\n      }\n\n      if (isSimpleProperty(node)) {\n        this.toAssignable.apply(this, [node.value, isBinding].concat(args));\n\n        return node;\n      } else if (node.type === \"ObjectExpression\") {\n        node.type = \"ObjectPattern\";\n        for (var _iterator2 = node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref3 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref3 = _i2.value;\n          }\n\n          var prop = _ref3;\n\n          if (prop.kind === \"get\" || prop.kind === \"set\") {\n            this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          } else if (prop.method) {\n            this.raise(prop.key.start, \"Object pattern can't contain methods\");\n          } else {\n            this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n          }\n        }\n\n        return node;\n      }\n\n      return inner.call.apply(inner, [this, node, isBinding].concat(args));\n    };\n  });\n};\n\n/* eslint max-len: 0 */\n\nvar primitiveTypes = [\"any\", \"mixed\", \"empty\", \"bool\", \"boolean\", \"number\", \"string\", \"void\", \"null\"];\n\nvar pp$8 = Parser.prototype;\n\npp$8.flowParseTypeInitialiser = function (tok) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(tok || types.colon);\n\n  var type = this.flowParseType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParsePredicate = function () {\n  var node = this.startNode();\n  var moduloLoc = this.state.startLoc;\n  var moduloPos = this.state.start;\n  this.expect(types.modulo);\n  var checksLoc = this.state.startLoc;\n  this.expectContextual(\"checks\");\n  // Force '%' and 'checks' to be adjacent\n  if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n    this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n  }\n  if (this.eat(types.parenL)) {\n    node.expression = this.parseExpression();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"DeclaredPredicate\");\n  } else {\n    return this.finishNode(node, \"InferredPredicate\");\n  }\n};\n\npp$8.flowParseTypeAndPredicateInitialiser = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  this.expect(types.colon);\n  var type = null;\n  var predicate = null;\n  if (this.match(types.modulo)) {\n    this.state.inType = oldInType;\n    predicate = this.flowParsePredicate();\n  } else {\n    type = this.flowParseType();\n    this.state.inType = oldInType;\n    if (this.match(types.modulo)) {\n      predicate = this.flowParsePredicate();\n    }\n  }\n  return [type, predicate];\n};\n\npp$8.flowParseDeclareClass = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node, true);\n  return this.finishNode(node, \"DeclareClass\");\n};\n\npp$8.flowParseDeclareFunction = function (node) {\n  this.next();\n\n  var id = node.id = this.parseIdentifier();\n\n  var typeNode = this.startNode();\n  var typeContainer = this.startNode();\n\n  if (this.isRelational(\"<\")) {\n    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    typeNode.typeParameters = null;\n  }\n\n  this.expect(types.parenL);\n  var tmp = this.flowParseFunctionTypeParams();\n  typeNode.params = tmp.params;\n  typeNode.rest = tmp.rest;\n  this.expect(types.parenR);\n  var predicate = null;\n\n  var _flowParseTypeAndPred = this.flowParseTypeAndPredicateInitialiser();\n\n  typeNode.returnType = _flowParseTypeAndPred[0];\n  predicate = _flowParseTypeAndPred[1];\n\n  typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n  typeContainer.predicate = predicate;\n  id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n  this.finishNode(id, id.type);\n\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareFunction\");\n};\n\npp$8.flowParseDeclare = function (node) {\n  if (this.match(types._class)) {\n    return this.flowParseDeclareClass(node);\n  } else if (this.match(types._function)) {\n    return this.flowParseDeclareFunction(node);\n  } else if (this.match(types._var)) {\n    return this.flowParseDeclareVariable(node);\n  } else if (this.isContextual(\"module\")) {\n    if (this.lookahead().type === types.dot) {\n      return this.flowParseDeclareModuleExports(node);\n    } else {\n      return this.flowParseDeclareModule(node);\n    }\n  } else if (this.isContextual(\"type\")) {\n    return this.flowParseDeclareTypeAlias(node);\n  } else if (this.isContextual(\"opaque\")) {\n    return this.flowParseDeclareOpaqueType(node);\n  } else if (this.isContextual(\"interface\")) {\n    return this.flowParseDeclareInterface(node);\n  } else if (this.match(types._export)) {\n    return this.flowParseDeclareExportDeclaration(node);\n  } else {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseDeclareExportDeclaration = function (node) {\n  this.expect(types._export);\n  if (this.isContextual(\"opaque\") // declare export opaque ...\n  ) {\n      node.declaration = this.flowParseDeclare(this.startNode());\n      node.default = false;\n\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    }\n\n  throw this.unexpected();\n};\n\npp$8.flowParseDeclareVariable = function (node) {\n  this.next();\n  node.id = this.flowParseTypeAnnotatableIdentifier();\n  this.semicolon();\n  return this.finishNode(node, \"DeclareVariable\");\n};\n\npp$8.flowParseDeclareModule = function (node) {\n  this.next();\n\n  if (this.match(types.string)) {\n    node.id = this.parseExprAtom();\n  } else {\n    node.id = this.parseIdentifier();\n  }\n\n  var bodyNode = node.body = this.startNode();\n  var body = bodyNode.body = [];\n  this.expect(types.braceL);\n  while (!this.match(types.braceR)) {\n    var _bodyNode = this.startNode();\n\n    if (this.match(types._import)) {\n      var lookahead = this.lookahead();\n      if (lookahead.value !== \"type\" && lookahead.value !== \"typeof\") {\n        this.unexpected(null, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n      }\n\n      this.parseImport(_bodyNode);\n    } else {\n      this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n\n      _bodyNode = this.flowParseDeclare(_bodyNode, true);\n    }\n\n    body.push(_bodyNode);\n  }\n  this.expect(types.braceR);\n\n  this.finishNode(bodyNode, \"BlockStatement\");\n  return this.finishNode(node, \"DeclareModule\");\n};\n\npp$8.flowParseDeclareModuleExports = function (node) {\n  this.expectContextual(\"module\");\n  this.expect(types.dot);\n  this.expectContextual(\"exports\");\n  node.typeAnnotation = this.flowParseTypeAnnotation();\n  this.semicolon();\n\n  return this.finishNode(node, \"DeclareModuleExports\");\n};\n\npp$8.flowParseDeclareTypeAlias = function (node) {\n  this.next();\n  this.flowParseTypeAlias(node);\n  return this.finishNode(node, \"DeclareTypeAlias\");\n};\n\npp$8.flowParseDeclareOpaqueType = function (node) {\n  this.next();\n  this.flowParseOpaqueType(node, true);\n  return this.finishNode(node, \"DeclareOpaqueType\");\n};\n\npp$8.flowParseDeclareInterface = function (node) {\n  this.next();\n  this.flowParseInterfaceish(node);\n  return this.finishNode(node, \"DeclareInterface\");\n};\n\n// Interfaces\n\npp$8.flowParseInterfaceish = function (node) {\n  node.id = this.parseIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.extends = [];\n  node.mixins = [];\n\n  if (this.eat(types._extends)) {\n    do {\n      node.extends.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  if (this.isContextual(\"mixins\")) {\n    this.next();\n    do {\n      node.mixins.push(this.flowParseInterfaceExtends());\n    } while (this.eat(types.comma));\n  }\n\n  node.body = this.flowParseObjectType(true, false, false);\n};\n\npp$8.flowParseInterfaceExtends = function () {\n  var node = this.startNode();\n\n  node.id = this.flowParseQualifiedTypeIdentifier();\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  } else {\n    node.typeParameters = null;\n  }\n\n  return this.finishNode(node, \"InterfaceExtends\");\n};\n\npp$8.flowParseInterface = function (node) {\n  this.flowParseInterfaceish(node, false);\n  return this.finishNode(node, \"InterfaceDeclaration\");\n};\n\npp$8.flowParseRestrictedIdentifier = function (liberal) {\n  if (primitiveTypes.indexOf(this.state.value) > -1) {\n    this.raise(this.state.start, \"Cannot overwrite primitive type \" + this.state.value);\n  }\n\n  return this.parseIdentifier(liberal);\n};\n\n// Type aliases\n\npp$8.flowParseTypeAlias = function (node) {\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  node.right = this.flowParseTypeInitialiser(types.eq);\n  this.semicolon();\n\n  return this.finishNode(node, \"TypeAlias\");\n};\n\n// Opaque type aliases\n\npp$8.flowParseOpaqueType = function (node, declare) {\n  this.expectContextual(\"type\");\n  node.id = this.flowParseRestrictedIdentifier();\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  } else {\n    node.typeParameters = null;\n  }\n\n  // Parse the supertype\n  node.supertype = null;\n  if (this.match(types.colon)) {\n    node.supertype = this.flowParseTypeInitialiser(types.colon);\n  }\n\n  node.impltype = null;\n  if (!declare) {\n    node.impltype = this.flowParseTypeInitialiser(types.eq);\n  }\n  this.semicolon();\n\n  return this.finishNode(node, \"OpaqueType\");\n};\n\n// Type annotations\n\npp$8.flowParseTypeParameter = function () {\n  var node = this.startNode();\n\n  var variance = this.flowParseVariance();\n\n  var ident = this.flowParseTypeAnnotatableIdentifier();\n  node.name = ident.name;\n  node.variance = variance;\n  node.bound = ident.typeAnnotation;\n\n  if (this.match(types.eq)) {\n    this.eat(types.eq);\n    node.default = this.flowParseType();\n  }\n\n  return this.finishNode(node, \"TypeParameter\");\n};\n\npp$8.flowParseTypeParameterDeclaration = function () {\n  var oldInType = this.state.inType;\n  var node = this.startNode();\n  node.params = [];\n\n  this.state.inType = true;\n\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n    this.next();\n  } else {\n    this.unexpected();\n  }\n\n  do {\n    node.params.push(this.flowParseTypeParameter());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  } while (!this.isRelational(\">\"));\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterDeclaration\");\n};\n\npp$8.flowParseTypeParameterInstantiation = function () {\n  var node = this.startNode();\n  var oldInType = this.state.inType;\n  node.params = [];\n\n  this.state.inType = true;\n\n  this.expectRelational(\"<\");\n  while (!this.isRelational(\">\")) {\n    node.params.push(this.flowParseType());\n    if (!this.isRelational(\">\")) {\n      this.expect(types.comma);\n    }\n  }\n  this.expectRelational(\">\");\n\n  this.state.inType = oldInType;\n\n  return this.finishNode(node, \"TypeParameterInstantiation\");\n};\n\npp$8.flowParseObjectPropertyKey = function () {\n  return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n};\n\npp$8.flowParseObjectTypeIndexer = function (node, isStatic, variance) {\n  node.static = isStatic;\n\n  this.expect(types.bracketL);\n  if (this.lookahead().type === types.colon) {\n    node.id = this.flowParseObjectPropertyKey();\n    node.key = this.flowParseTypeInitialiser();\n  } else {\n    node.id = null;\n    node.key = this.flowParseType();\n  }\n  this.expect(types.bracketR);\n  node.value = this.flowParseTypeInitialiser();\n  node.variance = variance;\n\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeIndexer\");\n};\n\npp$8.flowParseObjectTypeMethodish = function (node) {\n  node.params = [];\n  node.rest = null;\n  node.typeParameters = null;\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterDeclaration();\n  }\n\n  this.expect(types.parenL);\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    node.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n\n  if (this.eat(types.ellipsis)) {\n    node.rest = this.flowParseFunctionTypeParam();\n  }\n  this.expect(types.parenR);\n  node.returnType = this.flowParseTypeInitialiser();\n\n  return this.finishNode(node, \"FunctionTypeAnnotation\");\n};\n\npp$8.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));\n  node.static = isStatic;\n  node.key = key;\n  node.optional = false;\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeProperty\");\n};\n\npp$8.flowParseObjectTypeCallProperty = function (node, isStatic) {\n  var valueNode = this.startNode();\n  node.static = isStatic;\n  node.value = this.flowParseObjectTypeMethodish(valueNode);\n  this.flowObjectTypeSemicolon();\n  return this.finishNode(node, \"ObjectTypeCallProperty\");\n};\n\npp$8.flowParseObjectType = function (allowStatic, allowExact, allowSpread) {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n\n  var nodeStart = this.startNode();\n  var node = void 0;\n  var propertyKey = void 0;\n  var isStatic = false;\n\n  nodeStart.callProperties = [];\n  nodeStart.properties = [];\n  nodeStart.indexers = [];\n\n  var endDelim = void 0;\n  var exact = void 0;\n  if (allowExact && this.match(types.braceBarL)) {\n    this.expect(types.braceBarL);\n    endDelim = types.braceBarR;\n    exact = true;\n  } else {\n    this.expect(types.braceL);\n    endDelim = types.braceR;\n    exact = false;\n  }\n\n  nodeStart.exact = exact;\n\n  while (!this.match(endDelim)) {\n    var optional = false;\n    var startPos = this.state.start;\n    var startLoc = this.state.startLoc;\n    node = this.startNode();\n    if (allowStatic && this.isContextual(\"static\") && this.lookahead().type !== types.colon) {\n      this.next();\n      isStatic = true;\n    }\n\n    var variancePos = this.state.start;\n    var variance = this.flowParseVariance();\n\n    if (this.match(types.bracketL)) {\n      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n    } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      if (variance) {\n        this.unexpected(variancePos);\n      }\n      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n    } else {\n      if (this.match(types.ellipsis)) {\n        if (!allowSpread) {\n          this.unexpected(null, \"Spread operator cannot appear in class or interface definitions\");\n        }\n        if (variance) {\n          this.unexpected(variance.start, \"Spread properties cannot have variance\");\n        }\n        this.expect(types.ellipsis);\n        node.argument = this.flowParseType();\n        this.flowObjectTypeSemicolon();\n        nodeStart.properties.push(this.finishNode(node, \"ObjectTypeSpreadProperty\"));\n      } else {\n        propertyKey = this.flowParseObjectPropertyKey();\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          // This is a method property\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));\n        } else {\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n          node.key = propertyKey;\n          node.value = this.flowParseTypeInitialiser();\n          node.optional = optional;\n          node.static = isStatic;\n          node.variance = variance;\n          this.flowObjectTypeSemicolon();\n          nodeStart.properties.push(this.finishNode(node, \"ObjectTypeProperty\"));\n        }\n      }\n    }\n\n    isStatic = false;\n  }\n\n  this.expect(endDelim);\n\n  var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n  this.state.inType = oldInType;\n\n  return out;\n};\n\npp$8.flowObjectTypeSemicolon = function () {\n  if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n    this.unexpected();\n  }\n};\n\npp$8.flowParseQualifiedTypeIdentifier = function (startPos, startLoc, id) {\n  startPos = startPos || this.state.start;\n  startLoc = startLoc || this.state.startLoc;\n  var node = id || this.parseIdentifier();\n\n  while (this.eat(types.dot)) {\n    var node2 = this.startNodeAt(startPos, startLoc);\n    node2.qualification = node;\n    node2.id = this.parseIdentifier();\n    node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n  }\n\n  return node;\n};\n\npp$8.flowParseGenericType = function (startPos, startLoc, id) {\n  var node = this.startNodeAt(startPos, startLoc);\n\n  node.typeParameters = null;\n  node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n  if (this.isRelational(\"<\")) {\n    node.typeParameters = this.flowParseTypeParameterInstantiation();\n  }\n\n  return this.finishNode(node, \"GenericTypeAnnotation\");\n};\n\npp$8.flowParseTypeofType = function () {\n  var node = this.startNode();\n  this.expect(types._typeof);\n  node.argument = this.flowParsePrimaryType();\n  return this.finishNode(node, \"TypeofTypeAnnotation\");\n};\n\npp$8.flowParseTupleType = function () {\n  var node = this.startNode();\n  node.types = [];\n  this.expect(types.bracketL);\n  // We allow trailing commas\n  while (this.state.pos < this.input.length && !this.match(types.bracketR)) {\n    node.types.push(this.flowParseType());\n    if (this.match(types.bracketR)) break;\n    this.expect(types.comma);\n  }\n  this.expect(types.bracketR);\n  return this.finishNode(node, \"TupleTypeAnnotation\");\n};\n\npp$8.flowParseFunctionTypeParam = function () {\n  var name = null;\n  var optional = false;\n  var typeAnnotation = null;\n  var node = this.startNode();\n  var lh = this.lookahead();\n  if (lh.type === types.colon || lh.type === types.question) {\n    name = this.parseIdentifier();\n    if (this.eat(types.question)) {\n      optional = true;\n    }\n    typeAnnotation = this.flowParseTypeInitialiser();\n  } else {\n    typeAnnotation = this.flowParseType();\n  }\n  node.name = name;\n  node.optional = optional;\n  node.typeAnnotation = typeAnnotation;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.reinterpretTypeAsFunctionTypeParam = function (type) {\n  var node = this.startNodeAt(type.start, type.loc.start);\n  node.name = null;\n  node.optional = false;\n  node.typeAnnotation = type;\n  return this.finishNode(node, \"FunctionTypeParam\");\n};\n\npp$8.flowParseFunctionTypeParams = function () {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var ret = { params: params, rest: null };\n  while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n    ret.params.push(this.flowParseFunctionTypeParam());\n    if (!this.match(types.parenR)) {\n      this.expect(types.comma);\n    }\n  }\n  if (this.eat(types.ellipsis)) {\n    ret.rest = this.flowParseFunctionTypeParam();\n  }\n  return ret;\n};\n\npp$8.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {\n  switch (id.name) {\n    case \"any\":\n      return this.finishNode(node, \"AnyTypeAnnotation\");\n\n    case \"void\":\n      return this.finishNode(node, \"VoidTypeAnnotation\");\n\n    case \"bool\":\n    case \"boolean\":\n      return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n    case \"mixed\":\n      return this.finishNode(node, \"MixedTypeAnnotation\");\n\n    case \"empty\":\n      return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n    case \"number\":\n      return this.finishNode(node, \"NumberTypeAnnotation\");\n\n    case \"string\":\n      return this.finishNode(node, \"StringTypeAnnotation\");\n\n    default:\n      return this.flowParseGenericType(startPos, startLoc, id);\n  }\n};\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\npp$8.flowParsePrimaryType = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.startNode();\n  var tmp = void 0;\n  var type = void 0;\n  var isGroupedType = false;\n  var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n  switch (this.state.type) {\n    case types.name:\n      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n    case types.braceL:\n      return this.flowParseObjectType(false, false, true);\n\n    case types.braceBarL:\n      return this.flowParseObjectType(false, true, true);\n\n    case types.bracketL:\n      return this.flowParseTupleType();\n\n    case types.relational:\n      if (this.state.value === \"<\") {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(types.parenL);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        this.expect(types.arrow);\n\n        node.returnType = this.flowParseType();\n\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      break;\n\n    case types.parenL:\n      this.next();\n\n      // Check to see if this is actually a grouped type\n      if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        if (this.match(types.name)) {\n          var token = this.lookahead().type;\n          isGroupedType = token !== types.question && token !== types.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n          this.expect(types.parenR);\n          return type;\n        } else {\n          // Eat a comma if there is one\n          this.eat(types.comma);\n        }\n      }\n\n      if (type) {\n        tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n      } else {\n        tmp = this.flowParseFunctionTypeParams();\n      }\n\n      node.params = tmp.params;\n      node.rest = tmp.rest;\n\n      this.expect(types.parenR);\n\n      this.expect(types.arrow);\n\n      node.returnType = this.flowParseType();\n\n      node.typeParameters = null;\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n    case types.string:\n      return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n    case types._true:case types._false:\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n    case types.plusMin:\n      if (this.state.value === \"-\") {\n        this.next();\n        if (!this.match(types.num)) this.unexpected(null, \"Unexpected token, expected number\");\n\n        return this.parseLiteral(-this.state.value, \"NumericLiteralTypeAnnotation\", node.start, node.loc.start);\n      }\n\n      this.unexpected();\n    case types.num:\n      return this.parseLiteral(this.state.value, \"NumericLiteralTypeAnnotation\");\n\n    case types._null:\n      node.value = this.match(types._null);\n      this.next();\n      return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n    case types._this:\n      node.value = this.match(types._this);\n      this.next();\n      return this.finishNode(node, \"ThisTypeAnnotation\");\n\n    case types.star:\n      this.next();\n      return this.finishNode(node, \"ExistentialTypeParam\");\n\n    default:\n      if (this.state.type.keyword === \"typeof\") {\n        return this.flowParseTypeofType();\n      }\n  }\n\n  this.unexpected();\n};\n\npp$8.flowParsePostfixType = function () {\n  var startPos = this.state.start,\n      startLoc = this.state.startLoc;\n  var type = this.flowParsePrimaryType();\n  while (!this.canInsertSemicolon() && this.match(types.bracketL)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.elementType = type;\n    this.expect(types.bracketL);\n    this.expect(types.bracketR);\n    type = this.finishNode(node, \"ArrayTypeAnnotation\");\n  }\n  return type;\n};\n\npp$8.flowParsePrefixType = function () {\n  var node = this.startNode();\n  if (this.eat(types.question)) {\n    node.typeAnnotation = this.flowParsePrefixType();\n    return this.finishNode(node, \"NullableTypeAnnotation\");\n  } else {\n    return this.flowParsePostfixType();\n  }\n};\n\npp$8.flowParseAnonFunctionWithoutParens = function () {\n  var param = this.flowParsePrefixType();\n  if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n    var node = this.startNodeAt(param.start, param.loc.start);\n    node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n    node.rest = null;\n    node.returnType = this.flowParseType();\n    node.typeParameters = null;\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  return param;\n};\n\npp$8.flowParseIntersectionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseAND);\n  var type = this.flowParseAnonFunctionWithoutParens();\n  node.types = [type];\n  while (this.eat(types.bitwiseAND)) {\n    node.types.push(this.flowParseAnonFunctionWithoutParens());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n};\n\npp$8.flowParseUnionType = function () {\n  var node = this.startNode();\n  this.eat(types.bitwiseOR);\n  var type = this.flowParseIntersectionType();\n  node.types = [type];\n  while (this.eat(types.bitwiseOR)) {\n    node.types.push(this.flowParseIntersectionType());\n  }\n  return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n};\n\npp$8.flowParseType = function () {\n  var oldInType = this.state.inType;\n  this.state.inType = true;\n  var type = this.flowParseUnionType();\n  this.state.inType = oldInType;\n  return type;\n};\n\npp$8.flowParseTypeAnnotation = function () {\n  var node = this.startNode();\n  node.typeAnnotation = this.flowParseTypeInitialiser();\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAndPredicateAnnotation = function () {\n  var node = this.startNode();\n\n  var _flowParseTypeAndPred2 = this.flowParseTypeAndPredicateInitialiser();\n\n  node.typeAnnotation = _flowParseTypeAndPred2[0];\n  node.predicate = _flowParseTypeAndPred2[1];\n\n  return this.finishNode(node, \"TypeAnnotation\");\n};\n\npp$8.flowParseTypeAnnotatableIdentifier = function () {\n  var ident = this.flowParseRestrictedIdentifier();\n  if (this.match(types.colon)) {\n    ident.typeAnnotation = this.flowParseTypeAnnotation();\n    this.finishNode(ident, ident.type);\n  }\n  return ident;\n};\n\npp$8.typeCastToParameter = function (node) {\n  node.expression.typeAnnotation = node.typeAnnotation;\n\n  return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n};\n\npp$8.flowParseVariance = function () {\n  var variance = null;\n  if (this.match(types.plusMin)) {\n    if (this.state.value === \"+\") {\n      variance = \"plus\";\n    } else if (this.state.value === \"-\") {\n      variance = \"minus\";\n    }\n    this.next();\n  }\n  return variance;\n};\n\nvar flowPlugin = function (instance) {\n  // plain function return types: function name(): string {}\n  instance.extend(\"parseFunctionBody\", function (inner) {\n    return function (node, allowExpression) {\n      if (this.match(types.colon) && !allowExpression) {\n        // if allowExpression is true then we're parsing an arrow function and if\n        // there's a return type then it's been handled elsewhere\n        node.returnType = this.flowParseTypeAndPredicateAnnotation();\n      }\n\n      return inner.call(this, node, allowExpression);\n    };\n  });\n\n  // interfaces\n  instance.extend(\"parseStatement\", function (inner) {\n    return function (declaration, topLevel) {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        var node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else {\n        return inner.call(this, declaration, topLevel);\n      }\n    };\n  });\n\n  // declares, interfaces and type aliases\n  instance.extend(\"parseExpressionStatement\", function (inner) {\n    return function (node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return inner.call(this, node, expr);\n    };\n  });\n\n  // export type\n  instance.extend(\"shouldParseExportDeclaration\", function (inner) {\n    return function () {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isExportDefaultSpecifier\", function (inner) {\n    return function () {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\")) {\n        return false;\n      }\n\n      return inner.call(this);\n    };\n  });\n\n  instance.extend(\"parseConditional\", function (inner) {\n    return function (expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos && this.match(types.question)) {\n        var state = this.state.clone();\n        try {\n          return inner.call(this, expr, noIn, startPos, startLoc);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n            refNeedsArrowPos.start = err.pos || this.state.start;\n            return expr;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, expr, noIn, startPos, startLoc);\n    };\n  });\n\n  instance.extend(\"parseParenItem\", function (inner) {\n    return function (node, startPos, startLoc) {\n      node = inner.call(this, node, startPos, startLoc);\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        var typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExport\", function (inner) {\n    return function (node) {\n      node = inner.call(this, node);\n      if (node.type === \"ExportNamedDeclaration\") {\n        node.exportKind = node.exportKind || \"value\";\n      }\n      return node;\n    };\n  });\n\n  instance.extend(\"parseExportDeclaration\", function (inner) {\n    return function (node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        var declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        var _declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(_declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        var _declarationNode2 = this.startNode();\n        this.next();\n        return this.flowParseInterface(_declarationNode2);\n      } else {\n        return inner.call(this, node);\n      }\n    };\n  });\n\n  instance.extend(\"parseClassId\", function (inner) {\n    return function (node) {\n      inner.apply(this, arguments);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    };\n  });\n\n  // don't consider `void` to be a keyword as then it'll use the void token type\n  // and set startExpr\n  instance.extend(\"isKeyword\", function (inner) {\n    return function (name) {\n      if (this.state.inType && name === \"void\") {\n        return false;\n      } else {\n        return inner.call(this, name);\n      }\n    };\n  });\n\n  // ensure that inside flow types, we bypass the jsx parser plugin\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else {\n        return inner.call(this, code);\n      }\n    };\n  });\n\n  // don't lex any token as a jsx one inside a flow type\n  instance.extend(\"jsx_readToken\", function (inner) {\n    return function () {\n      if (!this.state.inType) return inner.call(this);\n    };\n  });\n\n  instance.extend(\"toAssignable\", function (inner) {\n    return function (node, isBinding, contextDescription) {\n      if (node.type === \"TypeCastExpression\") {\n        return inner.call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n      } else {\n        return inner.call(this, node, isBinding, contextDescription);\n      }\n    };\n  });\n\n  // turn type casts that we found in function parameter head into type annotated params\n  instance.extend(\"toAssignableList\", function (inner) {\n    return function (exprList, isBinding, contextDescription) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return inner.call(this, exprList, isBinding, contextDescription);\n    };\n  });\n\n  // this is a list of nodes, from something like a call expression, we need to filter the\n  // type casts that we've found that are illegal in this context\n  instance.extend(\"toReferencedList\", function () {\n    return function (exprList) {\n      for (var i = 0; i < exprList.length; i++) {\n        var expr = exprList[i];\n        if (expr && expr._exprListItem && expr.type === \"TypeCastExpression\") {\n          this.raise(expr.start, \"Unexpected type cast\");\n        }\n      }\n\n      return exprList;\n    };\n  });\n\n  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents\n  // the position where this function is called\n  instance.extend(\"parseExprListItem\", function (inner) {\n    return function () {\n      var container = this.startNode();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var node = inner.call.apply(inner, [this].concat(args));\n      if (this.match(types.colon)) {\n        container._exprListItem = true;\n        container.expression = node;\n        container.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(container, \"TypeCastExpression\");\n      } else {\n        return node;\n      }\n    };\n  });\n\n  instance.extend(\"checkLVal\", function (inner) {\n    return function (node) {\n      if (node.type !== \"TypeCastExpression\") {\n        return inner.apply(this, arguments);\n      }\n    };\n  });\n\n  // parse class property type annotations\n  instance.extend(\"parseClassProperty\", function (inner) {\n    return function (node) {\n      delete node.variancePos;\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return inner.call(this, node);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class method would appear\n  instance.extend(\"isClassMethod\", function (inner) {\n    return function () {\n      return this.isRelational(\"<\") || inner.call(this);\n    };\n  });\n\n  // determine whether or not we're currently in the position where a class property would appear\n  instance.extend(\"isClassProperty\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  instance.extend(\"isNonstaticConstructor\", function (inner) {\n    return function (method) {\n      return !this.match(types.colon) && inner.call(this, method);\n    };\n  });\n\n  // parse type parameters for class methods\n  instance.extend(\"parseClassMethod\", function (inner) {\n    return function (classBody, method) {\n      if (method.variance) {\n        this.unexpected(method.variancePos);\n      }\n      delete method.variance;\n      delete method.variancePos;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      inner.call.apply(inner, [this, classBody, method].concat(args));\n    };\n  });\n\n  // parse a the super class type parameters and implements\n  instance.extend(\"parseClassSuper\", function (inner) {\n    return function (node, isStatement) {\n      inner.call(this, node, isStatement);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        var implemented = node.implements = [];\n        do {\n          var _node = this.startNode();\n          _node.id = this.parseIdentifier();\n          if (this.isRelational(\"<\")) {\n            _node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            _node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(_node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    };\n  });\n\n  instance.extend(\"parsePropertyName\", function (inner) {\n    return function (node) {\n      var variancePos = this.state.start;\n      var variance = this.flowParseVariance();\n      var key = inner.call(this, node);\n      node.variance = variance;\n      node.variancePos = variancePos;\n      return key;\n    };\n  });\n\n  // parse type parameters for object method shorthand\n  instance.extend(\"parseObjPropValue\", function (inner) {\n    return function (prop) {\n      if (prop.variance) {\n        this.unexpected(prop.variancePos);\n      }\n      delete prop.variance;\n      delete prop.variancePos;\n\n      var typeParameters = void 0;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      inner.apply(this, arguments);\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    };\n  });\n\n  instance.extend(\"parseAssignableListItemTypes\", function () {\n    return function (param) {\n      if (this.eat(types.question)) {\n        param.optional = true;\n      }\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.finishNode(param, param.type);\n      return param;\n    };\n  });\n\n  instance.extend(\"parseMaybeDefault\", function (inner) {\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var node = inner.apply(this, args);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\");\n      }\n\n      return node;\n    };\n  });\n\n  // parse typeof and type imports\n  instance.extend(\"parseImportSpecifiers\", function (inner) {\n    return function (node) {\n      node.importKind = \"value\";\n\n      var kind = null;\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        var lh = this.lookahead();\n        if (lh.type === types.name && lh.value !== \"from\" || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      inner.call(this, node);\n    };\n  });\n\n  // parse import-type/typeof shorthand\n  instance.extend(\"parseImportSpecifier\", function () {\n    return function (node) {\n      var specifier = this.startNode();\n      var firstIdentLoc = this.state.start;\n      var firstIdent = this.parseIdentifier(true);\n\n      var specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      var isBinding = false;\n      if (this.isContextual(\"as\")) {\n        var as_ident = this.parseIdentifier(true);\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      if ((node.importKind === \"type\" || node.importKind === \"typeof\") && (specifier.importKind === \"type\" || specifier.importKind === \"typeof\")) {\n        this.raise(firstIdentLoc, \"`The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements`\");\n      }\n\n      if (isBinding) this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n\n      this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    };\n  });\n\n  // parse function type parameters - function foo<T>() {}\n  instance.extend(\"parseFunctionParams\", function (inner) {\n    return function (node) {\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      inner.call(this, node);\n    };\n  });\n\n  // parse flow type annotations on variable declarator heads - let foo: string = bar\n  instance.extend(\"parseVarHead\", function (inner) {\n    return function (decl) {\n      inner.call(this, decl);\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.finishNode(decl.id, decl.id.type);\n      }\n    };\n  });\n\n  // parse the return type of an async arrow function - let foo = (async (): number => {});\n  instance.extend(\"parseAsyncArrowFromCallExpression\", function (inner) {\n    return function (node, call) {\n      if (this.match(types.colon)) {\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return inner.call(this, node, call);\n    };\n  });\n\n  // todo description\n  instance.extend(\"shouldParseAsyncArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n\n  // We need to support type parameter declarations for arrow functions. This\n  // is tricky. There are three situations we need to handle\n  //\n  // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n  //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n  //    error.\n  // 2. This is an arrow function. We'll parse the type parameter declaration,\n  //    parse the rest, make sure the rest is an arrow function, and go from\n  //    there\n  // 3. This is neither. Just call the inner function\n  instance.extend(\"parseMaybeAssign\", function (inner) {\n    return function () {\n      var jsxError = null;\n\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (types.jsxTagStart && this.match(types.jsxTagStart)) {\n        var state = this.state.clone();\n        try {\n          return inner.apply(this, args);\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n\n            // Remove `tc.j_expr` and `tc.j_oTag` from context added\n            // by parsing `jsxTagStart` to stop the JSX plugin from\n            // messing with the tokens\n            this.state.context.length -= 2;\n\n            jsxError = err;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      if (jsxError != null || this.isRelational(\"<\")) {\n        var arrowExpression = void 0;\n        var typeParameters = void 0;\n        try {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          arrowExpression = inner.apply(this, args);\n          arrowExpression.typeParameters = typeParameters;\n          arrowExpression.start = typeParameters.start;\n          arrowExpression.loc.start = typeParameters.loc.start;\n        } catch (err) {\n          throw jsxError || err;\n        }\n\n        if (arrowExpression.type === \"ArrowFunctionExpression\") {\n          return arrowExpression;\n        } else if (jsxError != null) {\n          throw jsxError;\n        } else {\n          this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n        }\n      }\n\n      return inner.apply(this, args);\n    };\n  });\n\n  // handle return types for arrow functions\n  instance.extend(\"parseArrow\", function (inner) {\n    return function (node) {\n      if (this.match(types.colon)) {\n        var state = this.state.clone();\n        try {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          var returnType = this.flowParseTypeAndPredicateAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          // assign after it is clear it is an arrow\n          node.returnType = returnType;\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            this.state = state;\n          } else {\n            // istanbul ignore next: no such error is expected\n            throw err;\n          }\n        }\n      }\n\n      return inner.call(this, node);\n    };\n  });\n\n  instance.extend(\"shouldParseArrow\", function (inner) {\n    return function () {\n      return this.match(types.colon) || inner.call(this);\n    };\n  });\n};\n\n// Adapted from String.fromcodepoint to export the function without modifying String\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n\n// The MIT License (MIT)\n// Copyright (c) Mathias Bynens\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar fromCodePoint = String.fromCodePoint;\n\nif (!fromCodePoint) {\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  fromCodePoint = function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate = void 0;\n    var lowSurrogate = void 0;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return \"\";\n    }\n    var result = \"\";\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      floor(codePoint) != codePoint // not an integer\n      ) {\n          throw RangeError(\"Invalid code point: \" + codePoint);\n        }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = codePoint % 0x400 + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  };\n}\n\nvar fromCodePoint$1 = fromCodePoint;\n\nvar XHTMLEntities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  \"int\": \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\n\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(types$1.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nvar pp$9 = Parser.prototype;\n\n// Reads inline JSX contents token.\n\npp$9.jsxReadToken = function () {\n  var out = \"\";\n  var chunkStart = this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated JSX contents\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n\n    switch (ch) {\n      case 60: // \"<\"\n      case 123:\n        // \"{\"\n        if (this.state.pos === this.state.start) {\n          if (ch === 60 && this.state.exprAllowed) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        return this.finishToken(types.jsxText, out);\n\n      case 38:\n        // \"&\"\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n        break;\n\n      default:\n        if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(true);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n    }\n  }\n};\n\npp$9.jsxReadNewLine = function (normalizeCRLF) {\n  var ch = this.input.charCodeAt(this.state.pos);\n  var out = void 0;\n  ++this.state.pos;\n  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n    ++this.state.pos;\n    out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n  } else {\n    out = String.fromCharCode(ch);\n  }\n  ++this.state.curLine;\n  this.state.lineStart = this.state.pos;\n\n  return out;\n};\n\npp$9.jsxReadString = function (quote) {\n  var out = \"\";\n  var chunkStart = ++this.state.pos;\n  for (;;) {\n    if (this.state.pos >= this.input.length) {\n      this.raise(this.state.start, \"Unterminated string constant\");\n    }\n\n    var ch = this.input.charCodeAt(this.state.pos);\n    if (ch === quote) break;\n    if (ch === 38) {\n      // \"&\"\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadEntity();\n      chunkStart = this.state.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.state.pos);\n      out += this.jsxReadNewLine(false);\n      chunkStart = this.state.pos;\n    } else {\n      ++this.state.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.state.pos++);\n  return this.finishToken(types.string, out);\n};\n\npp$9.jsxReadEntity = function () {\n  var str = \"\";\n  var count = 0;\n  var entity = void 0;\n  var ch = this.input[this.state.pos];\n\n  var startPos = ++this.state.pos;\n  while (this.state.pos < this.input.length && count++ < 10) {\n    ch = this.input[this.state.pos++];\n    if (ch === \";\") {\n      if (str[0] === \"#\") {\n        if (str[1] === \"x\") {\n          str = str.substr(2);\n          if (HEX_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 16));\n        } else {\n          str = str.substr(1);\n          if (DECIMAL_NUMBER.test(str)) entity = fromCodePoint$1(parseInt(str, 10));\n        }\n      } else {\n        entity = XHTMLEntities[str];\n      }\n      break;\n    }\n    str += ch;\n  }\n  if (!entity) {\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  return entity;\n};\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can\"t contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\npp$9.jsxReadWord = function () {\n  var ch = void 0;\n  var start = this.state.pos;\n  do {\n    ch = this.input.charCodeAt(++this.state.pos);\n  } while (isIdentifierChar(ch) || ch === 45); // \"-\"\n  return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n};\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n}\n\n// Parse next token as JSX identifier\n\npp$9.jsxParseIdentifier = function () {\n  var node = this.startNode();\n  if (this.match(types.jsxName)) {\n    node.name = this.state.value;\n  } else if (this.state.type.keyword) {\n    node.name = this.state.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"JSXIdentifier\");\n};\n\n// Parse namespaced identifier.\n\npp$9.jsxParseNamespacedName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var name = this.jsxParseIdentifier();\n  if (!this.eat(types.colon)) return name;\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.namespace = name;\n  node.name = this.jsxParseIdentifier();\n  return this.finishNode(node, \"JSXNamespacedName\");\n};\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\n\npp$9.jsxParseElementName = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  var node = this.jsxParseNamespacedName();\n  while (this.eat(types.dot)) {\n    var newNode = this.startNodeAt(startPos, startLoc);\n    newNode.object = node;\n    newNode.property = this.jsxParseIdentifier();\n    node = this.finishNode(newNode, \"JSXMemberExpression\");\n  }\n  return node;\n};\n\n// Parses any type of JSX attribute value.\n\npp$9.jsxParseAttributeValue = function () {\n  var node = void 0;\n  switch (this.state.type) {\n    case types.braceL:\n      node = this.jsxParseExpressionContainer();\n      if (node.expression.type === \"JSXEmptyExpression\") {\n        this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n      } else {\n        return node;\n      }\n\n    case types.jsxTagStart:\n    case types.string:\n      node = this.parseExprAtom();\n      node.extra = null;\n      return node;\n\n    default:\n      this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n  }\n};\n\n// JSXEmptyExpression is unique type since it doesn't actually parse anything,\n// and so it should start at the end of last read token (left brace) and finish\n// at the beginning of the next one (right brace).\n\npp$9.jsxParseEmptyExpression = function () {\n  var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n  return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n};\n\n// Parse JSX spread child\n\npp$9.jsxParseSpreadChild = function () {\n  var node = this.startNode();\n  this.expect(types.braceL);\n  this.expect(types.ellipsis);\n  node.expression = this.parseExpression();\n  this.expect(types.braceR);\n\n  return this.finishNode(node, \"JSXSpreadChild\");\n};\n\n// Parses JSX expression enclosed into curly brackets.\n\n\npp$9.jsxParseExpressionContainer = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.match(types.braceR)) {\n    node.expression = this.jsxParseEmptyExpression();\n  } else {\n    node.expression = this.parseExpression();\n  }\n  this.expect(types.braceR);\n  return this.finishNode(node, \"JSXExpressionContainer\");\n};\n\n// Parses following JSX attribute name-value pair.\n\npp$9.jsxParseAttribute = function () {\n  var node = this.startNode();\n  if (this.eat(types.braceL)) {\n    this.expect(types.ellipsis);\n    node.argument = this.parseMaybeAssign();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadAttribute\");\n  }\n  node.name = this.jsxParseNamespacedName();\n  node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n  return this.finishNode(node, \"JSXAttribute\");\n};\n\n// Parses JSX opening tag starting after \"<\".\n\npp$9.jsxParseOpeningElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.attributes = [];\n  node.name = this.jsxParseElementName();\n  while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n    node.attributes.push(this.jsxParseAttribute());\n  }\n  node.selfClosing = this.eat(types.slash);\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXOpeningElement\");\n};\n\n// Parses JSX closing tag starting after \"</\".\n\npp$9.jsxParseClosingElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.name = this.jsxParseElementName();\n  this.expect(types.jsxTagEnd);\n  return this.finishNode(node, \"JSXClosingElement\");\n};\n\n// Parses entire JSX element, including it\"s opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n\npp$9.jsxParseElementAt = function (startPos, startLoc) {\n  var node = this.startNodeAt(startPos, startLoc);\n  var children = [];\n  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n  var closingElement = null;\n\n  if (!openingElement.selfClosing) {\n    contents: for (;;) {\n      switch (this.state.type) {\n        case types.jsxTagStart:\n          startPos = this.state.start;startLoc = this.state.startLoc;\n          this.next();\n          if (this.eat(types.slash)) {\n            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsxParseElementAt(startPos, startLoc));\n          break;\n\n        case types.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case types.braceL:\n          if (this.lookahead().type === types.ellipsis) {\n            children.push(this.jsxParseSpreadChild());\n          } else {\n            children.push(this.jsxParseExpressionContainer());\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          this.unexpected();\n      }\n    }\n\n    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n      this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n    }\n  }\n\n  node.openingElement = openingElement;\n  node.closingElement = closingElement;\n  node.children = children;\n  if (this.match(types.relational) && this.state.value === \"<\") {\n    this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n  }\n  return this.finishNode(node, \"JSXElement\");\n};\n\n// Parses entire JSX element from current position.\n\npp$9.jsxParseElement = function () {\n  var startPos = this.state.start;\n  var startLoc = this.state.startLoc;\n  this.next();\n  return this.jsxParseElementAt(startPos, startLoc);\n};\n\nvar jsxPlugin = function (instance) {\n  instance.extend(\"parseExprAtom\", function (inner) {\n    return function (refShortHandDefaultPos) {\n      if (this.match(types.jsxText)) {\n        var node = this.parseLiteral(this.state.value, \"JSXText\");\n        // https://github.com/babel/babel/issues/2078\n        node.extra = null;\n        return node;\n      } else if (this.match(types.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else {\n        return inner.call(this, refShortHandDefaultPos);\n      }\n    };\n  });\n\n  instance.extend(\"readToken\", function (inner) {\n    return function (code) {\n      if (this.state.inPropertyName) return inner.call(this, code);\n\n      var context = this.curContext();\n\n      if (context === types$1.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === types$1.j_oTag || context === types$1.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === 62) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (code === 60 && this.state.exprAllowed) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagStart);\n      }\n\n      return inner.call(this, code);\n    };\n  });\n\n  instance.extend(\"updateContext\", function (inner) {\n    return function (prevType) {\n      if (this.match(types.braceL)) {\n        var curContext = this.curContext();\n        if (curContext === types$1.j_oTag) {\n          this.state.context.push(types$1.braceExpression);\n        } else if (curContext === types$1.j_expr) {\n          this.state.context.push(types$1.templateQuasi);\n        } else {\n          inner.call(this, prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(types$1.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return inner.call(this, prevType);\n      }\n    };\n  });\n};\n\nplugins.estree = estreePlugin;\nplugins.flow = flowPlugin;\nplugins.jsx = jsxPlugin;\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse();\n}\n\nfunction parseExpression(input, options) {\n  var parser = new Parser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babylon6/lib/index.js\n");

/***/ })

}]);