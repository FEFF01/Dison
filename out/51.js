(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[51],{

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __webpack_require__(/*! os */ \"./node_modules/os-browserify/browser.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction noopReporter(err) {\n    throw new Error(`${err.type}: Line: ${err.loc.start.line}: ${err.message}`);\n}\nexports.noopReporter = noopReporter;\nfunction padLeft(num, str) {\n    while (str.length < num) {\n        str = ' ' + str;\n    }\n    return str;\n}\nfunction indicatorForLocaction(loc) {\n    const indicator = padLeft(loc.start.column, '^');\n    return indicator;\n}\nfunction padStart(length, str) {\n    let paddedStr = str;\n    while (length--) {\n        paddedStr = ' ' + paddedStr;\n    }\n    return paddedStr;\n}\nfunction errorType(type) {\n    switch (type) {\n        case types_1.ErrorType.ParseError:\n            return 'Parse Error:';\n        case types_1.ErrorType.ScanError:\n            return 'Scan Error:';\n    }\n}\nfunction createDebugger(source) {\n    const sourceLines = source.split(os.EOL);\n    const formattedErrors = [];\n    const rawErrors = [];\n    function getSourceLine(lineNumber) {\n        return sourceLines[lineNumber - 1];\n    }\n    function formatError(err) {\n        return {\n            sourceLine: getSourceLine(err.loc.start.line),\n            locIndicator: indicatorForLocaction(err.loc),\n            line: err.loc.start.line,\n            column: err.loc.start.column,\n            message: err.message,\n            type: err.type,\n        };\n    }\n    return {\n        hasError() {\n            return formattedErrors.length > 0;\n        },\n        getErrors() {\n            return rawErrors;\n        },\n        getFormattedErrors() {\n            return formattedErrors;\n        },\n        report(err) {\n            const formattedError = formatError(err);\n            formattedErrors.push(formattedError);\n            rawErrors.push(err);\n        },\n        print() {\n            console.log(`Parse Failure: ${formattedErrors.length} errors found:`);\n            console.log();\n            formattedErrors.forEach((err) => {\n                const prefix = `${err.line} | `;\n                console.log();\n                console.log(`${errorType(err.type)}\\n`);\n                console.log(`Message: ${err.message}`);\n                console.log();\n                console.log(`${prefix}${err.sourceLine}`);\n                console.log(padStart(prefix.length, err.locIndicator));\n                console.log();\n            });\n        },\n    };\n}\nexports.createDebugger = createDebugger;\n//# sourceMappingURL=debugger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL2RlYnVnZ2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjcmVkaXRrYXJtYS90aHJpZnQtcGFyc2VyL2Rpc3QvbWFpbi9kZWJ1Z2dlci5qcz82ZjY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5mdW5jdGlvbiBub29wUmVwb3J0ZXIoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2Vyci50eXBlfTogTGluZTogJHtlcnIubG9jLnN0YXJ0LmxpbmV9OiAke2Vyci5tZXNzYWdlfWApO1xufVxuZXhwb3J0cy5ub29wUmVwb3J0ZXIgPSBub29wUmVwb3J0ZXI7XG5mdW5jdGlvbiBwYWRMZWZ0KG51bSwgc3RyKSB7XG4gICAgd2hpbGUgKHN0ci5sZW5ndGggPCBudW0pIHtcbiAgICAgICAgc3RyID0gJyAnICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gaW5kaWNhdG9yRm9yTG9jYWN0aW9uKGxvYykge1xuICAgIGNvbnN0IGluZGljYXRvciA9IHBhZExlZnQobG9jLnN0YXJ0LmNvbHVtbiwgJ14nKTtcbiAgICByZXR1cm4gaW5kaWNhdG9yO1xufVxuZnVuY3Rpb24gcGFkU3RhcnQobGVuZ3RoLCBzdHIpIHtcbiAgICBsZXQgcGFkZGVkU3RyID0gc3RyO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBwYWRkZWRTdHIgPSAnICcgKyBwYWRkZWRTdHI7XG4gICAgfVxuICAgIHJldHVybiBwYWRkZWRTdHI7XG59XG5mdW5jdGlvbiBlcnJvclR5cGUodHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuRXJyb3JUeXBlLlBhcnNlRXJyb3I6XG4gICAgICAgICAgICByZXR1cm4gJ1BhcnNlIEVycm9yOic7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5FcnJvclR5cGUuU2NhbkVycm9yOlxuICAgICAgICAgICAgcmV0dXJuICdTY2FuIEVycm9yOic7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRGVidWdnZXIoc291cmNlKSB7XG4gICAgY29uc3Qgc291cmNlTGluZXMgPSBzb3VyY2Uuc3BsaXQob3MuRU9MKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRFcnJvcnMgPSBbXTtcbiAgICBjb25zdCByYXdFcnJvcnMgPSBbXTtcbiAgICBmdW5jdGlvbiBnZXRTb3VyY2VMaW5lKGxpbmVOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUxpbmVzW2xpbmVOdW1iZXIgLSAxXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2VMaW5lOiBnZXRTb3VyY2VMaW5lKGVyci5sb2Muc3RhcnQubGluZSksXG4gICAgICAgICAgICBsb2NJbmRpY2F0b3I6IGluZGljYXRvckZvckxvY2FjdGlvbihlcnIubG9jKSxcbiAgICAgICAgICAgIGxpbmU6IGVyci5sb2Muc3RhcnQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZXJyLmxvYy5zdGFydC5jb2x1bW4sXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgIHR5cGU6IGVyci50eXBlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNFcnJvcigpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRFcnJvcnMubGVuZ3RoID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0Vycm9ycztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Rm9ybWF0dGVkRXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZEVycm9ycztcbiAgICAgICAgfSxcbiAgICAgICAgcmVwb3J0KGVycikge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkRXJyb3IgPSBmb3JtYXRFcnJvcihlcnIpO1xuICAgICAgICAgICAgZm9ybWF0dGVkRXJyb3JzLnB1c2goZm9ybWF0dGVkRXJyb3IpO1xuICAgICAgICAgICAgcmF3RXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJpbnQoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgUGFyc2UgRmFpbHVyZTogJHtmb3JtYXR0ZWRFcnJvcnMubGVuZ3RofSBlcnJvcnMgZm91bmQ6YCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygpO1xuICAgICAgICAgICAgZm9ybWF0dGVkRXJyb3JzLmZvckVhY2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IGAke2Vyci5saW5lfSB8IGA7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtlcnJvclR5cGUoZXJyLnR5cGUpfVxcbmApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBNZXNzYWdlOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7cHJlZml4fSR7ZXJyLnNvdXJjZUxpbmV9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGFkU3RhcnQocHJlZml4Lmxlbmd0aCwgZXJyLmxvY0luZGljYXRvcikpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVEZWJ1Z2dlciA9IGNyZWF0ZURlYnVnZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWdnZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/factory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/factory.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction createParseError(message, loc) {\n    return {\n        type: types_1.ErrorType.ParseError,\n        message,\n        loc,\n    };\n}\nexports.createParseError = createParseError;\nfunction createScanError(message, loc) {\n    return {\n        type: types_1.ErrorType.ScanError,\n        message,\n        loc,\n    };\n}\nexports.createScanError = createScanError;\nfunction createTextLocation(start, end) {\n    return { start, end };\n}\nexports.createTextLocation = createTextLocation;\nfunction createTextPosition(line, column, index) {\n    return { line, column, index };\n}\nexports.createTextPosition = createTextPosition;\nfunction createToken(type, text, loc) {\n    return { type, text, loc };\n}\nexports.createToken = createToken;\nfunction createIdentifier(value, loc, annotations) {\n    return { type: types_1.SyntaxType.Identifier, value, loc, annotations };\n}\nexports.createIdentifier = createIdentifier;\nfunction creataePropertyAssignment(name, initializer, loc) {\n    return {\n        type: types_1.SyntaxType.PropertyAssignment,\n        name,\n        initializer,\n        loc,\n    };\n}\nexports.creataePropertyAssignment = creataePropertyAssignment;\nfunction createFieldDefinition(name, fieldID, requiredness, fieldType, loc, defaultValue = null, annotations, comments = []) {\n    return {\n        type: types_1.SyntaxType.FieldDefinition,\n        name,\n        fieldID,\n        requiredness,\n        fieldType,\n        defaultValue,\n        annotations,\n        comments,\n        loc,\n    };\n}\nexports.createFieldDefinition = createFieldDefinition;\nfunction createFieldID(value, loc) {\n    return {\n        type: types_1.SyntaxType.FieldID,\n        value,\n        loc,\n    };\n}\nexports.createFieldID = createFieldID;\nfunction createStructDefinition(name, fields, loc, comments = []) {\n    return {\n        type: types_1.SyntaxType.StructDefinition,\n        name,\n        fields,\n        comments,\n        loc,\n    };\n}\nexports.createStructDefinition = createStructDefinition;\nfunction createStringLiteral(value, loc) {\n    return {\n        type: types_1.SyntaxType.StringLiteral,\n        value,\n        loc,\n    };\n}\nexports.createStringLiteral = createStringLiteral;\nfunction createIntegerLiteral(value, loc) {\n    return { type: types_1.SyntaxType.IntegerLiteral, value, loc };\n}\nexports.createIntegerLiteral = createIntegerLiteral;\nfunction createHexLiteral(value, loc) {\n    return { type: types_1.SyntaxType.HexLiteral, value, loc };\n}\nexports.createHexLiteral = createHexLiteral;\nfunction createFloatLiteral(value, loc) {\n    return { type: types_1.SyntaxType.FloatLiteral, value, loc };\n}\nexports.createFloatLiteral = createFloatLiteral;\nfunction createExponentialLiteral(value, loc) {\n    return { type: types_1.SyntaxType.ExponentialLiteral, value, loc };\n}\nexports.createExponentialLiteral = createExponentialLiteral;\nfunction createIntConstant(value, loc) {\n    return { type: types_1.SyntaxType.IntConstant, value, loc };\n}\nexports.createIntConstant = createIntConstant;\nfunction createDoubleConstant(value, loc) {\n    return { type: types_1.SyntaxType.DoubleConstant, value, loc };\n}\nexports.createDoubleConstant = createDoubleConstant;\nfunction createBooleanLiteral(value, loc) {\n    return { type: types_1.SyntaxType.BooleanLiteral, value, loc };\n}\nexports.createBooleanLiteral = createBooleanLiteral;\nfunction createKeywordFieldType(type, loc, annotations) {\n    return { type, loc, annotations };\n}\nexports.createKeywordFieldType = createKeywordFieldType;\nfunction createMapFieldType(keyType, valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.MapType,\n        keyType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createMapFieldType = createMapFieldType;\nfunction createSetFieldType(valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.SetType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createSetFieldType = createSetFieldType;\nfunction createListFieldType(valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.ListType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createListFieldType = createListFieldType;\nfunction createConstMap(properties, loc) {\n    return {\n        type: types_1.SyntaxType.ConstMap,\n        properties,\n        loc,\n    };\n}\nexports.createConstMap = createConstMap;\nfunction createConstList(elements, loc) {\n    return {\n        type: types_1.SyntaxType.ConstList,\n        elements,\n        loc,\n    };\n}\nexports.createConstList = createConstList;\n//# sourceMappingURL=factory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL2ZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL2ZhY3RvcnkuanM/MGJmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVBhcnNlRXJyb3IobWVzc2FnZSwgbG9jKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5FcnJvclR5cGUuUGFyc2VFcnJvcixcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgbG9jLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZVBhcnNlRXJyb3IgPSBjcmVhdGVQYXJzZUVycm9yO1xuZnVuY3Rpb24gY3JlYXRlU2NhbkVycm9yKG1lc3NhZ2UsIGxvYykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuRXJyb3JUeXBlLlNjYW5FcnJvcixcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgbG9jLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZVNjYW5FcnJvciA9IGNyZWF0ZVNjYW5FcnJvcjtcbmZ1bmN0aW9uIGNyZWF0ZVRleHRMb2NhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9O1xufVxuZXhwb3J0cy5jcmVhdGVUZXh0TG9jYXRpb24gPSBjcmVhdGVUZXh0TG9jYXRpb247XG5mdW5jdGlvbiBjcmVhdGVUZXh0UG9zaXRpb24obGluZSwgY29sdW1uLCBpbmRleCkge1xuICAgIHJldHVybiB7IGxpbmUsIGNvbHVtbiwgaW5kZXggfTtcbn1cbmV4cG9ydHMuY3JlYXRlVGV4dFBvc2l0aW9uID0gY3JlYXRlVGV4dFBvc2l0aW9uO1xuZnVuY3Rpb24gY3JlYXRlVG9rZW4odHlwZSwgdGV4dCwgbG9jKSB7XG4gICAgcmV0dXJuIHsgdHlwZSwgdGV4dCwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZVRva2VuID0gY3JlYXRlVG9rZW47XG5mdW5jdGlvbiBjcmVhdGVJZGVudGlmaWVyKHZhbHVlLCBsb2MsIGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLklkZW50aWZpZXIsIHZhbHVlLCBsb2MsIGFubm90YXRpb25zIH07XG59XG5leHBvcnRzLmNyZWF0ZUlkZW50aWZpZXIgPSBjcmVhdGVJZGVudGlmaWVyO1xuZnVuY3Rpb24gY3JlYXRhZVByb3BlcnR5QXNzaWdubWVudChuYW1lLCBpbml0aWFsaXplciwgbG9jKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLlByb3BlcnR5QXNzaWdubWVudCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaW5pdGlhbGl6ZXIsXG4gICAgICAgIGxvYyxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGFlUHJvcGVydHlBc3NpZ25tZW50ID0gY3JlYXRhZVByb3BlcnR5QXNzaWdubWVudDtcbmZ1bmN0aW9uIGNyZWF0ZUZpZWxkRGVmaW5pdGlvbihuYW1lLCBmaWVsZElELCByZXF1aXJlZG5lc3MsIGZpZWxkVHlwZSwgbG9jLCBkZWZhdWx0VmFsdWUgPSBudWxsLCBhbm5vdGF0aW9ucywgY29tbWVudHMgPSBbXSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5GaWVsZERlZmluaXRpb24sXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGZpZWxkSUQsXG4gICAgICAgIHJlcXVpcmVkbmVzcyxcbiAgICAgICAgZmllbGRUeXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGFubm90YXRpb25zLFxuICAgICAgICBjb21tZW50cyxcbiAgICAgICAgbG9jLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZUZpZWxkRGVmaW5pdGlvbiA9IGNyZWF0ZUZpZWxkRGVmaW5pdGlvbjtcbmZ1bmN0aW9uIGNyZWF0ZUZpZWxkSUQodmFsdWUsIGxvYykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5GaWVsZElELFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgbG9jLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZUZpZWxkSUQgPSBjcmVhdGVGaWVsZElEO1xuZnVuY3Rpb24gY3JlYXRlU3RydWN0RGVmaW5pdGlvbihuYW1lLCBmaWVsZHMsIGxvYywgY29tbWVudHMgPSBbXSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5TdHJ1Y3REZWZpbml0aW9uLFxuICAgICAgICBuYW1lLFxuICAgICAgICBmaWVsZHMsXG4gICAgICAgIGNvbW1lbnRzLFxuICAgICAgICBsb2MsXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlU3RydWN0RGVmaW5pdGlvbiA9IGNyZWF0ZVN0cnVjdERlZmluaXRpb247XG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdMaXRlcmFsKHZhbHVlLCBsb2MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLlN5bnRheFR5cGUuU3RyaW5nTGl0ZXJhbCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGxvYyxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVTdHJpbmdMaXRlcmFsID0gY3JlYXRlU3RyaW5nTGl0ZXJhbDtcbmZ1bmN0aW9uIGNyZWF0ZUludGVnZXJMaXRlcmFsKHZhbHVlLCBsb2MpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlc18xLlN5bnRheFR5cGUuSW50ZWdlckxpdGVyYWwsIHZhbHVlLCBsb2MgfTtcbn1cbmV4cG9ydHMuY3JlYXRlSW50ZWdlckxpdGVyYWwgPSBjcmVhdGVJbnRlZ2VyTGl0ZXJhbDtcbmZ1bmN0aW9uIGNyZWF0ZUhleExpdGVyYWwodmFsdWUsIGxvYykge1xuICAgIHJldHVybiB7IHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5IZXhMaXRlcmFsLCB2YWx1ZSwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZUhleExpdGVyYWwgPSBjcmVhdGVIZXhMaXRlcmFsO1xuZnVuY3Rpb24gY3JlYXRlRmxvYXRMaXRlcmFsKHZhbHVlLCBsb2MpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlc18xLlN5bnRheFR5cGUuRmxvYXRMaXRlcmFsLCB2YWx1ZSwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZUZsb2F0TGl0ZXJhbCA9IGNyZWF0ZUZsb2F0TGl0ZXJhbDtcbmZ1bmN0aW9uIGNyZWF0ZUV4cG9uZW50aWFsTGl0ZXJhbCh2YWx1ZSwgbG9jKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLkV4cG9uZW50aWFsTGl0ZXJhbCwgdmFsdWUsIGxvYyB9O1xufVxuZXhwb3J0cy5jcmVhdGVFeHBvbmVudGlhbExpdGVyYWwgPSBjcmVhdGVFeHBvbmVudGlhbExpdGVyYWw7XG5mdW5jdGlvbiBjcmVhdGVJbnRDb25zdGFudCh2YWx1ZSwgbG9jKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLkludENvbnN0YW50LCB2YWx1ZSwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZUludENvbnN0YW50ID0gY3JlYXRlSW50Q29uc3RhbnQ7XG5mdW5jdGlvbiBjcmVhdGVEb3VibGVDb25zdGFudCh2YWx1ZSwgbG9jKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLkRvdWJsZUNvbnN0YW50LCB2YWx1ZSwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZURvdWJsZUNvbnN0YW50ID0gY3JlYXRlRG91YmxlQ29uc3RhbnQ7XG5mdW5jdGlvbiBjcmVhdGVCb29sZWFuTGl0ZXJhbCh2YWx1ZSwgbG9jKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLkJvb2xlYW5MaXRlcmFsLCB2YWx1ZSwgbG9jIH07XG59XG5leHBvcnRzLmNyZWF0ZUJvb2xlYW5MaXRlcmFsID0gY3JlYXRlQm9vbGVhbkxpdGVyYWw7XG5mdW5jdGlvbiBjcmVhdGVLZXl3b3JkRmllbGRUeXBlKHR5cGUsIGxvYywgYW5ub3RhdGlvbnMpIHtcbiAgICByZXR1cm4geyB0eXBlLCBsb2MsIGFubm90YXRpb25zIH07XG59XG5leHBvcnRzLmNyZWF0ZUtleXdvcmRGaWVsZFR5cGUgPSBjcmVhdGVLZXl3b3JkRmllbGRUeXBlO1xuZnVuY3Rpb24gY3JlYXRlTWFwRmllbGRUeXBlKGtleVR5cGUsIHZhbHVlVHlwZSwgbG9jLCBhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5NYXBUeXBlLFxuICAgICAgICBrZXlUeXBlLFxuICAgICAgICB2YWx1ZVR5cGUsXG4gICAgICAgIGxvYyxcbiAgICAgICAgYW5ub3RhdGlvbnMsXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlTWFwRmllbGRUeXBlID0gY3JlYXRlTWFwRmllbGRUeXBlO1xuZnVuY3Rpb24gY3JlYXRlU2V0RmllbGRUeXBlKHZhbHVlVHlwZSwgbG9jLCBhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5TZXRUeXBlLFxuICAgICAgICB2YWx1ZVR5cGUsXG4gICAgICAgIGxvYyxcbiAgICAgICAgYW5ub3RhdGlvbnMsXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlU2V0RmllbGRUeXBlID0gY3JlYXRlU2V0RmllbGRUeXBlO1xuZnVuY3Rpb24gY3JlYXRlTGlzdEZpZWxkVHlwZSh2YWx1ZVR5cGUsIGxvYywgYW5ub3RhdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLlN5bnRheFR5cGUuTGlzdFR5cGUsXG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAgbG9jLFxuICAgICAgICBhbm5vdGF0aW9ucyxcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVMaXN0RmllbGRUeXBlID0gY3JlYXRlTGlzdEZpZWxkVHlwZTtcbmZ1bmN0aW9uIGNyZWF0ZUNvbnN0TWFwKHByb3BlcnRpZXMsIGxvYykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5Db25zdE1hcCxcbiAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgbG9jLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZUNvbnN0TWFwID0gY3JlYXRlQ29uc3RNYXA7XG5mdW5jdGlvbiBjcmVhdGVDb25zdExpc3QoZWxlbWVudHMsIGxvYykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuU3ludGF4VHlwZS5Db25zdExpc3QsXG4gICAgICAgIGVsZW1lbnRzLFxuICAgICAgICBsb2MsXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlQ29uc3RMaXN0ID0gY3JlYXRlQ29uc3RMaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFjdG9yeS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\nconst path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\nconst debugger_1 = __webpack_require__(/*! ./debugger */ \"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\");\nconst organizer_1 = __webpack_require__(/*! ./organizer */ \"./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"./node_modules/@creditkarma/thrift-parser/dist/main/parser.js\");\nconst scanner_1 = __webpack_require__(/*! ./scanner */ \"./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\n__export(__webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\"));\n__export(__webpack_require__(/*! ./factory */ \"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\"));\nvar scanner_2 = __webpack_require__(/*! ./scanner */ \"./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js\");\nexports.createScanner = scanner_2.createScanner;\nvar parser_2 = __webpack_require__(/*! ./parser */ \"./node_modules/@creditkarma/thrift-parser/dist/main/parser.js\");\nexports.createParser = parser_2.createParser;\nexports.defaultOptions = {\n    fastFail: false,\n    rootDir: '.',\n    outDir: '.',\n    files: [],\n    organize: true,\n};\nfunction parseFiles(options = {}) {\n    const mergedOptions = Object.assign({}, exports.defaultOptions, options);\n    return mergedOptions.files.map((file) => {\n        const filePath = path.resolve(process.cwd(), mergedOptions.rootDir, file);\n        const content = fs.readFileSync(filePath, 'utf-8');\n        return parse(content, mergedOptions);\n    });\n}\nexports.parseFiles = parseFiles;\nfunction parse(source, options = {}) {\n    const mergedOptions = Object.assign({}, exports.defaultOptions, options);\n    const debug = debugger_1.createDebugger(source);\n    const scanner = scanner_1.createScanner(source, handleError);\n    const tokens = scanner.scan();\n    const parser = parser_1.createParser(tokens, handleError);\n    const intermediate = parser.parse();\n    const thrift = mergedOptions.organize\n        ? organizer_1.organize(intermediate)\n        : intermediate;\n    /**\n     * This is a safe handler for errors that allows the parser and scanner to recover to a\n     * reasonable state after an error and continue with the parse. If an error occurs we will\n     * not return any output, but using this allows us to catch more errors and report them to\n     * the user at once instead of the work flow of find error -> fix error, find error -> fix error.\n     *\n     * @param err\n     */\n    function handleError(err) {\n        debug.report(err);\n        if (mergedOptions.fastFail) {\n            debug.print();\n            throw new Error(err.message);\n        }\n        else {\n            switch (err.type) {\n                case types_1.ErrorType.ParseError:\n                    parser.synchronize();\n                    break;\n                case types_1.ErrorType.ScanError:\n                    scanner.syncronize();\n                    break;\n            }\n        }\n    }\n    if (debug.hasError()) {\n        debug.print();\n        return {\n            type: types_1.SyntaxType.ThriftErrors,\n            errors: debug.getErrors(),\n        };\n    }\n    else {\n        return thrift;\n    }\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjcmVkaXRrYXJtYS90aHJpZnQtcGFyc2VyL2Rpc3QvbWFpbi9pbmRleC5qcz85MTdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZGVidWdnZXJfMSA9IHJlcXVpcmUoXCIuL2RlYnVnZ2VyXCIpO1xuY29uc3Qgb3JnYW5pemVyXzEgPSByZXF1aXJlKFwiLi9vcmdhbml6ZXJcIik7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbmNvbnN0IHNjYW5uZXJfMSA9IHJlcXVpcmUoXCIuL3NjYW5uZXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi90eXBlc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9mYWN0b3J5XCIpKTtcbnZhciBzY2FubmVyXzIgPSByZXF1aXJlKFwiLi9zY2FubmVyXCIpO1xuZXhwb3J0cy5jcmVhdGVTY2FubmVyID0gc2Nhbm5lcl8yLmNyZWF0ZVNjYW5uZXI7XG52YXIgcGFyc2VyXzIgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5leHBvcnRzLmNyZWF0ZVBhcnNlciA9IHBhcnNlcl8yLmNyZWF0ZVBhcnNlcjtcbmV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgZmFzdEZhaWw6IGZhbHNlLFxuICAgIHJvb3REaXI6ICcuJyxcbiAgICBvdXREaXI6ICcuJyxcbiAgICBmaWxlczogW10sXG4gICAgb3JnYW5pemU6IHRydWUsXG59O1xuZnVuY3Rpb24gcGFyc2VGaWxlcyhvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBtZXJnZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG1lcmdlZE9wdGlvbnMuZmlsZXMubWFwKChmaWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIG1lcmdlZE9wdGlvbnMucm9vdERpciwgZmlsZSk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGYtOCcpO1xuICAgICAgICByZXR1cm4gcGFyc2UoY29udGVudCwgbWVyZ2VkT3B0aW9ucyk7XG4gICAgfSk7XG59XG5leHBvcnRzLnBhcnNlRmlsZXMgPSBwYXJzZUZpbGVzO1xuZnVuY3Rpb24gcGFyc2Uoc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBtZXJnZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgY29uc3QgZGVidWcgPSBkZWJ1Z2dlcl8xLmNyZWF0ZURlYnVnZ2VyKHNvdXJjZSk7XG4gICAgY29uc3Qgc2Nhbm5lciA9IHNjYW5uZXJfMS5jcmVhdGVTY2FubmVyKHNvdXJjZSwgaGFuZGxlRXJyb3IpO1xuICAgIGNvbnN0IHRva2VucyA9IHNjYW5uZXIuc2NhbigpO1xuICAgIGNvbnN0IHBhcnNlciA9IHBhcnNlcl8xLmNyZWF0ZVBhcnNlcih0b2tlbnMsIGhhbmRsZUVycm9yKTtcbiAgICBjb25zdCBpbnRlcm1lZGlhdGUgPSBwYXJzZXIucGFyc2UoKTtcbiAgICBjb25zdCB0aHJpZnQgPSBtZXJnZWRPcHRpb25zLm9yZ2FuaXplXG4gICAgICAgID8gb3JnYW5pemVyXzEub3JnYW5pemUoaW50ZXJtZWRpYXRlKVxuICAgICAgICA6IGludGVybWVkaWF0ZTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgc2FmZSBoYW5kbGVyIGZvciBlcnJvcnMgdGhhdCBhbGxvd3MgdGhlIHBhcnNlciBhbmQgc2Nhbm5lciB0byByZWNvdmVyIHRvIGFcbiAgICAgKiByZWFzb25hYmxlIHN0YXRlIGFmdGVyIGFuIGVycm9yIGFuZCBjb250aW51ZSB3aXRoIHRoZSBwYXJzZS4gSWYgYW4gZXJyb3Igb2NjdXJzIHdlIHdpbGxcbiAgICAgKiBub3QgcmV0dXJuIGFueSBvdXRwdXQsIGJ1dCB1c2luZyB0aGlzIGFsbG93cyB1cyB0byBjYXRjaCBtb3JlIGVycm9ycyBhbmQgcmVwb3J0IHRoZW0gdG9cbiAgICAgKiB0aGUgdXNlciBhdCBvbmNlIGluc3RlYWQgb2YgdGhlIHdvcmsgZmxvdyBvZiBmaW5kIGVycm9yIC0+IGZpeCBlcnJvciwgZmluZCBlcnJvciAtPiBmaXggZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgICAgIGRlYnVnLnJlcG9ydChlcnIpO1xuICAgICAgICBpZiAobWVyZ2VkT3B0aW9ucy5mYXN0RmFpbCkge1xuICAgICAgICAgICAgZGVidWcucHJpbnQoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGVyci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB0eXBlc18xLkVycm9yVHlwZS5QYXJzZUVycm9yOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZXIuc3luY2hyb25pemUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB0eXBlc18xLkVycm9yVHlwZS5TY2FuRXJyb3I6XG4gICAgICAgICAgICAgICAgICAgIHNjYW5uZXIuc3luY3Jvbml6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVidWcuaGFzRXJyb3IoKSkge1xuICAgICAgICBkZWJ1Zy5wcmludCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLlRocmlmdEVycm9ycyxcbiAgICAgICAgICAgIGVycm9yczogZGVidWcuZ2V0RXJyb3JzKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhyaWZ0O1xuICAgIH1cbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/index.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nexports.KEYWORDS = {\n    namespace: types_1.SyntaxType.NamespaceKeyword,\n    include: types_1.SyntaxType.IncludeKeyword,\n    cpp_include: types_1.SyntaxType.CppIncludeKeyword,\n    const: types_1.SyntaxType.ConstKeyword,\n    struct: types_1.SyntaxType.StructKeyword,\n    service: types_1.SyntaxType.ServiceKeyword,\n    extends: types_1.SyntaxType.ExtendsKeyword,\n    throws: types_1.SyntaxType.ThrowsKeyword,\n    typedef: types_1.SyntaxType.TypedefKeyword,\n    union: types_1.SyntaxType.UnionKeyword,\n    enum: types_1.SyntaxType.EnumKeyword,\n    senum: types_1.SyntaxType.SenumKeyword,\n    list: types_1.SyntaxType.ListKeyword,\n    set: types_1.SyntaxType.SetKeyword,\n    map: types_1.SyntaxType.MapKeyword,\n    double: types_1.SyntaxType.DoubleKeyword,\n    i8: types_1.SyntaxType.I8Keyword,\n    i16: types_1.SyntaxType.I16Keyword,\n    i32: types_1.SyntaxType.I32Keyword,\n    i64: types_1.SyntaxType.I64Keyword,\n    exception: types_1.SyntaxType.ExceptionKeyword,\n    binary: types_1.SyntaxType.BinaryKeyword,\n    bool: types_1.SyntaxType.BoolKeyword,\n    byte: types_1.SyntaxType.ByteKeyword,\n    required: types_1.SyntaxType.RequiredKeyword,\n    optional: types_1.SyntaxType.OptionalKeyword,\n    string: types_1.SyntaxType.StringKeyword,\n    true: types_1.SyntaxType.TrueKeyword,\n    false: types_1.SyntaxType.FalseKeyword,\n    void: types_1.SyntaxType.VoidKeyword,\n    oneway: types_1.SyntaxType.OnewayKeyword,\n};\n//# sourceMappingURL=keywords.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL2tleXdvcmRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjcmVkaXRrYXJtYS90aHJpZnQtcGFyc2VyL2Rpc3QvbWFpbi9rZXl3b3Jkcy5qcz83YmY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZXhwb3J0cy5LRVlXT1JEUyA9IHtcbiAgICBuYW1lc3BhY2U6IHR5cGVzXzEuU3ludGF4VHlwZS5OYW1lc3BhY2VLZXl3b3JkLFxuICAgIGluY2x1ZGU6IHR5cGVzXzEuU3ludGF4VHlwZS5JbmNsdWRlS2V5d29yZCxcbiAgICBjcHBfaW5jbHVkZTogdHlwZXNfMS5TeW50YXhUeXBlLkNwcEluY2x1ZGVLZXl3b3JkLFxuICAgIGNvbnN0OiB0eXBlc18xLlN5bnRheFR5cGUuQ29uc3RLZXl3b3JkLFxuICAgIHN0cnVjdDogdHlwZXNfMS5TeW50YXhUeXBlLlN0cnVjdEtleXdvcmQsXG4gICAgc2VydmljZTogdHlwZXNfMS5TeW50YXhUeXBlLlNlcnZpY2VLZXl3b3JkLFxuICAgIGV4dGVuZHM6IHR5cGVzXzEuU3ludGF4VHlwZS5FeHRlbmRzS2V5d29yZCxcbiAgICB0aHJvd3M6IHR5cGVzXzEuU3ludGF4VHlwZS5UaHJvd3NLZXl3b3JkLFxuICAgIHR5cGVkZWY6IHR5cGVzXzEuU3ludGF4VHlwZS5UeXBlZGVmS2V5d29yZCxcbiAgICB1bmlvbjogdHlwZXNfMS5TeW50YXhUeXBlLlVuaW9uS2V5d29yZCxcbiAgICBlbnVtOiB0eXBlc18xLlN5bnRheFR5cGUuRW51bUtleXdvcmQsXG4gICAgc2VudW06IHR5cGVzXzEuU3ludGF4VHlwZS5TZW51bUtleXdvcmQsXG4gICAgbGlzdDogdHlwZXNfMS5TeW50YXhUeXBlLkxpc3RLZXl3b3JkLFxuICAgIHNldDogdHlwZXNfMS5TeW50YXhUeXBlLlNldEtleXdvcmQsXG4gICAgbWFwOiB0eXBlc18xLlN5bnRheFR5cGUuTWFwS2V5d29yZCxcbiAgICBkb3VibGU6IHR5cGVzXzEuU3ludGF4VHlwZS5Eb3VibGVLZXl3b3JkLFxuICAgIGk4OiB0eXBlc18xLlN5bnRheFR5cGUuSThLZXl3b3JkLFxuICAgIGkxNjogdHlwZXNfMS5TeW50YXhUeXBlLkkxNktleXdvcmQsXG4gICAgaTMyOiB0eXBlc18xLlN5bnRheFR5cGUuSTMyS2V5d29yZCxcbiAgICBpNjQ6IHR5cGVzXzEuU3ludGF4VHlwZS5JNjRLZXl3b3JkLFxuICAgIGV4Y2VwdGlvbjogdHlwZXNfMS5TeW50YXhUeXBlLkV4Y2VwdGlvbktleXdvcmQsXG4gICAgYmluYXJ5OiB0eXBlc18xLlN5bnRheFR5cGUuQmluYXJ5S2V5d29yZCxcbiAgICBib29sOiB0eXBlc18xLlN5bnRheFR5cGUuQm9vbEtleXdvcmQsXG4gICAgYnl0ZTogdHlwZXNfMS5TeW50YXhUeXBlLkJ5dGVLZXl3b3JkLFxuICAgIHJlcXVpcmVkOiB0eXBlc18xLlN5bnRheFR5cGUuUmVxdWlyZWRLZXl3b3JkLFxuICAgIG9wdGlvbmFsOiB0eXBlc18xLlN5bnRheFR5cGUuT3B0aW9uYWxLZXl3b3JkLFxuICAgIHN0cmluZzogdHlwZXNfMS5TeW50YXhUeXBlLlN0cmluZ0tleXdvcmQsXG4gICAgdHJ1ZTogdHlwZXNfMS5TeW50YXhUeXBlLlRydWVLZXl3b3JkLFxuICAgIGZhbHNlOiB0eXBlc18xLlN5bnRheFR5cGUuRmFsc2VLZXl3b3JkLFxuICAgIHZvaWQ6IHR5cGVzXzEuU3ludGF4VHlwZS5Wb2lkS2V5d29yZCxcbiAgICBvbmV3YXk6IHR5cGVzXzEuU3ludGF4VHlwZS5PbmV3YXlLZXl3b3JkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXdvcmRzLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction organize(raw) {\n    const namespaces = [];\n    const includes = [];\n    const constants = [];\n    const enums = [];\n    const typedefs = [];\n    const structs = [];\n    const unions = [];\n    const exceptions = [];\n    const services = [];\n    for (const next of raw.body) {\n        switch (next.type) {\n            case types_1.SyntaxType.NamespaceDefinition:\n                namespaces.push(next);\n                break;\n            case types_1.SyntaxType.IncludeDefinition:\n                includes.push(next);\n                break;\n            case types_1.SyntaxType.CppIncludeDefinition:\n                // We're not generating C++\n                break;\n            case types_1.SyntaxType.ConstDefinition:\n                constants.push(next);\n                break;\n            case types_1.SyntaxType.EnumDefinition:\n                enums.push(next);\n                break;\n            case types_1.SyntaxType.StructDefinition:\n                structs.push(next);\n                break;\n            case types_1.SyntaxType.UnionDefinition:\n                unions.push(next);\n                break;\n            case types_1.SyntaxType.ExceptionDefinition:\n                exceptions.push(next);\n                break;\n            case types_1.SyntaxType.TypedefDefinition:\n                typedefs.push(next);\n                break;\n            case types_1.SyntaxType.ServiceDefinition:\n                services.push(next);\n                break;\n            default:\n                const msg = next;\n                throw new Error(`Unexpected statement type found: ${msg}`);\n        }\n    }\n    return {\n        type: types_1.SyntaxType.ThriftDocument,\n        body: [\n            ...namespaces,\n            ...includes,\n            ...enums,\n            ...typedefs,\n            ...constants,\n            ...structs,\n            ...unions,\n            ...exceptions,\n            ...services,\n        ],\n        tokens: raw.tokens,\n    };\n}\nexports.organize = organize;\n//# sourceMappingURL=organizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNyZWRpdGthcm1hL3RocmlmdC1wYXJzZXIvZGlzdC9tYWluL29yZ2FuaXplci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3JlZGl0a2FybWEvdGhyaWZ0LXBhcnNlci9kaXN0L21haW4vb3JnYW5pemVyLmpzPzJiMGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5mdW5jdGlvbiBvcmdhbml6ZShyYXcpIHtcbiAgICBjb25zdCBuYW1lc3BhY2VzID0gW107XG4gICAgY29uc3QgaW5jbHVkZXMgPSBbXTtcbiAgICBjb25zdCBjb25zdGFudHMgPSBbXTtcbiAgICBjb25zdCBlbnVtcyA9IFtdO1xuICAgIGNvbnN0IHR5cGVkZWZzID0gW107XG4gICAgY29uc3Qgc3RydWN0cyA9IFtdO1xuICAgIGNvbnN0IHVuaW9ucyA9IFtdO1xuICAgIGNvbnN0IGV4Y2VwdGlvbnMgPSBbXTtcbiAgICBjb25zdCBzZXJ2aWNlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbmV4dCBvZiByYXcuYm9keSkge1xuICAgICAgICBzd2l0Y2ggKG5leHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlN5bnRheFR5cGUuTmFtZXNwYWNlRGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2VzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5JbmNsdWRlRGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgICBpbmNsdWRlcy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlN5bnRheFR5cGUuQ3BwSW5jbHVkZURlZmluaXRpb246XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgbm90IGdlbmVyYXRpbmcgQysrXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5Db25zdERlZmluaXRpb246XG4gICAgICAgICAgICAgICAgY29uc3RhbnRzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5FbnVtRGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgICBlbnVtcy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlN5bnRheFR5cGUuU3RydWN0RGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgICBzdHJ1Y3RzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5VbmlvbkRlZmluaXRpb246XG4gICAgICAgICAgICAgICAgdW5pb25zLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5FeGNlcHRpb25EZWZpbml0aW9uOlxuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbnMucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5TeW50YXhUeXBlLlR5cGVkZWZEZWZpbml0aW9uOlxuICAgICAgICAgICAgICAgIHR5cGVkZWZzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuU3ludGF4VHlwZS5TZXJ2aWNlRGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBuZXh0O1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBzdGF0ZW1lbnQgdHlwZSBmb3VuZDogJHttc2d9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5TeW50YXhUeXBlLlRocmlmdERvY3VtZW50LFxuICAgICAgICBib2R5OiBbXG4gICAgICAgICAgICAuLi5uYW1lc3BhY2VzLFxuICAgICAgICAgICAgLi4uaW5jbHVkZXMsXG4gICAgICAgICAgICAuLi5lbnVtcyxcbiAgICAgICAgICAgIC4uLnR5cGVkZWZzLFxuICAgICAgICAgICAgLi4uY29uc3RhbnRzLFxuICAgICAgICAgICAgLi4uc3RydWN0cyxcbiAgICAgICAgICAgIC4uLnVuaW9ucyxcbiAgICAgICAgICAgIC4uLmV4Y2VwdGlvbnMsXG4gICAgICAgICAgICAuLi5zZXJ2aWNlcyxcbiAgICAgICAgXSxcbiAgICAgICAgdG9rZW5zOiByYXcudG9rZW5zLFxuICAgIH07XG59XG5leHBvcnRzLm9yZ2FuaXplID0gb3JnYW5pemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcmdhbml6ZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/parser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/parser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nconst factory_1 = __webpack_require__(/*! ./factory */ \"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\");\nconst debugger_1 = __webpack_require__(/*! ./debugger */ \"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\");\nfunction isStatementBeginning(token) {\n    switch (token.type) {\n        case types_1.SyntaxType.NamespaceKeyword:\n        case types_1.SyntaxType.IncludeKeyword:\n        case types_1.SyntaxType.ConstKeyword:\n        case types_1.SyntaxType.StructKeyword:\n        case types_1.SyntaxType.UnionKeyword:\n        case types_1.SyntaxType.ExceptionKeyword:\n        case types_1.SyntaxType.ServiceKeyword:\n        case types_1.SyntaxType.TypedefKeyword:\n        case types_1.SyntaxType.EnumKeyword:\n            return true;\n        default:\n            return false;\n    }\n}\nclass ParseError extends Error {\n    constructor(msg, loc) {\n        super(msg);\n        this.message = msg;\n        this.loc = loc;\n    }\n}\nfunction createParser(tokens, report = debugger_1.noopReporter) {\n    let comments = [];\n    let currentIndex = 0;\n    // PUBLIC\n    function parse() {\n        const thrift = {\n            type: types_1.SyntaxType.ThriftDocument,\n            body: [],\n        };\n        while (!isAtEnd()) {\n            try {\n                const statement = parseStatement();\n                if (statement !== null) {\n                    thrift.body.push(statement);\n                }\n            }\n            catch (e) {\n                report(factory_1.createParseError(e.message, e.loc));\n            }\n        }\n        return thrift;\n    }\n    // Finds the beginning of the next statement so we can continue parse after error.\n    function synchronize() {\n        while (!isAtEnd() && !isStatementBeginning(currentToken())) {\n            advance();\n        }\n    }\n    function parseStatement() {\n        const next = currentToken();\n        // All Thrift statements must start with one of these types\n        switch (next.type) {\n            case types_1.SyntaxType.NamespaceKeyword:\n                return parseNamespace();\n            case types_1.SyntaxType.IncludeKeyword:\n                return parseInclude();\n            case types_1.SyntaxType.ConstKeyword:\n                return parseConst();\n            case types_1.SyntaxType.StructKeyword:\n                return parseStruct();\n            case types_1.SyntaxType.UnionKeyword:\n                return parseUnion();\n            case types_1.SyntaxType.ExceptionKeyword:\n                return parseException();\n            case types_1.SyntaxType.ServiceKeyword:\n                return parseService();\n            case types_1.SyntaxType.TypedefKeyword:\n                return parseTypedef();\n            case types_1.SyntaxType.EnumKeyword:\n                return parseEnum();\n            case types_1.SyntaxType.CommentBlock:\n            case types_1.SyntaxType.CommentLine:\n                consumeComments();\n                return null;\n            default:\n                throw reportError(`Invalid start to Thrift statement ${next.text}`);\n        }\n    }\n    // IncludeDefinition → 'include' StringLiteral\n    function parseInclude() {\n        const _keywordToken = consume(types_1.SyntaxType.IncludeKeyword);\n        const keywordToken = requireValue(_keywordToken, `'indcluded' keyword expected`);\n        const _pathToken = consume(types_1.SyntaxType.StringLiteral);\n        const pathToken = requireValue(_pathToken, `Include statement must include a path as string literal`);\n        return {\n            type: types_1.SyntaxType.IncludeDefinition,\n            path: factory_1.createStringLiteral(pathToken.text, pathToken.loc),\n            comments: getComments(),\n            loc: factory_1.createTextLocation(keywordToken.loc.start, pathToken.loc.end),\n        };\n    }\n    // ServiceDefinition → 'service' Identifier ( 'extends' Identifier )? '{' Function* '} Annotations?'\n    function parseService() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.ServiceKeyword);\n        const keywordToken = requireValue(_keywordToken, `Unable to find service keyword for service`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find identifier for service`);\n        const extendsId = parseExtends();\n        const _openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        const openBrace = requireValue(_openBrace, `Expected opening curly brace`);\n        const functions = parseFunctions();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Expected closing curly brace`);\n        const annotations = parseAnnotations();\n        const location = factory_1.createTextLocation(keywordToken.loc.start, closeBrace.loc.end);\n        return {\n            type: types_1.SyntaxType.ServiceDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            extends: extendsId,\n            functions,\n            annotations,\n            comments: leadingComments,\n            loc: location,\n        };\n    }\n    function parseExtends() {\n        if (checkText('extends')) {\n            const _keywordToken = consume(types_1.SyntaxType.ExtendsKeyword);\n            const keywordToken = requireValue(_keywordToken, `'extends keyword expected`);\n            const _nameToken = consume(types_1.SyntaxType.Identifier);\n            const nameToken = requireValue(_nameToken, `Identifier expected after 'extends' keyword`);\n            return factory_1.createIdentifier(nameToken.text, factory_1.createTextLocation(keywordToken.loc.start, nameToken.loc.end));\n        }\n        else {\n            return null;\n        }\n    }\n    function parseFunctions() {\n        const functions = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                functions.push(parseFunction());\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return functions;\n    }\n    // Function → 'oneway'? FunctionType Identifier '(' Field* ')' Throws? Annotations? ListSeparator?\n    function parseFunction() {\n        const leadingComments = getComments();\n        const onewayToken = consume(types_1.SyntaxType.OnewayKeyword);\n        const returnType = parseFunctionType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find function identifier`);\n        const params = parseParameterFields();\n        const throws = parseThrows();\n        const annotations = parseAnnotations();\n        const listSeparator = readListSeparator();\n        const endLoc = listSeparator !== null\n            ? listSeparator.loc\n            : throws !== null\n                ? throws.loc\n                : params.loc;\n        return {\n            type: types_1.SyntaxType.FunctionDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            returnType,\n            fields: params.fields,\n            throws: throws !== null ? throws.fields : [],\n            annotations,\n            comments: leadingComments,\n            oneway: onewayToken !== null,\n            modifiers: onewayToken !== null ? [onewayToken] : [],\n            loc: {\n                start: returnType.loc.start,\n                end: endLoc.end,\n            },\n        };\n    }\n    function parseParameterFields() {\n        const fields = [];\n        const _openParen = consume(types_1.SyntaxType.LeftParenToken);\n        const openParen = requireValue(_openParen, `Opening paren expected to start list of fields`);\n        while (!check(types_1.SyntaxType.RightParenToken)) {\n            readListSeparator();\n            fields.push(parseField());\n            if (isStatementBeginning(currentToken())) {\n                throw reportError(`Closing paren ')' expected, but new statement found`);\n            }\n            else if (check(types_1.SyntaxType.EOF)) {\n                throw reportError(`Closing paren ')' expected but reached end of file`);\n            }\n        }\n        const _closeParen = consume(types_1.SyntaxType.RightParenToken);\n        const closeParen = requireValue(_closeParen, `Closing paren expected to end list of fields`);\n        return {\n            type: types_1.SyntaxType.ParametersDefinition,\n            fields,\n            loc: {\n                start: openParen.loc.start,\n                end: closeParen.loc.end,\n            },\n        };\n    }\n    // Throws → 'throws' '(' Field* ')'\n    function parseThrows() {\n        if (check(types_1.SyntaxType.ThrowsKeyword)) {\n            const _keywordToken = consume(types_1.SyntaxType.ThrowsKeyword);\n            const keywordToken = requireValue(_keywordToken, `'throws' keyword expected`);\n            const params = parseParameterFields();\n            return {\n                type: types_1.SyntaxType.ThrowsDefinition,\n                fields: params.fields,\n                loc: {\n                    start: keywordToken.loc.start,\n                    end: params.loc.end,\n                },\n            };\n        }\n        return null;\n    }\n    // Namespace → 'namespace' ( NamespaceScope Identifier )\n    function parseNamespace() {\n        const _keywordToken = consume(types_1.SyntaxType.NamespaceKeyword);\n        const keywordToken = requireValue(_keywordToken, `'namespace' keyword expected`);\n        const _scopeToken = consume(types_1.SyntaxType.Identifier);\n        const scopeToken = requireValue(_scopeToken, `Unable to find scope identifier for namespace`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find name identifier for namespace`);\n        return {\n            type: types_1.SyntaxType.NamespaceDefinition,\n            scope: factory_1.createIdentifier(scopeToken.text, scopeToken.loc),\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            comments: getComments(),\n            loc: factory_1.createTextLocation(keywordToken.loc.start, nameToken.loc.end),\n        };\n    }\n    // ConstDefinition → 'const' FieldType Identifier '=' ConstValue Annotations? ListSeparator?\n    function parseConst() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.ConstKeyword);\n        const keywordToken = requireValue(_keywordToken, `'const' keyword expected`);\n        const fieldType = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Const definition must have a name`);\n        const _initializer = parseValueAssignment();\n        const initializer = requireValue(_initializer, `Const must be initialized to a value`);\n        const annotations = parseAnnotations();\n        readListSeparator();\n        return {\n            type: types_1.SyntaxType.ConstDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fieldType,\n            initializer,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: initializer.loc.end,\n            },\n        };\n    }\n    function parseValueAssignment() {\n        if (check(types_1.SyntaxType.EqualToken)) {\n            advance();\n            return parseValue();\n        }\n        return null;\n    }\n    // Annotations → '(' Annotation* ')'\n    function parseAnnotations() {\n        if (check(types_1.SyntaxType.LeftParenToken)) {\n            const annotations = [];\n            const startToken = advance();\n            while (!check(types_1.SyntaxType.RightParenToken)) {\n                annotations.push(parseAnnotation());\n            }\n            const endToken = advance();\n            return {\n                annotations,\n                type: types_1.SyntaxType.Annotations,\n                loc: factory_1.createTextLocation(startToken.loc.start, endToken.loc.end),\n            };\n        }\n        return undefined;\n    }\n    // Annotation → Identifier ('=' StringLiteral)? ListSeparator?\n    function parseAnnotation() {\n        const nameToken = requireValue(consume(types_1.SyntaxType.Identifier), `Annotation must have a name`);\n        let valueToken;\n        if (check(types_1.SyntaxType.EqualToken)) {\n            advance();\n            valueToken = requireValue(consume(types_1.SyntaxType.StringLiteral), `Annotation must have a value`);\n        }\n        readListSeparator();\n        return {\n            type: types_1.SyntaxType.Annotation,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            value: valueToken\n                ? factory_1.createStringLiteral(valueToken.text, valueToken.loc)\n                : undefined,\n            loc: factory_1.createTextLocation(nameToken.loc.start, (valueToken || nameToken).loc.end),\n        };\n    }\n    // TypedefDefinition → 'typedef' FieldType Identifier\n    function parseTypedef() {\n        const _keywordToken = consume(types_1.SyntaxType.TypedefKeyword);\n        const keywordToken = requireValue(_keywordToken, `'typedef' keyword expected`);\n        const type = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Typedef is expected to have name and none found`);\n        const leadingComments = getComments();\n        const annotations = parseAnnotations();\n        return {\n            type: types_1.SyntaxType.TypedefDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            definitionType: type,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: nameToken.loc.end,\n            },\n        };\n    }\n    // EnumDefinition → 'enum' Identifier '{' EnumMember* '} Annotations?'\n    function parseEnum() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.EnumKeyword);\n        const keywordToken = requireValue(_keywordToken, `'enum' keyword expected`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Expected identifier for enum definition`);\n        const openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        requireValue(openBrace, `Expected opening brace`);\n        const members = parseEnumMembers();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Expected closing brace`);\n        const annotations = parseAnnotations();\n        const loc = {\n            start: keywordToken.loc.start,\n            end: closeBrace.loc.end,\n        };\n        return {\n            type: types_1.SyntaxType.EnumDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            members,\n            annotations,\n            comments: leadingComments,\n            loc,\n        };\n    }\n    function parseEnumMembers() {\n        const members = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                members.push(parseEnumMember());\n                // consume list separator if there is one\n                readListSeparator();\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return members;\n    }\n    // EnumMember → (Identifier ('=' IntConstant)? Annotations? ListSeparator?)*\n    function parseEnumMember() {\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `EnumMember must have identifier`);\n        let loc = null;\n        let initializer = null;\n        if (consume(types_1.SyntaxType.EqualToken) !== null) {\n            const _numToken = consume(types_1.SyntaxType.IntegerLiteral, types_1.SyntaxType.HexLiteral);\n            const numToken = requireValue(_numToken, `Equals token \"=\" must be followed by an Integer`);\n            initializer = parseIntValue(numToken);\n            loc = factory_1.createTextLocation(nameToken.loc.start, initializer.loc.end);\n        }\n        else {\n            loc = factory_1.createTextLocation(nameToken.loc.start, nameToken.loc.end);\n        }\n        const annotations = parseAnnotations();\n        return {\n            type: types_1.SyntaxType.EnumMember,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            initializer,\n            annotations,\n            comments: getComments(),\n            loc,\n        };\n    }\n    // StructLike → ('struct' | 'union' | 'exception') Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseStructLikeInterface() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.StructKeyword, types_1.SyntaxType.UnionKeyword, types_1.SyntaxType.ExceptionKeyword);\n        const keywordToken = requireValue(_keywordToken, `'struct | union | exception' expected`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Struct-like must have an identifier`);\n        const openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        requireValue(openBrace, `Struct-like body must begin with opening curly brace '{'`);\n        const fields = parseFields();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Struct-like body must end with a closing curly brace '}'`);\n        const annotations = parseAnnotations();\n        return {\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fields,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: closeBrace.loc.end,\n            },\n        };\n    }\n    // StructDefinition → 'struct' Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseStruct() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.StructDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields,\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    // UnioinDefinition → 'union' Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseUnion() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.UnionDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields.map((next) => {\n                // As per the Thrift spec, all union fields are optional\n                next.requiredness = 'optional';\n                return next;\n            }),\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    // ExceptionDefinition → 'exception' Identifier '{' Field* '} Annotations?'\n    function parseException() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.ExceptionDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields,\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    function parseFields() {\n        const fields = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                fields.push(parseField());\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return fields;\n    }\n    // Field → FieldID? FieldReq? FieldType Identifier ('= ConstValue)? XsdFieldOptions Annotations? ListSeparator?\n    function parseField() {\n        const startLoc = currentToken().loc;\n        const fieldID = parseFieldId();\n        const fieldRequired = parserequireValuedness();\n        const fieldType = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find identifier for field`);\n        const defaultValue = parseValueAssignment();\n        const annotations = parseAnnotations();\n        const listSeparator = readListSeparator();\n        const endLoc = listSeparator !== null\n            ? listSeparator.loc\n            : defaultValue !== null\n                ? defaultValue.loc\n                : nameToken.loc;\n        const location = factory_1.createTextLocation(startLoc.start, endLoc.end);\n        return {\n            type: types_1.SyntaxType.FieldDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fieldID,\n            fieldType,\n            requiredness: fieldRequired,\n            defaultValue,\n            comments: getComments(),\n            annotations,\n            loc: location,\n        };\n    }\n    // ListSeparator → ',' | ';'\n    function readListSeparator() {\n        if (check(types_1.SyntaxType.CommaToken, types_1.SyntaxType.SemicolonToken)) {\n            return advance();\n        }\n        return null;\n    }\n    // FieldRequired → 'required' | 'optional'\n    function parserequireValuedness() {\n        const current = currentToken();\n        if (current.text === 'required' || current.text === 'optional') {\n            advance();\n            return current.text;\n        }\n        return null;\n    }\n    // FieldID → IntConstant ':'\n    function parseFieldId() {\n        if (currentToken().type === types_1.SyntaxType.IntegerLiteral &&\n            peek().type === types_1.SyntaxType.ColonToken) {\n            const fieldIDToken = consume(types_1.SyntaxType.IntegerLiteral);\n            const colonToken = consume(types_1.SyntaxType.ColonToken);\n            // return value of number token\n            return factory_1.createFieldID(parseInt(fieldIDToken.text, 10), factory_1.createTextLocation(fieldIDToken.loc.start, colonToken.loc.end));\n        }\n        else {\n            return null;\n        }\n    }\n    // ConstValue → Literal | ConstMap | ConstList\n    function parseValue() {\n        const next = advance();\n        switch (next.type) {\n            case types_1.SyntaxType.Identifier:\n                return factory_1.createIdentifier(next.text, next.loc);\n            case types_1.SyntaxType.StringLiteral:\n                return factory_1.createStringLiteral(next.text, next.loc);\n            case types_1.SyntaxType.IntegerLiteral:\n            case types_1.SyntaxType.HexLiteral:\n                return parseIntValue(next);\n            case types_1.SyntaxType.FloatLiteral:\n            case types_1.SyntaxType.ExponentialLiteral:\n                return parseDoubleValue(next);\n            case types_1.SyntaxType.TrueKeyword:\n                return factory_1.createBooleanLiteral(true, next.loc);\n            case types_1.SyntaxType.FalseKeyword:\n                return factory_1.createBooleanLiteral(false, next.loc);\n            case types_1.SyntaxType.LeftBraceToken:\n                return parseMapValue();\n            case types_1.SyntaxType.LeftBracketToken:\n                return parseListValue();\n            default:\n                return null;\n        }\n    }\n    function parseIntValue(token) {\n        switch (token.type) {\n            case types_1.SyntaxType.IntegerLiteral:\n                return factory_1.createIntConstant(factory_1.createIntegerLiteral(token.text, token.loc), token.loc);\n            case types_1.SyntaxType.HexLiteral:\n                return factory_1.createIntConstant(factory_1.createHexLiteral(token.text, token.loc), token.loc);\n            default:\n                throw reportError(`IntConstant expected but found: ${token.type}`);\n        }\n    }\n    function parseDoubleValue(token) {\n        switch (token.type) {\n            case types_1.SyntaxType.FloatLiteral:\n                return factory_1.createDoubleConstant(factory_1.createFloatLiteral(token.text, token.loc), token.loc);\n            case types_1.SyntaxType.ExponentialLiteral:\n                return factory_1.createDoubleConstant(factory_1.createExponentialLiteral(token.text, token.loc), token.loc);\n            default:\n                throw reportError(`DoubleConstant expected but found: ${token.type}`);\n        }\n    }\n    // ConstMap → '{' (ConstValue ':' ConstValue ListSeparator?)* '}'\n    function parseMapValue() {\n        // The parseValue method has already advanced the cursor\n        const startLoc = currentToken().loc;\n        const properties = check(types_1.SyntaxType.RightBraceToken)\n            ? []\n            : readMapValues();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Closing brace missing from map definition`);\n        const endLoc = closeBrace.loc;\n        const location = {\n            start: startLoc.start,\n            end: endLoc.end,\n        };\n        return factory_1.createConstMap(properties, location);\n    }\n    // ConstList → '[' (ConstValue ListSeparator?)* ']'\n    function parseListValue() {\n        // The parseValue method has already advanced the cursor\n        const startLoc = currentToken().loc;\n        const elements = check(types_1.SyntaxType.RightBracketToken)\n            ? []\n            : readListValues();\n        const _closeBrace = consume(types_1.SyntaxType.RightBracketToken);\n        const closeBrace = requireValue(_closeBrace, `Closing square-bracket missing from list definition`);\n        const endLoc = closeBrace.loc;\n        return factory_1.createConstList(elements, {\n            start: startLoc.start,\n            end: endLoc.end,\n        });\n    }\n    function readMapValues() {\n        const properties = [];\n        while (true) {\n            const _key = parseValue();\n            const key = requireValue(_key, 'Key expected for map value');\n            const semicolon = consume(types_1.SyntaxType.ColonToken);\n            requireValue(semicolon, `Semicolon expected after key in map property assignment`);\n            const _value = parseValue();\n            const value = requireValue(_value, '');\n            properties.push(factory_1.creataePropertyAssignment(key, value, {\n                start: key.loc.start,\n                end: value.loc.end,\n            }));\n            if (check(types_1.SyntaxType.CommaToken)) {\n                advance();\n                // trailing comma\n                if (check(types_1.SyntaxType.RightBraceToken)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return properties;\n    }\n    function readListValues() {\n        const elements = [];\n        while (true) {\n            const value = parseValue();\n            if (value !== null) {\n                elements.push(value);\n            }\n            if (check(types_1.SyntaxType.CommaToken, types_1.SyntaxType.SemicolonToken)) {\n                advance();\n                // trailing comma\n                if (check(types_1.SyntaxType.RightBracketToken)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return elements;\n    }\n    // FunctionType → FieldType | 'void'\n    function parseFunctionType() {\n        const typeToken = consume(types_1.SyntaxType.VoidKeyword);\n        if (typeToken !== null) {\n            return {\n                type: types_1.SyntaxType.VoidKeyword,\n                loc: typeToken.loc,\n            };\n        }\n        else {\n            return parseFieldType();\n        }\n    }\n    // FieldType → Identifier | BaseType | ContainerType\n    function parseFieldType() {\n        const typeToken = advance();\n        switch (typeToken.type) {\n            case types_1.SyntaxType.Identifier:\n                return factory_1.createIdentifier(typeToken.text, typeToken.loc, parseAnnotations());\n            case types_1.SyntaxType.MapKeyword:\n                return parseMapType();\n            case types_1.SyntaxType.ListKeyword:\n                return parseListType();\n            case types_1.SyntaxType.SetKeyword:\n                return parseSetType();\n            case types_1.SyntaxType.BinaryKeyword:\n            case types_1.SyntaxType.BoolKeyword:\n            case types_1.SyntaxType.ByteKeyword:\n            case types_1.SyntaxType.StringKeyword:\n            case types_1.SyntaxType.I8Keyword:\n            case types_1.SyntaxType.I16Keyword:\n            case types_1.SyntaxType.I32Keyword:\n            case types_1.SyntaxType.I64Keyword:\n            case types_1.SyntaxType.DoubleKeyword:\n                return factory_1.createKeywordFieldType(typeToken.type, typeToken.loc, parseAnnotations());\n            default:\n                throw reportError(`FieldType expected but found: ${typeToken.type}`);\n        }\n    }\n    // MapType → 'map' CppType? '<' FieldType ',' FieldType '>'\n    function parseMapType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const keyType = parseFieldType();\n        const _commaToken = consume(types_1.SyntaxType.CommaToken);\n        const commaToken = requireValue(_commaToken, `Comma expected to separate map types <key, value>`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        const location = {\n            start: openBracket.loc.start,\n            end: closeBracket.loc.end,\n        };\n        return factory_1.createMapFieldType(keyType, valueType, location, parseAnnotations());\n    }\n    // SetType → 'set' CppType? '<' FieldType '>'\n    function parseSetType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        return {\n            type: types_1.SyntaxType.SetType,\n            valueType,\n            loc: {\n                start: openBracket.loc.start,\n                end: closeBracket.loc.end,\n            },\n            annotations: parseAnnotations(),\n        };\n    }\n    // ListType → 'list' '<' FieldType '>' CppType?\n    function parseListType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        return {\n            type: types_1.SyntaxType.ListType,\n            valueType,\n            loc: {\n                start: openBracket.loc.start,\n                end: closeBracket.loc.end,\n            },\n            annotations: parseAnnotations(),\n        };\n    }\n    function consumeComments() {\n        while (true) {\n            const next = tokens[currentIndex];\n            switch (next.type) {\n                case types_1.SyntaxType.CommentBlock:\n                    comments.push({\n                        type: next.type,\n                        value: next.text.split('\\n'),\n                        loc: next.loc,\n                    });\n                    currentIndex++;\n                    break;\n                case types_1.SyntaxType.CommentLine:\n                    comments.push({\n                        type: next.type,\n                        value: next.text,\n                        loc: next.loc,\n                    });\n                    currentIndex++;\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n    function currentToken() {\n        consumeComments();\n        return tokens[currentIndex];\n    }\n    function previousToken() {\n        return tokens[currentIndex - 1];\n    }\n    function peek() {\n        return tokens[currentIndex + 1];\n    }\n    // Does the current token match the given type\n    function check(...types) {\n        for (const type of types) {\n            if (type === currentToken().type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Does the current token match the given text\n    function checkText(...strs) {\n        for (const str of strs) {\n            if (str === currentToken().text) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // requireToken the current token to match given type and advance, otherwise return null\n    function consume(...types) {\n        for (const type of types) {\n            if (check(type)) {\n                return advance();\n            }\n        }\n        return null;\n    }\n    // Move the cursor forward and return the previous token\n    function advance() {\n        if (!isAtEnd()) {\n            currentIndex += 1;\n        }\n        return previousToken();\n    }\n    function isAtEnd() {\n        return (currentIndex >= tokens.length ||\n            currentToken().type === types_1.SyntaxType.EOF);\n    }\n    function getComments() {\n        const current = comments;\n        comments = [];\n        return current;\n    }\n    function reportError(msg) {\n        return new ParseError(msg, previousToken().loc);\n    }\n    // Throw if the given value doesn't exist.\n    function requireValue(val, msg) {\n        if (val === null || val === undefined) {\n            throw reportError(msg);\n        }\n        else {\n            return val;\n        }\n    }\n    return {\n        parse,\n        synchronize,\n    };\n}\nexports.createParser = createParser;\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/parser.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debugger_1 = __webpack_require__(/*! ./debugger */ \"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\");\nconst factory_1 = __webpack_require__(/*! ./factory */ \"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\");\nconst keywords_1 = __webpack_require__(/*! ./keywords */ \"./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction isDigit(value) {\n    return value >= '0' && value <= '9';\n}\nfunction isAlpha(value) {\n    return (value >= 'a' && value <= 'z') || (value >= 'A' && value <= 'Z');\n}\n// The first character of an Identifier can be a letter or underscore\nfunction isAlphaOrUnderscore(value) {\n    return isAlpha(value) || value === '_';\n}\nfunction isValidIdentifier(value) {\n    return (isAlphaOrUnderscore(value) ||\n        isDigit(value) ||\n        value === '.' ||\n        value === '-');\n}\nfunction isHexDigit(value) {\n    return ((value >= '0' && value <= '9') ||\n        (value >= 'A' && value <= 'F') ||\n        (value >= 'a' && value <= 'f'));\n}\nfunction isWhiteSpace(char) {\n    switch (char) {\n        case ' ':\n        case '\\r':\n        case '\\t':\n        case '\\n':\n            return true;\n        default:\n            return false;\n    }\n}\nclass ScanError extends Error {\n    constructor(msg, loc) {\n        super(msg);\n        this.message = msg;\n        this.loc = loc;\n    }\n}\nfunction createScanner(src, report = debugger_1.noopReporter) {\n    const source = src;\n    const tokens = [];\n    let line = 1;\n    let column = 1;\n    let startLine = 1;\n    let startColumn = 1;\n    let startIndex = 0;\n    let currentIndex = 0;\n    function scan() {\n        while (!isAtEnd()) {\n            try {\n                startIndex = currentIndex;\n                startLine = line;\n                startColumn = column;\n                scanToken();\n            }\n            catch (e) {\n                report(factory_1.createScanError(e.message, e.loc));\n            }\n        }\n        startIndex = currentIndex;\n        addToken(types_1.SyntaxType.EOF);\n        return tokens;\n    }\n    // Find the beginning of the next word to restart parse after error\n    function syncronize() {\n        while (!isAtEnd() && !isWhiteSpace(current())) {\n            advance();\n        }\n    }\n    function scanToken() {\n        const next = advance();\n        switch (next) {\n            case ' ':\n            case '\\r':\n            case '\\t':\n                // Ignore whitespace.\n                break;\n            case '\\n':\n                nextLine();\n                break;\n            case '&':\n                // Thirft supports (undocumented by the grammar) a syntax for c-style pointers\n                // Pointers are indicated by the '&' token. As these are not relevant to JavaScript we\n                // drop them here. This may not be the best thing to do, perhaps should leave them in\n                // the parse tree and allow consumers to deal.\n                break;\n            case '=':\n                addToken(types_1.SyntaxType.EqualToken);\n                break;\n            case '(':\n                addToken(types_1.SyntaxType.LeftParenToken);\n                break;\n            case ')':\n                addToken(types_1.SyntaxType.RightParenToken);\n                break;\n            case '{':\n                addToken(types_1.SyntaxType.LeftBraceToken);\n                break;\n            case '}':\n                addToken(types_1.SyntaxType.RightBraceToken);\n                break;\n            case '[':\n                addToken(types_1.SyntaxType.LeftBracketToken);\n                break;\n            case ']':\n                addToken(types_1.SyntaxType.RightBracketToken);\n                break;\n            case ';':\n                addToken(types_1.SyntaxType.SemicolonToken);\n                break;\n            case ',':\n                addToken(types_1.SyntaxType.CommaToken);\n                break;\n            // Strings can use single or double quotes\n            case '\"':\n            case \"'\":\n                string(next);\n                break;\n            case ':':\n                addToken(types_1.SyntaxType.ColonToken);\n                break;\n            case '#':\n                singleLineComment();\n                break;\n            case '/':\n                if (peek() === '/') {\n                    singleLineComment();\n                }\n                else if (peek() === '*') {\n                    multilineComment();\n                }\n                else {\n                    reportError(`Unexpected token: ${next}`);\n                }\n                break;\n            case '<':\n                addToken(types_1.SyntaxType.LessThanToken);\n                break;\n            case '>':\n                addToken(types_1.SyntaxType.GreaterThanToken);\n                break;\n            case '-':\n                if (isDigit(peek())) {\n                    number();\n                }\n                else {\n                    addToken(types_1.SyntaxType.MinusToken);\n                }\n                break;\n            default:\n                if (isDigit(next)) {\n                    number();\n                }\n                else if (isAlphaOrUnderscore(next)) {\n                    identifier();\n                }\n                else if (isValidIdentifier(next)) {\n                    reportError(`Invalid identifier '${next}': Identifiers must begin with a letter or underscore`);\n                }\n                else {\n                    reportError(`Unexpected token: ${next}`);\n                }\n        }\n    }\n    function identifier() {\n        while (!isAtEnd() && peek() !== '\\n' && isValidIdentifier(peek())) {\n            advance();\n        }\n        const literal = source.substring(startIndex, currentIndex);\n        const type = keywords_1.KEYWORDS[literal];\n        if (type == null) {\n            addToken(types_1.SyntaxType.Identifier, literal);\n        }\n        else {\n            addToken(type, literal);\n        }\n    }\n    function number() {\n        if (current() === '0' && (consume('x') || consume('X'))) {\n            hexadecimal();\n        }\n        else {\n            integer();\n            if (peek() === 'e' || peek() === 'E') {\n                enotation();\n            }\n            else if (peek() === '.' && isDigit(peekNext())) {\n                float();\n            }\n            else {\n                commitToken(types_1.SyntaxType.IntegerLiteral);\n            }\n        }\n    }\n    function hexadecimal() {\n        while (!isAtEnd() && peek() !== '\\n' && isHexDigit(peek())) {\n            advance();\n        }\n        commitToken(types_1.SyntaxType.HexLiteral);\n    }\n    function enotation() {\n        consume('e') || consume('E');\n        consume('-') || consume('+');\n        if (isDigit(peek())) {\n            integer();\n            commitToken(types_1.SyntaxType.ExponentialLiteral);\n        }\n        else {\n            reportError(`Invalid use of e-notation`);\n        }\n    }\n    function float() {\n        consume('.');\n        integer();\n        if (peek() === 'e' || peek() === 'E') {\n            enotation();\n        }\n        else {\n            commitToken(types_1.SyntaxType.FloatLiteral);\n        }\n    }\n    function integer() {\n        while (!isAtEnd() && peek() !== '\\n' && isDigit(peek())) {\n            advance();\n        }\n    }\n    function singleLineComment() {\n        let comment = '';\n        while (true) {\n            if (current() === '\\n' ||\n                isAtEnd() ||\n                (current() !== '/' && current() !== '#' && current() !== ' ')) {\n                break;\n            }\n            else {\n                advance();\n            }\n        }\n        if (current() !== '\\n') {\n            // A comment goes until the end of the line.\n            while (peek() !== '\\n' && !isAtEnd()) {\n                comment += current();\n                advance();\n            }\n            comment += current();\n        }\n        addToken(types_1.SyntaxType.CommentLine, comment.trim());\n    }\n    function multilineComment() {\n        let comment = '';\n        let cursor = 0;\n        while (true) {\n            if (current() === '\\n' ||\n                isAtEnd() ||\n                (current() !== '/' && current() !== '*' && current() !== ' ')) {\n                break;\n            }\n            else {\n                advance();\n            }\n        }\n        while (true) {\n            if (current() === '\\n') {\n                nextLine();\n            }\n            if (comment.charAt(cursor - 1) === '\\n' &&\n                (peek() === ' ' || peek() === '*')) {\n                /**\n                 * We ignore stars and spaces after a new line to normalize comment formatting.\n                 * We're only keeping the text of the comment without the extranious formatting.\n                 */\n            }\n            else {\n                comment += current();\n                cursor += 1;\n            }\n            advance();\n            // A comment goes until we find a comment terminator (*/).\n            if ((peek() === '*' && peekNext() === '/') || isAtEnd()) {\n                advance();\n                advance();\n                break;\n            }\n        }\n        addToken(types_1.SyntaxType.CommentBlock, comment.trim());\n    }\n    function string(terminator) {\n        while (!isAtEnd() && peek() !== terminator) {\n            if (peek() === '\\n') {\n                nextLine();\n            }\n            if (peek() === '\\\\') {\n                advance();\n            }\n            advance();\n        }\n        if (isAtEnd() && previous() !== terminator) {\n            reportError(`String must be terminated with ${terminator}`);\n        }\n        else {\n            // advance past closing \"\n            advance();\n            // We use \"+ 1\" and \"- 1\" to remove the quote markes from the string and unsescape escaped terminators\n            const literal = source\n                .substring(startIndex + 1, currentIndex - 1)\n                .replace(/\\\\(\\\"|\\')/g, '$1');\n            addToken(types_1.SyntaxType.StringLiteral, literal);\n        }\n    }\n    function consume(text) {\n        if (peek() === text) {\n            advance();\n            return true;\n        }\n        return false;\n    }\n    function advance() {\n        currentIndex++;\n        column++;\n        return source.charAt(currentIndex - 1);\n    }\n    function previous() {\n        return source.charAt(currentIndex - 2);\n    }\n    function current() {\n        return source.charAt(currentIndex - 1);\n    }\n    function peek() {\n        return source.charAt(currentIndex);\n    }\n    function peekNext() {\n        return source.charAt(currentIndex + 1);\n    }\n    function nextLine() {\n        line++;\n        column = 1;\n    }\n    function commitToken(type) {\n        const literal = source.substring(startIndex, currentIndex);\n        addToken(type, literal);\n    }\n    function currentLocation() {\n        return {\n            start: {\n                line: startLine,\n                column: startColumn,\n                index: startIndex,\n            },\n            end: {\n                line,\n                column,\n                index: currentIndex,\n            },\n        };\n    }\n    function addToken(type, value = '') {\n        const loc = currentLocation();\n        tokens.push(factory_1.createToken(type, value, loc));\n    }\n    function isAtEnd() {\n        return currentIndex >= source.length;\n    }\n    function reportError(msg) {\n        throw new ScanError(msg, currentLocation());\n    }\n    return {\n        scan,\n        syncronize,\n    };\n}\nexports.createScanner = createScanner;\n//# sourceMappingURL=scanner.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js\n");

/***/ }),

/***/ "./node_modules/@creditkarma/thrift-parser/dist/main/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@creditkarma/thrift-parser/dist/main/types.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ErrorType;\n(function (ErrorType) {\n    ErrorType[\"ParseError\"] = \"ParseError\";\n    ErrorType[\"ScanError\"] = \"ScanError\";\n})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));\nvar SyntaxType;\n(function (SyntaxType) {\n    SyntaxType[\"ThriftDocument\"] = \"ThriftDocument\";\n    SyntaxType[\"ThriftErrors\"] = \"ThriftErrors\";\n    SyntaxType[\"Identifier\"] = \"Identifier\";\n    SyntaxType[\"FieldID\"] = \"FieldID\";\n    // Statements\n    SyntaxType[\"NamespaceDefinition\"] = \"NamespaceDefinition\";\n    SyntaxType[\"IncludeDefinition\"] = \"IncludeDefinition\";\n    SyntaxType[\"CppIncludeDefinition\"] = \"CppIncludeDefinition\";\n    SyntaxType[\"ConstDefinition\"] = \"ConstDefinition\";\n    SyntaxType[\"StructDefinition\"] = \"StructDefinition\";\n    SyntaxType[\"EnumDefinition\"] = \"EnumDefinition\";\n    SyntaxType[\"ServiceDefinition\"] = \"ServiceDefinition\";\n    SyntaxType[\"ExceptionDefinition\"] = \"ExceptionDefinition\";\n    SyntaxType[\"TypedefDefinition\"] = \"TypedefDefinition\";\n    SyntaxType[\"UnionDefinition\"] = \"UnionDefinition\";\n    // Fields\n    SyntaxType[\"FieldDefinition\"] = \"FieldDefinition\";\n    SyntaxType[\"FunctionDefinition\"] = \"FunctionDefinition\";\n    SyntaxType[\"ParametersDefinition\"] = \"ParametersDefinition\";\n    SyntaxType[\"ThrowsDefinition\"] = \"ThrowsDefinition\";\n    // Type Annotations\n    SyntaxType[\"FieldType\"] = \"FieldType\";\n    SyntaxType[\"BaseType\"] = \"BaseType\";\n    SyntaxType[\"SetType\"] = \"SetType\";\n    SyntaxType[\"MapType\"] = \"MapType\";\n    SyntaxType[\"ListType\"] = \"ListType\";\n    // Values\n    SyntaxType[\"ConstValue\"] = \"ConstValue\";\n    SyntaxType[\"IntConstant\"] = \"IntConstant\";\n    SyntaxType[\"DoubleConstant\"] = \"DoubleConstant\";\n    SyntaxType[\"ConstList\"] = \"ConstList\";\n    SyntaxType[\"ConstMap\"] = \"ConstMap\";\n    SyntaxType[\"EnumMember\"] = \"EnumMember\";\n    // Literals\n    SyntaxType[\"CommentLine\"] = \"CommentLine\";\n    SyntaxType[\"CommentBlock\"] = \"CommentBlock\";\n    SyntaxType[\"StringLiteral\"] = \"StringLiteral\";\n    SyntaxType[\"IntegerLiteral\"] = \"IntegerLiteral\";\n    SyntaxType[\"FloatLiteral\"] = \"FloatLiteral\";\n    SyntaxType[\"HexLiteral\"] = \"HexLiteral\";\n    SyntaxType[\"ExponentialLiteral\"] = \"ExponentialLiteral\";\n    SyntaxType[\"BooleanLiteral\"] = \"BooleanLiteral\";\n    SyntaxType[\"PropertyAssignment\"] = \"PropertyAssignment\";\n    // Tokens\n    SyntaxType[\"LeftParenToken\"] = \"LeftParenToken\";\n    SyntaxType[\"RightParenToken\"] = \"RightParenToken\";\n    SyntaxType[\"LeftBraceToken\"] = \"LeftBraceToken\";\n    SyntaxType[\"RightBraceToken\"] = \"RightBraceToken\";\n    SyntaxType[\"LeftBracketToken\"] = \"LeftBracketToken\";\n    SyntaxType[\"RightBracketToken\"] = \"RightBracketToken\";\n    SyntaxType[\"CommaToken\"] = \"CommaToken\";\n    SyntaxType[\"DotToken\"] = \"DotToken\";\n    SyntaxType[\"MinusToken\"] = \"MinusToken\";\n    SyntaxType[\"SemicolonToken\"] = \"SemicolonToken\";\n    SyntaxType[\"ColonToken\"] = \"ColonToken\";\n    SyntaxType[\"StarToken\"] = \"StarToken\";\n    SyntaxType[\"EqualToken\"] = \"EqualToken\";\n    SyntaxType[\"LessThanToken\"] = \"LessThanToken\";\n    SyntaxType[\"GreaterThanToken\"] = \"GreaterThanToken\";\n    // Keywords\n    SyntaxType[\"NamespaceKeyword\"] = \"NamespaceKeyword\";\n    SyntaxType[\"IncludeKeyword\"] = \"IncludeKeyword\";\n    SyntaxType[\"CppIncludeKeyword\"] = \"CppIncludeKeyword\";\n    SyntaxType[\"ExceptionKeyword\"] = \"ExceptionKeyword\";\n    SyntaxType[\"ServiceKeyword\"] = \"ServiceKeyword\";\n    SyntaxType[\"ExtendsKeyword\"] = \"ExtendsKeyword\";\n    SyntaxType[\"RequiredKeyword\"] = \"RequiredKeyword\";\n    SyntaxType[\"OptionalKeyword\"] = \"OptionalKeyword\";\n    SyntaxType[\"FalseKeyword\"] = \"FalseKeyword\";\n    SyntaxType[\"TrueKeyword\"] = \"TrueKeyword\";\n    SyntaxType[\"ConstKeyword\"] = \"ConstKeyword\";\n    SyntaxType[\"DoubleKeyword\"] = \"DoubleKeyword\";\n    SyntaxType[\"StructKeyword\"] = \"StructKeyword\";\n    SyntaxType[\"TypedefKeyword\"] = \"TypedefKeyword\";\n    SyntaxType[\"UnionKeyword\"] = \"UnionKeyword\";\n    SyntaxType[\"StringKeyword\"] = \"StringKeyword\";\n    SyntaxType[\"BinaryKeyword\"] = \"BinaryKeyword\";\n    SyntaxType[\"BoolKeyword\"] = \"BoolKeyword\";\n    SyntaxType[\"ByteKeyword\"] = \"ByteKeyword\";\n    SyntaxType[\"EnumKeyword\"] = \"EnumKeyword\";\n    SyntaxType[\"SenumKeyword\"] = \"SenumKeyword\";\n    SyntaxType[\"ListKeyword\"] = \"ListKeyword\";\n    SyntaxType[\"SetKeyword\"] = \"SetKeyword\";\n    SyntaxType[\"MapKeyword\"] = \"MapKeyword\";\n    SyntaxType[\"I8Keyword\"] = \"I8Keyword\";\n    SyntaxType[\"I16Keyword\"] = \"I16Keyword\";\n    SyntaxType[\"I32Keyword\"] = \"I32Keyword\";\n    SyntaxType[\"I64Keyword\"] = \"I64Keyword\";\n    SyntaxType[\"ThrowsKeyword\"] = \"ThrowsKeyword\";\n    SyntaxType[\"VoidKeyword\"] = \"VoidKeyword\";\n    SyntaxType[\"OnewayKeyword\"] = \"OnewayKeyword\";\n    // Other\n    SyntaxType[\"Annotation\"] = \"Annotation\";\n    SyntaxType[\"Annotations\"] = \"Annotations\";\n    SyntaxType[\"EOF\"] = \"EOF\";\n})(SyntaxType = exports.SyntaxType || (exports.SyntaxType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@creditkarma/thrift-parser/dist/main/types.js\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbW9jay9lbXB0eS5qcy5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/mock/empty.js\n");

/***/ }),

/***/ "./node_modules/os-browserify/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/os-browserify/browser.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29zLWJyb3dzZXJpZnkvYnJvd3Nlci5qcz8zYzQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZW5kaWFubmVzcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdMRScgfTtcblxuZXhwb3J0cy5ob3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbG9jYXRpb24uaG9zdG5hbWVcbiAgICB9XG4gICAgZWxzZSByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLmxvYWRhdmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnVwdGltZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDAgfTtcblxuZXhwb3J0cy5mcmVlbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy50b3RhbG1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMuY3B1cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudHlwZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdCcm93c2VyJyB9O1xuXG5leHBvcnRzLnJlbGVhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5uZXR3b3JrSW50ZXJmYWNlc1xuPSBleHBvcnRzLmdldE5ldHdvcmtJbnRlcmZhY2VzXG49IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt9IH07XG5cbmV4cG9ydHMuYXJjaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdqYXZhc2NyaXB0JyB9O1xuXG5leHBvcnRzLnBsYXRmb3JtID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2Jyb3dzZXInIH07XG5cbmV4cG9ydHMudG1wZGlyID0gZXhwb3J0cy50bXBEaXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcvdG1wJztcbn07XG5cbmV4cG9ydHMuRU9MID0gJ1xcbic7XG5cbmV4cG9ydHMuaG9tZWRpciA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuICcvJ1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/os-browserify/browser.js\n");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/path-browserify/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcz9mMjhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ })

}]);