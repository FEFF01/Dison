(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[79],{

/***/ "./node_modules/filbert/filbert.js":
/*!*****************************************!*\
  !*** ./node_modules/filbert/filbert.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Filbert is a Python parser written in JavaScript.\n//\n// Filbert was written by Matt Lott and released under an MIT\n// license. It was adatped from [Acorn](https://github.com/marijnh/acorn.git)\n// by Marijn Haverbeke.\n//\n// Git repository for Filbert are available at\n//\n//     https://github.com/differentmatt/filbert.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/differentmatt/filbert/issues\n\n(function(root, mod) {\n  if (true) return mod(exports); // CommonJS\n  if (true) return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n  mod(root.filbert || (root.filbert = {})); // Plain browser env\n})(this, function(exports) {\n  \"use strict\";\n\n  exports.version = \"0.5.1\";\n\n  // The main exported interface (under `self.filbert` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  var options, input, inputLen, sourceFile, nc;\n\n  exports.parse = function(inpt, opts) {\n    input = String(inpt); inputLen = input.length;\n    setOptions(opts);\n    initTokenState();\n    nc = getNodeCreator(startNode, startNodeFrom, finishNode, unpackTuple);\n    return parseTopLevel(options.program);\n  };\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = exports.defaultOptions = {\n    // `languageVersion` indicates the Python version to parse. It\n    // is not currently in use, but will support 2 or 3 eventually.\n    languageVersion: 3,\n    // When `allowTrailingCommas` is false, the parser will not allow\n    // trailing commas in array and object literals.\n    allowTrailingCommas: true,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onComment` option, which will\n    // cause Filbert to call that function with `(text, start,\n    // end)` parameters whenever a comment is skipped.\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback-that will corrupt its internal state.\n    onComment: null,\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // Python runtime library object name\n    runtimeParamName: \"__pythonRuntime\"\n  };\n\n  function setOptions(opts) {\n    options = opts || {};\n    for (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))\n      options[opt] = defaultOptions[opt];\n    sourceFile = options.sourceFile || null;\n  }\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  var getLineInfo = exports.getLineInfo = function(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreak.lastIndex = cur;\n      var match = lineBreak.exec(input);\n      if (match && match.index < offset) {\n        ++line;\n        cur = match.index + match[0].length;\n      } else break;\n    }\n    return {line: line, column: offset - cur};\n  };\n\n  // Filbert is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenize` export provides an interface to the tokenizer.\n  // Because the tokenizer is optimized for being efficiently used by\n  // the Filbert parser itself, this interface is somewhat crude and not\n  // very modular. Performing another parse or call to `tokenize` will\n  // reset the internal state, and invalidate existing tokenizers.\n\n  exports.tokenize = function(inpt, opts) {\n    input = String(inpt); inputLen = input.length;\n    setOptions(opts);\n    initTokenState();\n\n    var t = {};\n    function getToken(forceRegexp) {\n      lastEnd = tokEnd;\n      readToken(forceRegexp);\n      t.start = tokStart; t.end = tokEnd;\n      t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;\n      t.type = tokType; t.value = tokVal;\n      return t;\n    }\n    getToken.jumpTo = function(pos, reAllowed) {\n      tokPos = pos;\n      if (options.locations) {\n        tokCurLine = 1;\n        tokLineStart = lineBreak.lastIndex = 0;\n        var match;\n        while ((match = lineBreak.exec(input)) && match.index < pos) {\n          ++tokCurLine;\n          tokLineStart = match.index + match[0].length;\n        }\n      }\n      tokRegexpAllowed = reAllowed;\n      skipSpace();\n    };\n    return getToken;\n  };\n\n  // State is kept in (closure-)global variables. We already saw the\n  // `options`, `input`, and `inputLen` variables above.\n\n  // The current position of the tokenizer in the input.\n\n  var tokPos;\n\n  // The start and end offsets of the current token.\n\n  var tokStart, tokEnd;\n\n  // When `options.locations` is true, these hold objects\n  // containing the tokens start and end line/column pairs.\n\n  var tokStartLoc, tokEndLoc;\n\n  // The type and value of the current token. Token types are objects,\n  // named by variables against which they can be compared, and\n  // holding properties that describe them (indicating, for example,\n  // the precedence of an infix operator, and the original name of a\n  // keyword token). The kind of value that's held in `tokVal` depends\n  // on the type of the token. For literals, it is the literal value,\n  // for operators, the operator name, and so on.\n\n  var tokType, tokVal;\n\n  // Interal state for the tokenizer. To distinguish between division\n  // operators and regular expressions, it remembers whether the last\n  // token was one that is allowed to be followed by an expression.\n  // (If it is, a slash is probably a regexp, if it isn't it's a\n  // division operator. See the `parseStatement` function for a\n  // caveat.)\n\n  var tokRegexpAllowed;\n\n  // When `options.locations` is true, these are used to keep\n  // track of the current line, and know when a new line has been\n  // entered.\n\n  var tokCurLine, tokLineStart;\n\n  // These store the position of the previous token, which is useful\n  // when finishing a node and assigning its `end` position.\n\n  var lastStart, lastEnd, lastEndLoc;\n\n  // This is the parser's state. `inFunction` is used to reject\n  // `return` statements outside of functions, `strict` indicates\n  // whether strict mode is on, and `bracketNesting` tracks the level\n  // of nesting within brackets for implicit lint continuation.\n\n  var inFunction, strict, bracketNesting;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  function raise(pos, message) {\n    var loc = getLineInfo(input, pos);\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = tokPos;\n    throw err;\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = [];\n\n  // Used for name collision avoidance whend adding extra AST identifiers\n\n  var newAstIdCount = 0;\n\n  var indentHist = exports.indentHist = {\n    // Current indentation stack\n    indent: [],\n\n    // Number of dedent tokens left (i.e. if tokType == _dedent, dedentCount > 0)\n    // Multiple dedent tokens are read in at once, but processed individually in readToken()\n    dedentCount: 0,\n\n    init: function () { this.indent = []; this.dedentCount = 0; },\n    count: function () { return this.indent.length; },\n    len: function (i) { \n      if (typeof i === 'undefined' || i >= this.indent.length) i = this.indent.length - 1;\n      return this.indent[i].length; \n    },\n    isIndent: function(s) {\n      return this.indent.length === 0 || s.length > this.len();\n    },\n    isDedent: function(s) {\n      return this.indent.length > 0 && s.length < this.len();\n    },\n    addIndent: function (s) { this.indent.push(s); },\n    addDedent: function (s) {\n      this.dedentCount = 0;\n      for (var i = this.indent.length - 1; i >= 0 && s.length < this.indent[i].length; --i)\n        ++this.dedentCount;\n    },\n    updateDedent: function () { this.dedentCount = this.count(); },\n    pop: function () {\n      --this.dedentCount;\n      this.indent.pop();\n    },\n    undoIndent: function () { this.pop(); }\n  };\n\n  // ## Scope\n\n  // Collection of namespaces saved as a stack\n  // A namespace is a mapping of identifiers to 3 types: variables, functions, classes\n  // A namespace also knows whether it is for global, class, or function\n  // A new namespace is pushed at function and class start, and popped at their end\n  // Starts with a global namespace on the stack\n  // E.g. scope.namespaces ~ [{type: 'g', map:{x: 'v', MyClass: 'c'} }, ...]\n\n  // TODO: Not tracking built-in namespace\n  \n  var scope = exports.scope = {\n    namespaces: [],\n    init: function () { this.namespaces = [{ type: 'g', map: {} }]; },\n    current: function(offset) { \n      offset = offset || 0;\n      return this.namespaces[this.namespaces.length - offset - 1];\n    },\n    startClass: function (id) {\n      this.current().map[id] = 'c';\n      this.namespaces.push({ type: 'c', map: {}, className: id });\n    },\n    startFn: function (id) {\n      this.current().map[id] = 'f';\n      this.namespaces.push({ type: 'f', map: {}, fnName: id });\n    },\n    end: function () { this.namespaces.pop(); },\n    addVar: function (id) { this.current().map[id] = 'v'; },\n    exists: function (id) { return this.current().map.hasOwnProperty(id); },\n    isClass: function () { return this.current().type === 'c'; },\n    isUserFunction: function(name) {\n      // Loose match (i.e. order ignored)\n      // TODO: does not identify user-defined class methods\n      for (var i = this.namespaces.length - 1; i >= 0; i--)\n        for (var key in this.namespaces[i].map)\n          if (key === name && this.namespaces[i].map[key] === 'f')\n            return true;\n      return false;\n    },\n    isParentClass: function() { return this.current(1).type === 'c'; },\n    isNewObj: function (id) {\n      for (var i = this.namespaces.length - 1; i >= 0; i--)\n        if (this.namespaces[i].map[id] === 'c') return true;\n        else if (this.namespaces[i].map[id] === 'f') break;\n      return false;\n    },\n    getParentClassName: function () { return this.current(1).className; },\n    getThisReplace: function () { return this.current().thisReplace; },\n    setThisReplace: function (s) { this.current().thisReplace = s; }\n  };\n  \n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // These are the general types. The `type` property is only used to\n  // make them recognizeable when debugging.\n\n  var _num = {type: \"num\"}, _regexp = {type: \"regexp\"}, _string = {type: \"string\"};\n  var _name = {type: \"name\"}, _eof = {type: \"eof\"};\n  var _newline = {type: \"newline\"}, _indent = {type: \"indent\"}, _dedent = {type: \"dedent\"};\n\n  // Keyword tokens. The `keyword` property (also used in keyword-like\n  // operators) indicates that the token originated from an\n  // identifier-like word, which is used when parsing property names.\n  //\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  \n  var _dict = { keyword: \"dict\" };  // TODO: not a keyword\n  var _as = { keyword: \"as\" }, _assert = { keyword: \"assert\" }, _break = { keyword: \"break\" };\n  var _class = { keyword: \"class\" }, _continue = { keyword: \"continue\" };\n  var _def = { keyword: \"def\" }, _del = { keyword: \"del\" };\n  var _elif = { keyword: \"elif\", beforeExpr: true }, _else = { keyword: \"else\", beforeExpr: true };\n  var _except = { keyword: \"except\", beforeExpr: true }, _finally = {keyword: \"finally\"};\n  var _for = { keyword: \"for\" }, _from = { keyword: \"from\" }, _global = { keyword: \"global\" };\n  var _if = { keyword: \"if\" }, _import = { keyword: \"import\" };\n  var _lambda = {keyword: \"lambda\"}, _nonlocal = {keyword: \"nonlocal\"};\n  var _pass = { keyword: \"pass\" }, _raise = {keyword: \"raise\"};\n  var _return = { keyword: \"return\", beforeExpr: true }, _try = { keyword: \"try\" };\n  var _while = {keyword: \"while\"}, _with = {keyword: \"with\"}, _yield = {keyword: \"yield\"};\n\n  // The keywords that denote values.\n\n  var _none = {keyword: \"None\", atomValue: null}, _true = {keyword: \"True\", atomValue: true};\n  var _false = {keyword: \"False\", atomValue: false};\n\n  // Some keywords are treated as regular operators. `in` sometimes\n  // (when parsing `for`) needs to be tested against specifically, so\n  // we assign a variable name to it for quick comparing.\n  // 'prec' is the operator precedence'\n\n  var _or = { keyword: \"or\", prec: 1, beforeExpr: true, rep: \"||\" };\n  var _and = { keyword: \"and\", prec: 2, beforeExpr: true, rep: \"&&\" };\n  var _not = { keyword: \"not\", prec: 3, prefix: true, beforeExpr: true, rep: \"!\" };\n  var _in = { keyword: \"in\", prec: 4, beforeExpr: true };\n  var _is = { keyword: \"is\", prec: 4, beforeExpr: true };\n\n  // Map keyword names to token types.\n\n  var keywordTypes = {\n    \"dict\": _dict,\n    \"False\": _false, \"None\": _none, \"True\": _true, \"and\": _and, \"as\": _as, \n    \"break\": _break, \"class\": _class, \"continue\": _continue, \"def\": _def, \"del\": _del,\n    \"elif\": _elif, \"else\": _else, \"except\": _except, \"finally\": _finally, \"for\": _for,\n    \"from\": _from, \"global\": _global, \"if\": _if, \"import\": _import, \"in\": _in, \"is\": _is, \n    \"lambda\": _lambda, \"nonlocal\": _nonlocal, \"not\": _not, \"or\": _or, \n    \"pass\": _pass, \"raise\": _raise, \"return\": _return, \"try\": _try, \"while\": _while, \n    \"with\": _with, \"yield\": _yield\n  };\n\n  // Punctuation token types. Again, the `type` property is purely for debugging.\n\n  var _bracketL = {type: \"[\", beforeExpr: true}, _bracketR = {type: \"]\"}, _braceL = {type: \"{\", beforeExpr: true};\n  var _braceR = {type: \"}\"}, _parenL = {type: \"(\", beforeExpr: true}, _parenR = {type: \")\"};\n  var _comma = {type: \",\", beforeExpr: true}, _semi = {type: \";\", beforeExpr: true};\n  var _colon = { type: \":\", beforeExpr: true }, _dot = { type: \".\" }, _question = { type: \"?\", beforeExpr: true };\n  \n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `prec` specifies the precedence of this operator.\n  //\n  // `prefix` marks the operator as a prefix unary operator. \n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  var _slash = { prec: 10, beforeExpr: true }, _eq = { isAssign: true, beforeExpr: true };\n  var _assign = {isAssign: true, beforeExpr: true};\n  var _equality = { prec: 4, beforeExpr: true };\n  var _relational = {prec: 4, beforeExpr: true };\n  var _bitwiseOR = { prec: 5, beforeExpr: true };\n  var _bitwiseXOR = { prec: 6, beforeExpr: true };\n  var _bitwiseAND = { prec: 7, beforeExpr: true };\n  var _bitShift = { prec: 8, beforeExpr: true };\n  var _plusMin = { prec: 9, beforeExpr: true };\n  var _multiplyModulo = { prec: 10, beforeExpr: true };\n  var _floorDiv = { prec: 10, beforeExpr: true };\n  var _posNegNot = { prec: 11, prefix: true, beforeExpr: true };\n  var _bitwiseNOT = { prec: 11, prefix: true, beforeExpr: true };\n  var _exponentiation = { prec: 12, beforeExpr: true };\n\n  // Provide access to the token types for external users of the\n  // tokenizer.\n\n  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,\n                      parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,\n                      dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,\n                      num: _num, regexp: _regexp, string: _string,\n                      newline: _newline, indent: _indent, dedent: _dedent,\n                      exponentiation: _exponentiation, floorDiv: _floorDiv, plusMin: _plusMin,\n                      posNegNot: _posNegNot, multiplyModulo: _multiplyModulo\n  };\n  for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];\n\n  // This is a trick taken from Esprima. It turns out that, on\n  // non-Chrome browsers, to check whether a string is in a set, a\n  // predicate containing a big ugly `switch` statement is faster than\n  // a regular expression, and on Chrome the two are about on par.\n  // This function uses `eval` (non-lexical) to produce such a\n  // predicate from a space-separated string of words.\n  //\n  // It starts by sorting the words by length.\n\n  function makePredicate(words) {\n    words = words.split(\" \");\n    var f = \"\", cats = [];\n    out: for (var i = 0; i < words.length; ++i) {\n      for (var j = 0; j < cats.length; ++j)\n        if (cats[j][0].length == words[i].length) {\n          cats[j].push(words[i]);\n          continue out;\n        }\n      cats.push([words[i]]);\n    }\n    function compareTo(arr) {\n      if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n      f += \"switch(str){\";\n      for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\n      f += \"return true}return false;\";\n    }\n\n    // When there are more than three length categories, an outer\n    // switch first dispatches on the lengths, to save on comparisons.\n\n    if (cats.length > 3) {\n      cats.sort(function(a, b) {return b.length - a.length;});\n      f += \"switch(str.length){\";\n      for (var i = 0; i < cats.length; ++i) {\n        var cat = cats[i];\n        f += \"case \" + cat[0].length + \":\";\n        compareTo(cat);\n      }\n      f += \"}\";\n\n      // Otherwise, simply generate a flat `switch` statement.\n\n    } else {\n      compareTo(words);\n    }\n    return new Function(\"str\", f);\n  }\n\n  // The forbidden variable names\n\n  var isStrictBadIdWord = makePredicate(\"eval arguments\");\n\n  // Keywords\n  // TODO: dict isn't a keyword, it's a builtin\n\n  var isKeyword = makePredicate(\"dict False None True and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield\");\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  // Whether a single character denotes a newline.\n\n  var newline = /[\\n\\r\\u2028\\u2029]/;\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n\n  // Test whether a given character code starts an identifier.\n\n  var isIdentifierStart = exports.isIdentifierStart = function(code) {\n    if (code < 65) return code === 36;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123)return true;\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  };\n\n  // Test whether a given character is part of an identifier.\n\n  var isIdentifierChar = exports.isIdentifierChar = function(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123)return true;\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  };\n\n  // ## Tokenizer\n\n  // These are used when `options.locations` is on, for the\n  // `tokStartLoc` and `tokEndLoc` properties.\n\n  function Position() {\n    this.line = tokCurLine;\n    this.column = tokPos - tokLineStart;\n  }\n\n  // Reset the token state. Used at the start of a parse.\n\n  function initTokenState() {\n    tokCurLine = 1;\n    tokPos = tokLineStart = 0;\n    tokRegexpAllowed = true;\n    indentHist.init();\n    newAstIdCount = 0;\n    scope.init();\n  }\n\n  // Called at the end of every token. Sets `tokEnd`, `tokVal`, and\n  // `tokRegexpAllowed`, and skips the space after the token, so that\n  // the next one's `tokStart` will point at the right position.\n\n  function finishToken(type, val) {\n    tokEnd = tokPos;\n    if (options.locations) tokEndLoc = new Position;\n    tokType = type;\n    if (type === _parenL || type === _braceL || type === _bracketL) ++bracketNesting;\n    if (type === _parenR || type === _braceR || type === _bracketR) --bracketNesting;\n    if (type !== _newline) skipSpace();\n    tokVal = val;\n    tokRegexpAllowed = type.beforeExpr;\n  }\n\n  function skipLine() {\n    var ch = input.charCodeAt(++tokPos);\n    while (tokPos < inputLen && !isNewline(ch)) {\n      ++tokPos;\n      ch = input.charCodeAt(tokPos);\n    }\n  }\n\n  function skipLineComment() {\n    var start = tokPos;\n    var startLoc = options.onComment && options.locations && new Position;\n    skipLine();\n    if (options.onComment)\n      options.onComment(input.slice(start + 1, tokPos), start, tokPos,\n                        startLoc, options.locations && new Position);\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  function skipSpace() {\n    while (tokPos < inputLen) {\n      var ch = input.charCodeAt(tokPos);\n      if (ch === 35) skipLineComment();\n      else if (ch === 92) {\n        ++tokPos;\n        if (isNewline(input.charCodeAt(tokPos))) {\n          if (input.charCodeAt(tokPos) === 13 && input.charCodeAt(tokPos+1) === 10) ++tokPos;\n          ++tokPos;\n          if (options.location) { tokLineStart = tokPos; ++tokCurLine; }\n        } else {\n          raise(tokPos, \"Unexpected character after line continuation character\");\n        }\n      }\n      else if (isSpace(ch)) ++tokPos;\n      else if (bracketNesting > 0 && isNewline(ch)) {\n        if (ch === 13 && input.charCodeAt(tokPos+1) === 10) ++tokPos;\n        ++tokPos;\n        if (options.location) { tokLineStart = tokPos; ++tokCurLine; }\n      }\n      else break;\n    }\n  }\n\n  function isSpace(ch) {\n    if (ch === 32 || // ' '\n      ch === 9 || ch === 11 || ch === 12 ||\n      ch === 160 || // '\\xa0'\n      ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n      return true;\n    }\n    return false;\n  }\n\n  function isNewline(ch) {\n    if (ch === 10 || ch === 13 ||\n      ch === 8232 || ch === 8233) {\n      return true;\n    }\n    return false;\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  // The `forceRegexp` parameter is used in the one case where the\n  // `tokRegexpAllowed` trick does not work. See `parseStatement`.\n\n  function readToken_dot() {\n    var next = input.charCodeAt(tokPos + 1);\n    if (next >= 48 && next <= 57) return readNumber(true);\n    ++tokPos;\n    return finishToken(_dot);\n  }\n\n  function readToken_slash() { // '/'\n    if (tokRegexpAllowed) { ++tokPos; return readRegexp(); }\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 47) return finishOp(_floorDiv, 2);\n    if (next === 61) return finishOp(_assign, 2);\n    return finishOp(_slash, 1);\n  }\n\n  function readToken_mult_modulo(code) { // '*%'\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 42 && next === code) return finishOp(_exponentiation, 2);\n    if (next === 61) return finishOp(_assign, 2);\n    return finishOp(_multiplyModulo, 1);\n  }\n  \n  function readToken_pipe_amp(code) { // '|&'\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 61) return finishOp(_assign, 2);\n    return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);\n  }\n\n  function readToken_caret() { // '^'\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 61) return finishOp(_assign, 2);\n    return finishOp(_bitwiseXOR, 1);\n  }\n\n  function readToken_plus_min(code) { // '+-'\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 61) return finishOp(_assign, 2);\n    return finishOp(_plusMin, 1);\n  }\n\n  function readToken_lt_gt(code) { // '<>'\n    var next = input.charCodeAt(tokPos + 1);\n    var size = 1;\n    if (next === code) {\n      size = 2;\n      if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);\n      return finishOp(_bitShift, size);\n    }\n    if (next === 61) size = 2;\n    return finishOp(_relational, size);\n  }\n\n  function readToken_eq_excl(code) { // '=!'\n    var next = input.charCodeAt(tokPos + 1);\n    if (next === 61) return finishOp(_equality, 2);\n    return finishOp(_eq, 1);\n  }\n\n  // Parse indentation\n  // Possible output: _indent, _dedent, _eof, readToken()\n  // TODO: disallow unequal indents of same length (e.g. nested if/else block)\n\n  function readToken_indent() {\n    // Read indent, skip empty lines and comments\n    var indent = \"\";\n    var indentPos = tokPos;\n    var ch, next;\n    while (indentPos < inputLen) {\n      ch = input.charCodeAt(indentPos);\n      if (isSpace(ch)) {\n        indent += String.fromCharCode(ch);\n        ++indentPos;\n      } else if (isNewline(ch)) { // newline\n        indent = \"\";\n        if (ch === 13 && input.charCodeAt(indentPos + 1) === 10) ++indentPos;\n        ++indentPos;\n        tokPos = indentPos;\n        if (options.locations) {\n          tokLineStart = indentPos;\n          ++tokCurLine;\n        }\n      } else if (ch === 35) { // '#'\n        do {\n          next = input.charCodeAt(++indentPos);\n        } while (indentPos < inputLen && next !== 10);\n        // TODO: call onComment\n      } else {\n        break;\n      }\n    }\n\n    // Determine token type based on indent found versus indentation history\n    var type;\n    if (indent.length > 0) {\n      if (indentHist.isIndent(indent)) {\n        type = _indent;\n        if (indentHist.count() >= 1) tokStart += indentHist.len(indentHist.count() - 1);\n        indentHist.addIndent(indent);\n      } else if (indentHist.isDedent(indent)) {\n        type = _dedent;\n        indentHist.addDedent(indent);\n        var nextDedent = indentHist.count() - indentHist.dedentCount;\n        if (nextDedent >= 2) {\n          tokStart += indentHist.len(nextDedent) - indentHist.len(nextDedent - 1);\n        }\n      } else {\n        tokPos += indent.length;\n      }\n    } else if (indentPos >= inputLen) {\n      type = _eof;\n    } else if (indentHist.count() > 0) {\n      type = _dedent;\n      indentHist.updateDedent();\n    }\n\n    switch (type) {\n      case _indent: case _dedent: return finishOp(type, indentPos - ++tokPos);\n      case _eof:\n        tokPos = inputLen;\n        if (options.locations) tokStartLoc = new Position;\n        return finishOp(type, 0);\n      default:\n        tokType = null;\n        return readToken();\n    }\n  }\n\n  function getTokenFromCode(code) {\n    switch(code) {\n\n    case 13: case 10: case 8232: case 8233:\n      ++tokPos;\n      if (code === 13 && input.charCodeAt(tokPos) === 10) ++tokPos;\n      if (options.locations) {\n        ++tokCurLine;\n        tokLineStart = tokPos;\n      }\n      return finishToken(_newline);\n\n    case 35: // '#'\n      skipLineComment();\n      return readToken();\n\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit.\n    case 46: // '.'\n      return readToken_dot();\n\n      // Punctuation tokens.\n    case 40: ++tokPos; return finishToken(_parenL);\n    case 41: ++tokPos; return finishToken(_parenR);\n    case 59: ++tokPos; return finishToken(_semi);\n    case 44: ++tokPos; return finishToken(_comma);\n    case 91: ++tokPos; return finishToken(_bracketL);\n    case 93: ++tokPos; return finishToken(_bracketR);\n    case 123: ++tokPos; return finishToken(_braceL);\n    case 125: ++tokPos; return finishToken(_braceR);\n    case 58: ++tokPos; return finishToken(_colon);\n    case 63: ++tokPos; return finishToken(_question);\n\n      // '0x' is a hexadecimal number.\n    case 48: // '0'\n      var next = input.charCodeAt(tokPos + 1);\n      if (next === 120 || next === 88) return readHexNumber();\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return readNumber(false);\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47: // '/'\n      return readToken_slash(code);\n\n    case 42: case 37: // '*%'\n      return readToken_mult_modulo(code);\n\n    case 124: case 38: // '|&'\n      return readToken_pipe_amp(code);\n\n    case 94: // '^'\n      return readToken_caret();\n\n    case 43: case 45: // '+-'\n      return readToken_plus_min(code);\n\n    case 60: case 62: // '<>'\n      return readToken_lt_gt(code);\n\n    case 61: case 33: // '=!'\n      return readToken_eq_excl(code);\n\n    case 126: // '~'\n      return finishOp(_bitwiseNOT, 1);\n    }\n\n    return false;\n  }\n\n  function readToken(forceRegexp) {\n    if (tokType === _dedent) {\n      indentHist.pop();\n      if (indentHist.dedentCount > 0) return;\n    }\n\n    if (!forceRegexp) tokStart = tokPos;\n    else tokPos = tokStart + 1;\n    if (options.locations) tokStartLoc = new Position;\n    if (forceRegexp) return readRegexp();\n    if (tokPos >= inputLen) return finishToken(_eof);\n    if (tokType === _newline) return readToken_indent();\n\n    var code = input.charCodeAt(tokPos);\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code) || code === 92 /* '\\' */) return readWord();\n\n    var tok = getTokenFromCode(code);\n\n    if (tok === false) {\n      // If we are here, we either found a non-ASCII identifier\n      // character, or something that's entirely disallowed.\n      var ch = String.fromCharCode(code);\n      if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();\n      raise(tokPos, \"Unexpected character '\" + ch + \"'\");\n    }\n    return tok;\n  }\n\n  function finishOp(type, size) {\n    var str = input.slice(tokPos, tokPos + size);\n    tokPos += size;\n    finishToken(type, str);\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function readRegexp() {\n    var content = \"\", escaped, inClass, start = tokPos, value;\n    for (;;) {\n      if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");\n      var ch = input.charAt(tokPos);\n      if (newline.test(ch)) raise(start, \"Unterminated regular expression\");\n      if (!escaped) {\n        if (ch === \"[\") inClass = true;\n        else if (ch === \"]\" && inClass) inClass = false;\n        else if (ch === \"/\" && !inClass) break;\n        escaped = ch === \"\\\\\";\n      } else escaped = false;\n      ++tokPos;\n    }\n    content = input.slice(start, tokPos);\n    ++tokPos;\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = readWord1();\n    if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regular expression flag\");\n    try {\n      value = new RegExp(content, mods);\n    } catch (e) {\n      if (e instanceof SyntaxError) raise(start, \"Error parsing regular expression: \" + e.message);\n      raise(e);\n    }\n    return finishToken(_regexp, value);\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  function readInt(radix, len) {\n    var start = tokPos, total = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = input.charCodeAt(tokPos), val;\n      if (code >= 97) val = code - 97 + 10; // a\n      else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n      else val = Infinity;\n      if (val >= radix) break;\n      ++tokPos;\n      total = total * radix + val;\n    }\n    if (tokPos === start || len != null && tokPos - start !== len) return null;\n\n    return total;\n  }\n\n  function readHexNumber() {\n    tokPos += 2; // 0x\n    var val = readInt(16);\n    if (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");\n    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n    return finishToken(_num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  function readNumber(startsWithDot) {\n    var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;\n    if (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");\n    if (input.charCodeAt(tokPos) === 46) {\n      ++tokPos;\n      readInt(10);\n      isFloat = true;\n    }\n    var next = input.charCodeAt(tokPos);\n    if (next === 69 || next === 101) { // 'eE'\n      next = input.charCodeAt(++tokPos);\n      if (next === 43 || next === 45) ++tokPos; // '+-'\n      if (readInt(10) === null) raise(start, \"Invalid number\");\n      isFloat = true;\n    }\n    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");\n\n    var str = input.slice(start, tokPos), val;\n    if (isFloat) val = parseFloat(str);\n    else if (!octal || str.length === 1) val = parseInt(str, 10);\n    else if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");\n    else val = parseInt(str, 8);\n    return finishToken(_num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  function readString(quote) {\n    tokPos++;\n    var ch = input.charCodeAt(tokPos);\n    var tripleQuoted = false;\n    if (ch === quote && input.charCodeAt(tokPos+1) === quote) {\n      tripleQuoted = true;\n      tokPos += 2;\n    }\n    var out = \"\";\n    for (;;) {\n      if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");\n      var ch = input.charCodeAt(tokPos);\n      if (ch === quote) {\n        if (tripleQuoted) {\n          if (input.charCodeAt(tokPos+1) === quote &&\n              input.charCodeAt(tokPos+2) === quote) {\n            tokPos += 3;\n            return finishToken(_string, out);\n          }\n        } else {\n          ++tokPos;\n          return finishToken(_string, out);\n        }\n      }\n      if (ch === 92) { // '\\'\n        ch = input.charCodeAt(++tokPos);\n        var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));\n        if (octal) octal = octal[0];\n        while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);\n        if (octal === \"0\") octal = null;\n        ++tokPos;\n        if (octal) {\n          if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");\n          out += String.fromCharCode(parseInt(octal, 8));\n          tokPos += octal.length - 1;\n        } else {\n          switch (ch) {\n          case 110: out += \"\\n\"; break; // 'n' -> '\\n'\n          case 114: out += \"\\r\"; break; // 'r' -> '\\r'\n          case 120: out += String.fromCharCode(readHexChar(2)); break; // 'x'\n          case 117: out += String.fromCharCode(readHexChar(4)); break; // 'u'\n          case 85: // 'U'\n            ch = readHexChar(8);\n            if (ch < 0xFFFF && (ch < 0xD800 || 0xDBFF < ch)) out += String.fromCharCode(ch); // If it's UTF-16\n            else { // If we need UCS-2\n              ch -= 0x10000;\n              out += String.fromCharCode((ch>>10)+0xd800)+String.fromCharCode((ch%0x400)+0xdc00);\n            }\n            break;\n          case 116: out += \"\\t\"; break; // 't' -> '\\t'\n          case 98: out += \"\\b\"; break; // 'b' -> '\\b'\n          case 118: out += \"\\u000b\"; break; // 'v' -> '\\u000b'\n          case 102: out += \"\\f\"; break; // 'f' -> '\\f'\n          case 48: out += \"\\0\"; break; // 0 -> '\\0'\n          case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos; // '\\r\\n'\n          case 10: // ' \\n'\n            if (options.locations) { tokLineStart = tokPos; ++tokCurLine; }\n            break;\n          default: out += '\\\\' + String.fromCharCode(ch); break; // Python doesn't remove slashes on failed escapes\n          }\n        }\n      } else {\n        if (isNewline(ch)) {\n          if (tripleQuoted) {\n            out += String.fromCharCode(ch);\n            ++tokPos;\n            if (ch === 13 && input.charCodeAt(tokPos) === 10) {\n              ++tokPos;\n              out += \"\\n\";\n            }\n            if (options.location) { tokLineStart = tokPos; ++tokCurLine; }\n          } else raise(tokStart, \"Unterminated string constant\");\n        } else {\n          out += String.fromCharCode(ch); // '\\'\n          ++tokPos;\n        }\n      }\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  function readHexChar(len) {\n    var n = readInt(16, len);\n    if (n === null) raise(tokStart, \"Bad character escape sequence\");\n    return n;\n  }\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n  var containsEsc;\n\n  // Read an identifier, and return it as a string. Sets `containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Only builds up the word character-by-character when it actually\n  // containeds an escape, as a micro-optimization.\n\n  function readWord1() {\n    containsEsc = false;\n    var word, first = true, start = tokPos;\n    for (;;) {\n      var ch = input.charCodeAt(tokPos);\n      if (isIdentifierChar(ch)) {\n        if (containsEsc) word += input.charAt(tokPos);\n        ++tokPos;\n      } else if (ch === 92) { // \"\\\"\n        if (!containsEsc) word = input.slice(start, tokPos);\n        containsEsc = true;\n        if (input.charCodeAt(++tokPos) != 117) // \"u\"\n          raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        ++tokPos;\n        var esc = readHexChar(4);\n        var escStr = String.fromCharCode(esc);\n        if (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");\n        if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))\n          raise(tokPos - 4, \"Invalid Unicode escape\");\n        word += escStr;\n      } else {\n        break;\n      }\n      first = false;\n    }\n    return containsEsc ? word : input.slice(start, tokPos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  function readWord() {\n    var word = readWord1();\n    var type = _name;\n    if (!containsEsc && isKeyword(word))\n      type = keywordTypes[word];\n    return finishToken(type, word);\n  }\n\n  // ## Parser\n\n  // A recursive descent parser operates by defining functions for all\n  // syntactic elements, and recursively calling those, each function\n  // advancing the input stream and returning an AST node. Precedence\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n  // instead of `(!x)[1]` is handled by the fact that the parser\n  // function that parses unary prefix operators is called first, and\n  // in turn calls the function that parses `[]` subscripts - that\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\n  // *that* in the unary operator node.\n  //\n  // Acorn uses an [operator precedence parser][opp] to handle binary\n  // operator precedence, because it is much more compact than using\n  // the technique outlined above, which uses different, nesting\n  // functions to specify precedence, for all of the ten binary\n  // precedence levels that JavaScript defines.\n  //\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n  // ### Parser utilities\n\n  // Continue to the next token.\n\n  function next() {\n    lastStart = tokStart;\n    lastEnd = tokEnd;\n    lastEndLoc = tokEndLoc;\n    readToken();\n  }\n\n  // Enter strict mode. Re-reads the next token to please pedantic\n  // tests (\"use strict\"; 010; -- should fail).\n\n  function setStrict(strct) {\n    strict = strct;\n    tokPos = tokStart;\n    if (options.locations) {\n      while (tokPos < tokLineStart) {\n        tokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;\n        --tokCurLine;\n      }\n    }\n    skipSpace();\n    readToken();\n  }\n\n  // Start an AST node, attaching a start offset.\n\n  function Node() {\n    this.type = null;\n  }\n\n  exports.Node = Node;\n\n  function SourceLocation() {\n    this.start = tokStartLoc;\n    this.end = null;\n    if (sourceFile !== null) this.source = sourceFile;\n  }\n\n  function startNode() {\n    var node = new Node();\n    if (options.locations)\n      node.loc = new SourceLocation();\n    if (options.directSourceFile)\n      node.sourceFile = options.directSourceFile;\n    if (options.ranges)\n      node.range = [tokStart, 0];\n    return node;\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNode(node, type) {\n    node.type = type;\n    if (options.locations)\n      node.loc.end = lastEndLoc;\n    if (options.ranges)\n      node.range[1] = lastEnd;\n    return node;\n  }\n\n  // Start a node whose start offset information should be based on\n  // the start of another node. For example, a binary operator node is\n  // only started after its left-hand side has already been parsed.\n\n  function startNodeFrom(other) {\n    var node = new Node();\n    if (options.locations) {\n      node.loc = new SourceLocation();\n      node.loc.start = other.loc.start;\n    }\n    if (options.ranges)\n      node.range = [other.range[0], 0];\n\n    return node;\n  }\n\n  // ## Node creation utilities\n\n  var getNodeCreator = exports.getNodeCreator = function(startNode, startNodeFrom, finishNode, unpackTuple) {\n\n    return {\n\n      // Finish a node whose end offset information should be based on\n      // the end of another node.  For example, createNode* functions\n      // are used to create extra AST nodes which may be based on a single\n      // parsed user code node.\n\n      finishNodeFrom: function (endNode, node, type) {\n        node.type = type;\n        if (options.locations) node.loc.end = endNode.loc.end;\n        if (options.ranges) node.range[1] = endNode.range[1];\n        return node;\n      },\n\n      // Create an AST node using start offsets\n\n      createNodeFrom: function (startNode, type, props) {\n        var node = startNodeFrom(startNode);\n        for (var prop in props) node[prop] = props[prop];\n        return finishNode(node, type);\n      },\n\n      // Create an AST node using start and end offsets\n\n      createNodeSpan: function (startNode, endNode, type, props) {\n        var node = startNodeFrom(startNode);\n        for (var prop in props) node[prop] = props[prop];\n        return this.finishNodeFrom(endNode, node, type);\n      },\n\n      createGeneratedNodeSpan: function (startNode, endNode, type, props) {\n        var node = startNodeFrom(startNode);\n        for (var prop in props) node[prop] = props[prop];\n        node.userCode = false;\n        return this.finishNodeFrom(endNode, node, type);\n      },\n\n      // while (__formalsIndex < __params.formals.length) {\n      //   <argsId>.push(__params.formals[__formalsIndex++]); }\n      createNodeArgsWhileConsequent: function (argsId, s) {\n        var __realArgCountId  = this.createGeneratedNodeSpan(argsId, argsId, \"Identifier\", { name:  '__realArgCount' + s });\n        var __paramsFormals  = this.createGeneratedNodeSpan(argsId, argsId, \"Identifier\", { name:  'arguments' });\n        var __formalsIndexId = this.createGeneratedNodeSpan(argsId, argsId, \"Identifier\", { name: '__formalsIndex' + s });\n        return this.createGeneratedNodeSpan(argsId, argsId, \"WhileStatement\", {\n          test: this.createGeneratedNodeSpan(argsId, argsId, \"BinaryExpression\", {\n            operator: '<', left: __formalsIndexId,\n            right: __realArgCountId\n          }),\n          body: this.createGeneratedNodeSpan(argsId, argsId, \"BlockStatement\", {\n            body: [this.createGeneratedNodeSpan(argsId, argsId, \"ExpressionStatement\", {\n              expression: this.createGeneratedNodeSpan(argsId, argsId, \"CallExpression\", {\n                callee: this.createNodeMembIds(argsId, argsId.name, 'push'),\n                arguments: [this.createGeneratedNodeSpan(argsId, argsId, \"MemberExpression\", {\n                  computed: true, object: __paramsFormals,\n                  property: this.createGeneratedNodeSpan(argsId, argsId, \"UpdateExpression\", {\n                    operator: '++', prefix: false, argument: __formalsIndexId\n                  })\n                })]\n              })\n            })]\n          })\n        });\n      },\n\n      // { while (__formalsIndex < __args.length) {\n      //   <argsId>.push(__args[__formalsIndex++]); }}\n      createNodeArgsAlternate: function (argsId, s) {\n        var __args = '__args' + s;\n        var __formalsIndexId = this.createGeneratedNodeSpan(argsId, argsId, \"Identifier\", { name: '__formalsIndex' + s });\n        return this.createGeneratedNodeSpan(argsId, argsId, \"BlockStatement\", {\n          body: [this.createGeneratedNodeSpan(argsId, argsId, \"WhileStatement\", {\n            test: this.createGeneratedNodeSpan(argsId, argsId, \"BinaryExpression\", {\n              operator: '<', left: __formalsIndexId,\n              right: this.createNodeMembIds(argsId, __args, 'length')\n            }),\n            body: this.createGeneratedNodeSpan(argsId, argsId, \"BlockStatement\", {\n              body: [this.createGeneratedNodeSpan(argsId, argsId, \"ExpressionStatement\", {\n                expression: this.createGeneratedNodeSpan(argsId, argsId, \"CallExpression\", {\n                  callee: this.createNodeMembIds(argsId, argsId.name, 'push'),\n                  arguments: [this.createGeneratedNodeSpan(argsId, argsId, \"MemberExpression\", {\n                    computed: true,\n                    object: this.createGeneratedNodeSpan(argsId, argsId, \"Identifier\", { name: __args }),\n                    property: this.createGeneratedNodeSpan(argsId, argsId, \"UpdateExpression\", {\n                      operator: '++', prefix: false, argument: __formalsIndexId\n                    })\n                  })]\n                })\n              })]\n            })\n          })]\n        });\n      },\n\n      // return (function() {<body>}).call(this);\n      createNodeFnBodyIife: function (body) {\n        var iifeBody = this.createGeneratedNodeSpan(body, body, \"FunctionExpression\", {\n          params: [], defaults: [], body: body, generator: false, expression: false\n        });\n        var iifeCall = this.createGeneratedNodeSpan(body, body, \"CallExpression\", {\n          callee: this.createGeneratedNodeSpan(body, body, \"MemberExpression\", {\n            computed: false, object: iifeBody,\n            property: this.createGeneratedNodeSpan(body, body, \"Identifier\", { name: 'call' })\n          }),\n          arguments: [this.createGeneratedNodeSpan(body, body, \"ThisExpression\")]\n        });\n        return this.createGeneratedNodeSpan(body, body, \"ReturnStatement\", { argument: iifeCall });\n      },\n\n      // E.g. Math.pow(2, 3)\n\n      createNodeMemberCall: function (node, object, property, args) {\n        var objId = this.createNodeFrom(node, \"Identifier\", { name: object });\n        var propId = this.createNodeFrom(node, \"Identifier\", { name: property });\n        var member = this.createNodeFrom(node, \"MemberExpression\", { object: objId, property: propId, computed: false });\n        node.callee = member;\n        node.arguments = args;\n        return finishNode(node, \"CallExpression\");\n      },\n\n      // o.p\n      createNodeMembIds: function(r, o, p) {\n        return this.createNodeSpan(r, r, \"MemberExpression\", {\n          computed: false,\n          object: this.createNodeSpan(r, r, \"Identifier\", { name: o }),\n          property: this.createNodeSpan(r, r, \"Identifier\", { name: p })\n        })\n      },\n\n      // o[p]\n      createNodeMembIdLit: function(r, o, p) {\n        return this.createNodeSpan(r, r, \"MemberExpression\", {\n          computed: true,\n          object: this.createNodeSpan(r, r, \"Identifier\", { name: o }),\n          property: this.createNodeSpan(r, r, \"Literal\", { value: p })\n        })\n      },\n\n      // E.g. pyRuntime.ops.add\n\n      createNodeOpsCallee: function (node, fnName) {\n        var runtimeId = this.createGeneratedNodeSpan(node, node, \"Identifier\", { name: options.runtimeParamName });\n        var opsId = this.createGeneratedNodeSpan(node, node, \"Identifier\", { name: \"ops\" });\n        var addId = this.createGeneratedNodeSpan(node, node, \"Identifier\", { name: fnName });\n        var opsMember = this.createGeneratedNodeSpan(node, node, \"MemberExpression\", { object: runtimeId, property: opsId, computed: false });\n        return this.createGeneratedNodeSpan(node, node, \"MemberExpression\", { object: opsMember, property: addId, computed: false });\n      },\n\n      // E.g. pyRuntime.utils.add\n\n      createNodeRuntimeCall: function (r, mod, fn, args) {\n        return this.createNodeSpan(r, r, \"CallExpression\", {\n          callee: this.createNodeSpan(r, r, \"MemberExpression\", {\n            computed: false,\n            object: this.createNodeMembIds(r, options.runtimeParamName,  mod),\n            property: this.createNodeSpan(r, r, \"Identifier\", { name: fn })\n          }),\n          arguments: args\n        });\n      },\n\n      // Used to convert 'id = init' to 'var id = init'\n\n      createVarDeclFromId: function (refNode, id, init) {\n        var decl = startNodeFrom(refNode);\n        decl.id = id;\n        decl.init = init;\n        this.finishNodeFrom(refNode, decl, \"VariableDeclarator\");\n        var declDecl = startNodeFrom(refNode);\n        declDecl.kind = \"var\";\n        declDecl.declarations = [decl];\n        return this.finishNodeFrom(refNode, declDecl, \"VariableDeclaration\");\n      },\n\n      createGeneratedVarDeclFromId: function (refNode, id, init) {\n        var decl = startNodeFrom(refNode);\n        decl.id = id;\n        decl.init = init;\n        this.finishNodeFrom(refNode, decl, \"VariableDeclarator\");\n        var declDecl = startNodeFrom(refNode);\n        declDecl.kind = \"var\";\n        declDecl.declarations = [decl];\n        declDecl.userCode = false;\n        return this.finishNodeFrom(refNode, declDecl, \"VariableDeclaration\");\n      },\n\n      createClass: function(container, ctorNode, classParams, classBodyRefNode, classBlock) {\n        // Helper to identify class methods which were parsed onto the class prototype\n\n        function getPrototype(stmt) {\n          if (stmt.expression && stmt.expression.left && stmt.expression.left.object &&\n            stmt.expression.left.object.property && stmt.expression.left.object.property.name === \"prototype\")\n            return stmt.expression.left.property.name;\n          return null;\n        }\n\n        // Start building class constructor\n\n        var ctorBlock = startNodeFrom(classBlock);\n        ctorBlock.body = [];\n\n        // Add parent class constructor call\n\n        if (classParams.length === 1) {\n          var objId = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"Identifier\", { name: classParams[0].name });\n          var propertyId = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"Identifier\", { name: \"call\" });\n          var calleeMember = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"MemberExpression\", { object: objId, property: propertyId, computed: false });\n          var thisExpr = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"ThisExpression\");\n          var callExpr = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"CallExpression\", { callee: calleeMember, arguments: [thisExpr] });\n          var superExpr = this.createNodeSpan(classBodyRefNode, classBodyRefNode, \"ExpressionStatement\", { expression: callExpr });\n          ctorBlock.body.push(superExpr);\n        }\n\n        // Add non-function statements and contents of special '__init__' method\n\n        for (var i in classBlock.body) {\n          var stmt = classBlock.body[i];\n          var prototype = getPrototype(stmt);\n          if (!prototype) {\n            ctorBlock.body.push(stmt);\n          }\n          else if (prototype === \"__init__\") {\n            for (var j in stmt.expression.right.body.body)\n              ctorBlock.body.push(stmt.expression.right.body.body[j]);\n            ctorNode.params = stmt.expression.right.params;\n          }\n        }\n\n        // Finish class constructor\n\n        ctorNode.body = finishNode(ctorBlock, \"BlockStatement\");\n        finishNode(ctorNode, \"FunctionDeclaration\");\n        container.body.push(ctorNode);\n\n        // Add inheritance via 'MyClass.prototype = Object.create(ParentClass.prototype)'\n\n        if (classParams.length === 1) {\n          var childClassId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: ctorNode.id.name });\n          var childPrototypeId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: \"prototype\" });\n          var childPrototypeMember = this.createNodeSpan(ctorNode, ctorNode, \"MemberExpression\", { object: childClassId, property: childPrototypeId, computed: false });\n          var parentClassId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: classParams[0].name });\n          var parentPrototypeId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: \"prototype\" });\n          var parentPrototypeMember = this.createNodeSpan(ctorNode, ctorNode, \"MemberExpression\", { object: parentClassId, property: parentPrototypeId, computed: false });\n          var objClassId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: \"Object\" });\n          var objCreateId = this.createNodeSpan(ctorNode, ctorNode, \"Identifier\", { name: \"create\" });\n          var objPropertyMember = this.createNodeSpan(ctorNode, ctorNode, \"MemberExpression\", { object: objClassId, property: objCreateId, computed: false });\n          var callExpr = this.createNodeSpan(ctorNode, ctorNode, \"CallExpression\", { callee: objPropertyMember, arguments: [parentPrototypeMember] });\n          var assignExpr = this.createNodeSpan(ctorNode, ctorNode, \"AssignmentExpression\", { left: childPrototypeMember, operator: \"=\", right: callExpr });\n          var inheritanceExpr = this.createNodeSpan(ctorNode, ctorNode, \"ExpressionStatement\", { expression: assignExpr });\n          container.body.push(inheritanceExpr);\n        }\n\n        // Add class methods, which are already prototype assignments\n\n        for (var i in classBlock.body) {\n          var stmt = classBlock.body[i];\n          var prototype = getPrototype(stmt);\n          if (prototype && prototype !== \"__init__\")\n            container.body.push(stmt);\n        }\n\n        return finishNode(container, \"BlockStatement\");\n      },\n\n      // Create for loop\n      // \n      // Problem:\n      // 1. JavaScript for/in loop iterates on properties, which are the indexes for an Array\n      //    Python iterates on the list items themselves, not indexes\n      // 2. JavaScript for/in does not necessarily iterate in order\n      // Solution:\n      // Generate extra AST to do the right thing at runtime\n      // JavaScript for/in is used for dictionaries\n      // If iterating through an ordered sequence, return something like: \n      // { var __right = right; \n      //    if (__right instanceof Array) { \n      //      for(var __index=0; __index < __right.length; __index++) {\n      //        i = __right[__index]; \n      //        ...\n      //      } \n      //    } else { \n      //      for(i in __right){...} \n      //    }\n      // }\n      // When the loop target is a Tuple, it is unpacked into each for body in the example above.\n      // E.g. 'for k, v in __right: total += v' becomes:\n      // for (var __tmp in __right) {\n      //    k = __tmp[0];\n      //    v = __tmp[1];\n      //    total += v;\n      // }\n\n      // TODO: for/in on a string should go through items, not indexes. String obj and string literal.\n\n      createFor: function (node, init, tupleArgs, right, body) {\n        var forOrderedBody = body;\n        var forInBody = JSON.parse(JSON.stringify(forOrderedBody));\n\n        var tmpVarSuffix = newAstIdCount++;\n\n        var arrayId = this.createNodeSpan(node, node, \"Identifier\", { name: \"Array\" });\n        var lengthId = this.createNodeSpan(init, init, \"Identifier\", { name: \"length\" });\n        var zeroLit = this.createNodeSpan(init, init, \"Literal\", { value: 0 });\n\n        // var __rightN = right\n\n        var rightId = this.createNodeSpan(right, right, \"Identifier\", { name: \"__filbertRight\" + tmpVarSuffix });\n        var rightAssign = this.createVarDeclFromId(right, rightId, right);\n\n        // for(;;) and for(in) loops\n\n        var forRightId = this.createNodeSpan(init, init, \"Identifier\", { name: \"__filbertRight\" + tmpVarSuffix });\n\n        // for (var __indexN; __indexN < __rightN.length; ++__indexN)\n\n        var forOrderedIndexId = this.createNodeSpan(init, init, \"Identifier\", { name: \"__filbertIndex\" + tmpVarSuffix });\n        var forOrderedIndexDeclr = this.createNodeSpan(init, init, \"VariableDeclarator\", { id: forOrderedIndexId, init: zeroLit });\n        var forOrderedIndexDecln = this.createNodeSpan(init, init, \"VariableDeclaration\", { declarations: [forOrderedIndexDeclr], kind: \"var\" });\n        var forOrderedTestMember = this.createNodeSpan(init, init, \"MemberExpression\", { object: forRightId, property: lengthId, computed: false });\n        var forOrderedTestBinop = this.createNodeSpan(init, init, \"BinaryExpression\", { left: forOrderedIndexId, operator: \"<\", right: forOrderedTestMember });\n        var forOrderedUpdate = this.createNodeSpan(init, init, \"UpdateExpression\", { operator: \"++\", prefix: true, argument: forOrderedIndexId });\n        var forOrderedMember = this.createNodeSpan(init, init, \"MemberExpression\", { object: forRightId, property: forOrderedIndexId, computed: true });\n\n        if (tupleArgs) {\n          var varStmts = unpackTuple(tupleArgs, forOrderedMember);\n          for (var i = varStmts.length - 1; i >= 0; i--) forOrderedBody.body.unshift(varStmts[i]);\n        }\n        else {\n          if (init.type === \"Identifier\" && !scope.exists(init.name)) {\n            scope.addVar(init.name);\n            forOrderedBody.body.unshift(this.createVarDeclFromId(init, init, forOrderedMember));\n          } else {\n            var forOrderedInit = this.createNodeSpan(init, init, \"AssignmentExpression\", { operator: \"=\", left: init, right: forOrderedMember });\n            var forOrderedInitStmt = this.createNodeSpan(init, init, \"ExpressionStatement\", { expression: forOrderedInit });\n            forOrderedBody.body.unshift(forOrderedInitStmt);\n          }\n        }\n\n        var forOrdered = this.createNodeSpan(node, node, \"ForStatement\", { init: forOrderedIndexDecln, test: forOrderedTestBinop, update: forOrderedUpdate, body: forOrderedBody });\n        var forOrderedBlock = this.createNodeSpan(node, node, \"BlockStatement\", { body: [forOrdered] });\n\n        // for (init in __rightN)\n\n        var forInLeft = init;\n        if (tupleArgs) {\n          var varStmts = unpackTuple(tupleArgs, right);\n          forInLeft = varStmts[0];\n          for (var i = varStmts.length - 1; i > 0; i--) forInBody.body.unshift(varStmts[i]);\n        }\n        else if (init.type === \"Identifier\" && !scope.exists(init.name)) {\n          scope.addVar(init.name);\n          forInLeft = this.createVarDeclFromId(init, init, null);\n        }\n        var forIn = this.createNodeSpan(node, node, \"ForInStatement\", { left: forInLeft, right: forRightId, body: forInBody });\n        var forInBlock = this.createNodeSpan(node, node, \"BlockStatement\", { body: [forIn] });\n\n        // if ordered sequence then forOrdered else forIn\n\n        var ifRightId = this.createNodeSpan(node, node, \"Identifier\", { name: \"__filbertRight\" + tmpVarSuffix });\n        var ifTest = this.createNodeSpan(node, node, \"BinaryExpression\", { left: ifRightId, operator: \"instanceof\", right: arrayId });\n        var ifStmt = this.createNodeSpan(node, node, \"IfStatement\", { test: ifTest, consequent: forOrderedBlock, alternate: forInBlock });\n\n        node.body = [rightAssign, ifStmt];\n\n        return node;\n      },\n\n      // expr => __tmpList.push(expr);\n\n      createListCompPush: function (expr, tmpVarSuffix) {\n        var exprPushTmpListId = this.createNodeSpan(expr, expr, \"Identifier\", { name: \"__tmpList\" + tmpVarSuffix });\n        var exprPushId = this.createNodeSpan(expr, expr, \"Identifier\", { name: \"push\" });\n        var exprMember = this.createNodeSpan(expr, expr, \"MemberExpression\", { object: exprPushTmpListId, property: exprPushId, computed: false });\n        var exprCall = this.createNodeSpan(expr, expr, \"CallExpression\", { callee: exprMember, arguments: [expr] });\n        return this.createNodeSpan(expr, expr, \"ExpressionStatement\", { expression: exprCall });\n      },\n\n      //  (function() {\n      //    var _list = [];\n      //    ...\n      //    body\n      //    return _list;\n      //  }());\n\n      createListCompIife: function (node, body, tmpVarSuffix) {\n        var iifeRuntimeId = this.createNodeSpan(node, node, \"Identifier\", { name: options.runtimeParamName });\n        var iifeObjectsId = this.createNodeSpan(node, node, \"Identifier\", { name: \"objects\" });\n        var iifeObjMember = this.createNodeSpan(node, node, \"MemberExpression\", { object: iifeRuntimeId, property: iifeObjectsId, computed: false });\n        var iifeListId = this.createNodeSpan(node, node, \"Identifier\", { name: \"list\" });\n        var iifeListMember = this.createNodeSpan(node, node, \"MemberExpression\", { object: iifeObjMember, property: iifeListId, computed: false });\n        var iifeNewExpr = this.createNodeSpan(node, node, \"NewExpression\", { callee: iifeListMember, arguments: [] });\n        var iifeListId = this.createNodeSpan(node, node, \"Identifier\", { name: \"__tmpList\" + tmpVarSuffix });\n        var iifeListDecl = this.createVarDeclFromId(node, iifeListId, iifeNewExpr);\n\n        var iifeReturnListId = this.createNodeSpan(node, node, \"Identifier\", { name: \"__tmpList\" + tmpVarSuffix });\n        var iifeReturn = this.createNodeSpan(node, node, \"ReturnStatement\", { argument: iifeReturnListId });\n\n        var iifeBlock = this.createNodeSpan(node, node, \"BlockStatement\", { body: [iifeListDecl, body, iifeReturn] });\n        var fnExpr = this.createNodeSpan(node, node, \"FunctionExpression\", { params: [], defaults: [], body: iifeBlock, generator: false, expression: false });\n\n        return this.createNodeSpan(node, node, \"CallExpression\", { callee: fnExpr, arguments: [] });\n      }\n    };\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  function eat(type) {\n    if (tokType === type) {\n      next();\n      return true;\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  function expect(type) {\n    if (tokType === type) next();\n    else unexpected();\n  }\n\n  // Raise an unexpected token error.\n\n  function unexpected() {\n    raise(tokStart, \"Unexpected token\");\n  }\n\n  // Verify that a node is an lval - something that can be assigned\n  // to.\n\n  function checkLVal(expr) {\n    if (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\")\n      raise(expr.start, \"Assigning to rvalue\");\n    if (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name))\n      raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");\n  }\n\n  // Get args for a new tuple expression\n\n  function getTupleArgs(expr) {\n    if (expr.callee && expr.callee.object && expr.callee.object.object &&\n      expr.callee.object.object.name === options.runtimeParamName &&\n      expr.callee.property && expr.callee.property.name === \"tuple\")\n      return expr.arguments;\n    return null;\n  }\n\n  // Unpack an lvalue tuple into indivual variable assignments\n  // 'arg0, arg1 = right' becomes:\n  // var tmp = right\n  // arg0 = tmp[0]\n  // arg1 = tmp[1]\n  // ...\n\n  function unpackTuple(tupleArgs, right) {\n    if (!tupleArgs || tupleArgs.length < 1) unexpected();\n\n    var varStmts = [];\n\n    // var tmp = right\n\n    var tmpId = nc.createNodeSpan(right, right, \"Identifier\", { name: \"__filbertTmp\" + newAstIdCount++ });\n    var tmpDecl = nc.createVarDeclFromId(right, tmpId, right);\n    varStmts.push(tmpDecl);\n\n    // argN = tmp[N]\n\n    for (var i = 0; i < tupleArgs.length; i++) {\n      var lval = tupleArgs[i];\n      var subTupleArgs = getTupleArgs(lval);\n      if (subTupleArgs) {\n        var subLit = nc.createNodeSpan(right, right, \"Literal\", { value: i });\n        var subRight = nc.createNodeSpan(right, right, \"MemberExpression\", { object: tmpId, property: subLit, computed: true });\n        var subStmts = unpackTuple(subTupleArgs, subRight);\n        for (var j = 0; j < subStmts.length; j++) varStmts.push(subStmts[j]);\n      } else {\n        checkLVal(lval);\n        var indexId = nc.createNodeSpan(right, right, \"Literal\", { value: i });\n        var init = nc.createNodeSpan(right, right, \"MemberExpression\", { object: tmpId, property: indexId, computed: true });\n        if (lval.type === \"Identifier\" && !scope.exists(lval.name)) {\n          scope.addVar(lval.name);\n          var varDecl = nc.createVarDeclFromId(lval, lval, init);\n          varStmts.push(varDecl);\n        }\n        else {\n          var node = startNodeFrom(lval);\n          node.left = lval;\n          node.operator = \"=\";\n          node.right = init;\n          finishNode(node, \"AssignmentExpression\");\n          varStmts.push(nc.createNodeFrom(node, \"ExpressionStatement\", { expression: node }));\n        }\n      }\n    }\n\n    return varStmts;\n  }\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  function parseTopLevel(program) {\n    lastStart = lastEnd = tokPos;\n    if (options.locations) lastEndLoc = new Position;\n    inFunction = strict = null;\n    bracketNesting = 0;\n    readToken();\n    var node = program || startNode();\n    if (!program) node.body = [];\n    while (tokType !== _eof) {\n      var stmt = parseStatement();\n      if (stmt) node.body.push(stmt);\n    }\n    return finishNode(node, \"Program\");\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo);`, where looking at the previous token\n  // does not help.\n\n  function parseStatement() {\n    if (tokType === _slash || tokType === _assign && tokVal == \"/=\")\n      readToken(true);\n\n    var starttype = tokType, node = startNode();\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n\n    case _break:\n      next();\n      return finishNode(node, \"BreakStatement\");\n\n    case _continue:\n      next();\n      return finishNode(node, \"ContinueStatement\");\n\n    case _class:\n      next();\n      return parseClass(node);\n\n    case _def:\n      next();\n      return parseFunction(node);\n\n    case _for:\n      next();\n      return parseFor(node);\n\n    case _from: // Skipping from and import statements for now\n      skipLine();\n      next();\n      return parseStatement();\n\n    case _if: case _elif:\n      next();\n      if (tokType === _parenL) node.test = parseParenExpression();\n      else node.test = parseExpression();\n      expect(_colon);\n      node.consequent = parseSuite();\n      if (tokType === _elif) {\n        node.alternate = parseStatement();\n      }\n      else if (eat(_else)) {\n        expect(_colon);\n        eat(_colon);\n        node.alternate = parseSuite();\n      }\n      else {\n        node.alternate = null;\n      } \n      return finishNode(node, \"IfStatement\");\n\n    case _import: // Skipping from and import statements for now\n      skipLine();\n      next();\n      return parseStatement();\n\n    case _newline:\n      // TODO: parseStatement() should probably eat it's own newline\n      next();\n      return null;\n\n    case _pass:\n      next();\n      return finishNode(node, \"EmptyStatement\");\n\n    case _return:\n      if (!inFunction && !options.allowReturnOutsideFunction)\n        raise(tokStart, \"'return' outside of function\");\n      next();\n      if (tokType ===_newline || tokType === _eof) node.argument = null;\n      else { node.argument = parseExpression();}\n      return finishNode(node, \"ReturnStatement\");\n\n    case _try: // TODO, and remove parseBlock\n      next();\n      node.block = parseBlock();\n      node.handler = null;\n      if (tokType === _catch) {\n        var clause = startNode();\n        next();\n        expect(_parenL);\n        clause.param = parseIdent();\n        if (strict && isStrictBadIdWord(clause.param.name))\n          raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");\n        expect(_parenR);\n        clause.guard = null;\n        clause.body = parseBlock();\n        node.handler = finishNode(clause, \"CatchClause\");\n      }\n      node.guardedHandlers = empty;\n      node.finalizer = eat(_finally) ? parseBlock() : null;\n      if (!node.handler && !node.finalizer)\n        raise(node.start, \"Missing catch or finally clause\");\n      return finishNode(node, \"TryStatement\");\n\n    case _while:\n      next();\n      if (tokType === _parenL) node.test = parseParenExpression();\n      else node.test = parseExpression();\n      expect(_colon);\n      node.body = parseSuite();\n      return finishNode(node, \"WhileStatement\");\n\n    case _with: // TODO\n      if (strict) raise(tokStart, \"'with' in strict mode\");\n      next();\n      node.object = parseParenExpression();\n      node.body = parseStatement();\n      return finishNode(node, \"WithStatement\");\n\n    case _semi:\n      next();\n      return finishNode(node, \"EmptyStatement\");\n\n      // Assume it's an ExpressionStatement. If an assign has been \n      // converted to a variable declaration, pass it up as is.\n\n    default:\n      var expr = parseExpression();\n      if (tokType !== _semi && tokType !== _newline && tokType !== _eof) unexpected();\n      if (expr.type === \"VariableDeclaration\" || expr.type === \"BlockStatement\") {\n        return expr;\n      } else {\n        node.expression = expr;\n        return finishNode(node, \"ExpressionStatement\");\n      }\n    }\n  }\n\n  // Parse indent-enclosed block of statements\n\n  function parseBlock() {\n    var node = startNode();\n    node.body = [];\n    while (tokType !== _dedent && tokType !== _eof) {\n      var stmt = parseStatement();\n      if (stmt) node.body.push(stmt);\n    }\n    if (tokType === _dedent) next();\n    return finishNode(node, \"BlockStatement\");\n  }\n\n  // Parse 'suite' from Python grammar spec\n  // Will replace parseBlock eventually\n\n  function parseSuite() {\n    // NOTE: This is not strictly valid Python for this to be an empty block\n    var node = startNode();\n    node.body = [];\n    if (eat(_newline)) {\n      if (tokType === _indent) {\n        expect(_indent);\n        while (!eat(_dedent) && !eat(_eof)) {\n          var stmt = parseStatement();\n          if (stmt) node.body.push(stmt);\n        }\n      }\n    } else if (tokType !== _eof) {\n      node.body.push(parseStatement());\n      next();\n    }\n    return finishNode(node, \"BlockStatement\");\n  }\n\n  // Parse for/in loop\n\n  function parseFor(node) {\n    var init = parseExpression(false, true);\n    var tupleArgs = getTupleArgs(init);\n    if (!tupleArgs) checkLVal(init);\n    expect(_in);\n    var right = parseExpression();\n    expect(_colon);\n    var body = parseSuite();\n    finishNode(node, \"BlockStatement\");\n    return nc.createFor(node, init, tupleArgs, right, body);\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The arguments are used to forbid comma\n  // sequences (in argument lists, array literals, or object literals)\n  // or the `in` operator (in for loops initalization expressions).\n\n  function parseExpression(noComma, noIn) {\n    return parseMaybeAssign(noIn);\n  }\n\n  // Used for constructs like `switch` and `if` that insist on\n  // parentheses around their expression.\n\n  function parseParenExpression() {\n    expect(_parenL);\n    var val = parseExpression();\n    expect(_parenR);\n    return val;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // Add 'this.' to assignments in a class constructor.\n  // Convert identifier assignment to variable declaration if the\n  // identifier doesn't exist in this namespace yet.\n\n  function parseMaybeAssign(noIn) {\n    var left = parseMaybeTuple(noIn);\n    if (tokType.isAssign) {\n      var tupleArgs = getTupleArgs(left);\n      if (tupleArgs) {\n        next();\n        var right = parseMaybeTuple(noIn);\n        var blockNode = startNodeFrom(left);\n        blockNode.body = unpackTuple(tupleArgs, right);\n        return finishNode(blockNode, \"BlockStatement\");\n      }\n\n      if (scope.isClass()) {\n        var thisExpr = nc.createNodeFrom(left, \"ThisExpression\");\n        left = nc.createNodeFrom(left, \"MemberExpression\", { object: thisExpr, property: left });\n      }\n\n      var node = startNodeFrom(left);\n      node.operator = tokVal;\n      node.left = left;\n      next();\n      node.right = parseMaybeTuple(noIn);\n      checkLVal(left);\n\n      if (node.operator === '+=' || node.operator === '*=') {\n        var right = nc.createNodeSpan(node.right, node.right, \"CallExpression\");\n        right.callee = nc.createNodeOpsCallee(right, node.operator === '+=' ? \"add\" : \"multiply\");\n        right.arguments = [left, node.right];\n        node.right = right;\n        node.operator = '=';\n      }\n\n      if (left.type === \"Identifier\" && !scope.exists(left.name)) {\n        if (!node.operator || node.operator.length > 1) unexpected();\n        scope.addVar(left.name);\n        return nc.createVarDeclFromId(node.left, node.left, node.right);\n      }\n      return finishNode(node, \"AssignmentExpression\");\n    }\n    return left;\n  }\n\n  // Parse a tuple\n\n  function parseMaybeTuple(noIn) {\n    var expr = parseExprOps(noIn);\n    if (tokType === _comma) {\n      return parseTuple(noIn, expr);\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  function parseExprOps(noIn) {\n    return parseExprOp(parseMaybeUnary(noIn), -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n  // Exponentiation is evaluated right-to-left, so 'prec >= minPrec'\n  // Exponentiation operator 'x**y' is replaced with 'Math.pow(x, y)'\n  // Floor division operator 'x//y' is replaced with 'Math.floor(x/y)'\n  // 'in' and 'not in' implemented via indexOf()\n\n  function parseExprOp(left, minPrec, noIn) {\n    var node, exprNode, right, op = tokType, val = tokVal;\n    var prec = op === _not ? _in.prec : op.prec;\n    if (op === _exponentiation && prec >= minPrec) {\n      node = startNodeFrom(left);\n      next();\n      right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\n      exprNode = nc.createNodeMemberCall(node, \"Math\", \"pow\", [left, right]);\n      return parseExprOp(exprNode, minPrec, noIn);\n    } else if (prec != null && (!noIn || op !== _in)) {\n      if (prec > minPrec) {\n        next();\n        node = startNodeFrom(left);\n        if (op === _floorDiv) {\n          right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\n          finishNode(node);\n          var binExpr = nc.createNodeSpan(node, node, \"BinaryExpression\", { left: left, operator: '/', right: right });\n          exprNode = nc.createNodeMemberCall(node, \"Math\", \"floor\", [binExpr]);\n        } else if (op === _in || op === _not) {\n          if (op === _in || eat(_in)) {\n            right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\n            finishNode(node);\n            var notLit = nc.createNodeSpan(node, node, \"Literal\", { value: op === _not });\n            exprNode = nc.createNodeRuntimeCall(node, 'ops', 'in', [left, right, notLit]);\n          } else raise(tokPos, \"Expected 'not in' comparison operator\");\n        } else if (op === _plusMin && val === '+' || op === _multiplyModulo && val === '*') {\n          node.arguments = [left];\n          node.arguments.push(parseExprOp(parseMaybeUnary(noIn), prec, noIn));\n          finishNode(node, \"CallExpression\");\n          node.callee = nc.createNodeOpsCallee(node, op === _plusMin ? \"add\" : \"multiply\");\n          exprNode = node;\n        } else {\n          if (op === _is) {\n            if (eat(_not)) node.operator = \"!==\";\n            else node.operator = \"===\";\n          } else node.operator = op.rep != null ? op.rep : val;\n          node.left = left;\n          node.right = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\n          exprNode = finishNode(node, (op === _or || op === _and) ? \"LogicalExpression\" : \"BinaryExpression\");\n        }\n        return parseExprOp(exprNode, minPrec, noIn);\n      }\n    }\n    return left;\n  }\n\n  // Parse unary operators.\n  // '-+' are prefixes here, with different precedence.\n\n  function parseMaybeUnary(noIn) {\n    if (tokType.prefix || tokType === _plusMin) {\n      var prec = tokType === _plusMin ? _posNegNot.prec : tokType.prec;\n      var node = startNode();\n      node.operator = tokType.rep != null ? tokType.rep : tokVal;\n      node.prefix = true;\n      tokRegexpAllowed = true;\n      next();\n      node.argument = parseExprOp(parseMaybeUnary(noIn), prec, noIn);\n      return finishNode(node, \"UnaryExpression\");\n    }\n    return parseSubscripts(parseExprAtom());\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  function parseSubscripts(base, noCalls) {\n    var node = startNodeFrom(base);\n    if (eat(_dot)) {\n      var id = parseIdent(true);\n      if (pythonRuntime.imports[base.name] && pythonRuntime.imports[base.name][id.name]) {\n        // Calling a Python import function\n        // TODO: Unpack parameters into JavaScript-friendly parameters\n        var runtimeId = nc.createNodeSpan(base, base, \"Identifier\", { name: options.runtimeParamName });\n        var importsId = nc.createNodeSpan(base, base, \"Identifier\", { name: \"imports\" });\n        var runtimeMember = nc.createNodeSpan(base, base, \"MemberExpression\", { object: runtimeId, property: importsId, computed: false });\n        node.object = nc.createNodeSpan(base, base, \"MemberExpression\", { object: runtimeMember, property: base, computed: false });\n      } else if (base.name && base.name === scope.getThisReplace()) {\n        node.object = nc.createNodeSpan(base, base, \"ThisExpression\");\n      } else node.object = base;\n      node.property = id;\n      node.computed = false;\n      return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n    } else if (eat(_bracketL)) {\n      var expr, isSlice = false;\n      if (eat(_colon)) isSlice = true;\n      else expr = parseExpression();\n      if (!isSlice && eat(_colon)) isSlice = true;\n      if (isSlice) return parseSlice(node, base, expr, noCalls);\n      var subscriptCall = nc.createNodeSpan(expr, expr, \"CallExpression\");\n      subscriptCall.callee = nc.createNodeOpsCallee(expr, \"subscriptIndex\");\n      subscriptCall.arguments = [base, expr];\n      node.object = base;\n      node.property = subscriptCall;\n      node.computed = true;\n      expect(_bracketR);\n      return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);\n    } else if (!noCalls && eat(_parenL)) {\n      if (scope.isUserFunction(base.name)) {\n        // Unpack parameters into JavaScript-friendly parameters, further processed at runtime\n        var pl = parseParamsList();\n        \n        var args = [];\n        var other = [];\n        for ( var i = 0; i < pl.length; ++i ) {\n          if ( pl[i].isntFormal ) other.push(pl[i]);\n          else args.push(pl[i]);\n        }\n\n        if ( other.length > 0 ) {\n          var createParamsCall = nc.createNodeRuntimeCall(node, 'utils', 'createParamsObj', other);\n          args.push(createParamsCall);\n        }\n\n        node.arguments = args;\n      } else node.arguments = parseExprList(_parenR, false);\n\n\n      if ( base.name === 'len' && node.arguments.length === 1 ) {\n        node.type = \"MemberExpression\",\n        node.object = node.arguments[0];\n        node.property = nc.createNodeSpan(base, base, \"Identifier\", { name: \"length\"}),\n        node.computed = false;\n        delete node.arguments;\n        delete node.callee;\n        finishNode(node, \"MemberExpression\");\n        return node; \n      }\n\n      if (scope.isNewObj(base.name)) finishNode(node, \"NewExpression\");\n      else finishNode(node, \"CallExpression\");\n\n      if (pythonRuntime.functions[base.name]) {\n        // Calling a Python built-in function\n        // TODO: Unpack parameters into JavaScript-friendly parameters\n        if (base.type !== \"Identifier\") unexpected();\n        var runtimeId = nc.createNodeSpan(base, base, \"Identifier\", { name: options.runtimeParamName });\n        var functionsId = nc.createNodeSpan(base, base, \"Identifier\", { name: \"functions\" });\n        var runtimeMember = nc.createNodeSpan(base, base, \"MemberExpression\", { object: runtimeId, property: functionsId, computed: false });\n        node.callee = nc.createNodeSpan(base, base, \"MemberExpression\", { object: runtimeMember, property: base, computed: false });\n      } else node.callee = base;\n      return parseSubscripts(node, noCalls);\n    }\n    return base;\n  }\n\n  function parseSlice(node, base, start, noCalls) {\n    var end, step;\n    if (!start) start = nc.createNodeFrom(node, \"Literal\", { value: null });\n    if (tokType === _bracketR || eat(_colon)) {\n      end = nc.createNodeFrom(node, \"Literal\", { value: null });\n    } else {\n      end = parseExpression();\n      if (tokType !== _bracketR) expect(_colon);\n    }\n    if (tokType === _bracketR) step = nc.createNodeFrom(node, \"Literal\", { value: null });\n    else step = parseExpression();\n    expect(_bracketR);\n\n    node.arguments = [start, end, step];\n    var sliceId = nc.createNodeFrom(base, \"Identifier\", { name: \"_pySlice\" });\n    var memberExpr = nc.createNodeSpan(base, base, \"MemberExpression\", { object: base, property: sliceId, computed: false });\n    node.callee = memberExpr;\n    return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);\n  }\n\n  // Parse an atomic expression - either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  function parseExprAtom() {\n    switch (tokType) {\n\n    case _dict:\n      next();\n      return parseDict(_parenR);\n\n    case _name:\n      return parseIdent();\n\n    case _num: case _string: case _regexp:\n      var node = startNode();\n      node.value = tokVal;\n      node.raw = input.slice(tokStart, tokEnd);\n      next();\n      return finishNode(node, \"Literal\");\n\n    case _none: case _true: case _false:\n      var node = startNode();\n      node.value = tokType.atomValue;\n      node.raw = tokType.keyword;\n      next();\n      return finishNode(node, \"Literal\");\n\n    case _parenL:\n      var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;\n      next();\n      if (tokType === _parenR) {\n        // Empty tuple\n        var node = parseTuple(false);\n        eat(_parenR);\n        return node;\n      }\n      var val = parseMaybeTuple(false);\n      if (options.locations) {\n        val.loc.start = tokStartLoc1;\n        val.loc.end = tokEndLoc;\n      }\n      if (options.ranges)\n        val.range = [tokStart1, tokEnd];\n      expect(_parenR);\n      return val;\n\n    case _bracketL:\n      return parseList();\n\n    case _braceL:\n      return parseDict(_braceR);\n\n    case _indent:\n      raise(tokStart, \"Unexpected indent\");\n\n    default:\n      unexpected();\n    }\n  }\n\n  // Parse list\n\n  // Custom list object is used to simulate native Python list\n  // E.g. Python '[]' becomes JavaScript 'new __pythonRuntime.objects.list();'\n  // If list comprehension, build something like this:\n  //(function() {\n  //  var _list = [];\n  //  ...\n  //  _list.push(expr);\n  //  return _list;\n  //}());\n\n  function parseList() {\n    var node = startNode();\n    node.arguments = [];\n    next();\n\n    if (!eat(_bracketR)) {\n      var expr = parseExprOps(false);\n      if (tokType === _for || tokType === _if) {\n\n        // List comprehension\n        var tmpVarSuffix = newAstIdCount++;\n        expr = nc.createListCompPush(expr, tmpVarSuffix);\n        var body = parseCompIter(expr, true);\n        finishNode(node);\n        return nc.createListCompIife(node, body, tmpVarSuffix);\n\n      } else if (eat(_comma)) {\n        node.arguments = [expr].concat(parseExprList(_bracketR, true, false));\n      }\n      else {\n        expect(_bracketR);\n        node.arguments = [expr];\n      }\n    }\n\n    finishNode(node, \"NewExpression\");\n    var runtimeId = nc.createNodeSpan(node, node, \"Identifier\", { name: options.runtimeParamName });\n    var objectsId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"objects\" });\n    var runtimeMember = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeId, property: objectsId, computed: false });\n    var listId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"list\" });\n    node.callee = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeMember, property: listId, computed: false });\n    return node;\n  }\n\n  // Parse a comp_iter from Python language grammar\n  // Used to build list comprehensions\n  // 'expr' is the body to be used after unrolling the ifs and fors\n\n  function parseCompIter(expr, first) {\n    if (first && tokType !== _for) unexpected();\n    if (eat(_bracketR)) return expr;\n    var node = startNode();\n    if (eat(_for)) {\n      var init = parseExpression(false, true);\n      var tupleArgs = getTupleArgs(init);\n      if (!tupleArgs) checkLVal(init);\n      expect(_in);\n      var right = parseExpression();\n      var body = parseCompIter(expr, false);\n      var block = nc.createNodeSpan(body, body, \"BlockStatement\", { body: [body] });\n      finishNode(node, \"BlockStatement\");\n      return nc.createFor(node, init, tupleArgs, right, block);\n    } else if (eat(_if)) {\n      if (tokType === _parenL) node.test = parseParenExpression();\n      else node.test = parseExpression();\n      node.consequent = parseCompIter(expr, false);\n      return finishNode(node, \"IfStatement\");\n    } else unexpected();\n  }\n\n  // Parse class\n\n  function parseClass(ctorNode) {\n    // Container for class constructor and prototype functions\n    var container = startNodeFrom(ctorNode);\n    container.body = [];\n\n    // Parse class signature\n    ctorNode.id = parseIdent();\n    ctorNode.params = [];\n    var classParams = [];\n    if (eat(_parenL)) {\n      var first = true;\n      while (!eat(_parenR)) {\n        if (!first) expect(_comma); else first = false;\n        classParams.push(parseIdent());\n      }\n    }\n    if (classParams.length > 1) raise(tokPos, \"Multiple inheritance not supported\");\n    expect(_colon);\n\n    // Start new namespace for class body\n    scope.startClass(ctorNode.id.name);\n\n    // Save a reference for source ranges\n    var classBodyRefNode = finishNode(startNode());\n\n    // Parse class body\n    var classBlock = parseSuite();\n\n    // Generate additional AST to implement class\n    var classStmt = nc.createClass(container, ctorNode, classParams, classBodyRefNode, classBlock);\n\n    scope.end();\n\n    return classStmt;\n  }\n\n  // Parse dictionary\n  // Custom dict object used to simulate native Python dict\n  // E.g. \"{'k1':'v1', 'k2':'v2'}\" becomes \"new __pythonRuntime.objects.dict(['k1', 'v1'], ['k2', 'v2']);\"\n\n  function parseDict(tokClose) {\n    var node = startNode(), first = true, key, value;\n    node.arguments = [];\n    next();\n    while (!eat(tokClose)) {\n      if (!first) {\n        expect(_comma);\n      } else first = false;\n\n      if (tokClose === _braceR) {\n        key = parsePropertyName();\n        expect(_colon);\n        value = parseExprOps(false);\n      } else if (tokClose === _parenR) {\n        var keyId = parseIdent(true);\n        key = startNodeFrom(keyId);\n        key.value = keyId.name;\n        finishNode(key, \"Literal\");\n        expect(_eq);\n        value = parseExprOps(false);\n      } else unexpected();\n      node.arguments.push(nc.createNodeSpan(key, value, \"ArrayExpression\", { elements: [key, value] }));\n    }\n    finishNode(node, \"NewExpression\");\n\n    var runtimeId = nc.createNodeSpan(node, node, \"Identifier\", { name: options.runtimeParamName });\n    var objectsId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"objects\" });\n    var runtimeMember = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeId, property: objectsId, computed: false });\n    var listId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"dict\" });\n    node.callee = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeMember, property: listId, computed: false });\n\n    return node;\n  }\n\n  function parsePropertyName() {\n    if (tokType === _num || tokType === _string) return parseExprAtom();\n    return parseIdent(true);\n  }\n\n  function parseFunction(node) {\n    // TODO: The node creation utilities used here are tightly coupled (e.g. variable names)\n\n    var suffix = newAstIdCount++;\n    node.id = parseIdent();\n    node.params = [];\n\n    // Parse parameters\n\n    var formals = [];     // In order, maybe with default value\n    var argsId = null;    // *args\n    var kwargsId = null;  // **kwargs\n    var defaultsFound = false;\n    var first = true;\n\n    scope.startFn(node.id.name);\n\n    expect(_parenL);\n    while (!eat(_parenR)) {\n      if (!first) expect(_comma); else first = false;\n      if (tokVal === '*') {\n        if (kwargsId) raise(tokPos, \"invalid syntax\");\n        next(); argsId = parseIdent();\n      } else if (tokVal === '**') {\n        next(); kwargsId = parseIdent();\n      } else {\n        if (kwargsId) raise(tokPos, \"invalid syntax\");\n        var paramId = parseIdent();\n        if (eat(_eq)) {\n          formals.push({ id: paramId, expr: parseExprOps(false) });\n          defaultsFound = true;\n        } else {\n          if (defaultsFound) raise(tokPos, \"non-default argument follows default argument\");\n          if (argsId) raise(tokPos, \"missing required keyword-only argument\");\n          formals.push({ id: paramId, expr: null });\n        }\n        scope.addVar(paramId.name);\n      }\n    }\n    expect(_colon);\n\n    // Start a new scope with regard to the `inFunction`\n    // flag (restore them to their old value afterwards).\n    // `inFunction` used to throw syntax error for stray `return`\n    var oldInFunc = inFunction = true;\n\n    // If class method, remove class instance var from params and save for 'this' replacement\n    if (scope.isParentClass()) {\n      var selfId = formals.shift();\n      scope.setThisReplace(selfId.id.name);\n    }\n\n    var body = parseSuite();\n    node.body = nc.createNodeSpan(body, body, \"BlockStatement\", { body: [] });\n\n    // Add runtime parameter processing\n    // The caller may pass a complex parameter object as a single parameter like this:\n    // {formals:[<expr>, <expr>, ...], keywords:{<id>:<expr>, <id>:<expr>, ...}}\n\n    var r = node.id;\n    var __hasParams = nc.createNodeSpan(r, r, \"Identifier\", { name: '__hasParams' + suffix });\n    var __params = nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: '__params' + suffix });\n    var __realArgCount = nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: '__realArgCount' + suffix });\n\n    if (formals.length > 0 || argsId || kwargsId) {\n      var argumentsLen = nc.createNodeSpan(r, r, \"BinaryExpression\", {\n        operator: '-',\n        left: nc.createNodeMembIds(r, 'arguments', 'length'),\n        right: nc.createNodeSpan(r, r, \"Literal\", { value: 1 })\n      });\n\n      var argumentsN = nc.createNodeSpan(r, r, \"MemberExpression\", {\n        computed: true, object: nc.createNodeSpan(r, r, \"Identifier\", { name: 'arguments' }),\n        property: argumentsLen\n      });\n\n      // var __hasParams = arguments.length === 1 && arguments[arguments.length-1].formals && arguments[arguments.length-1].keywords;\n      var setHasParams = nc.createNodeSpan(r, r, \"LogicalExpression\", {\n        operator: '&&',\n        left: nc.createNodeSpan(r, r, \"LogicalExpression\", {\n          operator: '&&',\n          left: nc.createNodeSpan(r, r, \"BinaryExpression\", {\n            operator: '>',\n            left: nc.createNodeMembIds(r, 'arguments', 'length'),\n            right: nc.createNodeSpan(r, r, \"Literal\", { value: 0 })\n          }),\n          right: argumentsN\n        }),\n        right: nc.createNodeSpan(r, r, \"MemberExpression\", {\n          computed: false, object: argumentsN,\n          property: nc.createNodeSpan(r, r, \"Identifier\", { name: 'keywords' }),\n        })\n      });\n\n      node.body.body.push(nc.createGeneratedVarDeclFromId(r, __hasParams, setHasParams));\n\n      //var __params = __hasParams ? arguments[arguments.length - 1].keywords : {};\n      var setParams = nc.createNodeSpan(r, r, \"ConditionalExpression\", {\n        test: __hasParams,\n        consequent: nc.createNodeSpan(r, r, \"MemberExpression\", {\n          computed: false, object: argumentsN,\n          property: nc.createNodeSpan(r, r, \"Identifier\", { name: 'keywords' }),\n        }),\n        alternate: nc.createNodeSpan(r, r, \"ObjectExpression\", { properties: [] })\n      });\n      node.body.body.push(nc.createGeneratedVarDeclFromId(r, __params, setParams));\n\n      // var __realArgCount = arguments.length - __params0 ? 0 : 1;\n      var setRealArgCount = (nc.createGeneratedVarDeclFromId(node.id,\n        __realArgCount,\n        nc.createNodeSpan(node.id, node.id, \"BinaryExpression\", {\n          operator: '-',\n          left: nc.createNodeMembIds(node.id, 'arguments', 'length'),\n          //right: nc.createNodeSpan(node.id, node.id, \"Literal\", { value: 0 })\n          right: nc.createNodeSpan(node.id, node.id, \"ConditionalExpression\", {\n            test: __hasParams,\n            consequent: nc.createNodeSpan(node.id, node.id, \"Literal\", { value: 1 }),\n            alternate: nc.createNodeSpan(node.id, node.id, \"Literal\", { value: 0 })\n          })\n        })\n      ));\n\n      node.body.body.push(setRealArgCount);\n    }\n\n    // Verify that argument names are not repeated\n    for (var i = 0; i < formals.length; ++i) {\n      node.params.push(formals[i].id);\n      for (var j = 0; j < i; ++j) if (formals[i].id.name === formals[j].id.name)\n        raise(formals[i].id.start, \"Argument name clash\");\n    }\n\n\n    for ( i = 0; i < formals.length; ++i) {\n      var argName = nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: formals[i].id.name });\n      var argNameStr = nc.createNodeSpan(node.id, node.id, \"Literal\", { value: formals[i].id.name });\n      var argSet = nc.createNodeSpan(node.id, node.id, \"AssignmentExpression\", {\n        operator: '=',\n        left: argName,\n        right: nc.createNodeSpan(node.id, node.id, \"ConditionalExpression\", {\n          test: nc.createNodeSpan(node.id, node.id, \"BinaryExpression\", { operator: 'in', left: argNameStr, right: __params }),\n          consequent: nc.createNodeSpan(node, node, \"MemberExpression\", { object: __params, property: argNameStr, computed: true }),\n          alternate: formals[i].expr ? formals[i].expr : nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: 'undefined' })\n        })\n      });\n\n      var argCheck = nc.createNodeSpan(node.id, node.id, \"IfStatement\", {\n        test: nc.createNodeSpan(node.id, node.id, \"BinaryExpression\", {\n          operator: '<',\n          left: __realArgCount,\n          right:  nc.createNodeSpan(node.id, node.id, \"Literal\", { value: i+1 })\n        }),\n        consequent: nc.createNodeSpan(node.id, node.id, \"ExpressionStatement\", { expression: argSet })\n      });\n\n      node.body.body.push(argCheck);\n    }\n\n    if (argsId) {\n      // var __formalsIndex = n;\n      node.body.body.push(nc.createGeneratedVarDeclFromId(node.id,\n        nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: '__formalsIndex' + suffix }),\n        nc.createNodeSpan(node.id, node.id, \"Literal\", { value: formals.length })));\n\n      // var <args> = [];\n      var argsAssign = nc.createGeneratedVarDeclFromId(argsId, argsId, nc.createNodeSpan(argsId, argsId, \"ArrayExpression\", { elements: [] }));\n      node.body.body.push(argsAssign);\n      node.body.body.push(nc.createNodeArgsWhileConsequent(argsId, suffix));\n      \n    }\n\n    if (kwargsId) {\n      for (var i = 0; i < formals.length; ++i) {\n        var formalDelete = nc.createNodeSpan(kwargsId, kwargsId, \"ExpressionStatement\", {\n          expression: nc.createNodeSpan(kwargsId, kwargsId, \"UnaryExpression\", {\n            operator: 'delete',\n            prefix: true,\n            argument: nc.createNodeSpan(kwargsId, kwargsId, \"MemberExpression\", {\n              object: __params,\n              property: nc.createNodeSpan(node.id, node.id, \"Identifier\", { name: formals[i].id.name }),\n              computed: false \n            })\n          })\n        });\n        node.body.body.push(formalDelete);\n      }\n\n      // var <kwargs> = {};\n      var kwargsAssign = nc.createGeneratedVarDeclFromId(kwargsId, kwargsId, __params);\n      node.body.body.push(kwargsAssign);\n    }\n\n    // Convert original body to 'return (function() {<body>}).call(this);';\n    //node.body.body.push(nc.createNodeFnBodyIife(body));\n\n    //Append real body to node\n    node.body.body.push.apply(node.body.body, body.body);\n\n    inFunction = oldInFunc;\n\n\n    // If class method, replace with prototype function literals\n    var retNode;\n    if (scope.isParentClass()) {\n      finishNode(node);\n      var classId = nc.createNodeSpan(node, node, \"Identifier\", { name: scope.getParentClassName() });\n      var prototypeId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"prototype\" });\n      var functionId = node.id;\n      var prototypeMember = nc.createNodeSpan(node, node, \"MemberExpression\", { object: classId, property: prototypeId, computed: false });\n      var functionMember = nc.createNodeSpan(node, node, \"MemberExpression\", { object: prototypeMember, property: functionId, computed: false });\n      var functionExpr = nc.createNodeSpan(node, node, \"FunctionExpression\", { body: node.body, params: node.params });\n      var assignExpr = nc.createNodeSpan(node, node, \"AssignmentExpression\", { left: functionMember, operator: \"=\", right: functionExpr });\n      retNode = nc.createNodeSpan(node, node, \"ExpressionStatement\", { expression: assignExpr });\n    } else retNode = finishNode(node, \"FunctionDeclaration\");\n\n    scope.end();\n\n    return retNode;\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  function parseExprList(close, allowTrailingComma, allowEmpty) {\n    var elts = [], first = true;\n    while (!eat(close)) {\n      if (!first) {\n        expect(_comma);\n        if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;\n      } else first = false;\n\n      if (allowEmpty && tokType === _comma) elts.push(null);\n      else elts.push(parseExprOps(false));\n    }\n    return elts;\n  }\n\n  function parseParamsList() {\n    // In: expr, expr, ..., id=expr, id=expr, ...\n    // Out: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...\n    var elts = [], first = true;\n    while (!eat(_parenR)) {\n      if (!first) expect(_comma);\n      else first = false;\n      var expr = parseExprOps(false);\n      if (eat(_eq)) {\n        var right = parseExprOps(false);\n        var kwId = nc.createNodeSpan(expr, right, \"Identifier\", {name:\"__kwp\"});\n        var kwLit = nc.createNodeSpan(expr, right, \"Literal\", {value:true});\n        var left = nc.createNodeSpan(expr, right, \"ObjectExpression\", { properties: [] });\n        left.isntFormal = true;\n        left.properties.push({ type: \"Property\", key: expr, value: right, kind: \"init\" });\n        left.properties.push({ type: \"Property\", key: kwId, value: kwLit, kind: \"init\" });\n        expr = left;\n      }\n      elts.push(expr);\n    }\n    return elts;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  // TODO: liberal?\n\n  function parseIdent(liberal) {\n    var node = startNode();\n    if (liberal) liberal = false;\n    if (tokType === _name) {\n      if (!liberal && strict && input.slice(tokStart, tokEnd).indexOf(\"\\\\\") == -1)\n        raise(tokStart, \"The keyword '\" + tokVal + \"' is reserved\");\n      node.name = tokVal;\n    } else if (liberal && tokType.keyword) {\n      node.name = tokType.keyword;\n    } else {\n      unexpected();\n    }\n    tokRegexpAllowed = false;\n    next();\n    return finishNode(node, \"Identifier\");\n  }\n\n  function parseTuple(noIn, expr) {\n    var node = expr ? startNodeFrom(expr) : startNode();\n    node.arguments = expr ? [expr] : [];\n\n    // Tuple with single element has special trailing comma: t = 'hi',\n    // Look ahead and eat comma in this scenario\n    if (tokType === _comma) {\n      var oldPos = tokPos; skipSpace();\n      var newPos = tokPos; tokPos = oldPos;\n      if (newPos >= inputLen || input[newPos] === ';' || input[newPos] === ')' || newline.test(input[newPos]))\n        eat(_comma);\n    }\n\n    while (eat(_comma)) {\n      node.arguments.push(parseExprOps(noIn));\n    }\n    finishNode(node, \"NewExpression\");\n\n    var runtimeId = nc.createNodeSpan(node, node, \"Identifier\", { name: options.runtimeParamName });\n    var objectsId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"objects\" });\n    var runtimeMember = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeId, property: objectsId, computed: false });\n    var listId = nc.createNodeSpan(node, node, \"Identifier\", { name: \"tuple\" });\n    node.callee = nc.createNodeSpan(node, node, \"MemberExpression\", { object: runtimeMember, property: listId, computed: false });\n\n    return node;\n  }\n\n  // ## Python runtime library\n\n  var pythonRuntime = exports.pythonRuntime = {\n\n    // Shim JavaScript objects that impersonate Python equivalents\n\n    // TODO: use 'type' or isSequence instead of 'instanceof Array' to id these\n\n    internal: {\n      // Only used within runtime\n      isSeq: function (a) { return a && (a._type === \"list\" || a._type === \"tuple\"); },\n      slice: function (obj, start, end, step) {\n        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error\n        if (start == null) {\n          if (step < 0) start = obj.length - 1;\n          else start = 0;\n        } else if (start < 0) start += obj.length;\n        if (end == null) {\n          if (step < 0) end = -1;\n          else end = obj.length;\n        } else if (end < 0) end += obj.length;\n\n        var ret = new pythonRuntime.objects.list(), tmp, i;\n        if (step < 0) {\n          tmp = obj.slice(end + 1, start + 1);\n          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);\n        } else {\n          tmp = obj.slice(start, end);\n          if (step === 1) ret = pythonRuntime.utils.createList(tmp);\n          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);\n        }\n        return ret;\n      },\n      isJSArray: Array.isArray || function(obj) {\n        return toString.call(obj) === '[object Array]';\n      }\n    },\n\n    utils: {\n      createDict: function () {\n        var ret = new pythonRuntime.objects.dict();\n        if (arguments.length === 1 && arguments[0] instanceof Object)\n          for (var k in arguments[0]) ret[k] = arguments[0][k];\n        else\n          throw TypeError(\"createDict expects a single JavaScript object\");\n        return ret;\n      },\n      createParamsObj: function () {\n        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...\n        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}\n        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };\n        for (var i = 0; i < arguments.length; i++) {\n          if (arguments[i] && arguments[i].__kwp === true) {\n            for (var k in arguments[i])\n              if (k !== '__kwp') params.keywords[k] = arguments[i][k];\n          }\n          else params.formals.push(arguments[i]);\n        }\n        return params;\n      },\n      convertToList: function (list) {\n        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);\n        return list;\n      },\n      convertToDict: function (dict) {\n        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);\n        return dict;\n      }, \n      listPropertyDescriptor: {\n          \"_type\": {\n            get: function () { return 'list'; },\n            enumerable: false\n          },\n          \"_isPython\": {\n            get: function () { return true; },\n            enumerable: false\n          },\n          \"append\": {\n            value: function (x) {\n              this.push(x);\n            },\n            enumerable: false\n          },\n          \"clear\": {\n            value: function () {\n              this.splice(0, this.length);\n            },\n            enumerable: false\n          },\n          \"copy\": {\n            value: function () {\n              return this.slice(0);\n            },\n            enumerable: false\n          },\n          \"count\": {\n            value: function (x) {\n              var c = 0;\n              for (var i = 0; i < this.length; i++)\n                if (this[i] === x) c++;\n              return c;\n            },\n            enumerable: false\n          },\n          \"equals\": {\n            value: function (x) {\n              try {\n                if (this.length !== x.length) return false;\n                for (var i = 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (!this[i].equals(x[i])) return false;\n                  } else if (this[i] !== x[i]) return false;\n                }\n                return true;\n              }\n              catch (e) { }\n              return false;\n            },\n            enumerable: false\n          },\n          \"extend\": {\n            value: function (L) {\n              for (var i = 0; i < L.length; i++) this.push(L[i]);\n            },\n            enumerable: false\n          },\n          \"index\": {\n            value: function (x) {\n              return this.indexOf(x);\n            },\n            enumerable: false\n          },\n          \"indexOf\": {\n            value: function (x, fromIndex) {\n              try {\n                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (this[i].equals(x)) return i;\n                  } else if (this[i] === x) return i;\n                }\n              }\n              catch (e) { }\n              return -1;\n            },\n            enumerable: false\n          },\n          \"insert\": {\n            value: function (i, x) {\n              this.splice(i, 0, x);\n            },\n            enumerable: false\n          },\n          \"pop\": {\n            value: function (i) {\n              if (!i)\n                i = this.length - 1;\n              var item = this[i];\n              this.splice(i, 1);\n              return item;\n            },\n            enumerable: false\n          },\n          \"_pySlice\": {\n            value: function (start, end, step) {\n              return pythonRuntime.internal.slice(this, start, end, step);\n            },\n            enumerable: false\n          },\n          \"remove\": {\n            value: function (x) {\n              this.splice(this.indexOf(x), 1);\n            },\n            enumerable: false\n          },\n          \"sort\": {\n            value: function(x, reverse) {\n              var list2 = this.slice(0);\n              var apply_key = function(a, numerical) {\n                var list3 = list2.map(x);\n                // construct a dict that maps the listay before and after the map\n                var mapping = {}\n                for(var i in list3) mapping[list3[i]] = list2[i];\n                if(numerical)\n                  list3.sort(function(a, b) { return a - b; });\n                else\n                  list3.sort()\n                for(var i in a) a[i] = mapping[list3[i]];\n              }\n              for(var i in this) {\n                if(typeof this[i] !== 'number' || !isFinite(this[i])) {\n                  if(typeof x != 'undefined') {\n                    apply_key(this, false);\n                  }\n                  else {\n                    list2.sort();\n                    for (var j in this) this[j] = list2[j];\n                  }\n                  if(reverse)\n                    this.reverse();\n                  return;\n                }\n              }\n              if(typeof x != 'undefined') {\n                apply_key(this, true);\n              }\n              else {\n                list2.sort(function(a, b) { return a - b; });\n                for(var i in this) this[i] = list2[i];\n              }\n              if(reverse)\n                this.reverse();\n            },\n            enumerable: false\n          },\n          \"toString\": {\n            value: function () {\n              return '[' + this.join(', ') + ']';\n            },\n            enumerable: false\n          }\n      },\n      createList: function () {\n        var ret = new pythonRuntime.objects.list();\n        if (arguments.length === 1 && arguments[0] instanceof Array)\n          for (var i in arguments[0]) ret.push(arguments[0][i]);\n        else\n          for (var i in arguments) ret.push(arguments[i]);\n        return ret;\n      },\n      dictPropertyDescriptor: {\n        \"_type\": {\n          get: function () { return 'dict';},\n          enumerable: false\n        },\n        \"_isPython\": {\n          get: function () { return true; },\n          enumerable: false\n        },\n        \"items\": {\n          value: function () {\n            var items = new pythonRuntime.objects.list();\n            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));\n            return items;\n          },\n          enumerable: false\n        },\n        \"length\": {\n          get: function () {\n            return Object.keys(this).length;\n          },\n          enumerable: false\n        },\n        \"clear\": {\n          value: function () {\n            for (var i in this) delete this[i];\n          },\n          enumerable: false\n        },\n        \"get\": {\n          value: function (key, def) {\n            if (key in this) return this[key];\n            else if (def !== undefined) return def;\n            return null;\n          },\n          enumerable: false\n        },\n        \"keys\": {\n          value: function () {\n            return Object.keys(this);\n          },\n          enumerable: false\n        },\n        \"pop\": {\n          value: function (key, def) {\n            var value;\n            if (key in this) {\n              value = this[key];\n              delete this[key];\n            } else if (def !== undefined) value = def;\n            else return new Error(\"KeyError\");\n            return value;\n          },\n          enumerable: false\n        }, \"values\": {\n          value: function () {\n            var values = new pythonRuntime.objects.list();\n            for (var key in this) values.append(this[key]);\n            return values;\n          },\n          enumerable: false\n        }\n      }\n    },\n    ops: {\n      add: function (a, b) {\n        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {\n          if (a._type !== b._type)\n            throw TypeError(\"can only concatenate \" + a._type + \" (not '\" + b._type + \"') to \" + a._type);\n          var ret;\n          if (a._type === 'list') ret = new pythonRuntime.objects.list();\n          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n          if (ret) {\n            for (var i = 0; i < a.length; i++) ret.push(a[i]);\n            for (var i = 0; i < b.length; i++) ret.push(b[i]);\n            return ret;\n          }\n        }\n        return a + b;\n      },\n      in: function (a, b, n) {\n        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;\n        return n ? !r : r;\n      },\n      multiply: function (a, b) {\n        // TODO: non-sequence operand must be an integer\n        if ( typeof a === 'object' ) {\n          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {\n            var ret;\n            if (a._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < b; i++)\n                for (var j = 0; j < a.length; j++) ret.push(a[j]);\n              return ret;\n            }\n          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {\n            var ret;\n            if (b._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < a; i++)\n                for (var j = 0; j < b.length; j++) ret.push(b[j]);\n              return ret;\n            }\n          }\n        }\n        return a * b;\n      },\n      subscriptIndex: function (o, i) {\n        if ( i >= 0 ) return i;\n        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;\n        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;\n        if ( typeof o === \"string\" ) return o.length + i;\n        return i;\n      }\n    },\n\n    objects: {\n      dict: function () {\n        var obj = new PythonDict();\n        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];\n        return obj;\n      },\n      list: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        pythonRuntime.utils.convertToList(arr);\n        return arr;\n      },\n      tuple: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        Object.defineProperty(arr, \"_type\",\n        {\n          get: function () { return 'tuple'; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_isPython\",\n        {\n          get: function () { return true; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"count\",\n        {\n          value: function (x) {\n            var c = 0;\n            for (var i = 0; i < this.length; i++)\n              if (this[i] === x) c++;\n            return c;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"equals\",\n        {\n          value: function (x) {\n            try {\n              if (this.length !== x.length) return false;\n              for (var i = 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (!this[i].equals(x[i])) return false;\n                } else if (this[i] !== x[i]) return false;\n              }\n              return true;\n            }\n            catch (e) { }\n            return false;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"index\",\n        {\n          value: function (x) {\n            return this.indexOf(x);\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"indexOf\",\n        {\n          value: function (x, fromIndex) {\n            try {\n              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (this[i].equals(x)) return i;\n                } else if (this[i] === x) return i;\n              }\n            }\n            catch (e) { }\n            return -1;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_pySlice\",\n        {\n          value: function (start, end, step) { \n            return pythonRuntime.internal.slice(this, start, end, step);\n          },\n            enumerable: false\n        });\n        Object.defineProperty(arr, \"toString\",\n        {\n          value: function () {\n            var s = '(' + this.join(', ');\n            if (this.length === 1) s += ',';\n            s += ')';\n            return s;\n          },\n          enumerable: false\n        });\n        return arr;\n      }\n    },\n\n    // Python built-in functions\n\n    functions: {\n      abs: function(x) {\n        return Math.abs(x);\n      },\n      all: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;\n        return true;\n      },\n      any: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;\n        return false;\n      },\n      ascii: function(obj) {\n        var s = pythonRuntime.functions.repr(obj),\n            asc = \"\",\n            code;\n        for (var i = 0; i < s.length; i++) {\n          code = s.charCodeAt(i);\n          if (code <= 127) asc += s[i];\n          else if (code <= 0xFF) asc += \"\\\\x\" + code.toString(16);\n          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars\n            // if (i+1 >= s.length) throw \"High surrogate not followed by low surrogate\"; // Is this needed?\n            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;\n            asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          } else if (code <= 0xFFFF) asc += \"\\\\u\" + (\"0\"+code.toString(16)).slice(-4);\n          else if (code <= 0x10FFFF) asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place\n        }\n        return asc;\n      },\n      bool: function(x) {\n        return !(x === undefined || // No argument\n                 x === null || // None\n                 x === false || // False\n                 x === 0 || // Zero\n                 x.length === 0 || // Empty Sequence\n                 // TODO: Empty Mapping, needs more support for python mappings first\n                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined\n                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined\n      },\n      chr: function(i) {\n        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111\n      },\n      divmod: function(a, b) {\n        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);\n      },\n      enumerate: function(iterable, start) {\n        start = start || 0;\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));\n        return ret;\n      },\n      filter: function(fn, iterable) {\n        fn = fn || function () { return true; };\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);\n        return ret;\n      },\n      float: function(x) {\n        if (x === undefined) return 0.0;\n        else if (typeof x == \"string\") { // TODO: Fix type check\n          x = x.trim().toLowerCase();\n          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]===\"-\"?-1:1);\n          else if ((/^nan$/i).exec(x) !== null) return NaN;\n          else return parseFloat(x);\n        } else if (typeof x == \"number\") { // TODO: Fix type check\n          return x; // TODO: Get python types working right so we can return an actual float\n        } else {\n          if (x.__float__ !== undefined) return x.__float__();\n          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'\n        }\n      },\n      hex: function(x) {\n        return x.toString(16);\n      },\n      int: function (s) {\n        return parseInt(s);\n      },\n      len: function (o) {\n        return o.length;\n      },\n      list: function (iterable) {\n        var ret = new pythonRuntime.objects.list();\n        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);\n        else for (var i in iterable) ret.push(i);\n        return ret;\n      },\n      map: function(fn, iterable) {\n        // TODO: support additional iterables passed\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(fn(iterable[i]));\n        return ret;\n      },\n      max: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];\n          return max;\n        } else return arg1 >= arg2 ? arg1 : arg2;\n      },\n      min: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];\n          return max;\n        } else return arg1 <= arg2 ? arg1 : arg2;\n      },\n      oct: function(x) {\n        return x.toString(8);\n      },\n      ord: function(c) {\n        return c.charCodeAt(0);\n      },\n      pow: function(x, y, z) {\n        return z ? Math.pow(x, y) % z : Math.pow(x, y);\n      },\n      print: function () {\n        var s = \"\";\n        for (var i = 0; i < arguments.length; i++)\n          s += i === 0 ? arguments[i] : \" \" + arguments[i];\n        console.log(s);\n      },\n      range: function (start, stop, step) {\n        if (stop === undefined) {\n          stop = start;\n          start = 0;\n          step = 1;\n        }\n        else if (step === undefined) step = 1;\n        var len = ~~((stop - start) / step); //~~ is a fast floor\n        var r = new Array(len);\n        var element = 0;\n        if (start < stop && step > 0 || start > stop && step < 0) {\n          var i = start;\n          while (i < stop && step > 0 || i > stop && step < 0) {\n            r[element++] = i;\n            i += step;\n          }\n        }\n        pythonRuntime.utils.convertToList(r);\n        return r;\n      },\n      repr: function (obj) {\n        if (typeof obj === 'string') return \"'\" + obj + \"'\"; // TODO: Patch until typesystem comes up.\n        if (obj.__repr__ !== undefined) return obj.__repr__();\n        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {\n          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';\n        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code\n      },\n      reversed: function (seq) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in seq) ret.push(seq[i]);\n        return ret.reverse();\n      },\n      round: function (num, ndigits) {\n        if (ndigits) {\n          var scale = Math.pow(10, ndigits);\n          return Math.round(num * scale) / scale;\n        }\n        return Math.round(num);\n      },\n      sorted: function (iterable, key, reverse) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(iterable[i]);\n        if(key) ret.sort(key); else ret.sort();\n        if (reverse) ret.reverse();\n        return ret;\n      },\n      str: function (obj) {\n        return obj.toString();\n      },\n      sum: function (iterable, start) {\n        // TODO: start can't be a string\n        var ret = start || 0;\n        for (var i in iterable) ret += iterable[i];\n        return ret;\n      },\n      tuple: function (iterable) {\n        var ret = new pythonRuntime.objects.tuple();\n        for (var i in iterable) ret.push(iterable[i]);\n        return ret;\n      }\n    },\n\n    // Python imports\n    // TODO: from x import y, z\n\n    imports: {\n      random: {\n        random: function () { return Math.random(); }\n      }\n    }\n  };\n\n  function PythonDict() {\n\n  }\n\n  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/filbert/filbert.js\n");

/***/ })

}]);