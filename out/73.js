(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[73],{

/***/ "./node_modules/babylon7/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/babylon7/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\n\nvar _get8 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ \"./node_modules/@babel/runtime/helpers/get.js\"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _classCallCheck2.default)(this, TokenType);\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  this.updateContext = null;\n};\n\nvar keywords = new Map();\n\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\n\nvar types = {\n  num: new TokenType(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr: startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr: startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr: startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr: beforeExpr,\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  })\n};\nvar SCOPE_OTHER = 0,\n    SCOPE_PROGRAM = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ARROW = 4,\n    SCOPE_SIMPLE_CATCH = 8,\n    SCOPE_SUPER = 16,\n    SCOPE_DIRECT_SUPER = 32,\n    SCOPE_CLASS = 64,\n    SCOPE_TS_MODULE = 128,\n    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n    BIND_KIND_TYPE = 2,\n    BIND_SCOPE_VAR = 4,\n    BIND_SCOPE_LEXICAL = 8,\n    BIND_SCOPE_FUNCTION = 16,\n    BIND_FLAGS_NONE = 64,\n    BIND_FLAGS_CLASS = 128,\n    BIND_FLAGS_TS_ENUM = 256,\n    BIND_FLAGS_TS_CONST_ENUM = 512,\n    BIND_FLAGS_TS_EXPORT_ONLY = 1024;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n    CLASS_ELEMENT_KIND_GETTER = 2,\n    CLASS_ELEMENT_KIND_SETTER = 1,\n    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n    CLASS_ELEMENT_OTHER = 0;\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar Position = function Position(line, col) {\n  (0, _classCallCheck2.default)(this, Position);\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  (0, _classCallCheck2.default)(this, SourceLocation);\n  this.start = start;\n  this.end = end;\n};\n\nfunction getLineInfo(input, offset) {\n  var line = 1;\n  var lineStart = 0;\n  var match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    (0, _classCallCheck2.default)(this, BaseParser);\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  (0, _createClass2.default)(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(name) {\n      return this.plugins.has(name);\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n    }\n  }]);\n  return BaseParser;\n}();\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  (0, _inherits2.default)(CommentsParser, _BaseParser);\n\n  var _super = _createSuper(CommentsParser);\n\n  function CommentsParser() {\n    (0, _classCallCheck2.default)(this, CommentsParser);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.trailingComments.push(comment);\n      this.state.leadingComments.push(comment);\n    }\n  }, {\n    key: \"adjustCommentsAfterTrailingComma\",\n    value: function adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n      if (this.state.leadingComments.length === 0) {\n        return;\n      }\n\n      var lastElement = null;\n      var i = elements.length;\n\n      while (lastElement === null && i > 0) {\n        lastElement = elements[--i];\n      }\n\n      if (lastElement === null) {\n        return;\n      }\n\n      for (var j = 0; j < this.state.leadingComments.length; j++) {\n        if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n          this.state.leadingComments.splice(j, 1);\n          j--;\n        }\n      }\n\n      var newTrailingComments = [];\n\n      for (var _i8 = 0; _i8 < this.state.leadingComments.length; _i8++) {\n        var leadingComment = this.state.leadingComments[_i8];\n\n        if (leadingComment.end < node.end) {\n          newTrailingComments.push(leadingComment);\n\n          if (!takeAllComments) {\n            this.state.leadingComments.splice(_i8, 1);\n            _i8--;\n          }\n        } else {\n          if (node.trailingComments === undefined) {\n            node.trailingComments = [];\n          }\n\n          node.trailingComments.push(leadingComment);\n        }\n      }\n\n      if (takeAllComments) this.state.leadingComments = [];\n\n      if (newTrailingComments.length > 0) {\n        lastElement.trailingComments = newTrailingComments;\n      } else if (lastElement.trailingComments !== undefined) {\n        lastElement.trailingComments = [];\n      }\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      if (node.type === \"Program\" && node.body.length > 0) return;\n      var stack = this.state.commentStack;\n      var firstChild, lastChild, trailingComments, i, j;\n\n      if (this.state.trailingComments.length > 0) {\n        if (this.state.trailingComments[0].start >= node.end) {\n          trailingComments = this.state.trailingComments;\n          this.state.trailingComments = [];\n        } else {\n          this.state.trailingComments.length = 0;\n        }\n      } else if (stack.length > 0) {\n        var lastInStack = last(stack);\n\n        if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n          trailingComments = lastInStack.trailingComments;\n          delete lastInStack.trailingComments;\n        }\n      }\n\n      if (stack.length > 0 && last(stack).start >= node.start) {\n        firstChild = stack.pop();\n      }\n\n      while (stack.length > 0 && last(stack).start >= node.start) {\n        lastChild = stack.pop();\n      }\n\n      if (!lastChild && firstChild) lastChild = firstChild;\n\n      if (firstChild) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties);\n            break;\n\n          case \"ObjectPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n            break;\n\n          case \"CallExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.arguments);\n            break;\n\n          case \"ArrayExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements);\n            break;\n\n          case \"ArrayPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n            break;\n        }\n      } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n        this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n      }\n\n      if (lastChild) {\n        if (lastChild.leadingComments) {\n          if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n            node.leadingComments = lastChild.leadingComments;\n            delete lastChild.leadingComments;\n          } else {\n            for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n              if (lastChild.leadingComments[i].end <= node.start) {\n                node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n                break;\n              }\n            }\n          }\n        }\n      } else if (this.state.leadingComments.length > 0) {\n        if (last(this.state.leadingComments).end <= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            node.leadingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        } else {\n          for (i = 0; i < this.state.leadingComments.length; i++) {\n            if (this.state.leadingComments[i].end > node.start) {\n              break;\n            }\n          }\n\n          var leadingComments = this.state.leadingComments.slice(0, i);\n\n          if (leadingComments.length) {\n            node.leadingComments = leadingComments;\n          }\n\n          trailingComments = this.state.leadingComments.slice(i);\n\n          if (trailingComments.length === 0) {\n            trailingComments = null;\n          }\n        }\n      }\n\n      this.state.commentPreviousNode = node;\n\n      if (trailingComments) {\n        if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n          node.innerComments = trailingComments;\n        } else {\n          var firstTrailingCommentIndex = trailingComments.findIndex(function (comment) {\n            return comment.end >= node.end;\n          });\n\n          if (firstTrailingCommentIndex > 0) {\n            node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n            node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n          } else {\n            node.trailingComments = trailingComments;\n          }\n        }\n      }\n\n      stack.push(node);\n    }\n  }]);\n  return CommentsParser;\n}(BaseParser);\n\nvar ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsDisallowedInInitializer: \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: \"import.meta may appear only with 'sourceType: \\\"module\\\"'\",\n  ImportOutsideModule: \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nvar ParserError = /*#__PURE__*/function (_CommentsParser) {\n  (0, _inherits2.default)(ParserError, _CommentsParser);\n\n  var _super2 = _createSuper(ParserError);\n\n  function ParserError() {\n    (0, _classCallCheck2.default)(this, ParserError);\n    return _super2.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ParserError, [{\n    key: \"getLocationForPosition\",\n    value: function getLocationForPosition(pos) {\n      var loc;\n      if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n      return loc;\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(pos, errorTemplate) {\n      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        params[_key - 2] = arguments[_key];\n      }\n\n      return this.raiseWithData.apply(this, [pos, undefined, errorTemplate].concat(params));\n    }\n  }, {\n    key: \"raiseWithData\",\n    value: function raiseWithData(pos, data, errorTemplate) {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        params[_key2 - 3] = arguments[_key2];\n      }\n\n      var loc = this.getLocationForPosition(pos);\n      var message = errorTemplate.replace(/%(\\d+)/g, function (_, i) {\n        return params[i];\n      }) + \" (\".concat(loc.line, \":\").concat(loc.column, \")\");\n      return this._raise(Object.assign({\n        loc: loc,\n        pos: pos\n      }, data), message);\n    }\n  }, {\n    key: \"_raise\",\n    value: function _raise(errorContext, message) {\n      var err = new SyntaxError(message);\n      Object.assign(err, errorContext);\n\n      if (this.options.errorRecovery) {\n        if (!this.isLookahead) this.state.errors.push(err);\n        return err;\n      } else {\n        throw err;\n      }\n    }\n  }]);\n  return ParserError;\n}(CommentsParser);\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    (0, _inherits2.default)(_class, _superClass);\n\n    var _super3 = _createSuper(_class);\n\n    function _class() {\n      (0, _classCallCheck2.default)(this, _class);\n      return _super3.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class, [{\n      key: \"estreeParseRegExpLiteral\",\n      value: function estreeParseRegExpLiteral(_ref) {\n        var pattern = _ref.pattern,\n            flags = _ref.flags;\n        var regex = null;\n\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"estreeParseBigIntLiteral\",\n      value: function estreeParseBigIntLiteral(value) {\n        var bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseDecimalLiteral\",\n      value: function estreeParseDecimalLiteral(value) {\n        var decimal = null;\n        var node = this.estreeParseLiteral(decimal);\n        node.decimal = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var directiveLiteral = directive.value;\n        var stmt = this.startNodeAt(directive.start, directive.loc.start);\n        var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n        expression.value = directiveLiteral.value;\n        expression.raw = directiveLiteral.extra.raw;\n        stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n        return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (isSimpleProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        var prop = method;\n        var paramCount = prop.kind === \"get\" ? 0 : 1;\n        var start = prop.start;\n\n        if (prop.value.params.length !== paramCount) {\n          if (method.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var _this = this;\n\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n        var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n\n        switch (expr.type) {\n          case \"ObjectPattern\":\n            expr.properties.forEach(function (prop) {\n              _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n            });\n            break;\n\n          default:\n            (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n        }\n      }\n    }, {\n      key: \"checkProto\",\n      value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n        if (prop.method) {\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"checkProto\", this).call(this, prop, isRecord, protoRef, refExpressionErrors);\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"stmtToDirective\",\n      value: function stmtToDirective(stmt) {\n        var directive = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"stmtToDirective\", this).call(this, stmt);\n        var value = stmt.expression.value;\n        directive.value.value = value;\n        return directive;\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node, allowDirectives, topLevel, end) {\n        var _this2 = this;\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseBlockBody\", this).call(this, node, allowDirectives, topLevel, end);\n        var directiveStatements = node.directives.map(function (d) {\n          return _this2.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        switch (this.state.type) {\n          case types.num:\n          case types.string:\n            return this.estreeParseLiteral(this.state.value);\n\n          case types.regexp:\n            return this.estreeParseRegExpLiteral(this.state.value);\n\n          case types.bigint:\n            return this.estreeParseBigIntLiteral(this.state.value);\n\n          case types.decimal:\n            return this.estreeParseDecimalLiteral(this.state.value);\n\n          case types._null:\n            return this.estreeParseLiteral(null);\n\n          case types._true:\n            return this.estreeParseLiteral(true);\n\n          case types._false:\n            return this.estreeParseLiteral(false);\n\n          default:\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type, startPos, startLoc) {\n        var node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseLiteral\", this).call(this, value, type, startPos, startLoc);\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n        type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n        var node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, isAccessor);\n\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") node.kind = \"init\";\n          node.shorthand = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n        var node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (isSimpleProperty(node)) {\n          this.toAssignable(node.value);\n          return node;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toAssignable\", this).call(this, node);\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop, isLast) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n        } else if (prop.method) {\n          throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n        } else {\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toAssignableObjectExpressionProp\", this).call(this, prop, isLast);\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n          delete node.arguments;\n          delete node.callee;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toReferencedListDeep\",\n      value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n        if (!exprList) {\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"toReferencedListDeep\", this).call(this, exprList, isParenthesizedExpr);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseExport\", this).call(this, node);\n\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n\n            break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n\n        if (state.optionalChainMember) {\n          if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n            node.type = node.type.substring(8);\n          }\n\n          if (state.stop) {\n            var chain = this.startNodeAtNode(node);\n            chain.expression = node;\n            return this.finishNode(chain, \"ChainExpression\");\n          }\n        } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }]);\n    return _class;\n  }(superClass);\n};\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  (0, _classCallCheck2.default)(this, TokContext);\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  var allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords$1 = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = function flow(superClass) {\n  return /*#__PURE__*/function (_superClass2) {\n    (0, _inherits2.default)(_class2, _superClass2);\n\n    var _super4 = _createSuper(_class2);\n\n    function _class2(options, input) {\n      var _this3;\n\n      (0, _classCallCheck2.default)(this, _class2);\n      _this3 = _super4.call(this, options, input);\n      _this3.flowPragma = undefined;\n      return _this3;\n    }\n\n    (0, _createClass2.default)(_class2, [{\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || types.colon);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloLoc = this.state.startLoc;\n        var moduloPos = this.state.start;\n        this.expect(types.modulo);\n        var checksLoc = this.state.startLoc;\n        this.expectContextual(\"checks\");\n\n        if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n          this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n        }\n\n        if (this.eat(types.parenL)) {\n          node.value = this.parseExpression();\n          this.expect(types.parenR);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(types.colon);\n        var type = null;\n        var predicate = null;\n\n        if (this.match(types.modulo)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n\n          if (this.match(types.modulo)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n\n        if (this.isRelational(\"<\")) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n\n        this.expect(types.parenL);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn2 = (0, _slicedToArray2.default)(_this$flowParseTypeAn, 2);\n\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(types._class)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(types._function)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(types._var)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(\"module\")) {\n          if (this.match(types.dot)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n            }\n\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(\"type\")) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(\"opaque\")) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(\"interface\")) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(types._export)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this4 = this;\n\n        this.scope.enter(SCOPE_OTHER);\n\n        if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          node.id = this.parseIdentifier();\n        }\n\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(types.braceL);\n\n        while (!this.match(types.braceR)) {\n          var _bodyNode = this.startNode();\n\n          if (this.match(types._import)) {\n            this.next();\n\n            if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n              this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n            }\n\n            this.parseImport(_bodyNode);\n          } else {\n            this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n\n          body.push(_bodyNode);\n        }\n\n        this.scope.exit();\n        this.expect(types.braceR);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this4.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this4.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n            }\n\n            if (kind === \"ES\") {\n              _this4.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(types._export);\n\n        if (this.eat(types._default)) {\n          if (this.match(types._function) || this.match(types._class)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n            var label = this.state.value;\n            var suggestion = exportSuggestions[label];\n            throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n          }\n\n          if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(\"exports\");\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        this.flowParseTypeAlias(node);\n        node.type = \"DeclareTypeAlias\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        this.flowParseOpaqueType(node, true);\n        node.type = \"DeclareOpaqueType\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node) {\n        var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.extends = [];\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"mixins\")) {\n          this.next();\n\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.start, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.right = this.flowParseTypeInitialiser(types.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(\"type\");\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.supertype = null;\n\n        if (this.match(types.colon)) {\n          node.supertype = this.flowParseTypeInitialiser(types.colon);\n        }\n\n        node.impltype = null;\n\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(types.eq);\n        }\n\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStart = this.state.start;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n\n        if (this.match(types.eq)) {\n          this.eat(types.eq);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n          }\n        }\n\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var defaultRequired = false;\n\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        } while (!this.isRelational(\">\"));\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseType());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(\"interface\");\n        node.extends = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n\n        if (this.lookahead().type === types.colon) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n\n        this.expect(types.bracketR);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(types.bracketR);\n        this.expect(types.bracketR);\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n        } else {\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            node.optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n        }\n\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        this.expect(types.parenL);\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          node.params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          node.rest = this.flowParseFunctionTypeParam();\n        }\n\n        this.expect(types.parenR);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref2) {\n        var allowStatic = _ref2.allowStatic,\n            allowExact = _ref2.allowExact,\n            allowSpread = _ref2.allowSpread,\n            allowProto = _ref2.allowProto,\n            allowInexact = _ref2.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n\n        if (allowExact && this.match(types.braceBarL)) {\n          this.expect(types.braceBarL);\n          endDelim = types.braceBarR;\n          exact = true;\n        } else {\n          this.expect(types.braceL);\n          endDelim = types.braceR;\n          exact = false;\n        }\n\n        nodeStart.exact = exact;\n\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStart = null;\n          var inexactStart = null;\n          var node = this.startNode();\n\n          if (allowProto && this.isContextual(\"proto\")) {\n            var lookahead = this.lookahead();\n\n            if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n              this.next();\n              protoStart = this.state.start;\n              allowStatic = false;\n            }\n          }\n\n          if (allowStatic && this.isContextual(\"static\")) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type !== types.colon && _lookahead.type !== types.question) {\n              this.next();\n              isStatic = true;\n            }\n          }\n\n          var variance = this.flowParseVariance();\n\n          if (this.eat(types.bracketL)) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (this.eat(types.bracketL)) {\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n\n            if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n              var _lookahead2 = this.lookahead();\n\n              if (_lookahead2.type === types.name || _lookahead2.type === types.string || _lookahead2.type === types.num) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStart = this.state.lastTokStart;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n\n          this.flowObjectTypeSemicolon();\n\n          if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n            this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n          }\n        }\n\n        this.expect(endDelim);\n\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(types.ellipsis)) {\n          var isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n            } else if (!allowInexact) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n            }\n\n            if (variance) {\n              this.raise(variance.start, FlowErrors.InexactVariance);\n            }\n\n            return null;\n          }\n\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n          }\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.SpreadVariance);\n          }\n\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStart != null;\n          node.kind = kind;\n          var optional = false;\n\n          if (this.isRelational(\"<\") || this.match(types.parenL)) {\n            node.method = true;\n\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n\n            if (this.eat(types.question)) {\n              optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var start = property.start;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n        if (length !== paramCount) {\n          if (property.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        }\n\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n\n        while (this.eat(types.dot)) {\n          var node2 = this.startNodeAt(startPos, startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startPos, startLoc, id) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(types.bracketL);\n\n        while (this.state.pos < this.length && !this.match(types.bracketR)) {\n          node.types.push(this.flowParseType());\n          if (this.match(types.bracketR)) break;\n          this.expect(types.comma);\n        }\n\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam() {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n\n        if (lh.type === types.colon || lh.type === types.question) {\n          name = this.parseIdentifier();\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.start, type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          rest = this.flowParseFunctionTypeParam();\n        }\n\n        return {\n          params: params,\n          rest: rest\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startPos, startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n        switch (this.state.type) {\n          case types.name:\n            if (this.isContextual(\"interface\")) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n          case types.braceL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n\n          case types.braceBarL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n\n          case types.bracketL:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n\n          case types.relational:\n            if (this.state.value === \"<\") {\n              node.typeParameters = this.flowParseTypeParameterDeclaration();\n              this.expect(types.parenL);\n              tmp = this.flowParseFunctionTypeParams();\n              node.params = tmp.params;\n              node.rest = tmp.rest;\n              this.expect(types.parenR);\n              this.expect(types.arrow);\n              node.returnType = this.flowParseType();\n              return this.finishNode(node, \"FunctionTypeAnnotation\");\n            }\n\n            break;\n\n          case types.parenL:\n            this.next();\n\n            if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n              if (this.match(types.name)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== types.question && token !== types.colon;\n              } else {\n                isGroupedType = true;\n              }\n            }\n\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n              if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n                this.expect(types.parenR);\n                return type;\n              } else {\n                this.eat(types.comma);\n              }\n            }\n\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case types.string:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n          case types._true:\n          case types._false:\n            node.value = this.match(types._true);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              this.next();\n\n              if (this.match(types.num)) {\n                return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              if (this.match(types.bigint)) {\n                return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n            }\n\n            throw this.unexpected();\n\n          case types.num:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n          case types.bigint:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n          case types._void:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n\n          case types._null:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n          case types._this:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n\n          case types.star:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n          default:\n            if (this.state.type.keyword === \"typeof\") {\n              return this.flowParseTypeofType();\n            } else if (this.state.type.keyword) {\n              var label = this.state.type.label;\n              this.next();\n              return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"createIdentifier\", this).call(this, node, label);\n            }\n\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startPos = this.state.start,\n            startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n\n        while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.elementType = type;\n          this.expect(types.bracketL);\n          this.expect(types.bracketR);\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n\n        if (this.eat(types.question)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n\n        if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n          var node = this.startNodeAt(param.start, param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseAND);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseAND)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseOR);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseOR)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === types.name && this.state.value === \"_\") {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startPos, startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n        if (this.match(types.colon)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n\n        if (this.match(types.plusMin)) {\n          variance = this.startNode();\n\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n\n          this.next();\n          this.finishNode(variance, \"Variance\");\n        }\n\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this5 = this;\n\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (allowExpressionBody) {\n          return this.forwardNoArrowParamsConversionAt(node, function () {\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBody\", _this5).call(_this5, node, true, isMethod);\n          });\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn4 = (0, _slicedToArray2.default)(_this$flowParseTypeAn3, 2);\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var _node = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        } else {\n          var stmt = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n          if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n            this.flowPragma = null;\n          }\n\n          return stmt;\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (this.match(types.name)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n          return false;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n        var _this6 = this;\n\n        if (!this.match(types.question)) return expr;\n\n        if (refNeedsArrowPos) {\n          var result = this.tryParse(function () {\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseConditional\", _this6).call(_this6, expr, startPos, startLoc);\n          });\n\n          if (!result.node) {\n            refNeedsArrowPos.start = result.error.pos || this.state.start;\n            return expr;\n          }\n\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n\n        this.expect(types.question);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startPos, startLoc);\n\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n            consequent = _this$tryParseConditi.consequent,\n            failed = _this$tryParseConditi.failed;\n\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n            _this$getArrowLikeExp2 = (0, _slicedToArray2.default)(_this$getArrowLikeExp, 2),\n            valid = _this$getArrowLikeExp2[0],\n            invalid = _this$getArrowLikeExp2[1];\n\n        if (failed || invalid.length > 0) {\n          var noArrowAt = (0, _toConsumableArray2.default)(originalNoArrowAt);\n\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n            var _this$getArrowLikeExp4 = (0, _slicedToArray2.default)(_this$getArrowLikeExp3, 2);\n\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n\n          if (failed && valid.length > 1) {\n            this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n          }\n\n          if (failed && valid.length === 1) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(types.colon);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this6.parseMaybeAssign(undefined, undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssignAllowIn();\n        var failed = !this.match(types.colon);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this7 = this;\n\n        var stack = [node];\n        var arrows = [];\n\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this7.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this7.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkParams\", this).call(this, node, false, true);\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var decl = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExport\", this).call(this, node);\n\n        if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n          decl.exportKind = decl.exportKind || \"value\";\n        }\n\n        return decl;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(\"type\")) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n\n          if (this.match(types.braceL)) {\n            node.specifiers = this.parseExportSpecifiers();\n            this.parseExportFrom(node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(\"opaque\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode = this.startNode();\n\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(\"interface\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode2 = this.startNode();\n\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          node.exportKind = \"value\";\n\n          var _declarationNode3 = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if ((0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n        if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var pos = this.state.start;\n        var hasNamespace = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(pos);\n        }\n\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n        var pos = this.state.start;\n\n        if (this.isContextual(\"declare\")) {\n          if (this.parseClassMemberFromModifier(classBody, member)) {\n            return;\n          }\n\n          member.declare = true;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassMember\", this).call(this, classBody, member, state, constructorAllowsSuper);\n\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n            this.raise(pos, FlowErrors.DeclareClassElement);\n          } else if (member.value) {\n            this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n          }\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 123 && next === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else if (this.state.inType && code === 63) {\n          return this.finishOp(types.question, 1);\n        } else if (isIteratorStart(code, next)) {\n          this.state.isIterator = true;\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readWord\", this).call(this);\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        var _this8 = this;\n\n        switch (node.type) {\n          case \"Identifier\":\n          case \"ObjectPattern\":\n          case \"ArrayPattern\":\n          case \"AssignmentPattern\":\n            return true;\n\n          case \"ObjectExpression\":\n            {\n              var _last = node.properties.length - 1;\n\n              return node.properties.every(function (prop, i) {\n                return prop.type !== \"ObjectMethod\" && (i === _last || prop.type === \"SpreadElement\") && _this8.isAssignable(prop);\n              });\n            }\n\n          case \"ObjectProperty\":\n            return this.isAssignable(node.value);\n\n          case \"SpreadElement\":\n            return this.isAssignable(node.argument);\n\n          case \"ArrayExpression\":\n            return node.elements.every(function (element) {\n              return _this8.isAssignable(element);\n            });\n\n          case \"AssignmentExpression\":\n            return node.operator === \"=\";\n\n          case \"ParenthesizedExpression\":\n          case \"TypeCastExpression\":\n            return this.isAssignable(node.expression);\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return !isBinding;\n\n          default:\n            return false;\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node.type === \"TypeCastExpression\") {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node));\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"toAssignable\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaPos) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaPos);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n\n          var expr = exprList[i];\n\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n        if (expr.type !== \"TypeCastExpression\") {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n        }\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(types.colon) && (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n          var implemented = node.implements = [];\n\n          do {\n            var _node3 = this.startNode();\n\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n\n            if (this.isRelational(\"<\")) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(types.comma));\n        }\n      }\n    }, {\n      key: \"parsePropertyName\",\n      value: function parsePropertyName(node, isPrivateNameAllowed) {\n        var variance = this.flowParseVariance();\n        var key = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parsePropertyName\", this).call(this, node, isPrivateNameAllowed);\n        node.variance = variance;\n        return key;\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.start);\n        }\n\n        delete prop.variance;\n        var typeParameters;\n\n        if (this.isRelational(\"<\") && !isAccessor) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(types.parenL)) this.unexpected();\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n        if (typeParameters) {\n          (prop.value || prop).typeParameters = typeParameters;\n        }\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, FlowErrors.OptionalBindingPattern);\n          }\n\n          param.optional = true;\n        }\n\n        if (this.match(types.colon)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        var node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        if (!hasTypeImportKind(node)) {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n        }\n\n        return isMaybeDefaultImport(this.state);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n        node.specifiers.push(this.finishNode(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        node.importKind = \"value\";\n        var kind = null;\n\n        if (this.match(types._typeof)) {\n          kind = \"typeof\";\n        } else if (this.isContextual(\"type\")) {\n          kind = \"type\";\n        }\n\n        if (kind) {\n          var lh = this.lookahead();\n\n          if (kind === \"type\" && lh.type === types.star) {\n            this.unexpected(lh.start);\n          }\n\n          if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n            this.next();\n            node.importKind = kind;\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(node) {\n        var specifier = this.startNode();\n        var firstIdentLoc = this.state.start;\n        var firstIdent = this.parseIdentifier(true);\n        var specifierTypeKind = null;\n\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n\n        var isBinding = false;\n\n        if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n\n          if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = as_ident.__clone();\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n\n          if (this.eatContextual(\"as\")) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = specifier.imported.__clone();\n          }\n        } else {\n          isBinding = true;\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = specifier.imported.__clone();\n        }\n\n        var nodeIsTypeImport = hasTypeImportKind(node);\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n        if (nodeIsTypeImport && specifierIsTypeImport) {\n          this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n        }\n\n        if (nodeIsTypeImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.start, true);\n        }\n\n        if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n        }\n\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n        node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var kind = node.kind;\n\n        if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (this.match(types.colon)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n        var _this9 = this;\n\n        var _jsx;\n\n        var state = null;\n        var jsx;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n          var _jsx2, _jsx3;\n\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function (abort) {\n            var _arrowExpression$extr;\n\n            typeParameters = _this9.flowParseTypeParameterDeclaration();\n\n            var arrowExpression = _this9.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              var result = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n\n              _this9.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            });\n\n            if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n              abort();\n            }\n\n            var expr = _this9.maybeUnwrapTypeCastExpression(arrowExpression);\n\n            expr.typeParameters = typeParameters;\n\n            _this9.resetStartLocationFromNode(expr, typeParameters);\n\n            return arrowExpression;\n          }, state);\n          var arrowExpression = null;\n\n          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n            if (!arrow.error && !arrow.aborted) {\n              if (arrow.node.async) {\n                this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n              }\n\n              return arrow.node;\n            }\n\n            arrowExpression = arrow.node;\n          }\n\n          if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n\n          if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this10 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this10.state.noAnonFunctionType;\n            _this10.state.noAnonFunctionType = true;\n\n            var typeNode = _this10.startNode();\n\n            var _this10$flowParseType = _this10.flowParseTypeAndPredicateInitialiser();\n\n            var _this10$flowParseType2 = (0, _slicedToArray2.default)(_this10$flowParseType, 2);\n\n            typeNode.typeAnnotation = _this10$flowParseType2[0];\n            node.predicate = _this10$flowParseType2[1];\n            _this10.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this10.canInsertSemicolon()) _this10.unexpected();\n            if (!_this10.match(types.arrow)) _this10.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"checkParams\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var _this11 = this;\n\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this11.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscripts\", _this11).call(_this11, base, startPos, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n\n          throw arrow.error || result.error;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n        var _this12 = this;\n\n        if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n          subscriptState.optionalChainMember = true;\n\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n          var _node4 = this.startNodeAt(startPos, startLoc);\n\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this12.flowParseTypeParameterInstantiationCallOrNew();\n\n            _this12.expect(types.parenL);\n\n            _node4.arguments = _this12.parseCallExpressionArguments(types.parenR, false);\n            if (subscriptState.optionalChainMember) _node4.optional = false;\n            return _this12.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this13 = this;\n\n        var targs = null;\n\n        if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n          targs = this.tryParse(function () {\n            return _this13.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n\n        node.typeArguments = targs;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        this.parseFunctionParams(node);\n        if (!this.parseArrow(node)) return;\n        return this.parseArrowExpression(node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 124 && next === 125) {\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n        if (this.state.hasFlowComment) {\n          this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n        }\n\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            this.unexpected(null, FlowErrors.NestedFlowComment);\n          }\n\n          this.hasFlowCommentCompletion();\n          this.state.pos += this.skipFlowComment();\n          this.state.hasFlowComment = true;\n          return;\n        }\n\n        if (this.state.hasFlowComment) {\n          var end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n          if (end === -1) {\n            throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n          }\n\n          this.state.pos = end + 3;\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"skipBlockComment\", this).call(this);\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(pos, _ref3) {\n        var enumName = _ref3.enumName,\n            memberName = _ref3.memberName;\n        this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberName\",\n      value: function flowEnumErrorInvalidMemberName(pos, _ref4) {\n        var enumName = _ref4.enumName,\n            memberName = _ref4.memberName;\n        var suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n        this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorDuplicateMemberName\",\n      value: function flowEnumErrorDuplicateMemberName(pos, _ref5) {\n        var enumName = _ref5.enumName,\n            memberName = _ref5.memberName;\n        this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInconsistentMemberValues\",\n      value: function flowEnumErrorInconsistentMemberValues(pos, _ref6) {\n        var enumName = _ref6.enumName;\n        this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidExplicitType\",\n      value: function flowEnumErrorInvalidExplicitType(pos, _ref7) {\n        var enumName = _ref7.enumName,\n            suppliedType = _ref7.suppliedType;\n        return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(pos, _ref8) {\n        var enumName = _ref8.enumName,\n            explicitType = _ref8.explicitType,\n            memberName = _ref8.memberName;\n        var message = null;\n\n        switch (explicitType) {\n          case \"boolean\":\n          case \"number\":\n          case \"string\":\n            message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n            break;\n\n          case \"symbol\":\n            message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n            break;\n\n          default:\n            message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n        }\n\n        return this.raise(pos, message, enumName, memberName, explicitType);\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(pos, _ref9) {\n        var enumName = _ref9.enumName,\n            memberName = _ref9.memberName;\n        this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref10) {\n        var enumName = _ref10.enumName;\n        this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this14 = this;\n\n        var startPos = this.state.start;\n\n        var endOfInit = function endOfInit() {\n          return _this14.match(types.comma) || _this14.match(types.braceR);\n        };\n\n        switch (this.state.type) {\n          case types.num:\n            {\n              var literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  pos: literal.start,\n                  value: literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types.string:\n            {\n              var _literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  pos: _literal.start,\n                  value: _literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types._true:\n          case types._false:\n            {\n              var _literal2 = this.parseBooleanLiteral();\n\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  pos: _literal2.start,\n                  value: _literal2\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          default:\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var pos = this.state.start;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          pos: pos\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n        var explicitType = context.explicitType;\n\n        if (explicitType === null) {\n          return;\n        }\n\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(pos, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref11) {\n        var enumName = _ref11.enumName,\n            explicitType = _ref11.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n\n        while (!this.match(types.braceR)) {\n          var memberNode = this.startNode();\n\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n              id = _this$flowEnumMemberR.id,\n              init = _this$flowEnumMemberR.init;\n\n          var memberName = id.name;\n\n          if (memberName === \"\") {\n            continue;\n          }\n\n          if (/^[a-z]/.test(memberName)) {\n            this.flowEnumErrorInvalidMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          if (seenNames.has(memberName)) {\n            this.flowEnumErrorDuplicateMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n              }\n\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                    break;\n\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                    break;\n\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n\n          if (!this.match(types.braceR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        return members;\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref12) {\n        var enumName = _ref12.enumName;\n\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          for (var _i = 0; _i < initializedMembers.length; _i++) {\n            var member = initializedMembers[_i];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n              enumName: enumName\n            });\n          }\n\n          return defaultedMembers;\n        } else {\n          for (var _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n            var _member = defaultedMembers[_i2];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(_member.start, {\n              enumName: enumName\n            });\n          }\n\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref13) {\n        var enumName = _ref13.enumName;\n\n        if (this.eatContextual(\"of\")) {\n          if (!this.match(types.name)) {\n            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: null\n            });\n          }\n\n          var value = this.state.value;\n          this.next();\n\n          if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n            this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: value\n            });\n          }\n\n          return value;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, _ref14) {\n        var _this15 = this;\n\n        var enumName = _ref14.enumName,\n            nameLoc = _ref14.nameLoc;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(types.braceL);\n        var members = this.flowEnumMembers({\n          enumName: enumName,\n          explicitType: explicitType\n        });\n\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumSymbolBody\");\n\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n\n                _this15.expect(types.braceR);\n\n                return _this15.finishNode(node, \"EnumStringBody\");\n              };\n\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                for (var _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                  var member = _members$defaultedMem[_i3];\n                  this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                    enumName: enumName,\n                    memberName: member.id.name\n                  });\n                }\n\n                node.members = members.booleanMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                for (var _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                  var _member2 = _members$defaultedMem2[_i4];\n                  this.flowEnumErrorNumberMemberNotInitialized(_member2.start, {\n                    enumName: enumName,\n                    memberName: _member2.id.name\n                  });\n                }\n\n                node.members = members.numberMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), {\n          enumName: id.name,\n          nameLoc: id.start\n        });\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n          this.state.exprAllowed = false;\n        } else {\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class2.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }, {\n      key: \"isLookaheadToken_lt\",\n      value: function isLookaheadToken_lt() {\n        var next = this.nextTokenStart();\n\n        if (this.input.charCodeAt(next) === 60) {\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== 60 && afterNext !== 61;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeUnwrapTypeCastExpression\",\n      value: function maybeUnwrapTypeCastExpression(node) {\n        return node.type === \"TypeCastExpression\" ? node.expression : node;\n      }\n    }]);\n    return _class2;\n  }(superClass);\n};\n\nvar entities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\nvar JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    (0, _inherits2.default)(_class3, _superClass3);\n\n    var _super5 = _createSuper(_class3);\n\n    function _class3() {\n      (0, _classCallCheck2.default)(this, _class3);\n      return _super5.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class3, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.exprAllowed) {\n                  ++this.state.pos;\n                  return this.finishToken(types.jsxTagStart);\n                }\n\n                return (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"getTokenFromCode\", this).call(this, ch);\n              }\n\n              out += this.input.slice(chunkStart, this.state.pos);\n              return this.finishToken(types.jsxText, out);\n\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        return this.finishToken(types.string, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var str = \"\";\n        var count = 0;\n        var entity;\n        var ch = this.input[this.state.pos];\n        var startPos = ++this.state.pos;\n\n        while (this.state.pos < this.length && count++ < 10) {\n          ch = this.input[this.state.pos++];\n\n          if (ch === \";\") {\n            if (str[0] === \"#\") {\n              if (str[1] === \"x\") {\n                str = str.substr(2);\n\n                if (HEX_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 16));\n                }\n              } else {\n                str = str.substr(1);\n\n                if (DECIMAL_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 10));\n                }\n              }\n            } else {\n              entity = entities[str];\n            }\n\n            break;\n          }\n\n          str += ch;\n        }\n\n        if (!entity) {\n          this.state.pos = startPos;\n          return \"&\";\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n\n        return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n\n        if (this.match(types.jsxName)) {\n          node.name = this.state.value;\n        } else if (this.state.type.keyword) {\n          node.name = this.state.type.keyword;\n        } else {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(types.colon)) return name;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n\n        while (this.eat(types.dot)) {\n          var newNode = this.startNodeAt(startPos, startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n\n        switch (this.state.type) {\n          case types.braceL:\n            node = this.startNode();\n            this.next();\n            node = this.jsxParseExpressionContainer(node);\n\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(node.start, JsxErrors.AttributeIsEmpty);\n            }\n\n            return node;\n\n          case types.jsxTagStart:\n          case types.string:\n            return this.parseExprAtom();\n\n          default:\n            throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node) {\n        if (this.match(types.braceR)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          node.expression = this.parseExpression();\n        }\n\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n\n        if (this.eat(types.braceL)) {\n          this.expect(types.ellipsis);\n          node.argument = this.parseMaybeAssignAllowIn();\n          this.expect(types.braceR);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n\n        while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n\n        node.attributes = attributes;\n        node.selfClosing = this.eat(types.slash);\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n        var closingElement = null;\n\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case types.jsxTagStart:\n                startPos = this.state.start;\n                startLoc = this.state.startLoc;\n                this.next();\n\n                if (this.eat(types.slash)) {\n                  closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                  break contents;\n                }\n\n                children.push(this.jsxParseElementAt(startPos, startLoc));\n                break;\n\n              case types.jsxText:\n                children.push(this.parseExprAtom());\n                break;\n\n              case types.braceL:\n                {\n                  var _node5 = this.startNode();\n\n                  this.next();\n\n                  if (this.match(types.ellipsis)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5));\n                  }\n\n                  break;\n                }\n\n              default:\n                throw this.unexpected();\n            }\n          }\n\n          if (isFragment(openingElement) && !isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n            }\n          }\n        }\n\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n\n        node.children = children;\n\n        if (this.isRelational(\"<\")) {\n          throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n        }\n\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startPos, startLoc);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(types.jsxText)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(types.jsxTagStart)) {\n          return this.jsxParseElement();\n        } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.finishToken(types.jsxTagStart);\n          return this.jsxParseElement();\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inPropertyName) return (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n        var context = this.curContext();\n\n        if (context === types$1.j_expr) {\n          return this.jsxReadToken();\n        }\n\n        if (context === types$1.j_oTag || context === types$1.j_cTag) {\n          if (isIdentifierStart(code)) {\n            return this.jsxReadWord();\n          }\n\n          if (code === 62) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n            return this.jsxReadString(code);\n          }\n        }\n\n        if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagStart);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.braceL)) {\n          var curContext = this.curContext();\n\n          if (curContext === types$1.j_oTag) {\n            this.state.context.push(types$1.braceExpression);\n          } else if (curContext === types$1.j_expr) {\n            this.state.context.push(types$1.templateQuasi);\n          } else {\n            (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"updateContext\", this).call(this, prevType);\n          }\n\n          this.state.exprAllowed = true;\n        } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n          this.state.context.length -= 2;\n          this.state.context.push(types$1.j_cTag);\n          this.state.exprAllowed = false;\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class3.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }]);\n    return _class3;\n  }(superClass);\n};\n\nvar Scope = function Scope(flags) {\n  (0, _classCallCheck2.default)(this, Scope);\n  this.var = [];\n  this.lexical = [];\n  this.functions = [];\n  this.flags = flags;\n};\n\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(raise, inModule) {\n    (0, _classCallCheck2.default)(this, ScopeHandler);\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  (0, _createClass2.default)(ScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.scopeStack.pop();\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.push(name);\n        } else {\n          scope.lexical.push(name);\n        }\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          scope.var.push(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, pos) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.raise(pos, ErrorMessages.VarRedeclaration, name);\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      }\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n      }\n\n      return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n        this.undefinedExports.set(id.name, id.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScope\",\n    value: function currentVarScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if (scope.flags & SCOPE_VAR) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScope\",\n    value: function currentThisScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }]);\n  return ScopeHandler;\n}();\n\nvar TypeScriptScope = /*#__PURE__*/function (_Scope) {\n  (0, _inherits2.default)(TypeScriptScope, _Scope);\n\n  var _super6 = _createSuper(TypeScriptScope);\n\n  function TypeScriptScope() {\n    var _this16;\n\n    (0, _classCallCheck2.default)(this, TypeScriptScope);\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    _this16 = _super6.call.apply(_super6, [this].concat(args));\n    _this16.types = [];\n    _this16.enums = [];\n    _this16.constEnums = [];\n    _this16.classes = [];\n    _this16.exportOnlyBindings = [];\n    return _this16;\n  }\n\n  return TypeScriptScope;\n}(Scope);\n\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  (0, _inherits2.default)(TypeScriptScopeHandler, _ScopeHandler);\n\n  var _super7 = _createSuper(TypeScriptScopeHandler);\n\n  function TypeScriptScopeHandler() {\n    (0, _classCallCheck2.default)(this, TypeScriptScopeHandler);\n    return _super7.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.push(name);\n        return;\n      }\n\n      (0, _get8.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          this.maybeExportDefined(scope, name);\n        }\n\n        scope.types.push(name);\n      }\n\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.indexOf(name) > -1) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.indexOf(name) > -1;\n          return isConst !== wasConst;\n        }\n\n        return true;\n      }\n\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n        if (scope.lexical.indexOf(name) > -1) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n\n      if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n        return true;\n      }\n\n      return (0, _get8.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\n\nvar PARAM = 0,\n    PARAM_YIELD = 1,\n    PARAM_AWAIT = 2,\n    PARAM_RETURN = 4,\n    PARAM_IN = 8;\n\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    (0, _classCallCheck2.default)(this, ProductionParameterHandler);\n    this.stacks = [];\n  }\n\n  (0, _createClass2.default)(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }, {\n    key: \"hasIn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_IN) > 0;\n    }\n  }]);\n  return ProductionParameterHandler;\n}();\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nvar TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer: \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution: \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    (0, _inherits2.default)(_class4, _superClass4);\n\n    var _super8 = _createSuper(_class4);\n\n    function _class4() {\n      (0, _classCallCheck2.default)(this, _class4);\n      return _super8.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class4, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return this.match(types.name);\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers) {\n        if (!this.match(types.name)) {\n          return undefined;\n        }\n\n        var modifier = this.state.value;\n\n        if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(modified, allowedModifiers) {\n        for (;;) {\n          var startPos = this.state.start;\n          var modifier = this.tsParseModifier(allowedModifiers);\n          if (!modifier) break;\n\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          }\n\n          modified[modifier] = true;\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(types.braceR);\n\n          case \"HeritageClauseElement\":\n            return this.match(types.braceL);\n\n          case \"TupleElementTypes\":\n            return this.match(types.bracketR);\n\n          case \"TypeParametersOrArguments\":\n            return this.isRelational(\">\");\n        }\n\n        throw new Error(\"Unreachable\");\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n        var result = [];\n\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          var element = parseElement();\n\n          if (element == null) {\n            return undefined;\n          }\n\n          result.push(element);\n\n          if (this.eat(types.comma)) {\n            continue;\n          }\n\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          if (expectSuccess) {\n            this.expect(types.comma);\n          }\n\n          return undefined;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(types.bracketL);\n          } else {\n            this.expectRelational(\"<\");\n          }\n        }\n\n        var result = this.tsParseDelimitedList(kind, parseElement);\n\n        if (bracket) {\n          this.expect(types.bracketR);\n        } else {\n          this.expectRelational(\">\");\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(types._import);\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n        }\n\n        node.argument = this.parseExprAtom();\n        this.expect(types.parenR);\n\n        if (this.eat(types.dot)) {\n          node.qualifier = this.tsParseEntityName(true);\n        }\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName(allowReservedWords) {\n        var entity = this.parseIdentifier();\n\n        while (this.eat(types.dot)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName(false);\n\n        if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n\n        if (this.match(types._import)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName(true);\n        }\n\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsEatThenParseType(types._extends);\n        node.default = this.tsEatThenParseType(types.eq);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters() {\n        if (this.isRelational(\"<\")) {\n          return this.tsParseTypeParameters();\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters() {\n        var node = this.startNode();\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsTryNextParseConstantContext\",\n      value: function tsTryNextParseConstantContext() {\n        if (this.lookahead().type === types._const) {\n          this.next();\n          return this.tsParseTypeReference();\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === types.arrow;\n        signature.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(types.parenL);\n        signature.parameters = this.tsParseBindingListForSignature();\n\n        if (returnTokenRequired) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var _this17 = this;\n\n        return this.parseBindingList(types.parenR, 41).map(function (pattern) {\n          if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n            _this17.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n          }\n\n          return pattern;\n        });\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(types.comma)) {\n          this.semicolon();\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(types.colon, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n        return this.eat(types.name) && this.match(types.colon);\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return undefined;\n        }\n\n        this.expect(types.bracketL);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(types.bracketR);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(types.question)) node.optional = true;\n        var nodeAny = node;\n\n        if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n          var method = nodeAny;\n          this.tsFillSignature(types.colon, method);\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n\n        if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n\n        if (this.match(types._new)) {\n          var id = this.startNode();\n          this.next();\n\n          if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n\n        var readonly = !!this.tsParseModifier([\"readonly\"]);\n        var idx = this.tsTryParseIndexSignature(node);\n\n        if (idx) {\n          if (readonly) node.readonly = true;\n          return idx;\n        }\n\n        this.parsePropertyName(node, false);\n        return this.tsParsePropertyOrMethodSignature(node, readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(types.braceL);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(types.braceR);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n\n        if (this.eat(types.plusMin)) {\n          return this.isContextual(\"readonly\");\n        }\n\n        if (this.isContextual(\"readonly\")) {\n          this.next();\n        }\n\n        if (!this.match(types.bracketL)) {\n          return false;\n        }\n\n        this.next();\n\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n\n        this.next();\n        return this.match(types._in);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsExpectThenParseType(types._in);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(types.braceL);\n\n        if (this.match(types.plusMin)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(\"readonly\");\n        } else if (this.eatContextual(\"readonly\")) {\n          node.readonly = true;\n        }\n\n        this.expect(types.bracketL);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        this.expect(types.bracketR);\n\n        if (this.match(types.plusMin)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(types.question);\n        } else if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this18 = this;\n\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        var labeledElements = null;\n        node.elementTypes.forEach(function (elementNode) {\n          var _labeledElements;\n\n          var _elementNode = elementNode,\n              type = _elementNode.type;\n\n          if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n            _this18.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n          }\n\n          seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n          if (type === \"TSRestType\") {\n            elementNode = elementNode.typeAnnotation;\n            type = elementNode.type;\n          }\n\n          var isLabeled = type === \"TSNamedTupleMember\";\n          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n          if (labeledElements !== isLabeled) {\n            _this18.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        var _this$state = this.state,\n            startPos = _this$state.start,\n            startLoc = _this$state.startLoc;\n        var rest = this.eat(types.ellipsis);\n        var type = this.tsParseType();\n        var optional = this.eat(types.question);\n        var labeled = this.eat(types.colon);\n\n        if (labeled) {\n          var labeledNode = this.startNodeAtNode(type);\n          labeledNode.optional = optional;\n\n          if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n            labeledNode.label = type.typeName;\n          } else {\n            this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n            labeledNode.label = type;\n          }\n\n          labeledNode.elementType = this.tsParseType();\n          type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n        } else if (optional) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n\n        if (rest) {\n          var restNode = this.startNodeAt(startPos, startLoc);\n          restNode.typeAnnotation = type;\n          type = this.finishNode(restNode, \"TSRestType\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(types.parenL);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type) {\n        var node = this.startNode();\n\n        if (type === \"TSConstructorType\") {\n          this.expect(types._new);\n        }\n\n        this.tsFillSignature(types.arrow, node);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var _this19 = this;\n\n        var node = this.startNode();\n\n        node.literal = function () {\n          switch (_this19.state.type) {\n            case types.num:\n            case types.bigint:\n            case types.string:\n            case types._true:\n            case types._false:\n              return _this19.parseExprAtom();\n\n            default:\n              throw _this19.unexpected();\n          }\n        }();\n\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        var templateNode = this.parseTemplate(false);\n\n        if (templateNode.expressions.length > 0) {\n          this.raise(templateNode.expressions[0].start, TSErrors.TemplateTypeHasSubstitution);\n        }\n\n        node.literal = templateNode;\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case types.name:\n          case types._void:\n          case types._null:\n            {\n              var type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n              if (type !== undefined && this.lookaheadCharCode() !== 46) {\n                var node = this.startNode();\n                this.next();\n                return this.finishNode(node, type);\n              }\n\n              return this.tsParseTypeReference();\n            }\n\n          case types.string:\n          case types.num:\n          case types.bigint:\n          case types._true:\n          case types._false:\n            return this.tsParseLiteralTypeNode();\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              var _node6 = this.startNode();\n\n              var nextToken = this.lookahead();\n\n              if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n                throw this.unexpected();\n              }\n\n              _node6.literal = this.parseMaybeUnary();\n              return this.finishNode(_node6, \"TSLiteralType\");\n            }\n\n            break;\n\n          case types._this:\n            return this.tsParseThisTypeOrThisTypePredicate();\n\n          case types._typeof:\n            return this.tsParseTypeQuery();\n\n          case types._import:\n            return this.tsParseImportType();\n\n          case types.braceL:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n          case types.bracketL:\n            return this.tsParseTupleType();\n\n          case types.parenL:\n            return this.tsParseParenthesizedType();\n\n          case types.backQuote:\n            return this.tsParseTemplateLiteralType();\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n\n        while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n          if (this.match(types.bracketR)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(types.bracketR);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(types.bracketR);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator(operator) {\n        var node = this.startNode();\n        this.expectContextual(operator);\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n\n          default:\n            this.raise(node.start, TSErrors.UnexpectedReadonly);\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var node = this.startNode();\n        this.expectContextual(\"infer\");\n        var typeParameter = this.startNode();\n        typeParameter.name = this.parseIdentifierName(typeParameter.start);\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this20 = this;\n\n        var operator = [\"keyof\", \"unique\", \"readonly\"].find(function (kw) {\n          return _this20.isContextual(kw);\n        });\n        return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        this.eat(operator);\n        var type = parseConstituentType();\n\n        if (this.match(operator)) {\n          var _types = [type];\n\n          while (this.eat(operator)) {\n            _types.push(parseConstituentType());\n          }\n\n          var node = this.startNodeAtNode(type);\n          node.types = _types;\n          type = this.finishNode(node, kind);\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.isRelational(\"<\")) {\n          return true;\n        }\n\n        return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (this.match(types.name) || this.match(types._this)) {\n          this.next();\n          return true;\n        }\n\n        if (this.match(types.braceL)) {\n          var braceStackCounter = 1;\n          this.next();\n\n          while (braceStackCounter > 0) {\n            if (this.match(types.braceL)) {\n              ++braceStackCounter;\n            } else if (this.match(types.braceR)) {\n              --braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        if (this.match(types.bracketL)) {\n          var _braceStackCounter = 1;\n          this.next();\n\n          while (_braceStackCounter > 0) {\n            if (this.match(types.bracketL)) {\n              ++_braceStackCounter;\n            } else if (this.match(types.bracketR)) {\n              --_braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n\n        if (this.match(types.parenR) || this.match(types.ellipsis)) {\n          return true;\n        }\n\n        if (this.tsSkipParameterStart()) {\n          if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n            return true;\n          }\n\n          if (this.match(types.parenR)) {\n            this.next();\n\n            if (this.match(types.arrow)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this21 = this;\n\n        return this.tsInType(function () {\n          var t = _this21.startNode();\n\n          _this21.expect(returnToken);\n\n          var asserts = _this21.tsTryParse(_this21.tsParseTypePredicateAsserts.bind(_this21));\n\n          if (asserts && _this21.match(types._this)) {\n            var thisTypePredicate = _this21.tsParseThisTypeOrThisTypePredicate();\n\n            if (thisTypePredicate.type === \"TSThisType\") {\n              var _node8 = _this21.startNodeAtNode(t);\n\n              _node8.parameterName = thisTypePredicate;\n              _node8.asserts = true;\n              thisTypePredicate = _this21.finishNode(_node8, \"TSTypePredicate\");\n            } else {\n              thisTypePredicate.asserts = true;\n            }\n\n            t.typeAnnotation = thisTypePredicate;\n            return _this21.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var typePredicateVariable = _this21.tsIsIdentifier() && _this21.tsTryParse(_this21.tsParseTypePredicatePrefix.bind(_this21));\n\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this21.tsParseTypeAnnotation(false, t);\n            }\n\n            var _node9 = _this21.startNodeAtNode(t);\n\n            _node9.parameterName = _this21.parseIdentifier();\n            _node9.asserts = asserts;\n            t.typeAnnotation = _this21.finishNode(_node9, \"TSTypePredicate\");\n            return _this21.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var type = _this21.tsParseTypeAnnotation(false);\n\n          var node = _this21.startNodeAtNode(t);\n\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this21.finishNode(node, \"TSTypePredicate\");\n          return _this21.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(types.colon);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n          return false;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.next();\n\n        if (!this.match(types.name) && !this.match(types._this)) {\n          return false;\n        }\n\n        if (containsEsc) {\n          this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n        }\n\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this22 = this;\n\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this22.expect(types.colon);\n          t.typeAnnotation = _this22.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n\n        if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n          return type;\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsParseNonConditionalType();\n        this.expect(types.question);\n        node.trueType = this.tsParseType();\n        this.expect(types.colon);\n        node.falseType = this.tsParseType();\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n\n        if (this.match(types._new)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        }\n\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        var node = this.startNode();\n\n        var _const = this.tsTryNextParseConstantContext();\n\n        node.typeAnnotation = _const || this.tsNextThenParseType();\n        this.expectRelational(\">\");\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(descriptor) {\n        var originalStart = this.state.start;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n        if (!delimitedList.length) {\n          this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n        }\n\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseExpressionWithTypeArguments\",\n      value: function tsParseExpressionWithTypeArguments() {\n        var node = this.startNode();\n        node.expression = this.tsParseEntityName(false);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n        node.typeParameters = this.tsTryParseTypeParameters();\n\n        if (this.eat(types._extends)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n        node.typeParameters = this.tsTryParseTypeParameters();\n        node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        return !this.match(token) ? undefined : this.tsNextThenParseType();\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this23 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this23.expect(token);\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this24 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this24.next();\n        });\n      }\n    }, {\n      key: \"tsDoThenParseType\",\n      value: function tsDoThenParseType(cb) {\n        var _this25 = this;\n\n        return this.tsInType(function () {\n          cb();\n          return _this25.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n        if (this.eat(types.eq)) {\n          node.initializer = this.parseMaybeAssignAllowIn();\n        }\n\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node, isConst) {\n        if (isConst) node.const = true;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n        this.expect(types.braceL);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(types.braceL);\n        this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n\n        if (!nested) {\n          this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n        }\n\n        if (this.eat(types.dot)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(\"global\")) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          this.unexpected();\n        }\n\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, isExport) {\n        node.isExport = isExport || false;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n        this.expect(types.eq);\n        node.moduleReference = this.tsParseModuleReference();\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(\"require\");\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected();\n        }\n\n        node.expression = this.parseExprAtom();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return undefined;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n\n        if (result !== undefined && result !== false) {\n          return result;\n        } else {\n          this.state = state;\n          return undefined;\n        }\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        if (this.isLineTerminator()) {\n          return;\n        }\n\n        var starttype = this.state.type;\n        var kind;\n\n        if (this.isContextual(\"let\")) {\n          starttype = types._var;\n          kind = \"let\";\n        }\n\n        switch (starttype) {\n          case types._function:\n            return this.parseFunctionStatement(nany, false, true);\n\n          case types._class:\n            nany.declare = true;\n            return this.parseClass(nany, true, false);\n\n          case types._const:\n            if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n              this.expect(types._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, true);\n            }\n\n          case types._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n\n          case types.name:\n            {\n              var value = this.state.value;\n\n              if (value === \"global\") {\n                return this.tsParseAmbientExternalModuleDeclaration(nany);\n              } else {\n                return this.tsParseDeclaration(nany, value, true);\n              }\n            }\n        }\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n\n              if (declaration) {\n                declaration.declare = true;\n                return declaration;\n              }\n\n              break;\n            }\n\n          case \"global\":\n            if (this.match(types.braceL)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n\n            break;\n\n          default:\n            return this.tsParseDeclaration(node, expr.name, false);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n              var cls = node;\n              cls.abstract = true;\n\n              if (next) {\n                this.next();\n\n                if (!this.match(types._class)) {\n                  this.unexpected(null, types._class);\n                }\n              }\n\n              return this.parseClass(cls, true, false);\n            }\n\n            break;\n\n          case \"enum\":\n            if (next || this.match(types.name)) {\n              if (next) this.next();\n              return this.tsParseEnumDeclaration(node, false);\n            }\n\n            break;\n\n          case \"interface\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseInterfaceDeclaration(node);\n            }\n\n            break;\n\n          case \"module\":\n            if (next) this.next();\n\n            if (this.match(types.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"namespace\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"type\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminatorAndMatch\",\n      value: function tsCheckLineTerminatorAndMatch(tokenType, next) {\n        return (next || this.match(tokenType)) && !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n        var _this26 = this;\n\n        if (!this.isRelational(\"<\")) {\n          return undefined;\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.maybeInArrowParameters = true;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this26.startNodeAt(startPos, startLoc);\n\n          node.typeParameters = _this26.tsParseTypeParameters();\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionParams\", _this26).call(_this26, node);\n          node.returnType = _this26.tsTryParseTypeOrTypePredicateAnnotation();\n\n          _this26.expect(types.arrow);\n\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n\n        if (!res) {\n          return undefined;\n        }\n\n        return this.parseArrowExpression(res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this27 = this;\n\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this27.tsInNoContext(function () {\n            _this27.expectRelational(\"<\");\n\n            return _this27.tsParseDelimitedList(\"TypeParametersOrArguments\", _this27.tsParseType.bind(_this27));\n          });\n        });\n        this.state.exprAllowed = false;\n        this.expectRelational(\">\");\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        if (this.match(types.name)) {\n          switch (this.state.value) {\n            case \"abstract\":\n            case \"declare\":\n            case \"enum\":\n            case \"interface\":\n            case \"module\":\n            case \"namespace\":\n            case \"type\":\n              return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var accessibility;\n        var readonly = false;\n\n        if (allowModifiers) {\n          accessibility = this.parseAccessModifier();\n          readonly = !!this.tsParseModifier([\"readonly\"]);\n        }\n\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (accessibility || readonly) {\n          var pp = this.startNodeAt(startPos, startLoc);\n\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n          }\n\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        }\n\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n        if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n          this.finishNode(node, bodilessType);\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n        } else {\n          (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var _this28 = this;\n\n        if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n          this.state.exprAllowed = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startPos, startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n\n        if (this.isRelational(\"<\")) {\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this28.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this28.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n\n            var node = _this28.startNodeAt(startPos, startLoc);\n\n            node.callee = base;\n\n            var typeArguments = _this28.tsParseTypeArguments();\n\n            if (typeArguments) {\n              if (!noCalls && _this28.eat(types.parenL)) {\n                node.arguments = _this28.parseCallExpressionArguments(types.parenR, false);\n                node.typeParameters = typeArguments;\n                return _this28.finishCallExpression(node, state.optionalChainMember);\n              } else if (_this28.match(types.backQuote)) {\n                var _result = _this28.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n\n                _result.typeParameters = typeArguments;\n                return _result;\n              }\n            }\n\n            _this28.unexpected();\n          });\n          if (result) return result;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this29 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeParameters = this.tsTryParseAndCatch(function () {\n            var args = _this29.tsParseTypeArguments();\n\n            if (!_this29.match(types.parenL)) _this29.unexpected();\n            return args;\n          });\n\n          if (typeParameters) {\n            node.typeParameters = typeParameters;\n          }\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n        if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.expression = left;\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          if (_const) {\n            node.typeAnnotation = _const;\n          } else {\n            node.typeAnnotation = this.tsNextThenParseType();\n          }\n\n          this.finishNode(node, \"TSAsExpression\");\n          this.reScan_lt_gt();\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n          var ahead = this.lookahead();\n\n          if (this.match(types.name) && ahead.type === types.eq) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n\n          if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n            node.importKind = \"type\";\n            this.next();\n          } else {\n            node.importKind = \"value\";\n          }\n        }\n\n        var importNode = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseImport\", this).call(this, node);\n\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n        }\n\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        if (this.match(types._import)) {\n          this.expect(types._import);\n          return this.tsParseImportEqualsDeclaration(node, true);\n        } else if (this.eat(types.eq)) {\n          var assign = node;\n          assign.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(\"as\")) {\n          var decl = node;\n          this.expectContextual(\"namespace\");\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n            this.next();\n            node.exportKind = \"type\";\n          } else {\n            node.exportKind = \"value\";\n          }\n\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExport\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          this.parseClass(cls, true, true);\n          cls.abstract = true;\n          return cls;\n        }\n\n        if (this.state.value === \"interface\") {\n          var result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n          if (result) return result;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        if (this.state.type === types._const) {\n          var ahead = this.lookahead();\n\n          if (ahead.type === types.name && ahead.value === \"enum\") {\n            var node = this.startNode();\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(node, true);\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n        this.tsParseModifiers(member, [\"declare\"]);\n        var accessibility = this.parseAccessModifier();\n        if (accessibility) member.accessibility = accessibility;\n        this.tsParseModifiers(member, [\"declare\"]);\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassMember\", this).call(this, classBody, member, state, constructorAllowsSuper);\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n        this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n\n          if (member.abstract) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n          }\n\n          if (isStatic) {\n            this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n          }\n\n          if (member.accessibility) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n          }\n\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic, constructorAllowsSuper);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(types.question);\n        if (optional) methodOrProp.optional = true;\n\n        if (methodOrProp.readonly && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n        }\n\n        if (methodOrProp.declare && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n        return decl || (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n        var _this30 = this;\n\n        if (!refNeedsArrowPos || !this.match(types.question)) {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseConditional\", this).call(this, expr, startPos, startLoc, refNeedsArrowPos);\n        }\n\n        var result = this.tryParse(function () {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseConditional\", _this30).call(_this30, expr, startPos, startLoc);\n        });\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(\"declare\");\n        var declaration;\n\n        if (this.match(types.name)) {\n          declaration = this.tsTryParseExportDeclaration();\n        }\n\n        if (!declaration) {\n          declaration = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n\n        if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n          node.exportKind = \"type\";\n        }\n\n        if (declaration && isDeclare) {\n          this.resetStartLocation(declaration, startPos, startLoc);\n          declaration.declare = true;\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n          return;\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional && this.eat(types.bang)) {\n          node.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n\n        if (node.declare && this.match(types.equal)) {\n          this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n        }\n\n        if (node.accessibility) {\n          this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n        }\n\n        this.parseClassPropertyAnnotation(node);\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.tsParseTypeArguments();\n        }\n\n        if (this.eatContextual(\"implements\")) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop) {\n        var _get2;\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) prop.typeParameters = typeParameters;\n\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        (_get2 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseObjPropValue\", this)).call.apply(_get2, [this, prop].concat(args));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n          decl.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign() {\n        var _this31 = this;\n\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n        var state;\n        var jsx;\n        var typeCast;\n\n        if (this.match(types.jsxTagStart)) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            var _get3;\n\n            return (_get3 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get3, [_this31].concat(args));\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n          var _get4;\n\n          return (_get4 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", this)).call.apply(_get4, [this].concat(args));\n        }\n\n        var typeParameters;\n        state = state || this.state.clone();\n        var arrow = this.tryParse(function (abort) {\n          var _get5;\n\n          var _typeParameters;\n\n          typeParameters = _this31.tsParseTypeParameters();\n\n          var expr = (_get5 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get5, [_this31].concat(args));\n\n          if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n            abort();\n          }\n\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this31.resetStartLocationFromNode(expr, typeParameters);\n          }\n\n          expr.typeParameters = typeParameters;\n          return expr;\n        }, state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            var _get6;\n\n            return (_get6 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get6, [_this31].concat(args));\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n        throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors) {\n        if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n          return this.tsParseTypeAssertion();\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this32 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this32.tsParseTypeOrTypePredicateAnnotation(types.colon);\n\n            if (_this32.canInsertSemicolon() || !_this32.match(types.arrow)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, TSErrors.PatternIsOptional);\n          }\n\n          param.optional = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node));\n\n          case \"TSParameterProperty\":\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignable\", this).call(this, node);\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            node.expression = this.toAssignable(node.expression);\n            return node;\n\n          default:\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignable\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            return;\n\n          case \"TSParameterProperty\":\n            this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n            return;\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n            return;\n\n          default:\n            (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n            return;\n        }\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types._this:\n            return this.parseIdentifier(true);\n\n          default:\n            return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsParseTypeArguments();\n\n          if (this.match(types.parenL)) {\n            var call = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n            call.typeParameters = typeArguments;\n            return call;\n          }\n\n          this.unexpected(this.state.start, types.parenL);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.bang) || this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault() {\n        var _get7;\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        var node = (_get7 = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseMaybeDefault\", this)).call.apply(_get7, [this].concat(args));\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"reScan_lt_gt\",\n      value: function reScan_lt_gt() {\n        if (this.match(types.relational)) {\n          var code = this.input.charCodeAt(this.state.start);\n\n          if (code === 60 || code === 62) {\n            this.state.pos -= 1;\n            this.readToken_lt_gt(code);\n          }\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if (!expr) continue;\n\n          switch (expr.type) {\n            case \"TSTypeCastExpression\":\n              exprList[i] = this.typeCastToParameter(expr);\n              break;\n\n            case \"TSAsExpression\":\n            case \"TSTypeAssertion\":\n              if (!this.state.maybeInArrowParameters) {\n                exprList[i] = this.typeCastToParameter(expr);\n              } else {\n                this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n              }\n\n              break;\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"toAssignableList\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n            this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this33 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this33.tsParseTypeArguments();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n        var firstParam = method.params[0];\n        var hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }, {\n      key: \"parseCatchClauseParam\",\n      value: function parseCatchClauseParam() {\n        var param = (0, _get8.default)((0, _getPrototypeOf2.default)(_class4.prototype), \"parseCatchClauseParam\", this).call(this);\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          param.typeAnnotation = type;\n          this.resetEndLocation(param);\n        }\n\n        return param;\n      }\n    }]);\n    return _class4;\n  }(superClass);\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    (0, _inherits2.default)(_class5, _superClass5);\n\n    var _super9 = _createSuper(_class5);\n\n    function _class5() {\n      (0, _classCallCheck2.default)(this, _class5);\n      return _super9.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class5, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(types.placeholder)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          node.name = (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          this.expect(types.placeholder);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          return this.finishOp(types.placeholder, 2);\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parsePlaceholder(\"Expression\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier() {\n        return this.parsePlaceholder(\"Identifier\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseIdentifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word) {\n        if (word !== undefined) (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"checkReservedWord\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"Placeholder\") (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"checkLVal\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n          return node;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"toAssignable\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n        }\n\n        if (this.match(types.colon)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = this.parseStatement(\"label\");\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        return this.parsePlaceholder(\"BlockStatement\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseBlock\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId() {\n        return this.parsePlaceholder(\"Identifier\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseFunctionId\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        this.takeDecorators(node);\n        var oldStrict = this.state.strict;\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n\n        if (placeholder) {\n          if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            this.unexpected(null, \"A class name is required\");\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n\n        this.parseClassSuper(node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExport\", this).apply(this, arguments);\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseExport\", this).call(this, node);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types._default)) {\n          var next = this.nextTokenStart();\n\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (node.specifiers && node.specifiers.length > 0) {\n          return true;\n        }\n\n        return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n\n        if (specifiers == null ? void 0 : specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n\n        (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"checkExport\", this).call(this, node);\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseImport\", this).apply(this, arguments);\n        node.specifiers = [];\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        this.finishNode(specifier, \"ImportDefaultSpecifier\");\n        node.specifiers.push(specifier);\n\n        if (this.eat(types.comma)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n\n        this.expectContextual(\"from\");\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || (0, _get8.default)((0, _getPrototypeOf2.default)(_class5.prototype), \"parseImportSource\", this).apply(this, arguments);\n      }\n    }]);\n    return _class5;\n  }(superClass);\n};\n\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    (0, _inherits2.default)(_class6, _superClass6);\n\n    var _super10 = _createSuper(_class6);\n\n    function _class6() {\n      (0, _classCallCheck2.default)(this, _class6);\n      return _super10.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(_class6, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(types.modulo)) {\n          var v8IntrinsicStart = this.state.start;\n          var node = this.startNode();\n          this.eat(types.modulo);\n\n          if (this.match(types.name)) {\n            var name = this.parseIdentifierName(this.state.start);\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n\n            if (this.match(types.parenL)) {\n              return identifier;\n            }\n          }\n\n          this.unexpected(v8IntrinsicStart);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parseV8Intrinsic() || (0, _get8.default)((0, _getPrototypeOf2.default)(_class6.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }]);\n    return _class6;\n  }(superClass);\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nvar PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    var moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n}\n\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    (0, _classCallCheck2.default)(this, State);\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  (0, _createClass2.default)(State, [{\n    key: \"init\",\n    value: function init(options) {\n      this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n      this.curLine = options.startLine;\n      this.startLoc = this.endLoc = this.curPosition();\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n\n        state[key] = val;\n      }\n\n      return state;\n    }\n  }]);\n  return State;\n}();\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nvar allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [].concat((0, _toConsumableArray2.default)(allowedNumericSeparatorSiblings.bin), [50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = [].concat((0, _toConsumableArray2.default)(allowedNumericSeparatorSiblings.oct), [56, 57]);\nallowedNumericSeparatorSiblings.hex = [].concat((0, _toConsumableArray2.default)(allowedNumericSeparatorSiblings.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\nvar Token = function Token(state) {\n  (0, _classCallCheck2.default)(this, Token);\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\nvar Tokenizer = /*#__PURE__*/function (_ParserError) {\n  (0, _inherits2.default)(Tokenizer, _ParserError);\n\n  var _super11 = _createSuper(Tokenizer);\n\n  function Tokenizer(options, input) {\n    var _this34;\n\n    (0, _classCallCheck2.default)(this, Tokenizer);\n    _this34 = _super11.call(this);\n    _this34.tokens = [];\n    _this34.state = new State();\n\n    _this34.state.init(options);\n\n    _this34.input = input;\n    _this34.length = input.length;\n    _this34.isLookahead = false;\n    return _this34;\n  }\n\n  (0, _createClass2.default)(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (!this.isLookahead) {\n        this.checkKeywordEscapes();\n\n        if (this.options.tokens) {\n          this.pushToken(new Token(this.state));\n        }\n      }\n\n      this.state.lastTokEnd = this.state.end;\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = old.clone(true);\n      this.isLookahead = true;\n      this.next();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      return pos + skip[0].length;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      this.state.strict = strict;\n      if (!this.match(types.num) && !this.match(types.string)) return;\n      this.state.pos = this.state.start;\n\n      while (this.state.pos < this.state.lineStart) {\n        this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n        --this.state.curLine;\n      }\n\n      this.nextToken();\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      var curContext = this.curContext();\n      if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n      this.state.octalPositions = [];\n      this.state.start = this.state.pos;\n      this.state.startLoc = this.state.curPosition();\n\n      if (this.state.pos >= this.length) {\n        this.finishToken(types.eof);\n        return;\n      }\n\n      var override = curContext == null ? void 0 : curContext.override;\n\n      if (override) {\n        override(this);\n      } else {\n        this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n      }\n    }\n  }, {\n    key: \"pushComment\",\n    value: function pushComment(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"CommentBlock\" : \"CommentLine\",\n        value: text,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, endLoc)\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment() {\n      var startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(\"*/\", this.state.pos + 2);\n      if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n      this.state.pos = end + 2;\n      lineBreakG.lastIndex = start;\n      var match;\n\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n        ++this.state.curLine;\n        this.state.lineStart = match.index + match[0].length;\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                this.skipBlockComment();\n                break;\n\n              case 47:\n                this.skipLineComment(2);\n                break;\n\n              default:\n                break loop;\n            }\n\n            break;\n\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else {\n              break loop;\n            }\n\n        }\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      this.state.endLoc = this.state.curPosition();\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n      if (!this.isLookahead) this.updateContext(prevType);\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n\n      var nextPos = this.state.pos + 1;\n      var next = this.input.charCodeAt(nextPos);\n\n      if (next >= 48 && next <= 57) {\n        throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n      }\n\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n          throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n        }\n\n        if (next === 123) {\n          this.finishToken(types.braceHashL);\n        } else {\n          this.finishToken(types.bracketHashL);\n        }\n\n        this.state.pos += 2;\n      } else {\n        this.finishOp(types.hash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(types.ellipsis);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.dot);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      if (this.state.exprAllowed && !this.state.inType) {\n        ++this.state.pos;\n        this.readRegexp();\n        return;\n      }\n\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.slash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(types.interpreterDirective, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? types.star : types.modulo;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var exprAllowed = this.state.exprAllowed;\n\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = types.exponent;\n      }\n\n      if (next === 61 && !exprAllowed) {\n        width++;\n        type = types.assign;\n      }\n\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n        }\n\n        return;\n      }\n\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(types.pipeline, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.bracketBarR, 2);\n          return;\n        }\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n        return;\n      }\n\n      this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.bitwiseXOR, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n          this.skipLineComment(3);\n          this.skipSpace();\n          this.nextToken();\n          return;\n        }\n\n        this.finishOp(types.incDec, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.plusMin, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt_gt\",\n    value: function readToken_lt_gt(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var size = 1;\n\n      if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n        if (this.input.charCodeAt(this.state.pos + size) === 61) {\n          this.finishOp(types.assign, size + 1);\n          return;\n        }\n\n        this.finishOp(types.bitShift, size);\n        return;\n      }\n\n      if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n        this.skipLineComment(4);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      if (next === 61) {\n        size = 2;\n      }\n\n      this.finishOp(types.relational, size);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(types.arrow);\n        return;\n      }\n\n      this.finishOp(code === 61 ? types.eq : types.bang, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n      if (next === 63) {\n        if (next2 === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(types.nullishCoalescing, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(types.questionDot);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.question);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n\n        case 40:\n          ++this.state.pos;\n          this.finishToken(types.parenL);\n          return;\n\n        case 41:\n          ++this.state.pos;\n          this.finishToken(types.parenR);\n          return;\n\n        case 59:\n          ++this.state.pos;\n          this.finishToken(types.semi);\n          return;\n\n        case 44:\n          ++this.state.pos;\n          this.finishToken(types.comma);\n          return;\n\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.bracketBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.bracketL);\n          }\n\n          return;\n\n        case 93:\n          ++this.state.pos;\n          this.finishToken(types.bracketR);\n          return;\n\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.braceBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.braceL);\n          }\n\n          return;\n\n        case 125:\n          ++this.state.pos;\n          this.finishToken(types.braceR);\n          return;\n\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(types.doubleColon, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.colon);\n          }\n\n          return;\n\n        case 63:\n          this.readToken_question();\n          return;\n\n        case 96:\n          ++this.state.pos;\n          this.finishToken(types.backQuote);\n          return;\n\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n\n        case 47:\n          this.readToken_slash();\n          return;\n\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n\n        case 94:\n          this.readToken_caret();\n          return;\n\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n\n        case 60:\n        case 62:\n          this.readToken_lt_gt(code);\n          return;\n\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n\n        case 126:\n          this.finishOp(types.tilde, 1);\n          return;\n\n        case 64:\n          ++this.state.pos;\n          this.finishToken(types.at);\n          return;\n\n        case 35:\n          this.readToken_numberSign();\n          return;\n\n        case 92:\n          this.readWord();\n          return;\n\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord();\n            return;\n          }\n\n      }\n\n      throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var start = this.state.pos;\n      var escaped, inClass;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        var ch = this.input.charAt(this.state.pos);\n\n        if (lineBreak.test(ch)) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === \"[\") {\n            inClass = true;\n          } else if (ch === \"]\" && inClass) {\n            inClass = false;\n          } else if (ch === \"/\" && !inClass) {\n            break;\n          }\n\n          escaped = ch === \"\\\\\";\n        }\n\n        ++this.state.pos;\n      }\n\n      var content = this.input.slice(start, this.state.pos);\n      ++this.state.pos;\n      var mods = \"\";\n\n      while (this.state.pos < this.length) {\n        var char = this.input[this.state.pos];\n        var charCode = this.input.codePointAt(this.state.pos);\n\n        if (VALID_REGEX_FLAGS.has(char)) {\n          if (mods.indexOf(char) > -1) {\n            this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n          }\n        } else if (isIdentifierChar(charCode) || charCode === 92) {\n          this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n        } else {\n          break;\n        }\n\n        ++this.state.pos;\n        mods += char;\n      }\n\n      this.finishToken(types.regexp, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len, forceLen) {\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var start = this.state.pos;\n      var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n      var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n      var invalid = false;\n      var total = 0;\n\n      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n        var code = this.input.charCodeAt(this.state.pos);\n        var val = void 0;\n\n        if (code === 95) {\n          var prev = this.input.charCodeAt(this.state.pos - 1);\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } else if (_isDigit(code)) {\n          val = code - 48;\n        } else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          if (this.options.errorRecovery && val <= 9) {\n            val = 0;\n            this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n          } else if (forceLen) {\n            val = 0;\n            invalid = true;\n          } else {\n            break;\n          }\n        }\n\n        ++this.state.pos;\n        total = total * radix + val;\n      }\n\n      if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n        return null;\n      }\n\n      return total;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var start = this.state.pos;\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n\n      if (val == null) {\n        this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      } else if (next === 109) {\n        throw this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      if (isBigInt) {\n        var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var isFloat = false;\n      var isBigInt = false;\n      var isDecimal = false;\n      var hasExponent = false;\n      var isOctal = false;\n\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidNumber);\n      }\n\n      var hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n      if (hasLeadingZero) {\n        var integer = this.input.slice(start, this.state.pos);\n\n        if (this.state.strict) {\n          this.raise(start, ErrorMessages.StrictOctalLiteral);\n        } else {\n          var underscorePos = integer.indexOf(\"_\");\n\n          if (underscorePos > 0) {\n            this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n          }\n        }\n\n        isOctal = hasLeadingZero && !/[89]/.test(integer);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 46 && !isOctal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if ((next === 69 || next === 101) && !isOctal) {\n        next = this.input.charCodeAt(++this.state.pos);\n\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n\n        if (this.readInt(10) === null) this.raise(start, ErrorMessages.InvalidNumber);\n        isFloat = true;\n        hasExponent = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if (next === 110) {\n        if (isFloat || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (next === 109) {\n        this.expectPlugin(\"decimal\", this.state.pos);\n\n        if (hasExponent || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidDecimal);\n        }\n\n        ++this.state.pos;\n        isDecimal = true;\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      var str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n      if (isBigInt) {\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      if (isDecimal) {\n        this.finishToken(types.decimal, str);\n        return;\n      }\n\n      var val = isOctal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var code;\n\n      if (ch === 123) {\n        var codePos = ++this.state.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n        ++this.state.pos;\n\n        if (code !== null && code > 0x10ffff) {\n          if (throwOnInvalid) {\n            this.raise(codePos, ErrorMessages.InvalidCodePoint);\n          } else {\n            return null;\n          }\n        }\n      } else {\n        code = this.readHexChar(4, false, throwOnInvalid);\n      }\n\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var out = \"\",\n          chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.readEscapedChar(false);\n          chunkStart = this.state.pos;\n        } else if (ch === 8232 || ch === 8233) {\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(types.string, out);\n    }\n  }, {\n    key: \"readTmplToken\",\n    value: function readTmplToken() {\n      var out = \"\",\n          chunkStart = this.state.pos,\n          containsInvalid = false;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n          if (this.state.pos === this.state.start && this.match(types.template)) {\n            if (ch === 36) {\n              this.state.pos += 2;\n              this.finishToken(types.dollarBraceL);\n              return;\n            } else {\n              ++this.state.pos;\n              this.finishToken(types.backQuote);\n              return;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(types.template, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          var escaped = this.readEscapedChar(true);\n\n          if (escaped === null) {\n            containsInvalid = true;\n          } else {\n            out += escaped;\n          }\n\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          ++this.state.pos;\n\n          switch (ch) {\n            case 13:\n              if (this.input.charCodeAt(this.state.pos) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n              out += \"\\n\";\n              break;\n\n            default:\n              out += String.fromCharCode(ch);\n              break;\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n    }\n  }, {\n    key: \"readEscapedChar\",\n    value: function readEscapedChar(inTemplate) {\n      var throwOnInvalid = !inTemplate;\n      var ch = this.input.charCodeAt(++this.state.pos);\n      ++this.state.pos;\n\n      switch (ch) {\n        case 110:\n          return \"\\n\";\n\n        case 114:\n          return \"\\r\";\n\n        case 120:\n          {\n            var code = this.readHexChar(2, false, throwOnInvalid);\n            return code === null ? null : String.fromCharCode(code);\n          }\n\n        case 117:\n          {\n            var _code = this.readCodePoint(throwOnInvalid);\n\n            return _code === null ? null : String.fromCodePoint(_code);\n          }\n\n        case 116:\n          return \"\\t\";\n\n        case 98:\n          return \"\\b\";\n\n        case 118:\n          return \"\\x0B\";\n\n        case 102:\n          return \"\\f\";\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n          this.state.lineStart = this.state.pos;\n          ++this.state.curLine;\n\n        case 8232:\n        case 8233:\n          return \"\";\n\n        case 56:\n        case 57:\n          if (inTemplate) {\n            return null;\n          } else if (this.state.strict) {\n            this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n          }\n\n        default:\n          if (ch >= 48 && ch <= 55) {\n            var codePos = this.state.pos - 1;\n            var match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n            var octalStr = match[0];\n            var octal = parseInt(octalStr, 8);\n\n            if (octal > 255) {\n              octalStr = octalStr.slice(0, -1);\n              octal = parseInt(octalStr, 8);\n            }\n\n            this.state.pos += octalStr.length - 1;\n            var next = this.input.charCodeAt(this.state.pos);\n\n            if (octalStr !== \"0\" || next === 56 || next === 57) {\n              if (inTemplate) {\n                return null;\n              } else if (this.state.strict) {\n                this.raise(codePos, ErrorMessages.StrictNumericEscape);\n              } else {\n                this.state.octalPositions.push(codePos);\n              }\n            }\n\n            return String.fromCharCode(octal);\n          }\n\n          return String.fromCharCode(ch);\n      }\n    }\n  }, {\n    key: \"readHexChar\",\n    value: function readHexChar(len, forceLen, throwOnInvalid) {\n      var codePos = this.state.pos;\n      var n = this.readInt(16, len, forceLen, false);\n\n      if (n === null) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n        } else {\n          this.state.pos = codePos - 1;\n        }\n      }\n\n      return n;\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1() {\n      var word = \"\";\n      this.state.containsEsc = false;\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n\n      while (this.state.pos < this.length) {\n        var ch = this.input.codePointAt(this.state.pos);\n\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (this.state.isIterator && ch === 64) {\n          ++this.state.pos;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.pos;\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n            continue;\n          }\n\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n            }\n\n            word += String.fromCodePoint(esc);\n          }\n\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"isIterator\",\n    value: function isIterator(word) {\n      return word === \"@@iterator\" || word === \"@@asyncIterator\";\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord() {\n      var word = this.readWord1();\n      var type = keywords.get(word) || types.name;\n\n      if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n        this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n      }\n\n      this.finishToken(type, word);\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var kw = this.state.type.keyword;\n\n      if (kw && this.state.containsEsc) {\n        this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n      }\n    }\n  }, {\n    key: \"braceIsBlock\",\n    value: function braceIsBlock(prevType) {\n      var parent = this.curContext();\n\n      if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n        return true;\n      }\n\n      if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n        return !parent.isExpr;\n      }\n\n      if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n        return this.hasPrecedingLineBreak();\n      }\n\n      if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n        return true;\n      }\n\n      if (prevType === types.braceL) {\n        return parent === types$1.braceStatement;\n      }\n\n      if (prevType === types._var || prevType === types._const || prevType === types.name) {\n        return false;\n      }\n\n      if (prevType === types.relational) {\n        return true;\n      }\n\n      return !this.state.exprAllowed;\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {\n      var type = this.state.type;\n      var update;\n\n      if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n        this.state.exprAllowed = false;\n      } else if (update = type.updateContext) {\n        update.call(this, prevType);\n      } else {\n        this.state.exprAllowed = type.beforeExpr;\n      }\n    }\n  }]);\n  return Tokenizer;\n}(ParserError);\n\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  (0, _inherits2.default)(UtilParser, _Tokenizer);\n\n  var _super12 = _createSuper(UtilParser);\n\n  function UtilParser() {\n    (0, _classCallCheck2.default)(this, UtilParser);\n    return _super12.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, val) {\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n      extra[key] = val;\n    }\n  }, {\n    key: \"isRelational\",\n    value: function isRelational(op) {\n      return this.match(types.relational) && this.state.value === op;\n    }\n  }, {\n    key: \"expectRelational\",\n    value: function expectRelational(op) {\n      if (this.isRelational(op)) {\n        this.next();\n      } else {\n        this.unexpected(null, types.relational);\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(name) {\n      return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n      return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(name) {\n      return this.isContextual(name) && this.eat(types.name);\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(name, message) {\n      if (!this.eatContextual(name)) this.unexpected(null, message);\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(types.semi) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, pos) {\n      this.eat(type) || this.unexpected(pos, type);\n    }\n  }, {\n    key: \"assertNoSpace\",\n    value: function assertNoSpace() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n      if (this.state.start > this.state.lastTokEnd) {\n        this.raise(this.state.lastTokEnd, message);\n      }\n    }\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(pos) {\n      var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n      if (typeof messageOrType !== \"string\") {\n        messageOrType = \"Unexpected token, expected \\\"\".concat(messageOrType.label, \"\\\"\");\n      }\n\n      throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(name, pos) {\n      if (!this.hasPlugin(name)) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: [name]\n        }, \"This experimental syntax requires enabling the parser plugin: '\".concat(name, \"'\"));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(names, pos) {\n      var _this35 = this;\n\n      if (!names.some(function (n) {\n        return _this35.hasPlugin(n);\n      })) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: names\n        }, \"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(names.join(\", \"), \"'\"));\n      }\n    }\n  }, {\n    key: \"checkYieldAwaitInDefaultParams\",\n    value: function checkYieldAwaitInDefaultParams() {\n      if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n        this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n      }\n\n      if (this.state.awaitPos !== -1) {\n        this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssign = refExpressionErrors.shorthandAssign,\n          doubleProto = refExpressionErrors.doubleProto;\n      if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n    }\n  }]);\n  return UtilParser;\n}(Tokenizer);\n\nvar ExpressionErrors = function ExpressionErrors() {\n  (0, _classCallCheck2.default)(this, ExpressionErrors);\n  this.shorthandAssign = -1;\n  this.doubleProto = -1;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(parser, pos, loc) {\n    (0, _classCallCheck2.default)(this, Node);\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  (0, _createClass2.default)(Node, [{\n    key: \"__clone\",\n    value: function __clone() {\n      var newNode = new Node();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n\n        if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n          newNode[key] = this[key];\n        }\n      }\n\n      return newNode;\n    }\n  }]);\n  return Node;\n}();\n\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  (0, _inherits2.default)(NodeUtils, _UtilParser);\n\n  var _super13 = _createSuper(NodeUtils);\n\n  function NodeUtils() {\n    (0, _classCallCheck2.default)(this, NodeUtils);\n    return _super13.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(pos, loc) {\n      return new Node(this, pos, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.start, type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, pos, loc) {\n      node.type = type;\n      node.end = pos;\n      node.loc.end = loc;\n      if (this.options.ranges) node.range[1] = pos;\n      this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, start, startLoc) {\n      node.start = start;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = start;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n      var endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n      node.end = end;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = end;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n    }\n  }]);\n  return NodeUtils;\n}(UtilParser);\n\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  (0, _inherits2.default)(LValParser, _NodeUtils);\n\n  var _super14 = _createSuper(LValParser);\n\n  function LValParser() {\n    (0, _classCallCheck2.default)(this, LValParser);\n    return _super14.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var _node$extra, _node$extra3;\n\n      var parenthesized = undefined;\n\n      if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n        parenthesized = unwrapParenthesizedExpression(node);\n\n        if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      }\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0, length = node.properties.length, _last2 = length - 1; i < length; i++) {\n            var _node$extra2;\n\n            var prop = node.properties[i];\n            var isLast = i === _last2;\n            this.toAssignableObjectExpressionProp(prop, isLast);\n\n            if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            var arg = node.argument;\n            this.toAssignable(arg);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized);\n          break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast) {\n      if (prop.type === \"ObjectMethod\") {\n        var error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n        this.raise(prop.key.start, error);\n      } else if (prop.type === \"SpreadElement\" && !isLast) {\n        this.raiseRestNotLast(prop.start);\n      } else {\n        this.toAssignable(prop);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaPos) {\n      var end = exprList.length;\n\n      if (end) {\n        var _last3 = exprList[end - 1];\n\n        if ((_last3 == null ? void 0 : _last3.type) === \"RestElement\") {\n          --end;\n        } else if ((_last3 == null ? void 0 : _last3.type) === \"SpreadElement\") {\n          _last3.type = \"RestElement\";\n          var arg = _last3.argument;\n          this.toAssignable(arg);\n\n          if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n            this.unexpected(arg.start);\n          }\n\n          if (trailingCommaPos) {\n            this.raiseTrailingCommaAfterRest(trailingCommaPos);\n          }\n\n          --end;\n        }\n      }\n\n      for (var i = 0; i < end; i++) {\n        var elt = exprList[i];\n\n        if (elt) {\n          this.toAssignable(elt);\n\n          if (elt.type === \"RestElement\") {\n            this.raiseRestNotLast(elt.start);\n          }\n        }\n      }\n\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n\n      for (var _i = 0; _i < exprList.length; _i++) {\n        var expr = exprList[_i];\n\n        if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n          this.toReferencedListDeep(expr.elements);\n        }\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors, refNeedsArrowPos) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case types.bracketL:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(types.bracketR, 93, true);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n\n        case types.braceL:\n          return this.parseObjectLike(types.braceR, true);\n      }\n\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n        }\n\n        if (allowEmpty && this.match(types.comma)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(types.ellipsis)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n          this.checkCommaAfterRest(closeCharCode);\n          this.expect(close);\n          break;\n        } else {\n          var decorators = [];\n\n          if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n          }\n\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n\n          elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n        }\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(allowModifiers, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startPos, startLoc, left) {\n      var _startLoc, _startPos, _left;\n\n      startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n      startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n      left = (_left = left) != null ? _left : this.parseBindingAtom();\n      if (!this.eat(types.eq)) return left;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssignAllowIn();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expr) {\n      var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n      var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n      var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n      var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n      var strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      switch (expr.type) {\n        case \"Identifier\":\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n          }\n\n          if (checkClashes) {\n            var key = \"_\".concat(expr.name);\n\n            if (checkClashes[key]) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes[key] = true;\n            }\n          }\n\n          if (disallowLetBinding && expr.name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(expr.name, bindingType, expr.start);\n          }\n\n          break;\n\n        case \"MemberExpression\":\n          if (bindingType !== BIND_NONE) {\n            this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n          }\n\n          break;\n\n        case \"ObjectPattern\":\n          for (var _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n            var prop = _expr$properties[_i2];\n            if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n            this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n          }\n\n          break;\n\n        case \"ArrayPattern\":\n          for (var _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n            var elem = _expr$elements[_i3];\n\n            if (elem) {\n              this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n            }\n          }\n\n          break;\n\n        case \"AssignmentPattern\":\n          this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n          break;\n\n        case \"RestElement\":\n          this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n          break;\n\n        default:\n          {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n          }\n      }\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node) {\n      if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n        this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (this.match(types.comma)) {\n        if (this.lookaheadCharCode() === close) {\n          this.raiseTrailingCommaAfterRest(this.state.start);\n        } else {\n          this.raiseRestNotLast(this.state.start);\n        }\n      }\n    }\n  }, {\n    key: \"raiseRestNotLast\",\n    value: function raiseRestNotLast(pos) {\n      throw this.raise(pos, ErrorMessages.ElementAfterRest);\n    }\n  }, {\n    key: \"raiseTrailingCommaAfterRest\",\n    value: function raiseTrailingCommaAfterRest(pos) {\n      this.raise(pos, ErrorMessages.RestTrailingComma);\n    }\n  }]);\n  return LValParser;\n}(NodeUtils);\n\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  (0, _inherits2.default)(ExpressionParser, _LValParser);\n\n  var _super15 = _createSuper(ExpressionParser);\n\n  function ExpressionParser() {\n    (0, _classCallCheck2.default)(this, ExpressionParser);\n    return _super15.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n        return;\n      }\n\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(key.start, ErrorMessages.RecordNoProto);\n          return;\n        }\n\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProto === -1) {\n              refExpressionErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raise(key.start, ErrorMessages.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"shouldExitDescending\",\n    value: function shouldExitDescending(expr, potentialArrowAt) {\n      return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      this.nextToken();\n      var expr = this.parseExpression();\n\n      if (!this.match(types.eof)) {\n        this.unexpected();\n      }\n\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(disallowIn, refExpressionErrors) {\n      var _this36 = this;\n\n      if (disallowIn) {\n        return this.disallowInAnd(function () {\n          return _this36.parseExpressionBase(refExpressionErrors);\n        });\n      }\n\n      return this.allowInAnd(function () {\n        return _this36.parseExpressionBase(refExpressionErrors);\n      });\n    }\n  }, {\n    key: \"parseExpressionBase\",\n    value: function parseExpressionBase(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(refExpressionErrors);\n\n      if (this.match(types.comma)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [expr];\n\n        while (this.eat(types.comma)) {\n          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n        }\n\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssignDisallowIn\",\n    value: function parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _this37 = this;\n\n      return this.disallowInAnd(function () {\n        return _this37.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssignAllowIn\",\n    value: function parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _this38 = this;\n\n      return this.allowInAnd(function () {\n        return _this38.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      if (this.isContextual(\"yield\")) {\n        if (this.prodParam.hasYield) {\n          var _left2 = this.parseYield();\n\n          if (afterLeftParse) {\n            _left2 = afterLeftParse.call(this, _left2, startPos, startLoc);\n          }\n\n          return _left2;\n        } else {\n          this.state.exprAllowed = false;\n        }\n      }\n\n      var ownExpressionErrors;\n\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n\n      if (this.match(types.parenL) || this.match(types.name)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n\n      var left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n      }\n\n      if (this.state.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n\n        if (this.match(types.eq)) {\n          node.left = this.toAssignable(left);\n          refExpressionErrors.doubleProto = -1;\n        } else {\n          node.left = left;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= node.left.start) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n\n        this.checkLVal(left, undefined, undefined, \"assignment expression\");\n        this.next();\n        node.right = this.parseMaybeAssign();\n        return this.finishNode(node, \"AssignmentExpression\");\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (this.eat(types.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssignAllowIn();\n        this.expect(types.colon);\n        node.alternate = this.parseMaybeAssign();\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnary(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseExprOp(expr, startPos, startLoc, -1);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n      var prec = this.state.type.binop;\n\n      if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n        if (prec > minPrec) {\n          var op = this.state.type;\n\n          if (op === types.pipeline) {\n            this.expectPlugin(\"pipelineOperator\");\n\n            if (this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n\n            this.state.inPipeline = true;\n            this.checkPipelineAtInfixOperator(left, leftStartPos);\n          }\n\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.left = left;\n          node.operator = this.state.value;\n\n          if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n            this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n          }\n\n          var logical = op === types.logicalOR || op === types.logicalAND;\n          var coalesce = op === types.nullishCoalescing;\n\n          if (coalesce) {\n            prec = types.logicalAND.binop;\n          }\n\n          this.next();\n\n          if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n            if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n              throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n            }\n          }\n\n          node.right = this.parseExprOpRightExpr(op, prec);\n          this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n\n          if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n            throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n          }\n\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec) {\n      var _this39 = this;\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      switch (op) {\n        case types.pipeline:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"smart\":\n              return this.withTopicPermittingContext(function () {\n                return _this39.parseSmartPipelineBody(_this39.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n              });\n\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this39.parseFSharpPipelineBody(prec);\n              });\n          }\n\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors) {\n      if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n        return this.parseAwait();\n      }\n\n      var update = this.match(types.incDec);\n      var node = this.startNode();\n\n      if (this.state.type.prefix) {\n        node.operator = this.state.value;\n        node.prefix = true;\n\n        if (this.match(types._throw)) {\n          this.expectPlugin(\"throwExpressions\");\n        }\n\n        var isDelete = this.match(types._delete);\n        this.next();\n        node.argument = this.parseMaybeUnary();\n        this.checkExpressionErrors(refExpressionErrors, true);\n\n        if (this.state.strict && isDelete) {\n          var arg = node.argument;\n\n          if (arg.type === \"Identifier\") {\n            this.raise(node.start, ErrorMessages.StrictDelete);\n          } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n            this.raise(node.start, ErrorMessages.DeletePrivateField);\n          }\n        }\n\n        if (!update) {\n          return this.finishNode(node, \"UnaryExpression\");\n        }\n      }\n\n      return this.parseUpdate(node, update, refExpressionErrors);\n    }\n  }, {\n    key: \"parseUpdate\",\n    value: function parseUpdate(node, update, refExpressionErrors) {\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n        return this.finishNode(node, \"UpdateExpression\");\n      }\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n      while (this.state.type.postfix && !this.canInsertSemicolon()) {\n        var _node10 = this.startNodeAt(startPos, startLoc);\n\n        _node10.operator = this.state.value;\n        _node10.prefix = false;\n        _node10.argument = expr;\n        this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n        this.next();\n        expr = this.finishNode(_node10, \"UpdateExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseSubscripts(expr, startPos, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n\n      do {\n        var oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n        if (state.maybeAsyncArrow) {\n          this.state.maybeInAsyncArrowHead = true;\n        }\n\n        base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n        this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n      } while (!state.stop);\n\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      if (!noCalls && this.eat(types.doubleColon)) {\n        return this.parseBind(base, startPos, startLoc, noCalls, state);\n      } else if (this.match(types.backQuote)) {\n        return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n      }\n\n      var optional = false;\n\n      if (this.match(types.questionDot)) {\n        state.optionalChainMember = optional = true;\n\n        if (noCalls && this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n\n        this.next();\n      }\n\n      if (!noCalls && this.match(types.parenL)) {\n        return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n      } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n        return this.parseMember(base, startPos, startLoc, state, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }, {\n    key: \"parseMember\",\n    value: function parseMember(base, startPos, startLoc, state, optional) {\n      var node = this.startNodeAt(startPos, startLoc);\n      var computed = this.eat(types.bracketL);\n      node.object = base;\n      node.computed = computed;\n      var property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n      if (property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, ErrorMessages.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(property.id.name, property.start);\n      }\n\n      node.property = property;\n\n      if (computed) {\n        this.expect(types.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    }\n  }, {\n    key: \"parseBind\",\n    value: function parseBind(base, startPos, startLoc, noCalls, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n  }, {\n    key: \"parseCoverCallAndAsyncArrowHead\",\n    value: function parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n      }\n\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n\n      if (state.optionalChainMember) {\n        this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n      }\n\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          this.expectPlugin(\"moduleAttributes\");\n        }\n\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n        } else {\n          for (var _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n            var arg = _node$arguments[_i];\n\n            if (arg.type === \"SpreadElement\") {\n              this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n            }\n          }\n        }\n      }\n\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n      var elts = [];\n      var innerParenStart;\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n            }\n\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        if (this.match(types.parenL) && !innerParenStart) {\n          innerParenStart = this.state.start;\n        }\n\n        elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n          start: 0\n        } : undefined, allowPlaceholder));\n      }\n\n      if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n        this.unexpected();\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(types.arrow) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n\n      this.expect(types.arrow);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      if (this.state.type === types.slash) this.readRegexp();\n      var canBeArrow = this.state.potentialArrowAt === this.state.start;\n      var node;\n\n      switch (this.state.type) {\n        case types._super:\n          return this.parseSuper();\n\n        case types._import:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(types.dot)) {\n            return this.parseImportMetaProperty(node);\n          }\n\n          if (!this.match(types.parenL)) {\n            this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n          }\n\n          return this.finishNode(node, \"Import\");\n\n        case types._this:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n\n        case types.name:\n          {\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n\n            if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n              if (this.match(types._function)) {\n                var _last4 = this.state.context.length - 1;\n\n                if (this.state.context[_last4] !== types$1.functionStatement) {\n                  throw new Error(\"Internal error\");\n                }\n\n                this.state.context[_last4] = types$1.functionExpression;\n                this.next();\n                return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n              } else if (this.match(types.name)) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              }\n            }\n\n            if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n              this.next();\n              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n            }\n\n            return id;\n          }\n\n        case types._do:\n          {\n            return this.parseDo();\n          }\n\n        case types.regexp:\n          {\n            var value = this.state.value;\n            node = this.parseLiteral(value.value, \"RegExpLiteral\");\n            node.pattern = value.pattern;\n            node.flags = value.flags;\n            return node;\n          }\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n        case types.decimal:\n          return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n        case types._null:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"NullLiteral\");\n\n        case types._true:\n        case types._false:\n          return this.parseBooleanLiteral();\n\n        case types.parenL:\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n\n        case types.bracketBarL:\n        case types.bracketHashL:\n          {\n            return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n          }\n\n        case types.bracketL:\n          {\n            return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n          }\n\n        case types.braceBarL:\n        case types.braceHashL:\n          {\n            return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n          }\n\n        case types.braceL:\n          {\n            return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n          }\n\n        case types._function:\n          return this.parseFunctionOrFunctionSent();\n\n        case types.at:\n          this.parseDecorators();\n\n        case types._class:\n          node = this.startNode();\n          this.takeDecorators(node);\n          return this.parseClass(node, false);\n\n        case types._new:\n          return this.parseNewOrNewTarget();\n\n        case types.backQuote:\n          return this.parseTemplate(false);\n\n        case types.doubleColon:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n            }\n          }\n\n        case types.hash:\n          {\n            if (this.state.inPipeline) {\n              node = this.startNode();\n\n              if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n                this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n              }\n\n              this.next();\n\n              if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n                this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n              }\n\n              this.registerTopicReference();\n              return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n            }\n\n            var nextCh = this.input.codePointAt(this.state.end);\n\n            if (isIdentifierStart(nextCh) || nextCh === 92) {\n              var start = this.state.start;\n              node = this.parseMaybePrivateName(true);\n\n              if (this.match(types._in)) {\n                this.expectPlugin(\"privateIn\");\n                this.classScope.usePrivateName(node.id.name, node.start);\n              } else if (this.hasPlugin(\"privateIn\")) {\n                this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n              } else {\n                throw this.unexpected(start);\n              }\n\n              return node;\n            }\n          }\n\n        case types.relational:\n          {\n            if (this.state.value === \"<\") {\n              var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n            }\n          }\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseAsyncArrowUnaryFunction\",\n    value: function parseAsyncArrowUnaryFunction(id) {\n      var node = this.startNodeAtNode(id);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.maybeInAsyncArrowHead = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      var params = [this.parseIdentifier()];\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n      }\n\n      this.expect(types.arrow);\n      this.checkYieldAwaitInDefaultParams();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      this.parseArrowExpression(node, params, true);\n      return node;\n    }\n  }, {\n    key: \"parseDo\",\n    value: function parseDo() {\n      this.expectPlugin(\"doExpressions\");\n      var node = this.startNode();\n      this.next();\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      node.body = this.parseBlock();\n      this.state.labels = oldLabels;\n      return this.finishNode(node, \"DoExpression\");\n    }\n  }, {\n    key: \"parseSuper\",\n    value: function parseSuper() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.SuperNotAllowed);\n      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.UnexpectedSuper);\n      }\n\n      if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n        this.raise(node.start, ErrorMessages.UnsupportedSuper);\n      }\n\n      return this.finishNode(node, \"Super\");\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral() {\n      var node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseMaybePrivateName\",\n    value: function parseMaybePrivateName(isPrivateNameAllowed) {\n      var isPrivate = this.match(types.hash);\n\n      if (isPrivate) {\n        this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n        if (!isPrivateNameAllowed) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n        }\n\n        var node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space between # and identifier\");\n        node.id = this.parseIdentifier(true);\n        return this.finishNode(node, \"PrivateName\");\n      } else {\n        return this.parseIdentifier(true);\n      }\n    }\n  }, {\n    key: \"parseFunctionOrFunctionSent\",\n    value: function parseFunctionOrFunctionSent() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.prodParam.hasYield && this.match(types.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n        this.next();\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n\n      if (meta.name === \"function\" && propertyName === \"sent\") {\n        if (this.isContextual(propertyName)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n      }\n\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n      }\n\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.next();\n\n      if (this.isContextual(\"meta\")) {\n        if (!this.inModule) {\n          this.raiseWithData(id.start, {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          }, ErrorMessages.ImportMetaOutsideModule);\n        }\n\n        this.sawUnambiguousESM = true;\n      }\n\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type, startPos, startLoc) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      var node = this.startNodeAt(startPos, startLoc);\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var val;\n      this.next();\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartPos = this.state.start;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var refNeedsArrowPos = {\n        start: 0\n      };\n      var first = true;\n      var spreadStart;\n      var optionalCommaStart;\n\n      while (!this.match(types.parenR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma, refNeedsArrowPos.start || null);\n\n          if (this.match(types.parenR)) {\n            optionalCommaStart = this.state.start;\n            break;\n          }\n        }\n\n        if (this.match(types.ellipsis)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStart = this.state.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n          this.checkCommaAfterRest(41);\n          break;\n        } else {\n          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n        }\n      }\n\n      var innerEndPos = this.state.lastTokEnd;\n      var innerEndLoc = this.state.lastTokEndLoc;\n      this.expect(types.parenR);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startPos, startLoc);\n\n      if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n        if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n\n        for (var _i2 = 0; _i2 < exprList.length; _i2++) {\n          var param = exprList[_i2];\n\n          if (param.extra && param.extra.parenthesized) {\n            this.unexpected(param.extra.parenStart);\n          }\n        }\n\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n      if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStart);\n      }\n\n      if (optionalCommaStart) this.unexpected(optionalCommaStart);\n      if (spreadStart) this.unexpected(spreadStart);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n      this.toReferencedListDeep(exprList, true);\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(val, \"parenthesized\", true);\n        this.addExtra(val, \"parenStart\", startPos);\n        return val;\n      }\n\n      var parenExpression = this.startNodeAt(startPos, startLoc);\n      parenExpression.expression = val;\n      this.finishNode(parenExpression, \"ParenthesizedExpression\");\n      return parenExpression;\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow() {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(types.arrow)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startPos, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNewOrNewTarget\",\n    value: function parseNewOrNewTarget() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n        this.next();\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n          var error = ErrorMessages.UnexpectedNewTarget;\n\n          if (this.hasPlugin(\"classProperties\")) {\n            error += \" or class properties\";\n          }\n\n          this.raise(metaProp.start, error);\n        }\n\n        return metaProp;\n      }\n\n      return this.parseNew(node);\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew(node) {\n      node.callee = this.parseNoCallExpr();\n\n      if (node.callee.type === \"Import\") {\n        this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n      } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n        this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n      } else if (this.eat(types.questionDot)) {\n        this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n      }\n\n      this.parseNewArguments(node);\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewArguments\",\n    value: function parseNewArguments(node) {\n      if (this.eat(types.parenL)) {\n        var args = this.parseExprList(types.parenR);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var elem = this.startNode();\n\n      if (this.state.value === null) {\n        if (!isTagged) {\n          this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n        }\n      }\n\n      elem.value = {\n        raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.state.value\n      };\n      this.next();\n      elem.tail = this.match(types.backQuote);\n      return this.finishNode(elem, \"TemplateElement\");\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      this.next();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n\n      while (!curElt.tail) {\n        this.expect(types.dollarBraceL);\n        node.expressions.push(this.parseExpression());\n        this.expect(types.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n\n      this.next();\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseObjectLike\",\n    value: function parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n      if (isRecord) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n            this.next();\n            break;\n          }\n        }\n\n        var prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n        if (!isPattern) {\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n\n        if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n          this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n        }\n\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n\n        node.properties.push(prop);\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var type = \"ObjectExpression\";\n\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"maybeAsyncOrAccessorProp\",\n    value: function maybeAsyncOrAccessorProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n    }\n  }, {\n    key: \"parsePropertyDefinition\",\n    value: function parsePropertyDefinition(isPattern, refExpressionErrors) {\n      var decorators = [];\n\n      if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n\n      var prop = this.startNode();\n      var isGenerator = false;\n      var isAsync = false;\n      var isAccessor = false;\n      var startPos;\n      var startLoc;\n\n      if (this.match(types.ellipsis)) {\n        if (decorators.length) this.unexpected();\n\n        if (isPattern) {\n          this.next();\n          prop.argument = this.parseIdentifier();\n          this.checkCommaAfterRest(125);\n          return this.finishNode(prop, \"RestElement\");\n        }\n\n        return this.parseSpread();\n      }\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      prop.method = false;\n\n      if (isPattern || refExpressionErrors) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types.star);\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parsePropertyName(prop, false);\n\n      if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n        var keyName = key.name;\n\n        if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n          isAsync = true;\n          isGenerator = this.eat(types.star);\n          this.parsePropertyName(prop, false);\n        }\n\n        if (keyName === \"get\" || keyName === \"set\") {\n          isAccessor = true;\n          prop.kind = keyName;\n\n          if (this.match(types.star)) {\n            this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n            this.next();\n          }\n\n          this.parsePropertyName(prop, false);\n        }\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n      return prop;\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var start = method.start;\n\n      if (method.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n      if (isAccessor) {\n        this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(prop);\n        return prop;\n      }\n\n      if (isAsync || isGenerator || this.match(types.parenL)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n\n      if (this.eat(types.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else if (this.match(types.eq) && refExpressionErrors) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = this.state.start;\n          }\n\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else {\n          prop.value = prop.key.__clone();\n        }\n\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, isPrivateNameAllowed) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssignAllowIn();\n        this.expect(types.bracketR);\n      } else {\n        var oldInPropertyName = this.state.inPropertyName;\n        this.state.inPropertyName = true;\n        prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n        if (prop.key.type !== \"PrivateName\") {\n          prop.computed = false;\n        }\n\n        this.state.inPropertyName = oldInPropertyName;\n      }\n\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = !!isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.initFunction(node, isAsync);\n      node.generator = !!isGenerator;\n      var allowModifiers = isConstructor;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, allowModifiers);\n      this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return node;\n    }\n  }, {\n    key: \"parseArrayLike\",\n    value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      if (isTuple) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      var flags = functionFlags(isAsync, false);\n\n      if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n        flags |= PARAM_IN;\n      }\n\n      this.prodParam.enter(flags);\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaPos);\n      }\n\n      this.state.maybeInArrowParameters = false;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaPos) {\n      node.params = this.toAssignableList(params, trailingCommaPos);\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this40 = this;\n\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(types.braceL);\n      var oldInParameters = this.state.inParameters;\n      this.state.inParameters = false;\n\n      if (isExpression) {\n        node.body = this.parseMaybeAssignAllowIn();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this40.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            var errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n\n            _this40.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n          }\n\n          var strictModeChanged = !oldStrict && _this40.state.strict;\n\n          _this40.checkParams(node, !_this40.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n          if (_this40.state.strict && node.id) {\n            _this40.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.state.labels = oldLabels;\n      }\n\n      this.state.inParameters = oldInParameters;\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (params[i].type !== \"Identifier\") return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var nameHash = Object.create(null);\n\n      for (var i = 0; i < node.params.length; i++) {\n        this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n      var elt;\n\n      if (this.match(types.comma)) {\n        if (!allowEmpty) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n        }\n\n        elt = null;\n      } else if (this.match(types.ellipsis)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n      } else if (this.match(types.question)) {\n        this.expectPlugin(\"partialApplication\");\n\n        if (!allowPlaceholder) {\n          this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n        }\n\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(node.start, liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(pos, liberal) {\n      var name;\n      var _this$state2 = this.state,\n          start = _this$state2.start,\n          type = _this$state2.type;\n\n      if (type === types.name) {\n        name = this.state.value;\n      } else if (type.keyword) {\n        name = type.keyword;\n        var curContext = this.curContext();\n\n        if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n          this.state.context.pop();\n        }\n      } else {\n        throw this.unexpected();\n      }\n\n      if (liberal) {\n        this.state.type = types.name;\n      } else {\n        this.checkReservedWord(name, start, !!type.keyword, false);\n      }\n\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (this.prodParam.hasYield && word === \"yield\") {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n\n      if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n          return;\n        }\n\n        if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n          this.state.awaitPos = this.state.start;\n        }\n      }\n\n      if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n        this.raise(startLoc, ErrorMessages.ArgumentsDisallowedInInitializer);\n        return;\n      }\n\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n        return;\n      }\n\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n      if (reservedTest(word, this.inModule)) {\n        if (!this.prodParam.hasAwait && word === \"await\") {\n          this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n        } else {\n          this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n        }\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.scope.inFunction) return this.prodParam.hasAwait;\n      if (this.options.allowAwaitOutsideFunction) return true;\n\n      if (this.hasPlugin(\"topLevelAwait\")) {\n        return this.inModule && this.prodParam.hasAwait;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.state.inParameters) {\n        this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n      } else if (this.state.awaitPos === -1) {\n        this.state.awaitPos = node.start;\n      }\n\n      if (this.eat(types.star)) {\n        this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n      }\n\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary();\n      }\n\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield() {\n      var node = this.startNode();\n\n      if (this.state.inParameters) {\n        this.raise(node.start, ErrorMessages.YieldInParameter);\n      } else if (this.state.yieldPos === -1) {\n        this.state.yieldPos = node.start;\n      }\n\n      this.next();\n\n      if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(types.star);\n        node.argument = this.parseMaybeAssign();\n      }\n\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartPos) {\n      if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n        }\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBody\",\n    value: function parseSmartPipelineBody(childExpression, startPos, startLoc) {\n      this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n      return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n    }\n  }, {\n    key: \"checkSmartPipelineBodyEarlyErrors\",\n    value: function checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n      if (this.match(types.arrow)) {\n        throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n      } else if (childExpression.type === \"SequenceExpression\") {\n        this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n      var bodyNode = this.startNodeAt(startPos, startLoc);\n      var isSimpleReference = this.isSimpleReference(childExpression);\n\n      if (isSimpleReference) {\n        bodyNode.callee = childExpression;\n      } else {\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n        }\n\n        bodyNode.expression = childExpression;\n      }\n\n      return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n\n        case \"Identifier\":\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"withTopicPermittingContext\",\n    value: function withTopicPermittingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withTopicForbiddingContext\",\n    value: function withTopicForbiddingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"allowInAnd\",\n    value: function allowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToSet = PARAM_IN & ~flags;\n\n      if (prodParamToSet) {\n        this.prodParam.enter(flags | PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"disallowInAnd\",\n    value: function disallowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToClear = PARAM_IN & flags;\n\n      if (prodParamToClear) {\n        this.prodParam.enter(flags & ~PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"primaryTopicReferenceIsAllowedInCurrentTopicContext\",\n    value: function primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentTopicContext\",\n    value: function topicReferenceWasUsedInCurrentTopicContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }]);\n  return ExpressionParser;\n}(LValParser);\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\nvar FUNC_NO_FLAGS = 0,\n    FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4;\n\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  (0, _inherits2.default)(StatementParser, _ExpressionParser);\n\n  var _super16 = _createSuper(StatementParser);\n\n  function StatementParser() {\n    (0, _classCallCheck2.default)(this, StatementParser);\n    return _super16.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      program.sourceType = this.options.sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, types.eof);\n\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n          var _Array$from$_i = (0, _slicedToArray2.default)(_Array$from[_i], 1),\n              name = _Array$from$_i[0];\n\n          var pos = this.scope.undefinedExports.get(name);\n          this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n        }\n      }\n\n      file.program = this.finishNode(program, \"Program\");\n      file.comments = this.state.comments;\n      if (this.options.tokens) file.tokens = this.tokens;\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var expr = stmt.expression;\n      var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n      var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n      var raw = this.input.slice(expr.start, expr.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n      return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(types.interpreterDirective)) {\n        return null;\n      }\n\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet(context) {\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var nextCh = this.input.charCodeAt(next);\n      if (nextCh === 91) return true;\n      if (context) return false;\n      if (nextCh === 123) return true;\n\n      if (isIdentifierStart(nextCh)) {\n        var pos = next + 1;\n\n        while (isIdentifierChar(this.input.charCodeAt(pos))) {\n          ++pos;\n        }\n\n        var ident = this.input.slice(next, pos);\n        if (!keywordRelationalOperator.test(ident)) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement(context, topLevel) {\n      if (this.match(types.at)) {\n        this.parseDecorators(true);\n      }\n\n      return this.parseStatementContent(context, topLevel);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(context, topLevel) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var kind;\n\n      if (this.isLet(context)) {\n        starttype = types._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case types._break:\n        case types._continue:\n          return this.parseBreakContinueStatement(node, starttype.keyword);\n\n        case types._debugger:\n          return this.parseDebuggerStatement(node);\n\n        case types._do:\n          return this.parseDoStatement(node);\n\n        case types._for:\n          return this.parseForStatement(node);\n\n        case types._function:\n          if (this.lookaheadCharCode() === 46) break;\n\n          if (context) {\n            if (this.state.strict) {\n              this.raise(this.state.start, ErrorMessages.StrictFunction);\n            } else if (context !== \"if\" && context !== \"label\") {\n              this.raise(this.state.start, ErrorMessages.SloppyFunction);\n            }\n          }\n\n          return this.parseFunctionStatement(node, false, !context);\n\n        case types._class:\n          if (context) this.unexpected();\n          return this.parseClass(node, true);\n\n        case types._if:\n          return this.parseIfStatement(node);\n\n        case types._return:\n          return this.parseReturnStatement(node);\n\n        case types._switch:\n          return this.parseSwitchStatement(node);\n\n        case types._throw:\n          return this.parseThrowStatement(node);\n\n        case types._try:\n          return this.parseTryStatement(node);\n\n        case types._const:\n        case types._var:\n          kind = kind || this.state.value;\n\n          if (context && kind !== \"var\") {\n            this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n          }\n\n          return this.parseVarStatement(node, kind);\n\n        case types._while:\n          return this.parseWhileStatement(node);\n\n        case types._with:\n          return this.parseWithStatement(node);\n\n        case types.braceL:\n          return this.parseBlock();\n\n        case types.semi:\n          return this.parseEmptyStatement(node);\n\n        case types._import:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n          }\n\n        case types._export:\n          {\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n            }\n\n            this.next();\n            var result;\n\n            if (starttype === types._import) {\n              result = this.parseImport(node);\n\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node);\n\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n\n            this.assertModuleNodeAllowed(node);\n            return result;\n          }\n\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (context) {\n                this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n              }\n\n              this.next();\n              return this.parseFunctionStatement(node, true, !context);\n            }\n          }\n      }\n\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raiseWithData(node.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportOutsideModule);\n      }\n    }\n  }, {\n    key: \"takeDecorators\",\n    value: function takeDecorators(node) {\n      var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (decorators.length) {\n        node.decorators = decorators;\n        this.resetStartLocationFromNode(node, decorators[0]);\n        this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n      }\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(types._class);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      while (this.match(types.at)) {\n        var decorator = this.parseDecorator();\n        currentContextDecorators.push(decorator);\n      }\n\n      if (this.match(types._export)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n\n        if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n      }\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n      var node = this.startNode();\n      this.next();\n\n      if (this.hasPlugin(\"decorators\")) {\n        this.state.decoratorStack.push([]);\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr;\n\n        if (this.eat(types.parenL)) {\n          expr = this.parseExpression();\n          this.expect(types.parenR);\n        } else {\n          expr = this.parseIdentifier(false);\n\n          while (this.eat(types.dot)) {\n            var _node11 = this.startNodeAt(startPos, startLoc);\n\n            _node11.object = expr;\n            _node11.property = this.parseIdentifier(true);\n            _node11.computed = false;\n            expr = this.finishNode(_node11, \"MemberExpression\");\n          }\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        this.state.decoratorStack.pop();\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(types.parenL)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, keyword) {\n      var isBreak = keyword === \"break\";\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n\n      this.verifyBreakContinue(node, keyword);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, keyword) {\n      var isBreak = keyword === \"break\";\n      var i;\n\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n\n      if (i === this.state.labels.length) {\n        this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(types.parenL);\n      var val = this.parseExpression();\n      this.expect(types.parenR);\n      return val;\n    }\n  }, {\n    key: \"parseDoStatement\",\n    value: function parseDoStatement(node) {\n      var _this41 = this;\n\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this41.parseStatement(\"do\");\n      });\n      this.state.labels.pop();\n      this.expect(types._while);\n      node.test = this.parseHeaderExpression();\n      this.eat(types.semi);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = -1;\n\n      if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n        awaitAt = this.state.lastTokStart;\n      }\n\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(types.parenL);\n\n      if (this.match(types.semi)) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, null);\n      }\n\n      var isLet = this.isLet();\n\n      if (this.match(types._var) || this.match(types._const) || isLet) {\n        var _init = this.startNode();\n\n        var kind = isLet ? \"let\" : this.state.value;\n        this.next();\n        this.parseVar(_init, true, kind);\n        this.finishNode(_init, \"VariableDeclaration\");\n\n        if ((this.match(types._in) || this.isContextual(\"of\")) && _init.declarations.length === 1) {\n          return this.parseForIn(node, _init, awaitAt);\n        }\n\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, _init);\n      }\n\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n\n      if (this.match(types._in) || this.isContextual(\"of\")) {\n        this.toAssignable(init);\n        var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n        this.checkLVal(init, undefined, undefined, description);\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n      this.next();\n      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatement(\"if\");\n      node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(this.state.start, ErrorMessages.IllegalReturn);\n      }\n\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(types.braceL);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n\n      for (var sawDefault; !this.match(types.braceR);) {\n        if (this.match(types._case) || this.match(types._default)) {\n          var isCase = this.match(types._case);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n            }\n\n            sawDefault = true;\n            cur.test = null;\n          }\n\n          this.expect(types.colon);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatement(null));\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n      }\n\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseCatchClauseParam\",\n    value: function parseCatchClauseParam() {\n      var param = this.parseBindingAtom();\n      var simple = param.type === \"Identifier\";\n      this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n      return param;\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this42 = this;\n\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.match(types._catch)) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL)) {\n          this.expect(types.parenL);\n          clause.param = this.parseCatchClauseParam();\n          this.expect(types.parenR);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        clause.body = this.withTopicForbiddingContext(function () {\n          return _this42.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      this.next();\n      this.parseVar(node, false, kind);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this43 = this;\n\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this43.parseStatement(\"while\");\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this44 = this;\n\n      if (this.state.strict) {\n        this.raise(this.state.start, ErrorMessages.StrictWith);\n      }\n\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this44.parseStatement(\"with\");\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, context) {\n      for (var _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n        var label = _this$state$labels[_i2];\n\n        if (label.name === maybeName) {\n          this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n        }\n      }\n\n      var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var _label = this.state.labels[i];\n\n        if (_label.statementStart === node.start) {\n          _label.statementStart = this.state.start;\n          _label.kind = kind;\n        } else {\n          break;\n        }\n      }\n\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n      this.expect(types.braceL);\n\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var octalPositions = [];\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n\n      while (!this.match(end)) {\n        if (!parsedNonDirective && this.state.octalPositions.length) {\n          octalPositions.push.apply(octalPositions, (0, _toConsumableArray2.default)(this.state.octalPositions));\n        }\n\n        var stmt = this.parseStatement(null, topLevel);\n\n        if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n          var directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        body.push(stmt);\n      }\n\n      if (this.state.strict && octalPositions.length) {\n        for (var _i3 = 0; _i3 < octalPositions.length; _i3++) {\n          var pos = octalPositions[_i3];\n          this.raise(pos, ErrorMessages.StrictOctalLiteral);\n        }\n      }\n\n      if (afterBlockParse) {\n        afterBlockParse.call(this, hasStrictModeDirective);\n      }\n\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this45 = this;\n\n      node.init = init;\n      this.expect(types.semi);\n      node.test = this.match(types.semi) ? null : this.parseExpression();\n      this.expect(types.semi);\n      node.update = this.match(types.parenR) ? null : this.parseExpression();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this45.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this46 = this;\n\n      var isForIn = this.match(types._in);\n      this.next();\n\n      if (isForIn) {\n        if (awaitAt > -1) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt > -1;\n      }\n\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n      } else if (init.type === \"AssignmentPattern\") {\n        this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n      }\n\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this46.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var declarations = node.declarations = [];\n      var isTypescript = this.hasPlugin(\"typescript\");\n      node.kind = kind;\n\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n\n        if (this.eat(types.eq)) {\n          decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n        } else {\n          if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n            if (!isTypescript) {\n              this.unexpected();\n            }\n          } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n          }\n\n          decl.init = null;\n        }\n\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(types.comma)) break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      decl.id = this.parseBindingAtom();\n      this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this47 = this;\n\n      var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n      var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isStatement = statement & FUNC_STATEMENT;\n      var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n      var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n      this.initFunction(node, isAsync);\n\n      if (this.match(types.star) && isHangingStatement) {\n        this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n      }\n\n      node.generator = this.eat(types.star);\n\n      if (isStatement) {\n        node.id = this.parseFunctionId(requireId);\n      }\n\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldYieldPos = this.state.yieldPos;\n      var oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = false;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n      if (!isStatement) {\n        node.id = this.parseFunctionId();\n      }\n\n      this.parseFunctionParams(node);\n      this.withTopicForbiddingContext(function () {\n        _this47.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n\n      if (isStatement && !isHangingStatement) {\n        this.registerFunctionStatementId(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, allowModifiers) {\n      var oldInParameters = this.state.inParameters;\n      this.state.inParameters = true;\n      this.expect(types.parenL);\n      node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n      this.state.inParameters = oldInParameters;\n      this.checkYieldAwaitInDefaultParams();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      this.takeDecorators(node);\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(types.parenL);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(constructorAllowsSuper, oldStrict) {\n      var _this48 = this;\n\n      this.classScope.enter();\n      var state = {\n        hadConstructor: false\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(types.braceL);\n      this.withTopicForbiddingContext(function () {\n        while (!_this48.match(types.braceR)) {\n          if (_this48.eat(types.semi)) {\n            if (decorators.length > 0) {\n              throw _this48.raise(_this48.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n            }\n\n            continue;\n          }\n\n          if (_this48.match(types.at)) {\n            decorators.push(_this48.parseDecorator());\n            continue;\n          }\n\n          var member = _this48.startNode();\n\n          if (decorators.length) {\n            member.decorators = decorators;\n\n            _this48.resetStartLocationFromNode(member, decorators[0]);\n\n            decorators = [];\n          }\n\n          _this48.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this48.raise(member.start, ErrorMessages.DecoratorConstructor);\n          }\n        }\n      });\n      this.state.strict = oldStrict;\n      this.next();\n\n      if (decorators.length) {\n        throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n      }\n\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n      var isStatic = this.isContextual(\"static\");\n\n      if (isStatic && this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n\n      if (this.eat(types.star)) {\n        method.kind = \"method\";\n        this.parseClassElementName(method);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parseClassElementName(member);\n      var isPrivate = key.type === \"PrivateName\";\n      var isSimple = key.type === \"Identifier\";\n      var maybeQuestionTokenStart = this.state.start;\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(key.start, ErrorMessages.DuplicateConstructor);\n          }\n\n          state.hadConstructor = true;\n          allowsDirectSuper = constructorAllowsSuper;\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n        var isGenerator = this.eat(types.star);\n\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStart);\n        }\n\n        method.kind = \"method\";\n        this.parseClassElementName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n        method.kind = key.name;\n        this.parseClassElementName(publicMethod);\n\n        if (method.key.type === \"PrivateName\") {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n\n        this.checkGetterSetterParams(publicMethod);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassElementName\",\n    value: function parseClassElementName(member) {\n      var key = this.parsePropertyName(member, true);\n\n      if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n        this.raise(key.start, ErrorMessages.StaticPrototype);\n      }\n\n      if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n        this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n      }\n\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      this.expectPlugin(\"classPrivateMethods\", method.key.start);\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n      this.semicolon();\n      this.prodParam.exit();\n      this.scope.exit();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      if (!node.typeAnnotation) {\n        this.expectPlugin(\"classProperties\");\n      }\n\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.prodParam.enter(PARAM);\n\n      if (this.match(types.eq)) {\n        this.expectPlugin(\"classProperties\");\n        this.next();\n        node.value = this.parseMaybeAssignAllowIn();\n      } else {\n        node.value = null;\n      }\n\n      this.semicolon();\n      this.prodParam.exit();\n      this.scope.exit();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n      if (this.match(types.name)) {\n        node.id = this.parseIdentifier();\n\n        if (isStatement) {\n          this.checkLVal(node.id, bindingType, undefined, \"class name\");\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          this.unexpected(null, ErrorMessages.MissingClassName);\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node) {\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n      var parseAfterDefault = !hasDefault || this.eat(types.comma);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n      var isFromRequired = hasDefault || hasStar;\n\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n        throw this.unexpected(null, types.braceL);\n      }\n\n      var hasDeclaration;\n\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        this.checkExport(node, true, false, !!node.source);\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      if (this.eat(types._default)) {\n        node.declaration = this.parseExportDefaultExpression();\n        this.checkExport(node, true, true);\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n      }\n\n      throw this.unexpected(null, types.braceL);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(types.star);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node) {\n      if (this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(\"as\")) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(types.braceL)) {\n        var _node$specifiers2;\n\n        if (!node.specifiers) node.specifiers = [];\n\n        (_node$specifiers2 = node.specifiers).push.apply(_node$specifiers2, (0, _toConsumableArray2.default)(this.parseExportSpecifiers()));\n\n        node.source = null;\n        node.declaration = null;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(\"async\")) return false;\n      var next = this.nextTokenStart();\n      return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      var isAsync = this.isAsyncFunction();\n\n      if (this.match(types._function) || isAsync) {\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n      } else if (this.match(types._class)) {\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        }\n\n        this.parseDecorators(false);\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n        throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n      } else {\n        var res = this.parseMaybeAssignAllowIn();\n        this.semicolon();\n        return res;\n      }\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      return this.parseStatement(null);\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      if (this.match(types.name)) {\n        var value = this.state.value;\n\n        if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n          return false;\n        }\n\n        if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n          var l = this.lookahead();\n\n          if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(types._default)) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n\n      if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n        return true;\n      }\n\n      if (this.match(types._default) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(\"from\")) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n      } else {\n        if (expect) {\n          this.unexpected();\n        } else {\n          node.source = null;\n        }\n      }\n\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      if (this.match(types.at)) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n          } else {\n            return true;\n          }\n        }\n      }\n\n      return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n\n            var declaration = node.declaration;\n\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n              this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          for (var _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n            var specifier = _node$specifiers[_i4];\n            this.checkDuplicateExports(specifier, specifier.exported.name);\n\n            if (!isFrom && specifier.local) {\n              this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n              this.scope.checkLocalExport(specifier.local);\n            }\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            for (var _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n              var _declaration = _node$declaration$dec[_i5];\n              this.checkDeclaration(_declaration.id);\n            }\n          }\n        }\n      }\n\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (currentContextDecorators.length) {\n        throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        for (var _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n          var prop = _node$properties[_i6];\n          this.checkDeclaration(prop);\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        for (var _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n          var elem = _node$elements[_i7];\n\n          if (elem) {\n            this.checkDeclaration(elem);\n          }\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, name) {\n      if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n        this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n      }\n\n      this.state.exportedIdentifiers.push(name);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers() {\n      var nodes = [];\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        var node = this.startNode();\n        node.local = this.parseIdentifier(true);\n        node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n        nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      node.specifiers = [];\n\n      if (!this.match(types.string)) {\n        var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n        var parseNext = !hasDefault || this.eat(types.comma);\n        var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n        if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n        this.expectContextual(\"from\");\n      }\n\n      node.source = this.parseImportSource();\n      var attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(types.string)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"shouldParseDefaultImport\",\n    value: function shouldParseDefaultImport(node) {\n      return this.match(types.name);\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = this.parseIdentifier();\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n  }, {\n    key: \"maybeParseModuleAttributes\",\n    value: function maybeParseModuleAttributes() {\n      if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"moduleAttributes\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) return [];\n        return null;\n      }\n\n      var attrs = [];\n      var attributes = new Set();\n\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n\n        if (node.key.name !== \"type\") {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n        }\n\n        if (attributes.has(node.key.name)) {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n        }\n\n        attributes.add(node.key.name);\n        this.expect(types.colon);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node) {\n      if (this.shouldParseDefaultImport(node)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(types.star)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(types.colon)) {\n            throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n          }\n\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        this.parseImportSpecifier(node);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(node) {\n      var specifier = this.startNode();\n      specifier.imported = this.parseIdentifier(true);\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n        specifier.local = specifier.imported.__clone();\n      }\n\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n  }]);\n  return StatementParser;\n}(ExpressionParser);\n\nvar ClassScope = function ClassScope() {\n  (0, _classCallCheck2.default)(this, ClassScope);\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n};\n\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(raise) {\n    (0, _classCallCheck2.default)(this, ClassScopeHandler);\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  (0, _createClass2.default)(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n\n      for (var _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n        var _Array$from$_i2 = (0, _slicedToArray2.default)(_Array$from[_i], 2),\n            name = _Array$from$_i2[0],\n            pos = _Array$from$_i2[1];\n\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, pos);\n          }\n        } else {\n          this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, pos) {\n      var classScope = this.current();\n      var redefined = classScope.privateNames.has(name);\n\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && classScope.loneAccessors.get(name);\n\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) classScope.loneAccessors.delete(name);\n        } else if (!redefined) {\n          classScope.loneAccessors.set(name, elementType);\n        }\n      }\n\n      if (redefined) {\n        this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n      }\n\n      classScope.privateNames.add(name);\n      classScope.undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, pos) {\n      var classScope;\n\n      for (var _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n        classScope = _this$stack[_i2];\n        if (classScope.privateNames.has(name)) return;\n      }\n\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, pos);\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }]);\n  return ClassScopeHandler;\n}();\n\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  (0, _inherits2.default)(Parser, _StatementParser);\n\n  var _super17 = _createSuper(Parser);\n\n  function Parser(options, input) {\n    var _this49;\n\n    (0, _classCallCheck2.default)(this, Parser);\n    options = getOptions(options);\n    _this49 = _super17.call(this, options, input);\n\n    var ScopeHandler = _this49.getScopeHandler();\n\n    _this49.options = options;\n    _this49.inModule = _this49.options.sourceType === \"module\";\n    _this49.scope = new ScopeHandler(_this49.raise.bind((0, _assertThisInitialized2.default)(_this49)), _this49.inModule);\n    _this49.prodParam = new ProductionParameterHandler();\n    _this49.classScope = new ClassScopeHandler(_this49.raise.bind((0, _assertThisInitialized2.default)(_this49)));\n    _this49.plugins = pluginsMap(_this49.options.plugins);\n    _this49.filename = options.sourceFilename;\n    return _this49;\n  }\n\n  (0, _createClass2.default)(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n\n  for (var _i = 0; _i < plugins.length; _i++) {\n    var plugin = plugins[_i];\n\n    var _ref15 = Array.isArray(plugin) ? plugin : [plugin, {}],\n        _ref16 = (0, _slicedToArray2.default)(_ref15, 2),\n        name = _ref16[0],\n        options = _ref16[1];\n\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  var cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (var _i = 0; _i < pluginList.length; _i++) {\n      var plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFieWxvbjcvbGliL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy90b2tlbml6ZXIvdHlwZXMuanM/MzQwYyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvc2NvcGVmbGFncy5qcz9lYTQxIiwid2VicGFjazovLy8uLi9zcmMvdXRpbC93aGl0ZXNwYWNlLmpzPzlkZTAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlsL2xvY2F0aW9uLmpzPzU5YTkiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wYXJzZXIvYmFzZS5qcz9mMTMzIiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL2NvbW1lbnRzLmpzPzM2OWIiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wYXJzZXIvZXJyb3ItbWVzc2FnZS5qcz8wOWY1Iiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL2Vycm9yLmpzP2RiNmUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW5zL2VzdHJlZS5qcz82ZDAzIiwid2VicGFjazovLy8uLi9zcmMvdG9rZW5pemVyL2NvbnRleHQuanM/NTQyYyIsIndlYnBhY2s6Ly8vLi4vLi4vYmFiZWwtaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyL3NyYy9pZGVudGlmaWVyLmpzPzUxZTUiLCJ3ZWJwYWNrOi8vLy4uLy4uL2JhYmVsLWhlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllci9zcmMva2V5d29yZC5qcz9hMWU5Iiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9pZGVudGlmaWVyLmpzPzcwOGUiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW5zL2Zsb3cuanM/MWQ4ZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3BsdWdpbnMvanN4L3hodG1sLmpzP2U5YTMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW5zL2pzeC9pbmRleC5qcz80NGI4Iiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9zY29wZS5qcz8xZjFmIiwid2VicGFjazovLy8uLi9zcmMvcGx1Z2lucy90eXBlc2NyaXB0L3Njb3BlLmpzPzFlM2YiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlsL3Byb2R1Y3Rpb24tcGFyYW1ldGVyLmpzP2FkZmIiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW5zL3R5cGVzY3JpcHQvaW5kZXguanM/MzFlZSIsIndlYnBhY2s6Ly8vLi4vc3JjL3BsdWdpbnMvcGxhY2Vob2xkZXJzLmpzPzgwMTkiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW5zL3Y4aW50cmluc2ljLmpzPzkzOTAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wbHVnaW4tdXRpbHMuanM/NmFlYyIsIndlYnBhY2s6Ly8vLi4vc3JjL29wdGlvbnMuanM/MWFlNSIsIndlYnBhY2s6Ly8vLi4vc3JjL3Rva2VuaXplci9zdGF0ZS5qcz9hMWEyIiwid2VicGFjazovLy8uLi9zcmMvdG9rZW5pemVyL2luZGV4LmpzPzRiZDIiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wYXJzZXIvdXRpbC5qcz82YzVmIiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL25vZGUuanM/YmFlMyIsIndlYnBhY2s6Ly8vLi4vc3JjL3BhcnNlci9sdmFsLmpzP2ZkYmEiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9wYXJzZXIvZXhwcmVzc2lvbi5qcz9hY2E2Iiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL3N0YXRlbWVudC5qcz9lZjA0Iiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9jbGFzcy1zY29wZS5qcz81NWJkIiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL2luZGV4LmpzP2FjY2YiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9pbmRleC5qcz9hMTc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbi8vICMjIFRva2VuIHR5cGVzXG5cbi8vIFRoZSBhc3NpZ25tZW50IG9mIGZpbmUtZ3JhaW5lZCwgaW5mb3JtYXRpb24tY2FycnlpbmcgdHlwZSBvYmplY3RzXG4vLyBhbGxvd3MgdGhlIHRva2VuaXplciB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gaXQgaGFzIGFib3V0IGFcbi8vIHRva2VuIGluIGEgd2F5IHRoYXQgaXMgdmVyeSBjaGVhcCBmb3IgdGhlIHBhcnNlciB0byBsb29rIHVwLlxuXG4vLyBBbGwgdG9rZW4gdHlwZSB2YXJpYWJsZXMgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlLCB0byBtYWtlIHRoZW1cbi8vIGVhc3kgdG8gcmVjb2duaXplLlxuXG4vLyBUaGUgYGJlZm9yZUV4cHJgIHByb3BlcnR5IGlzIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGJldHdlZW4gcmVndWxhclxuLy8gZXhwcmVzc2lvbnMgYW5kIGRpdmlzaW9ucy4gSXQgaXMgc2V0IG9uIGFsbCB0b2tlbiB0eXBlcyB0aGF0IGNhblxuLy8gYmUgZm9sbG93ZWQgYnkgYW4gZXhwcmVzc2lvbiAodGh1cywgYSBzbGFzaCBhZnRlciB0aGVtIHdvdWxkIGJlIGFcbi8vIHJlZ3VsYXIgZXhwcmVzc2lvbikuXG5cbi8vIFRoZSBgc3RhcnRzRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hldGhlciBhbiBleHByZXNzaW9uXG4vLyBtYXkgYmUgdGhlIOKAnGFyZ3VtZW504oCdIHN1YmV4cHJlc3Npb24gb2YgYSBgeWllbGRgIGV4cHJlc3Npb24gb3Jcbi8vIGB5aWVsZGAgc3RhdGVtZW50LiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgbWF5IGJlIGF0IHRoZVxuLy8gc3RhcnQgb2YgYSBzdWJleHByZXNzaW9uLlxuXG4vLyBgaXNMb29wYCBtYXJrcyBhIGtleXdvcmQgYXMgc3RhcnRpbmcgYSBsb29wLCB3aGljaCBpcyBpbXBvcnRhbnRcbi8vIHRvIGtub3cgd2hlbiBwYXJzaW5nIGEgbGFiZWwsIGluIG9yZGVyIHRvIGFsbG93IG9yIGRpc2FsbG93XG4vLyBjb250aW51ZSBqdW1wcyB0byB0aGF0IGxhYmVsLlxuXG5jb25zdCBiZWZvcmVFeHByID0gdHJ1ZTtcbmNvbnN0IHN0YXJ0c0V4cHIgPSB0cnVlO1xuY29uc3QgaXNMb29wID0gdHJ1ZTtcbmNvbnN0IGlzQXNzaWduID0gdHJ1ZTtcbmNvbnN0IHByZWZpeCA9IHRydWU7XG5jb25zdCBwb3N0Zml4ID0gdHJ1ZTtcblxudHlwZSBUb2tlbk9wdGlvbnMgPSB7XG4gIGtleXdvcmQ/OiBzdHJpbmcsXG4gIGJlZm9yZUV4cHI/OiBib29sZWFuLFxuICBzdGFydHNFeHByPzogYm9vbGVhbixcbiAgcmlnaHRBc3NvY2lhdGl2ZT86IGJvb2xlYW4sXG4gIGlzTG9vcD86IGJvb2xlYW4sXG4gIGlzQXNzaWduPzogYm9vbGVhbixcbiAgcHJlZml4PzogYm9vbGVhbixcbiAgcG9zdGZpeD86IGJvb2xlYW4sXG4gIGJpbm9wPzogP251bWJlcixcbn07XG5cbmV4cG9ydCBjbGFzcyBUb2tlblR5cGUge1xuICBsYWJlbDogc3RyaW5nO1xuICBrZXl3b3JkOiA/c3RyaW5nO1xuICBiZWZvcmVFeHByOiBib29sZWFuO1xuICBzdGFydHNFeHByOiBib29sZWFuO1xuICByaWdodEFzc29jaWF0aXZlOiBib29sZWFuO1xuICBpc0xvb3A6IGJvb2xlYW47XG4gIGlzQXNzaWduOiBib29sZWFuO1xuICBwcmVmaXg6IGJvb2xlYW47XG4gIHBvc3RmaXg6IGJvb2xlYW47XG4gIGJpbm9wOiA/bnVtYmVyO1xuICB1cGRhdGVDb250ZXh0OiA/KHByZXZUeXBlOiBUb2tlblR5cGUpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgY29uZjogVG9rZW5PcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgdGhpcy5rZXl3b3JkID0gY29uZi5rZXl3b3JkO1xuICAgIHRoaXMuYmVmb3JlRXhwciA9ICEhY29uZi5iZWZvcmVFeHByO1xuICAgIHRoaXMuc3RhcnRzRXhwciA9ICEhY29uZi5zdGFydHNFeHByO1xuICAgIHRoaXMucmlnaHRBc3NvY2lhdGl2ZSA9ICEhY29uZi5yaWdodEFzc29jaWF0aXZlO1xuICAgIHRoaXMuaXNMb29wID0gISFjb25mLmlzTG9vcDtcbiAgICB0aGlzLmlzQXNzaWduID0gISFjb25mLmlzQXNzaWduO1xuICAgIHRoaXMucHJlZml4ID0gISFjb25mLnByZWZpeDtcbiAgICB0aGlzLnBvc3RmaXggPSAhIWNvbmYucG9zdGZpeDtcbiAgICB0aGlzLmJpbm9wID0gY29uZi5iaW5vcCAhPSBudWxsID8gY29uZi5iaW5vcCA6IG51bGw7XG4gICAgdGhpcy51cGRhdGVDb250ZXh0ID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qga2V5d29yZHMgPSBuZXcgTWFwPHN0cmluZywgVG9rZW5UeXBlPigpO1xuXG5mdW5jdGlvbiBjcmVhdGVLZXl3b3JkKG5hbWU6IHN0cmluZywgb3B0aW9uczogVG9rZW5PcHRpb25zID0ge30pOiBUb2tlblR5cGUge1xuICBvcHRpb25zLmtleXdvcmQgPSBuYW1lO1xuICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlblR5cGUobmFtZSwgb3B0aW9ucyk7XG4gIGtleXdvcmRzLnNldChuYW1lLCB0b2tlbik7XG4gIHJldHVybiB0b2tlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmlub3AobmFtZTogc3RyaW5nLCBiaW5vcDogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgVG9rZW5UeXBlKG5hbWUsIHsgYmVmb3JlRXhwciwgYmlub3AgfSk7XG59XG5cbmV4cG9ydCBjb25zdCB0eXBlczogeyBbbmFtZTogc3RyaW5nXTogVG9rZW5UeXBlIH0gPSB7XG4gIG51bTogbmV3IFRva2VuVHlwZShcIm51bVwiLCB7IHN0YXJ0c0V4cHIgfSksXG4gIGJpZ2ludDogbmV3IFRva2VuVHlwZShcImJpZ2ludFwiLCB7IHN0YXJ0c0V4cHIgfSksXG4gIGRlY2ltYWw6IG5ldyBUb2tlblR5cGUoXCJkZWNpbWFsXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgcmVnZXhwOiBuZXcgVG9rZW5UeXBlKFwicmVnZXhwXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgc3RyaW5nOiBuZXcgVG9rZW5UeXBlKFwic3RyaW5nXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgbmFtZTogbmV3IFRva2VuVHlwZShcIm5hbWVcIiwgeyBzdGFydHNFeHByIH0pLFxuICBlb2Y6IG5ldyBUb2tlblR5cGUoXCJlb2ZcIiksXG5cbiAgLy8gUHVuY3R1YXRpb24gdG9rZW4gdHlwZXMuXG4gIGJyYWNrZXRMOiBuZXcgVG9rZW5UeXBlKFwiW1wiLCB7IGJlZm9yZUV4cHIsIHN0YXJ0c0V4cHIgfSksXG4gIGJyYWNrZXRIYXNoTDogbmV3IFRva2VuVHlwZShcIiNbXCIsIHsgYmVmb3JlRXhwciwgc3RhcnRzRXhwciB9KSxcbiAgYnJhY2tldEJhckw6IG5ldyBUb2tlblR5cGUoXCJbfFwiLCB7IGJlZm9yZUV4cHIsIHN0YXJ0c0V4cHIgfSksXG4gIGJyYWNrZXRSOiBuZXcgVG9rZW5UeXBlKFwiXVwiKSxcbiAgYnJhY2tldEJhclI6IG5ldyBUb2tlblR5cGUoXCJ8XVwiKSxcbiAgYnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwie1wiLCB7IGJlZm9yZUV4cHIsIHN0YXJ0c0V4cHIgfSksXG4gIGJyYWNlQmFyTDogbmV3IFRva2VuVHlwZShcInt8XCIsIHsgYmVmb3JlRXhwciwgc3RhcnRzRXhwciB9KSxcbiAgYnJhY2VIYXNoTDogbmV3IFRva2VuVHlwZShcIiN7XCIsIHsgYmVmb3JlRXhwciwgc3RhcnRzRXhwciB9KSxcbiAgYnJhY2VSOiBuZXcgVG9rZW5UeXBlKFwifVwiKSxcbiAgYnJhY2VCYXJSOiBuZXcgVG9rZW5UeXBlKFwifH1cIiksXG4gIHBhcmVuTDogbmV3IFRva2VuVHlwZShcIihcIiwgeyBiZWZvcmVFeHByLCBzdGFydHNFeHByIH0pLFxuICBwYXJlblI6IG5ldyBUb2tlblR5cGUoXCIpXCIpLFxuICBjb21tYTogbmV3IFRva2VuVHlwZShcIixcIiwgeyBiZWZvcmVFeHByIH0pLFxuICBzZW1pOiBuZXcgVG9rZW5UeXBlKFwiO1wiLCB7IGJlZm9yZUV4cHIgfSksXG4gIGNvbG9uOiBuZXcgVG9rZW5UeXBlKFwiOlwiLCB7IGJlZm9yZUV4cHIgfSksXG4gIGRvdWJsZUNvbG9uOiBuZXcgVG9rZW5UeXBlKFwiOjpcIiwgeyBiZWZvcmVFeHByIH0pLFxuICBkb3Q6IG5ldyBUb2tlblR5cGUoXCIuXCIpLFxuICBxdWVzdGlvbjogbmV3IFRva2VuVHlwZShcIj9cIiwgeyBiZWZvcmVFeHByIH0pLFxuICBxdWVzdGlvbkRvdDogbmV3IFRva2VuVHlwZShcIj8uXCIpLFxuICBhcnJvdzogbmV3IFRva2VuVHlwZShcIj0+XCIsIHsgYmVmb3JlRXhwciB9KSxcbiAgdGVtcGxhdGU6IG5ldyBUb2tlblR5cGUoXCJ0ZW1wbGF0ZVwiKSxcbiAgZWxsaXBzaXM6IG5ldyBUb2tlblR5cGUoXCIuLi5cIiwgeyBiZWZvcmVFeHByIH0pLFxuICBiYWNrUXVvdGU6IG5ldyBUb2tlblR5cGUoXCJgXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgZG9sbGFyQnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwiJHtcIiwgeyBiZWZvcmVFeHByLCBzdGFydHNFeHByIH0pLFxuICBhdDogbmV3IFRva2VuVHlwZShcIkBcIiksXG4gIGhhc2g6IG5ldyBUb2tlblR5cGUoXCIjXCIsIHsgc3RhcnRzRXhwciB9KSxcblxuICAvLyBTcGVjaWFsIGhhc2hiYW5nIHRva2VuLlxuICBpbnRlcnByZXRlckRpcmVjdGl2ZTogbmV3IFRva2VuVHlwZShcIiMhLi4uXCIpLFxuXG4gIC8vIE9wZXJhdG9ycy4gVGhlc2UgY2Fycnkgc2V2ZXJhbCBraW5kcyBvZiBwcm9wZXJ0aWVzIHRvIGhlbHAgdGhlXG4gIC8vIHBhcnNlciB1c2UgdGhlbSBwcm9wZXJseSAodGhlIHByZXNlbmNlIG9mIHRoZXNlIHByb3BlcnRpZXMgaXNcbiAgLy8gd2hhdCBjYXRlZ29yaXplcyB0aGVtIGFzIG9wZXJhdG9ycykuXG4gIC8vXG4gIC8vIGBiaW5vcGAsIHdoZW4gcHJlc2VudCwgc3BlY2lmaWVzIHRoYXQgdGhpcyBvcGVyYXRvciBpcyBhIGJpbmFyeVxuICAvLyBvcGVyYXRvciwgYW5kIHdpbGwgcmVmZXIgdG8gaXRzIHByZWNlZGVuY2UuXG4gIC8vXG4gIC8vIGBwcmVmaXhgIGFuZCBgcG9zdGZpeGAgbWFyayB0aGUgb3BlcmF0b3IgYXMgYSBwcmVmaXggb3IgcG9zdGZpeFxuICAvLyB1bmFyeSBvcGVyYXRvci5cbiAgLy9cbiAgLy8gYGlzQXNzaWduYCBtYXJrcyBhbGwgb2YgYD1gLCBgKz1gLCBgLT1gIGV0Y2V0ZXJhLCB3aGljaCBhY3QgYXNcbiAgLy8gYmluYXJ5IG9wZXJhdG9ycyB3aXRoIGEgdmVyeSBsb3cgcHJlY2VkZW5jZSwgdGhhdCBzaG91bGQgcmVzdWx0XG4gIC8vIGluIEFzc2lnbm1lbnRFeHByZXNzaW9uIG5vZGVzLlxuXG4gIGVxOiBuZXcgVG9rZW5UeXBlKFwiPVwiLCB7IGJlZm9yZUV4cHIsIGlzQXNzaWduIH0pLFxuICBhc3NpZ246IG5ldyBUb2tlblR5cGUoXCJfPVwiLCB7IGJlZm9yZUV4cHIsIGlzQXNzaWduIH0pLFxuICBpbmNEZWM6IG5ldyBUb2tlblR5cGUoXCIrKy8tLVwiLCB7IHByZWZpeCwgcG9zdGZpeCwgc3RhcnRzRXhwciB9KSxcbiAgYmFuZzogbmV3IFRva2VuVHlwZShcIiFcIiwgeyBiZWZvcmVFeHByLCBwcmVmaXgsIHN0YXJ0c0V4cHIgfSksXG4gIHRpbGRlOiBuZXcgVG9rZW5UeXBlKFwiflwiLCB7IGJlZm9yZUV4cHIsIHByZWZpeCwgc3RhcnRzRXhwciB9KSxcbiAgcGlwZWxpbmU6IGNyZWF0ZUJpbm9wKFwifD5cIiwgMCksXG4gIG51bGxpc2hDb2FsZXNjaW5nOiBjcmVhdGVCaW5vcChcIj8/XCIsIDEpLFxuICBsb2dpY2FsT1I6IGNyZWF0ZUJpbm9wKFwifHxcIiwgMSksXG4gIGxvZ2ljYWxBTkQ6IGNyZWF0ZUJpbm9wKFwiJiZcIiwgMiksXG4gIGJpdHdpc2VPUjogY3JlYXRlQmlub3AoXCJ8XCIsIDMpLFxuICBiaXR3aXNlWE9SOiBjcmVhdGVCaW5vcChcIl5cIiwgNCksXG4gIGJpdHdpc2VBTkQ6IGNyZWF0ZUJpbm9wKFwiJlwiLCA1KSxcbiAgZXF1YWxpdHk6IGNyZWF0ZUJpbm9wKFwiPT0vIT0vPT09LyE9PVwiLCA2KSxcbiAgcmVsYXRpb25hbDogY3JlYXRlQmlub3AoXCI8Lz4vPD0vPj1cIiwgNyksXG4gIGJpdFNoaWZ0OiBjcmVhdGVCaW5vcChcIjw8Lz4+Lz4+PlwiLCA4KSxcbiAgcGx1c01pbjogbmV3IFRva2VuVHlwZShcIisvLVwiLCB7IGJlZm9yZUV4cHIsIGJpbm9wOiA5LCBwcmVmaXgsIHN0YXJ0c0V4cHIgfSksXG4gIC8vIHN0YXJ0c0V4cHI6IHJlcXVpcmVkIGJ5IHY4aW50cmluc2ljIHBsdWdpblxuICBtb2R1bG86IG5ldyBUb2tlblR5cGUoXCIlXCIsIHsgYmVmb3JlRXhwciwgYmlub3A6IDEwLCBzdGFydHNFeHByIH0pLFxuICAvLyB1bnNldCBgYmVmb3JlRXhwcmAgYXMgaXQgY2FuIGJlIGBmdW5jdGlvbiAqYFxuICBzdGFyOiBuZXcgVG9rZW5UeXBlKFwiKlwiLCB7IGJpbm9wOiAxMCB9KSxcbiAgc2xhc2g6IGNyZWF0ZUJpbm9wKFwiL1wiLCAxMCksXG4gIGV4cG9uZW50OiBuZXcgVG9rZW5UeXBlKFwiKipcIiwge1xuICAgIGJlZm9yZUV4cHIsXG4gICAgYmlub3A6IDExLFxuICAgIHJpZ2h0QXNzb2NpYXRpdmU6IHRydWUsXG4gIH0pLFxuXG4gIC8vIEtleXdvcmRzXG4gIC8vIERvbid0IGZvcmdldCB0byB1cGRhdGUgcGFja2FnZXMvYmFiZWwtaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyL3NyYy9rZXl3b3JkLmpzXG4gIC8vIHdoZW4gbmV3IGtleXdvcmRzIGFyZSBhZGRlZFxuICBfYnJlYWs6IGNyZWF0ZUtleXdvcmQoXCJicmVha1wiKSxcbiAgX2Nhc2U6IGNyZWF0ZUtleXdvcmQoXCJjYXNlXCIsIHsgYmVmb3JlRXhwciB9KSxcbiAgX2NhdGNoOiBjcmVhdGVLZXl3b3JkKFwiY2F0Y2hcIiksXG4gIF9jb250aW51ZTogY3JlYXRlS2V5d29yZChcImNvbnRpbnVlXCIpLFxuICBfZGVidWdnZXI6IGNyZWF0ZUtleXdvcmQoXCJkZWJ1Z2dlclwiKSxcbiAgX2RlZmF1bHQ6IGNyZWF0ZUtleXdvcmQoXCJkZWZhdWx0XCIsIHsgYmVmb3JlRXhwciB9KSxcbiAgX2RvOiBjcmVhdGVLZXl3b3JkKFwiZG9cIiwgeyBpc0xvb3AsIGJlZm9yZUV4cHIgfSksXG4gIF9lbHNlOiBjcmVhdGVLZXl3b3JkKFwiZWxzZVwiLCB7IGJlZm9yZUV4cHIgfSksXG4gIF9maW5hbGx5OiBjcmVhdGVLZXl3b3JkKFwiZmluYWxseVwiKSxcbiAgX2ZvcjogY3JlYXRlS2V5d29yZChcImZvclwiLCB7IGlzTG9vcCB9KSxcbiAgX2Z1bmN0aW9uOiBjcmVhdGVLZXl3b3JkKFwiZnVuY3Rpb25cIiwgeyBzdGFydHNFeHByIH0pLFxuICBfaWY6IGNyZWF0ZUtleXdvcmQoXCJpZlwiKSxcbiAgX3JldHVybjogY3JlYXRlS2V5d29yZChcInJldHVyblwiLCB7IGJlZm9yZUV4cHIgfSksXG4gIF9zd2l0Y2g6IGNyZWF0ZUtleXdvcmQoXCJzd2l0Y2hcIiksXG4gIF90aHJvdzogY3JlYXRlS2V5d29yZChcInRocm93XCIsIHsgYmVmb3JlRXhwciwgcHJlZml4LCBzdGFydHNFeHByIH0pLFxuICBfdHJ5OiBjcmVhdGVLZXl3b3JkKFwidHJ5XCIpLFxuICBfdmFyOiBjcmVhdGVLZXl3b3JkKFwidmFyXCIpLFxuICBfY29uc3Q6IGNyZWF0ZUtleXdvcmQoXCJjb25zdFwiKSxcbiAgX3doaWxlOiBjcmVhdGVLZXl3b3JkKFwid2hpbGVcIiwgeyBpc0xvb3AgfSksXG4gIF93aXRoOiBjcmVhdGVLZXl3b3JkKFwid2l0aFwiKSxcbiAgX25ldzogY3JlYXRlS2V5d29yZChcIm5ld1wiLCB7IGJlZm9yZUV4cHIsIHN0YXJ0c0V4cHIgfSksXG4gIF90aGlzOiBjcmVhdGVLZXl3b3JkKFwidGhpc1wiLCB7IHN0YXJ0c0V4cHIgfSksXG4gIF9zdXBlcjogY3JlYXRlS2V5d29yZChcInN1cGVyXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgX2NsYXNzOiBjcmVhdGVLZXl3b3JkKFwiY2xhc3NcIiwgeyBzdGFydHNFeHByIH0pLFxuICBfZXh0ZW5kczogY3JlYXRlS2V5d29yZChcImV4dGVuZHNcIiwgeyBiZWZvcmVFeHByIH0pLFxuICBfZXhwb3J0OiBjcmVhdGVLZXl3b3JkKFwiZXhwb3J0XCIpLFxuICBfaW1wb3J0OiBjcmVhdGVLZXl3b3JkKFwiaW1wb3J0XCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgX251bGw6IGNyZWF0ZUtleXdvcmQoXCJudWxsXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgX3RydWU6IGNyZWF0ZUtleXdvcmQoXCJ0cnVlXCIsIHsgc3RhcnRzRXhwciB9KSxcbiAgX2ZhbHNlOiBjcmVhdGVLZXl3b3JkKFwiZmFsc2VcIiwgeyBzdGFydHNFeHByIH0pLFxuICBfaW46IGNyZWF0ZUtleXdvcmQoXCJpblwiLCB7IGJlZm9yZUV4cHIsIGJpbm9wOiA3IH0pLFxuICBfaW5zdGFuY2VvZjogY3JlYXRlS2V5d29yZChcImluc3RhbmNlb2ZcIiwgeyBiZWZvcmVFeHByLCBiaW5vcDogNyB9KSxcbiAgX3R5cGVvZjogY3JlYXRlS2V5d29yZChcInR5cGVvZlwiLCB7IGJlZm9yZUV4cHIsIHByZWZpeCwgc3RhcnRzRXhwciB9KSxcbiAgX3ZvaWQ6IGNyZWF0ZUtleXdvcmQoXCJ2b2lkXCIsIHsgYmVmb3JlRXhwciwgcHJlZml4LCBzdGFydHNFeHByIH0pLFxuICBfZGVsZXRlOiBjcmVhdGVLZXl3b3JkKFwiZGVsZXRlXCIsIHsgYmVmb3JlRXhwciwgcHJlZml4LCBzdGFydHNFeHByIH0pLFxufTtcbiIsIi8vIEBmbG93XG5cbi8vIEVhY2ggc2NvcGUgZ2V0cyBhIGJpdHNldCB0aGF0IG1heSBjb250YWluIHRoZXNlIGZsYWdzXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBTQ09QRV9PVEhFUiAgICAgICAgPSAwYjAwMDAwMDAwLFxuICAgICAgICAgICAgIFNDT1BFX1BST0dSQU0gICAgICA9IDBiMDAwMDAwMDEsXG4gICAgICAgICAgICAgU0NPUEVfRlVOQ1RJT04gICAgID0gMGIwMDAwMDAxMCxcbiAgICAgICAgICAgICBTQ09QRV9BUlJPVyAgICAgICAgPSAwYjAwMDAwMTAwLFxuICAgICAgICAgICAgIFNDT1BFX1NJTVBMRV9DQVRDSCA9IDBiMDAwMDEwMDAsXG4gICAgICAgICAgICAgU0NPUEVfU1VQRVIgICAgICAgID0gMGIwMDAxMDAwMCxcbiAgICAgICAgICAgICBTQ09QRV9ESVJFQ1RfU1VQRVIgPSAwYjAwMTAwMDAwLFxuICAgICAgICAgICAgIFNDT1BFX0NMQVNTICAgICAgICA9IDBiMDEwMDAwMDAsXG4gICAgICAgICAgICAgU0NPUEVfVFNfTU9EVUxFICAgID0gMGIxMDAwMDAwMCxcbiAgICAgICAgICAgICBTQ09QRV9WQVIgPSBTQ09QRV9QUk9HUkFNIHwgU0NPUEVfRlVOQ1RJT04gfCBTQ09QRV9UU19NT0RVTEU7XG5cbmV4cG9ydCB0eXBlIFNjb3BlRmxhZ3MgPVxuICB8IHR5cGVvZiBTQ09QRV9PVEhFUlxuICB8IHR5cGVvZiBTQ09QRV9QUk9HUkFNXG4gIHwgdHlwZW9mIFNDT1BFX0ZVTkNUSU9OXG4gIHwgdHlwZW9mIFNDT1BFX1ZBUlxuICB8IHR5cGVvZiBTQ09QRV9BUlJPV1xuICB8IHR5cGVvZiBTQ09QRV9TSU1QTEVfQ0FUQ0hcbiAgfCB0eXBlb2YgU0NPUEVfU1VQRVJcbiAgfCB0eXBlb2YgU0NPUEVfRElSRUNUX1NVUEVSXG4gIHwgdHlwZW9mIFNDT1BFX0NMQVNTO1xuXG4vLyBUaGVzZSBmbGFncyBhcmUgbWVhbnQgdG8gYmUgX29ubHlfIHVzZWQgaW5zaWRlIHRoZSBTY29wZSBjbGFzcyAob3Igc3ViY2xhc3NlcykuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBCSU5EX0tJTkRfVkFMVUUgICAgICAgICAgID0gMGIwMDAwMF8wMDAwXzAxLFxuICAgICAgICAgICAgIEJJTkRfS0lORF9UWVBFICAgICAgICAgICAgPSAwYjAwMDAwXzAwMDBfMTAsXG4gICAgICAgICAgICAgLy8gVXNlZCBpbiBjaGVja0xWYWwgYW5kIGRlY2xhcmVOYW1lIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBhIGJpbmRpbmdcbiAgICAgICAgICAgICBCSU5EX1NDT1BFX1ZBUiAgICAgICAgICAgID0gMGIwMDAwMF8wMDAxXzAwLCAvLyBWYXItc3R5bGUgYmluZGluZ1xuICAgICAgICAgICAgIEJJTkRfU0NPUEVfTEVYSUNBTCAgICAgICAgPSAwYjAwMDAwXzAwMTBfMDAsIC8vIExldC0gb3IgY29uc3Qtc3R5bGUgYmluZGluZ1xuICAgICAgICAgICAgIEJJTkRfU0NPUEVfRlVOQ1RJT04gICAgICAgPSAwYjAwMDAwXzAxMDBfMDAsIC8vIEZ1bmN0aW9uIGRlY2xhcmF0aW9uXG4gICAgICAgICAgICAgQklORF9TQ09QRV9PVVRTSURFICAgICAgICA9IDBiMDAwMDBfMTAwMF8wMCwgLy8gU3BlY2lhbCBjYXNlIGZvciBmdW5jdGlvbiBuYW1lcyBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm91bmQgaW5zaWRlIHRoZSBmdW5jdGlvblxuICAgICAgICAgICAgIC8vIE1pc2MgZmxhZ3NcbiAgICAgICAgICAgICBCSU5EX0ZMQUdTX05PTkUgICAgICAgICAgID0gMGIwMDAwMV8wMDAwXzAwLFxuICAgICAgICAgICAgIEJJTkRfRkxBR1NfQ0xBU1MgICAgICAgICAgPSAwYjAwMDEwXzAwMDBfMDAsXG4gICAgICAgICAgICAgQklORF9GTEFHU19UU19FTlVNICAgICAgICA9IDBiMDAxMDBfMDAwMF8wMCxcbiAgICAgICAgICAgICBCSU5EX0ZMQUdTX1RTX0NPTlNUX0VOVU0gID0gMGIwMTAwMF8wMDAwXzAwLFxuICAgICAgICAgICAgIEJJTkRfRkxBR1NfVFNfRVhQT1JUX09OTFkgPSAwYjEwMDAwXzAwMDBfMDA7XG5cbi8vIFRoZXNlIGZsYWdzIGFyZSBtZWFudCB0byBiZSBfb25seV8gdXNlZCBieSBTY29wZSBjb25zdW1lcnNcbi8vIHByZXR0aWVyLWlnbm9yZVxuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIGlzIHZhbHVlPyAgICB8ICAgIGlzIHR5cGU/ICAgIHwgICAgICBzY29wZSAgICAgICAgICB8ICAgIG1pc2MgZmxhZ3MgICAgKi9cbmV4cG9ydCBjb25zdCBCSU5EX0NMQVNTICAgICAgICAgPSBCSU5EX0tJTkRfVkFMVUUgfCBCSU5EX0tJTkRfVFlQRSB8IEJJTkRfU0NPUEVfTEVYSUNBTCAgfCBCSU5EX0ZMQUdTX0NMQVNTICAsXG4gICAgICAgICAgICAgQklORF9MRVhJQ0FMICAgICAgID0gQklORF9LSU5EX1ZBTFVFIHwgMCAgICAgICAgICAgICAgfCBCSU5EX1NDT1BFX0xFWElDQUwgIHwgMCAgICAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgIEJJTkRfVkFSICAgICAgICAgICA9IEJJTkRfS0lORF9WQUxVRSB8IDAgICAgICAgICAgICAgIHwgQklORF9TQ09QRV9WQVIgICAgICB8IDAgICAgICAgICAgICAgICAgICxcbiAgICAgICAgICAgICBCSU5EX0ZVTkNUSU9OICAgICAgPSBCSU5EX0tJTkRfVkFMVUUgfCAwICAgICAgICAgICAgICB8IEJJTkRfU0NPUEVfRlVOQ1RJT04gfCAwICAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgQklORF9UU19JTlRFUkZBQ0UgID0gMCAgICAgICAgICAgICAgIHwgQklORF9LSU5EX1RZUEUgfCAwICAgICAgICAgICAgICAgICAgIHwgQklORF9GTEFHU19DTEFTUyAgLFxuICAgICAgICAgICAgIEJJTkRfVFNfVFlQRSAgICAgICA9IDAgICAgICAgICAgICAgICB8IEJJTkRfS0lORF9UWVBFIHwgMCAgICAgICAgICAgICAgICAgICB8IDAgICAgICAgICAgICAgICAgICxcbiAgICAgICAgICAgICBCSU5EX1RTX0VOVU0gICAgICAgPSBCSU5EX0tJTkRfVkFMVUUgfCBCSU5EX0tJTkRfVFlQRSB8IEJJTkRfU0NPUEVfTEVYSUNBTCAgfCBCSU5EX0ZMQUdTX1RTX0VOVU0sXG4gICAgICAgICAgICAgQklORF9UU19BTUJJRU5UICAgID0gMCAgICAgICAgICAgICAgIHwgMCAgICAgICAgICAgICAgfCAwICAgICAgICAgICAgfCBCSU5EX0ZMQUdTX1RTX0VYUE9SVF9PTkxZLFxuICAgICAgICAgICAgIC8vIFRoZXNlIGJpbmRpbmdzIGRvbid0IGludHJvZHVjZSBhbnl0aGluZyBpbiB0aGUgc2NvcGUuIFRoZXkgYXJlIHVzZWQgZm9yIGFzc2lnbm1lbnRzIGFuZFxuICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGV4cHJlc3Npb25zIElEcy5cbiAgICAgICAgICAgICBCSU5EX05PTkUgICAgICAgICAgPSAwICAgICAgICAgICAgICAgfCAwICAgICAgICAgICAgICB8IDAgICAgICAgICAgICAgICAgICAgfCBCSU5EX0ZMQUdTX05PTkUgICAsXG4gICAgICAgICAgICAgQklORF9PVVRTSURFICAgICAgID0gQklORF9LSU5EX1ZBTFVFIHwgMCAgICAgICAgICAgICAgfCAwICAgICAgICAgICAgICAgICAgIHwgQklORF9GTEFHU19OT05FICAgLFxuXG4gICAgICAgICAgICAgQklORF9UU19DT05TVF9FTlVNID0gQklORF9UU19FTlVNIHwgQklORF9GTEFHU19UU19DT05TVF9FTlVNLFxuICAgICAgICAgICAgIEJJTkRfVFNfTkFNRVNQQUNFICA9IDAgICAgICAgICAgICAgICB8IDAgICAgICAgICAgICAgIHwgMCAgICAgICAgICAgIHwgQklORF9GTEFHU19UU19FWFBPUlRfT05MWTtcblxuZXhwb3J0IHR5cGUgQmluZGluZ1R5cGVzID1cbiAgfCB0eXBlb2YgQklORF9OT05FXG4gIHwgdHlwZW9mIEJJTkRfT1VUU0lERVxuICB8IHR5cGVvZiBCSU5EX1ZBUlxuICB8IHR5cGVvZiBCSU5EX0xFWElDQUxcbiAgfCB0eXBlb2YgQklORF9DTEFTU1xuICB8IHR5cGVvZiBCSU5EX0ZVTkNUSU9OXG4gIHwgdHlwZW9mIEJJTkRfVFNfSU5URVJGQUNFXG4gIHwgdHlwZW9mIEJJTkRfVFNfVFlQRVxuICB8IHR5cGVvZiBCSU5EX1RTX0VOVU1cbiAgfCB0eXBlb2YgQklORF9UU19BTUJJRU5UXG4gIHwgdHlwZW9mIEJJTkRfVFNfTkFNRVNQQUNFO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBDTEFTU19FTEVNRU5UX0ZMQUdfU1RBVElDID0gMGIxXzAwLFxuICAgICAgICAgICAgIENMQVNTX0VMRU1FTlRfS0lORF9HRVRURVIgPSAwYjBfMTAsXG4gICAgICAgICAgICAgQ0xBU1NfRUxFTUVOVF9LSU5EX1NFVFRFUiA9IDBiMF8wMSxcbiAgICAgICAgICAgICBDTEFTU19FTEVNRU5UX0tJTkRfQUNDRVNTT1IgPSBDTEFTU19FTEVNRU5UX0tJTkRfR0VUVEVSIHwgQ0xBU1NfRUxFTUVOVF9LSU5EX1NFVFRFUjtcblxuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgQ0xBU1NfRUxFTUVOVF9TVEFUSUNfR0VUVEVSICAgPSBDTEFTU19FTEVNRU5UX0tJTkRfR0VUVEVSIHwgQ0xBU1NfRUxFTUVOVF9GTEFHX1NUQVRJQyxcbiAgICAgICAgICAgICBDTEFTU19FTEVNRU5UX1NUQVRJQ19TRVRURVIgICA9IENMQVNTX0VMRU1FTlRfS0lORF9TRVRURVIgfCBDTEFTU19FTEVNRU5UX0ZMQUdfU1RBVElDLFxuICAgICAgICAgICAgIENMQVNTX0VMRU1FTlRfSU5TVEFOQ0VfR0VUVEVSID0gQ0xBU1NfRUxFTUVOVF9LSU5EX0dFVFRFUixcbiAgICAgICAgICAgICBDTEFTU19FTEVNRU5UX0lOU1RBTkNFX1NFVFRFUiA9IENMQVNTX0VMRU1FTlRfS0lORF9TRVRURVIsXG4gICAgICAgICAgICAgQ0xBU1NfRUxFTUVOVF9PVEhFUiAgICAgICAgICAgPSAwO1xuXG5leHBvcnQgdHlwZSBDbGFzc0VsZW1lbnRUeXBlcyA9XG4gIHwgdHlwZW9mIENMQVNTX0VMRU1FTlRfU1RBVElDX0dFVFRFUlxuICB8IHR5cGVvZiBDTEFTU19FTEVNRU5UX1NUQVRJQ19TRVRURVJcbiAgfCB0eXBlb2YgQ0xBU1NfRUxFTUVOVF9JTlNUQU5DRV9HRVRURVJcbiAgfCB0eXBlb2YgQ0xBU1NfRUxFTUVOVF9JTlNUQU5DRV9TRVRURVJcbiAgfCB0eXBlb2YgQ0xBU1NfRUxFTUVOVF9PVEhFUjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCAqIGFzIGNoYXJDb2RlcyBmcm9tIFwiY2hhcmNvZGVzXCI7XG5cbi8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcbi8vIGxpbmUgYnJlYWspLiBVc2VkIHRvIGNvdW50IGxpbmVzLlxuZXhwb3J0IGNvbnN0IGxpbmVCcmVhayA9IC9cXHJcXG4/fFtcXG5cXHUyMDI4XFx1MjAyOV0vO1xuZXhwb3J0IGNvbnN0IGxpbmVCcmVha0cgPSBuZXcgUmVnRXhwKGxpbmVCcmVhay5zb3VyY2UsIFwiZ1wiKTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGluZS10ZXJtaW5hdG9yc1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV3TGluZShjb2RlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSBjaGFyQ29kZXMubGluZUZlZWQ6XG4gICAgY2FzZSBjaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm46XG4gICAgY2FzZSBjaGFyQ29kZXMubGluZVNlcGFyYXRvcjpcbiAgICBjYXNlIGNoYXJDb2Rlcy5wYXJhZ3JhcGhTZXBhcmF0b3I6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNraXBXaGl0ZVNwYWNlID0gLyg/Olxcc3xcXC9cXC8uKnxcXC9cXCpbXl0qP1xcKlxcLykqL2c7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXdoaXRlLXNwYWNlXG5leHBvcnQgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDB4MDAwOTogLy8gQ0hBUkFDVEVSIFRBQlVMQVRJT05cbiAgICBjYXNlIDB4MDAwYjogLy8gTElORSBUQUJVTEFUSU9OXG4gICAgY2FzZSAweDAwMGM6IC8vIEZPUk0gRkVFRFxuICAgIGNhc2UgY2hhckNvZGVzLnNwYWNlOlxuICAgIGNhc2UgY2hhckNvZGVzLm5vbkJyZWFraW5nU3BhY2U6XG4gICAgY2FzZSBjaGFyQ29kZXMub2doYW1TcGFjZU1hcms6XG4gICAgY2FzZSAweDIwMDA6IC8vIEVOIFFVQURcbiAgICBjYXNlIDB4MjAwMTogLy8gRU0gUVVBRFxuICAgIGNhc2UgMHgyMDAyOiAvLyBFTiBTUEFDRVxuICAgIGNhc2UgMHgyMDAzOiAvLyBFTSBTUEFDRVxuICAgIGNhc2UgMHgyMDA0OiAvLyBUSFJFRS1QRVItRU0gU1BBQ0VcbiAgICBjYXNlIDB4MjAwNTogLy8gRk9VUi1QRVItRU0gU1BBQ0VcbiAgICBjYXNlIDB4MjAwNjogLy8gU0lYLVBFUi1FTSBTUEFDRVxuICAgIGNhc2UgMHgyMDA3OiAvLyBGSUdVUkUgU1BBQ0VcbiAgICBjYXNlIDB4MjAwODogLy8gUFVOQ1RVQVRJT04gU1BBQ0VcbiAgICBjYXNlIDB4MjAwOTogLy8gVEhJTiBTUEFDRVxuICAgIGNhc2UgMHgyMDBhOiAvLyBIQUlSIFNQQUNFXG4gICAgY2FzZSAweDIwMmY6IC8vIE5BUlJPVyBOTy1CUkVBSyBTUEFDRVxuICAgIGNhc2UgMHgyMDVmOiAvLyBNRURJVU0gTUFUSEVNQVRJQ0FMIFNQQUNFXG4gICAgY2FzZSAweDMwMDA6IC8vIElERU9HUkFQSElDIFNQQUNFXG4gICAgY2FzZSAweGZlZmY6IC8vIFpFUk8gV0lEVEggTk8tQlJFQUsgU1BBQ0VcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgbGluZUJyZWFrRyB9IGZyb20gXCIuL3doaXRlc3BhY2VcIjtcblxuZXhwb3J0IHR5cGUgUG9zID0ge1xuICBzdGFydDogbnVtYmVyLFxufTtcblxuLy8gVGhlc2UgYXJlIHVzZWQgd2hlbiBgb3B0aW9ucy5sb2NhdGlvbnNgIGlzIG9uLCBmb3IgdGhlXG4vLyBgc3RhcnRMb2NgIGFuZCBgZW5kTG9jYCBwcm9wZXJ0aWVzLlxuXG5leHBvcnQgY2xhc3MgUG9zaXRpb24ge1xuICBsaW5lOiBudW1iZXI7XG4gIGNvbHVtbjogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIpIHtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTb3VyY2VMb2NhdGlvbiB7XG4gIHN0YXJ0OiBQb3NpdGlvbjtcbiAgZW5kOiBQb3NpdGlvbjtcbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgaWRlbnRpZmllck5hbWU6ID9zdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc3RhcnQ6IFBvc2l0aW9uLCBlbmQ/OiBQb3NpdGlvbikge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAvLyAkRmxvd0lnbm9yZSAobWF5IHN0YXJ0IGFzIG51bGwsIGJ1dCBpbml0aWFsaXplZCBsYXRlcilcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgfVxufVxuXG4vLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXG4vLyBgbG9jYXRpb25zYCBvcHRpb24gaXMgb2ZmIChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucykgYW5kIHlvdVxuLy8gd2FudCB0byBmaW5kIHRoZSBsaW5lL2NvbHVtbiBwb3NpdGlvbiBmb3IgYSBnaXZlbiBjaGFyYWN0ZXJcbi8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcbi8vIGludG8uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMaW5lSW5mbyhpbnB1dDogc3RyaW5nLCBvZmZzZXQ6IG51bWJlcik6IFBvc2l0aW9uIHtcbiAgbGV0IGxpbmUgPSAxO1xuICBsZXQgbGluZVN0YXJ0ID0gMDtcbiAgbGV0IG1hdGNoO1xuICBsaW5lQnJlYWtHLmxhc3RJbmRleCA9IDA7XG4gIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWMoaW5wdXQpKSAmJiBtYXRjaC5pbmRleCA8IG9mZnNldCkge1xuICAgIGxpbmUrKztcbiAgICBsaW5lU3RhcnQgPSBsaW5lQnJlYWtHLmxhc3RJbmRleDtcbiAgfVxuXG4gIHJldHVybiBuZXcgUG9zaXRpb24obGluZSwgb2Zmc2V0IC0gbGluZVN0YXJ0KTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5pbXBvcnQgdHlwZSBTdGF0ZSBmcm9tIFwiLi4vdG9rZW5pemVyL3N0YXRlXCI7XG5pbXBvcnQgdHlwZSB7IFBsdWdpbnNNYXAgfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHR5cGUgU2NvcGVIYW5kbGVyIGZyb20gXCIuLi91dGlsL3Njb3BlXCI7XG5pbXBvcnQgdHlwZSBDbGFzc1Njb3BlSGFuZGxlciBmcm9tIFwiLi4vdXRpbC9jbGFzcy1zY29wZVwiO1xuaW1wb3J0IHR5cGUgUHJvZHVjdGlvblBhcmFtZXRlckhhbmRsZXIgZnJvbSBcIi4uL3V0aWwvcHJvZHVjdGlvbi1wYXJhbWV0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZVBhcnNlciB7XG4gIC8vIFByb3BlcnRpZXMgc2V0IGJ5IGNvbnN0cnVjdG9yIGluIGluZGV4LmpzXG4gIG9wdGlvbnM6IE9wdGlvbnM7XG4gIGluTW9kdWxlOiBib29sZWFuO1xuICBzY29wZTogU2NvcGVIYW5kbGVyPCo+O1xuICBjbGFzc1Njb3BlOiBDbGFzc1Njb3BlSGFuZGxlcjtcbiAgcHJvZFBhcmFtOiBQcm9kdWN0aW9uUGFyYW1ldGVySGFuZGxlcjtcbiAgcGx1Z2luczogUGx1Z2luc01hcDtcbiAgZmlsZW5hbWU6ID9zdHJpbmc7XG4gIHNhd1VuYW1iaWd1b3VzRVNNOiBib29sZWFuID0gZmFsc2U7XG4gIGFtYmlndW91c1NjcmlwdERpZmZlcmVudEFzdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIEluaXRpYWxpemVkIGJ5IFRva2VuaXplclxuICBzdGF0ZTogU3RhdGU7XG4gIC8vIGlucHV0IGFuZCBsZW5ndGggYXJlIG5vdCBpbiBzdGF0ZSBhcyB0aGV5IGFyZSBjb25zdGFudCBhbmQgd2UgZG9cbiAgLy8gbm90IHdhbnQgdG8gZXZlciBjb3B5IHRoZW0sIHdoaWNoIGhhcHBlbnMgaWYgc3RhdGUgZ2V0cyBjbG9uZWRcbiAgaW5wdXQ6IHN0cmluZztcbiAgbGVuZ3RoOiBudW1iZXI7XG5cbiAgaGFzUGx1Z2luKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBsdWdpbnMuaGFzKG5hbWUpO1xuICB9XG5cbiAgZ2V0UGx1Z2luT3B0aW9uKHBsdWdpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICAvLyAkRmxvd0lzc3VlXG4gICAgaWYgKHRoaXMuaGFzUGx1Z2luKHBsdWdpbikpIHJldHVybiB0aGlzLnBsdWdpbnMuZ2V0KHBsdWdpbilbbmFtZV07XG4gIH1cbn1cbiIsIi8vIEBmbG93XG5cbi8qKlxuICogQmFzZWQgb24gdGhlIGNvbW1lbnQgYXR0YWNobWVudCBhbGdvcml0aG0gdXNlZCBpbiBlc3ByZWUgYW5kIGVzdHJhdmVyc2UuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAqIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuICogVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5pbXBvcnQgQmFzZVBhcnNlciBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgdHlwZSB7IENvbW1lbnQsIE5vZGUgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gbGFzdDxUPihzdGFjazogJFJlYWRPbmx5QXJyYXk8VD4pOiBUIHtcbiAgcmV0dXJuIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tZW50c1BhcnNlciBleHRlbmRzIEJhc2VQYXJzZXIge1xuICBhZGRDb21tZW50KGNvbW1lbnQ6IENvbW1lbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5maWxlbmFtZSkgY29tbWVudC5sb2MuZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lO1xuICAgIHRoaXMuc3RhdGUudHJhaWxpbmdDb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgIHRoaXMuc3RhdGUubGVhZGluZ0NvbW1lbnRzLnB1c2goY29tbWVudCk7XG4gIH1cblxuICBhZGp1c3RDb21tZW50c0FmdGVyVHJhaWxpbmdDb21tYShcbiAgICBub2RlOiBOb2RlLFxuICAgIGVsZW1lbnRzOiAoTm9kZSB8IG51bGwpW10sXG4gICAgLy8gV2hlbiB0aGUgY3VycmVudCBub2RlIGlzIGZvbGxvd2VkIGJ5IGEgdG9rZW4gd2hpY2ggaGFzbid0IGEgcmVzcGVjdGl2ZSBBU1Qgbm9kZSwgd2VcbiAgICAvLyBuZWVkIHRvIHRha2UgYWxsIHRoZSB0cmFpbGluZyBjb21tZW50cyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyBhdHRhY2hlZCB0byBhblxuICAgIC8vIHVucmVsYXRlZCBub2RlLiBlLmcuIGluXG4gICAgLy8gICAgIHZhciB7IHggfSAvKiBjbXQgKi8gPSB7IHkgfVxuICAgIC8vIHdlIGRvbid0IHdhbnQgLyogY210ICovIHRvIGJlIGF0dGFjaGVkIHRvIHsgeSB9LlxuICAgIC8vIE9uIHRoZSBvdGhlciBoYW5kLCBpblxuICAgIC8vICAgICBmbih4KSBbbmV3IGxpbmVdIC8qIGNtdCAqLyBbbmV3IGxpbmVdIHlcbiAgICAvLyAvKiBjbXQgKi8gaXMgYm90aCBhIHRyYWlsaW5nIGNvbW1lbnQgb2YgZm4oeCkgYW5kIGEgbGVhZGluZyBjb21tZW50IG9mIHlcbiAgICB0YWtlQWxsQ29tbWVudHM/OiBib29sZWFuLFxuICApIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxhc3RFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgaSA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAobGFzdEVsZW1lbnQgPT09IG51bGwgJiYgaSA+IDApIHtcbiAgICAgIGxhc3RFbGVtZW50ID0gZWxlbWVudHNbLS1pXTtcbiAgICB9XG4gICAgaWYgKGxhc3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50c1tqXS5lbmQgPCB0aGlzLnN0YXRlLmNvbW1lbnRQcmV2aW91c05vZGUuZW5kXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMuc3BsaWNlKGosIDEpO1xuICAgICAgICBqLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV3VHJhaWxpbmdDb21tZW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxlYWRpbmdDb21tZW50ID0gdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHNbaV07XG4gICAgICBpZiAobGVhZGluZ0NvbW1lbnQuZW5kIDwgbm9kZS5lbmQpIHtcbiAgICAgICAgbmV3VHJhaWxpbmdDb21tZW50cy5wdXNoKGxlYWRpbmdDb21tZW50KTtcblxuICAgICAgICAvLyBQZXJmOiB3ZSBkb24ndCBuZWVkIHRvIHNwbGljZSBpZiB3ZSBhcmUgZ29pbmcgdG8gcmVzZXQgdGhlIGFycmF5IGFueXdheVxuICAgICAgICBpZiAoIXRha2VBbGxDb21tZW50cykge1xuICAgICAgICAgIHRoaXMuc3RhdGUubGVhZGluZ0NvbW1lbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLnRyYWlsaW5nQ29tbWVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUudHJhaWxpbmdDb21tZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUudHJhaWxpbmdDb21tZW50cy5wdXNoKGxlYWRpbmdDb21tZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRha2VBbGxDb21tZW50cykgdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMgPSBbXTtcblxuICAgIGlmIChuZXdUcmFpbGluZ0NvbW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxhc3RFbGVtZW50LnRyYWlsaW5nQ29tbWVudHMgPSBuZXdUcmFpbGluZ0NvbW1lbnRzO1xuICAgIH0gZWxzZSBpZiAobGFzdEVsZW1lbnQudHJhaWxpbmdDb21tZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsYXN0RWxlbWVudC50cmFpbGluZ0NvbW1lbnRzID0gW107XG4gICAgfVxuICB9XG5cbiAgcHJvY2Vzc0NvbW1lbnQobm9kZTogTm9kZSk6IHZvaWQge1xuICAgIGlmIChub2RlLnR5cGUgPT09IFwiUHJvZ3JhbVwiICYmIG5vZGUuYm9keS5sZW5ndGggPiAwKSByZXR1cm47XG5cbiAgICBjb25zdCBzdGFjayA9IHRoaXMuc3RhdGUuY29tbWVudFN0YWNrO1xuXG4gICAgbGV0IGZpcnN0Q2hpbGQsIGxhc3RDaGlsZCwgdHJhaWxpbmdDb21tZW50cywgaSwgajtcblxuICAgIGlmICh0aGlzLnN0YXRlLnRyYWlsaW5nQ29tbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gSWYgdGhlIGZpcnN0IGNvbW1lbnQgaW4gdHJhaWxpbmdDb21tZW50cyBjb21lcyBhZnRlciB0aGVcbiAgICAgIC8vIGN1cnJlbnQgbm9kZSwgdGhlbiB3ZSdyZSBnb29kIC0gYWxsIGNvbW1lbnRzIGluIHRoZSBhcnJheSB3aWxsXG4gICAgICAvLyBjb21lIGFmdGVyIHRoZSBub2RlIGFuZCBzbyBpdCdzIHNhZmUgdG8gYWRkIHRoZW0gYXMgb2ZmaWNpYWxcbiAgICAgIC8vIHRyYWlsaW5nQ29tbWVudHMuXG4gICAgICBpZiAodGhpcy5zdGF0ZS50cmFpbGluZ0NvbW1lbnRzWzBdLnN0YXJ0ID49IG5vZGUuZW5kKSB7XG4gICAgICAgIHRyYWlsaW5nQ29tbWVudHMgPSB0aGlzLnN0YXRlLnRyYWlsaW5nQ29tbWVudHM7XG4gICAgICAgIHRoaXMuc3RhdGUudHJhaWxpbmdDb21tZW50cyA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgZmlyc3QgY29tbWVudCBkb2Vzbid0IGNvbWUgYWZ0ZXIgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgbm9kZSwgdGhhdCBtZWFucyB3ZSBoYXZlIGEgbWl4IG9mIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG4gICAgICAgIC8vIGNvbW1lbnRzIGluIHRoZSBhcnJheSBhbmQgdGhhdCBsZWFkaW5nQ29tbWVudHMgY29udGFpbnMgdGhlXG4gICAgICAgIC8vIHNhbWUgaXRlbXMgYXMgdHJhaWxpbmdDb21tZW50cy4gUmVzZXQgdHJhaWxpbmdDb21tZW50cyB0b1xuICAgICAgICAvLyB6ZXJvIGl0ZW1zIGFuZCB3ZSdsbCBoYW5kbGUgdGhpcyBieSBldmFsdWF0aW5nIGxlYWRpbmdDb21tZW50c1xuICAgICAgICAvLyBsYXRlci5cbiAgICAgICAgdGhpcy5zdGF0ZS50cmFpbGluZ0NvbW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBsYXN0SW5TdGFjayA9IGxhc3Qoc3RhY2spO1xuICAgICAgaWYgKFxuICAgICAgICBsYXN0SW5TdGFjay50cmFpbGluZ0NvbW1lbnRzICYmXG4gICAgICAgIGxhc3RJblN0YWNrLnRyYWlsaW5nQ29tbWVudHNbMF0uc3RhcnQgPj0gbm9kZS5lbmRcbiAgICAgICkge1xuICAgICAgICB0cmFpbGluZ0NvbW1lbnRzID0gbGFzdEluU3RhY2sudHJhaWxpbmdDb21tZW50cztcbiAgICAgICAgZGVsZXRlIGxhc3RJblN0YWNrLnRyYWlsaW5nQ29tbWVudHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRWF0aW5nIHRoZSBzdGFjay5cbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCAmJiBsYXN0KHN0YWNrKS5zdGFydCA+PSBub2RlLnN0YXJ0KSB7XG4gICAgICBmaXJzdENoaWxkID0gc3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDAgJiYgbGFzdChzdGFjaykuc3RhcnQgPj0gbm9kZS5zdGFydCkge1xuICAgICAgbGFzdENoaWxkID0gc3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKCFsYXN0Q2hpbGQgJiYgZmlyc3RDaGlsZCkgbGFzdENoaWxkID0gZmlyc3RDaGlsZDtcblxuICAgIC8vIEFkanVzdCBjb21tZW50cyB0aGF0IGZvbGxvdyBhIHRyYWlsaW5nIGNvbW1hIG9uIHRoZSBsYXN0IGVsZW1lbnQgaW4gYVxuICAgIC8vIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIG5vZGVzIHRvIGJlIHRoZSB0cmFpbGluZyBjb21tZW50cyBvbiB0aGUgbGFzdFxuICAgIC8vIGVsZW1lbnRcbiAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIk9iamVjdEV4cHJlc3Npb25cIjpcbiAgICAgICAgICB0aGlzLmFkanVzdENvbW1lbnRzQWZ0ZXJUcmFpbGluZ0NvbW1hKG5vZGUsIG5vZGUucHJvcGVydGllcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgICAgICAgdGhpcy5hZGp1c3RDb21tZW50c0FmdGVyVHJhaWxpbmdDb21tYShub2RlLCBub2RlLnByb3BlcnRpZXMsIHRydWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQ2FsbEV4cHJlc3Npb25cIjpcbiAgICAgICAgICB0aGlzLmFkanVzdENvbW1lbnRzQWZ0ZXJUcmFpbGluZ0NvbW1hKG5vZGUsIG5vZGUuYXJndW1lbnRzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycmF5RXhwcmVzc2lvblwiOlxuICAgICAgICAgIHRoaXMuYWRqdXN0Q29tbWVudHNBZnRlclRyYWlsaW5nQ29tbWEobm9kZSwgbm9kZS5lbGVtZW50cyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJheVBhdHRlcm5cIjpcbiAgICAgICAgICB0aGlzLmFkanVzdENvbW1lbnRzQWZ0ZXJUcmFpbGluZ0NvbW1hKG5vZGUsIG5vZGUuZWxlbWVudHMsIHRydWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLnN0YXRlLmNvbW1lbnRQcmV2aW91c05vZGUgJiZcbiAgICAgICgodGhpcy5zdGF0ZS5jb21tZW50UHJldmlvdXNOb2RlLnR5cGUgPT09IFwiSW1wb3J0U3BlY2lmaWVyXCIgJiZcbiAgICAgICAgbm9kZS50eXBlICE9PSBcIkltcG9ydFNwZWNpZmllclwiKSB8fFxuICAgICAgICAodGhpcy5zdGF0ZS5jb21tZW50UHJldmlvdXNOb2RlLnR5cGUgPT09IFwiRXhwb3J0U3BlY2lmaWVyXCIgJiZcbiAgICAgICAgICBub2RlLnR5cGUgIT09IFwiRXhwb3J0U3BlY2lmaWVyXCIpKVxuICAgICkge1xuICAgICAgdGhpcy5hZGp1c3RDb21tZW50c0FmdGVyVHJhaWxpbmdDb21tYShub2RlLCBbXG4gICAgICAgIHRoaXMuc3RhdGUuY29tbWVudFByZXZpb3VzTm9kZSxcbiAgICAgIF0pO1xuICAgIH1cblxuICAgIGlmIChsYXN0Q2hpbGQpIHtcbiAgICAgIGlmIChsYXN0Q2hpbGQubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBsYXN0Q2hpbGQgIT09IG5vZGUgJiZcbiAgICAgICAgICBsYXN0Q2hpbGQubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBsYXN0KGxhc3RDaGlsZC5sZWFkaW5nQ29tbWVudHMpLmVuZCA8PSBub2RlLnN0YXJ0XG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gbGFzdENoaWxkLmxlYWRpbmdDb21tZW50cztcbiAgICAgICAgICBkZWxldGUgbGFzdENoaWxkLmxlYWRpbmdDb21tZW50cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBIGxlYWRpbmcgY29tbWVudCBmb3IgYW4gYW5vbnltb3VzIGNsYXNzIGhhZCBiZWVuIHN0b2xlbiBieSBpdHMgZmlyc3QgQ2xhc3NNZXRob2QsXG4gICAgICAgICAgLy8gc28gdGhpcyB0YWtlcyBiYWNrIHRoZSBsZWFkaW5nIGNvbW1lbnQuXG4gICAgICAgICAgLy8gU2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNwcmVlL2lzc3Vlcy8xNThcbiAgICAgICAgICBmb3IgKGkgPSBsYXN0Q2hpbGQubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCAtIDI7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAobGFzdENoaWxkLmxlYWRpbmdDb21tZW50c1tpXS5lbmQgPD0gbm9kZS5zdGFydCkge1xuICAgICAgICAgICAgICBub2RlLmxlYWRpbmdDb21tZW50cyA9IGxhc3RDaGlsZC5sZWFkaW5nQ29tbWVudHMuc3BsaWNlKDAsIGkgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAobGFzdCh0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cykuZW5kIDw9IG5vZGUuc3RhcnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29tbWVudFByZXZpb3VzTm9kZSkge1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50c1tqXS5lbmQgPFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmNvbW1lbnRQcmV2aW91c05vZGUuZW5kXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMuc3BsaWNlKGosIDEpO1xuICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbm9kZS5sZWFkaW5nQ29tbWVudHMgPSB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cztcbiAgICAgICAgICB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzcHJlZS9pc3N1ZXMvMlxuICAgICAgICAvL1xuICAgICAgICAvLyBJbiBzcGVjaWFsIGNhc2VzLCBzdWNoIGFzIHJldHVybiAod2l0aG91dCBhIHZhbHVlKSBhbmRcbiAgICAgICAgLy8gZGVidWdnZXIsIGFsbCBjb21tZW50cyB3aWxsIGVuZCB1cCBhcyBsZWFkaW5nQ29tbWVudHMgYW5kXG4gICAgICAgIC8vIHdpbGwgb3RoZXJ3aXNlIGJlIGVsaW1pbmF0ZWQuIFRoaXMgc3RlcCBydW5zIHdoZW4gdGhlXG4gICAgICAgIC8vIGNvbW1lbnRTdGFjayBpcyBlbXB0eSBhbmQgdGhlcmUgYXJlIGNvbW1lbnRzIGxlZnRcbiAgICAgICAgLy8gaW4gbGVhZGluZ0NvbW1lbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGxvb3AgZmlndXJlcyBvdXQgdGhlIHN0b3BwaW5nIHBvaW50IGJldHdlZW4gdGhlIGFjdHVhbFxuICAgICAgICAvLyBsZWFkaW5nIGFuZCB0cmFpbGluZyBjb21tZW50cyBieSBmaW5kaW5nIHRoZSBsb2NhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gZmlyc3QgY29tbWVudCB0aGF0IGNvbWVzIGFmdGVyIHRoZSBnaXZlbiBub2RlLlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHNbaV0uZW5kID4gbm9kZS5zdGFydCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BsaXQgdGhlIGFycmF5IGJhc2VkIG9uIHRoZSBsb2NhdGlvbiBvZiB0aGUgZmlyc3QgY29tbWVudFxuICAgICAgICAvLyB0aGF0IGNvbWVzIGFmdGVyIHRoZSBub2RlLiBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGNvdWxkXG4gICAgICAgIC8vIHJlc3VsdCBpbiBhbiBlbXB0eSBhcnJheSwgYW5kIGlmIHNvLCB0aGUgYXJyYXkgbXVzdCBiZVxuICAgICAgICAvLyBkZWxldGVkLlxuICAgICAgICBjb25zdCBsZWFkaW5nQ29tbWVudHMgPSB0aGlzLnN0YXRlLmxlYWRpbmdDb21tZW50cy5zbGljZSgwLCBpKTtcblxuICAgICAgICBpZiAobGVhZGluZ0NvbW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gbGVhZGluZ0NvbW1lbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2ltaWxhcmx5LCB0cmFpbGluZyBjb21tZW50cyBhcmUgYXR0YWNoZWQgbGF0ZXIuIFRoZSB2YXJpYWJsZVxuICAgICAgICAvLyBtdXN0IGJlIHJlc2V0IHRvIG51bGwgaWYgdGhlcmUgYXJlIG5vIHRyYWlsaW5nIGNvbW1lbnRzLlxuICAgICAgICB0cmFpbGluZ0NvbW1lbnRzID0gdGhpcy5zdGF0ZS5sZWFkaW5nQ29tbWVudHMuc2xpY2UoaSk7XG4gICAgICAgIGlmICh0cmFpbGluZ0NvbW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRyYWlsaW5nQ29tbWVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5jb21tZW50UHJldmlvdXNOb2RlID0gbm9kZTtcblxuICAgIGlmICh0cmFpbGluZ0NvbW1lbnRzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRyYWlsaW5nQ29tbWVudHMubGVuZ3RoICYmXG4gICAgICAgIHRyYWlsaW5nQ29tbWVudHNbMF0uc3RhcnQgPj0gbm9kZS5zdGFydCAmJlxuICAgICAgICBsYXN0KHRyYWlsaW5nQ29tbWVudHMpLmVuZCA8PSBub2RlLmVuZFxuICAgICAgKSB7XG4gICAgICAgIG5vZGUuaW5uZXJDb21tZW50cyA9IHRyYWlsaW5nQ29tbWVudHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUcmFpbGluZ0NvbW1lbnRzIG1heWJlIGNvbnRhaW4gaW5uZXJDb21tZW50c1xuICAgICAgICBjb25zdCBmaXJzdFRyYWlsaW5nQ29tbWVudEluZGV4ID0gdHJhaWxpbmdDb21tZW50cy5maW5kSW5kZXgoXG4gICAgICAgICAgY29tbWVudCA9PiBjb21tZW50LmVuZCA+PSBub2RlLmVuZCxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZmlyc3RUcmFpbGluZ0NvbW1lbnRJbmRleCA+IDApIHtcbiAgICAgICAgICBub2RlLmlubmVyQ29tbWVudHMgPSB0cmFpbGluZ0NvbW1lbnRzLnNsaWNlKFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGZpcnN0VHJhaWxpbmdDb21tZW50SW5kZXgsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBub2RlLnRyYWlsaW5nQ29tbWVudHMgPSB0cmFpbGluZ0NvbW1lbnRzLnNsaWNlKFxuICAgICAgICAgICAgZmlyc3RUcmFpbGluZ0NvbW1lbnRJbmRleCxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUudHJhaWxpbmdDb21tZW50cyA9IHRyYWlsaW5nQ29tbWVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKG5vZGUpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuLyogZXNsaW50IHNvcnQta2V5czogXCJlcnJvclwiICovXG5cbi8vIFRoZSBFcnJvcnMga2V5IGZvbGxvd3MgaHR0cHM6Ly9jcy5jaHJvbWl1bS5vcmcvY2hyb21pdW0vc3JjL3Y4L3NyYy9jb21tb24vbWVzc2FnZS10ZW1wbGF0ZS5oIHVubGVzcyBpdCBkb2VzIG5vdCBleGlzdFxuZXhwb3J0IGNvbnN0IEVycm9yTWVzc2FnZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgQWNjZXNzb3JJc0dlbmVyYXRvcjogXCJBICUwdGVyIGNhbm5vdCBiZSBhIGdlbmVyYXRvclwiLFxuICBBcmd1bWVudHNEaXNhbGxvd2VkSW5Jbml0aWFsaXplcjpcbiAgICBcIidhcmd1bWVudHMnIGlzIG5vdCBhbGxvd2VkIGluIGNsYXNzIGZpZWxkIGluaXRpYWxpemVyXCIsXG4gIEFzeW5jRnVuY3Rpb25JblNpbmdsZVN0YXRlbWVudENvbnRleHQ6XG4gICAgXCJBc3luYyBmdW5jdGlvbnMgY2FuIG9ubHkgYmUgZGVjbGFyZWQgYXQgdGhlIHRvcCBsZXZlbCBvciBpbnNpZGUgYSBibG9ja1wiLFxuICBBd2FpdEJpbmRpbmdJZGVudGlmaWVyOlxuICAgIFwiQ2FuIG5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiLFxuICBBd2FpdEV4cHJlc3Npb25Gb3JtYWxQYXJhbWV0ZXI6XG4gICAgXCJhd2FpdCBpcyBub3QgYWxsb3dlZCBpbiBhc3luYyBmdW5jdGlvbiBwYXJhbWV0ZXJzXCIsXG4gIEF3YWl0Tm90SW5Bc3luY0Z1bmN0aW9uOlxuICAgIFwiQ2FuIG5vdCB1c2Uga2V5d29yZCAnYXdhaXQnIG91dHNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIixcbiAgQmFkR2V0dGVyQXJpdHk6IFwiZ2V0dGVyIG11c3Qgbm90IGhhdmUgYW55IGZvcm1hbCBwYXJhbWV0ZXJzXCIsXG4gIEJhZFNldHRlckFyaXR5OiBcInNldHRlciBtdXN0IGhhdmUgZXhhY3RseSBvbmUgZm9ybWFsIHBhcmFtZXRlclwiLFxuICBCYWRTZXR0ZXJSZXN0UGFyYW1ldGVyOlxuICAgIFwic2V0dGVyIGZ1bmN0aW9uIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgcmVzdCBwYXJhbWV0ZXJcIixcbiAgQ29uc3RydWN0b3JDbGFzc0ZpZWxkOiBcIkNsYXNzZXMgbWF5IG5vdCBoYXZlIGEgZmllbGQgbmFtZWQgJ2NvbnN0cnVjdG9yJ1wiLFxuICBDb25zdHJ1Y3RvckNsYXNzUHJpdmF0ZUZpZWxkOlxuICAgIFwiQ2xhc3NlcyBtYXkgbm90IGhhdmUgYSBwcml2YXRlIGZpZWxkIG5hbWVkICcjY29uc3RydWN0b3InXCIsXG4gIENvbnN0cnVjdG9ySXNBY2Nlc3NvcjogXCJDbGFzcyBjb25zdHJ1Y3RvciBtYXkgbm90IGJlIGFuIGFjY2Vzc29yXCIsXG4gIENvbnN0cnVjdG9ySXNBc3luYzogXCJDb25zdHJ1Y3RvciBjYW4ndCBiZSBhbiBhc3luYyBmdW5jdGlvblwiLFxuICBDb25zdHJ1Y3RvcklzR2VuZXJhdG9yOiBcIkNvbnN0cnVjdG9yIGNhbid0IGJlIGEgZ2VuZXJhdG9yXCIsXG4gIERlY2xhcmF0aW9uTWlzc2luZ0luaXRpYWxpemVyOiBcIiUwIHJlcXVpcmUgYW4gaW5pdGlhbGl6YXRpb24gdmFsdWVcIixcbiAgRGVjb3JhdG9yQmVmb3JlRXhwb3J0OlxuICAgIFwiRGVjb3JhdG9ycyBtdXN0IGJlIHBsYWNlZCAqYmVmb3JlKiB0aGUgJ2V4cG9ydCcga2V5d29yZC4gWW91IGNhbiBzZXQgdGhlICdkZWNvcmF0b3JzQmVmb3JlRXhwb3J0JyBvcHRpb24gdG8gZmFsc2UgdG8gdXNlIHRoZSAnZXhwb3J0IEBkZWNvcmF0b3IgY2xhc3Mge30nIHN5bnRheFwiLFxuICBEZWNvcmF0b3JDb25zdHJ1Y3RvcjpcbiAgICBcIkRlY29yYXRvcnMgY2FuJ3QgYmUgdXNlZCB3aXRoIGEgY29uc3RydWN0b3IuIERpZCB5b3UgbWVhbiAnQGRlYyBjbGFzcyB7IC4uLiB9Jz9cIixcbiAgRGVjb3JhdG9yRXhwb3J0Q2xhc3M6XG4gICAgXCJVc2luZyB0aGUgZXhwb3J0IGtleXdvcmQgYmV0d2VlbiBhIGRlY29yYXRvciBhbmQgYSBjbGFzcyBpcyBub3QgYWxsb3dlZC4gUGxlYXNlIHVzZSBgZXhwb3J0IEBkZWMgY2xhc3NgIGluc3RlYWQuXCIsXG4gIERlY29yYXRvclNlbWljb2xvbjogXCJEZWNvcmF0b3JzIG11c3Qgbm90IGJlIGZvbGxvd2VkIGJ5IGEgc2VtaWNvbG9uXCIsXG4gIERlbGV0ZVByaXZhdGVGaWVsZDogXCJEZWxldGluZyBhIHByaXZhdGUgZmllbGQgaXMgbm90IGFsbG93ZWRcIixcbiAgRGVzdHJ1Y3R1cmVOYW1lZEltcG9ydDpcbiAgICBcIkVTMjAxNSBuYW1lZCBpbXBvcnRzIGRvIG5vdCBkZXN0cnVjdHVyZS4gVXNlIGFub3RoZXIgc3RhdGVtZW50IGZvciBkZXN0cnVjdHVyaW5nIGFmdGVyIHRoZSBpbXBvcnQuXCIsXG4gIER1cGxpY2F0ZUNvbnN0cnVjdG9yOiBcIkR1cGxpY2F0ZSBjb25zdHJ1Y3RvciBpbiB0aGUgc2FtZSBjbGFzc1wiLFxuICBEdXBsaWNhdGVEZWZhdWx0RXhwb3J0OiBcIk9ubHkgb25lIGRlZmF1bHQgZXhwb3J0IGFsbG93ZWQgcGVyIG1vZHVsZS5cIixcbiAgRHVwbGljYXRlRXhwb3J0OlxuICAgIFwiYCUwYCBoYXMgYWxyZWFkeSBiZWVuIGV4cG9ydGVkLiBFeHBvcnRlZCBpZGVudGlmaWVycyBtdXN0IGJlIHVuaXF1ZS5cIixcbiAgRHVwbGljYXRlUHJvdG86IFwiUmVkZWZpbml0aW9uIG9mIF9fcHJvdG9fXyBwcm9wZXJ0eVwiLFxuICBEdXBsaWNhdGVSZWdFeHBGbGFnczogXCJEdXBsaWNhdGUgcmVndWxhciBleHByZXNzaW9uIGZsYWdcIixcbiAgRWxlbWVudEFmdGVyUmVzdDogXCJSZXN0IGVsZW1lbnQgbXVzdCBiZSBsYXN0IGVsZW1lbnRcIixcbiAgRXNjYXBlZENoYXJOb3RBbklkZW50aWZpZXI6IFwiSW52YWxpZCBVbmljb2RlIGVzY2FwZVwiLFxuICBFeHBvcnREZWZhdWx0RnJvbUFzSWRlbnRpZmllcjpcbiAgICBcIidmcm9tJyBpcyBub3QgYWxsb3dlZCBhcyBhbiBpZGVudGlmaWVyIGFmdGVyICdleHBvcnQgZGVmYXVsdCdcIixcbiAgRm9ySW5PZkxvb3BJbml0aWFsaXplcjpcbiAgICBcIiUwIGxvb3AgdmFyaWFibGUgZGVjbGFyYXRpb24gbWF5IG5vdCBoYXZlIGFuIGluaXRpYWxpemVyXCIsXG4gIEdlbmVyYXRvckluU2luZ2xlU3RhdGVtZW50Q29udGV4dDpcbiAgICBcIkdlbmVyYXRvcnMgY2FuIG9ubHkgYmUgZGVjbGFyZWQgYXQgdGhlIHRvcCBsZXZlbCBvciBpbnNpZGUgYSBibG9ja1wiLFxuICBJbGxlZ2FsQnJlYWtDb250aW51ZTogXCJVbnN5bnRhY3RpYyAlMFwiLFxuICBJbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlOlxuICAgIFwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiLFxuICBJbGxlZ2FsUmV0dXJuOiBcIidyZXR1cm4nIG91dHNpZGUgb2YgZnVuY3Rpb25cIixcbiAgSW1wb3J0Q2FsbEFyZ3VtZW50VHJhaWxpbmdDb21tYTpcbiAgICBcIlRyYWlsaW5nIGNvbW1hIGlzIGRpc2FsbG93ZWQgaW5zaWRlIGltcG9ydCguLi4pIGFyZ3VtZW50c1wiLFxuICBJbXBvcnRDYWxsQXJpdHk6IFwiaW1wb3J0KCkgcmVxdWlyZXMgZXhhY3RseSAlMFwiLFxuICBJbXBvcnRDYWxsTm90TmV3RXhwcmVzc2lvbjogXCJDYW5ub3QgdXNlIG5ldyB3aXRoIGltcG9ydCguLi4pXCIsXG4gIEltcG9ydENhbGxTcHJlYWRBcmd1bWVudDogXCIuLi4gaXMgbm90IGFsbG93ZWQgaW4gaW1wb3J0KClcIixcbiAgSW1wb3J0TWV0YU91dHNpZGVNb2R1bGU6IGBpbXBvcnQubWV0YSBtYXkgYXBwZWFyIG9ubHkgd2l0aCAnc291cmNlVHlwZTogXCJtb2R1bGVcIidgLFxuICBJbXBvcnRPdXRzaWRlTW9kdWxlOiBgJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBhcHBlYXIgb25seSB3aXRoICdzb3VyY2VUeXBlOiBcIm1vZHVsZVwiJ2AsXG4gIEludmFsaWRCaWdJbnRMaXRlcmFsOiBcIkludmFsaWQgQmlnSW50TGl0ZXJhbFwiLFxuICBJbnZhbGlkQ29kZVBvaW50OiBcIkNvZGUgcG9pbnQgb3V0IG9mIGJvdW5kc1wiLFxuICBJbnZhbGlkRGVjaW1hbDogXCJJbnZhbGlkIGRlY2ltYWxcIixcbiAgSW52YWxpZERpZ2l0OiBcIkV4cGVjdGVkIG51bWJlciBpbiByYWRpeCAlMFwiLFxuICBJbnZhbGlkRXNjYXBlU2VxdWVuY2U6IFwiQmFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VcIixcbiAgSW52YWxpZEVzY2FwZVNlcXVlbmNlVGVtcGxhdGU6IFwiSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgaW4gdGVtcGxhdGVcIixcbiAgSW52YWxpZEVzY2FwZWRSZXNlcnZlZFdvcmQ6IFwiRXNjYXBlIHNlcXVlbmNlIGluIGtleXdvcmQgJTBcIixcbiAgSW52YWxpZElkZW50aWZpZXI6IFwiSW52YWxpZCBpZGVudGlmaWVyICUwXCIsXG4gIEludmFsaWRMaHM6IFwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiAlMFwiLFxuICBJbnZhbGlkTGhzQmluZGluZzogXCJCaW5kaW5nIGludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gJTBcIixcbiAgSW52YWxpZE51bWJlcjogXCJJbnZhbGlkIG51bWJlclwiLFxuICBJbnZhbGlkT3JVbmV4cGVjdGVkVG9rZW46IFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJyUwJ1wiLFxuICBJbnZhbGlkUGFyZW50aGVzaXplZEFzc2lnbm1lbnQ6IFwiSW52YWxpZCBwYXJlbnRoZXNpemVkIGFzc2lnbm1lbnQgcGF0dGVyblwiLFxuICBJbnZhbGlkUHJpdmF0ZUZpZWxkUmVzb2x1dGlvbjogXCJQcml2YXRlIG5hbWUgIyUwIGlzIG5vdCBkZWZpbmVkXCIsXG4gIEludmFsaWRQcm9wZXJ0eUJpbmRpbmdQYXR0ZXJuOiBcIkJpbmRpbmcgbWVtYmVyIGV4cHJlc3Npb25cIixcbiAgSW52YWxpZFJlY29yZFByb3BlcnR5OlxuICAgIFwiT25seSBwcm9wZXJ0aWVzIGFuZCBzcHJlYWQgZWxlbWVudHMgYXJlIGFsbG93ZWQgaW4gcmVjb3JkIGRlZmluaXRpb25zXCIsXG4gIEludmFsaWRSZXN0QXNzaWdubWVudFBhdHRlcm46IFwiSW52YWxpZCByZXN0IG9wZXJhdG9yJ3MgYXJndW1lbnRcIixcbiAgTGFiZWxSZWRlY2xhcmF0aW9uOiBcIkxhYmVsICclMCcgaXMgYWxyZWFkeSBkZWNsYXJlZFwiLFxuICBMZXRJbkxleGljYWxCaW5kaW5nOlxuICAgIFwiJ2xldCcgaXMgbm90IGFsbG93ZWQgdG8gYmUgdXNlZCBhcyBhIG5hbWUgaW4gJ2xldCcgb3IgJ2NvbnN0JyBkZWNsYXJhdGlvbnMuXCIsXG4gIExpbmVUZXJtaW5hdG9yQmVmb3JlQXJyb3c6IFwiTm8gbGluZSBicmVhayBpcyBhbGxvd2VkIGJlZm9yZSAnPT4nXCIsXG4gIE1hbGZvcm1lZFJlZ0V4cEZsYWdzOiBcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uIGZsYWdcIixcbiAgTWlzc2luZ0NsYXNzTmFtZTogXCJBIGNsYXNzIG5hbWUgaXMgcmVxdWlyZWRcIixcbiAgTWlzc2luZ0VxSW5Bc3NpZ25tZW50OlxuICAgIFwiT25seSAnPScgb3BlcmF0b3IgY2FuIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgZGVmYXVsdCB2YWx1ZS5cIixcbiAgTWlzc2luZ1VuaWNvZGVFc2NhcGU6IFwiRXhwZWN0aW5nIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlIFxcXFx1WFhYWFwiLFxuICBNaXhpbmdDb2FsZXNjZVdpdGhMb2dpY2FsOlxuICAgIFwiTnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yKD8/KSByZXF1aXJlcyBwYXJlbnMgd2hlbiBtaXhpbmcgd2l0aCBsb2dpY2FsIG9wZXJhdG9yc1wiLFxuICBNb2R1bGVBdHRyaWJ1dGVEaWZmZXJlbnRGcm9tVHlwZTpcbiAgICBcIlRoZSBvbmx5IGFjY2VwdGVkIG1vZHVsZSBhdHRyaWJ1dGUgaXMgYHR5cGVgXCIsXG4gIE1vZHVsZUF0dHJpYnV0ZUludmFsaWRWYWx1ZTpcbiAgICBcIk9ubHkgc3RyaW5nIGxpdGVyYWxzIGFyZSBhbGxvd2VkIGFzIG1vZHVsZSBhdHRyaWJ1dGUgdmFsdWVzXCIsXG4gIE1vZHVsZUF0dHJpYnV0ZXNXaXRoRHVwbGljYXRlS2V5czpcbiAgICAnRHVwbGljYXRlIGtleSBcIiUwXCIgaXMgbm90IGFsbG93ZWQgaW4gbW9kdWxlIGF0dHJpYnV0ZXMnLFxuICBNb2R1bGVFeHBvcnRVbmRlZmluZWQ6IFwiRXhwb3J0ICclMCcgaXMgbm90IGRlZmluZWRcIixcbiAgTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoOiBcIk11bHRpcGxlIGRlZmF1bHQgY2xhdXNlc1wiLFxuICBOZXdsaW5lQWZ0ZXJUaHJvdzogXCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIixcbiAgTm9DYXRjaE9yRmluYWxseTogXCJNaXNzaW5nIGNhdGNoIG9yIGZpbmFsbHkgY2xhdXNlXCIsXG4gIE51bWJlcklkZW50aWZpZXI6IFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIixcbiAgTnVtZXJpY1NlcGFyYXRvckluRXNjYXBlU2VxdWVuY2U6XG4gICAgXCJOdW1lcmljIHNlcGFyYXRvcnMgYXJlIG5vdCBhbGxvd2VkIGluc2lkZSB1bmljb2RlIGVzY2FwZSBzZXF1ZW5jZXMgb3IgaGV4IGVzY2FwZSBzZXF1ZW5jZXNcIixcbiAgT2Jzb2xldGVBd2FpdFN0YXI6XG4gICAgXCJhd2FpdCogaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBhc3luYyBmdW5jdGlvbnMgcHJvcG9zYWwuIFVzZSBQcm9taXNlLmFsbCgpIGluc3RlYWQuXCIsXG4gIE9wdGlvbmFsQ2hhaW5pbmdOb05ldzpcbiAgICBcImNvbnN0cnVjdG9ycyBpbi9hZnRlciBhbiBPcHRpb25hbCBDaGFpbiBhcmUgbm90IGFsbG93ZWRcIixcbiAgT3B0aW9uYWxDaGFpbmluZ05vVGVtcGxhdGU6XG4gICAgXCJUYWdnZWQgVGVtcGxhdGUgTGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIG9wdGlvbmFsQ2hhaW5cIixcbiAgUGFyYW1EdXBlOiBcIkFyZ3VtZW50IG5hbWUgY2xhc2hcIixcbiAgUGF0dGVybkhhc0FjY2Vzc29yOiBcIk9iamVjdCBwYXR0ZXJuIGNhbid0IGNvbnRhaW4gZ2V0dGVyIG9yIHNldHRlclwiLFxuICBQYXR0ZXJuSGFzTWV0aG9kOiBcIk9iamVjdCBwYXR0ZXJuIGNhbid0IGNvbnRhaW4gbWV0aG9kc1wiLFxuICBQaXBlbGluZUJvZHlOb0Fycm93OlxuICAgICdVbmV4cGVjdGVkIGFycm93IFwiPT5cIiBhZnRlciBwaXBlbGluZSBib2R5OyBhcnJvdyBmdW5jdGlvbiBpbiBwaXBlbGluZSBib2R5IG11c3QgYmUgcGFyZW50aGVzaXplZCcsXG4gIFBpcGVsaW5lQm9keVNlcXVlbmNlRXhwcmVzc2lvbjpcbiAgICBcIlBpcGVsaW5lIGJvZHkgbWF5IG5vdCBiZSBhIGNvbW1hLXNlcGFyYXRlZCBzZXF1ZW5jZSBleHByZXNzaW9uXCIsXG4gIFBpcGVsaW5lSGVhZFNlcXVlbmNlRXhwcmVzc2lvbjpcbiAgICBcIlBpcGVsaW5lIGhlYWQgc2hvdWxkIG5vdCBiZSBhIGNvbW1hLXNlcGFyYXRlZCBzZXF1ZW5jZSBleHByZXNzaW9uXCIsXG4gIFBpcGVsaW5lVG9waWNVbnVzZWQ6XG4gICAgXCJQaXBlbGluZSBpcyBpbiB0b3BpYyBzdHlsZSBidXQgZG9lcyBub3QgdXNlIHRvcGljIHJlZmVyZW5jZVwiLFxuICBQcmltYXJ5VG9waWNOb3RBbGxvd2VkOlxuICAgIFwiVG9waWMgcmVmZXJlbmNlIHdhcyB1c2VkIGluIGEgbGV4aWNhbCBjb250ZXh0IHdpdGhvdXQgdG9waWMgYmluZGluZ1wiLFxuICBQcmltYXJ5VG9waWNSZXF1aXJlc1NtYXJ0UGlwZWxpbmU6XG4gICAgXCJQcmltYXJ5IFRvcGljIFJlZmVyZW5jZSBmb3VuZCBidXQgcGlwZWxpbmVPcGVyYXRvciBub3QgcGFzc2VkICdzbWFydCcgZm9yICdwcm9wb3NhbCcgb3B0aW9uLlwiLFxuICBQcml2YXRlSW5FeHBlY3RlZEluOlxuICAgIFwiUHJpdmF0ZSBuYW1lcyBhcmUgb25seSBhbGxvd2VkIGluIHByb3BlcnR5IGFjY2Vzc2VzIChgb2JqLiMlMGApIG9yIGluIGBpbmAgZXhwcmVzc2lvbnMgKGAjJTAgaW4gb2JqYClcIixcbiAgUHJpdmF0ZU5hbWVSZWRlY2xhcmF0aW9uOiBcIkR1cGxpY2F0ZSBwcml2YXRlIG5hbWUgIyUwXCIsXG4gIFJlY29yZEV4cHJlc3Npb25CYXJJbmNvcnJlY3RFbmRTeW50YXhUeXBlOlxuICAgIFwiUmVjb3JkIGV4cHJlc3Npb25zIGVuZGluZyB3aXRoICd8fScgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHRoZSAnc3ludGF4VHlwZScgb3B0aW9uIG9mIHRoZSAncmVjb3JkQW5kVHVwbGUnIHBsdWdpbiBpcyBzZXQgdG8gJ2JhcidcIixcbiAgUmVjb3JkRXhwcmVzc2lvbkJhckluY29ycmVjdFN0YXJ0U3ludGF4VHlwZTpcbiAgICBcIlJlY29yZCBleHByZXNzaW9ucyBzdGFydGluZyB3aXRoICd7fCcgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHRoZSAnc3ludGF4VHlwZScgb3B0aW9uIG9mIHRoZSAncmVjb3JkQW5kVHVwbGUnIHBsdWdpbiBpcyBzZXQgdG8gJ2JhcidcIixcbiAgUmVjb3JkRXhwcmVzc2lvbkhhc2hJbmNvcnJlY3RTdGFydFN5bnRheFR5cGU6XG4gICAgXCJSZWNvcmQgZXhwcmVzc2lvbnMgc3RhcnRpbmcgd2l0aCAnI3snIGFyZSBvbmx5IGFsbG93ZWQgd2hlbiB0aGUgJ3N5bnRheFR5cGUnIG9wdGlvbiBvZiB0aGUgJ3JlY29yZEFuZFR1cGxlJyBwbHVnaW4gaXMgc2V0IHRvICdoYXNoJ1wiLFxuICBSZWNvcmROb1Byb3RvOiBcIidfX3Byb3RvX18nIGlzIG5vdCBhbGxvd2VkIGluIFJlY29yZCBleHByZXNzaW9uc1wiLFxuICBSZXN0VHJhaWxpbmdDb21tYTogXCJVbmV4cGVjdGVkIHRyYWlsaW5nIGNvbW1hIGFmdGVyIHJlc3QgZWxlbWVudFwiLFxuICBTbG9wcHlGdW5jdGlvbjpcbiAgICBcIkluIG5vbi1zdHJpY3QgbW9kZSBjb2RlLCBmdW5jdGlvbnMgY2FuIG9ubHkgYmUgZGVjbGFyZWQgYXQgdG9wIGxldmVsLCBpbnNpZGUgYSBibG9jaywgb3IgYXMgdGhlIGJvZHkgb2YgYW4gaWYgc3RhdGVtZW50XCIsXG4gIFN0YXRpY1Byb3RvdHlwZTogXCJDbGFzc2VzIG1heSBub3QgaGF2ZSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgcHJvdG90eXBlXCIsXG4gIFN0cmljdERlbGV0ZTogXCJEZWxldGluZyBsb2NhbCB2YXJpYWJsZSBpbiBzdHJpY3QgbW9kZVwiLFxuICBTdHJpY3RFdmFsQXJndW1lbnRzOiBcIkFzc2lnbmluZyB0byAnJTAnIGluIHN0cmljdCBtb2RlXCIsXG4gIFN0cmljdEV2YWxBcmd1bWVudHNCaW5kaW5nOiBcIkJpbmRpbmcgJyUwJyBpbiBzdHJpY3QgbW9kZVwiLFxuICBTdHJpY3RGdW5jdGlvbjpcbiAgICBcIkluIHN0cmljdCBtb2RlIGNvZGUsIGZ1bmN0aW9ucyBjYW4gb25seSBiZSBkZWNsYXJlZCBhdCB0b3AgbGV2ZWwgb3IgaW5zaWRlIGEgYmxvY2tcIixcbiAgU3RyaWN0TnVtZXJpY0VzY2FwZTogXCJUaGUgb25seSB2YWxpZCBudW1lcmljIGVzY2FwZSBpbiBzdHJpY3QgbW9kZSBpcyAnXFxcXDAnXCIsXG4gIFN0cmljdE9jdGFsTGl0ZXJhbDogXCJMZWdhY3kgb2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlXCIsXG4gIFN0cmljdFdpdGg6IFwiJ3dpdGgnIGluIHN0cmljdCBtb2RlXCIsXG4gIFN1cGVyTm90QWxsb3dlZDpcbiAgICBcInN1cGVyKCkgaXMgb25seSB2YWxpZCBpbnNpZGUgYSBjbGFzcyBjb25zdHJ1Y3RvciBvZiBhIHN1YmNsYXNzLiBNYXliZSBhIHR5cG8gaW4gdGhlIG1ldGhvZCBuYW1lICgnY29uc3RydWN0b3InKSBvciBub3QgZXh0ZW5kaW5nIGFub3RoZXIgY2xhc3M/XCIsXG4gIFN1cGVyUHJpdmF0ZUZpZWxkOiBcIlByaXZhdGUgZmllbGRzIGNhbid0IGJlIGFjY2Vzc2VkIG9uIHN1cGVyXCIsXG4gIFRyYWlsaW5nRGVjb3JhdG9yOiBcIkRlY29yYXRvcnMgbXVzdCBiZSBhdHRhY2hlZCB0byBhIGNsYXNzIGVsZW1lbnRcIixcbiAgVHVwbGVFeHByZXNzaW9uQmFySW5jb3JyZWN0RW5kU3ludGF4VHlwZTpcbiAgICBcIlR1cGxlIGV4cHJlc3Npb25zIGVuZGluZyB3aXRoICd8XScgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHRoZSAnc3ludGF4VHlwZScgb3B0aW9uIG9mIHRoZSAncmVjb3JkQW5kVHVwbGUnIHBsdWdpbiBpcyBzZXQgdG8gJ2JhcidcIixcbiAgVHVwbGVFeHByZXNzaW9uQmFySW5jb3JyZWN0U3RhcnRTeW50YXhUeXBlOlxuICAgIFwiVHVwbGUgZXhwcmVzc2lvbnMgc3RhcnRpbmcgd2l0aCAnW3wnIGFyZSBvbmx5IGFsbG93ZWQgd2hlbiB0aGUgJ3N5bnRheFR5cGUnIG9wdGlvbiBvZiB0aGUgJ3JlY29yZEFuZFR1cGxlJyBwbHVnaW4gaXMgc2V0IHRvICdiYXInXCIsXG4gIFR1cGxlRXhwcmVzc2lvbkhhc2hJbmNvcnJlY3RTdGFydFN5bnRheFR5cGU6XG4gICAgXCJUdXBsZSBleHByZXNzaW9ucyBzdGFydGluZyB3aXRoICcjWycgYXJlIG9ubHkgYWxsb3dlZCB3aGVuIHRoZSAnc3ludGF4VHlwZScgb3B0aW9uIG9mIHRoZSAncmVjb3JkQW5kVHVwbGUnIHBsdWdpbiBpcyBzZXQgdG8gJ2hhc2gnXCIsXG4gIFVuZXhwZWN0ZWRBcmd1bWVudFBsYWNlaG9sZGVyOiBcIlVuZXhwZWN0ZWQgYXJndW1lbnQgcGxhY2Vob2xkZXJcIixcbiAgVW5leHBlY3RlZEF3YWl0QWZ0ZXJQaXBlbGluZUJvZHk6XG4gICAgJ1VuZXhwZWN0ZWQgXCJhd2FpdFwiIGFmdGVyIHBpcGVsaW5lIGJvZHk7IGF3YWl0IG11c3QgaGF2ZSBwYXJlbnRoZXNlcyBpbiBtaW5pbWFsIHByb3Bvc2FsJyxcbiAgVW5leHBlY3RlZERpZ2l0QWZ0ZXJIYXNoOiBcIlVuZXhwZWN0ZWQgZGlnaXQgYWZ0ZXIgaGFzaCB0b2tlblwiLFxuICBVbmV4cGVjdGVkSW1wb3J0RXhwb3J0OlxuICAgIFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsXCIsXG4gIFVuZXhwZWN0ZWRLZXl3b3JkOiBcIlVuZXhwZWN0ZWQga2V5d29yZCAnJTAnXCIsXG4gIFVuZXhwZWN0ZWRMZWFkaW5nRGVjb3JhdG9yOlxuICAgIFwiTGVhZGluZyBkZWNvcmF0b3JzIG11c3QgYmUgYXR0YWNoZWQgdG8gYSBjbGFzcyBkZWNsYXJhdGlvblwiLFxuICBVbmV4cGVjdGVkTGV4aWNhbERlY2xhcmF0aW9uOlxuICAgIFwiTGV4aWNhbCBkZWNsYXJhdGlvbiBjYW5ub3QgYXBwZWFyIGluIGEgc2luZ2xlLXN0YXRlbWVudCBjb250ZXh0XCIsXG4gIFVuZXhwZWN0ZWROZXdUYXJnZXQ6IFwibmV3LnRhcmdldCBjYW4gb25seSBiZSB1c2VkIGluIGZ1bmN0aW9uc1wiLFxuICBVbmV4cGVjdGVkTnVtZXJpY1NlcGFyYXRvcjpcbiAgICBcIkEgbnVtZXJpYyBzZXBhcmF0b3IgaXMgb25seSBhbGxvd2VkIGJldHdlZW4gdHdvIGRpZ2l0c1wiLFxuICBVbmV4cGVjdGVkUHJpdmF0ZUZpZWxkOlxuICAgIFwiUHJpdmF0ZSBuYW1lcyBjYW4gb25seSBiZSB1c2VkIGFzIHRoZSBuYW1lIG9mIGEgY2xhc3MgZWxlbWVudCAoaS5lLiBjbGFzcyBDIHsgI3AgPSA0MjsgI20oKSB7fSB9IClcXG4gb3IgYSBwcm9wZXJ0eSBvZiBtZW1iZXIgZXhwcmVzc2lvbiAoaS5lLiB0aGlzLiNwKS5cIixcbiAgVW5leHBlY3RlZFJlc2VydmVkV29yZDogXCJVbmV4cGVjdGVkIHJlc2VydmVkIHdvcmQgJyUwJ1wiLFxuICBVbmV4cGVjdGVkU3VwZXI6IFwic3VwZXIgaXMgb25seSBhbGxvd2VkIGluIG9iamVjdCBtZXRob2RzIGFuZCBjbGFzc2VzXCIsXG4gIFVuZXhwZWN0ZWRUb2tlbjogXCJVbmV4cGVjdGVkIHRva2VuICclMCdcIixcbiAgVW5leHBlY3RlZFRva2VuVW5hcnlFeHBvbmVudGlhdGlvbjpcbiAgICBcIklsbGVnYWwgZXhwcmVzc2lvbi4gV3JhcCBsZWZ0IGhhbmQgc2lkZSBvciBlbnRpcmUgZXhwb25lbnRpYXRpb24gaW4gcGFyZW50aGVzZXMuXCIsXG4gIFVuc3VwcG9ydGVkQmluZDogXCJCaW5kaW5nIHNob3VsZCBiZSBwZXJmb3JtZWQgb24gb2JqZWN0IHByb3BlcnR5LlwiLFxuICBVbnN1cHBvcnRlZERlY29yYXRvckV4cG9ydDpcbiAgICBcIkEgZGVjb3JhdGVkIGV4cG9ydCBtdXN0IGV4cG9ydCBhIGNsYXNzIGRlY2xhcmF0aW9uXCIsXG4gIFVuc3VwcG9ydGVkRGVmYXVsdEV4cG9ydDpcbiAgICBcIk9ubHkgZXhwcmVzc2lvbnMsIGZ1bmN0aW9ucyBvciBjbGFzc2VzIGFyZSBhbGxvd2VkIGFzIHRoZSBgZGVmYXVsdGAgZXhwb3J0LlwiLFxuICBVbnN1cHBvcnRlZEltcG9ydDogXCJpbXBvcnQgY2FuIG9ubHkgYmUgdXNlZCBpbiBpbXBvcnQoKSBvciBpbXBvcnQubWV0YVwiLFxuICBVbnN1cHBvcnRlZE1ldGFQcm9wZXJ0eTogXCJUaGUgb25seSB2YWxpZCBtZXRhIHByb3BlcnR5IGZvciAlMCBpcyAlMC4lMVwiLFxuICBVbnN1cHBvcnRlZFBhcmFtZXRlckRlY29yYXRvcjpcbiAgICBcIkRlY29yYXRvcnMgY2Fubm90IGJlIHVzZWQgdG8gZGVjb3JhdGUgcGFyYW1ldGVyc1wiLFxuICBVbnN1cHBvcnRlZFByb3BlcnR5RGVjb3JhdG9yOlxuICAgIFwiRGVjb3JhdG9ycyBjYW5ub3QgYmUgdXNlZCB0byBkZWNvcmF0ZSBvYmplY3QgbGl0ZXJhbCBwcm9wZXJ0aWVzXCIsXG4gIFVuc3VwcG9ydGVkU3VwZXI6XG4gICAgXCJzdXBlciBjYW4gb25seSBiZSB1c2VkIHdpdGggZnVuY3Rpb24gY2FsbHMgKGkuZS4gc3VwZXIoKSkgb3IgaW4gcHJvcGVydHkgYWNjZXNzZXMgKGkuZS4gc3VwZXIucHJvcCBvciBzdXBlcltwcm9wXSlcIixcbiAgVW50ZXJtaW5hdGVkQ29tbWVudDogXCJVbnRlcm1pbmF0ZWQgY29tbWVudFwiLFxuICBVbnRlcm1pbmF0ZWRSZWdFeHA6IFwiVW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiLFxuICBVbnRlcm1pbmF0ZWRTdHJpbmc6IFwiVW50ZXJtaW5hdGVkIHN0cmluZyBjb25zdGFudFwiLFxuICBVbnRlcm1pbmF0ZWRUZW1wbGF0ZTogXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGVcIixcbiAgVmFyUmVkZWNsYXJhdGlvbjogXCJJZGVudGlmaWVyICclMCcgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZFwiLFxuICBZaWVsZEJpbmRpbmdJZGVudGlmaWVyOlxuICAgIFwiQ2FuIG5vdCB1c2UgJ3lpZWxkJyBhcyBpZGVudGlmaWVyIGluc2lkZSBhIGdlbmVyYXRvclwiLFxuICBZaWVsZEluUGFyYW1ldGVyOiBcInlpZWxkIGlzIG5vdCBhbGxvd2VkIGluIGdlbmVyYXRvciBwYXJhbWV0ZXJzXCIsXG4gIFplcm9EaWdpdE51bWVyaWNTZXBhcmF0b3I6XG4gICAgXCJOdW1lcmljIHNlcGFyYXRvciBjYW4gbm90IGJlIHVzZWQgYWZ0ZXIgbGVhZGluZyAwXCIsXG59KTtcbiIsIi8vIEBmbG93XG4vKiBlc2xpbnQgc29ydC1rZXlzOiBcImVycm9yXCIgKi9cbmltcG9ydCB7IGdldExpbmVJbmZvLCB0eXBlIFBvc2l0aW9uIH0gZnJvbSBcIi4uL3V0aWwvbG9jYXRpb25cIjtcbmltcG9ydCBDb21tZW50c1BhcnNlciBmcm9tIFwiLi9jb21tZW50c1wiO1xuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmFpc2UgZXhjZXB0aW9ucyBvbiBwYXJzZSBlcnJvcnMuIEl0XG4vLyB0YWtlcyBhbiBvZmZzZXQgaW50ZWdlciAoaW50byB0aGUgY3VycmVudCBgaW5wdXRgKSB0byBpbmRpY2F0ZVxuLy8gdGhlIGxvY2F0aW9uIG9mIHRoZSBlcnJvciwgYXR0YWNoZXMgdGhlIHBvc2l0aW9uIHRvIHRoZSBlbmRcbi8vIG9mIHRoZSBlcnJvciBtZXNzYWdlLCBhbmQgdGhlbiByYWlzZXMgYSBgU3ludGF4RXJyb3JgIHdpdGggdGhhdFxuLy8gbWVzc2FnZS5cblxudHlwZSBFcnJvckNvbnRleHQgPSB7XG4gIHBvczogbnVtYmVyLFxuICBsb2M6IFBvc2l0aW9uLFxuICBtaXNzaW5nUGx1Z2luPzogQXJyYXk8c3RyaW5nPixcbiAgY29kZT86IHN0cmluZyxcbn07XG5cbmV4cG9ydCB7IEVycm9yTWVzc2FnZXMgYXMgRXJyb3JzIH0gZnJvbSBcIi4vZXJyb3ItbWVzc2FnZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJzZXJFcnJvciBleHRlbmRzIENvbW1lbnRzUGFyc2VyIHtcbiAgLy8gRm9yd2FyZC1kZWNsYXJhdGlvbjogZGVmaW5lZCBpbiB0b2tlbml6ZXIvaW5kZXguanNcbiAgLyo6OlxuICAraXNMb29rYWhlYWQ6IGJvb2xlYW47XG4gICovXG5cbiAgZ2V0TG9jYXRpb25Gb3JQb3NpdGlvbihwb3M6IG51bWJlcik6IFBvc2l0aW9uIHtcbiAgICBsZXQgbG9jO1xuICAgIGlmIChwb3MgPT09IHRoaXMuc3RhdGUuc3RhcnQpIGxvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgZWxzZSBpZiAocG9zID09PSB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCkgbG9jID0gdGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnRMb2M7XG4gICAgZWxzZSBpZiAocG9zID09PSB0aGlzLnN0YXRlLmVuZCkgbG9jID0gdGhpcy5zdGF0ZS5lbmRMb2M7XG4gICAgZWxzZSBpZiAocG9zID09PSB0aGlzLnN0YXRlLmxhc3RUb2tFbmQpIGxvYyA9IHRoaXMuc3RhdGUubGFzdFRva0VuZExvYztcbiAgICBlbHNlIGxvYyA9IGdldExpbmVJbmZvKHRoaXMuaW5wdXQsIHBvcyk7XG5cbiAgICByZXR1cm4gbG9jO1xuICB9XG5cbiAgcmFpc2UocG9zOiBudW1iZXIsIGVycm9yVGVtcGxhdGU6IHN0cmluZywgLi4ucGFyYW1zOiBhbnkpOiBFcnJvciB8IGVtcHR5IHtcbiAgICByZXR1cm4gdGhpcy5yYWlzZVdpdGhEYXRhKHBvcywgdW5kZWZpbmVkLCBlcnJvclRlbXBsYXRlLCAuLi5wYXJhbXMpO1xuICB9XG5cbiAgcmFpc2VXaXRoRGF0YShcbiAgICBwb3M6IG51bWJlcixcbiAgICBkYXRhPzoge1xuICAgICAgbWlzc2luZ1BsdWdpbj86IEFycmF5PHN0cmluZz4sXG4gICAgICBjb2RlPzogc3RyaW5nLFxuICAgIH0sXG4gICAgZXJyb3JUZW1wbGF0ZTogc3RyaW5nLFxuICAgIC4uLnBhcmFtczogYW55XG4gICk6IEVycm9yIHwgZW1wdHkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMuZ2V0TG9jYXRpb25Gb3JQb3NpdGlvbihwb3MpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgZXJyb3JUZW1wbGF0ZS5yZXBsYWNlKC8lKFxcZCspL2csIChfLCBpOiBudW1iZXIpID0+IHBhcmFtc1tpXSkgK1xuICAgICAgYCAoJHtsb2MubGluZX06JHtsb2MuY29sdW1ufSlgO1xuICAgIHJldHVybiB0aGlzLl9yYWlzZShPYmplY3QuYXNzaWduKCh7IGxvYywgcG9zIH06IE9iamVjdCksIGRhdGEpLCBtZXNzYWdlKTtcbiAgfVxuXG4gIF9yYWlzZShlcnJvckNvbnRleHQ6IEVycm9yQ29udGV4dCwgbWVzc2FnZTogc3RyaW5nKTogRXJyb3IgfCBlbXB0eSB7XG4gICAgLy8gJEZsb3dJZ25vcmVcbiAgICBjb25zdCBlcnI6IFN5bnRheEVycm9yICYgRXJyb3JDb250ZXh0ID0gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UpO1xuICAgIE9iamVjdC5hc3NpZ24oZXJyLCBlcnJvckNvbnRleHQpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZXJyb3JSZWNvdmVyeSkge1xuICAgICAgaWYgKCF0aGlzLmlzTG9va2FoZWFkKSB0aGlzLnN0YXRlLmVycm9ycy5wdXNoKGVycik7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB0eXBlcyBhcyB0dCwgVG9rZW5UeXBlIH0gZnJvbSBcIi4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0IHR5cGUgUGFyc2VyIGZyb20gXCIuLi9wYXJzZXJcIjtcbmltcG9ydCB0eXBlIHsgRXhwcmVzc2lvbkVycm9ycyB9IGZyb20gXCIuLi9wYXJzZXIvdXRpbFwiO1xuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUG9zaXRpb24gfSBmcm9tIFwiLi4vdXRpbC9sb2NhdGlvblwiO1xuaW1wb3J0IHsgdHlwZSBCaW5kaW5nVHlwZXMsIEJJTkRfTk9ORSB9IGZyb20gXCIuLi91dGlsL3Njb3BlZmxhZ3NcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi9wYXJzZXIvZXJyb3JcIjtcblxuZnVuY3Rpb24gaXNTaW1wbGVQcm9wZXJ0eShub2RlOiBOLk5vZGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBub2RlICE9IG51bGwgJiZcbiAgICBub2RlLnR5cGUgPT09IFwiUHJvcGVydHlcIiAmJlxuICAgIG5vZGUua2luZCA9PT0gXCJpbml0XCIgJiZcbiAgICBub2RlLm1ldGhvZCA9PT0gZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKHN1cGVyQ2xhc3M6IENsYXNzPFBhcnNlcj4pOiBDbGFzczxQYXJzZXI+ID0+XG4gIGNsYXNzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgZXN0cmVlUGFyc2VSZWdFeHBMaXRlcmFsKHsgcGF0dGVybiwgZmxhZ3MgfTogTi5SZWdFeHBMaXRlcmFsKTogTi5Ob2RlIHtcbiAgICAgIGxldCByZWdleCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJbiBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZXNlIGZsYWdzIHZhbHVlIHdpbGxcbiAgICAgICAgLy8gYmUgbnVsbCBhcyB0aGUgcmVnZXggY2FuJ3QgYmUgcmVwcmVzZW50ZWQgbmF0aXZlbHkuXG4gICAgICB9XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5lc3RyZWVQYXJzZUxpdGVyYWwocmVnZXgpO1xuICAgICAgbm9kZS5yZWdleCA9IHsgcGF0dGVybiwgZmxhZ3MgfTtcblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgZXN0cmVlUGFyc2VCaWdJbnRMaXRlcmFsKHZhbHVlOiBhbnkpOiBOLk5vZGUge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VzdHJlZS9lc3RyZWUvYmxvYi9tYXN0ZXIvZXMyMDIwLm1kI2JpZ2ludGxpdGVyYWxcbiAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICBjb25zdCBiaWdJbnQgPSB0eXBlb2YgQmlnSW50ICE9PSBcInVuZGVmaW5lZFwiID8gQmlnSW50KHZhbHVlKSA6IG51bGw7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5lc3RyZWVQYXJzZUxpdGVyYWwoYmlnSW50KTtcbiAgICAgIG5vZGUuYmlnaW50ID0gU3RyaW5nKG5vZGUudmFsdWUgfHwgdmFsdWUpO1xuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBlc3RyZWVQYXJzZURlY2ltYWxMaXRlcmFsKHZhbHVlOiBhbnkpOiBOLk5vZGUge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VzdHJlZS9lc3RyZWUvYmxvYi9tYXN0ZXIvZXhwZXJpbWVudGFsL2RlY2ltYWwubWRcbiAgICAgIC8vIHRvZG86IHVzZSBCaWdEZWNpbWFsIHdoZW4gbm9kZSBzdXBwb3J0cyBpdC5cbiAgICAgIGNvbnN0IGRlY2ltYWwgPSBudWxsO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZXN0cmVlUGFyc2VMaXRlcmFsKGRlY2ltYWwpO1xuICAgICAgbm9kZS5kZWNpbWFsID0gU3RyaW5nKG5vZGUudmFsdWUgfHwgdmFsdWUpO1xuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBlc3RyZWVQYXJzZUxpdGVyYWwodmFsdWU6IGFueSk6IE4uTm9kZSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwodmFsdWUsIFwiTGl0ZXJhbFwiKTtcbiAgICB9XG5cbiAgICBkaXJlY3RpdmVUb1N0bXQoZGlyZWN0aXZlOiBOLkRpcmVjdGl2ZSk6IE4uRXhwcmVzc2lvblN0YXRlbWVudCB7XG4gICAgICBjb25zdCBkaXJlY3RpdmVMaXRlcmFsID0gZGlyZWN0aXZlLnZhbHVlO1xuXG4gICAgICBjb25zdCBzdG10ID0gdGhpcy5zdGFydE5vZGVBdChkaXJlY3RpdmUuc3RhcnQsIGRpcmVjdGl2ZS5sb2Muc3RhcnQpO1xuICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHRoaXMuc3RhcnROb2RlQXQoXG4gICAgICAgIGRpcmVjdGl2ZUxpdGVyYWwuc3RhcnQsXG4gICAgICAgIGRpcmVjdGl2ZUxpdGVyYWwubG9jLnN0YXJ0LFxuICAgICAgKTtcblxuICAgICAgZXhwcmVzc2lvbi52YWx1ZSA9IGRpcmVjdGl2ZUxpdGVyYWwudmFsdWU7XG4gICAgICBleHByZXNzaW9uLnJhdyA9IGRpcmVjdGl2ZUxpdGVyYWwuZXh0cmEucmF3O1xuXG4gICAgICBzdG10LmV4cHJlc3Npb24gPSB0aGlzLmZpbmlzaE5vZGVBdChcbiAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgXCJMaXRlcmFsXCIsXG4gICAgICAgIGRpcmVjdGl2ZUxpdGVyYWwuZW5kLFxuICAgICAgICBkaXJlY3RpdmVMaXRlcmFsLmxvYy5lbmQsXG4gICAgICApO1xuICAgICAgc3RtdC5kaXJlY3RpdmUgPSBkaXJlY3RpdmVMaXRlcmFsLmV4dHJhLnJhdy5zbGljZSgxLCAtMSk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGVBdChcbiAgICAgICAgc3RtdCxcbiAgICAgICAgXCJFeHByZXNzaW9uU3RhdGVtZW50XCIsXG4gICAgICAgIGRpcmVjdGl2ZS5lbmQsXG4gICAgICAgIGRpcmVjdGl2ZS5sb2MuZW5kLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gT3ZlcnJpZGVzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgaW5pdEZ1bmN0aW9uKFxuICAgICAgbm9kZTogTi5Cb2RpbGVzc0Z1bmN0aW9uT3JNZXRob2RCYXNlLFxuICAgICAgaXNBc3luYzogP2Jvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICBzdXBlci5pbml0RnVuY3Rpb24obm9kZSwgaXNBc3luYyk7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjaGVja0RlY2xhcmF0aW9uKG5vZGU6IE4uUGF0dGVybiB8IE4uT2JqZWN0UHJvcGVydHkpOiB2b2lkIHtcbiAgICAgIGlmIChpc1NpbXBsZVByb3BlcnR5KG5vZGUpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tEZWNsYXJhdGlvbigoKG5vZGU6IGFueSk6IE4uRXN0cmVlUHJvcGVydHkpLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLmNoZWNrRGVjbGFyYXRpb24obm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tHZXR0ZXJTZXR0ZXJQYXJhbXMobWV0aG9kOiBOLk9iamVjdE1ldGhvZCB8IE4uQ2xhc3NNZXRob2QpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHByb3AgPSAoKG1ldGhvZDogYW55KTogTi5Fc3RyZWVQcm9wZXJ0eSB8IE4uRXN0cmVlTWV0aG9kRGVmaW5pdGlvbik7XG4gICAgICBjb25zdCBwYXJhbUNvdW50ID0gcHJvcC5raW5kID09PSBcImdldFwiID8gMCA6IDE7XG4gICAgICBjb25zdCBzdGFydCA9IHByb3Auc3RhcnQ7XG4gICAgICBpZiAocHJvcC52YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSBwYXJhbUNvdW50KSB7XG4gICAgICAgIGlmIChtZXRob2Qua2luZCA9PT0gXCJnZXRcIikge1xuICAgICAgICAgIHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5CYWRHZXR0ZXJBcml0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShzdGFydCwgRXJyb3JzLkJhZFNldHRlckFyaXR5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvcC5raW5kID09PSBcInNldFwiICYmXG4gICAgICAgIHByb3AudmFsdWUucGFyYW1zWzBdLnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5CYWRTZXR0ZXJSZXN0UGFyYW1ldGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja0xWYWwoXG4gICAgICBleHByOiBOLkV4cHJlc3Npb24sXG4gICAgICBiaW5kaW5nVHlwZTogQmluZGluZ1R5cGVzID0gQklORF9OT05FLFxuICAgICAgY2hlY2tDbGFzaGVzOiA/eyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0sXG4gICAgICBjb250ZXh0RGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgIGRpc2FsbG93TGV0QmluZGluZz86IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICAgICAgICBjYXNlIFwiT2JqZWN0UGF0dGVyblwiOlxuICAgICAgICAgIGV4cHIucHJvcGVydGllcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgICAgIHByb3AudHlwZSA9PT0gXCJQcm9wZXJ0eVwiID8gcHJvcC52YWx1ZSA6IHByb3AsXG4gICAgICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgICAgICBjaGVja0NsYXNoZXMsXG4gICAgICAgICAgICAgIFwib2JqZWN0IGRlc3RydWN0dXJpbmcgcGF0dGVyblwiLFxuICAgICAgICAgICAgICBkaXNhbGxvd0xldEJpbmRpbmcsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHN1cGVyLmNoZWNrTFZhbChcbiAgICAgICAgICAgIGV4cHIsXG4gICAgICAgICAgICBiaW5kaW5nVHlwZSxcbiAgICAgICAgICAgIGNoZWNrQ2xhc2hlcyxcbiAgICAgICAgICAgIGNvbnRleHREZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGRpc2FsbG93TGV0QmluZGluZyxcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrUHJvdG8oXG4gICAgICBwcm9wOiBOLk9iamVjdE1lbWJlciB8IE4uU3ByZWFkRWxlbWVudCxcbiAgICAgIGlzUmVjb3JkOiBib29sZWFuLFxuICAgICAgcHJvdG9SZWY6IHsgdXNlZDogYm9vbGVhbiB9LFxuICAgICAgcmVmRXhwcmVzc2lvbkVycm9yczogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyAkRmxvd0lnbm9yZTogY2hlY2sgcHJvcC5tZXRob2QgYW5kIGZhbGxiYWNrIHRvIHN1cGVyIG1ldGhvZFxuICAgICAgaWYgKHByb3AubWV0aG9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN1cGVyLmNoZWNrUHJvdG8ocHJvcCwgaXNSZWNvcmQsIHByb3RvUmVmLCByZWZFeHByZXNzaW9uRXJyb3JzKTtcbiAgICB9XG5cbiAgICBpc1ZhbGlkRGlyZWN0aXZlKHN0bXQ6IE4uU3RhdGVtZW50KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzdG10LnR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiICYmXG4gICAgICAgIHN0bXQuZXhwcmVzc2lvbi50eXBlID09PSBcIkxpdGVyYWxcIiAmJlxuICAgICAgICB0eXBlb2Ygc3RtdC5leHByZXNzaW9uLnZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICFzdG10LmV4cHJlc3Npb24uZXh0cmE/LnBhcmVudGhlc2l6ZWRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3RtdFRvRGlyZWN0aXZlKHN0bXQ6IE4uU3RhdGVtZW50KTogTi5EaXJlY3RpdmUge1xuICAgICAgY29uc3QgZGlyZWN0aXZlID0gc3VwZXIuc3RtdFRvRGlyZWN0aXZlKHN0bXQpO1xuICAgICAgY29uc3QgdmFsdWUgPSBzdG10LmV4cHJlc3Npb24udmFsdWU7XG5cbiAgICAgIC8vIFJlc2V0IHZhbHVlIHRvIHRoZSBhY3R1YWwgdmFsdWUgYXMgaW4gZXN0cmVlIG1vZGUgd2Ugd2FudFxuICAgICAgLy8gdGhlIHN0bXQgdG8gaGF2ZSB0aGUgcmVhbCB2YWx1ZSBhbmQgbm90IHRoZSByYXcgdmFsdWVcbiAgICAgIGRpcmVjdGl2ZS52YWx1ZS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH1cblxuICAgIHBhcnNlQmxvY2tCb2R5KFxuICAgICAgbm9kZTogTi5CbG9ja1N0YXRlbWVudExpa2UsXG4gICAgICBhbGxvd0RpcmVjdGl2ZXM6ID9ib29sZWFuLFxuICAgICAgdG9wTGV2ZWw6IGJvb2xlYW4sXG4gICAgICBlbmQ6IFRva2VuVHlwZSxcbiAgICApOiB2b2lkIHtcbiAgICAgIHN1cGVyLnBhcnNlQmxvY2tCb2R5KG5vZGUsIGFsbG93RGlyZWN0aXZlcywgdG9wTGV2ZWwsIGVuZCk7XG5cbiAgICAgIGNvbnN0IGRpcmVjdGl2ZVN0YXRlbWVudHMgPSBub2RlLmRpcmVjdGl2ZXMubWFwKGQgPT5cbiAgICAgICAgdGhpcy5kaXJlY3RpdmVUb1N0bXQoZCksXG4gICAgICApO1xuICAgICAgbm9kZS5ib2R5ID0gZGlyZWN0aXZlU3RhdGVtZW50cy5jb25jYXQobm9kZS5ib2R5KTtcbiAgICAgIC8vICRGbG93SWdub3JlIC0gZGlyZWN0aXZlcyBpc24ndCBvcHRpb25hbCBpbiB0aGUgdHlwZSBkZWZpbml0aW9uXG4gICAgICBkZWxldGUgbm9kZS5kaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIHB1c2hDbGFzc01ldGhvZChcbiAgICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgICBtZXRob2Q6IE4uQ2xhc3NNZXRob2QsXG4gICAgICBpc0dlbmVyYXRvcjogYm9vbGVhbixcbiAgICAgIGlzQXN5bmM6IGJvb2xlYW4sXG4gICAgICBpc0NvbnN0cnVjdG9yOiBib29sZWFuLFxuICAgICAgYWxsb3dzRGlyZWN0U3VwZXI6IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLnBhcnNlTWV0aG9kKFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIGlzR2VuZXJhdG9yLFxuICAgICAgICBpc0FzeW5jLFxuICAgICAgICBpc0NvbnN0cnVjdG9yLFxuICAgICAgICBhbGxvd3NEaXJlY3RTdXBlcixcbiAgICAgICAgXCJDbGFzc01ldGhvZFwiLFxuICAgICAgICB0cnVlLFxuICAgICAgKTtcbiAgICAgIGlmIChtZXRob2QudHlwZVBhcmFtZXRlcnMpIHtcbiAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgbWV0aG9kLnZhbHVlLnR5cGVQYXJhbWV0ZXJzID0gbWV0aG9kLnR5cGVQYXJhbWV0ZXJzO1xuICAgICAgICBkZWxldGUgbWV0aG9kLnR5cGVQYXJhbWV0ZXJzO1xuICAgICAgfVxuICAgICAgY2xhc3NCb2R5LmJvZHkucHVzaChtZXRob2QpO1xuICAgIH1cblxuICAgIHBhcnNlRXhwckF0b20ocmVmRXhwcmVzc2lvbkVycm9ycz86ID9FeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHQubnVtOlxuICAgICAgICBjYXNlIHR0LnN0cmluZzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5lc3RyZWVQYXJzZUxpdGVyYWwodGhpcy5zdGF0ZS52YWx1ZSk7XG5cbiAgICAgICAgY2FzZSB0dC5yZWdleHA6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXN0cmVlUGFyc2VSZWdFeHBMaXRlcmFsKHRoaXMuc3RhdGUudmFsdWUpO1xuXG4gICAgICAgIGNhc2UgdHQuYmlnaW50OlxuICAgICAgICAgIHJldHVybiB0aGlzLmVzdHJlZVBhcnNlQmlnSW50TGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlKTtcblxuICAgICAgICBjYXNlIHR0LmRlY2ltYWw6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXN0cmVlUGFyc2VEZWNpbWFsTGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlKTtcblxuICAgICAgICBjYXNlIHR0Ll9udWxsOlxuICAgICAgICAgIHJldHVybiB0aGlzLmVzdHJlZVBhcnNlTGl0ZXJhbChudWxsKTtcblxuICAgICAgICBjYXNlIHR0Ll90cnVlOlxuICAgICAgICAgIHJldHVybiB0aGlzLmVzdHJlZVBhcnNlTGl0ZXJhbCh0cnVlKTtcblxuICAgICAgICBjYXNlIHR0Ll9mYWxzZTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5lc3RyZWVQYXJzZUxpdGVyYWwoZmFsc2UpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRXhwckF0b20ocmVmRXhwcmVzc2lvbkVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VMaXRlcmFsPFQ6IE4uTGl0ZXJhbD4oXG4gICAgICB2YWx1ZTogYW55LFxuICAgICAgdHlwZTogLypUW1wia2luZFwiXSovIHN0cmluZyxcbiAgICAgIHN0YXJ0UG9zPzogbnVtYmVyLFxuICAgICAgc3RhcnRMb2M/OiBQb3NpdGlvbixcbiAgICApOiBUIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBzdXBlci5wYXJzZUxpdGVyYWwodmFsdWUsIHR5cGUsIHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLnJhdyA9IG5vZGUuZXh0cmEucmF3O1xuICAgICAgZGVsZXRlIG5vZGUuZXh0cmE7XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHBhcnNlRnVuY3Rpb25Cb2R5KFxuICAgICAgbm9kZTogTi5GdW5jdGlvbixcbiAgICAgIGFsbG93RXhwcmVzc2lvbjogP2Jvb2xlYW4sXG4gICAgICBpc01ldGhvZD86IGJvb2xlYW4gPSBmYWxzZSxcbiAgICApOiB2b2lkIHtcbiAgICAgIHN1cGVyLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIGFsbG93RXhwcmVzc2lvbiwgaXNNZXRob2QpO1xuICAgICAgbm9kZS5leHByZXNzaW9uID0gbm9kZS5ib2R5LnR5cGUgIT09IFwiQmxvY2tTdGF0ZW1lbnRcIjtcbiAgICB9XG5cbiAgICBwYXJzZU1ldGhvZDxUOiBOLk1ldGhvZExpa2U+KFxuICAgICAgbm9kZTogVCxcbiAgICAgIGlzR2VuZXJhdG9yOiBib29sZWFuLFxuICAgICAgaXNBc3luYzogYm9vbGVhbixcbiAgICAgIGlzQ29uc3RydWN0b3I6IGJvb2xlYW4sXG4gICAgICBhbGxvd0RpcmVjdFN1cGVyOiBib29sZWFuLFxuICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgaW5DbGFzc1Njb3BlOiBib29sZWFuID0gZmFsc2UsXG4gICAgKTogVCB7XG4gICAgICBsZXQgZnVuY05vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgZnVuY05vZGUua2luZCA9IG5vZGUua2luZDsgLy8gcHJvdmlkZSBraW5kLCBzbyBzdXBlciBtZXRob2QgY29ycmVjdGx5IHNldHMgc3RhdGVcbiAgICAgIGZ1bmNOb2RlID0gc3VwZXIucGFyc2VNZXRob2QoXG4gICAgICAgIGZ1bmNOb2RlLFxuICAgICAgICBpc0dlbmVyYXRvcixcbiAgICAgICAgaXNBc3luYyxcbiAgICAgICAgaXNDb25zdHJ1Y3RvcixcbiAgICAgICAgYWxsb3dEaXJlY3RTdXBlcixcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaW5DbGFzc1Njb3BlLFxuICAgICAgKTtcbiAgICAgIGZ1bmNOb2RlLnR5cGUgPSBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiO1xuICAgICAgZGVsZXRlIGZ1bmNOb2RlLmtpbmQ7XG4gICAgICAvLyAkRmxvd0lnbm9yZVxuICAgICAgbm9kZS52YWx1ZSA9IGZ1bmNOb2RlO1xuXG4gICAgICB0eXBlID0gdHlwZSA9PT0gXCJDbGFzc01ldGhvZFwiID8gXCJNZXRob2REZWZpbml0aW9uXCIgOiB0eXBlO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKTtcbiAgICB9XG5cbiAgICBwYXJzZU9iamVjdE1ldGhvZChcbiAgICAgIHByb3A6IE4uT2JqZWN0TWV0aG9kLFxuICAgICAgaXNHZW5lcmF0b3I6IGJvb2xlYW4sXG4gICAgICBpc0FzeW5jOiBib29sZWFuLFxuICAgICAgaXNQYXR0ZXJuOiBib29sZWFuLFxuICAgICAgaXNBY2Nlc3NvcjogYm9vbGVhbixcbiAgICApOiA/Ti5PYmplY3RNZXRob2Qge1xuICAgICAgY29uc3Qgbm9kZTogTi5Fc3RyZWVQcm9wZXJ0eSA9IChzdXBlci5wYXJzZU9iamVjdE1ldGhvZChcbiAgICAgICAgcHJvcCxcbiAgICAgICAgaXNHZW5lcmF0b3IsXG4gICAgICAgIGlzQXN5bmMsXG4gICAgICAgIGlzUGF0dGVybixcbiAgICAgICAgaXNBY2Nlc3NvcixcbiAgICAgICk6IGFueSk7XG5cbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIG5vZGUudHlwZSA9IFwiUHJvcGVydHlcIjtcbiAgICAgICAgaWYgKCgobm9kZTogYW55KTogTi5DbGFzc01ldGhvZCkua2luZCA9PT0gXCJtZXRob2RcIikgbm9kZS5raW5kID0gXCJpbml0XCI7XG4gICAgICAgIG5vZGUuc2hvcnRoYW5kID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAobm9kZTogYW55KTtcbiAgICB9XG5cbiAgICBwYXJzZU9iamVjdFByb3BlcnR5KFxuICAgICAgcHJvcDogTi5PYmplY3RQcm9wZXJ0eSxcbiAgICAgIHN0YXJ0UG9zOiA/bnVtYmVyLFxuICAgICAgc3RhcnRMb2M6ID9Qb3NpdGlvbixcbiAgICAgIGlzUGF0dGVybjogYm9vbGVhbixcbiAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnM6ID9FeHByZXNzaW9uRXJyb3JzLFxuICAgICk6ID9OLk9iamVjdFByb3BlcnR5IHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uRXN0cmVlUHJvcGVydHkgPSAoc3VwZXIucGFyc2VPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgcHJvcCxcbiAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICBpc1BhdHRlcm4sXG4gICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICApOiBhbnkpO1xuXG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBub2RlLmtpbmQgPSBcImluaXRcIjtcbiAgICAgICAgbm9kZS50eXBlID0gXCJQcm9wZXJ0eVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKG5vZGU6IGFueSk7XG4gICAgfVxuXG4gICAgdG9Bc3NpZ25hYmxlKG5vZGU6IE4uTm9kZSk6IE4uTm9kZSB7XG4gICAgICBpZiAoaXNTaW1wbGVQcm9wZXJ0eShub2RlKSkge1xuICAgICAgICB0aGlzLnRvQXNzaWduYWJsZShub2RlLnZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnRvQXNzaWduYWJsZShub2RlKTtcbiAgICB9XG5cbiAgICB0b0Fzc2lnbmFibGVPYmplY3RFeHByZXNzaW9uUHJvcChwcm9wOiBOLk5vZGUsIGlzTGFzdDogYm9vbGVhbikge1xuICAgICAgaWYgKHByb3Aua2luZCA9PT0gXCJnZXRcIiB8fCBwcm9wLmtpbmQgPT09IFwic2V0XCIpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5yYWlzZShwcm9wLmtleS5zdGFydCwgRXJyb3JzLlBhdHRlcm5IYXNBY2Nlc3Nvcik7XG4gICAgICB9IGVsc2UgaWYgKHByb3AubWV0aG9kKSB7XG4gICAgICAgIHRocm93IHRoaXMucmFpc2UocHJvcC5rZXkuc3RhcnQsIEVycm9ycy5QYXR0ZXJuSGFzTWV0aG9kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLnRvQXNzaWduYWJsZU9iamVjdEV4cHJlc3Npb25Qcm9wKHByb3AsIGlzTGFzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmluaXNoQ2FsbEV4cHJlc3Npb248VDogTi5DYWxsRXhwcmVzc2lvbiB8IE4uT3B0aW9uYWxDYWxsRXhwcmVzc2lvbj4oXG4gICAgICBub2RlOiBULFxuICAgICAgb3B0aW9uYWw6IGJvb2xlYW4sXG4gICAgKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIHN1cGVyLmZpbmlzaENhbGxFeHByZXNzaW9uKG5vZGUsIG9wdGlvbmFsKTtcblxuICAgICAgaWYgKG5vZGUuY2FsbGVlLnR5cGUgPT09IFwiSW1wb3J0XCIpIHtcbiAgICAgICAgKChub2RlOiBOLk5vZGUpOiBOLkVzdHJlZUltcG9ydEV4cHJlc3Npb24pLnR5cGUgPSBcIkltcG9ydEV4cHJlc3Npb25cIjtcbiAgICAgICAgKChub2RlOiBOLk5vZGUpOiBOLkVzdHJlZUltcG9ydEV4cHJlc3Npb24pLnNvdXJjZSA9IG5vZGUuYXJndW1lbnRzWzBdO1xuICAgICAgICAvLyAkRmxvd0lnbm9yZSAtIGFyZ3VtZW50cyBpc24ndCBvcHRpb25hbCBpbiB0aGUgdHlwZSBkZWZpbml0aW9uXG4gICAgICAgIGRlbGV0ZSBub2RlLmFyZ3VtZW50cztcbiAgICAgICAgLy8gJEZsb3dJZ25vcmUgLSBjYWxsZWUgaXNuJ3Qgb3B0aW9uYWwgaW4gdGhlIHR5cGUgZGVmaW5pdGlvblxuICAgICAgICBkZWxldGUgbm9kZS5jYWxsZWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHRvUmVmZXJlbmNlZExpc3REZWVwKFxuICAgICAgZXhwckxpc3Q6ICRSZWFkT25seUFycmF5PD9OLkV4cHJlc3Npb24+LFxuICAgICAgaXNQYXJlbnRoZXNpemVkRXhwcj86IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICAvLyBJbXBvcnRFeHByZXNzaW9ucyBkbyBub3QgaGF2ZSBhbiBhcmd1bWVudHMgYXJyYXkuXG4gICAgICBpZiAoIWV4cHJMaXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3VwZXIudG9SZWZlcmVuY2VkTGlzdERlZXAoZXhwckxpc3QsIGlzUGFyZW50aGVzaXplZEV4cHIpO1xuICAgIH1cblxuICAgIHBhcnNlRXhwb3J0KG5vZGU6IE4uTm9kZSkge1xuICAgICAgc3VwZXIucGFyc2VFeHBvcnQobm9kZSk7XG5cbiAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiOlxuICAgICAgICAgIG5vZGUuZXhwb3J0ZWQgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgbm9kZS5zcGVjaWZpZXJzWzBdLnR5cGUgPT09IFwiRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG5vZGUudHlwZSA9IFwiRXhwb3J0QWxsRGVjbGFyYXRpb25cIjtcbiAgICAgICAgICAgIG5vZGUuZXhwb3J0ZWQgPSBub2RlLnNwZWNpZmllcnNbMF0uZXhwb3J0ZWQ7XG4gICAgICAgICAgICBkZWxldGUgbm9kZS5zcGVjaWZpZXJzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBwYXJzZVN1YnNjcmlwdChcbiAgICAgIGJhc2U6IE4uRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgICBub0NhbGxzOiA/Ym9vbGVhbixcbiAgICAgIHN0YXRlOiBOLlBhcnNlU3Vic2NyaXB0U3RhdGUsXG4gICAgKSB7XG4gICAgICBjb25zdCBub2RlID0gc3VwZXIucGFyc2VTdWJzY3JpcHQoXG4gICAgICAgIGJhc2UsXG4gICAgICAgIHN0YXJ0UG9zLFxuICAgICAgICBzdGFydExvYyxcbiAgICAgICAgbm9DYWxscyxcbiAgICAgICAgc3RhdGUsXG4gICAgICApO1xuXG4gICAgICBpZiAoc3RhdGUub3B0aW9uYWxDaGFpbk1lbWJlcikge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXN0cmVlL2VzdHJlZS9ibG9iL21hc3Rlci9lczIwMjAubWQjY2hhaW5leHByZXNzaW9uXG4gICAgICAgIGlmIChcbiAgICAgICAgICBub2RlLnR5cGUgPT09IFwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uXCIgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09IFwiT3B0aW9uYWxDYWxsRXhwcmVzc2lvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUudHlwZSA9IG5vZGUudHlwZS5zdWJzdHJpbmcoOCk7IC8vIHN0cmlwIE9wdGlvbmFsIHByZWZpeFxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5zdG9wKSB7XG4gICAgICAgICAgY29uc3QgY2hhaW4gPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShub2RlKTtcbiAgICAgICAgICBjaGFpbi5leHByZXNzaW9uID0gbm9kZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKGNoYWluLCBcIkNoYWluRXhwcmVzc2lvblwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgbm9kZS50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIiB8fFxuICAgICAgICBub2RlLnR5cGUgPT09IFwiQ2FsbEV4cHJlc3Npb25cIlxuICAgICAgKSB7XG4gICAgICAgIG5vZGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9O1xuIiwiLy8gQGZsb3dcblxuLy8gVGhlIGFsZ29yaXRobSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcmVnZXhwIGNhbiBhcHBlYXIgYXQgYVxuLy8gZ2l2ZW4gcG9pbnQgaW4gdGhlIHByb2dyYW0gaXMgbG9vc2VseSBiYXNlZCBvbiBzd2VldC5qcycgYXBwcm9hY2guXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc3dlZXQuanMvd2lraS9kZXNpZ25cblxuaW1wb3J0IHsgdHlwZXMgYXMgdHQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgVG9rQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHRva2VuOiBzdHJpbmcsXG4gICAgaXNFeHByPzogYm9vbGVhbixcbiAgICBwcmVzZXJ2ZVNwYWNlPzogYm9vbGVhbixcbiAgICBvdmVycmlkZT86ID9GdW5jdGlvbiwgLy8gVGFrZXMgYSBUb2tlbml6ZXIgYXMgYSB0aGlzLXBhcmFtZXRlciwgYW5kIHJldHVybnMgdm9pZC5cbiAgKSB7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuaXNFeHByID0gISFpc0V4cHI7XG4gICAgdGhpcy5wcmVzZXJ2ZVNwYWNlID0gISFwcmVzZXJ2ZVNwYWNlO1xuICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgfVxuXG4gIHRva2VuOiBzdHJpbmc7XG4gIGlzRXhwcjogYm9vbGVhbjtcbiAgcHJlc2VydmVTcGFjZTogYm9vbGVhbjtcbiAgb3ZlcnJpZGU6ID9GdW5jdGlvbjtcbn1cblxuZXhwb3J0IGNvbnN0IHR5cGVzOiB7XG4gIFtrZXk6IHN0cmluZ106IFRva0NvbnRleHQsXG59ID0ge1xuICBicmFjZVN0YXRlbWVudDogbmV3IFRva0NvbnRleHQoXCJ7XCIsIGZhbHNlKSxcbiAgYnJhY2VFeHByZXNzaW9uOiBuZXcgVG9rQ29udGV4dChcIntcIiwgdHJ1ZSksXG4gIHJlY29yZEV4cHJlc3Npb246IG5ldyBUb2tDb250ZXh0KFwiI3tcIiwgdHJ1ZSksXG4gIHRlbXBsYXRlUXVhc2k6IG5ldyBUb2tDb250ZXh0KFwiJHtcIiwgZmFsc2UpLFxuICBwYXJlblN0YXRlbWVudDogbmV3IFRva0NvbnRleHQoXCIoXCIsIGZhbHNlKSxcbiAgcGFyZW5FeHByZXNzaW9uOiBuZXcgVG9rQ29udGV4dChcIihcIiwgdHJ1ZSksXG4gIHRlbXBsYXRlOiBuZXcgVG9rQ29udGV4dChcImBcIiwgdHJ1ZSwgdHJ1ZSwgcCA9PiBwLnJlYWRUbXBsVG9rZW4oKSksXG4gIGZ1bmN0aW9uRXhwcmVzc2lvbjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKSxcbiAgZnVuY3Rpb25TdGF0ZW1lbnQ6IG5ldyBUb2tDb250ZXh0KFwiZnVuY3Rpb25cIiwgZmFsc2UpLFxufTtcblxuLy8gVG9rZW4tc3BlY2lmaWMgY29udGV4dCB1cGRhdGUgY29kZVxuXG50dC5wYXJlblIudXBkYXRlQ29udGV4dCA9IHR0LmJyYWNlUi51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdGF0ZS5jb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBvdXQgPSB0aGlzLnN0YXRlLmNvbnRleHQucG9wKCk7XG4gIGlmIChvdXQgPT09IHR5cGVzLmJyYWNlU3RhdGVtZW50ICYmIHRoaXMuY3VyQ29udGV4dCgpLnRva2VuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvdXQgPSB0aGlzLnN0YXRlLmNvbnRleHQucG9wKCk7XG4gIH1cblxuICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID0gIW91dC5pc0V4cHI7XG59O1xuXG50dC5uYW1lLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAocHJldlR5cGUpIHtcbiAgbGV0IGFsbG93ZWQgPSBmYWxzZTtcbiAgaWYgKHByZXZUeXBlICE9PSB0dC5kb3QpIHtcbiAgICBpZiAoXG4gICAgICAodGhpcy5zdGF0ZS52YWx1ZSA9PT0gXCJvZlwiICYmXG4gICAgICAgICF0aGlzLnN0YXRlLmV4cHJBbGxvd2VkICYmXG4gICAgICAgIHByZXZUeXBlICE9PSB0dC5fZnVuY3Rpb24gJiZcbiAgICAgICAgcHJldlR5cGUgIT09IHR0Ll9jbGFzcykgfHxcbiAgICAgICh0aGlzLnN0YXRlLnZhbHVlID09PSBcInlpZWxkXCIgJiYgdGhpcy5wcm9kUGFyYW0uaGFzWWllbGQpXG4gICAgKSB7XG4gICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IGFsbG93ZWQ7XG5cbiAgaWYgKHRoaXMuc3RhdGUuaXNJdGVyYXRvcikge1xuICAgIHRoaXMuc3RhdGUuaXNJdGVyYXRvciA9IGZhbHNlO1xuICB9XG59O1xuXG50dC5icmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChwcmV2VHlwZSkge1xuICB0aGlzLnN0YXRlLmNvbnRleHQucHVzaChcbiAgICB0aGlzLmJyYWNlSXNCbG9jayhwcmV2VHlwZSkgPyB0eXBlcy5icmFjZVN0YXRlbWVudCA6IHR5cGVzLmJyYWNlRXhwcmVzc2lvbixcbiAgKTtcbiAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50dC5kb2xsYXJCcmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godHlwZXMudGVtcGxhdGVRdWFzaSk7XG4gIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSB0cnVlO1xufTtcblxudHQucGFyZW5MLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAocHJldlR5cGUpIHtcbiAgY29uc3Qgc3RhdGVtZW50UGFyZW5zID1cbiAgICBwcmV2VHlwZSA9PT0gdHQuX2lmIHx8XG4gICAgcHJldlR5cGUgPT09IHR0Ll9mb3IgfHxcbiAgICBwcmV2VHlwZSA9PT0gdHQuX3dpdGggfHxcbiAgICBwcmV2VHlwZSA9PT0gdHQuX3doaWxlO1xuICB0aGlzLnN0YXRlLmNvbnRleHQucHVzaChcbiAgICBzdGF0ZW1lbnRQYXJlbnMgPyB0eXBlcy5wYXJlblN0YXRlbWVudCA6IHR5cGVzLnBhcmVuRXhwcmVzc2lvbixcbiAgKTtcbiAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50dC5pbmNEZWMudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gdG9rRXhwckFsbG93ZWQgc3RheXMgdW5jaGFuZ2VkXG59O1xuXG50dC5fZnVuY3Rpb24udXBkYXRlQ29udGV4dCA9IHR0Ll9jbGFzcy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24gKHByZXZUeXBlKSB7XG4gIGlmIChcbiAgICBwcmV2VHlwZS5iZWZvcmVFeHByICYmXG4gICAgcHJldlR5cGUgIT09IHR0LnNlbWkgJiZcbiAgICBwcmV2VHlwZSAhPT0gdHQuX2Vsc2UgJiZcbiAgICAhKHByZXZUeXBlID09PSB0dC5fcmV0dXJuICYmIHRoaXMuaGFzUHJlY2VkaW5nTGluZUJyZWFrKCkpICYmXG4gICAgIShcbiAgICAgIChwcmV2VHlwZSA9PT0gdHQuY29sb24gfHwgcHJldlR5cGUgPT09IHR0LmJyYWNlTCkgJiZcbiAgICAgIHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcy5iX3N0YXRcbiAgICApXG4gICkge1xuICAgIHRoaXMuc3RhdGUuY29udGV4dC5wdXNoKHR5cGVzLmZ1bmN0aW9uRXhwcmVzc2lvbik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godHlwZXMuZnVuY3Rpb25TdGF0ZW1lbnQpO1xuICB9XG5cbiAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IGZhbHNlO1xufTtcblxudHQuYmFja1F1b3RlLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMudGVtcGxhdGUpIHtcbiAgICB0aGlzLnN0YXRlLmNvbnRleHQucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godHlwZXMudGVtcGxhdGUpO1xuICB9XG4gIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSBmYWxzZTtcbn07XG5cbi8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIGNvbnRleHQgZm9yIHR0LmJyYWNlQmFyTCBiZWNhdXNlIHdlIGRvIG5vdCBwb3AgY29udGV4dCBmb3IgdHQuYnJhY2VCYXJSXG50dC5icmFjZUhhc2hMLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc3RhdGUuY29udGV4dC5wdXNoKHR5cGVzLnJlY29yZEV4cHJlc3Npb24pO1xuICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID0gdHJ1ZTsgLyogdHQuYnJhY2VIYXNoTC5iZWZvcmVFeHByICovXG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0ICogYXMgY2hhckNvZGVzIGZyb20gXCJjaGFyY29kZXNcIjtcblxuLy8gIyMgQ2hhcmFjdGVyIGNhdGVnb3JpZXNcblxuLy8gQmlnIHVnbHkgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IG1hdGNoIGNoYXJhY3RlcnMgaW4gdGhlXG4vLyB3aGl0ZXNwYWNlLCBpZGVudGlmaWVyLCBhbmQgaWRlbnRpZmllci1zdGFydCBjYXRlZ29yaWVzLiBUaGVzZVxuLy8gYXJlIG9ubHkgYXBwbGllZCB3aGVuIGEgY2hhcmFjdGVyIGlzIGZvdW5kIHRvIGFjdHVhbGx5IGhhdmUgYVxuLy8gY29kZSBwb2ludCBiZXR3ZWVuIDB4ODAgYW5kIDB4ZmZmZi5cbi8vIEdlbmVyYXRlZCBieSBgc2NyaXB0cy9nZW5lcmF0ZS1pZGVudGlmaWVyLXJlZ2V4LmpzYC5cblxuLyogcHJldHRpZXItaWdub3JlICovXG5sZXQgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM3ZlxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTJmXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1ZDAtXFx1MDVlYVxcdTA1ZWYtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NmFcXHUwOGEwLVxcdTA4YjRcXHUwOGI2LVxcdTA4YzdcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTA5ZmNcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYWY5XFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzlcXHUwYzNkXFx1MGM1OC1cXHUwYzVhXFx1MGM2MFxcdTBjNjFcXHUwYzgwXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNC1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDU0LVxcdTBkNTZcXHUwZDVmLVxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg2LVxcdTBlOGFcXHUwZThjLVxcdTBlYTNcXHUwZWE1XFx1MGVhNy1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjVcXHUxM2Y4LVxcdTEzZmRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjhcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWVcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWIwLVxcdTE5YzlcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxYzgwLVxcdTFjODhcXHUxYzkwLVxcdTFjYmFcXHUxY2JkLVxcdTFjYmZcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjNcXHUxY2Y1XFx1MWNmNlxcdTFjZmFcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDliLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmZcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmZcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYmZcXHU0ZTAwLVxcdTlmZmNcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5ZFxcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTdiZlxcdWE3YzItXFx1YTdjYVxcdWE3ZjUtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOGZkXFx1YThmZVxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhOWUwLVxcdWE5ZTRcXHVhOWU2LVxcdWE5ZWZcXHVhOWZhLVxcdWE5ZmVcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3ZS1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYjMwLVxcdWFiNWFcXHVhYjVjLVxcdWFiNjlcXHVhYjcwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIjtcbi8qIHByZXR0aWVyLWlnbm9yZSAqL1xubGV0IG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzID0gXCJcXHUyMDBjXFx1MjAwZFxceGI3XFx1MDMwMC1cXHUwMzZmXFx1MDM4N1xcdTA0ODMtXFx1MDQ4N1xcdTA1OTEtXFx1MDViZFxcdTA1YmZcXHUwNWMxXFx1MDVjMlxcdTA1YzRcXHUwNWM1XFx1MDVjN1xcdTA2MTAtXFx1MDYxYVxcdTA2NGItXFx1MDY2OVxcdTA2NzBcXHUwNmQ2LVxcdTA2ZGNcXHUwNmRmLVxcdTA2ZTRcXHUwNmU3XFx1MDZlOFxcdTA2ZWEtXFx1MDZlZFxcdTA2ZjAtXFx1MDZmOVxcdTA3MTFcXHUwNzMwLVxcdTA3NGFcXHUwN2E2LVxcdTA3YjBcXHUwN2MwLVxcdTA3YzlcXHUwN2ViLVxcdTA3ZjNcXHUwN2ZkXFx1MDgxNi1cXHUwODE5XFx1MDgxYi1cXHUwODIzXFx1MDgyNS1cXHUwODI3XFx1MDgyOS1cXHUwODJkXFx1MDg1OS1cXHUwODViXFx1MDhkMy1cXHUwOGUxXFx1MDhlMy1cXHUwOTAzXFx1MDkzYS1cXHUwOTNjXFx1MDkzZS1cXHUwOTRmXFx1MDk1MS1cXHUwOTU3XFx1MDk2MlxcdTA5NjNcXHUwOTY2LVxcdTA5NmZcXHUwOTgxLVxcdTA5ODNcXHUwOWJjXFx1MDliZS1cXHUwOWM0XFx1MDljN1xcdTA5YzhcXHUwOWNiLVxcdTA5Y2RcXHUwOWQ3XFx1MDllMlxcdTA5ZTNcXHUwOWU2LVxcdTA5ZWZcXHUwOWZlXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMlxcdTBhZTNcXHUwYWU2LVxcdTBhZWZcXHUwYWZhLVxcdTBhZmZcXHUwYjAxLVxcdTBiMDNcXHUwYjNjXFx1MGIzZS1cXHUwYjQ0XFx1MGI0N1xcdTBiNDhcXHUwYjRiLVxcdTBiNGRcXHUwYjU1LVxcdTBiNTdcXHUwYjYyXFx1MGI2M1xcdTBiNjYtXFx1MGI2ZlxcdTBiODJcXHUwYmJlLVxcdTBiYzJcXHUwYmM2LVxcdTBiYzhcXHUwYmNhLVxcdTBiY2RcXHUwYmQ3XFx1MGJlNi1cXHUwYmVmXFx1MGMwMC1cXHUwYzA0XFx1MGMzZS1cXHUwYzQ0XFx1MGM0Ni1cXHUwYzQ4XFx1MGM0YS1cXHUwYzRkXFx1MGM1NVxcdTBjNTZcXHUwYzYyXFx1MGM2M1xcdTBjNjYtXFx1MGM2ZlxcdTBjODEtXFx1MGM4M1xcdTBjYmNcXHUwY2JlLVxcdTBjYzRcXHUwY2M2LVxcdTBjYzhcXHUwY2NhLVxcdTBjY2RcXHUwY2Q1XFx1MGNkNlxcdTBjZTJcXHUwY2UzXFx1MGNlNi1cXHUwY2VmXFx1MGQwMC1cXHUwZDAzXFx1MGQzYlxcdTBkM2NcXHUwZDNlLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGRcXHUwZDU3XFx1MGQ2MlxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgxLVxcdTBkODNcXHUwZGNhXFx1MGRjZi1cXHUwZGQ0XFx1MGRkNlxcdTBkZDgtXFx1MGRkZlxcdTBkZTYtXFx1MGRlZlxcdTBkZjJcXHUwZGYzXFx1MGUzMVxcdTBlMzQtXFx1MGUzYVxcdTBlNDctXFx1MGU0ZVxcdTBlNTAtXFx1MGU1OVxcdTBlYjFcXHUwZWI0LVxcdTBlYmNcXHUwZWM4LVxcdTBlY2RcXHUwZWQwLVxcdTBlZDlcXHUwZjE4XFx1MGYxOVxcdTBmMjAtXFx1MGYyOVxcdTBmMzVcXHUwZjM3XFx1MGYzOVxcdTBmM2VcXHUwZjNmXFx1MGY3MS1cXHUwZjg0XFx1MGY4NlxcdTBmODdcXHUwZjhkLVxcdTBmOTdcXHUwZjk5LVxcdTBmYmNcXHUwZmM2XFx1MTAyYi1cXHUxMDNlXFx1MTA0MC1cXHUxMDQ5XFx1MTA1Ni1cXHUxMDU5XFx1MTA1ZS1cXHUxMDYwXFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZkXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhkXFx1MTA4Zi1cXHUxMDlkXFx1MTM1ZC1cXHUxMzVmXFx1MTM2OS1cXHUxMzcxXFx1MTcxMi1cXHUxNzE0XFx1MTczMi1cXHUxNzM0XFx1MTc1MlxcdTE3NTNcXHUxNzcyXFx1MTc3M1xcdTE3YjQtXFx1MTdkM1xcdTE3ZGRcXHUxN2UwLVxcdTE3ZTlcXHUxODBiLVxcdTE4MGRcXHUxODEwLVxcdTE4MTlcXHUxOGE5XFx1MTkyMC1cXHUxOTJiXFx1MTkzMC1cXHUxOTNiXFx1MTk0Ni1cXHUxOTRmXFx1MTlkMC1cXHUxOWRhXFx1MWExNy1cXHUxYTFiXFx1MWE1NS1cXHUxYTVlXFx1MWE2MC1cXHUxYTdjXFx1MWE3Zi1cXHUxYTg5XFx1MWE5MC1cXHUxYTk5XFx1MWFiMC1cXHUxYWJkXFx1MWFiZlxcdTFhYzBcXHUxYjAwLVxcdTFiMDRcXHUxYjM0LVxcdTFiNDRcXHUxYjUwLVxcdTFiNTlcXHUxYjZiLVxcdTFiNzNcXHUxYjgwLVxcdTFiODJcXHUxYmExLVxcdTFiYWRcXHUxYmIwLVxcdTFiYjlcXHUxYmU2LVxcdTFiZjNcXHUxYzI0LVxcdTFjMzdcXHUxYzQwLVxcdTFjNDlcXHUxYzUwLVxcdTFjNTlcXHUxY2QwLVxcdTFjZDJcXHUxY2Q0LVxcdTFjZThcXHUxY2VkXFx1MWNmNFxcdTFjZjctXFx1MWNmOVxcdTFkYzAtXFx1MWRmOVxcdTFkZmItXFx1MWRmZlxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyY2VmLVxcdTJjZjFcXHUyZDdmXFx1MmRlMC1cXHUyZGZmXFx1MzAyYS1cXHUzMDJmXFx1MzA5OVxcdTMwOWFcXHVhNjIwLVxcdWE2MjlcXHVhNjZmXFx1YTY3NC1cXHVhNjdkXFx1YTY5ZVxcdWE2OWZcXHVhNmYwXFx1YTZmMVxcdWE4MDJcXHVhODA2XFx1YTgwYlxcdWE4MjMtXFx1YTgyN1xcdWE4MmNcXHVhODgwXFx1YTg4MVxcdWE4YjQtXFx1YThjNVxcdWE4ZDAtXFx1YThkOVxcdWE4ZTAtXFx1YThmMVxcdWE4ZmYtXFx1YTkwOVxcdWE5MjYtXFx1YTkyZFxcdWE5NDctXFx1YTk1M1xcdWE5ODAtXFx1YTk4M1xcdWE5YjMtXFx1YTljMFxcdWE5ZDAtXFx1YTlkOVxcdWE5ZTVcXHVhOWYwLVxcdWE5ZjlcXHVhYTI5LVxcdWFhMzZcXHVhYTQzXFx1YWE0Y1xcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiLVxcdWFhN2RcXHVhYWIwXFx1YWFiMi1cXHVhYWI0XFx1YWFiN1xcdWFhYjhcXHVhYWJlXFx1YWFiZlxcdWFhYzFcXHVhYWViLVxcdWFhZWZcXHVhYWY1XFx1YWFmNlxcdWFiZTMtXFx1YWJlYVxcdWFiZWNcXHVhYmVkXFx1YWJmMC1cXHVhYmY5XFx1ZmIxZVxcdWZlMDAtXFx1ZmUwZlxcdWZlMjAtXFx1ZmUyZlxcdWZlMzNcXHVmZTM0XFx1ZmU0ZC1cXHVmZTRmXFx1ZmYxMC1cXHVmZjE5XFx1ZmYzZlwiO1xuXG5jb25zdCBub25BU0NJSWlkZW50aWZpZXJTdGFydCA9IG5ldyBSZWdFeHAoXG4gIFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIFwiXVwiLFxuKTtcbmNvbnN0IG5vbkFTQ0lJaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoXG4gIFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIsXG4pO1xuXG5ub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBudWxsO1xuXG4vLyBUaGVzZSBhcmUgYSBydW4tbGVuZ3RoIGFuZCBvZmZzZXQtZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGVcbi8vID4weGZmZmYgY29kZSBwb2ludHMgdGhhdCBhcmUgYSB2YWxpZCBwYXJ0IG9mIGlkZW50aWZpZXJzLiBUaGVcbi8vIG9mZnNldCBzdGFydHMgYXQgMHgxMDAwMCwgYW5kIGVhY2ggcGFpciBvZiBudW1iZXJzIHJlcHJlc2VudHMgYW5cbi8vIG9mZnNldCB0byB0aGUgbmV4dCByYW5nZSwgYW5kIHRoZW4gYSBzaXplIG9mIHRoZSByYW5nZS4gVGhleSB3ZXJlXG4vLyBnZW5lcmF0ZWQgYnkgYHNjcmlwdHMvZ2VuZXJhdGUtaWRlbnRpZmllci1yZWdleC5qc2AuXG4vKiBwcmV0dGllci1pZ25vcmUgKi9cbi8qIHByZXR0aWVyLWlnbm9yZSAqL1xuY29uc3QgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMgPSBbMCwxMSwyLDI1LDIsMTgsMiwxLDIsMTQsMywxMywzNSwxMjIsNzAsNTIsMjY4LDI4LDQsNDgsNDgsMzEsMTQsMjksNiwzNywxMSwyOSwzLDM1LDUsNywyLDQsNDMsMTU3LDE5LDM1LDUsMzUsNSwzOSw5LDUxLDE1NywzMTAsMTAsMjEsMTEsNywxNTMsNSwzLDAsMiw0MywyLDEsNCwwLDMsMjIsMTEsMjIsMTAsMzAsNjYsMTgsMiwxLDExLDIxLDExLDI1LDcxLDU1LDcsMSw2NSwwLDE2LDMsMiwyLDIsMjgsNDMsMjgsNCwyOCwzNiw3LDIsMjcsMjgsNTMsMTEsMjEsMTEsMTgsMTQsMTcsMTExLDcyLDU2LDUwLDE0LDUwLDE0LDM1LDM0OSw0MSw3LDEsNzksMjgsMTEsMCw5LDIxLDEwNywyMCwyOCwyMiwxMyw1Miw3Niw0NCwzMywyNCwyNywzNSwzMCwwLDMsMCw5LDM0LDQsMCwxMyw0NywxNSwzLDIyLDAsMiwwLDM2LDE3LDIsMjQsODUsNiwyLDAsMiwzLDIsMTQsMiw5LDgsNDYsMzksNywzLDEsMywyMSwyLDYsMiwxLDIsNCw0LDAsMTksMCwxMyw0LDE1OSw1MiwxOSwzLDIxLDIsMzEsNDcsMjEsMSwyLDAsMTg1LDQ2LDQyLDMsMzcsNDcsMjEsMCw2MCw0MiwxNCwwLDcyLDI2LDIzMCw0MywxMTcsNjMsMzIsNywzLDAsMyw3LDIsMSwyLDIzLDE2LDAsMiwwLDk1LDcsMywzOCwxNywwLDIsMCwyOSwwLDExLDM5LDgsMCwyMiwwLDEyLDQ1LDIwLDAsMzUsNTYsMjY0LDgsMiwzNiwxOCwwLDUwLDI5LDExMyw2LDIsMSwyLDM3LDIyLDAsMjYsNSwyLDEsMiwzMSwxNSwwLDMyOCwxOCwxOTAsMCw4MCw5MjEsMTAzLDExMCwxOCwxOTUsMjc0OSwxMDcwLDQwNTAsNTgyLDg2MzQsNTY4LDgsMzAsMTE0LDI5LDE5LDQ3LDE3LDMsMzIsMjAsNiwxOCw2ODksNjMsMTI5LDc0LDYsMCw2NywxMiw2NSwxLDIsMCwyOSw2MTM1LDksMTIzNyw0Myw4LDg5NTIsMjg2LDUwLDIsMTgsMyw5LDM5NSwyMzA5LDEwNiw2LDEyLDQsOCw4LDksNTk5MSw4NCwyLDcwLDIsMSwzLDAsMywxLDMsMywyLDExLDIsMCwyLDYsMiw2NCwyLDMsMyw3LDIsNiwyLDI3LDIsMywyLDQsMiwwLDQsNiwyLDMzOSwzLDI0LDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsNywyMzU3LDQ0LDExLDYsMTcsMCwzNzAsNDMsMTMwMSwxOTYsNjAsNjcsOCwwLDEyMDUsMywyLDI2LDIsMSwyLDAsMywwLDIsOSwyLDMsMiwwLDIsMCw3LDAsNSwwLDIsMCwyLDAsMiwyLDIsMSwyLDAsMywwLDIsMCwyLDAsMiwwLDIsMCwyLDEsMiwwLDMsMywyLDYsMiwzLDIsMywyLDAsMiw5LDIsMTYsNiwyLDIsNCwyLDE2LDQ0MjEsNDI3MTcsMzUsNDE0OCwxMiwyMjEsMyw1NzYxLDE1LDc0NzIsMzEwNCw1NDEsMTUwNyw0OTM4XTtcbi8qIHByZXR0aWVyLWlnbm9yZSAqL1xuY29uc3QgYXN0cmFsSWRlbnRpZmllckNvZGVzID0gWzUwOSwwLDIyNywwLDE1MCw0LDI5NCw5LDEzNjgsMiwyLDEsNiwzLDQxLDIsNSwwLDE2NiwxLDU3NCwzLDksOSwzNzAsMSwxNTQsMTAsMTc2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw2LDEsNDUsMCwxMywyLDQ5LDEzLDksMywyLDExLDgzLDExLDcsMCwxNjEsMTEsNiw5LDcsMyw1NiwxLDIsNiwzLDEsMywyLDEwLDAsMTEsMSwzLDYsNCw0LDE5MywxNywxMCw5LDUsMCw4MiwxOSwxMyw5LDIxNCw2LDMsOCwyOCwxLDgzLDE2LDE2LDksODIsMTIsOSw5LDg0LDE0LDUsOSwyNDMsMTQsMTY2LDksNzEsNSwyLDEsMywzLDIsMCwyLDEsMTMsOSwxMjAsNiwzLDYsNCwwLDI5LDksNDEsNiwyLDMsOSwwLDEwLDEwLDQ3LDE1LDQwNiw3LDIsNywxNyw5LDU3LDIxLDIsMTMsMTIzLDUsNCwwLDIsMSwyLDYsMiwwLDksOSw0OSw0LDIsMSwyLDQsOSw5LDMzMCwzLDE5MzA2LDksMTM1LDQsNjAsNiwyNiw5LDEwMTQsMCwyLDU0LDgsMyw4MiwwLDEyLDEsMTk2MjgsMSw1MzE5LDQsNCw1LDksNywzLDYsMzEsMywxNDksMiwxNDE4LDQ5LDUxMyw1NCw1LDQ5LDksMCwxNSwwLDIzLDQsMiwxNCwxMzYxLDYsMiwxNiwzLDYsMiwxLDIsNCwyNjIsNiwxMCw5LDQxOSwxMywxNDk1LDYsMTEwLDYsNiw5LDQ3NTksOSw3ODc3MTksMjM5XTtcblxuLy8gVGhpcyBoYXMgYSBjb21wbGV4aXR5IGxpbmVhciB0byB0aGUgdmFsdWUgb2YgdGhlIGNvZGUuIFRoZVxuLy8gYXNzdW1wdGlvbiBpcyB0aGF0IGxvb2tpbmcgdXAgYXN0cmFsIGlkZW50aWZpZXIgY2hhcmFjdGVycyBpc1xuLy8gcmFyZS5cbmZ1bmN0aW9uIGlzSW5Bc3RyYWxTZXQoY29kZTogbnVtYmVyLCBzZXQ6ICRSZWFkT25seUFycmF5PG51bWJlcj4pOiBib29sZWFuIHtcbiAgbGV0IHBvcyA9IDB4MTAwMDA7XG4gIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzZXQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHtcbiAgICBwb3MgKz0gc2V0W2ldO1xuICAgIGlmIChwb3MgPiBjb2RlKSByZXR1cm4gZmFsc2U7XG5cbiAgICBwb3MgKz0gc2V0W2kgKyAxXTtcbiAgICBpZiAocG9zID49IGNvZGUpIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUgc3RhcnRzIGFuIGlkZW50aWZpZXIuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgaWYgKGNvZGUgPCBjaGFyQ29kZXMudXBwZXJjYXNlQSkgcmV0dXJuIGNvZGUgPT09IGNoYXJDb2Rlcy5kb2xsYXJTaWduO1xuICBpZiAoY29kZSA8PSBjaGFyQ29kZXMudXBwZXJjYXNlWikgcmV0dXJuIHRydWU7XG4gIGlmIChjb2RlIDwgY2hhckNvZGVzLmxvd2VyY2FzZUEpIHJldHVybiBjb2RlID09PSBjaGFyQ29kZXMudW5kZXJzY29yZTtcbiAgaWYgKGNvZGUgPD0gY2hhckNvZGVzLmxvd2VyY2FzZVopIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8PSAweGZmZmYpIHtcbiAgICByZXR1cm4gKFxuICAgICAgY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSlcbiAgICApO1xuICB9XG4gIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKTtcbn1cblxuLy8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIHBhcnQgb2YgYW4gaWRlbnRpZmllci5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWRlbnRpZmllckNoYXIoY29kZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGlmIChjb2RlIDwgY2hhckNvZGVzLmRpZ2l0MCkgcmV0dXJuIGNvZGUgPT09IGNoYXJDb2Rlcy5kb2xsYXJTaWduO1xuICBpZiAoY29kZSA8IGNoYXJDb2Rlcy5jb2xvbikgcmV0dXJuIHRydWU7XG4gIGlmIChjb2RlIDwgY2hhckNvZGVzLnVwcGVyY2FzZUEpIHJldHVybiBmYWxzZTtcbiAgaWYgKGNvZGUgPD0gY2hhckNvZGVzLnVwcGVyY2FzZVopIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA8IGNoYXJDb2Rlcy5sb3dlcmNhc2VBKSByZXR1cm4gY29kZSA9PT0gY2hhckNvZGVzLnVuZGVyc2NvcmU7XG4gIGlmIChjb2RlIDw9IGNoYXJDb2Rlcy5sb3dlcmNhc2VaKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGNvZGUgPD0gMHhmZmZmKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXIudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpIHx8XG4gICAgaXNJbkFzdHJhbFNldChjb2RlLCBhc3RyYWxJZGVudGlmaWVyQ29kZXMpXG4gICk7XG59XG5cbi8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIHN0cmluZyBpcyBhIHZhbGlkIGlkZW50aWZpZXIgbmFtZVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZGVudGlmaWVyTmFtZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgbGV0IGlzRmlyc3QgPSB0cnVlO1xuICBmb3IgKGNvbnN0IGNoYXIgb2YgQXJyYXkuZnJvbShuYW1lKSkge1xuICAgIGNvbnN0IGNwID0gY2hhci5jb2RlUG9pbnRBdCgwKTtcbiAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgaWYgKCFpc0lkZW50aWZpZXJTdGFydChjcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaXNGaXJzdCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzSWRlbnRpZmllckNoYXIoY3ApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiAhaXNGaXJzdDtcbn1cbiIsIi8vIEBmbG93XG5cbmNvbnN0IHJlc2VydmVkV29yZHMgPSB7XG4gIGtleXdvcmQ6IFtcbiAgICBcImJyZWFrXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJjYXRjaFwiLFxuICAgIFwiY29udGludWVcIixcbiAgICBcImRlYnVnZ2VyXCIsXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJkb1wiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZmluYWxseVwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwiaWZcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0aHJvd1wiLFxuICAgIFwidHJ5XCIsXG4gICAgXCJ2YXJcIixcbiAgICBcImNvbnN0XCIsXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwid2l0aFwiLFxuICAgIFwibmV3XCIsXG4gICAgXCJ0aGlzXCIsXG4gICAgXCJzdXBlclwiLFxuICAgIFwiY2xhc3NcIixcbiAgICBcImV4dGVuZHNcIixcbiAgICBcImV4cG9ydFwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwiaW5cIixcbiAgICBcImluc3RhbmNlb2ZcIixcbiAgICBcInR5cGVvZlwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwiZGVsZXRlXCIsXG4gIF0sXG4gIHN0cmljdDogW1xuICAgIFwiaW1wbGVtZW50c1wiLFxuICAgIFwiaW50ZXJmYWNlXCIsXG4gICAgXCJsZXRcIixcbiAgICBcInBhY2thZ2VcIixcbiAgICBcInByaXZhdGVcIixcbiAgICBcInByb3RlY3RlZFwiLFxuICAgIFwicHVibGljXCIsXG4gICAgXCJzdGF0aWNcIixcbiAgICBcInlpZWxkXCIsXG4gIF0sXG4gIHN0cmljdEJpbmQ6IFtcImV2YWxcIiwgXCJhcmd1bWVudHNcIl0sXG59O1xuY29uc3Qga2V5d29yZHMgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMua2V5d29yZCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0ID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLnN0cmljdCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldCA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gbm9uLXN0cmljdCBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcsIGluTW9kdWxlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIHJldHVybiAoaW5Nb2R1bGUgJiYgd29yZCA9PT0gXCJhd2FpdFwiKSB8fCB3b3JkID09PSBcImVudW1cIjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gbm9uLWJpbmRpbmcgc3RyaWN0IG1vZGVcbiAqXG4gKiBJbmNsdWRlcyBub24tc3RyaWN0IHJlc2VydmVkIHdvcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcsIGluTW9kdWxlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc1Jlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkgfHwgcmVzZXJ2ZWRXb3Jkc1N0cmljdFNldC5oYXMod29yZCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHdvcmQgaXMgYSByZXNlcnZlZCB3b3JkIGluIGJpbmRpbmcgc3RyaWN0IG1vZGUsIGJ1dCBpdCBpcyBhbGxvd2VkIGFzXG4gKiBhIG5vcm1hbCBpZGVudGlmaWVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0Lmhhcyh3b3JkKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gYmluZGluZyBzdHJpY3QgbW9kZVxuICpcbiAqIEluY2x1ZGVzIG5vbi1zdHJpY3QgcmVzZXJ2ZWQgd29yZHMgYW5kIG5vbi1iaW5kaW5nIHN0cmljdCByZXNlcnZlZCB3b3Jkc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkKFxuICB3b3JkOiBzdHJpbmcsXG4gIGluTW9kdWxlOiBib29sZWFuLFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHx8IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQod29yZClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5d29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGtleXdvcmRzLmhhcyh3b3JkKTtcbn1cbiIsIi8qIGVzbGludCBtYXgtbGVuOiAwICovXG5cbi8vIEBmbG93XG5cbmltcG9ydCAqIGFzIGNoYXJDb2RlcyBmcm9tIFwiY2hhcmNvZGVzXCI7XG5cbmV4cG9ydCB7XG4gIGlzSWRlbnRpZmllclN0YXJ0LFxuICBpc0lkZW50aWZpZXJDaGFyLFxuICBpc1Jlc2VydmVkV29yZCxcbiAgaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCxcbiAgaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkLFxuICBpc1N0cmljdFJlc2VydmVkV29yZCxcbiAgaXNLZXl3b3JkLFxufSBmcm9tIFwiQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiO1xuXG5leHBvcnQgY29uc3Qga2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvciA9IC9eaW4oc3RhbmNlb2YpPyQvO1xuXG4vLyBUZXN0IHdoZXRoZXIgYSBjdXJyZW50IHN0YXRlIGNoYXJhY3RlciBjb2RlIGFuZCBuZXh0IGNoYXJhY3RlciBjb2RlIGlzIEBcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmF0b3JTdGFydChjdXJyZW50OiBudW1iZXIsIG5leHQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gY3VycmVudCA9PT0gY2hhckNvZGVzLmF0U2lnbiAmJiBuZXh0ID09PSBjaGFyQ29kZXMuYXRTaWduO1xufVxuIiwiLy8gQGZsb3dcblxuLyo6OiBkZWNsYXJlIHZhciBpbnZhcmlhbnQ7ICovXG5cbi8vIEVycm9yIG1lc3NhZ2VzIGFyZSBjb2xvY2F0ZWQgd2l0aCB0aGUgcGx1Z2luLlxuLyogZXNsaW50LWRpc2FibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuXG5pbXBvcnQgdHlwZSBQYXJzZXIgZnJvbSBcIi4uL3BhcnNlclwiO1xuaW1wb3J0IHsgdHlwZXMgYXMgdHQsIHR5cGUgVG9rZW5UeXBlIH0gZnJvbSBcIi4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5pbXBvcnQgdHlwZSB7IFBvcywgUG9zaXRpb24gfSBmcm9tIFwiLi4vdXRpbC9sb2NhdGlvblwiO1xuaW1wb3J0IHR5cGUgU3RhdGUgZnJvbSBcIi4uL3Rva2VuaXplci9zdGF0ZVwiO1xuaW1wb3J0IHsgdHlwZXMgYXMgdGMgfSBmcm9tIFwiLi4vdG9rZW5pemVyL2NvbnRleHRcIjtcbmltcG9ydCAqIGFzIGNoYXJDb2RlcyBmcm9tIFwiY2hhcmNvZGVzXCI7XG5pbXBvcnQgeyBpc0l0ZXJhdG9yU3RhcnQgfSBmcm9tIFwiLi4vdXRpbC9pZGVudGlmaWVyXCI7XG5pbXBvcnQge1xuICB0eXBlIEJpbmRpbmdUeXBlcyxcbiAgQklORF9OT05FLFxuICBCSU5EX0xFWElDQUwsXG4gIEJJTkRfVkFSLFxuICBCSU5EX0ZVTkNUSU9OLFxuICBTQ09QRV9BUlJPVyxcbiAgU0NPUEVfRlVOQ1RJT04sXG4gIFNDT1BFX09USEVSLFxufSBmcm9tIFwiLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgdHlwZSB7IEV4cHJlc3Npb25FcnJvcnMgfSBmcm9tIFwiLi4vcGFyc2VyL3V0aWxcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi9wYXJzZXIvZXJyb3JcIjtcblxuY29uc3QgcmVzZXJ2ZWRUeXBlcyA9IG5ldyBTZXQoW1xuICBcIl9cIixcbiAgXCJhbnlcIixcbiAgXCJib29sXCIsXG4gIFwiYm9vbGVhblwiLFxuICBcImVtcHR5XCIsXG4gIFwiZXh0ZW5kc1wiLFxuICBcImZhbHNlXCIsXG4gIFwiaW50ZXJmYWNlXCIsXG4gIFwibWl4ZWRcIixcbiAgXCJudWxsXCIsXG4gIFwibnVtYmVyXCIsXG4gIFwic3RhdGljXCIsXG4gIFwic3RyaW5nXCIsXG4gIFwidHJ1ZVwiLFxuICBcInR5cGVvZlwiLFxuICBcInZvaWRcIixcbl0pO1xuXG4vKiBlc2xpbnQgc29ydC1rZXlzOiBcImVycm9yXCIgKi9cbi8vIFRoZSBFcnJvcnMga2V5IGZvbGxvd3MgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvYmxvYi9tYXN0ZXIvc3JjL3BhcnNlci9wYXJzZV9lcnJvci5tbCB1bmxlc3MgaXQgZG9lcyBub3QgZXhpc3RcbmNvbnN0IEZsb3dFcnJvcnMgPSBPYmplY3QuZnJlZXplKHtcbiAgQW1iaWd1b3VzQ29uZGl0aW9uYWxBcnJvdzpcbiAgICBcIkFtYmlndW91cyBleHByZXNzaW9uOiB3cmFwIHRoZSBhcnJvdyBmdW5jdGlvbnMgaW4gcGFyZW50aGVzZXMgdG8gZGlzYW1iaWd1YXRlLlwiLFxuICBBbWJpZ3VvdXNEZWNsYXJlTW9kdWxlS2luZDpcbiAgICBcIkZvdW5kIGJvdGggYGRlY2xhcmUgbW9kdWxlLmV4cG9ydHNgIGFuZCBgZGVjbGFyZSBleHBvcnRgIGluIHRoZSBzYW1lIG1vZHVsZS4gTW9kdWxlcyBjYW4gb25seSBoYXZlIDEgc2luY2UgdGhleSBhcmUgZWl0aGVyIGFuIEVTIG1vZHVsZSBvciB0aGV5IGFyZSBhIENvbW1vbkpTIG1vZHVsZVwiLFxuICBBc3NpZ25SZXNlcnZlZFR5cGU6IFwiQ2Fubm90IG92ZXJ3cml0ZSByZXNlcnZlZCB0eXBlICUwXCIsXG4gIERlY2xhcmVDbGFzc0VsZW1lbnQ6XG4gICAgXCJUaGUgYGRlY2xhcmVgIG1vZGlmaWVyIGNhbiBvbmx5IGFwcGVhciBvbiBjbGFzcyBmaWVsZHMuXCIsXG4gIERlY2xhcmVDbGFzc0ZpZWxkSW5pdGlhbGl6ZXI6XG4gICAgXCJJbml0aWFsaXplcnMgYXJlIG5vdCBhbGxvd2VkIGluIGZpZWxkcyB3aXRoIHRoZSBgZGVjbGFyZWAgbW9kaWZpZXIuXCIsXG4gIER1cGxpY2F0ZURlY2xhcmVNb2R1bGVFeHBvcnRzOiBcIkR1cGxpY2F0ZSBgZGVjbGFyZSBtb2R1bGUuZXhwb3J0c2Agc3RhdGVtZW50XCIsXG4gIEVudW1Cb29sZWFuTWVtYmVyTm90SW5pdGlhbGl6ZWQ6XG4gICAgXCJCb29sZWFuIGVudW0gbWVtYmVycyBuZWVkIHRvIGJlIGluaXRpYWxpemVkLiBVc2UgZWl0aGVyIGAlMCA9IHRydWUsYCBvciBgJTAgPSBmYWxzZSxgIGluIGVudW0gYCUxYC5cIixcbiAgRW51bUR1cGxpY2F0ZU1lbWJlck5hbWU6XG4gICAgXCJFbnVtIG1lbWJlciBuYW1lcyBuZWVkIHRvIGJlIHVuaXF1ZSwgYnV0IHRoZSBuYW1lIGAlMGAgaGFzIGFscmVhZHkgYmVlbiB1c2VkIGJlZm9yZSBpbiBlbnVtIGAlMWAuXCIsXG4gIEVudW1JbmNvbnNpc3RlbnRNZW1iZXJWYWx1ZXM6XG4gICAgXCJFbnVtIGAlMGAgaGFzIGluY29uc2lzdGVudCBtZW1iZXIgaW5pdGlhbGl6ZXJzLiBFaXRoZXIgdXNlIG5vIGluaXRpYWxpemVycywgb3IgY29uc2lzdGVudGx5IHVzZSBsaXRlcmFscyAoZWl0aGVyIGJvb2xlYW5zLCBudW1iZXJzLCBvciBzdHJpbmdzKSBmb3IgYWxsIG1lbWJlciBpbml0aWFsaXplcnMuXCIsXG4gIEVudW1JbnZhbGlkRXhwbGljaXRUeXBlOlxuICAgIFwiRW51bSB0eXBlIGAlMWAgaXMgbm90IHZhbGlkLiBVc2Ugb25lIG9mIGBib29sZWFuYCwgYG51bWJlcmAsIGBzdHJpbmdgLCBvciBgc3ltYm9sYCBpbiBlbnVtIGAlMGAuXCIsXG4gIEVudW1JbnZhbGlkRXhwbGljaXRUeXBlVW5rbm93blN1cHBsaWVkOlxuICAgIFwiU3VwcGxpZWQgZW51bSB0eXBlIGlzIG5vdCB2YWxpZC4gVXNlIG9uZSBvZiBgYm9vbGVhbmAsIGBudW1iZXJgLCBgc3RyaW5nYCwgb3IgYHN5bWJvbGAgaW4gZW51bSBgJTBgLlwiLFxuICBFbnVtSW52YWxpZE1lbWJlckluaXRpYWxpemVyUHJpbWFyeVR5cGU6XG4gICAgXCJFbnVtIGAlMGAgaGFzIHR5cGUgYCUyYCwgc28gdGhlIGluaXRpYWxpemVyIG9mIGAlMWAgbmVlZHMgdG8gYmUgYSAlMiBsaXRlcmFsLlwiLFxuICBFbnVtSW52YWxpZE1lbWJlckluaXRpYWxpemVyU3ltYm9sVHlwZTpcbiAgICBcIlN5bWJvbCBlbnVtIG1lbWJlcnMgY2Fubm90IGJlIGluaXRpYWxpemVkLiBVc2UgYCUxLGAgaW4gZW51bSBgJTBgLlwiLFxuICBFbnVtSW52YWxpZE1lbWJlckluaXRpYWxpemVyVW5rbm93blR5cGU6XG4gICAgXCJUaGUgZW51bSBtZW1iZXIgaW5pdGlhbGl6ZXIgZm9yIGAlMWAgbmVlZHMgdG8gYmUgYSBsaXRlcmFsIChlaXRoZXIgYSBib29sZWFuLCBudW1iZXIsIG9yIHN0cmluZykgaW4gZW51bSBgJTBgLlwiLFxuICBFbnVtSW52YWxpZE1lbWJlck5hbWU6XG4gICAgXCJFbnVtIG1lbWJlciBuYW1lcyBjYW5ub3Qgc3RhcnQgd2l0aCBsb3dlcmNhc2UgJ2EnIHRocm91Z2ggJ3onLiBJbnN0ZWFkIG9mIHVzaW5nIGAlMGAsIGNvbnNpZGVyIHVzaW5nIGAlMWAsIGluIGVudW0gYCUyYC5cIixcbiAgRW51bU51bWJlck1lbWJlck5vdEluaXRpYWxpemVkOlxuICAgIFwiTnVtYmVyIGVudW0gbWVtYmVycyBuZWVkIHRvIGJlIGluaXRpYWxpemVkLCBlLmcuIGAlMSA9IDFgIGluIGVudW0gYCUwYC5cIixcbiAgRW51bVN0cmluZ01lbWJlckluY29uc2lzdGVudGx5SW5pdGFpbGl6ZWQ6XG4gICAgXCJTdHJpbmcgZW51bSBtZW1iZXJzIG5lZWQgdG8gY29uc2lzdGVudGx5IGVpdGhlciBhbGwgdXNlIGluaXRpYWxpemVycywgb3IgdXNlIG5vIGluaXRpYWxpemVycywgaW4gZW51bSBgJTBgLlwiLFxuICBJbXBvcnRUeXBlU2hvcnRoYW5kT25seUluUHVyZUltcG9ydDpcbiAgICBcIlRoZSBgdHlwZWAgYW5kIGB0eXBlb2ZgIGtleXdvcmRzIG9uIG5hbWVkIGltcG9ydHMgY2FuIG9ubHkgYmUgdXNlZCBvbiByZWd1bGFyIGBpbXBvcnRgIHN0YXRlbWVudHMuIEl0IGNhbm5vdCBiZSB1c2VkIHdpdGggYGltcG9ydCB0eXBlYCBvciBgaW1wb3J0IHR5cGVvZmAgc3RhdGVtZW50c1wiLFxuICBJbmV4YWN0SW5zaWRlRXhhY3Q6XG4gICAgXCJFeHBsaWNpdCBpbmV4YWN0IHN5bnRheCBjYW5ub3QgYXBwZWFyIGluc2lkZSBhbiBleHBsaWNpdCBleGFjdCBvYmplY3QgdHlwZVwiLFxuICBJbmV4YWN0SW5zaWRlTm9uT2JqZWN0OlxuICAgIFwiRXhwbGljaXQgaW5leGFjdCBzeW50YXggY2Fubm90IGFwcGVhciBpbiBjbGFzcyBvciBpbnRlcmZhY2UgZGVmaW5pdGlvbnNcIixcbiAgSW5leGFjdFZhcmlhbmNlOiBcIkV4cGxpY2l0IGluZXhhY3Qgc3ludGF4IGNhbm5vdCBoYXZlIHZhcmlhbmNlXCIsXG4gIEludmFsaWROb25UeXBlSW1wb3J0SW5EZWNsYXJlTW9kdWxlOlxuICAgIFwiSW1wb3J0cyB3aXRoaW4gYSBgZGVjbGFyZSBtb2R1bGVgIGJvZHkgbXVzdCBhbHdheXMgYmUgYGltcG9ydCB0eXBlYCBvciBgaW1wb3J0IHR5cGVvZmBcIixcbiAgTWlzc2luZ1R5cGVQYXJhbURlZmF1bHQ6XG4gICAgXCJUeXBlIHBhcmFtZXRlciBkZWNsYXJhdGlvbiBuZWVkcyBhIGRlZmF1bHQsIHNpbmNlIGEgcHJlY2VkaW5nIHR5cGUgcGFyYW1ldGVyIGRlY2xhcmF0aW9uIGhhcyBhIGRlZmF1bHQuXCIsXG4gIE5lc3RlZERlY2xhcmVNb2R1bGU6XG4gICAgXCJgZGVjbGFyZSBtb2R1bGVgIGNhbm5vdCBiZSB1c2VkIGluc2lkZSBhbm90aGVyIGBkZWNsYXJlIG1vZHVsZWBcIixcbiAgTmVzdGVkRmxvd0NvbW1lbnQ6IFwiQ2Fubm90IGhhdmUgYSBmbG93IGNvbW1lbnQgaW5zaWRlIGFub3RoZXIgZmxvdyBjb21tZW50XCIsXG4gIE9wdGlvbmFsQmluZGluZ1BhdHRlcm46XG4gICAgXCJBIGJpbmRpbmcgcGF0dGVybiBwYXJhbWV0ZXIgY2Fubm90IGJlIG9wdGlvbmFsIGluIGFuIGltcGxlbWVudGF0aW9uIHNpZ25hdHVyZS5cIixcbiAgU3ByZWFkVmFyaWFuY2U6IFwiU3ByZWFkIHByb3BlcnRpZXMgY2Fubm90IGhhdmUgdmFyaWFuY2VcIixcbiAgVHlwZUJlZm9yZUluaXRpYWxpemVyOlxuICAgIFwiVHlwZSBhbm5vdGF0aW9ucyBtdXN0IGNvbWUgYmVmb3JlIGRlZmF1bHQgYXNzaWdubWVudHMsIGUuZy4gaW5zdGVhZCBvZiBgYWdlID0gMjU6IG51bWJlcmAgdXNlIGBhZ2U6IG51bWJlciA9IDI1YFwiLFxuICBUeXBlQ2FzdEluUGF0dGVybjpcbiAgICBcIlRoZSB0eXBlIGNhc3QgZXhwcmVzc2lvbiBpcyBleHBlY3RlZCB0byBiZSB3cmFwcGVkIHdpdGggcGFyZW50aGVzaXNcIixcbiAgVW5leHBlY3RlZEV4cGxpY2l0SW5leGFjdEluT2JqZWN0OlxuICAgIFwiRXhwbGljaXQgaW5leGFjdCBzeW50YXggbXVzdCBhcHBlYXIgYXQgdGhlIGVuZCBvZiBhbiBpbmV4YWN0IG9iamVjdFwiLFxuICBVbmV4cGVjdGVkUmVzZXJ2ZWRUeXBlOiBcIlVuZXhwZWN0ZWQgcmVzZXJ2ZWQgdHlwZSAlMFwiLFxuICBVbmV4cGVjdGVkUmVzZXJ2ZWRVbmRlcnNjb3JlOlxuICAgIFwiYF9gIGlzIG9ubHkgYWxsb3dlZCBhcyBhIHR5cGUgYXJndW1lbnQgdG8gY2FsbCBvciBuZXdcIixcbiAgVW5leHBlY3RlZFNwYWNlQmV0d2Vlbk1vZHVsb0NoZWNrczpcbiAgICBcIlNwYWNlcyBiZXR3ZWVuIGAlYCBhbmQgYGNoZWNrc2AgYXJlIG5vdCBhbGxvd2VkIGhlcmUuXCIsXG4gIFVuZXhwZWN0ZWRTcHJlYWRUeXBlOlxuICAgIFwiU3ByZWFkIG9wZXJhdG9yIGNhbm5vdCBhcHBlYXIgaW4gY2xhc3Mgb3IgaW50ZXJmYWNlIGRlZmluaXRpb25zXCIsXG4gIFVuZXhwZWN0ZWRTdWJ0cmFjdGlvbk9wZXJhbmQ6XG4gICAgJ1VuZXhwZWN0ZWQgdG9rZW4sIGV4cGVjdGVkIFwibnVtYmVyXCIgb3IgXCJiaWdpbnRcIicsXG4gIFVuZXhwZWN0ZWRUb2tlbkFmdGVyVHlwZVBhcmFtZXRlcjpcbiAgICBcIkV4cGVjdGVkIGFuIGFycm93IGZ1bmN0aW9uIGFmdGVyIHRoaXMgdHlwZSBwYXJhbWV0ZXIgZGVjbGFyYXRpb25cIixcbiAgVW5leHBlY3RlZFR5cGVQYXJhbWV0ZXJCZWZvcmVBc3luY0Fycm93RnVuY3Rpb246XG4gICAgXCJUeXBlIHBhcmFtZXRlcnMgbXVzdCBjb21lIGFmdGVyIHRoZSBhc3luYyBrZXl3b3JkLCBlLmcuIGluc3RlYWQgb2YgYDxUPiBhc3luYyAoKSA9PiB7fWAsIHVzZSBgYXN5bmMgPFQ+KCkgPT4ge31gXCIsXG4gIFVuc3VwcG9ydGVkRGVjbGFyZUV4cG9ydEtpbmQ6XG4gICAgXCJgZGVjbGFyZSBleHBvcnQgJTBgIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBgJTFgIGluc3RlYWRcIixcbiAgVW5zdXBwb3J0ZWRTdGF0ZW1lbnRJbkRlY2xhcmVNb2R1bGU6XG4gICAgXCJPbmx5IGRlY2xhcmVzIGFuZCB0eXBlIGltcG9ydHMgYXJlIGFsbG93ZWQgaW5zaWRlIGRlY2xhcmUgbW9kdWxlXCIsXG4gIFVudGVybWluYXRlZEZsb3dDb21tZW50OiBcIlVudGVybWluYXRlZCBmbG93LWNvbW1lbnRcIixcbn0pO1xuLyogZXNsaW50LWRpc2FibGUgc29ydC1rZXlzICovXG5cbmZ1bmN0aW9uIGlzRXNNb2R1bGVUeXBlKGJvZHlFbGVtZW50OiBOLk5vZGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBib2R5RWxlbWVudC50eXBlID09PSBcIkRlY2xhcmVFeHBvcnRBbGxEZWNsYXJhdGlvblwiIHx8XG4gICAgKGJvZHlFbGVtZW50LnR5cGUgPT09IFwiRGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uXCIgJiZcbiAgICAgICghYm9keUVsZW1lbnQuZGVjbGFyYXRpb24gfHxcbiAgICAgICAgKGJvZHlFbGVtZW50LmRlY2xhcmF0aW9uLnR5cGUgIT09IFwiVHlwZUFsaWFzXCIgJiZcbiAgICAgICAgICBib2R5RWxlbWVudC5kZWNsYXJhdGlvbi50eXBlICE9PSBcIkludGVyZmFjZURlY2xhcmF0aW9uXCIpKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaGFzVHlwZUltcG9ydEtpbmQobm9kZTogTi5Ob2RlKTogYm9vbGVhbiB7XG4gIHJldHVybiBub2RlLmltcG9ydEtpbmQgPT09IFwidHlwZVwiIHx8IG5vZGUuaW1wb3J0S2luZCA9PT0gXCJ0eXBlb2ZcIjtcbn1cblxuZnVuY3Rpb24gaXNNYXliZURlZmF1bHRJbXBvcnQoc3RhdGU6IFN0YXRlKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgKHN0YXRlLnR5cGUgPT09IHR0Lm5hbWUgfHwgISFzdGF0ZS50eXBlLmtleXdvcmQpICYmIHN0YXRlLnZhbHVlICE9PSBcImZyb21cIlxuICApO1xufVxuXG5jb25zdCBleHBvcnRTdWdnZXN0aW9ucyA9IHtcbiAgY29uc3Q6IFwiZGVjbGFyZSBleHBvcnQgdmFyXCIsXG4gIGxldDogXCJkZWNsYXJlIGV4cG9ydCB2YXJcIixcbiAgdHlwZTogXCJleHBvcnQgdHlwZVwiLFxuICBpbnRlcmZhY2U6IFwiZXhwb3J0IGludGVyZmFjZVwiLFxufTtcblxuLy8gTGlrZSBBcnJheSNmaWx0ZXIsIGJ1dCByZXR1cm5zIGEgdHVwbGUgWyBhY2NlcHRlZEVsZW1lbnRzLCBkaXNjYXJkZWRFbGVtZW50cyBdXG5mdW5jdGlvbiBwYXJ0aXRpb248VD4oXG4gIGxpc3Q6IFRbXSxcbiAgdGVzdDogKFQsIG51bWJlciwgVFtdKSA9PiA/Ym9vbGVhbixcbik6IFtUW10sIFRbXV0ge1xuICBjb25zdCBsaXN0MSA9IFtdO1xuICBjb25zdCBsaXN0MiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAodGVzdChsaXN0W2ldLCBpLCBsaXN0KSA/IGxpc3QxIDogbGlzdDIpLnB1c2gobGlzdFtpXSk7XG4gIH1cbiAgcmV0dXJuIFtsaXN0MSwgbGlzdDJdO1xufVxuXG5jb25zdCBGTE9XX1BSQUdNQV9SRUdFWCA9IC9cXCo/XFxzKkAoKD86bm8pP2Zsb3cpXFxiLztcblxuLy8gRmxvdyBlbnVtcyB0eXBlc1xudHlwZSBFbnVtRXhwbGljaXRUeXBlID0gbnVsbCB8IFwiYm9vbGVhblwiIHwgXCJudW1iZXJcIiB8IFwic3RyaW5nXCIgfCBcInN5bWJvbFwiO1xudHlwZSBFbnVtQ29udGV4dCA9IHt8XG4gIGVudW1OYW1lOiBzdHJpbmcsXG4gIGV4cGxpY2l0VHlwZTogRW51bUV4cGxpY2l0VHlwZSxcbiAgbWVtYmVyTmFtZTogc3RyaW5nLFxufH07XG50eXBlIEVudW1NZW1iZXJJbml0ID1cbiAgfCB7fCB0eXBlOiBcIm51bWJlclwiLCBwb3M6IG51bWJlciwgdmFsdWU6IE4uTm9kZSB8fVxuICB8IHt8IHR5cGU6IFwic3RyaW5nXCIsIHBvczogbnVtYmVyLCB2YWx1ZTogTi5Ob2RlIHx9XG4gIHwge3wgdHlwZTogXCJib29sZWFuXCIsIHBvczogbnVtYmVyLCB2YWx1ZTogTi5Ob2RlIHx9XG4gIHwge3wgdHlwZTogXCJpbnZhbGlkXCIsIHBvczogbnVtYmVyIHx9XG4gIHwge3wgdHlwZTogXCJub25lXCIsIHBvczogbnVtYmVyIHx9O1xuXG5leHBvcnQgZGVmYXVsdCAoc3VwZXJDbGFzczogQ2xhc3M8UGFyc2VyPik6IENsYXNzPFBhcnNlcj4gPT5cbiAgY2xhc3MgZXh0ZW5kcyBzdXBlckNsYXNzIHtcbiAgICAvLyBUaGUgdmFsdWUgb2YgdGhlIEBmbG93L0Bub2Zsb3cgcHJhZ21hLiBJbml0aWFsbHkgdW5kZWZpbmVkLCB0cmFuc2l0aW9uc1xuICAgIC8vIHRvIFwiQGZsb3dcIiBvciBcIkBub2Zsb3dcIiBpZiB3ZSBzZWUgYSBwcmFnbWEuIFRyYW5zaXRpb25zIHRvIG51bGwgaWYgd2UgYXJlXG4gICAgLy8gcGFzdCB0aGUgaW5pdGlhbCBjb21tZW50LlxuICAgIGZsb3dQcmFnbWE6IHZvaWQgfCBudWxsIHwgXCJmbG93XCIgfCBcIm5vZmxvd1wiO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogP09wdGlvbnMsIGlucHV0OiBzdHJpbmcpIHtcbiAgICAgIHN1cGVyKG9wdGlvbnMsIGlucHV0KTtcbiAgICAgIHRoaXMuZmxvd1ByYWdtYSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzaG91bGRQYXJzZVR5cGVzKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwiZmxvd1wiLCBcImFsbFwiKSB8fCB0aGlzLmZsb3dQcmFnbWEgPT09IFwiZmxvd1wiO1xuICAgIH1cblxuICAgIHNob3VsZFBhcnNlRW51bXMoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gISF0aGlzLmdldFBsdWdpbk9wdGlvbihcImZsb3dcIiwgXCJlbnVtc1wiKTtcbiAgICB9XG5cbiAgICBmaW5pc2hUb2tlbih0eXBlOiBUb2tlblR5cGUsIHZhbDogYW55KTogdm9pZCB7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGUgIT09IHR0LnN0cmluZyAmJlxuICAgICAgICB0eXBlICE9PSB0dC5zZW1pICYmXG4gICAgICAgIHR5cGUgIT09IHR0LmludGVycHJldGVyRGlyZWN0aXZlXG4gICAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuZmxvd1ByYWdtYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5mbG93UHJhZ21hID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLmZpbmlzaFRva2VuKHR5cGUsIHZhbCk7XG4gICAgfVxuXG4gICAgYWRkQ29tbWVudChjb21tZW50OiBOLkNvbW1lbnQpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLmZsb3dQcmFnbWEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBUcnkgdG8gcGFyc2UgYSBmbG93IHByYWdtYS5cbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IEZMT1dfUFJBR01BX1JFR0VYLmV4ZWMoY29tbWVudC52YWx1ZSk7XG4gICAgICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaGVzWzFdID09PSBcImZsb3dcIikge1xuICAgICAgICAgIHRoaXMuZmxvd1ByYWdtYSA9IFwiZmxvd1wiO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXNbMV0gPT09IFwibm9mbG93XCIpIHtcbiAgICAgICAgICB0aGlzLmZsb3dQcmFnbWEgPSBcIm5vZmxvd1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZmxvdyBwcmFnbWFcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5hZGRDb21tZW50KGNvbW1lbnQpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZVR5cGVJbml0aWFsaXNlcih0b2s/OiBUb2tlblR5cGUpOiBOLkZsb3dUeXBlIHtcbiAgICAgIGNvbnN0IG9sZEluVHlwZSA9IHRoaXMuc3RhdGUuaW5UeXBlO1xuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSB0cnVlO1xuICAgICAgdGhpcy5leHBlY3QodG9rIHx8IHR0LmNvbG9uKTtcblxuICAgICAgY29uc3QgdHlwZSA9IHRoaXMuZmxvd1BhcnNlVHlwZSgpO1xuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSBvbGRJblR5cGU7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VQcmVkaWNhdGUoKTogTi5GbG93VHlwZSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IG1vZHVsb0xvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgICBjb25zdCBtb2R1bG9Qb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgdGhpcy5leHBlY3QodHQubW9kdWxvKTtcbiAgICAgIGNvbnN0IGNoZWNrc0xvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJjaGVja3NcIik7XG4gICAgICAvLyBGb3JjZSAnJScgYW5kICdjaGVja3MnIHRvIGJlIGFkamFjZW50XG4gICAgICBpZiAoXG4gICAgICAgIG1vZHVsb0xvYy5saW5lICE9PSBjaGVja3NMb2MubGluZSB8fFxuICAgICAgICBtb2R1bG9Mb2MuY29sdW1uICE9PSBjaGVja3NMb2MuY29sdW1uIC0gMVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmFpc2UobW9kdWxvUG9zLCBGbG93RXJyb3JzLlVuZXhwZWN0ZWRTcGFjZUJldHdlZW5Nb2R1bG9DaGVja3MpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZWF0KHR0LnBhcmVuTCkpIHtcbiAgICAgICAgbm9kZS52YWx1ZSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWNsYXJlZFByZWRpY2F0ZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbmZlcnJlZFByZWRpY2F0ZVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmbG93UGFyc2VUeXBlQW5kUHJlZGljYXRlSW5pdGlhbGlzZXIoKTogWz9OLkZsb3dUeXBlLCA/Ti5GbG93UHJlZGljYXRlXSB7XG4gICAgICBjb25zdCBvbGRJblR5cGUgPSB0aGlzLnN0YXRlLmluVHlwZTtcbiAgICAgIHRoaXMuc3RhdGUuaW5UeXBlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbG9uKTtcbiAgICAgIGxldCB0eXBlID0gbnVsbDtcbiAgICAgIGxldCBwcmVkaWNhdGUgPSBudWxsO1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQubW9kdWxvKSkge1xuICAgICAgICB0aGlzLnN0YXRlLmluVHlwZSA9IG9sZEluVHlwZTtcbiAgICAgICAgcHJlZGljYXRlID0gdGhpcy5mbG93UGFyc2VQcmVkaWNhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSB0aGlzLmZsb3dQYXJzZVR5cGUoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSBvbGRJblR5cGU7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0Lm1vZHVsbykpIHtcbiAgICAgICAgICBwcmVkaWNhdGUgPSB0aGlzLmZsb3dQYXJzZVByZWRpY2F0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gW3R5cGUsIHByZWRpY2F0ZV07XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlRGVjbGFyZUNsYXNzKG5vZGU6IE4uRmxvd0RlY2xhcmVDbGFzcyk6IE4uRmxvd0RlY2xhcmVDbGFzcyB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHRoaXMuZmxvd1BhcnNlSW50ZXJmYWNlaXNoKG5vZGUsIC8qaXNDbGFzcyovIHRydWUpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRlY2xhcmVDbGFzc1wiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlRnVuY3Rpb24oXG4gICAgICBub2RlOiBOLkZsb3dEZWNsYXJlRnVuY3Rpb24sXG4gICAgKTogTi5GbG93RGVjbGFyZUZ1bmN0aW9uIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICBjb25zdCBpZCA9IChub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKSk7XG5cbiAgICAgIGNvbnN0IHR5cGVOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IHR5cGVDb250YWluZXIgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHR5cGVOb2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVOb2RlLnR5cGVQYXJhbWV0ZXJzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5MKTtcbiAgICAgIGNvbnN0IHRtcCA9IHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW1zKCk7XG4gICAgICB0eXBlTm9kZS5wYXJhbXMgPSB0bXAucGFyYW1zO1xuICAgICAgdHlwZU5vZGUucmVzdCA9IHRtcC5yZXN0O1xuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5SKTtcblxuICAgICAgW1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIChkZXN0cnVjdHVyaW5nIG5vdCBzdXBwb3J0ZWQgeWV0KVxuICAgICAgICB0eXBlTm9kZS5yZXR1cm5UeXBlLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lIChkZXN0cnVjdHVyaW5nIG5vdCBzdXBwb3J0ZWQgeWV0KVxuICAgICAgICBub2RlLnByZWRpY2F0ZSxcbiAgICAgIF0gPSB0aGlzLmZsb3dQYXJzZVR5cGVBbmRQcmVkaWNhdGVJbml0aWFsaXNlcigpO1xuXG4gICAgICB0eXBlQ29udGFpbmVyLnR5cGVBbm5vdGF0aW9uID0gdGhpcy5maW5pc2hOb2RlKFxuICAgICAgICB0eXBlTm9kZSxcbiAgICAgICAgXCJGdW5jdGlvblR5cGVBbm5vdGF0aW9uXCIsXG4gICAgICApO1xuXG4gICAgICBpZC50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmluaXNoTm9kZSh0eXBlQ29udGFpbmVyLCBcIlR5cGVBbm5vdGF0aW9uXCIpO1xuXG4gICAgICB0aGlzLnJlc2V0RW5kTG9jYXRpb24oaWQpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRlY2xhcmVGdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlKFxuICAgICAgbm9kZTogTi5GbG93RGVjbGFyZSxcbiAgICAgIGluc2lkZU1vZHVsZT86IGJvb2xlYW4sXG4gICAgKTogTi5GbG93RGVjbGFyZSB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5fY2xhc3MpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZURlY2xhcmVDbGFzcyhub2RlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5fZnVuY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZURlY2xhcmVGdW5jdGlvbihub2RlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5fdmFyKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VEZWNsYXJlVmFyaWFibGUobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcIm1vZHVsZVwiKSkge1xuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5kb3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlRGVjbGFyZU1vZHVsZUV4cG9ydHMobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGluc2lkZU1vZHVsZSkge1xuICAgICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCwgRmxvd0Vycm9ycy5OZXN0ZWREZWNsYXJlTW9kdWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlRGVjbGFyZU1vZHVsZShub2RlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ29udGV4dHVhbChcInR5cGVcIikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlRGVjbGFyZVR5cGVBbGlhcyhub2RlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJvcGFxdWVcIikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlRGVjbGFyZU9wYXF1ZVR5cGUobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiaW50ZXJmYWNlXCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZURlY2xhcmVJbnRlcmZhY2Uobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuX2V4cG9ydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlRGVjbGFyZUV4cG9ydERlY2xhcmF0aW9uKG5vZGUsIGluc2lkZU1vZHVsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlVmFyaWFibGUoXG4gICAgICBub2RlOiBOLkZsb3dEZWNsYXJlVmFyaWFibGUsXG4gICAgKTogTi5GbG93RGVjbGFyZVZhcmlhYmxlIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgbm9kZS5pZCA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRhYmxlSWRlbnRpZmllcihcbiAgICAgICAgLyphbGxvd1ByaW1pdGl2ZU92ZXJyaWRlKi8gdHJ1ZSxcbiAgICAgICk7XG4gICAgICB0aGlzLnNjb3BlLmRlY2xhcmVOYW1lKG5vZGUuaWQubmFtZSwgQklORF9WQVIsIG5vZGUuaWQuc3RhcnQpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWNsYXJlVmFyaWFibGVcIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlRGVjbGFyZU1vZHVsZShub2RlOiBOLkZsb3dEZWNsYXJlTW9kdWxlKTogTi5GbG93RGVjbGFyZU1vZHVsZSB7XG4gICAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX09USEVSKTtcblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuc3RyaW5nKSkge1xuICAgICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYm9keU5vZGUgPSAobm9kZS5ib2R5ID0gdGhpcy5zdGFydE5vZGUoKSk7XG4gICAgICBjb25zdCBib2R5ID0gKGJvZHlOb2RlLmJvZHkgPSBbXSk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKHR0LmJyYWNlUikpIHtcbiAgICAgICAgbGV0IGJvZHlOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5faW1wb3J0KSkge1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGlmICghdGhpcy5pc0NvbnRleHR1YWwoXCJ0eXBlXCIpICYmICF0aGlzLm1hdGNoKHR0Ll90eXBlb2YpKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCxcbiAgICAgICAgICAgICAgRmxvd0Vycm9ycy5JbnZhbGlkTm9uVHlwZUltcG9ydEluRGVjbGFyZU1vZHVsZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucGFyc2VJbXBvcnQoYm9keU5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcbiAgICAgICAgICAgIFwiZGVjbGFyZVwiLFxuICAgICAgICAgICAgRmxvd0Vycm9ycy5VbnN1cHBvcnRlZFN0YXRlbWVudEluRGVjbGFyZU1vZHVsZSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgYm9keU5vZGUgPSB0aGlzLmZsb3dQYXJzZURlY2xhcmUoYm9keU5vZGUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keS5wdXNoKGJvZHlOb2RlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY29wZS5leGl0KCk7XG5cbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG5cbiAgICAgIHRoaXMuZmluaXNoTm9kZShib2R5Tm9kZSwgXCJCbG9ja1N0YXRlbWVudFwiKTtcblxuICAgICAgbGV0IGtpbmQgPSBudWxsO1xuICAgICAgbGV0IGhhc01vZHVsZUV4cG9ydCA9IGZhbHNlO1xuICAgICAgYm9keS5mb3JFYWNoKGJvZHlFbGVtZW50ID0+IHtcbiAgICAgICAgaWYgKGlzRXNNb2R1bGVUeXBlKGJvZHlFbGVtZW50KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcIkNvbW1vbkpTXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIGJvZHlFbGVtZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBGbG93RXJyb3JzLkFtYmlndW91c0RlY2xhcmVNb2R1bGVLaW5kLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2luZCA9IFwiRVNcIjtcbiAgICAgICAgfSBlbHNlIGlmIChib2R5RWxlbWVudC50eXBlID09PSBcIkRlY2xhcmVNb2R1bGVFeHBvcnRzXCIpIHtcbiAgICAgICAgICBpZiAoaGFzTW9kdWxlRXhwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICBib2R5RWxlbWVudC5zdGFydCxcbiAgICAgICAgICAgICAgRmxvd0Vycm9ycy5EdXBsaWNhdGVEZWNsYXJlTW9kdWxlRXhwb3J0cyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChraW5kID09PSBcIkVTXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIGJvZHlFbGVtZW50LnN0YXJ0LFxuICAgICAgICAgICAgICBGbG93RXJyb3JzLkFtYmlndW91c0RlY2xhcmVNb2R1bGVLaW5kLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2luZCA9IFwiQ29tbW9uSlNcIjtcbiAgICAgICAgICBoYXNNb2R1bGVFeHBvcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgbm9kZS5raW5kID0ga2luZCB8fCBcIkNvbW1vbkpTXCI7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRGVjbGFyZU1vZHVsZVwiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb24oXG4gICAgICBub2RlOiBOLkZsb3dEZWNsYXJlRXhwb3J0RGVjbGFyYXRpb24sXG4gICAgICBpbnNpZGVNb2R1bGU6ID9ib29sZWFuLFxuICAgICk6IE4uRmxvd0RlY2xhcmVFeHBvcnREZWNsYXJhdGlvbiB7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5fZXhwb3J0KTtcblxuICAgICAgaWYgKHRoaXMuZWF0KHR0Ll9kZWZhdWx0KSkge1xuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5fZnVuY3Rpb24pIHx8IHRoaXMubWF0Y2godHQuX2NsYXNzKSkge1xuICAgICAgICAgIC8vIGRlY2xhcmUgZXhwb3J0IGRlZmF1bHQgY2xhc3MgLi4uXG4gICAgICAgICAgLy8gZGVjbGFyZSBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAuLi5cbiAgICAgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5mbG93UGFyc2VEZWNsYXJlKHRoaXMuc3RhcnROb2RlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlY2xhcmUgZXhwb3J0IGRlZmF1bHQgW3R5cGVdO1xuICAgICAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLmZsb3dQYXJzZVR5cGUoKTtcbiAgICAgICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuZGVmYXVsdCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRlY2xhcmVFeHBvcnREZWNsYXJhdGlvblwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0Ll9jb25zdCkgfHxcbiAgICAgICAgICB0aGlzLmlzTGV0KCkgfHxcbiAgICAgICAgICAoKHRoaXMuaXNDb250ZXh0dWFsKFwidHlwZVwiKSB8fCB0aGlzLmlzQ29udGV4dHVhbChcImludGVyZmFjZVwiKSkgJiZcbiAgICAgICAgICAgICFpbnNpZGVNb2R1bGUpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgICBjb25zdCBzdWdnZXN0aW9uID0gZXhwb3J0U3VnZ2VzdGlvbnNbbGFiZWxdO1xuXG4gICAgICAgICAgdGhyb3cgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgICAgICBGbG93RXJyb3JzLlVuc3VwcG9ydGVkRGVjbGFyZUV4cG9ydEtpbmQsXG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb24sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0Ll92YXIpIHx8IC8vIGRlY2xhcmUgZXhwb3J0IHZhciAuLi5cbiAgICAgICAgICB0aGlzLm1hdGNoKHR0Ll9mdW5jdGlvbikgfHwgLy8gZGVjbGFyZSBleHBvcnQgZnVuY3Rpb24gLi4uXG4gICAgICAgICAgdGhpcy5tYXRjaCh0dC5fY2xhc3MpIHx8IC8vIGRlY2xhcmUgZXhwb3J0IGNsYXNzIC4uLlxuICAgICAgICAgIHRoaXMuaXNDb250ZXh0dWFsKFwib3BhcXVlXCIpIC8vIGRlY2xhcmUgZXhwb3J0IG9wYXF1ZSAuLlxuICAgICAgICApIHtcbiAgICAgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5mbG93UGFyc2VEZWNsYXJlKHRoaXMuc3RhcnROb2RlKCkpO1xuICAgICAgICAgIG5vZGUuZGVmYXVsdCA9IGZhbHNlO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRlY2xhcmVFeHBvcnREZWNsYXJhdGlvblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0LnN0YXIpIHx8IC8vIGRlY2xhcmUgZXhwb3J0ICogZnJvbSAnJ1xuICAgICAgICAgIHRoaXMubWF0Y2godHQuYnJhY2VMKSB8fCAvLyBkZWNsYXJlIGV4cG9ydCB7fSAuLi5cbiAgICAgICAgICB0aGlzLmlzQ29udGV4dHVhbChcImludGVyZmFjZVwiKSB8fCAvLyBkZWNsYXJlIGV4cG9ydCBpbnRlcmZhY2UgLi4uXG4gICAgICAgICAgdGhpcy5pc0NvbnRleHR1YWwoXCJ0eXBlXCIpIHx8IC8vIGRlY2xhcmUgZXhwb3J0IHR5cGUgLi4uXG4gICAgICAgICAgdGhpcy5pc0NvbnRleHR1YWwoXCJvcGFxdWVcIikgLy8gZGVjbGFyZSBleHBvcnQgb3BhcXVlIHR5cGUgLi4uXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUgPSB0aGlzLnBhcnNlRXhwb3J0KG5vZGUpO1xuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09IFwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBmbG93IGRvZXMgbm90IHN1cHBvcnQgdGhlIEV4cG9ydE5hbWVkRGVjbGFyYXRpb25cbiAgICAgICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgICAgICBub2RlLnR5cGUgPSBcIkV4cG9ydERlY2xhcmF0aW9uXCI7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgICBub2RlLmRlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRlbGV0ZSBub2RlLmV4cG9ydEtpbmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICBub2RlLnR5cGUgPSBcIkRlY2xhcmVcIiArIG5vZGUudHlwZTtcblxuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZURlY2xhcmVNb2R1bGVFeHBvcnRzKFxuICAgICAgbm9kZTogTi5GbG93RGVjbGFyZU1vZHVsZUV4cG9ydHMsXG4gICAgKTogTi5GbG93RGVjbGFyZU1vZHVsZUV4cG9ydHMge1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJleHBvcnRzXCIpO1xuICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWNsYXJlTW9kdWxlRXhwb3J0c1wiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlVHlwZUFsaWFzKFxuICAgICAgbm9kZTogTi5GbG93RGVjbGFyZVR5cGVBbGlhcyxcbiAgICApOiBOLkZsb3dEZWNsYXJlVHlwZUFsaWFzIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdGhpcy5mbG93UGFyc2VUeXBlQWxpYXMobm9kZSk7XG4gICAgICAvLyBEb24ndCBkbyBmaW5pc2hOb2RlIGFzIHdlIGRvbid0IHdhbnQgdG8gcHJvY2VzcyBjb21tZW50cyB0d2ljZVxuICAgICAgbm9kZS50eXBlID0gXCJEZWNsYXJlVHlwZUFsaWFzXCI7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VEZWNsYXJlT3BhcXVlVHlwZShcbiAgICAgIG5vZGU6IE4uRmxvd0RlY2xhcmVPcGFxdWVUeXBlLFxuICAgICk6IE4uRmxvd0RlY2xhcmVPcGFxdWVUeXBlIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdGhpcy5mbG93UGFyc2VPcGFxdWVUeXBlKG5vZGUsIHRydWUpO1xuICAgICAgLy8gRG9uJ3QgZG8gZmluaXNoTm9kZSBhcyB3ZSBkb24ndCB3YW50IHRvIHByb2Nlc3MgY29tbWVudHMgdHdpY2VcbiAgICAgIG5vZGUudHlwZSA9IFwiRGVjbGFyZU9wYXF1ZVR5cGVcIjtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZURlY2xhcmVJbnRlcmZhY2UoXG4gICAgICBub2RlOiBOLkZsb3dEZWNsYXJlSW50ZXJmYWNlLFxuICAgICk6IE4uRmxvd0RlY2xhcmVJbnRlcmZhY2Uge1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB0aGlzLmZsb3dQYXJzZUludGVyZmFjZWlzaChub2RlKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWNsYXJlSW50ZXJmYWNlXCIpO1xuICAgIH1cblxuICAgIC8vIEludGVyZmFjZXNcblxuICAgIGZsb3dQYXJzZUludGVyZmFjZWlzaChcbiAgICAgIG5vZGU6IE4uRmxvd0RlY2xhcmUsXG4gICAgICBpc0NsYXNzPzogYm9vbGVhbiA9IGZhbHNlLFxuICAgICk6IHZvaWQge1xuICAgICAgbm9kZS5pZCA9IHRoaXMuZmxvd1BhcnNlUmVzdHJpY3RlZElkZW50aWZpZXIoXG4gICAgICAgIC8qIGxpYmVyYWwgKi8gIWlzQ2xhc3MsXG4gICAgICAgIC8qIGRlY2xhcmF0aW9uICovIHRydWUsXG4gICAgICApO1xuXG4gICAgICB0aGlzLnNjb3BlLmRlY2xhcmVOYW1lKFxuICAgICAgICBub2RlLmlkLm5hbWUsXG4gICAgICAgIGlzQ2xhc3MgPyBCSU5EX0ZVTkNUSU9OIDogQklORF9MRVhJQ0FMLFxuICAgICAgICBub2RlLmlkLnN0YXJ0LFxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBub2RlLmV4dGVuZHMgPSBbXTtcbiAgICAgIG5vZGUuaW1wbGVtZW50cyA9IFtdO1xuICAgICAgbm9kZS5taXhpbnMgPSBbXTtcblxuICAgICAgaWYgKHRoaXMuZWF0KHR0Ll9leHRlbmRzKSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbm9kZS5leHRlbmRzLnB1c2godGhpcy5mbG93UGFyc2VJbnRlcmZhY2VFeHRlbmRzKCkpO1xuICAgICAgICB9IHdoaWxlICghaXNDbGFzcyAmJiB0aGlzLmVhdCh0dC5jb21tYSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJtaXhpbnNcIikpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBub2RlLm1peGlucy5wdXNoKHRoaXMuZmxvd1BhcnNlSW50ZXJmYWNlRXh0ZW5kcygpKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5lYXQodHQuY29tbWEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiaW1wbGVtZW50c1wiKSkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5vZGUuaW1wbGVtZW50cy5wdXNoKHRoaXMuZmxvd1BhcnNlSW50ZXJmYWNlRXh0ZW5kcygpKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5lYXQodHQuY29tbWEpKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5ib2R5ID0gdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlKHtcbiAgICAgICAgYWxsb3dTdGF0aWM6IGlzQ2xhc3MsXG4gICAgICAgIGFsbG93RXhhY3Q6IGZhbHNlLFxuICAgICAgICBhbGxvd1NwcmVhZDogZmFsc2UsXG4gICAgICAgIGFsbG93UHJvdG86IGlzQ2xhc3MsXG4gICAgICAgIGFsbG93SW5leGFjdDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VJbnRlcmZhY2VFeHRlbmRzKCk6IE4uRmxvd0ludGVyZmFjZUV4dGVuZHMge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgIG5vZGUuaWQgPSB0aGlzLmZsb3dQYXJzZVF1YWxpZmllZFR5cGVJZGVudGlmaWVyKCk7XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkludGVyZmFjZUV4dGVuZHNcIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlSW50ZXJmYWNlKG5vZGU6IE4uRmxvd0ludGVyZmFjZSk6IE4uRmxvd0ludGVyZmFjZSB7XG4gICAgICB0aGlzLmZsb3dQYXJzZUludGVyZmFjZWlzaChub2RlKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbnRlcmZhY2VEZWNsYXJhdGlvblwiKTtcbiAgICB9XG5cbiAgICBjaGVja05vdFVuZGVyc2NvcmUod29yZDogc3RyaW5nKSB7XG4gICAgICBpZiAod29yZCA9PT0gXCJfXCIpIHtcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBGbG93RXJyb3JzLlVuZXhwZWN0ZWRSZXNlcnZlZFVuZGVyc2NvcmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrUmVzZXJ2ZWRUeXBlKHdvcmQ6IHN0cmluZywgc3RhcnRMb2M6IG51bWJlciwgZGVjbGFyYXRpb24/OiBib29sZWFuKSB7XG4gICAgICBpZiAoIXJlc2VydmVkVHlwZXMuaGFzKHdvcmQpKSByZXR1cm47XG5cbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICBkZWNsYXJhdGlvblxuICAgICAgICAgID8gRmxvd0Vycm9ycy5Bc3NpZ25SZXNlcnZlZFR5cGVcbiAgICAgICAgICA6IEZsb3dFcnJvcnMuVW5leHBlY3RlZFJlc2VydmVkVHlwZSxcbiAgICAgICAgd29yZCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlUmVzdHJpY3RlZElkZW50aWZpZXIoXG4gICAgICBsaWJlcmFsPzogYm9vbGVhbixcbiAgICAgIGRlY2xhcmF0aW9uPzogYm9vbGVhbixcbiAgICApOiBOLklkZW50aWZpZXIge1xuICAgICAgdGhpcy5jaGVja1Jlc2VydmVkVHlwZSh0aGlzLnN0YXRlLnZhbHVlLCB0aGlzLnN0YXRlLnN0YXJ0LCBkZWNsYXJhdGlvbik7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUlkZW50aWZpZXIobGliZXJhbCk7XG4gICAgfVxuXG4gICAgLy8gVHlwZSBhbGlhc2VzXG5cbiAgICBmbG93UGFyc2VUeXBlQWxpYXMobm9kZTogTi5GbG93VHlwZUFsaWFzKTogTi5GbG93VHlwZUFsaWFzIHtcbiAgICAgIG5vZGUuaWQgPSB0aGlzLmZsb3dQYXJzZVJlc3RyaWN0ZWRJZGVudGlmaWVyKFxuICAgICAgICAvKiBsaWJlcmFsICovIGZhbHNlLFxuICAgICAgICAvKiBkZWNsYXJhdGlvbiAqLyB0cnVlLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc2NvcGUuZGVjbGFyZU5hbWUobm9kZS5pZC5uYW1lLCBCSU5EX0xFWElDQUwsIG5vZGUuaWQuc3RhcnQpO1xuXG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS50eXBlUGFyYW1ldGVycyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIG5vZGUucmlnaHQgPSB0aGlzLmZsb3dQYXJzZVR5cGVJbml0aWFsaXNlcih0dC5lcSk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHlwZUFsaWFzXCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZU9wYXF1ZVR5cGUoXG4gICAgICBub2RlOiBOLkZsb3dPcGFxdWVUeXBlLFxuICAgICAgZGVjbGFyZTogYm9vbGVhbixcbiAgICApOiBOLkZsb3dPcGFxdWVUeXBlIHtcbiAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcInR5cGVcIik7XG4gICAgICBub2RlLmlkID0gdGhpcy5mbG93UGFyc2VSZXN0cmljdGVkSWRlbnRpZmllcihcbiAgICAgICAgLyogbGliZXJhbCAqLyB0cnVlLFxuICAgICAgICAvKiBkZWNsYXJhdGlvbiAqLyB0cnVlLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc2NvcGUuZGVjbGFyZU5hbWUobm9kZS5pZC5uYW1lLCBCSU5EX0xFWElDQUwsIG5vZGUuaWQuc3RhcnQpO1xuXG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS50eXBlUGFyYW1ldGVycyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFBhcnNlIHRoZSBzdXBlcnR5cGVcbiAgICAgIG5vZGUuc3VwZXJ0eXBlID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICBub2RlLnN1cGVydHlwZSA9IHRoaXMuZmxvd1BhcnNlVHlwZUluaXRpYWxpc2VyKHR0LmNvbG9uKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5pbXBsdHlwZSA9IG51bGw7XG4gICAgICBpZiAoIWRlY2xhcmUpIHtcbiAgICAgICAgbm9kZS5pbXBsdHlwZSA9IHRoaXMuZmxvd1BhcnNlVHlwZUluaXRpYWxpc2VyKHR0LmVxKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJPcGFxdWVUeXBlXCIpO1xuICAgIH1cblxuICAgIC8vIFR5cGUgYW5ub3RhdGlvbnNcblxuICAgIGZsb3dQYXJzZVR5cGVQYXJhbWV0ZXIocmVxdWlyZURlZmF1bHQ/OiBib29sZWFuID0gZmFsc2UpOiBOLlR5cGVQYXJhbWV0ZXIge1xuICAgICAgY29uc3Qgbm9kZVN0YXJ0ID0gdGhpcy5zdGF0ZS5zdGFydDtcblxuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgIGNvbnN0IHZhcmlhbmNlID0gdGhpcy5mbG93UGFyc2VWYXJpYW5jZSgpO1xuXG4gICAgICBjb25zdCBpZGVudCA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRhYmxlSWRlbnRpZmllcigpO1xuICAgICAgbm9kZS5uYW1lID0gaWRlbnQubmFtZTtcbiAgICAgIG5vZGUudmFyaWFuY2UgPSB2YXJpYW5jZTtcbiAgICAgIG5vZGUuYm91bmQgPSBpZGVudC50eXBlQW5ub3RhdGlvbjtcblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuZXEpKSB7XG4gICAgICAgIHRoaXMuZWF0KHR0LmVxKTtcbiAgICAgICAgbm9kZS5kZWZhdWx0ID0gdGhpcy5mbG93UGFyc2VUeXBlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVxdWlyZURlZmF1bHQpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKG5vZGVTdGFydCwgRmxvd0Vycm9ycy5NaXNzaW5nVHlwZVBhcmFtRGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlR5cGVQYXJhbWV0ZXJcIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uKCk6IE4uVHlwZVBhcmFtZXRlckRlY2xhcmF0aW9uIHtcbiAgICAgIGNvbnN0IG9sZEluVHlwZSA9IHRoaXMuc3RhdGUuaW5UeXBlO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLnBhcmFtcyA9IFtdO1xuXG4gICAgICB0aGlzLnN0YXRlLmluVHlwZSA9IHRydWU7XG5cbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiB0aGlzIGNvbmRpdGlvbiBpcyBhbHJlYWR5IGNoZWNrZWQgYXQgYWxsIGNhbGwgc2l0ZXNcbiAgICAgIGlmICh0aGlzLmlzUmVsYXRpb25hbChcIjxcIikgfHwgdGhpcy5tYXRjaCh0dC5qc3hUYWdTdGFydCkpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRlZmF1bHRSZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGNvbnN0IHR5cGVQYXJhbWV0ZXIgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXIoZGVmYXVsdFJlcXVpcmVkKTtcblxuICAgICAgICBub2RlLnBhcmFtcy5wdXNoKHR5cGVQYXJhbWV0ZXIpO1xuXG4gICAgICAgIGlmICh0eXBlUGFyYW1ldGVyLmRlZmF1bHQpIHtcbiAgICAgICAgICBkZWZhdWx0UmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzUmVsYXRpb25hbChcIj5cIikpIHtcbiAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5jb21tYSk7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKCF0aGlzLmlzUmVsYXRpb25hbChcIj5cIikpO1xuICAgICAgdGhpcy5leHBlY3RSZWxhdGlvbmFsKFwiPlwiKTtcblxuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSBvbGRJblR5cGU7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24oKTogTi5UeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IG9sZEluVHlwZSA9IHRoaXMuc3RhdGUuaW5UeXBlO1xuICAgICAgbm9kZS5wYXJhbXMgPSBbXTtcblxuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSB0cnVlO1xuXG4gICAgICB0aGlzLmV4cGVjdFJlbGF0aW9uYWwoXCI8XCIpO1xuICAgICAgY29uc3Qgb2xkTm9Bbm9uRnVuY3Rpb25UeXBlID0gdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGU7XG4gICAgICB0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKCF0aGlzLmlzUmVsYXRpb25hbChcIj5cIikpIHtcbiAgICAgICAgbm9kZS5wYXJhbXMucHVzaCh0aGlzLmZsb3dQYXJzZVR5cGUoKSk7XG4gICAgICAgIGlmICghdGhpcy5pc1JlbGF0aW9uYWwoXCI+XCIpKSB7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IG9sZE5vQW5vbkZ1bmN0aW9uVHlwZTtcbiAgICAgIHRoaXMuZXhwZWN0UmVsYXRpb25hbChcIj5cIik7XG5cbiAgICAgIHRoaXMuc3RhdGUuaW5UeXBlID0gb2xkSW5UeXBlO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25DYWxsT3JOZXcoKTogTi5UeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IG9sZEluVHlwZSA9IHRoaXMuc3RhdGUuaW5UeXBlO1xuICAgICAgbm9kZS5wYXJhbXMgPSBbXTtcblxuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSB0cnVlO1xuXG4gICAgICB0aGlzLmV4cGVjdFJlbGF0aW9uYWwoXCI8XCIpO1xuICAgICAgd2hpbGUgKCF0aGlzLmlzUmVsYXRpb25hbChcIj5cIikpIHtcbiAgICAgICAgbm9kZS5wYXJhbXMucHVzaCh0aGlzLmZsb3dQYXJzZVR5cGVPckltcGxpY2l0SW5zdGFudGlhdGlvbigpKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVsYXRpb25hbChcIj5cIikpIHtcbiAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5jb21tYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZXhwZWN0UmVsYXRpb25hbChcIj5cIik7XG5cbiAgICAgIHRoaXMuc3RhdGUuaW5UeXBlID0gb2xkSW5UeXBlO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlSW50ZXJmYWNlVHlwZSgpOiBOLkZsb3dJbnRlcmZhY2VUeXBlIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiaW50ZXJmYWNlXCIpO1xuXG4gICAgICBub2RlLmV4dGVuZHMgPSBbXTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5fZXh0ZW5kcykpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5vZGUuZXh0ZW5kcy5wdXNoKHRoaXMuZmxvd1BhcnNlSW50ZXJmYWNlRXh0ZW5kcygpKTtcbiAgICAgICAgfSB3aGlsZSAodGhpcy5lYXQodHQuY29tbWEpKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5ib2R5ID0gdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlKHtcbiAgICAgICAgYWxsb3dTdGF0aWM6IGZhbHNlLFxuICAgICAgICBhbGxvd0V4YWN0OiBmYWxzZSxcbiAgICAgICAgYWxsb3dTcHJlYWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd1Byb3RvOiBmYWxzZSxcbiAgICAgICAgYWxsb3dJbmV4YWN0OiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSW50ZXJmYWNlVHlwZUFubm90YXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0Lm51bSkgfHwgdGhpcy5tYXRjaCh0dC5zdHJpbmcpXG4gICAgICAgID8gdGhpcy5wYXJzZUV4cHJBdG9tKClcbiAgICAgICAgOiB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VPYmplY3RUeXBlSW5kZXhlcihcbiAgICAgIG5vZGU6IE4uRmxvd09iamVjdFR5cGVJbmRleGVyLFxuICAgICAgaXNTdGF0aWM6IGJvb2xlYW4sXG4gICAgICB2YXJpYW5jZTogP04uRmxvd1ZhcmlhbmNlLFxuICAgICk6IE4uRmxvd09iamVjdFR5cGVJbmRleGVyIHtcbiAgICAgIG5vZGUuc3RhdGljID0gaXNTdGF0aWM7XG5cbiAgICAgIC8vIE5vdGU6IGJyYWNrZXRMIGhhcyBhbHJlYWR5IGJlZW4gY29uc3VtZWRcbiAgICAgIGlmICh0aGlzLmxvb2thaGVhZCgpLnR5cGUgPT09IHR0LmNvbG9uKSB7XG4gICAgICAgIG5vZGUuaWQgPSB0aGlzLmZsb3dQYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG4gICAgICAgIG5vZGUua2V5ID0gdGhpcy5mbG93UGFyc2VUeXBlSW5pdGlhbGlzZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaWQgPSBudWxsO1xuICAgICAgICBub2RlLmtleSA9IHRoaXMuZmxvd1BhcnNlVHlwZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldFIpO1xuICAgICAgbm9kZS52YWx1ZSA9IHRoaXMuZmxvd1BhcnNlVHlwZUluaXRpYWxpc2VyKCk7XG4gICAgICBub2RlLnZhcmlhbmNlID0gdmFyaWFuY2U7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJPYmplY3RUeXBlSW5kZXhlclwiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VPYmplY3RUeXBlSW50ZXJuYWxTbG90KFxuICAgICAgbm9kZTogTi5GbG93T2JqZWN0VHlwZUludGVybmFsU2xvdCxcbiAgICAgIGlzU3RhdGljOiBib29sZWFuLFxuICAgICk6IE4uRmxvd09iamVjdFR5cGVJbnRlcm5hbFNsb3Qge1xuICAgICAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYztcbiAgICAgIC8vIE5vdGU6IGJvdGggYnJhY2tldEwgaGF2ZSBhbHJlYWR5IGJlZW4gY29uc3VtZWRcbiAgICAgIG5vZGUuaWQgPSB0aGlzLmZsb3dQYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpIHx8IHRoaXMubWF0Y2godHQucGFyZW5MKSkge1xuICAgICAgICBub2RlLm1ldGhvZCA9IHRydWU7XG4gICAgICAgIG5vZGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgbm9kZS52YWx1ZSA9IHRoaXMuZmxvd1BhcnNlT2JqZWN0VHlwZU1ldGhvZGlzaChcbiAgICAgICAgICB0aGlzLnN0YXJ0Tm9kZUF0KG5vZGUuc3RhcnQsIG5vZGUubG9jLnN0YXJ0KSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUubWV0aG9kID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmVhdCh0dC5xdWVzdGlvbikpIHtcbiAgICAgICAgICBub2RlLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnZhbHVlID0gdGhpcy5mbG93UGFyc2VUeXBlSW5pdGlhbGlzZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJPYmplY3RUeXBlSW50ZXJuYWxTbG90XCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZU9iamVjdFR5cGVNZXRob2Rpc2goXG4gICAgICBub2RlOiBOLkZsb3dGdW5jdGlvblR5cGVBbm5vdGF0aW9uLFxuICAgICk6IE4uRmxvd0Z1bmN0aW9uVHlwZUFubm90YXRpb24ge1xuICAgICAgbm9kZS5wYXJhbXMgPSBbXTtcbiAgICAgIG5vZGUucmVzdCA9IG51bGw7XG4gICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5MKTtcbiAgICAgIHdoaWxlICghdGhpcy5tYXRjaCh0dC5wYXJlblIpICYmICF0aGlzLm1hdGNoKHR0LmVsbGlwc2lzKSkge1xuICAgICAgICBub2RlLnBhcmFtcy5wdXNoKHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW0oKSk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5wYXJlblIpKSB7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVhdCh0dC5lbGxpcHNpcykpIHtcbiAgICAgICAgbm9kZS5yZXN0ID0gdGhpcy5mbG93UGFyc2VGdW5jdGlvblR5cGVQYXJhbSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5SKTtcbiAgICAgIG5vZGUucmV0dXJuVHlwZSA9IHRoaXMuZmxvd1BhcnNlVHlwZUluaXRpYWxpc2VyKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGdW5jdGlvblR5cGVBbm5vdGF0aW9uXCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZU9iamVjdFR5cGVDYWxsUHJvcGVydHkoXG4gICAgICBub2RlOiBOLkZsb3dPYmplY3RUeXBlQ2FsbFByb3BlcnR5LFxuICAgICAgaXNTdGF0aWM6IGJvb2xlYW4sXG4gICAgKTogTi5GbG93T2JqZWN0VHlwZUNhbGxQcm9wZXJ0eSB7XG4gICAgICBjb25zdCB2YWx1ZU5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYztcbiAgICAgIG5vZGUudmFsdWUgPSB0aGlzLmZsb3dQYXJzZU9iamVjdFR5cGVNZXRob2Rpc2godmFsdWVOb2RlKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJPYmplY3RUeXBlQ2FsbFByb3BlcnR5XCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZU9iamVjdFR5cGUoe1xuICAgICAgYWxsb3dTdGF0aWMsXG4gICAgICBhbGxvd0V4YWN0LFxuICAgICAgYWxsb3dTcHJlYWQsXG4gICAgICBhbGxvd1Byb3RvLFxuICAgICAgYWxsb3dJbmV4YWN0LFxuICAgIH06IHtcbiAgICAgIGFsbG93U3RhdGljOiBib29sZWFuLFxuICAgICAgYWxsb3dFeGFjdDogYm9vbGVhbixcbiAgICAgIGFsbG93U3ByZWFkOiBib29sZWFuLFxuICAgICAgYWxsb3dQcm90bzogYm9vbGVhbixcbiAgICAgIGFsbG93SW5leGFjdDogYm9vbGVhbixcbiAgICB9KTogTi5GbG93T2JqZWN0VHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgb2xkSW5UeXBlID0gdGhpcy5zdGF0ZS5pblR5cGU7XG4gICAgICB0aGlzLnN0YXRlLmluVHlwZSA9IHRydWU7XG5cbiAgICAgIGNvbnN0IG5vZGVTdGFydCA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgIG5vZGVTdGFydC5jYWxsUHJvcGVydGllcyA9IFtdO1xuICAgICAgbm9kZVN0YXJ0LnByb3BlcnRpZXMgPSBbXTtcbiAgICAgIG5vZGVTdGFydC5pbmRleGVycyA9IFtdO1xuICAgICAgbm9kZVN0YXJ0LmludGVybmFsU2xvdHMgPSBbXTtcblxuICAgICAgbGV0IGVuZERlbGltO1xuICAgICAgbGV0IGV4YWN0O1xuICAgICAgbGV0IGluZXhhY3QgPSBmYWxzZTtcbiAgICAgIGlmIChhbGxvd0V4YWN0ICYmIHRoaXMubWF0Y2godHQuYnJhY2VCYXJMKSkge1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUJhckwpO1xuICAgICAgICBlbmREZWxpbSA9IHR0LmJyYWNlQmFyUjtcbiAgICAgICAgZXhhY3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VMKTtcbiAgICAgICAgZW5kRGVsaW0gPSB0dC5icmFjZVI7XG4gICAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydC5leGFjdCA9IGV4YWN0O1xuXG4gICAgICB3aGlsZSAoIXRoaXMubWF0Y2goZW5kRGVsaW0pKSB7XG4gICAgICAgIGxldCBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICBsZXQgcHJvdG9TdGFydDogP251bWJlciA9IG51bGw7XG4gICAgICAgIGxldCBpbmV4YWN0U3RhcnQ6ID9udW1iZXIgPSBudWxsO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgICAgICBpZiAoYWxsb3dQcm90byAmJiB0aGlzLmlzQ29udGV4dHVhbChcInByb3RvXCIpKSB7XG4gICAgICAgICAgY29uc3QgbG9va2FoZWFkID0gdGhpcy5sb29rYWhlYWQoKTtcblxuICAgICAgICAgIGlmIChsb29rYWhlYWQudHlwZSAhPT0gdHQuY29sb24gJiYgbG9va2FoZWFkLnR5cGUgIT09IHR0LnF1ZXN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIHByb3RvU3RhcnQgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICAgICAgYWxsb3dTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsb3dTdGF0aWMgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJzdGF0aWNcIikpIHtcbiAgICAgICAgICBjb25zdCBsb29rYWhlYWQgPSB0aGlzLmxvb2thaGVhZCgpO1xuXG4gICAgICAgICAgLy8gc3RhdGljIGlzIGEgdmFsaWQgaWRlbnRpZmllciBuYW1lXG4gICAgICAgICAgaWYgKGxvb2thaGVhZC50eXBlICE9PSB0dC5jb2xvbiAmJiBsb29rYWhlYWQudHlwZSAhPT0gdHQucXVlc3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgaXNTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhcmlhbmNlID0gdGhpcy5mbG93UGFyc2VWYXJpYW5jZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmVhdCh0dC5icmFja2V0TCkpIHtcbiAgICAgICAgICBpZiAocHJvdG9TdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQocHJvdG9TdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmVhdCh0dC5icmFja2V0TCkpIHtcbiAgICAgICAgICAgIGlmICh2YXJpYW5jZSkge1xuICAgICAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQodmFyaWFuY2Uuc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZVN0YXJ0LmludGVybmFsU2xvdHMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlSW50ZXJuYWxTbG90KG5vZGUsIGlzU3RhdGljKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVTdGFydC5pbmRleGVycy5wdXNoKFxuICAgICAgICAgICAgICB0aGlzLmZsb3dQYXJzZU9iamVjdFR5cGVJbmRleGVyKG5vZGUsIGlzU3RhdGljLCB2YXJpYW5jZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuTCkgfHwgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgICAgaWYgKHByb3RvU3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmV4cGVjdGVkKHByb3RvU3RhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFyaWFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMudW5leHBlY3RlZCh2YXJpYW5jZS5zdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVTdGFydC5jYWxsUHJvcGVydGllcy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlQ2FsbFByb3BlcnR5KG5vZGUsIGlzU3RhdGljKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBraW5kID0gXCJpbml0XCI7XG5cbiAgICAgICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJnZXRcIikgfHwgdGhpcy5pc0NvbnRleHR1YWwoXCJzZXRcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvb2thaGVhZCA9IHRoaXMubG9va2FoZWFkKCk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGxvb2thaGVhZC50eXBlID09PSB0dC5uYW1lIHx8XG4gICAgICAgICAgICAgIGxvb2thaGVhZC50eXBlID09PSB0dC5zdHJpbmcgfHxcbiAgICAgICAgICAgICAgbG9va2FoZWFkLnR5cGUgPT09IHR0Lm51bVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGtpbmQgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwcm9wT3JJbmV4YWN0ID0gdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlUHJvcGVydHkoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgaXNTdGF0aWMsXG4gICAgICAgICAgICBwcm90b1N0YXJ0LFxuICAgICAgICAgICAgdmFyaWFuY2UsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgYWxsb3dTcHJlYWQsXG4gICAgICAgICAgICBhbGxvd0luZXhhY3QgPz8gIWV4YWN0LFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAocHJvcE9ySW5leGFjdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaW5leGFjdCA9IHRydWU7XG4gICAgICAgICAgICBpbmV4YWN0U3RhcnQgPSB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZVN0YXJ0LnByb3BlcnRpZXMucHVzaChwcm9wT3JJbmV4YWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZsb3dPYmplY3RUeXBlU2VtaWNvbG9uKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluZXhhY3RTdGFydCAmJlxuICAgICAgICAgICF0aGlzLm1hdGNoKHR0LmJyYWNlUikgJiZcbiAgICAgICAgICAhdGhpcy5tYXRjaCh0dC5icmFjZUJhclIpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICBpbmV4YWN0U3RhcnQsXG4gICAgICAgICAgICBGbG93RXJyb3JzLlVuZXhwZWN0ZWRFeHBsaWNpdEluZXhhY3RJbk9iamVjdCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZXhwZWN0KGVuZERlbGltKTtcblxuICAgICAgLyogVGhlIGluZXhhY3QgZmxhZyBzaG91bGQgb25seSBiZSBhZGRlZCBvbiBPYmplY3RUeXBlQW5ub3RhdGlvbnMgdGhhdFxuICAgICAgICogYXJlIG5vdCB0aGUgYm9keSBvZiBhbiBpbnRlcmZhY2UsIGRlY2xhcmUgaW50ZXJmYWNlLCBvciBkZWNsYXJlIGNsYXNzLlxuICAgICAgICogU2luY2Ugc3ByZWFkcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCB0eXBlcywgY2hlY2tpbmcgdGhhdCBpc1xuICAgICAgICogc3VmZmljaWVudCBoZXJlLlxuICAgICAgICovXG4gICAgICBpZiAoYWxsb3dTcHJlYWQpIHtcbiAgICAgICAgbm9kZVN0YXJ0LmluZXhhY3QgPSBpbmV4YWN0O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvdXQgPSB0aGlzLmZpbmlzaE5vZGUobm9kZVN0YXJ0LCBcIk9iamVjdFR5cGVBbm5vdGF0aW9uXCIpO1xuXG4gICAgICB0aGlzLnN0YXRlLmluVHlwZSA9IG9sZEluVHlwZTtcblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VPYmplY3RUeXBlUHJvcGVydHkoXG4gICAgICBub2RlOiBOLkZsb3dPYmplY3RUeXBlUHJvcGVydHkgfCBOLkZsb3dPYmplY3RUeXBlU3ByZWFkUHJvcGVydHksXG4gICAgICBpc1N0YXRpYzogYm9vbGVhbixcbiAgICAgIHByb3RvU3RhcnQ6ID9udW1iZXIsXG4gICAgICB2YXJpYW5jZTogP04uRmxvd1ZhcmlhbmNlLFxuICAgICAga2luZDogc3RyaW5nLFxuICAgICAgYWxsb3dTcHJlYWQ6IGJvb2xlYW4sXG4gICAgICBhbGxvd0luZXhhY3Q6IGJvb2xlYW4sXG4gICAgKTogKE4uRmxvd09iamVjdFR5cGVQcm9wZXJ0eSB8IE4uRmxvd09iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eSkgfCBudWxsIHtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5lbGxpcHNpcykpIHtcbiAgICAgICAgY29uc3QgaXNJbmV4YWN0VG9rZW4gPVxuICAgICAgICAgIHRoaXMubWF0Y2godHQuY29tbWEpIHx8XG4gICAgICAgICAgdGhpcy5tYXRjaCh0dC5zZW1pKSB8fFxuICAgICAgICAgIHRoaXMubWF0Y2godHQuYnJhY2VSKSB8fFxuICAgICAgICAgIHRoaXMubWF0Y2godHQuYnJhY2VCYXJSKTtcblxuICAgICAgICBpZiAoaXNJbmV4YWN0VG9rZW4pIHtcbiAgICAgICAgICBpZiAoIWFsbG93U3ByZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCxcbiAgICAgICAgICAgICAgRmxvd0Vycm9ycy5JbmV4YWN0SW5zaWRlTm9uT2JqZWN0LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFhbGxvd0luZXhhY3QpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQsIEZsb3dFcnJvcnMuSW5leGFjdEluc2lkZUV4YWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhcmlhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKHZhcmlhbmNlLnN0YXJ0LCBGbG93RXJyb3JzLkluZXhhY3RWYXJpYW5jZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFsbG93U3ByZWFkKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCwgRmxvd0Vycm9ycy5VbmV4cGVjdGVkU3ByZWFkVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3RvU3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMudW5leHBlY3RlZChwcm90b1N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFyaWFuY2UpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHZhcmlhbmNlLnN0YXJ0LCBGbG93RXJyb3JzLlNwcmVhZFZhcmlhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLmZsb3dQYXJzZVR5cGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk9iamVjdFR5cGVTcHJlYWRQcm9wZXJ0eVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUua2V5ID0gdGhpcy5mbG93UGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuICAgICAgICBub2RlLnN0YXRpYyA9IGlzU3RhdGljO1xuICAgICAgICBub2RlLnByb3RvID0gcHJvdG9TdGFydCAhPSBudWxsO1xuICAgICAgICBub2RlLmtpbmQgPSBraW5kO1xuXG4gICAgICAgIGxldCBvcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpIHx8IHRoaXMubWF0Y2godHQucGFyZW5MKSkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2QgcHJvcGVydHlcbiAgICAgICAgICBub2RlLm1ldGhvZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAocHJvdG9TdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQocHJvdG9TdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YXJpYW5jZSkge1xuICAgICAgICAgICAgdGhpcy51bmV4cGVjdGVkKHZhcmlhbmNlLnN0YXJ0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlLnZhbHVlID0gdGhpcy5mbG93UGFyc2VPYmplY3RUeXBlTWV0aG9kaXNoKFxuICAgICAgICAgICAgdGhpcy5zdGFydE5vZGVBdChub2RlLnN0YXJ0LCBub2RlLmxvYy5zdGFydCksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJnZXRcIiB8fCBraW5kID09PSBcInNldFwiKSB7XG4gICAgICAgICAgICB0aGlzLmZsb3dDaGVja0dldHRlclNldHRlclBhcmFtcyhub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGtpbmQgIT09IFwiaW5pdFwiKSB0aGlzLnVuZXhwZWN0ZWQoKTtcblxuICAgICAgICAgIG5vZGUubWV0aG9kID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XG4gICAgICAgICAgICBvcHRpb25hbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUudmFsdWUgPSB0aGlzLmZsb3dQYXJzZVR5cGVJbml0aWFsaXNlcigpO1xuICAgICAgICAgIG5vZGUudmFyaWFuY2UgPSB2YXJpYW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUub3B0aW9uYWwgPSBvcHRpb25hbDtcblxuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiT2JqZWN0VHlwZVByb3BlcnR5XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgc2ltaWxhciB0byBjaGVja0dldHRlclNldHRlclBhcmFtcywgYnV0IGFzXG4gICAgLy8gQGJhYmVsL3BhcnNlciB1c2VzIG5vbiBlc3RyZWUgcHJvcGVydGllcyB3ZSBjYW5ub3QgcmV1c2UgaXQgaGVyZVxuICAgIGZsb3dDaGVja0dldHRlclNldHRlclBhcmFtcyhcbiAgICAgIHByb3BlcnR5OiBOLkZsb3dPYmplY3RUeXBlUHJvcGVydHkgfCBOLkZsb3dPYmplY3RUeXBlU3ByZWFkUHJvcGVydHksXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBwYXJhbUNvdW50ID0gcHJvcGVydHkua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICAgICAgY29uc3Qgc3RhcnQgPSBwcm9wZXJ0eS5zdGFydDtcbiAgICAgIGNvbnN0IGxlbmd0aCA9XG4gICAgICAgIHByb3BlcnR5LnZhbHVlLnBhcmFtcy5sZW5ndGggKyAocHJvcGVydHkudmFsdWUucmVzdCA/IDEgOiAwKTtcbiAgICAgIGlmIChsZW5ndGggIT09IHBhcmFtQ291bnQpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmtpbmQgPT09IFwiZ2V0XCIpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuQmFkR2V0dGVyQXJpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5CYWRTZXR0ZXJBcml0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5LmtpbmQgPT09IFwic2V0XCIgJiYgcHJvcGVydHkudmFsdWUucmVzdCkge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuQmFkU2V0dGVyUmVzdFBhcmFtZXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmxvd09iamVjdFR5cGVTZW1pY29sb24oKTogdm9pZCB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLmVhdCh0dC5zZW1pKSAmJlxuICAgICAgICAhdGhpcy5lYXQodHQuY29tbWEpICYmXG4gICAgICAgICF0aGlzLm1hdGNoKHR0LmJyYWNlUikgJiZcbiAgICAgICAgIXRoaXMubWF0Y2godHQuYnJhY2VCYXJSKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZsb3dQYXJzZVF1YWxpZmllZFR5cGVJZGVudGlmaWVyKFxuICAgICAgc3RhcnRQb3M/OiBudW1iZXIsXG4gICAgICBzdGFydExvYz86IFBvc2l0aW9uLFxuICAgICAgaWQ/OiBOLklkZW50aWZpZXIsXG4gICAgKTogTi5GbG93UXVhbGlmaWVkVHlwZUlkZW50aWZpZXIge1xuICAgICAgc3RhcnRQb3MgPSBzdGFydFBvcyB8fCB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgc3RhcnRMb2MgPSBzdGFydExvYyB8fCB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgbGV0IG5vZGUgPSBpZCB8fCB0aGlzLmZsb3dQYXJzZVJlc3RyaWN0ZWRJZGVudGlmaWVyKHRydWUpO1xuXG4gICAgICB3aGlsZSAodGhpcy5lYXQodHQuZG90KSkge1xuICAgICAgICBjb25zdCBub2RlMiA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgbm9kZTIucXVhbGlmaWNhdGlvbiA9IG5vZGU7XG4gICAgICAgIG5vZGUyLmlkID0gdGhpcy5mbG93UGFyc2VSZXN0cmljdGVkSWRlbnRpZmllcih0cnVlKTtcbiAgICAgICAgbm9kZSA9IHRoaXMuZmluaXNoTm9kZShub2RlMiwgXCJRdWFsaWZpZWRUeXBlSWRlbnRpZmllclwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlR2VuZXJpY1R5cGUoXG4gICAgICBzdGFydFBvczogbnVtYmVyLFxuICAgICAgc3RhcnRMb2M6IFBvc2l0aW9uLFxuICAgICAgaWQ6IE4uSWRlbnRpZmllcixcbiAgICApOiBOLkZsb3dHZW5lcmljVHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcblxuICAgICAgbm9kZS50eXBlUGFyYW1ldGVycyA9IG51bGw7XG4gICAgICBub2RlLmlkID0gdGhpcy5mbG93UGFyc2VRdWFsaWZpZWRUeXBlSWRlbnRpZmllcihzdGFydFBvcywgc3RhcnRMb2MsIGlkKTtcblxuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiR2VuZXJpY1R5cGVBbm5vdGF0aW9uXCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZVR5cGVvZlR5cGUoKTogTi5GbG93VHlwZW9mVHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5fdHlwZW9mKTtcbiAgICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLmZsb3dQYXJzZVByaW1hcnlUeXBlKCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHlwZW9mVHlwZUFubm90YXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVHVwbGVUeXBlKCk6IE4uRmxvd1R1cGxlVHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLnR5cGVzID0gW107XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0TCk7XG4gICAgICAvLyBXZSBhbGxvdyB0cmFpbGluZyBjb21tYXNcbiAgICAgIHdoaWxlICh0aGlzLnN0YXRlLnBvcyA8IHRoaXMubGVuZ3RoICYmICF0aGlzLm1hdGNoKHR0LmJyYWNrZXRSKSkge1xuICAgICAgICBub2RlLnR5cGVzLnB1c2godGhpcy5mbG93UGFyc2VUeXBlKCkpO1xuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFja2V0UikpIGJyZWFrO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5jb21tYSk7XG4gICAgICB9XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHVwbGVUeXBlQW5ub3RhdGlvblwiKTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VGdW5jdGlvblR5cGVQYXJhbSgpOiBOLkZsb3dGdW5jdGlvblR5cGVQYXJhbSB7XG4gICAgICBsZXQgbmFtZSA9IG51bGw7XG4gICAgICBsZXQgb3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgIGxldCB0eXBlQW5ub3RhdGlvbiA9IG51bGw7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IGxoID0gdGhpcy5sb29rYWhlYWQoKTtcbiAgICAgIGlmIChsaC50eXBlID09PSB0dC5jb2xvbiB8fCBsaC50eXBlID09PSB0dC5xdWVzdGlvbikge1xuICAgICAgICBuYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuZWF0KHR0LnF1ZXN0aW9uKSkge1xuICAgICAgICAgIG9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUluaXRpYWxpc2VyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZSgpO1xuICAgICAgfVxuICAgICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgICAgIG5vZGUub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0eXBlQW5ub3RhdGlvbjtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGdW5jdGlvblR5cGVQYXJhbVwiKTtcbiAgICB9XG5cbiAgICByZWludGVycHJldFR5cGVBc0Z1bmN0aW9uVHlwZVBhcmFtKFxuICAgICAgdHlwZTogTi5GbG93VHlwZSxcbiAgICApOiBOLkZsb3dGdW5jdGlvblR5cGVQYXJhbSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdCh0eXBlLnN0YXJ0LCB0eXBlLmxvYy5zdGFydCk7XG4gICAgICBub2RlLm5hbWUgPSBudWxsO1xuICAgICAgbm9kZS5vcHRpb25hbCA9IGZhbHNlO1xuICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHR5cGU7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRnVuY3Rpb25UeXBlUGFyYW1cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW1zKFxuICAgICAgcGFyYW1zOiBOLkZsb3dGdW5jdGlvblR5cGVQYXJhbVtdID0gW10sXG4gICAgKTogeyBwYXJhbXM6IE4uRmxvd0Z1bmN0aW9uVHlwZVBhcmFtW10sIHJlc3Q6ID9OLkZsb3dGdW5jdGlvblR5cGVQYXJhbSB9IHtcbiAgICAgIGxldCByZXN0OiA/Ti5GbG93RnVuY3Rpb25UeXBlUGFyYW0gPSBudWxsO1xuICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKHR0LnBhcmVuUikgJiYgIXRoaXMubWF0Y2godHQuZWxsaXBzaXMpKSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW0oKSk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5wYXJlblIpKSB7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lYXQodHQuZWxsaXBzaXMpKSB7XG4gICAgICAgIHJlc3QgPSB0aGlzLmZsb3dQYXJzZUZ1bmN0aW9uVHlwZVBhcmFtKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBwYXJhbXMsIHJlc3QgfTtcbiAgICB9XG5cbiAgICBmbG93SWRlbnRUb1R5cGVBbm5vdGF0aW9uKFxuICAgICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICAgIG5vZGU6IE4uRmxvd1R5cGVBbm5vdGF0aW9uLFxuICAgICAgaWQ6IE4uSWRlbnRpZmllcixcbiAgICApOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBzd2l0Y2ggKGlkLm5hbWUpIHtcbiAgICAgICAgY2FzZSBcImFueVwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBbnlUeXBlQW5ub3RhdGlvblwiKTtcblxuICAgICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJCb29sZWFuVHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgY2FzZSBcIm1peGVkXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk1peGVkVHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgY2FzZSBcImVtcHR5XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVtcHR5VHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJOdW1iZXJUeXBlQW5ub3RhdGlvblwiKTtcblxuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlN0cmluZ1R5cGVBbm5vdGF0aW9uXCIpO1xuXG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3ltYm9sVHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLmNoZWNrTm90VW5kZXJzY29yZShpZC5uYW1lKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VHZW5lcmljVHlwZShzdGFydFBvcywgc3RhcnRMb2MsIGlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGUgcGFyc2luZyBvZiB0eXBlcyByb3VnaGx5IHBhcmFsbGVscyB0aGUgcGFyc2luZyBvZiBleHByZXNzaW9ucywgYW5kXG4gICAgLy8gcHJpbWFyeSB0eXBlcyBhcmUga2luZCBvZiBsaWtlIHByaW1hcnkgZXhwcmVzc2lvbnMuLi50aGV5J3JlIHRoZVxuICAgIC8vIHByaW1pdGl2ZXMgd2l0aCB3aGljaCBvdGhlciB0eXBlcyBhcmUgY29uc3RydWN0ZWQuXG4gICAgZmxvd1BhcnNlUHJpbWFyeVR5cGUoKTogTi5GbG93VHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBsZXQgdG1wO1xuICAgICAgbGV0IHR5cGU7XG4gICAgICBsZXQgaXNHcm91cGVkVHlwZSA9IGZhbHNlO1xuICAgICAgY29uc3Qgb2xkTm9Bbm9uRnVuY3Rpb25UeXBlID0gdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGU7XG5cbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHQubmFtZTpcbiAgICAgICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJpbnRlcmZhY2VcIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZUludGVyZmFjZVR5cGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5mbG93SWRlbnRUb1R5cGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICB0aGlzLnBhcnNlSWRlbnRpZmllcigpLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgY2FzZSB0dC5icmFjZUw6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlT2JqZWN0VHlwZSh7XG4gICAgICAgICAgICBhbGxvd1N0YXRpYzogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd0V4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93U3ByZWFkOiB0cnVlLFxuICAgICAgICAgICAgYWxsb3dQcm90bzogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd0luZXhhY3Q6IHRydWUsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSB0dC5icmFjZUJhckw6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlT2JqZWN0VHlwZSh7XG4gICAgICAgICAgICBhbGxvd1N0YXRpYzogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd0V4YWN0OiB0cnVlLFxuICAgICAgICAgICAgYWxsb3dTcHJlYWQ6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1Byb3RvOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93SW5leGFjdDogZmFsc2UsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSB0dC5icmFja2V0TDpcbiAgICAgICAgICB0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IGZhbHNlO1xuICAgICAgICAgIHR5cGUgPSB0aGlzLmZsb3dQYXJzZVR1cGxlVHlwZSgpO1xuICAgICAgICAgIHRoaXMuc3RhdGUubm9Bbm9uRnVuY3Rpb25UeXBlID0gb2xkTm9Bbm9uRnVuY3Rpb25UeXBlO1xuICAgICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICAgIGNhc2UgdHQucmVsYXRpb25hbDpcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5MKTtcbiAgICAgICAgICAgIHRtcCA9IHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW1zKCk7XG4gICAgICAgICAgICBub2RlLnBhcmFtcyA9IHRtcC5wYXJhbXM7XG4gICAgICAgICAgICBub2RlLnJlc3QgPSB0bXAucmVzdDtcbiAgICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG5cbiAgICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmFycm93KTtcblxuICAgICAgICAgICAgbm9kZS5yZXR1cm5UeXBlID0gdGhpcy5mbG93UGFyc2VUeXBlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGdW5jdGlvblR5cGVBbm5vdGF0aW9uXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHR0LnBhcmVuTDpcbiAgICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGlzIGlzIGFjdHVhbGx5IGEgZ3JvdXBlZCB0eXBlXG4gICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnBhcmVuUikgJiYgIXRoaXMubWF0Y2godHQuZWxsaXBzaXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5uYW1lKSkge1xuICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMubG9va2FoZWFkKCkudHlwZTtcbiAgICAgICAgICAgICAgaXNHcm91cGVkVHlwZSA9IHRva2VuICE9PSB0dC5xdWVzdGlvbiAmJiB0b2tlbiAhPT0gdHQuY29sb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpc0dyb3VwZWRUeXBlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNHcm91cGVkVHlwZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLmZsb3dQYXJzZVR5cGUoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubm9Bbm9uRnVuY3Rpb25UeXBlID0gb2xkTm9Bbm9uRnVuY3Rpb25UeXBlO1xuXG4gICAgICAgICAgICAvLyBBIGAsYCBvciBhIGApID0+YCBtZWFucyB0aGlzIGlzIGFuIGFub255bW91cyBmdW5jdGlvbiB0eXBlXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUubm9Bbm9uRnVuY3Rpb25UeXBlIHx8XG4gICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaCh0dC5jb21tYSkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5tYXRjaCh0dC5wYXJlblIpICYmIHRoaXMubG9va2FoZWFkKCkudHlwZSA9PT0gdHQuYXJyb3cpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpO1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIEVhdCBhIGNvbW1hIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICAgICAgICB0aGlzLmVhdCh0dC5jb21tYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRtcCA9IHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW1zKFtcbiAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldFR5cGVBc0Z1bmN0aW9uVHlwZVBhcmFtKHR5cGUpLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRtcCA9IHRoaXMuZmxvd1BhcnNlRnVuY3Rpb25UeXBlUGFyYW1zKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZS5wYXJhbXMgPSB0bXAucGFyYW1zO1xuICAgICAgICAgIG5vZGUucmVzdCA9IHRtcC5yZXN0O1xuXG4gICAgICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5SKTtcblxuICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmFycm93KTtcblxuICAgICAgICAgIG5vZGUucmV0dXJuVHlwZSA9IHRoaXMuZmxvd1BhcnNlVHlwZSgpO1xuXG4gICAgICAgICAgbm9kZS50eXBlUGFyYW1ldGVycyA9IG51bGw7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRnVuY3Rpb25UeXBlQW5ub3RhdGlvblwiKTtcblxuICAgICAgICBjYXNlIHR0LnN0cmluZzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgXCJTdHJpbmdMaXRlcmFsVHlwZUFubm90YXRpb25cIixcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNhc2UgdHQuX3RydWU6XG4gICAgICAgIGNhc2UgdHQuX2ZhbHNlOlxuICAgICAgICAgIG5vZGUudmFsdWUgPSB0aGlzLm1hdGNoKHR0Ll90cnVlKTtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQm9vbGVhbkxpdGVyYWxUeXBlQW5ub3RhdGlvblwiKTtcblxuICAgICAgICBjYXNlIHR0LnBsdXNNaW46XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUudmFsdWUgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKHR0Lm51bSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKFxuICAgICAgICAgICAgICAgIC10aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwiTnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCIsXG4gICAgICAgICAgICAgICAgbm9kZS5zdGFydCxcbiAgICAgICAgICAgICAgICBub2RlLmxvYy5zdGFydCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuYmlnaW50KSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwoXG4gICAgICAgICAgICAgICAgLXRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJCaWdJbnRMaXRlcmFsVHlwZUFubm90YXRpb25cIixcbiAgICAgICAgICAgICAgICBub2RlLnN0YXJ0LFxuICAgICAgICAgICAgICAgIG5vZGUubG9jLnN0YXJ0LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnN0YXJ0LFxuICAgICAgICAgICAgICBGbG93RXJyb3JzLlVuZXhwZWN0ZWRTdWJ0cmFjdGlvbk9wZXJhbmQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgICBjYXNlIHR0Lm51bTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgXCJOdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb25cIixcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNhc2UgdHQuYmlnaW50OlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlTGl0ZXJhbChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICBcIkJpZ0ludExpdGVyYWxUeXBlQW5ub3RhdGlvblwiLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgY2FzZSB0dC5fdm9pZDpcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVm9pZFR5cGVBbm5vdGF0aW9uXCIpO1xuXG4gICAgICAgIGNhc2UgdHQuX251bGw6XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk51bGxMaXRlcmFsVHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgY2FzZSB0dC5fdGhpczpcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVGhpc1R5cGVBbm5vdGF0aW9uXCIpO1xuXG4gICAgICAgIGNhc2UgdHQuc3RhcjpcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhpc3RzVHlwZUFubm90YXRpb25cIik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS50eXBlLmtleXdvcmQgPT09IFwidHlwZW9mXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZVR5cGVvZlR5cGUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudHlwZS5rZXl3b3JkKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuc3RhdGUudHlwZS5sYWJlbDtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUlkZW50aWZpZXIobm9kZSwgbGFiZWwpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlUG9zdGZpeFR5cGUoKTogTi5GbG93VHlwZUFubm90YXRpb24ge1xuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0LFxuICAgICAgICBzdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgICBsZXQgdHlwZSA9IHRoaXMuZmxvd1BhcnNlUHJpbWFyeVR5cGUoKTtcbiAgICAgIHdoaWxlICh0aGlzLm1hdGNoKHR0LmJyYWNrZXRMKSAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICBub2RlLmVsZW1lbnRUeXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldEwpO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICAgIHR5cGUgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheVR5cGVBbm5vdGF0aW9uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlUHJlZml4VHlwZSgpOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5xdWVzdGlvbikpIHtcbiAgICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlUHJlZml4VHlwZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTnVsbGFibGVUeXBlQW5ub3RhdGlvblwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZVBvc3RmaXhUeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlQW5vbkZ1bmN0aW9uV2l0aG91dFBhcmVucygpOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBjb25zdCBwYXJhbSA9IHRoaXMuZmxvd1BhcnNlUHJlZml4VHlwZSgpO1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZSAmJiB0aGlzLmVhdCh0dC5hcnJvdykpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgYSB0eXBlIGVycm9yLiBQYXNzaW5nIGluIGEgU291cmNlTG9jYXRpb24sIGFuZCBpdCBleHBlY3RzIGEgUG9zaXRpb24uXG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHBhcmFtLnN0YXJ0LCBwYXJhbS5sb2Muc3RhcnQpO1xuICAgICAgICBub2RlLnBhcmFtcyA9IFt0aGlzLnJlaW50ZXJwcmV0VHlwZUFzRnVuY3Rpb25UeXBlUGFyYW0ocGFyYW0pXTtcbiAgICAgICAgbm9kZS5yZXN0ID0gbnVsbDtcbiAgICAgICAgbm9kZS5yZXR1cm5UeXBlID0gdGhpcy5mbG93UGFyc2VUeXBlKCk7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRnVuY3Rpb25UeXBlQW5ub3RhdGlvblwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9XG5cbiAgICBmbG93UGFyc2VJbnRlcnNlY3Rpb25UeXBlKCk6IE4uRmxvd1R5cGVBbm5vdGF0aW9uIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5lYXQodHQuYml0d2lzZUFORCk7XG4gICAgICBjb25zdCB0eXBlID0gdGhpcy5mbG93UGFyc2VBbm9uRnVuY3Rpb25XaXRob3V0UGFyZW5zKCk7XG4gICAgICBub2RlLnR5cGVzID0gW3R5cGVdO1xuICAgICAgd2hpbGUgKHRoaXMuZWF0KHR0LmJpdHdpc2VBTkQpKSB7XG4gICAgICAgIG5vZGUudHlwZXMucHVzaCh0aGlzLmZsb3dQYXJzZUFub25GdW5jdGlvbldpdGhvdXRQYXJlbnMoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZS50eXBlcy5sZW5ndGggPT09IDFcbiAgICAgICAgPyB0eXBlXG4gICAgICAgIDogdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSW50ZXJzZWN0aW9uVHlwZUFubm90YXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVW5pb25UeXBlKCk6IE4uRmxvd1R5cGVBbm5vdGF0aW9uIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5lYXQodHQuYml0d2lzZU9SKTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmZsb3dQYXJzZUludGVyc2VjdGlvblR5cGUoKTtcbiAgICAgIG5vZGUudHlwZXMgPSBbdHlwZV07XG4gICAgICB3aGlsZSAodGhpcy5lYXQodHQuYml0d2lzZU9SKSkge1xuICAgICAgICBub2RlLnR5cGVzLnB1c2godGhpcy5mbG93UGFyc2VJbnRlcnNlY3Rpb25UeXBlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUudHlwZXMubGVuZ3RoID09PSAxXG4gICAgICAgID8gdHlwZVxuICAgICAgICA6IHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlVuaW9uVHlwZUFubm90YXRpb25cIik7XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVHlwZSgpOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBjb25zdCBvbGRJblR5cGUgPSB0aGlzLnN0YXRlLmluVHlwZTtcbiAgICAgIHRoaXMuc3RhdGUuaW5UeXBlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmZsb3dQYXJzZVVuaW9uVHlwZSgpO1xuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSBvbGRJblR5cGU7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhIGJyYWNlIGFmdGVyIGEgZnVuY3Rpb24gZ2VuZXJpYyB0eXBlIGFubm90YXRpb24gaXMgYVxuICAgICAgLy8gc3RhdGVtZW50LCBleGNlcHQgaW4gYXJyb3cgZnVuY3Rpb25zIChub0Fub25GdW5jdGlvblR5cGUpXG4gICAgICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID1cbiAgICAgICAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCB8fCB0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZTtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZVR5cGVPckltcGxpY2l0SW5zdGFudGlhdGlvbigpOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS50eXBlID09PSB0dC5uYW1lICYmIHRoaXMuc3RhdGUudmFsdWUgPT09IFwiX1wiKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlR2VuZXJpY1R5cGUoc3RhcnRQb3MsIHN0YXJ0TG9jLCBub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZVR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmbG93UGFyc2VUeXBlQW5ub3RhdGlvbigpOiBOLkZsb3dUeXBlQW5ub3RhdGlvbiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0aGlzLmZsb3dQYXJzZVR5cGVJbml0aWFsaXNlcigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlR5cGVBbm5vdGF0aW9uXCIpO1xuICAgIH1cblxuICAgIGZsb3dQYXJzZVR5cGVBbm5vdGF0YWJsZUlkZW50aWZpZXIoXG4gICAgICBhbGxvd1ByaW1pdGl2ZU92ZXJyaWRlPzogYm9vbGVhbixcbiAgICApOiBOLklkZW50aWZpZXIge1xuICAgICAgY29uc3QgaWRlbnQgPSBhbGxvd1ByaW1pdGl2ZU92ZXJyaWRlXG4gICAgICAgID8gdGhpcy5wYXJzZUlkZW50aWZpZXIoKVxuICAgICAgICA6IHRoaXMuZmxvd1BhcnNlUmVzdHJpY3RlZElkZW50aWZpZXIoKTtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICBpZGVudC50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5yZXNldEVuZExvY2F0aW9uKGlkZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpZGVudDtcbiAgICB9XG5cbiAgICB0eXBlQ2FzdFRvUGFyYW1ldGVyKG5vZGU6IE4uTm9kZSk6IE4uTm9kZSB7XG4gICAgICBub2RlLmV4cHJlc3Npb24udHlwZUFubm90YXRpb24gPSBub2RlLnR5cGVBbm5vdGF0aW9uO1xuXG4gICAgICB0aGlzLnJlc2V0RW5kTG9jYXRpb24oXG4gICAgICAgIG5vZGUuZXhwcmVzc2lvbixcbiAgICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbi5lbmQsXG4gICAgICAgIG5vZGUudHlwZUFubm90YXRpb24ubG9jLmVuZCxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBub2RlLmV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgZmxvd1BhcnNlVmFyaWFuY2UoKTogP04uRmxvd1ZhcmlhbmNlIHtcbiAgICAgIGxldCB2YXJpYW5jZSA9IG51bGw7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wbHVzTWluKSkge1xuICAgICAgICB2YXJpYW5jZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlID09PSBcIitcIikge1xuICAgICAgICAgIHZhcmlhbmNlLmtpbmQgPSBcInBsdXNcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXJpYW5jZS5raW5kID0gXCJtaW51c1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB0aGlzLmZpbmlzaE5vZGUodmFyaWFuY2UsIFwiVmFyaWFuY2VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFyaWFuY2U7XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIE92ZXJyaWRlc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIHBhcnNlRnVuY3Rpb25Cb2R5KFxuICAgICAgbm9kZTogTi5GdW5jdGlvbixcbiAgICAgIGFsbG93RXhwcmVzc2lvbkJvZHk6ID9ib29sZWFuLFxuICAgICAgaXNNZXRob2Q/OiBib29sZWFuID0gZmFsc2UsXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAoYWxsb3dFeHByZXNzaW9uQm9keSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3J3YXJkTm9BcnJvd1BhcmFtc0NvbnZlcnNpb25BdChub2RlLCAoKSA9PlxuICAgICAgICAgIHN1cGVyLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIHRydWUsIGlzTWV0aG9kKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIGZhbHNlLCBpc01ldGhvZCk7XG4gICAgfVxuXG4gICAgcGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2goXG4gICAgICBub2RlOiBOLkJvZGlsZXNzRnVuY3Rpb25Pck1ldGhvZEJhc2UsXG4gICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICBpc01ldGhvZD86IGJvb2xlYW4gPSBmYWxzZSxcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICBjb25zdCB0eXBlTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgICAgW1xuICAgICAgICAgIC8vICRGbG93Rml4TWUgKGRlc3RydWN0dXJpbmcgbm90IHN1cHBvcnRlZCB5ZXQpXG4gICAgICAgICAgdHlwZU5vZGUudHlwZUFubm90YXRpb24sXG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSAoZGVzdHJ1Y3R1cmluZyBub3Qgc3VwcG9ydGVkIHlldClcbiAgICAgICAgICBub2RlLnByZWRpY2F0ZSxcbiAgICAgICAgXSA9IHRoaXMuZmxvd1BhcnNlVHlwZUFuZFByZWRpY2F0ZUluaXRpYWxpc2VyKCk7XG5cbiAgICAgICAgbm9kZS5yZXR1cm5UeXBlID0gdHlwZU5vZGUudHlwZUFubm90YXRpb25cbiAgICAgICAgICA/IHRoaXMuZmluaXNoTm9kZSh0eXBlTm9kZSwgXCJUeXBlQW5ub3RhdGlvblwiKVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgc3VwZXIucGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2gobm9kZSwgdHlwZSwgaXNNZXRob2QpO1xuICAgIH1cblxuICAgIC8vIGludGVyZmFjZXMgYW5kIGVudW1zXG4gICAgcGFyc2VTdGF0ZW1lbnQoY29udGV4dDogP3N0cmluZywgdG9wTGV2ZWw/OiBib29sZWFuKTogTi5TdGF0ZW1lbnQge1xuICAgICAgLy8gc3RyaWN0IG1vZGUgaGFuZGxpbmcgb2YgYGludGVyZmFjZWAgc2luY2UgaXQncyBhIHJlc2VydmVkIHdvcmRcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5zdGF0ZS5zdHJpY3QgJiZcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5uYW1lKSAmJlxuICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID09PSBcImludGVyZmFjZVwiXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VJbnRlcmZhY2Uobm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2hvdWxkUGFyc2VFbnVtcygpICYmIHRoaXMuaXNDb250ZXh0dWFsKFwiZW51bVwiKSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZUVudW1EZWNsYXJhdGlvbihub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0bXQgPSBzdXBlci5wYXJzZVN0YXRlbWVudChjb250ZXh0LCB0b3BMZXZlbCk7XG4gICAgICAgIC8vIFdlIHdpbGwgcGFyc2UgYSBmbG93IHByYWdtYSBpbiBhbnkgY29tbWVudCBiZWZvcmUgdGhlIGZpcnN0IHN0YXRlbWVudC5cbiAgICAgICAgaWYgKHRoaXMuZmxvd1ByYWdtYSA9PT0gdW5kZWZpbmVkICYmICF0aGlzLmlzVmFsaWREaXJlY3RpdmUoc3RtdCkpIHtcbiAgICAgICAgICB0aGlzLmZsb3dQcmFnbWEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdG10O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlY2xhcmVzLCBpbnRlcmZhY2VzIGFuZCB0eXBlIGFsaWFzZXNcbiAgICBwYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoXG4gICAgICBub2RlOiBOLkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgICBleHByOiBOLkV4cHJlc3Npb24sXG4gICAgKTogTi5FeHByZXNzaW9uU3RhdGVtZW50IHtcbiAgICAgIGlmIChleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XG4gICAgICAgIGlmIChleHByLm5hbWUgPT09IFwiZGVjbGFyZVwiKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5tYXRjaCh0dC5fY2xhc3MpIHx8XG4gICAgICAgICAgICB0aGlzLm1hdGNoKHR0Lm5hbWUpIHx8XG4gICAgICAgICAgICB0aGlzLm1hdGNoKHR0Ll9mdW5jdGlvbikgfHxcbiAgICAgICAgICAgIHRoaXMubWF0Y2godHQuX3ZhcikgfHxcbiAgICAgICAgICAgIHRoaXMubWF0Y2godHQuX2V4cG9ydClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZURlY2xhcmUobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQubmFtZSkpIHtcbiAgICAgICAgICBpZiAoZXhwci5uYW1lID09PSBcImludGVyZmFjZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VJbnRlcmZhY2Uobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChleHByLm5hbWUgPT09IFwidHlwZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VUeXBlQWxpYXMobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChleHByLm5hbWUgPT09IFwib3BhcXVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZU9wYXF1ZVR5cGUobm9kZSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXIucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUsIGV4cHIpO1xuICAgIH1cblxuICAgIC8vIGV4cG9ydCB0eXBlXG4gICAgc2hvdWxkUGFyc2VFeHBvcnREZWNsYXJhdGlvbigpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuaXNDb250ZXh0dWFsKFwidHlwZVwiKSB8fFxuICAgICAgICB0aGlzLmlzQ29udGV4dHVhbChcImludGVyZmFjZVwiKSB8fFxuICAgICAgICB0aGlzLmlzQ29udGV4dHVhbChcIm9wYXF1ZVwiKSB8fFxuICAgICAgICAodGhpcy5zaG91bGRQYXJzZUVudW1zKCkgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJlbnVtXCIpKSB8fFxuICAgICAgICBzdXBlci5zaG91bGRQYXJzZUV4cG9ydERlY2xhcmF0aW9uKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaXNFeHBvcnREZWZhdWx0U3BlY2lmaWVyKCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm1hdGNoKHR0Lm5hbWUpICYmXG4gICAgICAgICh0aGlzLnN0YXRlLnZhbHVlID09PSBcInR5cGVcIiB8fFxuICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUgPT09IFwiaW50ZXJmYWNlXCIgfHxcbiAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID09PSBcIm9wYXF1ZVwiIHx8XG4gICAgICAgICAgKHRoaXMuc2hvdWxkUGFyc2VFbnVtcygpICYmIHRoaXMuc3RhdGUudmFsdWUgPT09IFwiZW51bVwiKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBlci5pc0V4cG9ydERlZmF1bHRTcGVjaWZpZXIoKTtcbiAgICB9XG5cbiAgICBwYXJzZUV4cG9ydERlZmF1bHRFeHByZXNzaW9uKCk6IE4uRXhwcmVzc2lvbiB8IE4uRGVjbGFyYXRpb24ge1xuICAgICAgaWYgKHRoaXMuc2hvdWxkUGFyc2VFbnVtcygpICYmIHRoaXMuaXNDb250ZXh0dWFsKFwiZW51bVwiKSkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZUVudW1EZWNsYXJhdGlvbihub2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUV4cG9ydERlZmF1bHRFeHByZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgcGFyc2VDb25kaXRpb25hbChcbiAgICAgIGV4cHI6IE4uRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgICApOiBOLkV4cHJlc3Npb24ge1xuICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnF1ZXN0aW9uKSkgcmV0dXJuIGV4cHI7XG5cbiAgICAgIC8vIG9ubHkgdXNlIHRoZSBleHBlbnNpdmUgXCJ0cnlQYXJzZVwiIG1ldGhvZCBpZiB0aGVyZSBpcyBhIHF1ZXN0aW9uIG1hcmtcbiAgICAgIC8vIGFuZCBpZiB3ZSBjb21lIGZyb20gaW5zaWRlIHBhcmVuc1xuICAgICAgaWYgKHJlZk5lZWRzQXJyb3dQb3MpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50cnlQYXJzZSgoKSA9PlxuICAgICAgICAgIHN1cGVyLnBhcnNlQ29uZGl0aW9uYWwoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jKSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIXJlc3VsdC5ub2RlKSB7XG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICByZWZOZWVkc0Fycm93UG9zLnN0YXJ0ID0gcmVzdWx0LmVycm9yLnBvcyB8fCB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICAgIHJldHVybiBleHByO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhpcy5zdGF0ZSA9IHJlc3VsdC5mYWlsU3RhdGU7XG4gICAgICAgIHJldHVybiByZXN1bHQubm9kZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QodHQucXVlc3Rpb24pO1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLmNsb25lKCk7XG4gICAgICBjb25zdCBvcmlnaW5hbE5vQXJyb3dBdCA9IHRoaXMuc3RhdGUubm9BcnJvd0F0O1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIGxldCB7IGNvbnNlcXVlbnQsIGZhaWxlZCB9ID0gdGhpcy50cnlQYXJzZUNvbmRpdGlvbmFsQ29uc2VxdWVudCgpO1xuICAgICAgbGV0IFt2YWxpZCwgaW52YWxpZF0gPSB0aGlzLmdldEFycm93TGlrZUV4cHJlc3Npb25zKGNvbnNlcXVlbnQpO1xuXG4gICAgICBpZiAoZmFpbGVkIHx8IGludmFsaWQubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBub0Fycm93QXQgPSBbLi4ub3JpZ2luYWxOb0Fycm93QXRdO1xuXG4gICAgICAgIGlmIChpbnZhbGlkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93QXQgPSBub0Fycm93QXQ7XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGludmFsaWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5vQXJyb3dBdC5wdXNoKGludmFsaWRbaV0uc3RhcnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICh7IGNvbnNlcXVlbnQsIGZhaWxlZCB9ID0gdGhpcy50cnlQYXJzZUNvbmRpdGlvbmFsQ29uc2VxdWVudCgpKTtcbiAgICAgICAgICBbdmFsaWQsIGludmFsaWRdID0gdGhpcy5nZXRBcnJvd0xpa2VFeHByZXNzaW9ucyhjb25zZXF1ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmYWlsZWQgJiYgdmFsaWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSB0d28gb3IgbW9yZSBwb3NzaWJsZSBjb3JyZWN0IHdheXMgb2YgcGFyc2luZywgdGhyb3cgYW5cbiAgICAgICAgICAvLyBlcnJvci5cbiAgICAgICAgICAvLyBlLmcuICAgU291cmNlOiBhID8gKGIpOiBjID0+IChkKTogZSA9PiBmXG4gICAgICAgICAgLy8gICAgICBSZXN1bHQgMTogYSA/IGIgOiAoYyA9PiAoKGQpOiBlID0+IGYpKVxuICAgICAgICAgIC8vICAgICAgUmVzdWx0IDI6IGEgPyAoKGIpOiBjID0+IGQpIDogKGUgPT4gZilcbiAgICAgICAgICB0aGlzLnJhaXNlKHN0YXRlLnN0YXJ0LCBGbG93RXJyb3JzLkFtYmlndW91c0NvbmRpdGlvbmFsQXJyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZhaWxlZCAmJiB2YWxpZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93QXQgPSBub0Fycm93QXQuY29uY2F0KHZhbGlkWzBdLnN0YXJ0KTtcbiAgICAgICAgICAoeyBjb25zZXF1ZW50LCBmYWlsZWQgfSA9IHRoaXMudHJ5UGFyc2VDb25kaXRpb25hbENvbnNlcXVlbnQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5nZXRBcnJvd0xpa2VFeHByZXNzaW9ucyhjb25zZXF1ZW50LCB0cnVlKTtcblxuICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93QXQgPSBvcmlnaW5hbE5vQXJyb3dBdDtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbG9uKTtcblxuICAgICAgbm9kZS50ZXN0ID0gZXhwcjtcbiAgICAgIG5vZGUuY29uc2VxdWVudCA9IGNvbnNlcXVlbnQ7XG4gICAgICBub2RlLmFsdGVybmF0ZSA9IHRoaXMuZm9yd2FyZE5vQXJyb3dQYXJhbXNDb252ZXJzaW9uQXQobm9kZSwgKCkgPT5cbiAgICAgICAgdGhpcy5wYXJzZU1heWJlQXNzaWduKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKTtcbiAgICB9XG5cbiAgICB0cnlQYXJzZUNvbmRpdGlvbmFsQ29uc2VxdWVudCgpOiB7XG4gICAgICBjb25zZXF1ZW50OiBOLkV4cHJlc3Npb24sXG4gICAgICBmYWlsZWQ6IGJvb2xlYW4sXG4gICAgfSB7XG4gICAgICB0aGlzLnN0YXRlLm5vQXJyb3dQYXJhbXNDb252ZXJzaW9uQXQucHVzaCh0aGlzLnN0YXRlLnN0YXJ0KTtcblxuICAgICAgY29uc3QgY29uc2VxdWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbkFsbG93SW4oKTtcbiAgICAgIGNvbnN0IGZhaWxlZCA9ICF0aGlzLm1hdGNoKHR0LmNvbG9uKTtcblxuICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93UGFyYW1zQ29udmVyc2lvbkF0LnBvcCgpO1xuXG4gICAgICByZXR1cm4geyBjb25zZXF1ZW50LCBmYWlsZWQgfTtcbiAgICB9XG5cbiAgICAvLyBHaXZlbiBhbiBleHByZXNzaW9uLCB3YWxrcyB0aHJvdWdoIG91dCBpdHMgYXJyb3cgZnVuY3Rpb25zIHdob3NlIGJvZHkgaXNcbiAgICAvLyBhbiBleHByZXNzaW9uIGFuZCB0aHJvdWdoIG91dCBjb25kaXRpb25hbCBleHByZXNzaW9ucy4gSXQgcmV0dXJucyBldmVyeVxuICAgIC8vIGZ1bmN0aW9uIHdoaWNoIGhhcyBiZWVuIHBhcnNlZCB3aXRoIGEgcmV0dXJuIHR5cGUgYnV0IGNvdWxkIGhhdmUgYmVlblxuICAgIC8vIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbnMuXG4gICAgLy8gVGhlc2UgZnVuY3Rpb25zIGFyZSBzZXBhcmF0ZWQgaW50byB0d28gYXJyYXlzOiBvbmUgY29udGFpbmluZyB0aGUgb25lc1xuICAgIC8vIHdob3NlIHBhcmFtZXRlcnMgY2FuIGJlIGNvbnZlcnRlZCB0byBhc3NpZ25hYmxlIGxpc3RzLCBvbmUgY29udGFpbmluZyB0aGVcbiAgICAvLyBvdGhlcnMuXG4gICAgZ2V0QXJyb3dMaWtlRXhwcmVzc2lvbnMoXG4gICAgICBub2RlOiBOLkV4cHJlc3Npb24sXG4gICAgICBkaXNhbGxvd0ludmFsaWQ/OiBib29sZWFuLFxuICAgICk6IFtOLkFycm93RnVuY3Rpb25FeHByZXNzaW9uW10sIE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25bXV0ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBbbm9kZV07XG4gICAgICBjb25zdCBhcnJvd3M6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25bXSA9IFtdO1xuXG4gICAgICB3aGlsZSAoc3RhY2subGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKSB7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZVBhcmFtZXRlcnMgfHwgIW5vZGUucmV0dXJuVHlwZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhcnJvdyBleHByZXNzaW9uIHdpdGhvdXQgYW1iaWd1aXR5LCBzbyBjaGVjayBpdHMgcGFyYW1ldGVyc1xuICAgICAgICAgICAgdGhpcy5maW5pc2hBcnJvd1ZhbGlkYXRpb24obm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycm93cy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFjay5wdXNoKG5vZGUuYm9keSk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChub2RlLmNvbnNlcXVlbnQpO1xuICAgICAgICAgIHN0YWNrLnB1c2gobm9kZS5hbHRlcm5hdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNhbGxvd0ludmFsaWQpIHtcbiAgICAgICAgYXJyb3dzLmZvckVhY2gobm9kZSA9PiB0aGlzLmZpbmlzaEFycm93VmFsaWRhdGlvbihub2RlKSk7XG4gICAgICAgIHJldHVybiBbYXJyb3dzLCBbXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJ0aXRpb24oYXJyb3dzLCBub2RlID0+XG4gICAgICAgIG5vZGUucGFyYW1zLmV2ZXJ5KHBhcmFtID0+IHRoaXMuaXNBc3NpZ25hYmxlKHBhcmFtLCB0cnVlKSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGZpbmlzaEFycm93VmFsaWRhdGlvbihub2RlOiBOLkFycm93RnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZUxpc3QoXG4gICAgICAgIC8vIG5vZGUucGFyYW1zIGlzIEV4cHJlc3Npb25bXSBpbnN0ZWFkIG9mICRSZWFkT25seUFycmF5PFBhdHRlcm4+IGJlY2F1c2UgaXRcbiAgICAgICAgLy8gaGFzIG5vdCBiZWVuIGNvbnZlcnRlZCB5ZXQuXG4gICAgICAgICgobm9kZS5wYXJhbXM6IGFueSk6IE4uRXhwcmVzc2lvbltdKSxcbiAgICAgICAgbm9kZS5leHRyYT8udHJhaWxpbmdDb21tYSxcbiAgICAgICk7XG4gICAgICAvLyBFbnRlciBzY29wZSwgYXMgY2hlY2tQYXJhbXMgZGVmaW5lcyBiaW5kaW5nc1xuICAgICAgdGhpcy5zY29wZS5lbnRlcihTQ09QRV9GVU5DVElPTiB8IFNDT1BFX0FSUk9XKTtcbiAgICAgIC8vIFVzZSBzdXBlcidzIG1ldGhvZCB0byBmb3JjZSB0aGUgcGFyYW1ldGVycyB0byBiZSBjaGVja2VkXG4gICAgICBzdXBlci5jaGVja1BhcmFtcyhub2RlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcbiAgICB9XG5cbiAgICBmb3J3YXJkTm9BcnJvd1BhcmFtc0NvbnZlcnNpb25BdDxUPihub2RlOiBOLk5vZGUsIHBhcnNlOiAoKSA9PiBUKTogVCB7XG4gICAgICBsZXQgcmVzdWx0OiBUO1xuICAgICAgaWYgKHRoaXMuc3RhdGUubm9BcnJvd1BhcmFtc0NvbnZlcnNpb25BdC5pbmRleE9mKG5vZGUuc3RhcnQpICE9PSAtMSkge1xuICAgICAgICB0aGlzLnN0YXRlLm5vQXJyb3dQYXJhbXNDb252ZXJzaW9uQXQucHVzaCh0aGlzLnN0YXRlLnN0YXJ0KTtcbiAgICAgICAgcmVzdWx0ID0gcGFyc2UoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93UGFyYW1zQ29udmVyc2lvbkF0LnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwYXJzZVBhcmVuSXRlbShcbiAgICAgIG5vZGU6IE4uRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIG5vZGUgPSBzdXBlci5wYXJzZVBhcmVuSXRlbShub2RlLCBzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgaWYgKHRoaXMuZWF0KHR0LnF1ZXN0aW9uKSkge1xuICAgICAgICBub2RlLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgLy8gSW5jbHVkZSBxdWVzdGlvbm1hcmsgaW4gbG9jYXRpb24gb2Ygbm9kZVxuICAgICAgICAvLyBEb24ndCB1c2UgdGhpcy5maW5pc2hOb2RlKCkgYXMgb3RoZXJ3aXNlIHdlIG1pZ2h0IHByb2Nlc3MgY29tbWVudHMgdHdpY2UgYW5kXG4gICAgICAgIC8vIGluY2x1ZGUgYWxyZWFkeSBjb25zdW1lZCBwYXJlbnNcbiAgICAgICAgdGhpcy5yZXNldEVuZExvY2F0aW9uKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5jb2xvbikpIHtcbiAgICAgICAgY29uc3QgdHlwZUNhc3ROb2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICB0eXBlQ2FzdE5vZGUuZXhwcmVzc2lvbiA9IG5vZGU7XG4gICAgICAgIHR5cGVDYXN0Tm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHR5cGVDYXN0Tm9kZSwgXCJUeXBlQ2FzdEV4cHJlc3Npb25cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGFzc2VydE1vZHVsZU5vZGVBbGxvd2VkKG5vZGU6IE4uTm9kZSkge1xuICAgICAgaWYgKFxuICAgICAgICAobm9kZS50eXBlID09PSBcIkltcG9ydERlY2xhcmF0aW9uXCIgJiZcbiAgICAgICAgICAobm9kZS5pbXBvcnRLaW5kID09PSBcInR5cGVcIiB8fCBub2RlLmltcG9ydEtpbmQgPT09IFwidHlwZW9mXCIpKSB8fFxuICAgICAgICAobm9kZS50eXBlID09PSBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIiAmJlxuICAgICAgICAgIG5vZGUuZXhwb3J0S2luZCA9PT0gXCJ0eXBlXCIpIHx8XG4gICAgICAgIChub2RlLnR5cGUgPT09IFwiRXhwb3J0QWxsRGVjbGFyYXRpb25cIiAmJiBub2RlLmV4cG9ydEtpbmQgPT09IFwidHlwZVwiKVxuICAgICAgKSB7XG4gICAgICAgIC8vIEFsbG93IEZsb3d0eXBlIGltcG9ydHMgYW5kIGV4cG9ydHMgaW4gYWxsIGNvbmRpdGlvbnMgYmVjYXVzZVxuICAgICAgICAvLyBGbG93IGl0c2VsZiBkb2VzIG5vdCBjYXJlIGFib3V0ICdzb3VyY2VUeXBlJy5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5hc3NlcnRNb2R1bGVOb2RlQWxsb3dlZChub2RlKTtcbiAgICB9XG5cbiAgICBwYXJzZUV4cG9ydChub2RlOiBOLk5vZGUpOiBOLkFueUV4cG9ydCB7XG4gICAgICBjb25zdCBkZWNsID0gc3VwZXIucGFyc2VFeHBvcnQobm9kZSk7XG4gICAgICBpZiAoXG4gICAgICAgIGRlY2wudHlwZSA9PT0gXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIgfHxcbiAgICAgICAgZGVjbC50eXBlID09PSBcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCJcbiAgICAgICkge1xuICAgICAgICBkZWNsLmV4cG9ydEtpbmQgPSBkZWNsLmV4cG9ydEtpbmQgfHwgXCJ2YWx1ZVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlY2w7XG4gICAgfVxuXG4gICAgcGFyc2VFeHBvcnREZWNsYXJhdGlvbihub2RlOiBOLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24pOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJ0eXBlXCIpKSB7XG4gICAgICAgIG5vZGUuZXhwb3J0S2luZCA9IFwidHlwZVwiO1xuXG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmJyYWNlTCkpIHtcbiAgICAgICAgICAvLyBleHBvcnQgdHlwZSB7IGZvbywgYmFyIH07XG4gICAgICAgICAgbm9kZS5zcGVjaWZpZXJzID0gdGhpcy5wYXJzZUV4cG9ydFNwZWNpZmllcnMoKTtcbiAgICAgICAgICB0aGlzLnBhcnNlRXhwb3J0RnJvbShub2RlKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBleHBvcnQgdHlwZSBGb28gPSBCYXI7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlVHlwZUFsaWFzKGRlY2xhcmF0aW9uTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJvcGFxdWVcIikpIHtcbiAgICAgICAgbm9kZS5leHBvcnRLaW5kID0gXCJ0eXBlXCI7XG5cbiAgICAgICAgY29uc3QgZGVjbGFyYXRpb25Ob2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIC8vIGV4cG9ydCBvcGFxdWUgdHlwZSBGb28gPSBCYXI7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dQYXJzZU9wYXF1ZVR5cGUoZGVjbGFyYXRpb25Ob2RlLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiaW50ZXJmYWNlXCIpKSB7XG4gICAgICAgIG5vZGUuZXhwb3J0S2luZCA9IFwidHlwZVwiO1xuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbk5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1BhcnNlSW50ZXJmYWNlKGRlY2xhcmF0aW9uTm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2hvdWxkUGFyc2VFbnVtcygpICYmIHRoaXMuaXNDb250ZXh0dWFsKFwiZW51bVwiKSkge1xuICAgICAgICBub2RlLmV4cG9ydEtpbmQgPSBcInZhbHVlXCI7XG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5mbG93UGFyc2VFbnVtRGVjbGFyYXRpb24oZGVjbGFyYXRpb25Ob2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdXBlci5wYXJzZUV4cG9ydERlY2xhcmF0aW9uKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVhdEV4cG9ydFN0YXIobm9kZTogTi5Ob2RlKTogYm9vbGVhbiB7XG4gICAgICBpZiAoc3VwZXIuZWF0RXhwb3J0U3RhciguLi5hcmd1bWVudHMpKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwidHlwZVwiKSAmJiB0aGlzLmxvb2thaGVhZCgpLnR5cGUgPT09IHR0LnN0YXIpIHtcbiAgICAgICAgbm9kZS5leHBvcnRLaW5kID0gXCJ0eXBlXCI7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBtYXliZVBhcnNlRXhwb3J0TmFtZXNwYWNlU3BlY2lmaWVyKG5vZGU6IE4uTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgcG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgIGNvbnN0IGhhc05hbWVzcGFjZSA9IHN1cGVyLm1heWJlUGFyc2VFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXIobm9kZSk7XG4gICAgICBpZiAoaGFzTmFtZXNwYWNlICYmIG5vZGUuZXhwb3J0S2luZCA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKHBvcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzTmFtZXNwYWNlO1xuICAgIH1cblxuICAgIHBhcnNlQ2xhc3NJZChub2RlOiBOLkNsYXNzLCBpc1N0YXRlbWVudDogYm9vbGVhbiwgb3B0aW9uYWxJZDogP2Jvb2xlYW4pIHtcbiAgICAgIHN1cGVyLnBhcnNlQ2xhc3NJZChub2RlLCBpc1N0YXRlbWVudCwgb3B0aW9uYWxJZCk7XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQ2xhc3NNZW1iZXIoXG4gICAgICBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LFxuICAgICAgbWVtYmVyOiBhbnksXG4gICAgICBzdGF0ZTogeyBoYWRDb25zdHJ1Y3RvcjogYm9vbGVhbiB9LFxuICAgICAgY29uc3RydWN0b3JBbGxvd3NTdXBlcjogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJkZWNsYXJlXCIpKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcnNlQ2xhc3NNZW1iZXJGcm9tTW9kaWZpZXIoY2xhc3NCb2R5LCBtZW1iZXIpKSB7XG4gICAgICAgICAgLy8gJ2RlY2xhcmUnIGlzIGEgY2xhc3MgZWxlbWVudCBuYW1lXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVtYmVyLmRlY2xhcmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5wYXJzZUNsYXNzTWVtYmVyKGNsYXNzQm9keSwgbWVtYmVyLCBzdGF0ZSwgY29uc3RydWN0b3JBbGxvd3NTdXBlcik7XG5cbiAgICAgIGlmIChtZW1iZXIuZGVjbGFyZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbWVtYmVyLnR5cGUgIT09IFwiQ2xhc3NQcm9wZXJ0eVwiICYmXG4gICAgICAgICAgbWVtYmVyLnR5cGUgIT09IFwiQ2xhc3NQcml2YXRlUHJvcGVydHlcIlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHBvcywgRmxvd0Vycm9ycy5EZWNsYXJlQ2xhc3NFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChtZW1iZXIudmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgbWVtYmVyLnZhbHVlLnN0YXJ0LFxuICAgICAgICAgICAgRmxvd0Vycm9ycy5EZWNsYXJlQ2xhc3NGaWVsZEluaXRpYWxpemVyLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgdGhhdCBpbnNpZGUgZmxvdyB0eXBlcywgd2UgYnlwYXNzIHRoZSBqc3ggcGFyc2VyIHBsdWdpblxuICAgIGdldFRva2VuRnJvbUNvZGUoY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgICBpZiAoY29kZSA9PT0gY2hhckNvZGVzLmxlZnRDdXJseUJyYWNlICYmIG5leHQgPT09IGNoYXJDb2Rlcy52ZXJ0aWNhbEJhcikge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0dC5icmFjZUJhckwsIDIpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgJiZcbiAgICAgICAgKGNvZGUgPT09IGNoYXJDb2Rlcy5ncmVhdGVyVGhhbiB8fCBjb2RlID09PSBjaGFyQ29kZXMubGVzc1RoYW4pXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQucmVsYXRpb25hbCwgMSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaW5UeXBlICYmIGNvZGUgPT09IGNoYXJDb2Rlcy5xdWVzdGlvbk1hcmspIHtcbiAgICAgICAgLy8gYWxsb3cgZG91YmxlIG51bGxhYmxlIHR5cGVzIGluIEZsb3c6ID8/c3RyaW5nXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LnF1ZXN0aW9uLCAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNJdGVyYXRvclN0YXJ0KGNvZGUsIG5leHQpKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuaXNJdGVyYXRvciA9IHRydWU7XG4gICAgICAgIHJldHVybiBzdXBlci5yZWFkV29yZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFRva2VuRnJvbUNvZGUoY29kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaXNBc3NpZ25hYmxlKG5vZGU6IE4uTm9kZSwgaXNCaW5kaW5nPzogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcbiAgICAgICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICAgICAgY2FzZSBcIkFycmF5UGF0dGVyblwiOlxuICAgICAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIFwiT2JqZWN0RXhwcmVzc2lvblwiOiB7XG4gICAgICAgICAgY29uc3QgbGFzdCA9IG5vZGUucHJvcGVydGllcy5sZW5ndGggLSAxO1xuICAgICAgICAgIHJldHVybiBub2RlLnByb3BlcnRpZXMuZXZlcnkoKHByb3AsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHByb3AudHlwZSAhPT0gXCJPYmplY3RNZXRob2RcIiAmJlxuICAgICAgICAgICAgICAoaSA9PT0gbGFzdCB8fCBwcm9wLnR5cGUgPT09IFwiU3ByZWFkRWxlbWVudFwiKSAmJlxuICAgICAgICAgICAgICB0aGlzLmlzQXNzaWduYWJsZShwcm9wKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgXCJPYmplY3RQcm9wZXJ0eVwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLmlzQXNzaWduYWJsZShub2RlLnZhbHVlKTtcblxuICAgICAgICBjYXNlIFwiU3ByZWFkRWxlbWVudFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLmlzQXNzaWduYWJsZShub2RlLmFyZ3VtZW50KTtcblxuICAgICAgICBjYXNlIFwiQXJyYXlFeHByZXNzaW9uXCI6XG4gICAgICAgICAgcmV0dXJuIG5vZGUuZWxlbWVudHMuZXZlcnkoZWxlbWVudCA9PiB0aGlzLmlzQXNzaWduYWJsZShlbGVtZW50KSk7XG5cbiAgICAgICAgY2FzZSBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCI6XG4gICAgICAgICAgcmV0dXJuIG5vZGUub3BlcmF0b3IgPT09IFwiPVwiO1xuXG4gICAgICAgIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiVHlwZUNhc3RFeHByZXNzaW9uXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaXNBc3NpZ25hYmxlKG5vZGUuZXhwcmVzc2lvbik7XG5cbiAgICAgICAgY2FzZSBcIk1lbWJlckV4cHJlc3Npb25cIjpcbiAgICAgICAgY2FzZSBcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgICAgIHJldHVybiAhaXNCaW5kaW5nO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRvQXNzaWduYWJsZShub2RlOiBOLk5vZGUpOiBOLk5vZGUge1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJUeXBlQ2FzdEV4cHJlc3Npb25cIikge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9Bc3NpZ25hYmxlKHRoaXMudHlwZUNhc3RUb1BhcmFtZXRlcihub2RlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9Bc3NpZ25hYmxlKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gdHlwZSBjYXN0cyB0aGF0IHdlIGZvdW5kIGluIGZ1bmN0aW9uIHBhcmFtZXRlciBoZWFkIGludG8gdHlwZSBhbm5vdGF0ZWQgcGFyYW1zXG4gICAgdG9Bc3NpZ25hYmxlTGlzdChcbiAgICAgIGV4cHJMaXN0OiBOLkV4cHJlc3Npb25bXSxcbiAgICAgIHRyYWlsaW5nQ29tbWFQb3M/OiA/bnVtYmVyLFxuICAgICk6ICRSZWFkT25seUFycmF5PE4uUGF0dGVybj4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHByTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBleHByID0gZXhwckxpc3RbaV07XG4gICAgICAgIGlmIChleHByPy50eXBlID09PSBcIlR5cGVDYXN0RXhwcmVzc2lvblwiKSB7XG4gICAgICAgICAgZXhwckxpc3RbaV0gPSB0aGlzLnR5cGVDYXN0VG9QYXJhbWV0ZXIoZXhwcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci50b0Fzc2lnbmFibGVMaXN0KGV4cHJMaXN0LCB0cmFpbGluZ0NvbW1hUG9zKTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGlzIGEgbGlzdCBvZiBub2RlcywgZnJvbSBzb21ldGhpbmcgbGlrZSBhIGNhbGwgZXhwcmVzc2lvbiwgd2UgbmVlZCB0byBmaWx0ZXIgdGhlXG4gICAgLy8gdHlwZSBjYXN0cyB0aGF0IHdlJ3ZlIGZvdW5kIHRoYXQgYXJlIGlsbGVnYWwgaW4gdGhpcyBjb250ZXh0XG4gICAgdG9SZWZlcmVuY2VkTGlzdChcbiAgICAgIGV4cHJMaXN0OiAkUmVhZE9ubHlBcnJheTw/Ti5FeHByZXNzaW9uPixcbiAgICAgIGlzUGFyZW50aGVzaXplZEV4cHI/OiBib29sZWFuLFxuICAgICk6ICRSZWFkT25seUFycmF5PD9OLkV4cHJlc3Npb24+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwckxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZXhwciA9IGV4cHJMaXN0W2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZXhwciAmJlxuICAgICAgICAgIGV4cHIudHlwZSA9PT0gXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiAmJlxuICAgICAgICAgICFleHByLmV4dHJhPy5wYXJlbnRoZXNpemVkICYmXG4gICAgICAgICAgKGV4cHJMaXN0Lmxlbmd0aCA+IDEgfHwgIWlzUGFyZW50aGVzaXplZEV4cHIpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucmFpc2UoZXhwci50eXBlQW5ub3RhdGlvbi5zdGFydCwgRmxvd0Vycm9ycy5UeXBlQ2FzdEluUGF0dGVybik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4cHJMaXN0O1xuICAgIH1cblxuICAgIGNoZWNrTFZhbChcbiAgICAgIGV4cHI6IE4uRXhwcmVzc2lvbixcbiAgICAgIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMgPSBCSU5EX05PTkUsXG4gICAgICBjaGVja0NsYXNoZXM6ID97IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSxcbiAgICAgIGNvbnRleHREZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICk6IHZvaWQge1xuICAgICAgaWYgKGV4cHIudHlwZSAhPT0gXCJUeXBlQ2FzdEV4cHJlc3Npb25cIikge1xuICAgICAgICByZXR1cm4gc3VwZXIuY2hlY2tMVmFsKFxuICAgICAgICAgIGV4cHIsXG4gICAgICAgICAgYmluZGluZ1R5cGUsXG4gICAgICAgICAgY2hlY2tDbGFzaGVzLFxuICAgICAgICAgIGNvbnRleHREZXNjcmlwdGlvbixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZSBjbGFzcyBwcm9wZXJ0eSB0eXBlIGFubm90YXRpb25zXG4gICAgcGFyc2VDbGFzc1Byb3BlcnR5KG5vZGU6IE4uQ2xhc3NQcm9wZXJ0eSk6IE4uQ2xhc3NQcm9wZXJ0eSB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5jb2xvbikpIHtcbiAgICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUNsYXNzUHJvcGVydHkobm9kZSk7XG4gICAgfVxuXG4gICAgcGFyc2VDbGFzc1ByaXZhdGVQcm9wZXJ0eShcbiAgICAgIG5vZGU6IE4uQ2xhc3NQcml2YXRlUHJvcGVydHksXG4gICAgKTogTi5DbGFzc1ByaXZhdGVQcm9wZXJ0eSB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5jb2xvbikpIHtcbiAgICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUNsYXNzUHJpdmF0ZVByb3BlcnR5KG5vZGUpO1xuICAgIH1cblxuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB3ZSdyZSBjdXJyZW50bHkgaW4gdGhlIHBvc2l0aW9uIHdoZXJlIGEgY2xhc3MgbWV0aG9kIHdvdWxkIGFwcGVhclxuICAgIGlzQ2xhc3NNZXRob2QoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpIHx8IHN1cGVyLmlzQ2xhc3NNZXRob2QoKTtcbiAgICB9XG5cbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBvciBub3Qgd2UncmUgY3VycmVudGx5IGluIHRoZSBwb3NpdGlvbiB3aGVyZSBhIGNsYXNzIHByb3BlcnR5IHdvdWxkIGFwcGVhclxuICAgIGlzQ2xhc3NQcm9wZXJ0eSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0LmNvbG9uKSB8fCBzdXBlci5pc0NsYXNzUHJvcGVydHkoKTtcbiAgICB9XG5cbiAgICBpc05vbnN0YXRpY0NvbnN0cnVjdG9yKG1ldGhvZDogTi5DbGFzc01ldGhvZCB8IE4uQ2xhc3NQcm9wZXJ0eSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuICF0aGlzLm1hdGNoKHR0LmNvbG9uKSAmJiBzdXBlci5pc05vbnN0YXRpY0NvbnN0cnVjdG9yKG1ldGhvZCk7XG4gICAgfVxuXG4gICAgLy8gcGFyc2UgdHlwZSBwYXJhbWV0ZXJzIGZvciBjbGFzcyBtZXRob2RzXG4gICAgcHVzaENsYXNzTWV0aG9kKFxuICAgICAgY2xhc3NCb2R5OiBOLkNsYXNzQm9keSxcbiAgICAgIG1ldGhvZDogTi5DbGFzc01ldGhvZCxcbiAgICAgIGlzR2VuZXJhdG9yOiBib29sZWFuLFxuICAgICAgaXNBc3luYzogYm9vbGVhbixcbiAgICAgIGlzQ29uc3RydWN0b3I6IGJvb2xlYW4sXG4gICAgICBhbGxvd3NEaXJlY3RTdXBlcjogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICgobWV0aG9kOiAkRmxvd0ZpeE1lKS52YXJpYW5jZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKG1ldGhvZDogJEZsb3dGaXhNZSkudmFyaWFuY2Uuc3RhcnQpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIChtZXRob2Q6ICRGbG93Rml4TWUpLnZhcmlhbmNlO1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBtZXRob2QudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5wdXNoQ2xhc3NNZXRob2QoXG4gICAgICAgIGNsYXNzQm9keSxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBpc0dlbmVyYXRvcixcbiAgICAgICAgaXNBc3luYyxcbiAgICAgICAgaXNDb25zdHJ1Y3RvcixcbiAgICAgICAgYWxsb3dzRGlyZWN0U3VwZXIsXG4gICAgICApO1xuICAgIH1cblxuICAgIHB1c2hDbGFzc1ByaXZhdGVNZXRob2QoXG4gICAgICBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LFxuICAgICAgbWV0aG9kOiBOLkNsYXNzUHJpdmF0ZU1ldGhvZCxcbiAgICAgIGlzR2VuZXJhdG9yOiBib29sZWFuLFxuICAgICAgaXNBc3luYzogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICgobWV0aG9kOiAkRmxvd0ZpeE1lKS52YXJpYW5jZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKG1ldGhvZDogJEZsb3dGaXhNZSkudmFyaWFuY2Uuc3RhcnQpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIChtZXRob2Q6ICRGbG93Rml4TWUpLnZhcmlhbmNlO1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBtZXRob2QudHlwZVBhcmFtZXRlcnMgPSB0aGlzLmZsb3dQYXJzZVR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5wdXNoQ2xhc3NQcml2YXRlTWV0aG9kKGNsYXNzQm9keSwgbWV0aG9kLCBpc0dlbmVyYXRvciwgaXNBc3luYyk7XG4gICAgfVxuXG4gICAgLy8gcGFyc2UgYSB0aGUgc3VwZXIgY2xhc3MgdHlwZSBwYXJhbWV0ZXJzIGFuZCBpbXBsZW1lbnRzXG4gICAgcGFyc2VDbGFzc1N1cGVyKG5vZGU6IE4uQ2xhc3MpOiB2b2lkIHtcbiAgICAgIHN1cGVyLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcbiAgICAgIGlmIChub2RlLnN1cGVyQ2xhc3MgJiYgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUuc3VwZXJUeXBlUGFyYW1ldGVycyA9IHRoaXMuZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzQ29udGV4dHVhbChcImltcGxlbWVudHNcIikpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGNvbnN0IGltcGxlbWVudGVkOiBOLkZsb3dDbGFzc0ltcGxlbWVudHNbXSA9IChub2RlLmltcGxlbWVudHMgPSBbXSk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgICBub2RlLmlkID0gdGhpcy5mbG93UGFyc2VSZXN0cmljdGVkSWRlbnRpZmllcigvKmxpYmVyYWwqLyB0cnVlKTtcbiAgICAgICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW1wbGVtZW50ZWQucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDbGFzc0ltcGxlbWVudHNcIikpO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmVhdCh0dC5jb21tYSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlUHJvcGVydHlOYW1lKFxuICAgICAgbm9kZTogTi5PYmplY3RPckNsYXNzTWVtYmVyIHwgTi5DbGFzc01lbWJlciB8IE4uVHNOYW1lZFR5cGVFbGVtZW50QmFzZSxcbiAgICAgIGlzUHJpdmF0ZU5hbWVBbGxvd2VkOiBib29sZWFuLFxuICAgICk6IE4uSWRlbnRpZmllciB7XG4gICAgICBjb25zdCB2YXJpYW5jZSA9IHRoaXMuZmxvd1BhcnNlVmFyaWFuY2UoKTtcbiAgICAgIGNvbnN0IGtleSA9IHN1cGVyLnBhcnNlUHJvcGVydHlOYW1lKG5vZGUsIGlzUHJpdmF0ZU5hbWVBbGxvd2VkKTtcbiAgICAgIC8vICRGbG93SWdub3JlIChcInZhcmlhbmNlXCIgbm90IGRlZmluZWQgb24gVHNOYW1lZFR5cGVFbGVtZW50QmFzZSlcbiAgICAgIG5vZGUudmFyaWFuY2UgPSB2YXJpYW5jZTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGFyc2UgdHlwZSBwYXJhbWV0ZXJzIGZvciBvYmplY3QgbWV0aG9kIHNob3J0aGFuZFxuICAgIHBhcnNlT2JqUHJvcFZhbHVlKFxuICAgICAgcHJvcDogTi5PYmplY3RNZW1iZXIsXG4gICAgICBzdGFydFBvczogP251bWJlcixcbiAgICAgIHN0YXJ0TG9jOiA/UG9zaXRpb24sXG4gICAgICBpc0dlbmVyYXRvcjogYm9vbGVhbixcbiAgICAgIGlzQXN5bmM6IGJvb2xlYW4sXG4gICAgICBpc1BhdHRlcm46IGJvb2xlYW4sXG4gICAgICBpc0FjY2Vzc29yOiBib29sZWFuLFxuICAgICAgcmVmRXhwcmVzc2lvbkVycm9yczogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAoKHByb3A6ICRGbG93Rml4TWUpLnZhcmlhbmNlKSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgocHJvcDogJEZsb3dGaXhNZSkudmFyaWFuY2Uuc3RhcnQpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIChwcm9wOiAkRmxvd0ZpeE1lKS52YXJpYW5jZTtcblxuICAgICAgbGV0IHR5cGVQYXJhbWV0ZXJzO1xuXG4gICAgICAvLyBtZXRob2Qgc2hvcnRoYW5kXG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpICYmICFpc0FjY2Vzc29yKSB7XG4gICAgICAgIHR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnBhcmVuTCkpIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5wYXJzZU9ialByb3BWYWx1ZShcbiAgICAgICAgcHJvcCxcbiAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICBpc0dlbmVyYXRvcixcbiAgICAgICAgaXNBc3luYyxcbiAgICAgICAgaXNQYXR0ZXJuLFxuICAgICAgICBpc0FjY2Vzc29yLFxuICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgKTtcblxuICAgICAgLy8gYWRkIHR5cGVQYXJhbWV0ZXJzIGlmIHdlIGZvdW5kIHRoZW1cbiAgICAgIGlmICh0eXBlUGFyYW1ldGVycykge1xuICAgICAgICAocHJvcC52YWx1ZSB8fCBwcm9wKS50eXBlUGFyYW1ldGVycyA9IHR5cGVQYXJhbWV0ZXJzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXNzaWduYWJsZUxpc3RJdGVtVHlwZXMocGFyYW06IE4uUGF0dGVybik6IE4uUGF0dGVybiB7XG4gICAgICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XG4gICAgICAgIGlmIChwYXJhbS50eXBlICE9PSBcIklkZW50aWZpZXJcIikge1xuICAgICAgICAgIHRoaXMucmFpc2UocGFyYW0uc3RhcnQsIEZsb3dFcnJvcnMuT3B0aW9uYWxCaW5kaW5nUGF0dGVybik7XG4gICAgICAgIH1cblxuICAgICAgICAoKHBhcmFtOiBhbnkpOiBOLklkZW50aWZpZXIpLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICBwYXJhbS50eXBlQW5ub3RhdGlvbiA9IHRoaXMuZmxvd1BhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVzZXRFbmRMb2NhdGlvbihwYXJhbSk7XG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfVxuXG4gICAgcGFyc2VNYXliZURlZmF1bHQoXG4gICAgICBzdGFydFBvcz86ID9udW1iZXIsXG4gICAgICBzdGFydExvYz86ID9Qb3NpdGlvbixcbiAgICAgIGxlZnQ/OiA/Ti5QYXR0ZXJuLFxuICAgICk6IE4uUGF0dGVybiB7XG4gICAgICBjb25zdCBub2RlID0gc3VwZXIucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBsZWZ0KTtcblxuICAgICAgaWYgKFxuICAgICAgICBub2RlLnR5cGUgPT09IFwiQXNzaWdubWVudFBhdHRlcm5cIiAmJlxuICAgICAgICBub2RlLnR5cGVBbm5vdGF0aW9uICYmXG4gICAgICAgIG5vZGUucmlnaHQuc3RhcnQgPCBub2RlLnR5cGVBbm5vdGF0aW9uLnN0YXJ0XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5yYWlzZShub2RlLnR5cGVBbm5vdGF0aW9uLnN0YXJ0LCBGbG93RXJyb3JzLlR5cGVCZWZvcmVJbml0aWFsaXplcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIHNob3VsZFBhcnNlRGVmYXVsdEltcG9ydChub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKTogYm9vbGVhbiB7XG4gICAgICBpZiAoIWhhc1R5cGVJbXBvcnRLaW5kKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5zaG91bGRQYXJzZURlZmF1bHRJbXBvcnQobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc01heWJlRGVmYXVsdEltcG9ydCh0aGlzLnN0YXRlKTtcbiAgICB9XG5cbiAgICBwYXJzZUltcG9ydFNwZWNpZmllckxvY2FsKFxuICAgICAgbm9kZTogTi5JbXBvcnREZWNsYXJhdGlvbixcbiAgICAgIHNwZWNpZmllcjogTi5Ob2RlLFxuICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgY29udGV4dERlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgKTogdm9pZCB7XG4gICAgICBzcGVjaWZpZXIubG9jYWwgPSBoYXNUeXBlSW1wb3J0S2luZChub2RlKVxuICAgICAgICA/IHRoaXMuZmxvd1BhcnNlUmVzdHJpY3RlZElkZW50aWZpZXIoXG4gICAgICAgICAgICAvKiBsaWJlcmFsICovIHRydWUsXG4gICAgICAgICAgICAvKiBkZWNsYXJhdGlvbiAqLyB0cnVlLFxuICAgICAgICAgIClcbiAgICAgICAgOiB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuXG4gICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgc3BlY2lmaWVyLmxvY2FsLFxuICAgICAgICBCSU5EX0xFWElDQUwsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgY29udGV4dERlc2NyaXB0aW9uLFxuICAgICAgKTtcbiAgICAgIG5vZGUuc3BlY2lmaWVycy5wdXNoKHRoaXMuZmluaXNoTm9kZShzcGVjaWZpZXIsIHR5cGUpKTtcbiAgICB9XG5cbiAgICAvLyBwYXJzZSB0eXBlb2YgYW5kIHR5cGUgaW1wb3J0c1xuICAgIG1heWJlUGFyc2VEZWZhdWx0SW1wb3J0U3BlY2lmaWVyKG5vZGU6IE4uSW1wb3J0RGVjbGFyYXRpb24pOiBib29sZWFuIHtcbiAgICAgIG5vZGUuaW1wb3J0S2luZCA9IFwidmFsdWVcIjtcblxuICAgICAgbGV0IGtpbmQgPSBudWxsO1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuX3R5cGVvZikpIHtcbiAgICAgICAga2luZCA9IFwidHlwZW9mXCI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwidHlwZVwiKSkge1xuICAgICAgICBraW5kID0gXCJ0eXBlXCI7XG4gICAgICB9XG4gICAgICBpZiAoa2luZCkge1xuICAgICAgICBjb25zdCBsaCA9IHRoaXMubG9va2FoZWFkKCk7XG5cbiAgICAgICAgLy8gaW1wb3J0IHR5cGUgKiBpcyBub3QgYWxsb3dlZFxuICAgICAgICBpZiAoa2luZCA9PT0gXCJ0eXBlXCIgJiYgbGgudHlwZSA9PT0gdHQuc3Rhcikge1xuICAgICAgICAgIHRoaXMudW5leHBlY3RlZChsaC5zdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNNYXliZURlZmF1bHRJbXBvcnQobGgpIHx8XG4gICAgICAgICAgbGgudHlwZSA9PT0gdHQuYnJhY2VMIHx8XG4gICAgICAgICAgbGgudHlwZSA9PT0gdHQuc3RhclxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICBub2RlLmltcG9ydEtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBlci5tYXliZVBhcnNlRGVmYXVsdEltcG9ydFNwZWNpZmllcihub2RlKTtcbiAgICB9XG5cbiAgICAvLyBwYXJzZSBpbXBvcnQtdHlwZS90eXBlb2Ygc2hvcnRoYW5kXG4gICAgcGFyc2VJbXBvcnRTcGVjaWZpZXIobm9kZTogTi5JbXBvcnREZWNsYXJhdGlvbik6IHZvaWQge1xuICAgICAgY29uc3Qgc3BlY2lmaWVyID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IGZpcnN0SWRlbnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3QgZmlyc3RJZGVudCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpO1xuXG4gICAgICBsZXQgc3BlY2lmaWVyVHlwZUtpbmQgPSBudWxsO1xuICAgICAgaWYgKGZpcnN0SWRlbnQubmFtZSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgc3BlY2lmaWVyVHlwZUtpbmQgPSBcInR5cGVcIjtcbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RJZGVudC5uYW1lID09PSBcInR5cGVvZlwiKSB7XG4gICAgICAgIHNwZWNpZmllclR5cGVLaW5kID0gXCJ0eXBlb2ZcIjtcbiAgICAgIH1cblxuICAgICAgbGV0IGlzQmluZGluZyA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiYXNcIikgJiYgIXRoaXMuaXNMb29rYWhlYWRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgICAgY29uc3QgYXNfaWRlbnQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNwZWNpZmllclR5cGVLaW5kICE9PSBudWxsICYmXG4gICAgICAgICAgIXRoaXMubWF0Y2godHQubmFtZSkgJiZcbiAgICAgICAgICAhdGhpcy5zdGF0ZS50eXBlLmtleXdvcmRcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gYGltcG9ydCB7dHlwZSBhcyAsYCBvciBgaW1wb3J0IHt0eXBlIGFzIH1gXG4gICAgICAgICAgc3BlY2lmaWVyLmltcG9ydGVkID0gYXNfaWRlbnQ7XG4gICAgICAgICAgc3BlY2lmaWVyLmltcG9ydEtpbmQgPSBzcGVjaWZpZXJUeXBlS2luZDtcbiAgICAgICAgICBzcGVjaWZpZXIubG9jYWwgPSBhc19pZGVudC5fX2Nsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYGltcG9ydCB7dHlwZSBhcyBmb29gXG4gICAgICAgICAgc3BlY2lmaWVyLmltcG9ydGVkID0gZmlyc3RJZGVudDtcbiAgICAgICAgICBzcGVjaWZpZXIuaW1wb3J0S2luZCA9IG51bGw7XG4gICAgICAgICAgc3BlY2lmaWVyLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3BlY2lmaWVyVHlwZUtpbmQgIT09IG51bGwgJiZcbiAgICAgICAgKHRoaXMubWF0Y2godHQubmFtZSkgfHwgdGhpcy5zdGF0ZS50eXBlLmtleXdvcmQpXG4gICAgICApIHtcbiAgICAgICAgLy8gYGltcG9ydCB7dHlwZSBmb29gXG4gICAgICAgIHNwZWNpZmllci5pbXBvcnRlZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpO1xuICAgICAgICBzcGVjaWZpZXIuaW1wb3J0S2luZCA9IHNwZWNpZmllclR5cGVLaW5kO1xuICAgICAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgICAgICBzcGVjaWZpZXIubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzQmluZGluZyA9IHRydWU7XG4gICAgICAgICAgc3BlY2lmaWVyLmxvY2FsID0gc3BlY2lmaWVyLmltcG9ydGVkLl9fY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNCaW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgc3BlY2lmaWVyLmltcG9ydGVkID0gZmlyc3RJZGVudDtcbiAgICAgICAgc3BlY2lmaWVyLmltcG9ydEtpbmQgPSBudWxsO1xuICAgICAgICBzcGVjaWZpZXIubG9jYWwgPSBzcGVjaWZpZXIuaW1wb3J0ZWQuX19jbG9uZSgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlSXNUeXBlSW1wb3J0ID0gaGFzVHlwZUltcG9ydEtpbmQobm9kZSk7XG4gICAgICBjb25zdCBzcGVjaWZpZXJJc1R5cGVJbXBvcnQgPSBoYXNUeXBlSW1wb3J0S2luZChzcGVjaWZpZXIpO1xuXG4gICAgICBpZiAobm9kZUlzVHlwZUltcG9ydCAmJiBzcGVjaWZpZXJJc1R5cGVJbXBvcnQpIHtcbiAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICBmaXJzdElkZW50TG9jLFxuICAgICAgICAgIEZsb3dFcnJvcnMuSW1wb3J0VHlwZVNob3J0aGFuZE9ubHlJblB1cmVJbXBvcnQsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlSXNUeXBlSW1wb3J0IHx8IHNwZWNpZmllcklzVHlwZUltcG9ydCkge1xuICAgICAgICB0aGlzLmNoZWNrUmVzZXJ2ZWRUeXBlKFxuICAgICAgICAgIHNwZWNpZmllci5sb2NhbC5uYW1lLFxuICAgICAgICAgIHNwZWNpZmllci5sb2NhbC5zdGFydCxcbiAgICAgICAgICAvKiBkZWNsYXJhdGlvbiAqLyB0cnVlLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCaW5kaW5nICYmICFub2RlSXNUeXBlSW1wb3J0ICYmICFzcGVjaWZpZXJJc1R5cGVJbXBvcnQpIHtcbiAgICAgICAgdGhpcy5jaGVja1Jlc2VydmVkV29yZChcbiAgICAgICAgICBzcGVjaWZpZXIubG9jYWwubmFtZSxcbiAgICAgICAgICBzcGVjaWZpZXIuc3RhcnQsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgc3BlY2lmaWVyLmxvY2FsLFxuICAgICAgICBCSU5EX0xFWElDQUwsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXCJpbXBvcnQgc3BlY2lmaWVyXCIsXG4gICAgICApO1xuICAgICAgbm9kZS5zcGVjaWZpZXJzLnB1c2godGhpcy5maW5pc2hOb2RlKHNwZWNpZmllciwgXCJJbXBvcnRTcGVjaWZpZXJcIikpO1xuICAgIH1cblxuICAgIC8vIHBhcnNlIGZ1bmN0aW9uIHR5cGUgcGFyYW1ldGVycyAtIGZ1bmN0aW9uIGZvbzxUPigpIHt9XG4gICAgcGFyc2VGdW5jdGlvblBhcmFtcyhub2RlOiBOLkZ1bmN0aW9uLCBhbGxvd01vZGlmaWVycz86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGNvbnN0IGtpbmQgPSBub2RlLmtpbmQ7XG4gICAgICBpZiAoa2luZCAhPT0gXCJnZXRcIiAmJiBraW5kICE9PSBcInNldFwiICYmIHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIHN1cGVyLnBhcnNlRnVuY3Rpb25QYXJhbXMobm9kZSwgYWxsb3dNb2RpZmllcnMpO1xuICAgIH1cblxuICAgIC8vIHBhcnNlIGZsb3cgdHlwZSBhbm5vdGF0aW9ucyBvbiB2YXJpYWJsZSBkZWNsYXJhdG9yIGhlYWRzIC0gbGV0IGZvbzogc3RyaW5nID0gYmFyXG4gICAgcGFyc2VWYXJJZChcbiAgICAgIGRlY2w6IE4uVmFyaWFibGVEZWNsYXJhdG9yLFxuICAgICAga2luZDogXCJ2YXJcIiB8IFwibGV0XCIgfCBcImNvbnN0XCIsXG4gICAgKTogdm9pZCB7XG4gICAgICBzdXBlci5wYXJzZVZhcklkKGRlY2wsIGtpbmQpO1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuY29sb24pKSB7XG4gICAgICAgIGRlY2wuaWQudHlwZUFubm90YXRpb24gPSB0aGlzLmZsb3dQYXJzZVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICAgIHRoaXMucmVzZXRFbmRMb2NhdGlvbihkZWNsLmlkKTsgLy8gc2V0IGVuZCBwb3NpdGlvbiB0byBlbmQgb2YgdHlwZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlIHRoZSByZXR1cm4gdHlwZSBvZiBhbiBhc3luYyBhcnJvdyBmdW5jdGlvbiAtIGxldCBmb28gPSAoYXN5bmMgKCk6IG51bWJlciA9PiB7fSk7XG4gICAgcGFyc2VBc3luY0Fycm93RnJvbUNhbGxFeHByZXNzaW9uKFxuICAgICAgbm9kZTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbixcbiAgICAgIGNhbGw6IE4uQ2FsbEV4cHJlc3Npb24sXG4gICAgKTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5jb2xvbikpIHtcbiAgICAgICAgY29uc3Qgb2xkTm9Bbm9uRnVuY3Rpb25UeXBlID0gdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGU7XG4gICAgICAgIHRoaXMuc3RhdGUubm9Bbm9uRnVuY3Rpb25UeXBlID0gdHJ1ZTtcbiAgICAgICAgbm9kZS5yZXR1cm5UeXBlID0gdGhpcy5mbG93UGFyc2VUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgICB0aGlzLnN0YXRlLm5vQW5vbkZ1bmN0aW9uVHlwZSA9IG9sZE5vQW5vbkZ1bmN0aW9uVHlwZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlQXN5bmNBcnJvd0Zyb21DYWxsRXhwcmVzc2lvbihub2RlLCBjYWxsKTtcbiAgICB9XG5cbiAgICAvLyB0b2RvIGRlc2NyaXB0aW9uXG4gICAgc2hvdWxkUGFyc2VBc3luY0Fycm93KCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMubWF0Y2godHQuY29sb24pIHx8IHN1cGVyLnNob3VsZFBhcnNlQXN5bmNBcnJvdygpO1xuICAgIH1cblxuICAgIC8vIFdlIG5lZWQgdG8gc3VwcG9ydCB0eXBlIHBhcmFtZXRlciBkZWNsYXJhdGlvbnMgZm9yIGFycm93IGZ1bmN0aW9ucy4gVGhpc1xuICAgIC8vIGlzIHRyaWNreS4gVGhlcmUgYXJlIHRocmVlIHNpdHVhdGlvbnMgd2UgbmVlZCB0byBoYW5kbGVcbiAgICAvL1xuICAgIC8vIDEuIFRoaXMgaXMgZWl0aGVyIEpTWCBvciBhbiBhcnJvdyBmdW5jdGlvbi4gV2UnbGwgdHJ5IEpTWCBmaXJzdC4gSWYgdGhhdFxuICAgIC8vICAgIGZhaWxzLCB3ZSdsbCB0cnkgYW4gYXJyb3cgZnVuY3Rpb24uIElmIHRoYXQgZmFpbHMsIHdlJ2xsIHRocm93IHRoZSBKU1hcbiAgICAvLyAgICBlcnJvci5cbiAgICAvLyAyLiBUaGlzIGlzIGFuIGFycm93IGZ1bmN0aW9uLiBXZSdsbCBwYXJzZSB0aGUgdHlwZSBwYXJhbWV0ZXIgZGVjbGFyYXRpb24sXG4gICAgLy8gICAgcGFyc2UgdGhlIHJlc3QsIG1ha2Ugc3VyZSB0aGUgcmVzdCBpcyBhbiBhcnJvdyBmdW5jdGlvbiwgYW5kIGdvIGZyb21cbiAgICAvLyAgICB0aGVyZVxuICAgIC8vIDMuIFRoaXMgaXMgbmVpdGhlci4gSnVzdCBjYWxsIHRoZSBzdXBlciBtZXRob2RcbiAgICBwYXJzZU1heWJlQXNzaWduKFxuICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycz86ID9FeHByZXNzaW9uRXJyb3JzLFxuICAgICAgYWZ0ZXJMZWZ0UGFyc2U/OiBGdW5jdGlvbixcbiAgICAgIHJlZk5lZWRzQXJyb3dQb3M/OiA/UG9zLFxuICAgICk6IE4uRXhwcmVzc2lvbiB7XG4gICAgICBsZXQgc3RhdGUgPSBudWxsO1xuXG4gICAgICBsZXQganN4O1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaGFzUGx1Z2luKFwianN4XCIpICYmXG4gICAgICAgICh0aGlzLm1hdGNoKHR0LmpzeFRhZ1N0YXJ0KSB8fCB0aGlzLmlzUmVsYXRpb25hbChcIjxcIikpXG4gICAgICApIHtcbiAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlLmNsb25lKCk7XG5cbiAgICAgICAganN4ID0gdGhpcy50cnlQYXJzZShcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgc3VwZXIucGFyc2VNYXliZUFzc2lnbihcbiAgICAgICAgICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycyxcbiAgICAgICAgICAgICAgYWZ0ZXJMZWZ0UGFyc2UsXG4gICAgICAgICAgICAgIHJlZk5lZWRzQXJyb3dQb3MsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICApO1xuICAgICAgICAvKjo6IGludmFyaWFudCghanN4LmFib3J0ZWQpICovXG5cbiAgICAgICAgaWYgKCFqc3guZXJyb3IpIHJldHVybiBqc3gubm9kZTtcblxuICAgICAgICAvLyBSZW1vdmUgYHRjLmpfZXhwcmAgYW5kIGB0Yy5qX29UYWdgIGZyb20gY29udGV4dCBhZGRlZFxuICAgICAgICAvLyBieSBwYXJzaW5nIGBqc3hUYWdTdGFydGAgdG8gc3RvcCB0aGUgSlNYIHBsdWdpbiBmcm9tXG4gICAgICAgIC8vIG1lc3Npbmcgd2l0aCB0aGUgdG9rZW5zXG4gICAgICAgIGNvbnN0IHsgY29udGV4dCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGNvbnRleHRbY29udGV4dC5sZW5ndGggLSAxXSA9PT0gdGMual9vVGFnKSB7XG4gICAgICAgICAgY29udGV4dC5sZW5ndGggLT0gMjtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0W2NvbnRleHQubGVuZ3RoIC0gMV0gPT09IHRjLmpfZXhwcikge1xuICAgICAgICAgIGNvbnRleHQubGVuZ3RoIC09IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGpzeD8uZXJyb3IgfHwgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwgdGhpcy5zdGF0ZS5jbG9uZSgpO1xuXG4gICAgICAgIGxldCB0eXBlUGFyYW1ldGVycztcblxuICAgICAgICBjb25zdCBhcnJvdyA9IHRoaXMudHJ5UGFyc2UoYWJvcnQgPT4ge1xuICAgICAgICAgIHR5cGVQYXJhbWV0ZXJzID0gdGhpcy5mbG93UGFyc2VUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24oKTtcblxuICAgICAgICAgIGNvbnN0IGFycm93RXhwcmVzc2lvbiA9IHRoaXMuZm9yd2FyZE5vQXJyb3dQYXJhbXNDb252ZXJzaW9uQXQoXG4gICAgICAgICAgICB0eXBlUGFyYW1ldGVycyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucGFyc2VNYXliZUFzc2lnbihcbiAgICAgICAgICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICAgICAgICAgIGFmdGVyTGVmdFBhcnNlLFxuICAgICAgICAgICAgICAgIHJlZk5lZWRzQXJyb3dQb3MsXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgdGhpcy5yZXNldFN0YXJ0TG9jYXRpb25Gcm9tTm9kZShyZXN1bHQsIHR5cGVQYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gPFQ+KCgpID0+IHt9OiBhbnkpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGFycm93RXhwcmVzc2lvbi50eXBlICE9PSBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgJiZcbiAgICAgICAgICAgIGFycm93RXhwcmVzc2lvbi5leHRyYT8ucGFyZW50aGVzaXplZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgYWJvdmUgY2FuIHJldHVybiBhIFR5cGVDYXN0RXhwcmVzc2lvbiB3aGVuIHRoZSBhcnJvd1xuICAgICAgICAgIC8vIGV4cHJlc3Npb24gaXMgbm90IHdyYXBwZWQgaW4gcGFyZW5zLiBTZWUgYWxzbyBgdGhpcy5wYXJzZVBhcmVuSXRlbWAuXG4gICAgICAgICAgY29uc3QgZXhwciA9IHRoaXMubWF5YmVVbndyYXBUeXBlQ2FzdEV4cHJlc3Npb24oYXJyb3dFeHByZXNzaW9uKTtcbiAgICAgICAgICBleHByLnR5cGVQYXJhbWV0ZXJzID0gdHlwZVBhcmFtZXRlcnM7XG4gICAgICAgICAgdGhpcy5yZXNldFN0YXJ0TG9jYXRpb25Gcm9tTm9kZShleHByLCB0eXBlUGFyYW1ldGVycyk7XG5cbiAgICAgICAgICByZXR1cm4gYXJyb3dFeHByZXNzaW9uO1xuICAgICAgICB9LCBzdGF0ZSk7XG5cbiAgICAgICAgbGV0IGFycm93RXhwcmVzc2lvbjogPyhcbiAgICAgICAgICB8IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cbiAgICAgICAgICB8IE4uVHlwZUNhc3RFeHByZXNzaW9uXG4gICAgICAgICkgPSBudWxsO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBhcnJvdy5ub2RlICYmXG4gICAgICAgICAgdGhpcy5tYXliZVVud3JhcFR5cGVDYXN0RXhwcmVzc2lvbihhcnJvdy5ub2RlKS50eXBlID09PVxuICAgICAgICAgICAgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICghYXJyb3cuZXJyb3IgJiYgIWFycm93LmFib3J0ZWQpIHtcbiAgICAgICAgICAgIC8vIDxUPiBhc3luYyAoKSA9PiB7fVxuICAgICAgICAgICAgaWYgKGFycm93Lm5vZGUuYXN5bmMpIHtcbiAgICAgICAgICAgICAgLyo6OiBpbnZhcmlhbnQodHlwZVBhcmFtZXRlcnMpICovXG4gICAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgICAgdHlwZVBhcmFtZXRlcnMuc3RhcnQsXG4gICAgICAgICAgICAgICAgRmxvd0Vycm9ycy5VbmV4cGVjdGVkVHlwZVBhcmFtZXRlckJlZm9yZUFzeW5jQXJyb3dGdW5jdGlvbixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFycm93Lm5vZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXJyb3dFeHByZXNzaW9uID0gYXJyb3cubm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGFyZSBoZXJlLCBib3RoIEpTWCBhbmQgRmxvdyBwYXJzaW5nIGF0dGVtcHRzIGZhaWxlZC5cbiAgICAgICAgLy8gR2l2ZSB0aGUgcHJlY2VkZW5jZSB0byB0aGUgSlNYIGVycm9yLCBleGNlcHQgaWYgSlNYIGhhZCBhblxuICAgICAgICAvLyB1bnJlY292ZXJhYmxlIGVycm9yIHdoaWxlIEZsb3cgZGlkbid0LlxuICAgICAgICAvLyBJZiB0aGUgZXJyb3IgaXMgcmVjb3ZlcmFibGUsIHdlIGNhbiBvbmx5IHJlLXJlcG9ydCBpdCBpZiB0aGVyZSBpc1xuICAgICAgICAvLyBhIG5vZGUgd2UgY2FuIHJldHVybi5cblxuICAgICAgICBpZiAoanN4Py5ub2RlKSB7XG4gICAgICAgICAgLyo6OiBpbnZhcmlhbnQoanN4LmZhaWxTdGF0ZSkgKi9cbiAgICAgICAgICB0aGlzLnN0YXRlID0ganN4LmZhaWxTdGF0ZTtcbiAgICAgICAgICByZXR1cm4ganN4Lm5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJyb3dFeHByZXNzaW9uKSB7XG4gICAgICAgICAgLyo6OiBpbnZhcmlhbnQoYXJyb3cuZmFpbFN0YXRlKSAqL1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBhcnJvdy5mYWlsU3RhdGU7XG4gICAgICAgICAgcmV0dXJuIGFycm93RXhwcmVzc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqc3g/LnRocm93bikgdGhyb3cganN4LmVycm9yO1xuICAgICAgICBpZiAoYXJyb3cudGhyb3duKSB0aHJvdyBhcnJvdy5lcnJvcjtcblxuICAgICAgICAvKjo6IGludmFyaWFudCh0eXBlUGFyYW1ldGVycykgKi9cbiAgICAgICAgdGhyb3cgdGhpcy5yYWlzZShcbiAgICAgICAgICB0eXBlUGFyYW1ldGVycy5zdGFydCxcbiAgICAgICAgICBGbG93RXJyb3JzLlVuZXhwZWN0ZWRUb2tlbkFmdGVyVHlwZVBhcmFtZXRlcixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlTWF5YmVBc3NpZ24oXG4gICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICAgIGFmdGVyTGVmdFBhcnNlLFxuICAgICAgICByZWZOZWVkc0Fycm93UG9zLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgcmV0dXJuIHR5cGVzIGZvciBhcnJvdyBmdW5jdGlvbnNcbiAgICBwYXJzZUFycm93KG5vZGU6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24pOiA/Ti5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5jb2xvbikpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50cnlQYXJzZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb2xkTm9Bbm9uRnVuY3Rpb25UeXBlID0gdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGUgPSB0cnVlO1xuXG4gICAgICAgICAgY29uc3QgdHlwZU5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXG4gICAgICAgICAgW1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSAoZGVzdHJ1Y3R1cmluZyBub3Qgc3VwcG9ydGVkIHlldClcbiAgICAgICAgICAgIHR5cGVOb2RlLnR5cGVBbm5vdGF0aW9uLFxuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSAoZGVzdHJ1Y3R1cmluZyBub3Qgc3VwcG9ydGVkIHlldClcbiAgICAgICAgICAgIG5vZGUucHJlZGljYXRlLFxuICAgICAgICAgIF0gPSB0aGlzLmZsb3dQYXJzZVR5cGVBbmRQcmVkaWNhdGVJbml0aWFsaXNlcigpO1xuXG4gICAgICAgICAgdGhpcy5zdGF0ZS5ub0Fub25GdW5jdGlvblR5cGUgPSBvbGROb0Fub25GdW5jdGlvblR5cGU7XG5cbiAgICAgICAgICBpZiAodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LmFycm93KSkgdGhpcy51bmV4cGVjdGVkKCk7XG5cbiAgICAgICAgICByZXR1cm4gdHlwZU5vZGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQudGhyb3duKSByZXR1cm4gbnVsbDtcbiAgICAgICAgLyo6OiBpbnZhcmlhbnQocmVzdWx0Lm5vZGUpICovXG5cbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhpcy5zdGF0ZSA9IHJlc3VsdC5mYWlsU3RhdGU7XG5cbiAgICAgICAgLy8gYXNzaWduIGFmdGVyIGl0IGlzIGNsZWFyIGl0IGlzIGFuIGFycm93XG4gICAgICAgIG5vZGUucmV0dXJuVHlwZSA9IHJlc3VsdC5ub2RlLnR5cGVBbm5vdGF0aW9uXG4gICAgICAgICAgPyB0aGlzLmZpbmlzaE5vZGUocmVzdWx0Lm5vZGUsIFwiVHlwZUFubm90YXRpb25cIilcbiAgICAgICAgICA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUFycm93KG5vZGUpO1xuICAgIH1cblxuICAgIHNob3VsZFBhcnNlQXJyb3coKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5tYXRjaCh0dC5jb2xvbikgfHwgc3VwZXIuc2hvdWxkUGFyc2VBcnJvdygpO1xuICAgIH1cblxuICAgIHNldEFycm93RnVuY3Rpb25QYXJhbWV0ZXJzKFxuICAgICAgbm9kZTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbixcbiAgICAgIHBhcmFtczogTi5FeHByZXNzaW9uW10sXG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5ub0Fycm93UGFyYW1zQ29udmVyc2lvbkF0LmluZGV4T2Yobm9kZS5zdGFydCkgIT09IC0xKSB7XG4gICAgICAgIG5vZGUucGFyYW1zID0gcGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3VwZXIuc2V0QXJyb3dGdW5jdGlvblBhcmFtZXRlcnMobm9kZSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1BhcmFtcyhcbiAgICAgIG5vZGU6IE4uRnVuY3Rpb24sXG4gICAgICBhbGxvd0R1cGxpY2F0ZXM6IGJvb2xlYW4sXG4gICAgICBpc0Fycm93RnVuY3Rpb246ID9ib29sZWFuLFxuICAgICk6IHZvaWQge1xuICAgICAgaWYgKFxuICAgICAgICBpc0Fycm93RnVuY3Rpb24gJiZcbiAgICAgICAgdGhpcy5zdGF0ZS5ub0Fycm93UGFyYW1zQ29udmVyc2lvbkF0LmluZGV4T2Yobm9kZS5zdGFydCkgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXIuY2hlY2tQYXJhbXMoLi4uYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBwYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uKGNhbkJlQXJyb3c6IGJvb2xlYW4pOiBOLkV4cHJlc3Npb24ge1xuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24oXG4gICAgICAgIGNhbkJlQXJyb3cgJiYgdGhpcy5zdGF0ZS5ub0Fycm93QXQuaW5kZXhPZih0aGlzLnN0YXRlLnN0YXJ0KSA9PT0gLTEsXG4gICAgICApO1xuICAgIH1cblxuICAgIHBhcnNlU3Vic2NyaXB0cyhcbiAgICAgIGJhc2U6IE4uRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgICBub0NhbGxzPzogP2Jvb2xlYW4sXG4gICAgKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIGlmIChcbiAgICAgICAgYmFzZS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICBiYXNlLm5hbWUgPT09IFwiYXN5bmNcIiAmJlxuICAgICAgICB0aGlzLnN0YXRlLm5vQXJyb3dBdC5pbmRleE9mKHN0YXJ0UG9zKSAhPT0gLTFcbiAgICAgICkge1xuICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICBub2RlLmNhbGxlZSA9IGJhc2U7XG4gICAgICAgIG5vZGUuYXJndW1lbnRzID0gdGhpcy5wYXJzZUNhbGxFeHByZXNzaW9uQXJndW1lbnRzKHR0LnBhcmVuUiwgZmFsc2UpO1xuICAgICAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQ2FsbEV4cHJlc3Npb25cIik7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBiYXNlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG4gICAgICAgIGJhc2UubmFtZSA9PT0gXCJhc3luY1wiICYmXG4gICAgICAgIHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZS5jbG9uZSgpO1xuICAgICAgICBjb25zdCBhcnJvdyA9IHRoaXMudHJ5UGFyc2UoXG4gICAgICAgICAgYWJvcnQgPT5cbiAgICAgICAgICAgIHRoaXMucGFyc2VBc3luY0Fycm93V2l0aFR5cGVQYXJhbWV0ZXJzKHN0YXJ0UG9zLCBzdGFydExvYykgfHxcbiAgICAgICAgICAgIGFib3J0KCksXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFhcnJvdy5lcnJvciAmJiAhYXJyb3cuYWJvcnRlZCkgcmV0dXJuIGFycm93Lm5vZGU7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50cnlQYXJzZShcbiAgICAgICAgICAoKSA9PiBzdXBlci5wYXJzZVN1YnNjcmlwdHMoYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzKSxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAocmVzdWx0Lm5vZGUgJiYgIXJlc3VsdC5lcnJvcikgcmV0dXJuIHJlc3VsdC5ub2RlO1xuXG4gICAgICAgIGlmIChhcnJvdy5ub2RlKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IGFycm93LmZhaWxTdGF0ZTtcbiAgICAgICAgICByZXR1cm4gYXJyb3cubm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQubm9kZSkge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSByZXN1bHQuZmFpbFN0YXRlO1xuICAgICAgICAgIHJldHVybiByZXN1bHQubm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGFycm93LmVycm9yIHx8IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlU3Vic2NyaXB0cyhiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMpO1xuICAgIH1cblxuICAgIHBhcnNlU3Vic2NyaXB0KFxuICAgICAgYmFzZTogTi5FeHByZXNzaW9uLFxuICAgICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICAgIG5vQ2FsbHM6ID9ib29sZWFuLFxuICAgICAgc3Vic2NyaXB0U3RhdGU6IE4uUGFyc2VTdWJzY3JpcHRTdGF0ZSxcbiAgICApOiBOLkV4cHJlc3Npb24ge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQucXVlc3Rpb25Eb3QpICYmIHRoaXMuaXNMb29rYWhlYWRUb2tlbl9sdCgpKSB7XG4gICAgICAgIHN1YnNjcmlwdFN0YXRlLm9wdGlvbmFsQ2hhaW5NZW1iZXIgPSB0cnVlO1xuICAgICAgICBpZiAobm9DYWxscykge1xuICAgICAgICAgIHN1YnNjcmlwdFN0YXRlLnN0b3AgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICBjb25zdCBub2RlOiBOLk9wdGlvbmFsQ2FsbEV4cHJlc3Npb24gPSB0aGlzLnN0YXJ0Tm9kZUF0KFxuICAgICAgICAgIHN0YXJ0UG9zLFxuICAgICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICApO1xuICAgICAgICBub2RlLmNhbGxlZSA9IGJhc2U7XG4gICAgICAgIG5vZGUudHlwZUFyZ3VtZW50cyA9IHRoaXMuZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb24oKTtcbiAgICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5MKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBub2RlLmFyZ3VtZW50cyA9IHRoaXMucGFyc2VDYWxsRXhwcmVzc2lvbkFyZ3VtZW50cyh0dC5wYXJlblIsIGZhbHNlKTtcbiAgICAgICAgbm9kZS5vcHRpb25hbCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaENhbGxFeHByZXNzaW9uKG5vZGUsIC8qIG9wdGlvbmFsICovIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgIW5vQ2FsbHMgJiZcbiAgICAgICAgdGhpcy5zaG91bGRQYXJzZVR5cGVzKCkgJiZcbiAgICAgICAgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgbm9kZS5jYWxsZWUgPSBiYXNlO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudHJ5UGFyc2UoKCkgPT4ge1xuICAgICAgICAgIG5vZGUudHlwZUFyZ3VtZW50cyA9IHRoaXMuZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25DYWxsT3JOZXcoKTtcbiAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpO1xuICAgICAgICAgIG5vZGUuYXJndW1lbnRzID0gdGhpcy5wYXJzZUNhbGxFeHByZXNzaW9uQXJndW1lbnRzKHR0LnBhcmVuUiwgZmFsc2UpO1xuICAgICAgICAgIGlmIChzdWJzY3JpcHRTdGF0ZS5vcHRpb25hbENoYWluTWVtYmVyKSBub2RlLm9wdGlvbmFsID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgc3Vic2NyaXB0U3RhdGUub3B0aW9uYWxDaGFpbk1lbWJlcixcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVzdWx0Lm5vZGUpIHtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB0aGlzLnN0YXRlID0gcmVzdWx0LmZhaWxTdGF0ZTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0Lm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlU3Vic2NyaXB0KFxuICAgICAgICBiYXNlLFxuICAgICAgICBzdGFydFBvcyxcbiAgICAgICAgc3RhcnRMb2MsXG4gICAgICAgIG5vQ2FsbHMsXG4gICAgICAgIHN1YnNjcmlwdFN0YXRlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBwYXJzZU5ld0FyZ3VtZW50cyhub2RlOiBOLk5ld0V4cHJlc3Npb24pOiB2b2lkIHtcbiAgICAgIGxldCB0YXJncyA9IG51bGw7XG4gICAgICBpZiAodGhpcy5zaG91bGRQYXJzZVR5cGVzKCkgJiYgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHRhcmdzID0gdGhpcy50cnlQYXJzZSgoKSA9PlxuICAgICAgICAgIHRoaXMuZmxvd1BhcnNlVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25DYWxsT3JOZXcoKSxcbiAgICAgICAgKS5ub2RlO1xuICAgICAgfVxuICAgICAgbm9kZS50eXBlQXJndW1lbnRzID0gdGFyZ3M7XG5cbiAgICAgIHN1cGVyLnBhcnNlTmV3QXJndW1lbnRzKG5vZGUpO1xuICAgIH1cblxuICAgIHBhcnNlQXN5bmNBcnJvd1dpdGhUeXBlUGFyYW1ldGVycyhcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgKTogP04uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIHRoaXMucGFyc2VGdW5jdGlvblBhcmFtcyhub2RlKTtcbiAgICAgIGlmICghdGhpcy5wYXJzZUFycm93KG5vZGUpKSByZXR1cm47XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUFycm93RXhwcmVzc2lvbihcbiAgICAgICAgbm9kZSxcbiAgICAgICAgLyogcGFyYW1zICovIHVuZGVmaW5lZCxcbiAgICAgICAgLyogaXNBc3luYyAqLyB0cnVlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZWFkVG9rZW5fbXVsdF9tb2R1bG8oY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgICBpZiAoXG4gICAgICAgIGNvZGUgPT09IGNoYXJDb2Rlcy5hc3RlcmlzayAmJlxuICAgICAgICBuZXh0ID09PSBjaGFyQ29kZXMuc2xhc2ggJiZcbiAgICAgICAgdGhpcy5zdGF0ZS5oYXNGbG93Q29tbWVudFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuaGFzRmxvd0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5wb3MgKz0gMjtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5yZWFkVG9rZW5fbXVsdF9tb2R1bG8oY29kZSk7XG4gICAgfVxuXG4gICAgcmVhZFRva2VuX3BpcGVfYW1wKGNvZGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpO1xuICAgICAgaWYgKFxuICAgICAgICBjb2RlID09PSBjaGFyQ29kZXMudmVydGljYWxCYXIgJiZcbiAgICAgICAgbmV4dCA9PT0gY2hhckNvZGVzLnJpZ2h0Q3VybHlCcmFjZVxuICAgICAgKSB7XG4gICAgICAgIC8vICd8fSdcbiAgICAgICAgdGhpcy5maW5pc2hPcCh0dC5icmFjZUJhclIsIDIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1cGVyLnJlYWRUb2tlbl9waXBlX2FtcChjb2RlKTtcbiAgICB9XG5cbiAgICBwYXJzZVRvcExldmVsKGZpbGU6IE4uRmlsZSwgcHJvZ3JhbTogTi5Qcm9ncmFtKTogTi5GaWxlIHtcbiAgICAgIGNvbnN0IGZpbGVOb2RlID0gc3VwZXIucGFyc2VUb3BMZXZlbChmaWxlLCBwcm9ncmFtKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmhhc0Zsb3dDb21tZW50KSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5wb3MsIEZsb3dFcnJvcnMuVW50ZXJtaW5hdGVkRmxvd0NvbW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbGVOb2RlO1xuICAgIH1cblxuICAgIHNraXBCbG9ja0NvbW1lbnQoKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5oYXNQbHVnaW4oXCJmbG93Q29tbWVudHNcIikgJiYgdGhpcy5za2lwRmxvd0NvbW1lbnQoKSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5oYXNGbG93Q29tbWVudCkge1xuICAgICAgICAgIHRoaXMudW5leHBlY3RlZChudWxsLCBGbG93RXJyb3JzLk5lc3RlZEZsb3dDb21tZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0Zsb3dDb21tZW50Q29tcGxldGlvbigpO1xuICAgICAgICB0aGlzLnN0YXRlLnBvcyArPSB0aGlzLnNraXBGbG93Q29tbWVudCgpO1xuICAgICAgICB0aGlzLnN0YXRlLmhhc0Zsb3dDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5oYXNGbG93Q29tbWVudCkge1xuICAgICAgICBjb25zdCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqLS9cIiwgKHRoaXMuc3RhdGUucG9zICs9IDIpKTtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zIC0gMiwgRXJyb3JzLlVudGVybWluYXRlZENvbW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUucG9zID0gZW5kICsgMztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdXBlci5za2lwQmxvY2tDb21tZW50KCk7XG4gICAgfVxuXG4gICAgc2tpcEZsb3dDb21tZW50KCk6IG51bWJlciB8IGJvb2xlYW4ge1xuICAgICAgY29uc3QgeyBwb3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBsZXQgc2hpZnRUb0ZpcnN0Tm9uV2hpdGVTcGFjZSA9IDI7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIFtjaGFyQ29kZXMuc3BhY2UsIGNoYXJDb2Rlcy50YWJdLmluY2x1ZGVzKFxuICAgICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdChwb3MgKyBzaGlmdFRvRmlyc3ROb25XaGl0ZVNwYWNlKSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHNoaWZ0VG9GaXJzdE5vbldoaXRlU3BhY2UrKztcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2gyID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHNoaWZ0VG9GaXJzdE5vbldoaXRlU3BhY2UgKyBwb3MpO1xuICAgICAgY29uc3QgY2gzID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHNoaWZ0VG9GaXJzdE5vbldoaXRlU3BhY2UgKyBwb3MgKyAxKTtcblxuICAgICAgaWYgKGNoMiA9PT0gY2hhckNvZGVzLmNvbG9uICYmIGNoMyA9PT0gY2hhckNvZGVzLmNvbG9uKSB7XG4gICAgICAgIHJldHVybiBzaGlmdFRvRmlyc3ROb25XaGl0ZVNwYWNlICsgMjsgLy8gY2hlY2sgZm9yIC8qOjpcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5pbnB1dC5zbGljZShcbiAgICAgICAgICBzaGlmdFRvRmlyc3ROb25XaGl0ZVNwYWNlICsgcG9zLFxuICAgICAgICAgIHNoaWZ0VG9GaXJzdE5vbldoaXRlU3BhY2UgKyBwb3MgKyAxMixcbiAgICAgICAgKSA9PT0gXCJmbG93LWluY2x1ZGVcIlxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBzaGlmdFRvRmlyc3ROb25XaGl0ZVNwYWNlICsgMTI7IC8vIGNoZWNrIGZvciAvKmZsb3ctaW5jbHVkZVxuICAgICAgfVxuICAgICAgaWYgKGNoMiA9PT0gY2hhckNvZGVzLmNvbG9uICYmIGNoMyAhPT0gY2hhckNvZGVzLmNvbG9uKSB7XG4gICAgICAgIHJldHVybiBzaGlmdFRvRmlyc3ROb25XaGl0ZVNwYWNlOyAvLyBjaGVjayBmb3IgLyo6LCBhZHZhbmNlIHVwIHRvIDpcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBoYXNGbG93Q29tbWVudENvbXBsZXRpb24oKTogdm9pZCB7XG4gICAgICBjb25zdCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuVW50ZXJtaW5hdGVkQ29tbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmxvdyBlbnVtIHBhcnNpbmdcblxuICAgIGZsb3dFbnVtRXJyb3JCb29sZWFuTWVtYmVyTm90SW5pdGlhbGl6ZWQoXG4gICAgICBwb3M6IG51bWJlcixcbiAgICAgIHsgZW51bU5hbWUsIG1lbWJlck5hbWUgfTogeyBlbnVtTmFtZTogc3RyaW5nLCBtZW1iZXJOYW1lOiBzdHJpbmcgfSxcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIHBvcyxcbiAgICAgICAgRmxvd0Vycm9ycy5FbnVtQm9vbGVhbk1lbWJlck5vdEluaXRpYWxpemVkLFxuICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgICBlbnVtTmFtZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxvd0VudW1FcnJvckludmFsaWRNZW1iZXJOYW1lKFxuICAgICAgcG9zOiBudW1iZXIsXG4gICAgICB7IGVudW1OYW1lLCBtZW1iZXJOYW1lIH06IHsgZW51bU5hbWU6IHN0cmluZywgbWVtYmVyTmFtZTogc3RyaW5nIH0sXG4gICAgKTogdm9pZCB7XG4gICAgICBjb25zdCBzdWdnZXN0aW9uID0gbWVtYmVyTmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbWVtYmVyTmFtZS5zbGljZSgxKTtcbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIHBvcyxcbiAgICAgICAgRmxvd0Vycm9ycy5FbnVtSW52YWxpZE1lbWJlck5hbWUsXG4gICAgICAgIG1lbWJlck5hbWUsXG4gICAgICAgIHN1Z2dlc3Rpb24sXG4gICAgICAgIGVudW1OYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbG93RW51bUVycm9yRHVwbGljYXRlTWVtYmVyTmFtZShcbiAgICAgIHBvczogbnVtYmVyLFxuICAgICAgeyBlbnVtTmFtZSwgbWVtYmVyTmFtZSB9OiB7IGVudW1OYW1lOiBzdHJpbmcsIG1lbWJlck5hbWU6IHN0cmluZyB9LFxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5yYWlzZShwb3MsIEZsb3dFcnJvcnMuRW51bUR1cGxpY2F0ZU1lbWJlck5hbWUsIG1lbWJlck5hbWUsIGVudW1OYW1lKTtcbiAgICB9XG5cbiAgICBmbG93RW51bUVycm9ySW5jb25zaXN0ZW50TWVtYmVyVmFsdWVzKFxuICAgICAgcG9zOiBudW1iZXIsXG4gICAgICB7IGVudW1OYW1lIH06IHsgZW51bU5hbWU6IHN0cmluZyB9LFxuICAgICk6IHZvaWQge1xuICAgICAgdGhpcy5yYWlzZShwb3MsIEZsb3dFcnJvcnMuRW51bUluY29uc2lzdGVudE1lbWJlclZhbHVlcywgZW51bU5hbWUpO1xuICAgIH1cblxuICAgIGZsb3dFbnVtRXJyb3JJbnZhbGlkRXhwbGljaXRUeXBlKFxuICAgICAgcG9zOiBudW1iZXIsXG4gICAgICB7XG4gICAgICAgIGVudW1OYW1lLFxuICAgICAgICBzdXBwbGllZFR5cGUsXG4gICAgICB9OiB7IGVudW1OYW1lOiBzdHJpbmcsIHN1cHBsaWVkVHlwZTogbnVsbCB8IHN0cmluZyB9LFxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMucmFpc2UoXG4gICAgICAgIHBvcyxcbiAgICAgICAgc3VwcGxpZWRUeXBlID09PSBudWxsXG4gICAgICAgICAgPyBGbG93RXJyb3JzLkVudW1JbnZhbGlkRXhwbGljaXRUeXBlVW5rbm93blN1cHBsaWVkXG4gICAgICAgICAgOiBGbG93RXJyb3JzLkVudW1JbnZhbGlkRXhwbGljaXRUeXBlLFxuICAgICAgICBlbnVtTmFtZSxcbiAgICAgICAgc3VwcGxpZWRUeXBlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbG93RW51bUVycm9ySW52YWxpZE1lbWJlckluaXRpYWxpemVyKFxuICAgICAgcG9zOiBudW1iZXIsXG4gICAgICB7IGVudW1OYW1lLCBleHBsaWNpdFR5cGUsIG1lbWJlck5hbWUgfTogRW51bUNvbnRleHQsXG4gICAgKSB7XG4gICAgICBsZXQgbWVzc2FnZSA9IG51bGw7XG4gICAgICBzd2l0Y2ggKGV4cGxpY2l0VHlwZSkge1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICBtZXNzYWdlID0gRmxvd0Vycm9ycy5FbnVtSW52YWxpZE1lbWJlckluaXRpYWxpemVyUHJpbWFyeVR5cGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICBtZXNzYWdlID0gRmxvd0Vycm9ycy5FbnVtSW52YWxpZE1lbWJlckluaXRpYWxpemVyU3ltYm9sVHlwZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBudWxsXG4gICAgICAgICAgbWVzc2FnZSA9IEZsb3dFcnJvcnMuRW51bUludmFsaWRNZW1iZXJJbml0aWFsaXplclVua25vd25UeXBlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmFpc2UocG9zLCBtZXNzYWdlLCBlbnVtTmFtZSwgbWVtYmVyTmFtZSwgZXhwbGljaXRUeXBlKTtcbiAgICB9XG5cbiAgICBmbG93RW51bUVycm9yTnVtYmVyTWVtYmVyTm90SW5pdGlhbGl6ZWQoXG4gICAgICBwb3M6IG51bWJlcixcbiAgICAgIHsgZW51bU5hbWUsIG1lbWJlck5hbWUgfTogeyBlbnVtTmFtZTogc3RyaW5nLCBtZW1iZXJOYW1lOiBzdHJpbmcgfSxcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIHBvcyxcbiAgICAgICAgRmxvd0Vycm9ycy5FbnVtTnVtYmVyTWVtYmVyTm90SW5pdGlhbGl6ZWQsXG4gICAgICAgIGVudW1OYW1lLFxuICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbG93RW51bUVycm9yU3RyaW5nTWVtYmVySW5jb25zaXN0ZW50bHlJbml0YWlsaXplZChcbiAgICAgIHBvczogbnVtYmVyLFxuICAgICAgeyBlbnVtTmFtZSB9OiB7IGVudW1OYW1lOiBzdHJpbmcgfSxcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIHBvcyxcbiAgICAgICAgRmxvd0Vycm9ycy5FbnVtU3RyaW5nTWVtYmVySW5jb25zaXN0ZW50bHlJbml0YWlsaXplZCxcbiAgICAgICAgZW51bU5hbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIGZsb3dFbnVtTWVtYmVySW5pdCgpOiBFbnVtTWVtYmVySW5pdCB7XG4gICAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICBjb25zdCBlbmRPZkluaXQgPSAoKSA9PiB0aGlzLm1hdGNoKHR0LmNvbW1hKSB8fCB0aGlzLm1hdGNoKHR0LmJyYWNlUik7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xuICAgICAgICBjYXNlIHR0Lm51bToge1xuICAgICAgICAgIGNvbnN0IGxpdGVyYWwgPSB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlLCBcIk51bWVyaWNMaXRlcmFsXCIpO1xuICAgICAgICAgIGlmIChlbmRPZkluaXQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJudW1iZXJcIiwgcG9zOiBsaXRlcmFsLnN0YXJ0LCB2YWx1ZTogbGl0ZXJhbCB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyB0eXBlOiBcImludmFsaWRcIiwgcG9zOiBzdGFydFBvcyB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHQuc3RyaW5nOiB7XG4gICAgICAgICAgY29uc3QgbGl0ZXJhbCA9IHRoaXMucGFyc2VMaXRlcmFsKHRoaXMuc3RhdGUudmFsdWUsIFwiU3RyaW5nTGl0ZXJhbFwiKTtcbiAgICAgICAgICBpZiAoZW5kT2ZJbml0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwic3RyaW5nXCIsIHBvczogbGl0ZXJhbC5zdGFydCwgdmFsdWU6IGxpdGVyYWwgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJpbnZhbGlkXCIsIHBvczogc3RhcnRQb3MgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR0Ll90cnVlOlxuICAgICAgICBjYXNlIHR0Ll9mYWxzZToge1xuICAgICAgICAgIGNvbnN0IGxpdGVyYWwgPSB0aGlzLnBhcnNlQm9vbGVhbkxpdGVyYWwoKTtcbiAgICAgICAgICBpZiAoZW5kT2ZJbml0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICBwb3M6IGxpdGVyYWwuc3RhcnQsXG4gICAgICAgICAgICAgIHZhbHVlOiBsaXRlcmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJpbnZhbGlkXCIsIHBvczogc3RhcnRQb3MgfTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwiaW52YWxpZFwiLCBwb3M6IHN0YXJ0UG9zIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmxvd0VudW1NZW1iZXJSYXcoKTogeyBpZDogTi5Ob2RlLCBpbml0OiBFbnVtTWVtYmVySW5pdCB9IHtcbiAgICAgIGNvbnN0IHBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICBjb25zdCBpZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpO1xuICAgICAgY29uc3QgaW5pdCA9IHRoaXMuZWF0KHR0LmVxKVxuICAgICAgICA/IHRoaXMuZmxvd0VudW1NZW1iZXJJbml0KClcbiAgICAgICAgOiB7IHR5cGU6IFwibm9uZVwiLCBwb3MgfTtcbiAgICAgIHJldHVybiB7IGlkLCBpbml0IH07XG4gICAgfVxuXG4gICAgZmxvd0VudW1DaGVja0V4cGxpY2l0VHlwZU1pc21hdGNoKFxuICAgICAgcG9zOiBudW1iZXIsXG4gICAgICBjb250ZXh0OiBFbnVtQ29udGV4dCxcbiAgICAgIGV4cGVjdGVkVHlwZTogRW51bUV4cGxpY2l0VHlwZSxcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IHsgZXhwbGljaXRUeXBlIH0gPSBjb250ZXh0O1xuICAgICAgaWYgKGV4cGxpY2l0VHlwZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZXhwbGljaXRUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgdGhpcy5mbG93RW51bUVycm9ySW52YWxpZE1lbWJlckluaXRpYWxpemVyKHBvcywgY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmxvd0VudW1NZW1iZXJzKHtcbiAgICAgIGVudW1OYW1lLFxuICAgICAgZXhwbGljaXRUeXBlLFxuICAgIH06IHtcbiAgICAgIGVudW1OYW1lOiBzdHJpbmcsXG4gICAgICBleHBsaWNpdFR5cGU6IEVudW1FeHBsaWNpdFR5cGUsXG4gICAgfSk6IHt8XG4gICAgICBib29sZWFuTWVtYmVyczogQXJyYXk8Ti5Ob2RlPixcbiAgICAgIG51bWJlck1lbWJlcnM6IEFycmF5PE4uTm9kZT4sXG4gICAgICBzdHJpbmdNZW1iZXJzOiBBcnJheTxOLk5vZGU+LFxuICAgICAgZGVmYXVsdGVkTWVtYmVyczogQXJyYXk8Ti5Ob2RlPixcbiAgICB8fSB7XG4gICAgICBjb25zdCBzZWVuTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgICBjb25zdCBtZW1iZXJzID0ge1xuICAgICAgICBib29sZWFuTWVtYmVyczogW10sXG4gICAgICAgIG51bWJlck1lbWJlcnM6IFtdLFxuICAgICAgICBzdHJpbmdNZW1iZXJzOiBbXSxcbiAgICAgICAgZGVmYXVsdGVkTWVtYmVyczogW10sXG4gICAgICB9O1xuICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKHR0LmJyYWNlUikpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIGNvbnN0IHsgaWQsIGluaXQgfSA9IHRoaXMuZmxvd0VudW1NZW1iZXJSYXcoKTtcbiAgICAgICAgY29uc3QgbWVtYmVyTmFtZSA9IGlkLm5hbWU7XG4gICAgICAgIGlmIChtZW1iZXJOYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eW2Etel0vLnRlc3QobWVtYmVyTmFtZSkpIHtcbiAgICAgICAgICB0aGlzLmZsb3dFbnVtRXJyb3JJbnZhbGlkTWVtYmVyTmFtZShpZC5zdGFydCwge1xuICAgICAgICAgICAgZW51bU5hbWUsXG4gICAgICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWVuTmFtZXMuaGFzKG1lbWJlck5hbWUpKSB7XG4gICAgICAgICAgdGhpcy5mbG93RW51bUVycm9yRHVwbGljYXRlTWVtYmVyTmFtZShpZC5zdGFydCwge1xuICAgICAgICAgICAgZW51bU5hbWUsXG4gICAgICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNlZW5OYW1lcy5hZGQobWVtYmVyTmFtZSk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB7IGVudW1OYW1lLCBleHBsaWNpdFR5cGUsIG1lbWJlck5hbWUgfTtcbiAgICAgICAgbWVtYmVyTm9kZS5pZCA9IGlkO1xuICAgICAgICBzd2l0Y2ggKGluaXQudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6IHtcbiAgICAgICAgICAgIHRoaXMuZmxvd0VudW1DaGVja0V4cGxpY2l0VHlwZU1pc21hdGNoKFxuICAgICAgICAgICAgICBpbml0LnBvcyxcbiAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgXCJib29sZWFuXCIsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWVtYmVyTm9kZS5pbml0ID0gaW5pdC52YWx1ZTtcbiAgICAgICAgICAgIG1lbWJlcnMuYm9vbGVhbk1lbWJlcnMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5maW5pc2hOb2RlKG1lbWJlck5vZGUsIFwiRW51bUJvb2xlYW5NZW1iZXJcIiksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICAgICAgdGhpcy5mbG93RW51bUNoZWNrRXhwbGljaXRUeXBlTWlzbWF0Y2goaW5pdC5wb3MsIGNvbnRleHQsIFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgbWVtYmVyTm9kZS5pbml0ID0gaW5pdC52YWx1ZTtcbiAgICAgICAgICAgIG1lbWJlcnMubnVtYmVyTWVtYmVycy5wdXNoKFxuICAgICAgICAgICAgICB0aGlzLmZpbmlzaE5vZGUobWVtYmVyTm9kZSwgXCJFbnVtTnVtYmVyTWVtYmVyXCIpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgICAgIHRoaXMuZmxvd0VudW1DaGVja0V4cGxpY2l0VHlwZU1pc21hdGNoKGluaXQucG9zLCBjb250ZXh0LCBcInN0cmluZ1wiKTtcbiAgICAgICAgICAgIG1lbWJlck5vZGUuaW5pdCA9IGluaXQudmFsdWU7XG4gICAgICAgICAgICBtZW1iZXJzLnN0cmluZ01lbWJlcnMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5maW5pc2hOb2RlKG1lbWJlck5vZGUsIFwiRW51bVN0cmluZ01lbWJlclwiKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImludmFsaWRcIjoge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5mbG93RW51bUVycm9ySW52YWxpZE1lbWJlckluaXRpYWxpemVyKGluaXQucG9zLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcIm5vbmVcIjoge1xuICAgICAgICAgICAgc3dpdGNoIChleHBsaWNpdFR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dFbnVtRXJyb3JCb29sZWFuTWVtYmVyTm90SW5pdGlhbGl6ZWQoXG4gICAgICAgICAgICAgICAgICBpbml0LnBvcyxcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0VudW1FcnJvck51bWJlck1lbWJlck5vdEluaXRpYWxpemVkKGluaXQucG9zLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBtZW1iZXJzLmRlZmF1bHRlZE1lbWJlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoTm9kZShtZW1iZXJOb2RlLCBcIkVudW1EZWZhdWx0ZWRNZW1iZXJcIiksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMubWF0Y2godHQuYnJhY2VSKSkge1xuICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbW1hKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbWJlcnM7XG4gICAgfVxuXG4gICAgZmxvd0VudW1TdHJpbmdNZW1iZXJzKFxuICAgICAgaW5pdGlhbGl6ZWRNZW1iZXJzOiBBcnJheTxOLk5vZGU+LFxuICAgICAgZGVmYXVsdGVkTWVtYmVyczogQXJyYXk8Ti5Ob2RlPixcbiAgICAgIHsgZW51bU5hbWUgfTogeyBlbnVtTmFtZTogc3RyaW5nIH0sXG4gICAgKTogQXJyYXk8Ti5Ob2RlPiB7XG4gICAgICBpZiAoaW5pdGlhbGl6ZWRNZW1iZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdGVkTWVtYmVycztcbiAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdGVkTWVtYmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVkTWVtYmVycztcbiAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdGVkTWVtYmVycy5sZW5ndGggPiBpbml0aWFsaXplZE1lbWJlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIGluaXRpYWxpemVkTWVtYmVycykge1xuICAgICAgICAgIHRoaXMuZmxvd0VudW1FcnJvclN0cmluZ01lbWJlckluY29uc2lzdGVudGx5SW5pdGFpbGl6ZWQoXG4gICAgICAgICAgICBtZW1iZXIuc3RhcnQsXG4gICAgICAgICAgICB7IGVudW1OYW1lIH0sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdGVkTWVtYmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIGRlZmF1bHRlZE1lbWJlcnMpIHtcbiAgICAgICAgICB0aGlzLmZsb3dFbnVtRXJyb3JTdHJpbmdNZW1iZXJJbmNvbnNpc3RlbnRseUluaXRhaWxpemVkKFxuICAgICAgICAgICAgbWVtYmVyLnN0YXJ0LFxuICAgICAgICAgICAgeyBlbnVtTmFtZSB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVkTWVtYmVycztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmbG93RW51bVBhcnNlRXhwbGljaXRUeXBlKHtcbiAgICAgIGVudW1OYW1lLFxuICAgIH06IHtcbiAgICAgIGVudW1OYW1lOiBzdHJpbmcsXG4gICAgfSk6IEVudW1FeHBsaWNpdFR5cGUge1xuICAgICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcIm9mXCIpKSB7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5uYW1lKSkge1xuICAgICAgICAgIHRocm93IHRoaXMuZmxvd0VudW1FcnJvckludmFsaWRFeHBsaWNpdFR5cGUodGhpcy5zdGF0ZS5zdGFydCwge1xuICAgICAgICAgICAgZW51bU5hbWUsXG4gICAgICAgICAgICBzdXBwbGllZFR5cGU6IG51bGwsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdmFsdWUgIT09IFwiYm9vbGVhblwiICYmXG4gICAgICAgICAgdmFsdWUgIT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgICB2YWx1ZSAhPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgIHZhbHVlICE9PSBcInN5bWJvbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuZmxvd0VudW1FcnJvckludmFsaWRFeHBsaWNpdFR5cGUodGhpcy5zdGF0ZS5zdGFydCwge1xuICAgICAgICAgICAgZW51bU5hbWUsXG4gICAgICAgICAgICBzdXBwbGllZFR5cGU6IHZhbHVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZmxvd0VudW1Cb2R5KG5vZGU6IE4uTm9kZSwgeyBlbnVtTmFtZSwgbmFtZUxvYyB9KTogTi5Ob2RlIHtcbiAgICAgIGNvbnN0IGV4cGxpY2l0VHlwZSA9IHRoaXMuZmxvd0VudW1QYXJzZUV4cGxpY2l0VHlwZSh7IGVudW1OYW1lIH0pO1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VMKTtcbiAgICAgIGNvbnN0IG1lbWJlcnMgPSB0aGlzLmZsb3dFbnVtTWVtYmVycyh7IGVudW1OYW1lLCBleHBsaWNpdFR5cGUgfSk7XG5cbiAgICAgIHN3aXRjaCAoZXhwbGljaXRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgbm9kZS5leHBsaWNpdFR5cGUgPSB0cnVlO1xuICAgICAgICAgIG5vZGUubWVtYmVycyA9IG1lbWJlcnMuYm9vbGVhbk1lbWJlcnM7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRW51bUJvb2xlYW5Cb2R5XCIpO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgbm9kZS5leHBsaWNpdFR5cGUgPSB0cnVlO1xuICAgICAgICAgIG5vZGUubWVtYmVycyA9IG1lbWJlcnMubnVtYmVyTWVtYmVycztcbiAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZVIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbnVtTnVtYmVyQm9keVwiKTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgIG5vZGUuZXhwbGljaXRUeXBlID0gdHJ1ZTtcbiAgICAgICAgICBub2RlLm1lbWJlcnMgPSB0aGlzLmZsb3dFbnVtU3RyaW5nTWVtYmVycyhcbiAgICAgICAgICAgIG1lbWJlcnMuc3RyaW5nTWVtYmVycyxcbiAgICAgICAgICAgIG1lbWJlcnMuZGVmYXVsdGVkTWVtYmVycyxcbiAgICAgICAgICAgIHsgZW51bU5hbWUgfSxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVudW1TdHJpbmdCb2R5XCIpO1xuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgbm9kZS5tZW1iZXJzID0gbWVtYmVycy5kZWZhdWx0ZWRNZW1iZXJzO1xuICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVudW1TeW1ib2xCb2R5XCIpO1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgLy8gYGV4cGxpY2l0VHlwZWAgaXMgYG51bGxgXG4gICAgICAgICAgY29uc3QgZW1wdHkgPSAoKSA9PiB7XG4gICAgICAgICAgICBub2RlLm1lbWJlcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRW51bVN0cmluZ0JvZHlcIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBub2RlLmV4cGxpY2l0VHlwZSA9IGZhbHNlO1xuXG4gICAgICAgICAgY29uc3QgYm9vbHNMZW4gPSBtZW1iZXJzLmJvb2xlYW5NZW1iZXJzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBudW1zTGVuID0gbWVtYmVycy5udW1iZXJNZW1iZXJzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBzdHJzTGVuID0gbWVtYmVycy5zdHJpbmdNZW1iZXJzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBkZWZhdWx0ZWRMZW4gPSBtZW1iZXJzLmRlZmF1bHRlZE1lbWJlcnMubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKCFib29sc0xlbiAmJiAhbnVtc0xlbiAmJiAhc3Ryc0xlbiAmJiAhZGVmYXVsdGVkTGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFib29sc0xlbiAmJiAhbnVtc0xlbikge1xuICAgICAgICAgICAgbm9kZS5tZW1iZXJzID0gdGhpcy5mbG93RW51bVN0cmluZ01lbWJlcnMoXG4gICAgICAgICAgICAgIG1lbWJlcnMuc3RyaW5nTWVtYmVycyxcbiAgICAgICAgICAgICAgbWVtYmVycy5kZWZhdWx0ZWRNZW1iZXJzLFxuICAgICAgICAgICAgICB7IGVudW1OYW1lIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbnVtU3RyaW5nQm9keVwiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFudW1zTGVuICYmICFzdHJzTGVuICYmIGJvb2xzTGVuID49IGRlZmF1bHRlZExlbikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtZW1iZXIgb2YgbWVtYmVycy5kZWZhdWx0ZWRNZW1iZXJzKSB7XG4gICAgICAgICAgICAgIHRoaXMuZmxvd0VudW1FcnJvckJvb2xlYW5NZW1iZXJOb3RJbml0aWFsaXplZChtZW1iZXIuc3RhcnQsIHtcbiAgICAgICAgICAgICAgICBlbnVtTmFtZSxcbiAgICAgICAgICAgICAgICBtZW1iZXJOYW1lOiBtZW1iZXIuaWQubmFtZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlLm1lbWJlcnMgPSBtZW1iZXJzLmJvb2xlYW5NZW1iZXJzO1xuICAgICAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbnVtQm9vbGVhbkJvZHlcIik7XG4gICAgICAgICAgfSBlbHNlIGlmICghYm9vbHNMZW4gJiYgIXN0cnNMZW4gJiYgbnVtc0xlbiA+PSBkZWZhdWx0ZWRMZW4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIG1lbWJlcnMuZGVmYXVsdGVkTWVtYmVycykge1xuICAgICAgICAgICAgICB0aGlzLmZsb3dFbnVtRXJyb3JOdW1iZXJNZW1iZXJOb3RJbml0aWFsaXplZChtZW1iZXIuc3RhcnQsIHtcbiAgICAgICAgICAgICAgICBlbnVtTmFtZSxcbiAgICAgICAgICAgICAgICBtZW1iZXJOYW1lOiBtZW1iZXIuaWQubmFtZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlLm1lbWJlcnMgPSBtZW1iZXJzLm51bWJlck1lbWJlcnM7XG4gICAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZVIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVudW1OdW1iZXJCb2R5XCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZsb3dFbnVtRXJyb3JJbmNvbnNpc3RlbnRNZW1iZXJWYWx1ZXMobmFtZUxvYywgeyBlbnVtTmFtZSB9KTtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZsb3dQYXJzZUVudW1EZWNsYXJhdGlvbihub2RlOiBOLk5vZGUpOiBOLk5vZGUge1xuICAgICAgY29uc3QgaWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgbm9kZS5pZCA9IGlkO1xuICAgICAgbm9kZS5ib2R5ID0gdGhpcy5mbG93RW51bUJvZHkodGhpcy5zdGFydE5vZGUoKSwge1xuICAgICAgICBlbnVtTmFtZTogaWQubmFtZSxcbiAgICAgICAgbmFtZUxvYzogaWQuc3RhcnQsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbnVtRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29udGV4dChwcmV2VHlwZTogVG9rZW5UeXBlKTogdm9pZCB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMubWF0Y2godHQubmFtZSkgJiZcbiAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSA9PT0gXCJvZlwiICYmXG4gICAgICAgIHByZXZUeXBlID09PSB0dC5uYW1lICYmXG4gICAgICAgIHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQsIHRoaXMuc3RhdGUubGFzdFRva0VuZCkgPT09XG4gICAgICAgICAgXCJpbnRlcmZhY2VcIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUNvbnRleHQocHJldlR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoZSBuZXh0IHRva2VuIGlzIGEgdHQucmVsYXRpb24oXCI8XCIpXG4gICAgaXNMb29rYWhlYWRUb2tlbl9sdCgpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IG5leHQgPSB0aGlzLm5leHRUb2tlblN0YXJ0KCk7XG4gICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQpID09PSBjaGFyQ29kZXMubGVzc1RoYW4pIHtcbiAgICAgICAgY29uc3QgYWZ0ZXJOZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQgKyAxKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBhZnRlck5leHQgIT09IGNoYXJDb2Rlcy5sZXNzVGhhbiAmJiBhZnRlck5leHQgIT09IGNoYXJDb2Rlcy5lcXVhbHNUb1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG1heWJlVW53cmFwVHlwZUNhc3RFeHByZXNzaW9uKG5vZGU6IE4uTm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gXCJUeXBlQ2FzdEV4cHJlc3Npb25cIiA/IG5vZGUuZXhwcmVzc2lvbiA6IG5vZGU7XG4gICAgfVxuICB9O1xuIiwiLy8gQGZsb3dcblxuY29uc3QgZW50aXRpZXM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBxdW90OiBcIlxcdTAwMjJcIixcbiAgYW1wOiBcIiZcIixcbiAgYXBvczogXCJcXHUwMDI3XCIsXG4gIGx0OiBcIjxcIixcbiAgZ3Q6IFwiPlwiLFxuICBuYnNwOiBcIlxcdTAwQTBcIixcbiAgaWV4Y2w6IFwiXFx1MDBBMVwiLFxuICBjZW50OiBcIlxcdTAwQTJcIixcbiAgcG91bmQ6IFwiXFx1MDBBM1wiLFxuICBjdXJyZW46IFwiXFx1MDBBNFwiLFxuICB5ZW46IFwiXFx1MDBBNVwiLFxuICBicnZiYXI6IFwiXFx1MDBBNlwiLFxuICBzZWN0OiBcIlxcdTAwQTdcIixcbiAgdW1sOiBcIlxcdTAwQThcIixcbiAgY29weTogXCJcXHUwMEE5XCIsXG4gIG9yZGY6IFwiXFx1MDBBQVwiLFxuICBsYXF1bzogXCJcXHUwMEFCXCIsXG4gIG5vdDogXCJcXHUwMEFDXCIsXG4gIHNoeTogXCJcXHUwMEFEXCIsXG4gIHJlZzogXCJcXHUwMEFFXCIsXG4gIG1hY3I6IFwiXFx1MDBBRlwiLFxuICBkZWc6IFwiXFx1MDBCMFwiLFxuICBwbHVzbW46IFwiXFx1MDBCMVwiLFxuICBzdXAyOiBcIlxcdTAwQjJcIixcbiAgc3VwMzogXCJcXHUwMEIzXCIsXG4gIGFjdXRlOiBcIlxcdTAwQjRcIixcbiAgbWljcm86IFwiXFx1MDBCNVwiLFxuICBwYXJhOiBcIlxcdTAwQjZcIixcbiAgbWlkZG90OiBcIlxcdTAwQjdcIixcbiAgY2VkaWw6IFwiXFx1MDBCOFwiLFxuICBzdXAxOiBcIlxcdTAwQjlcIixcbiAgb3JkbTogXCJcXHUwMEJBXCIsXG4gIHJhcXVvOiBcIlxcdTAwQkJcIixcbiAgZnJhYzE0OiBcIlxcdTAwQkNcIixcbiAgZnJhYzEyOiBcIlxcdTAwQkRcIixcbiAgZnJhYzM0OiBcIlxcdTAwQkVcIixcbiAgaXF1ZXN0OiBcIlxcdTAwQkZcIixcbiAgQWdyYXZlOiBcIlxcdTAwQzBcIixcbiAgQWFjdXRlOiBcIlxcdTAwQzFcIixcbiAgQWNpcmM6IFwiXFx1MDBDMlwiLFxuICBBdGlsZGU6IFwiXFx1MDBDM1wiLFxuICBBdW1sOiBcIlxcdTAwQzRcIixcbiAgQXJpbmc6IFwiXFx1MDBDNVwiLFxuICBBRWxpZzogXCJcXHUwMEM2XCIsXG4gIENjZWRpbDogXCJcXHUwMEM3XCIsXG4gIEVncmF2ZTogXCJcXHUwMEM4XCIsXG4gIEVhY3V0ZTogXCJcXHUwMEM5XCIsXG4gIEVjaXJjOiBcIlxcdTAwQ0FcIixcbiAgRXVtbDogXCJcXHUwMENCXCIsXG4gIElncmF2ZTogXCJcXHUwMENDXCIsXG4gIElhY3V0ZTogXCJcXHUwMENEXCIsXG4gIEljaXJjOiBcIlxcdTAwQ0VcIixcbiAgSXVtbDogXCJcXHUwMENGXCIsXG4gIEVUSDogXCJcXHUwMEQwXCIsXG4gIE50aWxkZTogXCJcXHUwMEQxXCIsXG4gIE9ncmF2ZTogXCJcXHUwMEQyXCIsXG4gIE9hY3V0ZTogXCJcXHUwMEQzXCIsXG4gIE9jaXJjOiBcIlxcdTAwRDRcIixcbiAgT3RpbGRlOiBcIlxcdTAwRDVcIixcbiAgT3VtbDogXCJcXHUwMEQ2XCIsXG4gIHRpbWVzOiBcIlxcdTAwRDdcIixcbiAgT3NsYXNoOiBcIlxcdTAwRDhcIixcbiAgVWdyYXZlOiBcIlxcdTAwRDlcIixcbiAgVWFjdXRlOiBcIlxcdTAwREFcIixcbiAgVWNpcmM6IFwiXFx1MDBEQlwiLFxuICBVdW1sOiBcIlxcdTAwRENcIixcbiAgWWFjdXRlOiBcIlxcdTAwRERcIixcbiAgVEhPUk46IFwiXFx1MDBERVwiLFxuICBzemxpZzogXCJcXHUwMERGXCIsXG4gIGFncmF2ZTogXCJcXHUwMEUwXCIsXG4gIGFhY3V0ZTogXCJcXHUwMEUxXCIsXG4gIGFjaXJjOiBcIlxcdTAwRTJcIixcbiAgYXRpbGRlOiBcIlxcdTAwRTNcIixcbiAgYXVtbDogXCJcXHUwMEU0XCIsXG4gIGFyaW5nOiBcIlxcdTAwRTVcIixcbiAgYWVsaWc6IFwiXFx1MDBFNlwiLFxuICBjY2VkaWw6IFwiXFx1MDBFN1wiLFxuICBlZ3JhdmU6IFwiXFx1MDBFOFwiLFxuICBlYWN1dGU6IFwiXFx1MDBFOVwiLFxuICBlY2lyYzogXCJcXHUwMEVBXCIsXG4gIGV1bWw6IFwiXFx1MDBFQlwiLFxuICBpZ3JhdmU6IFwiXFx1MDBFQ1wiLFxuICBpYWN1dGU6IFwiXFx1MDBFRFwiLFxuICBpY2lyYzogXCJcXHUwMEVFXCIsXG4gIGl1bWw6IFwiXFx1MDBFRlwiLFxuICBldGg6IFwiXFx1MDBGMFwiLFxuICBudGlsZGU6IFwiXFx1MDBGMVwiLFxuICBvZ3JhdmU6IFwiXFx1MDBGMlwiLFxuICBvYWN1dGU6IFwiXFx1MDBGM1wiLFxuICBvY2lyYzogXCJcXHUwMEY0XCIsXG4gIG90aWxkZTogXCJcXHUwMEY1XCIsXG4gIG91bWw6IFwiXFx1MDBGNlwiLFxuICBkaXZpZGU6IFwiXFx1MDBGN1wiLFxuICBvc2xhc2g6IFwiXFx1MDBGOFwiLFxuICB1Z3JhdmU6IFwiXFx1MDBGOVwiLFxuICB1YWN1dGU6IFwiXFx1MDBGQVwiLFxuICB1Y2lyYzogXCJcXHUwMEZCXCIsXG4gIHV1bWw6IFwiXFx1MDBGQ1wiLFxuICB5YWN1dGU6IFwiXFx1MDBGRFwiLFxuICB0aG9ybjogXCJcXHUwMEZFXCIsXG4gIHl1bWw6IFwiXFx1MDBGRlwiLFxuICBPRWxpZzogXCJcXHUwMTUyXCIsXG4gIG9lbGlnOiBcIlxcdTAxNTNcIixcbiAgU2Nhcm9uOiBcIlxcdTAxNjBcIixcbiAgc2Nhcm9uOiBcIlxcdTAxNjFcIixcbiAgWXVtbDogXCJcXHUwMTc4XCIsXG4gIGZub2Y6IFwiXFx1MDE5MlwiLFxuICBjaXJjOiBcIlxcdTAyQzZcIixcbiAgdGlsZGU6IFwiXFx1MDJEQ1wiLFxuICBBbHBoYTogXCJcXHUwMzkxXCIsXG4gIEJldGE6IFwiXFx1MDM5MlwiLFxuICBHYW1tYTogXCJcXHUwMzkzXCIsXG4gIERlbHRhOiBcIlxcdTAzOTRcIixcbiAgRXBzaWxvbjogXCJcXHUwMzk1XCIsXG4gIFpldGE6IFwiXFx1MDM5NlwiLFxuICBFdGE6IFwiXFx1MDM5N1wiLFxuICBUaGV0YTogXCJcXHUwMzk4XCIsXG4gIElvdGE6IFwiXFx1MDM5OVwiLFxuICBLYXBwYTogXCJcXHUwMzlBXCIsXG4gIExhbWJkYTogXCJcXHUwMzlCXCIsXG4gIE11OiBcIlxcdTAzOUNcIixcbiAgTnU6IFwiXFx1MDM5RFwiLFxuICBYaTogXCJcXHUwMzlFXCIsXG4gIE9taWNyb246IFwiXFx1MDM5RlwiLFxuICBQaTogXCJcXHUwM0EwXCIsXG4gIFJobzogXCJcXHUwM0ExXCIsXG4gIFNpZ21hOiBcIlxcdTAzQTNcIixcbiAgVGF1OiBcIlxcdTAzQTRcIixcbiAgVXBzaWxvbjogXCJcXHUwM0E1XCIsXG4gIFBoaTogXCJcXHUwM0E2XCIsXG4gIENoaTogXCJcXHUwM0E3XCIsXG4gIFBzaTogXCJcXHUwM0E4XCIsXG4gIE9tZWdhOiBcIlxcdTAzQTlcIixcbiAgYWxwaGE6IFwiXFx1MDNCMVwiLFxuICBiZXRhOiBcIlxcdTAzQjJcIixcbiAgZ2FtbWE6IFwiXFx1MDNCM1wiLFxuICBkZWx0YTogXCJcXHUwM0I0XCIsXG4gIGVwc2lsb246IFwiXFx1MDNCNVwiLFxuICB6ZXRhOiBcIlxcdTAzQjZcIixcbiAgZXRhOiBcIlxcdTAzQjdcIixcbiAgdGhldGE6IFwiXFx1MDNCOFwiLFxuICBpb3RhOiBcIlxcdTAzQjlcIixcbiAga2FwcGE6IFwiXFx1MDNCQVwiLFxuICBsYW1iZGE6IFwiXFx1MDNCQlwiLFxuICBtdTogXCJcXHUwM0JDXCIsXG4gIG51OiBcIlxcdTAzQkRcIixcbiAgeGk6IFwiXFx1MDNCRVwiLFxuICBvbWljcm9uOiBcIlxcdTAzQkZcIixcbiAgcGk6IFwiXFx1MDNDMFwiLFxuICByaG86IFwiXFx1MDNDMVwiLFxuICBzaWdtYWY6IFwiXFx1MDNDMlwiLFxuICBzaWdtYTogXCJcXHUwM0MzXCIsXG4gIHRhdTogXCJcXHUwM0M0XCIsXG4gIHVwc2lsb246IFwiXFx1MDNDNVwiLFxuICBwaGk6IFwiXFx1MDNDNlwiLFxuICBjaGk6IFwiXFx1MDNDN1wiLFxuICBwc2k6IFwiXFx1MDNDOFwiLFxuICBvbWVnYTogXCJcXHUwM0M5XCIsXG4gIHRoZXRhc3ltOiBcIlxcdTAzRDFcIixcbiAgdXBzaWg6IFwiXFx1MDNEMlwiLFxuICBwaXY6IFwiXFx1MDNENlwiLFxuICBlbnNwOiBcIlxcdTIwMDJcIixcbiAgZW1zcDogXCJcXHUyMDAzXCIsXG4gIHRoaW5zcDogXCJcXHUyMDA5XCIsXG4gIHp3bmo6IFwiXFx1MjAwQ1wiLFxuICB6d2o6IFwiXFx1MjAwRFwiLFxuICBscm06IFwiXFx1MjAwRVwiLFxuICBybG06IFwiXFx1MjAwRlwiLFxuICBuZGFzaDogXCJcXHUyMDEzXCIsXG4gIG1kYXNoOiBcIlxcdTIwMTRcIixcbiAgbHNxdW86IFwiXFx1MjAxOFwiLFxuICByc3F1bzogXCJcXHUyMDE5XCIsXG4gIHNicXVvOiBcIlxcdTIwMUFcIixcbiAgbGRxdW86IFwiXFx1MjAxQ1wiLFxuICByZHF1bzogXCJcXHUyMDFEXCIsXG4gIGJkcXVvOiBcIlxcdTIwMUVcIixcbiAgZGFnZ2VyOiBcIlxcdTIwMjBcIixcbiAgRGFnZ2VyOiBcIlxcdTIwMjFcIixcbiAgYnVsbDogXCJcXHUyMDIyXCIsXG4gIGhlbGxpcDogXCJcXHUyMDI2XCIsXG4gIHBlcm1pbDogXCJcXHUyMDMwXCIsXG4gIHByaW1lOiBcIlxcdTIwMzJcIixcbiAgUHJpbWU6IFwiXFx1MjAzM1wiLFxuICBsc2FxdW86IFwiXFx1MjAzOVwiLFxuICByc2FxdW86IFwiXFx1MjAzQVwiLFxuICBvbGluZTogXCJcXHUyMDNFXCIsXG4gIGZyYXNsOiBcIlxcdTIwNDRcIixcbiAgZXVybzogXCJcXHUyMEFDXCIsXG4gIGltYWdlOiBcIlxcdTIxMTFcIixcbiAgd2VpZXJwOiBcIlxcdTIxMThcIixcbiAgcmVhbDogXCJcXHUyMTFDXCIsXG4gIHRyYWRlOiBcIlxcdTIxMjJcIixcbiAgYWxlZnN5bTogXCJcXHUyMTM1XCIsXG4gIGxhcnI6IFwiXFx1MjE5MFwiLFxuICB1YXJyOiBcIlxcdTIxOTFcIixcbiAgcmFycjogXCJcXHUyMTkyXCIsXG4gIGRhcnI6IFwiXFx1MjE5M1wiLFxuICBoYXJyOiBcIlxcdTIxOTRcIixcbiAgY3JhcnI6IFwiXFx1MjFCNVwiLFxuICBsQXJyOiBcIlxcdTIxRDBcIixcbiAgdUFycjogXCJcXHUyMUQxXCIsXG4gIHJBcnI6IFwiXFx1MjFEMlwiLFxuICBkQXJyOiBcIlxcdTIxRDNcIixcbiAgaEFycjogXCJcXHUyMUQ0XCIsXG4gIGZvcmFsbDogXCJcXHUyMjAwXCIsXG4gIHBhcnQ6IFwiXFx1MjIwMlwiLFxuICBleGlzdDogXCJcXHUyMjAzXCIsXG4gIGVtcHR5OiBcIlxcdTIyMDVcIixcbiAgbmFibGE6IFwiXFx1MjIwN1wiLFxuICBpc2luOiBcIlxcdTIyMDhcIixcbiAgbm90aW46IFwiXFx1MjIwOVwiLFxuICBuaTogXCJcXHUyMjBCXCIsXG4gIHByb2Q6IFwiXFx1MjIwRlwiLFxuICBzdW06IFwiXFx1MjIxMVwiLFxuICBtaW51czogXCJcXHUyMjEyXCIsXG4gIGxvd2FzdDogXCJcXHUyMjE3XCIsXG4gIHJhZGljOiBcIlxcdTIyMUFcIixcbiAgcHJvcDogXCJcXHUyMjFEXCIsXG4gIGluZmluOiBcIlxcdTIyMUVcIixcbiAgYW5nOiBcIlxcdTIyMjBcIixcbiAgYW5kOiBcIlxcdTIyMjdcIixcbiAgb3I6IFwiXFx1MjIyOFwiLFxuICBjYXA6IFwiXFx1MjIyOVwiLFxuICBjdXA6IFwiXFx1MjIyQVwiLFxuICBpbnQ6IFwiXFx1MjIyQlwiLFxuICB0aGVyZTQ6IFwiXFx1MjIzNFwiLFxuICBzaW06IFwiXFx1MjIzQ1wiLFxuICBjb25nOiBcIlxcdTIyNDVcIixcbiAgYXN5bXA6IFwiXFx1MjI0OFwiLFxuICBuZTogXCJcXHUyMjYwXCIsXG4gIGVxdWl2OiBcIlxcdTIyNjFcIixcbiAgbGU6IFwiXFx1MjI2NFwiLFxuICBnZTogXCJcXHUyMjY1XCIsXG4gIHN1YjogXCJcXHUyMjgyXCIsXG4gIHN1cDogXCJcXHUyMjgzXCIsXG4gIG5zdWI6IFwiXFx1MjI4NFwiLFxuICBzdWJlOiBcIlxcdTIyODZcIixcbiAgc3VwZTogXCJcXHUyMjg3XCIsXG4gIG9wbHVzOiBcIlxcdTIyOTVcIixcbiAgb3RpbWVzOiBcIlxcdTIyOTdcIixcbiAgcGVycDogXCJcXHUyMkE1XCIsXG4gIHNkb3Q6IFwiXFx1MjJDNVwiLFxuICBsY2VpbDogXCJcXHUyMzA4XCIsXG4gIHJjZWlsOiBcIlxcdTIzMDlcIixcbiAgbGZsb29yOiBcIlxcdTIzMEFcIixcbiAgcmZsb29yOiBcIlxcdTIzMEJcIixcbiAgbGFuZzogXCJcXHUyMzI5XCIsXG4gIHJhbmc6IFwiXFx1MjMyQVwiLFxuICBsb3o6IFwiXFx1MjVDQVwiLFxuICBzcGFkZXM6IFwiXFx1MjY2MFwiLFxuICBjbHViczogXCJcXHUyNjYzXCIsXG4gIGhlYXJ0czogXCJcXHUyNjY1XCIsXG4gIGRpYW1zOiBcIlxcdTI2NjZcIixcbn07XG5leHBvcnQgZGVmYXVsdCBlbnRpdGllcztcbiIsIi8vIEBmbG93XG5cbi8vIEVycm9yIG1lc3NhZ2VzIGFyZSBjb2xvY2F0ZWQgd2l0aCB0aGUgcGx1Z2luLlxuLyogZXNsaW50LWRpc2FibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuXG5pbXBvcnQgKiBhcyBjaGFyQ29kZXMgZnJvbSBcImNoYXJjb2Rlc1wiO1xuXG5pbXBvcnQgWEhUTUxFbnRpdGllcyBmcm9tIFwiLi94aHRtbFwiO1xuaW1wb3J0IHR5cGUgUGFyc2VyIGZyb20gXCIuLi8uLi9wYXJzZXJcIjtcbmltcG9ydCB0eXBlIHsgRXhwcmVzc2lvbkVycm9ycyB9IGZyb20gXCIuLi8uLi9wYXJzZXIvdXRpbFwiO1xuaW1wb3J0IHsgVG9rZW5UeXBlLCB0eXBlcyBhcyB0dCB9IGZyb20gXCIuLi8uLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCB7IFRva0NvbnRleHQsIHR5cGVzIGFzIHRjIH0gZnJvbSBcIi4uLy4uL3Rva2VuaXplci9jb250ZXh0XCI7XG5pbXBvcnQgKiBhcyBOIGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgaXNJZGVudGlmaWVyQ2hhciwgaXNJZGVudGlmaWVyU3RhcnQgfSBmcm9tIFwiLi4vLi4vdXRpbC9pZGVudGlmaWVyXCI7XG5pbXBvcnQgdHlwZSB7IFBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uL3V0aWwvbG9jYXRpb25cIjtcbmltcG9ydCB7IGlzTmV3TGluZSB9IGZyb20gXCIuLi8uLi91dGlsL3doaXRlc3BhY2VcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi8uLi9wYXJzZXIvZXJyb3JcIjtcblxuY29uc3QgSEVYX05VTUJFUiA9IC9eW1xcZGEtZkEtRl0rJC87XG5jb25zdCBERUNJTUFMX05VTUJFUiA9IC9eXFxkKyQvO1xuXG5jb25zdCBKc3hFcnJvcnMgPSBPYmplY3QuZnJlZXplKHtcbiAgQXR0cmlidXRlSXNFbXB0eTpcbiAgICBcIkpTWCBhdHRyaWJ1dGVzIG11c3Qgb25seSBiZSBhc3NpZ25lZCBhIG5vbi1lbXB0eSBleHByZXNzaW9uXCIsXG4gIE1pc3NpbmdDbG9zaW5nVGFnRnJhZ21lbnQ6IFwiRXhwZWN0ZWQgY29ycmVzcG9uZGluZyBKU1ggY2xvc2luZyB0YWcgZm9yIDw+XCIsXG4gIE1pc3NpbmdDbG9zaW5nVGFnRWxlbWVudDogXCJFeHBlY3RlZCBjb3JyZXNwb25kaW5nIEpTWCBjbG9zaW5nIHRhZyBmb3IgPCUwPlwiLFxuICBVbnN1cHBvcnRlZEpzeFZhbHVlOlxuICAgIFwiSlNYIHZhbHVlIHNob3VsZCBiZSBlaXRoZXIgYW4gZXhwcmVzc2lvbiBvciBhIHF1b3RlZCBKU1ggdGV4dFwiLFxuICBVbnRlcm1pbmF0ZWRKc3hDb250ZW50OiBcIlVudGVybWluYXRlZCBKU1ggY29udGVudHNcIixcbiAgVW53cmFwcGVkQWRqYWNlbnRKU1hFbGVtZW50czpcbiAgICBcIkFkamFjZW50IEpTWCBlbGVtZW50cyBtdXN0IGJlIHdyYXBwZWQgaW4gYW4gZW5jbG9zaW5nIHRhZy4gRGlkIHlvdSB3YW50IGEgSlNYIGZyYWdtZW50IDw+Li4uPC8+P1wiLFxufSk7XG5cbi8vIEJlIGF3YXJlIHRoYXQgdGhpcyBmaWxlIGlzIGFsd2F5cyBleGVjdXRlZCBhbmQgbm90IG9ubHkgd2hlbiB0aGUgcGx1Z2luIGlzIGVuYWJsZWQuXG4vLyBUaGVyZWZvcmUgdGhpcyBjb250ZXh0cyBhbmQgdG9rZW5zIGRvIGFsd2F5cyBleGlzdC5cbnRjLmpfb1RhZyA9IG5ldyBUb2tDb250ZXh0KFwiPHRhZ1wiLCBmYWxzZSk7XG50Yy5qX2NUYWcgPSBuZXcgVG9rQ29udGV4dChcIjwvdGFnXCIsIGZhbHNlKTtcbnRjLmpfZXhwciA9IG5ldyBUb2tDb250ZXh0KFwiPHRhZz4uLi48L3RhZz5cIiwgdHJ1ZSwgdHJ1ZSk7XG5cbnR0LmpzeE5hbWUgPSBuZXcgVG9rZW5UeXBlKFwianN4TmFtZVwiKTtcbnR0LmpzeFRleHQgPSBuZXcgVG9rZW5UeXBlKFwianN4VGV4dFwiLCB7IGJlZm9yZUV4cHI6IHRydWUgfSk7XG50dC5qc3hUYWdTdGFydCA9IG5ldyBUb2tlblR5cGUoXCJqc3hUYWdTdGFydFwiLCB7IHN0YXJ0c0V4cHI6IHRydWUgfSk7XG50dC5qc3hUYWdFbmQgPSBuZXcgVG9rZW5UeXBlKFwianN4VGFnRW5kXCIpO1xuXG50dC5qc3hUYWdTdGFydC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnN0YXRlLmNvbnRleHQucHVzaCh0Yy5qX2V4cHIpOyAvLyB0cmVhdCBhcyBiZWdpbm5pbmcgb2YgSlNYIGV4cHJlc3Npb25cbiAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godGMual9vVGFnKTsgLy8gc3RhcnQgb3BlbmluZyB0YWcgY29udGV4dFxuICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID0gZmFsc2U7XG59O1xuXG50dC5qc3hUYWdFbmQudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChwcmV2VHlwZSkge1xuICBjb25zdCBvdXQgPSB0aGlzLnN0YXRlLmNvbnRleHQucG9wKCk7XG4gIGlmICgob3V0ID09PSB0Yy5qX29UYWcgJiYgcHJldlR5cGUgPT09IHR0LnNsYXNoKSB8fCBvdXQgPT09IHRjLmpfY1RhZykge1xuICAgIHRoaXMuc3RhdGUuY29udGV4dC5wb3AoKTtcbiAgICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID0gdGhpcy5jdXJDb250ZXh0KCkgPT09IHRjLmpfZXhwcjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3Q6ID9OLkpTWEVsZW1lbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuIG9iamVjdFxuICAgID8gb2JqZWN0LnR5cGUgPT09IFwiSlNYT3BlbmluZ0ZyYWdtZW50XCIgfHxcbiAgICAgICAgb2JqZWN0LnR5cGUgPT09IFwiSlNYQ2xvc2luZ0ZyYWdtZW50XCJcbiAgICA6IGZhbHNlO1xufVxuXG4vLyBUcmFuc2Zvcm1zIEpTWCBlbGVtZW50IG5hbWUgdG8gc3RyaW5nLlxuXG5mdW5jdGlvbiBnZXRRdWFsaWZpZWRKU1hOYW1lKFxuICBvYmplY3Q6IE4uSlNYSWRlbnRpZmllciB8IE4uSlNYTmFtZXNwYWNlZE5hbWUgfCBOLkpTWE1lbWJlckV4cHJlc3Npb24sXG4pOiBzdHJpbmcge1xuICBpZiAob2JqZWN0LnR5cGUgPT09IFwiSlNYSWRlbnRpZmllclwiKSB7XG4gICAgcmV0dXJuIG9iamVjdC5uYW1lO1xuICB9XG5cbiAgaWYgKG9iamVjdC50eXBlID09PSBcIkpTWE5hbWVzcGFjZWROYW1lXCIpIHtcbiAgICByZXR1cm4gb2JqZWN0Lm5hbWVzcGFjZS5uYW1lICsgXCI6XCIgKyBvYmplY3QubmFtZS5uYW1lO1xuICB9XG5cbiAgaWYgKG9iamVjdC50eXBlID09PSBcIkpTWE1lbWJlckV4cHJlc3Npb25cIikge1xuICAgIHJldHVybiAoXG4gICAgICBnZXRRdWFsaWZpZWRKU1hOYW1lKG9iamVjdC5vYmplY3QpICtcbiAgICAgIFwiLlwiICtcbiAgICAgIGdldFF1YWxpZmllZEpTWE5hbWUob2JqZWN0LnByb3BlcnR5KVxuICAgICk7XG4gIH1cblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGhhZCB1bmV4cGVjdGVkIHR5cGU6IFwiICsgb2JqZWN0LnR5cGUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoc3VwZXJDbGFzczogQ2xhc3M8UGFyc2VyPik6IENsYXNzPFBhcnNlcj4gPT5cbiAgY2xhc3MgZXh0ZW5kcyBzdXBlckNsYXNzIHtcbiAgICAvLyBSZWFkcyBpbmxpbmUgSlNYIGNvbnRlbnRzIHRva2VuLlxuXG4gICAganN4UmVhZFRva2VuKCk6IHZvaWQge1xuICAgICAgbGV0IG91dCA9IFwiXCI7XG4gICAgICBsZXQgY2h1bmtTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEpzeEVycm9ycy5VbnRlcm1pbmF0ZWRKc3hDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKTtcblxuICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgY2FzZSBjaGFyQ29kZXMubGVzc1RoYW46XG4gICAgICAgICAgY2FzZSBjaGFyQ29kZXMubGVmdEN1cmx5QnJhY2U6XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPT09IHRoaXMuc3RhdGUuc3RhcnQpIHtcbiAgICAgICAgICAgICAgaWYgKGNoID09PSBjaGFyQ29kZXMubGVzc1RoYW4gJiYgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuanN4VGFnU3RhcnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBzdXBlci5nZXRUb2tlbkZyb21Db2RlKGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMuc3RhdGUucG9zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmpzeFRleHQsIG91dCk7XG5cbiAgICAgICAgICBjYXNlIGNoYXJDb2Rlcy5hbXBlcnNhbmQ6XG4gICAgICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnN0YXRlLnBvcyk7XG4gICAgICAgICAgICBvdXQgKz0gdGhpcy5qc3hSZWFkRW50aXR5KCk7XG4gICAgICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnN0YXRlLnBvcyk7XG4gICAgICAgICAgICAgIG91dCArPSB0aGlzLmpzeFJlYWROZXdMaW5lKHRydWUpO1xuICAgICAgICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAganN4UmVhZE5ld0xpbmUobm9ybWFsaXplQ1JMRjogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICBjb25zdCBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBsZXQgb3V0O1xuICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIGlmIChcbiAgICAgICAgY2ggPT09IGNoYXJDb2Rlcy5jYXJyaWFnZVJldHVybiAmJlxuICAgICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpID09PSBjaGFyQ29kZXMubGluZUZlZWRcbiAgICAgICkge1xuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICBvdXQgPSBub3JtYWxpemVDUkxGID8gXCJcXG5cIiA6IFwiXFxyXFxuXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcbiAgICAgIH1cbiAgICAgICsrdGhpcy5zdGF0ZS5jdXJMaW5lO1xuICAgICAgdGhpcy5zdGF0ZS5saW5lU3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBqc3hSZWFkU3RyaW5nKHF1b3RlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGxldCBvdXQgPSBcIlwiO1xuICAgICAgbGV0IGNodW5rU3RhcnQgPSArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5VbnRlcm1pbmF0ZWRTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgICBpZiAoY2ggPT09IHF1b3RlKSBicmVhaztcbiAgICAgICAgaWYgKGNoID09PSBjaGFyQ29kZXMuYW1wZXJzYW5kKSB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgICAgIG91dCArPSB0aGlzLmpzeFJlYWRFbnRpdHkoKTtcbiAgICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMuc3RhdGUucG9zKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5qc3hSZWFkTmV3TGluZShmYWxzZSk7XG4gICAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMuc3RhdGUucG9zKyspO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuc3RyaW5nLCBvdXQpO1xuICAgIH1cblxuICAgIGpzeFJlYWRFbnRpdHkoKTogc3RyaW5nIHtcbiAgICAgIGxldCBzdHIgPSBcIlwiO1xuICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgIGxldCBlbnRpdHk7XG4gICAgICBsZXQgY2ggPSB0aGlzLmlucHV0W3RoaXMuc3RhdGUucG9zXTtcblxuICAgICAgY29uc3Qgc3RhcnRQb3MgPSArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgd2hpbGUgKHRoaXMuc3RhdGUucG9zIDwgdGhpcy5sZW5ndGggJiYgY291bnQrKyA8IDEwKSB7XG4gICAgICAgIGNoID0gdGhpcy5pbnB1dFt0aGlzLnN0YXRlLnBvcysrXTtcbiAgICAgICAgaWYgKGNoID09PSBcIjtcIikge1xuICAgICAgICAgIGlmIChzdHJbMF0gPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZiAoc3RyWzFdID09PSBcInhcIikge1xuICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKDIpO1xuICAgICAgICAgICAgICBpZiAoSEVYX05VTUJFUi50ZXN0KHN0cikpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChzdHIsIDE2KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgIGlmIChERUNJTUFMX05VTUJFUi50ZXN0KHN0cikpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChzdHIsIDEwKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50aXR5ID0gWEhUTUxFbnRpdGllc1tzdHJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gY2g7XG4gICAgICB9XG4gICAgICBpZiAoIWVudGl0eSkge1xuICAgICAgICB0aGlzLnN0YXRlLnBvcyA9IHN0YXJ0UG9zO1xuICAgICAgICByZXR1cm4gXCImXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cblxuICAgIC8vIFJlYWQgYSBKU1ggaWRlbnRpZmllciAodmFsaWQgdGFnIG9yIGF0dHJpYnV0ZSBuYW1lKS5cbiAgICAvL1xuICAgIC8vIE9wdGltaXplZCB2ZXJzaW9uIHNpbmNlIEpTWCBpZGVudGlmaWVycyBjYW5cInQgY29udGFpblxuICAgIC8vIGVzY2FwZSBjaGFyYWN0ZXJzIGFuZCBzbyBjYW4gYmUgcmVhZCBhcyBzaW5nbGUgc2xpY2UuXG4gICAgLy8gQWxzbyBhc3N1bWVzIHRoYXQgZmlyc3QgY2hhcmFjdGVyIHdhcyBhbHJlYWR5IGNoZWNrZWRcbiAgICAvLyBieSBpc0lkZW50aWZpZXJTdGFydCBpbiByZWFkVG9rZW4uXG5cbiAgICBqc3hSZWFkV29yZCgpOiB2b2lkIHtcbiAgICAgIGxldCBjaDtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICBkbyB7XG4gICAgICAgIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgfSB3aGlsZSAoaXNJZGVudGlmaWVyQ2hhcihjaCkgfHwgY2ggPT09IGNoYXJDb2Rlcy5kYXNoKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKFxuICAgICAgICB0dC5qc3hOYW1lLFxuICAgICAgICB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLnN0YXRlLnBvcyksXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIG5leHQgdG9rZW4gYXMgSlNYIGlkZW50aWZpZXJcblxuICAgIGpzeFBhcnNlSWRlbnRpZmllcigpOiBOLkpTWElkZW50aWZpZXIge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5qc3hOYW1lKSkge1xuICAgICAgICBub2RlLm5hbWUgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnR5cGUua2V5d29yZCkge1xuICAgICAgICBub2RlLm5hbWUgPSB0aGlzLnN0YXRlLnR5cGUua2V5d29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSlNYSWRlbnRpZmllclwiKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBuYW1lc3BhY2VkIGlkZW50aWZpZXIuXG5cbiAgICBqc3hQYXJzZU5hbWVzcGFjZWROYW1lKCk6IE4uSlNYTmFtZXNwYWNlZE5hbWUge1xuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgY29uc3QgbmFtZSA9IHRoaXMuanN4UGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICBpZiAoIXRoaXMuZWF0KHR0LmNvbG9uKSkgcmV0dXJuIG5hbWU7XG5cbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLm5hbWVzcGFjZSA9IG5hbWU7XG4gICAgICBub2RlLm5hbWUgPSB0aGlzLmpzeFBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBlbGVtZW50IG5hbWUgaW4gYW55IGZvcm0gLSBuYW1lc3BhY2VkLCBtZW1iZXJcbiAgICAvLyBvciBzaW5nbGUgaWRlbnRpZmllci5cblxuICAgIGpzeFBhcnNlRWxlbWVudE5hbWUoKTpcbiAgICAgIHwgTi5KU1hJZGVudGlmaWVyXG4gICAgICB8IE4uSlNYTmFtZXNwYWNlZE5hbWVcbiAgICAgIHwgTi5KU1hNZW1iZXJFeHByZXNzaW9uIHtcbiAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICAgIGxldCBub2RlID0gdGhpcy5qc3hQYXJzZU5hbWVzcGFjZWROYW1lKCk7XG4gICAgICBpZiAobm9kZS50eXBlID09PSBcIkpTWE5hbWVzcGFjZWROYW1lXCIpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICB3aGlsZSAodGhpcy5lYXQodHQuZG90KSkge1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICBuZXdOb2RlLm9iamVjdCA9IG5vZGU7XG4gICAgICAgIG5ld05vZGUucHJvcGVydHkgPSB0aGlzLmpzeFBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgICBub2RlID0gdGhpcy5maW5pc2hOb2RlKG5ld05vZGUsIFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBhbnkgdHlwZSBvZiBKU1ggYXR0cmlidXRlIHZhbHVlLlxuXG4gICAganN4UGFyc2VBdHRyaWJ1dGVWYWx1ZSgpOiBOLkV4cHJlc3Npb24ge1xuICAgICAgbGV0IG5vZGU7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xuICAgICAgICBjYXNlIHR0LmJyYWNlTDpcbiAgICAgICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICBub2RlID0gdGhpcy5qc3hQYXJzZUV4cHJlc3Npb25Db250YWluZXIobm9kZSk7XG4gICAgICAgICAgaWYgKG5vZGUuZXhwcmVzc2lvbi50eXBlID09PSBcIkpTWEVtcHR5RXhwcmVzc2lvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIEpzeEVycm9ycy5BdHRyaWJ1dGVJc0VtcHR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG5cbiAgICAgICAgY2FzZSB0dC5qc3hUYWdTdGFydDpcbiAgICAgICAgY2FzZSB0dC5zdHJpbmc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByQXRvbSgpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBKc3hFcnJvcnMuVW5zdXBwb3J0ZWRKc3hWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSlNYRW1wdHlFeHByZXNzaW9uIGlzIHVuaXF1ZSB0eXBlIHNpbmNlIGl0IGRvZXNuJ3QgYWN0dWFsbHkgcGFyc2UgYW55dGhpbmcsXG4gICAgLy8gYW5kIHNvIGl0IHNob3VsZCBzdGFydCBhdCB0aGUgZW5kIG9mIGxhc3QgcmVhZCB0b2tlbiAobGVmdCBicmFjZSkgYW5kIGZpbmlzaFxuICAgIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgb25lIChyaWdodCBicmFjZSkuXG5cbiAgICBqc3hQYXJzZUVtcHR5RXhwcmVzc2lvbigpOiBOLkpTWEVtcHR5RXhwcmVzc2lvbiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChcbiAgICAgICAgdGhpcy5zdGF0ZS5sYXN0VG9rRW5kLFxuICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tFbmRMb2MsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZUF0KFxuICAgICAgICBub2RlLFxuICAgICAgICBcIkpTWEVtcHR5RXhwcmVzc2lvblwiLFxuICAgICAgICB0aGlzLnN0YXRlLnN0YXJ0LFxuICAgICAgICB0aGlzLnN0YXRlLnN0YXJ0TG9jLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBKU1ggc3ByZWFkIGNoaWxkXG5cbiAgICBqc3hQYXJzZVNwcmVhZENoaWxkKG5vZGU6IE4uSlNYU3ByZWFkQ2hpbGQpOiBOLkpTWFNwcmVhZENoaWxkIHtcbiAgICAgIHRoaXMubmV4dCgpOyAvLyBlbGxpcHNpc1xuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJKU1hTcHJlYWRDaGlsZFwiKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgSlNYIGV4cHJlc3Npb24gZW5jbG9zZWQgaW50byBjdXJseSBicmFja2V0cy5cblxuICAgIGpzeFBhcnNlRXhwcmVzc2lvbkNvbnRhaW5lcihcbiAgICAgIG5vZGU6IE4uSlNYRXhwcmVzc2lvbkNvbnRhaW5lcixcbiAgICApOiBOLkpTWEV4cHJlc3Npb25Db250YWluZXIge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuYnJhY2VSKSkge1xuICAgICAgICBub2RlLmV4cHJlc3Npb24gPSB0aGlzLmpzeFBhcnNlRW1wdHlFeHByZXNzaW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmV4cHJlc3Npb24gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBmb2xsb3dpbmcgSlNYIGF0dHJpYnV0ZSBuYW1lLXZhbHVlIHBhaXIuXG5cbiAgICBqc3hQYXJzZUF0dHJpYnV0ZSgpOiBOLkpTWEF0dHJpYnV0ZSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5icmFjZUwpKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmVsbGlwc2lzKTtcbiAgICAgICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbkFsbG93SW4oKTtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkpTWFNwcmVhZEF0dHJpYnV0ZVwiKTtcbiAgICAgIH1cbiAgICAgIG5vZGUubmFtZSA9IHRoaXMuanN4UGFyc2VOYW1lc3BhY2VkTmFtZSgpO1xuICAgICAgbm9kZS52YWx1ZSA9IHRoaXMuZWF0KHR0LmVxKSA/IHRoaXMuanN4UGFyc2VBdHRyaWJ1dGVWYWx1ZSgpIDogbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJKU1hBdHRyaWJ1dGVcIik7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIEpTWCBvcGVuaW5nIHRhZyBzdGFydGluZyBhZnRlciBcIjxcIi5cblxuICAgIGpzeFBhcnNlT3BlbmluZ0VsZW1lbnRBdChcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgKTogTi5KU1hPcGVuaW5nRWxlbWVudCB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuanN4VGFnRW5kKSkge1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5qc3hUYWdFbmQpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSlNYT3BlbmluZ0ZyYWdtZW50XCIpO1xuICAgICAgfVxuICAgICAgbm9kZS5uYW1lID0gdGhpcy5qc3hQYXJzZUVsZW1lbnROYW1lKCk7XG4gICAgICByZXR1cm4gdGhpcy5qc3hQYXJzZU9wZW5pbmdFbGVtZW50QWZ0ZXJOYW1lKG5vZGUpO1xuICAgIH1cblxuICAgIGpzeFBhcnNlT3BlbmluZ0VsZW1lbnRBZnRlck5hbWUoXG4gICAgICBub2RlOiBOLkpTWE9wZW5pbmdFbGVtZW50LFxuICAgICk6IE4uSlNYT3BlbmluZ0VsZW1lbnQge1xuICAgICAgY29uc3QgYXR0cmlidXRlczogTi5KU1hBdHRyaWJ1dGVbXSA9IFtdO1xuICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKHR0LnNsYXNoKSAmJiAhdGhpcy5tYXRjaCh0dC5qc3hUYWdFbmQpKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMucHVzaCh0aGlzLmpzeFBhcnNlQXR0cmlidXRlKCkpO1xuICAgICAgfVxuICAgICAgbm9kZS5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgIG5vZGUuc2VsZkNsb3NpbmcgPSB0aGlzLmVhdCh0dC5zbGFzaCk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5qc3hUYWdFbmQpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkpTWE9wZW5pbmdFbGVtZW50XCIpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBKU1ggY2xvc2luZyB0YWcgc3RhcnRpbmcgYWZ0ZXIgXCI8L1wiLlxuXG4gICAganN4UGFyc2VDbG9zaW5nRWxlbWVudEF0KFxuICAgICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICApOiBOLkpTWENsb3NpbmdFbGVtZW50IHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5qc3hUYWdFbmQpKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmpzeFRhZ0VuZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJKU1hDbG9zaW5nRnJhZ21lbnRcIik7XG4gICAgICB9XG4gICAgICBub2RlLm5hbWUgPSB0aGlzLmpzeFBhcnNlRWxlbWVudE5hbWUoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmpzeFRhZ0VuZCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSlNYQ2xvc2luZ0VsZW1lbnRcIik7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGVudGlyZSBKU1ggZWxlbWVudCwgaW5jbHVkaW5nIGl0XCJzIG9wZW5pbmcgdGFnXG4gICAgLy8gKHN0YXJ0aW5nIGFmdGVyIFwiPFwiKSwgYXR0cmlidXRlcywgY29udGVudHMgYW5kIGNsb3NpbmcgdGFnLlxuXG4gICAganN4UGFyc2VFbGVtZW50QXQoc3RhcnRQb3M6IG51bWJlciwgc3RhcnRMb2M6IFBvc2l0aW9uKTogTi5KU1hFbGVtZW50IHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgY29uc3Qgb3BlbmluZ0VsZW1lbnQgPSB0aGlzLmpzeFBhcnNlT3BlbmluZ0VsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbGV0IGNsb3NpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgICAgaWYgKCFvcGVuaW5nRWxlbWVudC5zZWxmQ2xvc2luZykge1xuICAgICAgICBjb250ZW50czogZm9yICg7Oykge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR0LmpzeFRhZ1N0YXJ0OlxuICAgICAgICAgICAgICBzdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICAgICAgICAgIHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmVhdCh0dC5zbGFzaCkpIHtcbiAgICAgICAgICAgICAgICBjbG9zaW5nRWxlbWVudCA9IHRoaXMuanN4UGFyc2VDbG9zaW5nRWxlbWVudEF0KFxuICAgICAgICAgICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrIGNvbnRlbnRzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5qc3hQYXJzZUVsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgdHQuanN4VGV4dDpcbiAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLnBhcnNlRXhwckF0b20oKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIHR0LmJyYWNlTDoge1xuICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmVsbGlwc2lzKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5qc3hQYXJzZVNwcmVhZENoaWxkKG5vZGUpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuanN4UGFyc2VFeHByZXNzaW9uQ29udGFpbmVyKG5vZGUpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgLSBzaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGcmFnbWVudChvcGVuaW5nRWxlbWVudCkgJiYgIWlzRnJhZ21lbnQoY2xvc2luZ0VsZW1lbnQpKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgICAgICBjbG9zaW5nRWxlbWVudC5zdGFydCxcbiAgICAgICAgICAgIEpzeEVycm9ycy5NaXNzaW5nQ2xvc2luZ1RhZ0ZyYWdtZW50LFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRnJhZ21lbnQob3BlbmluZ0VsZW1lbnQpICYmIGlzRnJhZ21lbnQoY2xvc2luZ0VsZW1lbnQpKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgICAgICBjbG9zaW5nRWxlbWVudC5zdGFydCxcbiAgICAgICAgICAgIEpzeEVycm9ycy5NaXNzaW5nQ2xvc2luZ1RhZ0VsZW1lbnQsXG4gICAgICAgICAgICBnZXRRdWFsaWZpZWRKU1hOYW1lKG9wZW5pbmdFbGVtZW50Lm5hbWUpLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRnJhZ21lbnQob3BlbmluZ0VsZW1lbnQpICYmICFpc0ZyYWdtZW50KGNsb3NpbmdFbGVtZW50KSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgICAgICBnZXRRdWFsaWZpZWRKU1hOYW1lKGNsb3NpbmdFbGVtZW50Lm5hbWUpICE9PVxuICAgICAgICAgICAgZ2V0UXVhbGlmaWVkSlNYTmFtZShvcGVuaW5nRWxlbWVudC5uYW1lKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICAgICAgY2xvc2luZ0VsZW1lbnQuc3RhcnQsXG4gICAgICAgICAgICAgIEpzeEVycm9ycy5NaXNzaW5nQ2xvc2luZ1RhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgIGdldFF1YWxpZmllZEpTWE5hbWUob3BlbmluZ0VsZW1lbnQubmFtZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNGcmFnbWVudChvcGVuaW5nRWxlbWVudCkpIHtcbiAgICAgICAgbm9kZS5vcGVuaW5nRnJhZ21lbnQgPSBvcGVuaW5nRWxlbWVudDtcbiAgICAgICAgbm9kZS5jbG9zaW5nRnJhZ21lbnQgPSBjbG9zaW5nRWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUub3BlbmluZ0VsZW1lbnQgPSBvcGVuaW5nRWxlbWVudDtcbiAgICAgICAgbm9kZS5jbG9zaW5nRWxlbWVudCA9IGNsb3NpbmdFbGVtZW50O1xuICAgICAgfVxuICAgICAgbm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKFxuICAgICAgICAgIHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgICAgSnN4RXJyb3JzLlVud3JhcHBlZEFkamFjZW50SlNYRWxlbWVudHMsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0ZyYWdtZW50KG9wZW5pbmdFbGVtZW50KVxuICAgICAgICA/IHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkpTWEZyYWdtZW50XCIpXG4gICAgICAgIDogdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSlNYRWxlbWVudFwiKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgZW50aXJlIEpTWCBlbGVtZW50IGZyb20gY3VycmVudCBwb3NpdGlvbi5cblxuICAgIGpzeFBhcnNlRWxlbWVudCgpOiBOLkpTWEVsZW1lbnQge1xuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5qc3hQYXJzZUVsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBPdmVycmlkZXNcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBwYXJzZUV4cHJBdG9tKHJlZkV4cHJlc3Npb25FcnJvcnM6ID9FeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmpzeFRleHQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlLCBcIkpTWFRleHRcIik7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuanN4VGFnU3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpzeFBhcnNlRWxlbWVudCgpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpICYmXG4gICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcykgIT09IGNoYXJDb2Rlcy5leGNsYW1hdGlvbk1hcmtcbiAgICAgICkge1xuICAgICAgICAvLyBJbiBjYXNlIHdlIGVuY291bnRlciBhbiBsdCB0b2tlbiBoZXJlIGl0IHdpbGwgYWx3YXlzIGJlIHRoZSBzdGFydCBvZlxuICAgICAgICAvLyBqc3ggYXMgdGhlIGx0IHNpZ24gaXMgbm90IGFsbG93ZWQgaW4gcGxhY2VzIHRoYXQgZXhwZWN0IGFuIGV4cHJlc3Npb25cbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5qc3hUYWdTdGFydCk7XG4gICAgICAgIHJldHVybiB0aGlzLmpzeFBhcnNlRWxlbWVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRXhwckF0b20ocmVmRXhwcmVzc2lvbkVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VG9rZW5Gcm9tQ29kZShjb2RlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmluUHJvcGVydHlOYW1lKSByZXR1cm4gc3VwZXIuZ2V0VG9rZW5Gcm9tQ29kZShjb2RlKTtcblxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY3VyQ29udGV4dCgpO1xuXG4gICAgICBpZiAoY29udGV4dCA9PT0gdGMual9leHByKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpzeFJlYWRUb2tlbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dCA9PT0gdGMual9vVGFnIHx8IGNvbnRleHQgPT09IHRjLmpfY1RhZykge1xuICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoY29kZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5qc3hSZWFkV29yZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IGNoYXJDb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHQuanN4VGFnRW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoY29kZSA9PT0gY2hhckNvZGVzLnF1b3RhdGlvbk1hcmsgfHwgY29kZSA9PT0gY2hhckNvZGVzLmFwb3N0cm9waGUpICYmXG4gICAgICAgICAgY29udGV4dCA9PT0gdGMual9vVGFnXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmpzeFJlYWRTdHJpbmcoY29kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjb2RlID09PSBjaGFyQ29kZXMubGVzc1RoYW4gJiZcbiAgICAgICAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCAmJlxuICAgICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKSAhPT0gY2hhckNvZGVzLmV4Y2xhbWF0aW9uTWFya1xuICAgICAgKSB7XG4gICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR0LmpzeFRhZ1N0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLmdldFRva2VuRnJvbUNvZGUoY29kZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29udGV4dChwcmV2VHlwZTogVG9rZW5UeXBlKTogdm9pZCB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFjZUwpKSB7XG4gICAgICAgIGNvbnN0IGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgICAgICAgaWYgKGN1ckNvbnRleHQgPT09IHRjLmpfb1RhZykge1xuICAgICAgICAgIHRoaXMuc3RhdGUuY29udGV4dC5wdXNoKHRjLmJyYWNlRXhwcmVzc2lvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyQ29udGV4dCA9PT0gdGMual9leHByKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godGMudGVtcGxhdGVRdWFzaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VwZXIudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuc2xhc2gpICYmIHByZXZUeXBlID09PSB0dC5qc3hUYWdTdGFydCkge1xuICAgICAgICB0aGlzLnN0YXRlLmNvbnRleHQubGVuZ3RoIC09IDI7IC8vIGRvIG5vdCBjb25zaWRlciBKU1ggZXhwciAtPiBKU1ggb3BlbiB0YWcgLT4gLi4uIGFueW1vcmVcbiAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0LnB1c2godGMual9jVGFnKTsgLy8gcmVjb25zaWRlciBhcyBjbG9zaW5nIHRhZyBjb250ZXh0XG4gICAgICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdXBlci51cGRhdGVDb250ZXh0KHByZXZUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtcbiAgU0NPUEVfQVJST1csXG4gIFNDT1BFX0RJUkVDVF9TVVBFUixcbiAgU0NPUEVfRlVOQ1RJT04sXG4gIFNDT1BFX1NJTVBMRV9DQVRDSCxcbiAgU0NPUEVfU1VQRVIsXG4gIFNDT1BFX1BST0dSQU0sXG4gIFNDT1BFX1ZBUixcbiAgU0NPUEVfQ0xBU1MsXG4gIEJJTkRfU0NPUEVfRlVOQ1RJT04sXG4gIEJJTkRfU0NPUEVfVkFSLFxuICBCSU5EX1NDT1BFX0xFWElDQUwsXG4gIEJJTkRfS0lORF9WQUxVRSxcbiAgdHlwZSBTY29wZUZsYWdzLFxuICB0eXBlIEJpbmRpbmdUeXBlcyxcbn0gZnJvbSBcIi4vc2NvcGVmbGFnc1wiO1xuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi9wYXJzZXIvZXJyb3JcIjtcblxuLy8gU3RhcnQgYW4gQVNUIG5vZGUsIGF0dGFjaGluZyBhIHN0YXJ0IG9mZnNldC5cbmV4cG9ydCBjbGFzcyBTY29wZSB7XG4gIGZsYWdzOiBTY29wZUZsYWdzO1xuICAvLyBBIGxpc3Qgb2YgdmFyLWRlY2xhcmVkIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcbiAgdmFyOiBzdHJpbmdbXSA9IFtdO1xuICAvLyBBIGxpc3Qgb2YgbGV4aWNhbGx5LWRlY2xhcmVkIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcbiAgbGV4aWNhbDogc3RyaW5nW10gPSBbXTtcbiAgLy8gQSBsaXN0IG9mIGxleGljYWxseS1kZWNsYXJlZCBGdW5jdGlvbkRlY2xhcmF0aW9uIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcbiAgZnVuY3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGZsYWdzOiBTY29wZUZsYWdzKSB7XG4gICAgdGhpcy5mbGFncyA9IGZsYWdzO1xuICB9XG59XG5cbnR5cGUgcmFpc2VGdW5jdGlvbiA9IChudW1iZXIsIHN0cmluZywgLi4uYW55KSA9PiB2b2lkO1xuXG4vLyBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIGtlZXAgdHJhY2sgb2YgZGVjbGFyZWQgdmFyaWFibGVzIGluIHRoZVxuLy8gY3VycmVudCBzY29wZSBpbiBvcmRlciB0byBkZXRlY3QgZHVwbGljYXRlIHZhcmlhYmxlIG5hbWVzLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NvcGVIYW5kbGVyPElTY29wZTogU2NvcGUgPSBTY29wZT4ge1xuICBzY29wZVN0YWNrOiBBcnJheTxJU2NvcGU+ID0gW107XG4gIHJhaXNlOiByYWlzZUZ1bmN0aW9uO1xuICBpbk1vZHVsZTogYm9vbGVhbjtcbiAgdW5kZWZpbmVkRXhwb3J0czogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbiAgdW5kZWZpbmVkUHJpdmF0ZU5hbWVzOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKHJhaXNlOiByYWlzZUZ1bmN0aW9uLCBpbk1vZHVsZTogYm9vbGVhbikge1xuICAgIHRoaXMucmFpc2UgPSByYWlzZTtcbiAgICB0aGlzLmluTW9kdWxlID0gaW5Nb2R1bGU7XG4gIH1cblxuICBnZXQgaW5GdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHRoaXMuY3VycmVudFZhclNjb3BlKCkuZmxhZ3MgJiBTQ09QRV9GVU5DVElPTikgPiAwO1xuICB9XG4gIGdldCBhbGxvd1N1cGVyKCkge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50VGhpc1Njb3BlKCkuZmxhZ3MgJiBTQ09QRV9TVVBFUikgPiAwO1xuICB9XG4gIGdldCBhbGxvd0RpcmVjdFN1cGVyKCkge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50VGhpc1Njb3BlKCkuZmxhZ3MgJiBTQ09QRV9ESVJFQ1RfU1VQRVIpID4gMDtcbiAgfVxuICBnZXQgaW5DbGFzcygpIHtcbiAgICByZXR1cm4gKHRoaXMuY3VycmVudFRoaXNTY29wZSgpLmZsYWdzICYgU0NPUEVfQ0xBU1MpID4gMDtcbiAgfVxuICBnZXQgaW5Ob25BcnJvd0Z1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50VGhpc1Njb3BlKCkuZmxhZ3MgJiBTQ09QRV9GVU5DVElPTikgPiAwO1xuICB9XG4gIGdldCB0cmVhdEZ1bmN0aW9uc0FzVmFyKCkge1xuICAgIHJldHVybiB0aGlzLnRyZWF0RnVuY3Rpb25zQXNWYXJJblNjb3BlKHRoaXMuY3VycmVudFNjb3BlKCkpO1xuICB9XG5cbiAgY3JlYXRlU2NvcGUoZmxhZ3M6IFNjb3BlRmxhZ3MpOiBTY29wZSB7XG4gICAgcmV0dXJuIG5ldyBTY29wZShmbGFncyk7XG4gIH1cbiAgLy8gVGhpcyBtZXRob2Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSBzdWJjbGFzc2VzXG4gIC8qOjogK2NyZWF0ZVNjb3BlOiAoZmxhZ3M6IFNjb3BlRmxhZ3MpID0+IElTY29wZTsgKi9cblxuICBlbnRlcihmbGFnczogU2NvcGVGbGFncykge1xuICAgIHRoaXMuc2NvcGVTdGFjay5wdXNoKHRoaXMuY3JlYXRlU2NvcGUoZmxhZ3MpKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5zY29wZVN0YWNrLnBvcCgpO1xuICB9XG5cbiAgLy8gVGhlIHNwZWMgc2F5czpcbiAgLy8gPiBBdCB0aGUgdG9wIGxldmVsIG9mIGEgZnVuY3Rpb24sIG9yIHNjcmlwdCwgZnVuY3Rpb24gZGVjbGFyYXRpb25zIGFyZVxuICAvLyA+IHRyZWF0ZWQgbGlrZSB2YXIgZGVjbGFyYXRpb25zIHJhdGhlciB0aGFuIGxpa2UgbGV4aWNhbCBkZWNsYXJhdGlvbnMuXG4gIHRyZWF0RnVuY3Rpb25zQXNWYXJJblNjb3BlKHNjb3BlOiBJU2NvcGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEoXG4gICAgICBzY29wZS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OIHx8XG4gICAgICAoIXRoaXMuaW5Nb2R1bGUgJiYgc2NvcGUuZmxhZ3MgJiBTQ09QRV9QUk9HUkFNKVxuICAgICk7XG4gIH1cblxuICBkZWNsYXJlTmFtZShuYW1lOiBzdHJpbmcsIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMsIHBvczogbnVtYmVyKSB7XG4gICAgbGV0IHNjb3BlID0gdGhpcy5jdXJyZW50U2NvcGUoKTtcbiAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX1NDT1BFX0xFWElDQUwgfHwgYmluZGluZ1R5cGUgJiBCSU5EX1NDT1BFX0ZVTkNUSU9OKSB7XG4gICAgICB0aGlzLmNoZWNrUmVkZWNsYXJhdGlvbkluU2NvcGUoc2NvcGUsIG5hbWUsIGJpbmRpbmdUeXBlLCBwb3MpO1xuXG4gICAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX1NDT1BFX0ZVTkNUSU9OKSB7XG4gICAgICAgIHNjb3BlLmZ1bmN0aW9ucy5wdXNoKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NvcGUubGV4aWNhbC5wdXNoKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX1NDT1BFX0xFWElDQUwpIHtcbiAgICAgICAgdGhpcy5tYXliZUV4cG9ydERlZmluZWQoc2NvcGUsIG5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX1NDT1BFX1ZBUikge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBzY29wZSA9IHRoaXMuc2NvcGVTdGFja1tpXTtcbiAgICAgICAgdGhpcy5jaGVja1JlZGVjbGFyYXRpb25JblNjb3BlKHNjb3BlLCBuYW1lLCBiaW5kaW5nVHlwZSwgcG9zKTtcbiAgICAgICAgc2NvcGUudmFyLnB1c2gobmFtZSk7XG4gICAgICAgIHRoaXMubWF5YmVFeHBvcnREZWZpbmVkKHNjb3BlLCBuYW1lKTtcblxuICAgICAgICBpZiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9WQVIpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5pbk1vZHVsZSAmJiBzY29wZS5mbGFncyAmIFNDT1BFX1BST0dSQU0pIHtcbiAgICAgIHRoaXMudW5kZWZpbmVkRXhwb3J0cy5kZWxldGUobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgbWF5YmVFeHBvcnREZWZpbmVkKHNjb3BlOiBJU2NvcGUsIG5hbWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmluTW9kdWxlICYmIHNjb3BlLmZsYWdzICYgU0NPUEVfUFJPR1JBTSkge1xuICAgICAgdGhpcy51bmRlZmluZWRFeHBvcnRzLmRlbGV0ZShuYW1lKTtcbiAgICB9XG4gIH1cblxuICBjaGVja1JlZGVjbGFyYXRpb25JblNjb3BlKFxuICAgIHNjb3BlOiBJU2NvcGUsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMsXG4gICAgcG9zOiBudW1iZXIsXG4gICkge1xuICAgIGlmICh0aGlzLmlzUmVkZWNsYXJlZEluU2NvcGUoc2NvcGUsIG5hbWUsIGJpbmRpbmdUeXBlKSkge1xuICAgICAgdGhpcy5yYWlzZShwb3MsIEVycm9ycy5WYXJSZWRlY2xhcmF0aW9uLCBuYW1lKTtcbiAgICB9XG4gIH1cblxuICBpc1JlZGVjbGFyZWRJblNjb3BlKFxuICAgIHNjb3BlOiBJU2NvcGUsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMsXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghKGJpbmRpbmdUeXBlICYgQklORF9LSU5EX1ZBTFVFKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9TQ09QRV9MRVhJQ0FMKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY29wZS5sZXhpY2FsLmluZGV4T2YobmFtZSkgPiAtMSB8fFxuICAgICAgICBzY29wZS5mdW5jdGlvbnMuaW5kZXhPZihuYW1lKSA+IC0xIHx8XG4gICAgICAgIHNjb3BlLnZhci5pbmRleE9mKG5hbWUpID4gLTFcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9TQ09QRV9GVU5DVElPTikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc2NvcGUubGV4aWNhbC5pbmRleE9mKG5hbWUpID4gLTEgfHxcbiAgICAgICAgKCF0aGlzLnRyZWF0RnVuY3Rpb25zQXNWYXJJblNjb3BlKHNjb3BlKSAmJlxuICAgICAgICAgIHNjb3BlLnZhci5pbmRleE9mKG5hbWUpID4gLTEpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAoc2NvcGUubGV4aWNhbC5pbmRleE9mKG5hbWUpID4gLTEgJiZcbiAgICAgICAgIShzY29wZS5mbGFncyAmIFNDT1BFX1NJTVBMRV9DQVRDSCAmJiBzY29wZS5sZXhpY2FsWzBdID09PSBuYW1lKSkgfHxcbiAgICAgICghdGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZShzY29wZSkgJiZcbiAgICAgICAgc2NvcGUuZnVuY3Rpb25zLmluZGV4T2YobmFtZSkgPiAtMSlcbiAgICApO1xuICB9XG5cbiAgY2hlY2tMb2NhbEV4cG9ydChpZDogTi5JZGVudGlmaWVyKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZVN0YWNrWzBdLmxleGljYWwuaW5kZXhPZihpZC5uYW1lKSA9PT0gLTEgJiZcbiAgICAgIHRoaXMuc2NvcGVTdGFja1swXS52YXIuaW5kZXhPZihpZC5uYW1lKSA9PT0gLTEgJiZcbiAgICAgIC8vIEluIHN0cmljdCBtb2RlLCBzY29wZS5mdW5jdGlvbnMgd2lsbCBhbHdheXMgYmUgZW1wdHkuXG4gICAgICAvLyBNb2R1bGVzIGFyZSBzdHJpY3QgYnkgZGVmYXVsdCwgYnV0IHRoZSBgc2NyaXB0TW9kZWAgb3B0aW9uXG4gICAgICAvLyBjYW4gb3ZlcndyaXRlIHRoaXMgYmVoYXZpb3IuXG4gICAgICB0aGlzLnNjb3BlU3RhY2tbMF0uZnVuY3Rpb25zLmluZGV4T2YoaWQubmFtZSkgPT09IC0xXG4gICAgKSB7XG4gICAgICB0aGlzLnVuZGVmaW5lZEV4cG9ydHMuc2V0KGlkLm5hbWUsIGlkLnN0YXJ0KTtcbiAgICB9XG4gIH1cblxuICBjdXJyZW50U2NvcGUoKTogSVNjb3BlIHtcbiAgICByZXR1cm4gdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8vICRGbG93SWdub3JlXG4gIGN1cnJlbnRWYXJTY29wZSgpOiBJU2NvcGUge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMTsgOyBpLS0pIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZVN0YWNrW2ldO1xuICAgICAgaWYgKHNjb3BlLmZsYWdzICYgU0NPUEVfVkFSKSB7XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb3VsZCBiZSB1c2VmdWwgZm9yIGBhcmd1bWVudHNgLCBgdGhpc2AsIGBuZXcudGFyZ2V0YCwgYHN1cGVyKClgLCBgc3VwZXIucHJvcGVydHlgLCBhbmQgYHN1cGVyW3Byb3BlcnR5XWAuXG4gIC8vICRGbG93SWdub3JlXG4gIGN1cnJlbnRUaGlzU2NvcGUoKTogSVNjb3BlIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7IDsgaS0tKSB7XG4gICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGVTdGFja1tpXTtcbiAgICAgIGlmIChcbiAgICAgICAgKHNjb3BlLmZsYWdzICYgU0NPUEVfVkFSIHx8IHNjb3BlLmZsYWdzICYgU0NPUEVfQ0xBU1MpICYmXG4gICAgICAgICEoc2NvcGUuZmxhZ3MgJiBTQ09QRV9BUlJPVylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgU2NvcGVIYW5kbGVyLCB7IFNjb3BlIH0gZnJvbSBcIi4uLy4uL3V0aWwvc2NvcGVcIjtcbmltcG9ydCB7XG4gIEJJTkRfS0lORF9UWVBFLFxuICBCSU5EX0ZMQUdTX1RTX0VOVU0sXG4gIEJJTkRfRkxBR1NfVFNfQ09OU1RfRU5VTSxcbiAgQklORF9GTEFHU19UU19FWFBPUlRfT05MWSxcbiAgQklORF9LSU5EX1ZBTFVFLFxuICBCSU5EX0ZMQUdTX0NMQVNTLFxuICB0eXBlIFNjb3BlRmxhZ3MsXG4gIHR5cGUgQmluZGluZ1R5cGVzLFxufSBmcm9tIFwiLi4vLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgKiBhcyBOIGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5jbGFzcyBUeXBlU2NyaXB0U2NvcGUgZXh0ZW5kcyBTY29wZSB7XG4gIHR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIGVudW1zICh3aGljaCBhcmUgYWxzbyBpbiAudHlwZXMpXG4gIGVudW1zOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIGNvbnN0IGVudW1zICh3aGljaCBhcmUgYWxzbyBpbiAuZW51bXMgYW5kIC50eXBlcylcbiAgY29uc3RFbnVtczogc3RyaW5nW10gPSBbXTtcblxuICAvLyBjbGFzc2VzICh3aGljaCBhcmUgYWxzbyBpbiAubGV4aWNhbCkgYW5kIGludGVyZmFjZSAod2hpY2ggYXJlIGFsc28gaW4gLnR5cGVzKVxuICBjbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIG5hbWVzcGFjZXMgYW5kIGFtYmllbnQgZnVuY3Rpb25zIChvciBjbGFzc2VzKSBhcmUgdG9vIGRpZmZpY3VsdCB0byB0cmFjayxcbiAgLy8gZXNwZWNpYWxseSB3aXRob3V0IHR5cGUgYW5hbHlzaXMuXG4gIC8vIFdlIG5lZWQgdG8gdHJhY2sgdGhlbSBhbnl3YXksIHRvIGF2b2lkIFwiWCBpcyBub3QgZGVmaW5lZFwiIGVycm9yc1xuICAvLyB3aGVuIGV4cG9ydGluZyB0aGVtLlxuICBleHBvcnRPbmx5QmluZGluZ3M6IHN0cmluZ1tdID0gW107XG59XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvcHVsbC85NzY2I2Rpc2N1c3Npb25fcjI2ODkyMDczMCBmb3IgYW5cbi8vIGV4cGxhbmF0aW9uIG9mIGhvdyB0eXBlc2NyaXB0IGhhbmRsZXMgc2NvcGUuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVTY3JpcHRTY29wZUhhbmRsZXIgZXh0ZW5kcyBTY29wZUhhbmRsZXI8VHlwZVNjcmlwdFNjb3BlPiB7XG4gIGNyZWF0ZVNjb3BlKGZsYWdzOiBTY29wZUZsYWdzKTogVHlwZVNjcmlwdFNjb3BlIHtcbiAgICByZXR1cm4gbmV3IFR5cGVTY3JpcHRTY29wZShmbGFncyk7XG4gIH1cblxuICBkZWNsYXJlTmFtZShuYW1lOiBzdHJpbmcsIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMsIHBvczogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLmN1cnJlbnRTY29wZSgpO1xuICAgIGlmIChiaW5kaW5nVHlwZSAmIEJJTkRfRkxBR1NfVFNfRVhQT1JUX09OTFkpIHtcbiAgICAgIHRoaXMubWF5YmVFeHBvcnREZWZpbmVkKHNjb3BlLCBuYW1lKTtcbiAgICAgIHNjb3BlLmV4cG9ydE9ubHlCaW5kaW5ncy5wdXNoKG5hbWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1cGVyLmRlY2xhcmVOYW1lKC4uLmFyZ3VtZW50cyk7XG5cbiAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX0tJTkRfVFlQRSkge1xuICAgICAgaWYgKCEoYmluZGluZ1R5cGUgJiBCSU5EX0tJTkRfVkFMVUUpKSB7XG4gICAgICAgIC8vIFwiVmFsdWVcIiBiaW5kaW5ncyBoYXZlIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGJ5IHRoZSBzdXBlcmNsYXNzLlxuICAgICAgICB0aGlzLmNoZWNrUmVkZWNsYXJhdGlvbkluU2NvcGUoc2NvcGUsIG5hbWUsIGJpbmRpbmdUeXBlLCBwb3MpO1xuICAgICAgICB0aGlzLm1heWJlRXhwb3J0RGVmaW5lZChzY29wZSwgbmFtZSk7XG4gICAgICB9XG4gICAgICBzY29wZS50eXBlcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX0ZMQUdTX1RTX0VOVU0pIHNjb3BlLmVudW1zLnB1c2gobmFtZSk7XG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9GTEFHU19UU19DT05TVF9FTlVNKSBzY29wZS5jb25zdEVudW1zLnB1c2gobmFtZSk7XG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9GTEFHU19DTEFTUykgc2NvcGUuY2xhc3Nlcy5wdXNoKG5hbWUpO1xuICB9XG5cbiAgaXNSZWRlY2xhcmVkSW5TY29wZShcbiAgICBzY29wZTogVHlwZVNjcmlwdFNjb3BlLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBiaW5kaW5nVHlwZTogQmluZGluZ1R5cGVzLFxuICApOiBib29sZWFuIHtcbiAgICBpZiAoc2NvcGUuZW51bXMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICBpZiAoYmluZGluZ1R5cGUgJiBCSU5EX0ZMQUdTX1RTX0VOVU0pIHtcbiAgICAgICAgLy8gRW51bXMgY2FuIGJlIG1lcmdlZCB3aXRoIG90aGVyIGVudW1zIGlmIHRoZXkgYXJlIGJvdGhcbiAgICAgICAgLy8gIGNvbnN0IG9yIGJvdGggbm9uLWNvbnN0LlxuICAgICAgICBjb25zdCBpc0NvbnN0ID0gISEoYmluZGluZ1R5cGUgJiBCSU5EX0ZMQUdTX1RTX0NPTlNUX0VOVU0pO1xuICAgICAgICBjb25zdCB3YXNDb25zdCA9IHNjb3BlLmNvbnN0RW51bXMuaW5kZXhPZihuYW1lKSA+IC0xO1xuICAgICAgICByZXR1cm4gaXNDb25zdCAhPT0gd2FzQ29uc3Q7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9GTEFHU19DTEFTUyAmJiBzY29wZS5jbGFzc2VzLmluZGV4T2YobmFtZSkgPiAtMSkge1xuICAgICAgaWYgKHNjb3BlLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICAgIC8vIENsYXNzZXMgY2FuIGJlIG1lcmdlZCB3aXRoIGludGVyZmFjZXNcbiAgICAgICAgcmV0dXJuICEhKGJpbmRpbmdUeXBlICYgQklORF9LSU5EX1ZBTFVFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEludGVyZmFjZSBjYW4gYmUgbWVyZ2VkIHdpdGggb3RoZXIgY2xhc3NlcyBvciBpbnRlcmZhY2VzXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJpbmRpbmdUeXBlICYgQklORF9LSU5EX1RZUEUgJiYgc2NvcGUudHlwZXMuaW5kZXhPZihuYW1lKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuaXNSZWRlY2xhcmVkSW5TY29wZSguLi5hcmd1bWVudHMpO1xuICB9XG5cbiAgY2hlY2tMb2NhbEV4cG9ydChpZDogTi5JZGVudGlmaWVyKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZVN0YWNrWzBdLnR5cGVzLmluZGV4T2YoaWQubmFtZSkgPT09IC0xICYmXG4gICAgICB0aGlzLnNjb3BlU3RhY2tbMF0uZXhwb3J0T25seUJpbmRpbmdzLmluZGV4T2YoaWQubmFtZSkgPT09IC0xXG4gICAgKSB7XG4gICAgICBzdXBlci5jaGVja0xvY2FsRXhwb3J0KGlkKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIEBmbG93XG5leHBvcnQgY29uc3QgUEFSQU0gPSAwYjAwMDAsIC8vIEluaXRpYWwgUGFyYW1ldGVyIGZsYWdzXG4gIFBBUkFNX1lJRUxEID0gMGIwMDAxLCAvLyB0cmFjayBbWWllbGRdIHByb2R1Y3Rpb24gcGFyYW1ldGVyXG4gIFBBUkFNX0FXQUlUID0gMGIwMDEwLCAvLyB0cmFjayBbQXdhaXRdIHByb2R1Y3Rpb24gcGFyYW1ldGVyXG4gIFBBUkFNX1JFVFVSTiA9IDBiMDEwMCwgLy8gdHJhY2sgW1JldHVybl0gcHJvZHVjdGlvbiBwYXJhbWV0ZXJcbiAgUEFSQU1fSU4gPSAwYjEwMDA7IC8vIHRyYWNrIFtJbl0gcHJvZHVjdGlvbiBwYXJhbWV0ZXJcblxuLy8gUHJvZHVjdGlvblBhcmFtZXRlckhhbmRsZXIgaXMgYSBzdGFjayBmYXNoaW9uZWQgcHJvZHVjdGlvbiBwYXJhbWV0ZXIgdHJhY2tlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1ncmFtbWFyLW5vdGF0aW9uXG4vLyBUaGUgdHJhY2tlZCBwYXJhbWV0ZXJzIGFyZSBkZWZpbmVkIGFib3ZlLlxuLy9cbi8vIFdoZW5ldmVyIFsrQXdhaXRdL1srWWllbGRdIGFwcGVhcnMgaW4gdGhlIHJpZ2h0LWhhbmQgc2lkZXMgb2YgYSBwcm9kdWN0aW9uLFxuLy8gd2UgbXVzdCBlbnRlciBhIG5ldyB0cmFja2luZyBzdGFjay4gRm9yIGV4YW1wbGUgd2hlbiBwYXJzaW5nXG4vL1xuLy8gQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uIFtZaWVsZCwgQXdhaXRdOlxuLy8gICBhc3luYyBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gZnVuY3Rpb24gQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICAgKCBGb3JtYWxQYXJhbWV0ZXJzW35ZaWVsZCwgK0F3YWl0XSApIHsgQXN5bmNGdW5jdGlvbkJvZHkgfVxuLy9cbi8vIHdlIG11c3QgZm9sbG93IHN1Y2ggcHJvY2Vzczpcbi8vXG4vLyAxLiBwYXJzZSBhc3luYyBrZXl3b3JkXG4vLyAyLiBwYXJzZSBmdW5jdGlvbiBrZXl3b3JkXG4vLyAzLiBwYXJzZSBiaW5kaW5nSWRlbnRpZmllciA8PSBpbmhlcml0IGN1cnJlbnQgcGFyYW1ldGVyczogWz9Bd2FpdF1cbi8vIDQuIGVudGVyIG5ldyBzdGFjayB3aXRoIChQQVJBTV9BV0FJVClcbi8vIDUuIHBhcnNlIGZvcm1hbCBwYXJhbWV0ZXJzIDw9IG11c3QgaGF2ZSBbQXdhaXRdIHBhcmFtZXRlciBbK0F3YWl0XVxuLy8gNi4gcGFyc2UgZnVuY3Rpb24gYm9keVxuLy8gNy4gZXhpdCBjdXJyZW50IHN0YWNrXG5cbmV4cG9ydCB0eXBlIFBhcmFtS2luZCA9IHR5cGVvZiBQQVJBTSB8IHR5cGVvZiBQQVJBTV9BV0FJVCB8IHR5cGVvZiBQQVJBTV9ZSUVMRDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZHVjdGlvblBhcmFtZXRlckhhbmRsZXIge1xuICBzdGFja3M6IEFycmF5PFBhcmFtS2luZD4gPSBbXTtcbiAgZW50ZXIoZmxhZ3M6IFBhcmFtS2luZCkge1xuICAgIHRoaXMuc3RhY2tzLnB1c2goZmxhZ3MpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLnN0YWNrcy5wb3AoKTtcbiAgfVxuXG4gIGN1cnJlbnRGbGFncygpOiBQYXJhbUtpbmQge1xuICAgIHJldHVybiB0aGlzLnN0YWNrc1t0aGlzLnN0YWNrcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGdldCBoYXNBd2FpdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuY3VycmVudEZsYWdzKCkgJiBQQVJBTV9BV0FJVCkgPiAwO1xuICB9XG5cbiAgZ2V0IGhhc1lpZWxkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50RmxhZ3MoKSAmIFBBUkFNX1lJRUxEKSA+IDA7XG4gIH1cblxuICBnZXQgaGFzUmV0dXJuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50RmxhZ3MoKSAmIFBBUkFNX1JFVFVSTikgPiAwO1xuICB9XG5cbiAgZ2V0IGhhc0luKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50RmxhZ3MoKSAmIFBBUkFNX0lOKSA+IDA7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZ1bmN0aW9uRmxhZ3MoXG4gIGlzQXN5bmM6IGJvb2xlYW4sXG4gIGlzR2VuZXJhdG9yOiBib29sZWFuLFxuKTogUGFyYW1LaW5kIHtcbiAgcmV0dXJuIChpc0FzeW5jID8gUEFSQU1fQVdBSVQgOiAwKSB8IChpc0dlbmVyYXRvciA/IFBBUkFNX1lJRUxEIDogMCk7XG59XG4iLCIvLyBAZmxvd1xuXG4vKjo6IGRlY2xhcmUgdmFyIGludmFyaWFudDsgKi9cblxuLy8gRXJyb3IgbWVzc2FnZXMgYXJlIGNvbG9jYXRlZCB3aXRoIHRoZSBwbHVnaW4uXG4vKiBlc2xpbnQtZGlzYWJsZSBAYmFiZWwvZGV2ZWxvcG1lbnQtaW50ZXJuYWwvZHJ5LWVycm9yLW1lc3NhZ2VzICovXG5cbmltcG9ydCB0eXBlIHsgVG9rZW5UeXBlIH0gZnJvbSBcIi4uLy4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0IHR5cGUgU3RhdGUgZnJvbSBcIi4uLy4uL3Rva2VuaXplci9zdGF0ZVwiO1xuaW1wb3J0IHsgdHlwZXMgYXMgdHQgfSBmcm9tIFwiLi4vLi4vdG9rZW5pemVyL3R5cGVzXCI7XG5pbXBvcnQgeyB0eXBlcyBhcyBjdCB9IGZyb20gXCIuLi8uLi90b2tlbml6ZXIvY29udGV4dFwiO1xuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUG9zLCBQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi91dGlsL2xvY2F0aW9uXCI7XG5pbXBvcnQgdHlwZSBQYXJzZXIgZnJvbSBcIi4uLy4uL3BhcnNlclwiO1xuaW1wb3J0IHtcbiAgdHlwZSBCaW5kaW5nVHlwZXMsXG4gIEJJTkRfTk9ORSxcbiAgU0NPUEVfVFNfTU9EVUxFLFxuICBTQ09QRV9PVEhFUixcbiAgQklORF9UU19FTlVNLFxuICBCSU5EX1RTX0NPTlNUX0VOVU0sXG4gIEJJTkRfVFNfVFlQRSxcbiAgQklORF9UU19JTlRFUkZBQ0UsXG4gIEJJTkRfVFNfQU1CSUVOVCxcbiAgQklORF9UU19OQU1FU1BBQ0UsXG4gIEJJTkRfQ0xBU1MsXG4gIEJJTkRfTEVYSUNBTCxcbn0gZnJvbSBcIi4uLy4uL3V0aWwvc2NvcGVmbGFnc1wiO1xuaW1wb3J0IFR5cGVTY3JpcHRTY29wZUhhbmRsZXIgZnJvbSBcIi4vc2NvcGVcIjtcbmltcG9ydCAqIGFzIGNoYXJDb2RlcyBmcm9tIFwiY2hhcmNvZGVzXCI7XG5pbXBvcnQgdHlwZSB7IEV4cHJlc3Npb25FcnJvcnMgfSBmcm9tIFwiLi4vLi4vcGFyc2VyL3V0aWxcIjtcbmltcG9ydCB7IFBBUkFNIH0gZnJvbSBcIi4uLy4uL3V0aWwvcHJvZHVjdGlvbi1wYXJhbWV0ZXJcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi8uLi9wYXJzZXIvZXJyb3JcIjtcblxudHlwZSBUc01vZGlmaWVyID1cbiAgfCBcInJlYWRvbmx5XCJcbiAgfCBcImFic3RyYWN0XCJcbiAgfCBcImRlY2xhcmVcIlxuICB8IFwic3RhdGljXCJcbiAgfCBcInB1YmxpY1wiXG4gIHwgXCJwcml2YXRlXCJcbiAgfCBcInByb3RlY3RlZFwiO1xuXG5mdW5jdGlvbiBub25OdWxsPFQ+KHg6ID9UKTogVCB7XG4gIGlmICh4ID09IG51bGwpIHtcbiAgICAvLyAkRmxvd0lnbm9yZVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCAke3h9IHZhbHVlLmApO1xuICB9XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBhc3NlcnQoeDogYm9vbGVhbik6IHZvaWQge1xuICBpZiAoIXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3NlcnQgZmFpbFwiKTtcbiAgfVxufVxuXG50eXBlIFBhcnNpbmdDb250ZXh0ID1cbiAgfCBcIkVudW1NZW1iZXJzXCJcbiAgfCBcIkhlcml0YWdlQ2xhdXNlRWxlbWVudFwiXG4gIHwgXCJUdXBsZUVsZW1lbnRUeXBlc1wiXG4gIHwgXCJUeXBlTWVtYmVyc1wiXG4gIHwgXCJUeXBlUGFyYW1ldGVyc09yQXJndW1lbnRzXCI7XG5cbmNvbnN0IFRTRXJyb3JzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIENsYXNzTWV0aG9kSGFzRGVjbGFyZTogXCJDbGFzcyBtZXRob2RzIGNhbm5vdCBoYXZlIHRoZSAnZGVjbGFyZScgbW9kaWZpZXJcIixcbiAgQ2xhc3NNZXRob2RIYXNSZWFkb25seTogXCJDbGFzcyBtZXRob2RzIGNhbm5vdCBoYXZlIHRoZSAncmVhZG9ubHknIG1vZGlmaWVyXCIsXG4gIERlY2xhcmVDbGFzc0ZpZWxkSGFzSW5pdGlhbGl6ZXI6XG4gICAgXCInZGVjbGFyZScgY2xhc3MgZmllbGRzIGNhbm5vdCBoYXZlIGFuIGluaXRpYWxpemVyXCIsXG4gIER1cGxpY2F0ZU1vZGlmaWVyOiBcIkR1cGxpY2F0ZSBtb2RpZmllcjogJyUwJ1wiLFxuICBFbXB0eUhlcml0YWdlQ2xhdXNlVHlwZTogXCInJTAnIGxpc3QgY2Fubm90IGJlIGVtcHR5LlwiLFxuICBJbmRleFNpZ25hdHVyZUhhc0Fic3RyYWN0OlxuICAgIFwiSW5kZXggc2lnbmF0dXJlcyBjYW5ub3QgaGF2ZSB0aGUgJ2Fic3RyYWN0JyBtb2RpZmllclwiLFxuICBJbmRleFNpZ25hdHVyZUhhc0FjY2Vzc2liaWxpdHk6XG4gICAgXCJJbmRleCBzaWduYXR1cmVzIGNhbm5vdCBoYXZlIGFuIGFjY2Vzc2liaWxpdHkgbW9kaWZpZXIgKCclMCcpXCIsXG4gIEluZGV4U2lnbmF0dXJlSGFzU3RhdGljOiBcIkluZGV4IHNpZ25hdHVyZXMgY2Fubm90IGhhdmUgdGhlICdzdGF0aWMnIG1vZGlmaWVyXCIsXG4gIEludmFsaWRUdXBsZU1lbWJlckxhYmVsOlxuICAgIFwiVHVwbGUgbWVtYmVycyBtdXN0IGJlIGxhYmVsZWQgd2l0aCBhIHNpbXBsZSBpZGVudGlmaWVyLlwiLFxuICBNaXhlZExhYmVsZWRBbmRVbmxhYmVsZWRFbGVtZW50czpcbiAgICBcIlR1cGxlIG1lbWJlcnMgbXVzdCBhbGwgaGF2ZSBuYW1lcyBvciBhbGwgbm90IGhhdmUgbmFtZXMuXCIsXG4gIE9wdGlvbmFsVHlwZUJlZm9yZVJlcXVpcmVkOlxuICAgIFwiQSByZXF1aXJlZCBlbGVtZW50IGNhbm5vdCBmb2xsb3cgYW4gb3B0aW9uYWwgZWxlbWVudC5cIixcbiAgUGF0dGVybklzT3B0aW9uYWw6XG4gICAgXCJBIGJpbmRpbmcgcGF0dGVybiBwYXJhbWV0ZXIgY2Fubm90IGJlIG9wdGlvbmFsIGluIGFuIGltcGxlbWVudGF0aW9uIHNpZ25hdHVyZS5cIixcbiAgUHJpdmF0ZUVsZW1lbnRIYXNBYnN0cmFjdDpcbiAgICBcIlByaXZhdGUgZWxlbWVudHMgY2Fubm90IGhhdmUgdGhlICdhYnN0cmFjdCcgbW9kaWZpZXIuXCIsXG4gIFByaXZhdGVFbGVtZW50SGFzQWNjZXNzaWJpbGl0eTpcbiAgICBcIlByaXZhdGUgZWxlbWVudHMgY2Fubm90IGhhdmUgYW4gYWNjZXNzaWJpbGl0eSBtb2RpZmllciAoJyUwJylcIixcbiAgVGVtcGxhdGVUeXBlSGFzU3Vic3RpdHV0aW9uOlxuICAgIFwiVGVtcGxhdGUgbGl0ZXJhbCB0eXBlcyBjYW5ub3QgaGF2ZSBhbnkgc3Vic3RpdHV0aW9uXCIsXG4gIFR5cGVBbm5vdGF0aW9uQWZ0ZXJBc3NpZ246XG4gICAgXCJUeXBlIGFubm90YXRpb25zIG11c3QgY29tZSBiZWZvcmUgZGVmYXVsdCBhc3NpZ25tZW50cywgZS5nLiBpbnN0ZWFkIG9mIGBhZ2UgPSAyNTogbnVtYmVyYCB1c2UgYGFnZTogbnVtYmVyID0gMjVgXCIsXG4gIFVuZXhwZWN0ZWRSZWFkb25seTpcbiAgICBcIidyZWFkb25seScgdHlwZSBtb2RpZmllciBpcyBvbmx5IHBlcm1pdHRlZCBvbiBhcnJheSBhbmQgdHVwbGUgbGl0ZXJhbCB0eXBlcy5cIixcbiAgVW5leHBlY3RlZFR5cGVBbm5vdGF0aW9uOiBcIkRpZCBub3QgZXhwZWN0IGEgdHlwZSBhbm5vdGF0aW9uIGhlcmUuXCIsXG4gIFVuZXhwZWN0ZWRUeXBlQ2FzdEluUGFyYW1ldGVyOiBcIlVuZXhwZWN0ZWQgdHlwZSBjYXN0IGluIHBhcmFtZXRlciBwb3NpdGlvbi5cIixcbiAgVW5zdXBwb3J0ZWRJbXBvcnRUeXBlQXJndW1lbnQ6XG4gICAgXCJBcmd1bWVudCBpbiBhIHR5cGUgaW1wb3J0IG11c3QgYmUgYSBzdHJpbmcgbGl0ZXJhbFwiLFxuICBVbnN1cHBvcnRlZFBhcmFtZXRlclByb3BlcnR5S2luZDpcbiAgICBcIkEgcGFyYW1ldGVyIHByb3BlcnR5IG1heSBub3QgYmUgZGVjbGFyZWQgdXNpbmcgYSBiaW5kaW5nIHBhdHRlcm4uXCIsXG4gIFVuc3VwcG9ydGVkU2lnbmF0dXJlUGFyYW1ldGVyS2luZDpcbiAgICBcIk5hbWUgaW4gYSBzaWduYXR1cmUgbXVzdCBiZSBhbiBJZGVudGlmaWVyLCBPYmplY3RQYXR0ZXJuIG9yIEFycmF5UGF0dGVybiwgaW5zdGVhZCBnb3QgJTBcIixcbn0pO1xuXG4vLyBEb2Vzbid0IGhhbmRsZSBcInZvaWRcIiBvciBcIm51bGxcIiBiZWNhdXNlIHRob3NlIGFyZSBrZXl3b3Jkcywgbm90IGlkZW50aWZpZXJzLlxuZnVuY3Rpb24ga2V5d29yZFR5cGVGcm9tTmFtZShcbiAgdmFsdWU6IHN0cmluZyxcbik6IE4uVHNLZXl3b3JkVHlwZVR5cGUgfCB0eXBlb2YgdW5kZWZpbmVkIHtcbiAgc3dpdGNoICh2YWx1ZSkge1xuICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgIHJldHVybiBcIlRTQW55S2V5d29yZFwiO1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gXCJUU0Jvb2xlYW5LZXl3b3JkXCI7XG4gICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgcmV0dXJuIFwiVFNCaWdJbnRLZXl3b3JkXCI7XG4gICAgY2FzZSBcIm5ldmVyXCI6XG4gICAgICByZXR1cm4gXCJUU05ldmVyS2V5d29yZFwiO1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiBcIlRTTnVtYmVyS2V5d29yZFwiO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIHJldHVybiBcIlRTT2JqZWN0S2V5d29yZFwiO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBcIlRTU3RyaW5nS2V5d29yZFwiO1xuICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIHJldHVybiBcIlRTU3ltYm9sS2V5d29yZFwiO1xuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiBcIlRTVW5kZWZpbmVkS2V5d29yZFwiO1xuICAgIGNhc2UgXCJ1bmtub3duXCI6XG4gICAgICByZXR1cm4gXCJUU1Vua25vd25LZXl3b3JkXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKHN1cGVyQ2xhc3M6IENsYXNzPFBhcnNlcj4pOiBDbGFzczxQYXJzZXI+ID0+XG4gIGNsYXNzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgZ2V0U2NvcGVIYW5kbGVyKCk6IENsYXNzPFR5cGVTY3JpcHRTY29wZUhhbmRsZXI+IHtcbiAgICAgIHJldHVybiBUeXBlU2NyaXB0U2NvcGVIYW5kbGVyO1xuICAgIH1cblxuICAgIHRzSXNJZGVudGlmaWVyKCk6IGJvb2xlYW4ge1xuICAgICAgLy8gVE9ETzogYWN0dWFsbHkgYSBiaXQgbW9yZSBjb21wbGV4IGluIFR5cGVTY3JpcHQsIGJ1dCBzaG91bGRuJ3QgbWF0dGVyLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTUwMDhcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0Lm5hbWUpO1xuICAgIH1cblxuICAgIHRzTmV4dFRva2VuQ2FuRm9sbG93TW9kaWZpZXIoKSB7XG4gICAgICAvLyBOb3RlOiBUeXBlU2NyaXB0J3MgaW1wbGVtZW50YXRpb24gaXMgbXVjaCBtb3JlIGNvbXBsaWNhdGVkIGJlY2F1c2VcbiAgICAgIC8vIG1vcmUgdGhpbmdzIGFyZSBjb25zaWRlcmVkIG1vZGlmaWVycyB0aGVyZS5cbiAgICAgIC8vIFRoaXMgaW1wbGVtZW50YXRpb24gb25seSBoYW5kbGVzIG1vZGlmaWVycyBub3QgaGFuZGxlZCBieSBAYmFiZWwvcGFyc2VyIGl0c2VsZi4gQW5kIFwic3RhdGljXCIuXG4gICAgICAvLyBUT0RPOiBXb3VsZCBiZSBuaWNlIHRvIGF2b2lkIGxvb2thaGVhZC4gV2FudCBhIGhhc0xpbmVCcmVha1VwTmV4dCgpIG1ldGhvZC4uLlxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSAmJlxuICAgICAgICAhdGhpcy5tYXRjaCh0dC5wYXJlbkwpICYmXG4gICAgICAgICF0aGlzLm1hdGNoKHR0LnBhcmVuUikgJiZcbiAgICAgICAgIXRoaXMubWF0Y2godHQuY29sb24pICYmXG4gICAgICAgICF0aGlzLm1hdGNoKHR0LmVxKSAmJlxuICAgICAgICAhdGhpcy5tYXRjaCh0dC5xdWVzdGlvbikgJiZcbiAgICAgICAgIXRoaXMubWF0Y2godHQuYmFuZylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqIFBhcnNlcyBhIG1vZGlmaWVyIG1hdGNoaW5nIG9uZSB0aGUgZ2l2ZW4gbW9kaWZpZXIgbmFtZXMuICovXG4gICAgdHNQYXJzZU1vZGlmaWVyPFQ6IFRzTW9kaWZpZXI+KGFsbG93ZWRNb2RpZmllcnM6IFRbXSk6ID9UIHtcbiAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5uYW1lKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtb2RpZmllciA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICBpZiAoXG4gICAgICAgIGFsbG93ZWRNb2RpZmllcnMuaW5kZXhPZihtb2RpZmllcikgIT09IC0xICYmXG4gICAgICAgIHRoaXMudHNUcnlQYXJzZSh0aGlzLnRzTmV4dFRva2VuQ2FuRm9sbG93TW9kaWZpZXIuYmluZCh0aGlzKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbW9kaWZpZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKiBQYXJzZXMgYSBsaXN0IG9mIG1vZGlmaWVycywgaW4gYW55IG9yZGVyLlxuICAgICAqICBJZiB5b3UgbmVlZCBhIHNwZWNpZmljIG9yZGVyLCB5b3UgbXVzdCBjYWxsIHRoaXMgZnVuY3Rpb24gbXVsdGlwbGUgdGltZXM6XG4gICAgICogICAgdGhpcy50c1BhcnNlTW9kaWZpZXJzKG5vZGUsIFtcInB1YmxpY1wiXSk7XG4gICAgICogICAgdGhpcy50c1BhcnNlTW9kaWZpZXJzKG5vZGUsIFtcImFic3RyYWN0XCIsIFwicmVhZG9ubHlcIl0pO1xuICAgICAqL1xuICAgIHRzUGFyc2VNb2RpZmllcnM8VDogVHNNb2RpZmllcj4oXG4gICAgICBtb2RpZmllZDogeyBba2V5OiBUc01vZGlmaWVyXTogP3RydWUgfSxcbiAgICAgIGFsbG93ZWRNb2RpZmllcnM6IFRbXSxcbiAgICApOiB2b2lkIHtcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICBjb25zdCBtb2RpZmllcjogP1QgPSB0aGlzLnRzUGFyc2VNb2RpZmllcihhbGxvd2VkTW9kaWZpZXJzKTtcblxuICAgICAgICBpZiAoIW1vZGlmaWVyKSBicmVhaztcblxuICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kaWZpZWQsIG1vZGlmaWVyKSkge1xuICAgICAgICAgIHRoaXMucmFpc2Uoc3RhcnRQb3MsIFRTRXJyb3JzLkR1cGxpY2F0ZU1vZGlmaWVyLCBtb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgICAgbW9kaWZpZWRbbW9kaWZpZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c0lzTGlzdFRlcm1pbmF0b3Ioa2luZDogUGFyc2luZ0NvbnRleHQpOiBib29sZWFuIHtcbiAgICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICBjYXNlIFwiRW51bU1lbWJlcnNcIjpcbiAgICAgICAgY2FzZSBcIlR5cGVNZW1iZXJzXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2godHQuYnJhY2VSKTtcbiAgICAgICAgY2FzZSBcIkhlcml0YWdlQ2xhdXNlRWxlbWVudFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0LmJyYWNlTCk7XG4gICAgICAgIGNhc2UgXCJUdXBsZUVsZW1lbnRUeXBlc1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0LmJyYWNrZXRSKTtcbiAgICAgICAgY2FzZSBcIlR5cGVQYXJhbWV0ZXJzT3JBcmd1bWVudHNcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5pc1JlbGF0aW9uYWwoXCI+XCIpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlYWNoYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlTGlzdDxUOiBOLk5vZGU+KGtpbmQ6IFBhcnNpbmdDb250ZXh0LCBwYXJzZUVsZW1lbnQ6ICgpID0+IFQpOiBUW10ge1xuICAgICAgY29uc3QgcmVzdWx0OiBUW10gPSBbXTtcbiAgICAgIHdoaWxlICghdGhpcy50c0lzTGlzdFRlcm1pbmF0b3Ioa2luZCkpIHtcbiAgICAgICAgLy8gU2tpcHBpbmcgXCJwYXJzZUxpc3RFbGVtZW50XCIgZnJvbSB0aGUgVFMgc291cmNlIHNpbmNlIHRoYXQncyBqdXN0IGZvciBlcnJvciBoYW5kbGluZy5cbiAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VFbGVtZW50KCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0c1BhcnNlRGVsaW1pdGVkTGlzdDxUOiBOLk5vZGU+KFxuICAgICAga2luZDogUGFyc2luZ0NvbnRleHQsXG4gICAgICBwYXJzZUVsZW1lbnQ6ICgpID0+IFQsXG4gICAgKTogVFtdIHtcbiAgICAgIHJldHVybiBub25OdWxsKFxuICAgICAgICB0aGlzLnRzUGFyc2VEZWxpbWl0ZWRMaXN0V29ya2VyKFxuICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgcGFyc2VFbGVtZW50LFxuICAgICAgICAgIC8qIGV4cGVjdFN1Y2Nlc3MgKi8gdHJ1ZSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgIWV4cGVjdFN1Y2Nlc3MsIHJldHVybnMgdW5kZWZpbmVkIGluc3RlYWQgb2YgZmFpbGluZyB0byBwYXJzZS5cbiAgICAgKiBJZiBleHBlY3RTdWNjZXNzLCBwYXJzZUVsZW1lbnQgc2hvdWxkIGFsd2F5cyByZXR1cm4gYSBkZWZpbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIHRzUGFyc2VEZWxpbWl0ZWRMaXN0V29ya2VyPFQ6IE4uTm9kZT4oXG4gICAgICBraW5kOiBQYXJzaW5nQ29udGV4dCxcbiAgICAgIHBhcnNlRWxlbWVudDogKCkgPT4gP1QsXG4gICAgICBleHBlY3RTdWNjZXNzOiBib29sZWFuLFxuICAgICk6ID8oVFtdKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICg7Oykge1xuICAgICAgICBpZiAodGhpcy50c0lzTGlzdFRlcm1pbmF0b3Ioa2luZCkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBwYXJzZUVsZW1lbnQoKTtcbiAgICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZWF0KHR0LmNvbW1hKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHNJc0xpc3RUZXJtaW5hdG9yKGtpbmQpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwZWN0U3VjY2Vzcykge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCBmYWlsIHdpdGggYW4gZXJyb3IgYWJvdXQgYSBtaXNzaW5nIGNvbW1hXG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdHNQYXJzZUJyYWNrZXRlZExpc3Q8VDogTi5Ob2RlPihcbiAgICAgIGtpbmQ6IFBhcnNpbmdDb250ZXh0LFxuICAgICAgcGFyc2VFbGVtZW50OiAoKSA9PiBULFxuICAgICAgYnJhY2tldDogYm9vbGVhbixcbiAgICAgIHNraXBGaXJzdFRva2VuOiBib29sZWFuLFxuICAgICk6IFRbXSB7XG4gICAgICBpZiAoIXNraXBGaXJzdFRva2VuKSB7XG4gICAgICAgIGlmIChicmFja2V0KSB7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldEwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXhwZWN0UmVsYXRpb25hbChcIjxcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50c1BhcnNlRGVsaW1pdGVkTGlzdChraW5kLCBwYXJzZUVsZW1lbnQpO1xuXG4gICAgICBpZiAoYnJhY2tldCkge1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV4cGVjdFJlbGF0aW9uYWwoXCI+XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHRzUGFyc2VJbXBvcnRUeXBlKCk6IE4uVHNJbXBvcnRUeXBlIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNJbXBvcnRUeXBlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0Ll9pbXBvcnQpO1xuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5MKTtcbiAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5zdHJpbmcpKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgVFNFcnJvcnMuVW5zdXBwb3J0ZWRJbXBvcnRUeXBlQXJndW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgY29tcGF0aWJpbGl0eSB0byBlc3RyZWUgd2UgY2Fubm90IGNhbGwgcGFyc2VMaXRlcmFsIGRpcmVjdGx5IGhlcmVcbiAgICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG5cbiAgICAgIGlmICh0aGlzLmVhdCh0dC5kb3QpKSB7XG4gICAgICAgIG5vZGUucXVhbGlmaWVyID0gdGhpcy50c1BhcnNlRW50aXR5TmFtZSgvKiBhbGxvd1Jlc2VydmVkV29yZHMgKi8gdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLnRzUGFyc2VUeXBlQXJndW1lbnRzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNJbXBvcnRUeXBlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VFbnRpdHlOYW1lKGFsbG93UmVzZXJ2ZWRXb3JkczogYm9vbGVhbik6IE4uVHNFbnRpdHlOYW1lIHtcbiAgICAgIGxldCBlbnRpdHk6IE4uVHNFbnRpdHlOYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIHdoaWxlICh0aGlzLmVhdCh0dC5kb3QpKSB7XG4gICAgICAgIGNvbnN0IG5vZGU6IE4uVHNRdWFsaWZpZWROYW1lID0gdGhpcy5zdGFydE5vZGVBdE5vZGUoZW50aXR5KTtcbiAgICAgICAgbm9kZS5sZWZ0ID0gZW50aXR5O1xuICAgICAgICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoYWxsb3dSZXNlcnZlZFdvcmRzKTtcbiAgICAgICAgZW50aXR5ID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNRdWFsaWZpZWROYW1lXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZVJlZmVyZW5jZSgpOiBOLlRzVHlwZVJlZmVyZW5jZSB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzVHlwZVJlZmVyZW5jZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLnR5cGVOYW1lID0gdGhpcy50c1BhcnNlRW50aXR5TmFtZSgvKiBhbGxvd1Jlc2VydmVkV29yZHMgKi8gZmFsc2UpO1xuICAgICAgaWYgKCF0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpICYmIHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1BhcnNlVHlwZUFyZ3VtZW50cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTVHlwZVJlZmVyZW5jZVwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVGhpc1R5cGVQcmVkaWNhdGUobGhzOiBOLlRzVGhpc1R5cGUpOiBOLlRzVHlwZVByZWRpY2F0ZSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUeXBlUHJlZGljYXRlID0gdGhpcy5zdGFydE5vZGVBdE5vZGUobGhzKTtcbiAgICAgIG5vZGUucGFyYW1ldGVyTmFtZSA9IGxocztcbiAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0aGlzLnRzUGFyc2VUeXBlQW5ub3RhdGlvbigvKiBlYXRDb2xvbiAqLyBmYWxzZSk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNUeXBlUHJlZGljYXRlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VUaGlzVHlwZU5vZGUoKTogTi5Uc1RoaXNUeXBlIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUaGlzVHlwZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1RoaXNUeXBlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlUXVlcnkoKTogTi5Uc1R5cGVRdWVyeSB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzVHlwZVF1ZXJ5ID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0Ll90eXBlb2YpO1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuX2ltcG9ydCkpIHtcbiAgICAgICAgbm9kZS5leHByTmFtZSA9IHRoaXMudHNQYXJzZUltcG9ydFR5cGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuZXhwck5hbWUgPSB0aGlzLnRzUGFyc2VFbnRpdHlOYW1lKC8qIGFsbG93UmVzZXJ2ZWRXb3JkcyAqLyB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1R5cGVRdWVyeVwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZVBhcmFtZXRlcigpOiBOLlRzVHlwZVBhcmFtZXRlciB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzVHlwZVBhcmFtZXRlciA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLm5hbWUgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUobm9kZS5zdGFydCk7XG4gICAgICBub2RlLmNvbnN0cmFpbnQgPSB0aGlzLnRzRWF0VGhlblBhcnNlVHlwZSh0dC5fZXh0ZW5kcyk7XG4gICAgICBub2RlLmRlZmF1bHQgPSB0aGlzLnRzRWF0VGhlblBhcnNlVHlwZSh0dC5lcSk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNUeXBlUGFyYW1ldGVyXCIpO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VUeXBlUGFyYW1ldGVycygpOiA/Ti5Uc1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbiB7XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VUeXBlUGFyYW1ldGVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlUGFyYW1ldGVycygpIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpIHx8IHRoaXMubWF0Y2godHQuanN4VGFnU3RhcnQpKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICB9XG5cbiAgICAgIG5vZGUucGFyYW1zID0gdGhpcy50c1BhcnNlQnJhY2tldGVkTGlzdChcbiAgICAgICAgXCJUeXBlUGFyYW1ldGVyc09yQXJndW1lbnRzXCIsXG4gICAgICAgIHRoaXMudHNQYXJzZVR5cGVQYXJhbWV0ZXIuYmluZCh0aGlzKSxcbiAgICAgICAgLyogYnJhY2tldCAqLyBmYWxzZSxcbiAgICAgICAgLyogc2tpcEZpcnN0VG9rZW4gKi8gdHJ1ZSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdHNUcnlOZXh0UGFyc2VDb25zdGFudENvbnRleHQoKTogP04uVHNUeXBlUmVmZXJlbmNlIHtcbiAgICAgIGlmICh0aGlzLmxvb2thaGVhZCgpLnR5cGUgPT09IHR0Ll9jb25zdCkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIE5vdGU6IEluIFR5cGVTY3JpcHQgaW1wbGVtZW50YXRpb24gd2UgbXVzdCBwcm92aWRlIGB5aWVsZENvbnRleHRgIGFuZCBgYXdhaXRDb250ZXh0YCxcbiAgICAvLyBidXQgaGVyZSBpdCdzIGFsd2F5cyBmYWxzZSwgYmVjYXVzZSB0aGlzIGlzIG9ubHkgdXNlZCBmb3IgdHlwZXMuXG4gICAgdHNGaWxsU2lnbmF0dXJlKFxuICAgICAgcmV0dXJuVG9rZW46IFRva2VuVHlwZSxcbiAgICAgIHNpZ25hdHVyZTogTi5Uc1NpZ25hdHVyZURlY2xhcmF0aW9uLFxuICAgICk6IHZvaWQge1xuICAgICAgLy8gQXJyb3cgZm5zICptdXN0KiBoYXZlIHJldHVybiB0b2tlbiAoYD0+YCkuIE5vcm1hbCBmdW5jdGlvbnMgY2FuIG9taXQgaXQuXG4gICAgICBjb25zdCByZXR1cm5Ub2tlblJlcXVpcmVkID0gcmV0dXJuVG9rZW4gPT09IHR0LmFycm93O1xuICAgICAgc2lnbmF0dXJlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1RyeVBhcnNlVHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTCk7XG4gICAgICBzaWduYXR1cmUucGFyYW1ldGVycyA9IHRoaXMudHNQYXJzZUJpbmRpbmdMaXN0Rm9yU2lnbmF0dXJlKCk7XG4gICAgICBpZiAocmV0dXJuVG9rZW5SZXF1aXJlZCkge1xuICAgICAgICBzaWduYXR1cmUudHlwZUFubm90YXRpb24gPSB0aGlzLnRzUGFyc2VUeXBlT3JUeXBlUHJlZGljYXRlQW5ub3RhdGlvbihcbiAgICAgICAgICByZXR1cm5Ub2tlbixcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaChyZXR1cm5Ub2tlbikpIHtcbiAgICAgICAgc2lnbmF0dXJlLnR5cGVBbm5vdGF0aW9uID0gdGhpcy50c1BhcnNlVHlwZU9yVHlwZVByZWRpY2F0ZUFubm90YXRpb24oXG4gICAgICAgICAgcmV0dXJuVG9rZW4sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHNQYXJzZUJpbmRpbmdMaXN0Rm9yU2lnbmF0dXJlKCk6ICRSZWFkT25seUFycmF5PFxuICAgICAgTi5JZGVudGlmaWVyIHwgTi5SZXN0RWxlbWVudCB8IE4uT2JqZWN0UGF0dGVybiB8IE4uQXJyYXlQYXR0ZXJuLFxuICAgID4ge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0dC5wYXJlblIsIGNoYXJDb2Rlcy5yaWdodFBhcmVudGhlc2lzKS5tYXAoXG4gICAgICAgIHBhdHRlcm4gPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBhdHRlcm4udHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiZcbiAgICAgICAgICAgIHBhdHRlcm4udHlwZSAhPT0gXCJSZXN0RWxlbWVudFwiICYmXG4gICAgICAgICAgICBwYXR0ZXJuLnR5cGUgIT09IFwiT2JqZWN0UGF0dGVyblwiICYmXG4gICAgICAgICAgICBwYXR0ZXJuLnR5cGUgIT09IFwiQXJyYXlQYXR0ZXJuXCJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIHBhdHRlcm4uc3RhcnQsXG4gICAgICAgICAgICAgIFRTRXJyb3JzLlVuc3VwcG9ydGVkU2lnbmF0dXJlUGFyYW1ldGVyS2luZCxcbiAgICAgICAgICAgICAgcGF0dGVybi50eXBlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChwYXR0ZXJuOiBhbnkpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZU1lbWJlclNlbWljb2xvbigpOiB2b2lkIHtcbiAgICAgIGlmICghdGhpcy5lYXQodHQuY29tbWEpKSB7XG4gICAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHNQYXJzZVNpZ25hdHVyZU1lbWJlcihcbiAgICAgIGtpbmQ6IFwiVFNDYWxsU2lnbmF0dXJlRGVjbGFyYXRpb25cIiB8IFwiVFNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvblwiLFxuICAgICAgbm9kZTogTi5Uc0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvbiB8IE4uVHNDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvbixcbiAgICApOiBOLlRzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uIHwgTi5Uc0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uIHtcbiAgICAgIHRoaXMudHNGaWxsU2lnbmF0dXJlKHR0LmNvbG9uLCBub2RlKTtcbiAgICAgIHRoaXMudHNQYXJzZVR5cGVNZW1iZXJTZW1pY29sb24oKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwga2luZCk7XG4gICAgfVxuXG4gICAgdHNJc1VuYW1iaWd1b3VzbHlJbmRleFNpZ25hdHVyZSgpIHtcbiAgICAgIHRoaXMubmV4dCgpOyAvLyBTa2lwICd7J1xuICAgICAgcmV0dXJuIHRoaXMuZWF0KHR0Lm5hbWUpICYmIHRoaXMubWF0Y2godHQuY29sb24pO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VJbmRleFNpZ25hdHVyZShub2RlOiBOLk5vZGUpOiA/Ti5Uc0luZGV4U2lnbmF0dXJlIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0LmJyYWNrZXRMKSAmJlxuICAgICAgICAgIHRoaXMudHNMb29rQWhlYWQodGhpcy50c0lzVW5hbWJpZ3VvdXNseUluZGV4U2lnbmF0dXJlLmJpbmQodGhpcykpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0TCk7XG4gICAgICBjb25zdCBpZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICBpZC50eXBlQW5ub3RhdGlvbiA9IHRoaXMudHNQYXJzZVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICB0aGlzLnJlc2V0RW5kTG9jYXRpb24oaWQpOyAvLyBzZXQgZW5kIHBvc2l0aW9uIHRvIGVuZCBvZiB0eXBlXG5cbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNrZXRSKTtcbiAgICAgIG5vZGUucGFyYW1ldGVycyA9IFtpZF07XG5cbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnRzVHJ5UGFyc2VUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgaWYgKHR5cGUpIG5vZGUudHlwZUFubm90YXRpb24gPSB0eXBlO1xuICAgICAgdGhpcy50c1BhcnNlVHlwZU1lbWJlclNlbWljb2xvbigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTSW5kZXhTaWduYXR1cmVcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZVByb3BlcnR5T3JNZXRob2RTaWduYXR1cmUoXG4gICAgICBub2RlOiBOLlRzUHJvcGVydHlTaWduYXR1cmUgfCBOLlRzTWV0aG9kU2lnbmF0dXJlLFxuICAgICAgcmVhZG9ubHk6IGJvb2xlYW4sXG4gICAgKTogTi5Uc1Byb3BlcnR5U2lnbmF0dXJlIHwgTi5Uc01ldGhvZFNpZ25hdHVyZSB7XG4gICAgICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSBub2RlLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgIGNvbnN0IG5vZGVBbnk6IGFueSA9IG5vZGU7XG5cbiAgICAgIGlmICghcmVhZG9ubHkgJiYgKHRoaXMubWF0Y2godHQucGFyZW5MKSB8fCB0aGlzLmlzUmVsYXRpb25hbChcIjxcIikpKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZDogTi5Uc01ldGhvZFNpZ25hdHVyZSA9IG5vZGVBbnk7XG4gICAgICAgIHRoaXMudHNGaWxsU2lnbmF0dXJlKHR0LmNvbG9uLCBtZXRob2QpO1xuICAgICAgICB0aGlzLnRzUGFyc2VUeXBlTWVtYmVyU2VtaWNvbG9uKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobWV0aG9kLCBcIlRTTWV0aG9kU2lnbmF0dXJlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJvcGVydHk6IE4uVHNQcm9wZXJ0eVNpZ25hdHVyZSA9IG5vZGVBbnk7XG4gICAgICAgIGlmIChyZWFkb25seSkgcHJvcGVydHkucmVhZG9ubHkgPSB0cnVlO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50c1RyeVBhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgICAgaWYgKHR5cGUpIHByb3BlcnR5LnR5cGVBbm5vdGF0aW9uID0gdHlwZTtcbiAgICAgICAgdGhpcy50c1BhcnNlVHlwZU1lbWJlclNlbWljb2xvbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3BlcnR5LCBcIlRTUHJvcGVydHlTaWduYXR1cmVcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHNQYXJzZVR5cGVNZW1iZXIoKTogTi5Uc1R5cGVFbGVtZW50IHtcbiAgICAgIGNvbnN0IG5vZGU6IGFueSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuTCkgfHwgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VTaWduYXR1cmVNZW1iZXIoXCJUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvblwiLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuX25ldykpIHtcbiAgICAgICAgY29uc3QgaWQ6IE4uSWRlbnRpZmllciA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5wYXJlbkwpIHx8IHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VTaWduYXR1cmVNZW1iZXIoXG4gICAgICAgICAgICBcIlRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb25cIixcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLmtleSA9IHRoaXMuY3JlYXRlSWRlbnRpZmllcihpZCwgXCJuZXdcIik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVByb3BlcnR5T3JNZXRob2RTaWduYXR1cmUobm9kZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlYWRvbmx5ID0gISF0aGlzLnRzUGFyc2VNb2RpZmllcihbXCJyZWFkb25seVwiXSk7XG5cbiAgICAgIGNvbnN0IGlkeCA9IHRoaXMudHNUcnlQYXJzZUluZGV4U2lnbmF0dXJlKG5vZGUpO1xuICAgICAgaWYgKGlkeCkge1xuICAgICAgICBpZiAocmVhZG9ubHkpIG5vZGUucmVhZG9ubHkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKG5vZGUsIC8qIGlzUHJpdmF0ZU5hbWVBbGxvd2VkICovIGZhbHNlKTtcbiAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VQcm9wZXJ0eU9yTWV0aG9kU2lnbmF0dXJlKG5vZGUsIHJlYWRvbmx5KTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZUxpdGVyYWwoKTogTi5Uc1R5cGVMaXRlcmFsIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUeXBlTGl0ZXJhbCA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLm1lbWJlcnMgPSB0aGlzLnRzUGFyc2VPYmplY3RUeXBlTWVtYmVycygpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTVHlwZUxpdGVyYWxcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZU9iamVjdFR5cGVNZW1iZXJzKCk6ICRSZWFkT25seUFycmF5PE4uVHNUeXBlRWxlbWVudD4ge1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VMKTtcbiAgICAgIGNvbnN0IG1lbWJlcnMgPSB0aGlzLnRzUGFyc2VMaXN0KFxuICAgICAgICBcIlR5cGVNZW1iZXJzXCIsXG4gICAgICAgIHRoaXMudHNQYXJzZVR5cGVNZW1iZXIuYmluZCh0aGlzKSxcbiAgICAgICk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZVIpO1xuICAgICAgcmV0dXJuIG1lbWJlcnM7XG4gICAgfVxuXG4gICAgdHNJc1N0YXJ0T2ZNYXBwZWRUeXBlKCk6IGJvb2xlYW4ge1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBpZiAodGhpcy5lYXQodHQucGx1c01pbikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb250ZXh0dWFsKFwicmVhZG9ubHlcIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJyZWFkb25seVwiKSkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5icmFja2V0TCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBpZiAoIXRoaXMudHNJc0lkZW50aWZpZXIoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0Ll9pbik7XG4gICAgfVxuXG4gICAgdHNQYXJzZU1hcHBlZFR5cGVQYXJhbWV0ZXIoKTogTi5Uc1R5cGVQYXJhbWV0ZXIge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc1R5cGVQYXJhbWV0ZXIgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS5uYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKG5vZGUuc3RhcnQpO1xuICAgICAgbm9kZS5jb25zdHJhaW50ID0gdGhpcy50c0V4cGVjdFRoZW5QYXJzZVR5cGUodHQuX2luKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1R5cGVQYXJhbWV0ZXJcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZU1hcHBlZFR5cGUoKTogTi5Uc01hcHBlZFR5cGUge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc01hcHBlZFR5cGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wbHVzTWluKSkge1xuICAgICAgICBub2RlLnJlYWRvbmx5ID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcInJlYWRvbmx5XCIpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmVhdENvbnRleHR1YWwoXCJyZWFkb25seVwiKSkge1xuICAgICAgICBub2RlLnJlYWRvbmx5ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldEwpO1xuICAgICAgbm9kZS50eXBlUGFyYW1ldGVyID0gdGhpcy50c1BhcnNlTWFwcGVkVHlwZVBhcmFtZXRlcigpO1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldFIpO1xuXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wbHVzTWluKSkge1xuICAgICAgICBub2RlLm9wdGlvbmFsID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LnF1ZXN0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XG4gICAgICAgIG5vZGUub3B0aW9uYWwgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2RlLnR5cGVBbm5vdGF0aW9uID0gdGhpcy50c1RyeVBhcnNlVHlwZSgpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU01hcHBlZFR5cGVcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZVR1cGxlVHlwZSgpOiBOLlRzVHVwbGVUeXBlIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUdXBsZVR5cGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS5lbGVtZW50VHlwZXMgPSB0aGlzLnRzUGFyc2VCcmFja2V0ZWRMaXN0KFxuICAgICAgICBcIlR1cGxlRWxlbWVudFR5cGVzXCIsXG4gICAgICAgIHRoaXMudHNQYXJzZVR1cGxlRWxlbWVudFR5cGUuYmluZCh0aGlzKSxcbiAgICAgICAgLyogYnJhY2tldCAqLyB0cnVlLFxuICAgICAgICAvKiBza2lwRmlyc3RUb2tlbiAqLyBmYWxzZSxcbiAgICAgICk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHRoZSBlbGVtZW50VHlwZXMgdG8gZW5zdXJlIHRoYXQgbm8gbWFuZGF0b3J5IGVsZW1lbnRzXG4gICAgICAvLyBmb2xsb3cgb3B0aW9uYWwgZWxlbWVudHNcbiAgICAgIGxldCBzZWVuT3B0aW9uYWxFbGVtZW50ID0gZmFsc2U7XG4gICAgICBsZXQgbGFiZWxlZEVsZW1lbnRzID0gbnVsbDtcbiAgICAgIG5vZGUuZWxlbWVudFR5cGVzLmZvckVhY2goZWxlbWVudE5vZGUgPT4ge1xuICAgICAgICBsZXQgeyB0eXBlIH0gPSBlbGVtZW50Tm9kZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgc2Vlbk9wdGlvbmFsRWxlbWVudCAmJlxuICAgICAgICAgIHR5cGUgIT09IFwiVFNSZXN0VHlwZVwiICYmXG4gICAgICAgICAgdHlwZSAhPT0gXCJUU09wdGlvbmFsVHlwZVwiICYmXG4gICAgICAgICAgISh0eXBlID09PSBcIlRTTmFtZWRUdXBsZU1lbWJlclwiICYmIGVsZW1lbnROb2RlLm9wdGlvbmFsKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKGVsZW1lbnROb2RlLnN0YXJ0LCBUU0Vycm9ycy5PcHRpb25hbFR5cGVCZWZvcmVSZXF1aXJlZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB8fD1cbiAgICAgICAgc2Vlbk9wdGlvbmFsRWxlbWVudCA9XG4gICAgICAgICAgc2Vlbk9wdGlvbmFsRWxlbWVudCB8fFxuICAgICAgICAgICh0eXBlID09PSBcIlRTTmFtZWRUdXBsZU1lbWJlclwiICYmIGVsZW1lbnROb2RlLm9wdGlvbmFsKSB8fFxuICAgICAgICAgIHR5cGUgPT09IFwiVFNPcHRpb25hbFR5cGVcIjtcblxuICAgICAgICAvLyBXaGVuIGNoZWNraW5nIGxhYmVscywgY2hlY2sgdGhlIGFyZ3VtZW50IG9mIHRoZSBzcHJlYWQgb3BlcmF0b3JcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiVFNSZXN0VHlwZVwiKSB7XG4gICAgICAgICAgZWxlbWVudE5vZGUgPSBlbGVtZW50Tm9kZS50eXBlQW5ub3RhdGlvbjtcbiAgICAgICAgICB0eXBlID0gZWxlbWVudE5vZGUudHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzTGFiZWxlZCA9IHR5cGUgPT09IFwiVFNOYW1lZFR1cGxlTWVtYmVyXCI7XG4gICAgICAgIC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0ID8/PVxuICAgICAgICBsYWJlbGVkRWxlbWVudHMgPSBsYWJlbGVkRWxlbWVudHMgPz8gaXNMYWJlbGVkO1xuICAgICAgICBpZiAobGFiZWxlZEVsZW1lbnRzICE9PSBpc0xhYmVsZWQpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUuc3RhcnQsXG4gICAgICAgICAgICBUU0Vycm9ycy5NaXhlZExhYmVsZWRBbmRVbmxhYmVsZWRFbGVtZW50cyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTVHVwbGVUeXBlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VUdXBsZUVsZW1lbnRUeXBlKCk6IE4uVHNUeXBlIHwgTi5Uc05hbWVkVHVwbGVNZW1iZXIge1xuICAgICAgLy8gcGFyc2VzIGAuLi5Uc1R5cGVbXWBcblxuICAgICAgY29uc3QgeyBzdGFydDogc3RhcnRQb3MsIHN0YXJ0TG9jIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBjb25zdCByZXN0ID0gdGhpcy5lYXQodHQuZWxsaXBzaXMpO1xuICAgICAgbGV0IHR5cGUgPSB0aGlzLnRzUGFyc2VUeXBlKCk7XG4gICAgICBjb25zdCBvcHRpb25hbCA9IHRoaXMuZWF0KHR0LnF1ZXN0aW9uKTtcbiAgICAgIGNvbnN0IGxhYmVsZWQgPSB0aGlzLmVhdCh0dC5jb2xvbik7XG5cbiAgICAgIGlmIChsYWJlbGVkKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsZWROb2RlOiBOLlRzTmFtZWRUdXBsZU1lbWJlciA9IHRoaXMuc3RhcnROb2RlQXROb2RlKHR5cGUpO1xuICAgICAgICBsYWJlbGVkTm9kZS5vcHRpb25hbCA9IG9wdGlvbmFsO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlLnR5cGUgPT09IFwiVFNUeXBlUmVmZXJlbmNlXCIgJiZcbiAgICAgICAgICAhdHlwZS50eXBlUGFyYW1ldGVycyAmJlxuICAgICAgICAgIHR5cGUudHlwZU5hbWUudHlwZSA9PT0gXCJJZGVudGlmaWVyXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgbGFiZWxlZE5vZGUubGFiZWwgPSAodHlwZS50eXBlTmFtZTogTi5JZGVudGlmaWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHR5cGUuc3RhcnQsIFRTRXJyb3JzLkludmFsaWRUdXBsZU1lbWJlckxhYmVsKTtcbiAgICAgICAgICAvLyBUaGlzIHByb2R1Y2VzIGFuIGludmFsaWQgQVNULCBidXQgYXQgbGVhc3Qgd2UgZG9uJ3QgZHJvcFxuICAgICAgICAgIC8vIG5vZGVzIHJlcHJlc2VudGluZyB0aGUgaW52YWxpZCBzb3VyY2UuXG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICBsYWJlbGVkTm9kZS5sYWJlbCA9IHR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBsYWJlbGVkTm9kZS5lbGVtZW50VHlwZSA9IHRoaXMudHNQYXJzZVR5cGUoKTtcbiAgICAgICAgdHlwZSA9IHRoaXMuZmluaXNoTm9kZShsYWJlbGVkTm9kZSwgXCJUU05hbWVkVHVwbGVNZW1iZXJcIik7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbmFsVHlwZU5vZGU6IE4uVHNPcHRpb25hbFR5cGUgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZSh0eXBlKTtcbiAgICAgICAgb3B0aW9uYWxUeXBlTm9kZS50eXBlQW5ub3RhdGlvbiA9IHR5cGU7XG4gICAgICAgIHR5cGUgPSB0aGlzLmZpbmlzaE5vZGUob3B0aW9uYWxUeXBlTm9kZSwgXCJUU09wdGlvbmFsVHlwZVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3QpIHtcbiAgICAgICAgY29uc3QgcmVzdE5vZGU6IE4uVHNSZXN0VHlwZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgcmVzdE5vZGUudHlwZUFubm90YXRpb24gPSB0eXBlO1xuICAgICAgICB0eXBlID0gdGhpcy5maW5pc2hOb2RlKHJlc3ROb2RlLCBcIlRTUmVzdFR5cGVcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIHRzUGFyc2VQYXJlbnRoZXNpemVkVHlwZSgpOiBOLlRzUGFyZW50aGVzaXplZFR5cGUge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpO1xuICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IHRoaXMudHNQYXJzZVR5cGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNQYXJlbnRoZXNpemVkVHlwZVwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlRnVuY3Rpb25PckNvbnN0cnVjdG9yVHlwZShcbiAgICAgIHR5cGU6IFwiVFNGdW5jdGlvblR5cGVcIiB8IFwiVFNDb25zdHJ1Y3RvclR5cGVcIixcbiAgICApOiBOLlRzRnVuY3Rpb25PckNvbnN0cnVjdG9yVHlwZSB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzRnVuY3Rpb25PckNvbnN0cnVjdG9yVHlwZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBpZiAodHlwZSA9PT0gXCJUU0NvbnN0cnVjdG9yVHlwZVwiKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0Ll9uZXcpO1xuICAgICAgfVxuICAgICAgdGhpcy50c0ZpbGxTaWduYXR1cmUodHQuYXJyb3csIG5vZGUpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlTGl0ZXJhbFR5cGVOb2RlKCk6IE4uVHNMaXRlcmFsVHlwZSB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzTGl0ZXJhbFR5cGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS5saXRlcmFsID0gKCgpID0+IHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIHR0Lm51bTpcbiAgICAgICAgICBjYXNlIHR0LmJpZ2ludDpcbiAgICAgICAgICBjYXNlIHR0LnN0cmluZzpcbiAgICAgICAgICBjYXNlIHR0Ll90cnVlOlxuICAgICAgICAgIGNhc2UgdHQuX2ZhbHNlOlxuICAgICAgICAgICAgLy8gRm9yIGNvbXBhdGliaWxpdHkgdG8gZXN0cmVlIHdlIGNhbm5vdCBjYWxsIHBhcnNlTGl0ZXJhbCBkaXJlY3RseSBoZXJlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTTGl0ZXJhbFR5cGVcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZVRlbXBsYXRlTGl0ZXJhbFR5cGUoKTogTi5Uc1R5cGUge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc0xpdGVyYWxUeXBlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlTm9kZSA9IHRoaXMucGFyc2VUZW1wbGF0ZShmYWxzZSk7XG4gICAgICBpZiAodGVtcGxhdGVOb2RlLmV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICB0ZW1wbGF0ZU5vZGUuZXhwcmVzc2lvbnNbMF0uc3RhcnQsXG4gICAgICAgICAgVFNFcnJvcnMuVGVtcGxhdGVUeXBlSGFzU3Vic3RpdHV0aW9uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbm9kZS5saXRlcmFsID0gdGVtcGxhdGVOb2RlO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTTGl0ZXJhbFR5cGVcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZVRoaXNUeXBlT3JUaGlzVHlwZVByZWRpY2F0ZSgpOiBOLlRzVGhpc1R5cGUgfCBOLlRzVHlwZVByZWRpY2F0ZSB7XG4gICAgICBjb25zdCB0aGlzS2V5d29yZCA9IHRoaXMudHNQYXJzZVRoaXNUeXBlTm9kZSgpO1xuICAgICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiaXNcIikgJiYgIXRoaXMuaGFzUHJlY2VkaW5nTGluZUJyZWFrKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVRoaXNUeXBlUHJlZGljYXRlKHRoaXNLZXl3b3JkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzS2V5d29yZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c1BhcnNlTm9uQXJyYXlUeXBlKCk6IE4uVHNUeXBlIHtcbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHQubmFtZTpcbiAgICAgICAgY2FzZSB0dC5fdm9pZDpcbiAgICAgICAgY2FzZSB0dC5fbnVsbDoge1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLm1hdGNoKHR0Ll92b2lkKVxuICAgICAgICAgICAgPyBcIlRTVm9pZEtleXdvcmRcIlxuICAgICAgICAgICAgOiB0aGlzLm1hdGNoKHR0Ll9udWxsKVxuICAgICAgICAgICAgPyBcIlRTTnVsbEtleXdvcmRcIlxuICAgICAgICAgICAgOiBrZXl3b3JkVHlwZUZyb21OYW1lKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5sb29rYWhlYWRDaGFyQ29kZSgpICE9PSBjaGFyQ29kZXMuZG90XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlOiBOLlRzS2V5d29yZFR5cGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHQuc3RyaW5nOlxuICAgICAgICBjYXNlIHR0Lm51bTpcbiAgICAgICAgY2FzZSB0dC5iaWdpbnQ6XG4gICAgICAgIGNhc2UgdHQuX3RydWU6XG4gICAgICAgIGNhc2UgdHQuX2ZhbHNlOlxuICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VMaXRlcmFsVHlwZU5vZGUoKTtcbiAgICAgICAgY2FzZSB0dC5wbHVzTWluOlxuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlID09PSBcIi1cIikge1xuICAgICAgICAgICAgY29uc3Qgbm9kZTogTi5Uc0xpdGVyYWxUeXBlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRUb2tlbiA9IHRoaXMubG9va2FoZWFkKCk7XG4gICAgICAgICAgICBpZiAobmV4dFRva2VuLnR5cGUgIT09IHR0Lm51bSAmJiBuZXh0VG9rZW4udHlwZSAhPT0gdHQuYmlnaW50KSB7XG4gICAgICAgICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5saXRlcmFsID0gdGhpcy5wYXJzZU1heWJlVW5hcnkoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU0xpdGVyYWxUeXBlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0dC5fdGhpczpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVGhpc1R5cGVPclRoaXNUeXBlUHJlZGljYXRlKCk7XG4gICAgICAgIGNhc2UgdHQuX3R5cGVvZjpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVHlwZVF1ZXJ5KCk7XG4gICAgICAgIGNhc2UgdHQuX2ltcG9ydDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlSW1wb3J0VHlwZSgpO1xuICAgICAgICBjYXNlIHR0LmJyYWNlTDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c0xvb2tBaGVhZCh0aGlzLnRzSXNTdGFydE9mTWFwcGVkVHlwZS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgPyB0aGlzLnRzUGFyc2VNYXBwZWRUeXBlKClcbiAgICAgICAgICAgIDogdGhpcy50c1BhcnNlVHlwZUxpdGVyYWwoKTtcbiAgICAgICAgY2FzZSB0dC5icmFja2V0TDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVHVwbGVUeXBlKCk7XG4gICAgICAgIGNhc2UgdHQucGFyZW5MOlxuICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VQYXJlbnRoZXNpemVkVHlwZSgpO1xuICAgICAgICBjYXNlIHR0LmJhY2tRdW90ZTpcbiAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVGVtcGxhdGVMaXRlcmFsVHlwZSgpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlQXJyYXlUeXBlT3JIaWdoZXIoKTogTi5Uc1R5cGUge1xuICAgICAgbGV0IHR5cGUgPSB0aGlzLnRzUGFyc2VOb25BcnJheVR5cGUoKTtcbiAgICAgIHdoaWxlICghdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSAmJiB0aGlzLmVhdCh0dC5icmFja2V0TCkpIHtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuYnJhY2tldFIpKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZTogTi5Uc0FycmF5VHlwZSA9IHRoaXMuc3RhcnROb2RlQXROb2RlKHR5cGUpO1xuICAgICAgICAgIG5vZGUuZWxlbWVudFR5cGUgPSB0eXBlO1xuICAgICAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNrZXRSKTtcbiAgICAgICAgICB0eXBlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNBcnJheVR5cGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgbm9kZTogTi5Uc0luZGV4ZWRBY2Nlc3NUeXBlID0gdGhpcy5zdGFydE5vZGVBdE5vZGUodHlwZSk7XG4gICAgICAgICAgbm9kZS5vYmplY3RUeXBlID0gdHlwZTtcbiAgICAgICAgICBub2RlLmluZGV4VHlwZSA9IHRoaXMudHNQYXJzZVR5cGUoKTtcbiAgICAgICAgICB0aGlzLmV4cGVjdCh0dC5icmFja2V0Uik7XG4gICAgICAgICAgdHlwZSA9IHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTSW5kZXhlZEFjY2Vzc1R5cGVcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlT3BlcmF0b3IoXG4gICAgICBvcGVyYXRvcjogXCJrZXlvZlwiIHwgXCJ1bmlxdWVcIiB8IFwicmVhZG9ubHlcIixcbiAgICApOiBOLlRzVHlwZU9wZXJhdG9yIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNUeXBlT3BlcmF0b3IgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKG9wZXJhdG9yKTtcbiAgICAgIG5vZGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0aGlzLnRzUGFyc2VUeXBlT3BlcmF0b3JPckhpZ2hlcigpO1xuXG4gICAgICBpZiAob3BlcmF0b3IgPT09IFwicmVhZG9ubHlcIikge1xuICAgICAgICB0aGlzLnRzQ2hlY2tUeXBlQW5ub3RhdGlvbkZvclJlYWRPbmx5KG5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNUeXBlT3BlcmF0b3JcIik7XG4gICAgfVxuXG4gICAgdHNDaGVja1R5cGVBbm5vdGF0aW9uRm9yUmVhZE9ubHkobm9kZTogTi5Ob2RlKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUudHlwZUFubm90YXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiVFNUdXBsZVR5cGVcIjpcbiAgICAgICAgY2FzZSBcIlRTQXJyYXlUeXBlXCI6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgVFNFcnJvcnMuVW5leHBlY3RlZFJlYWRvbmx5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c1BhcnNlSW5mZXJUeXBlKCk6IE4uVHNJbmZlclR5cGUge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJpbmZlclwiKTtcbiAgICAgIGNvbnN0IHR5cGVQYXJhbWV0ZXIgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdHlwZVBhcmFtZXRlci5uYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKHR5cGVQYXJhbWV0ZXIuc3RhcnQpO1xuICAgICAgbm9kZS50eXBlUGFyYW1ldGVyID0gdGhpcy5maW5pc2hOb2RlKHR5cGVQYXJhbWV0ZXIsIFwiVFNUeXBlUGFyYW1ldGVyXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTSW5mZXJUeXBlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlT3BlcmF0b3JPckhpZ2hlcigpOiBOLlRzVHlwZSB7XG4gICAgICBjb25zdCBvcGVyYXRvciA9IFtcImtleW9mXCIsIFwidW5pcXVlXCIsIFwicmVhZG9ubHlcIl0uZmluZChrdyA9PlxuICAgICAgICB0aGlzLmlzQ29udGV4dHVhbChrdyksXG4gICAgICApO1xuICAgICAgcmV0dXJuIG9wZXJhdG9yXG4gICAgICAgID8gdGhpcy50c1BhcnNlVHlwZU9wZXJhdG9yKG9wZXJhdG9yKVxuICAgICAgICA6IHRoaXMuaXNDb250ZXh0dWFsKFwiaW5mZXJcIilcbiAgICAgICAgPyB0aGlzLnRzUGFyc2VJbmZlclR5cGUoKVxuICAgICAgICA6IHRoaXMudHNQYXJzZUFycmF5VHlwZU9ySGlnaGVyKCk7XG4gICAgfVxuXG4gICAgdHNQYXJzZVVuaW9uT3JJbnRlcnNlY3Rpb25UeXBlKFxuICAgICAga2luZDogXCJUU1VuaW9uVHlwZVwiIHwgXCJUU0ludGVyc2VjdGlvblR5cGVcIixcbiAgICAgIHBhcnNlQ29uc3RpdHVlbnRUeXBlOiAoKSA9PiBOLlRzVHlwZSxcbiAgICAgIG9wZXJhdG9yOiBUb2tlblR5cGUsXG4gICAgKTogTi5Uc1R5cGUge1xuICAgICAgdGhpcy5lYXQob3BlcmF0b3IpO1xuICAgICAgbGV0IHR5cGUgPSBwYXJzZUNvbnN0aXR1ZW50VHlwZSgpO1xuICAgICAgaWYgKHRoaXMubWF0Y2gob3BlcmF0b3IpKSB7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gW3R5cGVdO1xuICAgICAgICB3aGlsZSAodGhpcy5lYXQob3BlcmF0b3IpKSB7XG4gICAgICAgICAgdHlwZXMucHVzaChwYXJzZUNvbnN0aXR1ZW50VHlwZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlOiBOLlRzVW5pb25UeXBlIHwgTi5Uc0ludGVyc2VjdGlvblR5cGUgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShcbiAgICAgICAgICB0eXBlLFxuICAgICAgICApO1xuICAgICAgICBub2RlLnR5cGVzID0gdHlwZXM7XG4gICAgICAgIHR5cGUgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwga2luZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICB0c1BhcnNlSW50ZXJzZWN0aW9uVHlwZU9ySGlnaGVyKCk6IE4uVHNUeXBlIHtcbiAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VVbmlvbk9ySW50ZXJzZWN0aW9uVHlwZShcbiAgICAgICAgXCJUU0ludGVyc2VjdGlvblR5cGVcIixcbiAgICAgICAgdGhpcy50c1BhcnNlVHlwZU9wZXJhdG9yT3JIaWdoZXIuYmluZCh0aGlzKSxcbiAgICAgICAgdHQuYml0d2lzZUFORCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdHNQYXJzZVVuaW9uVHlwZU9ySGlnaGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVVuaW9uT3JJbnRlcnNlY3Rpb25UeXBlKFxuICAgICAgICBcIlRTVW5pb25UeXBlXCIsXG4gICAgICAgIHRoaXMudHNQYXJzZUludGVyc2VjdGlvblR5cGVPckhpZ2hlci5iaW5kKHRoaXMpLFxuICAgICAgICB0dC5iaXR3aXNlT1IsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRzSXNTdGFydE9mRnVuY3Rpb25UeXBlKCkge1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMubWF0Y2godHQucGFyZW5MKSAmJlxuICAgICAgICB0aGlzLnRzTG9va0FoZWFkKHRoaXMudHNJc1VuYW1iaWd1b3VzbHlTdGFydE9mRnVuY3Rpb25UeXBlLmJpbmQodGhpcykpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRzU2tpcFBhcmFtZXRlclN0YXJ0KCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQubmFtZSkgfHwgdGhpcy5tYXRjaCh0dC5fdGhpcykpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFjZUwpKSB7XG4gICAgICAgIGxldCBicmFjZVN0YWNrQ291bnRlciA9IDE7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICAgIHdoaWxlIChicmFjZVN0YWNrQ291bnRlciA+IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFjZUwpKSB7XG4gICAgICAgICAgICArK2JyYWNlU3RhY2tDb3VudGVyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5icmFjZVIpKSB7XG4gICAgICAgICAgICAtLWJyYWNlU3RhY2tDb3VudGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuYnJhY2tldEwpKSB7XG4gICAgICAgIGxldCBicmFjZVN0YWNrQ291bnRlciA9IDE7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICAgIHdoaWxlIChicmFjZVN0YWNrQ291bnRlciA+IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFja2V0TCkpIHtcbiAgICAgICAgICAgICsrYnJhY2VTdGFja0NvdW50ZXI7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoKHR0LmJyYWNrZXRSKSkge1xuICAgICAgICAgICAgLS1icmFjZVN0YWNrQ291bnRlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0c0lzVW5hbWJpZ3VvdXNseVN0YXJ0T2ZGdW5jdGlvblR5cGUoKTogYm9vbGVhbiB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuUikgfHwgdGhpcy5tYXRjaCh0dC5lbGxpcHNpcykpIHtcbiAgICAgICAgLy8gKCApXG4gICAgICAgIC8vICggLi4uXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHNTa2lwUGFyYW1ldGVyU3RhcnQoKSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5tYXRjaCh0dC5jb2xvbikgfHxcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0LmNvbW1hKSB8fFxuICAgICAgICAgIHRoaXMubWF0Y2godHQucXVlc3Rpb24pIHx8XG4gICAgICAgICAgdGhpcy5tYXRjaCh0dC5lcSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gKCB4eHggOlxuICAgICAgICAgIC8vICggeHh4ICxcbiAgICAgICAgICAvLyAoIHh4eCA/XG4gICAgICAgICAgLy8gKCB4eHggPVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuUikpIHtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5hcnJvdykpIHtcbiAgICAgICAgICAgIC8vICggeHh4ICkgPT5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlT3JUeXBlUHJlZGljYXRlQW5ub3RhdGlvbihcbiAgICAgIHJldHVyblRva2VuOiBUb2tlblR5cGUsXG4gICAgKTogTi5Uc1R5cGVBbm5vdGF0aW9uIHtcbiAgICAgIHJldHVybiB0aGlzLnRzSW5UeXBlKCgpID0+IHtcbiAgICAgICAgY29uc3QgdDogTi5Uc1R5cGVBbm5vdGF0aW9uID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5leHBlY3QocmV0dXJuVG9rZW4pO1xuXG4gICAgICAgIGNvbnN0IGFzc2VydHMgPSB0aGlzLnRzVHJ5UGFyc2UoXG4gICAgICAgICAgdGhpcy50c1BhcnNlVHlwZVByZWRpY2F0ZUFzc2VydHMuYmluZCh0aGlzKSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoYXNzZXJ0cyAmJiB0aGlzLm1hdGNoKHR0Ll90aGlzKSkge1xuICAgICAgICAgIC8vIFdoZW4gYXNzZXJ0cyBpcyBmYWxzZSwgdGhpc0tleXdvcmQgaXMgaGFuZGxlZCBieSB0c1BhcnNlTm9uQXJyYXlUeXBlXG4gICAgICAgICAgLy8gOiBhc3NlcnRzIHRoaXMgaXMgdHlwZVxuICAgICAgICAgIGxldCB0aGlzVHlwZVByZWRpY2F0ZSA9IHRoaXMudHNQYXJzZVRoaXNUeXBlT3JUaGlzVHlwZVByZWRpY2F0ZSgpO1xuICAgICAgICAgIC8vIGlmIGl0IHR1cm5zIG91dCB0byBiZSBhIGBUU1RoaXNUeXBlYCwgd3JhcCBpdCB3aXRoIGBUU1R5cGVQcmVkaWNhdGVgXG4gICAgICAgICAgLy8gOiBhc3NlcnRzIHRoaXNcbiAgICAgICAgICBpZiAodGhpc1R5cGVQcmVkaWNhdGUudHlwZSA9PT0gXCJUU1RoaXNUeXBlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGU6IE4uVHNUeXBlUHJlZGljYXRlID0gdGhpcy5zdGFydE5vZGVBdE5vZGUodCk7XG4gICAgICAgICAgICBub2RlLnBhcmFtZXRlck5hbWUgPSAodGhpc1R5cGVQcmVkaWNhdGU6IE4uVHNUaGlzVHlwZSk7XG4gICAgICAgICAgICBub2RlLmFzc2VydHMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpc1R5cGVQcmVkaWNhdGUgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1R5cGVQcmVkaWNhdGVcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICh0aGlzVHlwZVByZWRpY2F0ZTogTi5Uc1R5cGVQcmVkaWNhdGUpLmFzc2VydHMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0LnR5cGVBbm5vdGF0aW9uID0gdGhpc1R5cGVQcmVkaWNhdGU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZSh0LCBcIlRTVHlwZUFubm90YXRpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlUHJlZGljYXRlVmFyaWFibGUgPVxuICAgICAgICAgIHRoaXMudHNJc0lkZW50aWZpZXIoKSAmJlxuICAgICAgICAgIHRoaXMudHNUcnlQYXJzZSh0aGlzLnRzUGFyc2VUeXBlUHJlZGljYXRlUHJlZml4LmJpbmQodGhpcykpO1xuXG4gICAgICAgIGlmICghdHlwZVByZWRpY2F0ZVZhcmlhYmxlKSB7XG4gICAgICAgICAgaWYgKCFhc3NlcnRzKSB7XG4gICAgICAgICAgICAvLyA6IHR5cGVcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VUeXBlQW5ub3RhdGlvbigvKiBlYXRDb2xvbiAqLyBmYWxzZSwgdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgbm9kZTogTi5Uc1R5cGVQcmVkaWNhdGUgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZSh0KTtcbiAgICAgICAgICAvLyA6IGFzc2VydHMgZm9vXG4gICAgICAgICAgbm9kZS5wYXJhbWV0ZXJOYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgICBub2RlLmFzc2VydHMgPSBhc3NlcnRzO1xuICAgICAgICAgIHQudHlwZUFubm90YXRpb24gPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1R5cGVQcmVkaWNhdGVcIik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZSh0LCBcIlRTVHlwZUFubm90YXRpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyA6IGFzc2VydHMgZm9vIGlzIHR5cGVcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMudHNQYXJzZVR5cGVBbm5vdGF0aW9uKC8qIGVhdENvbG9uICovIGZhbHNlKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXROb2RlKHQpO1xuICAgICAgICBub2RlLnBhcmFtZXRlck5hbWUgPSB0eXBlUHJlZGljYXRlVmFyaWFibGU7XG4gICAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0eXBlO1xuICAgICAgICBub2RlLmFzc2VydHMgPSBhc3NlcnRzO1xuICAgICAgICB0LnR5cGVBbm5vdGF0aW9uID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNUeXBlUHJlZGljYXRlXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHQsIFwiVFNUeXBlQW5ub3RhdGlvblwiKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VUeXBlT3JUeXBlUHJlZGljYXRlQW5ub3RhdGlvbigpOiA/Ti5Uc1R5cGVBbm5vdGF0aW9uIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoKHR0LmNvbG9uKVxuICAgICAgICA/IHRoaXMudHNQYXJzZVR5cGVPclR5cGVQcmVkaWNhdGVBbm5vdGF0aW9uKHR0LmNvbG9uKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0c1RyeVBhcnNlVHlwZUFubm90YXRpb24oKTogP04uVHNUeXBlQW5ub3RhdGlvbiB7XG4gICAgICByZXR1cm4gdGhpcy5tYXRjaCh0dC5jb2xvbikgPyB0aGlzLnRzUGFyc2VUeXBlQW5ub3RhdGlvbigpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VUeXBlKCk6ID9OLlRzVHlwZSB7XG4gICAgICByZXR1cm4gdGhpcy50c0VhdFRoZW5QYXJzZVR5cGUodHQuY29sb24pO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlUHJlZGljYXRlUHJlZml4KCk6ID9OLklkZW50aWZpZXIge1xuICAgICAgY29uc3QgaWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiaXNcIikgJiYgIXRoaXMuaGFzUHJlY2VkaW5nTGluZUJyZWFrKCkpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZVByZWRpY2F0ZUFzc2VydHMoKTogYm9vbGVhbiB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLm1hdGNoKHR0Lm5hbWUpIHx8XG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWUgIT09IFwiYXNzZXJ0c1wiIHx8XG4gICAgICAgIHRoaXMuaGFzUHJlY2VkaW5nTGluZUJyZWFrKClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBjb250YWluc0VzYyA9IHRoaXMuc3RhdGUuY29udGFpbnNFc2M7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5uYW1lKSAmJiAhdGhpcy5tYXRjaCh0dC5fdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGFpbnNFc2MpIHtcbiAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCxcbiAgICAgICAgICBFcnJvcnMuSW52YWxpZEVzY2FwZWRSZXNlcnZlZFdvcmQsXG4gICAgICAgICAgXCJhc3NlcnRzXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRzUGFyc2VUeXBlQW5ub3RhdGlvbihcbiAgICAgIGVhdENvbG9uID0gdHJ1ZSxcbiAgICAgIHQ6IE4uVHNUeXBlQW5ub3RhdGlvbiA9IHRoaXMuc3RhcnROb2RlKCksXG4gICAgKTogTi5Uc1R5cGVBbm5vdGF0aW9uIHtcbiAgICAgIHRoaXMudHNJblR5cGUoKCkgPT4ge1xuICAgICAgICBpZiAoZWF0Q29sb24pIHRoaXMuZXhwZWN0KHR0LmNvbG9uKTtcbiAgICAgICAgdC50eXBlQW5ub3RhdGlvbiA9IHRoaXMudHNQYXJzZVR5cGUoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZSh0LCBcIlRTVHlwZUFubm90YXRpb25cIik7XG4gICAgfVxuXG4gICAgLyoqIEJlIHN1cmUgdG8gYmUgaW4gYSB0eXBlIGNvbnRleHQgYmVmb3JlIGNhbGxpbmcgdGhpcywgdXNpbmcgYHRzSW5UeXBlYC4gKi9cbiAgICB0c1BhcnNlVHlwZSgpOiBOLlRzVHlwZSB7XG4gICAgICAvLyBOZWVkIHRvIHNldCBgc3RhdGUuaW5UeXBlYCBzbyB0aGF0IHdlIGRvbid0IHBhcnNlIEpTWCBpbiBhIHR5cGUgY29udGV4dC5cbiAgICAgIGFzc2VydCh0aGlzLnN0YXRlLmluVHlwZSk7XG4gICAgICBjb25zdCB0eXBlID0gdGhpcy50c1BhcnNlTm9uQ29uZGl0aW9uYWxUeXBlKCk7XG4gICAgICBpZiAodGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSB8fCAhdGhpcy5lYXQodHQuX2V4dGVuZHMpKSB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9kZTogTi5Uc0NvbmRpdGlvbmFsVHlwZSA9IHRoaXMuc3RhcnROb2RlQXROb2RlKHR5cGUpO1xuICAgICAgbm9kZS5jaGVja1R5cGUgPSB0eXBlO1xuICAgICAgbm9kZS5leHRlbmRzVHlwZSA9IHRoaXMudHNQYXJzZU5vbkNvbmRpdGlvbmFsVHlwZSgpO1xuICAgICAgdGhpcy5leHBlY3QodHQucXVlc3Rpb24pO1xuICAgICAgbm9kZS50cnVlVHlwZSA9IHRoaXMudHNQYXJzZVR5cGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbG9uKTtcbiAgICAgIG5vZGUuZmFsc2VUeXBlID0gdGhpcy50c1BhcnNlVHlwZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTQ29uZGl0aW9uYWxUeXBlXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VOb25Db25kaXRpb25hbFR5cGUoKTogTi5Uc1R5cGUge1xuICAgICAgaWYgKHRoaXMudHNJc1N0YXJ0T2ZGdW5jdGlvblR5cGUoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlRnVuY3Rpb25PckNvbnN0cnVjdG9yVHlwZShcIlRTRnVuY3Rpb25UeXBlXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuX25ldykpIHtcbiAgICAgICAgLy8gQXMgaW4gYG5ldyAoKSA9PiBEYXRlYFxuICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlRnVuY3Rpb25PckNvbnN0cnVjdG9yVHlwZShcIlRTQ29uc3RydWN0b3JUeXBlXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVVuaW9uVHlwZU9ySGlnaGVyKCk7XG4gICAgfVxuXG4gICAgdHNQYXJzZVR5cGVBc3NlcnRpb24oKTogTi5Uc1R5cGVBc3NlcnRpb24ge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc1R5cGVBc3NlcnRpb24gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgY29uc3QgX2NvbnN0ID0gdGhpcy50c1RyeU5leHRQYXJzZUNvbnN0YW50Q29udGV4dCgpO1xuICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IF9jb25zdCB8fCB0aGlzLnRzTmV4dFRoZW5QYXJzZVR5cGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0UmVsYXRpb25hbChcIj5cIik7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSB0aGlzLnBhcnNlTWF5YmVVbmFyeSgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTVHlwZUFzc2VydGlvblwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlSGVyaXRhZ2VDbGF1c2UoXG4gICAgICBkZXNjcmlwdG9yOiBzdHJpbmcsXG4gICAgKTogJFJlYWRPbmx5QXJyYXk8Ti5Uc0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cz4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxTdGFydCA9IHRoaXMuc3RhdGUuc3RhcnQ7XG5cbiAgICAgIGNvbnN0IGRlbGltaXRlZExpc3QgPSB0aGlzLnRzUGFyc2VEZWxpbWl0ZWRMaXN0KFxuICAgICAgICBcIkhlcml0YWdlQ2xhdXNlRWxlbWVudFwiLFxuICAgICAgICB0aGlzLnRzUGFyc2VFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMuYmluZCh0aGlzKSxcbiAgICAgICk7XG5cbiAgICAgIGlmICghZGVsaW1pdGVkTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5yYWlzZShvcmlnaW5hbFN0YXJ0LCBUU0Vycm9ycy5FbXB0eUhlcml0YWdlQ2xhdXNlVHlwZSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWxpbWl0ZWRMaXN0O1xuICAgIH1cblxuICAgIHRzUGFyc2VFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMoKTogTi5Uc0V4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cyB7XG4gICAgICBjb25zdCBub2RlOiBOLlRzRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIC8vIE5vdGU6IFRTIHVzZXMgcGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uT3JIaWdoZXIsXG4gICAgICAvLyB0aGVuIGhhcyBncmFtbWFyIGVycm9ycyBsYXRlciBpZiBpdCdzIG5vdCBhbiBFbnRpdHlOYW1lLlxuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy50c1BhcnNlRW50aXR5TmFtZSgvKiBhbGxvd1Jlc2VydmVkV29yZHMgKi8gZmFsc2UpO1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1BhcnNlVHlwZUFyZ3VtZW50cygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNFeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHNcIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZUludGVyZmFjZURlY2xhcmF0aW9uKFxuICAgICAgbm9kZTogTi5Uc0ludGVyZmFjZURlY2xhcmF0aW9uLFxuICAgICk6IE4uVHNJbnRlcmZhY2VEZWNsYXJhdGlvbiB7XG4gICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKFxuICAgICAgICBub2RlLmlkLFxuICAgICAgICBCSU5EX1RTX0lOVEVSRkFDRSxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBcInR5cGVzY3JpcHQgaW50ZXJmYWNlIGRlY2xhcmF0aW9uXCIsXG4gICAgICApO1xuICAgICAgbm9kZS50eXBlUGFyYW1ldGVycyA9IHRoaXMudHNUcnlQYXJzZVR5cGVQYXJhbWV0ZXJzKCk7XG4gICAgICBpZiAodGhpcy5lYXQodHQuX2V4dGVuZHMpKSB7XG4gICAgICAgIG5vZGUuZXh0ZW5kcyA9IHRoaXMudHNQYXJzZUhlcml0YWdlQ2xhdXNlKFwiZXh0ZW5kc1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJvZHk6IE4uVFNJbnRlcmZhY2VCb2R5ID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIGJvZHkuYm9keSA9IHRoaXMudHNJblR5cGUodGhpcy50c1BhcnNlT2JqZWN0VHlwZU1lbWJlcnMuYmluZCh0aGlzKSk7XG4gICAgICBub2RlLmJvZHkgPSB0aGlzLmZpbmlzaE5vZGUoYm9keSwgXCJUU0ludGVyZmFjZUJvZHlcIik7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlVHlwZUFsaWFzRGVjbGFyYXRpb24oXG4gICAgICBub2RlOiBOLlRzVHlwZUFsaWFzRGVjbGFyYXRpb24sXG4gICAgKTogTi5Uc1R5cGVBbGlhc0RlY2xhcmF0aW9uIHtcbiAgICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuICAgICAgdGhpcy5jaGVja0xWYWwobm9kZS5pZCwgQklORF9UU19UWVBFLCB1bmRlZmluZWQsIFwidHlwZXNjcmlwdCB0eXBlIGFsaWFzXCIpO1xuXG4gICAgICBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1RyeVBhcnNlVHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgIG5vZGUudHlwZUFubm90YXRpb24gPSB0aGlzLnRzRXhwZWN0VGhlblBhcnNlVHlwZSh0dC5lcSk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTVHlwZUFsaWFzRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdHNJbk5vQ29udGV4dDxUPihjYjogKCkgPT4gVCk6IFQge1xuICAgICAgY29uc3Qgb2xkQ29udGV4dCA9IHRoaXMuc3RhdGUuY29udGV4dDtcbiAgICAgIHRoaXMuc3RhdGUuY29udGV4dCA9IFtvbGRDb250ZXh0WzBdXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0ID0gb2xkQ29udGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW5zIGBjYmAgaW4gYSB0eXBlIGNvbnRleHQuXG4gICAgICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uZSB0b2tlbiAqYmVmb3JlKiB0aGUgZmlyc3QgdHlwZSB0b2tlbixcbiAgICAgKiBzbyB0aGF0IHRoZSBjYWxsIHRvIGBuZXh0KClgIGlzIHJ1biBpbiB0eXBlIGNvbnRleHQuXG4gICAgICovXG4gICAgdHNJblR5cGU8VD4oY2I6ICgpID0+IFQpOiBUIHtcbiAgICAgIGNvbnN0IG9sZEluVHlwZSA9IHRoaXMuc3RhdGUuaW5UeXBlO1xuICAgICAgdGhpcy5zdGF0ZS5pblR5cGUgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnN0YXRlLmluVHlwZSA9IG9sZEluVHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c0VhdFRoZW5QYXJzZVR5cGUodG9rZW46IFRva2VuVHlwZSk6IE4uVHNUeXBlIHwgdHlwZW9mIHVuZGVmaW5lZCB7XG4gICAgICByZXR1cm4gIXRoaXMubWF0Y2godG9rZW4pID8gdW5kZWZpbmVkIDogdGhpcy50c05leHRUaGVuUGFyc2VUeXBlKCk7XG4gICAgfVxuXG4gICAgdHNFeHBlY3RUaGVuUGFyc2VUeXBlKHRva2VuOiBUb2tlblR5cGUpOiBOLlRzVHlwZSB7XG4gICAgICByZXR1cm4gdGhpcy50c0RvVGhlblBhcnNlVHlwZSgoKSA9PiB0aGlzLmV4cGVjdCh0b2tlbikpO1xuICAgIH1cblxuICAgIHRzTmV4dFRoZW5QYXJzZVR5cGUoKTogTi5Uc1R5cGUge1xuICAgICAgcmV0dXJuIHRoaXMudHNEb1RoZW5QYXJzZVR5cGUoKCkgPT4gdGhpcy5uZXh0KCkpO1xuICAgIH1cblxuICAgIHRzRG9UaGVuUGFyc2VUeXBlKGNiOiAoKSA9PiB2b2lkKTogTi5Uc1R5cGUge1xuICAgICAgcmV0dXJuIHRoaXMudHNJblR5cGUoKCkgPT4ge1xuICAgICAgICBjYigpO1xuICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlVHlwZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdHNQYXJzZUVudW1NZW1iZXIoKTogTi5Uc0VudW1NZW1iZXIge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc0VudW1NZW1iZXIgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgLy8gQ29tcHV0ZWQgcHJvcGVydHkgbmFtZXMgYXJlIGdyYW1tYXIgZXJyb3JzIGluIGFuIGVudW0sIHNvIGFjY2VwdCBqdXN0IHN0cmluZyBsaXRlcmFsIG9yIGlkZW50aWZpZXIuXG4gICAgICBub2RlLmlkID0gdGhpcy5tYXRjaCh0dC5zdHJpbmcpXG4gICAgICAgID8gdGhpcy5wYXJzZUV4cHJBdG9tKClcbiAgICAgICAgOiB0aGlzLnBhcnNlSWRlbnRpZmllcigvKiBsaWJlcmFsICovIHRydWUpO1xuICAgICAgaWYgKHRoaXMuZWF0KHR0LmVxKSkge1xuICAgICAgICBub2RlLmluaXRpYWxpemVyID0gdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTRW51bU1lbWJlclwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlRW51bURlY2xhcmF0aW9uKFxuICAgICAgbm9kZTogTi5Uc0VudW1EZWNsYXJhdGlvbixcbiAgICAgIGlzQ29uc3Q6IGJvb2xlYW4sXG4gICAgKTogTi5Uc0VudW1EZWNsYXJhdGlvbiB7XG4gICAgICBpZiAoaXNDb25zdCkgbm9kZS5jb25zdCA9IHRydWU7XG4gICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKFxuICAgICAgICBub2RlLmlkLFxuICAgICAgICBpc0NvbnN0ID8gQklORF9UU19DT05TVF9FTlVNIDogQklORF9UU19FTlVNLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIFwidHlwZXNjcmlwdCBlbnVtIGRlY2xhcmF0aW9uXCIsXG4gICAgICApO1xuXG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuICAgICAgbm9kZS5tZW1iZXJzID0gdGhpcy50c1BhcnNlRGVsaW1pdGVkTGlzdChcbiAgICAgICAgXCJFbnVtTWVtYmVyc1wiLFxuICAgICAgICB0aGlzLnRzUGFyc2VFbnVtTWVtYmVyLmJpbmQodGhpcyksXG4gICAgICApO1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU0VudW1EZWNsYXJhdGlvblwiKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlTW9kdWxlQmxvY2soKTogTi5Uc01vZHVsZUJsb2NrIHtcbiAgICAgIGNvbnN0IG5vZGU6IE4uVHNNb2R1bGVCbG9jayA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX09USEVSKTtcblxuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VMKTtcbiAgICAgIC8vIEluc2lkZSBvZiBhIG1vZHVsZSBibG9jayBpcyBjb25zaWRlcmVkIFwidG9wLWxldmVsXCIsIG1lYW5pbmcgaXQgY2FuIGhhdmUgaW1wb3J0cyBhbmQgZXhwb3J0cy5cbiAgICAgIHRoaXMucGFyc2VCbG9ja09yTW9kdWxlQmxvY2tCb2R5KFxuICAgICAgICAobm9kZS5ib2R5ID0gW10pLFxuICAgICAgICAvKiBkaXJlY3RpdmVzICovIHVuZGVmaW5lZCxcbiAgICAgICAgLyogdG9wTGV2ZWwgKi8gdHJ1ZSxcbiAgICAgICAgLyogZW5kICovIHR0LmJyYWNlUixcbiAgICAgICk7XG4gICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU01vZHVsZUJsb2NrXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VNb2R1bGVPck5hbWVzcGFjZURlY2xhcmF0aW9uKFxuICAgICAgbm9kZTogTi5Uc01vZHVsZURlY2xhcmF0aW9uLFxuICAgICAgbmVzdGVkPzogYm9vbGVhbiA9IGZhbHNlLFxuICAgICk6IE4uVHNNb2R1bGVEZWNsYXJhdGlvbiB7XG4gICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcblxuICAgICAgaWYgKCFuZXN0ZWQpIHtcbiAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgbm9kZS5pZCxcbiAgICAgICAgICBCSU5EX1RTX05BTUVTUEFDRSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwibW9kdWxlIG9yIG5hbWVzcGFjZSBkZWNsYXJhdGlvblwiLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5lYXQodHQuZG90KSkge1xuICAgICAgICBjb25zdCBpbm5lciA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMudHNQYXJzZU1vZHVsZU9yTmFtZXNwYWNlRGVjbGFyYXRpb24oaW5uZXIsIHRydWUpO1xuICAgICAgICBub2RlLmJvZHkgPSBpbm5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2NvcGUuZW50ZXIoU0NPUEVfVFNfTU9EVUxFKTtcbiAgICAgICAgdGhpcy5wcm9kUGFyYW0uZW50ZXIoUEFSQU0pO1xuICAgICAgICBub2RlLmJvZHkgPSB0aGlzLnRzUGFyc2VNb2R1bGVCbG9jaygpO1xuICAgICAgICB0aGlzLnByb2RQYXJhbS5leGl0KCk7XG4gICAgICAgIHRoaXMuc2NvcGUuZXhpdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTTW9kdWxlRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdHNQYXJzZUFtYmllbnRFeHRlcm5hbE1vZHVsZURlY2xhcmF0aW9uKFxuICAgICAgbm9kZTogTi5Uc01vZHVsZURlY2xhcmF0aW9uLFxuICAgICk6IE4uVHNNb2R1bGVEZWNsYXJhdGlvbiB7XG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJnbG9iYWxcIikpIHtcbiAgICAgICAgbm9kZS5nbG9iYWwgPSB0cnVlO1xuICAgICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5zdHJpbmcpKSB7XG4gICAgICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuYnJhY2VMKSkge1xuICAgICAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX1RTX01PRFVMRSk7XG4gICAgICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKFBBUkFNKTtcbiAgICAgICAgbm9kZS5ib2R5ID0gdGhpcy50c1BhcnNlTW9kdWxlQmxvY2soKTtcbiAgICAgICAgdGhpcy5wcm9kUGFyYW0uZXhpdCgpO1xuICAgICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU01vZHVsZURlY2xhcmF0aW9uXCIpO1xuICAgIH1cblxuICAgIHRzUGFyc2VJbXBvcnRFcXVhbHNEZWNsYXJhdGlvbihcbiAgICAgIG5vZGU6IE4uVHNJbXBvcnRFcXVhbHNEZWNsYXJhdGlvbixcbiAgICAgIGlzRXhwb3J0PzogYm9vbGVhbixcbiAgICApOiBOLlRzSW1wb3J0RXF1YWxzRGVjbGFyYXRpb24ge1xuICAgICAgbm9kZS5pc0V4cG9ydCA9IGlzRXhwb3J0IHx8IGZhbHNlO1xuICAgICAgbm9kZS5pZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgbm9kZS5pZCxcbiAgICAgICAgQklORF9MRVhJQ0FMLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIFwiaW1wb3J0IGVxdWFscyBkZWNsYXJhdGlvblwiLFxuICAgICAgKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmVxKTtcbiAgICAgIG5vZGUubW9kdWxlUmVmZXJlbmNlID0gdGhpcy50c1BhcnNlTW9kdWxlUmVmZXJlbmNlKCk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdHNJc0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5pc0NvbnRleHR1YWwoXCJyZXF1aXJlXCIpICYmXG4gICAgICAgIHRoaXMubG9va2FoZWFkQ2hhckNvZGUoKSA9PT0gY2hhckNvZGVzLmxlZnRQYXJlbnRoZXNpc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB0c1BhcnNlTW9kdWxlUmVmZXJlbmNlKCk6IE4uVHNNb2R1bGVSZWZlcmVuY2Uge1xuICAgICAgcmV0dXJuIHRoaXMudHNJc0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlKClcbiAgICAgICAgPyB0aGlzLnRzUGFyc2VFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZSgpXG4gICAgICAgIDogdGhpcy50c1BhcnNlRW50aXR5TmFtZSgvKiBhbGxvd1Jlc2VydmVkV29yZHMgKi8gZmFsc2UpO1xuICAgIH1cblxuICAgIHRzUGFyc2VFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZSgpOiBOLlRzRXh0ZXJuYWxNb2R1bGVSZWZlcmVuY2Uge1xuICAgICAgY29uc3Qgbm9kZTogTi5Uc0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcInJlcXVpcmVcIik7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5wYXJlbkwpO1xuICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICB9XG4gICAgICAvLyBGb3IgY29tcGF0aWJpbGl0eSB0byBlc3RyZWUgd2UgY2Fubm90IGNhbGwgcGFyc2VMaXRlcmFsIGRpcmVjdGx5IGhlcmVcbiAgICAgIG5vZGUuZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VFeHByQXRvbSgpO1xuICAgICAgdGhpcy5leHBlY3QodHQucGFyZW5SKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlXCIpO1xuICAgIH1cblxuICAgIC8vIFV0aWxpdGllc1xuXG4gICAgdHNMb29rQWhlYWQ8VD4oZjogKCkgPT4gVCk6IFQge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLmNsb25lKCk7XG4gICAgICBjb25zdCByZXMgPSBmKCk7XG4gICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VBbmRDYXRjaDxUOiA/Ti5Ob2RlQmFzZT4oZjogKCkgPT4gVCk6ID9UIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudHJ5UGFyc2UoYWJvcnQgPT4gZigpIHx8IGFib3J0KCkpO1xuXG4gICAgICBpZiAocmVzdWx0LmFib3J0ZWQgfHwgIXJlc3VsdC5ub2RlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhpcy5zdGF0ZSA9IHJlc3VsdC5mYWlsU3RhdGU7XG4gICAgICByZXR1cm4gcmVzdWx0Lm5vZGU7XG4gICAgfVxuXG4gICAgdHNUcnlQYXJzZTxUPihmOiAoKSA9PiA/VCk6ID9UIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZS5jbG9uZSgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZigpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c1RyeVBhcnNlRGVjbGFyZShuYW55OiBhbnkpOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICBpZiAodGhpcy5pc0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHN0YXJ0dHlwZSA9IHRoaXMuc3RhdGUudHlwZTtcbiAgICAgIGxldCBraW5kO1xuXG4gICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJsZXRcIikpIHtcbiAgICAgICAgc3RhcnR0eXBlID0gdHQuX3ZhcjtcbiAgICAgICAga2luZCA9IFwibGV0XCI7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoc3RhcnR0eXBlKSB7XG4gICAgICAgIGNhc2UgdHQuX2Z1bmN0aW9uOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQoXG4gICAgICAgICAgICBuYW55LFxuICAgICAgICAgICAgLyogYXN5bmMgKi8gZmFsc2UsXG4gICAgICAgICAgICAvKiBkZWNsYXJhdGlvblBvc2l0aW9uICovIHRydWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSB0dC5fY2xhc3M6XG4gICAgICAgICAgLy8gV2hpbGUgdGhpcyBpcyBhbHNvIHNldCBieSB0c1BhcnNlRXhwcmVzc2lvblN0YXRlbWVudCwgd2UgbmVlZCB0byBzZXQgaXRcbiAgICAgICAgICAvLyBiZWZvcmUgcGFyc2luZyB0aGUgY2xhc3MgZGVjbGFyYXRpb24gdG8gbm93IGhvdyB0byByZWdpc3RlciBpdCBpbiB0aGUgc2NvcGUuXG4gICAgICAgICAgbmFueS5kZWNsYXJlID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKFxuICAgICAgICAgICAgbmFueSxcbiAgICAgICAgICAgIC8qIGlzU3RhdGVtZW50ICovIHRydWUsXG4gICAgICAgICAgICAvKiBvcHRpb25hbElkICovIGZhbHNlLFxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgdHQuX2NvbnN0OlxuICAgICAgICAgIGlmICh0aGlzLm1hdGNoKHR0Ll9jb25zdCkgJiYgdGhpcy5pc0xvb2thaGVhZENvbnRleHR1YWwoXCJlbnVtXCIpKSB7XG4gICAgICAgICAgICAvLyBgY29uc3QgZW51bSA9IDA7YCBub3QgYWxsb3dlZCBiZWNhdXNlIFwiZW51bVwiIGlzIGEgc3RyaWN0IG1vZGUgcmVzZXJ2ZWQgd29yZC5cbiAgICAgICAgICAgIHRoaXMuZXhwZWN0KHR0Ll9jb25zdCk7XG4gICAgICAgICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJlbnVtXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZUVudW1EZWNsYXJhdGlvbihuYW55LCAvKiBpc0NvbnN0ICovIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlIHR0Ll92YXI6XG4gICAgICAgICAga2luZCA9IGtpbmQgfHwgdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVZhclN0YXRlbWVudChuYW55LCBraW5kKTtcbiAgICAgICAgY2FzZSB0dC5uYW1lOiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZUFtYmllbnRFeHRlcm5hbE1vZHVsZURlY2xhcmF0aW9uKG5hbnkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlRGVjbGFyYXRpb24obmFueSwgdmFsdWUsIC8qIG5leHQgKi8gdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm90ZTogdGhpcyB3b24ndCBiZSBjYWxsZWQgdW5sZXNzIHRoZSBrZXl3b3JkIGlzIGFsbG93ZWQgaW4gYHNob3VsZFBhcnNlRXhwb3J0RGVjbGFyYXRpb25gLlxuICAgIHRzVHJ5UGFyc2VFeHBvcnREZWNsYXJhdGlvbigpOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICByZXR1cm4gdGhpcy50c1BhcnNlRGVjbGFyYXRpb24oXG4gICAgICAgIHRoaXMuc3RhcnROb2RlKCksXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgIC8qIG5leHQgKi8gdHJ1ZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdHNQYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZTogYW55LCBleHByOiBOLklkZW50aWZpZXIpOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICBzd2l0Y2ggKGV4cHIubmFtZSkge1xuICAgICAgICBjYXNlIFwiZGVjbGFyZVwiOiB7XG4gICAgICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSB0aGlzLnRzVHJ5UGFyc2VEZWNsYXJlKG5vZGUpO1xuICAgICAgICAgIGlmIChkZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgZGVjbGFyYXRpb24uZGVjbGFyZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZGVjbGFyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJnbG9iYWxcIjpcbiAgICAgICAgICAvLyBgZ2xvYmFsIHsgfWAgKHdpdGggbm8gYGRlY2xhcmVgKSBtYXkgYXBwZWFyIGluc2lkZSBhbiBhbWJpZW50IG1vZHVsZSBkZWNsYXJhdGlvbi5cbiAgICAgICAgICAvLyBXb3VsZCBsaWtlIHRvIHVzZSB0c1BhcnNlQW1iaWVudEV4dGVybmFsTW9kdWxlRGVjbGFyYXRpb24gaGVyZSwgYnV0IGFscmVhZHkgcmFuIHBhc3QgXCJnbG9iYWxcIi5cbiAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5icmFjZUwpKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX1RTX01PRFVMRSk7XG4gICAgICAgICAgICB0aGlzLnByb2RQYXJhbS5lbnRlcihQQVJBTSk7XG4gICAgICAgICAgICBjb25zdCBtb2Q6IE4uVHNNb2R1bGVEZWNsYXJhdGlvbiA9IG5vZGU7XG4gICAgICAgICAgICBtb2QuZ2xvYmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIG1vZC5pZCA9IGV4cHI7XG4gICAgICAgICAgICBtb2QuYm9keSA9IHRoaXMudHNQYXJzZU1vZHVsZUJsb2NrKCk7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcbiAgICAgICAgICAgIHRoaXMucHJvZFBhcmFtLmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobW9kLCBcIlRTTW9kdWxlRGVjbGFyYXRpb25cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZURlY2xhcmF0aW9uKG5vZGUsIGV4cHIubmFtZSwgLyogbmV4dCAqLyBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29tbW9uIHRvIHRzVHJ5UGFyc2VEZWNsYXJlLCB0c1RyeVBhcnNlRXhwb3J0RGVjbGFyYXRpb24sIGFuZCB0c1BhcnNlRXhwcmVzc2lvblN0YXRlbWVudC5cbiAgICB0c1BhcnNlRGVjbGFyYXRpb24oXG4gICAgICBub2RlOiBhbnksXG4gICAgICB2YWx1ZTogc3RyaW5nLFxuICAgICAgbmV4dDogYm9vbGVhbixcbiAgICApOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJhYnN0cmFjdFwiOlxuICAgICAgICAgIGlmICh0aGlzLnRzQ2hlY2tMaW5lVGVybWluYXRvckFuZE1hdGNoKHR0Ll9jbGFzcywgbmV4dCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsczogTi5DbGFzc0RlY2xhcmF0aW9uID0gbm9kZTtcbiAgICAgICAgICAgIGNscy5hYnN0cmFjdCA9IHRydWU7XG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0Ll9jbGFzcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQobnVsbCwgdHQuX2NsYXNzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyhcbiAgICAgICAgICAgICAgY2xzLFxuICAgICAgICAgICAgICAvKiBpc1N0YXRlbWVudCAqLyB0cnVlLFxuICAgICAgICAgICAgICAvKiBvcHRpb25hbElkICovIGZhbHNlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICBpZiAobmV4dCB8fCB0aGlzLm1hdGNoKHR0Lm5hbWUpKSB7XG4gICAgICAgICAgICBpZiAobmV4dCkgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlRW51bURlY2xhcmF0aW9uKG5vZGUsIC8qIGlzQ29uc3QgKi8gZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiaW50ZXJmYWNlXCI6XG4gICAgICAgICAgaWYgKHRoaXMudHNDaGVja0xpbmVUZXJtaW5hdG9yQW5kTWF0Y2godHQubmFtZSwgbmV4dCkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0KSB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VJbnRlcmZhY2VEZWNsYXJhdGlvbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIm1vZHVsZVwiOlxuICAgICAgICAgIGlmIChuZXh0KSB0aGlzLm5leHQoKTtcbiAgICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5zdHJpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlQW1iaWVudEV4dGVybmFsTW9kdWxlRGVjbGFyYXRpb24obm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRzQ2hlY2tMaW5lVGVybWluYXRvckFuZE1hdGNoKHR0Lm5hbWUsIG5leHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlTW9kdWxlT3JOYW1lc3BhY2VEZWNsYXJhdGlvbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIm5hbWVzcGFjZVwiOlxuICAgICAgICAgIGlmICh0aGlzLnRzQ2hlY2tMaW5lVGVybWluYXRvckFuZE1hdGNoKHR0Lm5hbWUsIG5leHQpKSB7XG4gICAgICAgICAgICBpZiAobmV4dCkgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlTW9kdWxlT3JOYW1lc3BhY2VEZWNsYXJhdGlvbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICBpZiAodGhpcy50c0NoZWNrTGluZVRlcm1pbmF0b3JBbmRNYXRjaCh0dC5uYW1lLCBuZXh0KSkge1xuICAgICAgICAgICAgaWYgKG5leHQpIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZVR5cGVBbGlhc0RlY2xhcmF0aW9uKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0c0NoZWNrTGluZVRlcm1pbmF0b3JBbmRNYXRjaCh0b2tlblR5cGU6IFRva2VuVHlwZSwgbmV4dDogYm9vbGVhbikge1xuICAgICAgcmV0dXJuIChuZXh0IHx8IHRoaXMubWF0Y2godG9rZW5UeXBlKSkgJiYgIXRoaXMuaXNMaW5lVGVybWluYXRvcigpO1xuICAgIH1cblxuICAgIHRzVHJ5UGFyc2VHZW5lcmljQXN5bmNBcnJvd0Z1bmN0aW9uKFxuICAgICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICApOiA/Ti5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvbGRNYXliZUluQXJyb3dQYXJhbWV0ZXJzID0gdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzO1xuICAgICAgY29uc3Qgb2xkWWllbGRQb3MgPSB0aGlzLnN0YXRlLnlpZWxkUG9zO1xuICAgICAgY29uc3Qgb2xkQXdhaXRQb3MgPSB0aGlzLnN0YXRlLmF3YWl0UG9zO1xuICAgICAgdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3RhdGUueWllbGRQb3MgPSAtMTtcbiAgICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSAtMTtcblxuICAgICAgY29uc3QgcmVzOiA/Ti5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA9IHRoaXMudHNUcnlQYXJzZUFuZENhdGNoKCgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA9IHRoaXMuc3RhcnROb2RlQXQoXG4gICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgc3RhcnRMb2MsXG4gICAgICAgICk7XG4gICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0aGlzLnRzUGFyc2VUeXBlUGFyYW1ldGVycygpO1xuICAgICAgICAvLyBEb24ndCB1c2Ugb3ZlcmxvYWRlZCBwYXJzZUZ1bmN0aW9uUGFyYW1zIHdoaWNoIHdvdWxkIGxvb2sgZm9yIFwiPFwiIGFnYWluLlxuICAgICAgICBzdXBlci5wYXJzZUZ1bmN0aW9uUGFyYW1zKG5vZGUpO1xuICAgICAgICBub2RlLnJldHVyblR5cGUgPSB0aGlzLnRzVHJ5UGFyc2VUeXBlT3JUeXBlUHJlZGljYXRlQW5ub3RhdGlvbigpO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5hcnJvdyk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycyA9IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgICB0aGlzLnN0YXRlLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gICAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG5cbiAgICAgIGlmICghcmVzKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKFxuICAgICAgICByZXMsXG4gICAgICAgIC8qIHBhcmFtcyBhcmUgYWxyZWFkeSBzZXQgKi8gbnVsbCxcbiAgICAgICAgLyogYXN5bmMgKi8gdHJ1ZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdHNQYXJzZVR5cGVBcmd1bWVudHMoKTogTi5Uc1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZS5wYXJhbXMgPSB0aGlzLnRzSW5UeXBlKCgpID0+XG4gICAgICAgIC8vIFRlbXBvcmFyaWx5IHJlbW92ZSBhIEpTWCBwYXJzaW5nIGNvbnRleHQsIHdoaWNoIG1ha2VzIHVzIHNjYW4gZGlmZmVyZW50IHRva2Vucy5cbiAgICAgICAgdGhpcy50c0luTm9Db250ZXh0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmV4cGVjdFJlbGF0aW9uYWwoXCI8XCIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VEZWxpbWl0ZWRMaXN0KFxuICAgICAgICAgICAgXCJUeXBlUGFyYW1ldGVyc09yQXJndW1lbnRzXCIsXG4gICAgICAgICAgICB0aGlzLnRzUGFyc2VUeXBlLmJpbmQodGhpcyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgICAgLy8gVGhpcyByZWFkcyB0aGUgbmV4dCB0b2tlbiBhZnRlciB0aGUgYD5gIHRvbywgc28gZG8gdGhpcyBpbiB0aGUgZW5jbG9zaW5nIGNvbnRleHQuXG4gICAgICAvLyBCdXQgYmUgc3VyZSBub3QgdG8gcGFyc2UgYSByZWdleCBpbiB0aGUganN4IGV4cHJlc3Npb24gYDxDPG51bWJlcj4gLz5gLCBzbyBzZXQgZXhwckFsbG93ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5leHBlY3RSZWxhdGlvbmFsKFwiPlwiKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpO1xuICAgIH1cblxuICAgIHRzSXNEZWNsYXJhdGlvblN0YXJ0KCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQubmFtZSkpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICAgICAgY2FzZSBcImFic3RyYWN0XCI6XG4gICAgICAgICAgY2FzZSBcImRlY2xhcmVcIjpcbiAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgIGNhc2UgXCJpbnRlcmZhY2VcIjpcbiAgICAgICAgICBjYXNlIFwibW9kdWxlXCI6XG4gICAgICAgICAgY2FzZSBcIm5hbWVzcGFjZVwiOlxuICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gT1ZFUlJJREVTXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBpc0V4cG9ydERlZmF1bHRTcGVjaWZpZXIoKTogYm9vbGVhbiB7XG4gICAgICBpZiAodGhpcy50c0lzRGVjbGFyYXRpb25TdGFydCgpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gc3VwZXIuaXNFeHBvcnREZWZhdWx0U3BlY2lmaWVyKCk7XG4gICAgfVxuXG4gICAgcGFyc2VBc3NpZ25hYmxlTGlzdEl0ZW0oXG4gICAgICBhbGxvd01vZGlmaWVyczogP2Jvb2xlYW4sXG4gICAgICBkZWNvcmF0b3JzOiBOLkRlY29yYXRvcltdLFxuICAgICk6IE4uUGF0dGVybiB8IE4uVFNQYXJhbWV0ZXJQcm9wZXJ0eSB7XG4gICAgICAvLyBTdG9yZSBvcmlnaW5hbCBsb2NhdGlvbi9wb3NpdGlvbiB0byBpbmNsdWRlIG1vZGlmaWVycyBpbiByYW5nZVxuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuXG4gICAgICBsZXQgYWNjZXNzaWJpbGl0eTogP04uQWNjZXNzaWJpbGl0eTtcbiAgICAgIGxldCByZWFkb25seSA9IGZhbHNlO1xuICAgICAgaWYgKGFsbG93TW9kaWZpZXJzKSB7XG4gICAgICAgIGFjY2Vzc2liaWxpdHkgPSB0aGlzLnBhcnNlQWNjZXNzTW9kaWZpZXIoKTtcbiAgICAgICAgcmVhZG9ubHkgPSAhIXRoaXMudHNQYXJzZU1vZGlmaWVyKFtcInJlYWRvbmx5XCJdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGVmdCA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoKTtcbiAgICAgIHRoaXMucGFyc2VBc3NpZ25hYmxlTGlzdEl0ZW1UeXBlcyhsZWZ0KTtcbiAgICAgIGNvbnN0IGVsdCA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQobGVmdC5zdGFydCwgbGVmdC5sb2Muc3RhcnQsIGxlZnQpO1xuICAgICAgaWYgKGFjY2Vzc2liaWxpdHkgfHwgcmVhZG9ubHkpIHtcbiAgICAgICAgY29uc3QgcHA6IE4uVFNQYXJhbWV0ZXJQcm9wZXJ0eSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgaWYgKGRlY29yYXRvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgcHAuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY2Vzc2liaWxpdHkpIHBwLmFjY2Vzc2liaWxpdHkgPSBhY2Nlc3NpYmlsaXR5O1xuICAgICAgICBpZiAocmVhZG9ubHkpIHBwLnJlYWRvbmx5ID0gcmVhZG9ubHk7XG4gICAgICAgIGlmIChlbHQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiYgZWx0LnR5cGUgIT09IFwiQXNzaWdubWVudFBhdHRlcm5cIikge1xuICAgICAgICAgIHRoaXMucmFpc2UocHAuc3RhcnQsIFRTRXJyb3JzLlVuc3VwcG9ydGVkUGFyYW1ldGVyUHJvcGVydHlLaW5kKTtcbiAgICAgICAgfVxuICAgICAgICBwcC5wYXJhbWV0ZXIgPSAoKGVsdDogYW55KTogTi5JZGVudGlmaWVyIHwgTi5Bc3NpZ25tZW50UGF0dGVybik7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUocHAsIFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlY29yYXRvcnMubGVuZ3RoKSB7XG4gICAgICAgIGxlZnQuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbHQ7XG4gICAgfVxuXG4gICAgcGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2goXG4gICAgICBub2RlOiBOLkJvZGlsZXNzRnVuY3Rpb25Pck1ldGhvZEJhc2UsXG4gICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICBpc01ldGhvZD86IGJvb2xlYW4gPSBmYWxzZSxcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICBub2RlLnJldHVyblR5cGUgPSB0aGlzLnRzUGFyc2VUeXBlT3JUeXBlUHJlZGljYXRlQW5ub3RhdGlvbih0dC5jb2xvbik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJvZGlsZXNzVHlwZSA9XG4gICAgICAgIHR5cGUgPT09IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiXG4gICAgICAgICAgPyBcIlRTRGVjbGFyZUZ1bmN0aW9uXCJcbiAgICAgICAgICA6IHR5cGUgPT09IFwiQ2xhc3NNZXRob2RcIlxuICAgICAgICAgID8gXCJUU0RlY2xhcmVNZXRob2RcIlxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGJvZGlsZXNzVHlwZSAmJiAhdGhpcy5tYXRjaCh0dC5icmFjZUwpICYmIHRoaXMuaXNMaW5lVGVybWluYXRvcigpKSB7XG4gICAgICAgIHRoaXMuZmluaXNoTm9kZShub2RlLCBib2RpbGVzc1R5cGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1cGVyLnBhcnNlRnVuY3Rpb25Cb2R5QW5kRmluaXNoKG5vZGUsIHR5cGUsIGlzTWV0aG9kKTtcbiAgICB9XG5cbiAgICByZWdpc3RlckZ1bmN0aW9uU3RhdGVtZW50SWQobm9kZTogTi5GdW5jdGlvbik6IHZvaWQge1xuICAgICAgaWYgKCFub2RlLmJvZHkgJiYgbm9kZS5pZCkge1xuICAgICAgICAvLyBGdW5jdGlvbiBpZHMgYXJlIHZhbGlkYXRlZCBhZnRlciBwYXJzaW5nIHRoZWlyIGJvZHkuXG4gICAgICAgIC8vIEZvciBib2R5bGVzcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkbyBpdCBoZXJlLlxuICAgICAgICB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBCSU5EX1RTX0FNQklFTlQsIG51bGwsIFwiZnVuY3Rpb24gbmFtZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyLnJlZ2lzdGVyRnVuY3Rpb25TdGF0ZW1lbnRJZCguLi5hcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlU3Vic2NyaXB0KFxuICAgICAgYmFzZTogTi5FeHByZXNzaW9uLFxuICAgICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICAgIG5vQ2FsbHM6ID9ib29sZWFuLFxuICAgICAgc3RhdGU6IE4uUGFyc2VTdWJzY3JpcHRTdGF0ZSxcbiAgICApOiBOLkV4cHJlc3Npb24ge1xuICAgICAgaWYgKCF0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpICYmIHRoaXMubWF0Y2godHQuYmFuZykpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5leHByQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICBjb25zdCBub25OdWxsRXhwcmVzc2lvbjogTi5Uc05vbk51bGxFeHByZXNzaW9uID0gdGhpcy5zdGFydE5vZGVBdChcbiAgICAgICAgICBzdGFydFBvcyxcbiAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgKTtcbiAgICAgICAgbm9uTnVsbEV4cHJlc3Npb24uZXhwcmVzc2lvbiA9IGJhc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9uTnVsbEV4cHJlc3Npb24sIFwiVFNOb25OdWxsRXhwcmVzc2lvblwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICAvLyB0c1RyeVBhcnNlQW5kQ2F0Y2ggaXMgZXhwZW5zaXZlLCBzbyBhdm9pZCBpZiBub3QgbmVjZXNzYXJ5LlxuICAgICAgICAvLyBUaGVyZSBhcmUgbnVtYmVyIG9mIHRoaW5ncyB3ZSBhcmUgZ29pbmcgdG8gXCJtYXliZVwiIHBhcnNlLCBsaWtlIHR5cGUgYXJndW1lbnRzIG9uXG4gICAgICAgIC8vIHRhZ2dlZCB0ZW1wbGF0ZSBleHByZXNzaW9ucy4gSWYgYW55IG9mIHRoZW0gZmFpbCwgd2FsayBpdCBiYWNrIGFuZCBjb250aW51ZS5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50c1RyeVBhcnNlQW5kQ2F0Y2goKCkgPT4ge1xuICAgICAgICAgIGlmICghbm9DYWxscyAmJiB0aGlzLmF0UG9zc2libGVBc3luY0Fycm93KGJhc2UpKSB7XG4gICAgICAgICAgICAvLyBBbG1vc3QgY2VydGFpbmx5IHRoaXMgaXMgYSBnZW5lcmljIGFzeW5jIGZ1bmN0aW9uIGBhc3luYyA8VD4oKSA9PiAuLi5cbiAgICAgICAgICAgIC8vIEJ1dCBpdCBtaWdodCBiZSBhIGNhbGwgd2l0aCBhIHR5cGUgYXJndW1lbnQgYGFzeW5jPFQ+KCk7YFxuICAgICAgICAgICAgY29uc3QgYXN5bmNBcnJvd0ZuID0gdGhpcy50c1RyeVBhcnNlR2VuZXJpY0FzeW5jQXJyb3dGdW5jdGlvbihcbiAgICAgICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChhc3luY0Fycm93Rm4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFzeW5jQXJyb3dGbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBub2RlOiBOLkNhbGxFeHByZXNzaW9uID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICAgIG5vZGUuY2FsbGVlID0gYmFzZTtcblxuICAgICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudHMgPSB0aGlzLnRzUGFyc2VUeXBlQXJndW1lbnRzKCk7XG5cbiAgICAgICAgICBpZiAodHlwZUFyZ3VtZW50cykge1xuICAgICAgICAgICAgaWYgKCFub0NhbGxzICYmIHRoaXMuZWF0KHR0LnBhcmVuTCkpIHtcbiAgICAgICAgICAgICAgLy8gcG9zc2libGVBc3luYyBhbHdheXMgZmFsc2UgaGVyZSwgYmVjYXVzZSB3ZSB3b3VsZCBoYXZlIGhhbmRsZWQgaXQgYWJvdmUuXG4gICAgICAgICAgICAgIC8vICRGbG93SWdub3JlICh3b24ndCBiZSBhbnkgdW5kZWZpbmVkIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgbm9kZS5hcmd1bWVudHMgPSB0aGlzLnBhcnNlQ2FsbEV4cHJlc3Npb25Bcmd1bWVudHMoXG4gICAgICAgICAgICAgICAgdHQucGFyZW5SLFxuICAgICAgICAgICAgICAgIC8qIHBvc3NpYmxlQXN5bmMgKi8gZmFsc2UsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0eXBlQXJndW1lbnRzO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hDYWxsRXhwcmVzc2lvbihub2RlLCBzdGF0ZS5vcHRpb25hbENoYWluTWVtYmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5iYWNrUXVvdGUpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyc2VUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgYmFzZSxcbiAgICAgICAgICAgICAgICBzdGFydFBvcyxcbiAgICAgICAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmVzdWx0LnR5cGVQYXJhbWV0ZXJzID0gdHlwZUFyZ3VtZW50cztcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlU3Vic2NyaXB0KGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgbm9DYWxscywgc3RhdGUpO1xuICAgIH1cblxuICAgIHBhcnNlTmV3QXJndW1lbnRzKG5vZGU6IE4uTmV3RXhwcmVzc2lvbik6IHZvaWQge1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICAvLyB0c1RyeVBhcnNlQW5kQ2F0Y2ggaXMgZXhwZW5zaXZlLCBzbyBhdm9pZCBpZiBub3QgbmVjZXNzYXJ5LlxuICAgICAgICAvLyA5OSUgY2VydGFpbiB0aGlzIGlzIGBuZXcgQzxUPigpO2AuIEJ1dCBtYXkgYmUgYG5ldyBDIDwgVDtgLCB3aGljaCBpcyBhbHNvIGxlZ2FsLlxuICAgICAgICBjb25zdCB0eXBlUGFyYW1ldGVycyA9IHRoaXMudHNUcnlQYXJzZUFuZENhdGNoKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gdGhpcy50c1BhcnNlVHlwZUFyZ3VtZW50cygpO1xuICAgICAgICAgIGlmICghdGhpcy5tYXRjaCh0dC5wYXJlbkwpKSB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgICAgICByZXR1cm4gYXJncztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlUGFyYW1ldGVycykge1xuICAgICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPSB0eXBlUGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdXBlci5wYXJzZU5ld0FyZ3VtZW50cyhub2RlKTtcbiAgICB9XG5cbiAgICBwYXJzZUV4cHJPcChcbiAgICAgIGxlZnQ6IE4uRXhwcmVzc2lvbixcbiAgICAgIGxlZnRTdGFydFBvczogbnVtYmVyLFxuICAgICAgbGVmdFN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICAgIG1pblByZWM6IG51bWJlcixcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgbm9uTnVsbCh0dC5faW4uYmlub3ApID4gbWluUHJlYyAmJlxuICAgICAgICAhdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSAmJlxuICAgICAgICB0aGlzLmlzQ29udGV4dHVhbChcImFzXCIpXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgbm9kZTogTi5Uc0FzRXhwcmVzc2lvbiA9IHRoaXMuc3RhcnROb2RlQXQoXG4gICAgICAgICAgbGVmdFN0YXJ0UG9zLFxuICAgICAgICAgIGxlZnRTdGFydExvYyxcbiAgICAgICAgKTtcbiAgICAgICAgbm9kZS5leHByZXNzaW9uID0gbGVmdDtcbiAgICAgICAgY29uc3QgX2NvbnN0ID0gdGhpcy50c1RyeU5leHRQYXJzZUNvbnN0YW50Q29udGV4dCgpO1xuICAgICAgICBpZiAoX2NvbnN0KSB7XG4gICAgICAgICAgbm9kZS50eXBlQW5ub3RhdGlvbiA9IF9jb25zdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnR5cGVBbm5vdGF0aW9uID0gdGhpcy50c05leHRUaGVuUGFyc2VUeXBlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVFNBc0V4cHJlc3Npb25cIik7XG4gICAgICAgIC8vIHJlc2NhbiBgPGAsIGA+YCBiZWNhdXNlIHRoZXkgd2VyZSBzY2FubmVkIHdoZW4gdGhpcy5zdGF0ZS5pblR5cGUgd2FzIHRydWVcbiAgICAgICAgdGhpcy5yZVNjYW5fbHRfZ3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByT3Aobm9kZSwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXIucGFyc2VFeHByT3AobGVmdCwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMpO1xuICAgIH1cblxuICAgIGNoZWNrUmVzZXJ2ZWRXb3JkKFxuICAgICAgd29yZDogc3RyaW5nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBzdGFydExvYzogbnVtYmVyLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBjaGVja0tleXdvcmRzOiBib29sZWFuLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIGlzQmluZGluZzogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIC8vIERvbid0IGJvdGhlciBjaGVja2luZyBmb3IgVHlwZVNjcmlwdCBjb2RlLlxuICAgICAgLy8gU3RyaWN0IG1vZGUgd29yZHMgbWF5IGJlIGFsbG93ZWQgYXMgaW4gYGRlY2xhcmUgbmFtZXNwYWNlIE4geyBjb25zdCBzdGF0aWM6IG51bWJlcjsgfWAuXG4gICAgICAvLyBBbmQgd2UgaGF2ZSBhIHR5cGUgY2hlY2tlciBhbnl3YXksIHNvIGRvbid0IGJvdGhlciBoYXZpbmcgdGhlIHBhcnNlciBkbyBpdC5cbiAgICB9XG5cbiAgICAvKlxuICAgIERvbid0IGJvdGhlciBkb2luZyB0aGlzIGNoZWNrIGluIFR5cGVTY3JpcHQgY29kZSBiZWNhdXNlOlxuICAgIDEuIFdlIG1heSBoYXZlIGEgbmVzdGVkIGV4cG9ydCBzdGF0ZW1lbnQgd2l0aCB0aGUgc2FtZSBuYW1lOlxuICAgICAgZXhwb3J0IGNvbnN0IHggPSAwO1xuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBOIHtcbiAgICAgICAgZXhwb3J0IGNvbnN0IHggPSAxO1xuICAgICAgfVxuICAgIDIuIFdlIGhhdmUgYSB0eXBlIGNoZWNrZXIgdG8gd2FybiB1cyBhYm91dCB0aGlzIHNvcnQgb2YgdGhpbmcuXG4gICAgKi9cbiAgICBjaGVja0R1cGxpY2F0ZUV4cG9ydHMoKSB7fVxuXG4gICAgcGFyc2VJbXBvcnQobm9kZTogTi5Ob2RlKTogTi5BbnlJbXBvcnQge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQubmFtZSkgfHwgdGhpcy5tYXRjaCh0dC5zdGFyKSB8fCB0aGlzLm1hdGNoKHR0LmJyYWNlTCkpIHtcbiAgICAgICAgY29uc3QgYWhlYWQgPSB0aGlzLmxvb2thaGVhZCgpO1xuXG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0Lm5hbWUpICYmIGFoZWFkLnR5cGUgPT09IHR0LmVxKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHNQYXJzZUltcG9ydEVxdWFsc0RlY2xhcmF0aW9uKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuaXNDb250ZXh0dWFsKFwidHlwZVwiKSAmJlxuICAgICAgICAgIC8vIGltcG9ydCB0eXBlLCB7IGEgfSBmcm9tIFwiYlwiO1xuICAgICAgICAgIGFoZWFkLnR5cGUgIT09IHR0LmNvbW1hICYmXG4gICAgICAgICAgLy8gaW1wb3J0IHR5cGUgZnJvbSBcImFcIjtcbiAgICAgICAgICAhKGFoZWFkLnR5cGUgPT09IHR0Lm5hbWUgJiYgYWhlYWQudmFsdWUgPT09IFwiZnJvbVwiKVxuICAgICAgICApIHtcbiAgICAgICAgICBub2RlLmltcG9ydEtpbmQgPSBcInR5cGVcIjtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLmltcG9ydEtpbmQgPSBcInZhbHVlXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgaW1wb3J0Tm9kZSA9IHN1cGVyLnBhcnNlSW1wb3J0KG5vZGUpO1xuICAgICAgLyo6OiBpbnZhcmlhbnQoaW1wb3J0Tm9kZS50eXBlICE9PSBcIlRTSW1wb3J0RXF1YWxzRGVjbGFyYXRpb25cIikgKi9cblxuICAgICAgLy8gYGltcG9ydCB0eXBlYCBjYW4gb25seSBiZSB1c2VkIG9uIGltcG9ydHMgd2l0aCBuYW1lZCBpbXBvcnRzIG9yIHdpdGggYVxuICAgICAgLy8gZGVmYXVsdCBpbXBvcnQgLSBidXQgbm90IGJvdGhcbiAgICAgIGlmIChcbiAgICAgICAgaW1wb3J0Tm9kZS5pbXBvcnRLaW5kID09PSBcInR5cGVcIiAmJlxuICAgICAgICBpbXBvcnROb2RlLnNwZWNpZmllcnMubGVuZ3RoID4gMSAmJlxuICAgICAgICBpbXBvcnROb2RlLnNwZWNpZmllcnNbMF0udHlwZSA9PT0gXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCJcbiAgICAgICkge1xuICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgIGltcG9ydE5vZGUuc3RhcnQsXG4gICAgICAgICAgXCJBIHR5cGUtb25seSBpbXBvcnQgY2FuIHNwZWNpZnkgYSBkZWZhdWx0IGltcG9ydCBvciBuYW1lZCBiaW5kaW5ncywgYnV0IG5vdCBib3RoLlwiLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW1wb3J0Tm9kZTtcbiAgICB9XG5cbiAgICBwYXJzZUV4cG9ydChub2RlOiBOLk5vZGUpOiBOLkFueUV4cG9ydCB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5faW1wb3J0KSkge1xuICAgICAgICAvLyBgZXhwb3J0IGltcG9ydCBBID0gQjtgXG4gICAgICAgIHRoaXMuZXhwZWN0KHR0Ll9pbXBvcnQpO1xuICAgICAgICByZXR1cm4gdGhpcy50c1BhcnNlSW1wb3J0RXF1YWxzRGVjbGFyYXRpb24obm9kZSwgLyogaXNFeHBvcnQgKi8gdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWF0KHR0LmVxKSkge1xuICAgICAgICAvLyBgZXhwb3J0ID0geDtgXG4gICAgICAgIGNvbnN0IGFzc2lnbjogTi5Uc0V4cG9ydEFzc2lnbm1lbnQgPSBub2RlO1xuICAgICAgICBhc3NpZ24uZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoYXNzaWduLCBcIlRTRXhwb3J0QXNzaWdubWVudFwiKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgICAgLy8gYGV4cG9ydCBhcyBuYW1lc3BhY2UgQTtgXG4gICAgICAgIGNvbnN0IGRlY2w6IE4uVHNOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvbiA9IG5vZGU7XG4gICAgICAgIC8vIFNlZSBgcGFyc2VOYW1lc3BhY2VFeHBvcnREZWNsYXJhdGlvbmAgaW4gVHlwZVNjcmlwdCdzIG93biBwYXJzZXJcbiAgICAgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwibmFtZXNwYWNlXCIpO1xuICAgICAgICBkZWNsLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShkZWNsLCBcIlRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb25cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJ0eXBlXCIpICYmIHRoaXMubG9va2FoZWFkKCkudHlwZSA9PT0gdHQuYnJhY2VMKSB7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgbm9kZS5leHBvcnRLaW5kID0gXCJ0eXBlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5leHBvcnRLaW5kID0gXCJ2YWx1ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRXhwb3J0KG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlzQWJzdHJhY3RDbGFzcygpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuaXNDb250ZXh0dWFsKFwiYWJzdHJhY3RcIikgJiYgdGhpcy5sb29rYWhlYWQoKS50eXBlID09PSB0dC5fY2xhc3NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcGFyc2VFeHBvcnREZWZhdWx0RXhwcmVzc2lvbigpOiBOLkV4cHJlc3Npb24gfCBOLkRlY2xhcmF0aW9uIHtcbiAgICAgIGlmICh0aGlzLmlzQWJzdHJhY3RDbGFzcygpKSB7XG4gICAgICAgIGNvbnN0IGNscyA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpOyAvLyBTa2lwIFwiYWJzdHJhY3RcIlxuICAgICAgICB0aGlzLnBhcnNlQ2xhc3MoY2xzLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgY2xzLmFic3RyYWN0ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGNscztcbiAgICAgIH1cblxuICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIGFsbG93ZWQgaW46XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xNjA0MFxuICAgICAgaWYgKHRoaXMuc3RhdGUudmFsdWUgPT09IFwiaW50ZXJmYWNlXCIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50c1BhcnNlRGVjbGFyYXRpb24oXG4gICAgICAgICAgdGhpcy5zdGFydE5vZGUoKSxcbiAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlRXhwb3J0RGVmYXVsdEV4cHJlc3Npb24oKTtcbiAgICB9XG5cbiAgICBwYXJzZVN0YXRlbWVudENvbnRlbnQoY29udGV4dDogP3N0cmluZywgdG9wTGV2ZWw6ID9ib29sZWFuKTogTi5TdGF0ZW1lbnQge1xuICAgICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PT0gdHQuX2NvbnN0KSB7XG4gICAgICAgIGNvbnN0IGFoZWFkID0gdGhpcy5sb29rYWhlYWQoKTtcbiAgICAgICAgaWYgKGFoZWFkLnR5cGUgPT09IHR0Lm5hbWUgJiYgYWhlYWQudmFsdWUgPT09IFwiZW51bVwiKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZTogTi5Uc0VudW1EZWNsYXJhdGlvbiA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgICAgdGhpcy5leHBlY3QodHQuX2NvbnN0KTtcbiAgICAgICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJlbnVtXCIpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VFbnVtRGVjbGFyYXRpb24obm9kZSwgLyogaXNDb25zdCAqLyB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlU3RhdGVtZW50Q29udGVudChjb250ZXh0LCB0b3BMZXZlbCk7XG4gICAgfVxuXG4gICAgcGFyc2VBY2Nlc3NNb2RpZmllcigpOiA/Ti5BY2Nlc3NpYmlsaXR5IHtcbiAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VNb2RpZmllcihbXCJwdWJsaWNcIiwgXCJwcm90ZWN0ZWRcIiwgXCJwcml2YXRlXCJdKTtcbiAgICB9XG5cbiAgICBwYXJzZUNsYXNzTWVtYmVyKFxuICAgICAgY2xhc3NCb2R5OiBOLkNsYXNzQm9keSxcbiAgICAgIG1lbWJlcjogYW55LFxuICAgICAgc3RhdGU6IHsgaGFkQ29uc3RydWN0b3I6IGJvb2xlYW4gfSxcbiAgICAgIGNvbnN0cnVjdG9yQWxsb3dzU3VwZXI6IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICB0aGlzLnRzUGFyc2VNb2RpZmllcnMobWVtYmVyLCBbXCJkZWNsYXJlXCJdKTtcbiAgICAgIGNvbnN0IGFjY2Vzc2liaWxpdHkgPSB0aGlzLnBhcnNlQWNjZXNzTW9kaWZpZXIoKTtcbiAgICAgIGlmIChhY2Nlc3NpYmlsaXR5KSBtZW1iZXIuYWNjZXNzaWJpbGl0eSA9IGFjY2Vzc2liaWxpdHk7XG4gICAgICB0aGlzLnRzUGFyc2VNb2RpZmllcnMobWVtYmVyLCBbXCJkZWNsYXJlXCJdKTtcblxuICAgICAgc3VwZXIucGFyc2VDbGFzc01lbWJlcihjbGFzc0JvZHksIG1lbWJlciwgc3RhdGUsIGNvbnN0cnVjdG9yQWxsb3dzU3VwZXIpO1xuICAgIH1cblxuICAgIHBhcnNlQ2xhc3NNZW1iZXJXaXRoSXNTdGF0aWMoXG4gICAgICBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LFxuICAgICAgbWVtYmVyOiBOLkNsYXNzTWVtYmVyIHwgTi5Uc0luZGV4U2lnbmF0dXJlLFxuICAgICAgc3RhdGU6IHsgaGFkQ29uc3RydWN0b3I6IGJvb2xlYW4gfSxcbiAgICAgIGlzU3RhdGljOiBib29sZWFuLFxuICAgICAgY29uc3RydWN0b3JBbGxvd3NTdXBlcjogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIHRoaXMudHNQYXJzZU1vZGlmaWVycyhtZW1iZXIsIFtcImFic3RyYWN0XCIsIFwicmVhZG9ubHlcIiwgXCJkZWNsYXJlXCJdKTtcblxuICAgICAgY29uc3QgaWR4ID0gdGhpcy50c1RyeVBhcnNlSW5kZXhTaWduYXR1cmUobWVtYmVyKTtcbiAgICAgIGlmIChpZHgpIHtcbiAgICAgICAgY2xhc3NCb2R5LmJvZHkucHVzaChpZHgpO1xuXG4gICAgICAgIGlmICgobWVtYmVyOiBhbnkpLmFic3RyYWN0KSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShtZW1iZXIuc3RhcnQsIFRTRXJyb3JzLkluZGV4U2lnbmF0dXJlSGFzQWJzdHJhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICAgIHRoaXMucmFpc2UobWVtYmVyLnN0YXJ0LCBUU0Vycm9ycy5JbmRleFNpZ25hdHVyZUhhc1N0YXRpYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtZW1iZXI6IGFueSkuYWNjZXNzaWJpbGl0eSkge1xuICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICBtZW1iZXIuc3RhcnQsXG4gICAgICAgICAgICBUU0Vycm9ycy5JbmRleFNpZ25hdHVyZUhhc0FjY2Vzc2liaWxpdHksXG4gICAgICAgICAgICAobWVtYmVyOiBhbnkpLmFjY2Vzc2liaWxpdHksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLyo6OiBpbnZhcmlhbnQobWVtYmVyLnR5cGUgIT09IFwiVFNJbmRleFNpZ25hdHVyZVwiKSAqL1xuXG4gICAgICBzdXBlci5wYXJzZUNsYXNzTWVtYmVyV2l0aElzU3RhdGljKFxuICAgICAgICBjbGFzc0JvZHksXG4gICAgICAgIG1lbWJlcixcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGlzU3RhdGljLFxuICAgICAgICBjb25zdHJ1Y3RvckFsbG93c1N1cGVyLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBwYXJzZVBvc3RNZW1iZXJOYW1lTW9kaWZpZXJzKFxuICAgICAgbWV0aG9kT3JQcm9wOiBOLkNsYXNzTWV0aG9kIHwgTi5DbGFzc1Byb3BlcnR5IHwgTi5DbGFzc1ByaXZhdGVQcm9wZXJ0eSxcbiAgICApOiB2b2lkIHtcbiAgICAgIGNvbnN0IG9wdGlvbmFsID0gdGhpcy5lYXQodHQucXVlc3Rpb24pO1xuICAgICAgaWYgKG9wdGlvbmFsKSBtZXRob2RPclByb3Aub3B0aW9uYWwgPSB0cnVlO1xuXG4gICAgICBpZiAoKG1ldGhvZE9yUHJvcDogYW55KS5yZWFkb25seSAmJiB0aGlzLm1hdGNoKHR0LnBhcmVuTCkpIHtcbiAgICAgICAgdGhpcy5yYWlzZShtZXRob2RPclByb3Auc3RhcnQsIFRTRXJyb3JzLkNsYXNzTWV0aG9kSGFzUmVhZG9ubHkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKG1ldGhvZE9yUHJvcDogYW55KS5kZWNsYXJlICYmIHRoaXMubWF0Y2godHQucGFyZW5MKSkge1xuICAgICAgICB0aGlzLnJhaXNlKG1ldGhvZE9yUHJvcC5zdGFydCwgVFNFcnJvcnMuQ2xhc3NNZXRob2RIYXNEZWNsYXJlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOb3RlOiBUaGUgcmVhc29uIHdlIGRvIHRoaXMgaW4gYHBhcnNlRXhwcmVzc2lvblN0YXRlbWVudGAgYW5kIG5vdCBgcGFyc2VTdGF0ZW1lbnRgXG4gICAgLy8gaXMgdGhhdCBlLmcuIGB0eXBlKClgIGlzIHZhbGlkIEpTLCBzbyB3ZSBtdXN0IHRyeSBwYXJzaW5nIHRoYXQgZmlyc3QuXG4gICAgLy8gSWYgaXQncyByZWFsbHkgYSB0eXBlLCB3ZSB3aWxsIHBhcnNlIGB0eXBlYCBhcyB0aGUgc3RhdGVtZW50LCBhbmQgY2FuIGNvcnJlY3QgaXQgaGVyZVxuICAgIC8vIGJ5IHBhcnNpbmcgdGhlIHJlc3QuXG4gICAgcGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KFxuICAgICAgbm9kZTogTi5FeHByZXNzaW9uU3RhdGVtZW50LFxuICAgICAgZXhwcjogTi5FeHByZXNzaW9uLFxuICAgICk6IE4uU3RhdGVtZW50IHtcbiAgICAgIGNvbnN0IGRlY2wgPVxuICAgICAgICBleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiXG4gICAgICAgICAgPyB0aGlzLnRzUGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUsIGV4cHIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gZGVjbCB8fCBzdXBlci5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSwgZXhwcik7XG4gICAgfVxuXG4gICAgLy8gZXhwb3J0IHR5cGVcbiAgICAvLyBTaG91bGQgYmUgdHJ1ZSBmb3IgYW55dGhpbmcgcGFyc2VkIGJ5IGB0c1RyeVBhcnNlRXhwb3J0RGVjbGFyYXRpb25gLlxuICAgIHNob3VsZFBhcnNlRXhwb3J0RGVjbGFyYXRpb24oKTogYm9vbGVhbiB7XG4gICAgICBpZiAodGhpcy50c0lzRGVjbGFyYXRpb25TdGFydCgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBzdXBlci5zaG91bGRQYXJzZUV4cG9ydERlY2xhcmF0aW9uKCk7XG4gICAgfVxuXG4gICAgLy8gQW4gYXBwYXJlbnQgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBjb3VsZCBhY3R1YWxseSBiZSBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgaW4gYW4gYXJyb3cgZnVuY3Rpb24uXG4gICAgcGFyc2VDb25kaXRpb25hbChcbiAgICAgIGV4cHI6IE4uRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgICApOiBOLkV4cHJlc3Npb24ge1xuICAgICAgLy8gb25seSBkbyB0aGUgZXhwZW5zaXZlIGNsb25lIGlmIHRoZXJlIGlzIGEgcXVlc3Rpb24gbWFya1xuICAgICAgLy8gYW5kIGlmIHdlIGNvbWUgZnJvbSBpbnNpZGUgcGFyZW5zXG4gICAgICBpZiAoIXJlZk5lZWRzQXJyb3dQb3MgfHwgIXRoaXMubWF0Y2godHQucXVlc3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5wYXJzZUNvbmRpdGlvbmFsKFxuICAgICAgICAgIGV4cHIsXG4gICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgc3RhcnRMb2MsXG4gICAgICAgICAgcmVmTmVlZHNBcnJvd1BvcyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50cnlQYXJzZSgoKSA9PlxuICAgICAgICBzdXBlci5wYXJzZUNvbmRpdGlvbmFsKGV4cHIsIHN0YXJ0UG9zLCBzdGFydExvYyksXG4gICAgICApO1xuXG4gICAgICBpZiAoIXJlc3VsdC5ub2RlKSB7XG4gICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgIHJlZk5lZWRzQXJyb3dQb3Muc3RhcnQgPSByZXN1bHQuZXJyb3IucG9zIHx8IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICAgIHJldHVybiBleHByO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhpcy5zdGF0ZSA9IHJlc3VsdC5mYWlsU3RhdGU7XG4gICAgICByZXR1cm4gcmVzdWx0Lm5vZGU7XG4gICAgfVxuXG4gICAgLy8gTm90ZTogVGhlc2UgXCJ0eXBlIGNhc3RzXCIgYXJlICpub3QqIHZhbGlkIFRTIGV4cHJlc3Npb25zLlxuICAgIC8vIEJ1dCB3ZSBwYXJzZSB0aGVtIGhlcmUgYW5kIGNoYW5nZSB0aGVtIHdoZW4gY29tcGxldGluZyB0aGUgYXJyb3cgZnVuY3Rpb24uXG4gICAgcGFyc2VQYXJlbkl0ZW0oXG4gICAgICBub2RlOiBOLkV4cHJlc3Npb24sXG4gICAgICBzdGFydFBvczogbnVtYmVyLFxuICAgICAgc3RhcnRMb2M6IFBvc2l0aW9uLFxuICAgICk6IE4uRXhwcmVzc2lvbiB7XG4gICAgICBub2RlID0gc3VwZXIucGFyc2VQYXJlbkl0ZW0obm9kZSwgc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5xdWVzdGlvbikpIHtcbiAgICAgICAgbm9kZS5vcHRpb25hbCA9IHRydWU7XG4gICAgICAgIC8vIEluY2x1ZGUgcXVlc3Rpb25tYXJrIGluIGxvY2F0aW9uIG9mIG5vZGVcbiAgICAgICAgLy8gRG9uJ3QgdXNlIHRoaXMuZmluaXNoTm9kZSgpIGFzIG90aGVyd2lzZSB3ZSBtaWdodCBwcm9jZXNzIGNvbW1lbnRzIHR3aWNlIGFuZFxuICAgICAgICAvLyBpbmNsdWRlIGFscmVhZHkgY29uc3VtZWQgcGFyZW5zXG4gICAgICAgIHRoaXMucmVzZXRFbmRMb2NhdGlvbihub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuY29sb24pKSB7XG4gICAgICAgIGNvbnN0IHR5cGVDYXN0Tm9kZTogTi5Uc1R5cGVDYXN0RXhwcmVzc2lvbiA9IHRoaXMuc3RhcnROb2RlQXQoXG4gICAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgICAgc3RhcnRMb2MsXG4gICAgICAgICk7XG4gICAgICAgIHR5cGVDYXN0Tm9kZS5leHByZXNzaW9uID0gbm9kZTtcbiAgICAgICAgdHlwZUNhc3ROb2RlLnR5cGVBbm5vdGF0aW9uID0gdGhpcy50c1BhcnNlVHlwZUFubm90YXRpb24oKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHR5cGVDYXN0Tm9kZSwgXCJUU1R5cGVDYXN0RXhwcmVzc2lvblwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgcGFyc2VFeHBvcnREZWNsYXJhdGlvbihub2RlOiBOLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24pOiA/Ti5EZWNsYXJhdGlvbiB7XG4gICAgICAvLyBTdG9yZSBvcmlnaW5hbCBsb2NhdGlvbi9wb3NpdGlvblxuICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuXG4gICAgICAvLyBcImV4cG9ydCBkZWNsYXJlXCIgaXMgZXF1aXZhbGVudCB0byBqdXN0IFwiZXhwb3J0XCIuXG4gICAgICBjb25zdCBpc0RlY2xhcmUgPSB0aGlzLmVhdENvbnRleHR1YWwoXCJkZWNsYXJlXCIpO1xuXG4gICAgICBsZXQgZGVjbGFyYXRpb246ID9OLkRlY2xhcmF0aW9uO1xuXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5uYW1lKSkge1xuICAgICAgICBkZWNsYXJhdGlvbiA9IHRoaXMudHNUcnlQYXJzZUV4cG9ydERlY2xhcmF0aW9uKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlY2xhcmF0aW9uKSB7XG4gICAgICAgIGRlY2xhcmF0aW9uID0gc3VwZXIucGFyc2VFeHBvcnREZWNsYXJhdGlvbihub2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgZGVjbGFyYXRpb24gJiZcbiAgICAgICAgKGRlY2xhcmF0aW9uLnR5cGUgPT09IFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiIHx8XG4gICAgICAgICAgZGVjbGFyYXRpb24udHlwZSA9PT0gXCJUU1R5cGVBbGlhc0RlY2xhcmF0aW9uXCIgfHxcbiAgICAgICAgICBpc0RlY2xhcmUpXG4gICAgICApIHtcbiAgICAgICAgbm9kZS5leHBvcnRLaW5kID0gXCJ0eXBlXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWNsYXJhdGlvbiAmJiBpc0RlY2xhcmUpIHtcbiAgICAgICAgLy8gUmVzZXQgbG9jYXRpb24gdG8gaW5jbHVkZSBgZGVjbGFyZWAgaW4gcmFuZ2VcbiAgICAgICAgdGhpcy5yZXNldFN0YXJ0TG9jYXRpb24oZGVjbGFyYXRpb24sIHN0YXJ0UG9zLCBzdGFydExvYyk7XG5cbiAgICAgICAgZGVjbGFyYXRpb24uZGVjbGFyZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWNsYXJhdGlvbjtcbiAgICB9XG5cbiAgICBwYXJzZUNsYXNzSWQoXG4gICAgICBub2RlOiBOLkNsYXNzLFxuICAgICAgaXNTdGF0ZW1lbnQ6IGJvb2xlYW4sXG4gICAgICBvcHRpb25hbElkOiA/Ym9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgIGlmICgoIWlzU3RhdGVtZW50IHx8IG9wdGlvbmFsSWQpICYmIHRoaXMuaXNDb250ZXh0dWFsKFwiaW1wbGVtZW50c1wiKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1cGVyLnBhcnNlQ2xhc3NJZChcbiAgICAgICAgbm9kZSxcbiAgICAgICAgaXNTdGF0ZW1lbnQsXG4gICAgICAgIG9wdGlvbmFsSWQsXG4gICAgICAgIChub2RlOiBhbnkpLmRlY2xhcmUgPyBCSU5EX1RTX0FNQklFTlQgOiBCSU5EX0NMQVNTLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1RyeVBhcnNlVHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgIGlmICh0eXBlUGFyYW1ldGVycykgbm9kZS50eXBlUGFyYW1ldGVycyA9IHR5cGVQYXJhbWV0ZXJzO1xuICAgIH1cblxuICAgIHBhcnNlQ2xhc3NQcm9wZXJ0eUFubm90YXRpb24oXG4gICAgICBub2RlOiBOLkNsYXNzUHJvcGVydHkgfCBOLkNsYXNzUHJpdmF0ZVByb3BlcnR5LFxuICAgICk6IHZvaWQge1xuICAgICAgaWYgKCFub2RlLm9wdGlvbmFsICYmIHRoaXMuZWF0KHR0LmJhbmcpKSB7XG4gICAgICAgIG5vZGUuZGVmaW5pdGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0eXBlID0gdGhpcy50c1RyeVBhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIGlmICh0eXBlKSBub2RlLnR5cGVBbm5vdGF0aW9uID0gdHlwZTtcbiAgICB9XG5cbiAgICBwYXJzZUNsYXNzUHJvcGVydHkobm9kZTogTi5DbGFzc1Byb3BlcnR5KTogTi5DbGFzc1Byb3BlcnR5IHtcbiAgICAgIHRoaXMucGFyc2VDbGFzc1Byb3BlcnR5QW5ub3RhdGlvbihub2RlKTtcblxuICAgICAgaWYgKG5vZGUuZGVjbGFyZSAmJiB0aGlzLm1hdGNoKHR0LmVxdWFsKSkge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIFRTRXJyb3JzLkRlY2xhcmVDbGFzc0ZpZWxkSGFzSW5pdGlhbGl6ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXIucGFyc2VDbGFzc1Byb3BlcnR5KG5vZGUpO1xuICAgIH1cblxuICAgIHBhcnNlQ2xhc3NQcml2YXRlUHJvcGVydHkoXG4gICAgICBub2RlOiBOLkNsYXNzUHJpdmF0ZVByb3BlcnR5LFxuICAgICk6IE4uQ2xhc3NQcml2YXRlUHJvcGVydHkge1xuICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgIGlmIChub2RlLmFic3RyYWN0KSB7XG4gICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgVFNFcnJvcnMuUHJpdmF0ZUVsZW1lbnRIYXNBYnN0cmFjdCk7XG4gICAgICB9XG5cbiAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICBpZiAobm9kZS5hY2Nlc3NpYmlsaXR5KSB7XG4gICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgbm9kZS5zdGFydCxcbiAgICAgICAgICBUU0Vycm9ycy5Qcml2YXRlRWxlbWVudEhhc0FjY2Vzc2liaWxpdHksXG4gICAgICAgICAgbm9kZS5hY2Nlc3NpYmlsaXR5LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhcnNlQ2xhc3NQcm9wZXJ0eUFubm90YXRpb24obm9kZSk7XG4gICAgICByZXR1cm4gc3VwZXIucGFyc2VDbGFzc1ByaXZhdGVQcm9wZXJ0eShub2RlKTtcbiAgICB9XG5cbiAgICBwdXNoQ2xhc3NNZXRob2QoXG4gICAgICBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LFxuICAgICAgbWV0aG9kOiBOLkNsYXNzTWV0aG9kLFxuICAgICAgaXNHZW5lcmF0b3I6IGJvb2xlYW4sXG4gICAgICBpc0FzeW5jOiBib29sZWFuLFxuICAgICAgaXNDb25zdHJ1Y3RvcjogYm9vbGVhbixcbiAgICAgIGFsbG93c0RpcmVjdFN1cGVyOiBib29sZWFuLFxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgdHlwZVBhcmFtZXRlcnMgPSB0aGlzLnRzVHJ5UGFyc2VUeXBlUGFyYW1ldGVycygpO1xuICAgICAgaWYgKHR5cGVQYXJhbWV0ZXJzKSBtZXRob2QudHlwZVBhcmFtZXRlcnMgPSB0eXBlUGFyYW1ldGVycztcbiAgICAgIHN1cGVyLnB1c2hDbGFzc01ldGhvZChcbiAgICAgICAgY2xhc3NCb2R5LFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIGlzR2VuZXJhdG9yLFxuICAgICAgICBpc0FzeW5jLFxuICAgICAgICBpc0NvbnN0cnVjdG9yLFxuICAgICAgICBhbGxvd3NEaXJlY3RTdXBlcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHVzaENsYXNzUHJpdmF0ZU1ldGhvZChcbiAgICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgICBtZXRob2Q6IE4uQ2xhc3NQcml2YXRlTWV0aG9kLFxuICAgICAgaXNHZW5lcmF0b3I6IGJvb2xlYW4sXG4gICAgICBpc0FzeW5jOiBib29sZWFuLFxuICAgICk6IHZvaWQge1xuICAgICAgY29uc3QgdHlwZVBhcmFtZXRlcnMgPSB0aGlzLnRzVHJ5UGFyc2VUeXBlUGFyYW1ldGVycygpO1xuICAgICAgaWYgKHR5cGVQYXJhbWV0ZXJzKSBtZXRob2QudHlwZVBhcmFtZXRlcnMgPSB0eXBlUGFyYW1ldGVycztcbiAgICAgIHN1cGVyLnB1c2hDbGFzc1ByaXZhdGVNZXRob2QoY2xhc3NCb2R5LCBtZXRob2QsIGlzR2VuZXJhdG9yLCBpc0FzeW5jKTtcbiAgICB9XG5cbiAgICBwYXJzZUNsYXNzU3VwZXIobm9kZTogTi5DbGFzcyk6IHZvaWQge1xuICAgICAgc3VwZXIucGFyc2VDbGFzc1N1cGVyKG5vZGUpO1xuICAgICAgaWYgKG5vZGUuc3VwZXJDbGFzcyAmJiB0aGlzLmlzUmVsYXRpb25hbChcIjxcIikpIHtcbiAgICAgICAgbm9kZS5zdXBlclR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1BhcnNlVHlwZUFyZ3VtZW50cygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImltcGxlbWVudHNcIikpIHtcbiAgICAgICAgbm9kZS5pbXBsZW1lbnRzID0gdGhpcy50c1BhcnNlSGVyaXRhZ2VDbGF1c2UoXCJpbXBsZW1lbnRzXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlT2JqUHJvcFZhbHVlKHByb3A6IE4uT2JqZWN0TWVtYmVyLCAuLi5hcmdzKTogdm9pZCB7XG4gICAgICBjb25zdCB0eXBlUGFyYW1ldGVycyA9IHRoaXMudHNUcnlQYXJzZVR5cGVQYXJhbWV0ZXJzKCk7XG4gICAgICBpZiAodHlwZVBhcmFtZXRlcnMpIHByb3AudHlwZVBhcmFtZXRlcnMgPSB0eXBlUGFyYW1ldGVycztcblxuICAgICAgc3VwZXIucGFyc2VPYmpQcm9wVmFsdWUocHJvcCwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgcGFyc2VGdW5jdGlvblBhcmFtcyhub2RlOiBOLkZ1bmN0aW9uLCBhbGxvd01vZGlmaWVycz86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgIGNvbnN0IHR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1RyeVBhcnNlVHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgIGlmICh0eXBlUGFyYW1ldGVycykgbm9kZS50eXBlUGFyYW1ldGVycyA9IHR5cGVQYXJhbWV0ZXJzO1xuICAgICAgc3VwZXIucGFyc2VGdW5jdGlvblBhcmFtcyhub2RlLCBhbGxvd01vZGlmaWVycyk7XG4gICAgfVxuXG4gICAgLy8gYGxldCB4OiBudW1iZXI7YFxuICAgIHBhcnNlVmFySWQoXG4gICAgICBkZWNsOiBOLlZhcmlhYmxlRGVjbGFyYXRvcixcbiAgICAgIGtpbmQ6IFwidmFyXCIgfCBcImxldFwiIHwgXCJjb25zdFwiLFxuICAgICk6IHZvaWQge1xuICAgICAgc3VwZXIucGFyc2VWYXJJZChkZWNsLCBraW5kKTtcbiAgICAgIGlmIChkZWNsLmlkLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHRoaXMuZWF0KHR0LmJhbmcpKSB7XG4gICAgICAgIGRlY2wuZGVmaW5pdGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0eXBlID0gdGhpcy50c1RyeVBhcnNlVHlwZUFubm90YXRpb24oKTtcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGRlY2wuaWQudHlwZUFubm90YXRpb24gPSB0eXBlO1xuICAgICAgICB0aGlzLnJlc2V0RW5kTG9jYXRpb24oZGVjbC5pZCk7IC8vIHNldCBlbmQgcG9zaXRpb24gdG8gZW5kIG9mIHR5cGVcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZSB0aGUgcmV0dXJuIHR5cGUgb2YgYW4gYXN5bmMgYXJyb3cgZnVuY3Rpb24gLSBsZXQgZm9vID0gKGFzeW5jICgpOiBudW1iZXIgPT4ge30pO1xuICAgIHBhcnNlQXN5bmNBcnJvd0Zyb21DYWxsRXhwcmVzc2lvbihcbiAgICAgIG5vZGU6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgICBjYWxsOiBOLkNhbGxFeHByZXNzaW9uLFxuICAgICk6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ge1xuICAgICAgaWYgKHRoaXMubWF0Y2godHQuY29sb24pKSB7XG4gICAgICAgIG5vZGUucmV0dXJuVHlwZSA9IHRoaXMudHNQYXJzZVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwZXIucGFyc2VBc3luY0Fycm93RnJvbUNhbGxFeHByZXNzaW9uKG5vZGUsIGNhbGwpO1xuICAgIH1cblxuICAgIHBhcnNlTWF5YmVBc3NpZ24oLi4uYXJncyk6IE4uRXhwcmVzc2lvbiB7XG4gICAgICAvLyBOb3RlOiBXaGVuIHRoZSBKU1ggcGx1Z2luIGlzIG9uLCB0eXBlIGFzc2VydGlvbnMgKGA8VD4geGApIGFyZW4ndCB2YWxpZCBzeW50YXguXG5cbiAgICAgIGxldCBzdGF0ZTogP1N0YXRlO1xuICAgICAgbGV0IGpzeDtcbiAgICAgIGxldCB0eXBlQ2FzdDtcblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuanN4VGFnU3RhcnQpKSB7XG4gICAgICAgIC8vIFByZWZlciB0byBwYXJzZSBKU1ggaWYgcG9zc2libGUuIEJ1dCBtYXkgYmUgYW4gYXJyb3cgZm4uXG4gICAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZS5jbG9uZSgpO1xuXG4gICAgICAgIGpzeCA9IHRoaXMudHJ5UGFyc2UoKCkgPT4gc3VwZXIucGFyc2VNYXliZUFzc2lnbiguLi5hcmdzKSwgc3RhdGUpO1xuICAgICAgICAvKjo6IGludmFyaWFudCghanN4LmFib3J0ZWQpICovXG5cbiAgICAgICAgaWYgKCFqc3guZXJyb3IpIHJldHVybiBqc3gubm9kZTtcblxuICAgICAgICAvLyBSZW1vdmUgYHRjLmpfZXhwcmAgYW5kIGB0Yy5qX29UYWdgIGZyb20gY29udGV4dCBhZGRlZFxuICAgICAgICAvLyBieSBwYXJzaW5nIGBqc3hUYWdTdGFydGAgdG8gc3RvcCB0aGUgSlNYIHBsdWdpbiBmcm9tXG4gICAgICAgIC8vIG1lc3Npbmcgd2l0aCB0aGUgdG9rZW5zXG4gICAgICAgIGNvbnN0IHsgY29udGV4dCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGNvbnRleHRbY29udGV4dC5sZW5ndGggLSAxXSA9PT0gY3Qual9vVGFnKSB7XG4gICAgICAgICAgY29udGV4dC5sZW5ndGggLT0gMjtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0W2NvbnRleHQubGVuZ3RoIC0gMV0gPT09IGN0LmpfZXhwcikge1xuICAgICAgICAgIGNvbnRleHQubGVuZ3RoIC09IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFqc3g/LmVycm9yICYmICF0aGlzLmlzUmVsYXRpb25hbChcIjxcIikpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlTWF5YmVBc3NpZ24oLi4uYXJncyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVpdGhlciB3YXksIHdlJ3JlIGxvb2tpbmcgYXQgYSAnPCc6IHR0LmpzeFRhZ1N0YXJ0IG9yIHJlbGF0aW9uYWwuXG5cbiAgICAgIGxldCB0eXBlUGFyYW1ldGVyczogTi5Uc1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbjtcbiAgICAgIHN0YXRlID0gc3RhdGUgfHwgdGhpcy5zdGF0ZS5jbG9uZSgpO1xuXG4gICAgICBjb25zdCBhcnJvdyA9IHRoaXMudHJ5UGFyc2UoYWJvcnQgPT4ge1xuICAgICAgICAvLyBUaGlzIGlzIHNpbWlsYXIgdG8gVHlwZVNjcmlwdCdzIGB0cnlQYXJzZVBhcmVudGhlc2l6ZWRBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbmAuXG4gICAgICAgIHR5cGVQYXJhbWV0ZXJzID0gdGhpcy50c1BhcnNlVHlwZVBhcmFtZXRlcnMoKTtcbiAgICAgICAgY29uc3QgZXhwciA9IHN1cGVyLnBhcnNlTWF5YmVBc3NpZ24oLi4uYXJncyk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV4cHIudHlwZSAhPT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiIHx8XG4gICAgICAgICAgKGV4cHIuZXh0cmEgJiYgZXhwci5leHRyYS5wYXJlbnRoZXNpemVkKVxuICAgICAgICApIHtcbiAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29ycmVjdCBUeXBlU2NyaXB0IGNvZGUgc2hvdWxkIGhhdmUgYXQgbGVhc3QgMSB0eXBlIHBhcmFtZXRlciwgYnV0IGRvbid0IGNyYXNoIG9uIGJhZCBjb2RlLlxuICAgICAgICBpZiAodHlwZVBhcmFtZXRlcnM/LnBhcmFtcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICB0aGlzLnJlc2V0U3RhcnRMb2NhdGlvbkZyb21Ob2RlKGV4cHIsIHR5cGVQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBleHByLnR5cGVQYXJhbWV0ZXJzID0gdHlwZVBhcmFtZXRlcnM7XG4gICAgICAgIHJldHVybiBleHByO1xuICAgICAgfSwgc3RhdGUpO1xuXG4gICAgICBpZiAoIWFycm93LmVycm9yICYmICFhcnJvdy5hYm9ydGVkKSByZXR1cm4gYXJyb3cubm9kZTtcblxuICAgICAgaWYgKCFqc3gpIHtcbiAgICAgICAgLy8gVHJ5IHBhcnNpbmcgYSB0eXBlIGNhc3QgaW5zdGVhZCBvZiBhbiBhcnJvdyBmdW5jdGlvbi5cbiAgICAgICAgLy8gVGhpcyB3aWxsIG5ldmVyIGhhcHBlbiBvdXRzaWRlIG9mIEpTWC5cbiAgICAgICAgLy8gKEJlY2F1c2UgaW4gSlNYIHRoZSAnPCcgc2hvdWxkIGJlIGEganN4VGFnU3RhcnQgYW5kIG5vdCBhIHJlbGF0aW9uYWwuXG4gICAgICAgIGFzc2VydCghdGhpcy5oYXNQbHVnaW4oXCJqc3hcIikpO1xuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBzdGFydCB3aXRoIGEgdHlwZSBhc3NlcnRpb24gKHZpYSBwYXJzZU1heWJlVW5hcnkpLlxuICAgICAgICAvLyBCdXQgZG9uJ3QgZGlyZWN0bHkgY2FsbCBgdGhpcy50c1BhcnNlVHlwZUFzc2VydGlvbmAgYmVjYXVzZSB3ZSB3YW50IHRvIGhhbmRsZSBhbnkgYmluYXJ5IGFmdGVyIGl0LlxuICAgICAgICB0eXBlQ2FzdCA9IHRoaXMudHJ5UGFyc2UoKCkgPT4gc3VwZXIucGFyc2VNYXliZUFzc2lnbiguLi5hcmdzKSwgc3RhdGUpO1xuICAgICAgICAvKjo6IGludmFyaWFudCghdHlwZUNhc3QuYWJvcnRlZCkgKi9cbiAgICAgICAgaWYgKCF0eXBlQ2FzdC5lcnJvcikgcmV0dXJuIHR5cGVDYXN0Lm5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChqc3g/Lm5vZGUpIHtcbiAgICAgICAgLyo6OiBpbnZhcmlhbnQoanN4LmZhaWxTdGF0ZSkgKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IGpzeC5mYWlsU3RhdGU7XG4gICAgICAgIHJldHVybiBqc3gubm9kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFycm93Lm5vZGUpIHtcbiAgICAgICAgLyo6OiBpbnZhcmlhbnQoYXJyb3cuZmFpbFN0YXRlKSAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gYXJyb3cuZmFpbFN0YXRlO1xuICAgICAgICByZXR1cm4gYXJyb3cubm9kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVDYXN0Py5ub2RlKSB7XG4gICAgICAgIC8qOjogaW52YXJpYW50KHR5cGVDYXN0LmZhaWxTdGF0ZSkgKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHR5cGVDYXN0LmZhaWxTdGF0ZTtcbiAgICAgICAgcmV0dXJuIHR5cGVDYXN0Lm5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChqc3g/LnRocm93bikgdGhyb3cganN4LmVycm9yO1xuICAgICAgaWYgKGFycm93LnRocm93bikgdGhyb3cgYXJyb3cuZXJyb3I7XG4gICAgICBpZiAodHlwZUNhc3Q/LnRocm93bikgdGhyb3cgdHlwZUNhc3QuZXJyb3I7XG5cbiAgICAgIHRocm93IGpzeD8uZXJyb3IgfHwgYXJyb3cuZXJyb3IgfHwgdHlwZUNhc3Q/LmVycm9yO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0eXBlIGFzc2VydGlvbnNcbiAgICBwYXJzZU1heWJlVW5hcnkocmVmRXhwcmVzc2lvbkVycm9ycz86ID9FeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIGlmICghdGhpcy5oYXNQbHVnaW4oXCJqc3hcIikgJiYgdGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRzUGFyc2VUeXBlQXNzZXJ0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3VwZXIucGFyc2VNYXliZVVuYXJ5KHJlZkV4cHJlc3Npb25FcnJvcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXJyb3cobm9kZTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbik6ID9OLkFycm93RnVuY3Rpb25FeHByZXNzaW9uIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbG9uKSkge1xuICAgICAgICAvLyBUaGlzIGlzIGRpZmZlcmVudCBmcm9tIGhvdyB0aGUgVFMgcGFyc2VyIGRvZXMgaXQuXG4gICAgICAgIC8vIFRTIHVzZXMgbG9va2FoZWFkLiBUaGUgQmFiZWwgUGFyc2VyIHBhcnNlcyBpdCBhcyBhIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbiBhbmQgY29udmVydHMuXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50cnlQYXJzZShhYm9ydCA9PiB7XG4gICAgICAgICAgY29uc3QgcmV0dXJuVHlwZSA9IHRoaXMudHNQYXJzZVR5cGVPclR5cGVQcmVkaWNhdGVBbm5vdGF0aW9uKFxuICAgICAgICAgICAgdHQuY29sb24sXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSB8fCAhdGhpcy5tYXRjaCh0dC5hcnJvdykpIGFib3J0KCk7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblR5cGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQuYWJvcnRlZCkgcmV0dXJuO1xuXG4gICAgICAgIGlmICghcmVzdWx0LnRocm93bikge1xuICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRoaXMuc3RhdGUgPSByZXN1bHQuZmFpbFN0YXRlO1xuICAgICAgICAgIG5vZGUucmV0dXJuVHlwZSA9IHJlc3VsdC5ub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUFycm93KG5vZGUpO1xuICAgIH1cblxuICAgIC8vIEFsbG93IHR5cGUgYW5ub3RhdGlvbnMgaW5zaWRlIG9mIGEgcGFyYW1ldGVyIGxpc3QuXG4gICAgcGFyc2VBc3NpZ25hYmxlTGlzdEl0ZW1UeXBlcyhwYXJhbTogTi5QYXR0ZXJuKSB7XG4gICAgICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XG4gICAgICAgIGlmIChwYXJhbS50eXBlICE9PSBcIklkZW50aWZpZXJcIikge1xuICAgICAgICAgIHRoaXMucmFpc2UocGFyYW0uc3RhcnQsIFRTRXJyb3JzLlBhdHRlcm5Jc09wdGlvbmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgICgocGFyYW06IGFueSk6IE4uSWRlbnRpZmllcikub3B0aW9uYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdHlwZSA9IHRoaXMudHNUcnlQYXJzZVR5cGVBbm5vdGF0aW9uKCk7XG4gICAgICBpZiAodHlwZSkgcGFyYW0udHlwZUFubm90YXRpb24gPSB0eXBlO1xuICAgICAgdGhpcy5yZXNldEVuZExvY2F0aW9uKHBhcmFtKTtcblxuICAgICAgcmV0dXJuIHBhcmFtO1xuICAgIH1cblxuICAgIHRvQXNzaWduYWJsZShub2RlOiBOLk5vZGUpOiBOLk5vZGUge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIlRTVHlwZUNhc3RFeHByZXNzaW9uXCI6XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLnRvQXNzaWduYWJsZSh0aGlzLnR5cGVDYXN0VG9QYXJhbWV0ZXIobm9kZSkpO1xuICAgICAgICBjYXNlIFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiOlxuICAgICAgICAgIHJldHVybiBzdXBlci50b0Fzc2lnbmFibGUobm9kZSk7XG4gICAgICAgIGNhc2UgXCJUU0FzRXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiVFNOb25OdWxsRXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiVFNUeXBlQXNzZXJ0aW9uXCI6XG4gICAgICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy50b0Fzc2lnbmFibGUobm9kZS5leHByZXNzaW9uKTtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gc3VwZXIudG9Bc3NpZ25hYmxlKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrTFZhbChcbiAgICAgIGV4cHI6IE4uRXhwcmVzc2lvbixcbiAgICAgIGJpbmRpbmdUeXBlOiBCaW5kaW5nVHlwZXMgPSBCSU5EX05PTkUsXG4gICAgICBjaGVja0NsYXNoZXM6ID97IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSxcbiAgICAgIGNvbnRleHREZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICk6IHZvaWQge1xuICAgICAgc3dpdGNoIChleHByLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIlRTVHlwZUNhc3RFeHByZXNzaW9uXCI6XG4gICAgICAgICAgLy8gQWxsb3cgXCJ0eXBlY2FzdHNcIiB0byBhcHBlYXIgb24gdGhlIGxlZnQgb2YgYXNzaWdubWVudCBleHByZXNzaW9ucyxcbiAgICAgICAgICAvLyBiZWNhdXNlIGl0IG1heSBiZSBpbiBhbiBhcnJvdyBmdW5jdGlvbi5cbiAgICAgICAgICAvLyBlLmcuIGBjb25zdCBmID0gKGZvbzogbnVtYmVyID0gMCkgPT4gZm9vO2BcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJUU1BhcmFtZXRlclByb3BlcnR5XCI6XG4gICAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgICBleHByLnBhcmFtZXRlcixcbiAgICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgICAgY2hlY2tDbGFzaGVzLFxuICAgICAgICAgICAgXCJwYXJhbWV0ZXIgcHJvcGVydHlcIixcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcIlRTQXNFeHByZXNzaW9uXCI6XG4gICAgICAgIGNhc2UgXCJUU05vbk51bGxFeHByZXNzaW9uXCI6XG4gICAgICAgIGNhc2UgXCJUU1R5cGVBc3NlcnRpb25cIjpcbiAgICAgICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgICAgIGV4cHIuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgICAgY2hlY2tDbGFzaGVzLFxuICAgICAgICAgICAgY29udGV4dERlc2NyaXB0aW9uLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHN1cGVyLmNoZWNrTFZhbChleHByLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzLCBjb250ZXh0RGVzY3JpcHRpb24pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUJpbmRpbmdBdG9tKCk6IE4uUGF0dGVybiB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xuICAgICAgICBjYXNlIHR0Ll90aGlzOlxuICAgICAgICAgIC8vIFwidGhpc1wiIG1heSBiZSB0aGUgbmFtZSBvZiBhIHBhcmFtZXRlciwgc28gYWxsb3cgaXQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJZGVudGlmaWVyKC8qIGxpYmVyYWwgKi8gdHJ1ZSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLnBhcnNlQmluZGluZ0F0b20oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZU1heWJlRGVjb3JhdG9yQXJndW1lbnRzKGV4cHI6IE4uRXhwcmVzc2lvbik6IE4uRXhwcmVzc2lvbiB7XG4gICAgICBpZiAodGhpcy5pc1JlbGF0aW9uYWwoXCI8XCIpKSB7XG4gICAgICAgIGNvbnN0IHR5cGVBcmd1bWVudHMgPSB0aGlzLnRzUGFyc2VUeXBlQXJndW1lbnRzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWF0Y2godHQucGFyZW5MKSkge1xuICAgICAgICAgIGNvbnN0IGNhbGwgPSBzdXBlci5wYXJzZU1heWJlRGVjb3JhdG9yQXJndW1lbnRzKGV4cHIpO1xuICAgICAgICAgIGNhbGwudHlwZVBhcmFtZXRlcnMgPSB0eXBlQXJndW1lbnRzO1xuICAgICAgICAgIHJldHVybiBjYWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKHRoaXMuc3RhdGUuc3RhcnQsIHR0LnBhcmVuTCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZU1heWJlRGVjb3JhdG9yQXJndW1lbnRzKGV4cHIpO1xuICAgIH1cblxuICAgIC8vID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PVxuICAgIC8vIE5vdGU6IEFsbCBiZWxvdyBtZXRob2RzIGFyZSBkdXBsaWNhdGVzIG9mIHNvbWV0aGluZyBpbiBmbG93LmpzLlxuICAgIC8vIE5vdCBzdXJlIHdoYXQgdGhlIGJlc3Qgd2F5IHRvIGNvbWJpbmUgdGhlc2UgaXMuXG4gICAgLy8gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09ID09PSA9PT0gPT09XG5cbiAgICBpc0NsYXNzTWV0aG9kKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSB8fCBzdXBlci5pc0NsYXNzTWV0aG9kKCk7XG4gICAgfVxuXG4gICAgaXNDbGFzc1Byb3BlcnR5KCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5iYW5nKSB8fCB0aGlzLm1hdGNoKHR0LmNvbG9uKSB8fCBzdXBlci5pc0NsYXNzUHJvcGVydHkoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBwYXJzZU1heWJlRGVmYXVsdCguLi5hcmdzKTogTi5QYXR0ZXJuIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBzdXBlci5wYXJzZU1heWJlRGVmYXVsdCguLi5hcmdzKTtcblxuICAgICAgaWYgKFxuICAgICAgICBub2RlLnR5cGUgPT09IFwiQXNzaWdubWVudFBhdHRlcm5cIiAmJlxuICAgICAgICBub2RlLnR5cGVBbm5vdGF0aW9uICYmXG4gICAgICAgIG5vZGUucmlnaHQuc3RhcnQgPCBub2RlLnR5cGVBbm5vdGF0aW9uLnN0YXJ0XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICBub2RlLnR5cGVBbm5vdGF0aW9uLnN0YXJ0LFxuICAgICAgICAgIFRTRXJyb3JzLlR5cGVBbm5vdGF0aW9uQWZ0ZXJBc3NpZ24sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8vIGVuc3VyZSB0aGF0IGluc2lkZSB0eXBlcywgd2UgYnlwYXNzIHRoZSBqc3ggcGFyc2VyIHBsdWdpblxuICAgIGdldFRva2VuRnJvbUNvZGUoY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc3RhdGUuaW5UeXBlICYmXG4gICAgICAgIChjb2RlID09PSBjaGFyQ29kZXMuZ3JlYXRlclRoYW4gfHwgY29kZSA9PT0gY2hhckNvZGVzLmxlc3NUaGFuKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR0LnJlbGF0aW9uYWwsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFRva2VuRnJvbUNvZGUoY29kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXNlZCBhZnRlciB3ZSBoYXZlIGZpbmlzaGVkIHBhcnNpbmcgdHlwZXNcbiAgICByZVNjYW5fbHRfZ3QoKSB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5yZWxhdGlvbmFsKSkge1xuICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUuc3RhcnQpO1xuICAgICAgICBpZiAoY29kZSA9PT0gY2hhckNvZGVzLmxlc3NUaGFuIHx8IGNvZGUgPT09IGNoYXJDb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgICAgIHRoaXMuc3RhdGUucG9zIC09IDE7XG4gICAgICAgICAgdGhpcy5yZWFkVG9rZW5fbHRfZ3QoY29kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0b0Fzc2lnbmFibGVMaXN0KGV4cHJMaXN0OiBOLkV4cHJlc3Npb25bXSk6ICRSZWFkT25seUFycmF5PE4uUGF0dGVybj4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHByTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBleHByID0gZXhwckxpc3RbaV07XG4gICAgICAgIGlmICghZXhwcikgY29udGludWU7XG4gICAgICAgIHN3aXRjaCAoZXhwci50eXBlKSB7XG4gICAgICAgICAgY2FzZSBcIlRTVHlwZUNhc3RFeHByZXNzaW9uXCI6XG4gICAgICAgICAgICBleHByTGlzdFtpXSA9IHRoaXMudHlwZUNhc3RUb1BhcmFtZXRlcihleHByKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJUU0FzRXhwcmVzc2lvblwiOlxuICAgICAgICAgIGNhc2UgXCJUU1R5cGVBc3NlcnRpb25cIjpcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgIGV4cHJMaXN0W2ldID0gdGhpcy50eXBlQ2FzdFRvUGFyYW1ldGVyKGV4cHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5yYWlzZShleHByLnN0YXJ0LCBUU0Vycm9ycy5VbmV4cGVjdGVkVHlwZUNhc3RJblBhcmFtZXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLnRvQXNzaWduYWJsZUxpc3QoLi4uYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICB0eXBlQ2FzdFRvUGFyYW1ldGVyKG5vZGU6IE4uVHNUeXBlQ2FzdEV4cHJlc3Npb24pOiBOLk5vZGUge1xuICAgICAgbm9kZS5leHByZXNzaW9uLnR5cGVBbm5vdGF0aW9uID0gbm9kZS50eXBlQW5ub3RhdGlvbjtcblxuICAgICAgdGhpcy5yZXNldEVuZExvY2F0aW9uKFxuICAgICAgICBub2RlLmV4cHJlc3Npb24sXG4gICAgICAgIG5vZGUudHlwZUFubm90YXRpb24uZW5kLFxuICAgICAgICBub2RlLnR5cGVBbm5vdGF0aW9uLmxvYy5lbmQsXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gbm9kZS5leHByZXNzaW9uO1xuICAgIH1cblxuICAgIHRvUmVmZXJlbmNlZExpc3QoXG4gICAgICBleHByTGlzdDogJFJlYWRPbmx5QXJyYXk8P04uRXhwcmVzc2lvbj4sXG4gICAgICBpc0luUGFyZW5zPzogYm9vbGVhbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICk6ICRSZWFkT25seUFycmF5PD9OLkV4cHJlc3Npb24+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwckxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZXhwciA9IGV4cHJMaXN0W2ldO1xuICAgICAgICBpZiAoZXhwcj8udHlwZSA9PT0gXCJUU1R5cGVDYXN0RXhwcmVzc2lvblwiKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShleHByLnN0YXJ0LCBUU0Vycm9ycy5VbmV4cGVjdGVkVHlwZUFubm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBleHByTGlzdDtcbiAgICB9XG5cbiAgICBzaG91bGRQYXJzZUFycm93KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWF0Y2godHQuY29sb24pIHx8IHN1cGVyLnNob3VsZFBhcnNlQXJyb3coKTtcbiAgICB9XG5cbiAgICBzaG91bGRQYXJzZUFzeW5jQXJyb3coKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5tYXRjaCh0dC5jb2xvbikgfHwgc3VwZXIuc2hvdWxkUGFyc2VBc3luY0Fycm93KCk7XG4gICAgfVxuXG4gICAgY2FuSGF2ZUxlYWRpbmdEZWNvcmF0b3IoKSB7XG4gICAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBsb29rYWhlYWQgaW4gY2hlY2tpbmcgZm9yIGFic3RyYWN0IGNsYXNzIHVubGVzcyBuZWVkZWQhXG4gICAgICByZXR1cm4gc3VwZXIuY2FuSGF2ZUxlYWRpbmdEZWNvcmF0b3IoKSB8fCB0aGlzLmlzQWJzdHJhY3RDbGFzcygpO1xuICAgIH1cblxuICAgIGpzeFBhcnNlT3BlbmluZ0VsZW1lbnRBZnRlck5hbWUoXG4gICAgICBub2RlOiBOLkpTWE9wZW5pbmdFbGVtZW50LFxuICAgICk6IE4uSlNYT3BlbmluZ0VsZW1lbnQge1xuICAgICAgaWYgKHRoaXMuaXNSZWxhdGlvbmFsKFwiPFwiKSkge1xuICAgICAgICBjb25zdCB0eXBlQXJndW1lbnRzID0gdGhpcy50c1RyeVBhcnNlQW5kQ2F0Y2goKCkgPT5cbiAgICAgICAgICB0aGlzLnRzUGFyc2VUeXBlQXJndW1lbnRzKCksXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0eXBlQXJndW1lbnRzKSBub2RlLnR5cGVQYXJhbWV0ZXJzID0gdHlwZUFyZ3VtZW50cztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5qc3hQYXJzZU9wZW5pbmdFbGVtZW50QWZ0ZXJOYW1lKG5vZGUpO1xuICAgIH1cblxuICAgIGdldEdldHRlclNldHRlckV4cGVjdGVkUGFyYW1Db3VudChcbiAgICAgIG1ldGhvZDogTi5PYmplY3RNZXRob2QgfCBOLkNsYXNzTWV0aG9kLFxuICAgICk6IG51bWJlciB7XG4gICAgICBjb25zdCBiYXNlQ291bnQgPSBzdXBlci5nZXRHZXR0ZXJTZXR0ZXJFeHBlY3RlZFBhcmFtQ291bnQobWV0aG9kKTtcbiAgICAgIGNvbnN0IGZpcnN0UGFyYW0gPSBtZXRob2QucGFyYW1zWzBdO1xuICAgICAgY29uc3QgaGFzQ29udGV4dFBhcmFtID1cbiAgICAgICAgZmlyc3RQYXJhbSAmJlxuICAgICAgICBmaXJzdFBhcmFtLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG4gICAgICAgIGZpcnN0UGFyYW0ubmFtZSA9PT0gXCJ0aGlzXCI7XG5cbiAgICAgIHJldHVybiBoYXNDb250ZXh0UGFyYW0gPyBiYXNlQ291bnQgKyAxIDogYmFzZUNvdW50O1xuICAgIH1cblxuICAgIHBhcnNlQ2F0Y2hDbGF1c2VQYXJhbSgpOiBOLlBhdHRlcm4ge1xuICAgICAgY29uc3QgcGFyYW0gPSBzdXBlci5wYXJzZUNhdGNoQ2xhdXNlUGFyYW0oKTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnRzVHJ5UGFyc2VUeXBlQW5ub3RhdGlvbigpO1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBwYXJhbS50eXBlQW5ub3RhdGlvbiA9IHR5cGU7XG4gICAgICAgIHRoaXMucmVzZXRFbmRMb2NhdGlvbihwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9XG4gIH07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyBjaGFyQ29kZXMgZnJvbSBcImNoYXJjb2Rlc1wiO1xuXG5pbXBvcnQgeyB0eXBlcyBhcyB0dCwgVG9rZW5UeXBlIH0gZnJvbSBcIi4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0IHR5cGUgUGFyc2VyIGZyb20gXCIuLi9wYXJzZXJcIjtcbmltcG9ydCAqIGFzIE4gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbnR0LnBsYWNlaG9sZGVyID0gbmV3IFRva2VuVHlwZShcIiUlXCIsIHsgc3RhcnRzRXhwcjogdHJ1ZSB9KTtcblxuZXhwb3J0IHR5cGUgUGxhY2Vob2xkZXJUeXBlcyA9XG4gIHwgXCJJZGVudGlmaWVyXCJcbiAgfCBcIlN0cmluZ0xpdGVyYWxcIlxuICB8IFwiRXhwcmVzc2lvblwiXG4gIHwgXCJTdGF0ZW1lbnRcIlxuICB8IFwiRGVjbGFyYXRpb25cIlxuICB8IFwiQmxvY2tTdGF0ZW1lbnRcIlxuICB8IFwiQ2xhc3NCb2R5XCJcbiAgfCBcIlBhdHRlcm5cIjtcblxuLy8gJFByb3BlcnR5VHlwZSBkb2Vzbid0IHN1cHBvcnQgZW51bXMuIFVzZSBhIGZha2UgXCJzd2l0Y2hcIiAoR2V0UGxhY2Vob2xkZXJOb2RlKVxuLy90eXBlIE1heWJlUGxhY2Vob2xkZXI8VDogUGxhY2Vob2xkZXJUeXBlcz4gPSAkUHJvcGVydHlUeXBlPE4sIFQ+IHwgTi5QbGFjZWhvbGRlcjxUPjtcblxudHlwZSBfU3dpdGNoPFZhbHVlLCBDYXNlcywgSW5kZXg+ID0gJENhbGw8XG4gIChcbiAgICAkRWxlbWVudFR5cGU8JEVsZW1lbnRUeXBlPENhc2VzLCBJbmRleD4sIDA+LFxuICApID0+ICRFbGVtZW50VHlwZTwkRWxlbWVudFR5cGU8Q2FzZXMsIEluZGV4PiwgMT4sXG4gIFZhbHVlLFxuPjtcbnR5cGUgJFN3aXRjaDxWYWx1ZSwgQ2FzZXM+ID0gX1N3aXRjaDxWYWx1ZSwgQ2FzZXMsICo+O1xuXG50eXBlIE5vZGVPZjxUOiBQbGFjZWhvbGRlclR5cGVzPiA9ICRTd2l0Y2g8XG4gIFQsXG4gIFtcbiAgICBbXCJJZGVudGlmaWVyXCIsIE4uSWRlbnRpZmllcl0sXG4gICAgW1wiU3RyaW5nTGl0ZXJhbFwiLCBOLlN0cmluZ0xpdGVyYWxdLFxuICAgIFtcIkV4cHJlc3Npb25cIiwgTi5FeHByZXNzaW9uXSxcbiAgICBbXCJTdGF0ZW1lbnRcIiwgTi5TdGF0ZW1lbnRdLFxuICAgIFtcIkRlY2xhcmF0aW9uXCIsIE4uRGVjbGFyYXRpb25dLFxuICAgIFtcIkJsb2NrU3RhdGVtZW50XCIsIE4uQmxvY2tTdGF0ZW1lbnRdLFxuICAgIFtcIkNsYXNzQm9keVwiLCBOLkNsYXNzQm9keV0sXG4gICAgW1wiUGF0dGVyblwiLCBOLlBhdHRlcm5dLFxuICBdLFxuPjtcblxuLy8gUGxhY2Vob2xkZXI8VD4gYnJlYWtzIGV2ZXJ5dGhpbmcsIGJlY2F1c2UgaXRzIHR5cGUgaXMgaW5jb21wYXRpYmxlIHdpdGhcbi8vIHRoZSBzdWJzdGl0dXRlZCBub2Rlcy5cbnR5cGUgTWF5YmVQbGFjZWhvbGRlcjxUOiBQbGFjZWhvbGRlclR5cGVzPiA9IE5vZGVPZjxUPjsgLy8gfCBQbGFjZWhvbGRlcjxUPlxuXG5leHBvcnQgZGVmYXVsdCAoc3VwZXJDbGFzczogQ2xhc3M8UGFyc2VyPik6IENsYXNzPFBhcnNlcj4gPT5cbiAgY2xhc3MgZXh0ZW5kcyBzdXBlckNsYXNzIHtcbiAgICBwYXJzZVBsYWNlaG9sZGVyPFQ6IFBsYWNlaG9sZGVyVHlwZXM+KFxuICAgICAgZXhwZWN0ZWROb2RlOiBULFxuICAgICk6IC8qP04uUGxhY2Vob2xkZXI8VD4qLyA/TWF5YmVQbGFjZWhvbGRlcjxUPiB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB0aGlzLmFzc2VydE5vU3BhY2UoXCJVbmV4cGVjdGVkIHNwYWNlIGluIHBsYWNlaG9sZGVyLlwiKTtcblxuICAgICAgICAvLyBXZSBjYW4ndCB1c2UgdGhpcy5wYXJzZUlkZW50aWZpZXIgYmVjYXVzZVxuICAgICAgICAvLyB3ZSBkb24ndCB3YW50IG5lc3RlZCBwbGFjZWhvbGRlcnMuXG4gICAgICAgIG5vZGUubmFtZSA9IHN1cGVyLnBhcnNlSWRlbnRpZmllcigvKiBsaWJlcmFsICovIHRydWUpO1xuXG4gICAgICAgIHRoaXMuYXNzZXJ0Tm9TcGFjZShcIlVuZXhwZWN0ZWQgc3BhY2UgaW4gcGxhY2Vob2xkZXIuXCIpO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5wbGFjZWhvbGRlcik7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFBsYWNlaG9sZGVyKG5vZGUsIGV4cGVjdGVkTm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmluaXNoUGxhY2Vob2xkZXI8VDogUGxhY2Vob2xkZXJUeXBlcz4oXG4gICAgICBub2RlOiBOLk5vZGUsXG4gICAgICBleHBlY3RlZE5vZGU6IFQsXG4gICAgKTogLypOLlBsYWNlaG9sZGVyPFQ+Ki8gTWF5YmVQbGFjZWhvbGRlcjxUPiB7XG4gICAgICBjb25zdCBpc0ZpbmlzaGVkID0gISEobm9kZS5leHBlY3RlZE5vZGUgJiYgbm9kZS50eXBlID09PSBcIlBsYWNlaG9sZGVyXCIpO1xuICAgICAgbm9kZS5leHBlY3RlZE5vZGUgPSBleHBlY3RlZE5vZGU7XG5cbiAgICAgIHJldHVybiBpc0ZpbmlzaGVkID8gbm9kZSA6IHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlBsYWNlaG9sZGVyXCIpO1xuICAgIH1cblxuICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqXG4gICAgICogdG9rZW5pemVyL2luZGV4LmpzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIGdldFRva2VuRnJvbUNvZGUoY29kZTogbnVtYmVyKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNvZGUgPT09IGNoYXJDb2Rlcy5wZXJjZW50U2lnbiAmJlxuICAgICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKSA9PT0gY2hhckNvZGVzLnBlcmNlbnRTaWduXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHQucGxhY2Vob2xkZXIsIDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXIuZ2V0VG9rZW5Gcm9tQ29kZSguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqXG4gICAgICogcGFyc2VyL2V4cHJlc3Npb24uanMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIHBhcnNlRXhwckF0b20oKTogTWF5YmVQbGFjZWhvbGRlcjxcIkV4cHJlc3Npb25cIj4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5wYXJzZVBsYWNlaG9sZGVyKFwiRXhwcmVzc2lvblwiKSB8fCBzdXBlci5wYXJzZUV4cHJBdG9tKC4uLmFyZ3VtZW50cylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcGFyc2VJZGVudGlmaWVyKCk6IE1heWJlUGxhY2Vob2xkZXI8XCJJZGVudGlmaWVyXCI+IHtcbiAgICAgIC8vIE5PVEU6IFRoaXMgZnVuY3Rpb24gb25seSBoYW5kbGVzIGlkZW50aWZpZXJzIG91dHNpZGUgb2ZcbiAgICAgIC8vIGV4cHJlc3Npb25zIGFuZCBiaW5kaW5nIHBhdHRlcm5zLCBzaW5jZSB0aGV5IGFyZSBhbHJlYWR5XG4gICAgICAvLyBoYW5kbGVkIGJ5IHRoZSBwYXJzZUV4cHJBdG9tIGFuZCBwYXJzZUJpbmRpbmdBdG9tIGZ1bmN0aW9ucy5cbiAgICAgIC8vIFRoaXMgaXMgbmVlZGVkLCBmb3IgZXhhbXBsZSwgdG8gcGFyc2UgXCJjbGFzcyAlJU5BTUUlJSB7fVwiLlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5wYXJzZVBsYWNlaG9sZGVyKFwiSWRlbnRpZmllclwiKSB8fFxuICAgICAgICBzdXBlci5wYXJzZUlkZW50aWZpZXIoLi4uYXJndW1lbnRzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjaGVja1Jlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgIC8vIFNvbWV0aW1lcyB3ZSBjYWxsICNjaGVja1Jlc2VydmVkV29yZChub2RlLm5hbWUpLCBleHBlY3RpbmdcbiAgICAgIC8vIHRoYXQgbm9kZSBpcyBhbiBJZGVudGlmaWVyLiBJZiBpdCBpcyBhIFBsYWNlaG9sZGVyLCBuYW1lXG4gICAgICAvLyB3aWxsIGJlIHVuZGVmaW5lZC5cbiAgICAgIGlmICh3b3JkICE9PSB1bmRlZmluZWQpIHN1cGVyLmNoZWNrUmVzZXJ2ZWRXb3JkKC4uLmFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICpcbiAgICAgKiBwYXJzZXIvbHZhbC5qcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgcGFyc2VCaW5kaW5nQXRvbSgpOiBNYXliZVBsYWNlaG9sZGVyPFwiUGF0dGVyblwiPiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnBhcnNlUGxhY2Vob2xkZXIoXCJQYXR0ZXJuXCIpIHx8IHN1cGVyLnBhcnNlQmluZGluZ0F0b20oLi4uYXJndW1lbnRzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjaGVja0xWYWwoZXhwcjogTi5FeHByZXNzaW9uKTogdm9pZCB7XG4gICAgICBpZiAoZXhwci50eXBlICE9PSBcIlBsYWNlaG9sZGVyXCIpIHN1cGVyLmNoZWNrTFZhbCguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHRvQXNzaWduYWJsZShub2RlOiBOLk5vZGUpOiBOLk5vZGUge1xuICAgICAgaWYgKFxuICAgICAgICBub2RlICYmXG4gICAgICAgIG5vZGUudHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmXG4gICAgICAgIG5vZGUuZXhwZWN0ZWROb2RlID09PSBcIkV4cHJlc3Npb25cIlxuICAgICAgKSB7XG4gICAgICAgIG5vZGUuZXhwZWN0ZWROb2RlID0gXCJQYXR0ZXJuXCI7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLnRvQXNzaWduYWJsZSguLi5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqXG4gICAgICogcGFyc2VyL3N0YXRlbWVudC5qcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIHZlcmlmeUJyZWFrQ29udGludWUobm9kZTogTi5CcmVha1N0YXRlbWVudCB8IE4uQ29udGludWVTdGF0ZW1lbnQpIHtcbiAgICAgIGlmIChub2RlLmxhYmVsICYmIG5vZGUubGFiZWwudHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiKSByZXR1cm47XG4gICAgICBzdXBlci52ZXJpZnlCcmVha0NvbnRpbnVlKC4uLmFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KFxuICAgICAgbm9kZTogTWF5YmVQbGFjZWhvbGRlcjxcIlN0YXRlbWVudFwiPixcbiAgICAgIGV4cHI6IE4uRXhwcmVzc2lvbixcbiAgICApOiBNYXliZVBsYWNlaG9sZGVyPFwiU3RhdGVtZW50XCI+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZXhwci50eXBlICE9PSBcIlBsYWNlaG9sZGVyXCIgfHxcbiAgICAgICAgKGV4cHIuZXh0cmEgJiYgZXhwci5leHRyYS5wYXJlbnRoZXNpemVkKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoLi4uYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWF0Y2godHQuY29sb24pKSB7XG4gICAgICAgIGNvbnN0IHN0bXQ6IE4uTGFiZWxlZFN0YXRlbWVudCA9IG5vZGU7XG4gICAgICAgIHN0bXQubGFiZWwgPSB0aGlzLmZpbmlzaFBsYWNlaG9sZGVyKGV4cHIsIFwiSWRlbnRpZmllclwiKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHN0bXQuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShzdG10LCBcIkxhYmVsZWRTdGF0ZW1lbnRcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG5cbiAgICAgIG5vZGUubmFtZSA9IGV4cHIubmFtZTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaFBsYWNlaG9sZGVyKG5vZGUsIFwiU3RhdGVtZW50XCIpO1xuICAgIH1cblxuICAgIHBhcnNlQmxvY2soKTogTWF5YmVQbGFjZWhvbGRlcjxcIkJsb2NrU3RhdGVtZW50XCI+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMucGFyc2VQbGFjZWhvbGRlcihcIkJsb2NrU3RhdGVtZW50XCIpIHx8XG4gICAgICAgIHN1cGVyLnBhcnNlQmxvY2soLi4uYXJndW1lbnRzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBwYXJzZUZ1bmN0aW9uSWQoKTogP01heWJlUGxhY2Vob2xkZXI8XCJJZGVudGlmaWVyXCI+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMucGFyc2VQbGFjZWhvbGRlcihcIklkZW50aWZpZXJcIikgfHxcbiAgICAgICAgc3VwZXIucGFyc2VGdW5jdGlvbklkKC4uLmFyZ3VtZW50cylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcGFyc2VDbGFzczxUOiBOLkNsYXNzPihcbiAgICAgIG5vZGU6IFQsXG4gICAgICBpc1N0YXRlbWVudDogLyogVCA9PT0gQ2xhc3NEZWNsYXJhdGlvbiAqLyBib29sZWFuLFxuICAgICAgb3B0aW9uYWxJZD86IGJvb2xlYW4sXG4gICAgKTogVCB7XG4gICAgICBjb25zdCB0eXBlID0gaXNTdGF0ZW1lbnQgPyBcIkNsYXNzRGVjbGFyYXRpb25cIiA6IFwiQ2xhc3NFeHByZXNzaW9uXCI7XG5cbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdGhpcy50YWtlRGVjb3JhdG9ycyhub2RlKTtcbiAgICAgIGNvbnN0IG9sZFN0cmljdCA9IHRoaXMuc3RhdGUuc3RyaWN0O1xuXG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMucGFyc2VQbGFjZWhvbGRlcihcIklkZW50aWZpZXJcIik7XG4gICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMubWF0Y2godHQuX2V4dGVuZHMpIHx8XG4gICAgICAgICAgdGhpcy5tYXRjaCh0dC5wbGFjZWhvbGRlcikgfHxcbiAgICAgICAgICB0aGlzLm1hdGNoKHR0LmJyYWNlTClcbiAgICAgICAgKSB7XG4gICAgICAgICAgbm9kZS5pZCA9IHBsYWNlaG9sZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbmFsSWQgfHwgIWlzU3RhdGVtZW50KSB7XG4gICAgICAgICAgbm9kZS5pZCA9IG51bGw7XG4gICAgICAgICAgbm9kZS5ib2R5ID0gdGhpcy5maW5pc2hQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgXCJDbGFzc0JvZHlcIik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVuZXhwZWN0ZWQobnVsbCwgXCJBIGNsYXNzIG5hbWUgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VDbGFzc0lkKG5vZGUsIGlzU3RhdGVtZW50LCBvcHRpb25hbElkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYXJzZUNsYXNzU3VwZXIobm9kZSk7XG4gICAgICBub2RlLmJvZHkgPVxuICAgICAgICB0aGlzLnBhcnNlUGxhY2Vob2xkZXIoXCJDbGFzc0JvZHlcIikgfHxcbiAgICAgICAgdGhpcy5wYXJzZUNsYXNzQm9keSghIW5vZGUuc3VwZXJDbGFzcywgb2xkU3RyaWN0KTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdHlwZSk7XG4gICAgfVxuXG4gICAgcGFyc2VFeHBvcnQobm9kZTogTi5Ob2RlKTogTi5Ob2RlIHtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5wYXJzZVBsYWNlaG9sZGVyKFwiSWRlbnRpZmllclwiKTtcbiAgICAgIGlmICghcGxhY2Vob2xkZXIpIHJldHVybiBzdXBlci5wYXJzZUV4cG9ydCguLi5hcmd1bWVudHMpO1xuXG4gICAgICBpZiAoIXRoaXMuaXNDb250ZXh0dWFsKFwiZnJvbVwiKSAmJiAhdGhpcy5tYXRjaCh0dC5jb21tYSkpIHtcbiAgICAgICAgLy8gZXhwb3J0ICUlREVDTCUlO1xuICAgICAgICBub2RlLnNwZWNpZmllcnMgPSBbXTtcbiAgICAgICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuICAgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5maW5pc2hQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgXCJEZWNsYXJhdGlvblwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIik7XG4gICAgICB9XG5cbiAgICAgIC8vIGV4cG9ydCAlJU5BTUUlJSBmcm9tIFwiZm9vXCI7XG4gICAgICB0aGlzLmV4cGVjdFBsdWdpbihcImV4cG9ydERlZmF1bHRGcm9tXCIpO1xuICAgICAgY29uc3Qgc3BlY2lmaWVyID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHNwZWNpZmllci5leHBvcnRlZCA9IHBsYWNlaG9sZGVyO1xuICAgICAgbm9kZS5zcGVjaWZpZXJzID0gW3RoaXMuZmluaXNoTm9kZShzcGVjaWZpZXIsIFwiRXhwb3J0RGVmYXVsdFNwZWNpZmllclwiKV07XG5cbiAgICAgIHJldHVybiBzdXBlci5wYXJzZUV4cG9ydChub2RlKTtcbiAgICB9XG5cbiAgICBpc0V4cG9ydERlZmF1bHRTcGVjaWZpZXIoKTogYm9vbGVhbiB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5fZGVmYXVsdCkpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMubmV4dFRva2VuU3RhcnQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNVbnBhcnNlZENvbnRleHR1YWwobmV4dCwgXCJmcm9tXCIpKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbnB1dC5zdGFydHNXaXRoKFxuICAgICAgICAgICAgICB0dC5wbGFjZWhvbGRlci5sYWJlbCxcbiAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW5TdGFydFNpbmNlKG5leHQgKyA0KSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1cGVyLmlzRXhwb3J0RGVmYXVsdFNwZWNpZmllcigpO1xuICAgIH1cblxuICAgIG1heWJlUGFyc2VFeHBvcnREZWZhdWx0U3BlY2lmaWVyKG5vZGU6IE4uTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKG5vZGUuc3BlY2lmaWVycyAmJiBub2RlLnNwZWNpZmllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBcImV4cG9ydCAlJU5BTUUlJVwiIGhhcyBhbHJlYWR5IGJlZW4gcGFyc2VkIGJ5ICNwYXJzZUV4cG9ydC5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwZXIubWF5YmVQYXJzZUV4cG9ydERlZmF1bHRTcGVjaWZpZXIoLi4uYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBjaGVja0V4cG9ydChub2RlOiBOLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICAgIGNvbnN0IHsgc3BlY2lmaWVycyB9ID0gbm9kZTtcbiAgICAgIGlmIChzcGVjaWZpZXJzPy5sZW5ndGgpIHtcbiAgICAgICAgbm9kZS5zcGVjaWZpZXJzID0gc3BlY2lmaWVycy5maWx0ZXIoXG4gICAgICAgICAgbm9kZSA9PiBub2RlLmV4cG9ydGVkLnR5cGUgPT09IFwiUGxhY2Vob2xkZXJcIixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHN1cGVyLmNoZWNrRXhwb3J0KG5vZGUpO1xuICAgICAgbm9kZS5zcGVjaWZpZXJzID0gc3BlY2lmaWVycztcbiAgICB9XG5cbiAgICBwYXJzZUltcG9ydChcbiAgICAgIG5vZGU6IE4uTm9kZSxcbiAgICApOiBOLkltcG9ydERlY2xhcmF0aW9uIHwgTi5Uc0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uIHtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5wYXJzZVBsYWNlaG9sZGVyKFwiSWRlbnRpZmllclwiKTtcbiAgICAgIGlmICghcGxhY2Vob2xkZXIpIHJldHVybiBzdXBlci5wYXJzZUltcG9ydCguLi5hcmd1bWVudHMpO1xuXG4gICAgICBub2RlLnNwZWNpZmllcnMgPSBbXTtcblxuICAgICAgaWYgKCF0aGlzLmlzQ29udGV4dHVhbChcImZyb21cIikgJiYgIXRoaXMubWF0Y2godHQuY29tbWEpKSB7XG4gICAgICAgIC8vIGltcG9ydCAlJVNUUklORyUlO1xuICAgICAgICBub2RlLnNvdXJjZSA9IHRoaXMuZmluaXNoUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIsIFwiU3RyaW5nTGl0ZXJhbFwiKTtcbiAgICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBpbXBvcnQgJSVERUZBVUxUJSUgLi4uXG4gICAgICBjb25zdCBzcGVjaWZpZXIgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShwbGFjZWhvbGRlcik7XG4gICAgICBzcGVjaWZpZXIubG9jYWwgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHRoaXMuZmluaXNoTm9kZShzcGVjaWZpZXIsIFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiKTtcbiAgICAgIG5vZGUuc3BlY2lmaWVycy5wdXNoKHNwZWNpZmllcik7XG5cbiAgICAgIGlmICh0aGlzLmVhdCh0dC5jb21tYSkpIHtcbiAgICAgICAgLy8gaW1wb3J0ICUlREVGQVVMVCUlLCAqIGFzIC4uLlxuICAgICAgICBjb25zdCBoYXNTdGFySW1wb3J0ID0gdGhpcy5tYXliZVBhcnNlU3RhckltcG9ydFNwZWNpZmllcihub2RlKTtcblxuICAgICAgICAvLyBpbXBvcnQgJSVERUZBVUxUJSUsIHsgLi4uXG4gICAgICAgIGlmICghaGFzU3RhckltcG9ydCkgdGhpcy5wYXJzZU5hbWVkSW1wb3J0U3BlY2lmaWVycyhub2RlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiZnJvbVwiKTtcbiAgICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUltcG9ydFNvdXJjZSgpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWNsYXJhdGlvblwiKTtcbiAgICB9XG5cbiAgICBwYXJzZUltcG9ydFNvdXJjZSgpOiBNYXliZVBsYWNlaG9sZGVyPFwiU3RyaW5nTGl0ZXJhbFwiPiB7XG4gICAgICAvLyBpbXBvcnQgLi4uIGZyb20gJSVTVFJJTkclJTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5wYXJzZVBsYWNlaG9sZGVyKFwiU3RyaW5nTGl0ZXJhbFwiKSB8fFxuICAgICAgICBzdXBlci5wYXJzZUltcG9ydFNvdXJjZSguLi5hcmd1bWVudHMpXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiIsImltcG9ydCB0eXBlIFBhcnNlciBmcm9tIFwiLi4vcGFyc2VyXCI7XG5pbXBvcnQgeyB0eXBlcyBhcyB0dCB9IGZyb20gXCIuLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCAqIGFzIE4gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdXBlckNsYXNzOiBDbGFzczxQYXJzZXI+KTogQ2xhc3M8UGFyc2VyPiA9PlxuICBjbGFzcyBleHRlbmRzIHN1cGVyQ2xhc3Mge1xuICAgIHBhcnNlVjhJbnRyaW5zaWMoKTogTi5FeHByZXNzaW9uIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0Lm1vZHVsbykpIHtcbiAgICAgICAgY29uc3QgdjhJbnRyaW5zaWNTdGFydCA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICAgIC8vIGxldCB0aGUgYGxvY2Agb2YgSWRlbnRpZmllciBzdGFydHMgZnJvbSBgJWBcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMuZWF0KHR0Lm1vZHVsbyk7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0Lm5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSh0aGlzLnN0YXRlLnN0YXJ0KTtcbiAgICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdGhpcy5jcmVhdGVJZGVudGlmaWVyKG5vZGUsIG5hbWUpO1xuICAgICAgICAgIGlkZW50aWZpZXIudHlwZSA9IFwiVjhJbnRyaW5zaWNJZGVudGlmaWVyXCI7XG4gICAgICAgICAgaWYgKHRoaXMubWF0Y2godHQucGFyZW5MKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCh2OEludHJpbnNpY1N0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKlxuICAgICAqIHBhcnNlci9leHByZXNzaW9uLmpzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICBwYXJzZUV4cHJBdG9tKCk6IE4uRXhwcmVzc2lvbiB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVY4SW50cmluc2ljKCkgfHwgc3VwZXIucGFyc2VFeHByQXRvbSguLi5hcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIFBhcnNlciBmcm9tIFwiLi9wYXJzZXJcIjtcblxuZXhwb3J0IHR5cGUgUGx1Z2luID0gc3RyaW5nIHwgW3N0cmluZywgT2JqZWN0XTtcblxuZXhwb3J0IHR5cGUgUGx1Z2luTGlzdCA9ICRSZWFkT25seUFycmF5PFBsdWdpbj47XG5cbmV4cG9ydCB0eXBlIE1peGluUGx1Z2luID0gKHN1cGVyQ2xhc3M6IENsYXNzPFBhcnNlcj4pID0+IENsYXNzPFBhcnNlcj47XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQbHVnaW4ocGx1Z2luczogUGx1Z2luTGlzdCwgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBwbHVnaW5zLnNvbWUocGx1Z2luID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwbHVnaW4pKSB7XG4gICAgICByZXR1cm4gcGx1Z2luWzBdID09PSBuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGx1Z2luID09PSBuYW1lO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbHVnaW5PcHRpb24oXG4gIHBsdWdpbnM6IFBsdWdpbkxpc3QsXG4gIG5hbWU6IHN0cmluZyxcbiAgb3B0aW9uOiBzdHJpbmcsXG4pIHtcbiAgY29uc3QgcGx1Z2luID0gcGx1Z2lucy5maW5kKHBsdWdpbiA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGx1Z2luKSkge1xuICAgICAgcmV0dXJuIHBsdWdpblswXSA9PT0gbmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBsdWdpbiA9PT0gbmFtZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChwbHVnaW4gJiYgQXJyYXkuaXNBcnJheShwbHVnaW4pKSB7XG4gICAgcmV0dXJuIHBsdWdpblsxXVtvcHRpb25dO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IFBJUEVMSU5FX1BST1BPU0FMUyA9IFtcIm1pbmltYWxcIiwgXCJzbWFydFwiLCBcImZzaGFycFwiXTtcbmNvbnN0IFJFQ09SRF9BTkRfVFVQTEVfU1lOVEFYX1RZUEVTID0gW1wiaGFzaFwiLCBcImJhclwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGx1Z2lucyhwbHVnaW5zOiBQbHVnaW5MaXN0KSB7XG4gIGlmIChoYXNQbHVnaW4ocGx1Z2lucywgXCJkZWNvcmF0b3JzXCIpKSB7XG4gICAgaWYgKGhhc1BsdWdpbihwbHVnaW5zLCBcImRlY29yYXRvcnMtbGVnYWN5XCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiQ2Fubm90IHVzZSB0aGUgZGVjb3JhdG9ycyBhbmQgZGVjb3JhdG9ycy1sZWdhY3kgcGx1Z2luIHRvZ2V0aGVyXCIsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGRlY29yYXRvcnNCZWZvcmVFeHBvcnQgPSBnZXRQbHVnaW5PcHRpb24oXG4gICAgICBwbHVnaW5zLFxuICAgICAgXCJkZWNvcmF0b3JzXCIsXG4gICAgICBcImRlY29yYXRvcnNCZWZvcmVFeHBvcnRcIixcbiAgICApO1xuICAgIGlmIChkZWNvcmF0b3JzQmVmb3JlRXhwb3J0ID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJUaGUgJ2RlY29yYXRvcnMnIHBsdWdpbiByZXF1aXJlcyBhICdkZWNvcmF0b3JzQmVmb3JlRXhwb3J0JyBvcHRpb24sXCIgK1xuICAgICAgICAgIFwiIHdob3NlIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLiBJZiB5b3UgYXJlIG1pZ3JhdGluZyBmcm9tXCIgK1xuICAgICAgICAgIFwiIEJhYnlsb24vQmFiZWwgNiBvciB3YW50IHRvIHVzZSB0aGUgb2xkIGRlY29yYXRvcnMgcHJvcG9zYWwsIHlvdVwiICtcbiAgICAgICAgICBcIiBzaG91bGQgdXNlIHRoZSAnZGVjb3JhdG9ycy1sZWdhY3knIHBsdWdpbiBpbnN0ZWFkIG9mICdkZWNvcmF0b3JzJy5cIixcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVjb3JhdG9yc0JlZm9yZUV4cG9ydCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIidkZWNvcmF0b3JzQmVmb3JlRXhwb3J0JyBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc1BsdWdpbihwbHVnaW5zLCBcImZsb3dcIikgJiYgaGFzUGx1Z2luKHBsdWdpbnMsIFwidHlwZXNjcmlwdFwiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21iaW5lIGZsb3cgYW5kIHR5cGVzY3JpcHQgcGx1Z2lucy5cIik7XG4gIH1cblxuICBpZiAoaGFzUGx1Z2luKHBsdWdpbnMsIFwicGxhY2Vob2xkZXJzXCIpICYmIGhhc1BsdWdpbihwbHVnaW5zLCBcInY4aW50cmluc2ljXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbWJpbmUgcGxhY2Vob2xkZXJzIGFuZCB2OGludHJpbnNpYyBwbHVnaW5zLlwiKTtcbiAgfVxuXG4gIGlmIChcbiAgICBoYXNQbHVnaW4ocGx1Z2lucywgXCJwaXBlbGluZU9wZXJhdG9yXCIpICYmXG4gICAgIVBJUEVMSU5FX1BST1BPU0FMUy5pbmNsdWRlcyhcbiAgICAgIGdldFBsdWdpbk9wdGlvbihwbHVnaW5zLCBcInBpcGVsaW5lT3BlcmF0b3JcIiwgXCJwcm9wb3NhbFwiKSxcbiAgICApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiJ3BpcGVsaW5lT3BlcmF0b3InIHJlcXVpcmVzICdwcm9wb3NhbCcgb3B0aW9uIHdob3NlIHZhbHVlIHNob3VsZCBiZSBvbmUgb2Y6IFwiICtcbiAgICAgICAgUElQRUxJTkVfUFJPUE9TQUxTLm1hcChwID0+IGAnJHtwfSdgKS5qb2luKFwiLCBcIiksXG4gICAgKTtcbiAgfVxuXG4gIGlmIChoYXNQbHVnaW4ocGx1Z2lucywgXCJtb2R1bGVBdHRyaWJ1dGVzXCIpKSB7XG4gICAgY29uc3QgbW9kdWxlQXR0cmlidXRlc1ZlcmlvblBsdWdpbk9wdGlvbiA9IGdldFBsdWdpbk9wdGlvbihcbiAgICAgIHBsdWdpbnMsXG4gICAgICBcIm1vZHVsZUF0dHJpYnV0ZXNcIixcbiAgICAgIFwidmVyc2lvblwiLFxuICAgICk7XG4gICAgaWYgKG1vZHVsZUF0dHJpYnV0ZXNWZXJpb25QbHVnaW5PcHRpb24gIT09IFwibWF5LTIwMjBcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlRoZSAnbW9kdWxlQXR0cmlidXRlcycgcGx1Z2luIHJlcXVpcmVzIGEgJ3ZlcnNpb24nIG9wdGlvbixcIiArXG4gICAgICAgICAgXCIgcmVwcmVzZW50aW5nIHRoZSBsYXN0IHByb3Bvc2FsIHVwZGF0ZS4gQ3VycmVudGx5LCB0aGVcIiArXG4gICAgICAgICAgXCIgb25seSBzdXBwb3J0ZWQgdmFsdWUgaXMgJ21heS0yMDIwJy5cIixcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChcbiAgICBoYXNQbHVnaW4ocGx1Z2lucywgXCJyZWNvcmRBbmRUdXBsZVwiKSAmJlxuICAgICFSRUNPUkRfQU5EX1RVUExFX1NZTlRBWF9UWVBFUy5pbmNsdWRlcyhcbiAgICAgIGdldFBsdWdpbk9wdGlvbihwbHVnaW5zLCBcInJlY29yZEFuZFR1cGxlXCIsIFwic3ludGF4VHlwZVwiKSxcbiAgICApXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiJ3JlY29yZEFuZFR1cGxlJyByZXF1aXJlcyAnc3ludGF4VHlwZScgb3B0aW9uIHdob3NlIHZhbHVlIHNob3VsZCBiZSBvbmUgb2Y6IFwiICtcbiAgICAgICAgUkVDT1JEX0FORF9UVVBMRV9TWU5UQVhfVFlQRVMubWFwKHAgPT4gYCcke3B9J2ApLmpvaW4oXCIsIFwiKSxcbiAgICApO1xuICB9XG59XG5cbi8vIFRoZXNlIHBsdWdpbnMgYXJlIGRlZmluZWQgdXNpbmcgYSBtaXhpbiB3aGljaCBleHRlbmRzIHRoZSBwYXJzZXIgY2xhc3MuXG5cbmltcG9ydCBlc3RyZWUgZnJvbSBcIi4vcGx1Z2lucy9lc3RyZWVcIjtcbmltcG9ydCBmbG93IGZyb20gXCIuL3BsdWdpbnMvZmxvd1wiO1xuaW1wb3J0IGpzeCBmcm9tIFwiLi9wbHVnaW5zL2pzeFwiO1xuaW1wb3J0IHR5cGVzY3JpcHQgZnJvbSBcIi4vcGx1Z2lucy90eXBlc2NyaXB0XCI7XG5pbXBvcnQgcGxhY2Vob2xkZXJzIGZyb20gXCIuL3BsdWdpbnMvcGxhY2Vob2xkZXJzXCI7XG5pbXBvcnQgdjhpbnRyaW5zaWMgZnJvbSBcIi4vcGx1Z2lucy92OGludHJpbnNpY1wiO1xuXG4vLyBOT1RFOiBvcmRlciBpcyBpbXBvcnRhbnQuIGVzdHJlZSBtdXN0IGNvbWUgZmlyc3Q7IHBsYWNlaG9sZGVycyBtdXN0IGNvbWUgbGFzdC5cbmV4cG9ydCBjb25zdCBtaXhpblBsdWdpbnM6IHsgW25hbWU6IHN0cmluZ106IE1peGluUGx1Z2luIH0gPSB7XG4gIGVzdHJlZSxcbiAganN4LFxuICBmbG93LFxuICB0eXBlc2NyaXB0LFxuICB2OGludHJpbnNpYyxcbiAgcGxhY2Vob2xkZXJzLFxufTtcblxuZXhwb3J0IGNvbnN0IG1peGluUGx1Z2luTmFtZXM6ICRSZWFkT25seUFycmF5PHN0cmluZz4gPSBPYmplY3Qua2V5cyhcbiAgbWl4aW5QbHVnaW5zLFxuKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHsgUGx1Z2luTGlzdCB9IGZyb20gXCIuL3BsdWdpbi11dGlsc1wiO1xuXG4vLyBBIHNlY29uZCBvcHRpb25hbCBhcmd1bWVudCBjYW4gYmUgZ2l2ZW4gdG8gZnVydGhlciBjb25maWd1cmVcbi8vIHRoZSBwYXJzZXIgcHJvY2Vzcy4gVGhlc2Ugb3B0aW9ucyBhcmUgcmVjb2duaXplZDpcblxuZXhwb3J0IHR5cGUgU291cmNlVHlwZSA9IFwic2NyaXB0XCIgfCBcIm1vZHVsZVwiIHwgXCJ1bmFtYmlndW91c1wiO1xuXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBzb3VyY2VUeXBlOiBTb3VyY2VUeXBlLFxuICBzb3VyY2VGaWxlbmFtZT86IHN0cmluZyxcbiAgc3RhcnRMaW5lOiBudW1iZXIsXG4gIGFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb246IGJvb2xlYW4sXG4gIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiBib29sZWFuLFxuICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IGJvb2xlYW4sXG4gIGFsbG93U3VwZXJPdXRzaWRlTWV0aG9kOiBib29sZWFuLFxuICBhbGxvd1VuZGVjbGFyZWRFeHBvcnRzOiBib29sZWFuLFxuICBwbHVnaW5zOiBQbHVnaW5MaXN0LFxuICBzdHJpY3RNb2RlOiA/Ym9vbGVhbixcbiAgcmFuZ2VzOiBib29sZWFuLFxuICB0b2tlbnM6IGJvb2xlYW4sXG4gIGNyZWF0ZVBhcmVudGhlc2l6ZWRFeHByZXNzaW9uczogYm9vbGVhbixcbiAgZXJyb3JSZWNvdmVyeTogYm9vbGVhbixcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9uczogT3B0aW9ucyA9IHtcbiAgLy8gU291cmNlIHR5cGUgKFwic2NyaXB0XCIgb3IgXCJtb2R1bGVcIikgZm9yIGRpZmZlcmVudCBzZW1hbnRpY3NcbiAgc291cmNlVHlwZTogXCJzY3JpcHRcIixcbiAgLy8gU291cmNlIGZpbGVuYW1lLlxuICBzb3VyY2VGaWxlbmFtZTogdW5kZWZpbmVkLFxuICAvLyBMaW5lIGZyb20gd2hpY2ggdG8gc3RhcnQgY291bnRpbmcgc291cmNlLiBVc2VmdWwgZm9yXG4gIC8vIGludGVncmF0aW9uIHdpdGggb3RoZXIgdG9vbHMuXG4gIHN0YXJ0TGluZTogMSxcbiAgLy8gV2hlbiBlbmFibGVkLCBhd2FpdCBhdCB0aGUgdG9wIGxldmVsIGlzIG5vdCBjb25zaWRlcmVkIGFuXG4gIC8vIGVycm9yLlxuICBhbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcbiAgLy8gV2hlbiBlbmFibGVkLCBhIHJldHVybiBhdCB0aGUgdG9wIGxldmVsIGlzIG5vdCBjb25zaWRlcmVkIGFuXG4gIC8vIGVycm9yLlxuICBhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbjogZmFsc2UsXG4gIC8vIFdoZW4gZW5hYmxlZCwgaW1wb3J0L2V4cG9ydCBzdGF0ZW1lbnRzIGFyZSBub3QgY29uc3RyYWluZWQgdG9cbiAgLy8gYXBwZWFyaW5nIGF0IHRoZSB0b3Agb2YgdGhlIHByb2dyYW0uXG4gIGFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZTogZmFsc2UsXG4gIC8vIFRPRE9cbiAgYWxsb3dTdXBlck91dHNpZGVNZXRob2Q6IGZhbHNlLFxuICAvLyBXaGVuIGVuYWJsZWQsIGV4cG9ydCBzdGF0ZW1lbnRzIGNhbiByZWZlcmVuY2UgdW5kZWNsYXJlZCB2YXJpYWJsZXMuXG4gIGFsbG93VW5kZWNsYXJlZEV4cG9ydHM6IGZhbHNlLFxuICAvLyBBbiBhcnJheSBvZiBwbHVnaW5zIHRvIGVuYWJsZVxuICBwbHVnaW5zOiBbXSxcbiAgLy8gVE9ET1xuICBzdHJpY3RNb2RlOiBudWxsLFxuICAvLyBOb2RlcyBoYXZlIHRoZWlyIHN0YXJ0IGFuZCBlbmQgY2hhcmFjdGVycyBvZmZzZXRzIHJlY29yZGVkIGluXG4gIC8vIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXMgKGRpcmVjdGx5IG9uIHRoZSBub2RlLCByYXRoZXIgdGhhblxuICAvLyB0aGUgYGxvY2Agb2JqZWN0LCB3aGljaCBob2xkcyBsaW5lL2NvbHVtbiBkYXRhLiBUbyBhbHNvIGFkZCBhXG4gIC8vIFtzZW1pLXN0YW5kYXJkaXplZF1bcmFuZ2VdIGByYW5nZWAgcHJvcGVydHkgaG9sZGluZyBhIGBbc3RhcnQsXG4gIC8vIGVuZF1gIGFycmF5IHdpdGggdGhlIHNhbWUgbnVtYmVycywgc2V0IHRoZSBgcmFuZ2VzYCBvcHRpb24gdG9cbiAgLy8gYHRydWVgLlxuICAvL1xuICAvLyBbcmFuZ2VdOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NDU2NzhcbiAgcmFuZ2VzOiBmYWxzZSxcbiAgLy8gQWRkcyBhbGwgcGFyc2VkIHRva2VucyB0byBhIGB0b2tlbnNgIHByb3BlcnR5IG9uIHRoZSBgRmlsZWAgbm9kZVxuICB0b2tlbnM6IGZhbHNlLFxuICAvLyBXaGV0aGVyIHRvIGNyZWF0ZSBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiBBU1Qgbm9kZXMgKGlmIGZhbHNlXG4gIC8vIHRoZSBwYXJzZXIgc2V0cyBleHRyYS5wYXJlbnRoZXNpemVkIG9uIHRoZSBleHByZXNzaW9uIG5vZGVzIGluc3RlYWQpLlxuICBjcmVhdGVQYXJlbnRoZXNpemVkRXhwcmVzc2lvbnM6IGZhbHNlLFxuICAvLyBXaGVuIGVuYWJsZWQsIGVycm9ycyBhcmUgYXR0YWNoZWQgdG8gdGhlIEFTVCBpbnN0ZWFkIG9mIGJlaW5nIGRpcmVjdGx5IHRocm93bi5cbiAgLy8gU29tZSBlcnJvcnMgd2lsbCBzdGlsbCB0aHJvdywgYmVjYXVzZSBAYmFiZWwvcGFyc2VyIGNhbid0IGFsd2F5cyByZWNvdmVyLlxuICBlcnJvclJlY292ZXJ5OiBmYWxzZSxcbn07XG5cbi8vIEludGVycHJldCBhbmQgZGVmYXVsdCBhbiBvcHRpb25zIG9iamVjdFxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRzOiA/T3B0aW9ucyk6IE9wdGlvbnMge1xuICBjb25zdCBvcHRpb25zOiBhbnkgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZGVmYXVsdE9wdGlvbnMpKSB7XG4gICAgb3B0aW9uc1trZXldID0gb3B0cyAmJiBvcHRzW2tleV0gIT0gbnVsbCA/IG9wdHNba2V5XSA6IGRlZmF1bHRPcHRpb25zW2tleV07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7IE9wdGlvbnMgfSBmcm9tIFwiLi4vb3B0aW9uc1wiO1xuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSBcIi4uL3V0aWwvbG9jYXRpb25cIjtcblxuaW1wb3J0IHsgdHlwZXMgYXMgY3QsIHR5cGUgVG9rQ29udGV4dCB9IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7IHR5cGVzIGFzIHR0LCB0eXBlIFRva2VuVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbnR5cGUgVG9waWNDb250ZXh0U3RhdGUgPSB7XG4gIC8vIFdoZW4gYSB0b3BpYyBiaW5kaW5nIGhhcyBiZWVuIGN1cnJlbnRseSBlc3RhYmxpc2hlZCxcbiAgLy8gdGhlbiB0aGlzIGlzIDEuIE90aGVyd2lzZSwgaXQgaXMgMC4gVGhpcyBpcyBmb3J3YXJkcyBjb21wYXRpYmxlXG4gIC8vIHdpdGggYSBmdXR1cmUgcGx1Z2luIGZvciBtdWx0aXBsZSBsZXhpY2FsIHRvcGljcy5cbiAgbWF4TnVtT2ZSZXNvbHZhYmxlVG9waWNzOiBudW1iZXIsXG5cbiAgLy8gV2hlbiBhIHRvcGljIGJpbmRpbmcgaGFzIGJlZW4gY3VycmVudGx5IGVzdGFibGlzaGVkLCBhbmQgaWYgdGhhdCBiaW5kaW5nXG4gIC8vIGhhcyBiZWVuIHVzZWQgYXMgYSB0b3BpYyByZWZlcmVuY2UgYCNgLCB0aGVuIHRoaXMgaXMgMC4gT3RoZXJ3aXNlLCBpdCBpc1xuICAvLyBgbnVsbGAuIFRoaXMgaXMgZm9yd2FyZHMgY29tcGF0aWJsZSB3aXRoIGEgZnV0dXJlIHBsdWdpbiBmb3IgbXVsdGlwbGVcbiAgLy8gbGV4aWNhbCB0b3BpY3MuXG4gIG1heFRvcGljSW5kZXg6IG51bGwgfCAwLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGUge1xuICBzdHJpY3Q6IGJvb2xlYW47XG4gIGN1ckxpbmU6IG51bWJlcjtcblxuICAvLyBBbmQsIGlmIGxvY2F0aW9ucyBhcmUgdXNlZCwgdGhlIHtsaW5lLCBjb2x1bW59IG9iamVjdFxuICAvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcbiAgc3RhcnRMb2M6IFBvc2l0aW9uO1xuICBlbmRMb2M6IFBvc2l0aW9uO1xuXG4gIGluaXQob3B0aW9uczogT3B0aW9ucyk6IHZvaWQge1xuICAgIHRoaXMuc3RyaWN0ID1cbiAgICAgIG9wdGlvbnMuc3RyaWN0TW9kZSA9PT0gZmFsc2UgPyBmYWxzZSA6IG9wdGlvbnMuc291cmNlVHlwZSA9PT0gXCJtb2R1bGVcIjtcblxuICAgIHRoaXMuY3VyTGluZSA9IG9wdGlvbnMuc3RhcnRMaW5lO1xuICAgIHRoaXMuc3RhcnRMb2MgPSB0aGlzLmVuZExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTtcbiAgfVxuXG4gIGVycm9yczogU3ludGF4RXJyb3JbXSA9IFtdO1xuXG4gIC8vIFVzZWQgdG8gc2lnbmlmeSB0aGUgc3RhcnQgb2YgYSBwb3RlbnRpYWwgYXJyb3cgZnVuY3Rpb25cbiAgcG90ZW50aWFsQXJyb3dBdDogbnVtYmVyID0gLTE7XG5cbiAgLy8gVXNlZCB0byBzaWduaWZ5IHRoZSBzdGFydCBvZiBhbiBleHByZXNzaW9uIHdoaWNoIGxvb2tzIGxpa2UgYVxuICAvLyB0eXBlZCBhcnJvdyBmdW5jdGlvbiwgYnV0IGl0IGlzbid0XG4gIC8vIGUuZy4gYSA/IChiKSA6IGMgPT4gZFxuICAvLyAgICAgICAgICBeXG4gIG5vQXJyb3dBdDogbnVtYmVyW10gPSBbXTtcblxuICAvLyBVc2VkIHRvIHNpZ25pZnkgdGhlIHN0YXJ0IG9mIGFuIGV4cHJlc3Npb24gd2hvc2UgcGFyYW1zLCBpZiBpdCBsb29rcyBsaWtlXG4gIC8vIGFuIGFycm93IGZ1bmN0aW9uLCBzaG91bGRuJ3QgYmUgY29udmVydGVkIHRvIGFzc2lnbmFibGUgbm9kZXMuXG4gIC8vIFRoaXMgaXMgdXNlZCB0byBkZWZlciB0aGUgdmFsaWRhdGlvbiBvZiB0eXBlZCBhcnJvdyBmdW5jdGlvbnMgaW5zaWRlXG4gIC8vIGNvbmRpdGlvbmFsIGV4cHJlc3Npb25zLlxuICAvLyBlLmcuIGEgPyAoYikgOiBjID0+IGRcbiAgLy8gICAgICAgICAgXlxuICBub0Fycm93UGFyYW1zQ29udmVyc2lvbkF0OiBudW1iZXJbXSA9IFtdO1xuXG4gIC8vIEZsYWdzIHRvIHRyYWNrXG4gIGluUGFyYW1ldGVyczogYm9vbGVhbiA9IGZhbHNlO1xuICBtYXliZUluQXJyb3dQYXJhbWV0ZXJzOiBib29sZWFuID0gZmFsc2U7XG4gIC8vIFRoaXMgZmxhZyBpcyB1c2VkIHRvIHRyYWNrIGFzeW5jIGFycm93IGhlYWQgYWNyb3NzIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucy5cbiAgLy8gZS5nLiBhc3luYyAoZm9vID0gZnVuY3Rpb24gKGF3YWl0KSB7fSkgPT4ge31cbiAgLy8gV2hlbiBwYXJzaW5nIGBhd2FpdGAgaW4gdGhpcyBleHByZXNzaW9uLCBgbWF5YmVJbkFzeW5jQXJyb3dIZWFkYCBpcyB0cnVlXG4gIC8vIGJ1dCBgbWF5YmVJbkFycm93UGFyYW1ldGVyc2AgaXMgZmFsc2VcbiAgbWF5YmVJbkFzeW5jQXJyb3dIZWFkOiBib29sZWFuID0gZmFsc2U7XG4gIGluUGlwZWxpbmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaW5UeXBlOiBib29sZWFuID0gZmFsc2U7XG4gIG5vQW5vbkZ1bmN0aW9uVHlwZTogYm9vbGVhbiA9IGZhbHNlO1xuICBpblByb3BlcnR5TmFtZTogYm9vbGVhbiA9IGZhbHNlO1xuICBoYXNGbG93Q29tbWVudDogYm9vbGVhbiA9IGZhbHNlO1xuICBpc0l0ZXJhdG9yOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLy8gRm9yIHRoZSBzbWFydFBpcGVsaW5lcyBwbHVnaW46XG4gIHRvcGljQ29udGV4dDogVG9waWNDb250ZXh0U3RhdGUgPSB7XG4gICAgbWF4TnVtT2ZSZXNvbHZhYmxlVG9waWNzOiAwLFxuICAgIG1heFRvcGljSW5kZXg6IG51bGwsXG4gIH07XG5cbiAgLy8gRm9yIHRoZSBGIyBwbHVnaW5cbiAgc29sb0F3YWl0OiBib29sZWFuID0gZmFsc2U7XG4gIGluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLy8gTGFiZWxzIGluIHNjb3BlLlxuICBsYWJlbHM6IEFycmF5PHtcbiAgICBraW5kOiA/KFwibG9vcFwiIHwgXCJzd2l0Y2hcIiksXG4gICAgbmFtZT86ID9zdHJpbmcsXG4gICAgc3RhdGVtZW50U3RhcnQ/OiBudW1iZXIsXG4gIH0+ID0gW107XG5cbiAgLy8gTGVhZGluZyBkZWNvcmF0b3JzLiBMYXN0IGVsZW1lbnQgb2YgdGhlIHN0YWNrIHJlcHJlc2VudHMgdGhlIGRlY29yYXRvcnMgaW4gY3VycmVudCBjb250ZXh0LlxuICAvLyBTdXBwb3J0cyBuZXN0aW5nIG9mIGRlY29yYXRvcnMsIGUuZy4gQGZvbyhAYmFyIGNsYXNzIGlubmVyIHt9KSBjbGFzcyBvdXRlciB7fVxuICAvLyB3aGVyZSBAZm9vIGJlbG9uZ3MgdG8gdGhlIG91dGVyIGNsYXNzIGFuZCBAYmFyIHRvIHRoZSBpbm5lclxuICBkZWNvcmF0b3JTdGFjazogQXJyYXk8QXJyYXk8Ti5EZWNvcmF0b3I+PiA9IFtbXV07XG5cbiAgLy8gUG9zaXRpb25zIHRvIGRlbGF5ZWQtY2hlY2sgdGhhdCB5aWVsZC9hd2FpdCBkb2VzIG5vdCBleGlzdCBpbiBkZWZhdWx0IHBhcmFtZXRlcnMuXG4gIHlpZWxkUG9zOiBudW1iZXIgPSAtMTtcbiAgYXdhaXRQb3M6IG51bWJlciA9IC0xO1xuXG4gIC8vIENvbW1lbnQgc3RvcmUuXG4gIGNvbW1lbnRzOiBBcnJheTxOLkNvbW1lbnQ+ID0gW107XG5cbiAgLy8gQ29tbWVudCBhdHRhY2htZW50IHN0b3JlXG4gIHRyYWlsaW5nQ29tbWVudHM6IEFycmF5PE4uQ29tbWVudD4gPSBbXTtcbiAgbGVhZGluZ0NvbW1lbnRzOiBBcnJheTxOLkNvbW1lbnQ+ID0gW107XG4gIGNvbW1lbnRTdGFjazogQXJyYXk8e1xuICAgIHN0YXJ0OiBudW1iZXIsXG4gICAgbGVhZGluZ0NvbW1lbnRzOiA/QXJyYXk8Ti5Db21tZW50PixcbiAgICB0cmFpbGluZ0NvbW1lbnRzOiA/QXJyYXk8Ti5Db21tZW50PixcbiAgICB0eXBlOiBzdHJpbmcsXG4gIH0+ID0gW107XG4gIC8vICRGbG93SWdub3JlIHRoaXMgaXMgaW5pdGlhbGl6ZWQgd2hlbiB0aGUgcGFyc2VyIHN0YXJ0cy5cbiAgY29tbWVudFByZXZpb3VzTm9kZTogTi5Ob2RlID0gbnVsbDtcblxuICAvLyBUaGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgdG9rZW5pemVyIGluIHRoZSBpbnB1dC5cbiAgcG9zOiBudW1iZXIgPSAwO1xuICBsaW5lU3RhcnQ6IG51bWJlciA9IDA7XG5cbiAgLy8gUHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0b2tlbjpcbiAgLy8gSXRzIHR5cGVcbiAgdHlwZTogVG9rZW5UeXBlID0gdHQuZW9mO1xuXG4gIC8vIEZvciB0b2tlbnMgdGhhdCBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24gdGhhbiB0aGVpciB0eXBlLCB0aGUgdmFsdWVcbiAgdmFsdWU6IGFueSA9IG51bGw7XG5cbiAgLy8gSXRzIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0XG4gIHN0YXJ0OiBudW1iZXIgPSAwO1xuICBlbmQ6IG51bWJlciA9IDA7XG5cbiAgLy8gUG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBwcmV2aW91cyB0b2tlblxuICAvLyAkRmxvd0lnbm9yZSB0aGlzIGlzIGluaXRpYWxpemVkIHdoZW4gZ2VuZXJhdGluZyB0aGUgc2Vjb25kIHRva2VuLlxuICBsYXN0VG9rRW5kTG9jOiBQb3NpdGlvbiA9IG51bGw7XG4gIC8vICRGbG93SWdub3JlIHRoaXMgaXMgaW5pdGlhbGl6ZWQgd2hlbiBnZW5lcmF0aW5nIHRoZSBzZWNvbmQgdG9rZW4uXG4gIGxhc3RUb2tTdGFydExvYzogUG9zaXRpb24gPSBudWxsO1xuICBsYXN0VG9rU3RhcnQ6IG51bWJlciA9IDA7XG4gIGxhc3RUb2tFbmQ6IG51bWJlciA9IDA7XG5cbiAgLy8gVGhlIGNvbnRleHQgc3RhY2sgaXMgdXNlZCB0byBzdXBlcmZpY2lhbGx5IHRyYWNrIHN5bnRhY3RpY1xuICAvLyBjb250ZXh0IHRvIHByZWRpY3Qgd2hldGhlciBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBhbGxvd2VkIGluIGFcbiAgLy8gZ2l2ZW4gcG9zaXRpb24uXG4gIGNvbnRleHQ6IEFycmF5PFRva0NvbnRleHQ+ID0gW2N0LmJyYWNlU3RhdGVtZW50XTtcbiAgZXhwckFsbG93ZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIC8vIFVzZWQgdG8gc2lnbmFsIHRvIGNhbGxlcnMgb2YgYHJlYWRXb3JkMWAgd2hldGhlciB0aGUgd29yZFxuICAvLyBjb250YWluZWQgYW55IGVzY2FwZSBzZXF1ZW5jZXMuIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2Ugd29yZHMgd2l0aFxuICAvLyBlc2NhcGUgc2VxdWVuY2VzIG11c3Qgbm90IGJlIGludGVycHJldGVkIGFzIGtleXdvcmRzLlxuICBjb250YWluc0VzYzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byB0aHJvdyBhbiBlcnJvciBmb3JcbiAgLy8gYW4gb2N0YWwgbGl0ZXJhbCBpbiBhIGRpcmVjdGl2ZSB0aGF0IG9jY3VycyBwcmlvclxuICAvLyB0byBhIFwidXNlIHN0cmljdFwiIGRpcmVjdGl2ZS5cbiAgb2N0YWxQb3NpdGlvbnM6IG51bWJlcltdID0gW107XG5cbiAgLy8gTmFtZXMgb2YgZXhwb3J0cyBzdG9yZS4gYGRlZmF1bHRgIGlzIHN0b3JlZCBhcyBhIG5hbWUgZm9yIGJvdGhcbiAgLy8gYGV4cG9ydCBkZWZhdWx0IGZvbztgIGFuZCBgZXhwb3J0IHsgZm9vIGFzIGRlZmF1bHQgfTtgLlxuICBleHBvcnRlZElkZW50aWZpZXJzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgLy8gVG9rZW5zIGxlbmd0aCBpbiB0b2tlbiBzdG9yZVxuICB0b2tlbnNMZW5ndGg6IG51bWJlciA9IDA7XG5cbiAgY3VyUG9zaXRpb24oKTogUG9zaXRpb24ge1xuICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5jdXJMaW5lLCB0aGlzLnBvcyAtIHRoaXMubGluZVN0YXJ0KTtcbiAgfVxuXG4gIGNsb25lKHNraXBBcnJheXM/OiBib29sZWFuKTogU3RhdGUge1xuICAgIGNvbnN0IHN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgIGxldCB2YWwgPSB0aGlzW2tleV07XG5cbiAgICAgIGlmICghc2tpcEFycmF5cyAmJiBBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICBzdGF0ZVtrZXldID0gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblxuLyo6OiBkZWNsYXJlIHZhciBpbnZhcmlhbnQ7ICovXG5cbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5pbXBvcnQgKiBhcyBOIGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBQb3NpdGlvbiB9IGZyb20gXCIuLi91dGlsL2xvY2F0aW9uXCI7XG5pbXBvcnQgKiBhcyBjaGFyQ29kZXMgZnJvbSBcImNoYXJjb2Rlc1wiO1xuaW1wb3J0IHsgaXNJZGVudGlmaWVyU3RhcnQsIGlzSWRlbnRpZmllckNoYXIgfSBmcm9tIFwiLi4vdXRpbC9pZGVudGlmaWVyXCI7XG5pbXBvcnQgeyB0eXBlcyBhcyB0dCwga2V5d29yZHMgYXMga2V5d29yZFR5cGVzLCB0eXBlIFRva2VuVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyB0eXBlIFRva0NvbnRleHQsIHR5cGVzIGFzIGN0IH0gZnJvbSBcIi4vY29udGV4dFwiO1xuaW1wb3J0IFBhcnNlckVycm9ycywgeyBFcnJvcnMgfSBmcm9tIFwiLi4vcGFyc2VyL2Vycm9yXCI7XG5pbXBvcnQgeyBTb3VyY2VMb2NhdGlvbiB9IGZyb20gXCIuLi91dGlsL2xvY2F0aW9uXCI7XG5pbXBvcnQge1xuICBsaW5lQnJlYWssXG4gIGxpbmVCcmVha0csXG4gIGlzTmV3TGluZSxcbiAgaXNXaGl0ZXNwYWNlLFxuICBza2lwV2hpdGVTcGFjZSxcbn0gZnJvbSBcIi4uL3V0aWwvd2hpdGVzcGFjZVwiO1xuaW1wb3J0IFN0YXRlIGZyb20gXCIuL3N0YXRlXCI7XG5cbmNvbnN0IFZBTElEX1JFR0VYX0ZMQUdTID0gbmV3IFNldChbXCJnXCIsIFwibVwiLCBcInNcIiwgXCJpXCIsIFwieVwiLCBcInVcIl0pO1xuXG4vLyBUaGUgZm9sbG93aW5nIGNoYXJhY3RlciBjb2RlcyBhcmUgZm9yYmlkZGVuIGZyb20gYmVpbmdcbi8vIGFuIGltbWVkaWF0ZSBzaWJsaW5nIG9mIE51bWVyaWNMaXRlcmFsU2VwYXJhdG9yIF9cblxuY29uc3QgZm9yYmlkZGVuTnVtZXJpY1NlcGFyYXRvclNpYmxpbmdzID0ge1xuICBkZWNCaW5PY3Q6IFtcbiAgICBjaGFyQ29kZXMuZG90LFxuICAgIGNoYXJDb2Rlcy51cHBlcmNhc2VCLFxuICAgIGNoYXJDb2Rlcy51cHBlcmNhc2VFLFxuICAgIGNoYXJDb2Rlcy51cHBlcmNhc2VPLFxuICAgIGNoYXJDb2Rlcy51bmRlcnNjb3JlLCAvLyBtdWx0aXBsZSBzZXBhcmF0b3JzIGFyZSBub3QgYWxsb3dlZFxuICAgIGNoYXJDb2Rlcy5sb3dlcmNhc2VCLFxuICAgIGNoYXJDb2Rlcy5sb3dlcmNhc2VFLFxuICAgIGNoYXJDb2Rlcy5sb3dlcmNhc2VPLFxuICBdLFxuICBoZXg6IFtcbiAgICBjaGFyQ29kZXMuZG90LFxuICAgIGNoYXJDb2Rlcy51cHBlcmNhc2VYLFxuICAgIGNoYXJDb2Rlcy51bmRlcnNjb3JlLCAvLyBtdWx0aXBsZSBzZXBhcmF0b3JzIGFyZSBub3QgYWxsb3dlZFxuICAgIGNoYXJDb2Rlcy5sb3dlcmNhc2VYLFxuICBdLFxufTtcblxuY29uc3QgYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncyA9IHt9O1xuYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5iaW4gPSBbXG4gIC8vIDAgLSAxXG4gIGNoYXJDb2Rlcy5kaWdpdDAsXG4gIGNoYXJDb2Rlcy5kaWdpdDEsXG5dO1xuYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5vY3QgPSBbXG4gIC8vIDAgLSA3XG4gIC4uLmFsbG93ZWROdW1lcmljU2VwYXJhdG9yU2libGluZ3MuYmluLFxuXG4gIGNoYXJDb2Rlcy5kaWdpdDIsXG4gIGNoYXJDb2Rlcy5kaWdpdDMsXG4gIGNoYXJDb2Rlcy5kaWdpdDQsXG4gIGNoYXJDb2Rlcy5kaWdpdDUsXG4gIGNoYXJDb2Rlcy5kaWdpdDYsXG4gIGNoYXJDb2Rlcy5kaWdpdDcsXG5dO1xuYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5kZWMgPSBbXG4gIC8vIDAgLSA5XG4gIC4uLmFsbG93ZWROdW1lcmljU2VwYXJhdG9yU2libGluZ3Mub2N0LFxuXG4gIGNoYXJDb2Rlcy5kaWdpdDgsXG4gIGNoYXJDb2Rlcy5kaWdpdDksXG5dO1xuXG5hbGxvd2VkTnVtZXJpY1NlcGFyYXRvclNpYmxpbmdzLmhleCA9IFtcbiAgLy8gMCAtIDksIEEgLSBGLCBhIC0gZixcbiAgLi4uYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5kZWMsXG5cbiAgY2hhckNvZGVzLnVwcGVyY2FzZUEsXG4gIGNoYXJDb2Rlcy51cHBlcmNhc2VCLFxuICBjaGFyQ29kZXMudXBwZXJjYXNlQyxcbiAgY2hhckNvZGVzLnVwcGVyY2FzZUQsXG4gIGNoYXJDb2Rlcy51cHBlcmNhc2VFLFxuICBjaGFyQ29kZXMudXBwZXJjYXNlRixcblxuICBjaGFyQ29kZXMubG93ZXJjYXNlQSxcbiAgY2hhckNvZGVzLmxvd2VyY2FzZUIsXG4gIGNoYXJDb2Rlcy5sb3dlcmNhc2VDLFxuICBjaGFyQ29kZXMubG93ZXJjYXNlRCxcbiAgY2hhckNvZGVzLmxvd2VyY2FzZUUsXG4gIGNoYXJDb2Rlcy5sb3dlcmNhc2VGLFxuXTtcblxuLy8gT2JqZWN0IHR5cGUgdXNlZCB0byByZXByZXNlbnQgdG9rZW5zLiBOb3RlIHRoYXQgbm9ybWFsbHksIHRva2Vuc1xuLy8gc2ltcGx5IGV4aXN0IGFzIHByb3BlcnRpZXMgb24gdGhlIHBhcnNlciBvYmplY3QuIFRoaXMgaXMgb25seVxuLy8gdXNlZCBmb3IgdGhlIG9uVG9rZW4gY2FsbGJhY2sgYW5kIHRoZSBleHRlcm5hbCB0b2tlbml6ZXIuXG5cbmV4cG9ydCBjbGFzcyBUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKHN0YXRlOiBTdGF0ZSkge1xuICAgIHRoaXMudHlwZSA9IHN0YXRlLnR5cGU7XG4gICAgdGhpcy52YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHRoaXMuc3RhcnQgPSBzdGF0ZS5zdGFydDtcbiAgICB0aGlzLmVuZCA9IHN0YXRlLmVuZDtcbiAgICB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihzdGF0ZS5zdGFydExvYywgc3RhdGUuZW5kTG9jKTtcbiAgfVxuXG4gIHR5cGU6IFRva2VuVHlwZTtcbiAgdmFsdWU6IGFueTtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG4gIGxvYzogU291cmNlTG9jYXRpb247XG59XG5cbi8vICMjIFRva2VuaXplclxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2tlbml6ZXIgZXh0ZW5kcyBQYXJzZXJFcnJvcnMge1xuICAvLyBGb3J3YXJkLWRlY2xhcmF0aW9uc1xuICAvLyBwYXJzZXIvdXRpbC5qc1xuICAvKjo6XG4gICtoYXNQcmVjZWRpbmdMaW5lQnJlYWs6ICgpID0+IGJvb2xlYW47XG4gICt1bmV4cGVjdGVkOiAocG9zPzogP251bWJlciwgbWVzc2FnZU9yVHlwZT86IHN0cmluZyB8IFRva2VuVHlwZSkgPT4gZW1wdHk7XG4gICtleHBlY3RQbHVnaW46IChuYW1lOiBzdHJpbmcsIHBvcz86ID9udW1iZXIpID0+IHRydWU7XG4gICovXG5cbiAgaXNMb29rYWhlYWQ6IGJvb2xlYW47XG5cbiAgLy8gVG9rZW4gc3RvcmUuXG4gIHRva2VuczogQXJyYXk8VG9rZW4gfCBOLkNvbW1lbnQ+ID0gW107XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT3B0aW9ucywgaW5wdXQ6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuICAgIHRoaXMuc3RhdGUuaW5pdChvcHRpb25zKTtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5pc0xvb2thaGVhZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVzaFRva2VuKHRva2VuOiBUb2tlbiB8IE4uQ29tbWVudCkge1xuICAgIC8vIFBvcCBvdXQgaW52YWxpZCB0b2tlbnMgdHJhcHBlZCBieSB0cnktY2F0Y2ggcGFyc2luZy5cbiAgICAvLyBUaG9zZSBwYXJzaW5nIGJyYW5jaGVzIGFyZSBtYWlubHkgY3JlYXRlZCBieSB0eXBlc2NyaXB0IGFuZCBmbG93IHBsdWdpbnMuXG4gICAgdGhpcy50b2tlbnMubGVuZ3RoID0gdGhpcy5zdGF0ZS50b2tlbnNMZW5ndGg7XG4gICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gICAgKyt0aGlzLnN0YXRlLnRva2Vuc0xlbmd0aDtcbiAgfVxuXG4gIC8vIE1vdmUgdG8gdGhlIG5leHQgdG9rZW5cblxuICBuZXh0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xvb2thaGVhZCkge1xuICAgICAgdGhpcy5jaGVja0tleXdvcmRFc2NhcGVzKCk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRva2Vucykge1xuICAgICAgICB0aGlzLnB1c2hUb2tlbihuZXcgVG9rZW4odGhpcy5zdGF0ZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUubGFzdFRva0VuZCA9IHRoaXMuc3RhdGUuZW5kO1xuICAgIHRoaXMuc3RhdGUubGFzdFRva1N0YXJ0ID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICB0aGlzLnN0YXRlLmxhc3RUb2tFbmRMb2MgPSB0aGlzLnN0YXRlLmVuZExvYztcbiAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgfVxuXG4gIC8vIFRPRE9cblxuICBlYXQodHlwZTogVG9rZW5UeXBlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMubWF0Y2godHlwZSkpIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPXG5cbiAgbWF0Y2godHlwZTogVG9rZW5UeXBlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUudHlwZSA9PT0gdHlwZTtcbiAgfVxuXG4gIC8vIFRPRE9cblxuICBsb29rYWhlYWQoKTogU3RhdGUge1xuICAgIGNvbnN0IG9sZCA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zdGF0ZSA9IG9sZC5jbG9uZSh0cnVlKTtcblxuICAgIHRoaXMuaXNMb29rYWhlYWQgPSB0cnVlO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHRoaXMuaXNMb29rYWhlYWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IGN1cnIgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMuc3RhdGUgPSBvbGQ7XG4gICAgcmV0dXJuIGN1cnI7XG4gIH1cblxuICBuZXh0VG9rZW5TdGFydCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5leHRUb2tlblN0YXJ0U2luY2UodGhpcy5zdGF0ZS5wb3MpO1xuICB9XG5cbiAgbmV4dFRva2VuU3RhcnRTaW5jZShwb3M6IG51bWJlcik6IG51bWJlciB7XG4gICAgc2tpcFdoaXRlU3BhY2UubGFzdEluZGV4ID0gcG9zO1xuICAgIGNvbnN0IHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuICAgIC8vICRGbG93SWdub3JlOiBUaGUgc2tpcFdoaXRlU3BhY2UgZW5zdXJlcyB0byBtYXRjaCBhbnkgc3RyaW5nXG4gICAgcmV0dXJuIHBvcyArIHNraXBbMF0ubGVuZ3RoO1xuICB9XG5cbiAgbG9va2FoZWFkQ2hhckNvZGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMubmV4dFRva2VuU3RhcnQoKSk7XG4gIH1cblxuICAvLyBUb2dnbGUgc3RyaWN0IG1vZGUuIFJlLXJlYWRzIHRoZSBuZXh0IG51bWJlciBvciBzdHJpbmcgdG8gcGxlYXNlXG4gIC8vIHBlZGFudGljIHRlc3RzIChgXCJ1c2Ugc3RyaWN0XCI7IDAxMDtgIHNob3VsZCBmYWlsKS5cblxuICBzZXRTdHJpY3Qoc3RyaWN0OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZS5zdHJpY3QgPSBzdHJpY3Q7XG4gICAgaWYgKCF0aGlzLm1hdGNoKHR0Lm51bSkgJiYgIXRoaXMubWF0Y2godHQuc3RyaW5nKSkgcmV0dXJuO1xuICAgIHRoaXMuc3RhdGUucG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICB3aGlsZSAodGhpcy5zdGF0ZS5wb3MgPCB0aGlzLnN0YXRlLmxpbmVTdGFydCkge1xuICAgICAgdGhpcy5zdGF0ZS5saW5lU3RhcnQgPVxuICAgICAgICB0aGlzLmlucHV0Lmxhc3RJbmRleE9mKFwiXFxuXCIsIHRoaXMuc3RhdGUubGluZVN0YXJ0IC0gMikgKyAxO1xuICAgICAgLS10aGlzLnN0YXRlLmN1ckxpbmU7XG4gICAgfVxuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gIH1cblxuICBjdXJDb250ZXh0KCk6IFRva0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbnRleHRbdGhpcy5zdGF0ZS5jb250ZXh0Lmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLy8gUmVhZCBhIHNpbmdsZSB0b2tlbiwgdXBkYXRpbmcgdGhlIHBhcnNlciBvYmplY3QncyB0b2tlbi1yZWxhdGVkXG4gIC8vIHByb3BlcnRpZXMuXG5cbiAgbmV4dFRva2VuKCk6IHZvaWQge1xuICAgIGNvbnN0IGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgICBpZiAoIWN1ckNvbnRleHQ/LnByZXNlcnZlU3BhY2UpIHRoaXMuc2tpcFNwYWNlKCk7XG5cbiAgICB0aGlzLnN0YXRlLm9jdGFsUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5zdGF0ZS5zdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgIHRoaXMuc3RhdGUuc3RhcnRMb2MgPSB0aGlzLnN0YXRlLmN1clBvc2l0aW9uKCk7XG4gICAgaWYgKHRoaXMuc3RhdGUucG9zID49IHRoaXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmVvZik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcnJpZGUgPSBjdXJDb250ZXh0Py5vdmVycmlkZTtcbiAgICBpZiAob3ZlcnJpZGUpIHtcbiAgICAgIG92ZXJyaWRlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFRva2VuRnJvbUNvZGUodGhpcy5pbnB1dC5jb2RlUG9pbnRBdCh0aGlzLnN0YXRlLnBvcykpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hDb21tZW50KFxuICAgIGJsb2NrOiBib29sZWFuLFxuICAgIHRleHQ6IHN0cmluZyxcbiAgICBzdGFydDogbnVtYmVyLFxuICAgIGVuZDogbnVtYmVyLFxuICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICBlbmRMb2M6IFBvc2l0aW9uLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjb21tZW50ID0ge1xuICAgICAgdHlwZTogYmxvY2sgPyBcIkNvbW1lbnRCbG9ja1wiIDogXCJDb21tZW50TGluZVwiLFxuICAgICAgdmFsdWU6IHRleHQsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZCxcbiAgICAgIGxvYzogbmV3IFNvdXJjZUxvY2F0aW9uKHN0YXJ0TG9jLCBlbmRMb2MpLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRva2VucykgdGhpcy5wdXNoVG9rZW4oY29tbWVudCk7XG4gICAgdGhpcy5zdGF0ZS5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgIHRoaXMuYWRkQ29tbWVudChjb21tZW50KTtcbiAgfVxuXG4gIHNraXBCbG9ja0NvbW1lbnQoKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLmN1clBvc2l0aW9uKCk7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcbiAgICBjb25zdCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnN0YXRlLnBvcyArIDIpO1xuICAgIGlmIChlbmQgPT09IC0xKSB0aHJvdyB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuVW50ZXJtaW5hdGVkQ29tbWVudCk7XG5cbiAgICB0aGlzLnN0YXRlLnBvcyA9IGVuZCArIDI7XG4gICAgbGluZUJyZWFrRy5sYXN0SW5kZXggPSBzdGFydDtcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKFxuICAgICAgKG1hdGNoID0gbGluZUJyZWFrRy5leGVjKHRoaXMuaW5wdXQpKSAmJlxuICAgICAgbWF0Y2guaW5kZXggPCB0aGlzLnN0YXRlLnBvc1xuICAgICkge1xuICAgICAgKyt0aGlzLnN0YXRlLmN1ckxpbmU7XG4gICAgICB0aGlzLnN0YXRlLmxpbmVTdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGFyZSBkb2luZyBhIGxvb2thaGVhZCByaWdodCBub3cgd2UgbmVlZCB0byBhZHZhbmNlIHRoZSBwb3NpdGlvbiAoYWJvdmUgY29kZSlcbiAgICAvLyBidXQgd2UgZG8gbm90IHdhbnQgdG8gcHVzaCB0aGUgY29tbWVudCB0byB0aGUgc3RhdGUuXG4gICAgaWYgKHRoaXMuaXNMb29rYWhlYWQpIHJldHVybjtcblxuICAgIHRoaXMucHVzaENvbW1lbnQoXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5pbnB1dC5zbGljZShzdGFydCArIDIsIGVuZCksXG4gICAgICBzdGFydCxcbiAgICAgIHRoaXMuc3RhdGUucG9zLFxuICAgICAgc3RhcnRMb2MsXG4gICAgICB0aGlzLnN0YXRlLmN1clBvc2l0aW9uKCksXG4gICAgKTtcbiAgfVxuXG4gIHNraXBMaW5lQ29tbWVudChzdGFydFNraXA6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLmN1clBvc2l0aW9uKCk7XG4gICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCh0aGlzLnN0YXRlLnBvcyArPSBzdGFydFNraXApKTtcbiAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgd2hpbGUgKCFpc05ld0xpbmUoY2gpICYmICsrdGhpcy5zdGF0ZS5wb3MgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgICBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgYXJlIGRvaW5nIGEgbG9va2FoZWFkIHJpZ2h0IG5vdyB3ZSBuZWVkIHRvIGFkdmFuY2UgdGhlIHBvc2l0aW9uIChhYm92ZSBjb2RlKVxuICAgIC8vIGJ1dCB3ZSBkbyBub3Qgd2FudCB0byBwdXNoIHRoZSBjb21tZW50IHRvIHRoZSBzdGF0ZS5cbiAgICBpZiAodGhpcy5pc0xvb2thaGVhZCkgcmV0dXJuO1xuXG4gICAgdGhpcy5wdXNoQ29tbWVudChcbiAgICAgIGZhbHNlLFxuICAgICAgdGhpcy5pbnB1dC5zbGljZShzdGFydCArIHN0YXJ0U2tpcCwgdGhpcy5zdGF0ZS5wb3MpLFxuICAgICAgc3RhcnQsXG4gICAgICB0aGlzLnN0YXRlLnBvcyxcbiAgICAgIHN0YXJ0TG9jLFxuICAgICAgdGhpcy5zdGF0ZS5jdXJQb3NpdGlvbigpLFxuICAgICk7XG4gIH1cblxuICAvLyBDYWxsZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYXJzZSBhbmQgYWZ0ZXIgZXZlcnkgdG9rZW4uIFNraXBzXG4gIC8vIHdoaXRlc3BhY2UgYW5kIGNvbW1lbnRzLCBhbmQuXG5cbiAgc2tpcFNwYWNlKCk6IHZvaWQge1xuICAgIGxvb3A6IHdoaWxlICh0aGlzLnN0YXRlLnBvcyA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgIGNhc2UgY2hhckNvZGVzLnNwYWNlOlxuICAgICAgICBjYXNlIGNoYXJDb2Rlcy5ub25CcmVha2luZ1NwYWNlOlxuICAgICAgICBjYXNlIGNoYXJDb2Rlcy50YWI6XG4gICAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBjaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm46XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSkgPT09IGNoYXJDb2Rlcy5saW5lRmVlZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgICB9XG4gICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICBjYXNlIGNoYXJDb2Rlcy5saW5lRmVlZDpcbiAgICAgICAgY2FzZSBjaGFyQ29kZXMubGluZVNlcGFyYXRvcjpcbiAgICAgICAgY2FzZSBjaGFyQ29kZXMucGFyYWdyYXBoU2VwYXJhdG9yOlxuICAgICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgKyt0aGlzLnN0YXRlLmN1ckxpbmU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5saW5lU3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGNoYXJDb2Rlcy5zbGFzaDpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpKSB7XG4gICAgICAgICAgICBjYXNlIGNoYXJDb2Rlcy5hc3RlcmlzazpcbiAgICAgICAgICAgICAgdGhpcy5za2lwQmxvY2tDb21tZW50KCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIGNoYXJDb2Rlcy5zbGFzaDpcbiAgICAgICAgICAgICAgdGhpcy5za2lwTGluZUNvbW1lbnQoMik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoY2gpKSB7XG4gICAgICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDYWxsZWQgYXQgdGhlIGVuZCBvZiBldmVyeSB0b2tlbi4gU2V0cyBgZW5kYCwgYHZhbGAsIGFuZFxuICAvLyBtYWludGFpbnMgYGNvbnRleHRgIGFuZCBgZXhwckFsbG93ZWRgLCBhbmQgc2tpcHMgdGhlIHNwYWNlIGFmdGVyXG4gIC8vIHRoZSB0b2tlbiwgc28gdGhhdCB0aGUgbmV4dCBvbmUncyBgc3RhcnRgIHdpbGwgcG9pbnQgYXQgdGhlXG4gIC8vIHJpZ2h0IHBvc2l0aW9uLlxuXG4gIGZpbmlzaFRva2VuKHR5cGU6IFRva2VuVHlwZSwgdmFsOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlLmVuZCA9IHRoaXMuc3RhdGUucG9zO1xuICAgIHRoaXMuc3RhdGUuZW5kTG9jID0gdGhpcy5zdGF0ZS5jdXJQb3NpdGlvbigpO1xuICAgIGNvbnN0IHByZXZUeXBlID0gdGhpcy5zdGF0ZS50eXBlO1xuICAgIHRoaXMuc3RhdGUudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5zdGF0ZS52YWx1ZSA9IHZhbDtcblxuICAgIGlmICghdGhpcy5pc0xvb2thaGVhZCkgdGhpcy51cGRhdGVDb250ZXh0KHByZXZUeXBlKTtcbiAgfVxuXG4gIC8vICMjIyBUb2tlbiByZWFkaW5nXG5cbiAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgdG8gZmV0Y2ggdGhlIG5leHQgdG9rZW4uIEl0XG4gIC8vIGlzIHNvbWV3aGF0IG9ic2N1cmUsIGJlY2F1c2UgaXQgd29ya3MgaW4gY2hhcmFjdGVyIGNvZGVzIHJhdGhlclxuICAvLyB0aGFuIGNoYXJhY3RlcnMsIGFuZCBiZWNhdXNlIG9wZXJhdG9yIHBhcnNpbmcgaGFzIGJlZW4gaW5saW5lZFxuICAvLyBpbnRvIGl0LlxuICAvL1xuICAvLyBBbGwgaW4gdGhlIG5hbWUgb2Ygc3BlZWQuXG5cbiAgLy8gbnVtYmVyIHNpZ24gaXMgXCIjXCJcbiAgcmVhZFRva2VuX251bWJlclNpZ24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3RhdGUucG9zID09PSAwICYmIHRoaXMucmVhZFRva2VuX2ludGVycHJldGVyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0UG9zID0gdGhpcy5zdGF0ZS5wb3MgKyAxO1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQobmV4dFBvcyk7XG4gICAgaWYgKG5leHQgPj0gY2hhckNvZGVzLmRpZ2l0MCAmJiBuZXh0IDw9IGNoYXJDb2Rlcy5kaWdpdDkpIHtcbiAgICAgIHRocm93IHRoaXMucmFpc2UodGhpcy5zdGF0ZS5wb3MsIEVycm9ycy5VbmV4cGVjdGVkRGlnaXRBZnRlckhhc2gpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5sZWZ0Q3VybHlCcmFjZSB8fFxuICAgICAgKG5leHQgPT09IGNoYXJDb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldCAmJiB0aGlzLmhhc1BsdWdpbihcInJlY29yZEFuZFR1cGxlXCIpKVxuICAgICkge1xuICAgICAgLy8gV2hlbiB3ZSBzZWUgYCN7YCwgaXQgaXMgbGlrZWx5IHRvIGJlIGEgaGFzaCByZWNvcmQuXG4gICAgICAvLyBIb3dldmVyIHdlIGRvbid0IHllbGwgYXQgYCNbYCBzaW5jZSB1c2VycyBtYXkgaW50ZW5kIHRvIHVzZSBcImNvbXB1dGVkIHByaXZhdGUgZmllbGRzXCIsXG4gICAgICAvLyB3aGljaCBpcyBub3QgYWxsb3dlZCBpbiB0aGUgc3BlYy4gVGhyb3dpbmcgZXhwZWN0aW5nIHJlY29yZEFuZFR1cGxlIGlzXG4gICAgICAvLyBtaXNsZWFkaW5nXG4gICAgICB0aGlzLmV4cGVjdFBsdWdpbihcInJlY29yZEFuZFR1cGxlXCIpO1xuICAgICAgaWYgKHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicmVjb3JkQW5kVHVwbGVcIiwgXCJzeW50YXhUeXBlXCIpICE9PSBcImhhc2hcIikge1xuICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKFxuICAgICAgICAgIHRoaXMuc3RhdGUucG9zLFxuICAgICAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5sZWZ0Q3VybHlCcmFjZVxuICAgICAgICAgICAgPyBFcnJvcnMuUmVjb3JkRXhwcmVzc2lvbkhhc2hJbmNvcnJlY3RTdGFydFN5bnRheFR5cGVcbiAgICAgICAgICAgIDogRXJyb3JzLlR1cGxlRXhwcmVzc2lvbkhhc2hJbmNvcnJlY3RTdGFydFN5bnRheFR5cGUsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMubGVmdEN1cmx5QnJhY2UpIHtcbiAgICAgICAgLy8gI3tcbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5icmFjZUhhc2hMKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICNbXG4gICAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQuYnJhY2tldEhhc2hMKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUucG9zICs9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmluaXNoT3AodHQuaGFzaCwgMSk7XG4gICAgfVxuICB9XG5cbiAgcmVhZFRva2VuX2RvdCgpOiB2b2lkIHtcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgaWYgKG5leHQgPj0gY2hhckNvZGVzLmRpZ2l0MCAmJiBuZXh0IDw9IGNoYXJDb2Rlcy5kaWdpdDkpIHtcbiAgICAgIHRoaXMucmVhZE51bWJlcih0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBuZXh0ID09PSBjaGFyQ29kZXMuZG90ICYmXG4gICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAyKSA9PT0gY2hhckNvZGVzLmRvdFxuICAgICkge1xuICAgICAgdGhpcy5zdGF0ZS5wb3MgKz0gMztcbiAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQuZWxsaXBzaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5kb3QpO1xuICAgIH1cbiAgfVxuXG4gIHJlYWRUb2tlbl9zbGFzaCgpOiB2b2lkIHtcbiAgICAvLyAnLydcbiAgICBpZiAodGhpcy5zdGF0ZS5leHByQWxsb3dlZCAmJiAhdGhpcy5zdGF0ZS5pblR5cGUpIHtcbiAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB0aGlzLnJlYWRSZWdleHAoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgaWYgKG5leHQgPT09IGNoYXJDb2Rlcy5lcXVhbHNUbykge1xuICAgICAgdGhpcy5maW5pc2hPcCh0dC5hc3NpZ24sIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpbmlzaE9wKHR0LnNsYXNoLCAxKTtcbiAgICB9XG4gIH1cblxuICByZWFkVG9rZW5faW50ZXJwcmV0ZXIoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuc3RhdGUucG9zICE9PSAwIHx8IHRoaXMubGVuZ3RoIDwgMikgcmV0dXJuIGZhbHNlO1xuXG4gICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgaWYgKGNoICE9PSBjaGFyQ29kZXMuZXhjbGFtYXRpb25NYXJrKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgIHRoaXMuc3RhdGUucG9zICs9IDE7XG5cbiAgICB3aGlsZSAoIWlzTmV3TGluZShjaCkgJiYgKyt0aGlzLnN0YXRlLnBvcyA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgdGhpcy5zdGF0ZS5wb3MpO1xuXG4gICAgdGhpcy5maW5pc2hUb2tlbih0dC5pbnRlcnByZXRlckRpcmVjdGl2ZSwgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZWFkVG9rZW5fbXVsdF9tb2R1bG8oY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gJyUqJ1xuICAgIGxldCB0eXBlID0gY29kZSA9PT0gY2hhckNvZGVzLmFzdGVyaXNrID8gdHQuc3RhciA6IHR0Lm1vZHVsbztcbiAgICBsZXQgd2lkdGggPSAxO1xuICAgIGxldCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgY29uc3QgZXhwckFsbG93ZWQgPSB0aGlzLnN0YXRlLmV4cHJBbGxvd2VkO1xuXG4gICAgLy8gRXhwb25lbnRpYXRpb24gb3BlcmF0b3IgKipcbiAgICBpZiAoY29kZSA9PT0gY2hhckNvZGVzLmFzdGVyaXNrICYmIG5leHQgPT09IGNoYXJDb2Rlcy5hc3Rlcmlzaykge1xuICAgICAgd2lkdGgrKztcbiAgICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAyKTtcbiAgICAgIHR5cGUgPSB0dC5leHBvbmVudDtcbiAgICB9XG5cbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmVxdWFsc1RvICYmICFleHByQWxsb3dlZCkge1xuICAgICAgd2lkdGgrKztcbiAgICAgIHR5cGUgPSB0dC5hc3NpZ247XG4gICAgfVxuXG4gICAgdGhpcy5maW5pc2hPcCh0eXBlLCB3aWR0aCk7XG4gIH1cblxuICByZWFkVG9rZW5fcGlwZV9hbXAoY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gJ3x8JyAnJiYnICd8fD0nICcmJj0nXG4gICAgY29uc3QgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpO1xuXG4gICAgaWYgKG5leHQgPT09IGNvZGUpIHtcbiAgICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAyKSA9PT0gY2hhckNvZGVzLmVxdWFsc1RvKSB7XG4gICAgICAgIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCAzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmluaXNoT3AoXG4gICAgICAgICAgY29kZSA9PT0gY2hhckNvZGVzLnZlcnRpY2FsQmFyID8gdHQubG9naWNhbE9SIDogdHQubG9naWNhbEFORCxcbiAgICAgICAgICAyLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjaGFyQ29kZXMudmVydGljYWxCYXIpIHtcbiAgICAgIC8vICd8PidcbiAgICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMuZ3JlYXRlclRoYW4pIHtcbiAgICAgICAgdGhpcy5maW5pc2hPcCh0dC5waXBlbGluZSwgMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vICd8fSdcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5oYXNQbHVnaW4oXCJyZWNvcmRBbmRUdXBsZVwiKSAmJlxuICAgICAgICBuZXh0ID09PSBjaGFyQ29kZXMucmlnaHRDdXJseUJyYWNlXG4gICAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicmVjb3JkQW5kVHVwbGVcIiwgXCJzeW50YXhUeXBlXCIpICE9PSBcImJhclwiKSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucG9zLFxuICAgICAgICAgICAgRXJyb3JzLlJlY29yZEV4cHJlc3Npb25CYXJJbmNvcnJlY3RFbmRTeW50YXhUeXBlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpbmlzaE9wKHR0LmJyYWNlQmFyUiwgMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gJ3xdJ1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmhhc1BsdWdpbihcInJlY29yZEFuZFR1cGxlXCIpICYmXG4gICAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXRcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5nZXRQbHVnaW5PcHRpb24oXCJyZWNvcmRBbmRUdXBsZVwiLCBcInN5bnRheFR5cGVcIikgIT09IFwiYmFyXCIpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wb3MsXG4gICAgICAgICAgICBFcnJvcnMuVHVwbGVFeHByZXNzaW9uQmFySW5jb3JyZWN0RW5kU3ludGF4VHlwZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maW5pc2hPcCh0dC5icmFja2V0QmFyUiwgMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmVxdWFsc1RvKSB7XG4gICAgICB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbiwgMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5maW5pc2hPcChcbiAgICAgIGNvZGUgPT09IGNoYXJDb2Rlcy52ZXJ0aWNhbEJhciA/IHR0LmJpdHdpc2VPUiA6IHR0LmJpdHdpc2VBTkQsXG4gICAgICAxLFxuICAgICk7XG4gIH1cblxuICByZWFkVG9rZW5fY2FyZXQoKTogdm9pZCB7XG4gICAgLy8gJ14nXG4gICAgY29uc3QgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMuZXF1YWxzVG8pIHtcbiAgICAgIHRoaXMuZmluaXNoT3AodHQuYXNzaWduLCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maW5pc2hPcCh0dC5iaXR3aXNlWE9SLCAxKTtcbiAgICB9XG4gIH1cblxuICByZWFkVG9rZW5fcGx1c19taW4oY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gJystJ1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKTtcblxuICAgIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5kYXNoICYmXG4gICAgICAgICF0aGlzLmluTW9kdWxlICYmXG4gICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDIpID09PSBjaGFyQ29kZXMuZ3JlYXRlclRoYW4gJiZcbiAgICAgICAgKHRoaXMuc3RhdGUubGFzdFRva0VuZCA9PT0gMCB8fCB0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpKVxuICAgICAgKSB7XG4gICAgICAgIC8vIEEgYC0tPmAgbGluZSBjb21tZW50XG4gICAgICAgIHRoaXMuc2tpcExpbmVDb21tZW50KDMpO1xuICAgICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmZpbmlzaE9wKHR0LmluY0RlYywgMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5leHQgPT09IGNoYXJDb2Rlcy5lcXVhbHNUbykge1xuICAgICAgdGhpcy5maW5pc2hPcCh0dC5hc3NpZ24sIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpbmlzaE9wKHR0LnBsdXNNaW4sIDEpO1xuICAgIH1cbiAgfVxuXG4gIHJlYWRUb2tlbl9sdF9ndChjb2RlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyAnPD4nXG4gICAgY29uc3QgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpO1xuICAgIGxldCBzaXplID0gMTtcblxuICAgIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgICBzaXplID1cbiAgICAgICAgY29kZSA9PT0gY2hhckNvZGVzLmdyZWF0ZXJUaGFuICYmXG4gICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDIpID09PSBjaGFyQ29kZXMuZ3JlYXRlclRoYW5cbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IDI7XG4gICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgc2l6ZSkgPT09IGNoYXJDb2Rlcy5lcXVhbHNUbykge1xuICAgICAgICB0aGlzLmZpbmlzaE9wKHR0LmFzc2lnbiwgc2l6ZSArIDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmZpbmlzaE9wKHR0LmJpdFNoaWZ0LCBzaXplKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBuZXh0ID09PSBjaGFyQ29kZXMuZXhjbGFtYXRpb25NYXJrICYmXG4gICAgICBjb2RlID09PSBjaGFyQ29kZXMubGVzc1RoYW4gJiZcbiAgICAgICF0aGlzLmluTW9kdWxlICYmXG4gICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAyKSA9PT0gY2hhckNvZGVzLmRhc2ggJiZcbiAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDMpID09PSBjaGFyQ29kZXMuZGFzaFxuICAgICkge1xuICAgICAgLy8gYDwhLS1gLCBhbiBYTUwtc3R5bGUgY29tbWVudCB0aGF0IHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhIGxpbmUgY29tbWVudFxuICAgICAgdGhpcy5za2lwTGluZUNvbW1lbnQoNCk7XG4gICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmVxdWFsc1RvKSB7XG4gICAgICAvLyA8PSB8ID49XG4gICAgICBzaXplID0gMjtcbiAgICB9XG5cbiAgICB0aGlzLmZpbmlzaE9wKHR0LnJlbGF0aW9uYWwsIHNpemUpO1xuICB9XG5cbiAgcmVhZFRva2VuX2VxX2V4Y2woY29kZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gJz0hJ1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKTtcbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmVxdWFsc1RvKSB7XG4gICAgICB0aGlzLmZpbmlzaE9wKFxuICAgICAgICB0dC5lcXVhbGl0eSxcbiAgICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMikgPT09IGNoYXJDb2Rlcy5lcXVhbHNUb1xuICAgICAgICAgID8gM1xuICAgICAgICAgIDogMixcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb2RlID09PSBjaGFyQ29kZXMuZXF1YWxzVG8gJiYgbmV4dCA9PT0gY2hhckNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICAvLyAnPT4nXG4gICAgICB0aGlzLnN0YXRlLnBvcyArPSAyO1xuICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5hcnJvdyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gY2hhckNvZGVzLmVxdWFsc1RvID8gdHQuZXEgOiB0dC5iYW5nLCAxKTtcbiAgfVxuXG4gIHJlYWRUb2tlbl9xdWVzdGlvbigpOiB2b2lkIHtcbiAgICAvLyAnPydcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgY29uc3QgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAyKTtcbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLnF1ZXN0aW9uTWFyaykge1xuICAgICAgaWYgKG5leHQyID09PSBjaGFyQ29kZXMuZXF1YWxzVG8pIHtcbiAgICAgICAgLy8gJz8/PSdcbiAgICAgICAgdGhpcy5maW5pc2hPcCh0dC5hc3NpZ24sIDMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gJz8/J1xuICAgICAgICB0aGlzLmZpbmlzaE9wKHR0Lm51bGxpc2hDb2FsZXNjaW5nLCAyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgbmV4dCA9PT0gY2hhckNvZGVzLmRvdCAmJlxuICAgICAgIShuZXh0MiA+PSBjaGFyQ29kZXMuZGlnaXQwICYmIG5leHQyIDw9IGNoYXJDb2Rlcy5kaWdpdDkpXG4gICAgKSB7XG4gICAgICAvLyAnLicgbm90IGZvbGxvd2VkIGJ5IGEgbnVtYmVyXG4gICAgICB0aGlzLnN0YXRlLnBvcyArPSAyO1xuICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5xdWVzdGlvbkRvdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LnF1ZXN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBnZXRUb2tlbkZyb21Db2RlKGNvZGU6IG51bWJlcik6IHZvaWQge1xuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgLy8gVGhlIGludGVycHJldGF0aW9uIG9mIGEgZG90IGRlcGVuZHMgb24gd2hldGhlciBpdCBpcyBmb2xsb3dlZFxuICAgICAgLy8gYnkgYSBkaWdpdCBvciBhbm90aGVyIHR3byBkb3RzLlxuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kb3Q6XG4gICAgICAgIHRoaXMucmVhZFRva2VuX2RvdCgpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIC8vIFB1bmN0dWF0aW9uIHRva2Vucy5cbiAgICAgIGNhc2UgY2hhckNvZGVzLmxlZnRQYXJlbnRoZXNpczpcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5wYXJlbkwpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5yaWdodFBhcmVudGhlc2lzOlxuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LnBhcmVuUik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLnNlbWljb2xvbjpcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5zZW1pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBjaGFyQ29kZXMuY29tbWE6XG4gICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQuY29tbWEpO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldDpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuaGFzUGx1Z2luKFwicmVjb3JkQW5kVHVwbGVcIikgJiZcbiAgICAgICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKSA9PT0gY2hhckNvZGVzLnZlcnRpY2FsQmFyXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0aGlzLmdldFBsdWdpbk9wdGlvbihcInJlY29yZEFuZFR1cGxlXCIsIFwic3ludGF4VHlwZVwiKSAhPT0gXCJiYXJcIikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5yYWlzZShcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5wb3MsXG4gICAgICAgICAgICAgIEVycm9ycy5UdXBsZUV4cHJlc3Npb25CYXJJbmNvcnJlY3RTdGFydFN5bnRheFR5cGUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFt8XG4gICAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5icmFja2V0QmFyTCk7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQuYnJhY2tldEwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldDpcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5icmFja2V0Uik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLmxlZnRDdXJseUJyYWNlOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5oYXNQbHVnaW4oXCJyZWNvcmRBbmRUdXBsZVwiKSAmJlxuICAgICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpID09PSBjaGFyQ29kZXMudmVydGljYWxCYXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicmVjb3JkQW5kVHVwbGVcIiwgXCJzeW50YXhUeXBlXCIpICE9PSBcImJhclwiKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnBvcyxcbiAgICAgICAgICAgICAgRXJyb3JzLlJlY29yZEV4cHJlc3Npb25CYXJJbmNvcnJlY3RTdGFydFN5bnRheFR5cGUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHt8XG4gICAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5icmFjZUJhckwpO1xuICAgICAgICAgIHRoaXMuc3RhdGUucG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNlTCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBjaGFyQ29kZXMucmlnaHRDdXJseUJyYWNlOlxuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmJyYWNlUik7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBjaGFyQ29kZXMuY29sb246XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmhhc1BsdWdpbihcImZ1bmN0aW9uQmluZFwiKSAmJlxuICAgICAgICAgIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpID09PSBjaGFyQ29kZXMuY29sb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5maW5pc2hPcCh0dC5kb3VibGVDb2xvbiwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmNvbG9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnF1ZXN0aW9uTWFyazpcbiAgICAgICAgdGhpcy5yZWFkVG9rZW5fcXVlc3Rpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5ncmF2ZUFjY2VudDpcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5iYWNrUXVvdGUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLmRpZ2l0MDoge1xuICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zICsgMSk7XG4gICAgICAgIC8vICcweCcsICcwWCcgLSBoZXggbnVtYmVyXG4gICAgICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMubG93ZXJjYXNlWCB8fCBuZXh0ID09PSBjaGFyQ29kZXMudXBwZXJjYXNlWCkge1xuICAgICAgICAgIHRoaXMucmVhZFJhZGl4TnVtYmVyKDE2KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gJzBvJywgJzBPJyAtIG9jdGFsIG51bWJlclxuICAgICAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmxvd2VyY2FzZU8gfHwgbmV4dCA9PT0gY2hhckNvZGVzLnVwcGVyY2FzZU8pIHtcbiAgICAgICAgICB0aGlzLnJlYWRSYWRpeE51bWJlcig4KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gJzBiJywgJzBCJyAtIGJpbmFyeSBudW1iZXJcbiAgICAgICAgaWYgKG5leHQgPT09IGNoYXJDb2Rlcy5sb3dlcmNhc2VCIHx8IG5leHQgPT09IGNoYXJDb2Rlcy51cHBlcmNhc2VCKSB7XG4gICAgICAgICAgdGhpcy5yZWFkUmFkaXhOdW1iZXIoMik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBbnl0aGluZyBlbHNlIGJlZ2lubmluZyB3aXRoIGEgZGlnaXQgaXMgYW4gaW50ZWdlciwgb2N0YWxcbiAgICAgIC8vIG51bWJlciwgb3IgZmxvYXQuIChmYWxsIHRocm91Z2gpXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDE6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDI6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDM6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDQ6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDU6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDY6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDc6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDg6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDk6XG4gICAgICAgIHRoaXMucmVhZE51bWJlcihmYWxzZSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgLy8gUXVvdGVzIHByb2R1Y2Ugc3RyaW5ncy5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnF1b3RhdGlvbk1hcms6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5hcG9zdHJvcGhlOlxuICAgICAgICB0aGlzLnJlYWRTdHJpbmcoY29kZSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgLy8gT3BlcmF0b3JzIGFyZSBwYXJzZWQgaW5saW5lIGluIHRpbnkgc3RhdGUgbWFjaGluZXMuICc9JyAoY2hhckNvZGVzLmVxdWFsc1RvKSBpc1xuICAgICAgLy8gb2Z0ZW4gcmVmZXJyZWQgdG8uIGBmaW5pc2hPcGAgc2ltcGx5IHNraXBzIHRoZSBhbW91bnQgb2ZcbiAgICAgIC8vIGNoYXJhY3RlcnMgaXQgaXMgZ2l2ZW4gYXMgc2Vjb25kIGFyZ3VtZW50LCBhbmQgcmV0dXJucyBhIHRva2VuXG4gICAgICAvLyBvZiB0aGUgdHlwZSBnaXZlbiBieSBpdHMgZmlyc3QgYXJndW1lbnQuXG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnNsYXNoOlxuICAgICAgICB0aGlzLnJlYWRUb2tlbl9zbGFzaCgpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnBlcmNlbnRTaWduOlxuICAgICAgY2FzZSBjaGFyQ29kZXMuYXN0ZXJpc2s6XG4gICAgICAgIHRoaXMucmVhZFRva2VuX211bHRfbW9kdWxvKGNvZGUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnZlcnRpY2FsQmFyOlxuICAgICAgY2FzZSBjaGFyQ29kZXMuYW1wZXJzYW5kOlxuICAgICAgICB0aGlzLnJlYWRUb2tlbl9waXBlX2FtcChjb2RlKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5jYXJldDpcbiAgICAgICAgdGhpcy5yZWFkVG9rZW5fY2FyZXQoKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5wbHVzU2lnbjpcbiAgICAgIGNhc2UgY2hhckNvZGVzLmRhc2g6XG4gICAgICAgIHRoaXMucmVhZFRva2VuX3BsdXNfbWluKGNvZGUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLmxlc3NUaGFuOlxuICAgICAgY2FzZSBjaGFyQ29kZXMuZ3JlYXRlclRoYW46XG4gICAgICAgIHRoaXMucmVhZFRva2VuX2x0X2d0KGNvZGUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLmVxdWFsc1RvOlxuICAgICAgY2FzZSBjaGFyQ29kZXMuZXhjbGFtYXRpb25NYXJrOlxuICAgICAgICB0aGlzLnJlYWRUb2tlbl9lcV9leGNsKGNvZGUpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLnRpbGRlOlxuICAgICAgICB0aGlzLmZpbmlzaE9wKHR0LnRpbGRlLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5hdFNpZ246XG4gICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQuYXQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgY2hhckNvZGVzLm51bWJlclNpZ246XG4gICAgICAgIHRoaXMucmVhZFRva2VuX251bWJlclNpZ24oKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIGNoYXJDb2Rlcy5iYWNrc2xhc2g6XG4gICAgICAgIHRoaXMucmVhZFdvcmQoKTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoY29kZSkpIHtcbiAgICAgICAgICB0aGlzLnJlYWRXb3JkKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy5yYWlzZShcbiAgICAgIHRoaXMuc3RhdGUucG9zLFxuICAgICAgRXJyb3JzLkludmFsaWRPclVuZXhwZWN0ZWRUb2tlbixcbiAgICAgIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpLFxuICAgICk7XG4gIH1cblxuICBmaW5pc2hPcCh0eXBlOiBUb2tlblR5cGUsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0ciA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGF0ZS5wb3MsIHRoaXMuc3RhdGUucG9zICsgc2l6ZSk7XG4gICAgdGhpcy5zdGF0ZS5wb3MgKz0gc2l6ZTtcbiAgICB0aGlzLmZpbmlzaFRva2VuKHR5cGUsIHN0cik7XG4gIH1cblxuICByZWFkUmVnZXhwKCk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgbGV0IGVzY2FwZWQsIGluQ2xhc3M7XG4gICAgZm9yICg7Oykge1xuICAgICAgaWYgKHRoaXMuc3RhdGUucG9zID49IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5VbnRlcm1pbmF0ZWRSZWdFeHApO1xuICAgICAgfVxuICAgICAgY29uc3QgY2ggPSB0aGlzLmlucHV0LmNoYXJBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBpZiAobGluZUJyZWFrLnRlc3QoY2gpKSB7XG4gICAgICAgIHRocm93IHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5VbnRlcm1pbmF0ZWRSZWdFeHApO1xuICAgICAgfVxuICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNoID09PSBcIltcIikge1xuICAgICAgICAgIGluQ2xhc3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoID09PSBcIl1cIiAmJiBpbkNsYXNzKSB7XG4gICAgICAgICAgaW5DbGFzcyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoID09PSBcIi9cIiAmJiAhaW5DbGFzcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZWQgPSBjaCA9PT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5zdGF0ZS5wb3MpO1xuICAgICsrdGhpcy5zdGF0ZS5wb3M7XG5cbiAgICBsZXQgbW9kcyA9IFwiXCI7XG5cbiAgICB3aGlsZSAodGhpcy5zdGF0ZS5wb3MgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2hhciA9IHRoaXMuaW5wdXRbdGhpcy5zdGF0ZS5wb3NdO1xuICAgICAgY29uc3QgY2hhckNvZGUgPSB0aGlzLmlucHV0LmNvZGVQb2ludEF0KHRoaXMuc3RhdGUucG9zKTtcblxuICAgICAgaWYgKFZBTElEX1JFR0VYX0ZMQUdTLmhhcyhjaGFyKSkge1xuICAgICAgICBpZiAobW9kcy5pbmRleE9mKGNoYXIpID4gLTEpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zICsgMSwgRXJyb3JzLkR1cGxpY2F0ZVJlZ0V4cEZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgaXNJZGVudGlmaWVyQ2hhcihjaGFyQ29kZSkgfHxcbiAgICAgICAgY2hhckNvZGUgPT09IGNoYXJDb2Rlcy5iYWNrc2xhc2hcbiAgICAgICkge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zICsgMSwgRXJyb3JzLk1hbGZvcm1lZFJlZ0V4cEZsYWdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgbW9kcyArPSBjaGFyO1xuICAgIH1cblxuICAgIHRoaXMuZmluaXNoVG9rZW4odHQucmVnZXhwLCB7XG4gICAgICBwYXR0ZXJuOiBjb250ZW50LFxuICAgICAgZmxhZ3M6IG1vZHMsXG4gICAgfSk7XG4gIH1cblxuICAvLyBSZWFkIGFuIGludGVnZXIgaW4gdGhlIGdpdmVuIHJhZGl4LiBSZXR1cm4gbnVsbCBpZiB6ZXJvIGRpZ2l0c1xuICAvLyB3ZXJlIHJlYWQsIHRoZSBpbnRlZ2VyIHZhbHVlIG90aGVyd2lzZS4gV2hlbiBgbGVuYCBpcyBnaXZlbiwgdGhpc1xuICAvLyB3aWxsIHJldHVybiBgbnVsbGAgdW5sZXNzIHRoZSBpbnRlZ2VyIGhhcyBleGFjdGx5IGBsZW5gIGRpZ2l0cy5cbiAgLy8gV2hlbiBgZm9yY2VMZW5gIGlzIGB0cnVlYCwgaXQgbWVhbnMgdGhhdCB3ZSBhbHJlYWR5IGtub3cgdGhhdCBpbiBjYXNlXG4gIC8vIG9mIGEgbWFsZm9ybWVkIG51bWJlciB3ZSBoYXZlIHRvIHNraXAgYGxlbmAgY2hhcmFjdGVycyBhbnl3YXksIGluc3RlYWRcbiAgLy8gb2YgYmFpbGluZyBvdXQgZWFybHkuIEZvciBleGFtcGxlLCBpbiBcIlxcdXsxMjNafVwiIHdlIHdhbnQgdG8gcmVhZCB1cCB0byB9XG4gIC8vIGFueXdheSwgd2hpbGUgaW4gXCJcXHUwMFpcIiB3ZSB3aWxsIHN0b3AgYXQgWiBpbnN0ZWFkIG9mIGNvbnN1bWluZyBmb3VyXG4gIC8vIGNoYXJhY3RlcnMgKGFuZCB0aHVzIHRoZSBjbG9zaW5nIHF1b3RlKS5cblxuICByZWFkSW50KFxuICAgIHJhZGl4OiBudW1iZXIsXG4gICAgbGVuPzogbnVtYmVyLFxuICAgIGZvcmNlTGVuPzogYm9vbGVhbixcbiAgICBhbGxvd051bVNlcGFyYXRvcjogYm9vbGVhbiA9IHRydWUsXG4gICk6IG51bWJlciB8IG51bGwge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgY29uc3QgZm9yYmlkZGVuU2libGluZ3MgPVxuICAgICAgcmFkaXggPT09IDE2XG4gICAgICAgID8gZm9yYmlkZGVuTnVtZXJpY1NlcGFyYXRvclNpYmxpbmdzLmhleFxuICAgICAgICA6IGZvcmJpZGRlbk51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5kZWNCaW5PY3Q7XG4gICAgY29uc3QgYWxsb3dlZFNpYmxpbmdzID1cbiAgICAgIHJhZGl4ID09PSAxNlxuICAgICAgICA/IGFsbG93ZWROdW1lcmljU2VwYXJhdG9yU2libGluZ3MuaGV4XG4gICAgICAgIDogcmFkaXggPT09IDEwXG4gICAgICAgID8gYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5kZWNcbiAgICAgICAgOiByYWRpeCA9PT0gOFxuICAgICAgICA/IGFsbG93ZWROdW1lcmljU2VwYXJhdG9yU2libGluZ3Mub2N0XG4gICAgICAgIDogYWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncy5iaW47XG5cbiAgICBsZXQgaW52YWxpZCA9IGZhbHNlO1xuICAgIGxldCB0b3RhbCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgZSA9IGxlbiA9PSBudWxsID8gSW5maW5pdHkgOiBsZW47IGkgPCBlOyArK2kpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgbGV0IHZhbDtcblxuICAgICAgaWYgKGNvZGUgPT09IGNoYXJDb2Rlcy51bmRlcnNjb3JlKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgLSAxKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyArIDEpO1xuICAgICAgICBpZiAoYWxsb3dlZFNpYmxpbmdzLmluZGV4T2YobmV4dCkgPT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnBvcywgRXJyb3JzLlVuZXhwZWN0ZWROdW1lcmljU2VwYXJhdG9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBmb3JiaWRkZW5TaWJsaW5ncy5pbmRleE9mKHByZXYpID4gLTEgfHxcbiAgICAgICAgICBmb3JiaWRkZW5TaWJsaW5ncy5pbmRleE9mKG5leHQpID4gLTEgfHxcbiAgICAgICAgICBOdW1iZXIuaXNOYU4obmV4dClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnBvcywgRXJyb3JzLlVuZXhwZWN0ZWROdW1lcmljU2VwYXJhdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYWxsb3dOdW1TZXBhcmF0b3IpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuTnVtZXJpY1NlcGFyYXRvckluRXNjYXBlU2VxdWVuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIHRoaXMgXyBjaGFyYWN0ZXJcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2RlID49IGNoYXJDb2Rlcy5sb3dlcmNhc2VBKSB7XG4gICAgICAgIHZhbCA9IGNvZGUgLSBjaGFyQ29kZXMubG93ZXJjYXNlQSArIGNoYXJDb2Rlcy5saW5lRmVlZDtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA+PSBjaGFyQ29kZXMudXBwZXJjYXNlQSkge1xuICAgICAgICB2YWwgPSBjb2RlIC0gY2hhckNvZGVzLnVwcGVyY2FzZUEgKyBjaGFyQ29kZXMubGluZUZlZWQ7XG4gICAgICB9IGVsc2UgaWYgKGNoYXJDb2Rlcy5pc0RpZ2l0KGNvZGUpKSB7XG4gICAgICAgIHZhbCA9IGNvZGUgLSBjaGFyQ29kZXMuZGlnaXQwOyAvLyAwLTlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IEluZmluaXR5O1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA+PSByYWRpeCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgaW4gXCJlcnJvclJlY292ZXJ5XCIgbW9kZSBhbmQgd2UgZm91bmQgYSBkaWdpdCB3aGljaCBpcyB0b28gYmlnLFxuICAgICAgICAvLyBkb24ndCBicmVhayB0aGUgbG9vcC5cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVycm9yUmVjb3ZlcnkgJiYgdmFsIDw9IDkpIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCArIGkgKyAyLCBFcnJvcnMuSW52YWxpZERpZ2l0LCByYWRpeCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9yY2VMZW4pIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICAgIGludmFsaWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgdG90YWwgPSB0b3RhbCAqIHJhZGl4ICsgdmFsO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLnN0YXRlLnBvcyA9PT0gc3RhcnQgfHxcbiAgICAgIChsZW4gIT0gbnVsbCAmJiB0aGlzLnN0YXRlLnBvcyAtIHN0YXJ0ICE9PSBsZW4pIHx8XG4gICAgICBpbnZhbGlkXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICByZWFkUmFkaXhOdW1iZXIocmFkaXg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgbGV0IGlzQmlnSW50ID0gZmFsc2U7XG5cbiAgICB0aGlzLnN0YXRlLnBvcyArPSAyOyAvLyAweFxuICAgIGNvbnN0IHZhbCA9IHRoaXMucmVhZEludChyYWRpeCk7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQgKyAyLCBFcnJvcnMuSW52YWxpZERpZ2l0LCByYWRpeCk7XG4gICAgfVxuICAgIGNvbnN0IG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpO1xuXG4gICAgaWYgKG5leHQgPT09IGNoYXJDb2Rlcy5sb3dlcmNhc2VOKSB7XG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgaXNCaWdJbnQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmxvd2VyY2FzZU0pIHtcbiAgICAgIHRocm93IHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5JbnZhbGlkRGVjaW1hbCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMuaW5wdXQuY29kZVBvaW50QXQodGhpcy5zdGF0ZS5wb3MpKSkge1xuICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnBvcywgRXJyb3JzLk51bWJlcklkZW50aWZpZXIpO1xuICAgIH1cblxuICAgIGlmIChpc0JpZ0ludCkge1xuICAgICAgY29uc3Qgc3RyID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5zdGF0ZS5wb3MpLnJlcGxhY2UoL1tfbl0vZywgXCJcIik7XG4gICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmJpZ2ludCwgc3RyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZpbmlzaFRva2VuKHR0Lm51bSwgdmFsKTtcbiAgfVxuXG4gIC8vIFJlYWQgYW4gaW50ZWdlciwgb2N0YWwgaW50ZWdlciwgb3IgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuXG4gIHJlYWROdW1iZXIoc3RhcnRzV2l0aERvdDogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgbGV0IGlzRmxvYXQgPSBmYWxzZTtcbiAgICBsZXQgaXNCaWdJbnQgPSBmYWxzZTtcbiAgICBsZXQgaXNEZWNpbWFsID0gZmFsc2U7XG4gICAgbGV0IGhhc0V4cG9uZW50ID0gZmFsc2U7XG4gICAgbGV0IGlzT2N0YWwgPSBmYWxzZTtcblxuICAgIGlmICghc3RhcnRzV2l0aERvdCAmJiB0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB7XG4gICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuSW52YWxpZE51bWJlcik7XG4gICAgfVxuICAgIGNvbnN0IGhhc0xlYWRpbmdaZXJvID1cbiAgICAgIHRoaXMuc3RhdGUucG9zIC0gc3RhcnQgPj0gMiAmJlxuICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHN0YXJ0KSA9PT0gY2hhckNvZGVzLmRpZ2l0MDtcblxuICAgIGlmIChoYXNMZWFkaW5nWmVybykge1xuICAgICAgY29uc3QgaW50ZWdlciA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMuc3RhdGUucG9zKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmljdCkge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuU3RyaWN0T2N0YWxMaXRlcmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpc2FsbG93IG51bWVyaWMgc2VwYXJhdG9ycyBpbiBub24gb2N0YWwgZGVjaW1hbHMgYW5kIGxlZ2FjeSBvY3RhbCBsaWtlc1xuICAgICAgICBjb25zdCB1bmRlcnNjb3JlUG9zID0gaW50ZWdlci5pbmRleE9mKFwiX1wiKTtcbiAgICAgICAgaWYgKHVuZGVyc2NvcmVQb3MgPiAwKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh1bmRlcnNjb3JlUG9zICsgc3RhcnQsIEVycm9ycy5aZXJvRGlnaXROdW1lcmljU2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXNPY3RhbCA9IGhhc0xlYWRpbmdaZXJvICYmICEvWzg5XS8udGVzdChpbnRlZ2VyKTtcbiAgICB9XG5cbiAgICBsZXQgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgaWYgKG5leHQgPT09IGNoYXJDb2Rlcy5kb3QgJiYgIWlzT2N0YWwpIHtcbiAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB0aGlzLnJlYWRJbnQoMTApO1xuICAgICAgaXNGbG9hdCA9IHRydWU7XG4gICAgICBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAobmV4dCA9PT0gY2hhckNvZGVzLnVwcGVyY2FzZUUgfHwgbmV4dCA9PT0gY2hhckNvZGVzLmxvd2VyY2FzZUUpICYmXG4gICAgICAhaXNPY3RhbFxuICAgICkge1xuICAgICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMuc3RhdGUucG9zKTtcbiAgICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMucGx1c1NpZ24gfHwgbmV4dCA9PT0gY2hhckNvZGVzLmRhc2gpIHtcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuSW52YWxpZE51bWJlcik7XG4gICAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgICAgIGhhc0V4cG9uZW50ID0gdHJ1ZTtcbiAgICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpO1xuICAgIH1cblxuICAgIGlmIChuZXh0ID09PSBjaGFyQ29kZXMubG93ZXJjYXNlTikge1xuICAgICAgLy8gZGlzYWxsb3cgZmxvYXRzLCBsZWdhY3kgb2N0YWwgc3ludGF4IGFuZCBub24gb2N0YWwgZGVjaW1hbHNcbiAgICAgIC8vIG5ldyBzdHlsZSBvY3RhbCAoXCIwb1wiKSBpcyBoYW5kbGVkIGluIHRoaXMucmVhZFJhZGl4TnVtYmVyXG4gICAgICBpZiAoaXNGbG9hdCB8fCBoYXNMZWFkaW5nWmVybykge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuSW52YWxpZEJpZ0ludExpdGVyYWwpO1xuICAgICAgfVxuICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIGlzQmlnSW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dCA9PT0gY2hhckNvZGVzLmxvd2VyY2FzZU0pIHtcbiAgICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwiZGVjaW1hbFwiLCB0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBpZiAoaGFzRXhwb25lbnQgfHwgaGFzTGVhZGluZ1plcm8pIHtcbiAgICAgICAgdGhpcy5yYWlzZShzdGFydCwgRXJyb3JzLkludmFsaWREZWNpbWFsKTtcbiAgICAgIH1cbiAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICBpc0RlY2ltYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0lkZW50aWZpZXJTdGFydCh0aGlzLmlucHV0LmNvZGVQb2ludEF0KHRoaXMuc3RhdGUucG9zKSkpIHtcbiAgICAgIHRocm93IHRoaXMucmFpc2UodGhpcy5zdGF0ZS5wb3MsIEVycm9ycy5OdW1iZXJJZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgXCJfXCIgZm9yIG51bWVyaWMgbGl0ZXJhbCBzZXBhcmF0b3IsIGFuZCB0cmFpbGluZyBgbWAgb3IgYG5gXG4gICAgY29uc3Qgc3RyID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5zdGF0ZS5wb3MpLnJlcGxhY2UoL1tfbW5dL2csIFwiXCIpO1xuXG4gICAgaWYgKGlzQmlnSW50KSB7XG4gICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmJpZ2ludCwgc3RyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWNpbWFsKSB7XG4gICAgICB0aGlzLmZpbmlzaFRva2VuKHR0LmRlY2ltYWwsIHN0cik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmFsID0gaXNPY3RhbCA/IHBhcnNlSW50KHN0ciwgOCkgOiBwYXJzZUZsb2F0KHN0cik7XG4gICAgdGhpcy5maW5pc2hUb2tlbih0dC5udW0sIHZhbCk7XG4gIH1cblxuICAvLyBSZWFkIGEgc3RyaW5nIHZhbHVlLCBpbnRlcnByZXRpbmcgYmFja3NsYXNoLWVzY2FwZXMuXG5cbiAgcmVhZENvZGVQb2ludCh0aHJvd09uSW52YWxpZDogYm9vbGVhbik6IG51bWJlciB8IG51bGwge1xuICAgIGNvbnN0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKTtcbiAgICBsZXQgY29kZTtcblxuICAgIGlmIChjaCA9PT0gY2hhckNvZGVzLmxlZnRDdXJseUJyYWNlKSB7XG4gICAgICBjb25zdCBjb2RlUG9zID0gKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKFxuICAgICAgICB0aGlzLmlucHV0LmluZGV4T2YoXCJ9XCIsIHRoaXMuc3RhdGUucG9zKSAtIHRoaXMuc3RhdGUucG9zLFxuICAgICAgICB0cnVlLFxuICAgICAgICB0aHJvd09uSW52YWxpZCxcbiAgICAgICk7XG4gICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgaWYgKGNvZGUgIT09IG51bGwgJiYgY29kZSA+IDB4MTBmZmZmKSB7XG4gICAgICAgIGlmICh0aHJvd09uSW52YWxpZCkge1xuICAgICAgICAgIHRoaXMucmFpc2UoY29kZVBvcywgRXJyb3JzLkludmFsaWRDb2RlUG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKDQsIGZhbHNlLCB0aHJvd09uSW52YWxpZCk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgcmVhZFN0cmluZyhxdW90ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IG91dCA9IFwiXCIsXG4gICAgICBjaHVua1N0YXJ0ID0gKyt0aGlzLnN0YXRlLnBvcztcbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW50ZXJtaW5hdGVkU3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKTtcbiAgICAgIGlmIChjaCA9PT0gcXVvdGUpIGJyZWFrO1xuICAgICAgaWYgKGNoID09PSBjaGFyQ29kZXMuYmFja3NsYXNoKSB7XG4gICAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMuc3RhdGUucG9zKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBvdXQgKz0gdGhpcy5yZWFkRXNjYXBlZENoYXIoZmFsc2UpO1xuICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBjaCA9PT0gY2hhckNvZGVzLmxpbmVTZXBhcmF0b3IgfHxcbiAgICAgICAgY2ggPT09IGNoYXJDb2Rlcy5wYXJhZ3JhcGhTZXBhcmF0b3JcbiAgICAgICkge1xuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICArK3RoaXMuc3RhdGUuY3VyTGluZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5saW5lU3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5VbnRlcm1pbmF0ZWRTdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5zdGF0ZS5wb3MrKyk7XG4gICAgdGhpcy5maW5pc2hUb2tlbih0dC5zdHJpbmcsIG91dCk7XG4gIH1cblxuICAvLyBSZWFkcyB0ZW1wbGF0ZSBzdHJpbmcgdG9rZW5zLlxuXG4gIHJlYWRUbXBsVG9rZW4oKTogdm9pZCB7XG4gICAgbGV0IG91dCA9IFwiXCIsXG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3MsXG4gICAgICBjb250YWluc0ludmFsaWQgPSBmYWxzZTtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPj0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW50ZXJtaW5hdGVkVGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgaWYgKFxuICAgICAgICBjaCA9PT0gY2hhckNvZGVzLmdyYXZlQWNjZW50IHx8XG4gICAgICAgIChjaCA9PT0gY2hhckNvZGVzLmRvbGxhclNpZ24gJiZcbiAgICAgICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MgKyAxKSA9PT1cbiAgICAgICAgICAgIGNoYXJDb2Rlcy5sZWZ0Q3VybHlCcmFjZSlcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wb3MgPT09IHRoaXMuc3RhdGUuc3RhcnQgJiYgdGhpcy5tYXRjaCh0dC50ZW1wbGF0ZSkpIHtcbiAgICAgICAgICBpZiAoY2ggPT09IGNoYXJDb2Rlcy5kb2xsYXJTaWduKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBvcyArPSAyO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5kb2xsYXJCcmFjZUwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hUb2tlbih0dC5iYWNrUXVvdGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnN0YXRlLnBvcyk7XG4gICAgICAgIHRoaXMuZmluaXNoVG9rZW4odHQudGVtcGxhdGUsIGNvbnRhaW5zSW52YWxpZCA/IG51bGwgOiBvdXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2ggPT09IGNoYXJDb2Rlcy5iYWNrc2xhc2gpIHtcbiAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgICBjb25zdCBlc2NhcGVkID0gdGhpcy5yZWFkRXNjYXBlZENoYXIodHJ1ZSk7XG4gICAgICAgIGlmIChlc2NhcGVkID09PSBudWxsKSB7XG4gICAgICAgICAgY29udGFpbnNJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gZXNjYXBlZDtcbiAgICAgICAgfVxuICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB9IGVsc2UgaWYgKGlzTmV3TGluZShjaCkpIHtcbiAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgY2FzZSBjaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm46XG4gICAgICAgICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKSA9PT0gY2hhckNvZGVzLmxpbmVGZWVkKSB7XG4gICAgICAgICAgICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgY2FzZSBjaGFyQ29kZXMubGluZUZlZWQ6XG4gICAgICAgICAgICBvdXQgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICArK3RoaXMuc3RhdGUuY3VyTGluZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5saW5lU3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcbiAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKyt0aGlzLnN0YXRlLnBvcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBVc2VkIHRvIHJlYWQgZXNjYXBlZCBjaGFyYWN0ZXJzXG5cbiAgcmVhZEVzY2FwZWRDaGFyKGluVGVtcGxhdGU6IGJvb2xlYW4pOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCB0aHJvd09uSW52YWxpZCA9ICFpblRlbXBsYXRlO1xuICAgIGNvbnN0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5zdGF0ZS5wb3MpO1xuICAgICsrdGhpcy5zdGF0ZS5wb3M7XG4gICAgc3dpdGNoIChjaCkge1xuICAgICAgY2FzZSBjaGFyQ29kZXMubG93ZXJjYXNlTjpcbiAgICAgICAgcmV0dXJuIFwiXFxuXCI7XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5sb3dlcmNhc2VSOlxuICAgICAgICByZXR1cm4gXCJcXHJcIjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLmxvd2VyY2FzZVg6IHtcbiAgICAgICAgY29uc3QgY29kZSA9IHRoaXMucmVhZEhleENoYXIoMiwgZmFsc2UsIHRocm93T25JbnZhbGlkKTtcbiAgICAgICAgcmV0dXJuIGNvZGUgPT09IG51bGwgPyBudWxsIDogU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgY2hhckNvZGVzLmxvd2VyY2FzZVU6IHtcbiAgICAgICAgY29uc3QgY29kZSA9IHRoaXMucmVhZENvZGVQb2ludCh0aHJvd09uSW52YWxpZCk7XG4gICAgICAgIHJldHVybiBjb2RlID09PSBudWxsID8gbnVsbCA6IFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBjaGFyQ29kZXMubG93ZXJjYXNlVDpcbiAgICAgICAgcmV0dXJuIFwiXFx0XCI7XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5sb3dlcmNhc2VCOlxuICAgICAgICByZXR1cm4gXCJcXGJcIjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLmxvd2VyY2FzZVY6XG4gICAgICAgIHJldHVybiBcIlxcdTAwMGJcIjtcbiAgICAgIGNhc2UgY2hhckNvZGVzLmxvd2VyY2FzZUY6XG4gICAgICAgIHJldHVybiBcIlxcZlwiO1xuICAgICAgY2FzZSBjaGFyQ29kZXMuY2FycmlhZ2VSZXR1cm46XG4gICAgICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5zdGF0ZS5wb3MpID09PSBjaGFyQ29kZXMubGluZUZlZWQpIHtcbiAgICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgIGNhc2UgY2hhckNvZGVzLmxpbmVGZWVkOlxuICAgICAgICB0aGlzLnN0YXRlLmxpbmVTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgICAgICArK3RoaXMuc3RhdGUuY3VyTGluZTtcbiAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgY2FzZSBjaGFyQ29kZXMubGluZVNlcGFyYXRvcjpcbiAgICAgIGNhc2UgY2hhckNvZGVzLnBhcmFncmFwaFNlcGFyYXRvcjpcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDg6XG4gICAgICBjYXNlIGNoYXJDb2Rlcy5kaWdpdDk6XG4gICAgICAgIGlmIChpblRlbXBsYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5zdHJpY3QpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zIC0gMSwgRXJyb3JzLlN0cmljdE51bWVyaWNFc2NhcGUpO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChjaCA+PSBjaGFyQ29kZXMuZGlnaXQwICYmIGNoIDw9IGNoYXJDb2Rlcy5kaWdpdDcpIHtcbiAgICAgICAgICBjb25zdCBjb2RlUG9zID0gdGhpcy5zdGF0ZS5wb3MgLSAxO1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5pbnB1dFxuICAgICAgICAgICAgLnN1YnN0cih0aGlzLnN0YXRlLnBvcyAtIDEsIDMpXG4gICAgICAgICAgICAubWF0Y2goL15bMC03XSsvKTtcblxuICAgICAgICAgIC8vIFRoaXMgaXMgbmV2ZXIgbnVsbCwgYmVjYXVzZSBvZiB0aGUgaWYgY29uZGl0aW9uIGFib3ZlLlxuICAgICAgICAgIC8qOjogaW52YXJpYW50KG1hdGNoICE9PSBudWxsKSAqL1xuICAgICAgICAgIGxldCBvY3RhbFN0ciA9IG1hdGNoWzBdO1xuXG4gICAgICAgICAgbGV0IG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuICAgICAgICAgIGlmIChvY3RhbCA+IDI1NSkge1xuICAgICAgICAgICAgb2N0YWxTdHIgPSBvY3RhbFN0ci5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICBvY3RhbCA9IHBhcnNlSW50KG9jdGFsU3RyLCA4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMTtcbiAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuc3RhdGUucG9zKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBvY3RhbFN0ciAhPT0gXCIwXCIgfHxcbiAgICAgICAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5kaWdpdDggfHxcbiAgICAgICAgICAgIG5leHQgPT09IGNoYXJDb2Rlcy5kaWdpdDlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChpblRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnN0cmljdCkge1xuICAgICAgICAgICAgICB0aGlzLnJhaXNlKGNvZGVQb3MsIEVycm9ycy5TdHJpY3ROdW1lcmljRXNjYXBlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byB0aHJvdyBhbiBlcnJvciBmb3JcbiAgICAgICAgICAgICAgLy8gYW4gb2N0YWwgbGl0ZXJhbCBpbiBhIGRpcmVjdGl2ZSB0aGF0IG9jY3VycyBwcmlvclxuICAgICAgICAgICAgICAvLyB0byBhIFwidXNlIHN0cmljdFwiIGRpcmVjdGl2ZS5cbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5vY3RhbFBvc2l0aW9ucy5wdXNoKGNvZGVQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG9jdGFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcbiAgICB9XG4gIH1cblxuICAvLyBVc2VkIHRvIHJlYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZXMgKCdcXHgnLCAnXFx1JykuXG5cbiAgcmVhZEhleENoYXIoXG4gICAgbGVuOiBudW1iZXIsXG4gICAgZm9yY2VMZW46IGJvb2xlYW4sXG4gICAgdGhyb3dPbkludmFsaWQ6IGJvb2xlYW4sXG4gICk6IG51bWJlciB8IG51bGwge1xuICAgIGNvbnN0IGNvZGVQb3MgPSB0aGlzLnN0YXRlLnBvcztcbiAgICBjb25zdCBuID0gdGhpcy5yZWFkSW50KDE2LCBsZW4sIGZvcmNlTGVuLCBmYWxzZSk7XG4gICAgaWYgKG4gPT09IG51bGwpIHtcbiAgICAgIGlmICh0aHJvd09uSW52YWxpZCkge1xuICAgICAgICB0aGlzLnJhaXNlKGNvZGVQb3MsIEVycm9ycy5JbnZhbGlkRXNjYXBlU2VxdWVuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5wb3MgPSBjb2RlUG9zIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH1cblxuICAvLyBSZWFkIGFuIGlkZW50aWZpZXIsIGFuZCByZXR1cm4gaXQgYXMgYSBzdHJpbmcuIFNldHMgYHRoaXMuc3RhdGUuY29udGFpbnNFc2NgXG4gIC8vIHRvIHdoZXRoZXIgdGhlIHdvcmQgY29udGFpbmVkIGEgJ1xcdScgZXNjYXBlLlxuICAvL1xuICAvLyBJbmNyZW1lbnRhbGx5IGFkZHMgb25seSBlc2NhcGVkIGNoYXJzLCBhZGRpbmcgb3RoZXIgY2h1bmtzIGFzLWlzXG4gIC8vIGFzIGEgbWljcm8tb3B0aW1pemF0aW9uLlxuXG4gIHJlYWRXb3JkMSgpOiBzdHJpbmcge1xuICAgIGxldCB3b3JkID0gXCJcIjtcbiAgICB0aGlzLnN0YXRlLmNvbnRhaW5zRXNjID0gZmFsc2U7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnN0YXRlLnBvcztcbiAgICBsZXQgY2h1bmtTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuXG4gICAgd2hpbGUgKHRoaXMuc3RhdGUucG9zIDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoID0gdGhpcy5pbnB1dC5jb2RlUG9pbnRBdCh0aGlzLnN0YXRlLnBvcyk7XG4gICAgICBpZiAoaXNJZGVudGlmaWVyQ2hhcihjaCkpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5wb3MgKz0gY2ggPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaXNJdGVyYXRvciAmJiBjaCA9PT0gY2hhckNvZGVzLmF0U2lnbikge1xuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gY2hhckNvZGVzLmJhY2tzbGFzaCkge1xuICAgICAgICB0aGlzLnN0YXRlLmNvbnRhaW5zRXNjID0gdHJ1ZTtcblxuICAgICAgICB3b3JkICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5zdGF0ZS5wb3MpO1xuICAgICAgICBjb25zdCBlc2NTdGFydCA9IHRoaXMuc3RhdGUucG9zO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyQ2hlY2sgPVxuICAgICAgICAgIHRoaXMuc3RhdGUucG9zID09PSBzdGFydCA/IGlzSWRlbnRpZmllclN0YXJ0IDogaXNJZGVudGlmaWVyQ2hhcjtcblxuICAgICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5zdGF0ZS5wb3MpICE9PSBjaGFyQ29kZXMubG93ZXJjYXNlVSkge1xuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5wb3MsIEVycm9ycy5NaXNzaW5nVW5pY29kZUVzY2FwZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICArK3RoaXMuc3RhdGUucG9zO1xuICAgICAgICBjb25zdCBlc2MgPSB0aGlzLnJlYWRDb2RlUG9pbnQodHJ1ZSk7XG4gICAgICAgIGlmIChlc2MgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoIWlkZW50aWZpZXJDaGVjayhlc2MpKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKGVzY1N0YXJ0LCBFcnJvcnMuRXNjYXBlZENoYXJOb3RBbklkZW50aWZpZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdvcmQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoZXNjKTtcbiAgICAgICAgfVxuICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5zdGF0ZS5wb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdvcmQgKyB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMuc3RhdGUucG9zKTtcbiAgfVxuXG4gIGlzSXRlcmF0b3Iod29yZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHdvcmQgPT09IFwiQEBpdGVyYXRvclwiIHx8IHdvcmQgPT09IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIH1cblxuICAvLyBSZWFkIGFuIGlkZW50aWZpZXIgb3Iga2V5d29yZCB0b2tlbi4gV2lsbCBjaGVjayBmb3IgcmVzZXJ2ZWRcbiAgLy8gd29yZHMgd2hlbiBuZWNlc3NhcnkuXG5cbiAgcmVhZFdvcmQoKTogdm9pZCB7XG4gICAgY29uc3Qgd29yZCA9IHRoaXMucmVhZFdvcmQxKCk7XG4gICAgY29uc3QgdHlwZSA9IGtleXdvcmRUeXBlcy5nZXQod29yZCkgfHwgdHQubmFtZTtcblxuICAgIC8vIEFsbG93IEBAaXRlcmF0b3IgYW5kIEBAYXN5bmNJdGVyYXRvciBhcyBhIGlkZW50aWZpZXIgb25seSBpbnNpZGUgdHlwZVxuICAgIGlmIChcbiAgICAgIHRoaXMuc3RhdGUuaXNJdGVyYXRvciAmJlxuICAgICAgKCF0aGlzLmlzSXRlcmF0b3Iod29yZCkgfHwgIXRoaXMuc3RhdGUuaW5UeXBlKVxuICAgICkge1xuICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnBvcywgRXJyb3JzLkludmFsaWRJZGVudGlmaWVyLCB3b3JkKTtcbiAgICB9XG5cbiAgICB0aGlzLmZpbmlzaFRva2VuKHR5cGUsIHdvcmQpO1xuICB9XG5cbiAgY2hlY2tLZXl3b3JkRXNjYXBlcygpOiB2b2lkIHtcbiAgICBjb25zdCBrdyA9IHRoaXMuc3RhdGUudHlwZS5rZXl3b3JkO1xuICAgIGlmIChrdyAmJiB0aGlzLnN0YXRlLmNvbnRhaW5zRXNjKSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5JbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZCwga3cpO1xuICAgIH1cbiAgfVxuXG4gIGJyYWNlSXNCbG9jayhwcmV2VHlwZTogVG9rZW5UeXBlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5jdXJDb250ZXh0KCk7XG4gICAgaWYgKHBhcmVudCA9PT0gY3QuZnVuY3Rpb25FeHByZXNzaW9uIHx8IHBhcmVudCA9PT0gY3QuZnVuY3Rpb25TdGF0ZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBwcmV2VHlwZSA9PT0gdHQuY29sb24gJiZcbiAgICAgIChwYXJlbnQgPT09IGN0LmJyYWNlU3RhdGVtZW50IHx8IHBhcmVudCA9PT0gY3QuYnJhY2VFeHByZXNzaW9uKVxuICAgICkge1xuICAgICAgcmV0dXJuICFwYXJlbnQuaXNFeHByO1xuICAgIH1cblxuICAgIC8vIFRoZSBjaGVjayBmb3IgYHR0Lm5hbWUgJiYgZXhwckFsbG93ZWRgIGRldGVjdHMgd2hldGhlciB3ZSBhcmVcbiAgICAvLyBhZnRlciBhIGB5aWVsZGAgb3IgYG9mYCBjb25zdHJ1Y3QuIFNlZSB0aGUgYHVwZGF0ZUNvbnRleHRgIGZvclxuICAgIC8vIGB0dC5uYW1lYC5cbiAgICBpZiAoXG4gICAgICBwcmV2VHlwZSA9PT0gdHQuX3JldHVybiB8fFxuICAgICAgKHByZXZUeXBlID09PSB0dC5uYW1lICYmIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBwcmV2VHlwZSA9PT0gdHQuX2Vsc2UgfHxcbiAgICAgIHByZXZUeXBlID09PSB0dC5zZW1pIHx8XG4gICAgICBwcmV2VHlwZSA9PT0gdHQuZW9mIHx8XG4gICAgICBwcmV2VHlwZSA9PT0gdHQucGFyZW5SIHx8XG4gICAgICBwcmV2VHlwZSA9PT0gdHQuYXJyb3dcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcmV2VHlwZSA9PT0gdHQuYnJhY2VMKSB7XG4gICAgICByZXR1cm4gcGFyZW50ID09PSBjdC5icmFjZVN0YXRlbWVudDtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBwcmV2VHlwZSA9PT0gdHQuX3ZhciB8fFxuICAgICAgcHJldlR5cGUgPT09IHR0Ll9jb25zdCB8fFxuICAgICAgcHJldlR5cGUgPT09IHR0Lm5hbWVcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJldlR5cGUgPT09IHR0LnJlbGF0aW9uYWwpIHtcbiAgICAgIC8vIGBjbGFzcyBDPFQ+IHsgLi4uIH1gXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMuc3RhdGUuZXhwckFsbG93ZWQ7XG4gIH1cblxuICB1cGRhdGVDb250ZXh0KHByZXZUeXBlOiBUb2tlblR5cGUpOiB2b2lkIHtcbiAgICBjb25zdCB0eXBlID0gdGhpcy5zdGF0ZS50eXBlO1xuICAgIGxldCB1cGRhdGU7XG5cbiAgICBpZiAodHlwZS5rZXl3b3JkICYmIChwcmV2VHlwZSA9PT0gdHQuZG90IHx8IHByZXZUeXBlID09PSB0dC5xdWVzdGlvbkRvdCkpIHtcbiAgICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCh1cGRhdGUgPSB0eXBlLnVwZGF0ZUNvbnRleHQpKSB7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzLCBwcmV2VHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSB0eXBlLmJlZm9yZUV4cHI7XG4gICAgfVxuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB0eXBlcyBhcyB0dCwgdHlwZSBUb2tlblR5cGUgfSBmcm9tIFwiLi4vdG9rZW5pemVyL3R5cGVzXCI7XG5pbXBvcnQgVG9rZW5pemVyIGZyb20gXCIuLi90b2tlbml6ZXJcIjtcbmltcG9ydCBTdGF0ZSBmcm9tIFwiLi4vdG9rZW5pemVyL3N0YXRlXCI7XG5pbXBvcnQgdHlwZSB7IE5vZGUgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGxpbmVCcmVhayB9IGZyb20gXCIuLi91dGlsL3doaXRlc3BhY2VcIjtcbmltcG9ydCB7IGlzSWRlbnRpZmllckNoYXIgfSBmcm9tIFwiLi4vdXRpbC9pZGVudGlmaWVyXCI7XG5pbXBvcnQgeyBFcnJvcnMgfSBmcm9tIFwiLi9lcnJvclwiO1xuXG50eXBlIFRyeVBhcnNlPE5vZGUsIEVycm9yLCBUaHJvd24sIEFib3J0ZWQsIEZhaWxTdGF0ZT4gPSB7XG4gIG5vZGU6IE5vZGUsXG4gIGVycm9yOiBFcnJvcixcbiAgdGhyb3duOiBUaHJvd24sXG4gIGFib3J0ZWQ6IEFib3J0ZWQsXG4gIGZhaWxTdGF0ZTogRmFpbFN0YXRlLFxufTtcblxuLy8gIyMgUGFyc2VyIHV0aWxpdGllc1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlsUGFyc2VyIGV4dGVuZHMgVG9rZW5pemVyIHtcbiAgLy8gVE9ET1xuXG4gIGFkZEV4dHJhKG5vZGU6IE5vZGUsIGtleTogc3RyaW5nLCB2YWw6IGFueSk6IHZvaWQge1xuICAgIGlmICghbm9kZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgZXh0cmEgPSAobm9kZS5leHRyYSA9IG5vZGUuZXh0cmEgfHwge30pO1xuICAgIGV4dHJhW2tleV0gPSB2YWw7XG4gIH1cblxuICAvLyBUT0RPXG5cbiAgaXNSZWxhdGlvbmFsKG9wOiBcIjxcIiB8IFwiPlwiKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2godHQucmVsYXRpb25hbCkgJiYgdGhpcy5zdGF0ZS52YWx1ZSA9PT0gb3A7XG4gIH1cblxuICAvLyBUT0RPXG5cbiAgZXhwZWN0UmVsYXRpb25hbChvcDogXCI8XCIgfCBcIj5cIik6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzUmVsYXRpb25hbChvcCkpIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQobnVsbCwgdHQucmVsYXRpb25hbCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGVzdHMgd2hldGhlciBwYXJzZWQgdG9rZW4gaXMgYSBjb250ZXh0dWFsIGtleXdvcmQuXG5cbiAgaXNDb250ZXh0dWFsKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm1hdGNoKHR0Lm5hbWUpICYmXG4gICAgICB0aGlzLnN0YXRlLnZhbHVlID09PSBuYW1lICYmXG4gICAgICAhdGhpcy5zdGF0ZS5jb250YWluc0VzY1xuICAgICk7XG4gIH1cblxuICBpc1VucGFyc2VkQ29udGV4dHVhbChuYW1lU3RhcnQ6IG51bWJlciwgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbmFtZUVuZCA9IG5hbWVTdGFydCArIG5hbWUubGVuZ3RoO1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlucHV0LnNsaWNlKG5hbWVTdGFydCwgbmFtZUVuZCkgPT09IG5hbWUgJiZcbiAgICAgIChuYW1lRW5kID09PSB0aGlzLmlucHV0Lmxlbmd0aCB8fFxuICAgICAgICAhaXNJZGVudGlmaWVyQ2hhcih0aGlzLmlucHV0LmNoYXJDb2RlQXQobmFtZUVuZCkpKVxuICAgICk7XG4gIH1cblxuICBpc0xvb2thaGVhZENvbnRleHR1YWwobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbmV4dCA9IHRoaXMubmV4dFRva2VuU3RhcnQoKTtcbiAgICByZXR1cm4gdGhpcy5pc1VucGFyc2VkQ29udGV4dHVhbChuZXh0LCBuYW1lKTtcbiAgfVxuXG4gIC8vIENvbnN1bWVzIGNvbnRleHR1YWwga2V5d29yZCBpZiBwb3NzaWJsZS5cblxuICBlYXRDb250ZXh0dWFsKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzQ29udGV4dHVhbChuYW1lKSAmJiB0aGlzLmVhdCh0dC5uYW1lKTtcbiAgfVxuXG4gIC8vIEFzc2VydHMgdGhhdCBmb2xsb3dpbmcgdG9rZW4gaXMgZ2l2ZW4gY29udGV4dHVhbCBrZXl3b3JkLlxuXG4gIGV4cGVjdENvbnRleHR1YWwobmFtZTogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmVhdENvbnRleHR1YWwobmFtZSkpIHRoaXMudW5leHBlY3RlZChudWxsLCBtZXNzYWdlKTtcbiAgfVxuXG4gIC8vIFRlc3Qgd2hldGhlciBhIHNlbWljb2xvbiBjYW4gYmUgaW5zZXJ0ZWQgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG5cbiAgY2FuSW5zZXJ0U2VtaWNvbG9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm1hdGNoKHR0LmVvZikgfHxcbiAgICAgIHRoaXMubWF0Y2godHQuYnJhY2VSKSB8fFxuICAgICAgdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKVxuICAgICk7XG4gIH1cblxuICBoYXNQcmVjZWRpbmdMaW5lQnJlYWsoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGxpbmVCcmVhay50ZXN0KFxuICAgICAgdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXRlLmxhc3RUb2tFbmQsIHRoaXMuc3RhdGUuc3RhcnQpLFxuICAgICk7XG4gIH1cblxuICAvLyBUT0RPXG5cbiAgaXNMaW5lVGVybWluYXRvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lYXQodHQuc2VtaSkgfHwgdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKTtcbiAgfVxuXG4gIC8vIENvbnN1bWUgYSBzZW1pY29sb24sIG9yLCBmYWlsaW5nIHRoYXQsIHNlZSBpZiB3ZSBhcmUgYWxsb3dlZCB0b1xuICAvLyBwcmV0ZW5kIHRoYXQgdGhlcmUgaXMgYSBzZW1pY29sb24gYXQgdGhpcyBwb3NpdGlvbi5cblxuICBzZW1pY29sb24oKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzTGluZVRlcm1pbmF0b3IoKSkgdGhpcy51bmV4cGVjdGVkKG51bGwsIHR0LnNlbWkpO1xuICB9XG5cbiAgLy8gRXhwZWN0IGEgdG9rZW4gb2YgYSBnaXZlbiB0eXBlLiBJZiBmb3VuZCwgY29uc3VtZSBpdCwgb3RoZXJ3aXNlLFxuICAvLyByYWlzZSBhbiB1bmV4cGVjdGVkIHRva2VuIGVycm9yIGF0IGdpdmVuIHBvcy5cblxuICBleHBlY3QodHlwZTogVG9rZW5UeXBlLCBwb3M/OiA/bnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5lYXQodHlwZSkgfHwgdGhpcy51bmV4cGVjdGVkKHBvcywgdHlwZSk7XG4gIH1cblxuICAvLyBUaHJvd3MgaWYgdGhlIGN1cnJlbnQgdG9rZW4gYW5kIHRoZSBwcmV2IG9uZSBhcmUgc2VwYXJhdGVkIGJ5IGEgc3BhY2UuXG4gIGFzc2VydE5vU3BhY2UobWVzc2FnZTogc3RyaW5nID0gXCJVbmV4cGVjdGVkIHNwYWNlLlwiKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3RhdGUuc3RhcnQgPiB0aGlzLnN0YXRlLmxhc3RUb2tFbmQpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIEBiYWJlbC9kZXZlbG9wbWVudC1pbnRlcm5hbC9kcnktZXJyb3ItbWVzc2FnZXMgKi9cbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5sYXN0VG9rRW5kLCBtZXNzYWdlKTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuICAgIH1cbiAgfVxuXG4gIC8vIFJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuIENhbiB0YWtlIHRoZSBleHBlY3RlZCB0b2tlbiB0eXBlXG4gIC8vIGluc3RlYWQgb2YgYSBtZXNzYWdlIHN0cmluZy5cblxuICB1bmV4cGVjdGVkKFxuICAgIHBvczogP251bWJlcixcbiAgICBtZXNzYWdlT3JUeXBlOiBzdHJpbmcgfCBUb2tlblR5cGUgPSBcIlVuZXhwZWN0ZWQgdG9rZW5cIixcbiAgKTogZW1wdHkge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZU9yVHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgbWVzc2FnZU9yVHlwZSA9IGBVbmV4cGVjdGVkIHRva2VuLCBleHBlY3RlZCBcIiR7bWVzc2FnZU9yVHlwZS5sYWJlbH1cImA7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIEBiYWJlbC9kZXZlbG9wbWVudC1pbnRlcm5hbC9kcnktZXJyb3ItbWVzc2FnZXMgKi9cbiAgICB0aHJvdyB0aGlzLnJhaXNlKHBvcyAhPSBudWxsID8gcG9zIDogdGhpcy5zdGF0ZS5zdGFydCwgbWVzc2FnZU9yVHlwZSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAYmFiZWwvZGV2ZWxvcG1lbnQtaW50ZXJuYWwvZHJ5LWVycm9yLW1lc3NhZ2VzICovXG4gIH1cblxuICBleHBlY3RQbHVnaW4obmFtZTogc3RyaW5nLCBwb3M/OiA/bnVtYmVyKTogdHJ1ZSB7XG4gICAgaWYgKCF0aGlzLmhhc1BsdWdpbihuYW1lKSkge1xuICAgICAgdGhyb3cgdGhpcy5yYWlzZVdpdGhEYXRhKFxuICAgICAgICBwb3MgIT0gbnVsbCA/IHBvcyA6IHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgIHsgbWlzc2luZ1BsdWdpbjogW25hbWVdIH0sXG4gICAgICAgIGBUaGlzIGV4cGVyaW1lbnRhbCBzeW50YXggcmVxdWlyZXMgZW5hYmxpbmcgdGhlIHBhcnNlciBwbHVnaW46ICcke25hbWV9J2AsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZXhwZWN0T25lUGx1Z2luKG5hbWVzOiBBcnJheTxzdHJpbmc+LCBwb3M/OiA/bnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCFuYW1lcy5zb21lKG4gPT4gdGhpcy5oYXNQbHVnaW4obikpKSB7XG4gICAgICB0aHJvdyB0aGlzLnJhaXNlV2l0aERhdGEoXG4gICAgICAgIHBvcyAhPSBudWxsID8gcG9zIDogdGhpcy5zdGF0ZS5zdGFydCxcbiAgICAgICAgeyBtaXNzaW5nUGx1Z2luOiBuYW1lcyB9LFxuICAgICAgICBgVGhpcyBleHBlcmltZW50YWwgc3ludGF4IHJlcXVpcmVzIGVuYWJsaW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIHBhcnNlciBwbHVnaW4ocyk6ICcke25hbWVzLmpvaW4oXG4gICAgICAgICAgXCIsIFwiLFxuICAgICAgICApfSdgLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zdGF0ZS55aWVsZFBvcyAhPT0gLTEgJiZcbiAgICAgICh0aGlzLnN0YXRlLmF3YWl0UG9zID09PSAtMSB8fCB0aGlzLnN0YXRlLnlpZWxkUG9zIDwgdGhpcy5zdGF0ZS5hd2FpdFBvcylcbiAgICApIHtcbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS55aWVsZFBvcywgRXJyb3JzLllpZWxkQmluZGluZ0lkZW50aWZpZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5hd2FpdFBvcyAhPT0gLTEpIHtcbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5hd2FpdFBvcywgRXJyb3JzLkF3YWl0QmluZGluZ0lkZW50aWZpZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyeVBhcnNlIHdpbGwgY2xvbmUgcGFyc2VyIHN0YXRlLlxuICAvLyBJdCBpcyBleHBlbnNpdmUgYW5kIHNob3VsZCBiZSB1c2VkIHdpdGggY2F1dGlvbnNcbiAgdHJ5UGFyc2U8VDogTm9kZSB8ICRSZWFkT25seUFycmF5PE5vZGU+PihcbiAgICBmbjogKGFib3J0OiAobm9kZT86IFQpID0+IGVtcHR5KSA9PiBULFxuICAgIG9sZFN0YXRlOiBTdGF0ZSA9IHRoaXMuc3RhdGUuY2xvbmUoKSxcbiAgKTpcbiAgICB8IFRyeVBhcnNlPFQsIG51bGwsIGZhbHNlLCBmYWxzZSwgbnVsbD5cbiAgICB8IFRyeVBhcnNlPFQgfCBudWxsLCBTeW50YXhFcnJvciwgYm9vbGVhbiwgZmFsc2UsIFN0YXRlPlxuICAgIHwgVHJ5UGFyc2U8VCB8IG51bGwsIG51bGwsIGZhbHNlLCB0cnVlLCBTdGF0ZT4ge1xuICAgIGNvbnN0IGFib3J0U2lnbmFsOiB7IG5vZGU6IFQgfCBudWxsIH0gPSB7IG5vZGU6IG51bGwgfTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgbm9kZSA9IGZuKChub2RlID0gbnVsbCkgPT4ge1xuICAgICAgICBhYm9ydFNpZ25hbC5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhyb3cgYWJvcnRTaWduYWw7XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9ycy5sZW5ndGggPiBvbGRTdGF0ZS5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGZhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGVycm9yOiAoZmFpbFN0YXRlLmVycm9yc1tvbGRTdGF0ZS5lcnJvcnMubGVuZ3RoXTogU3ludGF4RXJyb3IpLFxuICAgICAgICAgIHRocm93bjogZmFsc2UsXG4gICAgICAgICAgYWJvcnRlZDogZmFsc2UsXG4gICAgICAgICAgZmFpbFN0YXRlLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBub2RlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdGhyb3duOiBmYWxzZSxcbiAgICAgICAgYWJvcnRlZDogZmFsc2UsXG4gICAgICAgIGZhaWxTdGF0ZTogbnVsbCxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGZhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICB0aGlzLnN0YXRlID0gb2xkU3RhdGU7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xuICAgICAgICByZXR1cm4geyBub2RlOiBudWxsLCBlcnJvciwgdGhyb3duOiB0cnVlLCBhYm9ydGVkOiBmYWxzZSwgZmFpbFN0YXRlIH07XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgPT09IGFib3J0U2lnbmFsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbm9kZTogYWJvcnRTaWduYWwubm9kZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICB0aHJvd246IGZhbHNlLFxuICAgICAgICAgIGFib3J0ZWQ6IHRydWUsXG4gICAgICAgICAgZmFpbFN0YXRlLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBjaGVja0V4cHJlc3Npb25FcnJvcnMoXG4gICAgcmVmRXhwcmVzc2lvbkVycm9yczogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgYW5kVGhyb3c6IGJvb2xlYW4sXG4gICkge1xuICAgIGlmICghcmVmRXhwcmVzc2lvbkVycm9ycykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHsgc2hvcnRoYW5kQXNzaWduLCBkb3VibGVQcm90byB9ID0gcmVmRXhwcmVzc2lvbkVycm9ycztcbiAgICBpZiAoIWFuZFRocm93KSByZXR1cm4gc2hvcnRoYW5kQXNzaWduID49IDAgfHwgZG91YmxlUHJvdG8gPj0gMDtcbiAgICBpZiAoc2hvcnRoYW5kQXNzaWduID49IDApIHtcbiAgICAgIHRoaXMudW5leHBlY3RlZChzaG9ydGhhbmRBc3NpZ24pO1xuICAgIH1cbiAgICBpZiAoZG91YmxlUHJvdG8gPj0gMCkge1xuICAgICAgdGhpcy5yYWlzZShkb3VibGVQcm90bywgRXJyb3JzLkR1cGxpY2F0ZVByb3RvKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiBjdXJyZW50IHRva2VuIGlzIGEgbGl0ZXJhbCBwcm9wZXJ0eSBuYW1lXG4gICAqIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUxpdGVyYWxQcm9wZXJ0eU5hbWVcbiAgICogTGl0ZXJhbFByb3BlcnR5TmFtZTpcbiAgICogICBJZGVudGlmaWVyTmFtZVxuICAgKiAgIFN0cmluZ0xpdGVyYWxcbiAgICogICBOdW1lcmljTGl0ZXJhbFxuICAgKiAgIEJpZ0ludExpdGVyYWxcbiAgICovXG4gIGlzTGl0ZXJhbFByb3BlcnR5TmFtZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5tYXRjaCh0dC5uYW1lKSB8fFxuICAgICAgISF0aGlzLnN0YXRlLnR5cGUua2V5d29yZCB8fFxuICAgICAgdGhpcy5tYXRjaCh0dC5zdHJpbmcpIHx8XG4gICAgICB0aGlzLm1hdGNoKHR0Lm51bSkgfHxcbiAgICAgIHRoaXMubWF0Y2godHQuYmlnaW50KSB8fFxuICAgICAgdGhpcy5tYXRjaCh0dC5kZWNpbWFsKVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgRXhwcmVzc2lvbkVycm9ycyBpcyBhIGNvbnRleHQgc3RydWN0IHVzZWQgdG8gdHJhY2tcbiAqIC0gKipzaG9ydGhhbmRBc3NpZ24qKjogdHJhY2sgaW5pdGlhbGl6ZXIgYD1gIHBvc2l0aW9uIHdoZW4gcGFyc2luZyBhbWJpZ3VvdXNcbiAqICAgcGF0dGVybnMuIFdoZW4gd2UgYXJlIHN1cmUgdGhlIHBhcnNlZCBwYXR0ZXJuIGlzIGEgUkhTLCB3aGljaCBtZWFucyBpdCBpc1xuICogICBub3QgYSBwYXR0ZXJuLCB3ZSB3aWxsIHRocm93IG9uIHRoaXMgcG9zaXRpb24gb24gaW52YWxpZCBhc3NpZ24gc3ludGF4LFxuICogICBvdGhlcndpc2UgaXQgd2lsbCBiZSByZXNldCB0byAtMVxuICogLSAqKmRvdWJsZVByb3RvKio6IHRyYWNrIHRoZSBkdXBsaWNhdGUgYF9fcHJvdG9fX2Aga2V5IHBvc2l0aW9uIHdoZW4gcGFyc2luZ1xuICogICBhbWJpZ3VvdXMgb2JqZWN0IHBhdHRlcm5zLiBXaGVuIHdlIGFyZSBzdXJlIHRoZSBwYXJzZWQgcGF0dGVybiBpcyBhIFJIUyxcbiAqICAgd2hpY2ggbWVhbnMgaXQgaXMgYW4gb2JqZWN0IGxpdGVyYWwsIHdlIHdpbGwgdGhyb3cgb24gdGhpcyBwb3NpdGlvbiBmb3JcbiAqICAgX19wcm90b19fIHJlZGVmaW5pdGlvbiwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgcmVzZXQgdG8gLTFcbiAqL1xuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25FcnJvcnMge1xuICBzaG9ydGhhbmRBc3NpZ24gPSAtMTtcbiAgZG91YmxlUHJvdG8gPSAtMTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIFBhcnNlciBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IFV0aWxQYXJzZXIgZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgU291cmNlTG9jYXRpb24sIHR5cGUgUG9zaXRpb24gfSBmcm9tIFwiLi4vdXRpbC9sb2NhdGlvblwiO1xuaW1wb3J0IHR5cGUgeyBDb21tZW50LCBOb2RlIGFzIE5vZGVUeXBlLCBOb2RlQmFzZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG4vLyBTdGFydCBhbiBBU1Qgbm9kZSwgYXR0YWNoaW5nIGEgc3RhcnQgb2Zmc2V0LlxuXG5jbGFzcyBOb2RlIGltcGxlbWVudHMgTm9kZUJhc2Uge1xuICBjb25zdHJ1Y3RvcihwYXJzZXI6IFBhcnNlciwgcG9zOiBudW1iZXIsIGxvYzogUG9zaXRpb24pIHtcbiAgICB0aGlzLnR5cGUgPSBcIlwiO1xuICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgdGhpcy5lbmQgPSAwO1xuICAgIHRoaXMubG9jID0gbmV3IFNvdXJjZUxvY2F0aW9uKGxvYyk7XG4gICAgaWYgKHBhcnNlcj8ub3B0aW9ucy5yYW5nZXMpIHRoaXMucmFuZ2UgPSBbcG9zLCAwXTtcbiAgICBpZiAocGFyc2VyPy5maWxlbmFtZSkgdGhpcy5sb2MuZmlsZW5hbWUgPSBwYXJzZXIuZmlsZW5hbWU7XG4gIH1cblxuICB0eXBlOiBzdHJpbmc7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xuICBsb2M6IFNvdXJjZUxvY2F0aW9uO1xuICByYW5nZTogW251bWJlciwgbnVtYmVyXTtcbiAgbGVhZGluZ0NvbW1lbnRzOiBBcnJheTxDb21tZW50PjtcbiAgdHJhaWxpbmdDb21tZW50czogQXJyYXk8Q29tbWVudD47XG4gIGlubmVyQ29tbWVudHM6IEFycmF5PENvbW1lbnQ+O1xuICBleHRyYTogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICBfX2Nsb25lKCk6IHRoaXMge1xuICAgIC8vICRGbG93SWdub3JlXG4gICAgY29uc3QgbmV3Tm9kZTogYW55ID0gbmV3IE5vZGUoKTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAvLyBEbyBub3QgY2xvbmUgY29tbWVudHMgdGhhdCBhcmUgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgbm9kZVxuICAgICAgaWYgKFxuICAgICAgICBrZXkgIT09IFwibGVhZGluZ0NvbW1lbnRzXCIgJiZcbiAgICAgICAga2V5ICE9PSBcInRyYWlsaW5nQ29tbWVudHNcIiAmJlxuICAgICAgICBrZXkgIT09IFwiaW5uZXJDb21tZW50c1wiXG4gICAgICApIHtcbiAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgbmV3Tm9kZVtrZXldID0gdGhpc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdOb2RlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb2RlVXRpbHMgZXh0ZW5kcyBVdGlsUGFyc2VyIHtcbiAgc3RhcnROb2RlPFQ6IE5vZGVUeXBlPigpOiBUIHtcbiAgICAvLyAkRmxvd0lnbm9yZVxuICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLnN0YXRlLnN0YXJ0LCB0aGlzLnN0YXRlLnN0YXJ0TG9jKTtcbiAgfVxuXG4gIHN0YXJ0Tm9kZUF0PFQ6IE5vZGVUeXBlPihwb3M6IG51bWJlciwgbG9jOiBQb3NpdGlvbik6IFQge1xuICAgIC8vICRGbG93SWdub3JlXG4gICAgcmV0dXJuIG5ldyBOb2RlKHRoaXMsIHBvcywgbG9jKTtcbiAgfVxuXG4gIC8qKiBTdGFydCBhIG5ldyBub2RlIHdpdGggYSBwcmV2aW91cyBub2RlJ3MgbG9jYXRpb24uICovXG4gIHN0YXJ0Tm9kZUF0Tm9kZTxUOiBOb2RlVHlwZT4odHlwZTogTm9kZVR5cGUpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5zdGFydE5vZGVBdCh0eXBlLnN0YXJ0LCB0eXBlLmxvYy5zdGFydCk7XG4gIH1cblxuICAvLyBGaW5pc2ggYW4gQVNUIG5vZGUsIGFkZGluZyBgdHlwZWAgYW5kIGBlbmRgIHByb3BlcnRpZXMuXG5cbiAgZmluaXNoTm9kZTxUOiBOb2RlVHlwZT4obm9kZTogVCwgdHlwZTogc3RyaW5nKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZUF0KFxuICAgICAgbm9kZSxcbiAgICAgIHR5cGUsXG4gICAgICB0aGlzLnN0YXRlLmxhc3RUb2tFbmQsXG4gICAgICB0aGlzLnN0YXRlLmxhc3RUb2tFbmRMb2MsXG4gICAgKTtcbiAgfVxuXG4gIC8vIEZpbmlzaCBub2RlIGF0IGdpdmVuIHBvc2l0aW9uXG5cbiAgZmluaXNoTm9kZUF0PFQ6IE5vZGVUeXBlPihcbiAgICBub2RlOiBULFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBwb3M6IG51bWJlcixcbiAgICBsb2M6IFBvc2l0aW9uLFxuICApOiBUIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG5vZGUuZW5kID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkRvIG5vdCBjYWxsIGZpbmlzaE5vZGUqKCkgdHdpY2Ugb24gdGhlIHNhbWUgbm9kZS5cIiArXG4gICAgICAgICAgXCIgSW5zdGVhZCB1c2UgcmVzZXRFbmRMb2NhdGlvbigpIG9yIGNoYW5nZSB0eXBlIGRpcmVjdGx5LlwiLFxuICAgICAgKTtcbiAgICB9XG4gICAgbm9kZS50eXBlID0gdHlwZTtcbiAgICBub2RlLmVuZCA9IHBvcztcbiAgICBub2RlLmxvYy5lbmQgPSBsb2M7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIG5vZGUucmFuZ2VbMV0gPSBwb3M7XG4gICAgdGhpcy5wcm9jZXNzQ29tbWVudChub2RlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJlc2V0U3RhcnRMb2NhdGlvbihub2RlOiBOb2RlQmFzZSwgc3RhcnQ6IG51bWJlciwgc3RhcnRMb2M6IFBvc2l0aW9uKTogdm9pZCB7XG4gICAgbm9kZS5zdGFydCA9IHN0YXJ0O1xuICAgIG5vZGUubG9jLnN0YXJ0ID0gc3RhcnRMb2M7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIG5vZGUucmFuZ2VbMF0gPSBzdGFydDtcbiAgfVxuXG4gIHJlc2V0RW5kTG9jYXRpb24oXG4gICAgbm9kZTogTm9kZUJhc2UsXG4gICAgZW5kPzogbnVtYmVyID0gdGhpcy5zdGF0ZS5sYXN0VG9rRW5kLFxuICAgIGVuZExvYz86IFBvc2l0aW9uID0gdGhpcy5zdGF0ZS5sYXN0VG9rRW5kTG9jLFxuICApOiB2b2lkIHtcbiAgICBub2RlLmVuZCA9IGVuZDtcbiAgICBub2RlLmxvYy5lbmQgPSBlbmRMb2M7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIG5vZGUucmFuZ2VbMV0gPSBlbmQ7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHN0YXJ0IGxvY2F0aW9uIG9mIG5vZGUgdG8gdGhlIHN0YXJ0IGxvY2F0aW9uIG9mIGxvY2F0aW9uTm9kZVxuICAgKi9cbiAgcmVzZXRTdGFydExvY2F0aW9uRnJvbU5vZGUobm9kZTogTm9kZUJhc2UsIGxvY2F0aW9uTm9kZTogTm9kZUJhc2UpOiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0U3RhcnRMb2NhdGlvbihub2RlLCBsb2NhdGlvbk5vZGUuc3RhcnQsIGxvY2F0aW9uTm9kZS5sb2Muc3RhcnQpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyBjaGFyQ29kZXMgZnJvbSBcImNoYXJjb2Rlc1wiO1xuaW1wb3J0IHsgdHlwZXMgYXMgdHQsIHR5cGUgVG9rZW5UeXBlIH0gZnJvbSBcIi4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0IHR5cGUge1xuICBUU1BhcmFtZXRlclByb3BlcnR5LFxuICBEZWNvcmF0b3IsXG4gIEV4cHJlc3Npb24sXG4gIE5vZGUsXG4gIFBhdHRlcm4sXG4gIFJlc3RFbGVtZW50LFxuICBTcHJlYWRFbGVtZW50LFxuICAvKjo6IElkZW50aWZpZXIsICovXG4gIC8qOjogT2JqZWN0RXhwcmVzc2lvbiwgKi9cbiAgLyo6OiBPYmplY3RQYXR0ZXJuLCAqL1xufSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUG9zLCBQb3NpdGlvbiB9IGZyb20gXCIuLi91dGlsL2xvY2F0aW9uXCI7XG5pbXBvcnQge1xuICBpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkLFxuICBpc1N0cmljdEJpbmRSZXNlcnZlZFdvcmQsXG59IGZyb20gXCIuLi91dGlsL2lkZW50aWZpZXJcIjtcbmltcG9ydCB7IE5vZGVVdGlscyB9IGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCB7IHR5cGUgQmluZGluZ1R5cGVzLCBCSU5EX05PTkUgfSBmcm9tIFwiLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uRXJyb3JzIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4vZXJyb3JcIjtcblxuY29uc3QgdW53cmFwUGFyZW50aGVzaXplZEV4cHJlc3Npb24gPSAobm9kZTogTm9kZSkgPT4ge1xuICByZXR1cm4gbm9kZS50eXBlID09PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCJcbiAgICA/IHVud3JhcFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbilcbiAgICA6IG5vZGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMVmFsUGFyc2VyIGV4dGVuZHMgTm9kZVV0aWxzIHtcbiAgLy8gRm9yd2FyZC1kZWNsYXJhdGlvbjogZGVmaW5lZCBpbiBleHByZXNzaW9uLmpzXG4gIC8qOjpcbiAgK3BhcnNlSWRlbnRpZmllcjogKGxpYmVyYWw/OiBib29sZWFuKSA9PiBJZGVudGlmaWVyO1xuICArcGFyc2VNYXliZUFzc2lnbkFsbG93SW46IChcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgYWZ0ZXJMZWZ0UGFyc2U/OiBGdW5jdGlvbixcbiAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgKSA9PiBFeHByZXNzaW9uO1xuICArcGFyc2VPYmplY3RMaWtlOiA8VDogT2JqZWN0UGF0dGVybiB8IE9iamVjdEV4cHJlc3Npb24+KFxuICAgIGNsb3NlOiBUb2tlblR5cGUsXG4gICAgaXNQYXR0ZXJuOiBib29sZWFuLFxuICAgIGlzUmVjb3JkPzogP2Jvb2xlYW4sXG4gICAgcmVmRXhwcmVzc2lvbkVycm9ycz86ID9FeHByZXNzaW9uRXJyb3JzLFxuICApID0+IFQ7XG4gICovXG4gIC8vIEZvcndhcmQtZGVjbGFyYXRpb246IGRlZmluZWQgaW4gc3RhdGVtZW50LmpzXG4gIC8qOjpcbiAgK3BhcnNlRGVjb3JhdG9yOiAoKSA9PiBEZWNvcmF0b3I7XG4gICovXG5cbiAgLy8gQ29udmVydCBleGlzdGluZyBleHByZXNzaW9uIGF0b20gdG8gYXNzaWduYWJsZSBwYXR0ZXJuXG4gIC8vIGlmIHBvc3NpYmxlLlxuICAvLyBOT1RFOiBUaGVyZSBpcyBhIGNvcnJlc3BvbmRpbmcgXCJpc0Fzc2lnbmFibGVcIiBtZXRob2QgaW4gZmxvdy5qcy5cbiAgLy8gV2hlbiB0aGlzIG9uZSBpcyB1cGRhdGVkLCBwbGVhc2UgY2hlY2sgaWYgYWxzbyB0aGF0IG9uZSBuZWVkcyB0byBiZSB1cGRhdGVkLlxuXG4gIHRvQXNzaWduYWJsZShub2RlOiBOb2RlKTogTm9kZSB7XG4gICAgbGV0IHBhcmVudGhlc2l6ZWQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiIHx8IG5vZGUuZXh0cmE/LnBhcmVudGhlc2l6ZWQpIHtcbiAgICAgIHBhcmVudGhlc2l6ZWQgPSB1bndyYXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlKTtcbiAgICAgIGlmIChcbiAgICAgICAgcGFyZW50aGVzaXplZC50eXBlICE9PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICBwYXJlbnRoZXNpemVkLnR5cGUgIT09IFwiTWVtYmVyRXhwcmVzc2lvblwiXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBFcnJvcnMuSW52YWxpZFBhcmVudGhlc2l6ZWRBc3NpZ25tZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcbiAgICAgIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJPYmplY3RFeHByZXNzaW9uXCI6XG4gICAgICAgIG5vZGUudHlwZSA9IFwiT2JqZWN0UGF0dGVyblwiO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMCwgbGVuZ3RoID0gbm9kZS5wcm9wZXJ0aWVzLmxlbmd0aCwgbGFzdCA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgaSA8IGxlbmd0aDtcbiAgICAgICAgICBpKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgcHJvcCA9IG5vZGUucHJvcGVydGllc1tpXTtcbiAgICAgICAgICBjb25zdCBpc0xhc3QgPSBpID09PSBsYXN0O1xuICAgICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlT2JqZWN0RXhwcmVzc2lvblByb3AocHJvcCwgaXNMYXN0KTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzTGFzdCAmJlxuICAgICAgICAgICAgcHJvcC50eXBlID09PSBcIlJlc3RFbGVtZW50XCIgJiZcbiAgICAgICAgICAgIG5vZGUuZXh0cmE/LnRyYWlsaW5nQ29tbWFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2VSZXN0Tm90TGFzdChub2RlLmV4dHJhLnRyYWlsaW5nQ29tbWEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIk9iamVjdFByb3BlcnR5XCI6XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUudmFsdWUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlNwcmVhZEVsZW1lbnRcIjoge1xuICAgICAgICB0aGlzLmNoZWNrVG9SZXN0Q29udmVyc2lvbihub2RlKTtcblxuICAgICAgICBub2RlLnR5cGUgPSBcIlJlc3RFbGVtZW50XCI7XG4gICAgICAgIGNvbnN0IGFyZyA9IG5vZGUuYXJndW1lbnQ7XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKGFyZyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIFwiQXJyYXlFeHByZXNzaW9uXCI6XG4gICAgICAgIG5vZGUudHlwZSA9IFwiQXJyYXlQYXR0ZXJuXCI7XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlTGlzdChub2RlLmVsZW1lbnRzLCBub2RlLmV4dHJhPy50cmFpbGluZ0NvbW1hKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiOlxuICAgICAgICBpZiAobm9kZS5vcGVyYXRvciAhPT0gXCI9XCIpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKG5vZGUubGVmdC5lbmQsIEVycm9ycy5NaXNzaW5nRXFJbkFzc2lnbm1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS50eXBlID0gXCJBc3NpZ25tZW50UGF0dGVyblwiO1xuICAgICAgICBkZWxldGUgbm9kZS5vcGVyYXRvcjtcbiAgICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5sZWZ0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuICAgICAgICB0aGlzLnRvQXNzaWduYWJsZSgoKHBhcmVudGhlc2l6ZWQ6IGFueSk6IEV4cHJlc3Npb24pKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAvLyBXZSBkb24ndCBrbm93IGhvdyB0byBkZWFsIHdpdGggdGhpcyBub2RlLiBJdCB3aWxsXG4gICAgICAvLyBiZSByZXBvcnRlZCBieSBhIGxhdGVyIGNhbGwgdG8gY2hlY2tMVmFsXG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgdG9Bc3NpZ25hYmxlT2JqZWN0RXhwcmVzc2lvblByb3AocHJvcDogTm9kZSwgaXNMYXN0OiBib29sZWFuKSB7XG4gICAgaWYgKHByb3AudHlwZSA9PT0gXCJPYmplY3RNZXRob2RcIikge1xuICAgICAgY29uc3QgZXJyb3IgPVxuICAgICAgICBwcm9wLmtpbmQgPT09IFwiZ2V0XCIgfHwgcHJvcC5raW5kID09PSBcInNldFwiXG4gICAgICAgICAgPyBFcnJvcnMuUGF0dGVybkhhc0FjY2Vzc29yXG4gICAgICAgICAgOiBFcnJvcnMuUGF0dGVybkhhc01ldGhvZDtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuICAgICAgdGhpcy5yYWlzZShwcm9wLmtleS5zdGFydCwgZXJyb3IpO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBAYmFiZWwvZGV2ZWxvcG1lbnQtaW50ZXJuYWwvZHJ5LWVycm9yLW1lc3NhZ2VzICovXG4gICAgfSBlbHNlIGlmIChwcm9wLnR5cGUgPT09IFwiU3ByZWFkRWxlbWVudFwiICYmICFpc0xhc3QpIHtcbiAgICAgIHRoaXMucmFpc2VSZXN0Tm90TGFzdChwcm9wLnN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b0Fzc2lnbmFibGUocHJvcCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29udmVydCBsaXN0IG9mIGV4cHJlc3Npb24gYXRvbXMgdG8gYmluZGluZyBsaXN0LlxuXG4gIHRvQXNzaWduYWJsZUxpc3QoXG4gICAgZXhwckxpc3Q6IEV4cHJlc3Npb25bXSxcbiAgICB0cmFpbGluZ0NvbW1hUG9zPzogP251bWJlcixcbiAgKTogJFJlYWRPbmx5QXJyYXk8UGF0dGVybj4ge1xuICAgIGxldCBlbmQgPSBleHByTGlzdC5sZW5ndGg7XG4gICAgaWYgKGVuZCkge1xuICAgICAgY29uc3QgbGFzdCA9IGV4cHJMaXN0W2VuZCAtIDFdO1xuICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIikge1xuICAgICAgICAtLWVuZDtcbiAgICAgIH0gZWxzZSBpZiAobGFzdD8udHlwZSA9PT0gXCJTcHJlYWRFbGVtZW50XCIpIHtcbiAgICAgICAgbGFzdC50eXBlID0gXCJSZXN0RWxlbWVudFwiO1xuICAgICAgICBjb25zdCBhcmcgPSBsYXN0LmFyZ3VtZW50O1xuICAgICAgICB0aGlzLnRvQXNzaWduYWJsZShhcmcpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgYXJnLnR5cGUgIT09IFwiSWRlbnRpZmllclwiICYmXG4gICAgICAgICAgYXJnLnR5cGUgIT09IFwiTWVtYmVyRXhwcmVzc2lvblwiICYmXG4gICAgICAgICAgYXJnLnR5cGUgIT09IFwiQXJyYXlQYXR0ZXJuXCIgJiZcbiAgICAgICAgICBhcmcudHlwZSAhPT0gXCJPYmplY3RQYXR0ZXJuXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy51bmV4cGVjdGVkKGFyZy5zdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDb21tYVBvcykge1xuICAgICAgICAgIHRoaXMucmFpc2VUcmFpbGluZ0NvbW1hQWZ0ZXJSZXN0KHRyYWlsaW5nQ29tbWFQb3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS1lbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsdCA9IGV4cHJMaXN0W2ldO1xuICAgICAgaWYgKGVsdCkge1xuICAgICAgICB0aGlzLnRvQXNzaWduYWJsZShlbHQpO1xuICAgICAgICBpZiAoZWx0LnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIikge1xuICAgICAgICAgIHRoaXMucmFpc2VSZXN0Tm90TGFzdChlbHQuc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHByTGlzdDtcbiAgfVxuXG4gIC8vIENvbnZlcnQgbGlzdCBvZiBleHByZXNzaW9uIGF0b21zIHRvIGEgbGlzdCBvZlxuXG4gIHRvUmVmZXJlbmNlZExpc3QoXG4gICAgZXhwckxpc3Q6ICRSZWFkT25seUFycmF5PD9FeHByZXNzaW9uPixcbiAgICBpc1BhcmVudGhlc2l6ZWRFeHByPzogYm9vbGVhbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICApOiAkUmVhZE9ubHlBcnJheTw/RXhwcmVzc2lvbj4ge1xuICAgIHJldHVybiBleHByTGlzdDtcbiAgfVxuXG4gIHRvUmVmZXJlbmNlZExpc3REZWVwKFxuICAgIGV4cHJMaXN0OiAkUmVhZE9ubHlBcnJheTw/RXhwcmVzc2lvbj4sXG4gICAgaXNQYXJlbnRoZXNpemVkRXhwcj86IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIHRoaXMudG9SZWZlcmVuY2VkTGlzdChleHByTGlzdCwgaXNQYXJlbnRoZXNpemVkRXhwcik7XG5cbiAgICBmb3IgKGNvbnN0IGV4cHIgb2YgZXhwckxpc3QpIHtcbiAgICAgIGlmIChleHByPy50eXBlID09PSBcIkFycmF5RXhwcmVzc2lvblwiKSB7XG4gICAgICAgIHRoaXMudG9SZWZlcmVuY2VkTGlzdERlZXAoZXhwci5lbGVtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2VzIHNwcmVhZCBlbGVtZW50LlxuXG4gIHBhcnNlU3ByZWFkKFxuICAgIHJlZkV4cHJlc3Npb25FcnJvcnM6ID9FeHByZXNzaW9uRXJyb3JzLFxuICAgIHJlZk5lZWRzQXJyb3dQb3M/OiA/UG9zLFxuICApOiBTcHJlYWRFbGVtZW50IHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbihcbiAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICByZWZOZWVkc0Fycm93UG9zLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlNwcmVhZEVsZW1lbnRcIik7XG4gIH1cblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1CaW5kaW5nUmVzdFByb3BlcnR5XG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUJpbmRpbmdSZXN0RWxlbWVudFxuICBwYXJzZVJlc3RCaW5kaW5nKCk6IFJlc3RFbGVtZW50IHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTsgLy8gZWF0IGAuLi5gXG4gICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlcyBsdmFsdWUgKGFzc2lnbmFibGUpIGF0b20uXG4gIHBhcnNlQmluZGluZ0F0b20oKTogUGF0dGVybiB7XG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtQmluZGluZ1BhdHRlcm5cbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xuICAgICAgY2FzZSB0dC5icmFja2V0TDoge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIG5vZGUuZWxlbWVudHMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QoXG4gICAgICAgICAgdHQuYnJhY2tldFIsXG4gICAgICAgICAgY2hhckNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldCxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXJyYXlQYXR0ZXJuXCIpO1xuICAgICAgfVxuXG4gICAgICBjYXNlIHR0LmJyYWNlTDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RMaWtlKHR0LmJyYWNlUiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtQmluZGluZ0lkZW50aWZpZXJcbiAgICByZXR1cm4gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUJpbmRpbmdFbGVtZW50TGlzdFxuICBwYXJzZUJpbmRpbmdMaXN0KFxuICAgIGNsb3NlOiBUb2tlblR5cGUsXG4gICAgY2xvc2VDaGFyQ29kZTogJFZhbHVlczx0eXBlb2YgY2hhckNvZGVzPixcbiAgICBhbGxvd0VtcHR5PzogYm9vbGVhbixcbiAgICBhbGxvd01vZGlmaWVycz86IGJvb2xlYW4sXG4gICk6ICRSZWFkT25seUFycmF5PFBhdHRlcm4gfCBUU1BhcmFtZXRlclByb3BlcnR5PiB7XG4gICAgY29uc3QgZWx0czogQXJyYXk8UGF0dGVybiB8IFRTUGFyYW1ldGVyUHJvcGVydHk+ID0gW107XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICB3aGlsZSAoIXRoaXMuZWF0KGNsb3NlKSkge1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5jb21tYSk7XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzLm1hdGNoKHR0LmNvbW1hKSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgbWV0aG9kIHJldHVybnMgYCRSZWFkT25seUFycmF5PD9QYXR0ZXJuPmAgaWYgYGFsbG93RW1wdHlgIGlzIHNldC5cbiAgICAgICAgZWx0cy5wdXNoKG51bGwpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmVhdChjbG9zZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuZWxsaXBzaXMpKSB7XG4gICAgICAgIGVsdHMucHVzaCh0aGlzLnBhcnNlQXNzaWduYWJsZUxpc3RJdGVtVHlwZXModGhpcy5wYXJzZVJlc3RCaW5kaW5nKCkpKTtcbiAgICAgICAgdGhpcy5jaGVja0NvbW1hQWZ0ZXJSZXN0KGNsb3NlQ2hhckNvZGUpO1xuICAgICAgICB0aGlzLmV4cGVjdChjbG9zZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGVjb3JhdG9ycyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5hdCkgJiYgdGhpcy5oYXNQbHVnaW4oXCJkZWNvcmF0b3JzXCIpKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWRQYXJhbWV0ZXJEZWNvcmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGludmFyaWFudDogaGFzUGx1Z2luKFwiZGVjb3JhdG9ycy1sZWdhY3lcIilcbiAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2godHQuYXQpKSB7XG4gICAgICAgICAgZGVjb3JhdG9ycy5wdXNoKHRoaXMucGFyc2VEZWNvcmF0b3IoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWx0cy5wdXNoKHRoaXMucGFyc2VBc3NpZ25hYmxlTGlzdEl0ZW0oYWxsb3dNb2RpZmllcnMsIGRlY29yYXRvcnMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsdHM7XG4gIH1cblxuICBwYXJzZUFzc2lnbmFibGVMaXN0SXRlbShcbiAgICBhbGxvd01vZGlmaWVyczogP2Jvb2xlYW4sXG4gICAgZGVjb3JhdG9yczogRGVjb3JhdG9yW10sXG4gICk6IFBhdHRlcm4gfCBUU1BhcmFtZXRlclByb3BlcnR5IHtcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdCgpO1xuICAgIHRoaXMucGFyc2VBc3NpZ25hYmxlTGlzdEl0ZW1UeXBlcyhsZWZ0KTtcbiAgICBjb25zdCBlbHQgPSB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KGxlZnQuc3RhcnQsIGxlZnQubG9jLnN0YXJ0LCBsZWZ0KTtcbiAgICBpZiAoZGVjb3JhdG9ycy5sZW5ndGgpIHtcbiAgICAgIGxlZnQuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnM7XG4gICAgfVxuICAgIHJldHVybiBlbHQ7XG4gIH1cblxuICAvLyBVc2VkIGJ5IGZsb3cvdHlwZXNjcmlwdCBwbHVnaW4gdG8gYWRkIHR5cGUgYW5ub3RhdGlvbnMgdG8gYmluZGluZyBlbGVtZW50c1xuICBwYXJzZUFzc2lnbmFibGVMaXN0SXRlbVR5cGVzKHBhcmFtOiBQYXR0ZXJuKTogUGF0dGVybiB7XG4gICAgcmV0dXJuIHBhcmFtO1xuICB9XG5cbiAgLy8gUGFyc2VzIGFzc2lnbm1lbnQgcGF0dGVybiBhcm91bmQgZ2l2ZW4gYXRvbSBpZiBwb3NzaWJsZS5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtQmluZGluZ0VsZW1lbnRcbiAgcGFyc2VNYXliZURlZmF1bHQoXG4gICAgc3RhcnRQb3M/OiA/bnVtYmVyLFxuICAgIHN0YXJ0TG9jPzogP1Bvc2l0aW9uLFxuICAgIGxlZnQ/OiA/UGF0dGVybixcbiAgKTogUGF0dGVybiB7XG4gICAgc3RhcnRMb2MgPSBzdGFydExvYyA/PyB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgIHN0YXJ0UG9zID0gc3RhcnRQb3MgPz8gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAvLyAkRmxvd0lnbm9yZVxuICAgIGxlZnQgPSBsZWZ0ID8/IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICAgIGlmICghdGhpcy5lYXQodHQuZXEpKSByZXR1cm4gbGVmdDtcblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBc3NpZ25tZW50UGF0dGVyblwiKTtcbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGF0IGEgbm9kZSBpcyBhbiBsdmFsIOKAlCBzb21ldGhpbmcgdGhhdCBjYW4gYmUgYXNzaWduZWRcbiAgLy8gdG8uXG5cbiAgY2hlY2tMVmFsKFxuICAgIGV4cHI6IEV4cHJlc3Npb24sXG4gICAgYmluZGluZ1R5cGU6IEJpbmRpbmdUeXBlcyA9IEJJTkRfTk9ORSxcbiAgICBjaGVja0NsYXNoZXM6ID97IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSxcbiAgICBjb250ZXh0RGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBkaXNhbGxvd0xldEJpbmRpbmc/OiBib29sZWFuLFxuICAgIHN0cmljdE1vZGVDaGFuZ2VkPzogYm9vbGVhbiA9IGZhbHNlLFxuICApOiB2b2lkIHtcbiAgICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICAgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuc3RhdGUuc3RyaWN0ICYmXG4gICAgICAgICAgLy8gXCJHbG9iYWxcIiByZXNlcnZlZCB3b3JkcyBoYXZlIGFscmVhZHkgYmVlbiBjaGVja2VkIGJ5IHBhcnNlSWRlbnRpZmllcixcbiAgICAgICAgICAvLyB1bmxlc3MgdGhleSBoYXZlIGJlZW4gZm91bmQgaW4gdGhlIGlkIG9yIHBhcmFtZXRlcnMgb2YgYSBzdHJpY3QtbW9kZVxuICAgICAgICAgIC8vIGZ1bmN0aW9uIGluIGEgc2xvcHB5IGNvbnRleHQuXG4gICAgICAgICAgKHN0cmljdE1vZGVDaGFuZ2VkXG4gICAgICAgICAgICA/IGlzU3RyaWN0QmluZFJlc2VydmVkV29yZChleHByLm5hbWUsIHRoaXMuaW5Nb2R1bGUpXG4gICAgICAgICAgICA6IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQoZXhwci5uYW1lKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIGV4cHIuc3RhcnQsXG4gICAgICAgICAgICBiaW5kaW5nVHlwZSA9PT0gQklORF9OT05FXG4gICAgICAgICAgICAgID8gRXJyb3JzLlN0cmljdEV2YWxBcmd1bWVudHNcbiAgICAgICAgICAgICAgOiBFcnJvcnMuU3RyaWN0RXZhbEFyZ3VtZW50c0JpbmRpbmcsXG4gICAgICAgICAgICBleHByLm5hbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGVja0NsYXNoZXMpIHtcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHByZWZpeCB0aGlzIHdpdGggYW4gdW5kZXJzY29yZSBmb3IgdGhlIGNhc2VzIHdoZXJlIHdlIGhhdmUgYSBrZXkgb2ZcbiAgICAgICAgICAvLyBgX19wcm90b19fYC4gdGhlcmUncyBhIGJ1ZyBpbiBvbGQgVjggd2hlcmUgdGhlIGZvbGxvd2luZyB3b3VsZG4ndCB3b3JrOlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gICA+IHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIC8vICAgdW5kZWZpbmVkXG4gICAgICAgICAgLy8gICA+IG9iai5fX3Byb3RvX19cbiAgICAgICAgICAvLyAgIG51bGxcbiAgICAgICAgICAvLyAgID4gb2JqLl9fcHJvdG9fXyA9IHRydWU7XG4gICAgICAgICAgLy8gICB0cnVlXG4gICAgICAgICAgLy8gICA+IG9iai5fX3Byb3RvX19cbiAgICAgICAgICAvLyAgIG51bGxcbiAgICAgICAgICBjb25zdCBrZXkgPSBgXyR7ZXhwci5uYW1lfWA7XG5cbiAgICAgICAgICBpZiAoY2hlY2tDbGFzaGVzW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoZXhwci5zdGFydCwgRXJyb3JzLlBhcmFtRHVwZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrQ2xhc2hlc1trZXldID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc2FsbG93TGV0QmluZGluZyAmJiBleHByLm5hbWUgPT09IFwibGV0XCIpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKGV4cHIuc3RhcnQsIEVycm9ycy5MZXRJbkxleGljYWxCaW5kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShiaW5kaW5nVHlwZSAmIEJJTkRfTk9ORSkpIHtcbiAgICAgICAgICB0aGlzLnNjb3BlLmRlY2xhcmVOYW1lKGV4cHIubmFtZSwgYmluZGluZ1R5cGUsIGV4cHIuc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgICBpZiAoYmluZGluZ1R5cGUgIT09IEJJTkRfTk9ORSkge1xuICAgICAgICAgIHRoaXMucmFpc2UoZXhwci5zdGFydCwgRXJyb3JzLkludmFsaWRQcm9wZXJ0eUJpbmRpbmdQYXR0ZXJuKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICAgICAgZm9yIChsZXQgcHJvcCBvZiBleHByLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAocHJvcC50eXBlID09PSBcIk9iamVjdFByb3BlcnR5XCIpIHByb3AgPSBwcm9wLnZhbHVlO1xuICAgICAgICAgIC8vIElmIHdlIGZpbmQgaGVyZSBhbiBPYmplY3RNZXRob2QsIGl0J3MgYmVjYXVzZSB0aGlzIHdhcyBvcmlnaW5hbGx5XG4gICAgICAgICAgLy8gYW4gT2JqZWN0RXhwcmVzc2lvbiB3aGljaCBoYXMgdGhlbiBiZWVuIGNvbnZlcnRlZC5cbiAgICAgICAgICAvLyB0b0Fzc2lnbmFibGUgYWxyZWFkeSByZXBvcnRlZCB0aGlzIGVycm9yIHdpdGggYSBuaWNlciBtZXNzYWdlLlxuICAgICAgICAgIGVsc2UgaWYgKHByb3AudHlwZSA9PT0gXCJPYmplY3RNZXRob2RcIikgY29udGludWU7XG5cbiAgICAgICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgICAgIHByb3AsXG4gICAgICAgICAgICBiaW5kaW5nVHlwZSxcbiAgICAgICAgICAgIGNoZWNrQ2xhc2hlcyxcbiAgICAgICAgICAgIFwib2JqZWN0IGRlc3RydWN0dXJpbmcgcGF0dGVyblwiLFxuICAgICAgICAgICAgZGlzYWxsb3dMZXRCaW5kaW5nLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJBcnJheVBhdHRlcm5cIjpcbiAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIGV4cHIuZWxlbWVudHMpIHtcbiAgICAgICAgICBpZiAoZWxlbSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgICAgIGVsZW0sXG4gICAgICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgICAgICBjaGVja0NsYXNoZXMsXG4gICAgICAgICAgICAgIFwiYXJyYXkgZGVzdHJ1Y3R1cmluZyBwYXR0ZXJuXCIsXG4gICAgICAgICAgICAgIGRpc2FsbG93TGV0QmluZGluZyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgZXhwci5sZWZ0LFxuICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgIGNoZWNrQ2xhc2hlcyxcbiAgICAgICAgICBcImFzc2lnbm1lbnQgcGF0dGVyblwiLFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlJlc3RFbGVtZW50XCI6XG4gICAgICAgIHRoaXMuY2hlY2tMVmFsKFxuICAgICAgICAgIGV4cHIuYXJndW1lbnQsXG4gICAgICAgICAgYmluZGluZ1R5cGUsXG4gICAgICAgICAgY2hlY2tDbGFzaGVzLFxuICAgICAgICAgIFwicmVzdCBlbGVtZW50XCIsXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIjpcbiAgICAgICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICAgICAgZXhwci5leHByZXNzaW9uLFxuICAgICAgICAgIGJpbmRpbmdUeXBlLFxuICAgICAgICAgIGNoZWNrQ2xhc2hlcyxcbiAgICAgICAgICBcInBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvblwiLFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgIGV4cHIuc3RhcnQsXG4gICAgICAgICAgYmluZGluZ1R5cGUgPT09IEJJTkRfTk9ORVxuICAgICAgICAgICAgPyBFcnJvcnMuSW52YWxpZExoc1xuICAgICAgICAgICAgOiBFcnJvcnMuSW52YWxpZExoc0JpbmRpbmcsXG4gICAgICAgICAgY29udGV4dERlc2NyaXB0aW9uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNoZWNrVG9SZXN0Q29udmVyc2lvbihub2RlOiBTcHJlYWRFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgbm9kZS5hcmd1bWVudC50eXBlICE9PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgbm9kZS5hcmd1bWVudC50eXBlICE9PSBcIk1lbWJlckV4cHJlc3Npb25cIlxuICAgICkge1xuICAgICAgdGhpcy5yYWlzZShub2RlLmFyZ3VtZW50LnN0YXJ0LCBFcnJvcnMuSW52YWxpZFJlc3RBc3NpZ25tZW50UGF0dGVybik7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tDb21tYUFmdGVyUmVzdChjbG9zZTogJFZhbHVlczx0eXBlb2YgY2hhckNvZGVzPik6IHZvaWQge1xuICAgIGlmICh0aGlzLm1hdGNoKHR0LmNvbW1hKSkge1xuICAgICAgaWYgKHRoaXMubG9va2FoZWFkQ2hhckNvZGUoKSA9PT0gY2xvc2UpIHtcbiAgICAgICAgdGhpcy5yYWlzZVRyYWlsaW5nQ29tbWFBZnRlclJlc3QodGhpcy5zdGF0ZS5zdGFydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhaXNlUmVzdE5vdExhc3QodGhpcy5zdGF0ZS5zdGFydCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmFpc2VSZXN0Tm90TGFzdChwb3M6IG51bWJlcikge1xuICAgIHRocm93IHRoaXMucmFpc2UocG9zLCBFcnJvcnMuRWxlbWVudEFmdGVyUmVzdCk7XG4gIH1cblxuICByYWlzZVRyYWlsaW5nQ29tbWFBZnRlclJlc3QocG9zOiBudW1iZXIpIHtcbiAgICB0aGlzLnJhaXNlKHBvcywgRXJyb3JzLlJlc3RUcmFpbGluZ0NvbW1hKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblxuLy8gQSByZWN1cnNpdmUgZGVzY2VudCBwYXJzZXIgb3BlcmF0ZXMgYnkgZGVmaW5pbmcgZnVuY3Rpb25zIGZvciBhbGxcbi8vIHN5bnRhY3RpYyBlbGVtZW50cywgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxpbmcgdGhvc2UsIGVhY2ggZnVuY3Rpb25cbi8vIGFkdmFuY2luZyB0aGUgaW5wdXQgc3RyZWFtIGFuZCByZXR1cm5pbmcgYW4gQVNUIG5vZGUuIFByZWNlZGVuY2Vcbi8vIG9mIGNvbnN0cnVjdHMgKGZvciBleGFtcGxlLCB0aGUgZmFjdCB0aGF0IGAheFsxXWAgbWVhbnMgYCEoeFsxXSlgXG4vLyBpbnN0ZWFkIG9mIGAoIXgpWzFdYCBpcyBoYW5kbGVkIGJ5IHRoZSBmYWN0IHRoYXQgdGhlIHBhcnNlclxuLy8gZnVuY3Rpb24gdGhhdCBwYXJzZXMgdW5hcnkgcHJlZml4IG9wZXJhdG9ycyBpcyBjYWxsZWQgZmlyc3QsIGFuZFxuLy8gaW4gdHVybiBjYWxscyB0aGUgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYFtdYCBzdWJzY3JpcHRzIOKAlCB0aGF0XG4vLyB3YXksIGl0J2xsIHJlY2VpdmUgdGhlIG5vZGUgZm9yIGB4WzFdYCBhbHJlYWR5IHBhcnNlZCwgYW5kIHdyYXBzXG4vLyAqdGhhdCogaW4gdGhlIHVuYXJ5IG9wZXJhdG9yIG5vZGUuXG4vL1xuLy8gQWNvcm4gdXNlcyBhbiBbb3BlcmF0b3IgcHJlY2VkZW5jZSBwYXJzZXJdW29wcF0gdG8gaGFuZGxlIGJpbmFyeVxuLy8gb3BlcmF0b3IgcHJlY2VkZW5jZSwgYmVjYXVzZSBpdCBpcyBtdWNoIG1vcmUgY29tcGFjdCB0aGFuIHVzaW5nXG4vLyB0aGUgdGVjaG5pcXVlIG91dGxpbmVkIGFib3ZlLCB3aGljaCB1c2VzIGRpZmZlcmVudCwgbmVzdGluZ1xuLy8gZnVuY3Rpb25zIHRvIHNwZWNpZnkgcHJlY2VkZW5jZSwgZm9yIGFsbCBvZiB0aGUgdGVuIGJpbmFyeVxuLy8gcHJlY2VkZW5jZSBsZXZlbHMgdGhhdCBKYXZhU2NyaXB0IGRlZmluZXMuXG4vL1xuLy8gW29wcF06IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0b3ItcHJlY2VkZW5jZV9wYXJzZXJcblxuaW1wb3J0IHsgdHlwZXMgYXMgdHQsIHR5cGUgVG9rZW5UeXBlIH0gZnJvbSBcIi4uL3Rva2VuaXplci90eXBlc1wiO1xuaW1wb3J0IHsgdHlwZXMgYXMgY3QgfSBmcm9tIFwiLi4vdG9rZW5pemVyL2NvbnRleHRcIjtcbmltcG9ydCAqIGFzIE4gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgTFZhbFBhcnNlciBmcm9tIFwiLi9sdmFsXCI7XG5pbXBvcnQge1xuICBpc0tleXdvcmQsXG4gIGlzUmVzZXJ2ZWRXb3JkLFxuICBpc1N0cmljdFJlc2VydmVkV29yZCxcbiAgaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkLFxuICBpc0lkZW50aWZpZXJTdGFydCxcbn0gZnJvbSBcIi4uL3V0aWwvaWRlbnRpZmllclwiO1xuaW1wb3J0IHR5cGUgeyBQb3MsIFBvc2l0aW9uIH0gZnJvbSBcIi4uL3V0aWwvbG9jYXRpb25cIjtcbmltcG9ydCAqIGFzIGNoYXJDb2RlcyBmcm9tIFwiY2hhcmNvZGVzXCI7XG5pbXBvcnQge1xuICBCSU5EX09VVFNJREUsXG4gIEJJTkRfVkFSLFxuICBTQ09QRV9BUlJPVyxcbiAgU0NPUEVfQ0xBU1MsXG4gIFNDT1BFX0RJUkVDVF9TVVBFUixcbiAgU0NPUEVfRlVOQ1RJT04sXG4gIFNDT1BFX1NVUEVSLFxuICBTQ09QRV9QUk9HUkFNLFxufSBmcm9tIFwiLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uRXJyb3JzIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgUEFSQU1fQVdBSVQsXG4gIFBBUkFNX0lOLFxuICBQQVJBTV9SRVRVUk4sXG4gIFBBUkFNLFxuICBmdW5jdGlvbkZsYWdzLFxufSBmcm9tIFwiLi4vdXRpbC9wcm9kdWN0aW9uLXBhcmFtZXRlclwiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4vZXJyb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwcmVzc2lvblBhcnNlciBleHRlbmRzIExWYWxQYXJzZXIge1xuICAvLyBGb3J3YXJkLWRlY2xhcmF0aW9uOiBkZWZpbmVkIGluIHN0YXRlbWVudC5qc1xuICAvKjo6XG4gICtwYXJzZUJsb2NrOiAoXG4gICAgYWxsb3dEaXJlY3RpdmVzPzogYm9vbGVhbixcbiAgICBjcmVhdGVOZXdMZXhpY2FsU2NvcGU/OiBib29sZWFuLFxuICAgIGFmdGVyQmxvY2tQYXJzZT86IChoYXNTdHJpY3RNb2RlRGlyZWN0aXZlOiBib29sZWFuKSA9PiB2b2lkLFxuICApID0+IE4uQmxvY2tTdGF0ZW1lbnQ7XG4gICtwYXJzZUNsYXNzOiAoXG4gICAgbm9kZTogTi5DbGFzcyxcbiAgICBpc1N0YXRlbWVudDogYm9vbGVhbixcbiAgICBvcHRpb25hbElkPzogYm9vbGVhbixcbiAgKSA9PiBOLkNsYXNzO1xuICArcGFyc2VEZWNvcmF0b3JzOiAoYWxsb3dFeHBvcnQ/OiBib29sZWFuKSA9PiB2b2lkO1xuICArcGFyc2VGdW5jdGlvbjogPFQ6IE4uTm9ybWFsRnVuY3Rpb24+KFxuICAgIG5vZGU6IFQsXG4gICAgc3RhdGVtZW50PzogbnVtYmVyLFxuICAgIGFsbG93RXhwcmVzc2lvbkJvZHk/OiBib29sZWFuLFxuICAgIGlzQXN5bmM/OiBib29sZWFuLFxuICApID0+IFQ7XG4gICtwYXJzZUZ1bmN0aW9uUGFyYW1zOiAobm9kZTogTi5GdW5jdGlvbiwgYWxsb3dNb2RpZmllcnM/OiBib29sZWFuKSA9PiB2b2lkO1xuICArdGFrZURlY29yYXRvcnM6IChub2RlOiBOLkhhc0RlY29yYXRvcnMpID0+IHZvaWQ7XG4gICovXG5cbiAgLy8gRm9yIG9iamVjdCBsaXRlcmFsLCBjaGVjayBpZiBwcm9wZXJ0eSBfX3Byb3RvX18gaGFzIGJlZW4gdXNlZCBtb3JlIHRoYW4gb25jZS5cbiAgLy8gSWYgdGhlIGV4cHJlc3Npb24gaXMgYSBkZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQsIHRoZW4gX19wcm90b19fIG1heSBhcHBlYXJcbiAgLy8gbXVsdGlwbGUgdGltZXMuIE90aGVyd2lzZSwgX19wcm90b19fIGlzIGEgZHVwbGljYXRlZCBrZXkuXG5cbiAgLy8gRm9yIHJlY29yZCBleHByZXNzaW9uLCBjaGVjayBpZiBwcm9wZXJ0eSBfX3Byb3RvX18gZXhpc3RzXG5cbiAgY2hlY2tQcm90byhcbiAgICBwcm9wOiBOLk9iamVjdE1lbWJlciB8IE4uU3ByZWFkRWxlbWVudCxcbiAgICBpc1JlY29yZDogYm9vbGVhbixcbiAgICBwcm90b1JlZjogeyB1c2VkOiBib29sZWFuIH0sXG4gICAgcmVmRXhwcmVzc2lvbkVycm9yczogP0V4cHJlc3Npb25FcnJvcnMsXG4gICk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIHByb3AudHlwZSA9PT0gXCJTcHJlYWRFbGVtZW50XCIgfHxcbiAgICAgIHByb3AudHlwZSA9PT0gXCJPYmplY3RNZXRob2RcIiB8fFxuICAgICAgcHJvcC5jb21wdXRlZCB8fFxuICAgICAgcHJvcC5zaG9ydGhhbmRcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBwcm9wLmtleTtcbiAgICAvLyBJdCBpcyBlaXRoZXIgYW4gSWRlbnRpZmllciBvciBhIFN0cmluZy9OdW1lcmljTGl0ZXJhbFxuICAgIGNvbnN0IG5hbWUgPSBrZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgPyBrZXkubmFtZSA6IGtleS52YWx1ZTtcblxuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICBpZiAoaXNSZWNvcmQpIHtcbiAgICAgICAgdGhpcy5yYWlzZShrZXkuc3RhcnQsIEVycm9ycy5SZWNvcmROb1Byb3RvKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHByb3RvUmVmLnVzZWQpIHtcbiAgICAgICAgaWYgKHJlZkV4cHJlc3Npb25FcnJvcnMpIHtcbiAgICAgICAgICAvLyBTdG9yZSB0aGUgZmlyc3QgcmVkZWZpbml0aW9uJ3MgcG9zaXRpb24sIG90aGVyd2lzZSBpZ25vcmUgYmVjYXVzZVxuICAgICAgICAgIC8vIHdlIGFyZSBwYXJzaW5nIGFtYmlndW91cyBwYXR0ZXJuXG4gICAgICAgICAgaWYgKHJlZkV4cHJlc3Npb25FcnJvcnMuZG91YmxlUHJvdG8gPT09IC0xKSB7XG4gICAgICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLmRvdWJsZVByb3RvID0ga2V5LnN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKGtleS5zdGFydCwgRXJyb3JzLkR1cGxpY2F0ZVByb3RvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwcm90b1JlZi51c2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRFeGl0RGVzY2VuZGluZyhleHByOiBOLkV4cHJlc3Npb24sIHBvdGVudGlhbEFycm93QXQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiAmJiBleHByLnN0YXJ0ID09PSBwb3RlbnRpYWxBcnJvd0F0XG4gICAgKTtcbiAgfVxuXG4gIC8vIENvbnZlbmllbmNlIG1ldGhvZCB0byBwYXJzZSBhbiBFeHByZXNzaW9uIG9ubHlcbiAgZ2V0RXhwcmVzc2lvbigpOiBOLkV4cHJlc3Npb24ge1xuICAgIGxldCBwYXJhbUZsYWdzID0gUEFSQU07XG4gICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwidG9wTGV2ZWxBd2FpdFwiKSAmJiB0aGlzLmluTW9kdWxlKSB7XG4gICAgICBwYXJhbUZsYWdzIHw9IFBBUkFNX0FXQUlUO1xuICAgIH1cbiAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX1BST0dSQU0pO1xuICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKHBhcmFtRmxhZ3MpO1xuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgY29uc3QgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgaWYgKCF0aGlzLm1hdGNoKHR0LmVvZikpIHtcbiAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cbiAgICBleHByLmNvbW1lbnRzID0gdGhpcy5zdGF0ZS5jb21tZW50cztcbiAgICBleHByLmVycm9ycyA9IHRoaXMuc3RhdGUuZXJyb3JzO1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLy8gIyMjIEV4cHJlc3Npb24gcGFyc2luZ1xuXG4gIC8vIFRoZXNlIG5lc3QsIGZyb20gdGhlIG1vc3QgZ2VuZXJhbCBleHByZXNzaW9uIHR5cGUgYXQgdGhlIHRvcCB0b1xuICAvLyAnYXRvbWljJywgbm9uZGl2aXNpYmxlIGV4cHJlc3Npb24gdHlwZXMgYXQgdGhlIGJvdHRvbS4gTW9zdCBvZlxuICAvLyB0aGUgZnVuY3Rpb25zIHdpbGwgc2ltcGx5IGxldCB0aGUgZnVuY3Rpb24gKHMpIGJlbG93IHRoZW0gcGFyc2UsXG4gIC8vIGFuZCwgKmlmKiB0aGUgc3ludGFjdGljIGNvbnN0cnVjdCB0aGV5IGhhbmRsZSBpcyBwcmVzZW50LCB3cmFwXG4gIC8vIHRoZSBBU1Qgbm9kZSB0aGF0IHRoZSBpbm5lciBwYXJzZXIgZ2F2ZSB0aGVtIGluIGFub3RoZXIgbm9kZS5cblxuICAvLyBQYXJzZSBhIGZ1bGwgZXhwcmVzc2lvbi5cbiAgLy8gLSBgZGlzYWxsb3dJbmBcbiAgLy8gICBpcyB1c2VkIHRvIGZvcmJpZCB0aGUgYGluYCBvcGVyYXRvciAoaW4gZm9yIGxvb3BzIGluaXRpYWxpemF0aW9uIGV4cHJlc3Npb25zKVxuICAvLyAgIFdoZW4gYGRpc2FsbG93SW5gIGlzIHRydWUsIHRoZSBwcm9kdWN0aW9uIHBhcmFtZXRlciBbSW5dIGlzIG5vdCBwcmVzZW50LlxuXG4gIC8vIC0gYHJlZkV4cHJlc3Npb25FcnJvcnMgYFxuICAvLyAgIHByb3ZpZGVzIHJlZmVyZW5jZSBmb3Igc3RvcmluZyAnPScgb3BlcmF0b3IgaW5zaWRlIHNob3J0aGFuZFxuICAvLyAgIHByb3BlcnR5IGFzc2lnbm1lbnQgaW4gY29udGV4dHMgd2hlcmUgYm90aCBvYmplY3QgZXhwcmVzc2lvblxuICAvLyAgIGFuZCBvYmplY3QgcGF0dGVybiBtaWdodCBhcHBlYXIgKHNvIGl0J3MgcG9zc2libGUgdG8gcmFpc2VcbiAgLy8gICBkZWxheWVkIHN5bnRheCBlcnJvciBhdCBjb3JyZWN0IHBvc2l0aW9uKS5cblxuICBwYXJzZUV4cHJlc3Npb24oXG4gICAgZGlzYWxsb3dJbj86IGJvb2xlYW4sXG4gICAgcmVmRXhwcmVzc2lvbkVycm9ycz86IEV4cHJlc3Npb25FcnJvcnMsXG4gICk6IE4uRXhwcmVzc2lvbiB7XG4gICAgaWYgKGRpc2FsbG93SW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmRpc2FsbG93SW5BbmQoKCkgPT5cbiAgICAgICAgdGhpcy5wYXJzZUV4cHJlc3Npb25CYXNlKHJlZkV4cHJlc3Npb25FcnJvcnMpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWxsb3dJbkFuZCgoKSA9PiB0aGlzLnBhcnNlRXhwcmVzc2lvbkJhc2UocmVmRXhwcmVzc2lvbkVycm9ycykpO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtRXhwcmVzc2lvblxuICBwYXJzZUV4cHJlc3Npb25CYXNlKHJlZkV4cHJlc3Npb25FcnJvcnM/OiBFeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgIGNvbnN0IGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24ocmVmRXhwcmVzc2lvbkVycm9ycyk7XG4gICAgaWYgKHRoaXMubWF0Y2godHQuY29tbWEpKSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS5leHByZXNzaW9ucyA9IFtleHByXTtcbiAgICAgIHdoaWxlICh0aGlzLmVhdCh0dC5jb21tYSkpIHtcbiAgICAgICAgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VNYXliZUFzc2lnbihyZWZFeHByZXNzaW9uRXJyb3JzKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnRvUmVmZXJlbmNlZExpc3Qobm9kZS5leHByZXNzaW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8vIFNldCBbfkluXSBwYXJhbWV0ZXIgZm9yIGFzc2lnbm1lbnQgZXhwcmVzc2lvblxuICBwYXJzZU1heWJlQXNzaWduRGlzYWxsb3dJbihcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgYWZ0ZXJMZWZ0UGFyc2U/OiBGdW5jdGlvbixcbiAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWxsb3dJbkFuZCgoKSA9PlxuICAgICAgdGhpcy5wYXJzZU1heWJlQXNzaWduKFxuICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICBhZnRlckxlZnRQYXJzZSxcbiAgICAgICAgcmVmTmVlZHNBcnJvd1BvcyxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8vIFNldCBbK0luXSBwYXJhbWV0ZXIgZm9yIGFzc2lnbm1lbnQgZXhwcmVzc2lvblxuICBwYXJzZU1heWJlQXNzaWduQWxsb3dJbihcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgYWZ0ZXJMZWZ0UGFyc2U/OiBGdW5jdGlvbixcbiAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsb3dJbkFuZCgoKSA9PlxuICAgICAgdGhpcy5wYXJzZU1heWJlQXNzaWduKFxuICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICBhZnRlckxlZnRQYXJzZSxcbiAgICAgICAgcmVmTmVlZHNBcnJvd1BvcyxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGFuIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi4gVGhpcyBpbmNsdWRlcyBhcHBsaWNhdGlvbnMgb2ZcbiAgLy8gb3BlcmF0b3JzIGxpa2UgYCs9YC5cblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1Bc3NpZ25tZW50RXhwcmVzc2lvblxuICBwYXJzZU1heWJlQXNzaWduKFxuICAgIHJlZkV4cHJlc3Npb25FcnJvcnM/OiA/RXhwcmVzc2lvbkVycm9ycyxcbiAgICBhZnRlckxlZnRQYXJzZT86IEZ1bmN0aW9uLFxuICAgIHJlZk5lZWRzQXJyb3dQb3M/OiA/UG9zLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICBjb25zdCBzdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwieWllbGRcIikpIHtcbiAgICAgIGlmICh0aGlzLnByb2RQYXJhbS5oYXNZaWVsZCkge1xuICAgICAgICBsZXQgbGVmdCA9IHRoaXMucGFyc2VZaWVsZCgpO1xuICAgICAgICBpZiAoYWZ0ZXJMZWZ0UGFyc2UpIHtcbiAgICAgICAgICBsZWZ0ID0gYWZ0ZXJMZWZ0UGFyc2UuY2FsbCh0aGlzLCBsZWZ0LCBzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZWZ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIHRva2VuaXplciB3aWxsIGFzc3VtZSBhbiBleHByZXNzaW9uIGlzIGFsbG93ZWQgYWZ0ZXJcbiAgICAgICAgLy8gYHlpZWxkYCwgYnV0IHRoaXMgaXNuJ3QgdGhhdCBraW5kIG9mIHlpZWxkXG4gICAgICAgIHRoaXMuc3RhdGUuZXhwckFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgb3duRXhwcmVzc2lvbkVycm9ycztcbiAgICBpZiAocmVmRXhwcmVzc2lvbkVycm9ycykge1xuICAgICAgb3duRXhwcmVzc2lvbkVycm9ycyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWZFeHByZXNzaW9uRXJyb3JzID0gbmV3IEV4cHJlc3Npb25FcnJvcnMoKTtcbiAgICAgIG93bkV4cHJlc3Npb25FcnJvcnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuTCkgfHwgdGhpcy5tYXRjaCh0dC5uYW1lKSkge1xuICAgICAgdGhpcy5zdGF0ZS5wb3RlbnRpYWxBcnJvd0F0ID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICB9XG5cbiAgICBsZXQgbGVmdCA9IHRoaXMucGFyc2VNYXliZUNvbmRpdGlvbmFsKFxuICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycyxcbiAgICAgIHJlZk5lZWRzQXJyb3dQb3MsXG4gICAgKTtcbiAgICBpZiAoYWZ0ZXJMZWZ0UGFyc2UpIHtcbiAgICAgIGxlZnQgPSBhZnRlckxlZnRQYXJzZS5jYWxsKHRoaXMsIGxlZnQsIHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnR5cGUuaXNBc3NpZ24pIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBjb25zdCBvcGVyYXRvciA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICBub2RlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG5cbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmVxKSkge1xuICAgICAgICBub2RlLmxlZnQgPSB0aGlzLnRvQXNzaWduYWJsZShsZWZ0KTtcbiAgICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycy5kb3VibGVQcm90byA9IC0xOyAvLyByZXNldCBiZWNhdXNlIGRvdWJsZSBfX3Byb3RvX18gaXMgdmFsaWQgaW4gYXNzaWdubWVudCBleHByZXNzaW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmxlZnQgPSBsZWZ0O1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmRXhwcmVzc2lvbkVycm9ycy5zaG9ydGhhbmRBc3NpZ24gPj0gbm9kZS5sZWZ0LnN0YXJ0KSB7XG4gICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gLTE7IC8vIHJlc2V0IGJlY2F1c2Ugc2hvcnRoYW5kIGRlZmF1bHQgd2FzIHVzZWQgY29ycmVjdGx5XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hlY2tMVmFsKGxlZnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcImFzc2lnbm1lbnQgZXhwcmVzc2lvblwiKTtcblxuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIik7XG4gICAgfSBlbHNlIGlmIChvd25FeHByZXNzaW9uRXJyb3JzKSB7XG4gICAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZFeHByZXNzaW9uRXJyb3JzLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgdGVybmFyeSBjb25kaXRpb25hbCAoYD86YCkgb3BlcmF0b3IuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUNvbmRpdGlvbmFsRXhwcmVzc2lvblxuXG4gIHBhcnNlTWF5YmVDb25kaXRpb25hbChcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzOiBFeHByZXNzaW9uRXJyb3JzLFxuICAgIHJlZk5lZWRzQXJyb3dQb3M/OiA/UG9zLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICBjb25zdCBzdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgY29uc3QgcG90ZW50aWFsQXJyb3dBdCA9IHRoaXMuc3RhdGUucG90ZW50aWFsQXJyb3dBdDtcbiAgICBjb25zdCBleHByID0gdGhpcy5wYXJzZUV4cHJPcHMocmVmRXhwcmVzc2lvbkVycm9ycyk7XG5cbiAgICBpZiAodGhpcy5zaG91bGRFeGl0RGVzY2VuZGluZyhleHByLCBwb3RlbnRpYWxBcnJvd0F0KSkge1xuICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VDb25kaXRpb25hbChleHByLCBzdGFydFBvcywgc3RhcnRMb2MsIHJlZk5lZWRzQXJyb3dQb3MpO1xuICB9XG5cbiAgcGFyc2VDb25kaXRpb25hbChcbiAgICBleHByOiBOLkV4cHJlc3Npb24sXG4gICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgLy8gRklYTUU6IERpc2FibGluZyB0aGlzIGZvciBub3cgc2luY2UgY2FuJ3Qgc2VlbSB0byBnZXQgaXQgdG8gcGxheSBuaWNlbHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICByZWZOZWVkc0Fycm93UG9zPzogP1BvcyxcbiAgKTogTi5FeHByZXNzaW9uIHtcbiAgICBpZiAodGhpcy5lYXQodHQucXVlc3Rpb24pKSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS50ZXN0ID0gZXhwcjtcbiAgICAgIG5vZGUuY29uc2VxdWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbkFsbG93SW4oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbG9uKTtcbiAgICAgIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIC8vIFN0YXJ0IHRoZSBwcmVjZWRlbmNlIHBhcnNlci5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtU2hvcnRDaXJjdWl0RXhwcmVzc2lvblxuXG4gIHBhcnNlRXhwck9wcyhyZWZFeHByZXNzaW9uRXJyb3JzOiBFeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgIGNvbnN0IHBvdGVudGlhbEFycm93QXQgPSB0aGlzLnN0YXRlLnBvdGVudGlhbEFycm93QXQ7XG4gICAgY29uc3QgZXhwciA9IHRoaXMucGFyc2VNYXliZVVuYXJ5KHJlZkV4cHJlc3Npb25FcnJvcnMpO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkRXhpdERlc2NlbmRpbmcoZXhwciwgcG90ZW50aWFsQXJyb3dBdCkpIHtcbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlRXhwck9wKGV4cHIsIHN0YXJ0UG9zLCBzdGFydExvYywgLTEpO1xuICB9XG5cbiAgLy8gUGFyc2UgYmluYXJ5IG9wZXJhdG9ycyB3aXRoIHRoZSBvcGVyYXRvciBwcmVjZWRlbmNlIHBhcnNpbmdcbiAgLy8gYWxnb3JpdGhtLiBgbGVmdGAgaXMgdGhlIGxlZnQtaGFuZCBzaWRlIG9mIHRoZSBvcGVyYXRvci5cbiAgLy8gYG1pblByZWNgIHByb3ZpZGVzIGNvbnRleHQgdGhhdCBhbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIHN0b3AgYW5kXG4gIC8vIGRlZmVyIGZ1cnRoZXIgcGFyc2VyIHRvIG9uZSBvZiBpdHMgY2FsbGVycyB3aGVuIGl0IGVuY291bnRlcnMgYW5cbiAgLy8gb3BlcmF0b3IgdGhhdCBoYXMgYSBsb3dlciBwcmVjZWRlbmNlIHRoYW4gdGhlIHNldCBpdCBpcyBwYXJzaW5nLlxuXG4gIHBhcnNlRXhwck9wKFxuICAgIGxlZnQ6IE4uRXhwcmVzc2lvbixcbiAgICBsZWZ0U3RhcnRQb3M6IG51bWJlcixcbiAgICBsZWZ0U3RhcnRMb2M6IFBvc2l0aW9uLFxuICAgIG1pblByZWM6IG51bWJlcixcbiAgKTogTi5FeHByZXNzaW9uIHtcbiAgICBsZXQgcHJlYyA9IHRoaXMuc3RhdGUudHlwZS5iaW5vcDtcbiAgICBpZiAocHJlYyAhPSBudWxsICYmICh0aGlzLnByb2RQYXJhbS5oYXNJbiB8fCAhdGhpcy5tYXRjaCh0dC5faW4pKSkge1xuICAgICAgaWYgKHByZWMgPiBtaW5QcmVjKSB7XG4gICAgICAgIGNvbnN0IG9wID0gdGhpcy5zdGF0ZS50eXBlO1xuICAgICAgICBpZiAob3AgPT09IHR0LnBpcGVsaW5lKSB7XG4gICAgICAgICAgdGhpcy5leHBlY3RQbHVnaW4oXCJwaXBlbGluZU9wZXJhdG9yXCIpO1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5KSB7XG4gICAgICAgICAgICByZXR1cm4gbGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZS5pblBpcGVsaW5lID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmNoZWNrUGlwZWxpbmVBdEluZml4T3BlcmF0b3IobGVmdCwgbGVmdFN0YXJ0UG9zKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGVBdChsZWZ0U3RhcnRQb3MsIGxlZnRTdGFydExvYyk7XG4gICAgICAgIG5vZGUubGVmdCA9IGxlZnQ7XG4gICAgICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgb3AgPT09IHR0LmV4cG9uZW50ICYmXG4gICAgICAgICAgbGVmdC50eXBlID09PSBcIlVuYXJ5RXhwcmVzc2lvblwiICYmXG4gICAgICAgICAgKHRoaXMub3B0aW9ucy5jcmVhdGVQYXJlbnRoZXNpemVkRXhwcmVzc2lvbnMgfHxcbiAgICAgICAgICAgICEobGVmdC5leHRyYSAmJiBsZWZ0LmV4dHJhLnBhcmVudGhlc2l6ZWQpKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgbGVmdC5hcmd1bWVudC5zdGFydCxcbiAgICAgICAgICAgIEVycm9ycy5VbmV4cGVjdGVkVG9rZW5VbmFyeUV4cG9uZW50aWF0aW9uLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsb2dpY2FsID0gb3AgPT09IHR0LmxvZ2ljYWxPUiB8fCBvcCA9PT0gdHQubG9naWNhbEFORDtcbiAgICAgICAgY29uc3QgY29hbGVzY2UgPSBvcCA9PT0gdHQubnVsbGlzaENvYWxlc2Npbmc7XG5cbiAgICAgICAgaWYgKGNvYWxlc2NlKSB7XG4gICAgICAgICAgLy8gSGFuZGxlIHRoZSBwcmVjZWRlbmNlIG9mIGB0dC5jb2FsZXNjZWAgYXMgZXF1YWwgdG8gdGhlIHJhbmdlIG9mIGxvZ2ljYWwgZXhwcmVzc2lvbnMuXG4gICAgICAgICAgLy8gSW4gb3RoZXIgd29yZHMsIGBub2RlLnJpZ2h0YCBzaG91bGRuJ3QgY29udGFpbiBsb2dpY2FsIGV4cHJlc3Npb25zIGluIG9yZGVyIHRvIGNoZWNrIHRoZSBtaXhlZCBlcnJvci5cbiAgICAgICAgICBwcmVjID0gKCh0dC5sb2dpY2FsQU5EOiBhbnkpOiB7IGJpbm9wOiBudW1iZXIgfSkuYmlub3A7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgb3AgPT09IHR0LnBpcGVsaW5lICYmXG4gICAgICAgICAgdGhpcy5nZXRQbHVnaW5PcHRpb24oXCJwaXBlbGluZU9wZXJhdG9yXCIsIFwicHJvcG9zYWxcIikgPT09IFwibWluaW1hbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMubWF0Y2godHQubmFtZSkgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUgPT09IFwiYXdhaXRcIiAmJlxuICAgICAgICAgICAgdGhpcy5wcm9kUGFyYW0uaGFzQXdhaXRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgICAgICAgIEVycm9ycy5VbmV4cGVjdGVkQXdhaXRBZnRlclBpcGVsaW5lQm9keSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5yaWdodCA9IHRoaXMucGFyc2VFeHByT3BSaWdodEV4cHIob3AsIHByZWMpO1xuICAgICAgICB0aGlzLmZpbmlzaE5vZGUoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBsb2dpY2FsIHx8IGNvYWxlc2NlID8gXCJMb2dpY2FsRXhwcmVzc2lvblwiIDogXCJCaW5hcnlFeHByZXNzaW9uXCIsXG4gICAgICAgICk7XG4gICAgICAgIC8qIHRoaXMgY2hlY2sgaXMgZm9yIGFsbCA/PyBvcGVyYXRvcnNcbiAgICAgICAgICogYSA/PyBiICYmIGMgZm9yIHRoaXMgZXhhbXBsZVxuICAgICAgICAgKiB3aGVuIG9wIGlzIGNvYWxlc2NlIGFuZCBuZXh0T3AgaXMgbG9naWNhbCAoJiYpLCB0aHJvdyBhdCB0aGUgcG9zIG9mIG5leHRPcCB0aGF0IGl0IGNhbiBub3QgYmUgbWl4ZWQuXG4gICAgICAgICAqIFN5bW1ldHJpY2FsbHkgaXQgYWxzbyB0aHJvd3Mgd2hlbiBvcCBpcyBsb2dpY2FsIGFuZCBuZXh0T3AgaXMgY29hbGVzY2VcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IG5leHRPcCA9IHRoaXMuc3RhdGUudHlwZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChjb2FsZXNjZSAmJiAobmV4dE9wID09PSB0dC5sb2dpY2FsT1IgfHwgbmV4dE9wID09PSB0dC5sb2dpY2FsQU5EKSkgfHxcbiAgICAgICAgICAobG9naWNhbCAmJiBuZXh0T3AgPT09IHR0Lm51bGxpc2hDb2FsZXNjaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5NaXhpbmdDb2FsZXNjZVdpdGhMb2dpY2FsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwck9wKG5vZGUsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH1cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGBwYXJzZUV4cHJPcGAuIFBhcnNlIHRoZSByaWdodC1oYW5kIHNpZGUgb2YgYmluYXJ5LVxuICAvLyBvcGVyYXRvciBleHByZXNzaW9ucywgdGhlbiBhcHBseSBhbnkgb3BlcmF0b3Itc3BlY2lmaWMgZnVuY3Rpb25zLlxuXG4gIHBhcnNlRXhwck9wUmlnaHRFeHByKG9wOiBUb2tlblR5cGUsIHByZWM6IG51bWJlcik6IE4uRXhwcmVzc2lvbiB7XG4gICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICBjYXNlIHR0LnBpcGVsaW5lOlxuICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicGlwZWxpbmVPcGVyYXRvclwiLCBcInByb3Bvc2FsXCIpKSB7XG4gICAgICAgICAgY2FzZSBcInNtYXJ0XCI6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aXRoVG9waWNQZXJtaXR0aW5nQ29udGV4dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU21hcnRQaXBlbGluZUJvZHkoXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUV4cHJPcEJhc2VSaWdodEV4cHIob3AsIHByZWMpLFxuICAgICAgICAgICAgICAgIHN0YXJ0UG9zLFxuICAgICAgICAgICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgY2FzZSBcImZzaGFycFwiOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2l0aFNvbG9Bd2FpdFBlcm1pdHRpbmdDb250ZXh0KCgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGU2hhcnBQaXBlbGluZUJvZHkocHJlYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJPcEJhc2VSaWdodEV4cHIob3AsIHByZWMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgYHBhcnNlRXhwck9wUmlnaHRFeHByYC4gUGFyc2UgdGhlIHJpZ2h0LWhhbmQgc2lkZSBvZlxuICAvLyBiaW5hcnktb3BlcmF0b3IgZXhwcmVzc2lvbnMgd2l0aG91dCBhcHBseWluZyBhbnkgb3BlcmF0b3Itc3BlY2lmaWMgZnVuY3Rpb25zLlxuXG4gIHBhcnNlRXhwck9wQmFzZVJpZ2h0RXhwcihvcDogVG9rZW5UeXBlLCBwcmVjOiBudW1iZXIpOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICBjb25zdCBzdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJPcChcbiAgICAgIHRoaXMucGFyc2VNYXliZVVuYXJ5KCksXG4gICAgICBzdGFydFBvcyxcbiAgICAgIHN0YXJ0TG9jLFxuICAgICAgb3AucmlnaHRBc3NvY2lhdGl2ZSA/IHByZWMgLSAxIDogcHJlYyxcbiAgICApO1xuICB9XG5cbiAgLy8gUGFyc2UgdW5hcnkgb3BlcmF0b3JzLCBib3RoIHByZWZpeCBhbmQgcG9zdGZpeC5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtVW5hcnlFeHByZXNzaW9uXG4gIHBhcnNlTWF5YmVVbmFyeShyZWZFeHByZXNzaW9uRXJyb3JzOiA/RXhwcmVzc2lvbkVycm9ycyk6IE4uRXhwcmVzc2lvbiB7XG4gICAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiYXdhaXRcIikgJiYgdGhpcy5pc0F3YWl0QWxsb3dlZCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUF3YWl0KCk7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMubWF0Y2godHQuaW5jRGVjKTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBpZiAodGhpcy5zdGF0ZS50eXBlLnByZWZpeCkge1xuICAgICAgbm9kZS5vcGVyYXRvciA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICBub2RlLnByZWZpeCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0Ll90aHJvdykpIHtcbiAgICAgICAgdGhpcy5leHBlY3RQbHVnaW4oXCJ0aHJvd0V4cHJlc3Npb25zXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNEZWxldGUgPSB0aGlzLm1hdGNoKHR0Ll9kZWxldGUpO1xuICAgICAgdGhpcy5uZXh0KCk7XG5cbiAgICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeSgpO1xuXG4gICAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZFeHByZXNzaW9uRXJyb3JzLCB0cnVlKTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyaWN0ICYmIGlzRGVsZXRlKSB7XG4gICAgICAgIGNvbnN0IGFyZyA9IG5vZGUuYXJndW1lbnQ7XG5cbiAgICAgICAgaWYgKGFyZy50eXBlID09PSBcIklkZW50aWZpZXJcIikge1xuICAgICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgRXJyb3JzLlN0cmljdERlbGV0ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgKGFyZy50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIiB8fFxuICAgICAgICAgICAgYXJnLnR5cGUgPT09IFwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uXCIpICYmXG4gICAgICAgICAgYXJnLnByb3BlcnR5LnR5cGUgPT09IFwiUHJpdmF0ZU5hbWVcIlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIEVycm9ycy5EZWxldGVQcml2YXRlRmllbGQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJVbmFyeUV4cHJlc3Npb25cIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VVcGRhdGUobm9kZSwgdXBkYXRlLCByZWZFeHByZXNzaW9uRXJyb3JzKTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLVVwZGF0ZUV4cHJlc3Npb25cbiAgcGFyc2VVcGRhdGUoXG4gICAgbm9kZTogTi5FeHByZXNzaW9uLFxuICAgIHVwZGF0ZTogYm9vbGVhbixcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzOiA/RXhwcmVzc2lvbkVycm9ycyxcbiAgKTogTi5FeHByZXNzaW9uIHtcbiAgICBpZiAodXBkYXRlKSB7XG4gICAgICB0aGlzLmNoZWNrTFZhbChub2RlLmFyZ3VtZW50LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJwcmVmaXggb3BlcmF0aW9uXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlVwZGF0ZUV4cHJlc3Npb25cIik7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICBsZXQgZXhwciA9IHRoaXMucGFyc2VFeHByU3Vic2NyaXB0cyhyZWZFeHByZXNzaW9uRXJyb3JzKTtcbiAgICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRXhwcmVzc2lvbkVycm9ycywgZmFsc2UpKSByZXR1cm4gZXhwcjtcbiAgICB3aGlsZSAodGhpcy5zdGF0ZS50eXBlLnBvc3RmaXggJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLm9wZXJhdG9yID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgIG5vZGUucHJlZml4ID0gZmFsc2U7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gZXhwcjtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcInBvc3RmaXggb3BlcmF0aW9uXCIpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBleHByID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVXBkYXRlRXhwcmVzc2lvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvLyBQYXJzZSBjYWxsLCBkb3QsIGFuZCBgW11gLXN1YnNjcmlwdCBleHByZXNzaW9ucy5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtTGVmdEhhbmRTaWRlRXhwcmVzc2lvblxuICBwYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkV4cHJlc3Npb25FcnJvcnM6ID9FeHByZXNzaW9uRXJyb3JzKTogTi5FeHByZXNzaW9uIHtcbiAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgY29uc3Qgc3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgIGNvbnN0IHBvdGVudGlhbEFycm93QXQgPSB0aGlzLnN0YXRlLnBvdGVudGlhbEFycm93QXQ7XG4gICAgY29uc3QgZXhwciA9IHRoaXMucGFyc2VFeHByQXRvbShyZWZFeHByZXNzaW9uRXJyb3JzKTtcblxuICAgIGlmICh0aGlzLnNob3VsZEV4aXREZXNjZW5kaW5nKGV4cHIsIHBvdGVudGlhbEFycm93QXQpKSB7XG4gICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZVN1YnNjcmlwdHMoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgfVxuXG4gIHBhcnNlU3Vic2NyaXB0cyhcbiAgICBiYXNlOiBOLkV4cHJlc3Npb24sXG4gICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgbm9DYWxscz86ID9ib29sZWFuLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgb3B0aW9uYWxDaGFpbk1lbWJlcjogZmFsc2UsXG4gICAgICBtYXliZUFzeW5jQXJyb3c6IHRoaXMuYXRQb3NzaWJsZUFzeW5jQXJyb3coYmFzZSksXG4gICAgICBzdG9wOiBmYWxzZSxcbiAgICB9O1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IG9sZE1heWJlSW5Bc3luY0Fycm93SGVhZCA9IHRoaXMuc3RhdGUubWF5YmVJbkFzeW5jQXJyb3dIZWFkO1xuICAgICAgaWYgKHN0YXRlLm1heWJlQXN5bmNBcnJvdykge1xuICAgICAgICB0aGlzLnN0YXRlLm1heWJlSW5Bc3luY0Fycm93SGVhZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBiYXNlID0gdGhpcy5wYXJzZVN1YnNjcmlwdChiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMsIHN0YXRlKTtcblxuICAgICAgLy8gQWZ0ZXIgcGFyc2luZyBhIHN1YnNjcmlwdCwgdGhpcyBpc24ndCBcImFzeW5jXCIgZm9yIHN1cmUuXG4gICAgICBzdGF0ZS5tYXliZUFzeW5jQXJyb3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3RhdGUubWF5YmVJbkFzeW5jQXJyb3dIZWFkID0gb2xkTWF5YmVJbkFzeW5jQXJyb3dIZWFkO1xuICAgIH0gd2hpbGUgKCFzdGF0ZS5zdG9wKTtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gc3RhdGUgU2V0ICdzdGF0ZS5zdG9wID0gdHJ1ZScgdG8gaW5kaWNhdGUgdGhhdCB3ZSBzaG91bGQgc3RvcCBwYXJzaW5nIHN1YnNjcmlwdHMuXG4gICAqICAgc3RhdGUub3B0aW9uYWxDaGFpbk1lbWJlciB0byBpbmRpY2F0ZSB0aGF0IHRoZSBtZW1iZXIgaXMgY3VycmVudGx5IGluIE9wdGlvbmFsQ2hhaW5cbiAgICovXG4gIHBhcnNlU3Vic2NyaXB0KFxuICAgIGJhc2U6IE4uRXhwcmVzc2lvbixcbiAgICBzdGFydFBvczogbnVtYmVyLFxuICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICBub0NhbGxzOiA/Ym9vbGVhbixcbiAgICBzdGF0ZTogTi5QYXJzZVN1YnNjcmlwdFN0YXRlLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGlmICghbm9DYWxscyAmJiB0aGlzLmVhdCh0dC5kb3VibGVDb2xvbikpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQmluZChiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMsIHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuYmFja1F1b3RlKSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24oXG4gICAgICAgIGJhc2UsXG4gICAgICAgIHN0YXJ0UG9zLFxuICAgICAgICBzdGFydExvYyxcbiAgICAgICAgc3RhdGUsXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBvcHRpb25hbCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLm1hdGNoKHR0LnF1ZXN0aW9uRG90KSkge1xuICAgICAgc3RhdGUub3B0aW9uYWxDaGFpbk1lbWJlciA9IG9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgIGlmIChub0NhbGxzICYmIHRoaXMubG9va2FoZWFkQ2hhckNvZGUoKSA9PT0gY2hhckNvZGVzLmxlZnRQYXJlbnRoZXNpcykge1xuICAgICAgICAvLyBzdG9wIGF0IGA/LmAgd2hlbiBwYXJzaW5nIGBuZXcgYT8uKClgXG4gICAgICAgIHN0YXRlLnN0b3AgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cblxuICAgIGlmICghbm9DYWxscyAmJiB0aGlzLm1hdGNoKHR0LnBhcmVuTCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQ292ZXJDYWxsQW5kQXN5bmNBcnJvd0hlYWQoXG4gICAgICAgIGJhc2UsXG4gICAgICAgIHN0YXJ0UG9zLFxuICAgICAgICBzdGFydExvYyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIG9wdGlvbmFsLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbmFsIHx8IHRoaXMubWF0Y2godHQuYnJhY2tldEwpIHx8IHRoaXMuZWF0KHR0LmRvdCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlTWVtYmVyKGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgc3RhdGUsIG9wdGlvbmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuc3RvcCA9IHRydWU7XG4gICAgICByZXR1cm4gYmFzZTtcbiAgICB9XG4gIH1cblxuICAvLyBiYXNlWz9ZaWVsZCwgP0F3YWl0XSBbIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gXVxuICAvLyBiYXNlWz9ZaWVsZCwgP0F3YWl0XSAuIElkZW50aWZpZXJOYW1lXG4gIC8vIGJhc2VbP1lpZWxkLCA/QXdhaXRdIC4gUHJpdmF0ZUlkZW50aWZpZXJcbiAgLy8gICB3aGVyZSBgYmFzZWAgaXMgb25lIG9mIENhbGxFeHByZXNzaW9uLCBNZW1iZXJFeHByZXNzaW9uIGFuZCBPcHRpb25hbENoYWluXG4gIHBhcnNlTWVtYmVyKFxuICAgIGJhc2U6IE4uRXhwcmVzc2lvbixcbiAgICBzdGFydFBvczogbnVtYmVyLFxuICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICBzdGF0ZTogTi5QYXJzZVN1YnNjcmlwdFN0YXRlLFxuICAgIG9wdGlvbmFsOiBib29sZWFuLFxuICApOiBOLk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvbiB8IE4uTWVtYmVyRXhwcmVzc2lvbiB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBjb25zdCBjb21wdXRlZCA9IHRoaXMuZWF0KHR0LmJyYWNrZXRMKTtcbiAgICBub2RlLm9iamVjdCA9IGJhc2U7XG4gICAgbm9kZS5jb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gY29tcHV0ZWRcbiAgICAgID8gdGhpcy5wYXJzZUV4cHJlc3Npb24oKVxuICAgICAgOiB0aGlzLnBhcnNlTWF5YmVQcml2YXRlTmFtZSh0cnVlKTtcblxuICAgIGlmIChwcm9wZXJ0eS50eXBlID09PSBcIlByaXZhdGVOYW1lXCIpIHtcbiAgICAgIGlmIChub2RlLm9iamVjdC50eXBlID09PSBcIlN1cGVyXCIpIHtcbiAgICAgICAgdGhpcy5yYWlzZShzdGFydFBvcywgRXJyb3JzLlN1cGVyUHJpdmF0ZUZpZWxkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xhc3NTY29wZS51c2VQcml2YXRlTmFtZShwcm9wZXJ0eS5pZC5uYW1lLCBwcm9wZXJ0eS5zdGFydCk7XG4gICAgfVxuICAgIG5vZGUucHJvcGVydHkgPSBwcm9wZXJ0eTtcblxuICAgIGlmIChjb21wdXRlZCkge1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2tldFIpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5vcHRpb25hbENoYWluTWVtYmVyKSB7XG4gICAgICBub2RlLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWVtYmVyRXhwcmVzc2lvblwiKTtcbiAgICB9XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1iaW5kLW9wZXJhdG9yI3N5bnRheFxuICBwYXJzZUJpbmQoXG4gICAgYmFzZTogTi5FeHByZXNzaW9uLFxuICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgc3RhcnRMb2M6IFBvc2l0aW9uLFxuICAgIG5vQ2FsbHM6ID9ib29sZWFuLFxuICAgIHN0YXRlOiBOLlBhcnNlU3Vic2NyaXB0U3RhdGUsXG4gICk6IE4uRXhwcmVzc2lvbiB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLm9iamVjdCA9IGJhc2U7XG4gICAgbm9kZS5jYWxsZWUgPSB0aGlzLnBhcnNlTm9DYWxsRXhwcigpO1xuICAgIHN0YXRlLnN0b3AgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLnBhcnNlU3Vic2NyaXB0cyhcbiAgICAgIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkJpbmRFeHByZXNzaW9uXCIpLFxuICAgICAgc3RhcnRQb3MsXG4gICAgICBzdGFydExvYyxcbiAgICAgIG5vQ2FsbHMsXG4gICAgKTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUNvdmVyQ2FsbEV4cHJlc3Npb25BbmRBc3luY0Fycm93SGVhZFxuICAvLyBDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWRcbiAgLy8gQ2FsbEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIEFyZ3VtZW50c1s/WWllbGQsID9Bd2FpdF1cbiAgLy8gT3B0aW9uYWxDaGFpbls/WWllbGQsID9Bd2FpdF0gQXJndW1lbnRzWz9ZaWVsZCwgP0F3YWl0XVxuICBwYXJzZUNvdmVyQ2FsbEFuZEFzeW5jQXJyb3dIZWFkKFxuICAgIGJhc2U6IE4uRXhwcmVzc2lvbixcbiAgICBzdGFydFBvczogbnVtYmVyLFxuICAgIHN0YXJ0TG9jOiBQb3NpdGlvbixcbiAgICBzdGF0ZTogTi5QYXJzZVN1YnNjcmlwdFN0YXRlLFxuICAgIG9wdGlvbmFsOiBib29sZWFuLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgY29uc3Qgb2xkWWllbGRQb3MgPSB0aGlzLnN0YXRlLnlpZWxkUG9zO1xuICAgIGNvbnN0IG9sZEF3YWl0UG9zID0gdGhpcy5zdGF0ZS5hd2FpdFBvcztcbiAgICB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUueWllbGRQb3MgPSAtMTtcbiAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gLTE7XG5cbiAgICB0aGlzLm5leHQoKTsgLy8gZWF0IGAoYFxuXG4gICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS5jYWxsZWUgPSBiYXNlO1xuXG4gICAgaWYgKHN0YXRlLm9wdGlvbmFsQ2hhaW5NZW1iZXIpIHtcbiAgICAgIG5vZGUub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICBub2RlLmFyZ3VtZW50cyA9IHRoaXMucGFyc2VDYWxsRXhwcmVzc2lvbkFyZ3VtZW50cyh0dC5wYXJlblIsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5hcmd1bWVudHMgPSB0aGlzLnBhcnNlQ2FsbEV4cHJlc3Npb25Bcmd1bWVudHMoXG4gICAgICAgIHR0LnBhcmVuUixcbiAgICAgICAgc3RhdGUubWF5YmVBc3luY0Fycm93LFxuICAgICAgICBiYXNlLnR5cGUgPT09IFwiSW1wb3J0XCIsXG4gICAgICAgIGJhc2UudHlwZSAhPT0gXCJTdXBlclwiLFxuICAgICAgICBub2RlLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5maW5pc2hDYWxsRXhwcmVzc2lvbihub2RlLCBzdGF0ZS5vcHRpb25hbENoYWluTWVtYmVyKTtcblxuICAgIGlmIChzdGF0ZS5tYXliZUFzeW5jQXJyb3cgJiYgdGhpcy5zaG91bGRQYXJzZUFzeW5jQXJyb3coKSAmJiAhb3B0aW9uYWwpIHtcbiAgICAgIHN0YXRlLnN0b3AgPSB0cnVlO1xuXG4gICAgICBub2RlID0gdGhpcy5wYXJzZUFzeW5jQXJyb3dGcm9tQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgIHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSxcbiAgICAgICAgbm9kZSxcbiAgICAgICk7XG4gICAgICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICAgICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRvUmVmZXJlbmNlZExpc3REZWVwKG5vZGUuYXJndW1lbnRzKTtcblxuICAgICAgLy8gV2Uga2VlcCB0aGUgb2xkIHZhbHVlIGlmIGl0IGlzbid0IG51bGwsIGZvciBjYXNlcyBsaWtlXG4gICAgICAvLyAgICh4ID0gYXN5bmMoeWllbGQpKSA9PiB7fVxuICAgICAgLy9cbiAgICAgIC8vIEhpIGRldmVsb3BlciBvZiB0aGUgZnV0dXJlIDopIElmIHlvdSBhcmUgaW1wbGVtZW50aW5nIGdlbmVyYXRvclxuICAgICAgLy8gYXJyb3cgZnVuY3Rpb25zLCBwbGVhc2UgcmVhZCB0aGUgbm90ZSBiZWxvdyBhYm91dCBcImF3YWl0XCIgYW5kXG4gICAgICAvLyB2ZXJpZnkgaWYgdGhlIHNhbWUgbG9naWMgaXMgbmVlZGVkIGZvciB5aWVsZC5cbiAgICAgIGlmIChvbGRZaWVsZFBvcyAhPT0gLTEpIHRoaXMuc3RhdGUueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcblxuICAgICAgLy8gQXdhaXQgaXMgdHJpY2tpZXIgdGhhbiB5aWVsZC4gV2hlbiBwYXJzaW5nIGEgcG9zc2libGUgYXJyb3cgZnVuY3Rpb25cbiAgICAgIC8vIChlLmcuIHNvbWV0aGluZyBzdGFydGluZyB3aXRoIGBhc3luYyhgKSB3ZSBkb24ndCBrbm93IGlmIGl0cyBwb3NzaWJsZVxuICAgICAgLy8gcGFyYW1ldGVycyB3aWxsIGFjdHVhbGx5IGJlIGluc2lkZSBhbiBhc3luYyBhcnJvdyBmdW5jdGlvbiBvciBpZiBpdCBpc1xuICAgICAgLy8gYSBub3JtYWwgY2FsbCBleHByZXNzaW9uLlxuICAgICAgLy8gSWYgaXQgZW5kZWQgdXAgYmVpbmcgYSBjYWxsIGV4cHJlc3Npb24sIGlmIHdlIGFyZSBpbiBhIGNvbnRleHQgd2hlcmVcbiAgICAgIC8vIGF3YWl0IGV4cHJlc3Npb24gYXJlIGRpc2FsbG93ZWQgKGFuZCB0aHVzIFwiYXdhaXRcIiBpcyBhbiBpZGVudGlmaWVyKVxuICAgICAgLy8gd2UgbXVzdCBiZSBjYXJlZnVsIG5vdCB0byBsZWFrIHRoaXMuc3RhdGUuYXdhaXRQb3MgdG8gYW4gZXZlbiBvdXRlclxuICAgICAgLy8gY29udGV4dCwgd2hlcmUgXCJhd2FpdFwiIGNvdWxkIG5vdCBiZSBhbiBpZGVudGlmaWVyLlxuICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoaXMgY29kZSBpcyB2YWxpZCBiZWNhdXNlIFwiYXdhaXRcIiBpc24ndCBkaXJlY3RseSBpbnNpZGVcbiAgICAgIC8vIGFuIGFzeW5jIGZ1bmN0aW9uOlxuICAgICAgLy9cbiAgICAgIC8vICAgICBhc3luYyBmdW5jdGlvbiBhKCkge1xuICAgICAgLy8gICAgICAgZnVuY3Rpb24gYihwYXJhbSA9IGFzeW5jIChhd2FpdCkpIHtcbiAgICAgIC8vICAgICAgIH1cbiAgICAgIC8vICAgICB9XG4gICAgICAvL1xuICAgICAgaWYgKFxuICAgICAgICAoIXRoaXMuaXNBd2FpdEFsbG93ZWQoKSAmJiAhb2xkTWF5YmVJbkFycm93UGFyYW1ldGVycykgfHxcbiAgICAgICAgb2xkQXdhaXRQb3MgIT09IC0xXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycyA9IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIC8vIE1lbWJlckV4cHJlc3Npb24gWz9ZaWVsZCwgP0F3YWl0XSBUZW1wbGF0ZUxpdGVyYWxbP1lpZWxkLCA/QXdhaXQsICtUYWdnZWRdXG4gIC8vIENhbGxFeHByZXNzaW9uIFs/WWllbGQsID9Bd2FpdF0gVGVtcGxhdGVMaXRlcmFsWz9ZaWVsZCwgP0F3YWl0LCArVGFnZ2VkXVxuICBwYXJzZVRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihcbiAgICBiYXNlOiBOLkV4cHJlc3Npb24sXG4gICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICAgc3RhdGU6IE4uUGFyc2VTdWJzY3JpcHRTdGF0ZSxcbiAgKTogTi5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24ge1xuICAgIGNvbnN0IG5vZGU6IE4uVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uID0gdGhpcy5zdGFydE5vZGVBdChcbiAgICAgIHN0YXJ0UG9zLFxuICAgICAgc3RhcnRMb2MsXG4gICAgKTtcbiAgICBub2RlLnRhZyA9IGJhc2U7XG4gICAgbm9kZS5xdWFzaSA9IHRoaXMucGFyc2VUZW1wbGF0ZSh0cnVlKTtcbiAgICBpZiAoc3RhdGUub3B0aW9uYWxDaGFpbk1lbWJlcikge1xuICAgICAgdGhpcy5yYWlzZShzdGFydFBvcywgRXJyb3JzLk9wdGlvbmFsQ2hhaW5pbmdOb1RlbXBsYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIGF0UG9zc2libGVBc3luY0Fycm93KGJhc2U6IE4uRXhwcmVzc2lvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBiYXNlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG4gICAgICBiYXNlLm5hbWUgPT09IFwiYXN5bmNcIiAmJlxuICAgICAgdGhpcy5zdGF0ZS5sYXN0VG9rRW5kID09PSBiYXNlLmVuZCAmJlxuICAgICAgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiZcbiAgICAgIC8vIGNoZWNrIHRoZXJlIGFyZSBubyBlc2NhcGUgc2VxdWVuY2VzLCBzdWNoIGFzIFxcdXs2MX1zeW5jXG4gICAgICBiYXNlLmVuZCAtIGJhc2Uuc3RhcnQgPT09IDUgJiZcbiAgICAgIGJhc2Uuc3RhcnQgPT09IHRoaXMuc3RhdGUucG90ZW50aWFsQXJyb3dBdFxuICAgICk7XG4gIH1cblxuICBmaW5pc2hDYWxsRXhwcmVzc2lvbjxUOiBOLkNhbGxFeHByZXNzaW9uIHwgTi5PcHRpb25hbENhbGxFeHByZXNzaW9uPihcbiAgICBub2RlOiBULFxuICAgIG9wdGlvbmFsOiBib29sZWFuLFxuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIGlmIChub2RlLmNhbGxlZS50eXBlID09PSBcIkltcG9ydFwiKSB7XG4gICAgICBpZiAobm9kZS5hcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwibW9kdWxlQXR0cmlidXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgbm9kZS5hcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgIG5vZGUuc3RhcnQsXG4gICAgICAgICAgRXJyb3JzLkltcG9ydENhbGxBcml0eSxcbiAgICAgICAgICB0aGlzLmhhc1BsdWdpbihcIm1vZHVsZUF0dHJpYnV0ZXNcIilcbiAgICAgICAgICAgID8gXCJvbmUgb3IgdHdvIGFyZ3VtZW50c1wiXG4gICAgICAgICAgICA6IFwib25lIGFyZ3VtZW50XCIsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBub2RlLmFyZ3VtZW50cykge1xuICAgICAgICAgIGlmIChhcmcudHlwZSA9PT0gXCJTcHJlYWRFbGVtZW50XCIpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoYXJnLnN0YXJ0LCBFcnJvcnMuSW1wb3J0Q2FsbFNwcmVhZEFyZ3VtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShcbiAgICAgIG5vZGUsXG4gICAgICBvcHRpb25hbCA/IFwiT3B0aW9uYWxDYWxsRXhwcmVzc2lvblwiIDogXCJDYWxsRXhwcmVzc2lvblwiLFxuICAgICk7XG4gIH1cblxuICBwYXJzZUNhbGxFeHByZXNzaW9uQXJndW1lbnRzKFxuICAgIGNsb3NlOiBUb2tlblR5cGUsXG4gICAgcG9zc2libGVBc3luY0Fycm93OiBib29sZWFuLFxuICAgIGR5bmFtaWNJbXBvcnQ/OiBib29sZWFuLFxuICAgIGFsbG93UGxhY2Vob2xkZXI/OiBib29sZWFuLFxuICAgIG5vZGVGb3JFeHRyYT86ID9OLk5vZGUsXG4gICk6ICRSZWFkT25seUFycmF5PD9OLkV4cHJlc3Npb24+IHtcbiAgICBjb25zdCBlbHRzID0gW107XG4gICAgbGV0IGlubmVyUGFyZW5TdGFydDtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIGNvbnN0IG9sZEluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5ID0gdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keTtcbiAgICB0aGlzLnN0YXRlLmluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5ID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoIXRoaXMuZWF0KGNsb3NlKSkge1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5jb21tYSk7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKGNsb3NlKSkge1xuICAgICAgICAgIGlmIChkeW5hbWljSW1wb3J0ICYmICF0aGlzLmhhc1BsdWdpbihcIm1vZHVsZUF0dHJpYnV0ZXNcIikpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUubGFzdFRva1N0YXJ0LFxuICAgICAgICAgICAgICBFcnJvcnMuSW1wb3J0Q2FsbEFyZ3VtZW50VHJhaWxpbmdDb21tYSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlRm9yRXh0cmEpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXh0cmEoXG4gICAgICAgICAgICAgIG5vZGVGb3JFeHRyYSxcbiAgICAgICAgICAgICAgXCJ0cmFpbGluZ0NvbW1hXCIsXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUubGFzdFRva1N0YXJ0LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBpZiB0aGlzIGlzIGFuIGFzeW5jIGFycm93IGZ1bmN0aW9ucyxcbiAgICAgIC8vIHRoYXQgd2UgZG9uJ3QgYWxsb3cgaW5uZXIgcGFyZW5zIGluc2lkZSB0aGUgcGFyYW1zXG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wYXJlbkwpICYmICFpbm5lclBhcmVuU3RhcnQpIHtcbiAgICAgICAgaW5uZXJQYXJlblN0YXJ0ID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgIH1cblxuICAgICAgZWx0cy5wdXNoKFxuICAgICAgICB0aGlzLnBhcnNlRXhwckxpc3RJdGVtKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHBvc3NpYmxlQXN5bmNBcnJvdyA/IG5ldyBFeHByZXNzaW9uRXJyb3JzKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgcG9zc2libGVBc3luY0Fycm93ID8geyBzdGFydDogMCB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIGFsbG93UGxhY2Vob2xkZXIsXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHdlIGZvdW5kIGFuIGFzeW5jIGFycm93IGZ1bmN0aW9uIHNvIGxldCdzIG5vdCBhbGxvdyBhbnkgaW5uZXIgcGFyZW5zXG4gICAgaWYgKHBvc3NpYmxlQXN5bmNBcnJvdyAmJiBpbm5lclBhcmVuU3RhcnQgJiYgdGhpcy5zaG91bGRQYXJzZUFzeW5jQXJyb3coKSkge1xuICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IG9sZEluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuXG4gICAgcmV0dXJuIGVsdHM7XG4gIH1cblxuICBzaG91bGRQYXJzZUFzeW5jQXJyb3coKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2godHQuYXJyb3cpICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpO1xuICB9XG5cbiAgcGFyc2VBc3luY0Fycm93RnJvbUNhbGxFeHByZXNzaW9uKFxuICAgIG5vZGU6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgY2FsbDogTi5DYWxsRXhwcmVzc2lvbixcbiAgKTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiB7XG4gICAgdGhpcy5leHBlY3QodHQuYXJyb3cpO1xuICAgIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24oXG4gICAgICBub2RlLFxuICAgICAgY2FsbC5hcmd1bWVudHMsXG4gICAgICB0cnVlLFxuICAgICAgY2FsbC5leHRyYT8udHJhaWxpbmdDb21tYSxcbiAgICApO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLy8gUGFyc2UgYSBuby1jYWxsIGV4cHJlc3Npb24gKGxpa2UgYXJndW1lbnQgb2YgYG5ld2Agb3IgYDo6YCBvcGVyYXRvcnMpLlxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1NZW1iZXJFeHByZXNzaW9uXG4gIHBhcnNlTm9DYWxsRXhwcigpOiBOLkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICBjb25zdCBzdGFydExvYyA9IHRoaXMuc3RhdGUuc3RhcnRMb2M7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VTdWJzY3JpcHRzKHRoaXMucGFyc2VFeHByQXRvbSgpLCBzdGFydFBvcywgc3RhcnRMb2MsIHRydWUpO1xuICB9XG5cbiAgLy8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXG4gIC8vIGV4cHJlc3Npb24sIGFuIGV4cHJlc3Npb24gc3RhcnRlZCBieSBhIGtleXdvcmQgbGlrZSBgZnVuY3Rpb25gIG9yXG4gIC8vIGBuZXdgLCBvciBhbiBleHByZXNzaW9uIHdyYXBwZWQgaW4gcHVuY3R1YXRpb24gbGlrZSBgKClgLCBgW11gLFxuICAvLyBvciBge31gLlxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLVByaW1hcnlFeHByZXNzaW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUFzeW5jQXJyb3dGdW5jdGlvblxuICAvLyBQcmltYXJ5RXhwcmVzc2lvblxuICAvLyBTdXBlclxuICAvLyBJbXBvcnRcbiAgLy8gQXN5bmNBcnJvd0Z1bmN0aW9uXG5cbiAgcGFyc2VFeHByQXRvbShyZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMpOiBOLkV4cHJlc3Npb24ge1xuICAgIC8vIElmIGEgZGl2aXNpb24gb3BlcmF0b3IgYXBwZWFycyBpbiBhbiBleHByZXNzaW9uIHBvc2l0aW9uLCB0aGVcbiAgICAvLyB0b2tlbml6ZXIgZ290IGNvbmZ1c2VkLCBhbmQgd2UgZm9yY2UgaXQgdG8gcmVhZCBhIHJlZ2V4cCBpbnN0ZWFkLlxuICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgPT09IHR0LnNsYXNoKSB0aGlzLnJlYWRSZWdleHAoKTtcblxuICAgIGNvbnN0IGNhbkJlQXJyb3cgPSB0aGlzLnN0YXRlLnBvdGVudGlhbEFycm93QXQgPT09IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgbGV0IG5vZGU7XG5cbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUudHlwZSkge1xuICAgICAgY2FzZSB0dC5fc3VwZXI6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3VwZXIoKTtcblxuICAgICAgY2FzZSB0dC5faW1wb3J0OlxuICAgICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuZG90KSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW1wb3J0TWV0YVByb3BlcnR5KG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnBhcmVuTCkpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUubGFzdFRva1N0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWRJbXBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnRcIik7XG4gICAgICBjYXNlIHR0Ll90aGlzOlxuICAgICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUaGlzRXhwcmVzc2lvblwiKTtcblxuICAgICAgY2FzZSB0dC5uYW1lOiB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5zRXNjID0gdGhpcy5zdGF0ZS5jb250YWluc0VzYztcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuXG4gICAgICAgIGlmICghY29udGFpbnNFc2MgJiYgaWQubmFtZSA9PT0gXCJhc3luY1wiICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuX2Z1bmN0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMuc3RhdGUuY29udGV4dC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29udGV4dFtsYXN0XSAhPT0gY3QuZnVuY3Rpb25TdGF0ZW1lbnQpIHtcbiAgICAgICAgICAgICAgLy8gU2luY2UgXCJhc3luY1wiIGlzIGFuIGlkZW50aWZpZXIgYW5kIG5vcm1hbGx5IGlkZW50aWZpZXJzXG4gICAgICAgICAgICAgIC8vIGNhbid0IGJlIGZvbGxvd2VkIGJ5IGV4cHJlc3Npb24sIHRoZSB0b2tlbml6ZXIgYXNzdW1lc1xuICAgICAgICAgICAgICAvLyB0aGF0IFwiZnVuY3Rpb25cIiBzdGFydHMgYSBzdGF0ZW1lbnQuXG4gICAgICAgICAgICAgIC8vIEZpeGluZyBpdCBpbiB0aGUgdG9rZW5pemVyIHdvdWxkIG1lYW4gdHJhY2tpbmcgbm90IG9ubHkgdGhlXG4gICAgICAgICAgICAgIC8vIHByZXZpb3VzIHRva2VuIChcImFzeW5jXCIpLCBidXQgYWxzbyB0aGUgb25lIGJlZm9yZSB0byBrbm93XG4gICAgICAgICAgICAgIC8vIGl0cyBiZWZvcmVFeHByIHZhbHVlLlxuICAgICAgICAgICAgICAvLyBJdCdzIGVhc2llciBhbmQgbW9yZSBlZmZpY2llbnQgdG8gYWRqdXN0IHRoZSBjb250ZXh0IGhlcmUuXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludGVybmFsIGVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250ZXh0W2xhc3RdID0gY3QuZnVuY3Rpb25FeHByZXNzaW9uO1xuXG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMuc3RhcnROb2RlQXROb2RlKGlkKSxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXN5bmNBcnJvd1VuYXJ5RnVuY3Rpb24oaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYW5CZUFycm93ICYmIHRoaXMubWF0Y2godHQuYXJyb3cpICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24oXG4gICAgICAgICAgICB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShpZCksXG4gICAgICAgICAgICBbaWRdLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH1cblxuICAgICAgY2FzZSB0dC5fZG86IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VEbygpO1xuICAgICAgfVxuXG4gICAgICBjYXNlIHR0LnJlZ2V4cDoge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICAgIG5vZGUgPSB0aGlzLnBhcnNlTGl0ZXJhbCh2YWx1ZS52YWx1ZSwgXCJSZWdFeHBMaXRlcmFsXCIpO1xuICAgICAgICBub2RlLnBhdHRlcm4gPSB2YWx1ZS5wYXR0ZXJuO1xuICAgICAgICBub2RlLmZsYWdzID0gdmFsdWUuZmxhZ3M7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICBjYXNlIHR0Lm51bTpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMuc3RhdGUudmFsdWUsIFwiTnVtZXJpY0xpdGVyYWxcIik7XG5cbiAgICAgIGNhc2UgdHQuYmlnaW50OlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwodGhpcy5zdGF0ZS52YWx1ZSwgXCJCaWdJbnRMaXRlcmFsXCIpO1xuXG4gICAgICBjYXNlIHR0LmRlY2ltYWw6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlLCBcIkRlY2ltYWxMaXRlcmFsXCIpO1xuXG4gICAgICBjYXNlIHR0LnN0cmluZzpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMuc3RhdGUudmFsdWUsIFwiU3RyaW5nTGl0ZXJhbFwiKTtcblxuICAgICAgY2FzZSB0dC5fbnVsbDpcbiAgICAgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTnVsbExpdGVyYWxcIik7XG5cbiAgICAgIGNhc2UgdHQuX3RydWU6XG4gICAgICBjYXNlIHR0Ll9mYWxzZTpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VCb29sZWFuTGl0ZXJhbCgpO1xuXG4gICAgICBjYXNlIHR0LnBhcmVuTDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbihjYW5CZUFycm93KTtcblxuICAgICAgY2FzZSB0dC5icmFja2V0QmFyTDpcbiAgICAgIGNhc2UgdHQuYnJhY2tldEhhc2hMOiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyYXlMaWtlKFxuICAgICAgICAgIHRoaXMuc3RhdGUudHlwZSA9PT0gdHQuYnJhY2tldEJhckwgPyB0dC5icmFja2V0QmFyUiA6IHR0LmJyYWNrZXRSLFxuICAgICAgICAgIC8qIGNhbkJlUGF0dGVybiAqLyBmYWxzZSxcbiAgICAgICAgICAvKiBpc1R1cGxlICovIHRydWUsXG4gICAgICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgdHQuYnJhY2tldEw6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcnJheUxpa2UoXG4gICAgICAgICAgdHQuYnJhY2tldFIsXG4gICAgICAgICAgLyogY2FuQmVQYXR0ZXJuICovIHRydWUsXG4gICAgICAgICAgLyogaXNUdXBsZSAqLyBmYWxzZSxcbiAgICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSB0dC5icmFjZUJhckw6XG4gICAgICBjYXNlIHR0LmJyYWNlSGFzaEw6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RMaWtlKFxuICAgICAgICAgIHRoaXMuc3RhdGUudHlwZSA9PT0gdHQuYnJhY2VCYXJMID8gdHQuYnJhY2VCYXJSIDogdHQuYnJhY2VSLFxuICAgICAgICAgIC8qIGlzUGF0dGVybiAqLyBmYWxzZSxcbiAgICAgICAgICAvKiBpc1JlY29yZCAqLyB0cnVlLFxuICAgICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYXNlIHR0LmJyYWNlTDoge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdExpa2UoXG4gICAgICAgICAgdHQuYnJhY2VSLFxuICAgICAgICAgIC8qIGlzUGF0dGVybiAqLyBmYWxzZSxcbiAgICAgICAgICAvKiBpc1JlY29yZCAqLyBmYWxzZSxcbiAgICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSB0dC5fZnVuY3Rpb246XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25PckZ1bmN0aW9uU2VudCgpO1xuXG4gICAgICBjYXNlIHR0LmF0OlxuICAgICAgICB0aGlzLnBhcnNlRGVjb3JhdG9ycygpO1xuICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICBjYXNlIHR0Ll9jbGFzczpcbiAgICAgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMudGFrZURlY29yYXRvcnMobm9kZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ2xhc3Mobm9kZSwgZmFsc2UpO1xuXG4gICAgICBjYXNlIHR0Ll9uZXc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTmV3T3JOZXdUYXJnZXQoKTtcblxuICAgICAgY2FzZSB0dC5iYWNrUXVvdGU6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGVtcGxhdGUoZmFsc2UpO1xuXG4gICAgICAvLyBCaW5kRXhwcmVzc2lvbltZaWVsZF1cbiAgICAgIC8vICAgOjogTWVtYmVyRXhwcmVzc2lvbls/WWllbGRdXG4gICAgICBjYXNlIHR0LmRvdWJsZUNvbG9uOiB7XG4gICAgICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgbm9kZS5vYmplY3QgPSBudWxsO1xuICAgICAgICBjb25zdCBjYWxsZWUgPSAobm9kZS5jYWxsZWUgPSB0aGlzLnBhcnNlTm9DYWxsRXhwcigpKTtcbiAgICAgICAgaWYgKGNhbGxlZS50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJCaW5kRXhwcmVzc2lvblwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKGNhbGxlZS5zdGFydCwgRXJyb3JzLlVuc3VwcG9ydGVkQmluZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2FzZSB0dC5oYXNoOiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmluUGlwZWxpbmUpIHtcbiAgICAgICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicGlwZWxpbmVPcGVyYXRvclwiLCBcInByb3Bvc2FsXCIpICE9PSBcInNtYXJ0XCJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgRXJyb3JzLlByaW1hcnlUb3BpY1JlcXVpcmVzU21hcnRQaXBlbGluZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMucHJpbWFyeVRvcGljUmVmZXJlbmNlSXNBbGxvd2VkSW5DdXJyZW50VG9waWNDb250ZXh0KCkpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgRXJyb3JzLlByaW1hcnlUb3BpY05vdEFsbG93ZWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucmVnaXN0ZXJUb3BpY1JlZmVyZW5jZSgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJQaXBlbGluZVByaW1hcnlUb3BpY1JlZmVyZW5jZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1wcml2YXRlLWZpZWxkcy1pbi1pblxuICAgICAgICAvLyBSZWxhdGlvbmFsRXhwcmVzc2lvbiBbSW4sIFlpZWxkLCBBd2FpdF1cbiAgICAgICAgLy8gICBbK0luXSBQcml2YXRlSWRlbnRpZmllciBpbiBTaGlmdEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4gICAgICAgIGNvbnN0IG5leHRDaCA9IHRoaXMuaW5wdXQuY29kZVBvaW50QXQodGhpcy5zdGF0ZS5lbmQpO1xuICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQobmV4dENoKSB8fCBuZXh0Q2ggPT09IGNoYXJDb2Rlcy5iYWNrc2xhc2gpIHtcbiAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmUgSXQnbGwgZWl0aGVyIHBhcnNlIGEgUHJpdmF0ZU5hbWUgb3IgdGhyb3cuXG4gICAgICAgICAgbm9kZSA9ICh0aGlzLnBhcnNlTWF5YmVQcml2YXRlTmFtZSh0cnVlKTogTi5Qcml2YXRlTmFtZSk7XG4gICAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuX2luKSkge1xuICAgICAgICAgICAgdGhpcy5leHBlY3RQbHVnaW4oXCJwcml2YXRlSW5cIik7XG4gICAgICAgICAgICB0aGlzLmNsYXNzU2NvcGUudXNlUHJpdmF0ZU5hbWUobm9kZS5pZC5uYW1lLCBub2RlLnN0YXJ0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaGFzUGx1Z2luKFwicHJpdmF0ZUluXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnN0YXJ0LFxuICAgICAgICAgICAgICBFcnJvcnMuUHJpdmF0ZUluRXhwZWN0ZWRJbixcbiAgICAgICAgICAgICAgbm9kZS5pZC5uYW1lLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKHN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgY2FzZSB0dC5yZWxhdGlvbmFsOiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlID09PSBcIjxcIikge1xuICAgICAgICAgIGNvbnN0IGxvb2thaGVhZENoID0gdGhpcy5pbnB1dC5jb2RlUG9pbnRBdCh0aGlzLm5leHRUb2tlblN0YXJ0KCkpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzSWRlbnRpZmllclN0YXJ0KGxvb2thaGVhZENoKSB8fCAvLyBFbGVtZW50L1R5cGUgUGFyYW1ldGVyIDxmb28+XG4gICAgICAgICAgICBsb29rYWhlYWRDaCA9PT0gY2hhckNvZGVzLmdyZWF0ZXJUaGFuIC8vIEZyYWdtZW50IDw+XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGVjdE9uZVBsdWdpbihbXCJqc3hcIiwgXCJmbG93XCIsIFwidHlwZXNjcmlwdFwiXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBBc3luY0Fycm93QmluZGluZ0lkZW50aWZpZXJbP1lpZWxkXSBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gPT4gQXN5bmNDb25jaXNlQm9keVs/SW5dXG4gIHBhcnNlQXN5bmNBcnJvd1VuYXJ5RnVuY3Rpb24oaWQ6IE4uRXhwcmVzc2lvbik6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShpZCk7XG4gICAgY29uc3Qgb2xkTWF5YmVJbkFycm93UGFyYW1ldGVycyA9IHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycztcbiAgICBjb25zdCBvbGRNYXliZUluQXN5bmNBcnJvd0hlYWQgPSB0aGlzLnN0YXRlLm1heWJlSW5Bc3luY0Fycm93SGVhZDtcbiAgICBjb25zdCBvbGRZaWVsZFBvcyA9IHRoaXMuc3RhdGUueWllbGRQb3M7XG4gICAgY29uc3Qgb2xkQXdhaXRQb3MgPSB0aGlzLnN0YXRlLmF3YWl0UG9zO1xuICAgIHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycyA9IHRydWU7XG4gICAgdGhpcy5zdGF0ZS5tYXliZUluQXN5bmNBcnJvd0hlYWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUueWllbGRQb3MgPSAtMTtcbiAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gLTE7XG4gICAgY29uc3QgcGFyYW1zID0gW3RoaXMucGFyc2VJZGVudGlmaWVyKCldO1xuICAgIGlmICh0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpKSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuTGluZVRlcm1pbmF0b3JCZWZvcmVBcnJvdyk7XG4gICAgfVxuICAgIHRoaXMuZXhwZWN0KHR0LmFycm93KTtcbiAgICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICAgIHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycyA9IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgdGhpcy5zdGF0ZS5tYXliZUluQXN5bmNBcnJvd0hlYWQgPSBvbGRNYXliZUluQXN5bmNBcnJvd0hlYWQ7XG4gICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgICAvLyBsZXQgZm9vID0gYXN5bmMgYmFyID0+IHt9O1xuICAgIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24obm9kZSwgcGFyYW1zLCB0cnVlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWRvLWV4cHJlc3Npb25zXG4gIHBhcnNlRG8oKTogTi5Eb0V4cHJlc3Npb24ge1xuICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwiZG9FeHByZXNzaW9uc1wiKTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTsgLy8gZWF0IGBkb2BcbiAgICBjb25zdCBvbGRMYWJlbHMgPSB0aGlzLnN0YXRlLmxhYmVscztcbiAgICB0aGlzLnN0YXRlLmxhYmVscyA9IFtdO1xuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VCbG9jaygpO1xuICAgIHRoaXMuc3RhdGUubGFiZWxzID0gb2xkTGFiZWxzO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEb0V4cHJlc3Npb25cIik7XG4gIH1cblxuICAvLyBQYXJzZSB0aGUgYHN1cGVyYCBrZXl3b3JkXG4gIHBhcnNlU3VwZXIoKTogTi5TdXBlciB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7IC8vIGVhdCBgc3VwZXJgXG4gICAgaWYgKFxuICAgICAgdGhpcy5tYXRjaCh0dC5wYXJlbkwpICYmXG4gICAgICAhdGhpcy5zY29wZS5hbGxvd0RpcmVjdFN1cGVyICYmXG4gICAgICAhdGhpcy5vcHRpb25zLmFsbG93U3VwZXJPdXRzaWRlTWV0aG9kXG4gICAgKSB7XG4gICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIEVycm9ycy5TdXBlck5vdEFsbG93ZWQpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAhdGhpcy5zY29wZS5hbGxvd1N1cGVyICYmXG4gICAgICAhdGhpcy5vcHRpb25zLmFsbG93U3VwZXJPdXRzaWRlTWV0aG9kXG4gICAgKSB7XG4gICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIEVycm9ycy5VbmV4cGVjdGVkU3VwZXIpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICF0aGlzLm1hdGNoKHR0LnBhcmVuTCkgJiZcbiAgICAgICF0aGlzLm1hdGNoKHR0LmJyYWNrZXRMKSAmJlxuICAgICAgIXRoaXMubWF0Y2godHQuZG90KVxuICAgICkge1xuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWRTdXBlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlN1cGVyXCIpO1xuICB9XG5cbiAgcGFyc2VCb29sZWFuTGl0ZXJhbCgpOiBOLkJvb2xlYW5MaXRlcmFsIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBub2RlLnZhbHVlID0gdGhpcy5tYXRjaCh0dC5fdHJ1ZSk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkJvb2xlYW5MaXRlcmFsXCIpO1xuICB9XG5cbiAgcGFyc2VNYXliZVByaXZhdGVOYW1lKFxuICAgIGlzUHJpdmF0ZU5hbWVBbGxvd2VkOiBib29sZWFuLFxuICApOiBOLlByaXZhdGVOYW1lIHwgTi5JZGVudGlmaWVyIHtcbiAgICBjb25zdCBpc1ByaXZhdGUgPSB0aGlzLm1hdGNoKHR0Lmhhc2gpO1xuXG4gICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgdGhpcy5leHBlY3RPbmVQbHVnaW4oW1wiY2xhc3NQcml2YXRlUHJvcGVydGllc1wiLCBcImNsYXNzUHJpdmF0ZU1ldGhvZHNcIl0pO1xuICAgICAgaWYgKCFpc1ByaXZhdGVOYW1lQWxsb3dlZCkge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuVW5leHBlY3RlZFByaXZhdGVGaWVsZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdGhpcy5hc3NlcnROb1NwYWNlKFwiVW5leHBlY3RlZCBzcGFjZSBiZXR3ZWVuICMgYW5kIGlkZW50aWZpZXJcIik7XG4gICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIodHJ1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUHJpdmF0ZU5hbWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUZ1bmN0aW9uT3JGdW5jdGlvblNlbnQoKTogTi5GdW5jdGlvbkV4cHJlc3Npb24gfCBOLk1ldGFQcm9wZXJ0eSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAvLyBXZSBkbyBub3QgZG8gcGFyc2VJZGVudGlmaWVyIGhlcmUgYmVjYXVzZSB3aGVuIHBhcnNlRnVuY3Rpb25PckZ1bmN0aW9uU2VudFxuICAgIC8vIGlzIGNhbGxlZCB3ZSBhbHJlYWR5IGtub3cgdGhhdCB0aGUgY3VycmVudCB0b2tlbiBpcyBhIFwibmFtZVwiIHdpdGggdGhlIHZhbHVlIFwiZnVuY3Rpb25cIlxuICAgIC8vIFRoaXMgd2lsbCBpbXByb3ZlIHBlcmYgYSB0aW55IGxpdHRsZSBiaXQgYXMgd2UgZG8gbm90IGRvIHZhbGlkYXRpb24gYnV0IG1vcmUgaW1wb3J0YW50bHlcbiAgICAvLyBoZXJlIGlzIHRoYXQgcGFyc2VJZGVudGlmaWVyIHdpbGwgcmVtb3ZlIGFuIGl0ZW0gZnJvbSB0aGUgZXhwcmVzc2lvbiBzdGFja1xuICAgIC8vIGlmIFwiZnVuY3Rpb25cIiBvciBcImNsYXNzXCIgaXMgcGFyc2VkIGFzIGlkZW50aWZpZXIgKGluIG9iamVjdHMgZS5nLiksIHdoaWNoIHNob3VsZCBub3QgaGFwcGVuIGhlcmUuXG4gICAgdGhpcy5uZXh0KCk7IC8vIGVhdCBgZnVuY3Rpb25gXG5cbiAgICBpZiAodGhpcy5wcm9kUGFyYW0uaGFzWWllbGQgJiYgdGhpcy5tYXRjaCh0dC5kb3QpKSB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5jcmVhdGVJZGVudGlmaWVyKFxuICAgICAgICB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShub2RlKSxcbiAgICAgICAgXCJmdW5jdGlvblwiLFxuICAgICAgKTtcbiAgICAgIHRoaXMubmV4dCgpOyAvLyBlYXQgYC5gXG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU1ldGFQcm9wZXJ0eShub2RlLCBtZXRhLCBcInNlbnRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24obm9kZSk7XG4gIH1cblxuICBwYXJzZU1ldGFQcm9wZXJ0eShcbiAgICBub2RlOiBOLk1ldGFQcm9wZXJ0eSxcbiAgICBtZXRhOiBOLklkZW50aWZpZXIsXG4gICAgcHJvcGVydHlOYW1lOiBzdHJpbmcsXG4gICk6IE4uTWV0YVByb3BlcnR5IHtcbiAgICBub2RlLm1ldGEgPSBtZXRhO1xuXG4gICAgaWYgKG1ldGEubmFtZSA9PT0gXCJmdW5jdGlvblwiICYmIHByb3BlcnR5TmFtZSA9PT0gXCJzZW50XCIpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWZ1bmN0aW9uLnNlbnQjc3ludGF4LTFcbiAgICAgIGlmICh0aGlzLmlzQ29udGV4dHVhbChwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwiZnVuY3Rpb25TZW50XCIpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5oYXNQbHVnaW4oXCJmdW5jdGlvblNlbnRcIikpIHtcbiAgICAgICAgLy8gVGhlIGNvZGUgd2Fzbid0IGBmdW5jdGlvbi5zZW50YCBidXQganVzdCBgZnVuY3Rpb24uYCwgc28gYSBzaW1wbGUgZXJyb3IgaXMgbGVzcyBjb25mdXNpbmcuXG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbnRhaW5zRXNjID0gdGhpcy5zdGF0ZS5jb250YWluc0VzYztcblxuICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcblxuICAgIGlmIChub2RlLnByb3BlcnR5Lm5hbWUgIT09IHByb3BlcnR5TmFtZSB8fCBjb250YWluc0VzYykge1xuICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgbm9kZS5wcm9wZXJ0eS5zdGFydCxcbiAgICAgICAgRXJyb3JzLlVuc3VwcG9ydGVkTWV0YVByb3BlcnR5LFxuICAgICAgICBtZXRhLm5hbWUsXG4gICAgICAgIHByb3BlcnR5TmFtZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk1ldGFQcm9wZXJ0eVwiKTtcbiAgfVxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUltcG9ydE1ldGFcbiAgcGFyc2VJbXBvcnRNZXRhUHJvcGVydHkobm9kZTogTi5NZXRhUHJvcGVydHkpOiBOLk1ldGFQcm9wZXJ0eSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNyZWF0ZUlkZW50aWZpZXIodGhpcy5zdGFydE5vZGVBdE5vZGUobm9kZSksIFwiaW1wb3J0XCIpO1xuICAgIHRoaXMubmV4dCgpOyAvLyBlYXQgYC5gXG5cbiAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJtZXRhXCIpKSB7XG4gICAgICBpZiAoIXRoaXMuaW5Nb2R1bGUpIHtcbiAgICAgICAgdGhpcy5yYWlzZVdpdGhEYXRhKFxuICAgICAgICAgIGlkLnN0YXJ0LFxuICAgICAgICAgIHsgY29kZTogXCJCQUJFTF9QQVJTRVJfU09VUkNFVFlQRV9NT0RVTEVfUkVRVUlSRURcIiB9LFxuICAgICAgICAgIEVycm9ycy5JbXBvcnRNZXRhT3V0c2lkZU1vZHVsZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2F3VW5hbWJpZ3VvdXNFU00gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlTWV0YVByb3BlcnR5KG5vZGUsIGlkLCBcIm1ldGFcIik7XG4gIH1cblxuICBwYXJzZUxpdGVyYWw8VDogTi5MaXRlcmFsPihcbiAgICB2YWx1ZTogYW55LFxuICAgIHR5cGU6IC8qVFtcImtpbmRcIl0qLyBzdHJpbmcsXG4gICAgc3RhcnRQb3M/OiBudW1iZXIsXG4gICAgc3RhcnRMb2M/OiBQb3NpdGlvbixcbiAgKTogVCB7XG4gICAgc3RhcnRQb3MgPSBzdGFydFBvcyB8fCB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIHN0YXJ0TG9jID0gc3RhcnRMb2MgfHwgdGhpcy5zdGF0ZS5zdGFydExvYztcblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgdGhpcy5hZGRFeHRyYShub2RlLCBcInJhd1ZhbHVlXCIsIHZhbHVlKTtcbiAgICB0aGlzLmFkZEV4dHJhKG5vZGUsIFwicmF3XCIsIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnRQb3MsIHRoaXMuc3RhdGUuZW5kKSk7XG4gICAgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdHlwZSk7XG4gIH1cblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1Db3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0XG4gIHBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24oY2FuQmVBcnJvdzogYm9vbGVhbik6IE4uRXhwcmVzc2lvbiB7XG4gICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcblxuICAgIGxldCB2YWw7XG4gICAgdGhpcy5uZXh0KCk7IC8vIGVhdCBgKGBcblxuICAgIGNvbnN0IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgY29uc3Qgb2xkWWllbGRQb3MgPSB0aGlzLnN0YXRlLnlpZWxkUG9zO1xuICAgIGNvbnN0IG9sZEF3YWl0UG9zID0gdGhpcy5zdGF0ZS5hd2FpdFBvcztcbiAgICBjb25zdCBvbGRJbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHk7XG4gICAgdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXRlLnlpZWxkUG9zID0gLTE7XG4gICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IC0xO1xuICAgIHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSBmYWxzZTtcblxuICAgIGNvbnN0IGlubmVyU3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIGNvbnN0IGlubmVyU3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgIGNvbnN0IGV4cHJMaXN0ID0gW107XG4gICAgY29uc3QgcmVmRXhwcmVzc2lvbkVycm9ycyA9IG5ldyBFeHByZXNzaW9uRXJyb3JzKCk7XG4gICAgY29uc3QgcmVmTmVlZHNBcnJvd1BvcyA9IHsgc3RhcnQ6IDAgfTtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIGxldCBzcHJlYWRTdGFydDtcbiAgICBsZXQgb3B0aW9uYWxDb21tYVN0YXJ0O1xuXG4gICAgd2hpbGUgKCF0aGlzLm1hdGNoKHR0LnBhcmVuUikpIHtcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEsIHJlZk5lZWRzQXJyb3dQb3Muc3RhcnQgfHwgbnVsbCk7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKHR0LnBhcmVuUikpIHtcbiAgICAgICAgICBvcHRpb25hbENvbW1hU3RhcnQgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hdGNoKHR0LmVsbGlwc2lzKSkge1xuICAgICAgICBjb25zdCBzcHJlYWROb2RlU3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICBjb25zdCBzcHJlYWROb2RlU3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgICBzcHJlYWRTdGFydCA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICAgIGV4cHJMaXN0LnB1c2goXG4gICAgICAgICAgdGhpcy5wYXJzZVBhcmVuSXRlbShcbiAgICAgICAgICAgIHRoaXMucGFyc2VSZXN0QmluZGluZygpLFxuICAgICAgICAgICAgc3ByZWFkTm9kZVN0YXJ0UG9zLFxuICAgICAgICAgICAgc3ByZWFkTm9kZVN0YXJ0TG9jLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jaGVja0NvbW1hQWZ0ZXJSZXN0KGNoYXJDb2Rlcy5yaWdodFBhcmVudGhlc2lzKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cHJMaXN0LnB1c2goXG4gICAgICAgICAgdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbihcbiAgICAgICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICAgICAgICB0aGlzLnBhcnNlUGFyZW5JdGVtLFxuICAgICAgICAgICAgcmVmTmVlZHNBcnJvd1BvcyxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGlubmVyRW5kUG9zID0gdGhpcy5zdGF0ZS5sYXN0VG9rRW5kO1xuICAgIGNvbnN0IGlubmVyRW5kTG9jID0gdGhpcy5zdGF0ZS5sYXN0VG9rRW5kTG9jO1xuICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG5cbiAgICB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSBvbGRNYXliZUluQXJyb3dQYXJhbWV0ZXJzO1xuICAgIHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSBvbGRJbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keTtcblxuICAgIGxldCBhcnJvd05vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgaWYgKFxuICAgICAgY2FuQmVBcnJvdyAmJlxuICAgICAgdGhpcy5zaG91bGRQYXJzZUFycm93KCkgJiZcbiAgICAgIChhcnJvd05vZGUgPSB0aGlzLnBhcnNlQXJyb3coYXJyb3dOb2RlKSlcbiAgICApIHtcbiAgICAgIGlmICghdGhpcy5pc0F3YWl0QWxsb3dlZCgpICYmICF0aGlzLnN0YXRlLm1heWJlSW5Bc3luY0Fycm93SGVhZCkge1xuICAgICAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICAgICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICAgICAgZm9yIChjb25zdCBwYXJhbSBvZiBleHByTGlzdCkge1xuICAgICAgICBpZiAocGFyYW0uZXh0cmEgJiYgcGFyYW0uZXh0cmEucGFyZW50aGVzaXplZCkge1xuICAgICAgICAgIHRoaXMudW5leHBlY3RlZChwYXJhbS5leHRyYS5wYXJlblN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKGFycm93Tm9kZSwgZXhwckxpc3QsIGZhbHNlKTtcbiAgICAgIHJldHVybiBhcnJvd05vZGU7XG4gICAgfVxuXG4gICAgLy8gV2Uga2VlcCB0aGUgb2xkIHZhbHVlIGlmIGl0IGlzbid0IG51bGwsIGZvciBjYXNlcyBsaWtlXG4gICAgLy8gICAoeCA9ICh5aWVsZCkpID0+IHt9XG4gICAgaWYgKG9sZFlpZWxkUG9zICE9PSAtMSkgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgIGlmIChvbGRBd2FpdFBvcyAhPT0gLTEpIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcblxuICAgIGlmICghZXhwckxpc3QubGVuZ3RoKSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQodGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uYWxDb21tYVN0YXJ0KSB0aGlzLnVuZXhwZWN0ZWQob3B0aW9uYWxDb21tYVN0YXJ0KTtcbiAgICBpZiAoc3ByZWFkU3RhcnQpIHRoaXMudW5leHBlY3RlZChzcHJlYWRTdGFydCk7XG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRXhwcmVzc2lvbkVycm9ycywgdHJ1ZSk7XG4gICAgaWYgKHJlZk5lZWRzQXJyb3dQb3Muc3RhcnQpIHRoaXMudW5leHBlY3RlZChyZWZOZWVkc0Fycm93UG9zLnN0YXJ0KTtcblxuICAgIHRoaXMudG9SZWZlcmVuY2VkTGlzdERlZXAoZXhwckxpc3QsIC8qIGlzUGFyZW50aGVzaXplZEV4cHIgKi8gdHJ1ZSk7XG4gICAgaWYgKGV4cHJMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhbCA9IHRoaXMuc3RhcnROb2RlQXQoaW5uZXJTdGFydFBvcywgaW5uZXJTdGFydExvYyk7XG4gICAgICB2YWwuZXhwcmVzc2lvbnMgPSBleHByTGlzdDtcbiAgICAgIHRoaXMuZmluaXNoTm9kZUF0KHZhbCwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgaW5uZXJFbmRQb3MsIGlubmVyRW5kTG9jKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsID0gZXhwckxpc3RbMF07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuY3JlYXRlUGFyZW50aGVzaXplZEV4cHJlc3Npb25zKSB7XG4gICAgICB0aGlzLmFkZEV4dHJhKHZhbCwgXCJwYXJlbnRoZXNpemVkXCIsIHRydWUpO1xuICAgICAgdGhpcy5hZGRFeHRyYSh2YWwsIFwicGFyZW5TdGFydFwiLCBzdGFydFBvcyk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVuRXhwcmVzc2lvbiA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBwYXJlbkV4cHJlc3Npb24uZXhwcmVzc2lvbiA9IHZhbDtcbiAgICB0aGlzLmZpbmlzaE5vZGUocGFyZW5FeHByZXNzaW9uLCBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpO1xuICAgIHJldHVybiBwYXJlbkV4cHJlc3Npb247XG4gIH1cblxuICBzaG91bGRQYXJzZUFycm93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKTtcbiAgfVxuXG4gIHBhcnNlQXJyb3cobm9kZTogTi5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbik6ID9OLkFycm93RnVuY3Rpb25FeHByZXNzaW9uIHtcbiAgICBpZiAodGhpcy5lYXQodHQuYXJyb3cpKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICBwYXJzZVBhcmVuSXRlbShcbiAgICBub2RlOiBOLkV4cHJlc3Npb24sXG4gICAgc3RhcnRQb3M6IG51bWJlciwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHN0YXJ0TG9jOiBQb3NpdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICApOiBOLkV4cHJlc3Npb24ge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcGFyc2VOZXdPck5ld1RhcmdldCgpOiBOLk5ld0V4cHJlc3Npb24gfCBOLk1ldGFQcm9wZXJ0eSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgaWYgKHRoaXMubWF0Y2godHQuZG90KSkge1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtTmV3VGFyZ2V0XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5jcmVhdGVJZGVudGlmaWVyKHRoaXMuc3RhcnROb2RlQXROb2RlKG5vZGUpLCBcIm5ld1wiKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgY29uc3QgbWV0YVByb3AgPSB0aGlzLnBhcnNlTWV0YVByb3BlcnR5KG5vZGUsIG1ldGEsIFwidGFyZ2V0XCIpO1xuXG4gICAgICBpZiAoIXRoaXMuc2NvcGUuaW5Ob25BcnJvd0Z1bmN0aW9uICYmICF0aGlzLnNjb3BlLmluQ2xhc3MpIHtcbiAgICAgICAgbGV0IGVycm9yID0gRXJyb3JzLlVuZXhwZWN0ZWROZXdUYXJnZXQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwiY2xhc3NQcm9wZXJ0aWVzXCIpKSB7XG4gICAgICAgICAgZXJyb3IgKz0gXCIgb3IgY2xhc3MgcHJvcGVydGllc1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuICAgICAgICB0aGlzLnJhaXNlKG1ldGFQcm9wLnN0YXJ0LCBlcnJvcik7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgQGJhYmVsL2RldmVsb3BtZW50LWludGVybmFsL2RyeS1lcnJvci1tZXNzYWdlcyAqL1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWV0YVByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VOZXcobm9kZSk7XG4gIH1cblxuICAvLyBOZXcncyBwcmVjZWRlbmNlIGlzIHNsaWdodGx5IHRyaWNreS4gSXQgbXVzdCBhbGxvdyBpdHMgYXJndW1lbnQgdG9cbiAgLy8gYmUgYSBgW11gIG9yIGRvdCBzdWJzY3JpcHQgZXhwcmVzc2lvbiwgYnV0IG5vdCBhIGNhbGwg4oCUIGF0IGxlYXN0LFxuICAvLyBub3Qgd2l0aG91dCB3cmFwcGluZyBpdCBpbiBwYXJlbnRoZXNlcy4gVGh1cywgaXQgdXNlcyB0aGUgbm9DYWxsc1xuICAvLyBhcmd1bWVudCB0byBwYXJzZVN1YnNjcmlwdHMgdG8gcHJldmVudCBpdCBmcm9tIGNvbnN1bWluZyB0aGVcbiAgLy8gYXJndW1lbnQgbGlzdC5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtTmV3RXhwcmVzc2lvblxuICBwYXJzZU5ldyhub2RlOiBOLkV4cHJlc3Npb24pOiBOLk5ld0V4cHJlc3Npb24ge1xuICAgIG5vZGUuY2FsbGVlID0gdGhpcy5wYXJzZU5vQ2FsbEV4cHIoKTtcblxuICAgIGlmIChub2RlLmNhbGxlZS50eXBlID09PSBcIkltcG9ydFwiKSB7XG4gICAgICB0aGlzLnJhaXNlKG5vZGUuY2FsbGVlLnN0YXJ0LCBFcnJvcnMuSW1wb3J0Q2FsbE5vdE5ld0V4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBub2RlLmNhbGxlZS50eXBlID09PSBcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiIHx8XG4gICAgICBub2RlLmNhbGxlZS50eXBlID09PSBcIk9wdGlvbmFsQ2FsbEV4cHJlc3Npb25cIlxuICAgICkge1xuICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLmxhc3RUb2tFbmQsIEVycm9ycy5PcHRpb25hbENoYWluaW5nTm9OZXcpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYXQodHQucXVlc3Rpb25Eb3QpKSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5PcHRpb25hbENoYWluaW5nTm9OZXcpO1xuICAgIH1cblxuICAgIHRoaXMucGFyc2VOZXdBcmd1bWVudHMobm9kZSk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk5ld0V4cHJlc3Npb25cIik7XG4gIH1cblxuICBwYXJzZU5ld0FyZ3VtZW50cyhub2RlOiBOLk5ld0V4cHJlc3Npb24pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lYXQodHQucGFyZW5MKSkge1xuICAgICAgY29uc3QgYXJncyA9IHRoaXMucGFyc2VFeHByTGlzdCh0dC5wYXJlblIpO1xuICAgICAgdGhpcy50b1JlZmVyZW5jZWRMaXN0KGFyZ3MpO1xuICAgICAgLy8gJEZsb3dGaXhNZSAocGFyc2VFeHByTGlzdCBzaG91bGQgYmUgYWxsIG5vbi1udWxsIGluIHRoaXMgY2FzZSlcbiAgICAgIG5vZGUuYXJndW1lbnRzID0gYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5hcmd1bWVudHMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvLyBQYXJzZSB0ZW1wbGF0ZSBleHByZXNzaW9uLlxuXG4gIHBhcnNlVGVtcGxhdGVFbGVtZW50KGlzVGFnZ2VkOiBib29sZWFuKTogTi5UZW1wbGF0ZUVsZW1lbnQge1xuICAgIGNvbnN0IGVsZW0gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlID09PSBudWxsKSB7XG4gICAgICBpZiAoIWlzVGFnZ2VkKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCArIDEsIEVycm9ycy5JbnZhbGlkRXNjYXBlU2VxdWVuY2VUZW1wbGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsZW0udmFsdWUgPSB7XG4gICAgICByYXc6IHRoaXMuaW5wdXRcbiAgICAgICAgLnNsaWNlKHRoaXMuc3RhdGUuc3RhcnQsIHRoaXMuc3RhdGUuZW5kKVxuICAgICAgICAucmVwbGFjZSgvXFxyXFxuPy9nLCBcIlxcblwiKSxcbiAgICAgIGNvb2tlZDogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICB9O1xuICAgIHRoaXMubmV4dCgpO1xuICAgIGVsZW0udGFpbCA9IHRoaXMubWF0Y2godHQuYmFja1F1b3RlKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKGVsZW0sIFwiVGVtcGxhdGVFbGVtZW50XCIpO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtVGVtcGxhdGVMaXRlcmFsXG4gIHBhcnNlVGVtcGxhdGUoaXNUYWdnZWQ6IGJvb2xlYW4pOiBOLlRlbXBsYXRlTGl0ZXJhbCB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5leHByZXNzaW9ucyA9IFtdO1xuICAgIGxldCBjdXJFbHQgPSB0aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KGlzVGFnZ2VkKTtcbiAgICBub2RlLnF1YXNpcyA9IFtjdXJFbHRdO1xuICAgIHdoaWxlICghY3VyRWx0LnRhaWwpIHtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmRvbGxhckJyYWNlTCk7XG4gICAgICBub2RlLmV4cHJlc3Npb25zLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICB0aGlzLmV4cGVjdCh0dC5icmFjZVIpO1xuICAgICAgbm9kZS5xdWFzaXMucHVzaCgoY3VyRWx0ID0gdGhpcy5wYXJzZVRlbXBsYXRlRWxlbWVudChpc1RhZ2dlZCkpKTtcbiAgICB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRlbXBsYXRlTGl0ZXJhbFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGFuIG9iamVjdCBsaXRlcmFsLCBiaW5kaW5nIHBhdHRlcm4sIG9yIHJlY29yZC5cblxuICBwYXJzZU9iamVjdExpa2U8VDogTi5PYmplY3RQYXR0ZXJuIHwgTi5PYmplY3RFeHByZXNzaW9uPihcbiAgICBjbG9zZTogVG9rZW5UeXBlLFxuICAgIGlzUGF0dGVybjogYm9vbGVhbixcbiAgICBpc1JlY29yZD86ID9ib29sZWFuLFxuICAgIHJlZkV4cHJlc3Npb25FcnJvcnM/OiA/RXhwcmVzc2lvbkVycm9ycyxcbiAgKTogVCB7XG4gICAgaWYgKGlzUmVjb3JkKSB7XG4gICAgICB0aGlzLmV4cGVjdFBsdWdpbihcInJlY29yZEFuZFR1cGxlXCIpO1xuICAgIH1cbiAgICBjb25zdCBvbGRJbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHk7XG4gICAgdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IGZhbHNlO1xuICAgIGNvbnN0IHByb3BIYXNoOiBhbnkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICBub2RlLnByb3BlcnRpZXMgPSBbXTtcbiAgICB0aGlzLm5leHQoKTtcblxuICAgIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbW1hKTtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2goY2xvc2UpKSB7XG4gICAgICAgICAgdGhpcy5hZGRFeHRyYShub2RlLCBcInRyYWlsaW5nQ29tbWFcIiwgdGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3AgPSB0aGlzLnBhcnNlUHJvcGVydHlEZWZpbml0aW9uKGlzUGF0dGVybiwgcmVmRXhwcmVzc2lvbkVycm9ycyk7XG4gICAgICBpZiAoIWlzUGF0dGVybikge1xuICAgICAgICAvLyAkRmxvd0lnbm9yZSBSZXN0RWxlbWVudCB3aWxsIG5ldmVyIGJlIHJldHVybmVkIGlmICFpc1BhdHRlcm5cbiAgICAgICAgdGhpcy5jaGVja1Byb3RvKHByb3AsIGlzUmVjb3JkLCBwcm9wSGFzaCwgcmVmRXhwcmVzc2lvbkVycm9ycyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXNSZWNvcmQgJiZcbiAgICAgICAgcHJvcC50eXBlICE9PSBcIk9iamVjdFByb3BlcnR5XCIgJiZcbiAgICAgICAgcHJvcC50eXBlICE9PSBcIlNwcmVhZEVsZW1lbnRcIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmFpc2UocHJvcC5zdGFydCwgRXJyb3JzLkludmFsaWRSZWNvcmRQcm9wZXJ0eSk7XG4gICAgICB9XG5cbiAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICBpZiAocHJvcC5zaG9ydGhhbmQpIHtcbiAgICAgICAgdGhpcy5hZGRFeHRyYShwcm9wLCBcInNob3J0aGFuZFwiLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5wcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IG9sZEluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuICAgIGxldCB0eXBlID0gXCJPYmplY3RFeHByZXNzaW9uXCI7XG4gICAgaWYgKGlzUGF0dGVybikge1xuICAgICAgdHlwZSA9IFwiT2JqZWN0UGF0dGVyblwiO1xuICAgIH0gZWxzZSBpZiAoaXNSZWNvcmQpIHtcbiAgICAgIHR5cGUgPSBcIlJlY29yZEV4cHJlc3Npb25cIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKTtcbiAgfVxuXG4gIC8vIENoZWNrIGdyYW1tYXIgcHJvZHVjdGlvbjpcbiAgLy8gICBJZGVudGlmaWVyTmFtZSAqX29wdCBQcm9wZXJ0eU5hbWVcbiAgLy8gSXQgaXMgdXNlZCBpbiBgcGFyc2VQcm9wZXJ0eURlZmluaXRpb25gIHRvIGRldGVjdCBBc3luY01ldGhvZCBhbmQgQWNjZXNzb3JzXG4gIG1heWJlQXN5bmNPckFjY2Vzc29yUHJvcChwcm9wOiBOLk9iamVjdFByb3BlcnR5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgICFwcm9wLmNvbXB1dGVkICYmXG4gICAgICBwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgKHRoaXMuaXNMaXRlcmFsUHJvcGVydHlOYW1lKCkgfHxcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5icmFja2V0TCkgfHxcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5zdGFyKSlcbiAgICApO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtUHJvcGVydHlEZWZpbml0aW9uXG4gIHBhcnNlUHJvcGVydHlEZWZpbml0aW9uKFxuICAgIGlzUGF0dGVybjogYm9vbGVhbixcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICk6IE4uT2JqZWN0TWVtYmVyIHwgTi5TcHJlYWRFbGVtZW50IHwgTi5SZXN0RWxlbWVudCB7XG4gICAgbGV0IGRlY29yYXRvcnMgPSBbXTtcbiAgICBpZiAodGhpcy5tYXRjaCh0dC5hdCkpIHtcbiAgICAgIGlmICh0aGlzLmhhc1BsdWdpbihcImRlY29yYXRvcnNcIikpIHtcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWRQcm9wZXJ0eURlY29yYXRvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIG5lZWRuJ3QgY2hlY2sgaWYgZGVjb3JhdG9ycyAoc3RhZ2UgMCkgcGx1Z2luIGlzIGVuYWJsZWQgc2luY2UgaXQncyBjaGVja2VkIGJ5XG4gICAgICAvLyB0aGUgY2FsbCB0byB0aGlzLnBhcnNlRGVjb3JhdG9yXG4gICAgICB3aGlsZSAodGhpcy5tYXRjaCh0dC5hdCkpIHtcbiAgICAgICAgZGVjb3JhdG9ycy5wdXNoKHRoaXMucGFyc2VEZWNvcmF0b3IoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcCA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbGV0IGlzR2VuZXJhdG9yID0gZmFsc2U7XG4gICAgbGV0IGlzQXN5bmMgPSBmYWxzZTtcbiAgICBsZXQgaXNBY2Nlc3NvciA9IGZhbHNlO1xuICAgIGxldCBzdGFydFBvcztcbiAgICBsZXQgc3RhcnRMb2M7XG5cbiAgICBpZiAodGhpcy5tYXRjaCh0dC5lbGxpcHNpcykpIHtcbiAgICAgIGlmIChkZWNvcmF0b3JzLmxlbmd0aCkgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICBpZiAoaXNQYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAvLyBEb24ndCB1c2UgcGFyc2VSZXN0QmluZGluZygpIGFzIHdlIG9ubHkgYWxsb3cgSWRlbnRpZmllciBoZXJlLlxuICAgICAgICBwcm9wLmFyZ3VtZW50ID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgICAgdGhpcy5jaGVja0NvbW1hQWZ0ZXJSZXN0KGNoYXJDb2Rlcy5yaWdodEN1cmx5QnJhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiUmVzdEVsZW1lbnRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlU3ByZWFkKCk7XG4gICAgfVxuXG4gICAgaWYgKGRlY29yYXRvcnMubGVuZ3RoKSB7XG4gICAgICBwcm9wLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzO1xuICAgICAgZGVjb3JhdG9ycyA9IFtdO1xuICAgIH1cblxuICAgIHByb3AubWV0aG9kID0gZmFsc2U7XG5cbiAgICBpZiAoaXNQYXR0ZXJuIHx8IHJlZkV4cHJlc3Npb25FcnJvcnMpIHtcbiAgICAgIHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgIHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICB9XG5cbiAgICBpZiAoIWlzUGF0dGVybikge1xuICAgICAgaXNHZW5lcmF0b3IgPSB0aGlzLmVhdCh0dC5zdGFyKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb250YWluc0VzYyA9IHRoaXMuc3RhdGUuY29udGFpbnNFc2M7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCAvKiBpc1ByaXZhdGVOYW1lQWxsb3dlZCAqLyBmYWxzZSk7XG5cbiAgICBpZiAoXG4gICAgICAhaXNQYXR0ZXJuICYmXG4gICAgICAhaXNHZW5lcmF0b3IgJiZcbiAgICAgICFjb250YWluc0VzYyAmJlxuICAgICAgdGhpcy5tYXliZUFzeW5jT3JBY2Nlc3NvclByb3AocHJvcClcbiAgICApIHtcbiAgICAgIGNvbnN0IGtleU5hbWUgPSBrZXkubmFtZTtcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUFzeW5jTWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1Bc3luY0dlbmVyYXRvck1ldGhvZFxuICAgICAgaWYgKGtleU5hbWUgPT09IFwiYXN5bmNcIiAmJiAhdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSkge1xuICAgICAgICBpc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgaXNHZW5lcmF0b3IgPSB0aGlzLmVhdCh0dC5zdGFyKTtcbiAgICAgICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCAvKiBpc1ByaXZhdGVOYW1lQWxsb3dlZCAqLyBmYWxzZSk7XG4gICAgICB9XG4gICAgICAvLyBnZXQgUHJvcGVydHlOYW1lWz9ZaWVsZCwgP0F3YWl0XSAoKSB7IEZ1bmN0aW9uQm9keVt+WWllbGQsIH5Bd2FpdF0gfVxuICAgICAgLy8gc2V0IFByb3BlcnR5TmFtZVs/WWllbGQsID9Bd2FpdF0gKCBQcm9wZXJ0eVNldFBhcmFtZXRlckxpc3QgKSB7IEZ1bmN0aW9uQm9keVt+WWllbGQsIH5Bd2FpdF0gfVxuICAgICAgaWYgKGtleU5hbWUgPT09IFwiZ2V0XCIgfHwga2V5TmFtZSA9PT0gXCJzZXRcIikge1xuICAgICAgICBpc0FjY2Vzc29yID0gdHJ1ZTtcbiAgICAgICAgcHJvcC5raW5kID0ga2V5TmFtZTtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2godHQuc3RhcikpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuQWNjZXNzb3JJc0dlbmVyYXRvciwga2V5TmFtZSk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCAvKiBpc1ByaXZhdGVOYW1lQWxsb3dlZCAqLyBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZU9ialByb3BWYWx1ZShcbiAgICAgIHByb3AsXG4gICAgICBzdGFydFBvcyxcbiAgICAgIHN0YXJ0TG9jLFxuICAgICAgaXNHZW5lcmF0b3IsXG4gICAgICBpc0FzeW5jLFxuICAgICAgaXNQYXR0ZXJuLFxuICAgICAgaXNBY2Nlc3NvcixcbiAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgKTtcblxuICAgIHJldHVybiBwcm9wO1xuICB9XG5cbiAgZ2V0R2V0dGVyU2V0dGVyRXhwZWN0ZWRQYXJhbUNvdW50KFxuICAgIG1ldGhvZDogTi5PYmplY3RNZXRob2QgfCBOLkNsYXNzTWV0aG9kLFxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBtZXRob2Qua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICB9XG5cbiAgLy8gZ2V0IG1ldGhvZHMgYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBhbnkgcGFyYW1ldGVyc1xuICAvLyBzZXQgbWV0aG9kcyBtdXN0IGhhdmUgZXhhY3RseSAxIHBhcmFtZXRlciB3aGljaCBpcyBub3QgYSByZXN0IHBhcmFtZXRlclxuICBjaGVja0dldHRlclNldHRlclBhcmFtcyhtZXRob2Q6IE4uT2JqZWN0TWV0aG9kIHwgTi5DbGFzc01ldGhvZCk6IHZvaWQge1xuICAgIGNvbnN0IHBhcmFtQ291bnQgPSB0aGlzLmdldEdldHRlclNldHRlckV4cGVjdGVkUGFyYW1Db3VudChtZXRob2QpO1xuICAgIGNvbnN0IHN0YXJ0ID0gbWV0aG9kLnN0YXJ0O1xuICAgIGlmIChtZXRob2QucGFyYW1zLmxlbmd0aCAhPT0gcGFyYW1Db3VudCkge1xuICAgICAgaWYgKG1ldGhvZC5raW5kID09PSBcImdldFwiKSB7XG4gICAgICAgIHRoaXMucmFpc2Uoc3RhcnQsIEVycm9ycy5CYWRHZXR0ZXJBcml0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuQmFkU2V0dGVyQXJpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG1ldGhvZC5raW5kID09PSBcInNldFwiICYmXG4gICAgICBtZXRob2QucGFyYW1zW21ldGhvZC5wYXJhbXMubGVuZ3RoIC0gMV0udHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiXG4gICAgKSB7XG4gICAgICB0aGlzLnJhaXNlKHN0YXJ0LCBFcnJvcnMuQmFkU2V0dGVyUmVzdFBhcmFtZXRlcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtTWV0aG9kRGVmaW5pdGlvblxuICBwYXJzZU9iamVjdE1ldGhvZChcbiAgICBwcm9wOiBOLk9iamVjdE1ldGhvZCxcbiAgICBpc0dlbmVyYXRvcjogYm9vbGVhbixcbiAgICBpc0FzeW5jOiBib29sZWFuLFxuICAgIGlzUGF0dGVybjogYm9vbGVhbixcbiAgICBpc0FjY2Vzc29yOiBib29sZWFuLFxuICApOiA/Ti5PYmplY3RNZXRob2Qge1xuICAgIGlmIChpc0FjY2Vzc29yKSB7XG4gICAgICAvLyBpc0FjY2Vzc29yIGltcGxpZXMgaXNBc3luYzogZmFsc2UsIGlzUGF0dGVybjogZmFsc2UsIGlzR2VuZXJhdG9yOiBmYWxzZVxuICAgICAgdGhpcy5wYXJzZU1ldGhvZChcbiAgICAgICAgcHJvcCxcbiAgICAgICAgLyogaXNHZW5lcmF0b3IgKi8gZmFsc2UsXG4gICAgICAgIC8qIGlzQXN5bmMgKi8gZmFsc2UsXG4gICAgICAgIC8qIGlzQ29uc3RydWN0b3IgKi8gZmFsc2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIk9iamVjdE1ldGhvZFwiLFxuICAgICAgKTtcbiAgICAgIHRoaXMuY2hlY2tHZXR0ZXJTZXR0ZXJQYXJhbXMocHJvcCk7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICBpZiAoaXNBc3luYyB8fCBpc0dlbmVyYXRvciB8fCB0aGlzLm1hdGNoKHR0LnBhcmVuTCkpIHtcbiAgICAgIGlmIChpc1BhdHRlcm4pIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgcHJvcC5raW5kID0gXCJtZXRob2RcIjtcbiAgICAgIHByb3AubWV0aG9kID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlTWV0aG9kKFxuICAgICAgICBwcm9wLFxuICAgICAgICBpc0dlbmVyYXRvcixcbiAgICAgICAgaXNBc3luYyxcbiAgICAgICAgLyogaXNDb25zdHJ1Y3RvciAqLyBmYWxzZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFwiT2JqZWN0TWV0aG9kXCIsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIGBpc1BhdHRlcm5gIGlzIHRydWUsIHBhcnNlIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUJpbmRpbmdQcm9wZXJ0eVxuICAvLyBlbHNlIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLVByb3BlcnR5RGVmaW5pdGlvblxuICBwYXJzZU9iamVjdFByb3BlcnR5KFxuICAgIHByb3A6IE4uT2JqZWN0UHJvcGVydHksXG4gICAgc3RhcnRQb3M6ID9udW1iZXIsXG4gICAgc3RhcnRMb2M6ID9Qb3NpdGlvbixcbiAgICBpc1BhdHRlcm46IGJvb2xlYW4sXG4gICAgcmVmRXhwcmVzc2lvbkVycm9yczogP0V4cHJlc3Npb25FcnJvcnMsXG4gICk6ID9OLk9iamVjdFByb3BlcnR5IHtcbiAgICBwcm9wLnNob3J0aGFuZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuZWF0KHR0LmNvbG9uKSkge1xuICAgICAgcHJvcC52YWx1ZSA9IGlzUGF0dGVyblxuICAgICAgICA/IHRoaXMucGFyc2VNYXliZURlZmF1bHQodGhpcy5zdGF0ZS5zdGFydCwgdGhpcy5zdGF0ZS5zdGFydExvYylcbiAgICAgICAgOiB0aGlzLnBhcnNlTWF5YmVBc3NpZ25BbGxvd0luKHJlZkV4cHJlc3Npb25FcnJvcnMpO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiT2JqZWN0UHJvcGVydHlcIik7XG4gICAgfVxuXG4gICAgaWYgKCFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XG4gICAgICAvLyBQcm9wZXJ0eURlZmluaXRpb246XG4gICAgICAvLyAgIElkZW50aWZpZXJSZWZlcmVuY2VcbiAgICAgIC8vICAgQ292ZXJlZEluaXRpYWxpemVkTmFtZVxuICAgICAgLy8gTm90ZTogYHsgZXZhbCB9ID0ge31gIHdpbGwgYmUgY2hlY2tlZCBpbiBgY2hlY2tMVmFsYCBsYXRlci5cbiAgICAgIHRoaXMuY2hlY2tSZXNlcnZlZFdvcmQocHJvcC5rZXkubmFtZSwgcHJvcC5rZXkuc3RhcnQsIHRydWUsIGZhbHNlKTtcblxuICAgICAgaWYgKGlzUGF0dGVybikge1xuICAgICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdChcbiAgICAgICAgICBzdGFydFBvcyxcbiAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgICBwcm9wLmtleS5fX2Nsb25lKCksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuZXEpICYmIHJlZkV4cHJlc3Npb25FcnJvcnMpIHtcbiAgICAgICAgaWYgKHJlZkV4cHJlc3Npb25FcnJvcnMuc2hvcnRoYW5kQXNzaWduID09PSAtMSkge1xuICAgICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdChcbiAgICAgICAgICBzdGFydFBvcyxcbiAgICAgICAgICBzdGFydExvYyxcbiAgICAgICAgICBwcm9wLmtleS5fX2Nsb25lKCksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wLnZhbHVlID0gcHJvcC5rZXkuX19jbG9uZSgpO1xuICAgICAgfVxuICAgICAgcHJvcC5zaG9ydGhhbmQgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiT2JqZWN0UHJvcGVydHlcIik7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VPYmpQcm9wVmFsdWUoXG4gICAgcHJvcDogYW55LFxuICAgIHN0YXJ0UG9zOiA/bnVtYmVyLFxuICAgIHN0YXJ0TG9jOiA/UG9zaXRpb24sXG4gICAgaXNHZW5lcmF0b3I6IGJvb2xlYW4sXG4gICAgaXNBc3luYzogYm9vbGVhbixcbiAgICBpc1BhdHRlcm46IGJvb2xlYW4sXG4gICAgaXNBY2Nlc3NvcjogYm9vbGVhbixcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG5vZGUgPVxuICAgICAgdGhpcy5wYXJzZU9iamVjdE1ldGhvZChcbiAgICAgICAgcHJvcCxcbiAgICAgICAgaXNHZW5lcmF0b3IsXG4gICAgICAgIGlzQXN5bmMsXG4gICAgICAgIGlzUGF0dGVybixcbiAgICAgICAgaXNBY2Nlc3NvcixcbiAgICAgICkgfHxcbiAgICAgIHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgcHJvcCxcbiAgICAgICAgc3RhcnRQb3MsXG4gICAgICAgIHN0YXJ0TG9jLFxuICAgICAgICBpc1BhdHRlcm4sXG4gICAgICAgIHJlZkV4cHJlc3Npb25FcnJvcnMsXG4gICAgICApO1xuXG4gICAgaWYgKCFub2RlKSB0aGlzLnVuZXhwZWN0ZWQoKTtcblxuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHBhcnNlUHJvcGVydHlOYW1lKFxuICAgIHByb3A6IE4uT2JqZWN0T3JDbGFzc01lbWJlciB8IE4uQ2xhc3NNZW1iZXIgfCBOLlRzTmFtZWRUeXBlRWxlbWVudEJhc2UsXG4gICAgaXNQcml2YXRlTmFtZUFsbG93ZWQ6IGJvb2xlYW4sXG4gICk6IE4uRXhwcmVzc2lvbiB8IE4uSWRlbnRpZmllciB7XG4gICAgaWYgKHRoaXMuZWF0KHR0LmJyYWNrZXRMKSkge1xuICAgICAgKHByb3A6ICRGbG93U3VidHlwZTxOLk9iamVjdE9yQ2xhc3NNZW1iZXI+KS5jb21wdXRlZCA9IHRydWU7XG4gICAgICBwcm9wLmtleSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbkFsbG93SW4oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNrZXRSKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb2xkSW5Qcm9wZXJ0eU5hbWUgPSB0aGlzLnN0YXRlLmluUHJvcGVydHlOYW1lO1xuICAgICAgdGhpcy5zdGF0ZS5pblByb3BlcnR5TmFtZSA9IHRydWU7XG4gICAgICAvLyBXZSBjaGVjayBpZiBpdCdzIHZhbGlkIGZvciBpdCB0byBiZSBhIHByaXZhdGUgbmFtZSB3aGVuIHdlIHB1c2ggaXQuXG4gICAgICAocHJvcDogJEZsb3dGaXhNZSkua2V5ID1cbiAgICAgICAgdGhpcy5tYXRjaCh0dC5udW0pIHx8XG4gICAgICAgIHRoaXMubWF0Y2godHQuc3RyaW5nKSB8fFxuICAgICAgICB0aGlzLm1hdGNoKHR0LmJpZ2ludCkgfHxcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5kZWNpbWFsKVxuICAgICAgICAgID8gdGhpcy5wYXJzZUV4cHJBdG9tKClcbiAgICAgICAgICA6IHRoaXMucGFyc2VNYXliZVByaXZhdGVOYW1lKGlzUHJpdmF0ZU5hbWVBbGxvd2VkKTtcblxuICAgICAgaWYgKHByb3Aua2V5LnR5cGUgIT09IFwiUHJpdmF0ZU5hbWVcIikge1xuICAgICAgICAvLyBDbGFzc1ByaXZhdGVQcm9wZXJ0eSBpcyBuZXZlciBjb21wdXRlZCwgc28gd2UgZG9uJ3QgYXNzaWduIGluIHRoYXQgY2FzZS5cbiAgICAgICAgcHJvcC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlLmluUHJvcGVydHlOYW1lID0gb2xkSW5Qcm9wZXJ0eU5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3Aua2V5O1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBlbXB0eSBmdW5jdGlvbiBub2RlLlxuXG4gIGluaXRGdW5jdGlvbihub2RlOiBOLkJvZGlsZXNzRnVuY3Rpb25Pck1ldGhvZEJhc2UsIGlzQXN5bmM6ID9ib29sZWFuKTogdm9pZCB7XG4gICAgbm9kZS5pZCA9IG51bGw7XG4gICAgbm9kZS5nZW5lcmF0b3IgPSBmYWxzZTtcbiAgICBub2RlLmFzeW5jID0gISFpc0FzeW5jO1xuICB9XG5cbiAgLy8gUGFyc2Ugb2JqZWN0IG9yIGNsYXNzIG1ldGhvZC5cblxuICBwYXJzZU1ldGhvZDxUOiBOLk1ldGhvZExpa2U+KFxuICAgIG5vZGU6IFQsXG4gICAgaXNHZW5lcmF0b3I6IGJvb2xlYW4sXG4gICAgaXNBc3luYzogYm9vbGVhbixcbiAgICBpc0NvbnN0cnVjdG9yOiBib29sZWFuLFxuICAgIGFsbG93RGlyZWN0U3VwZXI6IGJvb2xlYW4sXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGluQ2xhc3NTY29wZTogYm9vbGVhbiA9IGZhbHNlLFxuICApOiBUIHtcbiAgICBjb25zdCBvbGRZaWVsZFBvcyA9IHRoaXMuc3RhdGUueWllbGRQb3M7XG4gICAgY29uc3Qgb2xkQXdhaXRQb3MgPSB0aGlzLnN0YXRlLmF3YWl0UG9zO1xuICAgIHRoaXMuc3RhdGUueWllbGRQb3MgPSAtMTtcbiAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gLTE7XG5cbiAgICB0aGlzLmluaXRGdW5jdGlvbihub2RlLCBpc0FzeW5jKTtcbiAgICBub2RlLmdlbmVyYXRvciA9ICEhaXNHZW5lcmF0b3I7XG4gICAgY29uc3QgYWxsb3dNb2RpZmllcnMgPSBpc0NvbnN0cnVjdG9yOyAvLyBGb3IgVHlwZVNjcmlwdCBwYXJhbWV0ZXIgcHJvcGVydGllc1xuICAgIHRoaXMuc2NvcGUuZW50ZXIoXG4gICAgICBTQ09QRV9GVU5DVElPTiB8XG4gICAgICAgIFNDT1BFX1NVUEVSIHxcbiAgICAgICAgKGluQ2xhc3NTY29wZSA/IFNDT1BFX0NMQVNTIDogMCkgfFxuICAgICAgICAoYWxsb3dEaXJlY3RTdXBlciA/IFNDT1BFX0RJUkVDVF9TVVBFUiA6IDApLFxuICAgICk7XG4gICAgdGhpcy5wcm9kUGFyYW0uZW50ZXIoZnVuY3Rpb25GbGFncyhpc0FzeW5jLCBub2RlLmdlbmVyYXRvcikpO1xuICAgIHRoaXMucGFyc2VGdW5jdGlvblBhcmFtcygobm9kZTogYW55KSwgYWxsb3dNb2RpZmllcnMpO1xuICAgIHRoaXMucGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2gobm9kZSwgdHlwZSwgdHJ1ZSk7XG4gICAgdGhpcy5wcm9kUGFyYW0uZXhpdCgpO1xuICAgIHRoaXMuc2NvcGUuZXhpdCgpO1xuXG4gICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLy8gcGFyc2UgYW4gYXJyYXkgbGl0ZXJhbCBvciB0dXBsZSBsaXRlcmFsXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUFycmF5TGl0ZXJhbFxuICAvLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtcmVjb3JkLXR1cGxlLyNwcm9kLVR1cGxlTGl0ZXJhbFxuICBwYXJzZUFycmF5TGlrZShcbiAgICBjbG9zZTogVG9rZW5UeXBlLFxuICAgIGNhbkJlUGF0dGVybjogYm9vbGVhbixcbiAgICBpc1R1cGxlOiBib29sZWFuLFxuICAgIHJlZkV4cHJlc3Npb25FcnJvcnM6ID9FeHByZXNzaW9uRXJyb3JzLFxuICApOiBOLkFycmF5RXhwcmVzc2lvbiB8IE4uVHVwbGVFeHByZXNzaW9uIHtcbiAgICBpZiAoaXNUdXBsZSkge1xuICAgICAgdGhpcy5leHBlY3RQbHVnaW4oXCJyZWNvcmRBbmRUdXBsZVwiKTtcbiAgICB9XG4gICAgY29uc3Qgb2xkSW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSB0aGlzLnN0YXRlLmluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuICAgIHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSBmYWxzZTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmVsZW1lbnRzID0gdGhpcy5wYXJzZUV4cHJMaXN0KFxuICAgICAgY2xvc2UsXG4gICAgICAvKiBhbGxvd0VtcHR5ICovICFpc1R1cGxlLFxuICAgICAgcmVmRXhwcmVzc2lvbkVycm9ycyxcbiAgICAgIG5vZGUsXG4gICAgKTtcbiAgICBpZiAoY2FuQmVQYXR0ZXJuICYmICF0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnMpIHtcbiAgICAgIC8vIFRoaXMgY291bGQgYmUgYW4gYXJyYXkgcGF0dGVybjpcbiAgICAgIC8vICAgKFthOiBzdHJpbmcsIGI6IHN0cmluZ10pID0+IHt9XG4gICAgICAvLyBJbiB0aGlzIGNhc2UsIHdlIGRvbid0IGhhdmUgdG8gY2FsbCB0b1JlZmVyZW5jZWRMaXN0LiBXZSB3aWxsXG4gICAgICAvLyBjYWxsIGl0LCBpZiBuZWVkZWQsIHdoZW4gd2UgYXJlIHN1cmUgdGhhdCBpdCBpcyBhIHBhcmVudGhlc2l6ZWRcbiAgICAgIC8vIGV4cHJlc3Npb24gYnkgY2FsbGluZyB0b1JlZmVyZW5jZWRMaXN0RGVlcC5cbiAgICAgIHRoaXMudG9SZWZlcmVuY2VkTGlzdChub2RlLmVsZW1lbnRzKTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IG9sZEluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoXG4gICAgICBub2RlLFxuICAgICAgaXNUdXBsZSA/IFwiVHVwbGVFeHByZXNzaW9uXCIgOiBcIkFycmF5RXhwcmVzc2lvblwiLFxuICAgICk7XG4gIH1cblxuICAvLyBQYXJzZSBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uLlxuICAvLyBJZiB0aGUgcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQsIHRoZXkgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW5cbiAgLy8gYXNzaWduYWJsZSBsaXN0LlxuICBwYXJzZUFycm93RXhwcmVzc2lvbihcbiAgICBub2RlOiBOLkFycm93RnVuY3Rpb25FeHByZXNzaW9uLFxuICAgIHBhcmFtczogPyhOLkV4cHJlc3Npb25bXSksXG4gICAgaXNBc3luYzogYm9vbGVhbixcbiAgICB0cmFpbGluZ0NvbW1hUG9zOiA/bnVtYmVyLFxuICApOiBOLkFycm93RnVuY3Rpb25FeHByZXNzaW9uIHtcbiAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX0ZVTkNUSU9OIHwgU0NPUEVfQVJST1cpO1xuICAgIGxldCBmbGFncyA9IGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgZmFsc2UpO1xuICAgIC8vIENvbmNpc2VCb2R5IGFuZCBBc3luY0NvbmNpc2VCb2R5IGluaGVyaXQgW0luXVxuICAgIGlmICghdGhpcy5tYXRjaCh0dC5icmFja2V0TCkgJiYgdGhpcy5wcm9kUGFyYW0uaGFzSW4pIHtcbiAgICAgIGZsYWdzIHw9IFBBUkFNX0lOO1xuICAgIH1cbiAgICB0aGlzLnByb2RQYXJhbS5lbnRlcihmbGFncyk7XG4gICAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSwgaXNBc3luYyk7XG4gICAgY29uc3Qgb2xkTWF5YmVJbkFycm93UGFyYW1ldGVycyA9IHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycztcbiAgICBjb25zdCBvbGRZaWVsZFBvcyA9IHRoaXMuc3RhdGUueWllbGRQb3M7XG4gICAgY29uc3Qgb2xkQXdhaXRQb3MgPSB0aGlzLnN0YXRlLmF3YWl0UG9zO1xuXG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0QXJyb3dGdW5jdGlvblBhcmFtZXRlcnMobm9kZSwgcGFyYW1zLCB0cmFpbGluZ0NvbW1hUG9zKTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZS5tYXliZUluQXJyb3dQYXJhbWV0ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IC0xO1xuICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSAtMTtcbiAgICB0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIHRydWUpO1xuXG4gICAgdGhpcy5wcm9kUGFyYW0uZXhpdCgpO1xuICAgIHRoaXMuc2NvcGUuZXhpdCgpO1xuICAgIHRoaXMuc3RhdGUubWF5YmVJbkFycm93UGFyYW1ldGVycyA9IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKTtcbiAgfVxuXG4gIHNldEFycm93RnVuY3Rpb25QYXJhbWV0ZXJzKFxuICAgIG5vZGU6IE4uQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgcGFyYW1zOiBOLkV4cHJlc3Npb25bXSxcbiAgICB0cmFpbGluZ0NvbW1hUG9zOiA/bnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICBub2RlLnBhcmFtcyA9IHRoaXMudG9Bc3NpZ25hYmxlTGlzdChwYXJhbXMsIHRyYWlsaW5nQ29tbWFQb3MpO1xuICB9XG5cbiAgcGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2goXG4gICAgbm9kZTogTi5Cb2RpbGVzc0Z1bmN0aW9uT3JNZXRob2RCYXNlLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBpc01ldGhvZD86IGJvb2xlYW4gPSBmYWxzZSxcbiAgKTogdm9pZCB7XG4gICAgLy8gJEZsb3dJZ25vcmUgKG5vZGUgaXMgbm90IGJvZGlsZXNzIGlmIHdlIGdldCBoZXJlKVxuICAgIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgZmFsc2UsIGlzTWV0aG9kKTtcbiAgICB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdHlwZSk7XG4gIH1cblxuICAvLyBQYXJzZSBmdW5jdGlvbiBib2R5IGFuZCBjaGVjayBwYXJhbWV0ZXJzLlxuICBwYXJzZUZ1bmN0aW9uQm9keShcbiAgICBub2RlOiBOLkZ1bmN0aW9uLFxuICAgIGFsbG93RXhwcmVzc2lvbjogP2Jvb2xlYW4sXG4gICAgaXNNZXRob2Q/OiBib29sZWFuID0gZmFsc2UsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGlzRXhwcmVzc2lvbiA9IGFsbG93RXhwcmVzc2lvbiAmJiAhdGhpcy5tYXRjaCh0dC5icmFjZUwpO1xuICAgIGNvbnN0IG9sZEluUGFyYW1ldGVycyA9IHRoaXMuc3RhdGUuaW5QYXJhbWV0ZXJzO1xuICAgIHRoaXMuc3RhdGUuaW5QYXJhbWV0ZXJzID0gZmFsc2U7XG5cbiAgICBpZiAoaXNFeHByZXNzaW9uKSB7XG4gICAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ25BbGxvd0luKCk7XG4gICAgICB0aGlzLmNoZWNrUGFyYW1zKG5vZGUsIGZhbHNlLCBhbGxvd0V4cHJlc3Npb24sIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb2xkU3RyaWN0ID0gdGhpcy5zdGF0ZS5zdHJpY3Q7XG4gICAgICAvLyBTdGFydCBhIG5ldyBzY29wZSB3aXRoIHJlZ2FyZCB0byBsYWJlbHNcbiAgICAgIC8vIGZsYWcgKHJlc3RvcmUgdGhlbSB0byB0aGVpciBvbGQgdmFsdWUgYWZ0ZXJ3YXJkcykuXG4gICAgICBjb25zdCBvbGRMYWJlbHMgPSB0aGlzLnN0YXRlLmxhYmVscztcbiAgICAgIHRoaXMuc3RhdGUubGFiZWxzID0gW107XG5cbiAgICAgIC8vIEZ1bmN0aW9uQm9keVtZaWVsZCwgQXdhaXRdOlxuICAgICAgLy8gICBTdGF0ZW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0LCArUmV0dXJuXSBvcHRcbiAgICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKHRoaXMucHJvZFBhcmFtLmN1cnJlbnRGbGFncygpIHwgUEFSQU1fUkVUVVJOKTtcbiAgICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VCbG9jayhcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9uIGNoZWNrcyBhZnRlciB3ZSBwYXJzZSB0aGUgc3RhdGVtZW50cyBpbiB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgICAgKGhhc1N0cmljdE1vZGVEaXJlY3RpdmU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICBjb25zdCBub25TaW1wbGUgPSAhdGhpcy5pc1NpbXBsZVBhcmFtTGlzdChub2RlLnBhcmFtcyk7XG5cbiAgICAgICAgICBpZiAoaGFzU3RyaWN0TW9kZURpcmVjdGl2ZSAmJiBub25TaW1wbGUpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbG9naWMgaXMgaGVyZSB0byBhbGlnbiB0aGUgZXJyb3IgbG9jYXRpb24gd2l0aCB0aGUgRVNUcmVlIHBsdWdpbi5cbiAgICAgICAgICAgIGNvbnN0IGVycm9yUG9zID1cbiAgICAgICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICAgICAgKG5vZGUua2luZCA9PT0gXCJtZXRob2RcIiB8fCBub2RlLmtpbmQgPT09IFwiY29uc3RydWN0b3JcIikgJiZcbiAgICAgICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICAgICAgISFub2RlLmtleVxuICAgICAgICAgICAgICAgID8gbm9kZS5rZXkuZW5kXG4gICAgICAgICAgICAgICAgOiBub2RlLnN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5yYWlzZShlcnJvclBvcywgRXJyb3JzLklsbGVnYWxMYW5ndWFnZU1vZGVEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHN0cmljdE1vZGVDaGFuZ2VkID0gIW9sZFN0cmljdCAmJiB0aGlzLnN0YXRlLnN0cmljdDtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgcGFyYW1zIHRvIHZhckRlY2xhcmVkTmFtZXMgdG8gZW5zdXJlIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duXG4gICAgICAgICAgLy8gaWYgYSBsZXQvY29uc3QgZGVjbGFyYXRpb24gaW4gdGhlIGZ1bmN0aW9uIGNsYXNoZXMgd2l0aCBvbmUgb2YgdGhlIHBhcmFtcy5cbiAgICAgICAgICB0aGlzLmNoZWNrUGFyYW1zKFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICF0aGlzLnN0YXRlLnN0cmljdCAmJiAhYWxsb3dFeHByZXNzaW9uICYmICFpc01ldGhvZCAmJiAhbm9uU2ltcGxlLFxuICAgICAgICAgICAgYWxsb3dFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RyaWN0TW9kZUNoYW5nZWQsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEVuc3VyZSB0aGUgZnVuY3Rpb24gbmFtZSBpc24ndCBhIGZvcmJpZGRlbiBpZGVudGlmaWVyIGluIHN0cmljdCBtb2RlLCBlLmcuICdldmFsJ1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmljdCAmJiBub2RlLmlkKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTFZhbChcbiAgICAgICAgICAgICAgbm9kZS5pZCxcbiAgICAgICAgICAgICAgQklORF9PVVRTSURFLFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb24gbmFtZVwiLFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHN0cmljdE1vZGVDaGFuZ2VkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgdGhpcy5wcm9kUGFyYW0uZXhpdCgpO1xuICAgICAgdGhpcy5zdGF0ZS5sYWJlbHMgPSBvbGRMYWJlbHM7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5pblBhcmFtZXRlcnMgPSBvbGRJblBhcmFtZXRlcnM7XG4gIH1cblxuICBpc1NpbXBsZVBhcmFtTGlzdChcbiAgICBwYXJhbXM6ICRSZWFkT25seUFycmF5PE4uUGF0dGVybiB8IE4uVFNQYXJhbWV0ZXJQcm9wZXJ0eT4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJhbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChwYXJhbXNbaV0udHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjaGVja1BhcmFtcyhcbiAgICBub2RlOiBOLkZ1bmN0aW9uLFxuICAgIGFsbG93RHVwbGljYXRlczogYm9vbGVhbixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBpc0Fycm93RnVuY3Rpb246ID9ib29sZWFuLFxuICAgIHN0cmljdE1vZGVDaGFuZ2VkPzogYm9vbGVhbiA9IHRydWUsXG4gICk6IHZvaWQge1xuICAgIC8vICRGbG93SXNzdWVcbiAgICBjb25zdCBuYW1lSGFzaDoge30gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKFxuICAgICAgICBub2RlLnBhcmFtc1tpXSxcbiAgICAgICAgQklORF9WQVIsXG4gICAgICAgIGFsbG93RHVwbGljYXRlcyA/IG51bGwgOiBuYW1lSGFzaCxcbiAgICAgICAgXCJmdW5jdGlvbiBwYXJhbWV0ZXIgbGlzdFwiLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHN0cmljdE1vZGVDaGFuZ2VkLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBleHByZXNzaW9ucywgYW5kIHJldHVybnMgdGhlbSBhc1xuICAvLyBhbiBhcnJheS4gYGNsb3NlYCBpcyB0aGUgdG9rZW4gdHlwZSB0aGF0IGVuZHMgdGhlIGxpc3QsIGFuZFxuICAvLyBgYWxsb3dFbXB0eWAgY2FuIGJlIHR1cm5lZCBvbiB0byBhbGxvdyBzdWJzZXF1ZW50IGNvbW1hcyB3aXRoXG4gIC8vIG5vdGhpbmcgaW4gYmV0d2VlbiB0aGVtIHRvIGJlIHBhcnNlZCBhcyBgbnVsbGAgKHdoaWNoIGlzIG5lZWRlZFxuICAvLyBmb3IgYXJyYXkgbGl0ZXJhbHMpLlxuXG4gIHBhcnNlRXhwckxpc3QoXG4gICAgY2xvc2U6IFRva2VuVHlwZSxcbiAgICBhbGxvd0VtcHR5PzogYm9vbGVhbixcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgbm9kZUZvckV4dHJhPzogP04uTm9kZSxcbiAgKTogJFJlYWRPbmx5QXJyYXk8P04uRXhwcmVzc2lvbj4ge1xuICAgIGNvbnN0IGVsdHMgPSBbXTtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuXG4gICAgd2hpbGUgKCF0aGlzLmVhdChjbG9zZSkpIHtcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuY29tbWEpO1xuICAgICAgICBpZiAodGhpcy5tYXRjaChjbG9zZSkpIHtcbiAgICAgICAgICBpZiAobm9kZUZvckV4dHJhKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEV4dHJhKFxuICAgICAgICAgICAgICBub2RlRm9yRXh0cmEsXG4gICAgICAgICAgICAgIFwidHJhaWxpbmdDb21tYVwiLFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsdHMucHVzaCh0aGlzLnBhcnNlRXhwckxpc3RJdGVtKGFsbG93RW1wdHksIHJlZkV4cHJlc3Npb25FcnJvcnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsdHM7XG4gIH1cblxuICBwYXJzZUV4cHJMaXN0SXRlbShcbiAgICBhbGxvd0VtcHR5OiA/Ym9vbGVhbixcbiAgICByZWZFeHByZXNzaW9uRXJyb3JzPzogP0V4cHJlc3Npb25FcnJvcnMsXG4gICAgcmVmTmVlZHNBcnJvd1BvczogP1BvcyxcbiAgICBhbGxvd1BsYWNlaG9sZGVyOiA/Ym9vbGVhbixcbiAgKTogP04uRXhwcmVzc2lvbiB7XG4gICAgbGV0IGVsdDtcbiAgICBpZiAodGhpcy5tYXRjaCh0dC5jb21tYSkpIHtcbiAgICAgIGlmICghYWxsb3dFbXB0eSkge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUucG9zLCBFcnJvcnMuVW5leHBlY3RlZFRva2VuLCBcIixcIik7XG4gICAgICB9XG4gICAgICBlbHQgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5lbGxpcHNpcykpIHtcbiAgICAgIGNvbnN0IHNwcmVhZE5vZGVTdGFydFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICBjb25zdCBzcHJlYWROb2RlU3RhcnRMb2MgPSB0aGlzLnN0YXRlLnN0YXJ0TG9jO1xuICAgICAgZWx0ID0gdGhpcy5wYXJzZVBhcmVuSXRlbShcbiAgICAgICAgdGhpcy5wYXJzZVNwcmVhZChyZWZFeHByZXNzaW9uRXJyb3JzLCByZWZOZWVkc0Fycm93UG9zKSxcbiAgICAgICAgc3ByZWFkTm9kZVN0YXJ0UG9zLFxuICAgICAgICBzcHJlYWROb2RlU3RhcnRMb2MsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5xdWVzdGlvbikpIHtcbiAgICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwicGFydGlhbEFwcGxpY2F0aW9uXCIpO1xuICAgICAgaWYgKCFhbGxvd1BsYWNlaG9sZGVyKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlVuZXhwZWN0ZWRBcmd1bWVudFBsYWNlaG9sZGVyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBlbHQgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcmd1bWVudFBsYWNlaG9sZGVyXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ25BbGxvd0luKFxuICAgICAgICByZWZFeHByZXNzaW9uRXJyb3JzLFxuICAgICAgICB0aGlzLnBhcnNlUGFyZW5JdGVtLFxuICAgICAgICByZWZOZWVkc0Fycm93UG9zLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsdDtcbiAgfVxuXG4gIC8vIFBhcnNlIHRoZSBuZXh0IHRva2VuIGFzIGFuIGlkZW50aWZpZXIuIElmIGBsaWJlcmFsYCBpcyB0cnVlICh1c2VkXG4gIC8vIHdoZW4gcGFyc2luZyBwcm9wZXJ0aWVzKSwgaXQgd2lsbCBhbHNvIGNvbnZlcnQga2V5d29yZHMgaW50b1xuICAvLyBpZGVudGlmaWVycy5cbiAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgdXNlZCB0byBwYXJzZSB0aGUga2V5d29yZHMgb2YgbWV0YSBwcm9wZXJ0aWVzLCBzaW5jZSB0aGV5XG4gIC8vIGFyZSBub3QgaWRlbnRpZmllcnMgYW5kIGNhbm5vdCBjb250YWluIGVzY2FwZSBzZXF1ZW5jZXMuXG5cbiAgcGFyc2VJZGVudGlmaWVyKGxpYmVyYWw/OiBib29sZWFuKTogTi5JZGVudGlmaWVyIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKG5vZGUuc3RhcnQsIGxpYmVyYWwpO1xuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlSWRlbnRpZmllcihub2RlLCBuYW1lKTtcbiAgfVxuXG4gIGNyZWF0ZUlkZW50aWZpZXIobm9kZTogTi5JZGVudGlmaWVyLCBuYW1lOiBzdHJpbmcpOiBOLklkZW50aWZpZXIge1xuICAgIG5vZGUubmFtZSA9IG5hbWU7XG4gICAgbm9kZS5sb2MuaWRlbnRpZmllck5hbWUgPSBuYW1lO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklkZW50aWZpZXJcIik7XG4gIH1cblxuICBwYXJzZUlkZW50aWZpZXJOYW1lKHBvczogbnVtYmVyLCBsaWJlcmFsPzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgbGV0IG5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0IHsgc3RhcnQsIHR5cGUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAodHlwZSA9PT0gdHQubmFtZSkge1xuICAgICAgbmFtZSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlLmtleXdvcmQpIHtcbiAgICAgIG5hbWUgPSB0eXBlLmtleXdvcmQ7XG5cbiAgICAgIC8vIGBjbGFzc2AgYW5kIGBmdW5jdGlvbmAga2V5d29yZHMgcHVzaCBmdW5jdGlvbi10eXBlIHRva2VuIGNvbnRleHQgaW50byB0aGlzLmNvbnRleHQuXG4gICAgICAvLyBCdXQgdGhlcmUgaXMgbm8gY2hhbmNlIHRvIHBvcCB0aGUgY29udGV4dCBpZiB0aGUga2V5d29yZCBpcyBjb25zdW1lZFxuICAgICAgLy8gYXMgYW4gaWRlbnRpZmllciBzdWNoIGFzIGEgcHJvcGVydHkgbmFtZS5cbiAgICAgIGNvbnN0IGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgICAgIGlmIChcbiAgICAgICAgKHR5cGUgPT09IHR0Ll9jbGFzcyB8fCB0eXBlID09PSB0dC5fZnVuY3Rpb24pICYmXG4gICAgICAgIChjdXJDb250ZXh0ID09PSBjdC5mdW5jdGlvblN0YXRlbWVudCB8fFxuICAgICAgICAgIGN1ckNvbnRleHQgPT09IGN0LmZ1bmN0aW9uRXhwcmVzc2lvbilcbiAgICAgICkge1xuICAgICAgICB0aGlzLnN0YXRlLmNvbnRleHQucG9wKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIGlmIChsaWJlcmFsKSB7XG4gICAgICAvLyBJZiB0aGUgY3VycmVudCB0b2tlbiBpcyBub3QgdXNlZCBhcyBhIGtleXdvcmQsIHNldCBpdHMgdHlwZSB0byBcInR0Lm5hbWVcIi5cbiAgICAgIC8vIFRoaXMgd2lsbCBwcmV2ZW50IHRoaXMubmV4dCgpIGZyb20gdGhyb3dpbmcgYWJvdXQgdW5leHBlY3RlZCBlc2NhcGVzLlxuICAgICAgdGhpcy5zdGF0ZS50eXBlID0gdHQubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGVja1Jlc2VydmVkV29yZChuYW1lLCBzdGFydCwgISF0eXBlLmtleXdvcmQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB0aGlzLm5leHQoKTtcblxuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgY2hlY2tSZXNlcnZlZFdvcmQoXG4gICAgd29yZDogc3RyaW5nLFxuICAgIHN0YXJ0TG9jOiBudW1iZXIsXG4gICAgY2hlY2tLZXl3b3JkczogYm9vbGVhbixcbiAgICBpc0JpbmRpbmc6IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLnByb2RQYXJhbS5oYXNZaWVsZCAmJiB3b3JkID09PSBcInlpZWxkXCIpIHtcbiAgICAgIHRoaXMucmFpc2Uoc3RhcnRMb2MsIEVycm9ycy5ZaWVsZEJpbmRpbmdJZGVudGlmaWVyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAod29yZCA9PT0gXCJhd2FpdFwiKSB7XG4gICAgICBpZiAodGhpcy5wcm9kUGFyYW0uaGFzQXdhaXQpIHtcbiAgICAgICAgdGhpcy5yYWlzZShzdGFydExvYywgRXJyb3JzLkF3YWl0QmluZGluZ0lkZW50aWZpZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPT09IC0xICYmXG4gICAgICAgICh0aGlzLnN0YXRlLm1heWJlSW5Bc3luY0Fycm93SGVhZCB8fCB0aGlzLmlzQXdhaXRBbGxvd2VkKCkpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zY29wZS5pbkNsYXNzICYmXG4gICAgICAhdGhpcy5zY29wZS5pbk5vbkFycm93RnVuY3Rpb24gJiZcbiAgICAgIHdvcmQgPT09IFwiYXJndW1lbnRzXCJcbiAgICApIHtcbiAgICAgIHRoaXMucmFpc2Uoc3RhcnRMb2MsIEVycm9ycy5Bcmd1bWVudHNEaXNhbGxvd2VkSW5Jbml0aWFsaXplcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGVja0tleXdvcmRzICYmIGlzS2V5d29yZCh3b3JkKSkge1xuICAgICAgdGhpcy5yYWlzZShzdGFydExvYywgRXJyb3JzLlVuZXhwZWN0ZWRLZXl3b3JkLCB3b3JkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZXNlcnZlZFRlc3QgPSAhdGhpcy5zdGF0ZS5zdHJpY3RcbiAgICAgID8gaXNSZXNlcnZlZFdvcmRcbiAgICAgIDogaXNCaW5kaW5nXG4gICAgICA/IGlzU3RyaWN0QmluZFJlc2VydmVkV29yZFxuICAgICAgOiBpc1N0cmljdFJlc2VydmVkV29yZDtcblxuICAgIGlmIChyZXNlcnZlZFRlc3Qod29yZCwgdGhpcy5pbk1vZHVsZSkpIHtcbiAgICAgIGlmICghdGhpcy5wcm9kUGFyYW0uaGFzQXdhaXQgJiYgd29yZCA9PT0gXCJhd2FpdFwiKSB7XG4gICAgICAgIHRoaXMucmFpc2Uoc3RhcnRMb2MsIEVycm9ycy5Bd2FpdE5vdEluQXN5bmNGdW5jdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXJ0TG9jLCBFcnJvcnMuVW5leHBlY3RlZFJlc2VydmVkV29yZCwgd29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNBd2FpdEFsbG93ZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuc2NvcGUuaW5GdW5jdGlvbikgcmV0dXJuIHRoaXMucHJvZFBhcmFtLmhhc0F3YWl0O1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbikgcmV0dXJuIHRydWU7XG4gICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwidG9wTGV2ZWxBd2FpdFwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5Nb2R1bGUgJiYgdGhpcy5wcm9kUGFyYW0uaGFzQXdhaXQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFBhcnNlcyBhd2FpdCBleHByZXNzaW9uIGluc2lkZSBhc3luYyBmdW5jdGlvbi5cblxuICBwYXJzZUF3YWl0KCk6IE4uQXdhaXRFeHByZXNzaW9uIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuaW5QYXJhbWV0ZXJzKSB7XG4gICAgICB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIEVycm9ycy5Bd2FpdEV4cHJlc3Npb25Gb3JtYWxQYXJhbWV0ZXIpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5hd2FpdFBvcyA9PT0gLTEpIHtcbiAgICAgIHRoaXMuc3RhdGUuYXdhaXRQb3MgPSBub2RlLnN0YXJ0O1xuICAgIH1cbiAgICBpZiAodGhpcy5lYXQodHQuc3RhcikpIHtcbiAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgRXJyb3JzLk9ic29sZXRlQXdhaXRTdGFyKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2NvcGUuaW5GdW5jdGlvbiAmJiAhdGhpcy5vcHRpb25zLmFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb24pIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5oYXNQcmVjZWRpbmdMaW5lQnJlYWsoKSB8fFxuICAgICAgICAvLyBBbGwgdGhlIGZvbGxvd2luZyBleHByZXNzaW9ucyBhcmUgYW1iaWd1b3VzOlxuICAgICAgICAvLyAgIGF3YWl0ICsgMCwgYXdhaXQgLSAwLCBhd2FpdCAoIDAgKSwgYXdhaXQgWyAwIF0sIGF3YWl0IC8gMCAvdSwgYXdhaXQgYGBcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5wbHVzTWluKSB8fFxuICAgICAgICB0aGlzLm1hdGNoKHR0LnBhcmVuTCkgfHxcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5icmFja2V0TCkgfHxcbiAgICAgICAgdGhpcy5tYXRjaCh0dC5iYWNrUXVvdGUpIHx8XG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgdG9rZW5pemVyIGdlbmVyYXRlcyB0dC5zbGFzaCBmb3IgcmVnZXhwcywgYW5kIHRoaXMgaXNcbiAgICAgICAgLy8gaGFuZGxlciBieSBwYXJzZUV4cHJBdG9tXG4gICAgICAgIHRoaXMubWF0Y2godHQucmVnZXhwKSB8fFxuICAgICAgICB0aGlzLm1hdGNoKHR0LnNsYXNoKSB8fFxuICAgICAgICAvLyBUaGlzIGNvZGUgY291bGQgYmUgcGFyc2VkIGJvdGggYXMgYSBtb2R1bG8gb3BlcmF0b3Igb3IgYXMgYW4gaW50cmluc2ljOlxuICAgICAgICAvLyAgIGF3YWl0ICV4KDApXG4gICAgICAgICh0aGlzLmhhc1BsdWdpbihcInY4aW50cmluc2ljXCIpICYmIHRoaXMubWF0Y2godHQubW9kdWxvKSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmFtYmlndW91c1NjcmlwdERpZmZlcmVudEFzdCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNhd1VuYW1iaWd1b3VzRVNNID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuc29sb0F3YWl0KSB7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlVW5hcnkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXdhaXRFeHByZXNzaW9uXCIpO1xuICB9XG5cbiAgLy8gUGFyc2VzIHlpZWxkIGV4cHJlc3Npb24gaW5zaWRlIGdlbmVyYXRvci5cblxuICBwYXJzZVlpZWxkKCk6IE4uWWllbGRFeHByZXNzaW9uIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmluUGFyYW1ldGVycykge1xuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBFcnJvcnMuWWllbGRJblBhcmFtZXRlcik7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnlpZWxkUG9zID09PSAtMSkge1xuICAgICAgdGhpcy5zdGF0ZS55aWVsZFBvcyA9IG5vZGUuc3RhcnQ7XG4gICAgfVxuXG4gICAgdGhpcy5uZXh0KCk7XG4gICAgaWYgKFxuICAgICAgdGhpcy5tYXRjaCh0dC5zZW1pKSB8fFxuICAgICAgKCF0aGlzLm1hdGNoKHR0LnN0YXIpICYmICF0aGlzLnN0YXRlLnR5cGUuc3RhcnRzRXhwcikgfHxcbiAgICAgIHRoaXMuaGFzUHJlY2VkaW5nTGluZUJyZWFrKClcbiAgICApIHtcbiAgICAgIG5vZGUuZGVsZWdhdGUgPSBmYWxzZTtcbiAgICAgIG5vZGUuYXJndW1lbnQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmRlbGVnYXRlID0gdGhpcy5lYXQodHQuc3Rhcik7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJZaWVsZEV4cHJlc3Npb25cIik7XG4gIH1cblxuICAvLyBWYWxpZGF0ZXMgYSBwaXBlbGluZSAoZm9yIGFueSBvZiB0aGUgcGlwZWxpbmUgQmFieWxvbiBwbHVnaW5zKSBhdCB0aGUgcG9pbnRcbiAgLy8gb2YgdGhlIGluZml4IG9wZXJhdG9yIGB8PmAuXG5cbiAgY2hlY2tQaXBlbGluZUF0SW5maXhPcGVyYXRvcihsZWZ0OiBOLkV4cHJlc3Npb24sIGxlZnRTdGFydFBvczogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwicGlwZWxpbmVPcGVyYXRvclwiLCBcInByb3Bvc2FsXCIpID09PSBcInNtYXJ0XCIpIHtcbiAgICAgIGlmIChsZWZ0LnR5cGUgPT09IFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIHBpcGVsaW5lIGhlYWQgaXMgbm90IGEgY29tbWEtZGVsaW1pdGVkXG4gICAgICAgIC8vIHNlcXVlbmNlIGV4cHJlc3Npb24uXG4gICAgICAgIHRoaXMucmFpc2UobGVmdFN0YXJ0UG9zLCBFcnJvcnMuUGlwZWxpbmVIZWFkU2VxdWVuY2VFeHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwYXJzZVNtYXJ0UGlwZWxpbmVCb2R5KFxuICAgIGNoaWxkRXhwcmVzc2lvbjogTi5FeHByZXNzaW9uLFxuICAgIHN0YXJ0UG9zOiBudW1iZXIsXG4gICAgc3RhcnRMb2M6IFBvc2l0aW9uLFxuICApOiBOLlBpcGVsaW5lQm9keSB7XG4gICAgdGhpcy5jaGVja1NtYXJ0UGlwZWxpbmVCb2R5RWFybHlFcnJvcnMoY2hpbGRFeHByZXNzaW9uLCBzdGFydFBvcyk7XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZVNtYXJ0UGlwZWxpbmVCb2R5SW5TdHlsZShcbiAgICAgIGNoaWxkRXhwcmVzc2lvbixcbiAgICAgIHN0YXJ0UG9zLFxuICAgICAgc3RhcnRMb2MsXG4gICAgKTtcbiAgfVxuXG4gIGNoZWNrU21hcnRQaXBlbGluZUJvZHlFYXJseUVycm9ycyhcbiAgICBjaGlsZEV4cHJlc3Npb246IE4uRXhwcmVzc2lvbixcbiAgICBzdGFydFBvczogbnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYXRjaCh0dC5hcnJvdykpIHtcbiAgICAgIC8vIElmIHRoZSBmb2xsb3dpbmcgdG9rZW4gaXMgaW52YWxpZGx5IGA9PmAsIHRoZW4gdGhyb3cgYSBodW1hbi1mcmllbmRseSBlcnJvclxuICAgICAgLy8gaW5zdGVhZCBvZiBzb21ldGhpbmcgbGlrZSAnVW5leHBlY3RlZCB0b2tlbiwgZXhwZWN0ZWQgXCI7XCInLlxuICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuUGlwZWxpbmVCb2R5Tm9BcnJvdyk7XG4gICAgfSBlbHNlIGlmIChjaGlsZEV4cHJlc3Npb24udHlwZSA9PT0gXCJTZXF1ZW5jZUV4cHJlc3Npb25cIikge1xuICAgICAgdGhpcy5yYWlzZShzdGFydFBvcywgRXJyb3JzLlBpcGVsaW5lQm9keVNlcXVlbmNlRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VTbWFydFBpcGVsaW5lQm9keUluU3R5bGUoXG4gICAgY2hpbGRFeHByZXNzaW9uOiBOLkV4cHJlc3Npb24sXG4gICAgc3RhcnRQb3M6IG51bWJlcixcbiAgICBzdGFydExvYzogUG9zaXRpb24sXG4gICk6IE4uUGlwZWxpbmVCb2R5IHtcbiAgICBjb25zdCBib2R5Tm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBjb25zdCBpc1NpbXBsZVJlZmVyZW5jZSA9IHRoaXMuaXNTaW1wbGVSZWZlcmVuY2UoY2hpbGRFeHByZXNzaW9uKTtcbiAgICBpZiAoaXNTaW1wbGVSZWZlcmVuY2UpIHtcbiAgICAgIGJvZHlOb2RlLmNhbGxlZSA9IGNoaWxkRXhwcmVzc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLnRvcGljUmVmZXJlbmNlV2FzVXNlZEluQ3VycmVudFRvcGljQ29udGV4dCgpKSB7XG4gICAgICAgIHRoaXMucmFpc2Uoc3RhcnRQb3MsIEVycm9ycy5QaXBlbGluZVRvcGljVW51c2VkKTtcbiAgICAgIH1cbiAgICAgIGJvZHlOb2RlLmV4cHJlc3Npb24gPSBjaGlsZEV4cHJlc3Npb247XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoXG4gICAgICBib2R5Tm9kZSxcbiAgICAgIGlzU2ltcGxlUmVmZXJlbmNlID8gXCJQaXBlbGluZUJhcmVGdW5jdGlvblwiIDogXCJQaXBlbGluZVRvcGljRXhwcmVzc2lvblwiLFxuICAgICk7XG4gIH1cblxuICBpc1NpbXBsZVJlZmVyZW5jZShleHByZXNzaW9uOiBOLkV4cHJlc3Npb24pOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKGV4cHJlc3Npb24udHlwZSkge1xuICAgICAgY2FzZSBcIk1lbWJlckV4cHJlc3Npb25cIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAhZXhwcmVzc2lvbi5jb21wdXRlZCAmJiB0aGlzLmlzU2ltcGxlUmVmZXJlbmNlKGV4cHJlc3Npb24ub2JqZWN0KVxuICAgICAgICApO1xuICAgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gRW5hYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlciBjb250ZXh0cyB3aXRoaW4gc21hcnQgcGlwZWxpbmUgYm9kaWVzLlxuICAvLyBUaGUgZnVuY3Rpb24gbW9kaWZpZXMgdGhlIHBhcnNlcidzIHRvcGljLWNvbnRleHQgc3RhdGUgdG8gZW5hYmxlIG9yIGRpc2FibGVcbiAgLy8gdGhlIHVzZSBvZiB0b3BpYyByZWZlcmVuY2VzIHdpdGggdGhlIHNtYXJ0UGlwZWxpbmVzIHBsdWdpbi4gVGhleSB0aGVuIHJ1biBhXG4gIC8vIGNhbGxiYWNrLCB0aGVuIHRoZXkgcmVzZXQgdGhlIHBhcnNlciB0byB0aGUgb2xkIHRvcGljLWNvbnRleHQgc3RhdGUgdGhhdCBpdFxuICAvLyBoYWQgYmVmb3JlIHRoZSBmdW5jdGlvbiB3YXMgY2FsbGVkLlxuXG4gIHdpdGhUb3BpY1Blcm1pdHRpbmdDb250ZXh0PFQ+KGNhbGxiYWNrOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3Qgb3V0ZXJDb250ZXh0VG9waWNTdGF0ZSA9IHRoaXMuc3RhdGUudG9waWNDb250ZXh0O1xuICAgIHRoaXMuc3RhdGUudG9waWNDb250ZXh0ID0ge1xuICAgICAgLy8gRW5hYmxlIHRoZSB1c2Ugb2YgdGhlIHByaW1hcnkgdG9waWMgcmVmZXJlbmNlLlxuICAgICAgbWF4TnVtT2ZSZXNvbHZhYmxlVG9waWNzOiAxLFxuICAgICAgLy8gSGlkZSB0aGUgdXNlIG9mIGFueSB0b3BpYyByZWZlcmVuY2VzIGZyb20gb3V0ZXIgY29udGV4dHMuXG4gICAgICBtYXhUb3BpY0luZGV4OiBudWxsLFxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc3RhdGUudG9waWNDb250ZXh0ID0gb3V0ZXJDb250ZXh0VG9waWNTdGF0ZTtcbiAgICB9XG4gIH1cblxuICAvLyBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlciBjb250ZXh0cyB3aXRoaW4gc3ludGF4IGNvbnN0cnVjdHNcbiAgLy8gc3VjaCBhcyB0aGUgYm9kaWVzIG9mIGl0ZXJhdGlvbiBzdGF0ZW1lbnRzLlxuICAvLyBUaGUgZnVuY3Rpb24gbW9kaWZpZXMgdGhlIHBhcnNlcidzIHRvcGljLWNvbnRleHQgc3RhdGUgdG8gZW5hYmxlIG9yIGRpc2FibGVcbiAgLy8gdGhlIHVzZSBvZiB0b3BpYyByZWZlcmVuY2VzIHdpdGggdGhlIHNtYXJ0UGlwZWxpbmVzIHBsdWdpbi4gVGhleSB0aGVuIHJ1biBhXG4gIC8vIGNhbGxiYWNrLCB0aGVuIHRoZXkgcmVzZXQgdGhlIHBhcnNlciB0byB0aGUgb2xkIHRvcGljLWNvbnRleHQgc3RhdGUgdGhhdCBpdFxuICAvLyBoYWQgYmVmb3JlIHRoZSBmdW5jdGlvbiB3YXMgY2FsbGVkLlxuXG4gIHdpdGhUb3BpY0ZvcmJpZGRpbmdDb250ZXh0PFQ+KGNhbGxiYWNrOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3Qgb3V0ZXJDb250ZXh0VG9waWNTdGF0ZSA9IHRoaXMuc3RhdGUudG9waWNDb250ZXh0O1xuICAgIHRoaXMuc3RhdGUudG9waWNDb250ZXh0ID0ge1xuICAgICAgLy8gRGlzYWJsZSB0aGUgdXNlIG9mIHRoZSBwcmltYXJ5IHRvcGljIHJlZmVyZW5jZS5cbiAgICAgIG1heE51bU9mUmVzb2x2YWJsZVRvcGljczogMCxcbiAgICAgIC8vIEhpZGUgdGhlIHVzZSBvZiBhbnkgdG9waWMgcmVmZXJlbmNlcyBmcm9tIG91dGVyIGNvbnRleHRzLlxuICAgICAgbWF4VG9waWNJbmRleDogbnVsbCxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnN0YXRlLnRvcGljQ29udGV4dCA9IG91dGVyQ29udGV4dFRvcGljU3RhdGU7XG4gICAgfVxuICB9XG5cbiAgd2l0aFNvbG9Bd2FpdFBlcm1pdHRpbmdDb250ZXh0PFQ+KGNhbGxiYWNrOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3Qgb3V0ZXJDb250ZXh0U29sb0F3YWl0U3RhdGUgPSB0aGlzLnN0YXRlLnNvbG9Bd2FpdDtcbiAgICB0aGlzLnN0YXRlLnNvbG9Bd2FpdCA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc3RhdGUuc29sb0F3YWl0ID0gb3V0ZXJDb250ZXh0U29sb0F3YWl0U3RhdGU7XG4gICAgfVxuICB9XG5cbiAgYWxsb3dJbkFuZDxUPihjYWxsYmFjazogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IGZsYWdzID0gdGhpcy5wcm9kUGFyYW0uY3VycmVudEZsYWdzKCk7XG4gICAgY29uc3QgcHJvZFBhcmFtVG9TZXQgPSBQQVJBTV9JTiAmIH5mbGFncztcbiAgICBpZiAocHJvZFBhcmFtVG9TZXQpIHtcbiAgICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKGZsYWdzIHwgUEFSQU1fSU4pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnByb2RQYXJhbS5leGl0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9XG5cbiAgZGlzYWxsb3dJbkFuZDxUPihjYWxsYmFjazogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IGZsYWdzID0gdGhpcy5wcm9kUGFyYW0uY3VycmVudEZsYWdzKCk7XG4gICAgY29uc3QgcHJvZFBhcmFtVG9DbGVhciA9IFBBUkFNX0lOICYgZmxhZ3M7XG4gICAgaWYgKHByb2RQYXJhbVRvQ2xlYXIpIHtcbiAgICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKGZsYWdzICYgflBBUkFNX0lOKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5wcm9kUGFyYW0uZXhpdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIC8vIFJlZ2lzdGVyIHRoZSB1c2Ugb2YgYSBwcmltYXJ5IHRvcGljIHJlZmVyZW5jZSAoYCNgKSB3aXRoaW4gdGhlIGN1cnJlbnRcbiAgLy8gdG9waWMgY29udGV4dC5cbiAgcmVnaXN0ZXJUb3BpY1JlZmVyZW5jZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlLnRvcGljQ29udGV4dC5tYXhUb3BpY0luZGV4ID0gMDtcbiAgfVxuXG4gIHByaW1hcnlUb3BpY1JlZmVyZW5jZUlzQWxsb3dlZEluQ3VycmVudFRvcGljQ29udGV4dCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS50b3BpY0NvbnRleHQubWF4TnVtT2ZSZXNvbHZhYmxlVG9waWNzID49IDE7XG4gIH1cblxuICB0b3BpY1JlZmVyZW5jZVdhc1VzZWRJbkN1cnJlbnRUb3BpY0NvbnRleHQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuc3RhdGUudG9waWNDb250ZXh0Lm1heFRvcGljSW5kZXggIT0gbnVsbCAmJlxuICAgICAgdGhpcy5zdGF0ZS50b3BpY0NvbnRleHQubWF4VG9waWNJbmRleCA+PSAwXG4gICAgKTtcbiAgfVxuXG4gIHBhcnNlRlNoYXJwUGlwZWxpbmVCb2R5KHByZWM6IG51bWJlcik6IE4uRXhwcmVzc2lvbiB7XG4gICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcblxuICAgIHRoaXMuc3RhdGUucG90ZW50aWFsQXJyb3dBdCA9IHRoaXMuc3RhdGUuc3RhcnQ7XG4gICAgY29uc3Qgb2xkSW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSB0aGlzLnN0YXRlLmluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuICAgIHRoaXMuc3RhdGUuaW5GU2hhcnBQaXBlbGluZURpcmVjdEJvZHkgPSB0cnVlO1xuXG4gICAgY29uc3QgcmV0ID0gdGhpcy5wYXJzZUV4cHJPcChcbiAgICAgIHRoaXMucGFyc2VNYXliZVVuYXJ5KCksXG4gICAgICBzdGFydFBvcyxcbiAgICAgIHN0YXJ0TG9jLFxuICAgICAgcHJlYyxcbiAgICApO1xuXG4gICAgdGhpcy5zdGF0ZS5pbkZTaGFycFBpcGVsaW5lRGlyZWN0Qm9keSA9IG9sZEluRlNoYXJwUGlwZWxpbmVEaXJlY3RCb2R5O1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0ICogYXMgTiBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IHR5cGVzIGFzIHR0LCB0eXBlIFRva2VuVHlwZSB9IGZyb20gXCIuLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCBFeHByZXNzaW9uUGFyc2VyIGZyb20gXCIuL2V4cHJlc3Npb25cIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuL2Vycm9yXCI7XG5pbXBvcnQge1xuICBpc0lkZW50aWZpZXJDaGFyLFxuICBpc0lkZW50aWZpZXJTdGFydCxcbiAga2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvcixcbn0gZnJvbSBcIi4uL3V0aWwvaWRlbnRpZmllclwiO1xuaW1wb3J0IHsgbGluZUJyZWFrIH0gZnJvbSBcIi4uL3V0aWwvd2hpdGVzcGFjZVwiO1xuaW1wb3J0ICogYXMgY2hhckNvZGVzIGZyb20gXCJjaGFyY29kZXNcIjtcbmltcG9ydCB7XG4gIEJJTkRfQ0xBU1MsXG4gIEJJTkRfTEVYSUNBTCxcbiAgQklORF9WQVIsXG4gIEJJTkRfRlVOQ1RJT04sXG4gIFNDT1BFX0NMQVNTLFxuICBTQ09QRV9GVU5DVElPTixcbiAgU0NPUEVfT1RIRVIsXG4gIFNDT1BFX1NJTVBMRV9DQVRDSCxcbiAgU0NPUEVfU1VQRVIsXG4gIENMQVNTX0VMRU1FTlRfT1RIRVIsXG4gIENMQVNTX0VMRU1FTlRfSU5TVEFOQ0VfR0VUVEVSLFxuICBDTEFTU19FTEVNRU5UX0lOU1RBTkNFX1NFVFRFUixcbiAgQ0xBU1NfRUxFTUVOVF9TVEFUSUNfR0VUVEVSLFxuICBDTEFTU19FTEVNRU5UX1NUQVRJQ19TRVRURVIsXG4gIHR5cGUgQmluZGluZ1R5cGVzLFxufSBmcm9tIFwiLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uRXJyb3JzIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgUEFSQU0sIGZ1bmN0aW9uRmxhZ3MgfSBmcm9tIFwiLi4vdXRpbC9wcm9kdWN0aW9uLXBhcmFtZXRlclwiO1xuXG5jb25zdCBsb29wTGFiZWwgPSB7IGtpbmQ6IFwibG9vcFwiIH0sXG4gIHN3aXRjaExhYmVsID0geyBraW5kOiBcInN3aXRjaFwiIH07XG5cbmNvbnN0IEZVTkNfTk9fRkxBR1MgPSAwYjAwMCxcbiAgRlVOQ19TVEFURU1FTlQgPSAwYjAwMSxcbiAgRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCA9IDBiMDEwLFxuICBGVU5DX05VTExBQkxFX0lEID0gMGIxMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRlbWVudFBhcnNlciBleHRlbmRzIEV4cHJlc3Npb25QYXJzZXIge1xuICAvLyAjIyMgU3RhdGVtZW50IHBhcnNpbmdcblxuICAvLyBQYXJzZSBhIHByb2dyYW0uIEluaXRpYWxpemVzIHRoZSBwYXJzZXIsIHJlYWRzIGFueSBudW1iZXIgb2ZcbiAgLy8gc3RhdGVtZW50cywgYW5kIHdyYXBzIHRoZW0gaW4gYSBQcm9ncmFtIG5vZGUuICBPcHRpb25hbGx5IHRha2VzIGFcbiAgLy8gYHByb2dyYW1gIGFyZ3VtZW50LiAgSWYgcHJlc2VudCwgdGhlIHN0YXRlbWVudHMgd2lsbCBiZSBhcHBlbmRlZFxuICAvLyB0byBpdHMgYm9keSBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG5vZGUuXG5cbiAgcGFyc2VUb3BMZXZlbChmaWxlOiBOLkZpbGUsIHByb2dyYW06IE4uUHJvZ3JhbSk6IE4uRmlsZSB7XG4gICAgcHJvZ3JhbS5zb3VyY2VUeXBlID0gdGhpcy5vcHRpb25zLnNvdXJjZVR5cGU7XG5cbiAgICBwcm9ncmFtLmludGVycHJldGVyID0gdGhpcy5wYXJzZUludGVycHJldGVyRGlyZWN0aXZlKCk7XG5cbiAgICB0aGlzLnBhcnNlQmxvY2tCb2R5KHByb2dyYW0sIHRydWUsIHRydWUsIHR0LmVvZik7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLmluTW9kdWxlICYmXG4gICAgICAhdGhpcy5vcHRpb25zLmFsbG93VW5kZWNsYXJlZEV4cG9ydHMgJiZcbiAgICAgIHRoaXMuc2NvcGUudW5kZWZpbmVkRXhwb3J0cy5zaXplID4gMFxuICAgICkge1xuICAgICAgZm9yIChjb25zdCBbbmFtZV0gb2YgQXJyYXkuZnJvbSh0aGlzLnNjb3BlLnVuZGVmaW5lZEV4cG9ydHMpKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuc2NvcGUudW5kZWZpbmVkRXhwb3J0cy5nZXQobmFtZSk7XG4gICAgICAgIC8vICRGbG93SXNzdWVcbiAgICAgICAgdGhpcy5yYWlzZShwb3MsIEVycm9ycy5Nb2R1bGVFeHBvcnRVbmRlZmluZWQsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpbGUucHJvZ3JhbSA9IHRoaXMuZmluaXNoTm9kZShwcm9ncmFtLCBcIlByb2dyYW1cIik7XG4gICAgZmlsZS5jb21tZW50cyA9IHRoaXMuc3RhdGUuY29tbWVudHM7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRva2VucykgZmlsZS50b2tlbnMgPSB0aGlzLnRva2VucztcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoZmlsZSwgXCJGaWxlXCIpO1xuICB9XG5cbiAgLy8gVE9ET1xuXG4gIHN0bXRUb0RpcmVjdGl2ZShzdG10OiBOLlN0YXRlbWVudCk6IE4uRGlyZWN0aXZlIHtcbiAgICBjb25zdCBleHByID0gc3RtdC5leHByZXNzaW9uO1xuXG4gICAgY29uc3QgZGlyZWN0aXZlTGl0ZXJhbCA9IHRoaXMuc3RhcnROb2RlQXQoZXhwci5zdGFydCwgZXhwci5sb2Muc3RhcnQpO1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RtdC5zdGFydCwgc3RtdC5sb2Muc3RhcnQpO1xuXG4gICAgY29uc3QgcmF3ID0gdGhpcy5pbnB1dC5zbGljZShleHByLnN0YXJ0LCBleHByLmVuZCk7XG4gICAgY29uc3QgdmFsID0gKGRpcmVjdGl2ZUxpdGVyYWwudmFsdWUgPSByYXcuc2xpY2UoMSwgLTEpKTsgLy8gcmVtb3ZlIHF1b3Rlc1xuXG4gICAgdGhpcy5hZGRFeHRyYShkaXJlY3RpdmVMaXRlcmFsLCBcInJhd1wiLCByYXcpO1xuICAgIHRoaXMuYWRkRXh0cmEoZGlyZWN0aXZlTGl0ZXJhbCwgXCJyYXdWYWx1ZVwiLCB2YWwpO1xuXG4gICAgZGlyZWN0aXZlLnZhbHVlID0gdGhpcy5maW5pc2hOb2RlQXQoXG4gICAgICBkaXJlY3RpdmVMaXRlcmFsLFxuICAgICAgXCJEaXJlY3RpdmVMaXRlcmFsXCIsXG4gICAgICBleHByLmVuZCxcbiAgICAgIGV4cHIubG9jLmVuZCxcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZUF0KGRpcmVjdGl2ZSwgXCJEaXJlY3RpdmVcIiwgc3RtdC5lbmQsIHN0bXQubG9jLmVuZCk7XG4gIH1cblxuICBwYXJzZUludGVycHJldGVyRGlyZWN0aXZlKCk6IE4uSW50ZXJwcmV0ZXJEaXJlY3RpdmUgfCBudWxsIHtcbiAgICBpZiAoIXRoaXMubWF0Y2godHQuaW50ZXJwcmV0ZXJEaXJlY3RpdmUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBub2RlLnZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSW50ZXJwcmV0ZXJEaXJlY3RpdmVcIik7XG4gIH1cblxuICBpc0xldChjb250ZXh0OiA/c3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLmlzQ29udGV4dHVhbChcImxldFwiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBuZXh0ID0gdGhpcy5uZXh0VG9rZW5TdGFydCgpO1xuICAgIGNvbnN0IG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcbiAgICAvLyBGb3IgYW1iaWd1b3VzIGNhc2VzLCBkZXRlcm1pbmUgaWYgYSBMZXhpY2FsRGVjbGFyYXRpb24gKG9yIG9ubHkgYVxuICAgIC8vIFN0YXRlbWVudCkgaXMgYWxsb3dlZCBoZXJlLiBJZiBjb250ZXh0IGlzIG5vdCBlbXB0eSB0aGVuIG9ubHkgYSBTdGF0ZW1lbnRcbiAgICAvLyBpcyBhbGxvd2VkLiBIb3dldmVyLCBgbGV0IFtgIGlzIGFuIGV4cGxpY2l0IG5lZ2F0aXZlIGxvb2thaGVhZCBmb3JcbiAgICAvLyBFeHByZXNzaW9uU3RhdGVtZW50LCBzbyBzcGVjaWFsLWNhc2UgaXQgZmlyc3QuXG4gICAgaWYgKG5leHRDaCA9PT0gY2hhckNvZGVzLmxlZnRTcXVhcmVCcmFja2V0KSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoY29udGV4dCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG5leHRDaCA9PT0gY2hhckNvZGVzLmxlZnRDdXJseUJyYWNlKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChpc0lkZW50aWZpZXJTdGFydChuZXh0Q2gpKSB7XG4gICAgICBsZXQgcG9zID0gbmV4dCArIDE7XG4gICAgICB3aGlsZSAoaXNJZGVudGlmaWVyQ2hhcih0aGlzLmlucHV0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgICBjb25zdCBpZGVudCA9IHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgcG9zKTtcbiAgICAgIGlmICgha2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvci50ZXN0KGlkZW50KSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgc2luZ2xlIHN0YXRlbWVudC5cbiAgLy9cbiAgLy8gSWYgZXhwZWN0aW5nIGEgc3RhdGVtZW50IGFuZCBmaW5kaW5nIGEgc2xhc2ggb3BlcmF0b3IsIHBhcnNlIGFcbiAgLy8gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuIFRoaXMgaXMgdG8gaGFuZGxlIGNhc2VzIGxpa2VcbiAgLy8gYGlmIChmb28pIC9ibGFoLy5leGVjKGZvbylgLCB3aGVyZSBsb29raW5nIGF0IHRoZSBwcmV2aW91cyB0b2tlblxuICAvLyBkb2VzIG5vdCBoZWxwLlxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1TdGF0ZW1lbnRcbiAgLy8gSW1wb3J0RGVjbGFyYXRpb24gYW5kIEV4cG9ydERlY2xhcmF0aW9uIGFyZSBhbHNvIGhhbmRsZWQgaGVyZSBzbyB3ZSBjYW4gdGhyb3cgcmVjb3ZlcmFibGUgZXJyb3JzXG4gIC8vIHdoZW4gdGhleSBhcmUgbm90IGF0IHRoZSB0b3AgbGV2ZWxcbiAgcGFyc2VTdGF0ZW1lbnQoY29udGV4dDogP3N0cmluZywgdG9wTGV2ZWw/OiBib29sZWFuKTogTi5TdGF0ZW1lbnQge1xuICAgIGlmICh0aGlzLm1hdGNoKHR0LmF0KSkge1xuICAgICAgdGhpcy5wYXJzZURlY29yYXRvcnModHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlU3RhdGVtZW50Q29udGVudChjb250ZXh0LCB0b3BMZXZlbCk7XG4gIH1cblxuICBwYXJzZVN0YXRlbWVudENvbnRlbnQoY29udGV4dDogP3N0cmluZywgdG9wTGV2ZWw6ID9ib29sZWFuKTogTi5TdGF0ZW1lbnQge1xuICAgIGxldCBzdGFydHR5cGUgPSB0aGlzLnN0YXRlLnR5cGU7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbGV0IGtpbmQ7XG5cbiAgICBpZiAodGhpcy5pc0xldChjb250ZXh0KSkge1xuICAgICAgc3RhcnR0eXBlID0gdHQuX3ZhcjtcbiAgICAgIGtpbmQgPSBcImxldFwiO1xuICAgIH1cblxuICAgIC8vIE1vc3QgdHlwZXMgb2Ygc3RhdGVtZW50cyBhcmUgcmVjb2duaXplZCBieSB0aGUga2V5d29yZCB0aGV5XG4gICAgLy8gc3RhcnQgd2l0aC4gTWFueSBhcmUgdHJpdmlhbCB0byBwYXJzZSwgc29tZSByZXF1aXJlIGEgYml0IG9mXG4gICAgLy8gY29tcGxleGl0eS5cblxuICAgIHN3aXRjaCAoc3RhcnR0eXBlKSB7XG4gICAgICBjYXNlIHR0Ll9icmVhazpcbiAgICAgIGNhc2UgdHQuX2NvbnRpbnVlOlxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudChub2RlLCBzdGFydHR5cGUua2V5d29yZCk7XG4gICAgICBjYXNlIHR0Ll9kZWJ1Z2dlcjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VEZWJ1Z2dlclN0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgdHQuX2RvOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZURvU3RhdGVtZW50KG5vZGUpO1xuICAgICAgY2FzZSB0dC5fZm9yOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZvclN0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgdHQuX2Z1bmN0aW9uOlxuICAgICAgICBpZiAodGhpcy5sb29rYWhlYWRDaGFyQ29kZSgpID09PSBjaGFyQ29kZXMuZG90KSBicmVhaztcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJpY3QpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlN0cmljdEZ1bmN0aW9uKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQgIT09IFwiaWZcIiAmJiBjb250ZXh0ICE9PSBcImxhYmVsXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlNsb3BweUZ1bmN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlLCBmYWxzZSwgIWNvbnRleHQpO1xuXG4gICAgICBjYXNlIHR0Ll9jbGFzczpcbiAgICAgICAgaWYgKGNvbnRleHQpIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKG5vZGUsIHRydWUpO1xuXG4gICAgICBjYXNlIHR0Ll9pZjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgdHQuX3JldHVybjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQobm9kZSk7XG4gICAgICBjYXNlIHR0Ll9zd2l0Y2g6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KG5vZGUpO1xuICAgICAgY2FzZSB0dC5fdGhyb3c6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSk7XG4gICAgICBjYXNlIHR0Ll90cnk6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KG5vZGUpO1xuXG4gICAgICBjYXNlIHR0Ll9jb25zdDpcbiAgICAgIGNhc2UgdHQuX3ZhcjpcbiAgICAgICAga2luZCA9IGtpbmQgfHwgdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgaWYgKGNvbnRleHQgJiYga2luZCAhPT0gXCJ2YXJcIikge1xuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlVuZXhwZWN0ZWRMZXhpY2FsRGVjbGFyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVmFyU3RhdGVtZW50KG5vZGUsIGtpbmQpO1xuXG4gICAgICBjYXNlIHR0Ll93aGlsZTpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VXaGlsZVN0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgdHQuX3dpdGg6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlV2l0aFN0YXRlbWVudChub2RlKTtcbiAgICAgIGNhc2UgdHQuYnJhY2VMOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUJsb2NrKCk7XG4gICAgICBjYXNlIHR0LnNlbWk6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSk7XG4gICAgICBjYXNlIHR0Ll9pbXBvcnQ6IHtcbiAgICAgICAgY29uc3QgbmV4dFRva2VuQ2hhckNvZGUgPSB0aGlzLmxvb2thaGVhZENoYXJDb2RlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBuZXh0VG9rZW5DaGFyQ29kZSA9PT0gY2hhckNvZGVzLmxlZnRQYXJlbnRoZXNpcyB8fCAvLyBpbXBvcnQoKVxuICAgICAgICAgIG5leHRUb2tlbkNoYXJDb2RlID09PSBjaGFyQ29kZXMuZG90IC8vIGltcG9ydC5tZXRhXG4gICAgICAgICkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgIGNhc2UgdHQuX2V4cG9ydDoge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmUgJiYgIXRvcExldmVsKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW5leHBlY3RlZEltcG9ydEV4cG9ydCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5leHQoKTsgLy8gZWF0IGBpbXBvcnRgL2BleHBvcnRgXG5cbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgaWYgKHN0YXJ0dHlwZSA9PT0gdHQuX2ltcG9ydCkge1xuICAgICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VJbXBvcnQobm9kZSk7XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXN1bHQudHlwZSA9PT0gXCJJbXBvcnREZWNsYXJhdGlvblwiICYmXG4gICAgICAgICAgICAoIXJlc3VsdC5pbXBvcnRLaW5kIHx8IHJlc3VsdC5pbXBvcnRLaW5kID09PSBcInZhbHVlXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnNhd1VuYW1iaWd1b3VzRVNNID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZUV4cG9ydChub2RlKTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChyZXN1bHQudHlwZSA9PT0gXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIgJiZcbiAgICAgICAgICAgICAgKCFyZXN1bHQuZXhwb3J0S2luZCB8fCByZXN1bHQuZXhwb3J0S2luZCA9PT0gXCJ2YWx1ZVwiKSkgfHxcbiAgICAgICAgICAgIChyZXN1bHQudHlwZSA9PT0gXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiICYmXG4gICAgICAgICAgICAgICghcmVzdWx0LmV4cG9ydEtpbmQgfHwgcmVzdWx0LmV4cG9ydEtpbmQgPT09IFwidmFsdWVcIikpIHx8XG4gICAgICAgICAgICByZXN1bHQudHlwZSA9PT0gXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIlxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zYXdVbmFtYmlndW91c0VTTSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hc3NlcnRNb2R1bGVOb2RlQWxsb3dlZChub2RlKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLmlzQXN5bmNGdW5jdGlvbigpKSB7XG4gICAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgICAgICAgIEVycm9ycy5Bc3luY0Z1bmN0aW9uSW5TaW5nbGVTdGF0ZW1lbnRDb250ZXh0LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlLCB0cnVlLCAhY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc3RhdGVtZW50IGRvZXMgbm90IHN0YXJ0IHdpdGggYSBzdGF0ZW1lbnQga2V5d29yZCBvciBhXG4gICAgLy8gYnJhY2UsIGl0J3MgYW4gRXhwcmVzc2lvblN0YXRlbWVudCBvciBMYWJlbGVkU3RhdGVtZW50LiBXZVxuICAgIC8vIHNpbXBseSBzdGFydCBwYXJzaW5nIGFuIGV4cHJlc3Npb24sIGFuZCBhZnRlcndhcmRzLCBpZiB0aGVcbiAgICAvLyBuZXh0IHRva2VuIGlzIGEgY29sb24gYW5kIHRoZSBleHByZXNzaW9uIHdhcyBhIHNpbXBsZVxuICAgIC8vIElkZW50aWZpZXIgbm9kZSwgd2Ugc3dpdGNoIHRvIGludGVycHJldGluZyBpdCBhcyBhIGxhYmVsLlxuICAgIGNvbnN0IG1heWJlTmFtZSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgY29uc3QgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICBpZiAoXG4gICAgICBzdGFydHR5cGUgPT09IHR0Lm5hbWUgJiZcbiAgICAgIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiZcbiAgICAgIHRoaXMuZWF0KHR0LmNvbG9uKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VMYWJlbGVkU3RhdGVtZW50KG5vZGUsIG1heWJlTmFtZSwgZXhwciwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudChub2RlLCBleHByKTtcbiAgICB9XG4gIH1cblxuICBhc3NlcnRNb2R1bGVOb2RlQWxsb3dlZChub2RlOiBOLk5vZGUpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmUgJiYgIXRoaXMuaW5Nb2R1bGUpIHtcbiAgICAgIHRoaXMucmFpc2VXaXRoRGF0YShcbiAgICAgICAgbm9kZS5zdGFydCxcbiAgICAgICAge1xuICAgICAgICAgIGNvZGU6IFwiQkFCRUxfUEFSU0VSX1NPVVJDRVRZUEVfTU9EVUxFX1JFUVVJUkVEXCIsXG4gICAgICAgIH0sXG4gICAgICAgIEVycm9ycy5JbXBvcnRPdXRzaWRlTW9kdWxlLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB0YWtlRGVjb3JhdG9ycyhub2RlOiBOLkhhc0RlY29yYXRvcnMpOiB2b2lkIHtcbiAgICBjb25zdCBkZWNvcmF0b3JzID0gdGhpcy5zdGF0ZS5kZWNvcmF0b3JTdGFja1tcbiAgICAgIHRoaXMuc3RhdGUuZGVjb3JhdG9yU3RhY2subGVuZ3RoIC0gMVxuICAgIF07XG4gICAgaWYgKGRlY29yYXRvcnMubGVuZ3RoKSB7XG4gICAgICBub2RlLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzO1xuICAgICAgdGhpcy5yZXNldFN0YXJ0TG9jYXRpb25Gcm9tTm9kZShub2RlLCBkZWNvcmF0b3JzWzBdKTtcbiAgICAgIHRoaXMuc3RhdGUuZGVjb3JhdG9yU3RhY2tbdGhpcy5zdGF0ZS5kZWNvcmF0b3JTdGFjay5sZW5ndGggLSAxXSA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGNhbkhhdmVMZWFkaW5nRGVjb3JhdG9yKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1hdGNoKHR0Ll9jbGFzcyk7XG4gIH1cblxuICBwYXJzZURlY29yYXRvcnMoYWxsb3dFeHBvcnQ/OiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgY3VycmVudENvbnRleHREZWNvcmF0b3JzID0gdGhpcy5zdGF0ZS5kZWNvcmF0b3JTdGFja1tcbiAgICAgIHRoaXMuc3RhdGUuZGVjb3JhdG9yU3RhY2subGVuZ3RoIC0gMVxuICAgIF07XG4gICAgd2hpbGUgKHRoaXMubWF0Y2godHQuYXQpKSB7XG4gICAgICBjb25zdCBkZWNvcmF0b3IgPSB0aGlzLnBhcnNlRGVjb3JhdG9yKCk7XG4gICAgICBjdXJyZW50Q29udGV4dERlY29yYXRvcnMucHVzaChkZWNvcmF0b3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1hdGNoKHR0Ll9leHBvcnQpKSB7XG4gICAgICBpZiAoIWFsbG93RXhwb3J0KSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaGFzUGx1Z2luKFwiZGVjb3JhdG9yc1wiKSAmJlxuICAgICAgICAhdGhpcy5nZXRQbHVnaW5PcHRpb24oXCJkZWNvcmF0b3JzXCIsIFwiZGVjb3JhdG9yc0JlZm9yZUV4cG9ydFwiKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLkRlY29yYXRvckV4cG9ydENsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmNhbkhhdmVMZWFkaW5nRGVjb3JhdG9yKCkpIHtcbiAgICAgIHRocm93IHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlVuZXhwZWN0ZWRMZWFkaW5nRGVjb3JhdG9yKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZURlY29yYXRvcigpOiBOLkRlY29yYXRvciB7XG4gICAgdGhpcy5leHBlY3RPbmVQbHVnaW4oW1wiZGVjb3JhdG9ycy1sZWdhY3lcIiwgXCJkZWNvcmF0b3JzXCJdKTtcblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwiZGVjb3JhdG9yc1wiKSkge1xuICAgICAgLy8gRXZlcnkgdGltZSBhIGRlY29yYXRvciBjbGFzcyBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCwgYSBuZXcgZW1wdHkgYXJyYXkgaXMgcHVzaGVkIG9udG8gdGhlIHN0YWNrXG4gICAgICAvLyBTbyB0aGF0IHRoZSBkZWNvcmF0b3JzIG9mIGFueSBuZXN0ZWQgY2xhc3MgZXhwcmVzc2lvbnMgd2lsbCBiZSBkZWFsdCB3aXRoIHNlcGFyYXRlbHlcbiAgICAgIHRoaXMuc3RhdGUuZGVjb3JhdG9yU3RhY2sucHVzaChbXSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5zdGF0ZS5zdGFydDtcbiAgICAgIGNvbnN0IHN0YXJ0TG9jID0gdGhpcy5zdGF0ZS5zdGFydExvYztcbiAgICAgIGxldCBleHByOiBOLkV4cHJlc3Npb247XG5cbiAgICAgIGlmICh0aGlzLmVhdCh0dC5wYXJlbkwpKSB7XG4gICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwciA9IHRoaXMucGFyc2VJZGVudGlmaWVyKGZhbHNlKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5lYXQodHQuZG90KSkge1xuICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICAgICAgbm9kZS5vYmplY3QgPSBleHByO1xuICAgICAgICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICAgICAgICBub2RlLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgZXhwciA9IHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk1lbWJlckV4cHJlc3Npb25cIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy5wYXJzZU1heWJlRGVjb3JhdG9yQXJndW1lbnRzKGV4cHIpO1xuICAgICAgdGhpcy5zdGF0ZS5kZWNvcmF0b3JTdGFjay5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5leHByZXNzaW9uID0gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWNvcmF0b3JcIik7XG4gIH1cblxuICBwYXJzZU1heWJlRGVjb3JhdG9yQXJndW1lbnRzKGV4cHI6IE4uRXhwcmVzc2lvbik6IE4uRXhwcmVzc2lvbiB7XG4gICAgaWYgKHRoaXMuZWF0KHR0LnBhcmVuTCkpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0Tm9kZShleHByKTtcbiAgICAgIG5vZGUuY2FsbGVlID0gZXhwcjtcbiAgICAgIG5vZGUuYXJndW1lbnRzID0gdGhpcy5wYXJzZUNhbGxFeHByZXNzaW9uQXJndW1lbnRzKHR0LnBhcmVuUiwgZmFsc2UpO1xuICAgICAgdGhpcy50b1JlZmVyZW5jZWRMaXN0KG5vZGUuYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDYWxsRXhwcmVzc2lvblwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxuXG4gIHBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudChcbiAgICBub2RlOiBOLkJyZWFrU3RhdGVtZW50IHwgTi5Db250aW51ZVN0YXRlbWVudCxcbiAgICBrZXl3b3JkOiBzdHJpbmcsXG4gICk6IE4uQnJlYWtTdGF0ZW1lbnQgfCBOLkNvbnRpbnVlU3RhdGVtZW50IHtcbiAgICBjb25zdCBpc0JyZWFrID0ga2V5d29yZCA9PT0gXCJicmVha1wiO1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgaWYgKHRoaXMuaXNMaW5lVGVybWluYXRvcigpKSB7XG4gICAgICBub2RlLmxhYmVsID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5sYWJlbCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIH1cblxuICAgIHRoaXMudmVyaWZ5QnJlYWtDb250aW51ZShub2RlLCBrZXl3b3JkKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoXG4gICAgICBub2RlLFxuICAgICAgaXNCcmVhayA/IFwiQnJlYWtTdGF0ZW1lbnRcIiA6IFwiQ29udGludWVTdGF0ZW1lbnRcIixcbiAgICApO1xuICB9XG5cbiAgdmVyaWZ5QnJlYWtDb250aW51ZShcbiAgICBub2RlOiBOLkJyZWFrU3RhdGVtZW50IHwgTi5Db250aW51ZVN0YXRlbWVudCxcbiAgICBrZXl3b3JkOiBzdHJpbmcsXG4gICkge1xuICAgIGNvbnN0IGlzQnJlYWsgPSBrZXl3b3JkID09PSBcImJyZWFrXCI7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuc3RhdGUubGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBsYWIgPSB0aGlzLnN0YXRlLmxhYmVsc1tpXTtcbiAgICAgIGlmIChub2RlLmxhYmVsID09IG51bGwgfHwgbGFiLm5hbWUgPT09IG5vZGUubGFiZWwubmFtZSkge1xuICAgICAgICBpZiAobGFiLmtpbmQgIT0gbnVsbCAmJiAoaXNCcmVhayB8fCBsYWIua2luZCA9PT0gXCJsb29wXCIpKSBicmVhaztcbiAgICAgICAgaWYgKG5vZGUubGFiZWwgJiYgaXNCcmVhaykgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID09PSB0aGlzLnN0YXRlLmxhYmVscy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgRXJyb3JzLklsbGVnYWxCcmVha0NvbnRpbnVlLCBrZXl3b3JkKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZURlYnVnZ2VyU3RhdGVtZW50KG5vZGU6IE4uRGVidWdnZXJTdGF0ZW1lbnQpOiBOLkRlYnVnZ2VyU3RhdGVtZW50IHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWJ1Z2dlclN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIHBhcnNlSGVhZGVyRXhwcmVzc2lvbigpOiBOLkV4cHJlc3Npb24ge1xuICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTCk7XG4gICAgY29uc3QgdmFsID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBwYXJzZURvU3RhdGVtZW50KG5vZGU6IE4uRG9XaGlsZVN0YXRlbWVudCk6IE4uRG9XaGlsZVN0YXRlbWVudCB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5zdGF0ZS5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuXG4gICAgbm9kZS5ib2R5ID1cbiAgICAgIC8vIEZvciB0aGUgc21hcnRQaXBlbGluZXMgcGx1Z2luOiBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlclxuICAgICAgLy8gY29udGV4dHMgd2l0aGluIHRoZSBsb29wIGJvZHkuIFRoZXkgYXJlIHBlcm1pdHRlZCBpbiB0ZXN0IGV4cHJlc3Npb25zLFxuICAgICAgLy8gb3V0c2lkZSBvZiB0aGUgbG9vcCBib2R5LlxuICAgICAgdGhpcy53aXRoVG9waWNGb3JiaWRkaW5nQ29udGV4dCgoKSA9PlxuICAgICAgICAvLyBQYXJzZSB0aGUgbG9vcCBib2R5J3MgYm9keS5cbiAgICAgICAgdGhpcy5wYXJzZVN0YXRlbWVudChcImRvXCIpLFxuICAgICAgKTtcblxuICAgIHRoaXMuc3RhdGUubGFiZWxzLnBvcCgpO1xuXG4gICAgdGhpcy5leHBlY3QodHQuX3doaWxlKTtcbiAgICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlSGVhZGVyRXhwcmVzc2lvbigpO1xuICAgIHRoaXMuZWF0KHR0LnNlbWkpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEb1doaWxlU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgLy8gRGlzYW1iaWd1YXRpbmcgYmV0d2VlbiBhIGBmb3JgIGFuZCBhIGBmb3JgL2BpbmAgb3IgYGZvcmAvYG9mYFxuICAvLyBsb29wIGlzIG5vbi10cml2aWFsLiBCYXNpY2FsbHksIHdlIGhhdmUgdG8gcGFyc2UgdGhlIGluaXQgYHZhcmBcbiAgLy8gc3RhdGVtZW50IG9yIGV4cHJlc3Npb24sIGRpc2FsbG93aW5nIHRoZSBgaW5gIG9wZXJhdG9yIChzZWVcbiAgLy8gdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gYHBhcnNlRXhwcmVzc2lvbmApLCBhbmQgdGhlbiBjaGVja1xuICAvLyB3aGV0aGVyIHRoZSBuZXh0IHRva2VuIGlzIGBpbmAgb3IgYG9mYC4gV2hlbiB0aGVyZSBpcyBubyBpbml0XG4gIC8vIHBhcnQgKHNlbWljb2xvbiBpbW1lZGlhdGVseSBhZnRlciB0aGUgb3BlbmluZyBwYXJlbnRoZXNpcyksIGl0XG4gIC8vIGlzIGEgcmVndWxhciBgZm9yYCBsb29wLlxuXG4gIHBhcnNlRm9yU3RhdGVtZW50KG5vZGU6IE4uTm9kZSk6IE4uRm9yTGlrZSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5zdGF0ZS5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuXG4gICAgbGV0IGF3YWl0QXQgPSAtMTtcbiAgICBpZiAodGhpcy5pc0F3YWl0QWxsb3dlZCgpICYmIHRoaXMuZWF0Q29udGV4dHVhbChcImF3YWl0XCIpKSB7XG4gICAgICBhd2FpdEF0ID0gdGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQ7XG4gICAgfVxuICAgIHRoaXMuc2NvcGUuZW50ZXIoU0NPUEVfT1RIRVIpO1xuICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTCk7XG5cbiAgICBpZiAodGhpcy5tYXRjaCh0dC5zZW1pKSkge1xuICAgICAgaWYgKGF3YWl0QXQgPiAtMSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUZvcihub2RlLCBudWxsKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0xldCA9IHRoaXMuaXNMZXQoKTtcbiAgICBpZiAodGhpcy5tYXRjaCh0dC5fdmFyKSB8fCB0aGlzLm1hdGNoKHR0Ll9jb25zdCkgfHwgaXNMZXQpIHtcbiAgICAgIGNvbnN0IGluaXQgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgY29uc3Qga2luZCA9IGlzTGV0ID8gXCJsZXRcIiA6IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHRoaXMucGFyc2VWYXIoaW5pdCwgdHJ1ZSwga2luZCk7XG4gICAgICB0aGlzLmZpbmlzaE5vZGUoaW5pdCwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpO1xuXG4gICAgICBpZiAoXG4gICAgICAgICh0aGlzLm1hdGNoKHR0Ll9pbikgfHwgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkgJiZcbiAgICAgICAgaW5pdC5kZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLCBpbml0LCBhd2FpdEF0KTtcbiAgICAgIH1cbiAgICAgIGlmIChhd2FpdEF0ID4gLTEpIHtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVmRXhwcmVzc2lvbkVycm9ycyA9IG5ldyBFeHByZXNzaW9uRXJyb3JzKCk7XG4gICAgY29uc3QgaW5pdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHRydWUsIHJlZkV4cHJlc3Npb25FcnJvcnMpO1xuICAgIGlmICh0aGlzLm1hdGNoKHR0Ll9pbikgfHwgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkge1xuICAgICAgdGhpcy50b0Fzc2lnbmFibGUoaW5pdCk7XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIilcbiAgICAgICAgPyBcImZvci1vZiBzdGF0ZW1lbnRcIlxuICAgICAgICA6IFwiZm9yLWluIHN0YXRlbWVudFwiO1xuICAgICAgdGhpcy5jaGVja0xWYWwoaW5pdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGRlc2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdCwgYXdhaXRBdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkV4cHJlc3Npb25FcnJvcnMsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoYXdhaXRBdCA+IC0xKSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIGluaXQpO1xuICB9XG5cbiAgcGFyc2VGdW5jdGlvblN0YXRlbWVudChcbiAgICBub2RlOiBOLkZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gICAgaXNBc3luYz86IGJvb2xlYW4sXG4gICAgZGVjbGFyYXRpb25Qb3NpdGlvbj86IGJvb2xlYW4sXG4gICk6IE4uRnVuY3Rpb25EZWNsYXJhdGlvbiB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihcbiAgICAgIG5vZGUsXG4gICAgICBGVU5DX1NUQVRFTUVOVCB8IChkZWNsYXJhdGlvblBvc2l0aW9uID8gMCA6IEZVTkNfSEFOR0lOR19TVEFURU1FTlQpLFxuICAgICAgaXNBc3luYyxcbiAgICApO1xuICB9XG5cbiAgcGFyc2VJZlN0YXRlbWVudChub2RlOiBOLklmU3RhdGVtZW50KTogTi5JZlN0YXRlbWVudCB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZUhlYWRlckV4cHJlc3Npb24oKTtcbiAgICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KFwiaWZcIik7XG4gICAgbm9kZS5hbHRlcm5hdGUgPSB0aGlzLmVhdCh0dC5fZWxzZSkgPyB0aGlzLnBhcnNlU3RhdGVtZW50KFwiaWZcIikgOiBudWxsO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJZlN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIHBhcnNlUmV0dXJuU3RhdGVtZW50KG5vZGU6IE4uUmV0dXJuU3RhdGVtZW50KTogTi5SZXR1cm5TdGF0ZW1lbnQge1xuICAgIGlmICghdGhpcy5wcm9kUGFyYW0uaGFzUmV0dXJuICYmICF0aGlzLm9wdGlvbnMuYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb24pIHtcbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLklsbGVnYWxSZXR1cm4pO1xuICAgIH1cblxuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgLy8gSW4gYHJldHVybmAgKGFuZCBgYnJlYWtgL2Bjb250aW51ZWApLCB0aGUga2V5d29yZHMgd2l0aFxuICAgIC8vIG9wdGlvbmFsIGFyZ3VtZW50cywgd2UgZWFnZXJseSBsb29rIGZvciBhIHNlbWljb2xvbiBvciB0aGVcbiAgICAvLyBwb3NzaWJpbGl0eSB0byBpbnNlcnQgb25lLlxuXG4gICAgaWYgKHRoaXMuaXNMaW5lVGVybWluYXRvcigpKSB7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXR1cm5TdGF0ZW1lbnRcIik7XG4gIH1cblxuICBwYXJzZVN3aXRjaFN0YXRlbWVudChub2RlOiBOLlN3aXRjaFN0YXRlbWVudCk6IE4uU3dpdGNoU3RhdGVtZW50IHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VIZWFkZXJFeHByZXNzaW9uKCk7XG4gICAgY29uc3QgY2FzZXMgPSAobm9kZS5jYXNlcyA9IFtdKTtcbiAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuICAgIHRoaXMuc3RhdGUubGFiZWxzLnB1c2goc3dpdGNoTGFiZWwpO1xuICAgIHRoaXMuc2NvcGUuZW50ZXIoU0NPUEVfT1RIRVIpO1xuXG4gICAgLy8gU3RhdGVtZW50cyB1bmRlciBtdXN0IGJlIGdyb3VwZWQgKGJ5IGxhYmVsKSBpbiBTd2l0Y2hDYXNlXG4gICAgLy8gbm9kZXMuIGBjdXJgIGlzIHVzZWQgdG8ga2VlcCB0aGUgbm9kZSB0aGF0IHdlIGFyZSBjdXJyZW50bHlcbiAgICAvLyBhZGRpbmcgc3RhdGVtZW50cyB0by5cblxuICAgIGxldCBjdXI7XG4gICAgZm9yIChsZXQgc2F3RGVmYXVsdDsgIXRoaXMubWF0Y2godHQuYnJhY2VSKTsgKSB7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5fY2FzZSkgfHwgdGhpcy5tYXRjaCh0dC5fZGVmYXVsdCkpIHtcbiAgICAgICAgY29uc3QgaXNDYXNlID0gdGhpcy5tYXRjaCh0dC5fY2FzZSk7XG4gICAgICAgIGlmIChjdXIpIHRoaXMuZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTtcbiAgICAgICAgY2FzZXMucHVzaCgoY3VyID0gdGhpcy5zdGFydE5vZGUoKSkpO1xuICAgICAgICBjdXIuY29uc2VxdWVudCA9IFtdO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgaWYgKGlzQ2FzZSkge1xuICAgICAgICAgIGN1ci50ZXN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2F3RGVmYXVsdCkge1xuICAgICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnQsXG4gICAgICAgICAgICAgIEVycm9ycy5NdWx0aXBsZURlZmF1bHRzSW5Td2l0Y2gsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzYXdEZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICBjdXIudGVzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leHBlY3QodHQuY29sb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cikge1xuICAgICAgICAgIGN1ci5jb25zZXF1ZW50LnB1c2godGhpcy5wYXJzZVN0YXRlbWVudChudWxsKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zY29wZS5leGl0KCk7XG4gICAgaWYgKGN1cikgdGhpcy5maW5pc2hOb2RlKGN1ciwgXCJTd2l0Y2hDYXNlXCIpO1xuICAgIHRoaXMubmV4dCgpOyAvLyBDbG9zaW5nIGJyYWNlXG4gICAgdGhpcy5zdGF0ZS5sYWJlbHMucG9wKCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlN3aXRjaFN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIHBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZTogTi5UaHJvd1N0YXRlbWVudCk6IE4uVGhyb3dTdGF0ZW1lbnQge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIGlmICh0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpKSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUubGFzdFRva0VuZCwgRXJyb3JzLk5ld2xpbmVBZnRlclRocm93KTtcbiAgICB9XG4gICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVGhyb3dTdGF0ZW1lbnRcIik7XG4gIH1cblxuICBwYXJzZUNhdGNoQ2xhdXNlUGFyYW0oKTogTi5QYXR0ZXJuIHtcbiAgICBjb25zdCBwYXJhbSA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuXG4gICAgY29uc3Qgc2ltcGxlID0gcGFyYW0udHlwZSA9PT0gXCJJZGVudGlmaWVyXCI7XG4gICAgdGhpcy5zY29wZS5lbnRlcihzaW1wbGUgPyBTQ09QRV9TSU1QTEVfQ0FUQ0ggOiAwKTtcbiAgICB0aGlzLmNoZWNrTFZhbChwYXJhbSwgQklORF9MRVhJQ0FMLCBudWxsLCBcImNhdGNoIGNsYXVzZVwiKTtcblxuICAgIHJldHVybiBwYXJhbTtcbiAgfVxuXG4gIHBhcnNlVHJ5U3RhdGVtZW50KG5vZGU6IE4uVHJ5U3RhdGVtZW50KTogTi5UcnlTdGF0ZW1lbnQge1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgbm9kZS5ibG9jayA9IHRoaXMucGFyc2VCbG9jaygpO1xuICAgIG5vZGUuaGFuZGxlciA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5tYXRjaCh0dC5fY2F0Y2gpKSB7XG4gICAgICBjb25zdCBjbGF1c2UgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBpZiAodGhpcy5tYXRjaCh0dC5wYXJlbkwpKSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTCk7XG4gICAgICAgIGNsYXVzZS5wYXJhbSA9IHRoaXMucGFyc2VDYXRjaENsYXVzZVBhcmFtKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGF1c2UucGFyYW0gPSBudWxsO1xuICAgICAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX09USEVSKTtcbiAgICAgIH1cblxuICAgICAgY2xhdXNlLmJvZHkgPVxuICAgICAgICAvLyBGb3IgdGhlIHNtYXJ0UGlwZWxpbmVzIHBsdWdpbjogRGlzYWJsZSB0b3BpYyByZWZlcmVuY2VzIGZyb20gb3V0ZXJcbiAgICAgICAgLy8gY29udGV4dHMgd2l0aGluIHRoZSBjYXRjaCBjbGF1c2UncyBib2R5LlxuICAgICAgICB0aGlzLndpdGhUb3BpY0ZvcmJpZGRpbmdDb250ZXh0KCgpID0+XG4gICAgICAgICAgLy8gUGFyc2UgdGhlIGNhdGNoIGNsYXVzZSdzIGJvZHkuXG4gICAgICAgICAgdGhpcy5wYXJzZUJsb2NrKGZhbHNlLCBmYWxzZSksXG4gICAgICAgICk7XG4gICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcblxuICAgICAgbm9kZS5oYW5kbGVyID0gdGhpcy5maW5pc2hOb2RlKGNsYXVzZSwgXCJDYXRjaENsYXVzZVwiKTtcbiAgICB9XG5cbiAgICBub2RlLmZpbmFsaXplciA9IHRoaXMuZWF0KHR0Ll9maW5hbGx5KSA/IHRoaXMucGFyc2VCbG9jaygpIDogbnVsbDtcblxuICAgIGlmICghbm9kZS5oYW5kbGVyICYmICFub2RlLmZpbmFsaXplcikge1xuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBFcnJvcnMuTm9DYXRjaE9yRmluYWxseSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRyeVN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIHBhcnNlVmFyU3RhdGVtZW50KFxuICAgIG5vZGU6IE4uVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgICBraW5kOiBcInZhclwiIHwgXCJsZXRcIiB8IFwiY29uc3RcIixcbiAgKTogTi5WYXJpYWJsZURlY2xhcmF0aW9uIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnBhcnNlVmFyKG5vZGUsIGZhbHNlLCBraW5kKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpO1xuICB9XG5cbiAgcGFyc2VXaGlsZVN0YXRlbWVudChub2RlOiBOLldoaWxlU3RhdGVtZW50KTogTi5XaGlsZVN0YXRlbWVudCB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZUhlYWRlckV4cHJlc3Npb24oKTtcbiAgICB0aGlzLnN0YXRlLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG5cbiAgICBub2RlLmJvZHkgPVxuICAgICAgLy8gRm9yIHRoZSBzbWFydFBpcGVsaW5lcyBwbHVnaW46XG4gICAgICAvLyBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlciBjb250ZXh0cyB3aXRoaW4gdGhlIGxvb3AgYm9keS5cbiAgICAgIC8vIFRoZXkgYXJlIHBlcm1pdHRlZCBpbiB0ZXN0IGV4cHJlc3Npb25zLCBvdXRzaWRlIG9mIHRoZSBsb29wIGJvZHkuXG4gICAgICB0aGlzLndpdGhUb3BpY0ZvcmJpZGRpbmdDb250ZXh0KCgpID0+XG4gICAgICAgIC8vIFBhcnNlIGxvb3AgYm9keS5cbiAgICAgICAgdGhpcy5wYXJzZVN0YXRlbWVudChcIndoaWxlXCIpLFxuICAgICAgKTtcblxuICAgIHRoaXMuc3RhdGUubGFiZWxzLnBvcCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIldoaWxlU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgcGFyc2VXaXRoU3RhdGVtZW50KG5vZGU6IE4uV2l0aFN0YXRlbWVudCk6IE4uV2l0aFN0YXRlbWVudCB7XG4gICAgaWYgKHRoaXMuc3RhdGUuc3RyaWN0KSB7XG4gICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5TdHJpY3RXaXRoKTtcbiAgICB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5vYmplY3QgPSB0aGlzLnBhcnNlSGVhZGVyRXhwcmVzc2lvbigpO1xuXG4gICAgbm9kZS5ib2R5ID1cbiAgICAgIC8vIEZvciB0aGUgc21hcnRQaXBlbGluZXMgcGx1Z2luOlxuICAgICAgLy8gRGlzYWJsZSB0b3BpYyByZWZlcmVuY2VzIGZyb20gb3V0ZXIgY29udGV4dHMgd2l0aGluIHRoZSB3aXRoIHN0YXRlbWVudCdzIGJvZHkuXG4gICAgICAvLyBUaGV5IGFyZSBwZXJtaXR0ZWQgaW4gZnVuY3Rpb24gZGVmYXVsdC1wYXJhbWV0ZXIgZXhwcmVzc2lvbnMsIHdoaWNoIGFyZVxuICAgICAgLy8gcGFydCBvZiB0aGUgb3V0ZXIgY29udGV4dCwgb3V0c2lkZSBvZiB0aGUgd2l0aCBzdGF0ZW1lbnQncyBib2R5LlxuICAgICAgdGhpcy53aXRoVG9waWNGb3JiaWRkaW5nQ29udGV4dCgoKSA9PlxuICAgICAgICAvLyBQYXJzZSB0aGUgc3RhdGVtZW50IGJvZHkuXG4gICAgICAgIHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJ3aXRoXCIpLFxuICAgICAgKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaXRoU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgcGFyc2VFbXB0eVN0YXRlbWVudChub2RlOiBOLkVtcHR5U3RhdGVtZW50KTogTi5FbXB0eVN0YXRlbWVudCB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVtcHR5U3RhdGVtZW50XCIpO1xuICB9XG5cbiAgcGFyc2VMYWJlbGVkU3RhdGVtZW50KFxuICAgIG5vZGU6IE4uTGFiZWxlZFN0YXRlbWVudCxcbiAgICBtYXliZU5hbWU6IHN0cmluZyxcbiAgICBleHByOiBOLklkZW50aWZpZXIsXG4gICAgY29udGV4dDogP3N0cmluZyxcbiAgKTogTi5MYWJlbGVkU3RhdGVtZW50IHtcbiAgICBmb3IgKGNvbnN0IGxhYmVsIG9mIHRoaXMuc3RhdGUubGFiZWxzKSB7XG4gICAgICBpZiAobGFiZWwubmFtZSA9PT0gbWF5YmVOYW1lKSB7XG4gICAgICAgIHRoaXMucmFpc2UoZXhwci5zdGFydCwgRXJyb3JzLkxhYmVsUmVkZWNsYXJhdGlvbiwgbWF5YmVOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBraW5kID0gdGhpcy5zdGF0ZS50eXBlLmlzTG9vcFxuICAgICAgPyBcImxvb3BcIlxuICAgICAgOiB0aGlzLm1hdGNoKHR0Ll9zd2l0Y2gpXG4gICAgICA/IFwic3dpdGNoXCJcbiAgICAgIDogbnVsbDtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZS5sYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5zdGF0ZS5sYWJlbHNbaV07XG4gICAgICBpZiAobGFiZWwuc3RhdGVtZW50U3RhcnQgPT09IG5vZGUuc3RhcnQpIHtcbiAgICAgICAgbGFiZWwuc3RhdGVtZW50U3RhcnQgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuICAgICAgICBsYWJlbC5raW5kID0ga2luZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUubGFiZWxzLnB1c2goe1xuICAgICAgbmFtZTogbWF5YmVOYW1lLFxuICAgICAga2luZDoga2luZCxcbiAgICAgIHN0YXRlbWVudFN0YXJ0OiB0aGlzLnN0YXRlLnN0YXJ0LFxuICAgIH0pO1xuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXG4gICAgICBjb250ZXh0XG4gICAgICAgID8gY29udGV4dC5pbmRleE9mKFwibGFiZWxcIikgPT09IC0xXG4gICAgICAgICAgPyBjb250ZXh0ICsgXCJsYWJlbFwiXG4gICAgICAgICAgOiBjb250ZXh0XG4gICAgICAgIDogXCJsYWJlbFwiLFxuICAgICk7XG5cbiAgICB0aGlzLnN0YXRlLmxhYmVscy5wb3AoKTtcbiAgICBub2RlLmxhYmVsID0gZXhwcjtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGFiZWxlZFN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIHBhcnNlRXhwcmVzc2lvblN0YXRlbWVudChcbiAgICBub2RlOiBOLkV4cHJlc3Npb25TdGF0ZW1lbnQsXG4gICAgZXhwcjogTi5FeHByZXNzaW9uLFxuICApOiBOLlN0YXRlbWVudCB7XG4gICAgbm9kZS5leHByZXNzaW9uID0gZXhwcjtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHByZXNzaW9uU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgLy8gUGFyc2UgYSBzZW1pY29sb24tZW5jbG9zZWQgYmxvY2sgb2Ygc3RhdGVtZW50cywgaGFuZGxpbmcgYFwidXNlXG4gIC8vIHN0cmljdFwiYCBkZWNsYXJhdGlvbnMgd2hlbiBgYWxsb3dTdHJpY3RgIGlzIHRydWUgKHVzZWQgZm9yXG4gIC8vIGZ1bmN0aW9uIGJvZGllcykuXG5cbiAgcGFyc2VCbG9jayhcbiAgICBhbGxvd0RpcmVjdGl2ZXM/OiBib29sZWFuID0gZmFsc2UsXG4gICAgY3JlYXRlTmV3TGV4aWNhbFNjb3BlPzogYm9vbGVhbiA9IHRydWUsXG4gICAgYWZ0ZXJCbG9ja1BhcnNlPzogKGhhc1N0cmljdE1vZGVEaXJlY3RpdmU6IGJvb2xlYW4pID0+IHZvaWQsXG4gICk6IE4uQmxvY2tTdGF0ZW1lbnQge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlTCk7XG4gICAgaWYgKGNyZWF0ZU5ld0xleGljYWxTY29wZSkge1xuICAgICAgdGhpcy5zY29wZS5lbnRlcihTQ09QRV9PVEhFUik7XG4gICAgfVxuICAgIHRoaXMucGFyc2VCbG9ja0JvZHkoXG4gICAgICBub2RlLFxuICAgICAgYWxsb3dEaXJlY3RpdmVzLFxuICAgICAgZmFsc2UsXG4gICAgICB0dC5icmFjZVIsXG4gICAgICBhZnRlckJsb2NrUGFyc2UsXG4gICAgKTtcbiAgICBpZiAoY3JlYXRlTmV3TGV4aWNhbFNjb3BlKSB7XG4gICAgICB0aGlzLnNjb3BlLmV4aXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkJsb2NrU3RhdGVtZW50XCIpO1xuICB9XG5cbiAgaXNWYWxpZERpcmVjdGl2ZShzdG10OiBOLlN0YXRlbWVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBzdG10LnR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiICYmXG4gICAgICBzdG10LmV4cHJlc3Npb24udHlwZSA9PT0gXCJTdHJpbmdMaXRlcmFsXCIgJiZcbiAgICAgICFzdG10LmV4cHJlc3Npb24uZXh0cmEucGFyZW50aGVzaXplZFxuICAgICk7XG4gIH1cblxuICBwYXJzZUJsb2NrQm9keShcbiAgICBub2RlOiBOLkJsb2NrU3RhdGVtZW50TGlrZSxcbiAgICBhbGxvd0RpcmVjdGl2ZXM6ID9ib29sZWFuLFxuICAgIHRvcExldmVsOiBib29sZWFuLFxuICAgIGVuZDogVG9rZW5UeXBlLFxuICAgIGFmdGVyQmxvY2tQYXJzZT86IChoYXNTdHJpY3RNb2RlRGlyZWN0aXZlOiBib29sZWFuKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBib2R5ID0gKG5vZGUuYm9keSA9IFtdKTtcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gKG5vZGUuZGlyZWN0aXZlcyA9IFtdKTtcbiAgICB0aGlzLnBhcnNlQmxvY2tPck1vZHVsZUJsb2NrQm9keShcbiAgICAgIGJvZHksXG4gICAgICBhbGxvd0RpcmVjdGl2ZXMgPyBkaXJlY3RpdmVzIDogdW5kZWZpbmVkLFxuICAgICAgdG9wTGV2ZWwsXG4gICAgICBlbmQsXG4gICAgICBhZnRlckJsb2NrUGFyc2UsXG4gICAgKTtcbiAgfVxuXG4gIC8vIFVuZGVmaW5lZCBkaXJlY3RpdmVzIG1lYW5zIHRoYXQgZGlyZWN0aXZlcyBhcmUgbm90IGFsbG93ZWQuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUJsb2NrXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLU1vZHVsZUJvZHlcbiAgcGFyc2VCbG9ja09yTW9kdWxlQmxvY2tCb2R5KFxuICAgIGJvZHk6IE4uU3RhdGVtZW50W10sXG4gICAgZGlyZWN0aXZlczogPyhOLkRpcmVjdGl2ZVtdKSxcbiAgICB0b3BMZXZlbDogYm9vbGVhbixcbiAgICBlbmQ6IFRva2VuVHlwZSxcbiAgICBhZnRlckJsb2NrUGFyc2U/OiAoaGFzU3RyaWN0TW9kZURpcmVjdGl2ZTogYm9vbGVhbikgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgY29uc3Qgb2N0YWxQb3NpdGlvbnMgPSBbXTtcbiAgICBjb25zdCBvbGRTdHJpY3QgPSB0aGlzLnN0YXRlLnN0cmljdDtcbiAgICBsZXQgaGFzU3RyaWN0TW9kZURpcmVjdGl2ZSA9IGZhbHNlO1xuICAgIGxldCBwYXJzZWROb25EaXJlY3RpdmUgPSBmYWxzZTtcblxuICAgIHdoaWxlICghdGhpcy5tYXRjaChlbmQpKSB7XG4gICAgICAvLyBUcmFjayBvY3RhbCBsaXRlcmFscyB0aGF0IG9jY3VyIGJlZm9yZSBhIFwidXNlIHN0cmljdFwiIGRpcmVjdGl2ZS5cbiAgICAgIGlmICghcGFyc2VkTm9uRGlyZWN0aXZlICYmIHRoaXMuc3RhdGUub2N0YWxQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIG9jdGFsUG9zaXRpb25zLnB1c2goLi4udGhpcy5zdGF0ZS5vY3RhbFBvc2l0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwsIHRvcExldmVsKTtcblxuICAgICAgaWYgKGRpcmVjdGl2ZXMgJiYgIXBhcnNlZE5vbkRpcmVjdGl2ZSAmJiB0aGlzLmlzVmFsaWREaXJlY3RpdmUoc3RtdCkpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5zdG10VG9EaXJlY3RpdmUoc3RtdCk7XG4gICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuXG4gICAgICAgIGlmICghaGFzU3RyaWN0TW9kZURpcmVjdGl2ZSAmJiBkaXJlY3RpdmUudmFsdWUudmFsdWUgPT09IFwidXNlIHN0cmljdFwiKSB7XG4gICAgICAgICAgaGFzU3RyaWN0TW9kZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zZXRTdHJpY3QodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcGFyc2VkTm9uRGlyZWN0aXZlID0gdHJ1ZTtcbiAgICAgIGJvZHkucHVzaChzdG10KTtcbiAgICB9XG5cbiAgICAvLyBUaHJvdyBhbiBlcnJvciBmb3IgYW55IG9jdGFsIGxpdGVyYWxzIGZvdW5kIGJlZm9yZSBhXG4gICAgLy8gXCJ1c2Ugc3RyaWN0XCIgZGlyZWN0aXZlLiBTdHJpY3QgbW9kZSB3aWxsIGJlIHNldCBhdCBwYXJzZVxuICAgIC8vIHRpbWUgZm9yIGFueSBsaXRlcmFscyB0aGF0IG9jY3VyIGFmdGVyIHRoZSBkaXJlY3RpdmUuXG4gICAgaWYgKHRoaXMuc3RhdGUuc3RyaWN0ICYmIG9jdGFsUG9zaXRpb25zLmxlbmd0aCkge1xuICAgICAgZm9yIChjb25zdCBwb3Mgb2Ygb2N0YWxQb3NpdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yYWlzZShwb3MsIEVycm9ycy5TdHJpY3RPY3RhbExpdGVyYWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhZnRlckJsb2NrUGFyc2UpIHtcbiAgICAgIGFmdGVyQmxvY2tQYXJzZS5jYWxsKHRoaXMsIGhhc1N0cmljdE1vZGVEaXJlY3RpdmUpO1xuICAgIH1cblxuICAgIGlmICghb2xkU3RyaWN0KSB7XG4gICAgICB0aGlzLnNldFN0cmljdChmYWxzZSk7XG4gICAgfVxuXG4gICAgdGhpcy5uZXh0KCk7XG4gIH1cblxuICAvLyBQYXJzZSBhIHJlZ3VsYXIgYGZvcmAgbG9vcC4gVGhlIGRpc2FtYmlndWF0aW9uIGNvZGUgaW5cbiAgLy8gYHBhcnNlU3RhdGVtZW50YCB3aWxsIGFscmVhZHkgaGF2ZSBwYXJzZWQgdGhlIGluaXQgc3RhdGVtZW50IG9yXG4gIC8vIGV4cHJlc3Npb24uXG5cbiAgcGFyc2VGb3IoXG4gICAgbm9kZTogTi5Gb3JTdGF0ZW1lbnQsXG4gICAgaW5pdDogPyhOLlZhcmlhYmxlRGVjbGFyYXRpb24gfCBOLkV4cHJlc3Npb24pLFxuICApOiBOLkZvclN0YXRlbWVudCB7XG4gICAgbm9kZS5pbml0ID0gaW5pdDtcbiAgICB0aGlzLmV4cGVjdCh0dC5zZW1pKTtcbiAgICBub2RlLnRlc3QgPSB0aGlzLm1hdGNoKHR0LnNlbWkpID8gbnVsbCA6IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgdGhpcy5leHBlY3QodHQuc2VtaSk7XG4gICAgbm9kZS51cGRhdGUgPSB0aGlzLm1hdGNoKHR0LnBhcmVuUikgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmV4cGVjdCh0dC5wYXJlblIpO1xuXG4gICAgbm9kZS5ib2R5ID1cbiAgICAgIC8vIEZvciB0aGUgc21hcnRQaXBlbGluZXMgcGx1Z2luOiBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlclxuICAgICAgLy8gY29udGV4dHMgd2l0aGluIHRoZSBsb29wIGJvZHkuIFRoZXkgYXJlIHBlcm1pdHRlZCBpbiB0ZXN0IGV4cHJlc3Npb25zLFxuICAgICAgLy8gb3V0c2lkZSBvZiB0aGUgbG9vcCBib2R5LlxuICAgICAgdGhpcy53aXRoVG9waWNGb3JiaWRkaW5nQ29udGV4dCgoKSA9PlxuICAgICAgICAvLyBQYXJzZSB0aGUgbG9vcCBib2R5LlxuICAgICAgICB0aGlzLnBhcnNlU3RhdGVtZW50KFwiZm9yXCIpLFxuICAgICAgKTtcblxuICAgIHRoaXMuc2NvcGUuZXhpdCgpO1xuICAgIHRoaXMuc3RhdGUubGFiZWxzLnBvcCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkZvclN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgYGZvcmAvYGluYCBhbmQgYGZvcmAvYG9mYCBsb29wLCB3aGljaCBhcmUgYWxtb3N0XG4gIC8vIHNhbWUgZnJvbSBwYXJzZXIncyBwZXJzcGVjdGl2ZS5cblxuICBwYXJzZUZvckluKFxuICAgIG5vZGU6IE4uRm9ySW5PZixcbiAgICBpbml0OiBOLlZhcmlhYmxlRGVjbGFyYXRpb24gfCBOLkFzc2lnbm1lbnRQYXR0ZXJuLFxuICAgIGF3YWl0QXQ6IG51bWJlcixcbiAgKTogTi5Gb3JJbk9mIHtcbiAgICBjb25zdCBpc0ZvckluID0gdGhpcy5tYXRjaCh0dC5faW4pO1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgaWYgKGlzRm9ySW4pIHtcbiAgICAgIGlmIChhd2FpdEF0ID4gLTEpIHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5hd2FpdCA9IGF3YWl0QXQgPiAtMTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBpbml0LnR5cGUgPT09IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiICYmXG4gICAgICBpbml0LmRlY2xhcmF0aW9uc1swXS5pbml0ICE9IG51bGwgJiZcbiAgICAgICghaXNGb3JJbiB8fFxuICAgICAgICB0aGlzLnN0YXRlLnN0cmljdCB8fFxuICAgICAgICBpbml0LmtpbmQgIT09IFwidmFyXCIgfHxcbiAgICAgICAgaW5pdC5kZWNsYXJhdGlvbnNbMF0uaWQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpXG4gICAgKSB7XG4gICAgICB0aGlzLnJhaXNlKFxuICAgICAgICBpbml0LnN0YXJ0LFxuICAgICAgICBFcnJvcnMuRm9ySW5PZkxvb3BJbml0aWFsaXplcixcbiAgICAgICAgaXNGb3JJbiA/IFwiZm9yLWluXCIgOiBcImZvci1vZlwiLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGluaXQudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKSB7XG4gICAgICB0aGlzLnJhaXNlKGluaXQuc3RhcnQsIEVycm9ycy5JbnZhbGlkTGhzLCBcImZvci1sb29wXCIpO1xuICAgIH1cblxuICAgIG5vZGUubGVmdCA9IGluaXQ7XG4gICAgbm9kZS5yaWdodCA9IGlzRm9ySW5cbiAgICAgID8gdGhpcy5wYXJzZUV4cHJlc3Npb24oKVxuICAgICAgOiB0aGlzLnBhcnNlTWF5YmVBc3NpZ25BbGxvd0luKCk7XG4gICAgdGhpcy5leHBlY3QodHQucGFyZW5SKTtcblxuICAgIG5vZGUuYm9keSA9XG4gICAgICAvLyBGb3IgdGhlIHNtYXJ0UGlwZWxpbmVzIHBsdWdpbjpcbiAgICAgIC8vIERpc2FibGUgdG9waWMgcmVmZXJlbmNlcyBmcm9tIG91dGVyIGNvbnRleHRzIHdpdGhpbiB0aGUgbG9vcCBib2R5LlxuICAgICAgLy8gVGhleSBhcmUgcGVybWl0dGVkIGluIHRlc3QgZXhwcmVzc2lvbnMsIG91dHNpZGUgb2YgdGhlIGxvb3AgYm9keS5cbiAgICAgIHRoaXMud2l0aFRvcGljRm9yYmlkZGluZ0NvbnRleHQoKCkgPT5cbiAgICAgICAgLy8gUGFyc2UgbG9vcCBib2R5LlxuICAgICAgICB0aGlzLnBhcnNlU3RhdGVtZW50KFwiZm9yXCIpLFxuICAgICAgKTtcblxuICAgIHRoaXMuc2NvcGUuZXhpdCgpO1xuICAgIHRoaXMuc3RhdGUubGFiZWxzLnBvcCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc0ZvckluID8gXCJGb3JJblN0YXRlbWVudFwiIDogXCJGb3JPZlN0YXRlbWVudFwiKTtcbiAgfVxuXG4gIC8vIFBhcnNlIGEgbGlzdCBvZiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMuXG5cbiAgcGFyc2VWYXIoXG4gICAgbm9kZTogTi5WYXJpYWJsZURlY2xhcmF0aW9uLFxuICAgIGlzRm9yOiBib29sZWFuLFxuICAgIGtpbmQ6IFwidmFyXCIgfCBcImxldFwiIHwgXCJjb25zdFwiLFxuICApOiBOLlZhcmlhYmxlRGVjbGFyYXRpb24ge1xuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IChub2RlLmRlY2xhcmF0aW9ucyA9IFtdKTtcbiAgICBjb25zdCBpc1R5cGVzY3JpcHQgPSB0aGlzLmhhc1BsdWdpbihcInR5cGVzY3JpcHRcIik7XG4gICAgbm9kZS5raW5kID0ga2luZDtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCBkZWNsID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMucGFyc2VWYXJJZChkZWNsLCBraW5kKTtcbiAgICAgIGlmICh0aGlzLmVhdCh0dC5lcSkpIHtcbiAgICAgICAgZGVjbC5pbml0ID0gaXNGb3JcbiAgICAgICAgICA/IHRoaXMucGFyc2VNYXliZUFzc2lnbkRpc2FsbG93SW4oKVxuICAgICAgICAgIDogdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtpbmQgPT09IFwiY29uc3RcIiAmJlxuICAgICAgICAgICEodGhpcy5tYXRjaCh0dC5faW4pIHx8IHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIGBjb25zdGAgd2l0aCBubyBpbml0aWFsaXplciBpcyBhbGxvd2VkIGluIFR5cGVTY3JpcHQuXG4gICAgICAgICAgLy8gSXQgY291bGQgYmUgYSBkZWNsYXJhdGlvbiBsaWtlIGBjb25zdCB4OiBudW1iZXI7YC5cbiAgICAgICAgICBpZiAoIWlzVHlwZXNjcmlwdCkge1xuICAgICAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGRlY2wuaWQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiZcbiAgICAgICAgICAhKGlzRm9yICYmICh0aGlzLm1hdGNoKHR0Ll9pbikgfHwgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tFbmQsXG4gICAgICAgICAgICBFcnJvcnMuRGVjbGFyYXRpb25NaXNzaW5nSW5pdGlhbGl6ZXIsXG4gICAgICAgICAgICBcIkNvbXBsZXggYmluZGluZyBwYXR0ZXJuc1wiLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZGVjbC5pbml0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKHRoaXMuZmluaXNoTm9kZShkZWNsLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiKSk7XG4gICAgICBpZiAoIXRoaXMuZWF0KHR0LmNvbW1hKSkgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcGFyc2VWYXJJZChkZWNsOiBOLlZhcmlhYmxlRGVjbGFyYXRvciwga2luZDogXCJ2YXJcIiB8IFwibGV0XCIgfCBcImNvbnN0XCIpOiB2b2lkIHtcbiAgICBkZWNsLmlkID0gdGhpcy5wYXJzZUJpbmRpbmdBdG9tKCk7XG4gICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICBkZWNsLmlkLFxuICAgICAga2luZCA9PT0gXCJ2YXJcIiA/IEJJTkRfVkFSIDogQklORF9MRVhJQ0FMLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgXCJ2YXJpYWJsZSBkZWNsYXJhdGlvblwiLFxuICAgICAga2luZCAhPT0gXCJ2YXJcIixcbiAgICApO1xuICB9XG5cbiAgLy8gUGFyc2UgYSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBvciBsaXRlcmFsIChkZXBlbmRpbmcgb24gdGhlXG4gIC8vIGBpc1N0YXRlbWVudGAgcGFyYW1ldGVyKS5cblxuICBwYXJzZUZ1bmN0aW9uPFQ6IE4uTm9ybWFsRnVuY3Rpb24+KFxuICAgIG5vZGU6IFQsXG4gICAgc3RhdGVtZW50PzogbnVtYmVyID0gRlVOQ19OT19GTEFHUyxcbiAgICBpc0FzeW5jPzogYm9vbGVhbiA9IGZhbHNlLFxuICApOiBUIHtcbiAgICBjb25zdCBpc1N0YXRlbWVudCA9IHN0YXRlbWVudCAmIEZVTkNfU1RBVEVNRU5UO1xuICAgIGNvbnN0IGlzSGFuZ2luZ1N0YXRlbWVudCA9IHN0YXRlbWVudCAmIEZVTkNfSEFOR0lOR19TVEFURU1FTlQ7XG4gICAgY29uc3QgcmVxdWlyZUlkID0gISFpc1N0YXRlbWVudCAmJiAhKHN0YXRlbWVudCAmIEZVTkNfTlVMTEFCTEVfSUQpO1xuXG4gICAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSwgaXNBc3luYyk7XG5cbiAgICBpZiAodGhpcy5tYXRjaCh0dC5zdGFyKSAmJiBpc0hhbmdpbmdTdGF0ZW1lbnQpIHtcbiAgICAgIHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLkdlbmVyYXRvckluU2luZ2xlU3RhdGVtZW50Q29udGV4dCk7XG4gICAgfVxuICAgIG5vZGUuZ2VuZXJhdG9yID0gdGhpcy5lYXQodHQuc3Rhcik7XG5cbiAgICBpZiAoaXNTdGF0ZW1lbnQpIHtcbiAgICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlRnVuY3Rpb25JZChyZXF1aXJlSWQpO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZE1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnM7XG4gICAgY29uc3Qgb2xkWWllbGRQb3MgPSB0aGlzLnN0YXRlLnlpZWxkUG9zO1xuICAgIGNvbnN0IG9sZEF3YWl0UG9zID0gdGhpcy5zdGF0ZS5hd2FpdFBvcztcbiAgICB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXRlLnlpZWxkUG9zID0gLTE7XG4gICAgdGhpcy5zdGF0ZS5hd2FpdFBvcyA9IC0xO1xuICAgIHRoaXMuc2NvcGUuZW50ZXIoU0NPUEVfRlVOQ1RJT04pO1xuICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgbm9kZS5nZW5lcmF0b3IpKTtcblxuICAgIGlmICghaXNTdGF0ZW1lbnQpIHtcbiAgICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlRnVuY3Rpb25JZCgpO1xuICAgIH1cblxuICAgIHRoaXMucGFyc2VGdW5jdGlvblBhcmFtcyhub2RlKTtcblxuICAgIC8vIEZvciB0aGUgc21hcnRQaXBlbGluZXMgcGx1Z2luOiBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlclxuICAgIC8vIGNvbnRleHRzIHdpdGhpbiB0aGUgZnVuY3Rpb24gYm9keS4gVGhleSBhcmUgcGVybWl0dGVkIGluIGZ1bmN0aW9uXG4gICAgLy8gZGVmYXVsdC1wYXJhbWV0ZXIgZXhwcmVzc2lvbnMsIG91dHNpZGUgb2YgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgdGhpcy53aXRoVG9waWNGb3JiaWRkaW5nQ29udGV4dCgoKSA9PiB7XG4gICAgICAvLyBQYXJzZSB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHRoaXMucGFyc2VGdW5jdGlvbkJvZHlBbmRGaW5pc2goXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGlzU3RhdGVtZW50ID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRoaXMucHJvZFBhcmFtLmV4aXQoKTtcbiAgICB0aGlzLnNjb3BlLmV4aXQoKTtcblxuICAgIGlmIChpc1N0YXRlbWVudCAmJiAhaXNIYW5naW5nU3RhdGVtZW50KSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJlZ2lzdGVyIHRoaXMgX2FmdGVyXyBwYXJzaW5nIHRoZSBmdW5jdGlvbiBib2R5XG4gICAgICAvLyBiZWNhdXNlIG9mIFR5cGVTY3JpcHQgYm9keS1sZXNzIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucyxcbiAgICAgIC8vIHdoaWNoIHNob3VsZG4ndCBiZSBhZGRlZCB0byB0aGUgc2NvcGUuXG4gICAgICB0aGlzLnJlZ2lzdGVyRnVuY3Rpb25TdGF0ZW1lbnRJZChub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLm1heWJlSW5BcnJvd1BhcmFtZXRlcnMgPSBvbGRNYXliZUluQXJyb3dQYXJhbWV0ZXJzO1xuICAgIHRoaXMuc3RhdGUueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgICB0aGlzLnN0YXRlLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHBhcnNlRnVuY3Rpb25JZChyZXF1aXJlSWQ/OiBib29sZWFuKTogP04uSWRlbnRpZmllciB7XG4gICAgcmV0dXJuIHJlcXVpcmVJZCB8fCB0aGlzLm1hdGNoKHR0Lm5hbWUpID8gdGhpcy5wYXJzZUlkZW50aWZpZXIoKSA6IG51bGw7XG4gIH1cblxuICBwYXJzZUZ1bmN0aW9uUGFyYW1zKG5vZGU6IE4uRnVuY3Rpb24sIGFsbG93TW9kaWZpZXJzPzogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IG9sZEluUGFyYW1ldGVycyA9IHRoaXMuc3RhdGUuaW5QYXJhbWV0ZXJzO1xuICAgIHRoaXMuc3RhdGUuaW5QYXJhbWV0ZXJzID0gdHJ1ZTtcblxuICAgIHRoaXMuZXhwZWN0KHR0LnBhcmVuTCk7XG4gICAgbm9kZS5wYXJhbXMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QoXG4gICAgICB0dC5wYXJlblIsXG4gICAgICBjaGFyQ29kZXMucmlnaHRQYXJlbnRoZXNpcyxcbiAgICAgIC8qIGFsbG93RW1wdHkgKi8gZmFsc2UsXG4gICAgICBhbGxvd01vZGlmaWVycyxcbiAgICApO1xuXG4gICAgdGhpcy5zdGF0ZS5pblBhcmFtZXRlcnMgPSBvbGRJblBhcmFtZXRlcnM7XG4gICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyRnVuY3Rpb25TdGF0ZW1lbnRJZChub2RlOiBOLkZ1bmN0aW9uKTogdm9pZCB7XG4gICAgaWYgKCFub2RlLmlkKSByZXR1cm47XG5cbiAgICAvLyBJZiBpdCBpcyBhIHJlZ3VsYXIgZnVuY3Rpb24gZGVjbGFyYXRpb24gaW4gc2xvcHB5IG1vZGUsIHRoZW4gaXQgaXNcbiAgICAvLyBzdWJqZWN0IHRvIEFubmV4IEIgc2VtYW50aWNzIChCSU5EX0ZVTkNUSU9OKS4gT3RoZXJ3aXNlLCB0aGUgYmluZGluZ1xuICAgIC8vIG1vZGUgZGVwZW5kcyBvbiBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IHNjb3BlIChzZWVcbiAgICAvLyB0cmVhdEZ1bmN0aW9uc0FzVmFyKS5cbiAgICB0aGlzLnNjb3BlLmRlY2xhcmVOYW1lKFxuICAgICAgbm9kZS5pZC5uYW1lLFxuICAgICAgdGhpcy5zdGF0ZS5zdHJpY3QgfHwgbm9kZS5nZW5lcmF0b3IgfHwgbm9kZS5hc3luY1xuICAgICAgICA/IHRoaXMuc2NvcGUudHJlYXRGdW5jdGlvbnNBc1ZhclxuICAgICAgICAgID8gQklORF9WQVJcbiAgICAgICAgICA6IEJJTkRfTEVYSUNBTFxuICAgICAgICA6IEJJTkRfRlVOQ1RJT04sXG4gICAgICBub2RlLmlkLnN0YXJ0LFxuICAgICk7XG4gIH1cblxuICAvLyBQYXJzZSBhIGNsYXNzIGRlY2xhcmF0aW9uIG9yIGxpdGVyYWwgKGRlcGVuZGluZyBvbiB0aGVcbiAgLy8gYGlzU3RhdGVtZW50YCBwYXJhbWV0ZXIpLlxuXG4gIHBhcnNlQ2xhc3M8VDogTi5DbGFzcz4oXG4gICAgbm9kZTogVCxcbiAgICBpc1N0YXRlbWVudDogLyogVCA9PT0gQ2xhc3NEZWNsYXJhdGlvbiAqLyBib29sZWFuLFxuICAgIG9wdGlvbmFsSWQ/OiBib29sZWFuLFxuICApOiBUIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnRha2VEZWNvcmF0b3JzKG5vZGUpO1xuXG4gICAgLy8gQSBjbGFzcyBkZWZpbml0aW9uIGlzIGFsd2F5cyBzdHJpY3QgbW9kZSBjb2RlLlxuICAgIGNvbnN0IG9sZFN0cmljdCA9IHRoaXMuc3RhdGUuc3RyaWN0O1xuICAgIHRoaXMuc3RhdGUuc3RyaWN0ID0gdHJ1ZTtcblxuICAgIHRoaXMucGFyc2VDbGFzc0lkKG5vZGUsIGlzU3RhdGVtZW50LCBvcHRpb25hbElkKTtcbiAgICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcbiAgICAvLyB0aGlzLnN0YXRlLnN0cmljdCBpcyByZXN0b3JlZCBpbiBwYXJzZUNsYXNzQm9keVxuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VDbGFzc0JvZHkoISFub2RlLnN1cGVyQ2xhc3MsIG9sZFN0cmljdCk7XG5cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKFxuICAgICAgbm9kZSxcbiAgICAgIGlzU3RhdGVtZW50ID8gXCJDbGFzc0RlY2xhcmF0aW9uXCIgOiBcIkNsYXNzRXhwcmVzc2lvblwiLFxuICAgICk7XG4gIH1cblxuICBpc0NsYXNzUHJvcGVydHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2godHQuZXEpIHx8IHRoaXMubWF0Y2godHQuc2VtaSkgfHwgdGhpcy5tYXRjaCh0dC5icmFjZVIpO1xuICB9XG5cbiAgaXNDbGFzc01ldGhvZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaCh0dC5wYXJlbkwpO1xuICB9XG5cbiAgaXNOb25zdGF0aWNDb25zdHJ1Y3RvcihtZXRob2Q6IE4uQ2xhc3NNZXRob2QgfCBOLkNsYXNzUHJvcGVydHkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgIW1ldGhvZC5jb21wdXRlZCAmJlxuICAgICAgIW1ldGhvZC5zdGF0aWMgJiZcbiAgICAgIChtZXRob2Qua2V5Lm5hbWUgPT09IFwiY29uc3RydWN0b3JcIiB8fCAvLyBJZGVudGlmaWVyXG4gICAgICAgIG1ldGhvZC5rZXkudmFsdWUgPT09IFwiY29uc3RydWN0b3JcIikgLy8gU3RyaW5nIGxpdGVyYWxcbiAgICApO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtQ2xhc3NCb2R5XG4gIHBhcnNlQ2xhc3NCb2R5KFxuICAgIGNvbnN0cnVjdG9yQWxsb3dzU3VwZXI6IGJvb2xlYW4sXG4gICAgb2xkU3RyaWN0OiBib29sZWFuLFxuICApOiBOLkNsYXNzQm9keSB7XG4gICAgdGhpcy5jbGFzc1Njb3BlLmVudGVyKCk7XG5cbiAgICBjb25zdCBzdGF0ZSA9IHsgaGFkQ29uc3RydWN0b3I6IGZhbHNlIH07XG4gICAgbGV0IGRlY29yYXRvcnM6IE4uRGVjb3JhdG9yW10gPSBbXTtcbiAgICBjb25zdCBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5ID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBjbGFzc0JvZHkuYm9keSA9IFtdO1xuXG4gICAgdGhpcy5leHBlY3QodHQuYnJhY2VMKTtcblxuICAgIC8vIEZvciB0aGUgc21hcnRQaXBlbGluZXMgcGx1Z2luOiBEaXNhYmxlIHRvcGljIHJlZmVyZW5jZXMgZnJvbSBvdXRlclxuICAgIC8vIGNvbnRleHRzIHdpdGhpbiB0aGUgY2xhc3MgYm9keS5cbiAgICB0aGlzLndpdGhUb3BpY0ZvcmJpZGRpbmdDb250ZXh0KCgpID0+IHtcbiAgICAgIHdoaWxlICghdGhpcy5tYXRjaCh0dC5icmFjZVIpKSB7XG4gICAgICAgIGlmICh0aGlzLmVhdCh0dC5zZW1pKSkge1xuICAgICAgICAgIGlmIChkZWNvcmF0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMucmFpc2UodGhpcy5zdGF0ZS5sYXN0VG9rRW5kLCBFcnJvcnMuRGVjb3JhdG9yU2VtaWNvbG9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXRjaCh0dC5hdCkpIHtcbiAgICAgICAgICBkZWNvcmF0b3JzLnB1c2godGhpcy5wYXJzZURlY29yYXRvcigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAgICAgLy8gc3RlYWwgdGhlIGRlY29yYXRvcnMgaWYgdGhlcmUgYXJlIGFueVxuICAgICAgICBpZiAoZGVjb3JhdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBtZW1iZXIuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnM7XG4gICAgICAgICAgdGhpcy5yZXNldFN0YXJ0TG9jYXRpb25Gcm9tTm9kZShtZW1iZXIsIGRlY29yYXRvcnNbMF0pO1xuICAgICAgICAgIGRlY29yYXRvcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFyc2VDbGFzc01lbWJlcihjbGFzc0JvZHksIG1lbWJlciwgc3RhdGUsIGNvbnN0cnVjdG9yQWxsb3dzU3VwZXIpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtZW1iZXIua2luZCA9PT0gXCJjb25zdHJ1Y3RvclwiICYmXG4gICAgICAgICAgbWVtYmVyLmRlY29yYXRvcnMgJiZcbiAgICAgICAgICBtZW1iZXIuZGVjb3JhdG9ycy5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucmFpc2UobWVtYmVyLnN0YXJ0LCBFcnJvcnMuRGVjb3JhdG9yQ29uc3RydWN0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YXRlLnN0cmljdCA9IG9sZFN0cmljdDtcblxuICAgIHRoaXMubmV4dCgpOyAvLyBlYXQgYH1gXG5cbiAgICBpZiAoZGVjb3JhdG9ycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IHRoaXMucmFpc2UodGhpcy5zdGF0ZS5zdGFydCwgRXJyb3JzLlRyYWlsaW5nRGVjb3JhdG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLmNsYXNzU2NvcGUuZXhpdCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShjbGFzc0JvZHksIFwiQ2xhc3NCb2R5XCIpO1xuICB9XG5cbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IGlkZW50aWZpZXIgaXMgYSBtZXRob2QvZmllbGQgbmFtZSxcbiAgLy8gZmFsc2UgaWYgaXQgaXMgYSBtb2RpZmllclxuICBwYXJzZUNsYXNzTWVtYmVyRnJvbU1vZGlmaWVyKFxuICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgbWVtYmVyOiBOLkNsYXNzTWVtYmVyLFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTsgLy8gZWF0cyB0aGUgbW9kaWZpZXJcblxuICAgIGlmICh0aGlzLmlzQ2xhc3NNZXRob2QoKSkge1xuICAgICAgY29uc3QgbWV0aG9kOiBOLkNsYXNzTWV0aG9kID0gKG1lbWJlcjogYW55KTtcblxuICAgICAgLy8gYSBtZXRob2QgbmFtZWQgbGlrZSB0aGUgbW9kaWZpZXJcbiAgICAgIG1ldGhvZC5raW5kID0gXCJtZXRob2RcIjtcbiAgICAgIG1ldGhvZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgbWV0aG9kLmtleSA9IGtleTtcbiAgICAgIG1ldGhvZC5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIHRoaXMucHVzaENsYXNzTWV0aG9kKFxuICAgICAgICBjbGFzc0JvZHksXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAvKiBpc0NvbnN0cnVjdG9yICovIGZhbHNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNDbGFzc1Byb3BlcnR5KCkpIHtcbiAgICAgIGNvbnN0IHByb3A6IE4uQ2xhc3NQcm9wZXJ0eSA9IChtZW1iZXI6IGFueSk7XG5cbiAgICAgIC8vIGEgcHJvcGVydHkgbmFtZWQgbGlrZSB0aGUgbW9kaWZpZXJcbiAgICAgIHByb3AuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgIHByb3Aua2V5ID0ga2V5O1xuICAgICAgcHJvcC5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIGNsYXNzQm9keS5ib2R5LnB1c2godGhpcy5wYXJzZUNsYXNzUHJvcGVydHkocHJvcCkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHBhcnNlQ2xhc3NNZW1iZXIoXG4gICAgY2xhc3NCb2R5OiBOLkNsYXNzQm9keSxcbiAgICBtZW1iZXI6IE4uQ2xhc3NNZW1iZXIsXG4gICAgc3RhdGU6IHsgaGFkQ29uc3RydWN0b3I6IGJvb2xlYW4gfSxcbiAgICBjb25zdHJ1Y3RvckFsbG93c1N1cGVyOiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpc1N0YXRpYyA9IHRoaXMuaXNDb250ZXh0dWFsKFwic3RhdGljXCIpO1xuXG4gICAgaWYgKGlzU3RhdGljICYmIHRoaXMucGFyc2VDbGFzc01lbWJlckZyb21Nb2RpZmllcihjbGFzc0JvZHksIG1lbWJlcikpIHtcbiAgICAgIC8vIGEgY2xhc3MgZWxlbWVudCBuYW1lZCAnc3RhdGljJ1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGFyc2VDbGFzc01lbWJlcldpdGhJc1N0YXRpYyhcbiAgICAgIGNsYXNzQm9keSxcbiAgICAgIG1lbWJlcixcbiAgICAgIHN0YXRlLFxuICAgICAgaXNTdGF0aWMsXG4gICAgICBjb25zdHJ1Y3RvckFsbG93c1N1cGVyLFxuICAgICk7XG4gIH1cblxuICBwYXJzZUNsYXNzTWVtYmVyV2l0aElzU3RhdGljKFxuICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgbWVtYmVyOiBOLkNsYXNzTWVtYmVyLFxuICAgIHN0YXRlOiB7IGhhZENvbnN0cnVjdG9yOiBib29sZWFuIH0sXG4gICAgaXNTdGF0aWM6IGJvb2xlYW4sXG4gICAgY29uc3RydWN0b3JBbGxvd3NTdXBlcjogYm9vbGVhbixcbiAgKSB7XG4gICAgY29uc3QgcHVibGljTWV0aG9kOiAkRmxvd1N1YnR5cGU8Ti5DbGFzc01ldGhvZD4gPSBtZW1iZXI7XG4gICAgY29uc3QgcHJpdmF0ZU1ldGhvZDogJEZsb3dTdWJ0eXBlPE4uQ2xhc3NQcml2YXRlTWV0aG9kPiA9IG1lbWJlcjtcbiAgICBjb25zdCBwdWJsaWNQcm9wOiAkRmxvd1N1YnR5cGU8Ti5DbGFzc01ldGhvZD4gPSBtZW1iZXI7XG4gICAgY29uc3QgcHJpdmF0ZVByb3A6ICRGbG93U3VidHlwZTxOLkNsYXNzUHJpdmF0ZU1ldGhvZD4gPSBtZW1iZXI7XG5cbiAgICBjb25zdCBtZXRob2Q6IHR5cGVvZiBwdWJsaWNNZXRob2QgfCB0eXBlb2YgcHJpdmF0ZU1ldGhvZCA9IHB1YmxpY01ldGhvZDtcbiAgICBjb25zdCBwdWJsaWNNZW1iZXI6IHR5cGVvZiBwdWJsaWNNZXRob2QgfCB0eXBlb2YgcHVibGljUHJvcCA9IHB1YmxpY01ldGhvZDtcblxuICAgIG1lbWJlci5zdGF0aWMgPSBpc1N0YXRpYztcblxuICAgIGlmICh0aGlzLmVhdCh0dC5zdGFyKSkge1xuICAgICAgLy8gYSBnZW5lcmF0b3JcbiAgICAgIG1ldGhvZC5raW5kID0gXCJtZXRob2RcIjtcbiAgICAgIHRoaXMucGFyc2VDbGFzc0VsZW1lbnROYW1lKG1ldGhvZCk7XG5cbiAgICAgIGlmIChtZXRob2Qua2V5LnR5cGUgPT09IFwiUHJpdmF0ZU5hbWVcIikge1xuICAgICAgICAvLyBQcml2YXRlIGdlbmVyYXRvciBtZXRob2RcbiAgICAgICAgdGhpcy5wdXNoQ2xhc3NQcml2YXRlTWV0aG9kKGNsYXNzQm9keSwgcHJpdmF0ZU1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzTm9uc3RhdGljQ29uc3RydWN0b3IocHVibGljTWV0aG9kKSkge1xuICAgICAgICB0aGlzLnJhaXNlKHB1YmxpY01ldGhvZC5rZXkuc3RhcnQsIEVycm9ycy5Db25zdHJ1Y3RvcklzR2VuZXJhdG9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wdXNoQ2xhc3NNZXRob2QoXG4gICAgICAgIGNsYXNzQm9keSxcbiAgICAgICAgcHVibGljTWV0aG9kLFxuICAgICAgICB0cnVlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgLyogaXNDb25zdHJ1Y3RvciAqLyBmYWxzZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbnNFc2MgPSB0aGlzLnN0YXRlLmNvbnRhaW5zRXNjO1xuICAgIGNvbnN0IGtleSA9IHRoaXMucGFyc2VDbGFzc0VsZW1lbnROYW1lKG1lbWJlcik7XG4gICAgY29uc3QgaXNQcml2YXRlID0ga2V5LnR5cGUgPT09IFwiUHJpdmF0ZU5hbWVcIjtcbiAgICAvLyBDaGVjayB0aGUga2V5IGlzIG5vdCBhIGNvbXB1dGVkIGV4cHJlc3Npb24gb3Igc3RyaW5nIGxpdGVyYWwuXG4gICAgY29uc3QgaXNTaW1wbGUgPSBrZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCI7XG4gICAgY29uc3QgbWF5YmVRdWVzdGlvblRva2VuU3RhcnQgPSB0aGlzLnN0YXRlLnN0YXJ0O1xuXG4gICAgdGhpcy5wYXJzZVBvc3RNZW1iZXJOYW1lTW9kaWZpZXJzKHB1YmxpY01lbWJlcik7XG5cbiAgICBpZiAodGhpcy5pc0NsYXNzTWV0aG9kKCkpIHtcbiAgICAgIG1ldGhvZC5raW5kID0gXCJtZXRob2RcIjtcblxuICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICB0aGlzLnB1c2hDbGFzc1ByaXZhdGVNZXRob2QoY2xhc3NCb2R5LCBwcml2YXRlTWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGEgbm9ybWFsIG1ldGhvZFxuICAgICAgY29uc3QgaXNDb25zdHJ1Y3RvciA9IHRoaXMuaXNOb25zdGF0aWNDb25zdHJ1Y3RvcihwdWJsaWNNZXRob2QpO1xuICAgICAgbGV0IGFsbG93c0RpcmVjdFN1cGVyID0gZmFsc2U7XG4gICAgICBpZiAoaXNDb25zdHJ1Y3Rvcikge1xuICAgICAgICBwdWJsaWNNZXRob2Qua2luZCA9IFwiY29uc3RydWN0b3JcIjtcblxuICAgICAgICAvLyBUeXBlU2NyaXB0IGFsbG93cyBtdWx0aXBsZSBvdmVybG9hZGVkIGNvbnN0cnVjdG9yIGRlY2xhcmF0aW9ucy5cbiAgICAgICAgaWYgKHN0YXRlLmhhZENvbnN0cnVjdG9yICYmICF0aGlzLmhhc1BsdWdpbihcInR5cGVzY3JpcHRcIikpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKGtleS5zdGFydCwgRXJyb3JzLkR1cGxpY2F0ZUNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5oYWRDb25zdHJ1Y3RvciA9IHRydWU7XG4gICAgICAgIGFsbG93c0RpcmVjdFN1cGVyID0gY29uc3RydWN0b3JBbGxvd3NTdXBlcjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wdXNoQ2xhc3NNZXRob2QoXG4gICAgICAgIGNsYXNzQm9keSxcbiAgICAgICAgcHVibGljTWV0aG9kLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGlzQ29uc3RydWN0b3IsXG4gICAgICAgIGFsbG93c0RpcmVjdFN1cGVyLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNDbGFzc1Byb3BlcnR5KCkpIHtcbiAgICAgIGlmIChpc1ByaXZhdGUpIHtcbiAgICAgICAgdGhpcy5wdXNoQ2xhc3NQcml2YXRlUHJvcGVydHkoY2xhc3NCb2R5LCBwcml2YXRlUHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2hDbGFzc1Byb3BlcnR5KGNsYXNzQm9keSwgcHVibGljUHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGlzU2ltcGxlICYmXG4gICAgICBrZXkubmFtZSA9PT0gXCJhc3luY1wiICYmXG4gICAgICAhY29udGFpbnNFc2MgJiZcbiAgICAgICF0aGlzLmlzTGluZVRlcm1pbmF0b3IoKVxuICAgICkge1xuICAgICAgLy8gYW4gYXN5bmMgbWV0aG9kXG4gICAgICBjb25zdCBpc0dlbmVyYXRvciA9IHRoaXMuZWF0KHR0LnN0YXIpO1xuXG4gICAgICBpZiAocHVibGljTWVtYmVyLm9wdGlvbmFsKSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZChtYXliZVF1ZXN0aW9uVG9rZW5TdGFydCk7XG4gICAgICB9XG5cbiAgICAgIG1ldGhvZC5raW5kID0gXCJtZXRob2RcIjtcbiAgICAgIC8vIFRoZSBzby1jYWxsZWQgcGFyc2VkIG5hbWUgd291bGQgaGF2ZSBiZWVuIFwiYXN5bmNcIjogZ2V0IHRoZSByZWFsIG5hbWUuXG4gICAgICB0aGlzLnBhcnNlQ2xhc3NFbGVtZW50TmFtZShtZXRob2QpO1xuICAgICAgdGhpcy5wYXJzZVBvc3RNZW1iZXJOYW1lTW9kaWZpZXJzKHB1YmxpY01lbWJlcik7XG5cbiAgICAgIGlmIChtZXRob2Qua2V5LnR5cGUgPT09IFwiUHJpdmF0ZU5hbWVcIikge1xuICAgICAgICAvLyBwcml2YXRlIGFzeW5jIG1ldGhvZFxuICAgICAgICB0aGlzLnB1c2hDbGFzc1ByaXZhdGVNZXRob2QoXG4gICAgICAgICAgY2xhc3NCb2R5LFxuICAgICAgICAgIHByaXZhdGVNZXRob2QsXG4gICAgICAgICAgaXNHZW5lcmF0b3IsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzTm9uc3RhdGljQ29uc3RydWN0b3IocHVibGljTWV0aG9kKSkge1xuICAgICAgICAgIHRoaXMucmFpc2UocHVibGljTWV0aG9kLmtleS5zdGFydCwgRXJyb3JzLkNvbnN0cnVjdG9ySXNBc3luYyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnB1c2hDbGFzc01ldGhvZChcbiAgICAgICAgICBjbGFzc0JvZHksXG4gICAgICAgICAgcHVibGljTWV0aG9kLFxuICAgICAgICAgIGlzR2VuZXJhdG9yLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgLyogaXNDb25zdHJ1Y3RvciAqLyBmYWxzZSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgaXNTaW1wbGUgJiZcbiAgICAgIChrZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBrZXkubmFtZSA9PT0gXCJzZXRcIikgJiZcbiAgICAgICFjb250YWluc0VzYyAmJlxuICAgICAgISh0aGlzLm1hdGNoKHR0LnN0YXIpICYmIHRoaXMuaXNMaW5lVGVybWluYXRvcigpKVxuICAgICkge1xuICAgICAgLy8gYGdldFxcbipgIGlzIGFuIHVuaW5pdGlhbGl6ZWQgcHJvcGVydHkgbmFtZWQgJ2dldCcgZm9sbG93ZWQgYnkgYSBnZW5lcmF0b3IuXG4gICAgICAvLyBhIGdldHRlciBvciBzZXR0ZXJcbiAgICAgIG1ldGhvZC5raW5kID0ga2V5Lm5hbWU7XG4gICAgICAvLyBUaGUgc28tY2FsbGVkIHBhcnNlZCBuYW1lIHdvdWxkIGhhdmUgYmVlbiBcImdldC9zZXRcIjogZ2V0IHRoZSByZWFsIG5hbWUuXG4gICAgICB0aGlzLnBhcnNlQ2xhc3NFbGVtZW50TmFtZShwdWJsaWNNZXRob2QpO1xuXG4gICAgICBpZiAobWV0aG9kLmtleS50eXBlID09PSBcIlByaXZhdGVOYW1lXCIpIHtcbiAgICAgICAgLy8gcHJpdmF0ZSBnZXR0ZXIvc2V0dGVyXG4gICAgICAgIHRoaXMucHVzaENsYXNzUHJpdmF0ZU1ldGhvZChjbGFzc0JvZHksIHByaXZhdGVNZXRob2QsIGZhbHNlLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc05vbnN0YXRpY0NvbnN0cnVjdG9yKHB1YmxpY01ldGhvZCkpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlKHB1YmxpY01ldGhvZC5rZXkuc3RhcnQsIEVycm9ycy5Db25zdHJ1Y3RvcklzQWNjZXNzb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaENsYXNzTWV0aG9kKFxuICAgICAgICAgIGNsYXNzQm9keSxcbiAgICAgICAgICBwdWJsaWNNZXRob2QsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgLyogaXNDb25zdHJ1Y3RvciAqLyBmYWxzZSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGVja0dldHRlclNldHRlclBhcmFtcyhwdWJsaWNNZXRob2QpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0xpbmVUZXJtaW5hdG9yKCkpIHtcbiAgICAgIC8vIGFuIHVuaW5pdGlhbGl6ZWQgY2xhc3MgcHJvcGVydHkgKGR1ZSB0byBBU0ksIHNpbmNlIHdlIGRvbid0IG90aGVyd2lzZSByZWNvZ25pemUgdGhlIG5leHQgdG9rZW4pXG4gICAgICBpZiAoaXNQcml2YXRlKSB7XG4gICAgICAgIHRoaXMucHVzaENsYXNzUHJpdmF0ZVByb3BlcnR5KGNsYXNzQm9keSwgcHJpdmF0ZVByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoQ2xhc3NQcm9wZXJ0eShjbGFzc0JvZHksIHB1YmxpY1Byb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtY2xhc3MtZmllbGRzLyNwcm9kLUNsYXNzRWxlbWVudE5hbWVcbiAgcGFyc2VDbGFzc0VsZW1lbnROYW1lKG1lbWJlcjogTi5DbGFzc01lbWJlcik6IE4uRXhwcmVzc2lvbiB8IE4uSWRlbnRpZmllciB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5wYXJzZVByb3BlcnR5TmFtZShtZW1iZXIsIC8qIGlzUHJpdmF0ZU5hbWVBbGxvd2VkICovIHRydWUpO1xuXG4gICAgaWYgKFxuICAgICAgIW1lbWJlci5jb21wdXRlZCAmJlxuICAgICAgbWVtYmVyLnN0YXRpYyAmJlxuICAgICAgKChrZXk6ICRGbG93U3VidHlwZTxOLklkZW50aWZpZXI+KS5uYW1lID09PSBcInByb3RvdHlwZVwiIHx8XG4gICAgICAgIChrZXk6ICRGbG93U3VidHlwZTxOLlN0cmluZ0xpdGVyYWw+KS52YWx1ZSA9PT0gXCJwcm90b3R5cGVcIilcbiAgICApIHtcbiAgICAgIHRoaXMucmFpc2Uoa2V5LnN0YXJ0LCBFcnJvcnMuU3RhdGljUHJvdG90eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5LnR5cGUgPT09IFwiUHJpdmF0ZU5hbWVcIiAmJiBrZXkuaWQubmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICB0aGlzLnJhaXNlKGtleS5zdGFydCwgRXJyb3JzLkNvbnN0cnVjdG9yQ2xhc3NQcml2YXRlRmllbGQpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICBwdXNoQ2xhc3NQcm9wZXJ0eShjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LCBwcm9wOiBOLkNsYXNzUHJvcGVydHkpIHtcbiAgICBpZiAoXG4gICAgICAhcHJvcC5jb21wdXRlZCAmJlxuICAgICAgKHByb3Aua2V5Lm5hbWUgPT09IFwiY29uc3RydWN0b3JcIiB8fCBwcm9wLmtleS52YWx1ZSA9PT0gXCJjb25zdHJ1Y3RvclwiKVxuICAgICkge1xuICAgICAgLy8gTm9uLWNvbXB1dGVkIGZpZWxkLCB3aGljaCBpcyBlaXRoZXIgYW4gaWRlbnRpZmllciBuYW1lZCBcImNvbnN0cnVjdG9yXCJcbiAgICAgIC8vIG9yIGEgc3RyaW5nIGxpdGVyYWwgbmFtZWQgXCJjb25zdHJ1Y3RvclwiXG4gICAgICB0aGlzLnJhaXNlKHByb3Aua2V5LnN0YXJ0LCBFcnJvcnMuQ29uc3RydWN0b3JDbGFzc0ZpZWxkKTtcbiAgICB9XG5cbiAgICBjbGFzc0JvZHkuYm9keS5wdXNoKHRoaXMucGFyc2VDbGFzc1Byb3BlcnR5KHByb3ApKTtcbiAgfVxuXG4gIHB1c2hDbGFzc1ByaXZhdGVQcm9wZXJ0eShcbiAgICBjbGFzc0JvZHk6IE4uQ2xhc3NCb2R5LFxuICAgIHByb3A6IE4uQ2xhc3NQcml2YXRlUHJvcGVydHksXG4gICkge1xuICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwiY2xhc3NQcml2YXRlUHJvcGVydGllc1wiLCBwcm9wLmtleS5zdGFydCk7XG5cbiAgICBjb25zdCBub2RlID0gdGhpcy5wYXJzZUNsYXNzUHJpdmF0ZVByb3BlcnR5KHByb3ApO1xuICAgIGNsYXNzQm9keS5ib2R5LnB1c2gobm9kZSk7XG5cbiAgICB0aGlzLmNsYXNzU2NvcGUuZGVjbGFyZVByaXZhdGVOYW1lKFxuICAgICAgbm9kZS5rZXkuaWQubmFtZSxcbiAgICAgIENMQVNTX0VMRU1FTlRfT1RIRVIsXG4gICAgICBub2RlLmtleS5zdGFydCxcbiAgICApO1xuICB9XG5cbiAgcHVzaENsYXNzTWV0aG9kKFxuICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgbWV0aG9kOiBOLkNsYXNzTWV0aG9kLFxuICAgIGlzR2VuZXJhdG9yOiBib29sZWFuLFxuICAgIGlzQXN5bmM6IGJvb2xlYW4sXG4gICAgaXNDb25zdHJ1Y3RvcjogYm9vbGVhbixcbiAgICBhbGxvd3NEaXJlY3RTdXBlcjogYm9vbGVhbixcbiAgKTogdm9pZCB7XG4gICAgY2xhc3NCb2R5LmJvZHkucHVzaChcbiAgICAgIHRoaXMucGFyc2VNZXRob2QoXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaXNHZW5lcmF0b3IsXG4gICAgICAgIGlzQXN5bmMsXG4gICAgICAgIGlzQ29uc3RydWN0b3IsXG4gICAgICAgIGFsbG93c0RpcmVjdFN1cGVyLFxuICAgICAgICBcIkNsYXNzTWV0aG9kXCIsXG4gICAgICAgIHRydWUsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBwdXNoQ2xhc3NQcml2YXRlTWV0aG9kKFxuICAgIGNsYXNzQm9keTogTi5DbGFzc0JvZHksXG4gICAgbWV0aG9kOiBOLkNsYXNzUHJpdmF0ZU1ldGhvZCxcbiAgICBpc0dlbmVyYXRvcjogYm9vbGVhbixcbiAgICBpc0FzeW5jOiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmV4cGVjdFBsdWdpbihcImNsYXNzUHJpdmF0ZU1ldGhvZHNcIiwgbWV0aG9kLmtleS5zdGFydCk7XG5cbiAgICBjb25zdCBub2RlID0gdGhpcy5wYXJzZU1ldGhvZChcbiAgICAgIG1ldGhvZCxcbiAgICAgIGlzR2VuZXJhdG9yLFxuICAgICAgaXNBc3luYyxcbiAgICAgIC8qIGlzQ29uc3RydWN0b3IgKi8gZmFsc2UsXG4gICAgICBmYWxzZSxcbiAgICAgIFwiQ2xhc3NQcml2YXRlTWV0aG9kXCIsXG4gICAgICB0cnVlLFxuICAgICk7XG4gICAgY2xhc3NCb2R5LmJvZHkucHVzaChub2RlKTtcblxuICAgIGNvbnN0IGtpbmQgPVxuICAgICAgbm9kZS5raW5kID09PSBcImdldFwiXG4gICAgICAgID8gbm9kZS5zdGF0aWNcbiAgICAgICAgICA/IENMQVNTX0VMRU1FTlRfU1RBVElDX0dFVFRFUlxuICAgICAgICAgIDogQ0xBU1NfRUxFTUVOVF9JTlNUQU5DRV9HRVRURVJcbiAgICAgICAgOiBub2RlLmtpbmQgPT09IFwic2V0XCJcbiAgICAgICAgPyBub2RlLnN0YXRpY1xuICAgICAgICAgID8gQ0xBU1NfRUxFTUVOVF9TVEFUSUNfU0VUVEVSXG4gICAgICAgICAgOiBDTEFTU19FTEVNRU5UX0lOU1RBTkNFX1NFVFRFUlxuICAgICAgICA6IENMQVNTX0VMRU1FTlRfT1RIRVI7XG4gICAgdGhpcy5jbGFzc1Njb3BlLmRlY2xhcmVQcml2YXRlTmFtZShub2RlLmtleS5pZC5uYW1lLCBraW5kLCBub2RlLmtleS5zdGFydCk7XG4gIH1cblxuICAvLyBPdmVycmlkZGVuIGluIHR5cGVzY3JpcHQuanNcbiAgcGFyc2VQb3N0TWVtYmVyTmFtZU1vZGlmaWVycyhcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBtZXRob2RPclByb3A6IE4uQ2xhc3NNZXRob2QgfCBOLkNsYXNzUHJvcGVydHksXG4gICk6IHZvaWQge31cblxuICBwYXJzZUNsYXNzUHJpdmF0ZVByb3BlcnR5KFxuICAgIG5vZGU6IE4uQ2xhc3NQcml2YXRlUHJvcGVydHksXG4gICk6IE4uQ2xhc3NQcml2YXRlUHJvcGVydHkge1xuICAgIHRoaXMuc2NvcGUuZW50ZXIoU0NPUEVfQ0xBU1MgfCBTQ09QRV9TVVBFUik7XG4gICAgdGhpcy5wcm9kUGFyYW0uZW50ZXIoUEFSQU0pO1xuXG4gICAgbm9kZS52YWx1ZSA9IHRoaXMuZWF0KHR0LmVxKSA/IHRoaXMucGFyc2VNYXliZUFzc2lnbkFsbG93SW4oKSA6IG51bGw7XG4gICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICB0aGlzLnByb2RQYXJhbS5leGl0KCk7XG5cbiAgICB0aGlzLnNjb3BlLmV4aXQoKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDbGFzc1ByaXZhdGVQcm9wZXJ0eVwiKTtcbiAgfVxuXG4gIHBhcnNlQ2xhc3NQcm9wZXJ0eShub2RlOiBOLkNsYXNzUHJvcGVydHkpOiBOLkNsYXNzUHJvcGVydHkge1xuICAgIGlmICghbm9kZS50eXBlQW5ub3RhdGlvbikge1xuICAgICAgdGhpcy5leHBlY3RQbHVnaW4oXCJjbGFzc1Byb3BlcnRpZXNcIik7XG4gICAgfVxuXG4gICAgdGhpcy5zY29wZS5lbnRlcihTQ09QRV9DTEFTUyB8IFNDT1BFX1NVUEVSKTtcbiAgICB0aGlzLnByb2RQYXJhbS5lbnRlcihQQVJBTSk7XG5cbiAgICBpZiAodGhpcy5tYXRjaCh0dC5lcSkpIHtcbiAgICAgIHRoaXMuZXhwZWN0UGx1Z2luKFwiY2xhc3NQcm9wZXJ0aWVzXCIpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBub2RlLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zZW1pY29sb24oKTtcblxuICAgIHRoaXMucHJvZFBhcmFtLmV4aXQoKTtcbiAgICB0aGlzLnNjb3BlLmV4aXQoKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDbGFzc1Byb3BlcnR5XCIpO1xuICB9XG5cbiAgcGFyc2VDbGFzc0lkKFxuICAgIG5vZGU6IE4uQ2xhc3MsXG4gICAgaXNTdGF0ZW1lbnQ6IGJvb2xlYW4sXG4gICAgb3B0aW9uYWxJZDogP2Jvb2xlYW4sXG4gICAgYmluZGluZ1R5cGU6IEJpbmRpbmdUeXBlcyA9IEJJTkRfQ0xBU1MsXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1hdGNoKHR0Lm5hbWUpKSB7XG4gICAgICBub2RlLmlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmIChpc1N0YXRlbWVudCkge1xuICAgICAgICB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBiaW5kaW5nVHlwZSwgdW5kZWZpbmVkLCBcImNsYXNzIG5hbWVcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25hbElkIHx8ICFpc1N0YXRlbWVudCkge1xuICAgICAgICBub2RlLmlkID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5leHBlY3RlZChudWxsLCBFcnJvcnMuTWlzc2luZ0NsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtQ2xhc3NIZXJpdGFnZVxuICBwYXJzZUNsYXNzU3VwZXIobm9kZTogTi5DbGFzcyk6IHZvaWQge1xuICAgIG5vZGUuc3VwZXJDbGFzcyA9IHRoaXMuZWF0KHR0Ll9leHRlbmRzKSA/IHRoaXMucGFyc2VFeHByU3Vic2NyaXB0cygpIDogbnVsbDtcbiAgfVxuXG4gIC8vIFBhcnNlcyBtb2R1bGUgZXhwb3J0IGRlY2xhcmF0aW9uLlxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jcHJvZC1FeHBvcnREZWNsYXJhdGlvblxuXG4gIHBhcnNlRXhwb3J0KG5vZGU6IE4uTm9kZSk6IE4uQW55RXhwb3J0IHtcbiAgICBjb25zdCBoYXNEZWZhdWx0ID0gdGhpcy5tYXliZVBhcnNlRXhwb3J0RGVmYXVsdFNwZWNpZmllcihub2RlKTtcbiAgICBjb25zdCBwYXJzZUFmdGVyRGVmYXVsdCA9ICFoYXNEZWZhdWx0IHx8IHRoaXMuZWF0KHR0LmNvbW1hKTtcbiAgICBjb25zdCBoYXNTdGFyID0gcGFyc2VBZnRlckRlZmF1bHQgJiYgdGhpcy5lYXRFeHBvcnRTdGFyKG5vZGUpO1xuICAgIGNvbnN0IGhhc05hbWVzcGFjZSA9XG4gICAgICBoYXNTdGFyICYmIHRoaXMubWF5YmVQYXJzZUV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcihub2RlKTtcbiAgICBjb25zdCBwYXJzZUFmdGVyTmFtZXNwYWNlID1cbiAgICAgIHBhcnNlQWZ0ZXJEZWZhdWx0ICYmICghaGFzTmFtZXNwYWNlIHx8IHRoaXMuZWF0KHR0LmNvbW1hKSk7XG4gICAgY29uc3QgaXNGcm9tUmVxdWlyZWQgPSBoYXNEZWZhdWx0IHx8IGhhc1N0YXI7XG5cbiAgICBpZiAoaGFzU3RhciAmJiAhaGFzTmFtZXNwYWNlKSB7XG4gICAgICBpZiAoaGFzRGVmYXVsdCkgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICB0aGlzLnBhcnNlRXhwb3J0RnJvbShub2RlLCB0cnVlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc1NwZWNpZmllcnMgPSB0aGlzLm1heWJlUGFyc2VFeHBvcnROYW1lZFNwZWNpZmllcnMobm9kZSk7XG5cbiAgICBpZiAoXG4gICAgICAoaGFzRGVmYXVsdCAmJiBwYXJzZUFmdGVyRGVmYXVsdCAmJiAhaGFzU3RhciAmJiAhaGFzU3BlY2lmaWVycykgfHxcbiAgICAgIChoYXNOYW1lc3BhY2UgJiYgcGFyc2VBZnRlck5hbWVzcGFjZSAmJiAhaGFzU3BlY2lmaWVycylcbiAgICApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZChudWxsLCB0dC5icmFjZUwpO1xuICAgIH1cblxuICAgIGxldCBoYXNEZWNsYXJhdGlvbjtcbiAgICBpZiAoaXNGcm9tUmVxdWlyZWQgfHwgaGFzU3BlY2lmaWVycykge1xuICAgICAgaGFzRGVjbGFyYXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMucGFyc2VFeHBvcnRGcm9tKG5vZGUsIGlzRnJvbVJlcXVpcmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzRGVjbGFyYXRpb24gPSB0aGlzLm1heWJlUGFyc2VFeHBvcnREZWNsYXJhdGlvbihub2RlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNGcm9tUmVxdWlyZWQgfHwgaGFzU3BlY2lmaWVycyB8fCBoYXNEZWNsYXJhdGlvbikge1xuICAgICAgdGhpcy5jaGVja0V4cG9ydChub2RlLCB0cnVlLCBmYWxzZSwgISFub2RlLnNvdXJjZSk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lYXQodHQuX2RlZmF1bHQpKSB7XG4gICAgICAvLyBleHBvcnQgZGVmYXVsdCAuLi5cbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlRXhwb3J0RGVmYXVsdEV4cHJlc3Npb24oKTtcbiAgICAgIHRoaXMuY2hlY2tFeHBvcnQobm9kZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIik7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKG51bGwsIHR0LmJyYWNlTCk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgZWF0RXhwb3J0U3Rhcihub2RlOiBOLk5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lYXQodHQuc3Rhcik7XG4gIH1cblxuICBtYXliZVBhcnNlRXhwb3J0RGVmYXVsdFNwZWNpZmllcihub2RlOiBOLk5vZGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0V4cG9ydERlZmF1bHRTcGVjaWZpZXIoKSkge1xuICAgICAgLy8gZXhwb3J0IGRlZmF1bHRPYmogLi4uXG4gICAgICB0aGlzLmV4cGVjdFBsdWdpbihcImV4cG9ydERlZmF1bHRGcm9tXCIpO1xuICAgICAgY29uc3Qgc3BlY2lmaWVyID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHNwZWNpZmllci5leHBvcnRlZCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpO1xuICAgICAgbm9kZS5zcGVjaWZpZXJzID0gW3RoaXMuZmluaXNoTm9kZShzcGVjaWZpZXIsIFwiRXhwb3J0RGVmYXVsdFNwZWNpZmllclwiKV07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbWF5YmVQYXJzZUV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcihub2RlOiBOLk5vZGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJhc1wiKSkge1xuICAgICAgaWYgKCFub2RlLnNwZWNpZmllcnMpIG5vZGUuc3BlY2lmaWVycyA9IFtdO1xuXG4gICAgICBjb25zdCBzcGVjaWZpZXIgPSB0aGlzLnN0YXJ0Tm9kZUF0KFxuICAgICAgICB0aGlzLnN0YXRlLmxhc3RUb2tTdGFydCxcbiAgICAgICAgdGhpcy5zdGF0ZS5sYXN0VG9rU3RhcnRMb2MsXG4gICAgICApO1xuXG4gICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgc3BlY2lmaWVyLmV4cG9ydGVkID0gdGhpcy5wYXJzZUlkZW50aWZpZXIodHJ1ZSk7XG4gICAgICBub2RlLnNwZWNpZmllcnMucHVzaChcbiAgICAgICAgdGhpcy5maW5pc2hOb2RlKHNwZWNpZmllciwgXCJFeHBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIiksXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG1heWJlUGFyc2VFeHBvcnROYW1lZFNwZWNpZmllcnMobm9kZTogTi5Ob2RlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMubWF0Y2godHQuYnJhY2VMKSkge1xuICAgICAgaWYgKCFub2RlLnNwZWNpZmllcnMpIG5vZGUuc3BlY2lmaWVycyA9IFtdO1xuICAgICAgbm9kZS5zcGVjaWZpZXJzLnB1c2goLi4udGhpcy5wYXJzZUV4cG9ydFNwZWNpZmllcnMoKSk7XG5cbiAgICAgIG5vZGUuc291cmNlID0gbnVsbDtcbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSBudWxsO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbWF5YmVQYXJzZUV4cG9ydERlY2xhcmF0aW9uKG5vZGU6IE4uTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLnNob3VsZFBhcnNlRXhwb3J0RGVjbGFyYXRpb24oKSkge1xuICAgICAgbm9kZS5zcGVjaWZpZXJzID0gW107XG4gICAgICBub2RlLnNvdXJjZSA9IG51bGw7XG4gICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUV4cG9ydERlY2xhcmF0aW9uKG5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzQXN5bmNGdW5jdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuaXNDb250ZXh0dWFsKFwiYXN5bmNcIikpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5uZXh0VG9rZW5TdGFydCgpO1xuICAgIHJldHVybiAoXG4gICAgICAhbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXRlLnBvcywgbmV4dCkpICYmXG4gICAgICB0aGlzLmlzVW5wYXJzZWRDb250ZXh0dWFsKG5leHQsIFwiZnVuY3Rpb25cIilcbiAgICApO1xuICB9XG5cbiAgcGFyc2VFeHBvcnREZWZhdWx0RXhwcmVzc2lvbigpOiBOLkV4cHJlc3Npb24gfCBOLkRlY2xhcmF0aW9uIHtcbiAgICBjb25zdCBleHByID0gdGhpcy5zdGFydE5vZGUoKTtcblxuICAgIGNvbnN0IGlzQXN5bmMgPSB0aGlzLmlzQXN5bmNGdW5jdGlvbigpO1xuXG4gICAgaWYgKHRoaXMubWF0Y2godHQuX2Z1bmN0aW9uKSB8fCBpc0FzeW5jKSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmIChpc0FzeW5jKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKFxuICAgICAgICBleHByLFxuICAgICAgICBGVU5DX1NUQVRFTUVOVCB8IEZVTkNfTlVMTEFCTEVfSUQsXG4gICAgICAgIGlzQXN5bmMsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5fY2xhc3MpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKGV4cHIsIHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaCh0dC5hdCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5oYXNQbHVnaW4oXCJkZWNvcmF0b3JzXCIpICYmXG4gICAgICAgIHRoaXMuZ2V0UGx1Z2luT3B0aW9uKFwiZGVjb3JhdG9yc1wiLCBcImRlY29yYXRvcnNCZWZvcmVFeHBvcnRcIilcbiAgICAgICkge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5EZWNvcmF0b3JCZWZvcmVFeHBvcnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJzZURlY29yYXRvcnMoZmFsc2UpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyhleHByLCB0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2godHQuX2NvbnN0KSB8fCB0aGlzLm1hdGNoKHR0Ll92YXIpIHx8IHRoaXMuaXNMZXQoKSkge1xuICAgICAgdGhyb3cgdGhpcy5yYWlzZSh0aGlzLnN0YXRlLnN0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWREZWZhdWx0RXhwb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzID0gdGhpcy5wYXJzZU1heWJlQXNzaWduQWxsb3dJbigpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHBhcnNlRXhwb3J0RGVjbGFyYXRpb24obm9kZTogTi5FeHBvcnROYW1lZERlY2xhcmF0aW9uKTogP04uRGVjbGFyYXRpb24ge1xuICAgIHJldHVybiB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwpO1xuICB9XG5cbiAgaXNFeHBvcnREZWZhdWx0U3BlY2lmaWVyKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLm1hdGNoKHR0Lm5hbWUpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICBpZiAoKHZhbHVlID09PSBcImFzeW5jXCIgJiYgIXRoaXMuc3RhdGUuY29udGFpbnNFc2MpIHx8IHZhbHVlID09PSBcImxldFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgKHZhbHVlID09PSBcInR5cGVcIiB8fCB2YWx1ZSA9PT0gXCJpbnRlcmZhY2VcIikgJiZcbiAgICAgICAgIXRoaXMuc3RhdGUuY29udGFpbnNFc2NcbiAgICAgICkge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5sb29rYWhlYWQoKTtcbiAgICAgICAgLy8gSWYgd2Ugc2VlIGFueSB2YXJpYWJsZSBuYW1lIG90aGVyIHRoYW4gYGZyb21gIGFmdGVyIGB0eXBlYCBrZXl3b3JkLFxuICAgICAgICAvLyB3ZSBjb25zaWRlciBpdCBhcyBmbG93L3R5cGVzY3JpcHQgdHlwZSBleHBvcnRzXG4gICAgICAgIC8vIG5vdGUgdGhhdCB0aGlzIGFwcHJvYWNoIG1heSBmYWlsIG9uIHNvbWUgcGVkYW50aWMgY2FzZXNcbiAgICAgICAgLy8gZXhwb3J0IHR5cGUgZnJvbSA9IG51bWJlclxuICAgICAgICBpZiAoXG4gICAgICAgICAgKGwudHlwZSA9PT0gdHQubmFtZSAmJiBsLnZhbHVlICE9PSBcImZyb21cIikgfHxcbiAgICAgICAgICBsLnR5cGUgPT09IHR0LmJyYWNlTFxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLmV4cGVjdE9uZVBsdWdpbihbXCJmbG93XCIsIFwidHlwZXNjcmlwdFwiXSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5tYXRjaCh0dC5fZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gdGhpcy5uZXh0VG9rZW5TdGFydCgpO1xuICAgIGNvbnN0IGhhc0Zyb20gPSB0aGlzLmlzVW5wYXJzZWRDb250ZXh0dWFsKG5leHQsIFwiZnJvbVwiKTtcbiAgICBpZiAoXG4gICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQobmV4dCkgPT09IGNoYXJDb2Rlcy5jb21tYSB8fFxuICAgICAgKHRoaXMubWF0Y2godHQubmFtZSkgJiYgaGFzRnJvbSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBsb29rYWhlYWQgYWdhaW4gd2hlbiBgZXhwb3J0IGRlZmF1bHQgZnJvbWAgaXMgc2VlblxuICAgIGlmICh0aGlzLm1hdGNoKHR0Ll9kZWZhdWx0KSAmJiBoYXNGcm9tKSB7XG4gICAgICBjb25zdCBuZXh0QWZ0ZXJGcm9tID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KFxuICAgICAgICB0aGlzLm5leHRUb2tlblN0YXJ0U2luY2UobmV4dCArIDQpLFxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG5leHRBZnRlckZyb20gPT09IGNoYXJDb2Rlcy5xdW90YXRpb25NYXJrIHx8XG4gICAgICAgIG5leHRBZnRlckZyb20gPT09IGNoYXJDb2Rlcy5hcG9zdHJvcGhlXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwYXJzZUV4cG9ydEZyb20obm9kZTogTi5FeHBvcnROYW1lZERlY2xhcmF0aW9uLCBleHBlY3Q/OiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImZyb21cIikpIHtcbiAgICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUltcG9ydFNvdXJjZSgpO1xuICAgICAgdGhpcy5jaGVja0V4cG9ydChub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGV4cGVjdCkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc291cmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICB9XG5cbiAgc2hvdWxkUGFyc2VFeHBvcnREZWNsYXJhdGlvbigpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5tYXRjaCh0dC5hdCkpIHtcbiAgICAgIHRoaXMuZXhwZWN0T25lUGx1Z2luKFtcImRlY29yYXRvcnNcIiwgXCJkZWNvcmF0b3JzLWxlZ2FjeVwiXSk7XG4gICAgICBpZiAodGhpcy5oYXNQbHVnaW4oXCJkZWNvcmF0b3JzXCIpKSB7XG4gICAgICAgIGlmICh0aGlzLmdldFBsdWdpbk9wdGlvbihcImRlY29yYXRvcnNcIiwgXCJkZWNvcmF0b3JzQmVmb3JlRXhwb3J0XCIpKSB7XG4gICAgICAgICAgdGhpcy51bmV4cGVjdGVkKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5EZWNvcmF0b3JCZWZvcmVFeHBvcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuc3RhdGUudHlwZS5rZXl3b3JkID09PSBcInZhclwiIHx8XG4gICAgICB0aGlzLnN0YXRlLnR5cGUua2V5d29yZCA9PT0gXCJjb25zdFwiIHx8XG4gICAgICB0aGlzLnN0YXRlLnR5cGUua2V5d29yZCA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICB0aGlzLnN0YXRlLnR5cGUua2V5d29yZCA9PT0gXCJjbGFzc1wiIHx8XG4gICAgICB0aGlzLmlzTGV0KCkgfHxcbiAgICAgIHRoaXMuaXNBc3luY0Z1bmN0aW9uKClcbiAgICApO1xuICB9XG5cbiAgY2hlY2tFeHBvcnQoXG4gICAgbm9kZTogTi5FeHBvcnROYW1lZERlY2xhcmF0aW9uLFxuICAgIGNoZWNrTmFtZXM/OiBib29sZWFuLFxuICAgIGlzRGVmYXVsdD86IGJvb2xlYW4sXG4gICAgaXNGcm9tPzogYm9vbGVhbixcbiAgKTogdm9pZCB7XG4gICAgaWYgKGNoZWNrTmFtZXMpIHtcbiAgICAgIC8vIENoZWNrIGZvciBkdXBsaWNhdGUgZXhwb3J0c1xuICAgICAgaWYgKGlzRGVmYXVsdCkge1xuICAgICAgICAvLyBEZWZhdWx0IGV4cG9ydHNcbiAgICAgICAgdGhpcy5jaGVja0R1cGxpY2F0ZUV4cG9ydHMobm9kZSwgXCJkZWZhdWx0XCIpO1xuICAgICAgICBpZiAodGhpcy5oYXNQbHVnaW4oXCJleHBvcnREZWZhdWx0RnJvbVwiKSkge1xuICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gKChub2RlOiBhbnkpOiBOLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbilcbiAgICAgICAgICAgIC5kZWNsYXJhdGlvbjtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBkZWNsYXJhdGlvbi50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICAgICAgZGVjbGFyYXRpb24ubmFtZSA9PT0gXCJmcm9tXCIgJiZcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLmVuZCAtIGRlY2xhcmF0aW9uLnN0YXJ0ID09PSA0ICYmIC8vIGRvZXMgbm90IGNvbnRhaW4gZXNjYXBlXG4gICAgICAgICAgICAhZGVjbGFyYXRpb24uZXh0cmE/LnBhcmVudGhlc2l6ZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmFpc2UoZGVjbGFyYXRpb24uc3RhcnQsIEVycm9ycy5FeHBvcnREZWZhdWx0RnJvbUFzSWRlbnRpZmllcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuc3BlY2lmaWVycyAmJiBub2RlLnNwZWNpZmllcnMubGVuZ3RoKSB7XG4gICAgICAgIC8vIE5hbWVkIGV4cG9ydHNcbiAgICAgICAgZm9yIChjb25zdCBzcGVjaWZpZXIgb2Ygbm9kZS5zcGVjaWZpZXJzKSB7XG4gICAgICAgICAgdGhpcy5jaGVja0R1cGxpY2F0ZUV4cG9ydHMoc3BlY2lmaWVyLCBzcGVjaWZpZXIuZXhwb3J0ZWQubmFtZSk7XG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICBpZiAoIWlzRnJvbSAmJiBzcGVjaWZpZXIubG9jYWwpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBrZXl3b3JkcyB1c2VkIGFzIGxvY2FsIG5hbWVzXG4gICAgICAgICAgICB0aGlzLmNoZWNrUmVzZXJ2ZWRXb3JkKFxuICAgICAgICAgICAgICBzcGVjaWZpZXIubG9jYWwubmFtZSxcbiAgICAgICAgICAgICAgc3BlY2lmaWVyLmxvY2FsLnN0YXJ0LFxuICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBleHBvcnQgaXMgZGVmaW5lZFxuICAgICAgICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuY2hlY2tMb2NhbEV4cG9ydChzcGVjaWZpZXIubG9jYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmRlY2xhcmF0aW9uKSB7XG4gICAgICAgIC8vIEV4cG9ydGVkIGRlY2xhcmF0aW9uc1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbm9kZS5kZWNsYXJhdGlvbi50eXBlID09PSBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiB8fFxuICAgICAgICAgIG5vZGUuZGVjbGFyYXRpb24udHlwZSA9PT0gXCJDbGFzc0RlY2xhcmF0aW9uXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaWQgPSBub2RlLmRlY2xhcmF0aW9uLmlkO1xuICAgICAgICAgIGlmICghaWQpIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBmYWlsdXJlXCIpO1xuXG4gICAgICAgICAgdGhpcy5jaGVja0R1cGxpY2F0ZUV4cG9ydHMobm9kZSwgaWQubmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5kZWNsYXJhdGlvbi50eXBlID09PSBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIikge1xuICAgICAgICAgIGZvciAoY29uc3QgZGVjbGFyYXRpb24gb2Ygbm9kZS5kZWNsYXJhdGlvbi5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZWNsYXJhdGlvbihkZWNsYXJhdGlvbi5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudENvbnRleHREZWNvcmF0b3JzID0gdGhpcy5zdGF0ZS5kZWNvcmF0b3JTdGFja1tcbiAgICAgIHRoaXMuc3RhdGUuZGVjb3JhdG9yU3RhY2subGVuZ3RoIC0gMVxuICAgIF07XG4gICAgLy8gSWYgbm9kZS5kZWNsYXJhdGlvbiBpcyBhIGNsYXNzLCBpdCB3aWxsIHRha2UgYWxsIGRlY29yYXRvcnMgaW4gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICAvLyBUaHVzIHdlIHNob3VsZCB0aHJvdyBpZiB3ZSBzZWUgbm9uLWVtcHR5IGRlY29yYXRvcnMgaGVyZS5cbiAgICBpZiAoY3VycmVudENvbnRleHREZWNvcmF0b3JzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBFcnJvcnMuVW5zdXBwb3J0ZWREZWNvcmF0b3JFeHBvcnQpO1xuICAgIH1cbiAgfVxuXG4gIGNoZWNrRGVjbGFyYXRpb24obm9kZTogTi5QYXR0ZXJuIHwgTi5PYmplY3RQcm9wZXJ0eSk6IHZvaWQge1xuICAgIGlmIChub2RlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XG4gICAgICB0aGlzLmNoZWNrRHVwbGljYXRlRXhwb3J0cyhub2RlLCBub2RlLm5hbWUpO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIk9iamVjdFBhdHRlcm5cIikge1xuICAgICAgZm9yIChjb25zdCBwcm9wIG9mIG5vZGUucHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmNoZWNrRGVjbGFyYXRpb24ocHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IFwiQXJyYXlQYXR0ZXJuXCIpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBub2RlLmVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgICAgdGhpcy5jaGVja0RlY2xhcmF0aW9uKGVsZW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IFwiT2JqZWN0UHJvcGVydHlcIikge1xuICAgICAgdGhpcy5jaGVja0RlY2xhcmF0aW9uKG5vZGUudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpIHtcbiAgICAgIHRoaXMuY2hlY2tEZWNsYXJhdGlvbihub2RlLmFyZ3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKSB7XG4gICAgICB0aGlzLmNoZWNrRGVjbGFyYXRpb24obm9kZS5sZWZ0KTtcbiAgICB9XG4gIH1cblxuICBjaGVja0R1cGxpY2F0ZUV4cG9ydHMoXG4gICAgbm9kZTpcbiAgICAgIHwgTi5JZGVudGlmaWVyXG4gICAgICB8IE4uRXhwb3J0TmFtZWREZWNsYXJhdGlvblxuICAgICAgfCBOLkV4cG9ydFNwZWNpZmllclxuICAgICAgfCBOLkV4cG9ydERlZmF1bHRTcGVjaWZpZXIsXG4gICAgbmFtZTogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5leHBvcnRlZElkZW50aWZpZXJzLmluZGV4T2YobmFtZSkgPiAtMSkge1xuICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgbm9kZS5zdGFydCxcbiAgICAgICAgbmFtZSA9PT0gXCJkZWZhdWx0XCJcbiAgICAgICAgICA/IEVycm9ycy5EdXBsaWNhdGVEZWZhdWx0RXhwb3J0XG4gICAgICAgICAgOiBFcnJvcnMuRHVwbGljYXRlRXhwb3J0LFxuICAgICAgICBuYW1lLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZS5leHBvcnRlZElkZW50aWZpZXJzLnB1c2gobmFtZSk7XG4gIH1cblxuICAvLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBtb2R1bGUgZXhwb3J0cy5cblxuICBwYXJzZUV4cG9ydFNwZWNpZmllcnMoKTogQXJyYXk8Ti5FeHBvcnRTcGVjaWZpZXI+IHtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG5cbiAgICAvLyBleHBvcnQgeyB4LCB5IGFzIHogfSBbZnJvbSAnLi4uJ11cbiAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuXG4gICAgd2hpbGUgKCF0aGlzLmVhdCh0dC5icmFjZVIpKSB7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbW1hKTtcbiAgICAgICAgaWYgKHRoaXMuZWF0KHR0LmJyYWNlUikpIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIG5vZGUubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICAgIG5vZGUuZXhwb3J0ZWQgPSB0aGlzLmVhdENvbnRleHR1YWwoXCJhc1wiKVxuICAgICAgICA/IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpXG4gICAgICAgIDogbm9kZS5sb2NhbC5fX2Nsb25lKCk7XG4gICAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydFNwZWNpZmllclwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgLy8gUGFyc2VzIGltcG9ydCBkZWNsYXJhdGlvbi5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3Byb2QtSW1wb3J0RGVjbGFyYXRpb25cblxuICBwYXJzZUltcG9ydChub2RlOiBOLk5vZGUpOiBOLkFueUltcG9ydCB7XG4gICAgLy8gaW1wb3J0ICcuLi4nXG4gICAgbm9kZS5zcGVjaWZpZXJzID0gW107XG4gICAgaWYgKCF0aGlzLm1hdGNoKHR0LnN0cmluZykpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYSBkZWZhdWx0IGltcG9ydCBsaWtlXG4gICAgICAvLyBpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4gICAgICBjb25zdCBoYXNEZWZhdWx0ID0gdGhpcy5tYXliZVBhcnNlRGVmYXVsdEltcG9ydFNwZWNpZmllcihub2RlKTtcbiAgICAgIC8qIHdlIGFyZSBjaGVja2luZyBpZiB3ZSBkbyBub3QgaGF2ZSBhIGRlZmF1bHQgaW1wb3J0LCB0aGVuIGl0IGlzIG9idmlvdXMgdGhhdCB3ZSBuZWVkIG5hbWVkIGltcG9ydHNcbiAgICAgICAqIGltcG9ydCB7IGdldCB9IGZyb20gXCJheGlvc1wiO1xuICAgICAgICogYnV0IGlmIHdlIGRvIGhhdmUgYSBkZWZhdWx0IGltcG9ydFxuICAgICAgICogd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBoYXZlIGEgY29tbWEgYWZ0ZXIgdGhhdCBhbmRcbiAgICAgICAqIHRoYXQgaXMgd2hlcmUgdGhpcyBgfHwgdGhpcy5lYXRgIGNvbmRpdGlvbiBjb21lcyBpbnRvIHBsYXlcbiAgICAgICAqL1xuICAgICAgY29uc3QgcGFyc2VOZXh0ID0gIWhhc0RlZmF1bHQgfHwgdGhpcy5lYXQodHQuY29tbWEpO1xuICAgICAgLy8gaWYgd2UgZG8gaGF2ZSB0byBwYXJzZSB0aGUgbmV4dCBzZXQgb2Ygc3BlY2lmaWVycywgd2UgZmlyc3QgY2hlY2sgZm9yIHN0YXIgaW1wb3J0c1xuICAgICAgLy8gaW1wb3J0IFJlYWN0LCAqIGZyb20gXCJyZWFjdFwiO1xuICAgICAgY29uc3QgaGFzU3RhciA9IHBhcnNlTmV4dCAmJiB0aGlzLm1heWJlUGFyc2VTdGFySW1wb3J0U3BlY2lmaWVyKG5vZGUpO1xuICAgICAgLy8gbm93IHdlIGNoZWNrIGlmIHdlIG5lZWQgdG8gcGFyc2UgdGhlIG5leHQgaW1wb3J0c1xuICAgICAgLy8gYnV0IG9ubHkgaWYgdGhleSBhcmUgbm90IGltcG9ydGluZyAqIChldmVyeXRoaW5nKVxuICAgICAgaWYgKHBhcnNlTmV4dCAmJiAhaGFzU3RhcikgdGhpcy5wYXJzZU5hbWVkSW1wb3J0U3BlY2lmaWVycyhub2RlKTtcbiAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImZyb21cIik7XG4gICAgfVxuICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUltcG9ydFNvdXJjZSgpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW1vZHVsZS1hdHRyaWJ1dGVzXG4gICAgLy8gcGFyc2UgbW9kdWxlIGF0dHJpYnV0ZXMgaWYgdGhlIG5leHQgdG9rZW4gaXMgYHdpdGhgIG9yIGlnbm9yZSBhbmQgZmluaXNoIHRoZSBJbXBvcnREZWNsYXJhdGlvbiBub2RlLlxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLm1heWJlUGFyc2VNb2R1bGVBdHRyaWJ1dGVzKCk7XG4gICAgaWYgKGF0dHJpYnV0ZXMpIHtcbiAgICAgIG5vZGUuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgfVxuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpO1xuICB9XG5cbiAgcGFyc2VJbXBvcnRTb3VyY2UoKTogTi5TdHJpbmdMaXRlcmFsIHtcbiAgICBpZiAoIXRoaXMubWF0Y2godHQuc3RyaW5nKSkgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VFeHByQXRvbSgpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHNob3VsZFBhcnNlRGVmYXVsdEltcG9ydChub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2godHQubmFtZSk7XG4gIH1cblxuICBwYXJzZUltcG9ydFNwZWNpZmllckxvY2FsKFxuICAgIG5vZGU6IE4uSW1wb3J0RGVjbGFyYXRpb24sXG4gICAgc3BlY2lmaWVyOiBOLk5vZGUsXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGNvbnRleHREZXNjcmlwdGlvbjogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICBzcGVjaWZpZXIubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllcigpO1xuICAgIHRoaXMuY2hlY2tMVmFsKFxuICAgICAgc3BlY2lmaWVyLmxvY2FsLFxuICAgICAgQklORF9MRVhJQ0FMLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgY29udGV4dERlc2NyaXB0aW9uLFxuICAgICk7XG4gICAgbm9kZS5zcGVjaWZpZXJzLnB1c2godGhpcy5maW5pc2hOb2RlKHNwZWNpZmllciwgdHlwZSkpO1xuICB9XG5cbiAgbWF5YmVQYXJzZU1vZHVsZUF0dHJpYnV0ZXMoKSB7XG4gICAgaWYgKHRoaXMubWF0Y2godHQuX3dpdGgpICYmICF0aGlzLmhhc1ByZWNlZGluZ0xpbmVCcmVhaygpKSB7XG4gICAgICB0aGlzLmV4cGVjdFBsdWdpbihcIm1vZHVsZUF0dHJpYnV0ZXNcIik7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwibW9kdWxlQXR0cmlidXRlc1wiKSkgcmV0dXJuIFtdO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGF0dHJzID0gW107XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBTZXQoKTtcbiAgICBkbyB7XG4gICAgICAvLyB3ZSBhcmUgdHJ5aW5nIHRvIHBhcnNlIGEgbm9kZSB3aGljaCBoYXMgdGhlIGZvbGxvd2luZyBzeW50YXhcbiAgICAgIC8vIHdpdGggdHlwZTogXCJqc29uXCJcbiAgICAgIC8vIFt3aXRoIC0+IGtleXdvcmRdLCBbdHlwZSAtPiBJZGVudGlmaWVyXSwgW1wiOlwiIC0+IHRva2VuIGZvciBjb2xvbl0sIFtcImpzb25cIiAtPiBTdHJpbmdMaXRlcmFsXVxuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLmtleSA9IHRoaXMucGFyc2VJZGVudGlmaWVyKHRydWUpO1xuXG4gICAgICAvLyBmb3Igbm93IHdlIGFyZSBvbmx5IGFsbG93aW5nIGB0eXBlYCBhcyB0aGUgb25seSBhbGxvd2VkIG1vZHVsZSBhdHRyaWJ1dGVcbiAgICAgIGlmIChub2RlLmtleS5uYW1lICE9PSBcInR5cGVcIikge1xuICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgIG5vZGUua2V5LnN0YXJ0LFxuICAgICAgICAgIEVycm9ycy5Nb2R1bGVBdHRyaWJ1dGVEaWZmZXJlbnRGcm9tVHlwZSxcbiAgICAgICAgICBub2RlLmtleS5uYW1lLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiB3ZSBhbHJlYWR5IGhhdmUgYW4gZW50cnkgZm9yIGFuIGF0dHJpYnV0ZVxuICAgICAgLy8gaWYgYSBkdXBsaWNhdGUgZW50cnkgaXMgZm91bmQsIHRocm93IGFuIGVycm9yXG4gICAgICAvLyBmb3Igbm93IHRoaXMgbG9naWMgd2lsbCBjb21lIGludG8gcGxheSBvbmx5IHdoZW4gc29tZW9uZSBkZWNsYXJlcyBgdHlwZWAgdHdpY2VcbiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhcyhub2RlLmtleS5uYW1lKSkge1xuICAgICAgICB0aGlzLnJhaXNlKFxuICAgICAgICAgIG5vZGUua2V5LnN0YXJ0LFxuICAgICAgICAgIEVycm9ycy5Nb2R1bGVBdHRyaWJ1dGVzV2l0aER1cGxpY2F0ZUtleXMsXG4gICAgICAgICAgbm9kZS5rZXkubmFtZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMuYWRkKG5vZGUua2V5Lm5hbWUpO1xuICAgICAgdGhpcy5leHBlY3QodHQuY29sb24pO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIHNldCB0byB0aGUgbW9kdWxlIGF0dHJpYnV0ZSBpcyBhIHN0cmluZyBhcyB3ZSBvbmx5IGFsbG93IHN0cmluZyBsaXRlcmFsc1xuICAgICAgaWYgKCF0aGlzLm1hdGNoKHR0LnN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKFxuICAgICAgICAgIHRoaXMuc3RhdGUuc3RhcnQsXG4gICAgICAgICAgRXJyb3JzLk1vZHVsZUF0dHJpYnV0ZUludmFsaWRWYWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG5vZGUudmFsdWUgPSB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnN0YXRlLnZhbHVlLCBcIlN0cmluZ0xpdGVyYWxcIik7XG4gICAgICB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnRBdHRyaWJ1dGVcIik7XG4gICAgICBhdHRycy5wdXNoKG5vZGUpO1xuICAgIH0gd2hpbGUgKHRoaXMuZWF0KHR0LmNvbW1hKSk7XG5cbiAgICByZXR1cm4gYXR0cnM7XG4gIH1cblxuICBtYXliZVBhcnNlRGVmYXVsdEltcG9ydFNwZWNpZmllcihub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuc2hvdWxkUGFyc2VEZWZhdWx0SW1wb3J0KG5vZGUpKSB7XG4gICAgICAvLyBpbXBvcnQgZGVmYXVsdE9iaiwgeyB4LCB5IGFzIHogfSBmcm9tICcuLi4nXG4gICAgICB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVyTG9jYWwoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHRoaXMuc3RhcnROb2RlKCksXG4gICAgICAgIFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiLFxuICAgICAgICBcImRlZmF1bHQgaW1wb3J0IHNwZWNpZmllclwiLFxuICAgICAgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBtYXliZVBhcnNlU3RhckltcG9ydFNwZWNpZmllcihub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMubWF0Y2godHQuc3RhcikpIHtcbiAgICAgIGNvbnN0IHNwZWNpZmllciA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImFzXCIpO1xuXG4gICAgICB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVyTG9jYWwoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHNwZWNpZmllcixcbiAgICAgICAgXCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIixcbiAgICAgICAgXCJpbXBvcnQgbmFtZXNwYWNlIHNwZWNpZmllclwiLFxuICAgICAgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwYXJzZU5hbWVkSW1wb3J0U3BlY2lmaWVycyhub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKSB7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICB0aGlzLmV4cGVjdCh0dC5icmFjZUwpO1xuICAgIHdoaWxlICghdGhpcy5lYXQodHQuYnJhY2VSKSkge1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZXRlY3QgYW4gYXR0ZW1wdCB0byBkZWVwIGRlc3RydWN0dXJlXG4gICAgICAgIGlmICh0aGlzLmVhdCh0dC5jb2xvbikpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLnJhaXNlKHRoaXMuc3RhdGUuc3RhcnQsIEVycm9ycy5EZXN0cnVjdHVyZU5hbWVkSW1wb3J0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmNvbW1hKTtcbiAgICAgICAgaWYgKHRoaXMuZWF0KHR0LmJyYWNlUikpIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVyKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNwcm9kLUltcG9ydFNwZWNpZmllclxuICBwYXJzZUltcG9ydFNwZWNpZmllcihub2RlOiBOLkltcG9ydERlY2xhcmF0aW9uKTogdm9pZCB7XG4gICAgY29uc3Qgc3BlY2lmaWVyID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBzcGVjaWZpZXIuaW1wb3J0ZWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllcih0cnVlKTtcbiAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgIHNwZWNpZmllci5sb2NhbCA9IHRoaXMucGFyc2VJZGVudGlmaWVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hlY2tSZXNlcnZlZFdvcmQoXG4gICAgICAgIHNwZWNpZmllci5pbXBvcnRlZC5uYW1lLFxuICAgICAgICBzcGVjaWZpZXIuc3RhcnQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIHRydWUsXG4gICAgICApO1xuICAgICAgc3BlY2lmaWVyLmxvY2FsID0gc3BlY2lmaWVyLmltcG9ydGVkLl9fY2xvbmUoKTtcbiAgICB9XG4gICAgdGhpcy5jaGVja0xWYWwoXG4gICAgICBzcGVjaWZpZXIubG9jYWwsXG4gICAgICBCSU5EX0xFWElDQUwsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBcImltcG9ydCBzcGVjaWZpZXJcIixcbiAgICApO1xuICAgIG5vZGUuc3BlY2lmaWVycy5wdXNoKHRoaXMuZmluaXNoTm9kZShzcGVjaWZpZXIsIFwiSW1wb3J0U3BlY2lmaWVyXCIpKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgQ0xBU1NfRUxFTUVOVF9LSU5EX0FDQ0VTU09SLFxuICBDTEFTU19FTEVNRU5UX0ZMQUdfU1RBVElDLFxuICB0eXBlIENsYXNzRWxlbWVudFR5cGVzLFxufSBmcm9tIFwiLi9zY29wZWZsYWdzXCI7XG5pbXBvcnQgeyBFcnJvcnMgfSBmcm9tIFwiLi4vcGFyc2VyL2Vycm9yXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGFzc1Njb3BlIHtcbiAgLy8gQSBsaXN0IG9mIHByaXZhdGUgbmFtZWQgZGVjbGFyZWQgaW4gdGhlIGN1cnJlbnQgY2xhc3NcbiAgcHJpdmF0ZU5hbWVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICAvLyBBIGxpc3Qgb2YgcHJpdmF0ZSBnZXR0ZXJzIG9mIHNldHRlcnMgd2l0aG91dCB0aGVpciBjb3VudGVycGFydFxuICBsb25lQWNjZXNzb3JzOiBNYXA8c3RyaW5nLCBDbGFzc0VsZW1lbnRUeXBlcz4gPSBuZXcgTWFwKCk7XG5cbiAgLy8gQSBsaXN0IG9mIHByaXZhdGUgbmFtZXMgdXNlZCBiZWZvcmUgYmVpbmcgZGVmaW5lZCwgbWFwcGluZyB0b1xuICAvLyB0aGVpciBwb3NpdGlvbi5cbiAgdW5kZWZpbmVkUHJpdmF0ZU5hbWVzOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcCgpO1xufVxuXG50eXBlIHJhaXNlRnVuY3Rpb24gPSAobnVtYmVyLCBzdHJpbmcsIC4uLmFueSkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xhc3NTY29wZUhhbmRsZXIge1xuICBzdGFjazogQXJyYXk8Q2xhc3NTY29wZT4gPSBbXTtcbiAgcmFpc2U6IHJhaXNlRnVuY3Rpb247XG4gIHVuZGVmaW5lZFByaXZhdGVOYW1lczogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihyYWlzZTogcmFpc2VGdW5jdGlvbikge1xuICAgIHRoaXMucmFpc2UgPSByYWlzZTtcbiAgfVxuXG4gIGN1cnJlbnQoKTogQ2xhc3NTY29wZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGVudGVyKCkge1xuICAgIHRoaXMuc3RhY2sucHVzaChuZXcgQ2xhc3NTY29wZSgpKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgY29uc3Qgb2xkQ2xhc3NTY29wZSA9IHRoaXMuc3RhY2sucG9wKCk7XG5cbiAgICAvLyBNaWdyYXRlIHRoZSB1c2FnZSBvZiBub3QgeWV0IGRlZmluZWQgcHJpdmF0ZSBuYW1lcyB0byB0aGUgb3V0ZXJcbiAgICAvLyBjbGFzcyBzY29wZSwgb3IgcmFpc2UgYW4gZXJyb3IgaWYgd2UgcmVhY2hlZCB0aGUgdG9wLWxldmVsIHNjb3BlLlxuXG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudCgpO1xuXG4gICAgLy8gQXJyYXkuZnJvbSBpcyBuZWVkZWQgYmVjYXVzZSB0aGlzIGlzIGNvbXBpbGVkIHRvIGFuIGFycmF5LWxpa2UgZm9yIGxvb3BcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBwb3NdIG9mIEFycmF5LmZyb20ob2xkQ2xhc3NTY29wZS51bmRlZmluZWRQcml2YXRlTmFtZXMpKSB7XG4gICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICBpZiAoIWN1cnJlbnQudW5kZWZpbmVkUHJpdmF0ZU5hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIGN1cnJlbnQudW5kZWZpbmVkUHJpdmF0ZU5hbWVzLnNldChuYW1lLCBwb3MpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhaXNlKHBvcywgRXJyb3JzLkludmFsaWRQcml2YXRlRmllbGRSZXNvbHV0aW9uLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZWNsYXJlUHJpdmF0ZU5hbWUoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRUeXBlOiBDbGFzc0VsZW1lbnRUeXBlcyxcbiAgICBwb3M6IG51bWJlcixcbiAgKSB7XG4gICAgY29uc3QgY2xhc3NTY29wZSA9IHRoaXMuY3VycmVudCgpO1xuICAgIGxldCByZWRlZmluZWQgPSBjbGFzc1Njb3BlLnByaXZhdGVOYW1lcy5oYXMobmFtZSk7XG5cbiAgICBpZiAoZWxlbWVudFR5cGUgJiBDTEFTU19FTEVNRU5UX0tJTkRfQUNDRVNTT1IpIHtcbiAgICAgIGNvbnN0IGFjY2Vzc29yID0gcmVkZWZpbmVkICYmIGNsYXNzU2NvcGUubG9uZUFjY2Vzc29ycy5nZXQobmFtZSk7XG4gICAgICBpZiAoYWNjZXNzb3IpIHtcbiAgICAgICAgY29uc3Qgb2xkU3RhdGljID0gYWNjZXNzb3IgJiBDTEFTU19FTEVNRU5UX0ZMQUdfU1RBVElDO1xuICAgICAgICBjb25zdCBuZXdTdGF0aWMgPSBlbGVtZW50VHlwZSAmIENMQVNTX0VMRU1FTlRfRkxBR19TVEFUSUM7XG5cbiAgICAgICAgY29uc3Qgb2xkS2luZCA9IGFjY2Vzc29yICYgQ0xBU1NfRUxFTUVOVF9LSU5EX0FDQ0VTU09SO1xuICAgICAgICBjb25zdCBuZXdLaW5kID0gZWxlbWVudFR5cGUgJiBDTEFTU19FTEVNRU5UX0tJTkRfQUNDRVNTT1I7XG5cbiAgICAgICAgLy8gVGhlIHByaXZhdGUgbmFtZSBjYW4gYmUgZHVwbGljYXRlZCBvbmx5IGlmIGl0IGlzIHVzZWQgYnlcbiAgICAgICAgLy8gdHdvIGFjY2Vzc29ycyB3aXRoIGRpZmZlcmVudCBraW5kIChnZXQgYW5kIHNldCksIGFuZCBpZlxuICAgICAgICAvLyB0aGV5IGhhdmUgdGhlIHNhbWUgcGxhY2VtZW50IChzdGF0aWMgb3Igbm90KS5cbiAgICAgICAgcmVkZWZpbmVkID0gb2xkS2luZCA9PT0gbmV3S2luZCB8fCBvbGRTdGF0aWMgIT09IG5ld1N0YXRpYztcblxuICAgICAgICBpZiAoIXJlZGVmaW5lZCkgY2xhc3NTY29wZS5sb25lQWNjZXNzb3JzLmRlbGV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoIXJlZGVmaW5lZCkge1xuICAgICAgICBjbGFzc1Njb3BlLmxvbmVBY2Nlc3NvcnMuc2V0KG5hbWUsIGVsZW1lbnRUeXBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVkZWZpbmVkKSB7XG4gICAgICB0aGlzLnJhaXNlKHBvcywgRXJyb3JzLlByaXZhdGVOYW1lUmVkZWNsYXJhdGlvbiwgbmFtZSk7XG4gICAgfVxuXG4gICAgY2xhc3NTY29wZS5wcml2YXRlTmFtZXMuYWRkKG5hbWUpO1xuICAgIGNsYXNzU2NvcGUudW5kZWZpbmVkUHJpdmF0ZU5hbWVzLmRlbGV0ZShuYW1lKTtcbiAgfVxuXG4gIHVzZVByaXZhdGVOYW1lKG5hbWU6IHN0cmluZywgcG9zOiBudW1iZXIpIHtcbiAgICBsZXQgY2xhc3NTY29wZTtcbiAgICBmb3IgKGNsYXNzU2NvcGUgb2YgdGhpcy5zdGFjaykge1xuICAgICAgaWYgKGNsYXNzU2NvcGUucHJpdmF0ZU5hbWVzLmhhcyhuYW1lKSkgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjbGFzc1Njb3BlKSB7XG4gICAgICBjbGFzc1Njb3BlLnVuZGVmaW5lZFByaXZhdGVOYW1lcy5zZXQobmFtZSwgcG9zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG9wLWxldmVsXG4gICAgICB0aGlzLnJhaXNlKHBvcywgRXJyb3JzLkludmFsaWRQcml2YXRlRmllbGRSZXNvbHV0aW9uLCBuYW1lKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHsgT3B0aW9ucyB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5pbXBvcnQgdHlwZSB7IEZpbGUgLyo6OiwgSlNYT3BlbmluZ0VsZW1lbnQgKi8gfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUGx1Z2luTGlzdCB9IGZyb20gXCIuLi9wbHVnaW4tdXRpbHNcIjtcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tIFwiLi4vb3B0aW9uc1wiO1xuaW1wb3J0IFN0YXRlbWVudFBhcnNlciBmcm9tIFwiLi9zdGF0ZW1lbnRcIjtcbmltcG9ydCB7IFNDT1BFX1BST0dSQU0gfSBmcm9tIFwiLi4vdXRpbC9zY29wZWZsYWdzXCI7XG5pbXBvcnQgU2NvcGVIYW5kbGVyIGZyb20gXCIuLi91dGlsL3Njb3BlXCI7XG5pbXBvcnQgQ2xhc3NTY29wZUhhbmRsZXIgZnJvbSBcIi4uL3V0aWwvY2xhc3Mtc2NvcGVcIjtcbmltcG9ydCBQcm9kdWN0aW9uUGFyYW1ldGVySGFuZGxlciwge1xuICBQQVJBTV9BV0FJVCxcbiAgUEFSQU0sXG59IGZyb20gXCIuLi91dGlsL3Byb2R1Y3Rpb24tcGFyYW1ldGVyXCI7XG5cbmV4cG9ydCB0eXBlIFBsdWdpbnNNYXAgPSBNYXA8c3RyaW5nLCB7IFtzdHJpbmddOiBhbnkgfT47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcnNlciBleHRlbmRzIFN0YXRlbWVudFBhcnNlciB7XG4gIC8vIEZvcndhcmQtZGVjbGFyYXRpb24gc28gdHlwZXNjcmlwdCBwbHVnaW4gY2FuIG92ZXJyaWRlIGpzeCBwbHVnaW5cbiAgLyo6OlxuICAranN4UGFyc2VPcGVuaW5nRWxlbWVudEFmdGVyTmFtZTogKFxuICAgIG5vZGU6IEpTWE9wZW5pbmdFbGVtZW50LFxuICApID0+IEpTWE9wZW5pbmdFbGVtZW50O1xuICAqL1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6ID9PcHRpb25zLCBpbnB1dDogc3RyaW5nKSB7XG4gICAgb3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgc3VwZXIob3B0aW9ucywgaW5wdXQpO1xuXG4gICAgY29uc3QgU2NvcGVIYW5kbGVyID0gdGhpcy5nZXRTY29wZUhhbmRsZXIoKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5pbk1vZHVsZSA9IHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID09PSBcIm1vZHVsZVwiO1xuICAgIHRoaXMuc2NvcGUgPSBuZXcgU2NvcGVIYW5kbGVyKHRoaXMucmFpc2UuYmluZCh0aGlzKSwgdGhpcy5pbk1vZHVsZSk7XG4gICAgdGhpcy5wcm9kUGFyYW0gPSBuZXcgUHJvZHVjdGlvblBhcmFtZXRlckhhbmRsZXIoKTtcbiAgICB0aGlzLmNsYXNzU2NvcGUgPSBuZXcgQ2xhc3NTY29wZUhhbmRsZXIodGhpcy5yYWlzZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBsdWdpbnMgPSBwbHVnaW5zTWFwKHRoaXMub3B0aW9ucy5wbHVnaW5zKTtcbiAgICB0aGlzLmZpbGVuYW1lID0gb3B0aW9ucy5zb3VyY2VGaWxlbmFtZTtcbiAgfVxuXG4gIC8vIFRoaXMgY2FuIGJlIG92ZXJ3cml0dGVuLCBmb3IgZXhhbXBsZSwgYnkgdGhlIFR5cGVTY3JpcHQgcGx1Z2luLlxuICBnZXRTY29wZUhhbmRsZXIoKTogQ2xhc3M8U2NvcGVIYW5kbGVyPCo+PiB7XG4gICAgcmV0dXJuIFNjb3BlSGFuZGxlcjtcbiAgfVxuXG4gIHBhcnNlKCk6IEZpbGUge1xuICAgIGxldCBwYXJhbUZsYWdzID0gUEFSQU07XG4gICAgaWYgKHRoaXMuaGFzUGx1Z2luKFwidG9wTGV2ZWxBd2FpdFwiKSAmJiB0aGlzLmluTW9kdWxlKSB7XG4gICAgICBwYXJhbUZsYWdzIHw9IFBBUkFNX0FXQUlUO1xuICAgIH1cbiAgICB0aGlzLnNjb3BlLmVudGVyKFNDT1BFX1BST0dSQU0pO1xuICAgIHRoaXMucHJvZFBhcmFtLmVudGVyKHBhcmFtRmxhZ3MpO1xuICAgIGNvbnN0IGZpbGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgZmlsZS5lcnJvcnMgPSBudWxsO1xuICAgIHRoaXMucGFyc2VUb3BMZXZlbChmaWxlLCBwcm9ncmFtKTtcbiAgICBmaWxlLmVycm9ycyA9IHRoaXMuc3RhdGUuZXJyb3JzO1xuICAgIHJldHVybiBmaWxlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBsdWdpbnNNYXAocGx1Z2luczogUGx1Z2luTGlzdCk6IFBsdWdpbnNNYXAge1xuICBjb25zdCBwbHVnaW5NYXA6IFBsdWdpbnNNYXAgPSBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICBjb25zdCBbbmFtZSwgb3B0aW9uc10gPSBBcnJheS5pc0FycmF5KHBsdWdpbikgPyBwbHVnaW4gOiBbcGx1Z2luLCB7fV07XG4gICAgaWYgKCFwbHVnaW5NYXAuaGFzKG5hbWUpKSBwbHVnaW5NYXAuc2V0KG5hbWUsIG9wdGlvbnMgfHwge30pO1xuICB9XG4gIHJldHVybiBwbHVnaW5NYXA7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB0eXBlIE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5pbXBvcnQge1xuICBoYXNQbHVnaW4sXG4gIHZhbGlkYXRlUGx1Z2lucyxcbiAgbWl4aW5QbHVnaW5OYW1lcyxcbiAgbWl4aW5QbHVnaW5zLFxuICB0eXBlIFBsdWdpbkxpc3QsXG59IGZyb20gXCIuL3BsdWdpbi11dGlsc1wiO1xuaW1wb3J0IFBhcnNlciBmcm9tIFwiLi9wYXJzZXJcIjtcblxuaW1wb3J0IHsgdHlwZXMgYXMgdG9rVHlwZXMgfSBmcm9tIFwiLi90b2tlbml6ZXIvdHlwZXNcIjtcbmltcG9ydCBcIi4vdG9rZW5pemVyL2NvbnRleHRcIjtcblxuaW1wb3J0IHR5cGUgeyBFeHByZXNzaW9uLCBGaWxlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGlucHV0OiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zKTogRmlsZSB7XG4gIGlmIChvcHRpb25zPy5zb3VyY2VUeXBlID09PSBcInVuYW1iaWd1b3VzXCIpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zLnNvdXJjZVR5cGUgPSBcIm1vZHVsZVwiO1xuICAgICAgY29uc3QgcGFyc2VyID0gZ2V0UGFyc2VyKG9wdGlvbnMsIGlucHV0KTtcbiAgICAgIGNvbnN0IGFzdCA9IHBhcnNlci5wYXJzZSgpO1xuXG4gICAgICBpZiAocGFyc2VyLnNhd1VuYW1iaWd1b3VzRVNNKSB7XG4gICAgICAgIHJldHVybiBhc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJzZXIuYW1iaWd1b3VzU2NyaXB0RGlmZmVyZW50QXN0KSB7XG4gICAgICAgIC8vIFRvcCBsZXZlbCBhd2FpdCBpbnRyb2R1Y2VzIGNvZGUgd2hpY2ggY2FuIGJlIGJvdGggYSB2YWxpZCBzY3JpcHQgYW5kXG4gICAgICAgIC8vIGEgdmFsaWQgbW9kdWxlLCBidXQgd2hpY2ggcHJvZHVjZXMgZGlmZmVyZW50IEFTVHM6XG4gICAgICAgIC8vICAgIGF3YWl0XG4gICAgICAgIC8vICAgIDBcbiAgICAgICAgLy8gY2FuIGJlIHBhcnNlZCBlaXRoZXIgYXMgYW4gQXdhaXRFeHByZXNzaW9uLCBvciBhcyB0d28gRXhwcmVzc2lvblN0YXRlbWVudHMuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb3B0aW9ucy5zb3VyY2VUeXBlID0gXCJzY3JpcHRcIjtcbiAgICAgICAgICByZXR1cm4gZ2V0UGFyc2VyKG9wdGlvbnMsIGlucHV0KS5wYXJzZSgpO1xuICAgICAgICB9IGNhdGNoIHt9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGlzIGJvdGggYSB2YWxpZCBtb2R1bGUgYW5kIGEgdmFsaWQgc2NyaXB0LCBidXRcbiAgICAgICAgLy8gd2UgcGFyc2UgaXQgYXMgYSBzY3JpcHQgYnkgZGVmYXVsdFxuICAgICAgICBhc3QucHJvZ3JhbS5zb3VyY2VUeXBlID0gXCJzY3JpcHRcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFzdDtcbiAgICB9IGNhdGNoIChtb2R1bGVFcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9ucy5zb3VyY2VUeXBlID0gXCJzY3JpcHRcIjtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNlcihvcHRpb25zLCBpbnB1dCkucGFyc2UoKTtcbiAgICAgIH0gY2F0Y2gge31cblxuICAgICAgdGhyb3cgbW9kdWxlRXJyb3I7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRQYXJzZXIob3B0aW9ucywgaW5wdXQpLnBhcnNlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbihpbnB1dDogc3RyaW5nLCBvcHRpb25zPzogT3B0aW9ucyk6IEV4cHJlc3Npb24ge1xuICBjb25zdCBwYXJzZXIgPSBnZXRQYXJzZXIob3B0aW9ucywgaW5wdXQpO1xuICBpZiAocGFyc2VyLm9wdGlvbnMuc3RyaWN0TW9kZSkge1xuICAgIHBhcnNlci5zdGF0ZS5zdHJpY3QgPSB0cnVlO1xuICB9XG4gIHJldHVybiBwYXJzZXIuZ2V0RXhwcmVzc2lvbigpO1xufVxuXG5leHBvcnQgeyB0b2tUeXBlcyB9O1xuXG5mdW5jdGlvbiBnZXRQYXJzZXIob3B0aW9uczogP09wdGlvbnMsIGlucHV0OiBzdHJpbmcpOiBQYXJzZXIge1xuICBsZXQgY2xzID0gUGFyc2VyO1xuICBpZiAob3B0aW9ucz8ucGx1Z2lucykge1xuICAgIHZhbGlkYXRlUGx1Z2lucyhvcHRpb25zLnBsdWdpbnMpO1xuICAgIGNscyA9IGdldFBhcnNlckNsYXNzKG9wdGlvbnMucGx1Z2lucyk7XG4gIH1cblxuICByZXR1cm4gbmV3IGNscyhvcHRpb25zLCBpbnB1dCk7XG59XG5cbmNvbnN0IHBhcnNlckNsYXNzQ2FjaGU6IHsgW2tleTogc3RyaW5nXTogQ2xhc3M8UGFyc2VyPiB9ID0ge307XG5cbi8qKiBHZXQgYSBQYXJzZXIgY2xhc3Mgd2l0aCBwbHVnaW5zIGFwcGxpZWQuICovXG5mdW5jdGlvbiBnZXRQYXJzZXJDbGFzcyhwbHVnaW5zRnJvbU9wdGlvbnM6IFBsdWdpbkxpc3QpOiBDbGFzczxQYXJzZXI+IHtcbiAgY29uc3QgcGx1Z2luTGlzdCA9IG1peGluUGx1Z2luTmFtZXMuZmlsdGVyKG5hbWUgPT5cbiAgICBoYXNQbHVnaW4ocGx1Z2luc0Zyb21PcHRpb25zLCBuYW1lKSxcbiAgKTtcblxuICBjb25zdCBrZXkgPSBwbHVnaW5MaXN0LmpvaW4oXCIvXCIpO1xuICBsZXQgY2xzID0gcGFyc2VyQ2xhc3NDYWNoZVtrZXldO1xuICBpZiAoIWNscykge1xuICAgIGNscyA9IFBhcnNlcjtcbiAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBwbHVnaW5MaXN0KSB7XG4gICAgICBjbHMgPSBtaXhpblBsdWdpbnNbcGx1Z2luXShjbHMpO1xuICAgIH1cbiAgICBwYXJzZXJDbGFzc0NhY2hlW2tleV0gPSBjbHM7XG4gIH1cbiAgcmV0dXJuIGNscztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQTtBQWFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUFBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBZ0JBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFTQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUF0SEE7QUNqRkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUF3QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFrQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBOEJBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQzVFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUN6Q0E7QUFJQTtBQUNBO0FBQ0E7OztBQUlBO0FBTUE7QUFDQTtBQUVBOzs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUdBOzs7QUN6Q0E7OztBQUFBO0FBQUE7Ozs7O0FBbUJBO0FBQ0E7Ozs7QUFHQTtBQUVBOzs7Ozs7QUNMQTtBQUNBOzs7QUFHQTs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQWFBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7Ozs7QUFJQTtBQUVBO0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBTkE7QUFTQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFJQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFGQTtBQVVBOztBQWZBO0FBa0JBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7Ozs7QUFLQTtBQUNBOzs7QUFHQTtBQUNBOzs7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQWZBO0FBeUJBOzs7QUFLQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBTkE7QUFXQTtBQUNBO0FBQ0E7Ozs7OztBQWZBO0FBc0JBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBZEE7QUE0QkE7QUFDQTs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUxBO0FBUUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFMQTtBQVNBOzs7OztBQUtBOzs7O0FBNVBBO0FBQ0E7QUM5QkE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFuTUE7QUFDQTtBQ2VBOzs7Ozs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFNQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTs7OztBQUdBO0FBUUE7QUFSQTtBQVFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBOzs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOzs7OztBQTdDQTtBQUNBO0FDWEE7QUFFQTs7O0FBT0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBYkE7QUFBQTtBQUFBO0FBbUJBO0FBQ0E7QUFDQTtBQUVBOztBQXZCQTtBQUFBO0FBQUE7QUE2QkE7QUFDQTtBQUNBO0FBRUE7O0FBakNBO0FBQUE7QUFBQTtBQXFDQTs7QUFyQ0E7QUFBQTtBQUFBO0FBeUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQU1BO0FBRUE7O0FBNURBO0FBQUE7QUFBQTtBQTRFQTtBQUNBOztBQTdFQTtBQUFBO0FBQUE7QUFpRkE7QUFDQTtBQURBO0FBR0E7OztBQXBGQTtBQUFBO0FBQUE7QUF5RkE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOztBQUpBO0FBVUE7OztBQXRHQTtBQUFBO0FBQUE7QUFnSEE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBOzs7O0FBV0E7OztBQTlIQTtBQUFBO0FBQUE7QUErSUE7Ozs7QUFHQTs7QUFsSkE7QUFBQTtBQUFBOzs7QUF1SkE7O0FBdkpBO0FBQUE7QUFBQTtBQStKQTtBQUNBO0FBSUE7QUFFQTs7QUF0S0E7QUFBQTtBQUFBO0FBOEtBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUdBO0FBRUE7O0FBdExBO0FBQUE7QUFBQTtBQWlNQTtBQUNBO0FBUUE7QUFFQTtBQUNBOzs7QUFFQTs7QUEvTUE7QUFBQTtBQUFBO0FBbU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQTNPQTtBQUFBO0FBQUE7QUFxUEE7QUFDQTtBQUNBO0FBRUE7O0FBelBBO0FBQUE7QUFBQTtBQWdRQTtBQUNBO0FBQ0E7O0FBbFFBO0FBQUE7QUFBQTtBQTZRQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7O0FBL1JBO0FBQUE7QUFBQTtBQXlTQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQXZUQTtBQUFBO0FBQUE7QUFpVUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTs7O0FBR0E7O0FBOVVBO0FBQUE7QUFBQTtBQWtWQTtBQUNBO0FBRUE7OztBQUdBOztBQXhWQTtBQUFBO0FBQUE7QUE0VkE7QUFDQTtBQURBO0FBR0E7QUFEQTtBQUdBOzs7QUFqV0E7QUFBQTtBQUFBO0FBeVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTs7QUFwWEE7QUFBQTtBQUFBO0FBNFhBOzs7O0FBSUE7O0FBaFlBO0FBQUE7QUFBQTtBQW9ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUVBO0FBR0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTs7QUF4WkE7QUFBQTtBQUFBO0FBa2FBO0FBQ0E7QUFPQTtBQUdBO0FBR0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQVhBO0FBaUJBOzs7QUFHQTs7QUE5YkE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQ1pBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBU0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBVEE7QUFDQTtBQWFBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBTUE7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFoQkE7QUFDQTtBQW1CQTtBQUNBO0FBR0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFLQTtBQUdBO0FBVEE7QUFDQTtBQVdBO0FBQ0E7QUFHQTtBQUVBO0FBU0E7QUFWQTtBQVlBOzs7QUFHQTtBQWhCQTtBQUNBO0FBa0JBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUVBO0FBTkE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUMxSEE7QUFFQTtBQUVBO0FBR0E7QUFJQTtBQVNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBOzs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOzs7QUFHQTs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUdBOzs7QUM5RUE7QUFDQTtBQXFDQTtBQVdBO0FBakRBO0FBbURBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTs7O0FBUUE7QUFDQTs7O0FBT0E7QUFDQTs7O0FBUUE7QUFLQTs7O0FBSUE7QUFDQTs7O0FDaEZBO0FBQ0E7QUFHQTtBQUNBOzs7QUNRQTtBQXFCQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBekVBO0FBQ0E7QUE0RUE7QUFFQTs7O0FBUUE7QUFDQTs7O0FBR0E7QUFFQTs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFPQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBOzs7QUFHQTtBQUNBO0FBZUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBTUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBRkE7OztBQVBBO0FBQUE7QUFBQTtBQWFBOztBQWJBO0FBQUE7QUFBQTtBQWlCQTs7QUFqQkE7QUFBQTtBQUFBO0FBc0JBO0FBSUE7QUFDQTs7OztBQUdBOztBQTlCQTtBQUFBO0FBQUE7QUFrQ0E7QUFFQTtBQUNBO0FBR0E7QUFEQTtBQUdBO0FBREE7QUFHQTs7OztBQUdBOztBQS9DQTtBQUFBO0FBQUE7QUFtREE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQXpEQTtBQUFBO0FBQUE7QUE2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7OztBQS9FQTtBQUFBO0FBQUE7QUFvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBR0E7O0FBbkdBO0FBQUE7QUFBQTtBQXVHQTtBQUNBO0FBQ0E7O0FBekdBO0FBQUE7QUFBQTtBQStHQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQUNBO0FBREE7QUFDQTtBQXFCQTtBQUVBO0FBR0E7QUFLQTtBQUVBO0FBQ0E7QUFFQTs7QUFuSkE7QUFBQTtBQUFBO0FBMEpBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFHQTtBQURBO0FBR0E7QUFDQTtBQURBO0FBR0E7QUFDQTs7O0FBRUE7O0FBUEE7QUFVQTtBQURBO0FBR0E7QUFEQTtBQUdBO0FBREE7QUFHQTtBQURBO0FBR0E7OztBQWxMQTtBQUFBO0FBQUE7QUF5TEE7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7QUEvTEE7QUFBQTtBQUFBO0FBa01BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBS0E7QUFSQTtBQVVBO0FBS0E7OztBQUdBOzs7QUFHQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUtBO0FBUEE7QUFTQTtBQUNBOzs7QUFLQTtBQUNBOzs7QUFLQTtBQUNBOztBQXZCQTtBQTJCQTtBQUNBOztBQTFRQTtBQUFBO0FBQUE7QUFpUkE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUhBO0FBTUE7QUFDQTs7O0FBRUE7QUFFQTtBQVpBO0FBZUE7QUFLQTtBQUNBO0FBRUE7OztBQVNBO0FBS0E7QUFDQTtBQUVBO0FBVEE7QUFpQkE7QUFDQTtBQUFBO0FBR0E7QUFFQTtBQUNBOzs7QUFJQTtBQUVBOzs7O0FBSUE7O0FBcFZBO0FBQUE7QUFBQTtBQTBWQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQS9WQTtBQUFBO0FBQUE7QUFxV0E7QUFDQTtBQUVBO0FBQ0E7O0FBeldBO0FBQUE7QUFBQTtBQStXQTtBQUNBO0FBRUE7QUFDQTs7QUFuWEE7QUFBQTtBQUFBO0FBeVhBO0FBQ0E7QUFDQTs7QUEzWEE7QUFBQTtBQUFBO0FBbVlBO0FBQ0E7QUFLQTtBQUNBO0FBS0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTs7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBOzs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTs7QUE3YUE7QUFBQTtBQUFBO0FBdWJBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFHQTs7QUFoY0E7QUFBQTtBQUFBO0FBb2NBO0FBQ0E7O0FBcmNBO0FBQUE7QUFBQTtBQXljQTtBQUNBOzs7QUExY0E7QUFBQTtBQUFBO0FBK2NBO0FBRUE7O0FBamRBO0FBQUE7QUFBQTtBQThkQTtBQUNBOztBQS9kQTtBQUFBO0FBQUE7QUFxZUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7QUFFQTs7QUFwZkE7QUFBQTtBQUFBO0FBMmZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUlBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFFQTs7QUFwaEJBO0FBQUE7QUFBQTtBQXloQkE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBOzs7O0FBSUE7O0FBOWlCQTtBQUFBO0FBQUE7QUFrakJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBREE7QUFHQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFWQTtBQUNBO0FBWUE7QUFFQTtBQUVBOztBQWxsQkE7QUFBQTtBQUFBO0FBc2xCQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUdBO0FBQ0E7QUFFQTtBQUVBOztBQTFtQkE7QUFBQTtBQUFBO0FBOG1CQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBR0E7QUFFQTtBQUVBOztBQS9uQkE7QUFBQTtBQUFBO0FBbW9CQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQURBOzs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVFBOztBQXJwQkE7QUFBQTtBQUFBO0FBeXBCQTs7QUF6cEJBO0FBQUE7QUFBQTtBQW1xQkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBanJCQTtBQUFBO0FBQUE7QUF3ckJBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBOzs7QUFFQTs7QUExc0JBO0FBQUE7QUFBQTtBQWd0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUlBO0FBQ0E7OztBQUVBO0FBQ0E7QUFFQTs7QUF0dUJBO0FBQUE7QUFBQTtBQTZ1QkE7QUFDQTtBQUNBO0FBQ0E7O0FBaHZCQTtBQUFBO0FBQUE7QUErdkJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUpBO0FBUUE7O0FBWkE7QUFpQkE7QUFDQTs7O0FBRUE7QUFDQTs7O0FBRUE7QUFQQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7OztBQUlBO0FBQ0E7QUFFQTtBQUlBOzs7O0FBT0E7QUFDQTtBQU1BO0FBQ0E7OztBQUdBO0FBRUE7QUFFQTs7QUE3NEJBO0FBQUE7QUFBQTtBQXk1QkE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBREE7QUFNQTs7O0FBRUE7QUFDQTs7O0FBR0E7OztBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFsQ0E7QUFvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7O0FBZkE7QUFrQkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7O0FBR0E7QUFFQTs7O0FBbCtCQTtBQUFBO0FBQUE7QUEyK0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7OztBQUlBO0FBQ0E7OztBQXgvQkE7QUFBQTtBQUFBO0FBOC9CQTtBQUtBOzs7QUFuZ0NBO0FBQUE7QUFBQTtBQTRnQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUF2aENBO0FBQUE7QUFBQTtBQStoQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUF4aUNBO0FBQUE7QUFBQTtBQTRpQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBL2lDQTtBQUFBO0FBQUE7QUFtakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBN2pDQTtBQUFBO0FBQUE7QUFpa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBTEE7QUFPQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBbGxDQTtBQUFBO0FBQUE7QUF3bENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBNWxDQTtBQUFBO0FBQUE7QUFpbUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7QUFFQTtBQUFBO0FBQUE7QUFBQTs7QUE1bUNBO0FBQUE7QUFBQTtBQXFuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUE5b0NBO0FBQUE7QUFBQTtBQXNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFNQTtBQUNBO0FBUkE7QUFXQTs7OztBQUlBO0FBQ0E7QUFEQTtBQUtBOzs7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFRQTtBQUNBOzs7QUFRQTs7O0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTs7Ozs7QUFJQTs7QUF6MUNBO0FBQUE7QUFBQTtBQTYxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOztBQXYyQ0E7QUFBQTtBQUFBO0FBMjJDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFJQTs7O0FBaDNDQTtBQUFBO0FBQUE7QUFxM0NBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7O0FBLzNDQTtBQUFBO0FBQUE7QUFtNENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTs7QUExNENBO0FBQUE7QUFBQTtBQWc1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBOztBQXY1Q0E7QUFBQTtBQUFBO0FBNjVDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7O0FBcjZDQTtBQUFBO0FBQUE7QUF5NkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BOzs7QUEvNkNBO0FBQUE7QUFBQTtBQW83Q0E7QUFDQTtBQUNBOztBQXQ3Q0E7QUFBQTtBQUFBO0FBNDdDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTs7QUFuOENBO0FBQUE7QUFBQTtBQXU4Q0E7QUFFQTtBQU1BOztBQS84Q0E7QUFBQTtBQUFBO0FBbTlDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7OztBQUVBO0FBQ0E7OztBQUVBOztBQTk5Q0E7QUFBQTtBQUFBO0FBeStDQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBOzs7QUFLQTs7QUFoL0NBO0FBQUE7QUFBQTtBQXUvQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFEQTtBQUNBO0FBSUE7QUFFQTtBQUdBOzs7QUFLQTs7QUF2Z0RBO0FBQUE7QUFBQTtBQThnREE7QUFJQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFBQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7OztBQS9oREE7QUFBQTtBQUFBO0FBd2lEQTtBQUNBO0FBRUE7QUFNQTs7QUFSQTtBQVdBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFHQTs7Ozs7QUFLQTs7QUE5akRBO0FBQUE7QUFBQTtBQW9rREE7O0FBcGtEQTtBQUFBO0FBQUE7QUE4a0RBO0FBTUE7OztBQUdBOztBQXZsREE7QUFBQTtBQUFBO0FBMmxEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7O0FBaG1EQTtBQUFBO0FBQUE7QUF3bURBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhCQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFMQTtBQUNBO0FBT0E7QUFBQTtBQUNBO0FBVEE7QUFDQTtBQURBO0FBQ0E7QUFRQTtBQUFBOzs7QUFHQTtBQU1BOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFFQTtBQUFBOzs7O0FBSUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBOztBQTdxREE7QUFBQTtBQUFBO0FBb3JEQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUFBOztBQTNyREE7QUFBQTtBQUFBO0FBd3NEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBRkE7QUFJQTs7O0FBRUE7QUFQQTtBQVNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQUE7QUFBQTtBQUNBOzs7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQURBOztBQWp1REE7QUFBQTtBQUFBOzs7QUF1dURBO0FBT0E7QUFFQTtBQUNBOztBQWp2REE7QUFBQTtBQUFBO0FBcXZEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBOzs7QUFHQTs7QUE5dkRBO0FBQUE7QUFBQTtBQXN3REE7QUFDQTtBQUFBO0FBQ0E7QUFJQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7O0FBdnhEQTtBQUFBO0FBQUE7QUE0eERBOzs7O0FBV0E7O0FBdnlEQTtBQUFBO0FBQUE7QUEyeURBO0FBQ0E7QUFDQTtBQUdBOzs7QUFFQTs7QUFsekRBO0FBQUE7QUFBQTtBQXN6REE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSkE7QUFPQTs7QUFiQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFOQTtBQVFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBSkE7QUFNQTs7O0FBdjFEQTtBQUFBO0FBQUE7QUE0MURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFyMkRBO0FBQUE7QUFBQTtBQXkyREE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7O0FBOTJEQTtBQUFBO0FBQUE7QUFrM0RBO0FBQ0E7QUFBQTtBQUNBOzs7QUFwM0RBO0FBQUE7QUFBQTtBQTgzREE7QUFDQTtBQUFBO0FBQ0E7Ozs7QUFLQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUpBO0FBTUE7Ozs7QUFqNURBO0FBQUE7QUFBQTtBQTI1REE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQU1BO0FBSkE7QUFPQTtBQUZBO0FBSUE7QUFDQTtBQUZBO0FBSUE7OztBQTE2REE7QUFBQTtBQUFBO0FBODZEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUZBOzs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBdDlEQTtBQUFBO0FBQUE7QUEyOURBO0FBQ0E7QUFEQTtBQUdBOzs7QUE5OURBO0FBQUE7QUFBQTtBQXUrREE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUdBOztBQTcrREE7QUFBQTtBQUFBO0FBcy9EQTs7O0FBQ0E7QUFDQTtBQUNBO0FBS0E7Ozs7QUFJQTs7QUFsZ0VBO0FBQUE7QUFBQTtBQTBnRUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUE1Z0VBO0FBQUE7QUFBQTtBQXVoRUE7QUFDQTs7O0FBRUE7O0FBMWhFQTtBQUFBO0FBQUE7QUFnaUVBO0FBQ0E7OztBQUVBOztBQW5pRUE7QUFBQTtBQUFBO0FBd2lFQTs7QUF4aUVBO0FBQUE7QUFBQTtBQTZpRUE7O0FBN2lFQTtBQUFBO0FBQUE7QUFpakVBOztBQWpqRUE7QUFBQTtBQUFBO0FBNmpFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7O0FBcmtFQTtBQUFBO0FBQUE7QUFxbEVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTs7QUE3bEVBO0FBQUE7QUFBQTtBQWttRUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFFQTtBQVJBOzs7QUF6bUVBO0FBQUE7QUFBQTtBQTBuRUE7QUFDQTtBQUVBO0FBQ0E7O0FBOW5FQTtBQUFBO0FBQUE7QUE0b0VBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQVdBO0FBQ0E7OztBQXRxRUE7QUFBQTtBQUFBO0FBMnFFQTtBQUNBO0FBQ0E7OztBQUdBOzs7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQXRyRUE7QUFBQTtBQUFBO0FBOHJFQTtBQUNBO0FBRUE7QUFJQTs7O0FBR0E7O0FBeHNFQTtBQUFBO0FBQUE7QUE0c0VBO0FBQ0E7OztBQUdBOztBQWh0RUE7QUFBQTtBQUFBO0FBeXRFQTtBQU9BO0FBTUE7O0FBdHVFQTtBQUFBO0FBQUE7QUEydUVBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFJQTtBQUlBO0FBQ0E7Ozs7QUFJQTs7QUFyd0VBO0FBQUE7QUFBQTtBQTB3RUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFSQTtBQVdBO0FBQ0E7QUFDQTs7QUFmQTtBQXNCQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTtBQUNBOztBQVhBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQU1BO0FBQ0E7OztBQU9BO0FBQ0E7OztBQVFBO0FBTUE7O0FBNTFFQTtBQUFBO0FBQUE7QUFrMkVBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTs7QUF0MkVBO0FBQUE7QUFBQTtBQTgyRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBajNFQTtBQUFBO0FBQUE7QUEwM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQWo0RUE7QUFBQTtBQUFBO0FBczRFQTs7QUF0NEVBO0FBQUE7QUFBQTtBQXU1RUE7QUFDQTs7O0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFHQTtBQUVBO0FBQ0E7QUFBQTtBQVVBO0FBZEE7QUFDQTtBQW1CQTtBQUNBO0FBREE7QUFHQTs7OztBQUlBOzs7QUFDQTtBQUVBO0FBRUE7OztBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFYQTtBQUNBO0FBZ0JBO0FBR0E7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBaENBO0FBbUNBO0FBQ0E7QUFLQTtBQUlBO0FBRUE7QUFFQTs7O0FBTUE7OztBQUdBOzs7QUFTQTtBQUVBO0FBQ0E7OztBQUdBO0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUdBOzs7QUFNQTs7QUF4aEZBO0FBQUE7QUFBQTtBQWdpRkE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQURBO0FBQ0E7QUFPQTtBQUVBO0FBR0E7QUFFQTtBQUNBO0FBRUE7QUFsQkE7QUFxQkE7QUFHQTtBQUdBOzs7QUFLQTs7QUFsa0ZBO0FBQUE7QUFBQTtBQXNrRkE7O0FBdGtGQTtBQUFBO0FBQUE7QUE2a0ZBO0FBQ0E7QUFEQTtBQUdBOzs7QUFobEZBO0FBQUE7QUFBQTtBQTBsRkE7Ozs7QUFNQTs7QUFobUZBO0FBQUE7QUFBQTtBQW9tRkE7O0FBcG1GQTtBQUFBO0FBQUE7QUE4bUZBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQWdCQTtBQUNBO0FBQ0E7QUFBQTtBQU1BO0FBRUE7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTs7O0FBR0E7O0FBN3BGQTtBQUFBO0FBQUE7QUFzcUZBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFqQkE7QUF1QkE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFsdEZBO0FBQUE7QUFBQTtBQTJ0RkE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTs7O0FBSUE7QUFFQTs7QUFwdUZBO0FBQUE7QUFBQTtBQTJ1RkE7QUFDQTtBQUNBO0FBQ0E7O0FBOXVGQTtBQUFBO0FBQUE7QUFzdkZBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTs7OztBQUlBOztBQWx3RkE7QUFBQTtBQUFBO0FBc3dGQTtBQUNBO0FBQ0E7QUFJQTs7OztBQUlBOztBQWh4RkE7QUFBQTtBQUFBO0FBb3hGQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7O0FBeHhGQTtBQUFBO0FBQUE7QUE0eEZBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7Ozs7QUFJQTs7QUEveUZBO0FBQUE7QUFBQTtBQWt6RkE7QUFFQTtBQUNBO0FBQ0E7QUFJQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFLQTs7O0FBRUE7QUFDQTs7O0FBRUE7O0FBOTBGQTtBQUFBO0FBQUE7QUFrMUZBO0FBQ0E7QUFBQTtBQUNBOzs7QUFwMUZBO0FBQUE7QUFBQTtBQTYxRkE7QUFBQTtBQUNBOztBQTkxRkE7QUFBQTtBQUFBO0FBeTJGQTtBQUFBO0FBQ0E7QUFDQTs7QUEzMkZBO0FBQUE7QUFBQTtBQXUzRkE7QUFBQTtBQUNBOztBQXgzRkE7QUFBQTtBQUFBO0FBODNGQTtBQUNBOztBQS8zRkE7QUFBQTtBQUFBO0FBdzRGQTtBQUFBO0FBQ0E7O0FBejRGQTtBQUFBO0FBQUE7QUFzNUZBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOzs7O0FBSUE7OztBQUVBOztBQXI2RkE7QUFBQTtBQUFBO0FBMjZGQTtBQUFBO0FBQ0E7O0FBNTZGQTtBQUFBO0FBQUE7QUF1N0ZBO0FBQ0E7O0FBeDdGQTtBQUFBO0FBQUE7QUErN0ZBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUVBO0FBQUE7QUFBQTtBQUFBOzs7QUFFQTs7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFFQTtBQUFBO0FBQUE7QUFBQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBOzs7QUFNQTtBQUFBO0FBQUE7QUFBQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBOzs7QUE5OUZBO0FBQUE7QUFBQTtBQW0rRkE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBeCtGQTtBQUFBO0FBQUE7QUErK0ZBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7OztBQXIvRkE7QUFBQTtBQUFBO0FBb2dHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTs7O0FBS0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7O0FBQ0E7QUFLQTtBQUNBOzs7O0FBS0E7O0FBQ0E7QUFDQTtBQUNBOzs7O0FBS0E7O0FBQ0E7QUFDQTtBQUNBOzs7O0FBS0E7O0FBQ0E7OztBQUVBOztBQUNBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTs7OztBQUdBOzs7OztBQU9BO0FBQ0E7Ozs7QUFHQTs7QUF6bEdBO0FBQUE7QUFBQTtBQWdtR0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQUFBOzs7QUFHQTtBQVBBO0FBU0E7QUFBQTtBQUNBO0FBRUE7QUFBQTs7O0FBR0E7OztBQXBuR0E7QUFBQTtBQUFBO0FBNG5HQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBOzs7QUFGQTtBQVNBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFDQTtBQUZBOzs7QUFNQTs7O0FBRUE7O0FBdHBHQTtBQUFBO0FBQUE7QUF5cEdBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBSEE7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBR0E7QUFBQTtBQUVBO0FBQ0E7QUFQQTtBQVNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTs7O0FBS0E7QUFDQTtBQUNBO0FBVEE7QUFXQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7OztBQUtBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7QUFBQTtBQUFBO0FBQ0E7Ozs7O0FBcHVHQTtBQUFBO0FBQUE7QUEydUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOztBQWp2R0E7QUFBQTtBQUFBO0FBc3ZHQTtBQU1BO0FBUEE7QUFTQTs7O0FBOXZHQTtBQUFBO0FBQUE7QUFvd0dBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7OztBQUdBOztBQTN3R0E7QUFBQTtBQUFBO0FBK3dHQTs7QUEvd0dBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUN0TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdQQTtBQ2dCQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFSQTtBQWNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7O0FBTkE7QUFDQTtBQVNBO0FBQ0E7OztBQVFBO0FBR0E7QUFDQTs7O0FBR0E7QUFDQTs7O0FBR0E7QUFFQTs7O0FBT0E7OztBQUdBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBOzs7Ozs7QUF2Q0E7QUFBQTtBQUFBO0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBTEE7QUFPQTs7O0FBRUE7QUFDQTtBQUVBOztBQTdEQTtBQUFBO0FBQUE7QUFpRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBSEE7QUFLQTs7OztBQUdBO0FBQ0E7O0FBdkZBO0FBQUE7QUFBQTtBQTJGQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7QUFIQTtBQU1BO0FBQ0E7QUFBQTtBQUNBOzs7QUFUQTtBQWFBOzs7Ozs7QUFJQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTs7QUEzSEE7QUFBQTtBQUFBO0FBc0lBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7O0FBM0lBO0FBQUE7QUFBQTtBQW9KQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFEQTtBQUdBOzs7QUFFQTtBQUNBOztBQTdKQTtBQUFBO0FBQUE7QUFtS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUEzS0E7QUFBQTtBQUFBO0FBcUxBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7O0FBak1BO0FBQUE7QUFBQTtBQXVNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUF2TkE7QUFBQTtBQUFBO0FBZ09BO0FBSUE7O0FBcE9BO0FBQUE7QUFBQTtBQStPQTtBQUNBO0FBQ0E7QUFFQTs7QUFuUEE7QUFBQTtBQUFBO0FBMlBBO0FBQ0E7QUFEQTtBQUdBOzs7QUFFQTtBQUNBOztBQWpRQTtBQUFBO0FBQUE7QUF1UUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7QUFoUkE7QUFBQTtBQUFBO0FBeVJBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBL1JBO0FBQUE7QUFBQTtBQXFTQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBNVNBO0FBQUE7QUFBQTtBQXFUQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7O0FBNVRBO0FBQUE7QUFBQTtBQW1VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTs7O0FBRUE7OztBQUdBO0FBQ0E7OztBQUdBOztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7Ozs7Ozs7QUFPQTs7OztBQUlBO0FBQ0E7QUFEQTtBQU9BO0FBREE7QUFVQTtBQUdBOzs7OztBQVVBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7OztBQU1BOztBQTFaQTtBQUFBO0FBQUE7QUFrYUE7QUFDQTtBQUNBO0FBQ0E7O0FBcmFBO0FBQUE7QUFBQTtBQTZhQTtBQUNBO0FBREE7QUFHQTtBQURBO0FBUUE7QUFDQTtBQVBBO0FBU0E7OztBQTFiQTtBQUFBO0FBQUE7QUErYkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUlBO0FBR0E7Ozs7QUFLQTtBQUlBO0FBQ0E7OztBQUdBOztBQWxlQTtBQUFBO0FBQUE7QUFzZUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFEQTtBQUdBOzs7QUFFQTtBQVRBO0FBV0E7QUFDQTtBQUNBO0FBSEE7QUFLQTs7O0FBcmZBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUN4RUE7QUFTQTtBQU5BO0FBRUE7QUFFQTtBQUdBOzs7QUFRQTtBQU9BO0FBQUE7QUFOQTtBQUdBO0FBQ0E7QUFHQTtBQUNBOzs7OztBQXNCQTtBQUNBOzs7O0FBS0E7QUFDQTs7OztBQUdBO0FBQ0E7Ozs7QUFNQTtBQUNBOzs7O0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7O0FBVkE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQU1BO0FBQ0E7Ozs7O0FBSUE7QUFLQTtBQUNBO0FBQ0E7QUFFQTs7O0FBTUE7QUFFQTs7O0FBT0E7Ozs7QUFPQTtBQUVBO0FBT0E7Ozs7O0FBSUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7Ozs7QUE1SkE7QUFDQTs7OztBQUVBO0FBQ0E7Ozs7QUFFQTtBQUNBOzs7O0FBRUE7QUFDQTs7OztBQUVBO0FBQ0E7Ozs7QUFFQTtBQUNBOzs7Ozs7QUNwREE7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBQUE7QUFDQTtBQXFCQTs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7OztBQUVBO0FBQ0E7QUFDQTs7OztBQUdBO0FBS0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7O0FBRUE7OztBQUVBO0FBQ0E7QUFFQTtBQUZBO0FBS0E7Ozs7QUFHQTtBQUNBOzs7QUFHQTs7OztBQUdBO0FBRUE7QUFHQTs7Ozs7QUFoRUE7QUFDQTtBQ3JDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUE0QkE7OztBQUFBOzs7OztBQUVBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7Ozs7OztBQUlBO0FBSUE7OztBQ3RCQTtBQUNBO0FBRUE7OztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBcENBO0FBQ0E7QUF3Q0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7QUFDQTs7OztBQUlBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFHQTs7QUFIQTtBQUFBO0FBQUE7QUFTQTs7QUFUQTtBQUFBO0FBQUE7QUFpQkE7QUFFQTs7QUFuQkE7QUFBQTtBQUFBO0FBK0JBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUdBOzs7QUFFQTs7QUExQ0E7QUFBQTtBQUFBO0FBc0RBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7O0FBL0RBO0FBQUE7QUFBQTtBQW9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7O0FBaEZBO0FBQUE7QUFBQTtBQW9GQTtBQUNBO0FBQUE7QUFFQTs7O0FBRUE7O0FBekZBO0FBQUE7QUFBQTtBQWdHQTs7QUFoR0E7QUFBQTtBQUFBO0FBa0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7OztBQUlBOzs7O0FBSUE7QUFFQTs7O0FBRUE7OztBQUdBOztBQTlJQTtBQUFBO0FBQUE7QUF1SkE7QUFDQTtBQUNBO0FBREE7QUFHQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7O0FBR0E7O0FBdktBO0FBQUE7QUFBQTtBQTJLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBOztBQTVMQTtBQUFBO0FBQUE7QUFnTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOztBQXZNQTtBQUFBO0FBQUE7QUEyTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7O0FBaE5BO0FBQUE7QUFBQTtBQW9OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQXhOQTtBQUFBO0FBQUE7QUE0TkE7QUFDQTtBQUNBOztBQTlOQTtBQUFBO0FBQUE7QUFrT0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7OztBQUVBOztBQXpPQTtBQUFBO0FBQUE7QUE2T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFqUEE7QUFBQTtBQUFBO0FBcVBBO0FBQ0E7OztBQXRQQTtBQUFBO0FBQUE7QUEyUEE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7QUFHQTtBQU1BOztBQXpRQTtBQUFBO0FBQUE7QUE2UUE7QUFDQTtBQUNBOzs7QUFFQTs7QUFqUkE7QUFBQTtBQUFBO0FBMlJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFLQTs7O0FBcFNBO0FBQUE7QUFBQTtBQTRTQTtBQUNBO0FBQUE7QUFHQTtBQUtBOzs7QUFNQTtBQWRBOztBQTdTQTtBQUFBO0FBQUE7QUFpVUE7QUFDQTs7O0FBbFVBO0FBQUE7QUFBQTtBQTBVQTtBQUNBO0FBQ0E7O0FBNVVBO0FBQUE7QUFBQTtBQWdWQTtBQUNBOztBQWpWQTtBQUFBO0FBQUE7QUFzVkE7QUFLQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBeldBO0FBQUE7QUFBQTtBQWdYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQTlYQTtBQUFBO0FBQUE7QUFtWUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBTUE7QUFDQTs7OztBQUlBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFoYUE7QUFBQTtBQUFBO0FBb2FBO0FBQ0E7QUFDQTs7QUF0YUE7QUFBQTtBQUFBO0FBMGFBO0FBQ0E7QUFJQTtBQUNBOztBQWhiQTtBQUFBO0FBQUE7QUFvYkE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBOztBQW5jQTtBQUFBO0FBQUE7QUF1Y0E7QUFDQTtBQUNBO0FBQ0E7O0FBMWNBO0FBQUE7QUFBQTtBQThjQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBOzs7QUFHQTtBQUNBO0FBQ0E7QUFFQTs7QUExZUE7QUFBQTtBQUFBO0FBNmVBO0FBQ0E7QUFBQTtBQUNBO0FBU0E7QUFDQTtBQUNBOzs7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUtBOzs7QUFJQTtBQUNBO0FBS0E7QUFDQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7QUFBQTtBQUNBOztBQTVCQTtBQW1DQTs7QUE3aEJBO0FBQUE7QUFBQTtBQWdpQkE7QUFBQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUxBO0FBT0E7QUFJQTs7O0FBR0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUExa0JBO0FBQUE7QUFBQTtBQThrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFsbEJBO0FBQUE7QUFBQTtBQXdsQkE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBN2xCQTtBQUFBO0FBQUE7QUFnbUJBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBOztBQVZBO0FBQ0E7QUFZQTs7QUEvbUJBO0FBQUE7QUFBQTtBQW1uQkE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBS0E7QUFDQTs7QUE1bkJBO0FBQUE7QUFBQTtBQWdvQkE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFwb0JBO0FBQUE7QUFBQTtBQXlvQkE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUtBO0FBR0E7QUFDQTtBQUNBOzs7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBOzs7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUdBOztBQS9yQkE7QUFBQTtBQUFBO0FBbXNCQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFHQTs7QUFsdEJBO0FBQUE7QUFBQTtBQXd0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQWp1QkE7QUFBQTtBQUFBO0FBcXVCQTtBQUNBO0FBQ0E7Ozs7QUFHQTs7O0FBMXVCQTtBQUFBO0FBQUE7QUErdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFwdkJBO0FBQUE7QUFBQTtBQXV2QkE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUdBOztBQTN2QkE7QUFBQTtBQUFBO0FBdXdCQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUdBO0FBQ0E7OztBQUVBOztBQXB4QkE7QUFBQTtBQUFBO0FBd3hCQTs7QUF4eEJBO0FBQUE7QUFBQTtBQWd5QkE7O0FBaHlCQTtBQUFBO0FBQUE7QUF3eUJBO0FBQ0E7OztBQUdBOztBQTV5QkE7QUFBQTtBQUFBO0FBa3pCQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7O0FBRUE7OztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUVBOzs7QUFFQTs7O0FBR0E7O0FBcjFCQTtBQUFBO0FBQUE7QUF5MUJBO0FBQ0E7QUFBQTtBQUdBOzs7QUFFQTtBQUVBO0FBU0E7OztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7Ozs7O0FBSUE7O0FBcDNCQTtBQUFBO0FBQUE7QUF5M0JBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7OztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkRBOztBQTEzQkE7QUFBQTtBQUFBO0FBazdCQTs7QUFsN0JBO0FBQUE7QUFBQTtBQXc3QkE7O0FBeDdCQTtBQUFBO0FBQUE7QUE0N0JBOztBQTU3QkE7QUFBQTtBQUFBO0FBZzhCQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFuOEJBO0FBQUE7QUFBQTtBQXk4QkE7QUFJQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTs7O0FBT0E7O0FBNzlCQTtBQUFBO0FBQUE7QUFtK0JBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7QUF4K0JBO0FBQUE7QUFBQTtBQTgrQkE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUExL0JBO0FBQUE7QUFBQTtBQTgvQkE7QUFDQTs7O0FBRUE7QUFFQTs7O0FBRUE7O0FBcmdDQTtBQUFBO0FBQUE7QUF5Z0NBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBOWdDQTtBQUFBO0FBQUE7QUFvaENBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7OztBQUdBOztBQS9oQ0E7QUFBQTtBQUFBO0FBbWlDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTs7QUEzaUNBO0FBQUE7QUFBQTtBQWlqQ0E7QUFDQTtBQU1BO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUEvakNBO0FBQUE7QUFBQTtBQXFrQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQTNrQ0E7QUFBQTtBQUFBO0FBK2tDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTs7O0FBcGxDQTtBQUFBO0FBQUE7QUE4bENBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7QUFubUNBO0FBQUE7QUFBQTtBQXdtQ0E7O0FBeG1DQTtBQUFBO0FBQUE7QUEybUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBNW1DQTtBQUFBO0FBQUE7QUErbUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBaG5DQTtBQUFBO0FBQUE7QUFtbkNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTs7QUFwbkNBO0FBQUE7QUFBQTtBQTJuQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7O0FBbm9DQTtBQUFBO0FBQUE7QUEwb0NBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFJQTtBQUNBOztBQXpwQ0E7QUFBQTtBQUFBO0FBNnBDQTtBQUNBO0FBRUE7QUFFQTtBQU1BO0FBQ0E7O0FBenFDQTtBQUFBO0FBQUE7QUErcUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7QUF0c0NBO0FBQUE7QUFBQTtBQTRzQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQURBO0FBR0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7OztBQUdBOztBQTl0Q0E7QUFBQTtBQUFBO0FBcXVDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFodkNBO0FBQUE7QUFBQTtBQXF2Q0E7O0FBcnZDQTtBQUFBO0FBQUE7QUEydkNBOztBQTN2Q0E7QUFBQTtBQUFBO0FBaXdDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUExd0NBO0FBQUE7QUFBQTtBQWd4Q0E7QUFDQTtBQUNBO0FBQ0E7O0FBbnhDQTtBQUFBO0FBQUE7QUF1eENBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTs7QUEzeENBO0FBQUE7QUFBQTtBQSt4Q0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFDQTs7O0FBcnlDQTtBQUFBO0FBQUE7QUEweUNBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7Ozs7O0FBcjFDQTtBQUFBO0FBQUE7QUE2MUNBOztBQTcxQ0E7QUFBQTtBQUFBO0FBcTJDQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7OztBQUlBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUtBOzs7QUEvM0NBO0FBQUE7QUFBQTtBQXk0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUdBOzs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUE3N0NBO0FBQUE7QUFBQTtBQW84Q0E7O0FBcDhDQTtBQUFBO0FBQUE7QUEwOENBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQVZBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUEzK0NBO0FBQUE7QUFBQTtBQWsvQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFBQTtBQUpBO0FBQUE7QUFZQTtBQUNBO0FBQ0E7O0FBbGdEQTtBQUFBO0FBQUE7QUFzZ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBbmhEQTtBQUFBO0FBQUE7QUEyaERBO0FBQ0E7O0FBNWhEQTtBQUFBO0FBQUE7QUFvaURBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7O0FBR0E7O0FBbmtEQTtBQUFBO0FBQUE7QUEwa0RBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBS0E7QUFDQTs7OztBQUlBOztBQTFsREE7QUFBQTtBQUFBO0FBOGxEQTtBQUdBO0FBSEE7QUFLQTs7O0FBbm1EQTtBQUFBO0FBQUE7QUE2bURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7OztBQUdBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBSUE7QUFDQTtBQVJBO0FBVUE7QUFDQTtBQUtBO0FBQ0E7Ozs7QUFJQTtBQXhDQTtBQTJDQTs7O0FBR0E7O0FBNXFEQTtBQUFBO0FBQUE7QUErcURBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFIQTtBQUNBO0FBSUE7QUFDQTs7OztBQUlBOztBQTdyREE7QUFBQTtBQUFBO0FBdXNEQTtBQUlBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFHQTs7QUE1dERBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXV2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUE7QUFNQTtBQUNBO0FBUkE7QUFVQTs7OztBQUlBO0FBQ0E7QUFLQTtBQUlBOzs7QUFNQTs7QUE1eERBO0FBQUE7QUFBQTtBQWd5REE7QUFFQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBUUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7O0FBR0E7OztBQTF6REE7QUFBQTtBQUFBO0FBZzBEQTs7QUFoMERBO0FBQUE7QUFBQTtBQXEwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFLQTtBQUNBO0FBTUE7OztBQUdBOztBQXoxREE7QUFBQTtBQUFBO0FBNjFEQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7O0FBdDJEQTtBQUFBO0FBQUE7QUEwMkRBOztBQTEyREE7QUFBQTtBQUFBO0FBbTNEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQXgzREE7QUFBQTtBQUFBO0FBazREQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOzs7Ozs7QUFZQTs7QUEzNURBO0FBQUE7QUFBQTtBQXU2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7O0FBLzZEQTtBQUFBO0FBQUE7QUEyN0RBO0FBSUE7O0FBLzdEQTtBQUFBO0FBQUE7QUFxOERBO0FBQ0E7O0FBdDhEQTtBQUFBO0FBQUE7QUErOERBO0FBQ0E7QUFFQTtBQUNBOzs7QUFRQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFyK0RBO0FBQUE7QUFBQTtBQSsrREE7QUFDQTtBQUFBO0FBQ0E7QUFJQTs7O0FBR0E7QUFDQTtBQUlBO0FBQ0E7QUFFQTs7O0FBR0E7O0FBbmdFQTtBQUFBO0FBQUE7QUF3Z0VBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFHQTtBQUtBOzs7QUFHQTtBQUVBO0FBRUE7OztBQUdBOztBQXRpRUE7QUFBQTtBQUFBO0FBOGlFQTs7OztBQUlBO0FBTUE7QUFDQTs7QUF6akVBO0FBQUE7QUFBQTtBQStqRUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFwa0VBO0FBQUE7QUFBQTtBQXdrRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQTlrRUE7QUFBQTtBQUFBO0FBcWxFQTtBQUNBOzs7QUFJQTtBQUNBOzs7QUFPQTtBQUNBOztBQW5tRUE7QUFBQTtBQUFBO0FBOG1FQTtBQUNBO0FBQ0E7O0FBaG5FQTtBQUFBO0FBQUE7QUFnb0VBO0FBQ0E7QUFDQTs7QUFsb0VBO0FBQUE7QUFBQTtBQXNvRUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQTNvRUE7QUFBQTtBQUFBO0FBK29FQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBSEE7QUFBQTtBQUFBO0FBQ0E7QUFHQTs7QUFucEVBO0FBQUE7QUFBQTtBQXVwRUE7QUFDQTtBQUNBOztBQXpwRUE7QUFBQTtBQUFBO0FBaXFFQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBenFFQTtBQUFBO0FBQUE7QUFrckVBO0FBQ0E7OztBQUVBOztBQXJyRUE7QUFBQTtBQUFBO0FBd3JFQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFHQTtBQVBBO0FBQ0E7QUFZQTtBQUNBO0FBREE7QUFHQTs7OztBQUlBO0FBQUE7QUFDQTtBQUFBOzs7QUFLQTtBQUNBO0FBRUE7QUFBQTtBQUNBOzs7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBR0E7OztBQUlBO0FBQ0E7OztBQUVBO0FBQ0E7QUFqQkE7QUFvQkE7QUFDQTtBQUNBO0FBSUE7QUFJQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBRUE7OztBQUdBO0FBRUE7QUFDQTs7O0FBR0E7QUFFQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUVBOztBQXJ4RUE7QUFBQTtBQUFBO0FBMHhFQTtBQUNBO0FBREE7QUFHQTs7O0FBN3hFQTtBQUFBO0FBQUE7QUFpeUVBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFMQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUF0ekVBO0FBQUE7QUFBQTtBQTJ6RUE7QUFDQTtBQUNBOzs7QUFHQTs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBdDBFQTtBQUFBO0FBQUE7QUEwMEVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOzs7QUFyMUVBO0FBQUE7QUFBQTtBQTgxRUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFLQTtBQUNBOzs7QUFPQTtBQUNBO0FBQ0E7QUFDQTs7OztBQVFBOzs7O0FBeDNFQTtBQUFBO0FBQUE7QUE4M0VBO0FBQ0E7QUFFQTtBQUNBOztBQUNBOzs7QUFuNEVBO0FBQUE7QUFBQTtBQXc0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOzs7QUFHQTs7QUFwNUVBO0FBQUE7QUFBQTtBQTY1RUE7O0FBNzVFQTtBQUFBO0FBQUE7QUFrNkVBOztBQWw2RUE7QUFBQTtBQUFBO0FBczZFQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFJQTs7O0FBTUE7O0FBcDdFQTtBQUFBO0FBQUE7QUEwN0VBO0FBR0E7QUFKQTtBQU1BOzs7QUEvN0VBO0FBQUE7QUFBQTtBQXE4RUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7O0FBejhFQTtBQUFBO0FBQUE7QUErOEVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7Ozs7Ozs7QUFLQTs7QUFoK0VBO0FBQUE7QUFBQTtBQW8rRUE7QUFFQTtBQU1BOztBQTUrRUE7QUFBQTtBQUFBO0FBbS9FQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBSUE7O0FBMS9FQTtBQUFBO0FBQUE7QUE4L0VBOztBQTkvRUE7QUFBQTtBQUFBO0FBa2dGQTs7QUFsZ0ZBO0FBQUE7QUFBQTtBQXVnRkE7O0FBdmdGQTtBQUFBO0FBQUE7QUE0Z0ZBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUdBOzs7QUFFQTs7QUFuaEZBO0FBQUE7QUFBQTtBQXloRkE7QUFDQTtBQUNBO0FBS0E7O0FBaGlGQTtBQUFBO0FBQUE7QUFvaUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBNWlGQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FDL0hBO0FBQUE7QUFBQTtBQUNBO0FBd0NBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBOzs7QUFoQkE7QUFBQTtBQUFBO0FBd0JBO0FBQ0E7QUFFQTs7QUEzQkE7QUFBQTtBQUFBO0FBb0NBO0FBR0E7OztBQUdBOztBQTFDQTtBQUFBO0FBQUE7QUFtREE7O0FBbkRBO0FBQUE7QUFBQTtBQTZEQTs7QUE3REE7QUFBQTtBQUFBO0FBc0VBOztBQXRFQTtBQUFBO0FBQUE7QUErRUE7O0FBL0VBO0FBQUE7QUFBQTtBQW9GQTs7QUFwRkE7QUFBQTtBQUFBO0FBeUZBO0FBSUE7QUFDQTs7O0FBRUE7O0FBaEdBO0FBQUE7QUFBQTtBQXdHQTtBQUNBOztBQXpHQTtBQUFBO0FBQUE7QUFpSEE7QUFHQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7O0FBbElBO0FBQUE7QUFBQTtBQXVJQTs7QUF2SUE7QUFBQTtBQUFBO0FBOElBOztBQTlJQTtBQUFBO0FBQUE7QUF3SkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUlBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFIQTtBQUtBOztBQVpBO0FBZUE7OztBQUdBO0FBQ0E7QUFHQTs7QUFyTEE7QUFBQTtBQUFBO0FBeUxBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBMU1BO0FBQUE7QUFBQTtBQThNQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBS0E7Ozs7O0FBSUE7O0FBM05BO0FBQUE7QUFBQTtBQStOQTtBQUVBOzs7QUFFQTs7QUFuT0E7QUFBQTtBQUFBO0FBc09BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7O0FBR0E7QUFDQTs7QUE5T0E7QUFBQTtBQUFBO0FBb1BBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQWpSQTtBQUFBO0FBQUE7QUF3UkE7O0FBeFJBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUM5Q0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUdBOzs7QUFoQkE7QUFBQTtBQUFBO0FBeUJBOztBQXpCQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FDS0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOztBQUpBOzs7QUFTQTtBQUtBO0FBQ0E7QUFDQTtBQURBO0FBR0E7O0FBSkE7QUFDQTtBQU9BO0FBQ0E7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTtBQUlBO0FBQ0E7QUFEQTtBQVFBOzs7O0FBSUE7QUFDQTs7O0FBR0E7QUFDQTs7O0FBSUE7QUFLQTtBQUVBO0FBQUE7OztBQUlBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7Ozs7QUFRQTtBQUtBO0FBRUE7QUFBQTs7OztBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFTQTtBQzVHQTtBQUVBO0FBRUE7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBU0E7QUFFQTtBQUdBO0FBR0E7QUF6Q0E7QUFDQTtBQTZDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7OztBQUVBOzs7QUN2REE7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFxREE7QUFDQTtBQUZBO0FBcERBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFTQTtBQUNBO0FBR0E7QUFDQTs7OztBQTRIQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUlBOzs7QUFHQTs7Ozs7O0FDcExBO0FBQ0E7OztBQXFCQTtBQUtBO0FBQ0E7QUFVQTtBQVhBO0FBbUJBO0FBQ0E7QUFLQTtBQVdBO0FBUUE7QUFDQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWUE7Ozs7O0FBY0E7QUFBQTtBQUNBO0FBREE7O0FBRkE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQU5BOzs7OztBQVNBO0FBR0E7QUFDQTtBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7Ozs7QUFNQTtBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBR0E7QUFDQTs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7OztBQUVBOzs7O0FBR0E7QUFDQTs7OztBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFJQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBUUE7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOzs7QUFLQTtBQUVBOzs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7OztBQU1BO0FBRUE7Ozs7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7O0FBSUE7Ozs7QUFJQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFFQTs7OztBQUlBOzs7O0FBSUE7Ozs7OztBQUtBO0FBQ0E7QUFEQTtBQUdBOzs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBYUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUlBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7OztBQVFBO0FBRUE7QUFGQTtBQUtBOzs7QUFFQTtBQXpCQTtBQTJCQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBS0E7QUFHQTtBQUNBO0FBTEE7QUFPQTtBQUNBOzs7OztBQUlBO0FBRUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBOzs7OztBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFFQTtBQUVBOzs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7Ozs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7Ozs7QUFRQTtBQUVBO0FBQ0E7Ozs7QUFLQTtBQUdBO0FBQ0E7OztBQU1BOzs7O0FBTUE7QUFHQTtBQUNBOzs7QUFNQTs7Ozs7QUFLQTtBQUNBOzs7O0FBSUE7Ozs7QUFNQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFDQTtBQUNBOzs7O0FBR0E7Ozs7QUFJQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7Ozs7QUFHQTs7OztBQUtBO0FBT0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFFQTs7O0FBR0E7Ozs7QUFHQTtBQUVBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBUUE7QUFFQTtBQUNBOzs7O0FBR0E7Ozs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUZBO0FBS0E7O0FBTkE7QUFhQTtBQUNBO0FBTkE7QUFRQTtBQUNBOzs7OztBQUlBO0FBQ0E7O0FBS0E7Ozs7QUFLQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7O0FBSUE7QUFHQTtBQUNBOzs7QUFPQTtBQUNBO0FBYkE7QUFlQTtBQUNBOzs7Ozs7QUFJQTtBQUNBOzs7O0FBSUE7QUFHQTtBQUNBOzs7QUFPQTtBQUNBO0FBYkE7QUFlQTtBQUNBOzs7Ozs7QUFJQTtBQUNBOzs7O0FBS0E7QUFHQTtBQUpBO0FBTUE7QUFDQTs7Ozs7O0FBS0E7Ozs7QUFJQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTs7OztBQUlBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7O0FBTUE7Ozs7QUFTQTs7Ozs7QUFLQTs7Ozs7QUFLQTs7OztBQUlBOzs7OztBQUtBOzs7OztBQUtBOzs7OztBQUtBOzs7O0FBSUE7Ozs7QUFJQTtBQUNBOzs7O0FBSUE7Ozs7QUFJQTs7OztBQUlBO0FBQ0E7Ozs7OztBQUtBOzs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFEQTtBQUdBO0FBREE7Ozs7QUFLQTs7O0FBRUE7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRkE7QUFRQTtBQUpBOzs7O0FBU0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBRkE7Ozs7QUFlQTtBQUtBO0FBQ0E7QUFDQTtBQUlBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQU9BOzs7QUFHQTtBQUNBOzs7QUFJQTs7OztBQUlBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFHQTtBQURBO0FBR0E7OztBQUVBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBRkE7Ozs7O0FBT0E7QUFDQTs7O0FBR0E7QUFJQTs7O0FBR0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7O0FBR0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7O0FBSUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUlBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBR0E7OztBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFJQTtBQUdBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFHQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7Ozs7QUFJQTtBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFHQTs7O0FBWkE7QUFnQkE7OztBQUVBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBSkE7QUFTQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBREE7QUFHQTs7OztBQUdBO0FBQ0E7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFGQTtBQUtBO0FBQ0E7Ozs7O0FBSUE7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7OztBQUVBO0FBUkE7QUFVQTtBQUNBO0FBQ0E7QUFBQTs7QUFFQTtBQUNBOzs7O0FBSUE7Ozs7QUFHQTs7OztBQUdBO0FBQ0E7QUFDQTtBQWxCQTtBQW9CQTs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7Ozs7QUFHQTtBQUNBO0FBQUE7Ozs7QUFHQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7QUFEQTtBQUdBOzs7O0FBSUE7QUFDQTtBQUNBO0FBTUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFNQTs7OztBQUlBOzs7QUFHQTs7Ozs7QUFNQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQURBO0FBR0E7Ozs7QUFHQTs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBREE7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBR0E7OztBQUVBO0FBdEJBOzs7OztBQTJCQTs7OztBQUdBO0FBQ0E7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7OztBQUdBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUdBOzs7QUFPQTtBQUdBOzs7QUFJQTtBQU1BOzs7QUFHQTtBQUNBOzs7QUFJQTtBQUlBOzs7QUFHQTtBQUVBOzs7QUFHQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFEQTtBQUdBOzs7OztBQS82Q0E7QUFDQTtBQzdGQTs7Ozs7Ozs7Ozs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7Ozs7QUFLQTtBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFNQTtBQUVBOzs7O0FBTUE7QUFDQTtBQUVBOzs7O0FBTUE7QUFDQTtBQUNBOzs7O0FBS0E7QUFDQTs7OztBQUtBO0FBQ0E7Ozs7QUFLQTtBQUVBOzs7O0FBTUE7QUFDQTs7OztBQU9BO0FBQ0E7Ozs7QUFNQTtBQUNBOzs7O0FBTUE7QUFDQTs7OztBQUlBO0FBQUE7QUFDQTtBQUFBO0FBRUE7Ozs7O0FBUUE7QUFHQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOzs7QUFLQTs7OztBQUdBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTs7Ozs7QUFRQTtBQUVBO0FBR0E7OztBQUVBO0FBQ0E7Ozs7O0FBTUE7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFqQkE7QUF5QkE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTs7O0FBU0E7Ozs7O0FBSUE7QUFJQTtBQURBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTs7Ozs7QUFhQTtBQUVBOzs7O0FBOU9BO0FBQ0E7QUFrUUE7O0FBQUE7QUFBQTs7O0FDOVFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFhQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7Ozs7QUFJQTs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7OztBQUNBO0FBRUE7Ozs7QUFHQTtBQUVBOzs7O0FBSUE7QUFDQTs7OztBQUtBO0FBQ0E7Ozs7QUFVQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBTUE7QUFDQTs7OztBQXJFQTtBQUNBO0FDekJBO0FBQ0E7QUFEQTtBQUNBO0FBS0E7Ozs7Ozs7Ozs7OztBQTBCQTs7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBOzs7Ozs7QUFLQTtBQUNBOzs7QUFHQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7QUFPQTs7OztBQUdBO0FBQ0E7QUFDQTtBQU1BO0FBUEE7QUFVQTtBQURBO0FBR0E7Ozs7O0FBTUE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBOzs7QUFHQTtBQUNBOzs7QUFHQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBSUE7Ozs7QUFLQTtBQUlBOzs7O0FBR0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7O0FBT0E7QUFJQTtBQUNBO0FBQ0E7QUFLQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBS0E7OztBQUdBO0FBQ0E7OztBQUlBOzs7O0FBSUE7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7QUFFQTtBQUVBO0FBRkE7O0FBR0E7QUFHQTtBQUNBO0FBQ0E7O0FBSEE7QUFNQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTs7O0FBRUE7Ozs7QUFHQTs7OztBQUdBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTs7OztBQUlBO0FBQ0E7Ozs7QUFLQTs7O0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQU1BO0FBT0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBUUE7OztBQVNBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7O0FBR0E7QUFDQTs7O0FBRUE7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFNQTs7Ozs7QUFVQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7Ozs7OztBQVdBO0FBQ0E7OztBQVFBO0FBQ0E7OztBQVFBO0FBQ0E7Ozs7O0FBU0E7Ozs7OztBQVdBO0FBRUE7QUFHQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7Ozs7OztBQUtBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7O0FBeGRBO0FBQ0E7QUNvQkE7Ozs7Ozs7Ozs7OztBQThCQTtBQU9BOzs7O0FBUUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUdBO0FBQ0E7O0FBSkE7QUFPQTs7OztBQUlBOzs7OztBQUlBO0FBRUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7O0FBc0JBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBOzs7QUFJQTtBQUFBO0FBQUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFFQTs7OztBQUlBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTs7OztBQVVBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTs7OztBQWFBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUxBO0FBU0E7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFDQTs7O0FBR0E7QUFDQTs7O0FBR0E7QUFDQTtBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOzs7QUFHQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQXBCQTtBQXNCQTs7O0FBR0E7Ozs7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7OztBQUdBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOzs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7Ozs7QUFTQTtBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBR0E7QUFDQTtBQUVBO0FBSUE7QUFJQTs7OztBQU9BO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFHQTs7O0FBR0E7Ozs7QUFHQTs7OztBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFEQTs7OztBQU9BOzs7OztBQU9BO0FBQ0E7QUFDQTtBQUVBOzs7O0FBVUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFPQTs7OztBQUlBO0FBQ0E7Ozs7QUFJQTs7OztBQUlBO0FBS0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOzs7O0FBR0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUdBO0FBQ0E7QUFUQTtBQUNBO0FBVUE7Ozs7QUFPQTtBQU9BO0FBQ0E7QUFEQTtBQUdBOzs7QUFRQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBOzs7QUFFQTs7O0FBR0E7QUFDQTtBQURBO0FBU0E7QUFEQTtBQUdBO0FBQ0E7Ozs7O0FBUUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7OztBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7Ozs7QUFLQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFZQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQURBO0FBR0E7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBUUE7QUFDQTtBQWtCQTtBQUdBOzs7O0FBSUE7QUFFQTs7OztBQUtBO0FBTUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBRUE7Ozs7QUFVQTtBQUlBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQURBO0FBU0E7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7O0FBS0E7Ozs7QUFNQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTs7O0FBTUE7Ozs7O0FBT0E7QUFDQTs7O0FBR0E7QUFJQTtBQUFBOzs7QUFPQTtBQUNBOzs7QUFHQTtBQUVBOzs7O0FBR0E7QUFDQTs7OztBQUdBOzs7QUFJQTtBQUNBO0FBTUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7OztBQWVBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBUUE7OztBQUVBO0FBRUE7QUFDQTtBQWZBO0FBcUJBOzs7O0FBSUE7QUFDQTtBQUNBOzs7QUFPQTs7O0FBR0E7O0FBQ0E7OztBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7OztBQU9BOztBQUNBOzs7QUFPQTtBQUNBOztBQUNBOzs7QUFPQTs7QUFDQTs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTs7OztBQUlBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOzs7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBREE7QUFPQTs7O0FBRUE7Ozs7QUFJQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7Ozs7QUFNQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBTEE7QUFVQTs7O0FBSUE7QUFJQTs7O0FBR0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7Ozs7O0FBSUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTs7O0FBRUE7Ozs7QUFHQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFEQTtBQUlBOzs7O0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7OztBQUlBOzs7QUFHQTs7OztBQUdBO0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBOztBQVpBO0FBZ0JBOzs7O0FBVUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTs7OztBQUlBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQUtBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUE7OztBQUlBOzs7QUFHQTs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQU1BO0FBSkE7QUFNQTs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFKQTtBQU1BOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFHQTtBQUpBO0FBTUE7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOzs7O0FBS0E7QUFNQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUVBOzs7QUFJQTtBQUlBOzs7QUFJQTtBQUNBOzs7QUFHQTs7O0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7OztBQUVBOzs7O0FBTUE7QUFFQTs7OztBQVNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTs7OztBQUlBO0FBV0E7Ozs7QUFHQTtBQUdBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7O0FBS0E7QUFHQTs7Ozs7QUFLQTtBQU9BO0FBRUE7QUFRQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQWFBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTs7O0FBR0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBT0E7QUFDQTs7O0FBRUE7QUFKQTtBQVVBOzs7QUFFQTtBQUVBOzs7OztBQUlBO0FBVUE7QUFnQkE7QUFHQTs7OztBQUdBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFFQTs7O0FBR0E7OztBQUdBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFLQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFNQTtBQU1BO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBTUE7OztBQUVBO0FBQ0E7Ozs7QUFTQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUtBOzs7O0FBR0E7QUFJQTtBQUVBO0FBQ0E7Ozs7QUFJQTtBQUlBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUdBO0FBQ0E7QUFJQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU1BOzs7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQU9BO0FBQ0E7O0FBaENBO0FBMkNBO0FBQ0E7OztBQUdBOzs7O0FBR0E7QUFHQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBTUE7QUFFQTtBQUNBO0FBQUE7QUFDQTs7Ozs7QUFpQkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQU1BOzs7OztBQUtBOzs7QUFFQTs7OztBQUdBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUhBO0FBU0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7OztBQU1BOzs7O0FBU0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUdBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFEQTtBQUdBO0FBS0E7QUFDQTtBQUNBO0FBSUE7O0FBWkE7QUFlQTs7O0FBR0E7QUFHQTtBQUhBO0FBS0E7OztBQUdBO0FBRUE7Ozs7QUFHQTtBQU1BO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUdBOzs7O0FBS0E7QUFJQTs7OztBQUdBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTs7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUVBO0FBQ0E7OztBQUdBO0FBRUE7QUFlQTtBQWhCQTtBQWtCQTs7OztBQUlBO0FBQ0E7OztBQUdBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7OztBQUVBOzs7O0FBTUE7QUFDQTtBQUNBO0FBR0E7Ozs7OztBQUtBO0FBS0E7QUFFQTs7OztBQU9BO0FBSUE7QUFHQTtBQUhBO0FBS0E7Ozs7O0FBSUE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTtBQUNBOzs7QUFFQTs7O0FBRUE7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOzs7OztBQVVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQURBO0FBR0E7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBREE7QUFHQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7Ozs7QUFHQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7Ozs7QUFHQTs7OztBQUtBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7O0FBR0E7QUFFQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBT0E7QUFFQTs7OztBQXZqRkE7QUFDQTtBQ3JCQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBSUE7Ozs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFFQTtBQUVBOzs7O0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBT0E7Ozs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBOzs7QUFFQTs7OztBQVlBO0FBQ0E7QUFDQTs7O0FBRUE7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFPQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFHQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFPQTs7QUFDQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUdBOztBQVBBO0FBVUE7QUFDQTtBQUVBO0FBTUE7Ozs7QUFJQTtBQUVBOzs7OztBQUlBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBTEE7QUFPQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFHQTtBQURBOzs7OztBQVFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBSUE7QUFHQTs7QUFUQTtBQVlBOzs7OztBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUF6QkE7QUEyQkE7OztBQUVBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOzs7O0FBR0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBOzs7QUFHQTtBQUVBOzs7O0FBTUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUlBO0FBQUE7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTs7O0FBRUE7QUFDQTs7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFOQTtBQVFBOzs7QUFFQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBS0E7QUFDQTs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUtBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7OztBQUdBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7OztBQUtBO0FBQ0E7OztBQUVBO0FBbEJBO0FBb0JBO0FBQ0E7QUFEQTtBQUdBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7OztBQUdBO0FBR0E7QUFBQTtBQUlBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7OztBQUdBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQUE7QUFLQTtBQUVBOzs7O0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTtBQUVBO0FBS0E7QUFBQTtBQUtBOzs7O0FBR0E7QUFDQTtBQUNBOzs7O0FBR0E7QUFNQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBOzs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQVFBO0FBQ0E7QUFDQTs7OztBQUdBO0FBSUE7QUFDQTtBQUNBOzs7O0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBTUE7QUFDQTs7O0FBRUE7Ozs7QUFHQTtBQUVBOzs7O0FBTUE7QUFPQTtBQUNBO0FBQ0E7Ozs7QUFZQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTs7O0FBTUE7QUFDQTtBQUFBO0FBQ0E7Ozs7QUFJQTtBQUNBOzs7QUFHQTtBQUNBOzs7QUFHQTs7OztBQU9BO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFBQTtBQUtBO0FBQ0E7QUFFQTs7OztBQU1BO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOzs7QUFJQTtBQU9BO0FBUkE7QUFjQTs7O0FBR0E7QUFDQTtBQUdBO0FBRUE7QUFJQTtBQUFBO0FBS0E7QUFDQTtBQUVBOzs7O0FBS0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBTUE7QUFLQTtBQUNBOztBQVBBO0FBYUE7OztBQU1BOzs7QUFFQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBQ0E7QUFDQTs7OztBQVlBO0FBSUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBS0E7QUFFQTtBQUZBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBTUE7Ozs7QUFjQTtBQUtBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7Ozs7QUFNQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBRUE7Ozs7QUFRQTtBQUdBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBS0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7OztBQUdBO0FBQ0E7QUFFQTtBQUlBOzs7QUE5QkE7QUFtQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFFQTs7OztBQUtBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFoQkE7QUFrQkE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7OztBQUdBO0FBTUE7QUFDQTtBQUNBOzs7O0FBS0E7Ozs7QUFTQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBOzs7QUFHQTs7OztBQVlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUdBO0FBdEJBO0FBK0JBO0FBQ0E7QUFEQTtBQUdBOztBQUpBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUZBO0FBU0E7QUFDQTs7O0FBR0E7O0FBL0JBO0FBZ0RBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFGQTtBQUlBO0FBQ0E7OztBQUVBOzs7QUFVQTtBQTdCQTtBQWdDQTtBQUNBO0FBREE7QUFHQTs7QUFMQTtBQVFBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7OztBQUdBO0FBQ0E7OztBQUdBOzs7O0FBR0E7QUFFQTtBQUtBOzs7QUFHQTs7OztBQUdBO0FBSUE7QUFFQTtBQUNBO0FBRUE7Ozs7QUFPQTtBQVFBOzs7O0FBYUE7QUFNQTtBQUVBO0FBU0E7QUFFQTtBQVVBOzs7O0FBSUE7OztBQUtBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTs7O0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7QUFHQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOztBQUhBO0FBTUE7QUFDQTtBQURBO0FBR0E7Ozs7OztBQU1BO0FBQ0E7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFFQTtBQUdBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFJQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7Ozs7QUFJQTtBQUNBOzs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBOzs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUVBO0FBQ0E7QUFHQTs7O0FBRUE7Ozs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFOQTtBQVlBO0FBREE7QUFJQTtBQUdBOzs7QUFFQTtBQUNBO0FBUkE7QUFVQTtBQURBO0FBR0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUdBO0FBR0E7QUFDQTtBQUtBO0FBR0E7QUFDQTs7O0FBbkJBO0FBdUJBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7QUFHQTtBQUNBO0FBSUE7OztBQUlBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFEQTtBQUdBOzs7O0FBSUE7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQURBO0FBR0E7Ozs7O0FBTUE7Ozs7QUFTQTtBQU1BO0FBRUE7QUFFQTtBQUNBO0FBQUE7OztBQUNBO0FBQ0E7QUFFQTtBQUtBOzs7QUFaQTtBQWlCQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFRQTs7O0FBZkE7QUFxQkE7QUFHQTtBQUNBO0FBRUE7QUFQQTtBQVNBO0FBQUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUlBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUFBO0FBQ0E7O0FBRkE7QUFLQTtBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFIQTtBQU9BO0FBREE7QUFHQTtBQURBO0FBR0E7Ozs7O0FBSUE7QUFRQTtBQUNBOzs7QUFRQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUdBOzs7QUFHQTs7OztBQU1BO0FBRUE7QUFDQTtBQUFBO0FBR0E7QUFPQTtBQUdBO0FBR0E7QUFDQTs7O0FBRUE7QUFHQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFDQTs7OztBQUdBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7Ozs7QUFHQTtBQU1BO0FBQ0E7QUFNQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQVVBO0FBQ0E7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUtBO0FBQ0E7QUFDQTtBQXJDQTtBQUNBO0FBdUNBOzs7O0FBR0E7QUFDQTtBQUVBO0FBTUE7OztBQUVBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7OztBQUVBOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUlBO0FBQ0E7OztBQUdBO0FBQ0E7OztBQUdBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFNQTs7O0FBRUE7QUFNQTs7OztBQW5wRUE7QUFDQTtBQ2pDQTs7QUFBQTtBQUFBO0FBQUE7OztBQWNBO0FBS0E7QUFBQTtBQUpBO0FBRUE7QUFHQTs7Ozs7QUFHQTtBQUNBOzs7O0FBR0E7QUFDQTs7OztBQUdBO0FBQ0E7QUFLQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7QUFGQTtBQUtBOzs7Ozs7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUVBO0FBWkE7QUFjQTs7OztBQUlBO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7OztBQUdBO0FBQ0E7QUFEQTtBQUlBOzs7Ozs7O0FDekZBOzs7OztBQVFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7Ozs7O0FBZ0JBO0FBQ0E7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUF6Q0E7QUFDQTtBQTRDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7OztBQUVBOzs7QUNuREE7OztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQU1BO0FBQ0E7QUFDQTtBQUZBO0FBTkE7QUFhQTs7O0FBR0E7QUF6QkE7QUEyQkE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBOztBQXBDQTtBQXVDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7OztBQUVBOzs7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUdBOzs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7OztBQUVBOzs7QUFFQTs7Ozs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babylon7/lib/index.js\n");

/***/ })

}]);