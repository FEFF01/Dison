(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[49],{

/***/ "./node_modules/tern/defs/ecmascript.json":
/*!************************************************!*\
  !*** ./node_modules/tern/defs/ecmascript.json ***!
  \************************************************/
/*! exports provided: !name, !define, Infinity, undefined, NaN, Object, Function, Array, String, Number, Boolean, RegExp, Date, Error, SyntaxError, ReferenceError, URIError, EvalError, RangeError, TypeError, parseInt, parseFloat, isNaN, isFinite, eval, encodeURI, encodeURIComponent, decodeURI, decodeURIComponent, Math, JSON, ArrayBuffer, DataView, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Promise, Proxy, Reflect, Set, Symbol, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray, WeakMap, WeakSet, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"!name\\\":\\\"ecmascript\\\",\\\"!define\\\":{\\\"Error.prototype\\\":\\\"Error.prototype\\\",\\\"propertyDescriptor\\\":{\\\"enumerable\\\":\\\"bool\\\",\\\"configurable\\\":\\\"bool\\\",\\\"value\\\":\\\"?\\\",\\\"writable\\\":\\\"bool\\\",\\\"get\\\":\\\"fn() -> ?\\\",\\\"set\\\":\\\"fn(value: ?)\\\"},\\\"Promise.prototype\\\":{\\\"catch\\\":{\\\"!doc\\\":\\\"The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\\\",\\\"!type\\\":\\\"fn(onRejected: fn(reason: ?)) -> !this\\\"},\\\"then\\\":{\\\"!doc\\\":\\\"The then() method returns a Promise. It takes two arguments, both are callback functions for the success and failure cases of the Promise.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\\\",\\\"!type\\\":\\\"fn(onFulfilled: fn(value: ?), onRejected: fn(reason: ?)) -> !custom:Promise_then\\\",\\\"!effects\\\":[\\\"call !0 !this.:t\\\"]},\\\"finally\\\":{\\\"!doc\\\":\\\"The finally() method returns a Promise. When the promise is settled, whether fulfilled or rejected, the specified callback function is executed. \\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\\\",\\\"!type\\\":\\\"fn(onFinally: fn()) -> !custom:Promise_then\\\"}},\\\"Promise_reject\\\":{\\\"!type\\\":\\\"fn(reason: ?) -> !this\\\",\\\"!doc\\\":\\\"The Promise.reject(reason) method returns a Promise object that is rejected with the given reason.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\\\"},\\\"iter_prototype\\\":{\\\":Symbol.iterator\\\":\\\"fn() -> !this\\\"},\\\"iter\\\":{\\\"!proto\\\":\\\"iter_prototype\\\",\\\"next\\\":{\\\"!type\\\":\\\"fn() -> +iter_result[value=!this.:t]\\\",\\\"!doc\\\":\\\"Return the next item in the sequence.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\\\"},\\\"iter_result\\\":{\\\"done\\\":\\\"bool\\\",\\\"value\\\":\\\"?\\\"},\\\"generator_prototype\\\":{\\\"!proto\\\":\\\"iter_prototype\\\",\\\"next\\\":\\\"fn(value?: ?) -> iter_result\\\",\\\"return\\\":\\\"fn(value?: ?) -> iter_result\\\",\\\"throw\\\":\\\"fn(exception: +Error)\\\"},\\\"async_iter_prototype\\\":{\\\":Symbol.asyncIterator\\\":\\\"fn() -> !this\\\"},\\\"async_iter\\\":{\\\"!proto\\\":\\\"async_iter_prototype\\\",\\\"next\\\":{\\\"!type\\\":\\\"fn() -> +Promise[:t=+iter_result[value=!this.:t]]\\\",\\\"!doc\\\":\\\"Return the next item in the sequence.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\\\"},\\\"async_generator_prototype\\\":{\\\"!proto\\\":\\\"async_iter_prototype\\\",\\\"next\\\":\\\"fn(value?: ?) -> +Promise[:t=iter_result]\\\",\\\"return\\\":\\\"fn(value?: ?) -> +Promise[:t=iter_result]\\\",\\\"throw\\\":\\\"fn(exception: +Error)\\\"},\\\"Proxy_handler\\\":{\\\"!doc\\\":\\\"The proxy's handler object is a placeholder object which contains traps for proxies.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler\\\",\\\"getPrototypeOf\\\":\\\"fn(target: ?)\\\",\\\"setPrototypeOf\\\":\\\"fn(target: ?, prototype: ?)\\\",\\\"isExtensible\\\":\\\"fn(target: ?)\\\",\\\"preventExtensions\\\":\\\"fn(target: ?)\\\",\\\"getOwnPropertyDescriptor\\\":\\\"fn(target: ?, property: string) -> propertyDescriptor\\\",\\\"defineProperty\\\":\\\"fn(target: ?, property: string, descriptor: propertyDescriptor)\\\",\\\"has\\\":\\\"fn(target: ?, property: string)\\\",\\\"get\\\":\\\"fn(target: ?, property: string)\\\",\\\"set\\\":\\\"fn(target: ?, property: string, value: ?)\\\",\\\"deleteProperty\\\":\\\"fn(target: ?, property: string)\\\",\\\"enumerate\\\":\\\"fn(target: ?)\\\",\\\"ownKeys\\\":\\\"fn(target: ?)\\\",\\\"apply\\\":\\\"fn(target: ?, self: ?, arguments: [?])\\\",\\\"construct\\\":\\\"fn(target: ?, arguments: [?])\\\"},\\\"Proxy_revocable\\\":{\\\"proxy\\\":\\\"+Proxy\\\",\\\"revoke\\\":\\\"fn()\\\"},\\\"TypedArray\\\":{\\\"!type\\\":\\\"fn(size: number)\\\",\\\"!doc\\\":\\\"A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\\\",\\\"from\\\":{\\\"!type\\\":\\\"fn(arrayLike: ?, mapFn?: fn(elt: ?, i: number) -> number, thisArg?: ?) -> +TypedArray\\\",\\\"!effects\\\":[\\\"call !1 this=!2 !0.<i> number\\\"],\\\"!doc\\\":\\\"Creates a new typed array from an array-like or iterable object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from\\\"},\\\"of\\\":{\\\"!type\\\":\\\"fn(elements: number) -> +TypedArray\\\",\\\"!doc\\\":\\\"Creates a new typed array from a variable number of arguments.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of\\\"},\\\"BYTES_PER_ELEMENT\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\\\"},\\\"name\\\":{\\\"!type\\\":\\\"string\\\",\\\"!doc\\\":\\\"The TypedArray.name property represents a string value of the typed array constructor name.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\\\"},\\\"prototype\\\":{\\\"<i>\\\":\\\"number\\\",\\\"buffer\\\":{\\\"!type\\\":\\\"+ArrayBuffer\\\",\\\"!doc\\\":\\\"The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\\\"},\\\"byteLength\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The byteLength accessor property represents the length (in bytes) of a typed array from the start of its ArrayBuffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\\\"},\\\"byteOffset\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\\\"},\\\"copyWithin\\\":{\\\"!type\\\":\\\"fn(target: number, start: number, end?: number) -> ?\\\",\\\"!doc\\\":\\\"The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\\\"},\\\"entries\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=number]\\\",\\\"!doc\\\":\\\"The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries\\\"},\\\"every\\\":{\\\"!type\\\":\\\"fn(callback: fn(element: number, index: number, array: TypedArray) -> bool, thisArg?: ?) -> bool\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number !this\\\"],\\\"!doc\\\":\\\"The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every\\\"},\\\"fill\\\":{\\\"!type\\\":\\\"fn(value: number, start?: number, end?: number)\\\",\\\"!doc\\\":\\\"The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill\\\"},\\\"filter\\\":{\\\"!type\\\":\\\"fn(test: fn(element: number, i: number) -> bool, context?: ?) -> !this\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number\\\"],\\\"!doc\\\":\\\"Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also Array.prototype.filter().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter\\\"},\\\"find\\\":{\\\"!type\\\":\\\"fn(callback: fn(element: number, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> number\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number !this\\\"],\\\"!doc\\\":\\\"The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.\\\\nSee also the findIndex() method, which returns the index of a found element in the typed array instead of its value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find\\\"},\\\"findIndex\\\":{\\\"!type\\\":\\\"fn(callback: fn(element: number, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> number\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number !this\\\"],\\\"!doc\\\":\\\"The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.\\\\nSee also the find() method, which returns the value of a found element in the typed array instead of its index.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\\\"},\\\"forEach\\\":{\\\"!type\\\":\\\"fn(callback: fn(value: number, key: number, array: +TypedArray), thisArg?: ?)\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number !this\\\"],\\\"!doc\\\":\\\"Executes a provided function once per array element.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach\\\"},\\\"indexOf\\\":{\\\"!type\\\":\\\"fn(searchElement: number, fromIndex?: number) -> number\\\",\\\"!doc\\\":\\\"The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf\\\"},\\\"join\\\":{\\\"!type\\\":\\\"fn(separator?: string) -> string\\\",\\\"!doc\\\":\\\"The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join\\\"},\\\"keys\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=number]\\\",\\\"!doc\\\":\\\"The keys() method returns a new Array Iterator object that contains the keys for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys\\\"},\\\"lastIndexOf\\\":{\\\"!type\\\":\\\"fn(searchElement: number, fromIndex?: number) -> number\\\",\\\"!doc\\\":\\\"The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf\\\"},\\\"length\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"Returns the number of elements hold in the typed array. Fixed at construction time and thus read only.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\\\"},\\\"map\\\":{\\\"!type\\\":\\\"fn(f: fn(element: number, i: number) -> number, context?: ?) -> +TypedArray\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number\\\"],\\\"!doc\\\":\\\"Creates a new array with the results of calling a provided function on every element in this array. See also Array.prototype.map().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map\\\"},\\\"reduce\\\":{\\\"!type\\\":\\\"fn(combine: fn(sum: ?, elt: number, i: number) -> ?, init?: ?) -> !0.!ret\\\",\\\"!effects\\\":[\\\"call !0 !1 number number\\\"],\\\"!doc\\\":\\\"Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also Array.prototype.reduce().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce\\\"},\\\"reduceRight\\\":{\\\"!type\\\":\\\"fn(combine: fn(sum: ?, elt: number, i: number) -> ?, init?: ?) -> !0.!ret\\\",\\\"!effects\\\":[\\\"call !0 !1 number number\\\"],\\\"!doc\\\":\\\"Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also Array.prototype.reduceRight().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight\\\"},\\\"reverse\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"!doc\\\":\\\"The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse\\\"},\\\"set\\\":{\\\"!type\\\":\\\"fn(array: [number], offset?: number)\\\",\\\"!doc\\\":\\\"The set() method stores multiple values in the typed array, reading input values from a specified array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\\\"},\\\"slice\\\":{\\\"!type\\\":\\\"fn(from: number, to?: number) -> +TypedArray\\\",\\\"!doc\\\":\\\"Extracts a section of an array and returns a new array. See also Array.prototype.slice().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice\\\"},\\\"some\\\":{\\\"!type\\\":\\\"fn(test: fn(elt: number, i: number) -> bool, context?: ?) -> bool\\\",\\\"!effects\\\":[\\\"call !0 this=!1 number number\\\"],\\\"!doc\\\":\\\"The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some\\\"},\\\"sort\\\":{\\\"!type\\\":\\\"fn(compare?: fn(a: number, b: number) -> number)\\\",\\\"!effects\\\":[\\\"call !0 number number\\\"],\\\"!doc\\\":\\\"Sorts the elements of an array in place and returns the array. See also Array.prototype.sort().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort\\\"},\\\"subarray\\\":{\\\"!type\\\":\\\"fn(begin?: number, end?: number) -> +TypedArray\\\",\\\"!doc\\\":\\\"The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\\\"},\\\"values\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=number]\\\",\\\"!doc\\\":\\\"The values() method returns a new Array Iterator object that contains the values for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values\\\"},\\\":Symbol.iterator\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=number]\\\",\\\"!doc\\\":\\\"Returns a new Array Iterator object that contains the values for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator\\\"}}}},\\\"Infinity\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Infinity\\\",\\\"!doc\\\":\\\"A numeric value representing infinity.\\\"},\\\"undefined\\\":{\\\"!type\\\":\\\"?\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined\\\",\\\"!doc\\\":\\\"The value undefined.\\\"},\\\"NaN\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/NaN\\\",\\\"!doc\\\":\\\"A value representing Not-A-Number.\\\"},\\\"Object\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"getPrototypeOf\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> ?\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\\\",\\\"!doc\\\":\\\"Returns the prototype (i.e. the internal prototype) of the specified object.\\\"},\\\"create\\\":{\\\"!type\\\":\\\"fn(proto: ?) -> !custom:Object_create\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\\\",\\\"!doc\\\":\\\"Creates a new object with the specified prototype object and properties.\\\"},\\\"defineProperty\\\":{\\\"!type\\\":\\\"fn(obj: ?, prop: string, desc: propertyDescriptor) -> !custom:Object_defineProperty\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\\\",\\\"!doc\\\":\\\"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article.\\\"},\\\"defineProperties\\\":{\\\"!type\\\":\\\"fn(obj: ?, props: ?) -> !custom:Object_defineProperties\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\\\",\\\"!doc\\\":\\\"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article.\\\"},\\\"getOwnPropertyDescriptor\\\":{\\\"!type\\\":\\\"fn(obj: ?, prop: string) -> propertyDescriptor\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\\\",\\\"!doc\\\":\\\"Returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.\\\"},\\\"keys\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> [string]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys\\\",\\\"!doc\\\":\\\"Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\\\"},\\\"getOwnPropertyNames\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> [string]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\\\",\\\"!doc\\\":\\\"Returns an array of all properties (enumerable or not) found directly upon a given object.\\\"},\\\"seal\\\":{\\\"!type\\\":\\\"fn(obj: ?)\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/seal\\\",\\\"!doc\\\":\\\"Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\\\"},\\\"isSealed\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isSealed\\\",\\\"!doc\\\":\\\"Determine if an object is sealed.\\\"},\\\"freeze\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> !0\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/freeze\\\",\\\"!doc\\\":\\\"Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.\\\"},\\\"isFrozen\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isFrozen\\\",\\\"!doc\\\":\\\"Determine if an object is frozen.\\\"},\\\"preventExtensions\\\":{\\\"!type\\\":\\\"fn(obj: ?)\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\\\",\\\"!doc\\\":\\\"Prevents new properties from ever being added to an object.\\\"},\\\"isExtensible\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\\\",\\\"!doc\\\":\\\"The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).\\\"},\\\"assign\\\":{\\\"!type\\\":\\\"fn(target: ?, source: ?, source?: ?) -> !0\\\",\\\"!effects\\\":[\\\"copy !1 !0\\\",\\\"copy !2 !0\\\",\\\"copy !3 !0\\\"],\\\"!doc\\\":\\\"The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\\\"},\\\"getOwnPropertySymbols\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> !custom:getOwnPropertySymbols\\\",\\\"!doc\\\":\\\"The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\\\"},\\\"is\\\":{\\\"!type\\\":\\\"fn(value1: ?, value2: ?) -> bool\\\",\\\"!doc\\\":\\\"The Object.is() method determines whether two values are the same value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\\"},\\\"setPrototypeOf\\\":{\\\"!type\\\":\\\"fn(obj: ?, prototype: ?)\\\",\\\"!doc\\\":\\\"The Object.setPrototype() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\\\"},\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Object\\\",\\\"toString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toString\\\",\\\"!doc\\\":\\\"Returns a string representing the object.\\\"},\\\"toLocaleString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toLocaleString\\\",\\\"!doc\\\":\\\"Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\\\"},\\\"valueOf\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/valueOf\\\",\\\"!doc\\\":\\\"Returns the primitive value of the specified object\\\"},\\\"hasOwnProperty\\\":{\\\"!type\\\":\\\"fn(prop: string) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\\\",\\\"!doc\\\":\\\"Returns a boolean indicating whether the object has the specified property.\\\"},\\\"propertyIsEnumerable\\\":{\\\"!type\\\":\\\"fn(prop: string) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\\\",\\\"!doc\\\":\\\"Returns a Boolean indicating whether the specified property is enumerable.\\\"},\\\"isPrototypeOf\\\":{\\\"!type\\\":\\\"fn(obj: ?) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\\\",\\\"!doc\\\":\\\"Tests for an object in another object's prototype chain.\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object\\\",\\\"!doc\\\":\\\"Creates an object wrapper.\\\"},\\\"Function\\\":{\\\"!type\\\":\\\"fn(body: string) -> fn()\\\",\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Function\\\",\\\"apply\\\":{\\\"!type\\\":\\\"fn(this: ?, args: [?])\\\",\\\"!effects\\\":[\\\"call and return !this this=!0 !1.<i> !1.<i> !1.<i>\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply\\\",\\\"!doc\\\":\\\"Calls a function with a given this value and arguments provided as an array (or an array like object).\\\"},\\\"call\\\":{\\\"!type\\\":\\\"fn(this: ?, args?: ?) -> !this.!ret\\\",\\\"!effects\\\":[\\\"call and return !this this=!0 !1 !2 !3 !4\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call\\\",\\\"!doc\\\":\\\"Calls a function with a given this value and arguments provided individually.\\\"},\\\"bind\\\":{\\\"!type\\\":\\\"fn(this: ?, args?: ?) -> !custom:Function_bind\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind\\\",\\\"!doc\\\":\\\"Creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function was called.\\\"},\\\"prototype\\\":\\\"?\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function\\\",\\\"!doc\\\":\\\"Every function in JavaScript is actually a Function object.\\\"},\\\"Array\\\":{\\\"!type\\\":\\\"fn(size: number) -> !custom:Array_ctor\\\",\\\"isArray\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray\\\",\\\"!doc\\\":\\\"Returns true if an object is an array, false if it is not.\\\"},\\\"from\\\":{\\\"!type\\\":\\\"fn(arrayLike: ?, mapFn?: fn(elt: ?, i: number) -> ?, thisArg?: ?) -> [!0.<i>]\\\",\\\"!effects\\\":[\\\"call !1 this=!2 !0.<i> number\\\"],\\\"!doc\\\":\\\"The Array.from() method creates a new Array instance from an array-like or iterable object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\\\"},\\\"of\\\":{\\\"!type\\\":\\\"fn(elementN: ?) -> [!0]\\\",\\\"!doc\\\":\\\"The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\\\"},\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Array\\\",\\\"length\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/length\\\",\\\"!doc\\\":\\\"An unsigned, 32-bit integer that specifies the number of elements in an array.\\\"},\\\"concat\\\":{\\\"!type\\\":\\\"fn(other: [?]) -> !this\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/concat\\\",\\\"!doc\\\":\\\"Returns a new array comprised of this array joined with other array(s) and/or value(s).\\\"},\\\"join\\\":{\\\"!type\\\":\\\"fn(separator?: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/join\\\",\\\"!doc\\\":\\\"Joins all elements of an array into a string.\\\"},\\\"splice\\\":{\\\"!type\\\":\\\"fn(pos: number, amount: number, newelt?: ?) -> [?]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\\\",\\\"!doc\\\":\\\"Changes the content of an array, adding new elements while removing old elements.\\\"},\\\"pop\\\":{\\\"!type\\\":\\\"fn() -> !this.<i>\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/pop\\\",\\\"!doc\\\":\\\"Removes the last element from an array and returns that element.\\\"},\\\"push\\\":{\\\"!type\\\":\\\"fn(newelt: ?) -> number\\\",\\\"!effects\\\":[\\\"propagate !0 !this.<i>\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/push\\\",\\\"!doc\\\":\\\"Mutates an array by appending the given elements and returning the new length of the array.\\\"},\\\"shift\\\":{\\\"!type\\\":\\\"fn() -> !this.<i>\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/shift\\\",\\\"!doc\\\":\\\"Removes the first element from an array and returns that element. This method changes the length of the array.\\\"},\\\"unshift\\\":{\\\"!type\\\":\\\"fn(newelt: ?) -> number\\\",\\\"!effects\\\":[\\\"propagate !0 !this.<i>\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/unshift\\\",\\\"!doc\\\":\\\"Adds one or more elements to the beginning of an array and returns the new length of the array.\\\"},\\\"slice\\\":{\\\"!type\\\":\\\"fn(from?: number, to?: number) -> !this\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice\\\",\\\"!doc\\\":\\\"Returns a shallow copy of a portion of an array.\\\"},\\\"reverse\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/reverse\\\",\\\"!doc\\\":\\\"Reverses an array in place.  The first array element becomes the last and the last becomes the first.\\\"},\\\"sort\\\":{\\\"!type\\\":\\\"fn(compare?: fn(a: ?, b: ?) -> number)\\\",\\\"!effects\\\":[\\\"call !0 !this.<i> !this.<i>\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort\\\",\\\"!doc\\\":\\\"Sorts the elements of an array in place and returns the array.\\\"},\\\"indexOf\\\":{\\\"!type\\\":\\\"fn(elt: ?, from?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\\\",\\\"!doc\\\":\\\"Returns the first index at which a given element can be found in the array, or -1 if it is not present.\\\"},\\\"lastIndexOf\\\":{\\\"!type\\\":\\\"fn(elt: ?, from?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/lastIndexOf\\\",\\\"!doc\\\":\\\"Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.\\\"},\\\"every\\\":{\\\"!type\\\":\\\"fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> bool\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/every\\\",\\\"!doc\\\":\\\"Tests whether all elements in the array pass the test implemented by the provided function.\\\"},\\\"some\\\":{\\\"!type\\\":\\\"fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> bool\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/some\\\",\\\"!doc\\\":\\\"Tests whether some element in the array passes the test implemented by the provided function.\\\"},\\\"filter\\\":{\\\"!type\\\":\\\"fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> !this\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\\\",\\\"!doc\\\":\\\"Creates a new array with all elements that pass the test implemented by the provided function.\\\"},\\\"forEach\\\":{\\\"!type\\\":\\\"fn(f: fn(elt: ?, i: number, array: +Array), context?: ?)\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach\\\",\\\"!doc\\\":\\\"Executes a provided function once per array element.\\\"},\\\"map\\\":{\\\"!type\\\":\\\"fn(f: fn(elt: ?, i: number, array: +Array) -> ?, context?: ?) -> [!0.!ret]\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\\\",\\\"!doc\\\":\\\"Creates a new array with the results of calling a provided function on every element in this array.\\\"},\\\"reduce\\\":{\\\"!type\\\":\\\"fn(combine: fn(sum: ?, elt: ?, i: number, array: +Array) -> ?, init?: ?) -> !0.!ret\\\",\\\"!effects\\\":[\\\"call !0 !1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce\\\",\\\"!doc\\\":\\\"Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.\\\"},\\\"reduceRight\\\":{\\\"!type\\\":\\\"fn(combine: fn(sum: ?, elt: ?, i: number, array: +Array) -> ?, init?: ?) -> !0.!ret\\\",\\\"!effects\\\":[\\\"call !0 !1 !this.<i> number !this\\\"],\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/ReduceRight\\\",\\\"!doc\\\":\\\"Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\\\"},\\\"copyWithin\\\":{\\\"!type\\\":\\\"fn(target: number, start: number, end?: number) -> !this\\\",\\\"!doc\\\":\\\"The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\\\"},\\\"entries\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=[number, !this.<i>]]\\\",\\\"!doc\\\":\\\"The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\\\"},\\\"fill\\\":{\\\"!type\\\":\\\"fn(value: ?, start?: number, end?: number) -> !this\\\",\\\"!doc\\\":\\\"The fill() method fills all the elements of an array from a start index to an end index with a static value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\\\"},\\\"find\\\":{\\\"!type\\\":\\\"fn(callback: fn(element: ?, index: number, array: [?]) -> bool, thisArg?: ?) -> !this.<i>\\\",\\\"!effects\\\":[\\\"call !0 this=!2 !this.<i> number\\\"],\\\"!doc\\\":\\\"The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\\\"},\\\"findIndex\\\":{\\\"!type\\\":\\\"fn(callback: fn(element: ?, index: number, array: [?]), thisArg?: ?) -> number\\\",\\\"!effects\\\":[\\\"call !0 this=!2 !this.<i> number\\\"],\\\"!doc\\\":\\\"The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\\\"},\\\"keys\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=number]\\\",\\\"!doc\\\":\\\"The keys() method returns a new Array Iterator that contains the keys for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\\\"},\\\"values\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.<i>]\\\",\\\"!doc\\\":\\\"The values() method returns a new Array Iterator object that contains the values for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\\\"},\\\":Symbol.iterator\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.<i>]\\\",\\\"!doc\\\":\\\"Returns a new Array Iterator object that contains the values for each index in the array.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\\\"},\\\"includes\\\":{\\\"!type\\\":\\\"fn(value: ?, fromIndex?: number) -> bool\\\",\\\"!doc\\\":\\\"Determines whether an array includes a certain element, returning true or false as appropriate.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array\\\",\\\"!doc\\\":\\\"The JavaScript Array global object is a constructor for arrays, which are high-level, list-like objects.\\\"},\\\"String\\\":{\\\"!type\\\":\\\"fn(value: ?) -> string\\\",\\\"fromCharCode\\\":{\\\"!type\\\":\\\"fn(code: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode\\\",\\\"!doc\\\":\\\"Returns a string created by using the specified sequence of Unicode values.\\\"},\\\"fromCodePoint\\\":{\\\"!type\\\":\\\"fn(point: number, point?: number) -> string\\\",\\\"!doc\\\":\\\"The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\\\"},\\\"raw\\\":{\\\"!type\\\":\\\"fn(template: [string], substitutions: ?, templateString: ?) -> string\\\",\\\"!doc\\\":\\\"The static String.raw() method is a tag function of template strings, used to get the raw string form of template strings.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\\\"},\\\"prototype\\\":{\\\"!stdProto\\\":\\\"String\\\",\\\"length\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/length\\\",\\\"!doc\\\":\\\"Represents the length of a string.\\\"},\\\"<i>\\\":\\\"string\\\",\\\"charAt\\\":{\\\"!type\\\":\\\"fn(i: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charAt\\\",\\\"!doc\\\":\\\"Returns the specified character from a string.\\\"},\\\"charCodeAt\\\":{\\\"!type\\\":\\\"fn(i: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charCodeAt\\\",\\\"!doc\\\":\\\"Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).\\\"},\\\"indexOf\\\":{\\\"!type\\\":\\\"fn(char: string, from?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/indexOf\\\",\\\"!doc\\\":\\\"Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex,\\\\nreturns -1 if the value is not found.\\\"},\\\"lastIndexOf\\\":{\\\"!type\\\":\\\"fn(char: string, from?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/lastIndexOf\\\",\\\"!doc\\\":\\\"Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.\\\"},\\\"substring\\\":{\\\"!type\\\":\\\"fn(from: number, to?: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring\\\",\\\"!doc\\\":\\\"Returns a subset of a string between one index and another, or through the end of the string.\\\"},\\\"substr\\\":{\\\"!type\\\":\\\"fn(from: number, length?: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substr\\\",\\\"!doc\\\":\\\"Returns the characters in a string beginning at the specified location through the specified number of characters.\\\"},\\\"slice\\\":{\\\"!type\\\":\\\"fn(from: number, to?: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/slice\\\",\\\"!doc\\\":\\\"Extracts a section of a string and returns a new string.\\\"},\\\"padStart\\\":{\\\"!type\\\":\\\"fn(targetLength: number, padString?: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\\\",\\\"!doc\\\":\\\"Pads the current string with another string (repeated, if needed) so that the resulting string reaches the given length.\\\"},\\\"padEnd\\\":{\\\"!type\\\":\\\"fn(targetLength: number, padString?: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\\\",\\\"!doc\\\":\\\"pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.\\\"},\\\"trim\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim\\\",\\\"!doc\\\":\\\"Removes whitespace from both ends of the string.\\\"},\\\"trimStart\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\\\",\\\"!doc\\\":\\\"Removes whitespace from the beginning of a string. \\\"},\\\"trimLeft\\\":\\\"String.prototype.trimStart\\\",\\\"trimEnd\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\\\",\\\"!doc\\\":\\\"Removes whitespace from the end of a string.\\\"},\\\"trimRight\\\":\\\"String.prototype.trimEnd\\\",\\\"toUpperCase\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toUpperCase\\\",\\\"!doc\\\":\\\"Returns the calling string value converted to uppercase.\\\"},\\\"toLowerCase\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLowerCase\\\",\\\"!doc\\\":\\\"Returns the calling string value converted to lowercase.\\\"},\\\"toLocaleUpperCase\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\\\",\\\"!doc\\\":\\\"Returns the calling string value converted to upper case, according to any locale-specific case mappings.\\\"},\\\"toLocaleLowerCase\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\\\",\\\"!doc\\\":\\\"Returns the calling string value converted to lower case, according to any locale-specific case mappings.\\\"},\\\"split\\\":{\\\"!type\\\":\\\"fn(pattern?: string|+RegExp, limit?: number) -> [string]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split\\\",\\\"!doc\\\":\\\"Splits a String object into an array of strings by separating the string into substrings.\\\"},\\\"concat\\\":{\\\"!type\\\":\\\"fn(other: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/concat\\\",\\\"!doc\\\":\\\"Combines the text of two or more strings and returns a new string.\\\"},\\\"localeCompare\\\":{\\\"!type\\\":\\\"fn(other: string) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/localeCompare\\\",\\\"!doc\\\":\\\"Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\\\"},\\\"match\\\":{\\\"!type\\\":\\\"fn(pattern: +RegExp) -> [string]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match\\\",\\\"!doc\\\":\\\"Used to retrieve the matches when matching a string against a regular expression.\\\"},\\\"replace\\\":{\\\"!type\\\":\\\"fn(pattern: string|+RegExp, replacement: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace\\\",\\\"!doc\\\":\\\"Returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.\\\"},\\\"search\\\":{\\\"!type\\\":\\\"fn(pattern: +RegExp) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/search\\\",\\\"!doc\\\":\\\"Executes the search for a match between a regular expression and this String object.\\\"},\\\"codePointAt\\\":{\\\"!type\\\":\\\"fn(pos: number) -> number\\\",\\\"!doc\\\":\\\"The codePointAt() method returns a non-negative integer that is the UTF-16 encoded code point value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\\\"},\\\"endsWith\\\":{\\\"!type\\\":\\\"fn(searchString: string, position?: number) -> bool\\\",\\\"!doc\\\":\\\"The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\\\"},\\\"includes\\\":{\\\"!type\\\":\\\"fn(searchString: string, position?: number) -> bool\\\",\\\"!doc\\\":\\\"The includes() method determines whether one string may be found within another string, returning true or false as appropriate.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\\\"},\\\"normalize\\\":{\\\"!type\\\":\\\"fn(form: string) -> string\\\",\\\"!doc\\\":\\\"The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\\\"},\\\"repeat\\\":{\\\"!type\\\":\\\"fn(count: number) -> string\\\",\\\"!doc\\\":\\\"The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\\\"},\\\"startsWith\\\":{\\\"!type\\\":\\\"fn(searchString: string, position?: number) -> bool\\\",\\\"!doc\\\":\\\"The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\\\"},\\\":Symbol.iterator\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=string]\\\",\\\"!doc\\\":\\\"Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String\\\",\\\"!doc\\\":\\\"The String global object is a constructor for strings, or a sequence of characters.\\\"},\\\"Number\\\":{\\\"!type\\\":\\\"fn(value: ?) -> number\\\",\\\"MAX_VALUE\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\\\",\\\"!doc\\\":\\\"The maximum numeric value representable in JavaScript.\\\"},\\\"MIN_VALUE\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\\\",\\\"!doc\\\":\\\"The smallest positive numeric value representable in JavaScript.\\\"},\\\"POSITIVE_INFINITY\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\\\",\\\"!doc\\\":\\\"A value representing the positive Infinity value.\\\"},\\\"NEGATIVE_INFINITY\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\\\",\\\"!doc\\\":\\\"A value representing the negative Infinity value.\\\"},\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Number\\\",\\\"toString\\\":{\\\"!type\\\":\\\"fn(radix?: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toString\\\",\\\"!doc\\\":\\\"Returns a string representing the specified Number object\\\"},\\\"toFixed\\\":{\\\"!type\\\":\\\"fn(digits: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\\\",\\\"!doc\\\":\\\"Formats a number using fixed-point notation\\\"},\\\"toExponential\\\":{\\\"!type\\\":\\\"fn(digits: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toExponential\\\",\\\"!doc\\\":\\\"Returns a string representing the Number object in exponential notation\\\"},\\\"toPrecision\\\":{\\\"!type\\\":\\\"fn(digits: number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toPrecision\\\",\\\"!doc\\\":\\\"The toPrecision() method returns a string representing the number to the specified precision.\\\"}},\\\"EPSILON\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The Number.EPSILON property represents the difference between one and the smallest value greater than one that can be represented as a Number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\\\"},\\\"MAX_SAFE_INTEGER\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (253 - 1).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\\\"},\\\"MIN_SAFE_INTEGER\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(253 - 1)).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\\\"},\\\"isFinite\\\":{\\\"!type\\\":\\\"fn(testValue: ?) -> bool\\\",\\\"!doc\\\":\\\"The Number.isFinite() method determines whether the passed value is finite.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\\\"},\\\"isInteger\\\":{\\\"!type\\\":\\\"fn(testValue: ?) -> bool\\\",\\\"!doc\\\":\\\"The Number.isInteger() method determines whether the passed value is an integer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\\\"},\\\"isNaN\\\":{\\\"!type\\\":\\\"fn(testValue: ?) -> bool\\\",\\\"!doc\\\":\\\"The Number.isNaN() method determines whether the passed value is NaN. More robust version of the original global isNaN().\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\\\"},\\\"isSafeInteger\\\":{\\\"!type\\\":\\\"fn(testValue: ?) -> bool\\\",\\\"!doc\\\":\\\"The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\\\"},\\\"parseFloat\\\":{\\\"!type\\\":\\\"fn(string: string) -> number\\\",\\\"!doc\\\":\\\"The Number.parseFloat() method parses a string argument and returns a floating point number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\\\"},\\\"parseInt\\\":{\\\"!type\\\":\\\"fn(string: string, radix?: number) -> number\\\",\\\"!doc\\\":\\\"The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number\\\",\\\"!doc\\\":\\\"The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.\\\"},\\\"Boolean\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Boolean\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Boolean\\\",\\\"!doc\\\":\\\"The Boolean object is an object wrapper for a boolean value.\\\"},\\\"RegExp\\\":{\\\"!type\\\":\\\"fn(source: string, flags?: string)\\\",\\\"prototype\\\":{\\\"!stdProto\\\":\\\"RegExp\\\",\\\"exec\\\":{\\\"!type\\\":\\\"fn(input: string) -> [string]\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec\\\",\\\"!doc\\\":\\\"Executes a search for a match in a specified string. Returns a result array, or null.\\\"},\\\"test\\\":{\\\"!type\\\":\\\"fn(input: string) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/test\\\",\\\"!doc\\\":\\\"Executes the search for a match between a regular expression and a specified string. Returns true or false.\\\"},\\\"global\\\":{\\\"!type\\\":\\\"bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp\\\",\\\"!doc\\\":\\\"Creates a regular expression object for matching text with a pattern.\\\"},\\\"ignoreCase\\\":{\\\"!type\\\":\\\"bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp\\\",\\\"!doc\\\":\\\"Creates a regular expression object for matching text with a pattern.\\\"},\\\"multiline\\\":{\\\"!type\\\":\\\"bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/multiline\\\",\\\"!doc\\\":\\\"Reflects whether or not to search in strings across multiple lines.\\\"},\\\"source\\\":{\\\"!type\\\":\\\"string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/source\\\",\\\"!doc\\\":\\\"A read-only property that contains the text of the pattern, excluding the forward slashes.\\\"},\\\"lastIndex\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/lastIndex\\\",\\\"!doc\\\":\\\"A read/write integer property that specifies the index at which to start the next match.\\\"},\\\"flags\\\":{\\\"!type\\\":\\\"string\\\",\\\"!doc\\\":\\\"The flags property returns a string consisting of the flags of the current regular expression object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\\\"},\\\"sticky\\\":{\\\"!type\\\":\\\"bool\\\",\\\"!doc\\\":\\\"The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\\\"},\\\"unicode\\\":{\\\"!type\\\":\\\"bool\\\",\\\"!doc\\\":\\\"The 'u' flag enables various Unicode-related features.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp\\\",\\\"!doc\\\":\\\"Creates a regular expression object for matching text with a pattern.\\\"},\\\"Date\\\":{\\\"!type\\\":\\\"fn(ms: number)\\\",\\\"parse\\\":{\\\"!type\\\":\\\"fn(source: string) -> +Date\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse\\\",\\\"!doc\\\":\\\"Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\\\"},\\\"UTC\\\":{\\\"!type\\\":\\\"fn(year: number, month: number, date: number, hour?: number, min?: number, sec?: number, ms?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/UTC\\\",\\\"!doc\\\":\\\"Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.\\\"},\\\"now\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now\\\",\\\"!doc\\\":\\\"Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.\\\"},\\\"prototype\\\":{\\\"toUTCString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toUTCString\\\",\\\"!doc\\\":\\\"Converts a date to a string, using the universal time convention.\\\"},\\\"toISOString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString\\\",\\\"!doc\\\":\\\"JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format.\\\"},\\\"toDateString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toDateString\\\",\\\"!doc\\\":\\\"Returns the date portion of a Date object in human readable form in American English.\\\"},\\\"toGMTString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString\\\",\\\"!doc\\\":\\\"Returns a string representing the Date based on the GMT (UT) time zone.\\\"},\\\"toTimeString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toTimeString\\\",\\\"!doc\\\":\\\"Returns the time portion of a Date object in human readable form in American English.\\\"},\\\"toLocaleDateString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\\\",\\\"!doc\\\":\\\"Converts a date to a string, returning the \\\\\\\"date\\\\\\\" portion using the operating system's locale's conventions.\\\"},\\\"toLocaleFormat\\\":{\\\"!type\\\":\\\"fn(formatString: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\\\",\\\"!doc\\\":\\\"Converts a date to a string, using a format string.\\\"},\\\"toLocaleString\\\":{\\\"!type\\\":\\\"fn(locales?: string, options?: ?) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\\\",\\\"!doc\\\":\\\"Returns a string with a locality sensitive representation of this date.\\\"},\\\"toLocaleTimeString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\\\",\\\"!doc\\\":\\\"Converts a date to a string, returning the \\\\\\\"time\\\\\\\" portion using the current locale's conventions.\\\"},\\\"toSource\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource\\\",\\\"!doc\\\":\\\"A string representing the source code of the given Date object.\\\"},\\\"toString\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\\\",\\\"!doc\\\":\\\"A string representing the given date.\\\"},\\\"valueOf\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\\\",\\\"!doc\\\":\\\"Returns the primitive value of a Date object.\\\"},\\\"getTime\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTime\\\",\\\"!doc\\\":\\\"Returns the numeric value corresponding to the time for the specified date according to universal time.\\\"},\\\"getFullYear\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getFullYear\\\",\\\"!doc\\\":\\\"Returns the year of the specified date according to local time.\\\"},\\\"getYear\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getYear\\\",\\\"!doc\\\":\\\"Returns the year in the specified date according to local time.\\\"},\\\"getMonth\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMonth\\\",\\\"!doc\\\":\\\"Returns the month in the specified date according to local time.\\\"},\\\"getUTCMonth\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMonth\\\",\\\"!doc\\\":\\\"Returns the month of the specified date according to universal time.\\\"},\\\"getDate\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDate\\\",\\\"!doc\\\":\\\"Returns the day of the month for the specified date according to local time.\\\"},\\\"getUTCDate\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDate\\\",\\\"!doc\\\":\\\"Returns the day (date) of the month in the specified date according to universal time.\\\"},\\\"getDay\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDay\\\",\\\"!doc\\\":\\\"Returns the day of the week for the specified date according to local time.\\\"},\\\"getUTCDay\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDay\\\",\\\"!doc\\\":\\\"Returns the day of the week in the specified date according to universal time.\\\"},\\\"getUTCFullYear\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\\\",\\\"!doc\\\":\\\"The getUTCFullYear() method returns the year in the specified date according to universal time.\\\"},\\\"getHours\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getHours\\\",\\\"!doc\\\":\\\"Returns the hour for the specified date according to local time.\\\"},\\\"getUTCHours\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCHours\\\",\\\"!doc\\\":\\\"Returns the hours in the specified date according to universal time.\\\"},\\\"getMinutes\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMinutes\\\",\\\"!doc\\\":\\\"Returns the minutes in the specified date according to local time.\\\"},\\\"getUTCMinutes\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\\\",\\\"!doc\\\":\\\"Creates JavaScript Date instances which let you work with dates and times.\\\"},\\\"getSeconds\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getSeconds\\\",\\\"!doc\\\":\\\"Returns the seconds in the specified date according to local time.\\\"},\\\"getUTCSeconds\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\\\",\\\"!doc\\\":\\\"Returns the seconds in the specified date according to universal time.\\\"},\\\"getMilliseconds\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMilliseconds\\\",\\\"!doc\\\":\\\"Returns the milliseconds in the specified date according to local time.\\\"},\\\"getUTCMilliseconds\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\\\",\\\"!doc\\\":\\\"Returns the milliseconds in the specified date according to universal time.\\\"},\\\"getTimezoneOffset\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\\\",\\\"!doc\\\":\\\"Returns the time-zone offset from UTC, in minutes, for the current locale.\\\"},\\\"setTime\\\":{\\\"!type\\\":\\\"fn(date: +Date) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setTime\\\",\\\"!doc\\\":\\\"Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\\\"},\\\"setFullYear\\\":{\\\"!type\\\":\\\"fn(year: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setFullYear\\\",\\\"!doc\\\":\\\"Sets the full year for a specified date according to local time.\\\"},\\\"setUTCFullYear\\\":{\\\"!type\\\":\\\"fn(year: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\\\",\\\"!doc\\\":\\\"Sets the full year for a specified date according to universal time.\\\"},\\\"setYear\\\":{\\\"!type\\\":\\\"fn(yearValue: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\\\",\\\"!doc\\\":\\\"Sets the year (usually 2-3 digits) for a specified date according to local time.\\\"},\\\"setMonth\\\":{\\\"!type\\\":\\\"fn(month: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMonth\\\",\\\"!doc\\\":\\\"Set the month for a specified date according to local time.\\\"},\\\"setUTCMonth\\\":{\\\"!type\\\":\\\"fn(month: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMonth\\\",\\\"!doc\\\":\\\"Sets the month for a specified date according to universal time.\\\"},\\\"setDate\\\":{\\\"!type\\\":\\\"fn(day: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setDate\\\",\\\"!doc\\\":\\\"Sets the day of the month for a specified date according to local time.\\\"},\\\"setUTCDate\\\":{\\\"!type\\\":\\\"fn(day: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCDate\\\",\\\"!doc\\\":\\\"Sets the day of the month for a specified date according to universal time.\\\"},\\\"setHours\\\":{\\\"!type\\\":\\\"fn(hour: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setHours\\\",\\\"!doc\\\":\\\"Sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.\\\"},\\\"setUTCHours\\\":{\\\"!type\\\":\\\"fn(hour: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCHours\\\",\\\"!doc\\\":\\\"Sets the hour for a specified date according to universal time.\\\"},\\\"setMinutes\\\":{\\\"!type\\\":\\\"fn(min: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMinutes\\\",\\\"!doc\\\":\\\"Sets the minutes for a specified date according to local time.\\\"},\\\"setUTCMinutes\\\":{\\\"!type\\\":\\\"fn(min: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\\\",\\\"!doc\\\":\\\"Sets the minutes for a specified date according to universal time.\\\"},\\\"setSeconds\\\":{\\\"!type\\\":\\\"fn(sec: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setSeconds\\\",\\\"!doc\\\":\\\"Sets the seconds for a specified date according to local time.\\\"},\\\"setUTCSeconds\\\":{\\\"!type\\\":\\\"fn(sec: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\\\",\\\"!doc\\\":\\\"Sets the seconds for a specified date according to universal time.\\\"},\\\"setMilliseconds\\\":{\\\"!type\\\":\\\"fn(ms: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMilliseconds\\\",\\\"!doc\\\":\\\"Sets the milliseconds for a specified date according to local time.\\\"},\\\"setUTCMilliseconds\\\":{\\\"!type\\\":\\\"fn(ms: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\\\",\\\"!doc\\\":\\\"Sets the milliseconds for a specified date according to universal time.\\\"},\\\"toJSON\\\":{\\\"!type\\\":\\\"fn() -> string\\\",\\\"!doc\\\":\\\"Returns a string (using toISOString()) representing the Date object's value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\\\",\\\"!doc\\\":\\\"Creates JavaScript Date instances which let you work with dates and times.\\\"},\\\"Error\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":{\\\"name\\\":{\\\"!type\\\":\\\"string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/name\\\",\\\"!doc\\\":\\\"A name for the type of error.\\\"},\\\"message\\\":{\\\"!type\\\":\\\"string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/message\\\",\\\"!doc\\\":\\\"A human-readable description of the error.\\\"}},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error\\\",\\\"!doc\\\":\\\"Creates an error object.\\\"},\\\"SyntaxError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/SyntaxError\\\",\\\"!doc\\\":\\\"Represents an error when trying to interpret syntactically invalid code.\\\"},\\\"ReferenceError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/ReferenceError\\\",\\\"!doc\\\":\\\"Represents an error when a non-existent variable is referenced.\\\"},\\\"URIError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/URIError\\\",\\\"!doc\\\":\\\"Represents an error when a malformed URI is encountered.\\\"},\\\"EvalError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/EvalError\\\",\\\"!doc\\\":\\\"Represents an error regarding the eval function.\\\"},\\\"RangeError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RangeError\\\",\\\"!doc\\\":\\\"Represents an error when a number is not within the correct range allowed.\\\"},\\\"TypeError\\\":{\\\"!type\\\":\\\"fn(message: string)\\\",\\\"prototype\\\":\\\"Error.prototype\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/TypeError\\\",\\\"!doc\\\":\\\"Represents an error an error when a value is not of the expected type.\\\"},\\\"parseInt\\\":{\\\"!type\\\":\\\"fn(string: string, radix?: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseInt\\\",\\\"!doc\\\":\\\"Parses a string argument and returns an integer of the specified radix or base.\\\"},\\\"parseFloat\\\":{\\\"!type\\\":\\\"fn(string: string) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseFloat\\\",\\\"!doc\\\":\\\"Parses a string argument and returns a floating point number.\\\"},\\\"isNaN\\\":{\\\"!type\\\":\\\"fn(value: number) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isNaN\\\",\\\"!doc\\\":\\\"Determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in ECMAScript 6 Number.isNaN.\\\"},\\\"isFinite\\\":{\\\"!type\\\":\\\"fn(value: number) -> bool\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isFinite\\\",\\\"!doc\\\":\\\"Determines whether the passed value is a finite number.\\\"},\\\"eval\\\":{\\\"!type\\\":\\\"fn(code: string) -> ?\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval\\\",\\\"!doc\\\":\\\"Evaluates JavaScript code represented as a string.\\\"},\\\"encodeURI\\\":{\\\"!type\\\":\\\"fn(uri: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURI\\\",\\\"!doc\\\":\\\"Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \\\\\\\"surrogate\\\\\\\" characters).\\\"},\\\"encodeURIComponent\\\":{\\\"!type\\\":\\\"fn(uri: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\\\",\\\"!doc\\\":\\\"Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \\\\\\\"surrogate\\\\\\\" characters).\\\"},\\\"decodeURI\\\":{\\\"!type\\\":\\\"fn(uri: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURI\\\",\\\"!doc\\\":\\\"Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.\\\"},\\\"decodeURIComponent\\\":{\\\"!type\\\":\\\"fn(uri: string) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent\\\",\\\"!doc\\\":\\\"Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\\\"},\\\"Math\\\":{\\\"E\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/E\\\",\\\"!doc\\\":\\\"The base of natural logarithms, e, approximately 2.718.\\\"},\\\"LN2\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN2\\\",\\\"!doc\\\":\\\"The natural logarithm of 2, approximately 0.693.\\\"},\\\"LN10\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN10\\\",\\\"!doc\\\":\\\"The natural logarithm of 10, approximately 2.302.\\\"},\\\"LOG2E\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG2E\\\",\\\"!doc\\\":\\\"The base 2 logarithm of E (approximately 1.442).\\\"},\\\"LOG10E\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG10E\\\",\\\"!doc\\\":\\\"The base 10 logarithm of E (approximately 0.434).\\\"},\\\"SQRT1_2\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT1_2\\\",\\\"!doc\\\":\\\"The square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.\\\"},\\\"SQRT2\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT2\\\",\\\"!doc\\\":\\\"The square root of 2, approximately 1.414.\\\"},\\\"PI\\\":{\\\"!type\\\":\\\"number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/PI\\\",\\\"!doc\\\":\\\"The ratio of the circumference of a circle to its diameter, approximately 3.14159.\\\"},\\\"abs\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/abs\\\",\\\"!doc\\\":\\\"Returns the absolute value of a number.\\\"},\\\"cos\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/cos\\\",\\\"!doc\\\":\\\"Returns the cosine of a number.\\\"},\\\"sin\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sin\\\",\\\"!doc\\\":\\\"Returns the sine of a number.\\\"},\\\"tan\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/tan\\\",\\\"!doc\\\":\\\"Returns the tangent of a number.\\\"},\\\"acos\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/acos\\\",\\\"!doc\\\":\\\"Returns the arccosine (in radians) of a number.\\\"},\\\"asin\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/asin\\\",\\\"!doc\\\":\\\"Returns the arcsine (in radians) of a number.\\\"},\\\"atan\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan\\\",\\\"!doc\\\":\\\"Returns the arctangent (in radians) of a number.\\\"},\\\"atan2\\\":{\\\"!type\\\":\\\"fn(y: number, x: number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan2\\\",\\\"!doc\\\":\\\"Returns the arctangent of the quotient of its arguments.\\\"},\\\"ceil\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/ceil\\\",\\\"!doc\\\":\\\"Returns the smallest integer greater than or equal to a number.\\\"},\\\"floor\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/floor\\\",\\\"!doc\\\":\\\"Returns the largest integer less than or equal to a number.\\\"},\\\"round\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/round\\\",\\\"!doc\\\":\\\"Returns the value of a number rounded to the nearest integer.\\\"},\\\"exp\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/exp\\\",\\\"!doc\\\":\\\"Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\\\"},\\\"log\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/log\\\",\\\"!doc\\\":\\\"Returns the natural logarithm (base E) of a number.\\\"},\\\"sqrt\\\":{\\\"!type\\\":\\\"fn(number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sqrt\\\",\\\"!doc\\\":\\\"Returns the square root of a number.\\\"},\\\"pow\\\":{\\\"!type\\\":\\\"fn(number, number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/pow\\\",\\\"!doc\\\":\\\"Returns base to the exponent power, that is, baseexponent.\\\"},\\\"max\\\":{\\\"!type\\\":\\\"fn(number, number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/max\\\",\\\"!doc\\\":\\\"Returns the largest of zero or more numbers.\\\"},\\\"min\\\":{\\\"!type\\\":\\\"fn(number, number) -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/min\\\",\\\"!doc\\\":\\\"Returns the smallest of zero or more numbers.\\\"},\\\"random\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random\\\",\\\"!doc\\\":\\\"Returns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range.\\\"},\\\"acosh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.acosh() function returns the hyperbolic arc-cosine of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\\\"},\\\"asinh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.asinh() function returns the hyperbolic arcsine of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\\\"},\\\"atanh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.atanh() function returns the hyperbolic arctangent of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\\\"},\\\"cbrt\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.cbrt() function returns the cube root of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\\\"},\\\"clz32\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\\\"},\\\"cosh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\\\"},\\\"expm1\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\\\"},\\\"fround\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.fround() function returns the nearest single precision float representation of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\\\"},\\\"hypot\\\":{\\\"!type\\\":\\\"fn(value: number) -> number\\\",\\\"!doc\\\":\\\"The Math.hypot() function returns the square root of the sum of squares of its arguments.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\\\"},\\\"imul\\\":{\\\"!type\\\":\\\"fn(a: number, b: number) -> number\\\",\\\"!doc\\\":\\\"The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\\\"},\\\"log10\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.log10() function returns the base 10 logarithm of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\\\"},\\\"log1p\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.log1p() function returns the natural logarithm (base e) of 1 + a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\\\"},\\\"log2\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.log2() function returns the base 2 logarithm of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\\\"},\\\"sign\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\\\"},\\\"sinh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\\\"},\\\"tanh\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.tanh() function returns the hyperbolic tangent of a number.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\\\"},\\\"trunc\\\":{\\\"!type\\\":\\\"fn(x: number) -> number\\\",\\\"!doc\\\":\\\"The Math.trunc() function returns the integral part of a number by removing any fractional digits. It does not round any numbers. The function can be expressed with the floor() and ceil() function:\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math\\\",\\\"!doc\\\":\\\"A built-in object that has properties and methods for mathematical constants and functions.\\\"},\\\"JSON\\\":{\\\"parse\\\":{\\\"!type\\\":\\\"fn(json: string, reviver?: fn(key: string, value: ?) -> ?) -> ?\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse\\\",\\\"!doc\\\":\\\"Parse a string as JSON, optionally transforming the value produced by parsing.\\\"},\\\"stringify\\\":{\\\"!type\\\":\\\"fn(value: ?, replacer?: fn(key: string, value: ?) -> ?, space?: string|number) -> string\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify\\\",\\\"!doc\\\":\\\"Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.\\\"},\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/JSON\\\",\\\"!doc\\\":\\\"JSON (JavaScript Object Notation) is a data-interchange format.  It closely resembles a subset of JavaScript syntax, although it is not a strict subset. (See JSON in the JavaScript Reference for full details.)  It is useful when writing any kind of JavaScript-based application, including websites and browser extensions.  For example, you might store user information in JSON format in a cookie, or you might store extension preferences in JSON in a string-valued browser preference.\\\"},\\\"ArrayBuffer\\\":{\\\"!type\\\":\\\"fn(length: number)\\\",\\\"!doc\\\":\\\"The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\\\",\\\"isView\\\":{\\\"!type\\\":\\\"fn(arg: +ArrayBuffer) -> bool\\\",\\\"!doc\\\":\\\"The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\\\"},\\\"prototype\\\":{\\\"byteLength\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The byteLength accessor property represents the length of an ArrayBuffer in bytes.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\\\"},\\\"slice\\\":{\\\"!type\\\":\\\"fn(begin: number, end?: number) -> +ArrayBuffer\\\",\\\"!doc\\\":\\\"The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\\\"}}},\\\"DataView\\\":{\\\"!type\\\":\\\"fn(buffer: +ArrayBuffer, byteOffset?: number, byteLength?: number)\\\",\\\"!doc\\\":\\\"The DataView view provides a low-level interface for reading data from and writing it to an ArrayBuffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\\\",\\\"prototype\\\":{\\\"buffer\\\":{\\\"!type\\\":\\\"+ArrayBuffer\\\",\\\"!doc\\\":\\\"The buffer accessor property represents the ArrayBuffer referenced by the DataView at construction time.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\\\"},\\\"byteLength\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\\\"},\\\"byteOffset\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\\\"},\\\"getFloat32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getFloat32() method gets a signed 32-bit integer (float) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\\\"},\\\"getFloat64\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\\\"},\\\"getInt16\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\\\"},\\\"getInt32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\\\"},\\\"getInt8\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\\\"},\\\"getUint16\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\\\"},\\\"getUint32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, littleEndian?: bool) -> number\\\",\\\"!doc\\\":\\\"The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\\\"},\\\"getUint8\\\":{\\\"!type\\\":\\\"fn(byteOffset: number) -> number\\\",\\\"!doc\\\":\\\"The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\\\"},\\\"setFloat32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setFloat32() method stores a signed 32-bit integer (float) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\\\"},\\\"setFloat64\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setFloat64() method stores a signed 64-bit integer (double) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\\\"},\\\"setInt16\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\\\"},\\\"setInt32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\\\"},\\\"setInt8\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number)\\\",\\\"!doc\\\":\\\"The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\\\"},\\\"setUint16\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\\\"},\\\"setUint32\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number, littleEndian?: bool)\\\",\\\"!doc\\\":\\\"The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\\\"},\\\"setUint8\\\":{\\\"!type\\\":\\\"fn(byteOffset: number, value: number)\\\",\\\"!doc\\\":\\\"The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\\\"}}},\\\"Float32Array\\\":\\\"TypedArray\\\",\\\"Float64Array\\\":\\\"TypedArray\\\",\\\"Int16Array\\\":\\\"TypedArray\\\",\\\"Int32Array\\\":\\\"TypedArray\\\",\\\"Int8Array\\\":\\\"TypedArray\\\",\\\"Map\\\":{\\\"!type\\\":\\\"fn(iterable?: [?])\\\",\\\"!doc\\\":\\\"The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\\\",\\\"prototype\\\":{\\\"clear\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"!doc\\\":\\\"The clear() method removes all elements from a Map object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\\\"},\\\"delete\\\":{\\\"!type\\\":\\\"fn(key: ?)\\\",\\\"!doc\\\":\\\"The delete() method removes the specified element from a Map object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\\\"},\\\"entries\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=[!this.:key, !this.:value]]\\\",\\\"!doc\\\":\\\"The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\\\"},\\\"forEach\\\":{\\\"!type\\\":\\\"fn(callback: fn(value: ?, key: ?, map: +Map), thisArg?: ?)\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.:value !this.:key !this\\\"],\\\"!doc\\\":\\\"The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\\\"},\\\"get\\\":{\\\"!type\\\":\\\"fn(key: ?) -> !this.:value\\\",\\\"!doc\\\":\\\"The get() method returns a specified element from a Map object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\\\"},\\\"has\\\":{\\\"!type\\\":\\\"fn(key: ?) -> bool\\\",\\\"!doc\\\":\\\"The has() method returns a boolean indicating whether an element with the specified key exists or not.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\\\"},\\\"keys\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.:key]\\\",\\\"!doc\\\":\\\"The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\\\"},\\\"set\\\":{\\\"!type\\\":\\\"fn(key: ?, value: ?) -> !this\\\",\\\"!effects\\\":[\\\"propagate !0 !this.:key\\\",\\\"propagate !1 !this.:value\\\"],\\\"!doc\\\":\\\"The set() method adds a new element with a specified key and value to a Map object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\\\"},\\\"size\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The size accessor property returns the number of elements in a Map object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\\\"},\\\"values\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.:value]\\\",\\\"!doc\\\":\\\"The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\\\"},\\\":Symbol.iterator\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=[!this.:key, !this.:value]]\\\",\\\"!doc\\\":\\\"Returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\\\"}}},\\\"Promise\\\":{\\\"!type\\\":\\\"fn(executor: fn(resolve: fn(value: ?), reject: fn(reason: ?))) -> !custom:Promise_ctor\\\",\\\"!doc\\\":\\\"The Promise object is used for deferred and asynchronous computations. A Promise is in one of the three states:\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\",\\\"all\\\":{\\\"!type\\\":\\\"fn(iterable: [+Promise]) -> +Promise[:t=[!0.<i>.:t]]\\\",\\\"!doc\\\":\\\"The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\\\"},\\\"race\\\":{\\\"!type\\\":\\\"fn(iterable: [+Promise]) -> !0.<i>\\\",\\\"!doc\\\":\\\"The Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\\\"},\\\"reject\\\":\\\"Promise_reject\\\",\\\"resolve\\\":{\\\"!type\\\":\\\"fn(value: ?) -> !custom:Promise_resolve\\\",\\\"!doc\\\":\\\"The Promise.resolve(value) method returns a Promise object that is resolved with the given value. If the value is a thenable (i.e. has a then method), the returned promise will 'follow' that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\\\"},\\\"prototype\\\":\\\"Promise.prototype\\\"},\\\"Proxy\\\":{\\\"!type\\\":\\\"fn(target: ?, handler: Proxy_handler)\\\",\\\"!doc\\\":\\\"The Proxy object is used to define the custom behavior in JavaScript fundamental operation (e.g. property lookup, assignment, enumeration, function invocation, etc).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\\",\\\"revocable\\\":{\\\"!type\\\":\\\"fn(target: ?, handler: Proxy_handler) -> Proxy_revocable\\\",\\\"!doc\\\":\\\"The Proxy.revocable() method is used to create a revocable Proxy object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\\\"}},\\\"Reflect\\\":{\\\"!doc\\\":\\\"Reflect is a built-in object that provides methods for interceptable JavaScript operations.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\\\",\\\"apply\\\":{\\\"!type\\\":\\\"fn(target: fn(), thisArg?: ?, argumentList?: [?]) -> !0.!ret\\\",\\\"!doc\\\":\\\"Calls a target function with arguments as specified.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\\\"},\\\"construct\\\":{\\\"!type\\\":\\\"fn(target: fn(), argumentList?: [?]) -> ?\\\",\\\"!doc\\\":\\\"Acts like the new operator as a function. It is equivalent to calling new target(...args).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\\\"},\\\"defineProperty\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string, descriptor: propertyDescriptor) -> bool\\\",\\\"!doc\\\":\\\"The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\\\"},\\\"deleteProperty\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string) -> bool\\\",\\\"!doc\\\":\\\"Works like the delete operator as a function.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\\\"},\\\"enumerate\\\":{\\\"!type\\\":\\\"fn(target: ?) -> +iter[:t=string]\\\",\\\"!doc\\\":\\\"Returns an iterator with the enumerable own and inherited properties of the target object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/enumerate\\\"},\\\"get\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string) -> ?\\\",\\\"!doc\\\":\\\"Gets a property from an object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\\\"},\\\"getOwnPropertyDescriptor\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string) -> ?\\\",\\\"!doc\\\":\\\"Returns a property descriptor of the given property if it exists on the object, undefined otherwise.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\\\"},\\\"getPrototypeOf\\\":{\\\"!type\\\":\\\"fn(target: ?) -> ?\\\",\\\"!doc\\\":\\\"Returns the prototype of the specified object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\\\"},\\\"has\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string) -> bool\\\",\\\"!doc\\\":\\\"The static Reflect.has() method works like the in operator as a function.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\\\"},\\\"isExtensible\\\":{\\\"!type\\\":\\\"fn(target: ?) -> bool\\\",\\\"!doc\\\":\\\"Determines if an object is extensible (whether it can have new properties added to it).\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible\\\"},\\\"ownKeys\\\":{\\\"!type\\\":\\\"fn(target: ?) -> [string]\\\",\\\"!doc\\\":\\\"Returns an array of the target object's own property keys.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\\\"},\\\"preventExtensions\\\":{\\\"!type\\\":\\\"fn(target: ?) -> bool\\\",\\\"!doc\\\":\\\"Prevents new properties from ever being added to an object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\\\"},\\\"set\\\":{\\\"!type\\\":\\\"fn(target: ?, property: string, value: ?) -> bool\\\",\\\"!doc\\\":\\\"Set a property on an object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\\\"},\\\"setPrototypeOf\\\":{\\\"!type\\\":\\\"fn(target: ?, prototype: ?) -> bool\\\",\\\"!doc\\\":\\\"Sets the prototype of a specified object to another object or to null.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\\\"}},\\\"Set\\\":{\\\"!type\\\":\\\"fn(iterable?: [?])\\\",\\\"!doc\\\":\\\"The Set object lets you store unique values of any type, whether primitive values or object references.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\\\",\\\"prototype\\\":{\\\"add\\\":{\\\"!type\\\":\\\"fn(value: ?) -> !this\\\",\\\"!effects\\\":[\\\"propagate !0 !this.:t\\\"],\\\"!doc\\\":\\\"The add() method appends a new element with a specified value to the end of a Set object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\\\"},\\\"clear\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"!doc\\\":\\\"The clear() method removes all elements from a Set object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\\\"},\\\"delete\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"!doc\\\":\\\"The delete() method removes the specified element from a Set object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\\\"},\\\"entries\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=[!this.:t]]\\\",\\\"!doc\\\":\\\"The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\\\"},\\\"forEach\\\":{\\\"!type\\\":\\\"fn(callback: fn(value: ?, value2: ?, set: +Set), thisArg?: ?)\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.:t number !this\\\"],\\\"!doc\\\":\\\"The forEach() method executes a provided function once per each value in the Set object, in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\\\"},\\\"has\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"!doc\\\":\\\"The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\\\"},\\\"keys\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.:t]\\\",\\\"!doc\\\":\\\"The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\\\"},\\\"size\\\":{\\\"!type\\\":\\\"number\\\",\\\"!doc\\\":\\\"The size accessor property returns the number of elements in a Set object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\\\"},\\\"values\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.:t]\\\",\\\"!doc\\\":\\\"The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\\\"},\\\":Symbol.iterator\\\":{\\\"!type\\\":\\\"fn() -> +iter[:t=!this.:t]\\\",\\\"!doc\\\":\\\"Returns a new Iterator object that contains the values for each element in the Set object in insertion order.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\\\"}}},\\\"Symbol\\\":{\\\"!type\\\":\\\"fn(description?: string) -> !custom:getSymbol\\\",\\\"!doc\\\":\\\"A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\\\",\\\"for\\\":{\\\"!type\\\":\\\"fn(key: string) -> !custom:getSymbol\\\",\\\"!doc\\\":\\\"The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\\\"},\\\"keyFor\\\":{\\\"!type\\\":\\\"fn(sym: +Symbol) -> string\\\",\\\"!doc\\\":\\\"The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\\\"},\\\"hasInstance\\\":\\\":Symbol.hasInstance\\\",\\\"isConcatSpreadable\\\":\\\":Symbol.isConcatSpreadable\\\",\\\"iterator\\\":\\\":Symbol.iterator\\\",\\\"asyncIterator\\\":\\\":Symbol.asyncIterator\\\",\\\"match\\\":\\\":Symbol.match\\\",\\\"replace\\\":\\\":Symbol.replace\\\",\\\"search\\\":\\\":Symbol.search\\\",\\\"species\\\":\\\":Symbol.species\\\",\\\"split\\\":\\\":Symbol.split\\\",\\\"toStringTag\\\":\\\":Symbol.toStringTag\\\",\\\"unscopables\\\":\\\":Symbol.unscopables\\\",\\\"prototype\\\":{\\\"!stdProto\\\":\\\"Symbol\\\"}},\\\"Uint16Array\\\":\\\"TypedArray\\\",\\\"Uint32Array\\\":\\\"TypedArray\\\",\\\"Uint8Array\\\":\\\"TypedArray\\\",\\\"Uint8ClampedArray\\\":\\\"TypedArray\\\",\\\"WeakMap\\\":{\\\"!type\\\":\\\"fn(iterable?: [?])\\\",\\\"!doc\\\":\\\"The WeakMap object is a collection of key/value pairs in which the keys are objects and the values can be arbitrary values.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\\\",\\\"prototype\\\":{\\\"delete\\\":{\\\"!type\\\":\\\"fn(key: ?) -> bool\\\",\\\"!doc\\\":\\\"The delete() method removes the specified element from a WeakMap object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\\\"},\\\"get\\\":{\\\"!type\\\":\\\"fn(key: ?) -> !this.:value\\\",\\\"!doc\\\":\\\"The get() method returns a specified element from a WeakMap object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\\\"},\\\"has\\\":{\\\"!type\\\":\\\"fn(key: ?) -> bool\\\",\\\"!doc\\\":\\\"The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\\\"},\\\"set\\\":{\\\"!type\\\":\\\"fn(key: ?, value: ?)\\\",\\\"!effects\\\":[\\\"propagate !0 !this.:key\\\",\\\"propagate !1 !this.:value\\\"],\\\"!doc\\\":\\\"The set() method adds a new element with a specified key and value to a WeakMap object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\\\"}}},\\\"WeakSet\\\":{\\\"!type\\\":\\\"fn(iterable?: [?])\\\",\\\"!doc\\\":\\\"The WeakSet object lets you store weakly held objects in a collection.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\\\",\\\"prototype\\\":{\\\"add\\\":{\\\"!type\\\":\\\"fn(value: ?)\\\",\\\"!doc\\\":\\\"The add() method appends a new object to the end of a WeakSet object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add\\\"},\\\"delete\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"!doc\\\":\\\"The delete() method removes the specified element from a WeakSet object.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\\\"},\\\"has\\\":{\\\"!type\\\":\\\"fn(value: ?) -> bool\\\",\\\"!doc\\\":\\\"The has() method returns a boolean indicating whether an object exists in a WeakSet or not.\\\",\\\"!url\\\":\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has\\\"}}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGVybi9kZWZzL2VjbWFzY3JpcHQuanNvbi5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/tern/defs/ecmascript.json\n");

/***/ }),

/***/ "./node_modules/tern/lib/comment.js":
/*!******************************************!*\
  !*** ./node_modules/tern/lib/comment.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(mod) {\n  if (true) // CommonJS\n    return mod(exports);\n  if (true) // AMD\n    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod(tern.comment || (tern.comment = {}));\n})(function(exports) {\n  function isSpace(ch) {\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160;\n  }\n\n  function onOwnLine(text, pos) {\n    for (; pos > 0; --pos) {\n      var ch = text.charCodeAt(pos - 1);\n      if (ch == 10) break;\n      if (!isSpace(ch)) return false;\n    }\n    return true;\n  }\n\n  // Gather comments directly before a function\n  exports.commentsBefore = function(text, pos) {\n    var found = null, emptyLines = 0, topIsLineComment;\n    out: while (pos > 0) {\n      var prev = text.charCodeAt(pos - 1);\n      if (prev == 10) {\n        for (var scan = --pos, sawNonWS = false; scan > 0; --scan) {\n          prev = text.charCodeAt(scan - 1);\n          if (prev == 47 && text.charCodeAt(scan - 2) == 47) {\n            if (!onOwnLine(text, scan - 2)) break out;\n            var content = text.slice(scan, pos);\n            if (!emptyLines && topIsLineComment) found[0] = content + \"\\n\" + found[0];\n            else (found || (found = [])).unshift(content);\n            topIsLineComment = true;\n            emptyLines = 0;\n            pos = scan - 2;\n            break;\n          } else if (prev == 10) {\n            if (!sawNonWS && ++emptyLines > 1) break out;\n            break;\n          } else if (!sawNonWS && !isSpace(prev)) {\n            sawNonWS = true;\n          }\n        }\n      } else if (prev == 47 && text.charCodeAt(pos - 2) == 42) {\n        for (var scan = pos - 2; scan > 1; --scan) {\n          if (text.charCodeAt(scan - 1) == 42 && text.charCodeAt(scan - 2) == 47) {\n            if (!onOwnLine(text, scan - 2)) break out;\n            (found || (found = [])).unshift(text.slice(scan, pos - 2));\n            topIsLineComment = false;\n            emptyLines = 0;\n            break;\n          }\n        }\n        pos = scan - 2;\n      } else if (isSpace(prev)) {\n        --pos;\n      } else {\n        break;\n      }\n    }\n    return found;\n  };\n\n  exports.commentAfter = function(text, pos) {\n    while (pos < text.length) {\n      var next = text.charCodeAt(pos);\n      if (next == 47) {\n        var after = text.charCodeAt(pos + 1), end;\n        if (after == 47) // line comment\n          end = text.indexOf(\"\\n\", pos + 2);\n        else if (after == 42) // block comment\n          end = text.indexOf(\"*/\", pos + 2);\n        else\n          return;\n        return text.slice(pos + 2, end < 0 ? text.length : end);\n      } else if (isSpace(next)) {\n        ++pos;\n      }\n    }\n  };\n\n  exports.ensureCommentsBefore = function(text, node) {\n    if (node.hasOwnProperty(\"commentsBefore\")) return node.commentsBefore;\n    return node.commentsBefore = exports.commentsBefore(text, node.start);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGVybi9saWIvY29tbWVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90ZXJuL2xpYi9jb21tZW50LmpzPzFjNDgiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgcmV0dXJuIG1vZChleHBvcnRzKTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIHJldHVybiBkZWZpbmUoW1wiZXhwb3J0c1wiXSwgbW9kKTtcbiAgbW9kKHRlcm4uY29tbWVudCB8fCAodGVybi5jb21tZW50ID0ge30pKTtcbn0pKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgZnVuY3Rpb24gaXNTcGFjZShjaCkge1xuICAgIHJldHVybiAoY2ggPCAxNCAmJiBjaCA+IDgpIHx8IGNoID09PSAzMiB8fCBjaCA9PT0gMTYwO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Pd25MaW5lKHRleHQsIHBvcykge1xuICAgIGZvciAoOyBwb3MgPiAwOyAtLXBvcykge1xuICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQ29kZUF0KHBvcyAtIDEpO1xuICAgICAgaWYgKGNoID09IDEwKSBicmVhaztcbiAgICAgIGlmICghaXNTcGFjZShjaCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBHYXRoZXIgY29tbWVudHMgZGlyZWN0bHkgYmVmb3JlIGEgZnVuY3Rpb25cbiAgZXhwb3J0cy5jb21tZW50c0JlZm9yZSA9IGZ1bmN0aW9uKHRleHQsIHBvcykge1xuICAgIHZhciBmb3VuZCA9IG51bGwsIGVtcHR5TGluZXMgPSAwLCB0b3BJc0xpbmVDb21tZW50O1xuICAgIG91dDogd2hpbGUgKHBvcyA+IDApIHtcbiAgICAgIHZhciBwcmV2ID0gdGV4dC5jaGFyQ29kZUF0KHBvcyAtIDEpO1xuICAgICAgaWYgKHByZXYgPT0gMTApIHtcbiAgICAgICAgZm9yICh2YXIgc2NhbiA9IC0tcG9zLCBzYXdOb25XUyA9IGZhbHNlOyBzY2FuID4gMDsgLS1zY2FuKSB7XG4gICAgICAgICAgcHJldiA9IHRleHQuY2hhckNvZGVBdChzY2FuIC0gMSk7XG4gICAgICAgICAgaWYgKHByZXYgPT0gNDcgJiYgdGV4dC5jaGFyQ29kZUF0KHNjYW4gLSAyKSA9PSA0Nykge1xuICAgICAgICAgICAgaWYgKCFvbk93bkxpbmUodGV4dCwgc2NhbiAtIDIpKSBicmVhayBvdXQ7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHRleHQuc2xpY2Uoc2NhbiwgcG9zKTtcbiAgICAgICAgICAgIGlmICghZW1wdHlMaW5lcyAmJiB0b3BJc0xpbmVDb21tZW50KSBmb3VuZFswXSA9IGNvbnRlbnQgKyBcIlxcblwiICsgZm91bmRbMF07XG4gICAgICAgICAgICBlbHNlIChmb3VuZCB8fCAoZm91bmQgPSBbXSkpLnVuc2hpZnQoY29udGVudCk7XG4gICAgICAgICAgICB0b3BJc0xpbmVDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGVtcHR5TGluZXMgPSAwO1xuICAgICAgICAgICAgcG9zID0gc2NhbiAtIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKHByZXYgPT0gMTApIHtcbiAgICAgICAgICAgIGlmICghc2F3Tm9uV1MgJiYgKytlbXB0eUxpbmVzID4gMSkgYnJlYWsgb3V0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICghc2F3Tm9uV1MgJiYgIWlzU3BhY2UocHJldikpIHtcbiAgICAgICAgICAgIHNhd05vbldTID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJldiA9PSA0NyAmJiB0ZXh0LmNoYXJDb2RlQXQocG9zIC0gMikgPT0gNDIpIHtcbiAgICAgICAgZm9yICh2YXIgc2NhbiA9IHBvcyAtIDI7IHNjYW4gPiAxOyAtLXNjYW4pIHtcbiAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KHNjYW4gLSAxKSA9PSA0MiAmJiB0ZXh0LmNoYXJDb2RlQXQoc2NhbiAtIDIpID09IDQ3KSB7XG4gICAgICAgICAgICBpZiAoIW9uT3duTGluZSh0ZXh0LCBzY2FuIC0gMikpIGJyZWFrIG91dDtcbiAgICAgICAgICAgIChmb3VuZCB8fCAoZm91bmQgPSBbXSkpLnVuc2hpZnQodGV4dC5zbGljZShzY2FuLCBwb3MgLSAyKSk7XG4gICAgICAgICAgICB0b3BJc0xpbmVDb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICBlbXB0eUxpbmVzID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3MgPSBzY2FuIC0gMjtcbiAgICAgIH0gZWxzZSBpZiAoaXNTcGFjZShwcmV2KSkge1xuICAgICAgICAtLXBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG4gIH07XG5cbiAgZXhwb3J0cy5jb21tZW50QWZ0ZXIgPSBmdW5jdGlvbih0ZXh0LCBwb3MpIHtcbiAgICB3aGlsZSAocG9zIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBuZXh0ID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICBpZiAobmV4dCA9PSA0Nykge1xuICAgICAgICB2YXIgYWZ0ZXIgPSB0ZXh0LmNoYXJDb2RlQXQocG9zICsgMSksIGVuZDtcbiAgICAgICAgaWYgKGFmdGVyID09IDQ3KSAvLyBsaW5lIGNvbW1lbnRcbiAgICAgICAgICBlbmQgPSB0ZXh0LmluZGV4T2YoXCJcXG5cIiwgcG9zICsgMik7XG4gICAgICAgIGVsc2UgaWYgKGFmdGVyID09IDQyKSAvLyBibG9jayBjb21tZW50XG4gICAgICAgICAgZW5kID0gdGV4dC5pbmRleE9mKFwiKi9cIiwgcG9zICsgMik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKHBvcyArIDIsIGVuZCA8IDAgPyB0ZXh0Lmxlbmd0aCA6IGVuZCk7XG4gICAgICB9IGVsc2UgaWYgKGlzU3BhY2UobmV4dCkpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGV4cG9ydHMuZW5zdXJlQ29tbWVudHNCZWZvcmUgPSBmdW5jdGlvbih0ZXh0LCBub2RlKSB7XG4gICAgaWYgKG5vZGUuaGFzT3duUHJvcGVydHkoXCJjb21tZW50c0JlZm9yZVwiKSkgcmV0dXJuIG5vZGUuY29tbWVudHNCZWZvcmU7XG4gICAgcmV0dXJuIG5vZGUuY29tbWVudHNCZWZvcmUgPSBleHBvcnRzLmNvbW1lbnRzQmVmb3JlKHRleHQsIG5vZGUuc3RhcnQpO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/tern/lib/comment.js\n");

/***/ }),

/***/ "./node_modules/tern/lib/def.js":
/*!**************************************!*\
  !*** ./node_modules/tern/lib/def.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Type description parser\n//\n// Type description JSON files (such as ecmascript.json and browser.json)\n// are used to\n//\n// A) describe types that come from native code\n//\n// B) to cheaply load the types for big libraries, or libraries that\n//    can't be inferred well\n\n(function(mod) {\n  if (true) // CommonJS\n    return exports.init = mod;\n  if (true) // AMD\n    return !(module.exports = {init: mod});\n  tern.def = {init: mod};\n})(function(exports, infer) {\n  \"use strict\";\n\n  function hop(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  }\n\n  var TypeParser = exports.TypeParser = function(spec, start, base, forceNew) {\n    this.pos = start || 0;\n    this.spec = spec;\n    this.base = base;\n    this.forceNew = forceNew;\n  };\n\n  function unwrapType(type, self, args) {\n    return type.call ? type(self, args) : type;\n  }\n\n  function extractProp(type, prop) {\n    if (prop == \"!ret\") {\n      if (type.retval) return type.retval;\n      var rv = new infer.AVal;\n      type.propagate(new infer.IsCallee(infer.ANull, [], null, rv));\n      return rv;\n    } else {\n      return type.getProp(prop);\n    }\n  }\n\n  function computedFunc(name, args, retType, generator) {\n    return function(self, cArgs) {\n      var realArgs = [];\n      for (var i = 0; i < args.length; i++) realArgs.push(unwrapType(args[i], self, cArgs));\n      return new infer.Fn(name, infer.ANull, realArgs, unwrapType(retType, self, cArgs), generator);\n    };\n  }\n  function computedUnion(types) {\n    return function(self, args) {\n      var union = new infer.AVal;\n      for (var i = 0; i < types.length; i++) unwrapType(types[i], self, args).propagate(union);\n      union.maxWeight = 1e5;\n      return union;\n    };\n  }\n  function computedArray(inner) {\n    return function(self, args) {\n      return new infer.Arr(inner(self, args));\n    };\n  }\n  function computedTuple(types) {\n    return function(self, args) {\n      return new infer.Arr(types.map(function(tp) { return unwrapType(tp, self, args) }));\n    };\n  }\n  function computedObject(names, types) {\n    return function(self, args) {\n      var obj = new infer.Obj;\n      names.forEach(function (prop, i) {\n        obj.defProp(prop).addType(unwrapType(types[i], self, args));\n      });\n      return obj;\n    };\n  }\n\n  TypeParser.prototype = {\n    eat: function(str) {\n      if (str.length == 1 ? this.spec.charAt(this.pos) == str : this.spec.indexOf(str, this.pos) == this.pos) {\n        this.pos += str.length;\n        return true;\n      }\n    },\n    word: function(re) {\n      var word = \"\", ch, re = re || /[\\w$]/;\n      while ((ch = this.spec.charAt(this.pos)) && re.test(ch)) { word += ch; ++this.pos; }\n      return word;\n    },\n    error: function() {\n      throw new Error(\"Unrecognized type spec: \" + this.spec + \" (at \" + this.pos + \")\");\n    },\n    parseFnType: function(comp, name, top, generator) {\n      var args = [], names = [], computed = false;\n      if (!this.eat(\")\")) for (var i = 0; ; ++i) {\n        var colon = this.spec.indexOf(\": \", this.pos), argname;\n        if (colon != -1) {\n          argname = this.spec.slice(this.pos, colon);\n          if (/^(\\.\\.\\.)?[$\\w?]+$/.test(argname))\n            this.pos = colon + 2;\n          else\n            argname = null;\n        }\n        names.push(argname);\n        var argType = this.parseType(comp);\n        if (argType.call) computed = true;\n        args.push(argType);\n        if (!this.eat(\", \")) {\n          this.eat(\")\") || this.error();\n          break;\n        }\n      }\n      var retType, computeRet, computeRetStart, fn;\n      if (this.eat(\" -> \")) {\n        var retStart = this.pos;\n        retType = this.parseType(true);\n        if (retType.call && !computed) {\n          computeRet = retType;\n          retType = infer.ANull;\n          computeRetStart = retStart;\n        }\n      } else {\n        retType = infer.ANull;\n      }\n      if (computed) return computedFunc(name, args, retType, generator);\n\n      if (top && (fn = this.base))\n        infer.Fn.call(this.base, name, infer.ANull, args, names, retType, generator);\n      else\n        fn = new infer.Fn(name, infer.ANull, args, names, retType, generator);\n      if (computeRet) fn.computeRet = computeRet;\n      if (computeRetStart != null) fn.computeRetSource = this.spec.slice(computeRetStart, this.pos);\n      return fn;\n    },\n    parseType: function(comp, name, top) {\n      var main = this.parseTypeMaybeProp(comp, name, top);\n      if (!this.eat(\"|\")) return main;\n      var types = [main], computed = main.call;\n      for (;;) {\n        var next = this.parseTypeMaybeProp(comp, name, top);\n        types.push(next);\n        if (next.call) computed = true;\n        if (!this.eat(\"|\")) break;\n      }\n      if (computed) return computedUnion(types);\n      var union = new infer.AVal;\n      for (var i = 0; i < types.length; i++) types[i].propagate(union);\n      union.maxWeight = 1e5;\n      return union;\n    },\n    parseTypeMaybeProp: function(comp, name, top) {\n      var result = this.parseTypeInner(comp, name, top);\n      while (comp && this.eat(\".\")) result = this.extendWithProp(result);\n      return result;\n    },\n    extendWithProp: function(base) {\n      var propName = this.word(/[\\w<>$!:]/) || this.error();\n      if (base.apply) return function(self, args) {\n        return extractProp(base(self, args), propName);\n      };\n      return extractProp(base, propName);\n    },\n    parseTypeInner: function(comp, name, top) {\n      var gen;\n      if (this.eat(\"fn(\") || (gen = this.eat(\"fn*(\"))) {\n        return this.parseFnType(comp, name, top, gen);\n      } else if (this.eat(\"[\")) {\n        var inner = this.parseType(comp), types, computed = inner.call;\n        while (this.eat(\", \")) {\n          if (!types) types = [inner];\n          var next = this.parseType(comp);\n          types.push(next);\n          computed = computed || next.call;\n        }\n        this.eat(\"]\") || this.error();\n        if (computed) return types ? computedTuple(types) : computedArray(inner);\n        if (top && this.base) {\n          infer.Arr.call(this.base, types || inner);\n          return this.base;\n        }\n        return new infer.Arr(types || inner);\n      } else if (this.eat(\"{\")) {\n        var types = [], names = [], computed = false;\n        if (!this.eat(\"}\")) {\n          for (var i = 0; ; ++i) {\n            var colon = this.spec.indexOf(\": \", this.pos), propName;\n            if (colon != -1) {\n              propName = this.spec.slice(this.pos, colon);\n              if (/^[$\\w?]+$/.test(propName))\n                this.pos = colon + 2;\n              else\n                propName = null;\n            }\n            var propType = this.parseType(comp);\n            if (propType.call) computed = true;\n            names.push(propName);\n            types.push(propType);\n            if (!this.eat(\", \")) {\n              this.eat(\"}\") || this.error();\n              break;\n            }\n          }\n        }\n        if (computed) return computedObject(names, types);\n        var obj = new infer.Obj;\n        names.forEach(function (prop, i) {\n          obj.defProp(prop).addType(types[i]);\n        });\n        return obj;\n      } else if (this.eat(\"+\")) {\n        var path = this.word(/[\\w$<>\\.:!]/);\n        var base = infer.cx().localDefs[path + \".prototype\"];\n        if (!base) {\n          var base = parsePath(path);\n          if (!(base instanceof infer.Obj)) return base;\n          var proto = descendProps(base, [\"prototype\"]);\n          if (proto && (proto = proto.getObjType()))\n            base = proto;\n        }\n        if (comp && this.eat(\"[\")) return this.parsePoly(base);\n        if (top && this.base) {\n          this.base.proto = base;\n          var name = base.hasCtor && base.hasCtor.name || base.name;\n          if (name) this.base.name = name;\n          return this.base;\n        }\n        if (top && this.forceNew) return new infer.Obj(base);\n        return infer.getInstance(base);\n      } else if (this.eat(\":\")) {\n        var name = this.word(/[\\w$\\.]/);\n        return infer.getSymbol(name);\n      } else if (comp && this.eat(\"!\")) {\n        var arg = this.word(/\\d/);\n        if (arg) {\n          arg = Number(arg);\n          return function(_self, args) {return args[arg] || infer.ANull;};\n        } else if (this.eat(\"this\")) {\n          return function(self) {return self;};\n        } else if (this.eat(\"custom:\")) {\n          var fname = this.word(/[\\w$]/);\n          return customFunctions[fname] || function() { return infer.ANull; };\n        } else {\n          return this.fromWord(\"!\" + this.word(/[\\w$<>\\.!:]/));\n        }\n      } else if (this.eat(\"?\")) {\n        return infer.ANull;\n      } else {\n        return this.fromWord(this.word(/[\\w$<>\\.!:`]/));\n      }\n    },\n    fromWord: function(spec) {\n      var cx = infer.cx();\n      switch (spec) {\n      case \"number\": return cx.num;\n      case \"string\": return cx.str;\n      case \"bool\": return cx.bool;\n      case \"<top>\": return cx.topScope;\n      }\n      if (cx.localDefs && spec in cx.localDefs) return cx.localDefs[spec];\n      return parsePath(spec);\n    },\n    parsePoly: function(base) {\n      var propName = \"<i>\", match;\n      if (match = this.spec.slice(this.pos).match(/^\\s*([\\w$:]+)\\s*=\\s*/)) {\n        propName = match[1];\n        this.pos += match[0].length;\n      }\n      var value = this.parseType(true);\n      if (!this.eat(\"]\")) this.error();\n      if (value.call) return function(self, args) {\n        var instance = new infer.Obj(base);\n        value(self, args).propagate(instance.defProp(propName));\n        return instance;\n      };\n      var instance = new infer.Obj(base);\n      value.propagate(instance.defProp(propName));\n      return instance;\n    }\n  };\n\n  function addArgCallEffects(type) {\n    if (type instanceof infer.Fn && type.args) for (var i = 0; i < type.args.length; ++i) {\n      var arg = type.args[i];\n      if (arg instanceof infer.Fn && arg.args && arg.args.length) addArgCallEffect(type, i);\n    }\n  }\n\n  function addArgCallEffect(type, argNum) {\n    addEffect(type, function(_self, args) {\n      if (args[argNum]) args[argNum].propagate(\n        new infer.IsCallee(infer.cx().topScope, type.args[argNum].args, null, infer.ANull));\n    });\n  }\n\n  function parseType(spec, name, base, forceNew) {\n    var type = new TypeParser(spec, null, base, forceNew).parseType(false, name, true);\n    if (type instanceof infer.AVal) type.types.forEach(addArgCallEffects);\n    else addArgCallEffects(type);\n    return type;\n  }\n\n  function addEffect(fn, handler, replaceRet) {\n    var oldCmp = fn.computeRet, rv = fn.retval;\n    fn.computeRet = function(self, args, argNodes) {\n      var handled = handler(self, args, argNodes);\n      var old = oldCmp ? oldCmp(self, args, argNodes) : rv;\n      return replaceRet ? handled : old;\n    };\n  }\n\n  var parseEffect = exports.parseEffect = function(effect, fn) {\n    var m;\n    if (effect.indexOf(\"propagate \") == 0) {\n      var p = new TypeParser(effect, 10);\n      var origin = p.parseType(true);\n      if (!p.eat(\" \")) p.error();\n      var target = p.parseType(true);\n      addEffect(fn, function(self, args) {\n        unwrapType(origin, self, args).propagate(unwrapType(target, self, args));\n      });\n    } else if (effect.indexOf(\"call \") == 0) {\n      var andRet = effect.indexOf(\"and return \", 5) == 5;\n      var p = new TypeParser(effect, andRet ? 16 : 5);\n      var getCallee = p.parseType(true), getSelf = null, getArgs = [];\n      if (p.eat(\" this=\")) getSelf = p.parseType(true);\n      while (p.eat(\" \")) getArgs.push(p.parseType(true));\n      addEffect(fn, function(self, args) {\n        var callee = unwrapType(getCallee, self, args);\n        var slf = getSelf ? unwrapType(getSelf, self, args) : infer.ANull, as = [];\n        for (var i = 0; i < getArgs.length; ++i) as.push(unwrapType(getArgs[i], self, args));\n        var result = andRet ? new infer.AVal : infer.ANull;\n        callee.propagate(new infer.IsCallee(slf, as, null, result));\n        return result;\n      }, andRet);\n    } else if (m = effect.match(/^custom (\\S+)\\s*(.*)/)) {\n      var customFunc = customFunctions[m[1]];\n      if (customFunc) addEffect(fn, m[2] ? customFunc(m[2]) : customFunc);\n    } else if (effect.indexOf(\"copy \") == 0) {\n      var p = new TypeParser(effect, 5);\n      var getFrom = p.parseType(true);\n      p.eat(\" \");\n      var getTo = p.parseType(true);\n      addEffect(fn, function(self, args) {\n        var from = unwrapType(getFrom, self, args), to = unwrapType(getTo, self, args);\n        from.forAllProps(function(prop, val, local) {\n          if (local && prop != \"<i>\")\n            to.propagate(new infer.DefProp(prop, val));\n        });\n      });\n    } else {\n      throw new Error(\"Unknown effect type: \" + effect);\n    }\n  };\n\n  var currentTopScope;\n\n  var parsePath = exports.parsePath = function(path, scope) {\n    var cx = infer.cx(), cached = cx.paths[path], origPath = path;\n    if (cached != null) return cached;\n    cx.paths[path] = infer.ANull;\n\n    var base = scope || currentTopScope || cx.topScope;\n\n    if (cx.localDefs) for (var name in cx.localDefs) {\n      if (path.indexOf(name) == 0) {\n        if (path == name) return cx.paths[path] = cx.localDefs[path];\n        if (path.charAt(name.length) == \".\") {\n          base = cx.localDefs[name];\n          path = path.slice(name.length + 1);\n          break;\n        }\n      }\n    }\n\n    var result = descendProps(base, path.split(\".\"));\n    // Uncomment this to get feedback on your poorly written .json files\n    // if (result == infer.ANull) console.error(\"bad path: \" + origPath + \" (\" + cx.curOrigin + \")\")\n    cx.paths[origPath] = result == infer.ANull ? null : result;\n    return result;\n  };\n\n  function descendProps(base, parts) {\n    for (var i = 0; i < parts.length && base != infer.ANull; ++i) {\n      var prop = parts[i];\n      if (prop.charAt(0) == \"!\") {\n        if (prop == \"!proto\") {\n          base = (base instanceof infer.Obj && base.proto) || infer.ANull;\n        } else {\n          var fn = base.getFunctionType();\n          if (!fn) {\n            base = infer.ANull;\n          } else if (prop == \"!ret\") {\n            base = fn.retval && fn.retval.getType(false) || infer.ANull;\n          } else {\n            var arg = fn.args && fn.args[Number(prop.slice(1))];\n            base = (arg && arg.getType(false)) || infer.ANull;\n          }\n        }\n      } else if (base instanceof infer.Obj &&\n                 (prop == \"prototype\" && base instanceof infer.Fn || base.hasProp(prop))) {\n        var propVal = base.getProp(prop);\n        if (!propVal || propVal.isEmpty())\n          base = infer.ANull;\n        else\n          base = propVal.types[0];\n      } else {\n        base = infer.ANull;\n      }\n    }\n    return base;\n  }\n\n  function emptyObj(ctor) {\n    var empty = Object.create(ctor.prototype);\n    empty.props = Object.create(null);\n    empty.isShell = true;\n    return empty;\n  }\n\n  function isSimpleAnnotation(spec) {\n    if (!spec[\"!type\"] || /^(fn\\(|\\[|\\+)/.test(spec[\"!type\"])) return false;\n    for (var prop in spec)\n      if (prop != \"!type\" && prop != \"!doc\" && prop != \"!url\" && prop != \"!span\" && prop != \"!data\")\n        return false;\n    return true;\n  }\n\n  function passOne(base, spec, path) {\n    if (!base) {\n      var tp = spec[\"!type\"];\n      if (tp) {\n        if (/^fn\\(/.test(tp)) base = emptyObj(infer.Fn);\n        else if (tp.charAt(0) == \"[\") base = emptyObj(infer.Arr);\n        else if (tp.charAt(0) == \"+\") base = emptyObj(infer.Obj);\n        else throw new Error(\"Invalid !type spec: \" + tp);\n      } else if (spec[\"!stdProto\"]) {\n        base = infer.cx().protos[spec[\"!stdProto\"]];\n      } else {\n        base = emptyObj(infer.Obj);\n      }\n      base.name = path;\n    }\n\n    for (var name in spec) if (hop(spec, name) && name.charCodeAt(0) != 33) {\n      var inner = spec[name];\n      if (typeof inner == \"string\" || isSimpleAnnotation(inner)) continue;\n      var prop = base.defProp(name);\n      passOne(prop.getObjType(), inner, path ? path + \".\" + name : name).propagate(prop);\n    }\n    return base;\n  }\n\n  function passTwo(base, spec, path) {\n    if (base.isShell) {\n      delete base.isShell;\n      var tp = spec[\"!type\"];\n      if (tp) {\n        parseType(tp, path, base);\n      } else {\n        var proto = spec[\"!proto\"] && parseType(spec[\"!proto\"]);\n        infer.Obj.call(base, proto instanceof infer.Obj ? proto : true, path);\n      }\n    }\n\n    var effects = spec[\"!effects\"];\n    if (effects && base instanceof infer.Fn) for (var i = 0; i < effects.length; ++i)\n      parseEffect(effects[i], base);\n    copyInfo(spec, base);\n\n    for (var name in spec) if (hop(spec, name) && name.charCodeAt(0) != 33) {\n      var inner = spec[name], known = base.defProp(name), innerPath = path ? path + \".\" + name : name;\n      if (typeof inner == \"string\") {\n        if (known.isEmpty()) parseType(inner, innerPath).propagate(known);\n      } else {\n        if (!isSimpleAnnotation(inner))\n          passTwo(known.getObjType(), inner, innerPath);\n        else if (known.isEmpty())\n          parseType(inner[\"!type\"], innerPath, null, true).propagate(known);\n        else\n          continue;\n        if (inner[\"!doc\"]) known.doc = inner[\"!doc\"];\n        if (inner[\"!url\"]) known.url = inner[\"!url\"];\n        if (inner[\"!span\"]) known.span = inner[\"!span\"];\n      }\n    }\n    return base;\n  }\n\n  function copyInfo(spec, type) {\n    if (spec[\"!doc\"]) type.doc = spec[\"!doc\"];\n    if (spec[\"!url\"]) type.url = spec[\"!url\"];\n    if (spec[\"!span\"]) type.span = spec[\"!span\"];\n    if (spec[\"!data\"]) type.metaData = spec[\"!data\"];\n  }\n\n  function doLoadEnvironment(data, scope) {\n    var cx = infer.cx(), server = cx.parent;\n\n    infer.addOrigin(cx.curOrigin = data[\"!name\"] || \"env#\" + cx.origins.length);\n    cx.localDefs = cx.definitions[cx.curOrigin] = Object.create(null);\n\n    if (server) server.signal(\"preLoadDef\", data);\n\n    passOne(scope, data);\n\n    var def = data[\"!define\"];\n    if (def) {\n      for (var name in def) {\n        var spec = def[name];\n        cx.localDefs[name] = typeof spec == \"string\" ? parsePath(spec) : passOne(null, spec, name);\n      }\n      for (var name in def) {\n        var spec = def[name];\n        if (typeof spec != \"string\") passTwo(cx.localDefs[name], def[name], name);\n      }\n    }\n\n    passTwo(scope, data);\n\n    if (server) server.signal(\"postLoadDef\", data);\n\n    cx.curOrigin = cx.localDefs = null;\n  }\n\n  exports.load = function(data, scope) {\n    if (!scope) scope = infer.cx().topScope;\n    var oldScope = currentTopScope;\n    currentTopScope = scope;\n    try {\n      doLoadEnvironment(data, scope);\n    } finally {\n      currentTopScope = oldScope;\n    }\n  };\n\n  exports.parse = function(data, origin, path) {\n    var cx = infer.cx();\n    if (origin) {\n      cx.origin = origin;\n      cx.localDefs = cx.definitions[origin];\n    }\n\n    try {\n      if (typeof data == \"string\")\n        return parseType(data, path);\n      else\n        return passTwo(passOne(null, data, path), data, path);\n    } finally {\n      if (origin) cx.origin = cx.localDefs = null;\n    }\n  };\n\n  // Used to register custom logic for more involved effect or type\n  // computation.\n  var customFunctions = Object.create(null);\n  infer.registerFunction = function(name, f) { customFunctions[name] = f; };\n\n  var IsCreated = infer.constraint({\n    construct: function(created, target, spec) {\n      this.created = created;\n      this.target = target;\n      this.spec = spec;\n    },\n    addType: function(tp) {\n      if (tp instanceof infer.Obj && this.created++ < 5) {\n        var derived = new infer.Obj(tp), spec = this.spec;\n        if (spec instanceof infer.AVal) spec = spec.getObjType(false);\n        if (spec instanceof infer.Obj) for (var prop in spec.props) {\n          var cur = spec.props[prop].types[0];\n          var p = derived.defProp(prop);\n          if (cur && cur instanceof infer.Obj && cur.props.value) {\n            var vtp = cur.props.value.getType(false);\n            if (vtp) p.addType(vtp);\n          }\n        }\n        this.target.addType(derived);\n      }\n    }\n  });\n\n  infer.registerFunction(\"Object_create\", function(_self, args, argNodes) {\n    if (argNodes && argNodes.length && argNodes[0].type == \"Literal\" && argNodes[0].value == null)\n      return new infer.Obj();\n\n    var result = new infer.AVal;\n    if (args[0]) args[0].propagate(new IsCreated(0, result, args[1]));\n    return result;\n  });\n\n  var PropSpec = infer.constraint({\n    construct: function(target) { this.target = target; },\n    addType: function(tp) {\n      if (!(tp instanceof infer.Obj)) return;\n      if (tp.hasProp(\"value\"))\n        tp.getProp(\"value\").propagate(this.target);\n      else if (tp.hasProp(\"get\"))\n        tp.getProp(\"get\").propagate(new infer.IsCallee(infer.ANull, [], null, this.target));\n    }\n  });\n\n  infer.registerFunction(\"Object_defineProperty\", function(_self, args, argNodes) {\n    if (argNodes && argNodes.length >= 3 && argNodes[1].type == \"Literal\" &&\n        typeof argNodes[1].value == \"string\") {\n      var obj = args[0], connect = new infer.AVal;\n      obj.propagate(new infer.DefProp(argNodes[1].value, connect, argNodes[1]));\n      args[2].propagate(new PropSpec(connect));\n    }\n    return infer.ANull;\n  });\n\n  infer.registerFunction(\"Object_defineProperties\", function(_self, args, argNodes) {\n    if (args.length >= 2) {\n      var obj = args[0];\n      args[1].forAllProps(function(prop, val, local) {\n        if (!local) return;\n        var connect = new infer.AVal;\n        obj.propagate(new infer.DefProp(prop, connect, argNodes && argNodes[1]));\n        val.propagate(new PropSpec(connect));\n      });\n    }\n    return infer.ANull;\n  });\n\n  var IsBound = infer.constraint({\n    construct: function(self, args, target) {\n      this.self = self; this.args = args; this.target = target;\n    },\n    addType: function(tp) {\n      if (!(tp instanceof infer.Fn)) return;\n      this.target.addType(new infer.Fn(tp.name, infer.ANull, tp.args.slice(this.args.length),\n                                       tp.argNames.slice(this.args.length), tp.retval, tp.generator));\n      this.self.propagate(tp.self);\n      for (var i = 0; i < Math.min(tp.args.length, this.args.length); ++i)\n        this.args[i].propagate(tp.args[i]);\n    }\n  });\n\n  infer.registerFunction(\"Function_bind\", function(self, args) {\n    if (!args.length) return infer.ANull;\n    var result = new infer.AVal;\n    self.propagate(new IsBound(args[0], args.slice(1), result));\n    return result;\n  });\n\n  infer.registerFunction(\"Array_ctor\", function(_self, args) {\n    var arr = new infer.Arr;\n    if (args.length != 1 || !args[0].hasType(infer.cx().num)) {\n      var content = arr.getProp(\"<i>\");\n      for (var i = 0; i < args.length; ++i) args[i].propagate(content);\n    }\n    return arr;\n  });\n\n  function makePromise() {\n    var defs = infer.cx().definitions.ecmascript;\n    return defs && new infer.Obj(defs[\"Promise.prototype\"]);\n  }\n\n  infer.registerFunction(\"Promise_ctor\", function(_self, args, argNodes) {\n    var self = makePromise();\n    if (!self || args.length < 1) return infer.ANull;\n    var valProp = self.defProp(\":t\", argNodes && argNodes[0]);\n    var valArg = new infer.AVal;\n    valArg.propagate(valProp);\n    var exec = new infer.Fn(\"execute\", infer.ANull, [valArg], [\"value\"], infer.ANull);\n    var reject = infer.cx().definitions.ecmascript.Promise_reject;\n    args[0].propagate(new infer.IsCallee(infer.ANull, [exec, reject], null, infer.ANull));\n    return self;\n  });\n\n  // Definition for Promise.resolve()\n  // The behavior is different for Promise and non-Promise arguments, so we\n  // need a custom definition to handle the different cases properly.\n  infer.registerFunction(\"Promise_resolve\", function(_self, args, argNodes) {\n    var self = makePromise();\n    if (!self) return infer.ANull;\n    if (args.length) {\n      var valProp = self.defProp(\":t\", argNodes && argNodes[0]);\n      var valArg = new infer.AVal;\n      valArg.propagate(valProp);\n      args[0].propagate(new PromiseResolvesTo(valArg));\n    }\n    return self;\n  });\n\n  var PromiseResolvesTo = infer.constraint({\n    construct: function(output) { this.output = output; },\n    addType: function(tp) {\n      if (tp.constructor == infer.Obj && tp.name == \"Promise\" && tp.hasProp(\":t\"))\n        tp.getProp(\":t\").propagate(this.output);\n      else\n        tp.propagate(this.output);\n    }\n  });\n\n  var WG_PROMISE_KEEP_VALUE = 50;\n\n  infer.registerFunction(\"Promise_then\", function(self, args, argNodes) {\n    var fn = args.length && args[0].getFunctionType();\n    var defs = infer.cx().definitions.ecmascript;\n    if (!fn || !defs) return self;\n\n    var result = new infer.Obj(defs[\"Promise.prototype\"]);\n    var value = result.defProp(\":t\", argNodes && argNodes[0]), ty;\n    if (fn.retval.isEmpty() && (ty = self.getType()) instanceof infer.Obj && ty.hasProp(\":t\"))\n      ty.getProp(\":t\").propagate(value, WG_PROMISE_KEEP_VALUE);\n    fn.retval.propagate(new PromiseResolvesTo(value));\n    return result;\n  });\n\n  infer.registerFunction(\"getOwnPropertySymbols\", function(_self, args) {\n    if (!args.length) return infer.ANull;\n    var result = new infer.AVal;\n    args[0].forAllProps(function(prop, _val, local) {\n      if (local && prop.charAt(0) == \":\") result.addType(infer.getSymbol(prop.slice(1)));\n    });\n    return result;\n  });\n\n  infer.registerFunction(\"getSymbol\", function(_self, _args, argNodes) {\n    if (argNodes && argNodes.length && argNodes[0].type == \"Literal\" && typeof argNodes[0].value == \"string\")\n      return infer.getSymbol(argNodes[0].value);\n    else\n      return infer.ANull;\n  });\n\n  return exports;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGVybi9saWIvZGVmLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rlcm4vbGliL2RlZi5qcz84ZWVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFR5cGUgZGVzY3JpcHRpb24gcGFyc2VyXG4vL1xuLy8gVHlwZSBkZXNjcmlwdGlvbiBKU09OIGZpbGVzIChzdWNoIGFzIGVjbWFzY3JpcHQuanNvbiBhbmQgYnJvd3Nlci5qc29uKVxuLy8gYXJlIHVzZWQgdG9cbi8vXG4vLyBBKSBkZXNjcmliZSB0eXBlcyB0aGF0IGNvbWUgZnJvbSBuYXRpdmUgY29kZVxuLy9cbi8vIEIpIHRvIGNoZWFwbHkgbG9hZCB0aGUgdHlwZXMgZm9yIGJpZyBsaWJyYXJpZXMsIG9yIGxpYnJhcmllcyB0aGF0XG4vLyAgICBjYW4ndCBiZSBpbmZlcnJlZCB3ZWxsXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIHJldHVybiBleHBvcnRzLmluaXQgPSBtb2Q7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICByZXR1cm4gZGVmaW5lKHtpbml0OiBtb2R9KTtcbiAgdGVybi5kZWYgPSB7aW5pdDogbW9kfTtcbn0pKGZ1bmN0aW9uKGV4cG9ydHMsIGluZmVyKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGhvcChvYmosIHByb3ApIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG4gIH1cblxuICB2YXIgVHlwZVBhcnNlciA9IGV4cG9ydHMuVHlwZVBhcnNlciA9IGZ1bmN0aW9uKHNwZWMsIHN0YXJ0LCBiYXNlLCBmb3JjZU5ldykge1xuICAgIHRoaXMucG9zID0gc3RhcnQgfHwgMDtcbiAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgIHRoaXMuYmFzZSA9IGJhc2U7XG4gICAgdGhpcy5mb3JjZU5ldyA9IGZvcmNlTmV3O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHVud3JhcFR5cGUodHlwZSwgc2VsZiwgYXJncykge1xuICAgIHJldHVybiB0eXBlLmNhbGwgPyB0eXBlKHNlbGYsIGFyZ3MpIDogdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RQcm9wKHR5cGUsIHByb3ApIHtcbiAgICBpZiAocHJvcCA9PSBcIiFyZXRcIikge1xuICAgICAgaWYgKHR5cGUucmV0dmFsKSByZXR1cm4gdHlwZS5yZXR2YWw7XG4gICAgICB2YXIgcnYgPSBuZXcgaW5mZXIuQVZhbDtcbiAgICAgIHR5cGUucHJvcGFnYXRlKG5ldyBpbmZlci5Jc0NhbGxlZShpbmZlci5BTnVsbCwgW10sIG51bGwsIHJ2KSk7XG4gICAgICByZXR1cm4gcnY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlLmdldFByb3AocHJvcCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZWRGdW5jKG5hbWUsIGFyZ3MsIHJldFR5cGUsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihzZWxmLCBjQXJncykge1xuICAgICAgdmFyIHJlYWxBcmdzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHJlYWxBcmdzLnB1c2godW53cmFwVHlwZShhcmdzW2ldLCBzZWxmLCBjQXJncykpO1xuICAgICAgcmV0dXJuIG5ldyBpbmZlci5GbihuYW1lLCBpbmZlci5BTnVsbCwgcmVhbEFyZ3MsIHVud3JhcFR5cGUocmV0VHlwZSwgc2VsZiwgY0FyZ3MpLCBnZW5lcmF0b3IpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gY29tcHV0ZWRVbmlvbih0eXBlcykge1xuICAgIHJldHVybiBmdW5jdGlvbihzZWxmLCBhcmdzKSB7XG4gICAgICB2YXIgdW5pb24gPSBuZXcgaW5mZXIuQVZhbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHVud3JhcFR5cGUodHlwZXNbaV0sIHNlbGYsIGFyZ3MpLnByb3BhZ2F0ZSh1bmlvbik7XG4gICAgICB1bmlvbi5tYXhXZWlnaHQgPSAxZTU7XG4gICAgICByZXR1cm4gdW5pb247XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlZEFycmF5KGlubmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBuZXcgaW5mZXIuQXJyKGlubmVyKHNlbGYsIGFyZ3MpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGNvbXB1dGVkVHVwbGUodHlwZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgYXJncykge1xuICAgICAgcmV0dXJuIG5ldyBpbmZlci5BcnIodHlwZXMubWFwKGZ1bmN0aW9uKHRwKSB7IHJldHVybiB1bndyYXBUeXBlKHRwLCBzZWxmLCBhcmdzKSB9KSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb21wdXRlZE9iamVjdChuYW1lcywgdHlwZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgYXJncykge1xuICAgICAgdmFyIG9iaiA9IG5ldyBpbmZlci5PYmo7XG4gICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICAgIG9iai5kZWZQcm9wKHByb3ApLmFkZFR5cGUodW53cmFwVHlwZSh0eXBlc1tpXSwgc2VsZiwgYXJncykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH1cblxuICBUeXBlUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgICBlYXQ6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgaWYgKHN0ci5sZW5ndGggPT0gMSA/IHRoaXMuc3BlYy5jaGFyQXQodGhpcy5wb3MpID09IHN0ciA6IHRoaXMuc3BlYy5pbmRleE9mKHN0ciwgdGhpcy5wb3MpID09IHRoaXMucG9zKSB7XG4gICAgICAgIHRoaXMucG9zICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgd29yZDogZnVuY3Rpb24ocmUpIHtcbiAgICAgIHZhciB3b3JkID0gXCJcIiwgY2gsIHJlID0gcmUgfHwgL1tcXHckXS87XG4gICAgICB3aGlsZSAoKGNoID0gdGhpcy5zcGVjLmNoYXJBdCh0aGlzLnBvcykpICYmIHJlLnRlc3QoY2gpKSB7IHdvcmQgKz0gY2g7ICsrdGhpcy5wb3M7IH1cbiAgICAgIHJldHVybiB3b3JkO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgc3BlYzogXCIgKyB0aGlzLnNwZWMgKyBcIiAoYXQgXCIgKyB0aGlzLnBvcyArIFwiKVwiKTtcbiAgICB9LFxuICAgIHBhcnNlRm5UeXBlOiBmdW5jdGlvbihjb21wLCBuYW1lLCB0b3AsIGdlbmVyYXRvcikge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbmFtZXMgPSBbXSwgY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5lYXQoXCIpXCIpKSBmb3IgKHZhciBpID0gMDsgOyArK2kpIHtcbiAgICAgICAgdmFyIGNvbG9uID0gdGhpcy5zcGVjLmluZGV4T2YoXCI6IFwiLCB0aGlzLnBvcyksIGFyZ25hbWU7XG4gICAgICAgIGlmIChjb2xvbiAhPSAtMSkge1xuICAgICAgICAgIGFyZ25hbWUgPSB0aGlzLnNwZWMuc2xpY2UodGhpcy5wb3MsIGNvbG9uKTtcbiAgICAgICAgICBpZiAoL14oXFwuXFwuXFwuKT9bJFxcdz9dKyQvLnRlc3QoYXJnbmFtZSkpXG4gICAgICAgICAgICB0aGlzLnBvcyA9IGNvbG9uICsgMjtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBhcmduYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBuYW1lcy5wdXNoKGFyZ25hbWUpO1xuICAgICAgICB2YXIgYXJnVHlwZSA9IHRoaXMucGFyc2VUeXBlKGNvbXApO1xuICAgICAgICBpZiAoYXJnVHlwZS5jYWxsKSBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIGFyZ3MucHVzaChhcmdUeXBlKTtcbiAgICAgICAgaWYgKCF0aGlzLmVhdChcIiwgXCIpKSB7XG4gICAgICAgICAgdGhpcy5lYXQoXCIpXCIpIHx8IHRoaXMuZXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJldFR5cGUsIGNvbXB1dGVSZXQsIGNvbXB1dGVSZXRTdGFydCwgZm47XG4gICAgICBpZiAodGhpcy5lYXQoXCIgLT4gXCIpKSB7XG4gICAgICAgIHZhciByZXRTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICByZXRUeXBlID0gdGhpcy5wYXJzZVR5cGUodHJ1ZSk7XG4gICAgICAgIGlmIChyZXRUeXBlLmNhbGwgJiYgIWNvbXB1dGVkKSB7XG4gICAgICAgICAgY29tcHV0ZVJldCA9IHJldFR5cGU7XG4gICAgICAgICAgcmV0VHlwZSA9IGluZmVyLkFOdWxsO1xuICAgICAgICAgIGNvbXB1dGVSZXRTdGFydCA9IHJldFN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXRUeXBlID0gaW5mZXIuQU51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY29tcHV0ZWQpIHJldHVybiBjb21wdXRlZEZ1bmMobmFtZSwgYXJncywgcmV0VHlwZSwgZ2VuZXJhdG9yKTtcblxuICAgICAgaWYgKHRvcCAmJiAoZm4gPSB0aGlzLmJhc2UpKVxuICAgICAgICBpbmZlci5Gbi5jYWxsKHRoaXMuYmFzZSwgbmFtZSwgaW5mZXIuQU51bGwsIGFyZ3MsIG5hbWVzLCByZXRUeXBlLCBnZW5lcmF0b3IpO1xuICAgICAgZWxzZVxuICAgICAgICBmbiA9IG5ldyBpbmZlci5GbihuYW1lLCBpbmZlci5BTnVsbCwgYXJncywgbmFtZXMsIHJldFR5cGUsIGdlbmVyYXRvcik7XG4gICAgICBpZiAoY29tcHV0ZVJldCkgZm4uY29tcHV0ZVJldCA9IGNvbXB1dGVSZXQ7XG4gICAgICBpZiAoY29tcHV0ZVJldFN0YXJ0ICE9IG51bGwpIGZuLmNvbXB1dGVSZXRTb3VyY2UgPSB0aGlzLnNwZWMuc2xpY2UoY29tcHV0ZVJldFN0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICByZXR1cm4gZm47XG4gICAgfSxcbiAgICBwYXJzZVR5cGU6IGZ1bmN0aW9uKGNvbXAsIG5hbWUsIHRvcCkge1xuICAgICAgdmFyIG1haW4gPSB0aGlzLnBhcnNlVHlwZU1heWJlUHJvcChjb21wLCBuYW1lLCB0b3ApO1xuICAgICAgaWYgKCF0aGlzLmVhdChcInxcIikpIHJldHVybiBtYWluO1xuICAgICAgdmFyIHR5cGVzID0gW21haW5dLCBjb21wdXRlZCA9IG1haW4uY2FsbDtcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLnBhcnNlVHlwZU1heWJlUHJvcChjb21wLCBuYW1lLCB0b3ApO1xuICAgICAgICB0eXBlcy5wdXNoKG5leHQpO1xuICAgICAgICBpZiAobmV4dC5jYWxsKSBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5lYXQoXCJ8XCIpKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChjb21wdXRlZCkgcmV0dXJuIGNvbXB1dGVkVW5pb24odHlwZXMpO1xuICAgICAgdmFyIHVuaW9uID0gbmV3IGluZmVyLkFWYWw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB0eXBlc1tpXS5wcm9wYWdhdGUodW5pb24pO1xuICAgICAgdW5pb24ubWF4V2VpZ2h0ID0gMWU1O1xuICAgICAgcmV0dXJuIHVuaW9uO1xuICAgIH0sXG4gICAgcGFyc2VUeXBlTWF5YmVQcm9wOiBmdW5jdGlvbihjb21wLCBuYW1lLCB0b3ApIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlVHlwZUlubmVyKGNvbXAsIG5hbWUsIHRvcCk7XG4gICAgICB3aGlsZSAoY29tcCAmJiB0aGlzLmVhdChcIi5cIikpIHJlc3VsdCA9IHRoaXMuZXh0ZW5kV2l0aFByb3AocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBleHRlbmRXaXRoUHJvcDogZnVuY3Rpb24oYmFzZSkge1xuICAgICAgdmFyIHByb3BOYW1lID0gdGhpcy53b3JkKC9bXFx3PD4kITpdLykgfHwgdGhpcy5lcnJvcigpO1xuICAgICAgaWYgKGJhc2UuYXBwbHkpIHJldHVybiBmdW5jdGlvbihzZWxmLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBleHRyYWN0UHJvcChiYXNlKHNlbGYsIGFyZ3MpLCBwcm9wTmFtZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGV4dHJhY3RQcm9wKGJhc2UsIHByb3BOYW1lKTtcbiAgICB9LFxuICAgIHBhcnNlVHlwZUlubmVyOiBmdW5jdGlvbihjb21wLCBuYW1lLCB0b3ApIHtcbiAgICAgIHZhciBnZW47XG4gICAgICBpZiAodGhpcy5lYXQoXCJmbihcIikgfHwgKGdlbiA9IHRoaXMuZWF0KFwiZm4qKFwiKSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGblR5cGUoY29tcCwgbmFtZSwgdG9wLCBnZW4pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmVhdChcIltcIikpIHtcbiAgICAgICAgdmFyIGlubmVyID0gdGhpcy5wYXJzZVR5cGUoY29tcCksIHR5cGVzLCBjb21wdXRlZCA9IGlubmVyLmNhbGw7XG4gICAgICAgIHdoaWxlICh0aGlzLmVhdChcIiwgXCIpKSB7XG4gICAgICAgICAgaWYgKCF0eXBlcykgdHlwZXMgPSBbaW5uZXJdO1xuICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5wYXJzZVR5cGUoY29tcCk7XG4gICAgICAgICAgdHlwZXMucHVzaChuZXh0KTtcbiAgICAgICAgICBjb21wdXRlZCA9IGNvbXB1dGVkIHx8IG5leHQuY2FsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVhdChcIl1cIikgfHwgdGhpcy5lcnJvcigpO1xuICAgICAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0eXBlcyA/IGNvbXB1dGVkVHVwbGUodHlwZXMpIDogY29tcHV0ZWRBcnJheShpbm5lcik7XG4gICAgICAgIGlmICh0b3AgJiYgdGhpcy5iYXNlKSB7XG4gICAgICAgICAgaW5mZXIuQXJyLmNhbGwodGhpcy5iYXNlLCB0eXBlcyB8fCBpbm5lcik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGluZmVyLkFycih0eXBlcyB8fCBpbm5lcik7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWF0KFwie1wiKSkge1xuICAgICAgICB2YXIgdHlwZXMgPSBbXSwgbmFtZXMgPSBbXSwgY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmVhdChcIn1cIikpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjb2xvbiA9IHRoaXMuc3BlYy5pbmRleE9mKFwiOiBcIiwgdGhpcy5wb3MpLCBwcm9wTmFtZTtcbiAgICAgICAgICAgIGlmIChjb2xvbiAhPSAtMSkge1xuICAgICAgICAgICAgICBwcm9wTmFtZSA9IHRoaXMuc3BlYy5zbGljZSh0aGlzLnBvcywgY29sb24pO1xuICAgICAgICAgICAgICBpZiAoL15bJFxcdz9dKyQvLnRlc3QocHJvcE5hbWUpKVxuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gY29sb24gKyAyO1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByb3BUeXBlID0gdGhpcy5wYXJzZVR5cGUoY29tcCk7XG4gICAgICAgICAgICBpZiAocHJvcFR5cGUuY2FsbCkgY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbmFtZXMucHVzaChwcm9wTmFtZSk7XG4gICAgICAgICAgICB0eXBlcy5wdXNoKHByb3BUeXBlKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5lYXQoXCIsIFwiKSkge1xuICAgICAgICAgICAgICB0aGlzLmVhdChcIn1cIikgfHwgdGhpcy5lcnJvcigpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXB1dGVkKSByZXR1cm4gY29tcHV0ZWRPYmplY3QobmFtZXMsIHR5cGVzKTtcbiAgICAgICAgdmFyIG9iaiA9IG5ldyBpbmZlci5PYmo7XG4gICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgICAgICBvYmouZGVmUHJvcChwcm9wKS5hZGRUeXBlKHR5cGVzW2ldKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWF0KFwiK1wiKSkge1xuICAgICAgICB2YXIgcGF0aCA9IHRoaXMud29yZCgvW1xcdyQ8PlxcLjohXS8pO1xuICAgICAgICB2YXIgYmFzZSA9IGluZmVyLmN4KCkubG9jYWxEZWZzW3BhdGggKyBcIi5wcm90b3R5cGVcIl07XG4gICAgICAgIGlmICghYmFzZSkge1xuICAgICAgICAgIHZhciBiYXNlID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgICAgICAgIGlmICghKGJhc2UgaW5zdGFuY2VvZiBpbmZlci5PYmopKSByZXR1cm4gYmFzZTtcbiAgICAgICAgICB2YXIgcHJvdG8gPSBkZXNjZW5kUHJvcHMoYmFzZSwgW1wicHJvdG90eXBlXCJdKTtcbiAgICAgICAgICBpZiAocHJvdG8gJiYgKHByb3RvID0gcHJvdG8uZ2V0T2JqVHlwZSgpKSlcbiAgICAgICAgICAgIGJhc2UgPSBwcm90bztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcCAmJiB0aGlzLmVhdChcIltcIikpIHJldHVybiB0aGlzLnBhcnNlUG9seShiYXNlKTtcbiAgICAgICAgaWYgKHRvcCAmJiB0aGlzLmJhc2UpIHtcbiAgICAgICAgICB0aGlzLmJhc2UucHJvdG8gPSBiYXNlO1xuICAgICAgICAgIHZhciBuYW1lID0gYmFzZS5oYXNDdG9yICYmIGJhc2UuaGFzQ3Rvci5uYW1lIHx8IGJhc2UubmFtZTtcbiAgICAgICAgICBpZiAobmFtZSkgdGhpcy5iYXNlLm5hbWUgPSBuYW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzLmJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvcCAmJiB0aGlzLmZvcmNlTmV3KSByZXR1cm4gbmV3IGluZmVyLk9iaihiYXNlKTtcbiAgICAgICAgcmV0dXJuIGluZmVyLmdldEluc3RhbmNlKGJhc2UpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmVhdChcIjpcIikpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLndvcmQoL1tcXHckXFwuXS8pO1xuICAgICAgICByZXR1cm4gaW5mZXIuZ2V0U3ltYm9sKG5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChjb21wICYmIHRoaXMuZWF0KFwiIVwiKSkge1xuICAgICAgICB2YXIgYXJnID0gdGhpcy53b3JkKC9cXGQvKTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIGFyZyA9IE51bWJlcihhcmcpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihfc2VsZiwgYXJncykge3JldHVybiBhcmdzW2FyZ10gfHwgaW5mZXIuQU51bGw7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVhdChcInRoaXNcIikpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmO307XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lYXQoXCJjdXN0b206XCIpKSB7XG4gICAgICAgICAgdmFyIGZuYW1lID0gdGhpcy53b3JkKC9bXFx3JF0vKTtcbiAgICAgICAgICByZXR1cm4gY3VzdG9tRnVuY3Rpb25zW2ZuYW1lXSB8fCBmdW5jdGlvbigpIHsgcmV0dXJuIGluZmVyLkFOdWxsOyB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZyb21Xb3JkKFwiIVwiICsgdGhpcy53b3JkKC9bXFx3JDw+XFwuITpdLykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZWF0KFwiP1wiKSkge1xuICAgICAgICByZXR1cm4gaW5mZXIuQU51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tV29yZCh0aGlzLndvcmQoL1tcXHckPD5cXC4hOmBdLykpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbVdvcmQ6IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICAgIHZhciBjeCA9IGluZmVyLmN4KCk7XG4gICAgICBzd2l0Y2ggKHNwZWMpIHtcbiAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIGN4Lm51bTtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIGN4LnN0cjtcbiAgICAgIGNhc2UgXCJib29sXCI6IHJldHVybiBjeC5ib29sO1xuICAgICAgY2FzZSBcIjx0b3A+XCI6IHJldHVybiBjeC50b3BTY29wZTtcbiAgICAgIH1cbiAgICAgIGlmIChjeC5sb2NhbERlZnMgJiYgc3BlYyBpbiBjeC5sb2NhbERlZnMpIHJldHVybiBjeC5sb2NhbERlZnNbc3BlY107XG4gICAgICByZXR1cm4gcGFyc2VQYXRoKHNwZWMpO1xuICAgIH0sXG4gICAgcGFyc2VQb2x5OiBmdW5jdGlvbihiYXNlKSB7XG4gICAgICB2YXIgcHJvcE5hbWUgPSBcIjxpPlwiLCBtYXRjaDtcbiAgICAgIGlmIChtYXRjaCA9IHRoaXMuc3BlYy5zbGljZSh0aGlzLnBvcykubWF0Y2goL15cXHMqKFtcXHckOl0rKVxccyo9XFxzKi8pKSB7XG4gICAgICAgIHByb3BOYW1lID0gbWF0Y2hbMV07XG4gICAgICAgIHRoaXMucG9zICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMucGFyc2VUeXBlKHRydWUpO1xuICAgICAgaWYgKCF0aGlzLmVhdChcIl1cIikpIHRoaXMuZXJyb3IoKTtcbiAgICAgIGlmICh2YWx1ZS5jYWxsKSByZXR1cm4gZnVuY3Rpb24oc2VsZiwgYXJncykge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgaW5mZXIuT2JqKGJhc2UpO1xuICAgICAgICB2YWx1ZShzZWxmLCBhcmdzKS5wcm9wYWdhdGUoaW5zdGFuY2UuZGVmUHJvcChwcm9wTmFtZSkpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9O1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IGluZmVyLk9iaihiYXNlKTtcbiAgICAgIHZhbHVlLnByb3BhZ2F0ZShpbnN0YW5jZS5kZWZQcm9wKHByb3BOYW1lKSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGFkZEFyZ0NhbGxFZmZlY3RzKHR5cGUpIHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIGluZmVyLkZuICYmIHR5cGUuYXJncykgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhcmcgPSB0eXBlLmFyZ3NbaV07XG4gICAgICBpZiAoYXJnIGluc3RhbmNlb2YgaW5mZXIuRm4gJiYgYXJnLmFyZ3MgJiYgYXJnLmFyZ3MubGVuZ3RoKSBhZGRBcmdDYWxsRWZmZWN0KHR5cGUsIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEFyZ0NhbGxFZmZlY3QodHlwZSwgYXJnTnVtKSB7XG4gICAgYWRkRWZmZWN0KHR5cGUsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzKSB7XG4gICAgICBpZiAoYXJnc1thcmdOdW1dKSBhcmdzW2FyZ051bV0ucHJvcGFnYXRlKFxuICAgICAgICBuZXcgaW5mZXIuSXNDYWxsZWUoaW5mZXIuY3goKS50b3BTY29wZSwgdHlwZS5hcmdzW2FyZ051bV0uYXJncywgbnVsbCwgaW5mZXIuQU51bGwpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVHlwZShzcGVjLCBuYW1lLCBiYXNlLCBmb3JjZU5ldykge1xuICAgIHZhciB0eXBlID0gbmV3IFR5cGVQYXJzZXIoc3BlYywgbnVsbCwgYmFzZSwgZm9yY2VOZXcpLnBhcnNlVHlwZShmYWxzZSwgbmFtZSwgdHJ1ZSk7XG4gICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBpbmZlci5BVmFsKSB0eXBlLnR5cGVzLmZvckVhY2goYWRkQXJnQ2FsbEVmZmVjdHMpO1xuICAgIGVsc2UgYWRkQXJnQ2FsbEVmZmVjdHModHlwZSk7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFZmZlY3QoZm4sIGhhbmRsZXIsIHJlcGxhY2VSZXQpIHtcbiAgICB2YXIgb2xkQ21wID0gZm4uY29tcHV0ZVJldCwgcnYgPSBmbi5yZXR2YWw7XG4gICAgZm4uY29tcHV0ZVJldCA9IGZ1bmN0aW9uKHNlbGYsIGFyZ3MsIGFyZ05vZGVzKSB7XG4gICAgICB2YXIgaGFuZGxlZCA9IGhhbmRsZXIoc2VsZiwgYXJncywgYXJnTm9kZXMpO1xuICAgICAgdmFyIG9sZCA9IG9sZENtcCA/IG9sZENtcChzZWxmLCBhcmdzLCBhcmdOb2RlcykgOiBydjtcbiAgICAgIHJldHVybiByZXBsYWNlUmV0ID8gaGFuZGxlZCA6IG9sZDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHBhcnNlRWZmZWN0ID0gZXhwb3J0cy5wYXJzZUVmZmVjdCA9IGZ1bmN0aW9uKGVmZmVjdCwgZm4pIHtcbiAgICB2YXIgbTtcbiAgICBpZiAoZWZmZWN0LmluZGV4T2YoXCJwcm9wYWdhdGUgXCIpID09IDApIHtcbiAgICAgIHZhciBwID0gbmV3IFR5cGVQYXJzZXIoZWZmZWN0LCAxMCk7XG4gICAgICB2YXIgb3JpZ2luID0gcC5wYXJzZVR5cGUodHJ1ZSk7XG4gICAgICBpZiAoIXAuZWF0KFwiIFwiKSkgcC5lcnJvcigpO1xuICAgICAgdmFyIHRhcmdldCA9IHAucGFyc2VUeXBlKHRydWUpO1xuICAgICAgYWRkRWZmZWN0KGZuLCBmdW5jdGlvbihzZWxmLCBhcmdzKSB7XG4gICAgICAgIHVud3JhcFR5cGUob3JpZ2luLCBzZWxmLCBhcmdzKS5wcm9wYWdhdGUodW53cmFwVHlwZSh0YXJnZXQsIHNlbGYsIGFyZ3MpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZWZmZWN0LmluZGV4T2YoXCJjYWxsIFwiKSA9PSAwKSB7XG4gICAgICB2YXIgYW5kUmV0ID0gZWZmZWN0LmluZGV4T2YoXCJhbmQgcmV0dXJuIFwiLCA1KSA9PSA1O1xuICAgICAgdmFyIHAgPSBuZXcgVHlwZVBhcnNlcihlZmZlY3QsIGFuZFJldCA/IDE2IDogNSk7XG4gICAgICB2YXIgZ2V0Q2FsbGVlID0gcC5wYXJzZVR5cGUodHJ1ZSksIGdldFNlbGYgPSBudWxsLCBnZXRBcmdzID0gW107XG4gICAgICBpZiAocC5lYXQoXCIgdGhpcz1cIikpIGdldFNlbGYgPSBwLnBhcnNlVHlwZSh0cnVlKTtcbiAgICAgIHdoaWxlIChwLmVhdChcIiBcIikpIGdldEFyZ3MucHVzaChwLnBhcnNlVHlwZSh0cnVlKSk7XG4gICAgICBhZGRFZmZlY3QoZm4sIGZ1bmN0aW9uKHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGNhbGxlZSA9IHVud3JhcFR5cGUoZ2V0Q2FsbGVlLCBzZWxmLCBhcmdzKTtcbiAgICAgICAgdmFyIHNsZiA9IGdldFNlbGYgPyB1bndyYXBUeXBlKGdldFNlbGYsIHNlbGYsIGFyZ3MpIDogaW5mZXIuQU51bGwsIGFzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0QXJncy5sZW5ndGg7ICsraSkgYXMucHVzaCh1bndyYXBUeXBlKGdldEFyZ3NbaV0sIHNlbGYsIGFyZ3MpKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGFuZFJldCA/IG5ldyBpbmZlci5BVmFsIDogaW5mZXIuQU51bGw7XG4gICAgICAgIGNhbGxlZS5wcm9wYWdhdGUobmV3IGluZmVyLklzQ2FsbGVlKHNsZiwgYXMsIG51bGwsIHJlc3VsdCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwgYW5kUmV0KTtcbiAgICB9IGVsc2UgaWYgKG0gPSBlZmZlY3QubWF0Y2goL15jdXN0b20gKFxcUyspXFxzKiguKikvKSkge1xuICAgICAgdmFyIGN1c3RvbUZ1bmMgPSBjdXN0b21GdW5jdGlvbnNbbVsxXV07XG4gICAgICBpZiAoY3VzdG9tRnVuYykgYWRkRWZmZWN0KGZuLCBtWzJdID8gY3VzdG9tRnVuYyhtWzJdKSA6IGN1c3RvbUZ1bmMpO1xuICAgIH0gZWxzZSBpZiAoZWZmZWN0LmluZGV4T2YoXCJjb3B5IFwiKSA9PSAwKSB7XG4gICAgICB2YXIgcCA9IG5ldyBUeXBlUGFyc2VyKGVmZmVjdCwgNSk7XG4gICAgICB2YXIgZ2V0RnJvbSA9IHAucGFyc2VUeXBlKHRydWUpO1xuICAgICAgcC5lYXQoXCIgXCIpO1xuICAgICAgdmFyIGdldFRvID0gcC5wYXJzZVR5cGUodHJ1ZSk7XG4gICAgICBhZGRFZmZlY3QoZm4sIGZ1bmN0aW9uKHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGZyb20gPSB1bndyYXBUeXBlKGdldEZyb20sIHNlbGYsIGFyZ3MpLCB0byA9IHVud3JhcFR5cGUoZ2V0VG8sIHNlbGYsIGFyZ3MpO1xuICAgICAgICBmcm9tLmZvckFsbFByb3BzKGZ1bmN0aW9uKHByb3AsIHZhbCwgbG9jYWwpIHtcbiAgICAgICAgICBpZiAobG9jYWwgJiYgcHJvcCAhPSBcIjxpPlwiKVxuICAgICAgICAgICAgdG8ucHJvcGFnYXRlKG5ldyBpbmZlci5EZWZQcm9wKHByb3AsIHZhbCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVmZmVjdCB0eXBlOiBcIiArIGVmZmVjdCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjdXJyZW50VG9wU2NvcGU7XG5cbiAgdmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24ocGF0aCwgc2NvcGUpIHtcbiAgICB2YXIgY3ggPSBpbmZlci5jeCgpLCBjYWNoZWQgPSBjeC5wYXRoc1twYXRoXSwgb3JpZ1BhdGggPSBwYXRoO1xuICAgIGlmIChjYWNoZWQgIT0gbnVsbCkgcmV0dXJuIGNhY2hlZDtcbiAgICBjeC5wYXRoc1twYXRoXSA9IGluZmVyLkFOdWxsO1xuXG4gICAgdmFyIGJhc2UgPSBzY29wZSB8fCBjdXJyZW50VG9wU2NvcGUgfHwgY3gudG9wU2NvcGU7XG5cbiAgICBpZiAoY3gubG9jYWxEZWZzKSBmb3IgKHZhciBuYW1lIGluIGN4LmxvY2FsRGVmcykge1xuICAgICAgaWYgKHBhdGguaW5kZXhPZihuYW1lKSA9PSAwKSB7XG4gICAgICAgIGlmIChwYXRoID09IG5hbWUpIHJldHVybiBjeC5wYXRoc1twYXRoXSA9IGN4LmxvY2FsRGVmc1twYXRoXTtcbiAgICAgICAgaWYgKHBhdGguY2hhckF0KG5hbWUubGVuZ3RoKSA9PSBcIi5cIikge1xuICAgICAgICAgIGJhc2UgPSBjeC5sb2NhbERlZnNbbmFtZV07XG4gICAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UobmFtZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBkZXNjZW5kUHJvcHMoYmFzZSwgcGF0aC5zcGxpdChcIi5cIikpO1xuICAgIC8vIFVuY29tbWVudCB0aGlzIHRvIGdldCBmZWVkYmFjayBvbiB5b3VyIHBvb3JseSB3cml0dGVuIC5qc29uIGZpbGVzXG4gICAgLy8gaWYgKHJlc3VsdCA9PSBpbmZlci5BTnVsbCkgY29uc29sZS5lcnJvcihcImJhZCBwYXRoOiBcIiArIG9yaWdQYXRoICsgXCIgKFwiICsgY3guY3VyT3JpZ2luICsgXCIpXCIpXG4gICAgY3gucGF0aHNbb3JpZ1BhdGhdID0gcmVzdWx0ID09IGluZmVyLkFOdWxsID8gbnVsbCA6IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlc2NlbmRQcm9wcyhiYXNlLCBwYXJ0cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoICYmIGJhc2UgIT0gaW5mZXIuQU51bGw7ICsraSkge1xuICAgICAgdmFyIHByb3AgPSBwYXJ0c1tpXTtcbiAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PSBcIiFcIikge1xuICAgICAgICBpZiAocHJvcCA9PSBcIiFwcm90b1wiKSB7XG4gICAgICAgICAgYmFzZSA9IChiYXNlIGluc3RhbmNlb2YgaW5mZXIuT2JqICYmIGJhc2UucHJvdG8pIHx8IGluZmVyLkFOdWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmbiA9IGJhc2UuZ2V0RnVuY3Rpb25UeXBlKCk7XG4gICAgICAgICAgaWYgKCFmbikge1xuICAgICAgICAgICAgYmFzZSA9IGluZmVyLkFOdWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PSBcIiFyZXRcIikge1xuICAgICAgICAgICAgYmFzZSA9IGZuLnJldHZhbCAmJiBmbi5yZXR2YWwuZ2V0VHlwZShmYWxzZSkgfHwgaW5mZXIuQU51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcmcgPSBmbi5hcmdzICYmIGZuLmFyZ3NbTnVtYmVyKHByb3Auc2xpY2UoMSkpXTtcbiAgICAgICAgICAgIGJhc2UgPSAoYXJnICYmIGFyZy5nZXRUeXBlKGZhbHNlKSkgfHwgaW5mZXIuQU51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJhc2UgaW5zdGFuY2VvZiBpbmZlci5PYmogJiZcbiAgICAgICAgICAgICAgICAgKHByb3AgPT0gXCJwcm90b3R5cGVcIiAmJiBiYXNlIGluc3RhbmNlb2YgaW5mZXIuRm4gfHwgYmFzZS5oYXNQcm9wKHByb3ApKSkge1xuICAgICAgICB2YXIgcHJvcFZhbCA9IGJhc2UuZ2V0UHJvcChwcm9wKTtcbiAgICAgICAgaWYgKCFwcm9wVmFsIHx8IHByb3BWYWwuaXNFbXB0eSgpKVxuICAgICAgICAgIGJhc2UgPSBpbmZlci5BTnVsbDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGJhc2UgPSBwcm9wVmFsLnR5cGVzWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZSA9IGluZmVyLkFOdWxsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5T2JqKGN0b3IpIHtcbiAgICB2YXIgZW1wdHkgPSBPYmplY3QuY3JlYXRlKGN0b3IucHJvdG90eXBlKTtcbiAgICBlbXB0eS5wcm9wcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZW1wdHkuaXNTaGVsbCA9IHRydWU7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTaW1wbGVBbm5vdGF0aW9uKHNwZWMpIHtcbiAgICBpZiAoIXNwZWNbXCIhdHlwZVwiXSB8fCAvXihmblxcKHxcXFt8XFwrKS8udGVzdChzcGVjW1wiIXR5cGVcIl0pKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzcGVjKVxuICAgICAgaWYgKHByb3AgIT0gXCIhdHlwZVwiICYmIHByb3AgIT0gXCIhZG9jXCIgJiYgcHJvcCAhPSBcIiF1cmxcIiAmJiBwcm9wICE9IFwiIXNwYW5cIiAmJiBwcm9wICE9IFwiIWRhdGFcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFzc09uZShiYXNlLCBzcGVjLCBwYXRoKSB7XG4gICAgaWYgKCFiYXNlKSB7XG4gICAgICB2YXIgdHAgPSBzcGVjW1wiIXR5cGVcIl07XG4gICAgICBpZiAodHApIHtcbiAgICAgICAgaWYgKC9eZm5cXCgvLnRlc3QodHApKSBiYXNlID0gZW1wdHlPYmooaW5mZXIuRm4pO1xuICAgICAgICBlbHNlIGlmICh0cC5jaGFyQXQoMCkgPT0gXCJbXCIpIGJhc2UgPSBlbXB0eU9iaihpbmZlci5BcnIpO1xuICAgICAgICBlbHNlIGlmICh0cC5jaGFyQXQoMCkgPT0gXCIrXCIpIGJhc2UgPSBlbXB0eU9iaihpbmZlci5PYmopO1xuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgIXR5cGUgc3BlYzogXCIgKyB0cCk7XG4gICAgICB9IGVsc2UgaWYgKHNwZWNbXCIhc3RkUHJvdG9cIl0pIHtcbiAgICAgICAgYmFzZSA9IGluZmVyLmN4KCkucHJvdG9zW3NwZWNbXCIhc3RkUHJvdG9cIl1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZSA9IGVtcHR5T2JqKGluZmVyLk9iaik7XG4gICAgICB9XG4gICAgICBiYXNlLm5hbWUgPSBwYXRoO1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3BlYykgaWYgKGhvcChzcGVjLCBuYW1lKSAmJiBuYW1lLmNoYXJDb2RlQXQoMCkgIT0gMzMpIHtcbiAgICAgIHZhciBpbm5lciA9IHNwZWNbbmFtZV07XG4gICAgICBpZiAodHlwZW9mIGlubmVyID09IFwic3RyaW5nXCIgfHwgaXNTaW1wbGVBbm5vdGF0aW9uKGlubmVyKSkgY29udGludWU7XG4gICAgICB2YXIgcHJvcCA9IGJhc2UuZGVmUHJvcChuYW1lKTtcbiAgICAgIHBhc3NPbmUocHJvcC5nZXRPYmpUeXBlKCksIGlubmVyLCBwYXRoID8gcGF0aCArIFwiLlwiICsgbmFtZSA6IG5hbWUpLnByb3BhZ2F0ZShwcm9wKTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICBmdW5jdGlvbiBwYXNzVHdvKGJhc2UsIHNwZWMsIHBhdGgpIHtcbiAgICBpZiAoYmFzZS5pc1NoZWxsKSB7XG4gICAgICBkZWxldGUgYmFzZS5pc1NoZWxsO1xuICAgICAgdmFyIHRwID0gc3BlY1tcIiF0eXBlXCJdO1xuICAgICAgaWYgKHRwKSB7XG4gICAgICAgIHBhcnNlVHlwZSh0cCwgcGF0aCwgYmFzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvdG8gPSBzcGVjW1wiIXByb3RvXCJdICYmIHBhcnNlVHlwZShzcGVjW1wiIXByb3RvXCJdKTtcbiAgICAgICAgaW5mZXIuT2JqLmNhbGwoYmFzZSwgcHJvdG8gaW5zdGFuY2VvZiBpbmZlci5PYmogPyBwcm90byA6IHRydWUsIHBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlZmZlY3RzID0gc3BlY1tcIiFlZmZlY3RzXCJdO1xuICAgIGlmIChlZmZlY3RzICYmIGJhc2UgaW5zdGFuY2VvZiBpbmZlci5GbikgZm9yICh2YXIgaSA9IDA7IGkgPCBlZmZlY3RzLmxlbmd0aDsgKytpKVxuICAgICAgcGFyc2VFZmZlY3QoZWZmZWN0c1tpXSwgYmFzZSk7XG4gICAgY29weUluZm8oc3BlYywgYmFzZSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIGlmIChob3Aoc3BlYywgbmFtZSkgJiYgbmFtZS5jaGFyQ29kZUF0KDApICE9IDMzKSB7XG4gICAgICB2YXIgaW5uZXIgPSBzcGVjW25hbWVdLCBrbm93biA9IGJhc2UuZGVmUHJvcChuYW1lKSwgaW5uZXJQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIG5hbWUgOiBuYW1lO1xuICAgICAgaWYgKHR5cGVvZiBpbm5lciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChrbm93bi5pc0VtcHR5KCkpIHBhcnNlVHlwZShpbm5lciwgaW5uZXJQYXRoKS5wcm9wYWdhdGUoa25vd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFpc1NpbXBsZUFubm90YXRpb24oaW5uZXIpKVxuICAgICAgICAgIHBhc3NUd28oa25vd24uZ2V0T2JqVHlwZSgpLCBpbm5lciwgaW5uZXJQYXRoKTtcbiAgICAgICAgZWxzZSBpZiAoa25vd24uaXNFbXB0eSgpKVxuICAgICAgICAgIHBhcnNlVHlwZShpbm5lcltcIiF0eXBlXCJdLCBpbm5lclBhdGgsIG51bGwsIHRydWUpLnByb3BhZ2F0ZShrbm93bik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGlubmVyW1wiIWRvY1wiXSkga25vd24uZG9jID0gaW5uZXJbXCIhZG9jXCJdO1xuICAgICAgICBpZiAoaW5uZXJbXCIhdXJsXCJdKSBrbm93bi51cmwgPSBpbm5lcltcIiF1cmxcIl07XG4gICAgICAgIGlmIChpbm5lcltcIiFzcGFuXCJdKSBrbm93bi5zcGFuID0gaW5uZXJbXCIhc3BhblwiXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5SW5mbyhzcGVjLCB0eXBlKSB7XG4gICAgaWYgKHNwZWNbXCIhZG9jXCJdKSB0eXBlLmRvYyA9IHNwZWNbXCIhZG9jXCJdO1xuICAgIGlmIChzcGVjW1wiIXVybFwiXSkgdHlwZS51cmwgPSBzcGVjW1wiIXVybFwiXTtcbiAgICBpZiAoc3BlY1tcIiFzcGFuXCJdKSB0eXBlLnNwYW4gPSBzcGVjW1wiIXNwYW5cIl07XG4gICAgaWYgKHNwZWNbXCIhZGF0YVwiXSkgdHlwZS5tZXRhRGF0YSA9IHNwZWNbXCIhZGF0YVwiXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvTG9hZEVudmlyb25tZW50KGRhdGEsIHNjb3BlKSB7XG4gICAgdmFyIGN4ID0gaW5mZXIuY3goKSwgc2VydmVyID0gY3gucGFyZW50O1xuXG4gICAgaW5mZXIuYWRkT3JpZ2luKGN4LmN1ck9yaWdpbiA9IGRhdGFbXCIhbmFtZVwiXSB8fCBcImVudiNcIiArIGN4Lm9yaWdpbnMubGVuZ3RoKTtcbiAgICBjeC5sb2NhbERlZnMgPSBjeC5kZWZpbml0aW9uc1tjeC5jdXJPcmlnaW5dID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGlmIChzZXJ2ZXIpIHNlcnZlci5zaWduYWwoXCJwcmVMb2FkRGVmXCIsIGRhdGEpO1xuXG4gICAgcGFzc09uZShzY29wZSwgZGF0YSk7XG5cbiAgICB2YXIgZGVmID0gZGF0YVtcIiFkZWZpbmVcIl07XG4gICAgaWYgKGRlZikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBkZWYpIHtcbiAgICAgICAgdmFyIHNwZWMgPSBkZWZbbmFtZV07XG4gICAgICAgIGN4LmxvY2FsRGVmc1tuYW1lXSA9IHR5cGVvZiBzcGVjID09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgoc3BlYykgOiBwYXNzT25lKG51bGwsIHNwZWMsIG5hbWUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBkZWYpIHtcbiAgICAgICAgdmFyIHNwZWMgPSBkZWZbbmFtZV07XG4gICAgICAgIGlmICh0eXBlb2Ygc3BlYyAhPSBcInN0cmluZ1wiKSBwYXNzVHdvKGN4LmxvY2FsRGVmc1tuYW1lXSwgZGVmW25hbWVdLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXNzVHdvKHNjb3BlLCBkYXRhKTtcblxuICAgIGlmIChzZXJ2ZXIpIHNlcnZlci5zaWduYWwoXCJwb3N0TG9hZERlZlwiLCBkYXRhKTtcblxuICAgIGN4LmN1ck9yaWdpbiA9IGN4LmxvY2FsRGVmcyA9IG51bGw7XG4gIH1cblxuICBleHBvcnRzLmxvYWQgPSBmdW5jdGlvbihkYXRhLCBzY29wZSkge1xuICAgIGlmICghc2NvcGUpIHNjb3BlID0gaW5mZXIuY3goKS50b3BTY29wZTtcbiAgICB2YXIgb2xkU2NvcGUgPSBjdXJyZW50VG9wU2NvcGU7XG4gICAgY3VycmVudFRvcFNjb3BlID0gc2NvcGU7XG4gICAgdHJ5IHtcbiAgICAgIGRvTG9hZEVudmlyb25tZW50KGRhdGEsIHNjb3BlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFRvcFNjb3BlID0gb2xkU2NvcGU7XG4gICAgfVxuICB9O1xuXG4gIGV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbihkYXRhLCBvcmlnaW4sIHBhdGgpIHtcbiAgICB2YXIgY3ggPSBpbmZlci5jeCgpO1xuICAgIGlmIChvcmlnaW4pIHtcbiAgICAgIGN4Lm9yaWdpbiA9IG9yaWdpbjtcbiAgICAgIGN4LmxvY2FsRGVmcyA9IGN4LmRlZmluaXRpb25zW29yaWdpbl07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gcGFyc2VUeXBlKGRhdGEsIHBhdGgpO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gcGFzc1R3byhwYXNzT25lKG51bGwsIGRhdGEsIHBhdGgpLCBkYXRhLCBwYXRoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKG9yaWdpbikgY3gub3JpZ2luID0gY3gubG9jYWxEZWZzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gVXNlZCB0byByZWdpc3RlciBjdXN0b20gbG9naWMgZm9yIG1vcmUgaW52b2x2ZWQgZWZmZWN0IG9yIHR5cGVcbiAgLy8gY29tcHV0YXRpb24uXG4gIHZhciBjdXN0b21GdW5jdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpbmZlci5yZWdpc3RlckZ1bmN0aW9uID0gZnVuY3Rpb24obmFtZSwgZikgeyBjdXN0b21GdW5jdGlvbnNbbmFtZV0gPSBmOyB9O1xuXG4gIHZhciBJc0NyZWF0ZWQgPSBpbmZlci5jb25zdHJhaW50KHtcbiAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGNyZWF0ZWQsIHRhcmdldCwgc3BlYykge1xuICAgICAgdGhpcy5jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5zcGVjID0gc3BlYztcbiAgICB9LFxuICAgIGFkZFR5cGU6IGZ1bmN0aW9uKHRwKSB7XG4gICAgICBpZiAodHAgaW5zdGFuY2VvZiBpbmZlci5PYmogJiYgdGhpcy5jcmVhdGVkKysgPCA1KSB7XG4gICAgICAgIHZhciBkZXJpdmVkID0gbmV3IGluZmVyLk9iaih0cCksIHNwZWMgPSB0aGlzLnNwZWM7XG4gICAgICAgIGlmIChzcGVjIGluc3RhbmNlb2YgaW5mZXIuQVZhbCkgc3BlYyA9IHNwZWMuZ2V0T2JqVHlwZShmYWxzZSk7XG4gICAgICAgIGlmIChzcGVjIGluc3RhbmNlb2YgaW5mZXIuT2JqKSBmb3IgKHZhciBwcm9wIGluIHNwZWMucHJvcHMpIHtcbiAgICAgICAgICB2YXIgY3VyID0gc3BlYy5wcm9wc1twcm9wXS50eXBlc1swXTtcbiAgICAgICAgICB2YXIgcCA9IGRlcml2ZWQuZGVmUHJvcChwcm9wKTtcbiAgICAgICAgICBpZiAoY3VyICYmIGN1ciBpbnN0YW5jZW9mIGluZmVyLk9iaiAmJiBjdXIucHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2dHAgPSBjdXIucHJvcHMudmFsdWUuZ2V0VHlwZShmYWxzZSk7XG4gICAgICAgICAgICBpZiAodnRwKSBwLmFkZFR5cGUodnRwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YXJnZXQuYWRkVHlwZShkZXJpdmVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGluZmVyLnJlZ2lzdGVyRnVuY3Rpb24oXCJPYmplY3RfY3JlYXRlXCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzLCBhcmdOb2Rlcykge1xuICAgIGlmIChhcmdOb2RlcyAmJiBhcmdOb2Rlcy5sZW5ndGggJiYgYXJnTm9kZXNbMF0udHlwZSA9PSBcIkxpdGVyYWxcIiAmJiBhcmdOb2Rlc1swXS52YWx1ZSA9PSBudWxsKVxuICAgICAgcmV0dXJuIG5ldyBpbmZlci5PYmooKTtcblxuICAgIHZhciByZXN1bHQgPSBuZXcgaW5mZXIuQVZhbDtcbiAgICBpZiAoYXJnc1swXSkgYXJnc1swXS5wcm9wYWdhdGUobmV3IElzQ3JlYXRlZCgwLCByZXN1bHQsIGFyZ3NbMV0pKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICB2YXIgUHJvcFNwZWMgPSBpbmZlci5jb25zdHJhaW50KHtcbiAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRhcmdldCkgeyB0aGlzLnRhcmdldCA9IHRhcmdldDsgfSxcbiAgICBhZGRUeXBlOiBmdW5jdGlvbih0cCkge1xuICAgICAgaWYgKCEodHAgaW5zdGFuY2VvZiBpbmZlci5PYmopKSByZXR1cm47XG4gICAgICBpZiAodHAuaGFzUHJvcChcInZhbHVlXCIpKVxuICAgICAgICB0cC5nZXRQcm9wKFwidmFsdWVcIikucHJvcGFnYXRlKHRoaXMudGFyZ2V0KTtcbiAgICAgIGVsc2UgaWYgKHRwLmhhc1Byb3AoXCJnZXRcIikpXG4gICAgICAgIHRwLmdldFByb3AoXCJnZXRcIikucHJvcGFnYXRlKG5ldyBpbmZlci5Jc0NhbGxlZShpbmZlci5BTnVsbCwgW10sIG51bGwsIHRoaXMudGFyZ2V0KSk7XG4gICAgfVxuICB9KTtcblxuICBpbmZlci5yZWdpc3RlckZ1bmN0aW9uKFwiT2JqZWN0X2RlZmluZVByb3BlcnR5XCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzLCBhcmdOb2Rlcykge1xuICAgIGlmIChhcmdOb2RlcyAmJiBhcmdOb2Rlcy5sZW5ndGggPj0gMyAmJiBhcmdOb2Rlc1sxXS50eXBlID09IFwiTGl0ZXJhbFwiICYmXG4gICAgICAgIHR5cGVvZiBhcmdOb2Rlc1sxXS52YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YXIgb2JqID0gYXJnc1swXSwgY29ubmVjdCA9IG5ldyBpbmZlci5BVmFsO1xuICAgICAgb2JqLnByb3BhZ2F0ZShuZXcgaW5mZXIuRGVmUHJvcChhcmdOb2Rlc1sxXS52YWx1ZSwgY29ubmVjdCwgYXJnTm9kZXNbMV0pKTtcbiAgICAgIGFyZ3NbMl0ucHJvcGFnYXRlKG5ldyBQcm9wU3BlYyhjb25uZWN0KSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZlci5BTnVsbDtcbiAgfSk7XG5cbiAgaW5mZXIucmVnaXN0ZXJGdW5jdGlvbihcIk9iamVjdF9kZWZpbmVQcm9wZXJ0aWVzXCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzLCBhcmdOb2Rlcykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA+PSAyKSB7XG4gICAgICB2YXIgb2JqID0gYXJnc1swXTtcbiAgICAgIGFyZ3NbMV0uZm9yQWxsUHJvcHMoZnVuY3Rpb24ocHJvcCwgdmFsLCBsb2NhbCkge1xuICAgICAgICBpZiAoIWxvY2FsKSByZXR1cm47XG4gICAgICAgIHZhciBjb25uZWN0ID0gbmV3IGluZmVyLkFWYWw7XG4gICAgICAgIG9iai5wcm9wYWdhdGUobmV3IGluZmVyLkRlZlByb3AocHJvcCwgY29ubmVjdCwgYXJnTm9kZXMgJiYgYXJnTm9kZXNbMV0pKTtcbiAgICAgICAgdmFsLnByb3BhZ2F0ZShuZXcgUHJvcFNwZWMoY29ubmVjdCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZlci5BTnVsbDtcbiAgfSk7XG5cbiAgdmFyIElzQm91bmQgPSBpbmZlci5jb25zdHJhaW50KHtcbiAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHNlbGYsIGFyZ3MsIHRhcmdldCkge1xuICAgICAgdGhpcy5zZWxmID0gc2VsZjsgdGhpcy5hcmdzID0gYXJnczsgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgfSxcbiAgICBhZGRUeXBlOiBmdW5jdGlvbih0cCkge1xuICAgICAgaWYgKCEodHAgaW5zdGFuY2VvZiBpbmZlci5GbikpIHJldHVybjtcbiAgICAgIHRoaXMudGFyZ2V0LmFkZFR5cGUobmV3IGluZmVyLkZuKHRwLm5hbWUsIGluZmVyLkFOdWxsLCB0cC5hcmdzLnNsaWNlKHRoaXMuYXJncy5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHAuYXJnTmFtZXMuc2xpY2UodGhpcy5hcmdzLmxlbmd0aCksIHRwLnJldHZhbCwgdHAuZ2VuZXJhdG9yKSk7XG4gICAgICB0aGlzLnNlbGYucHJvcGFnYXRlKHRwLnNlbGYpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1pbih0cC5hcmdzLmxlbmd0aCwgdGhpcy5hcmdzLmxlbmd0aCk7ICsraSlcbiAgICAgICAgdGhpcy5hcmdzW2ldLnByb3BhZ2F0ZSh0cC5hcmdzW2ldKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluZmVyLnJlZ2lzdGVyRnVuY3Rpb24oXCJGdW5jdGlvbl9iaW5kXCIsIGZ1bmN0aW9uKHNlbGYsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSByZXR1cm4gaW5mZXIuQU51bGw7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBpbmZlci5BVmFsO1xuICAgIHNlbGYucHJvcGFnYXRlKG5ldyBJc0JvdW5kKGFyZ3NbMF0sIGFyZ3Muc2xpY2UoMSksIHJlc3VsdCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIGluZmVyLnJlZ2lzdGVyRnVuY3Rpb24oXCJBcnJheV9jdG9yXCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzKSB7XG4gICAgdmFyIGFyciA9IG5ldyBpbmZlci5BcnI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9IDEgfHwgIWFyZ3NbMF0uaGFzVHlwZShpbmZlci5jeCgpLm51bSkpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYXJyLmdldFByb3AoXCI8aT5cIik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIGFyZ3NbaV0ucHJvcGFnYXRlKGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9KTtcblxuICBmdW5jdGlvbiBtYWtlUHJvbWlzZSgpIHtcbiAgICB2YXIgZGVmcyA9IGluZmVyLmN4KCkuZGVmaW5pdGlvbnMuZWNtYXNjcmlwdDtcbiAgICByZXR1cm4gZGVmcyAmJiBuZXcgaW5mZXIuT2JqKGRlZnNbXCJQcm9taXNlLnByb3RvdHlwZVwiXSk7XG4gIH1cblxuICBpbmZlci5yZWdpc3RlckZ1bmN0aW9uKFwiUHJvbWlzZV9jdG9yXCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzLCBhcmdOb2Rlcykge1xuICAgIHZhciBzZWxmID0gbWFrZVByb21pc2UoKTtcbiAgICBpZiAoIXNlbGYgfHwgYXJncy5sZW5ndGggPCAxKSByZXR1cm4gaW5mZXIuQU51bGw7XG4gICAgdmFyIHZhbFByb3AgPSBzZWxmLmRlZlByb3AoXCI6dFwiLCBhcmdOb2RlcyAmJiBhcmdOb2Rlc1swXSk7XG4gICAgdmFyIHZhbEFyZyA9IG5ldyBpbmZlci5BVmFsO1xuICAgIHZhbEFyZy5wcm9wYWdhdGUodmFsUHJvcCk7XG4gICAgdmFyIGV4ZWMgPSBuZXcgaW5mZXIuRm4oXCJleGVjdXRlXCIsIGluZmVyLkFOdWxsLCBbdmFsQXJnXSwgW1widmFsdWVcIl0sIGluZmVyLkFOdWxsKTtcbiAgICB2YXIgcmVqZWN0ID0gaW5mZXIuY3goKS5kZWZpbml0aW9ucy5lY21hc2NyaXB0LlByb21pc2VfcmVqZWN0O1xuICAgIGFyZ3NbMF0ucHJvcGFnYXRlKG5ldyBpbmZlci5Jc0NhbGxlZShpbmZlci5BTnVsbCwgW2V4ZWMsIHJlamVjdF0sIG51bGwsIGluZmVyLkFOdWxsKSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0pO1xuXG4gIC8vIERlZmluaXRpb24gZm9yIFByb21pc2UucmVzb2x2ZSgpXG4gIC8vIFRoZSBiZWhhdmlvciBpcyBkaWZmZXJlbnQgZm9yIFByb21pc2UgYW5kIG5vbi1Qcm9taXNlIGFyZ3VtZW50cywgc28gd2VcbiAgLy8gbmVlZCBhIGN1c3RvbSBkZWZpbml0aW9uIHRvIGhhbmRsZSB0aGUgZGlmZmVyZW50IGNhc2VzIHByb3Blcmx5LlxuICBpbmZlci5yZWdpc3RlckZ1bmN0aW9uKFwiUHJvbWlzZV9yZXNvbHZlXCIsIGZ1bmN0aW9uKF9zZWxmLCBhcmdzLCBhcmdOb2Rlcykge1xuICAgIHZhciBzZWxmID0gbWFrZVByb21pc2UoKTtcbiAgICBpZiAoIXNlbGYpIHJldHVybiBpbmZlci5BTnVsbDtcbiAgICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICAgIHZhciB2YWxQcm9wID0gc2VsZi5kZWZQcm9wKFwiOnRcIiwgYXJnTm9kZXMgJiYgYXJnTm9kZXNbMF0pO1xuICAgICAgdmFyIHZhbEFyZyA9IG5ldyBpbmZlci5BVmFsO1xuICAgICAgdmFsQXJnLnByb3BhZ2F0ZSh2YWxQcm9wKTtcbiAgICAgIGFyZ3NbMF0ucHJvcGFnYXRlKG5ldyBQcm9taXNlUmVzb2x2ZXNUbyh2YWxBcmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0pO1xuXG4gIHZhciBQcm9taXNlUmVzb2x2ZXNUbyA9IGluZmVyLmNvbnN0cmFpbnQoe1xuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24ob3V0cHV0KSB7IHRoaXMub3V0cHV0ID0gb3V0cHV0OyB9LFxuICAgIGFkZFR5cGU6IGZ1bmN0aW9uKHRwKSB7XG4gICAgICBpZiAodHAuY29uc3RydWN0b3IgPT0gaW5mZXIuT2JqICYmIHRwLm5hbWUgPT0gXCJQcm9taXNlXCIgJiYgdHAuaGFzUHJvcChcIjp0XCIpKVxuICAgICAgICB0cC5nZXRQcm9wKFwiOnRcIikucHJvcGFnYXRlKHRoaXMub3V0cHV0KTtcbiAgICAgIGVsc2VcbiAgICAgICAgdHAucHJvcGFnYXRlKHRoaXMub3V0cHV0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBXR19QUk9NSVNFX0tFRVBfVkFMVUUgPSA1MDtcblxuICBpbmZlci5yZWdpc3RlckZ1bmN0aW9uKFwiUHJvbWlzZV90aGVuXCIsIGZ1bmN0aW9uKHNlbGYsIGFyZ3MsIGFyZ05vZGVzKSB7XG4gICAgdmFyIGZuID0gYXJncy5sZW5ndGggJiYgYXJnc1swXS5nZXRGdW5jdGlvblR5cGUoKTtcbiAgICB2YXIgZGVmcyA9IGluZmVyLmN4KCkuZGVmaW5pdGlvbnMuZWNtYXNjcmlwdDtcbiAgICBpZiAoIWZuIHx8ICFkZWZzKSByZXR1cm4gc2VsZjtcblxuICAgIHZhciByZXN1bHQgPSBuZXcgaW5mZXIuT2JqKGRlZnNbXCJQcm9taXNlLnByb3RvdHlwZVwiXSk7XG4gICAgdmFyIHZhbHVlID0gcmVzdWx0LmRlZlByb3AoXCI6dFwiLCBhcmdOb2RlcyAmJiBhcmdOb2Rlc1swXSksIHR5O1xuICAgIGlmIChmbi5yZXR2YWwuaXNFbXB0eSgpICYmICh0eSA9IHNlbGYuZ2V0VHlwZSgpKSBpbnN0YW5jZW9mIGluZmVyLk9iaiAmJiB0eS5oYXNQcm9wKFwiOnRcIikpXG4gICAgICB0eS5nZXRQcm9wKFwiOnRcIikucHJvcGFnYXRlKHZhbHVlLCBXR19QUk9NSVNFX0tFRVBfVkFMVUUpO1xuICAgIGZuLnJldHZhbC5wcm9wYWdhdGUobmV3IFByb21pc2VSZXNvbHZlc1RvKHZhbHVlKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgaW5mZXIucmVnaXN0ZXJGdW5jdGlvbihcImdldE93blByb3BlcnR5U3ltYm9sc1wiLCBmdW5jdGlvbihfc2VsZiwgYXJncykge1xuICAgIGlmICghYXJncy5sZW5ndGgpIHJldHVybiBpbmZlci5BTnVsbDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IGluZmVyLkFWYWw7XG4gICAgYXJnc1swXS5mb3JBbGxQcm9wcyhmdW5jdGlvbihwcm9wLCBfdmFsLCBsb2NhbCkge1xuICAgICAgaWYgKGxvY2FsICYmIHByb3AuY2hhckF0KDApID09IFwiOlwiKSByZXN1bHQuYWRkVHlwZShpbmZlci5nZXRTeW1ib2wocHJvcC5zbGljZSgxKSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIGluZmVyLnJlZ2lzdGVyRnVuY3Rpb24oXCJnZXRTeW1ib2xcIiwgZnVuY3Rpb24oX3NlbGYsIF9hcmdzLCBhcmdOb2Rlcykge1xuICAgIGlmIChhcmdOb2RlcyAmJiBhcmdOb2Rlcy5sZW5ndGggJiYgYXJnTm9kZXNbMF0udHlwZSA9PSBcIkxpdGVyYWxcIiAmJiB0eXBlb2YgYXJnTm9kZXNbMF0udmFsdWUgPT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBpbmZlci5nZXRTeW1ib2woYXJnTm9kZXNbMF0udmFsdWUpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBpbmZlci5BTnVsbDtcbiAgfSk7XG5cbiAgcmV0dXJuIGV4cG9ydHM7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/tern/lib/def.js\n");

/***/ }),

/***/ "./node_modules/tern/lib/infer.js":
/*!****************************************!*\
  !*** ./node_modules/tern/lib/infer.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Main type inference engine\n\n// Walks an AST, building up a graph of abstract values and constraints\n// that cause types to flow from one node to another. Also defines a\n// number of utilities for accessing ASTs and scopes.\n\n// Analysis is done in a context, which is tracked by the dynamically\n// bound cx variable. Use withContext to set the current context.\n\n// For memory-saving reasons, individual types export an interface\n// similar to abstract values (which can hold multiple types), and can\n// thus be used in place abstract values that only ever contain a\n// single type.\n\n(function(root, mod) {\n  if (true) // CommonJS\n    return mod(exports, __webpack_require__(/*! acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.mjs\"), __webpack_require__(/*! acorn-loose */ \"./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.mjs\"), __webpack_require__(/*! acorn-walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs\"),\n               __webpack_require__(/*! ./def */ \"./node_modules/tern/lib/def.js\"), __webpack_require__(/*! ./signal */ \"./node_modules/tern/lib/signal.js\"));\n  if (true) // AMD\n    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! acorn/dist/acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.js\"), __webpack_require__(/*! acorn-loose/dist/acorn-loose */ \"./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.js\"), __webpack_require__(/*! acorn-walk/dist/walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.js\"), __webpack_require__(/*! ./def */ \"./node_modules/tern/lib/def.js\"), __webpack_require__(/*! ./signal */ \"./node_modules/tern/lib/signal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod(root.tern || (root.tern = {}), acorn, acorn.loose, acorn.walk, tern.def, tern.signal); // Plain browser env\n})(this, function(exports, acorn, acorn_loose, walk, def, signal) {\n  \"use strict\";\n\n  var toString = exports.toString = function(type, maxDepth, parent) {\n    if (!type || type == parent || maxDepth && maxDepth < -3) return \"?\";\n    return type.toString(maxDepth, parent);\n  };\n\n  // A variant of AVal used for unknown, dead-end values. Also serves\n  // as prototype for AVals, Types, and Constraints because it\n  // implements 'empty' versions of all the methods that the code\n  // expects.\n  var ANull = exports.ANull = signal.mixin({\n    addType: function() {},\n    propagate: function() {},\n    getProp: function() { return ANull; },\n    forAllProps: function() {},\n    hasType: function() { return false; },\n    isEmpty: function() { return true; },\n    getFunctionType: function() {},\n    getObjType: function() {},\n    getSymbolType: function() {},\n    getType: function() {},\n    gatherProperties: function() {},\n    propagatesTo: function() {},\n    typeHint: function() {},\n    propHint: function() {},\n    toString: function() { return \"?\"; }\n  });\n\n  function extend(proto, props) {\n    var obj = Object.create(proto);\n    if (props) for (var prop in props) obj[prop] = props[prop];\n    return obj;\n  }\n\n  // ABSTRACT VALUES\n\n  var WG_DEFAULT = 100, WG_NEW_INSTANCE = 90, WG_MADEUP_PROTO = 10,\n      WG_MULTI_MEMBER = 6, WG_CATCH_ERROR = 6,\n      WG_PHANTOM_OBJ = 1,\n      WG_GLOBAL_THIS = 90, WG_SPECULATIVE_THIS = 2, WG_SPECULATIVE_PROTO_THIS = 4;\n\n  var AVal = exports.AVal = function() {\n    this.types = [];\n    this.forward = null;\n    this.maxWeight = 0;\n  };\n  AVal.prototype = extend(ANull, {\n    addType: function(type, weight) {\n      weight = weight || WG_DEFAULT;\n      if (this.maxWeight < weight) {\n        this.maxWeight = weight;\n        if (this.types.length == 1 && this.types[0] == type) return;\n        this.types.length = 0;\n      } else if (this.maxWeight > weight || this.types.indexOf(type) > -1) {\n        return;\n      }\n\n      this.signal(\"addType\", type);\n      this.types.push(type);\n      var forward = this.forward;\n      if (forward) withWorklist(function(add) {\n        for (var i = 0; i < forward.length; ++i) add(type, forward[i], weight);\n      });\n    },\n\n    propagate: function(target, weight) {\n      if (target == ANull || (target instanceof Type && this.forward && this.forward.length > 2)) return;\n      if (weight && weight != WG_DEFAULT) target = new Muffle(target, weight);\n      (this.forward || (this.forward = [])).push(target);\n      var types = this.types;\n      if (types.length) withWorklist(function(add) {\n        for (var i = 0; i < types.length; ++i) add(types[i], target, weight);\n      });\n    },\n\n    getProp: function(prop) {\n      if (ignoredProp(prop)) return ANull;\n      var found = (this.props || (this.props = Object.create(null)))[prop];\n      if (!found) {\n        found = this.props[prop] = new AVal;\n        this.propagate(new GetProp(prop, found));\n      }\n      return found;\n    },\n\n    forAllProps: function(c) {\n      this.propagate(new ForAllProps(c));\n    },\n\n    hasType: function(type) {\n      return this.types.indexOf(type) > -1;\n    },\n    isEmpty: function() { return this.types.length === 0; },\n    getFunctionType: function() {\n      for (var i = this.types.length - 1; i >= 0; --i)\n        if (this.types[i] instanceof Fn) return this.types[i];\n    },\n    getObjType: function() {\n      var seen = null;\n      for (var i = this.types.length - 1; i >= 0; --i) {\n        var type = this.types[i];\n        if (!(type instanceof Obj)) continue;\n        if (type.name) return type;\n        if (!seen) seen = type;\n      }\n      return seen;\n    },\n\n    getSymbolType: function() {\n      for (var i = this.types.length - 1; i >= 0; --i)\n        if (this.types[i] instanceof Sym) return this.types[i];\n    },\n\n    getType: function(guess) {\n      if (this.types.length === 0 && guess !== false) return this.makeupType();\n      if (this.types.length === 1) return this.types[0];\n      return canonicalType(this.types);\n    },\n\n    toString: function(maxDepth, parent) {\n      if (this.types.length == 0) return toString(this.makeupType(), maxDepth, parent);\n      if (this.types.length == 1) return toString(this.types[0], maxDepth, parent);\n      var simplified = simplifyTypes(this.types);\n      if (simplified.length > 2) return \"?\";\n      return simplified.map(function(tp) { return toString(tp, maxDepth, parent); }).join(\"|\");\n    },\n\n    makeupPropType: function(obj) {\n      var propName = this.propertyName;\n\n      var protoProp = obj.proto && obj.proto.hasProp(propName);\n      if (protoProp) {\n        var fromProto = protoProp.getType();\n        if (fromProto) return fromProto;\n      }\n\n      if (propName != \"<i>\") {\n        var computedProp = obj.hasProp(\"<i>\");\n        if (computedProp) return computedProp.getType();\n      } else if (obj.props[\"<i>\"] != this) {\n        for (var prop in obj.props) {\n          var val = obj.props[prop];\n          if (!val.isEmpty()) return val.getType();\n        }\n      }\n    },\n\n    makeupType: function() {\n      var computed = this.propertyOf && this.makeupPropType(this.propertyOf);\n      if (computed) return computed;\n\n      if (!this.forward) return null;\n      for (var i = this.forward.length - 1; i >= 0; --i) {\n        var hint = this.forward[i].typeHint();\n        if (hint && !hint.isEmpty()) {guessing = true; return hint;}\n      }\n\n      var props = Object.create(null), foundProp = null;\n      for (var i = 0; i < this.forward.length; ++i) {\n        var prop = this.forward[i].propHint();\n        if (prop && prop != \"length\" && prop != \"<i>\" && prop != \"✖\" && prop != cx.completingProperty) {\n          props[prop] = true;\n          foundProp = prop;\n        }\n      }\n      if (!foundProp) return null;\n\n      var objs = objsWithProp(foundProp);\n      if (objs) {\n        var matches = [];\n        search: for (var i = 0; i < objs.length; ++i) {\n          var obj = objs[i];\n          for (var prop in props) if (!obj.hasProp(prop)) continue search;\n          if (obj.hasCtor) obj = getInstance(obj);\n          matches.push(obj);\n        }\n        var canon = canonicalType(matches);\n        if (canon) {guessing = true; return canon;}\n      }\n    },\n\n    typeHint: function() { return this.types.length ? this.getType() : null; },\n    propagatesTo: function() { return this; },\n\n    gatherProperties: function(f, depth) {\n      for (var i = 0; i < this.types.length; ++i)\n        this.types[i].gatherProperties(f, depth);\n    },\n\n    guessProperties: function(f) {\n      if (this.forward) for (var i = 0; i < this.forward.length; ++i) {\n        var prop = this.forward[i].propHint();\n        if (prop) f(prop, null, 0);\n      }\n      var guessed = this.makeupType();\n      if (guessed) guessed.gatherProperties(f);\n    }\n  });\n\n  function similarAVal(a, b, depth) {\n    var typeA = a.getType(false), typeB = b.getType(false);\n    if (!typeA || !typeB) return true;\n    return similarType(typeA, typeB, depth);\n  }\n\n  function similarType(a, b, depth) {\n    if (!a || depth >= 5) return b;\n    if (!a || a == b) return a;\n    if (!b) return a;\n    if (a.constructor != b.constructor) return false;\n    if (a.constructor == Arr) {\n      var innerA = a.getProp(\"<i>\").getType(false);\n      if (!innerA) return b;\n      var innerB = b.getProp(\"<i>\").getType(false);\n      if (!innerB || similarType(innerA, innerB, depth + 1)) return b;\n    } else if (a.constructor == Obj) {\n      var propsA = 0, propsB = 0, same = 0;\n      for (var prop in a.props) {\n        propsA++;\n        if (prop in b.props && similarAVal(a.props[prop], b.props[prop], depth + 1))\n          same++;\n      }\n      for (var prop in b.props) propsB++;\n      if (propsA && propsB && same < Math.max(propsA, propsB) / 2) return false;\n      return propsA > propsB ? a : b;\n    } else if (a.constructor == Fn) {\n      if (a.args.length != b.args.length ||\n          !a.args.every(function(tp, i) { return similarAVal(tp, b.args[i], depth + 1); }) ||\n          !similarAVal(a.retval, b.retval, depth + 1) || !similarAVal(a.self, b.self, depth + 1))\n        return false;\n      return a;\n    } else {\n      return false;\n    }\n  }\n\n  var simplifyTypes = exports.simplifyTypes = function(types) {\n    var found = [];\n    outer: for (var i = 0; i < types.length; ++i) {\n      var tp = types[i];\n      for (var j = 0; j < found.length; j++) {\n        var similar = similarType(tp, found[j], 0);\n        if (similar) {\n          found[j] = similar;\n          continue outer;\n        }\n      }\n      found.push(tp);\n    }\n    return found;\n  };\n\n  function canonicalType(types) {\n    var arrays = 0, fns = 0, objs = 0, prim = null;\n    for (var i = 0; i < types.length; ++i) {\n      var tp = types[i];\n      if (tp instanceof Arr) ++arrays;\n      else if (tp instanceof Fn) ++fns;\n      else if (tp instanceof Obj) ++objs;\n      else if (tp instanceof Prim) {\n        if (prim && tp.name != prim.name) return null;\n        prim = tp;\n      }\n    }\n    var kinds = (arrays && 1) + (fns && 1) + (objs && 1) + (prim && 1);\n    if (kinds > 1) return null;\n    if (prim) return prim;\n\n    var maxScore = 0, maxTp = null;\n    for (var i = 0; i < types.length; ++i) {\n      var tp = types[i], score = 0;\n      if (arrays) {\n        score = tp.getProp(\"<i>\").isEmpty() ? 1 : 2;\n      } else if (fns) {\n        score = 1;\n        for (var j = 0; j < tp.args.length; ++j) if (!tp.args[j].isEmpty()) ++score;\n        if (!tp.retval.isEmpty()) ++score;\n      } else if (objs) {\n        score = tp.name ? 100 : 2;\n      }\n      if (score >= maxScore) { maxScore = score; maxTp = tp; }\n    }\n    return maxTp;\n  }\n\n  // PROPAGATION STRATEGIES\n\n  var constraint = exports.constraint = function(methods) {\n    var ctor = function() {\n      this.origin = cx.curOrigin;\n      this.construct.apply(this, arguments);\n    };\n    ctor.prototype = Object.create(ANull);\n    for (var m in methods) if (methods.hasOwnProperty(m)) ctor.prototype[m] = methods[m];\n    return ctor;\n  };\n\n  var GetProp = constraint({\n    construct: function(prop, target) {\n      this.prop = prop; this.target = target;\n    },\n    addType: function(type, weight) {\n      if (type.getProp)\n        type.getProp(this.prop).propagate(this.target, weight);\n    },\n    propHint: function() { return this.prop; },\n    propagatesTo: function() {\n      if (this.prop == \"<i>\" || !/[^\\w_]/.test(this.prop))\n        return {target: this.target, pathExt: \".\" + this.prop};\n    }\n  });\n\n  var DefProp = exports.PropHasSubset = exports.DefProp = constraint({\n    construct: function(prop, type, originNode) {\n      this.prop = prop; this.type = type; this.originNode = originNode;\n    },\n    addType: function(type, weight) {\n      if (!(type instanceof Obj)) return;\n      var prop = type.defProp(this.prop, this.originNode);\n      if (!prop.origin) prop.origin = this.origin;\n      this.type.propagate(prop, weight);\n    },\n    propHint: function() { return this.prop; }\n  });\n\n  var ForAllProps = constraint({\n    construct: function(c) { this.c = c; },\n    addType: function(type) {\n      if (!(type instanceof Obj)) return;\n      type.forAllProps(this.c);\n    }\n  });\n\n  function withDisabledComputing(fn, body) {\n    cx.disabledComputing = {fn: fn, prev: cx.disabledComputing};\n    var result = body();\n    cx.disabledComputing = cx.disabledComputing.prev;\n    return result;\n  }\n  var IsCallee = exports.IsCallee = constraint({\n    construct: function(self, args, argNodes, retval) {\n      this.self = self; this.args = args; this.argNodes = argNodes; this.retval = retval;\n      this.disabled = cx.disabledComputing;\n    },\n    addType: function(fn, weight) {\n      if (!(fn instanceof Fn)) return;\n      for (var i = 0; i < this.args.length; ++i) {\n        if (i < fn.args.length) this.args[i].propagate(fn.args[i], weight);\n        if (fn.arguments) this.args[i].propagate(fn.arguments, weight);\n      }\n      if (!fn.isArrowFn())\n        this.self.propagate(fn.self, this.self == cx.topScope ? WG_GLOBAL_THIS : weight);\n      var compute = fn.computeRet, result = fn.retval;\n      if (compute) for (var d = this.disabled; d; d = d.prev)\n        if (d.fn == fn || fn.originNode && d.fn.originNode == fn.originNode) compute = null;\n      if (compute) {\n        var old = cx.disabledComputing;\n        cx.disabledComputing = this.disabled;\n        result = compute(this.self, this.args, this.argNodes);\n        cx.disabledComputing = old;\n      }\n      if (fn.async && !fn.generator) {\n        var tp = result.getType();\n        if (!(tp && tp.constructor == Obj && tp.name == \"Promise\")) {\n          var defs = cx.definitions.ecmascript;\n          var rtnval = defs && new Obj(defs[\"Promise.prototype\"]);\n          if (rtnval) {\n            rtnval.getType().propagate(new DefProp(':t', result));\n            result = rtnval;            \n          }\n        }\n      }\n      maybeIterator(fn, result).propagate(this.retval, weight);\n    },\n    typeHint: function() {\n      var names = [];\n      for (var i = 0; i < this.args.length; ++i) names.push(\"?\");\n      return new Fn(null, this.self, this.args, names, ANull);\n    },\n    propagatesTo: function() {\n      return {target: this.retval, pathExt: \".!ret\"};\n    }\n  });\n\n  var HasMethodCall = constraint({\n    construct: function(propName, args, argNodes, retval) {\n      this.propName = propName; this.args = args; this.argNodes = argNodes; this.retval = retval;\n      this.disabled = cx.disabledComputing;\n    },\n    addType: function(obj, weight) {\n      var callee = new IsCallee(obj, this.args, this.argNodes, this.retval);\n      callee.disabled = this.disabled;\n      obj.getProp(this.propName).propagate(callee, weight);\n    },\n    propHint: function() { return this.propName; }\n  });\n\n  var IsCtor = exports.IsCtor = constraint({\n    construct: function(target, noReuse) {\n      this.target = target; this.noReuse = noReuse;\n    },\n    addType: function(f, weight) {\n      if (!(f instanceof Fn)) return;\n      if (cx.parent && !cx.parent.options.reuseInstances) this.noReuse = true;\n      f.getProp(\"prototype\").propagate(new IsProto(this.noReuse ? false : f, this.target), weight);\n    }\n  });\n\n  var getInstance = exports.getInstance = function(obj, ctor) {\n    if (ctor === false) return new Obj(obj);\n\n    if (!ctor) ctor = obj.hasCtor;\n    if (!obj.instances) obj.instances = [];\n    for (var i = 0; i < obj.instances.length; ++i) {\n      var cur = obj.instances[i];\n      if (cur.ctor == ctor) return cur.instance;\n    }\n    var instance = new Obj(obj, ctor && ctor.name);\n    instance.origin = obj.origin;\n    obj.instances.push({ctor: ctor, instance: instance});\n    return instance;\n  };\n\n  var IsProto = exports.IsProto = constraint({\n    construct: function(ctor, target) {\n      this.ctor = ctor; this.target = target;\n    },\n    addType: function(o, _weight) {\n      if (!(o instanceof Obj)) return;\n      if ((this.count = (this.count || 0) + 1) > 8) return;\n      if (o == cx.protos.Array)\n        this.target.addType(new Arr);\n      else\n        this.target.addType(getInstance(o, this.ctor));\n    }\n  });\n\n  var FnPrototype = constraint({\n    construct: function(fn) { this.fn = fn; },\n    addType: function(o, _weight) {\n      if (o instanceof Obj && !o.hasCtor) {\n        o.hasCtor = this.fn;\n        var adder = new SpeculativeThis(o, this.fn);\n        adder.addType(this.fn);\n        o.forAllProps(function(_prop, val, local) {\n          if (local) val.propagate(adder);\n        });\n      }\n    }\n  });\n\n  var IsAdded = constraint({\n    construct: function(other, target) {\n      this.other = other; this.target = target;\n    },\n    addType: function(type, weight) {\n      if (type == cx.str)\n        this.target.addType(cx.str, weight);\n      else if (type == cx.num && this.other.hasType(cx.num))\n        this.target.addType(cx.num, weight);\n    },\n    typeHint: function() { return this.other; }\n  });\n\n  var IfObj = exports.IfObj = constraint({\n    construct: function(target) { this.target = target; },\n    addType: function(t, weight) {\n      if (t instanceof Obj) this.target.addType(t, weight);\n    },\n    propagatesTo: function() { return this.target; }\n  });\n\n  var SpeculativeThis = constraint({\n    construct: function(obj, ctor) { this.obj = obj; this.ctor = ctor; },\n    addType: function(tp) {\n      if (tp instanceof Fn && tp.self)\n        tp.self.addType(getInstance(this.obj, this.ctor), WG_SPECULATIVE_PROTO_THIS);\n    }\n  });\n\n  var HasProto = constraint({\n    construct: function(obj) { this.obj = obj },\n    addType: function(tp) {\n      if (tp instanceof Obj && this.obj.proto == cx.protos.Object)\n        this.obj.replaceProto(tp);\n    }\n  });\n\n  var Muffle = constraint({\n    construct: function(inner, weight) {\n      this.inner = inner; this.weight = weight;\n    },\n    addType: function(tp, weight) {\n      this.inner.addType(tp, Math.min(weight, this.weight));\n    },\n    propagatesTo: function() { return this.inner.propagatesTo(); },\n    typeHint: function() { return this.inner.typeHint(); },\n    propHint: function() { return this.inner.propHint(); }\n  });\n\n  // TYPE OBJECTS\n\n  var Type = exports.Type = function() {};\n  Type.prototype = extend(ANull, {\n    constructor: Type,\n    propagate: function(c, w) { c.addType(this, w); },\n    hasType: function(other) { return other == this; },\n    isEmpty: function() { return false; },\n    typeHint: function() { return this; },\n    getType: function() { return this; }\n  });\n\n  var Prim = exports.Prim = function(proto, name) { this.name = name; this.proto = proto; };\n  Prim.prototype = extend(Type.prototype, {\n    constructor: Prim,\n    toString: function() { return this.name; },\n    getProp: function(prop) {return this.proto.hasProp(prop) || ANull;},\n    gatherProperties: function(f, depth) {\n      if (this.proto) this.proto.gatherProperties(f, depth);\n    }\n  });\n\n  function isInteger(str) {\n    var c0 = str.charCodeAt(0);\n    if (c0 >= 48 && c0 <= 57) return !/\\D/.test(str);\n    else return false;\n  }\n\n  var Obj = exports.Obj = function(proto, name) {\n    if (!this.props) this.props = Object.create(null);\n    this.proto = proto === true ? cx.protos.Object : proto;\n    if (proto && proto != cx.protos.Object && !name && proto.name && !(this instanceof Fn)) {\n      var match = /^(.*)\\.prototype$/.exec(this.proto.name);\n      if (match) name = match[1];\n    }\n    this.name = name;\n    this.maybeProps = null;\n    this.origin = cx.curOrigin;\n  };\n  Obj.prototype = extend(Type.prototype, {\n    constructor: Obj,\n    toString: function(maxDepth) {\n      if (maxDepth == null) maxDepth = 0;\n      if (maxDepth <= 0 && this.name) return this.name;\n      var props = [], etc = false;\n      for (var prop in this.props) if (prop != \"<i>\") {\n        if (props.length > 5) { etc = true; break; }\n        if (maxDepth)\n          props.push(prop + \": \" + toString(this.props[prop], maxDepth - 1, this));\n        else\n          props.push(prop);\n      }\n      props.sort();\n      if (etc) props.push(\"...\");\n      return \"{\" + props.join(\", \") + \"}\";\n    },\n    hasProp: function(prop, searchProto) {\n      if (isInteger(prop)) prop = this.normalizeIntegerProp(prop);\n      var found = this.props[prop];\n      if (searchProto !== false)\n        for (var p = this.proto; p && !found; p = p.proto) found = p.props[prop];\n      return found;\n    },\n    defProp: function(prop, originNode) {\n      var found = this.hasProp(prop, false);\n      if (found) {\n        if (originNode && !found.originNode) found.originNode = originNode;\n        return found;\n      }\n      if (ignoredProp(prop)) return ANull;\n      if (isInteger(prop)) prop = this.normalizeIntegerProp(prop);\n\n      var av = this.maybeProps && this.maybeProps[prop];\n      if (av) {\n        delete this.maybeProps[prop];\n        this.maybeUnregProtoPropHandler();\n      } else {\n        av = new AVal;\n        av.propertyOf = this;\n        av.propertyName = prop;\n      }\n\n      this.props[prop] = av;\n      av.originNode = originNode;\n      av.origin = cx.curOrigin;\n      this.broadcastProp(prop, av, true);\n      return av;\n    },\n    getProp: function(prop) {\n      var found = this.hasProp(prop, true) || (this.maybeProps && this.maybeProps[prop]);\n      if (found) return found;\n      if (ignoredProp(prop)) return ANull;\n      if (isInteger(prop)) prop = this.normalizeIntegerProp(prop);\n      var av = this.ensureMaybeProps()[prop] = new AVal;\n      av.propertyOf = this;\n      av.propertyName = prop;\n      return av;\n    },\n    normalizeIntegerProp: function(_) { return \"<i>\" },\n    broadcastProp: function(prop, val, local) {\n      if (local) {\n        this.signal(\"addProp\", prop, val);\n        // If this is a scope, it shouldn't be registered\n        if (!(this instanceof Scope)) registerProp(prop, this);\n      }\n\n      if (this.onNewProp) for (var i = 0; i < this.onNewProp.length; ++i) {\n        var h = this.onNewProp[i];\n        h.onProtoProp ? h.onProtoProp(prop, val, local) : h(prop, val, local);\n      }\n    },\n    onProtoProp: function(prop, val, _local) {\n      var maybe = this.maybeProps && this.maybeProps[prop];\n      if (maybe) {\n        delete this.maybeProps[prop];\n        this.maybeUnregProtoPropHandler();\n        this.proto.getProp(prop).propagate(maybe);\n      }\n      this.broadcastProp(prop, val, false);\n    },\n    replaceProto: function(proto) {\n      for (var o = proto; o; o = o.proto)\n        if (o == this) return;\n      if (this.proto && this.maybeProps)\n        this.proto.unregPropHandler(this);\n      this.proto = proto;\n      if (this.maybeProps)\n        this.proto.forAllProps(this);\n    },\n    ensureMaybeProps: function() {\n      if (!this.maybeProps) {\n        if (this.proto) this.proto.forAllProps(this);\n        this.maybeProps = Object.create(null);\n      }\n      return this.maybeProps;\n    },\n    removeProp: function(prop) {\n      var av = this.props[prop];\n      delete this.props[prop];\n      this.ensureMaybeProps()[prop] = av;\n      av.types.length = 0;\n    },\n    forAllProps: function(c) {\n      if (!this.onNewProp) {\n        this.onNewProp = [];\n        if (this.proto) this.proto.forAllProps(this);\n      }\n      this.onNewProp.push(c);\n      for (var o = this; o; o = o.proto) for (var prop in o.props) {\n        if (c.onProtoProp)\n          c.onProtoProp(prop, o.props[prop], o == this);\n        else\n          c(prop, o.props[prop], o == this);\n      }\n    },\n    maybeUnregProtoPropHandler: function() {\n      if (this.maybeProps) {\n        for (var _n in this.maybeProps) return;\n        this.maybeProps = null;\n      }\n      if (!this.proto || this.onNewProp && this.onNewProp.length) return;\n      this.proto.unregPropHandler(this);\n    },\n    unregPropHandler: function(handler) {\n      for (var i = 0; i < this.onNewProp.length; ++i)\n        if (this.onNewProp[i] == handler) { this.onNewProp.splice(i, 1); break; }\n      this.maybeUnregProtoPropHandler();\n    },\n    gatherProperties: function(f, depth) {\n      for (var prop in this.props) if (prop != \"<i>\" && prop.charAt(0) != \":\")\n        f(prop, this, depth);\n      if (this.proto) this.proto.gatherProperties(f, depth + 1);\n    },\n    getObjType: function() { return this; }\n  });\n\n  var geckoIterators = typeof StopIteration != \"undefined\";\n  function ignoredProp(name) {\n    return name == \"__proto__\" || name == \"✖\" || geckoIterators && name == \"__iterator__\";\n  }\n\n  var Fn = exports.Fn = function(name, self, args, argNames, retval, generator, async) {\n    Obj.call(this, cx.protos.Function, name);\n    this.self = self;\n    this.args = args;\n    this.argNames = argNames;\n    this.retval = retval;\n    this.generator = generator;\n    this.async = async;\n  };\n  Fn.prototype = extend(Obj.prototype, {\n    constructor: Fn,\n    toString: function(maxDepth) {\n      if (maxDepth == null) maxDepth = 0;\n      var str = this.generator ? \"fn*(\" : \"fn(\";\n      for (var i = 0; i < this.args.length; ++i) {\n        if (i) str += \", \";\n        var name = this.argNames[i];\n        if (name && name != \"?\") str += name + \": \";\n        str += maxDepth > -3 ? toString(this.args[i], maxDepth - 1, this) : \"?\";\n      }\n      str += \")\";\n      if (!this.retval.isEmpty())\n        str += \" -> \" + (maxDepth > -3 ? toString(this.retval, maxDepth - 1, this) : \"?\");\n      return str;\n    },\n    getProp: function(prop) {\n      if (prop == \"prototype\") {\n        var known = this.hasProp(prop, false);\n        if (!known) {\n          known = this.defProp(prop);\n          var proto = new Obj(true, this.name && this.name + \".prototype\");\n          proto.origin = this.origin;\n          known.addType(proto, WG_MADEUP_PROTO);\n        }\n        return known;\n      }\n      return Obj.prototype.getProp.call(this, prop);\n    },\n    defProp: function(prop, originNode) {\n      if (prop == \"prototype\") {\n        var found = this.hasProp(prop, false);\n        if (found) return found;\n        found = Obj.prototype.defProp.call(this, prop, originNode);\n        found.origin = this.origin;\n        found.propagate(new FnPrototype(this));\n        return found;\n      }\n      return Obj.prototype.defProp.call(this, prop, originNode);\n    },\n    getFunctionType: function() { return this; },\n    isArrowFn: function() { return this.originNode && this.originNode.type == \"ArrowFunctionExpression\" }\n  });\n\n  var Arr = exports.Arr = function(contentType) {\n    Obj.call(this, cx.protos.Array);\n    var content = this.defProp(\"<i>\");\n    if (Array.isArray(contentType)) {\n      this.tuple = contentType.length;\n      for (var i = 0; i < contentType.length; i++) {\n        var prop = this.defProp(String(i));\n        contentType[i].propagate(prop);\n        prop.propagate(content);\n      }\n    } else if (contentType) {\n      this.tuple = 0;\n      contentType.propagate(content);\n    }\n  };\n  Arr.prototype = extend(Obj.prototype, {\n    constructor: Arr,\n    toString: function(maxDepth) {\n      if (maxDepth == null) maxDepth = 0;\n      if (maxDepth <= -3) return \"[?]\";\n      var content = \"\";\n      if (this.tuple) {\n        var similar;\n        for (var i = 0; i in this.props; i++) {\n          var type = toString(this.getProp(String(i)), maxDepth - 1, this);\n          if (similar == null)\n            similar = type;\n          else if (similar != type)\n            similar = false;\n          else\n            similar = type;\n          content += (content ? \", \" : \"\") + type;\n        }\n        if (similar) content = similar;\n      } else {\n        content = toString(this.getProp(\"<i>\"), maxDepth - 1, this);\n      }\n      return \"[\" + content + \"]\";\n    },\n    normalizeIntegerProp: function(prop) {\n      if (+prop < this.tuple) return prop;\n      else return \"<i>\";\n    }\n  });\n\n  var Sym = exports.Sym = function(name, originNode) {\n    Prim.call(this, cx.protos.Symbol, \"Symbol\");\n    this.symName = name;\n    this.originNode = originNode;\n  };\n  Sym.prototype = extend(Prim.prototype, {\n    constructor: Sym,\n    asPropName: function() { return \":\" + this.symName },\n    getSymbolType: function() { return this }\n  });\n\n  exports.getSymbol = function(name, originNode) {\n    var cleanName = name.replace(/[^\\w$\\.]/g, \"_\");\n    var known = cx.symbols[cleanName];\n    if (known) {\n      if (originNode && !known.originNode) known.originNode = originNode;\n      return known;\n    }\n    return cx.symbols[cleanName] = new Sym(cleanName, originNode);\n  };\n\n  // THE PROPERTY REGISTRY\n\n  function registerProp(prop, obj) {\n    var data = cx.props[prop] || (cx.props[prop] = []);\n    data.push(obj);\n  }\n\n  function objsWithProp(prop) {\n    return cx.props[prop];\n  }\n\n  // INFERENCE CONTEXT\n\n  exports.Context = function(defs, parent) {\n    this.parent = parent;\n    this.props = Object.create(null);\n    this.protos = Object.create(null);\n    this.origins = [];\n    this.curOrigin = \"ecmascript\";\n    this.paths = Object.create(null);\n    this.definitions = Object.create(null);\n    this.purgeGen = 0;\n    this.workList = null;\n    this.disabledComputing = null;\n    this.curSuperCtor = this.curSuper = null;\n    this.symbols = Object.create(null);\n\n    exports.withContext(this, function() {\n      cx.protos.Object = new Obj(null, \"Object.prototype\");\n      cx.topScope = new Scope();\n      cx.topScope.name = \"<top>\";\n      cx.protos.Array = new Obj(true, \"Array.prototype\");\n      cx.protos.Function = new Fn(\"Function.prototype\", ANull, [], [], ANull);\n      cx.protos.Function.proto = cx.protos.Object;\n      cx.protos.RegExp = new Obj(true, \"RegExp.prototype\");\n      cx.protos.String = new Obj(true, \"String.prototype\");\n      cx.protos.Number = new Obj(true, \"Number.prototype\");\n      cx.protos.Boolean = new Obj(true, \"Boolean.prototype\");\n      cx.protos.Symbol = new Obj(true, \"Symbol.prototype\");\n      cx.str = new Prim(cx.protos.String, \"string\");\n      cx.bool = new Prim(cx.protos.Boolean, \"bool\");\n      cx.num = new Prim(cx.protos.Number, \"number\");\n      cx.curOrigin = null;\n\n      if (defs) for (var i = 0; i < defs.length; ++i)\n        def.load(defs[i]);\n    });\n  };\n\n  exports.Context.prototype.startAnalysis = function() {\n    this.disabledComputing = this.workList = this.curSuperCtor = this.curSuper = null;\n  };\n\n  var cx = null;\n  exports.cx = function() { return cx; };\n\n  exports.withContext = function(context, f) {\n    var old = cx;\n    cx = context;\n    try { return f(); }\n    finally { cx = old; }\n  };\n\n  exports.TimedOut = function() {\n    this.message = \"Timed out\";\n    this.stack = (new Error()).stack;\n  };\n  exports.TimedOut.prototype = Object.create(Error.prototype);\n  exports.TimedOut.prototype.name = \"infer.TimedOut\";\n\n  var timeout;\n  exports.withTimeout = function(ms, f) {\n    var end = +new Date + ms;\n    var oldEnd = timeout;\n    if (oldEnd && oldEnd < end) return f();\n    timeout = end;\n    try { return f(); }\n    finally { timeout = oldEnd; }\n  };\n\n  exports.addOrigin = function(origin) {\n    if (cx.origins.indexOf(origin) < 0) cx.origins.push(origin);\n  };\n\n  var baseMaxWorkDepth = 20, reduceMaxWorkDepth = 0.0001;\n  function withWorklist(f) {\n    if (cx.workList) return f(cx.workList);\n\n    var list = [], depth = 0;\n    var add = cx.workList = function(type, target, weight) {\n      if (depth < baseMaxWorkDepth - reduceMaxWorkDepth * list.length)\n        list.push(type, target, weight, depth);\n    };\n    var ret = f(add);\n    for (var i = 0; i < list.length; i += 4) {\n      if (timeout && +new Date >= timeout)\n        throw new exports.TimedOut();\n      depth = list[i + 3] + 1;\n      list[i + 1].addType(list[i], list[i + 2]);\n    }\n    cx.workList = null;\n    return ret;\n  }\n\n  function withSuper(ctor, obj, f) {\n    var oldCtor = cx.curSuperCtor, oldObj = cx.curSuper;\n    cx.curSuperCtor = ctor; cx.curSuper = obj;\n    var result = f();\n    cx.curSuperCtor = oldCtor; cx.curSuper = oldObj;\n    return result;\n  }\n\n  // SCOPES\n\n  var Scope = exports.Scope = function(prev, originNode, isBlock, isCatch) {\n    Obj.call(this, prev || true);\n    this.prev = prev;\n    this.originNode = originNode;\n    this.isBlock = !!isBlock;\n    this.isCatch = !!isCatch;\n  };\n  Scope.prototype = extend(Obj.prototype, {\n    constructor: Scope,\n    defVar: function(name, originNode) {\n      for (var s = this; ; s = s.proto) {\n        var found = s.props[name];\n        if (found) return found;\n        if (!s.prev) return s.defProp(name, originNode);\n      }\n    }\n  });\n\n  function functionScope(scope, arrow) {\n    while (scope.isBlock || scope.isCatch || (arrow === false && scope.fnType && scope.fnType.isArrowFn()))\n      scope = scope.prev;\n    return scope;\n  }\n\n\n  // RETVAL COMPUTATION HEURISTICS\n\n  function maybeInstantiate(scope, score) {\n    var fn = functionScope(scope).fnType;\n    if (fn) fn.instantiateScore = (fn.instantiateScore || 0) + score;\n  }\n\n  var NotSmaller = {};\n  function nodeSmallerThan(node, n) {\n    try {\n      walk.simple(node, {Expression: function() { if (--n <= 0) throw NotSmaller; }});\n      return true;\n    } catch(e) {\n      if (e == NotSmaller) return false;\n      throw e;\n    }\n  }\n\n  function maybeTagAsInstantiated(node, fn) {\n    var score = fn.instantiateScore;\n    if (!cx.disabledComputing && score && fn.args.length && nodeSmallerThan(node, score * 5)) {\n      maybeInstantiate(functionScope(fn.originNode.scope.prev), score / 2);\n      setFunctionInstantiated(node, fn);\n      return true;\n    } else {\n      fn.instantiateScore = null;\n    }\n  }\n\n  function setFunctionInstantiated(node, fn) {\n    // Disconnect the arg avals, so that we can add info to them without side effects\n    var refScope = node.scope;\n    for (var i = 0; i < fn.args.length; ++i) fn.args[i] = new AVal;\n    fn.self = new AVal;\n    fn.computeRet = function(self, args) {\n      // Prevent recursion\n      return withDisabledComputing(fn, function() {\n        var oldOrigin = cx.curOrigin;\n        cx.curOrigin = fn.origin;\n        var scope = node.scope ? node.scope : refScope;\n        var scopeCopy = new Scope(scope.prev, scope.originNode);\n        for (var v in scope.props) {\n          var local = scopeCopy.defProp(v, scope.props[v].originNode);\n          for (var i = 0; i < args.length; ++i) if (fn.argNames[i] == v && i < args.length)\n            args[i].propagate(local);\n        }\n        var argNames = fn.argNames.length != args.length ? fn.argNames.slice(0, args.length) : fn.argNames;\n        while (argNames.length < args.length) argNames.push(\"?\");\n        scopeCopy.fnType = new Fn(fn.name, self, args, argNames, ANull, fn.generator, fn.async);\n        scopeCopy.fnType.originNode = fn.originNode;\n        if (fn.arguments) {\n          var argset = scopeCopy.fnType.arguments = new AVal;\n          scopeCopy.defProp(\"arguments\").addType(new Arr(argset));\n          for (var i = 0; i < args.length; ++i) args[i].propagate(argset);\n        }\n        node.scope = scopeCopy;\n        walk.recursive(node.body, scopeCopy, null, scopeGatherer);\n        walk.recursive(node.body, scopeCopy, null, inferWrapper);\n        cx.curOrigin = oldOrigin;\n        return scopeCopy.fnType.retval;\n      });\n    };\n  }\n\n  function maybeTagAsGeneric(fn) {\n    var target = fn.retval;\n    if (target == ANull || fn.isArrowFn()) return;\n    var targetInner, asArray;\n    if (!target.isEmpty() && (targetInner = target.getType()) instanceof Arr)\n      target = asArray = targetInner.getProp(\"<i>\");\n\n    function explore(aval, path, depth) {\n      if (depth > 3 || !aval.forward) return;\n      for (var i = 0; i < aval.forward.length; ++i) {\n        var prop = aval.forward[i].propagatesTo();\n        if (!prop) continue;\n        var newPath = path, dest;\n        if (prop instanceof AVal) {\n          dest = prop;\n        } else if (prop.target instanceof AVal) {\n          newPath += prop.pathExt;\n          dest = prop.target;\n        } else continue;\n        if (dest == target) return newPath;\n        var found = explore(dest, newPath, depth + 1);\n        if (found) return found;\n      }\n    }\n\n    var foundPath = explore(fn.self, \"!this\", 0);\n    for (var i = 0; !foundPath && i < fn.args.length; ++i)\n      foundPath = explore(fn.args[i], \"!\" + i, 0);\n\n    if (foundPath) {\n      if (asArray) foundPath = \"[\" + foundPath + \"]\";\n      var p = new def.TypeParser(foundPath);\n      var parsed = p.parseType(true);\n      fn.computeRet = parsed.apply ? parsed : function() { return parsed; };\n      fn.computeRetSource = foundPath;\n      return true;\n    }\n  }\n\n  // SCOPE GATHERING PASS\n\n  function addVar(scope, nameNode) {\n    return scope.defProp(nameNode.name, nameNode);\n  }\n  function patternName(node) {\n    if (node.type == \"Identifier\") return node.name;\n    if (node.type == \"AssignmentPattern\") return patternName(node.left);\n    if (node.type == \"ObjectPattern\") return \"{\" + node.properties.map(function(e) { return patternName(e.type === 'RestElement' ? e : e.value) }).join(\", \") + \"}\";\n    if (node.type == \"ArrayPattern\") return \"[\" + node.elements.map(function(e) { return e ? patternName(e) : \"\" }).join(\", \") + \"]\";\n    if (node.type == \"RestElement\") return \"...\" + patternName(node.argument);\n    return \"_\";\n  }\n\n  function isBlockScopedDecl(node) {\n    return node.type == \"VariableDeclaration\" && node.kind != \"var\" ||\n      node.type == \"FunctionDeclaration\" ||\n      node.type == \"ClassDeclaration\";\n  }\n\n  function patternScopes(inner, outer) {\n    return {inner: inner, outer: outer || inner};\n  }\n\n  var scopeGatherer = exports.scopeGatherer = walk.make({\n    VariablePattern: function(node, scopes) {\n      if (scopes.inner) addVar(scopes.inner, node);\n    },\n    AssignmentPattern: function(node, scopes, c) {\n      c(node.left, scopes, \"Pattern\");\n      c(node.right, scopes.outer, \"Expression\");\n    },\n    AssignmentExpression: function(node, scope, c) {\n      if (node.left.type == \"MemberExpression\")\n        c(node.left, scope, \"Expression\");\n      else\n        c(node.left, patternScopes(false, scope), \"Pattern\");\n      c(node.right, scope, \"Expression\");\n    },\n    MemberPattern: function(node, scope, c) {\n      c(node, scope.outer);\n    },\n    Function: function(node, scope, c) {\n      var inner = node.scope = new Scope(scope, node);\n      var argVals = [], argNames = [];\n      for (var i = 0; i < node.params.length; ++i) {\n        var param = node.params[i];\n        argNames.push(patternName(param));\n        if (param.type == \"Identifier\") {\n          argVals.push(addVar(inner, param));\n        } else {\n          var arg = new AVal;\n          argVals.push(arg);\n          arg.originNode = param;\n          c(param, patternScopes(inner), \"Pattern\");\n        }\n      }\n      inner.fnType = new Fn(node.id && node.id.name, new AVal, argVals, argNames, ANull, node.generator, node.async);\n      inner.fnType.originNode = node;\n      if (node.id) {\n        var decl = node.type == \"FunctionDeclaration\";\n        addVar(decl ? scope : inner, node.id);\n      }\n      c(node.body, inner, node.expression ? \"Expression\" : \"Statement\");\n    },\n    BlockStatement: function(node, scope, c) {\n      if (!node.scope && node.body.some(isBlockScopedDecl))\n        scope = node.scope = new Scope(scope, node, true);\n      walk.base.BlockStatement(node, scope, c);\n    },\n    CatchClause: function(node, scope, c) {\n      if (!node.param) { return; }\n      scope = node.scope = new Scope(scope, node, false, true);\n      if (node.param.type == \"Identifier\") {\n        var v = addVar(scope, node.param);\n        c(node.body, scope, \"Statement\");\n        var ecma = cx.definitions.ecmascript;\n        if (ecma && v.isEmpty()) getInstance(ecma[\"Error.prototype\"]).propagate(v, WG_CATCH_ERROR);\n      } else {\n        c(node.param, patternScopes(scope), \"Pattern\");\n      }\n    },\n    VariableDeclaration: function(node, scope, c) {\n      var targetScope = node.kind == \"var\" ? functionScope(scope) : scope;\n      for (var i = 0; i < node.declarations.length; ++i) {\n        var decl = node.declarations[i];\n        c(decl.id, patternScopes(targetScope, scope), \"Pattern\");\n        if (decl.init) c(decl.init, scope, \"Expression\");\n      }\n    },\n    ClassDeclaration: function(node, scope, c) {\n      if (node.id) addVar(scope, node.id);\n      if (node.superClass) c(node.superClass, scope, \"Expression\");\n      for (var i = 0; i < node.body.body.length; i++)\n        c(node.body.body[i], scope);\n    },\n    ForInStatement: function(node, scope, c) {\n      if (!node.scope && isBlockScopedDecl(node.left))\n        scope = node.scope = new Scope(scope, node, true);\n      walk.base.ForInStatement(node, scope, c);\n    },\n    ForStatement: function(node, scope, c) {\n      if (!node.scope && node.init && isBlockScopedDecl(node.init))\n        scope = node.scope = new Scope(scope, node, true);\n      walk.base.ForStatement(node, scope, c);\n    },\n    ImportDeclaration: function(node, scope) {\n      for (var i = 0; i < node.specifiers.length; i++)\n        addVar(scope, node.specifiers[i].local);\n    }\n  });\n  scopeGatherer.ForOfStatement = scopeGatherer.ForInStatement;\n\n  function rmScope(node) { if (node.scope) node.scope = null }\n  var scopeClearer = {BlockStatement: rmScope, Function: rmScope, CatchClause: rmScope,\n                      ForInStateMent: rmScope, ForStatement: rmScope};\n  exports.clearScopes = function(ast) {\n    walk.simple(ast, scopeClearer);\n  };\n\n  // CONSTRAINT GATHERING PASS\n\n  var propName = exports.propName = function(node, inferInScope) {\n    var key = node.property || node.key;\n    if (!node.computed && key.type == \"Identifier\") return key.name;\n    if (key.type == \"Literal\") {\n      if (typeof key.value == \"string\") return key.value;\n      if (typeof key.value == \"number\") return String(key.value);\n    }\n    if (inferInScope) {\n      var symName = symbolName(infer(key, inferInScope));\n      if (symName) return node.propName = symName;\n    } else if (node.propName) {\n      return node.propName;\n    }\n    return \"<i>\";\n  };\n  function symbolName(val) {\n    var sym = val.getSymbolType();\n    if (sym) return sym.asPropName();\n  }\n\n  function unopResultType(op) {\n    switch (op) {\n    case \"+\": case \"-\": case \"~\": return cx.num;\n    case \"!\": return cx.bool;\n    case \"typeof\": return cx.str;\n    case \"void\": case \"delete\": return ANull;\n    }\n  }\n  function binopIsBoolean(op) {\n    switch (op) {\n    case \"==\": case \"!=\": case \"===\": case \"!==\": case \"<\": case \">\": case \">=\": case \"<=\":\n    case \"in\": case \"instanceof\": return true;\n    }\n  }\n  function literalType(node) {\n    if (node.regex) return getInstance(cx.protos.RegExp);\n    switch (typeof node.value) {\n    case \"boolean\": return cx.bool;\n    case \"number\": return cx.num;\n    case \"string\": return cx.str;\n    case \"object\":\n    case \"function\":\n      if (!node.value) return ANull;\n      return getInstance(cx.protos.RegExp);\n    }\n  }\n\n  function join(a, b) {\n    if (a == b || b == ANull) return a;\n    if (a == ANull) return b;\n    var joined = new AVal;\n    a.propagate(joined);\n    b.propagate(joined);\n    return joined;\n  }\n\n  function connectParams(node, scope) {\n    for (var i = 0; i < node.params.length; i++) {\n      var param = node.params[i];\n      if (param.type == \"Identifier\") continue;\n      connectPattern(param, scope, node.scope.fnType.args[i]);\n    }\n  }\n\n  function ensureVar(node, scope) {\n    return scope.hasProp(node.name) || cx.topScope.defProp(node.name, node);\n  }\n\n  var inferPatternVisitor = exports.inferPatternVisitor = {\n    Identifier: function(node, scope, source) {\n      source.propagate(ensureVar(node, scope));\n    },\n    MemberExpression: function(node, scope, source) {\n      var obj = infer(node.object, scope);\n      var pName = propName(node, scope);\n      obj.propagate(new DefProp(pName, source, node.property));\n    },\n    RestElement: function(node, scope, source) {\n      connectPattern(node.argument, scope, new Arr(source));\n    },\n    ObjectPattern: function(node, scope, source) {\n      for (var i = 0; i < node.properties.length; ++i) {\n        var prop = node.properties[i];\n        if (prop.type == 'RestElement') { continue; }\n        connectPattern(prop.value, scope, source.getProp(propName(prop)));\n      }\n    },\n    ArrayPattern: function(node, scope, source) {\n      for (var i = 0; i < node.elements.length; i++)\n        if (node.elements[i])\n          connectPattern(node.elements[i], scope, source.getProp(String(i)));\n    },\n    AssignmentPattern: function(node, scope, source) {\n      connectPattern(node.left, scope, join(source, infer(node.right, scope)));\n    }\n  };\n\n  function connectPattern(node, scope, source) {\n    var connecter = inferPatternVisitor[node.type];\n    if (connecter) connecter(node, scope, source);\n  }\n\n  function getThis(scope) {\n    var fnScope = functionScope(scope);\n    return fnScope.fnType ? fnScope.fnType.self : fnScope;\n  }\n\n  function maybeAddPhantomObj(obj) {\n    if (!obj.isEmpty() || !obj.propertyOf) return;\n    obj.propertyOf.getProp(obj.propertyName).addType(new Obj, WG_PHANTOM_OBJ);\n    maybeAddPhantomObj(obj.propertyOf);\n  }\n\n  function inferClass(node, scope, name) {\n    if (!name && node.id) name = node.id.name;\n\n    var sup = cx.protos.Object, supCtor, delayed;\n    if (node.superClass) {\n      if (node.superClass.type == \"Literal\" && node.superClass.value == null) {\n        sup = null;\n      } else {\n        var supVal = infer(node.superClass, scope), supProto;\n        supCtor = supVal.getFunctionType();\n        if (supCtor && (supProto = supCtor.getProp(\"prototype\").getObjType())) {\n          sup = supProto;\n        } else {\n          supCtor = supVal;\n          delayed = supVal.getProp(\"prototype\");\n        }\n      }\n    }\n    var proto = new Obj(sup, name && name + \".prototype\");\n    if (delayed) delayed.propagate(new HasProto(proto));\n\n    return withSuper(supCtor, delayed || sup, function() {\n      var ctor, body = node.body.body;\n      for (var i = 0; i < body.length; i++)\n        if (body[i].kind == \"constructor\") ctor = body[i].value;\n      var fn = node.objType = ctor ? infer(ctor, scope) : new Fn(name, ANull, [], null, ANull);\n      fn.originNode = node.id || ctor || node;\n\n      var inst = getInstance(proto, fn);\n      fn.self.addType(inst);\n      fn.defProp(\"prototype\", node).addType(proto);\n      for (var i = 0; i < body.length; i++) {\n        var method = body[i], target;\n        if (method.kind == \"constructor\") continue;\n        var pName = propName(method, scope);\n        if (pName == \"<i>\" || method.kind == \"set\") {\n          target = ANull;\n        } else {\n          target = (method.static ? fn : proto).defProp(pName, method.key);\n          target.initializer = true;\n          if (method.kind == \"get\") target = new IsCallee(inst, [], null, target);\n        }\n        infer(method.value, scope, target);\n        var methodFn = target.getFunctionType();\n        if (methodFn) methodFn.self.addType(inst);\n      }\n      return fn;\n    });\n  }\n\n  function arrayLiteralType(elements, scope, inner) {\n    var tuple = elements.length > 1 && elements.length < 6;\n    if (tuple) {\n      var homogenous = true, litType;\n      for (var i = 0; i < elements.length; i++) {\n        var elt = elements[i];\n        if (!elt)\n          tuple = false;\n        else if (elt.type != \"Literal\" || (litType && litType != typeof elt.value))\n          homogenous = false;\n        else\n          litType = typeof elt.value;\n      }\n      if (homogenous) tuple = false;\n    }\n\n    if (tuple) {\n      var types = [];\n      for (var i = 0; i < elements.length; ++i)\n        types.push(inner(elements[i], scope));\n      return new Arr(types);\n    } else if (elements.length < 2) {\n      return new Arr(elements[0] && inner(elements[0], scope));\n    } else {\n      var eltVal = new AVal;\n      for (var i = 0; i < elements.length; i++)\n        if (elements[i]) inner(elements[i], scope).propagate(eltVal);\n      return new Arr(eltVal);\n    }\n  }\n\n  function ret(f) {\n    return function(node, scope, out, name) {\n      var r = f(node, scope, name);\n      if (out) r.propagate(out);\n      return r;\n    };\n  }\n  function fill(f) {\n    return function(node, scope, out, name) {\n      if (!out) out = new AVal;\n      f(node, scope, out, name);\n      return out;\n    };\n  }\n\n  var inferExprVisitor = exports.inferExprVisitor = {\n    ArrayExpression: ret(function(node, scope) {\n      return arrayLiteralType(node.elements, scope, infer);\n    }),\n    ObjectExpression: ret(function(node, scope, name) {\n      var proto = cx.protos.Object, waitForProto;\n      for (var i = 0; i < node.properties.length; ++i) {\n        var prop = node.properties[i];\n        if (prop.type == 'SpreadElement') { continue; }\n        if (prop.key.name == \"__proto__\") {\n          if (prop.value.type == \"Literal\" && prop.value.value == null) {\n            proto = null;\n          } else {\n            var protoVal = infer(prop.value, scope), known = protoVal.getObjType();\n            if (known) proto = known;\n            else waitForProto = protoVal;\n          }\n        }\n      }\n\n      var obj = node.objType = new Obj(proto, name);\n      if (waitForProto) waitForProto.propagate(new HasProto(obj));\n      obj.originNode = node;\n\n      withSuper(null, waitForProto || proto, function() {\n        for (var i = 0; i < node.properties.length; ++i) {\n          var prop = node.properties[i], key = prop.key;\n          if (prop.type == 'SpreadElement' || ignoredProp(prop.key.name)) continue;\n\n          var name = propName(prop, scope), target;\n          if (name == \"<i>\" || prop.kind == \"set\") {\n            target = ANull;\n          } else {\n            target = obj.defProp(name, key);\n            var val = target;\n            val.initializer = true;\n            if (prop.kind == \"get\")\n              target = new IsCallee(obj, [], null, val);\n          }\n          infer(prop.value, scope, target, name);\n          if (prop.value.type == \"FunctionExpression\")\n            prop.value.scope.fnType.self.addType(obj, WG_SPECULATIVE_THIS);\n        }\n      });\n      return obj;\n    }),\n    FunctionExpression: ret(function(node, scope, name) {\n      var inner = node.scope, fn = inner.fnType;\n      if (name && !fn.name) fn.name = name;\n      connectParams(node, inner);\n      if (node.expression)\n        infer(node.body, inner, inner.fnType.retval = new AVal);\n      else\n        walk.recursive(node.body, inner, null, inferWrapper, \"Statement\");\n      if (node.type == \"ArrowFunctionExpression\")\n        getThis(scope).propagate(fn.self);\n      maybeTagAsInstantiated(node, fn) || maybeTagAsGeneric(fn);\n      if (node.id) inner.getProp(node.id.name).addType(fn);\n      return fn;\n    }),\n    ClassExpression: ret(inferClass),\n    SequenceExpression: ret(function(node, scope) {\n      for (var i = 0, l = node.expressions.length - 1; i < l; ++i)\n        infer(node.expressions[i], scope, ANull);\n      return infer(node.expressions[l], scope);\n    }),\n    UnaryExpression: ret(function(node, scope) {\n      infer(node.argument, scope, ANull);\n      return unopResultType(node.operator);\n    }),\n    UpdateExpression: ret(function(node, scope) {\n      infer(node.argument, scope, ANull);\n      return cx.num;\n    }),\n    BinaryExpression: ret(function(node, scope) {\n      if (node.operator == \"+\") {\n        var lhs = infer(node.left, scope);\n        var rhs = infer(node.right, scope);\n        if (lhs.hasType(cx.str) || rhs.hasType(cx.str)) return cx.str;\n        if (lhs.hasType(cx.num) && rhs.hasType(cx.num)) return cx.num;\n        var result = new AVal;\n        lhs.propagate(new IsAdded(rhs, result));\n        rhs.propagate(new IsAdded(lhs, result));\n        return result;\n      } else {\n        infer(node.left, scope, ANull);\n        infer(node.right, scope, ANull);\n        return binopIsBoolean(node.operator) ? cx.bool : cx.num;\n      }\n    }),\n    AssignmentExpression: ret(function(node, scope, name) {\n      var rhs, pName;\n      if (node.left.type == \"MemberExpression\") {\n        pName = propName(node.left, scope);\n        if (!name)\n          name = node.left.object.type == \"Identifier\" ? node.left.object.name + \".\" + pName : pName;\n      } else if (!name && node.left.type == \"Identifier\") {\n        name = node.left.name;\n      }\n\n      if (node.operator && node.operator != \"=\" && node.operator != \"+=\") {\n        infer(node.right, scope, ANull);\n        rhs = cx.num;\n      } else {\n        rhs = infer(node.right, scope, null, name);\n      }\n\n      if (node.left.type == \"MemberExpression\") {\n        var obj = infer(node.left.object, scope);\n        if (pName == \"prototype\") maybeInstantiate(scope, 20);\n        if (pName == \"<i>\") {\n          // This is a hack to recognize for/in loops that copy\n          // properties, and do the copying ourselves, insofar as we\n          // manage, because such loops tend to be relevant for type\n          // information.\n          var v = node.left.property.name, local = scope.props[v], over = local && local.iteratesOver;\n          if (over) {\n            maybeInstantiate(scope, 20);\n            var fromRight = node.right.type == \"MemberExpression\" && node.right.computed && node.right.property.name == v;\n            over.forAllProps(function(prop, val, local) {\n              if (local && prop != \"prototype\" && prop != \"<i>\")\n                obj.propagate(new DefProp(prop, fromRight ? val : ANull));\n            });\n            return rhs;\n          }\n        }\n\n        obj.propagate(new DefProp(pName, rhs, node.left.property));\n        maybeAddPhantomObj(obj);\n        if (node.right.type == \"FunctionExpression\")\n          obj.propagate(node.right.scope.fnType.self, WG_SPECULATIVE_THIS);\n      } else {\n        connectPattern(node.left, scope, rhs);\n      }\n      return rhs;\n    }),\n    LogicalExpression: fill(function(node, scope, out) {\n      infer(node.left, scope, out);\n      infer(node.right, scope, out);\n    }),\n    ConditionalExpression: fill(function(node, scope, out) {\n      infer(node.test, scope, ANull);\n      infer(node.consequent, scope, out);\n      infer(node.alternate, scope, out);\n    }),\n    NewExpression: fill(function(node, scope, out, name) {\n      if (node.callee.type == \"Identifier\" && node.callee.name in scope.props)\n        maybeInstantiate(scope, 20);\n\n      for (var i = 0, args = []; i < node.arguments.length; ++i)\n        args.push(infer(node.arguments[i], scope));\n      var callee = infer(node.callee, scope);\n      var self = new AVal;\n      callee.propagate(new IsCtor(self, name && /\\.prototype$/.test(name)));\n      self.propagate(out, WG_NEW_INSTANCE);\n      callee.propagate(new IsCallee(self, args, node.arguments, new IfObj(out)));\n    }),\n    CallExpression: fill(function(node, scope, out) {\n      for (var i = 0, args = []; i < node.arguments.length; ++i)\n        args.push(infer(node.arguments[i], scope));\n      var outerFn = functionScope(scope).fnType;\n      if (node.callee.type == \"MemberExpression\") {\n        var self = infer(node.callee.object, scope);\n        var pName = propName(node.callee, scope);\n        if (outerFn && (pName == \"call\" || pName == \"apply\") &&\n            outerFn.args.indexOf(self) > -1)\n          maybeInstantiate(scope, 30);\n        self.propagate(new HasMethodCall(pName, args, node.arguments, out));\n      } else if (node.callee.type == \"Super\" && cx.curSuperCtor) {\n        node.callee.superType = cx.curSuperCtor;\n        cx.curSuperCtor.propagate(new IsCallee(getThis(scope), args, node.arguments, out));\n        getThis(scope).propagate(out, WG_NEW_INSTANCE);\n      } else {\n        var callee = infer(node.callee, scope);\n        if (outerFn && outerFn.args.indexOf(callee) > -1)\n          maybeInstantiate(scope, 30);\n        var knownFn = callee.getFunctionType();\n        if (knownFn && knownFn.instantiateScore && outerFn)\n          maybeInstantiate(scope, knownFn.instantiateScore / 5);\n        callee.propagate(new IsCallee(cx.topScope, args, node.arguments, out));\n      }\n    }),\n    AwaitExpression: fill(function(node, scope, out, name) {\n      var arg = infer(node.argument, scope, null, name);\n      var tp = arg.getType();\n      if (tp && tp.constructor == Obj && tp.name == \"Promise\") {\n        if (tp.hasProp(\":t\")) {\n          tp.getProp(\":t\").propagate(out);\n        }\n      } else {\n        arg.propagate(out);\n      }\n    }),\n    MemberExpression: fill(function(node, scope, out) {\n      var name = propName(node), wg;\n      if (name == \"<i>\") {\n        var propType = infer(node.property, scope);\n        var symName = symbolName(propType);\n        if (symName)\n          name = node.propName = symName;\n        else if (!propType.hasType(cx.num))\n          wg = WG_MULTI_MEMBER;\n      }\n      infer(node.object, scope).getProp(name).propagate(out, wg);\n    }),\n    Identifier: ret(function(node, scope) {\n      if (node.name == \"arguments\") {\n        var fnScope = functionScope(scope, false);\n        if (fnScope.fnType && !(node.name in fnScope.props))\n          fnScope.defProp(node.name, fnScope.fnType.originNode)\n            .addType(new Arr(fnScope.fnType.arguments = new AVal));\n      }\n      return scope.getProp(node.name);\n    }),\n    ThisExpression: ret(function(_node, scope) {\n      return getThis(scope);\n    }),\n    Super: ret(function(node) {\n      return node.superType = cx.curSuper || ANull;\n    }),\n    Literal: ret(function(node) {\n      return literalType(node);\n    }),\n    TemplateLiteral: ret(function(node, scope) {\n      for (var i = 0; i < node.expressions.length; ++i)\n        infer(node.expressions[i], scope, ANull);\n      return cx.str;\n    }),\n    TaggedTemplateExpression: fill(function(node, scope, out) {\n      var args = [new Arr(cx.str)];\n      for (var i = 0; i < node.quasi.expressions.length; ++i)\n        args.push(infer(node.quasi.expressions[i], scope));\n      infer(node.tag, scope, new IsCallee(cx.topScope, args, node.quasi.expressions, out));\n    }),\n    YieldExpression: ret(function(node, scope) {\n      var output = ANull, fn = functionScope(scope).fnType;\n      if (fn) {\n        if (fn.retval == ANull) fn.retval = new AVal;\n        if (!fn.yieldval) fn.yieldval = new AVal;\n        output = fn.retval;\n      }\n      if (node.argument) {\n        if (node.delegate) {\n          infer(node.argument, scope, new HasMethodCall(\"next\", [], null,\n                                                        new GetProp(\"value\", output)));\n        } else {\n          infer(node.argument, scope, output);\n        }\n      }\n      return fn ? fn.yieldval : ANull;\n    })\n  };\n  inferExprVisitor.ArrowFunctionExpression = inferExprVisitor.FunctionExpression;\n\n  function infer(node, scope, out, name) {\n    var handler = inferExprVisitor[node.type];\n    return handler ? handler(node, scope, out, name) : ANull;\n  }\n\n  function loopPattern(init) {\n    return init.type == \"VariableDeclaration\" ? init.declarations[0].id : init;\n  }\n\n  var inferWrapper = exports.inferWrapper = walk.make({\n    Expression: function(node, scope) {\n      infer(node, node.scope || scope, ANull);\n    },\n\n    ObjectExpression: function(node, scope) {\n      infer(node, node.scope || scope, ANull);\n    },\n\n    FunctionDeclaration: function(node, scope, c) {\n      var inner = node.scope, fn = inner.fnType;\n      connectParams(node, inner);\n      c(node.body, inner, \"Statement\");\n      maybeTagAsInstantiated(node, fn) || maybeTagAsGeneric(fn);\n      if (node.id) scope.getProp(node.id.name).addType(fn);\n    },\n\n    Statement: function(node, scope, c) {\n      c(node, node.scope || scope);\n    },\n\n    ExportDefaultDeclaration: function(node, scope, c) {\n      c(node.declaration, node.scope || scope);\n    },\n\n    VariableDeclaration: function(node, scope) {\n      for (var i = 0; i < node.declarations.length; ++i) {\n        var decl = node.declarations[i];\n        if (decl.id.type == \"Identifier\") {\n          var prop = scope.getProp(decl.id.name);\n          if (decl.init)\n            infer(decl.init, scope, prop, decl.id.name);\n        } else if (decl.init) {\n          connectPattern(decl.id, scope, infer(decl.init, scope));\n        }\n      }\n    },\n\n    ClassDeclaration: function(node, scope) {\n      if (!node.id) inferClass(node, scope);\n      else scope.getProp(node.id.name).addType(inferClass(node, scope, node.id.name));\n    },\n\n    ReturnStatement: function(node, scope) {\n      if (!node.argument) return;\n      var output = ANull, fn = functionScope(scope).fnType;\n      if (fn) {\n        if (fn.retval == ANull) fn.retval = new AVal;\n        output = fn.retval;\n      }\n      infer(node.argument, scope, output);\n    },\n\n    ForInStatement: function(node, scope, c) {\n      var source = infer(node.right, scope);\n      if ((node.right.type == \"Identifier\" && node.right.name in scope.props) ||\n          (node.right.type == \"MemberExpression\" && node.right.property.name == \"prototype\")) {\n        maybeInstantiate(scope, 5);\n        var pattern = loopPattern(node.left);\n        if (pattern.type == \"Identifier\") {\n          if (pattern.name in scope.props)\n            scope.getProp(pattern.name).iteratesOver = source;\n          source.getProp(\"<i>\").propagate(ensureVar(pattern, scope));\n        } else {\n          connectPattern(pattern, scope, source.getProp(\"<i>\"));\n        }\n      }\n      c(node.body, scope, \"Statement\");\n    },\n\n    ForOfStatement: function(node, scope, c) {\n      var pattern = loopPattern(node.left), target;\n      if (pattern.type == \"Identifier\")\n        target = ensureVar(pattern, scope);\n      else\n        connectPattern(pattern, scope, target = new AVal);\n\n      if (node.await) {\n        infer(node.right, scope, new HasMethodCall(\":Symbol.asyncIterator\", [], null,\n                                                   new HasMethodCall(\"next\", [], null,\n                                                                     new GetProp(\":t\",\n                                                                                 new GetProp(\"value\", target)))));\n      } else {\n        infer(node.right, scope, new HasMethodCall(\":Symbol.iterator\", [], null,\n                                                   new HasMethodCall(\"next\", [], null,\n                                                                     new GetProp(\"value\", target))));\n      }\n      c(node.body, scope, \"Statement\");\n    }\n  });\n\n  // PARSING\n\n  var parse = exports.parse = function(text, options, thirdArg) {\n    if (!options || Array.isArray(options)) options = thirdArg;\n    var ast;\n    try { ast = acorn.parse(text, options); }\n    catch(e) { ast = acorn_loose.parse(text, options); }\n    return ast;\n  };\n\n  // ANALYSIS INTERFACE\n\n  exports.analyze = function(ast, name, scope) {\n    if (typeof ast == \"string\") ast = parse(ast);\n\n    if (!name) name = \"file#\" + cx.origins.length;\n    exports.addOrigin(cx.curOrigin = name);\n\n    if (!scope) scope = cx.topScope;\n    cx.startAnalysis();\n\n    walk.recursive(ast, scope, null, scopeGatherer);\n    if (cx.parent) cx.parent.signal(\"preInfer\", ast, scope);\n    walk.recursive(ast, scope, null, inferWrapper);\n    if (cx.parent) cx.parent.signal(\"postInfer\", ast, scope);\n\n    cx.curOrigin = null;\n  };\n\n  // PURGING\n\n  exports.purge = function(origins, start, end) {\n    var test = makePredicate(origins, start, end);\n    ++cx.purgeGen;\n    cx.topScope.purge(test);\n    for (var prop in cx.props) {\n      var list = cx.props[prop];\n      for (var i = 0; i < list.length; ++i) {\n        var obj = list[i], av = obj.props[prop];\n        if (!av || test(av, av.originNode)) list.splice(i--, 1);\n      }\n      if (!list.length) delete cx.props[prop];\n    }\n  };\n\n  function makePredicate(origins, start, end) {\n    var arr = Array.isArray(origins);\n    if (arr && origins.length == 1) { origins = origins[0]; arr = false; }\n    if (arr) {\n      if (end == null) return function(n) { return origins.indexOf(n.origin) > -1; };\n      return function(n, pos) { return pos && pos.start >= start && pos.end <= end && origins.indexOf(n.origin) > -1; };\n    } else {\n      if (end == null) return function(n) { return n.origin == origins; };\n      return function(n, pos) { return pos && pos.start >= start && pos.end <= end && n.origin == origins; };\n    }\n  }\n\n  AVal.prototype.purge = function(test) {\n    if (this.purgeGen == cx.purgeGen) return;\n    this.purgeGen = cx.purgeGen;\n    for (var i = 0; i < this.types.length; ++i) {\n      var type = this.types[i];\n      if (test(type, type.originNode))\n        this.types.splice(i--, 1);\n      else\n        type.purge(test);\n    }\n    if (!this.types.length) this.maxWeight = 0;\n\n    if (this.forward) for (var i = 0; i < this.forward.length; ++i) {\n      var f = this.forward[i];\n      if (test(f)) {\n        this.forward.splice(i--, 1);\n        if (this.props) this.props = null;\n      } else if (f.purge) {\n        f.purge(test);\n      }\n    }\n  };\n  ANull.purge = function() {};\n  Obj.prototype.purge = function(test) {\n    if (this.purgeGen == cx.purgeGen) return true;\n    this.purgeGen = cx.purgeGen;\n    for (var p in this.props) {\n      var av = this.props[p];\n      if (test(av, av.originNode))\n        this.removeProp(p);\n      av.purge(test);\n    }\n  };\n  Fn.prototype.purge = function(test) {\n    if (Obj.prototype.purge.call(this, test)) return;\n    this.self.purge(test);\n    this.retval.purge(test);\n    for (var i = 0; i < this.args.length; ++i) this.args[i].purge(test);\n  };\n\n  // EXPRESSION TYPE DETERMINATION\n\n  function findByPropertyName(name) {\n    guessing = true;\n    var found = objsWithProp(name);\n    if (found) for (var i = 0; i < found.length; ++i) {\n      var val = found[i].getProp(name);\n      if (!val.isEmpty()) return val;\n    }\n    return ANull;\n  }\n\n  function generatorResult(input, output, async) {\n    var defs = cx.definitions.ecmascript;\n    var valObj = new Obj(true);\n    valObj.defProp(\"done\").addType(cx.bool);\n    output.propagate(valObj.defProp(\"value\"));\n    var retObj = valObj;\n    if (async && defs) {\n      retObj = new Obj(defs[\"Promise.prototype\"]);\n      retObj.getType().propagate(new DefProp(':t', valObj));\n    }\n    var method = new Fn(null, ANull, input ? [input] : [], input ? [\"?\"] : [], retObj);\n    var result = new Obj(defs ? async ? defs.async_generator_prototype : defs.generator_prototype : true);\n    result.defProp(\"next\").addType(method);\n    return result;\n  }\n\n  function maybeIterator(fn, output) {\n    if (!fn.generator) return output;\n    if (!fn.computeRet) { // Reuse iterator objects for non-computed return types\n      if (fn.generator === true) fn.generator = generatorResult(fn.yieldval, output, fn.async);\n      return fn.generator;\n    }\n    return generatorResult(fn.yieldval, output, fn.async);\n  }\n\n  function computeReturnType(funcNode, argNodes, scope) {\n    var fn = findType(funcNode, scope).getFunctionType();\n    if (!fn) return ANull;\n    var result = fn.retval;\n    if (fn.computeRet) {\n      for (var i = 0, args = []; i < argNodes.length; ++i)\n        args.push(findType(argNodes[i], scope));\n      var self = ANull;\n      if (funcNode.type == \"MemberExpression\")\n        self = findType(funcNode.object, scope);\n      result = fn.computeRet(self, args, argNodes);\n    }\n    return maybeIterator(fn, result);\n  }\n\n  var typeFinder = exports.typeFinder = {\n    ArrayExpression: function(node, scope) {\n      return arrayLiteralType(node.elements, scope, findType);\n    },\n    ObjectExpression: function(node) {\n      return node.objType;\n    },\n    ClassDeclaration: function(node) {\n      return node.objType;\n    },\n    ClassExpression: function(node) {\n      return node.objType;\n    },\n    FunctionDeclaration: function(node) {\n      return node.scope.fnType;\n    },\n    FunctionExpression: function(node) {\n      return node.scope.fnType;\n    },\n    ArrowFunctionExpression: function(node) {\n      return node.scope.fnType;\n    },\n    SequenceExpression: function(node, scope) {\n      return findType(node.expressions[node.expressions.length-1], scope);\n    },\n    UnaryExpression: function(node) {\n      return unopResultType(node.operator);\n    },\n    UpdateExpression: function() {\n      return cx.num;\n    },\n    BinaryExpression: function(node, scope) {\n      if (binopIsBoolean(node.operator)) return cx.bool;\n      if (node.operator == \"+\") {\n        var lhs = findType(node.left, scope);\n        var rhs = findType(node.right, scope);\n        if (lhs.hasType(cx.str) || rhs.hasType(cx.str)) return cx.str;\n      }\n      return cx.num;\n    },\n    AssignmentExpression: function(node, scope) {\n      return findType(node.right, scope);\n    },\n    LogicalExpression: function(node, scope) {\n      var lhs = findType(node.left, scope);\n      return lhs.isEmpty() ? findType(node.right, scope) : lhs;\n    },\n    ConditionalExpression: function(node, scope) {\n      var lhs = findType(node.consequent, scope);\n      return lhs.isEmpty() ? findType(node.alternate, scope) : lhs;\n    },\n    NewExpression: function(node, scope) {\n      var f = findType(node.callee, scope).getFunctionType();\n      var proto = f && f.getProp(\"prototype\").getObjType();\n      if (!proto) return ANull;\n      return getInstance(proto, f);\n    },\n    CallExpression: function(node, scope) {\n      return computeReturnType(node.callee, node.arguments, scope);\n    },\n    MemberExpression: function(node, scope) {\n      var propN = propName(node), obj = findType(node.object, scope).getType();\n      if (obj) return obj.getProp(propN);\n      if (propN == \"<i>\") return ANull;\n      return findByPropertyName(propN);\n    },\n    MethodDefinition: function(node) {\n      var propN = propName(node), obj = getThis(node.value.scope).getType();\n      if (obj) return obj.getProp(propN);\n      return ANull;\n    },\n    Identifier: function(node, scope) {\n      return scope.hasProp(node.name) || ANull;\n    },\n    ThisExpression: function(_node, scope) {\n      return getThis(scope);\n    },\n    Literal: function(node) {\n      return literalType(node);\n    },\n    Super: ret(function(node) {\n      return node.superType;\n    }),\n    TemplateLiteral: function() {\n      return cx.str;\n    },\n    TaggedTemplateExpression: function(node, scope) {\n      return computeReturnType(node.tag, node.quasi.expressions, scope);\n    },\n    YieldExpression: function(_node, scope) {\n      var fn = functionScope(scope).fnType;\n      return fn ? fn.yieldval : ANull;\n    }\n  };\n\n  function findType(node, scope) {\n    var finder = typeFinder[node.type];\n    return finder ? finder(node, scope) : ANull;\n  }\n\n  var searchVisitor = exports.searchVisitor = walk.make({\n    Function: function(node, _st, c) {\n      walk.base.Function(node, node.scope, c);\n    },\n    CatchClause: function(node, _st, c) {\n      walk.base.CatchClause(node, node.scope, c);\n    },\n    Property: function(node, st, c) {\n      if (node.computed) c(node.key, st, \"Expression\");\n      if (node.key != node.value) c(node.value, st, \"Expression\");\n    },\n    Statement: function(node, st, c) {\n      c(node, node.scope || st);\n    },\n    ImportSpecifier: function(node, st, c) {\n      c(node.local, st);\n    },\n    ImportDefaultSpecifier: function(node, st, c) {\n      c(node.local, st);\n    },\n    ImportNamespaceSpecifier: function(node, st, c) {\n      c(node.local, st);\n    }\n  });\n  var searchExprVisitor = exports.searchExprVisitor = walk.make({\n    MemberExpression: function(node, st, c) {\n      c(node.object, st, \"Expression\");\n      if (node.computed) { c(node.property, st, \"Expression\"); }\n    },\n    Property: function(node, st, c) {\n      if (node.computed) c(node.key, st, \"Expression\");\n      c(node.value, st, \"Expression\");\n    }\n  }, searchVisitor);\n  exports.fullVisitor = walk.make({\n    MemberExpression: function(node, st, c) {\n      c(node.object, st, \"Expression\");\n      c(node.property, st, node.computed ? \"Expression\" : null);\n    },\n    Property: function(node, st, c) {\n      if (node.computed) c(node.key, st, \"Expression\");\n      c(node.value, st, \"Expression\");\n    }\n  }, searchVisitor);\n\n  exports.findExpressionAt = function(ast, start, end, defaultScope, filter) {\n    var test = filter || function(_t, node) {\n      if (node.type == \"Identifier\" && node.name == \"✖\") return false;\n      return typeFinder.hasOwnProperty(node.type);\n    };\n    return walk.findNodeAt(ast, start, end, test, searchExprVisitor, defaultScope || cx.topScope);\n  };\n  exports.findClosestExpression = function(ast, start, end, defaultScope, filter) {\n    var test = filter || function(_t, node) {\n      if (start != null && node.start > start) return false;\n      if (node.type == \"Identifier\" && node.name == \"✖\") return false;\n      return typeFinder.hasOwnProperty(node.type);\n    };\n    return walk.findNodeAround(ast, end, test, searchExprVisitor, defaultScope || cx.topScope);\n  };\n\n  exports.findExpressionAround = function(ast, start, end, defaultScope, filter) {\n    var test = filter || function(_t, node) {\n      if (start != null && node.start > start) return false;\n      if (node.type == \"Identifier\" && node.name == \"✖\") return false;\n      return typeFinder.hasOwnProperty(node.type);\n    };\n    return walk.findNodeAround(ast, end, test, searchVisitor, defaultScope || cx.topScope);\n  };\n\n  exports.expressionType = function(found) {\n    return findType(found.node, found.state);\n  };\n\n  // Finding the expected type of something, from context\n\n  exports.parentNode = function(child, ast) {\n    var stack = [];\n    function c(node, st, override) {\n      if (node.start <= child.start && node.end >= child.end) {\n        var top = stack[stack.length - 1];\n        if (node == child) throw {found: top};\n        if (top != node) stack.push(node);\n        walk.base[override || node.type](node, st, c);\n        if (top != node) stack.pop();\n      }\n    }\n    try {\n      c(ast, null);\n    } catch (e) {\n      if (e.found) return e.found;\n      throw e;\n    }\n  };\n\n  var findTypeFromContext = exports.findTypeFromContext = {\n    ArrayExpression: function(parent, _, get) { return get(parent, true).getProp(\"<i>\"); },\n    ObjectExpression: function(parent, node, get) {\n      for (var i = 0; i < parent.properties.length; ++i) {\n        var prop = node.properties[i];\n        if (prop.value == node)\n          return get(parent, true).getProp(propName(prop));\n      }\n    },\n    UnaryExpression: function(parent) { return unopResultType(parent.operator); },\n    UpdateExpression: function() { return cx.num; },\n    BinaryExpression: function(parent) { return binopIsBoolean(parent.operator) ? cx.bool : cx.num; },\n    AssignmentExpression: function(parent, _, get) { return get(parent.left); },\n    LogicalExpression: function(parent, _, get) { return get(parent, true); },\n    ConditionalExpression: function(parent, node, get) {\n      if (parent.consequent == node || parent.alternate == node) return get(parent, true);\n    },\n    CallExpression: function(parent, node, get) {\n      for (var i = 0; i < parent.arguments.length; i++) {\n        var arg = parent.arguments[i];\n        if (arg == node) {\n          var calleeType = get(parent.callee).getFunctionType();\n          if (calleeType instanceof Fn)\n            return calleeType.args[i];\n          break;\n        }\n      }\n    },\n    ReturnStatement: function(_parent, node, get) {\n      // tweaking search position to avoid endless recursion\n      // when looking for definition of key in fn ( return fn ( return object ) )\n      // see ternjs/tern#777\n      var fnNode = walk.findNodeAround(node.sourceFile.ast, node.start - 1, \"Function\");\n      if (fnNode) {\n        var fnType = fnNode.node.type != \"FunctionDeclaration\"\n          ? get(fnNode.node, true).getFunctionType()\n          : fnNode.node.scope.fnType;\n        if (fnType) return fnType.retval.getType();\n      }\n    },\n    VariableDeclarator: function(parent, node, get) {\n      if (parent.init == node) return get(parent.id);\n    }\n  };\n  findTypeFromContext.NewExpression = findTypeFromContext.CallExpression;\n\n  exports.typeFromContext = function(ast, found) {\n    var parent = exports.parentNode(found.node, ast);\n    var type = null;\n    if (findTypeFromContext.hasOwnProperty(parent.type)) {\n      var finder = findTypeFromContext[parent.type];\n      type = finder && finder(parent, found.node, function(node, fromContext) {\n        var obj = {node: node, state: found.state};\n        var tp = fromContext ? exports.typeFromContext(ast, obj) : exports.expressionType(obj);\n        return tp || ANull;\n      });\n    }\n    return type || exports.expressionType(found);\n  };\n\n  // Flag used to indicate that some wild guessing was used to produce\n  // a type or set of completions.\n  var guessing = false;\n\n  exports.resetGuessing = function(val) { guessing = val; };\n  exports.didGuess = function() { return guessing; };\n\n  exports.forAllPropertiesOf = function(type, f) {\n    type.gatherProperties(f, 0);\n  };\n\n  exports.findRefs = function(ast, baseScope, name, refScope, f) {\n    function handleId(node, scope, ancestors) {\n      var parent = ancestors[ancestors.length - 2];\n      if (parent.type == \"MemberExpression\" && !parent.computed && !!node.object) return;\n      if (node.name != name ||\n          (node == ast.id && ast.type == \"FunctionDeclaration\")) return;\n      if (parent.property === node) return;\n      for (var s = scope; s; s = s.prev) {\n        if (s == refScope) f(node, scope, ancestors);\n        if (name in s.props) return;\n      }\n    }\n    walk.ancestor(ast, {Identifier: handleId, VariablePattern: handleId},\n                  exports.fullVisitor, baseScope);\n  };\n\n  var simpleWalker = walk.make({\n    Function: function(node, _scope, c) {\n      c(node.body, node.scope, node.expression ? \"Expression\" : \"Statement\");\n    },\n    Statement: function(node, scope, c) {\n      c(node, node.scope || scope);\n    }\n  });\n\n  exports.findPropRefs = function(ast, scope, objType, name, f) {\n    // Find the type which owns the property in hierarchy\n    while (objType && !objType.props[name] && !(objType.maybeProps && objType.maybeProps[name])) {\n      objType = objType.proto;\n    }\n    if (!objType) throw new Error(\"Couldn't locate property in the base object type.\");\n\n    function isObjTypeProto(type) {\n      // Check whether the found type has objType in its hierarchy\n      while (type && type != objType) {\n        // Ff property is overriden higher in the hierarchy, return false\n        if (type.props[name] || (type.maybeProps && type.maybeProps[name])) {\n          return false;\n        }\n        type = type.proto;\n      }\n      return type;\n    }\n\n    walk.simple(ast, {\n      MemberExpression: function(node, scope) {\n        if (node.computed || propName(node) != name) return;\n        if (isObjTypeProto(findType(node.object, scope).getType())) f(node.property, scope);\n      },\n      ObjectExpression: function(node, scope) {\n        if (findType(node, scope).getType() != objType) return;\n        for (var i = 0; i < node.properties.length; ++i)\n          if (propName(node.properties[i]) == name) f(node.properties[i].key, scope);\n      },\n      MethodDefinition: function(node) {\n        if (propName(node) != name) return;\n        if (node.value && isObjTypeProto(getThis(node.value.scope).getType())) f(node.key, node.value.scope);\n      }\n    }, simpleWalker, scope);\n  };\n\n  // LOCAL-VARIABLE QUERIES\n\n  var scopeAt = exports.scopeAt = function(ast, pos, defaultScope) {\n    var found = walk.findNodeAround(ast, pos, function(_, node) {\n      return node.scope;\n    });\n    if (found) return found.node.scope;\n    else return defaultScope || cx.topScope;\n  };\n\n  exports.forAllLocalsAt = function(ast, pos, defaultScope, f) {\n    var scope = scopeAt(ast, pos, defaultScope);\n    scope.gatherProperties(f, 0);\n  };\n\n  // INIT DEF MODULE\n\n  // Delayed initialization because of cyclic dependencies.\n  def = exports.def = def.init({}, exports);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/lib/infer.js\n");

/***/ }),

/***/ "./node_modules/tern/lib/signal.js":
/*!*****************************************!*\
  !*** ./node_modules/tern/lib/signal.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, mod) {\n  if (true) // CommonJS\n    return mod(exports);\n  if (true) // AMD\n    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod((root.tern || (root.tern = {})).signal = {}); // Plain browser env\n})(this, function(exports) {\n\n  function on(type, f) {\n    var handlers = this._handlers || (this._handlers = Object.create(null));\n    (handlers[type] || (handlers[type] = [])).push(f);\n  }\n\n  function off(type, f) {\n    var arr = this._handlers && this._handlers[type];\n    if (arr) for (var i = 0; i < arr.length; ++i)\n      if (arr[i] == f) { arr.splice(i, 1); break; }\n  }\n\n  var noHandlers = [];\n  function getHandlers(emitter, type) {\n    var arr = emitter._handlers && emitter._handlers[type];\n    return arr && arr.length ? arr.slice() : noHandlers;\n  }\n\n  function signal(type, a1, a2, a3, a4) {\n    var arr = getHandlers(this, type);\n    for (var i = 0; i < arr.length; ++i) arr[i].call(this, a1, a2, a3, a4);\n  }\n\n  function signalReturnFirst(type, a1, a2, a3, a4) {\n    var arr = getHandlers(this, type);\n    for (var i = 0; i < arr.length; ++i) {\n      var result = arr[i].call(this, a1, a2, a3, a4);\n      if (result) return result;\n    }\n  }\n\n  function hasHandler(type) {\n    var arr = this._handlers && this._handlers[type];\n    return arr && arr.length > 0 && arr;\n  }\n\n  exports.mixin = function(obj) {\n    obj.on = on; obj.off = off;\n    obj.signal = signal;\n    obj.signalReturnFirst = signalReturnFirst;\n    obj.hasHandler = hasHandler;\n    return obj;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGVybi9saWIvc2lnbmFsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rlcm4vbGliL3NpZ25hbC5qcz9hYTk5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIHJldHVybiBtb2QoZXhwb3J0cyk7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICByZXR1cm4gZGVmaW5lKFtcImV4cG9ydHNcIl0sIG1vZCk7XG4gIG1vZCgocm9vdC50ZXJuIHx8IChyb290LnRlcm4gPSB7fSkpLnNpZ25hbCA9IHt9KTsgLy8gUGxhaW4gYnJvd3NlciBlbnZcbn0pKHRoaXMsIGZ1bmN0aW9uKGV4cG9ydHMpIHtcblxuICBmdW5jdGlvbiBvbih0eXBlLCBmKSB7XG4gICAgdmFyIGhhbmRsZXJzID0gdGhpcy5faGFuZGxlcnMgfHwgKHRoaXMuX2hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgKGhhbmRsZXJzW3R5cGVdIHx8IChoYW5kbGVyc1t0eXBlXSA9IFtdKSkucHVzaChmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZih0eXBlLCBmKSB7XG4gICAgdmFyIGFyciA9IHRoaXMuX2hhbmRsZXJzICYmIHRoaXMuX2hhbmRsZXJzW3R5cGVdO1xuICAgIGlmIChhcnIpIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKVxuICAgICAgaWYgKGFycltpXSA9PSBmKSB7IGFyci5zcGxpY2UoaSwgMSk7IGJyZWFrOyB9XG4gIH1cblxuICB2YXIgbm9IYW5kbGVycyA9IFtdO1xuICBmdW5jdGlvbiBnZXRIYW5kbGVycyhlbWl0dGVyLCB0eXBlKSB7XG4gICAgdmFyIGFyciA9IGVtaXR0ZXIuX2hhbmRsZXJzICYmIGVtaXR0ZXIuX2hhbmRsZXJzW3R5cGVdO1xuICAgIHJldHVybiBhcnIgJiYgYXJyLmxlbmd0aCA/IGFyci5zbGljZSgpIDogbm9IYW5kbGVycztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpZ25hbCh0eXBlLCBhMSwgYTIsIGEzLCBhNCkge1xuICAgIHZhciBhcnIgPSBnZXRIYW5kbGVycyh0aGlzLCB0eXBlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkgYXJyW2ldLmNhbGwodGhpcywgYTEsIGEyLCBhMywgYTQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2lnbmFsUmV0dXJuRmlyc3QodHlwZSwgYTEsIGEyLCBhMywgYTQpIHtcbiAgICB2YXIgYXJyID0gZ2V0SGFuZGxlcnModGhpcywgdHlwZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciByZXN1bHQgPSBhcnJbaV0uY2FsbCh0aGlzLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0hhbmRsZXIodHlwZSkge1xuICAgIHZhciBhcnIgPSB0aGlzLl9oYW5kbGVycyAmJiB0aGlzLl9oYW5kbGVyc1t0eXBlXTtcbiAgICByZXR1cm4gYXJyICYmIGFyci5sZW5ndGggPiAwICYmIGFycjtcbiAgfVxuXG4gIGV4cG9ydHMubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBvYmoub24gPSBvbjsgb2JqLm9mZiA9IG9mZjtcbiAgICBvYmouc2lnbmFsID0gc2lnbmFsO1xuICAgIG9iai5zaWduYWxSZXR1cm5GaXJzdCA9IHNpZ25hbFJldHVybkZpcnN0O1xuICAgIG9iai5oYXNIYW5kbGVyID0gaGFzSGFuZGxlcjtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/tern/lib/signal.js\n");

/***/ }),

/***/ "./node_modules/tern/lib/tern.js":
/*!***************************************!*\
  !*** ./node_modules/tern/lib/tern.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// The Tern server object\n\n// A server is a stateful object that manages the analysis for a\n// project, and defines an interface for querying the code in the\n// project.\n\n(function(root, mod) {\n  if (true) // CommonJS\n    return mod(exports, __webpack_require__(/*! ./infer */ \"./node_modules/tern/lib/infer.js\"), __webpack_require__(/*! ./signal */ \"./node_modules/tern/lib/signal.js\"),\n               __webpack_require__(/*! acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.mjs\"), __webpack_require__(/*! acorn-walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs\"));\n  if (true) // AMD\n    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./infer */ \"./node_modules/tern/lib/infer.js\"), __webpack_require__(/*! ./signal */ \"./node_modules/tern/lib/signal.js\"), __webpack_require__(/*! acorn/dist/acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.js\"), __webpack_require__(/*! acorn-walk/dist/walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod(root.tern || (root.tern = {}), tern, tern.signal, acorn, acorn.walk); // Plain browser env\n})(this, function(exports, infer, signal, acorn, walk) {\n  \"use strict\";\n\n  var plugins = Object.create(null);\n  exports.registerPlugin = function(name, init) { plugins[name] = init; };\n\n  var defaultOptions = exports.defaultOptions = {\n    debug: false,\n    async: false,\n    getFile: function(_f, c) { if (this.async) c(null, null); },\n    normalizeFilename: function(name) { return name },\n    defs: [],\n    plugins: {},\n    fetchTimeout: 1000,\n    dependencyBudget: 20000,\n    reuseInstances: true,\n    stripCRs: false,\n    ecmaVersion: 9,\n    projectDir: \"/\",\n    parent: null\n  };\n\n  var queryTypes = {\n    completions: {\n      takesFile: true,\n      run: findCompletions\n    },\n    properties: {\n      run: findProperties\n    },\n    type: {\n      takesFile: true,\n      run: findTypeAt\n    },\n    documentation: {\n      takesFile: true,\n      run: findDocs\n    },\n    definition: {\n      takesFile: true,\n      run: findDef\n    },\n    refs: {\n      takesFile: true,\n      fullFile: true,\n      run: findRefs\n    },\n    rename: {\n      takesFile: true,\n      fullFile: true,\n      run: buildRename\n    },\n    files: {\n      run: listFiles\n    }\n  };\n\n  exports.defineQueryType = function(name, desc) { queryTypes[name] = desc; };\n\n  function File(name, parent) {\n    this.name = name;\n    this.parent = parent;\n    this.scope = this.text = this.ast = this.lineOffsets = null;\n  }\n  File.prototype.asLineChar = function(pos) { return asLineChar(this, pos); };\n\n  function parseFile(srv, file) {\n    var options = {\n      directSourceFile: file,\n      allowReturnOutsideFunction: true,\n      allowImportExportEverywhere: true,\n      ecmaVersion: srv.options.ecmaVersion,\n      allowHashBang: true\n    };\n    var text = srv.signalReturnFirst(\"preParse\", file.text, options) || file.text;\n    var ast = infer.parse(text, options);\n    srv.signal(\"postParse\", ast, text);\n    return ast;\n  }\n\n  var astral = /[\\uD800-\\uDBFF]/g;\n\n  function updateText(file, text, srv) {\n    file.text = srv.options.stripCRs ? text.replace(/\\r\\n/g, \"\\n\") : text;\n    file.hasAstral = astral.test(file.text);\n    infer.withContext(srv.cx, function() {\n      file.ast = parseFile(srv, file);\n    });\n    file.lineOffsets = null;\n  }\n\n  var Server = exports.Server = function(options) {\n    this.cx = null;\n    this.options = options || {};\n    for (var o in defaultOptions) if (!options.hasOwnProperty(o))\n      options[o] = defaultOptions[o];\n\n    this.projectDir = options.projectDir.replace(/\\\\/g, \"/\");\n    if (!/\\/$/.test(this.projectDir)) this.projectDir += \"/\";\n\n    this.parent = options.parent;\n    this.handlers = Object.create(null);\n    this.files = [];\n    this.fileMap = Object.create(null);\n    this.needsPurge = [];\n    this.budgets = Object.create(null);\n    this.uses = 0;\n    this.pending = 0;\n    this.asyncError = null;\n    this.mod = {};\n\n    this.defs = options.defs.slice(0);\n    this.plugins = Object.create(null);\n    for (var plugin in options.plugins) if (options.plugins.hasOwnProperty(plugin))\n      this.loadPlugin(plugin, options.plugins[plugin]);\n\n    this.reset();\n  };\n  Server.prototype = signal.mixin({\n    addFile: function(name, /*optional*/ text, parent) {\n      // Don't crash when sloppy plugins pass non-existent parent ids\n      if (parent && !(parent in this.fileMap)) parent = null;\n      if (!(name in this.fileMap))\n        name = this.normalizeFilename(name);\n      ensureFile(this, name, parent, text);\n    },\n    delFile: function(name) {\n      var file = this.findFile(name);\n      if (file) {\n        this.needsPurge.push(file.name);\n        for (var i = 0; i < this.files.length; i++) {\n          if (this.files[i] == file) this.files.splice(i--, 1);\n          else if (this.files[i].parent == name) this.files[i].parent = null;\n        }\n        delete this.fileMap[file.name];\n      }\n    },\n    reset: function() {\n      this.signal(\"reset\");\n      this.cx = new infer.Context(this.defs, this);\n      this.uses = 0;\n      this.budgets = Object.create(null);\n      for (var i = 0; i < this.files.length; ++i) {\n        var file = this.files[i];\n        if (file.scope) {\n          infer.clearScopes(file.ast);\n          file.scope = null;\n        }\n      }\n      this.signal(\"postReset\");\n    },\n\n    request: function(doc, c) {\n      var inv = invalidDoc(doc);\n      if (inv) return c(inv);\n\n      var self = this;\n      doRequest(this, doc, function(err, data) {\n        c(err, data);\n        if (self.uses > 40) {\n          self.reset();\n          analyzeAll(self, null, function(){});\n        }\n      });\n    },\n\n    findFile: function(name) {\n      return this.fileMap[this.normalizeFilename(name)];\n    },\n\n    flush: function(c) {\n      var cx = this.cx;\n      analyzeAll(this, null, function(err) {\n        if (err) return c(err);\n        infer.withContext(cx, c);\n      });\n    },\n\n    startAsyncAction: function() {\n      ++this.pending;\n    },\n    finishAsyncAction: function(err) {\n      if (err) this.asyncError = err;\n      if (--this.pending === 0) this.signal(\"everythingFetched\");\n    },\n\n    addDefs: function(defs, toFront) {\n      if (toFront) this.defs.unshift(defs);\n      else this.defs.push(defs);\n\n      if (this.cx) this.reset();\n    },\n\n    deleteDefs: function(name) {\n      for (var i = 0; i < this.defs.length; i++) if (this.defs[i][\"!name\"] == name) {\n        this.defs.splice(i, 1);\n        if (this.cx) this.reset();\n        return;\n      }\n    },\n\n    loadPlugin: function(name, options) {\n      if (arguments.length == 1) options = this.options.plugins[name] || true;\n      if (name in this.plugins || !(name in plugins) || !options) return;\n      this.plugins[name] = true;\n      var init = plugins[name](this, options);\n\n      // This is for backwards-compatibilty. Don't rely on it -- use addDef and on directly\n      if (!init) return;\n      if (init.defs) this.addDefs(init.defs, init.loadFirst);\n      if (init.passes) for (var type in init.passes) if (init.passes.hasOwnProperty(type))\n        this.on(type, init.passes[type]);\n    },\n\n    normalizeFilename: function(name) {\n      var norm = this.options.normalizeFilename(name).replace(/\\\\/g, \"/\");\n      if (norm.indexOf(this.projectDir) == 0) norm = norm.slice(this.projectDir.length);\n      return norm;\n    }\n  });\n\n  function doRequest(srv, doc, c) {\n    if (doc.query && !queryTypes.hasOwnProperty(doc.query.type))\n      return c(\"No query type '\" + doc.query.type + \"' defined\");\n\n    var query = doc.query;\n    // Respond as soon as possible when this just uploads files\n    if (!query) c(null, {});\n\n    var files = doc.files || [];\n    if (files.length) ++srv.uses;\n    for (var i = 0; i < files.length; ++i) {\n      var file = files[i];\n      file.name = srv.normalizeFilename(file.name);\n      if (file.type == \"delete\")\n        srv.delFile(file.name);\n      else\n        ensureFile(srv, file.name, null, file.type == \"full\" ? file.text : null);\n    }\n\n    var timeBudget = typeof doc.timeout == \"number\" ? [doc.timeout] : null;\n    if (!query) {\n      analyzeAll(srv, timeBudget, function(){});\n      return;\n    }\n\n    var queryType = queryTypes[query.type];\n    if (queryType.takesFile) {\n      if (typeof query.file != \"string\") return c(\".query.file must be a string\");\n      if (!/^#/.test(query.file)) ensureFile(srv, query.file, null);\n    }\n\n    analyzeAll(srv, timeBudget, function(err) {\n      if (err) return c(err);\n      var file = queryType.takesFile && resolveFile(srv, files, query.file);\n      if (queryType.fullFile && file.type == \"part\")\n        return c(\"Can't run a \" + query.type + \" query on a file fragment\");\n\n      infer.resetGuessing();\n      infer.withContext(srv.cx, function() {\n        var result, run = function() { result = queryType.run(srv, query, file); };\n        try {\n          if (timeBudget) infer.withTimeout(timeBudget[0], run);\n          else run();\n        } catch (e) {\n          if (srv.options.debug && e.name != \"TernError\") console.error(e.stack);\n          return c(e);\n        }\n        c(null, result);\n      });\n    });\n  }\n\n  function analyzeFile(srv, file) {\n    infer.withContext(srv.cx, function() {\n      file.scope = srv.cx.topScope;\n      srv.signal(\"beforeLoad\", file);\n      infer.analyze(file.ast, file.name, file.scope);\n      srv.signal(\"afterLoad\", file);\n    });\n    return file;\n  }\n\n  function ensureFile(srv, name, parent, text) {\n    var known = srv.findFile(name);\n    if (known) {\n      if (text != null) {\n        if (known.scope) {\n          srv.needsPurge.push(name);\n          infer.clearScopes(known.ast);\n          known.scope = null;\n        }\n        updateText(known, text, srv);\n      }\n      if (parentDepth(srv, known.parent) > parentDepth(srv, parent)) {\n        known.parent = parent;\n        if (known.excluded) known.excluded = null;\n      }\n      return;\n    }\n\n    var file = new File(name, parent);\n    srv.files.push(file);\n    srv.fileMap[name] = file;\n    if (text != null) {\n      updateText(file, text, srv);\n    } else if (srv.options.async) {\n      srv.startAsyncAction();\n      srv.options.getFile(name, function(err, text) {\n        updateText(file, text || \"\", srv);\n        srv.finishAsyncAction(err);\n      });\n    } else {\n      updateText(file, srv.options.getFile(name) || \"\", srv);\n    }\n  }\n\n  function fetchAll(srv, c) {\n    var done = true, returned = false;\n    srv.files.forEach(function(file) {\n      if (file.text != null) return;\n      if (srv.options.async) {\n        done = false;\n        srv.options.getFile(file.name, function(err, text) {\n          if (err && !returned) { returned = true; return c(err); }\n          updateText(file, text || \"\", srv);\n          fetchAll(srv, c);\n        });\n      } else {\n        try {\n          updateText(file, srv.options.getFile(file.name) || \"\", srv);\n        } catch (e) { return c(e); }\n      }\n    });\n    if (done) c();\n  }\n\n  function waitOnFetch(srv, timeBudget, c) {\n    var done = function() {\n      srv.off(\"everythingFetched\", done);\n      clearTimeout(timeout);\n      analyzeAll(srv, timeBudget, c);\n    };\n    srv.on(\"everythingFetched\", done);\n    var timeout = setTimeout(done, srv.options.fetchTimeout);\n  }\n\n  function analyzeAll(srv, timeBudget, c) {\n    if (srv.pending) return waitOnFetch(srv, timeBudget, c);\n\n    var e = srv.fetchError;\n    if (e) { srv.fetchError = null; return c(e); }\n\n    if (srv.needsPurge.length > 0) infer.withContext(srv.cx, function() {\n      infer.purge(srv.needsPurge);\n      srv.needsPurge.length = 0;\n    });\n\n    var done = true;\n    // The second inner loop might add new files. The outer loop keeps\n    // repeating both inner loops until all files have been looked at.\n    for (var i = 0; i < srv.files.length;) {\n      var toAnalyze = [];\n      for (; i < srv.files.length; ++i) {\n        var file = srv.files[i];\n        if (file.text == null) done = false;\n        else if (file.scope == null && !file.excluded) toAnalyze.push(file);\n      }\n      toAnalyze.sort(function(a, b) {\n        return parentDepth(srv, a.parent) - parentDepth(srv, b.parent);\n      });\n      for (var j = 0; j < toAnalyze.length; j++) {\n        var file = toAnalyze[j];\n        if (file.parent && !chargeOnBudget(srv, file)) {\n          file.excluded = true;\n        } else if (timeBudget) {\n          var startTime = +new Date;\n          try {\n            infer.withTimeout(timeBudget[0], function() { analyzeFile(srv, file); });\n          } catch(e) {\n            if (e instanceof infer.TimedOut) return c(e);\n            else throw e;\n          }\n          timeBudget[0] -= +new Date - startTime;\n        } else {\n          analyzeFile(srv, file);\n        }\n      }\n    }\n    if (done) c();\n    else waitOnFetch(srv, timeBudget, c);\n  }\n\n  function firstLine(str) {\n    var end = str.indexOf(\"\\n\");\n    if (end < 0) return str;\n    return str.slice(0, end);\n  }\n\n  function findMatchingPosition(line, file, near) {\n    var pos = Math.max(0, near - 500), closest = null;\n    if (!/^\\s*$/.test(line)) for (;;) {\n      var found = file.indexOf(line, pos);\n      if (found < 0 || found > near + 500) break;\n      if (closest == null || Math.abs(closest - near) > Math.abs(found - near))\n        closest = found;\n      pos = found + line.length;\n    }\n    return closest;\n  }\n\n  function scopeDepth(s) {\n    for (var i = 0; s; ++i, s = s.prev) {}\n    return i;\n  }\n\n  function ternError(msg) {\n    var err = new Error(msg);\n    err.name = \"TernError\";\n    return err;\n  }\n\n  function resolveFile(srv, localFiles, name) {\n    var isRef = name.match(/^#(\\d+)$/);\n    if (!isRef) return srv.findFile(name);\n\n    var file = localFiles[isRef[1]];\n    if (!file || file.type == \"delete\") throw ternError(\"Reference to unknown file \" + name);\n    if (file.type == \"full\") return srv.fileMap[file.name];\n\n    // This is a partial file\n\n    var realFile = file.backing = srv.fileMap[file.name];\n    var offset = resolvePos(realFile, file.offsetLines == null ? file.offset : {line: file.offsetLines, ch: 0}, true);\n    var line = firstLine(file.text);\n    var foundPos = findMatchingPosition(line, realFile.text, offset);\n    var pos = foundPos == null ? Math.max(0, realFile.text.lastIndexOf(\"\\n\", offset)) : foundPos;\n    var inObject, atFunction;\n\n    infer.withContext(srv.cx, function() {\n      infer.purge(file.name, pos, pos + file.text.length);\n\n      var text = file.text, m;\n      if (m = text.match(/(?:\"([^\"]*)\"|([\\w$]+))\\s*:\\s*function\\b/)) {\n        var objNode = walk.findNodeAround(file.backing.ast, pos, \"ObjectExpression\");\n        if (objNode && objNode.node.objType)\n          inObject = {type: objNode.node.objType, prop: m[2] || m[1]};\n      }\n      if (foundPos && (m = line.match(/^(.*?)\\bfunction\\b/))) {\n        var cut = m[1].length, white = \"\";\n        for (var i = 0; i < cut; ++i) white += \" \";\n        file.text = white + text.slice(cut);\n        atFunction = true;\n      }\n\n      var scopeStart = infer.scopeAt(realFile.ast, pos, realFile.scope);\n      var scopeEnd = infer.scopeAt(realFile.ast, pos + text.length, realFile.scope);\n      var scope = file.scope = scopeDepth(scopeStart) < scopeDepth(scopeEnd) ? scopeEnd : scopeStart;\n      file.ast = parseFile(srv, file);\n      infer.analyze(file.ast, file.name, scope);\n\n      // This is a kludge to tie together the function types (if any)\n      // outside and inside of the fragment, so that arguments and\n      // return values have some information known about them.\n      tieTogether: {\n        if (inObject || atFunction) {\n          var newInner = infer.scopeAt(file.ast, line.length, scopeStart);\n          if (!newInner.fnType) break tieTogether;\n          if (inObject) {\n            var prop = inObject.type.getProp(inObject.prop);\n            prop.addType(newInner.fnType);\n          } else if (atFunction) {\n            var inner = infer.scopeAt(realFile.ast, pos + line.length, realFile.scope);\n            if (inner == scopeStart || !inner.fnType) break tieTogether;\n            var fOld = inner.fnType, fNew = newInner.fnType;\n            if (!fNew || (fNew.name != fOld.name && fOld.name)) break tieTogether;\n            for (var i = 0, e = Math.min(fOld.args.length, fNew.args.length); i < e; ++i)\n              fOld.args[i].propagate(fNew.args[i]);\n            fOld.self.propagate(fNew.self);\n            fNew.retval.propagate(fOld.retval);\n          }\n        }\n      }\n    });\n    return file;\n  }\n\n  // Budget management\n\n  function astSize(node) {\n    var size = 0;\n    walk.simple(node, {Expression: function() { ++size; }});\n    return size;\n  }\n\n  function parentDepth(srv, parent) {\n    var depth = 0;\n    while (parent) {\n      parent = srv.fileMap[parent].parent;\n      ++depth;\n    }\n    return depth;\n  }\n\n  function budgetName(srv, file) {\n    for (;;) {\n      var parent = srv.fileMap[file.parent];\n      if (!parent.parent) break;\n      file = parent;\n    }\n    return file.name;\n  }\n\n  function chargeOnBudget(srv, file) {\n    var bName = budgetName(srv, file);\n    var size = astSize(file.ast);\n    var known = srv.budgets[bName];\n    if (known == null)\n      known = srv.budgets[bName] = srv.options.dependencyBudget;\n    if (known < size) return false;\n    srv.budgets[bName] = known - size;\n    return true;\n  }\n\n  // Query helpers\n\n  function isPosition(val) {\n    return typeof val == \"number\" || typeof val == \"object\" &&\n      typeof val.line == \"number\" && typeof val.ch == \"number\";\n  }\n\n  // Baseline query document validation\n  function invalidDoc(doc) {\n    if (doc.query) {\n      if (typeof doc.query.type != \"string\") return \".query.type must be a string\";\n      if (doc.query.start && !isPosition(doc.query.start)) return \".query.start must be a position\";\n      if (doc.query.end && !isPosition(doc.query.end)) return \".query.end must be a position\";\n    }\n    if (doc.files) {\n      if (!Array.isArray(doc.files)) return \"Files property must be an array\";\n      for (var i = 0; i < doc.files.length; ++i) {\n        var file = doc.files[i];\n        if (typeof file != \"object\") return \".files[n] must be objects\";\n        else if (typeof file.name != \"string\") return \".files[n].name must be a string\";\n        else if (file.type == \"delete\") continue;\n        else if (typeof file.text != \"string\") return \".files[n].text must be a string\";\n        else if (file.type == \"part\") {\n          if (!isPosition(file.offset) && typeof file.offsetLines != \"number\")\n            return \".files[n].offset must be a position\";\n        } else if (file.type != \"full\") return \".files[n].type must be \\\"full\\\" or \\\"part\\\"\";\n      }\n    }\n  }\n\n  var offsetSkipLines = 25;\n\n  function forwardCharacters(file, start, chars) {\n    var pos = start + chars, m;\n    if (file.hasAstral) {\n      astral.lastIndex = start;\n      while ((m = astral.exec(file.text)) && m.index < pos) pos++;\n    }\n    return pos;\n  }\n\n  function findLineStart(file, line) {\n    var text = file.text, offsets = file.lineOffsets || (file.lineOffsets = [0]);\n    var pos = 0, curLine = 0;\n    var storePos = Math.min(Math.floor(line / offsetSkipLines), offsets.length - 1);\n    var pos = offsets[storePos], curLine = storePos * offsetSkipLines;\n\n    while (curLine < line) {\n      ++curLine;\n      pos = text.indexOf(\"\\n\", pos) + 1;\n      if (pos === 0) return null;\n      if (curLine % offsetSkipLines === 0) offsets.push(pos);\n    }\n    return pos;\n  }\n\n  var resolvePos = exports.resolvePos = function(file, pos, tolerant) {\n    if (typeof pos != \"number\") {\n      var lineStart = findLineStart(file, pos.line);\n      if (lineStart == null) {\n        if (tolerant) pos = file.text.length;\n        else throw ternError(\"File doesn't contain a line \" + pos.line);\n      } else {\n        pos = forwardCharacters(file, lineStart, pos.ch);\n      }\n    } else {\n      pos = forwardCharacters(file, 0, pos);\n    }\n    if (pos > file.text.length) {\n      if (tolerant) pos = file.text.length;\n      else throw ternError(\"Position \" + pos + \" is outside of file.\");\n    }\n    return pos;\n  };\n\n  function charDistanceBetween(file, start, end) {\n    var diff = end - start, m;\n    if (file.hasAstral) {\n      astral.lastIndex = start;\n      while ((m = astral.exec(file.text)) && m.index < end) diff--;\n    }\n    return diff;\n  }\n\n  function asLineChar(file, pos) {\n    if (!file) return {line: 0, ch: 0};\n    var offsets = file.lineOffsets || (file.lineOffsets = [0]);\n    var text = file.text, line, lineStart;\n    for (var i = offsets.length - 1; i >= 0; --i) if (offsets[i] <= pos) {\n      line = i * offsetSkipLines;\n      lineStart = offsets[i];\n    }\n    for (;;) {\n      var eol = text.indexOf(\"\\n\", lineStart);\n      if (eol >= pos || eol < 0) break;\n      lineStart = eol + 1;\n      ++line;\n    }\n    return {line: line, ch: charDistanceBetween(file, lineStart, pos)};\n  }\n\n  var outputPos = exports.outputPos = function(query, file, pos) {\n    if (query.lineCharPositions) {\n      var out = asLineChar(file, pos);\n      if (file.type == \"part\")\n        out.line += file.offsetLines != null ? file.offsetLines : asLineChar(file.backing, file.offset).line;\n      return out;\n    } else {\n      return charDistanceBetween(file, 0, pos) + (file.type == \"part\" ? file.offset : 0);\n    }\n  };\n\n  // Delete empty fields from result objects\n  function clean(obj) {\n    for (var prop in obj) if (obj[prop] == null) delete obj[prop];\n    return obj;\n  }\n  function maybeSet(obj, prop, val) {\n    if (val != null) obj[prop] = val;\n  }\n\n  // Built-in query types\n\n  function compareCompletions(a, b) {\n    if (typeof a != \"string\") { a = a.name; b = b.name; }\n    var aUp = /^[A-Z]/.test(a), bUp = /^[A-Z]/.test(b);\n    if (aUp == bUp) return a < b ? -1 : a == b ? 0 : 1;\n    else return aUp ? 1 : -1;\n  }\n\n  function isStringAround(node, start, end) {\n    return node.type == \"Literal\" && typeof node.value == \"string\" &&\n      node.start == start - 1 && node.end <= end + 1;\n  }\n\n  function pointInProp(objNode, point) {\n    for (var i = 0; i < objNode.properties.length; i++) {\n      var curProp = objNode.properties[i];\n      if (curProp.key && curProp.key.start <= point && curProp.key.end >= point)\n        return curProp;\n    }\n  }\n\n  var jsKeywords = (\"break do instanceof typeof case else new var \" +\n    \"catch finally return void continue for switch while debugger \" +\n    \"function this with default if throw delete in try\").split(\" \");\n  var jsKeywordsES6 = jsKeywords.concat(\"export class extends const super yield import let static\".split(\" \"));\n\n  var addCompletion = exports.addCompletion = function(query, completions, name, aval, depth) {\n    var typeInfo = query.types || query.docs || query.urls || query.origins;\n    var wrapAsObjs = typeInfo || query.depths;\n\n    for (var i = 0; i < completions.length; ++i) {\n      var c = completions[i];\n      if ((wrapAsObjs ? c.name : c) == name) return;\n    }\n    var rec = wrapAsObjs ? {name: name} : name;\n    completions.push(rec);\n\n    if (aval && typeInfo) {\n      infer.resetGuessing();\n      var type = aval.getType();\n      rec.guess = infer.didGuess();\n      if (query.types)\n        rec.type = infer.toString(aval);\n      if (query.docs)\n        maybeSet(rec, \"doc\", parseDoc(query, aval.doc || type && type.doc));\n      if (query.urls)\n        maybeSet(rec, \"url\", aval.url || type && type.url);\n      if (query.origins)\n        maybeSet(rec, \"origin\", aval.origin || type && type.origin);\n    }\n    if (query.depths) rec.depth = depth || 0;\n    return rec;\n  };\n\n  function findCompletions(srv, query, file) {\n    if (query.end == null) throw ternError(\"missing .query.end field\");\n    var fromPlugin = srv.signalReturnFirst(\"completion\", file, query);\n    if (fromPlugin) return fromPlugin;\n\n    var wordStart = resolvePos(file, query.end), wordEnd = wordStart, text = file.text;\n    while (wordStart && acorn.isIdentifierChar(text.charCodeAt(wordStart - 1))) --wordStart;\n    if (query.expandWordForward !== false)\n      while (wordEnd < text.length && acorn.isIdentifierChar(text.charCodeAt(wordEnd))) ++wordEnd;\n    var word = text.slice(wordStart, wordEnd), completions = [], ignoreObj;\n    if (query.caseInsensitive) word = word.toLowerCase();\n\n    function gather(prop, obj, depth, addInfo) {\n      // 'hasOwnProperty' and such are usually just noise, leave them\n      // out when no prefix is provided.\n      if ((objLit || query.omitObjectPrototype !== false) && obj == srv.cx.protos.Object && !word) return;\n      if (query.filter !== false && word &&\n          (query.caseInsensitive ? prop.toLowerCase() : prop).indexOf(word) !== 0) return;\n      if (ignoreObj && ignoreObj.props[prop]) return;\n      var result = addCompletion(query, completions, prop, obj && obj.props[prop], depth);\n      if (addInfo && result && typeof result != \"string\") addInfo(result);\n    }\n\n    var hookname, prop, objType, isKey;\n\n    var exprAt = infer.findExpressionAround(file.ast, null, wordStart, file.scope);\n    var memberExpr, objLit;\n    // Decide whether this is an object property, either in a member\n    // expression or an object literal.\n    if (exprAt) {\n      var exprNode = exprAt.node;\n\n      if (query.inLiteral === false && exprNode.type === \"Literal\" &&\n          (typeof exprNode.value === 'string' || exprNode.regex))\n        return {\n          start: outputPos(query, file, wordStart),\n          end: outputPos(query, file, wordEnd),\n          completions: []\n        };\n\n      if (exprNode.type == \"MemberExpression\" && exprNode.object.end < wordStart) {\n        memberExpr = exprAt;\n      } else if (isStringAround(exprNode, wordStart, wordEnd)) {\n        var parent = infer.parentNode(exprNode, file.ast);\n        if (parent.type == \"MemberExpression\" && parent.property == exprNode)\n          memberExpr = {node: parent, state: exprAt.state};\n      } else if (exprNode.type == \"ObjectExpression\") {\n        var objProp = pointInProp(exprNode, wordEnd);\n        if (objProp) {\n          objLit = exprAt;\n          prop = isKey = objProp.key.name || objProp.key.value;\n        } else if (!word && !/:\\s*$/.test(file.text.slice(0, wordStart))) {\n          objLit = exprAt;\n          prop = isKey = true;\n        }\n      }\n    }\n\n    if (objLit) {\n      // Since we can't use the type of the literal itself to complete\n      // its properties (it doesn't contain the information we need),\n      // we have to try asking the surrounding expression for type info.\n      objType = infer.typeFromContext(file.ast, objLit);\n      ignoreObj = objLit.node.objType;\n    } else if (memberExpr) {\n      prop = memberExpr.node.property;\n      prop = prop.type == \"Literal\" ? prop.value.slice(1) : prop.name;\n      memberExpr.node = memberExpr.node.object;\n      objType = infer.expressionType(memberExpr);\n    } else if (text.charAt(wordStart - 1) == \".\") {\n      var pathStart = wordStart - 1;\n      while (pathStart && (text.charAt(pathStart - 1) == \".\" || acorn.isIdentifierChar(text.charCodeAt(pathStart - 1)))) pathStart--;\n      var path = text.slice(pathStart, wordStart - 1);\n      if (path) {\n        objType = infer.def.parsePath(path, file.scope).getObjType();\n        prop = word;\n      }\n    }\n\n    if (prop != null) {\n      srv.cx.completingProperty = prop;\n\n      if (objType) infer.forAllPropertiesOf(objType, gather);\n\n      if (!completions.length && query.guess !== false && objType && objType.guessProperties)\n        objType.guessProperties(function(p, o, d) {if (p != prop && p != \"✖\" && p != \"<i>\") gather(p, o, d);});\n      if (!completions.length && word.length >= 2 && query.guess !== false)\n        for (var prop in srv.cx.props) gather(prop, srv.cx.props[prop][0], 0);\n      hookname = \"memberCompletion\";\n    } else {\n      infer.forAllLocalsAt(file.ast, wordStart, file.scope, gather);\n      if (query.includeKeywords) {\n        (srv.options.ecmaVersion >= 6 ? jsKeywordsES6 : jsKeywords).forEach(function(kw) {\n          gather(kw, null, 0, function(rec) { rec.isKeyword = true; });\n        });\n      }\n      hookname = \"variableCompletion\";\n    }\n    srv.signal(hookname, file, wordStart, wordEnd, gather);\n\n    if (query.sort !== false) completions.sort(compareCompletions);\n    srv.cx.completingProperty = null;\n\n    return {start: outputPos(query, file, wordStart),\n            end: outputPos(query, file, wordEnd),\n            isProperty: !!prop,\n            isObjectKey: !!isKey,\n            completions: completions};\n  }\n\n  function findProperties(srv, query) {\n    var prefix = query.prefix, found = [];\n    for (var prop in srv.cx.props)\n      if (prop != \"<i>\" && (!prefix || prop.indexOf(prefix) === 0)) found.push(prop);\n    if (query.sort !== false) found.sort(compareCompletions);\n    return {completions: found};\n  }\n\n  function inBody(node, pos) {\n    var body = node.body, start, end;\n    if (!body) return false;\n    if (Array.isArray(body)) {\n      start = body[0].start;\n      end = body[body.length - 1].end;\n    } else {\n      start = body.start;\n      end = body.end;\n    }\n    return start <= pos && end >= pos;\n  }\n\n  var findExpr = exports.findQueryExpr = function(file, query, wide) {\n    if (query.end == null) throw ternError(\"missing .query.end field\");\n\n    if (query.variable) {\n      var scope = infer.scopeAt(file.ast, resolvePos(file, query.end), file.scope);\n      return {node: {type: \"Identifier\", name: query.variable, start: query.end, end: query.end + 1},\n              state: scope};\n    } else {\n      var start = query.start && resolvePos(file, query.start), end = resolvePos(file, query.end);\n      var expr = infer.findExpressionAt(file.ast, start, end, file.scope);\n      if (!expr) {\n        var span = infer.findClosestExpression(file.ast, start, end, file.scope);\n        if (span && !inBody(span.node, end) &&\n            (wide || (start == null ? end : start) - span.node.start < 20 || span.node.end - end < 20))\n          expr = span;\n      }\n      if (!expr) {\n        var around = infer.findExpressionAround(file.ast, start, end, file.scope);\n        if (around && !inBody(around.node, end) &&\n            (around.node.type == \"ObjectExpression\" || wide ||\n             (start == null ? end : start) - around.node.start < 20 || around.node.end - end < 20))\n          expr = around;\n      }\n      return expr;\n    }\n  };\n\n  function findExprAround(file, query, wide) {\n    var start = query.start && resolvePos(file, query.start), end = resolvePos(file, query.end);\n    var expr = null;\n    var around = infer.findExpressionAround(file.ast, start, end, file.scope);\n    if (around && !inBody(around.node, end) &&\n        (around.node.type == \"ObjectExpression\" || wide ||\n         (start == null ? end : start) - around.node.start < 20 || around.node.end - end < 20))\n      expr = around;\n    return expr;\n  }\n\n  function findExprOrThrow(file, query, wide) {\n    var expr = findExpr(file, query, wide);\n    if (expr) return expr;\n    throw ternError(\"No expression at the given position.\");\n  }\n\n  function ensureObj(tp) {\n    if (!tp || !(tp = tp.getType()) || !(tp instanceof infer.Obj)) return null;\n    return tp;\n  }\n\n  function findExprType(srv, query, file, expr) {\n    var type;\n    if (expr) {\n      infer.resetGuessing();\n      type = infer.expressionType(expr);\n    }\n    var typeHandlers = srv.hasHandler(\"typeAt\");\n    if (typeHandlers) {\n      var pos = resolvePos(file, query.end);\n      for (var i = 0; i < typeHandlers.length; i++)\n        type = typeHandlers[i](file, pos, expr, type);\n    }\n    if (!type) throw ternError(\"No type found at the given position.\");\n\n    var objProp;\n    if (expr.node.type == \"ObjectExpression\" && query.end != null &&\n        (objProp = pointInProp(expr.node, resolvePos(file, query.end)))) {\n      var name = objProp.key.name;\n      var fromCx = ensureObj(infer.typeFromContext(file.ast, expr));\n      if (fromCx && fromCx.hasProp(name)) {\n        type = fromCx.hasProp(name);\n      } else {\n        var fromLocal = ensureObj(type);\n        if (fromLocal && fromLocal.hasProp(name))\n          type = fromLocal.hasProp(name);\n      }\n    }\n    return type;\n  }\n\n  function findTypeAtExpr(srv, query, file, expr) {\n    var exprName, exprType;\n    var type = findExprType(srv, query, file, expr), exprType = type;\n    if (query.preferFunction)\n      type = type.getFunctionType() || type.getType();\n    else\n      type = type.getType();\n\n    if (expr) {\n      if (expr.node.type == \"Identifier\")\n        exprName = expr.node.name;\n      else if (expr.node.type == \"MemberExpression\" && !expr.node.computed)\n        exprName = expr.node.property.name;\n      else if (expr.node.type == \"MethodDefinition\" && !expr.node.computed)\n        exprName = expr.node.key.name;\n    }\n\n    if (query.depth != null && typeof query.depth != \"number\")\n      throw ternError(\".query.depth must be a number\");\n\n    return [type, exprName, exprType];\n  }\n\n  function findTypeAt(srv, query, file) {\n    var type, exprName, exprType;\n    var expr = findExpr(file, query);\n    var typeResult = findTypeAtExpr(srv, query, file, expr);\n    type = typeResult[0];\n    if (!type) {\n      expr = findExprAround(file, query);\n      typeResult = findTypeAtExpr(srv, query, file, expr);\n      type = typeResult[0];\n    }\n    exprName = typeResult[1];\n    exprType = typeResult[2];\n\n    var result = {guess: infer.didGuess(),\n                  type: infer.toString(exprType, query.depth),\n                  name: type && type.name,\n                  exprName: exprName,\n                  doc: exprType.doc,\n                  url: exprType.url};\n    if (type) storeTypeDocs(query, type, result);\n\n    return clean(result);\n  }\n\n  function parseDoc(query, doc) {\n    if (!doc) return null;\n    if (query.docFormat == \"full\") return doc;\n    var parabreak = /.\\n[\\s@\\n]/.exec(doc);\n    if (parabreak) doc = doc.slice(0, parabreak.index + 1);\n    doc = doc.replace(/\\n\\s*/g, \" \");\n    if (doc.length < 100) return doc;\n    var sentenceEnd = /[\\.!?] [A-Z]/g;\n    sentenceEnd.lastIndex = 80;\n    var found = sentenceEnd.exec(doc);\n    if (found) doc = doc.slice(0, found.index + 1);\n    return doc;\n  }\n\n  function findDocs(srv, query, file) {\n    var expr = findExpr(file, query);\n    var type = findExprType(srv, query, file, expr);\n    var inner = type.getType();\n    if (!inner) {\n      expr = findExprAround(file, query);\n      type = findExprType(srv, query, file, expr);\n      inner = type.getType();\n    }\n    var result = {url: type.url, doc: parseDoc(query, type.doc), type: infer.toString(type)};\n    if (inner) storeTypeDocs(query, inner, result);\n    return clean(result);\n  }\n\n  function storeTypeDocs(query, type, out) {\n    if (!out.url) out.url = type.url;\n    if (!out.doc) out.doc = parseDoc(query, type.doc);\n    if (!out.origin) out.origin = type.origin;\n    var ctor, boring = infer.cx().protos;\n    if (!out.url && !out.doc && type.proto && (ctor = type.proto.hasCtor) &&\n        type.proto != boring.Object && type.proto != boring.Function && type.proto != boring.Array) {\n      out.url = ctor.url;\n      out.doc = parseDoc(query, ctor.doc);\n    }\n  }\n\n  var getSpan = exports.getSpan = function(obj) {\n    if (!obj.origin) return;\n    if (obj.originNode) {\n      var node = obj.originNode;\n      if (/^Function/.test(node.type) && node.id) node = node.id;\n      return {origin: obj.origin, node: node};\n    }\n    if (obj.span) return {origin: obj.origin, span: obj.span};\n  };\n\n  var storeSpan = exports.storeSpan = function(srv, query, span, target) {\n    target.origin = span.origin;\n    if (span.span) {\n      var m = /^(\\d+)\\[(\\d+):(\\d+)\\]-(\\d+)\\[(\\d+):(\\d+)\\]$/.exec(span.span);\n      target.start = query.lineCharPositions ? {line: Number(m[2]), ch: Number(m[3])} : Number(m[1]);\n      target.end = query.lineCharPositions ? {line: Number(m[5]), ch: Number(m[6])} : Number(m[4]);\n    } else {\n      var file = srv.fileMap[span.origin];\n      target.start = outputPos(query, file, span.node.start);\n      target.end = outputPos(query, file, span.node.end);\n    }\n  };\n\n  function findDef(srv, query, file) {\n    var expr = findExpr(file, query);\n    var type = findExprType(srv, query, file, expr);\n    if (infer.didGuess()) return {};\n\n    var span = getSpan(type);\n    var result = {url: type.url, doc: parseDoc(query, type.doc), origin: type.origin};\n\n    if (type.types) for (var i = type.types.length - 1; i >= 0; --i) {\n      var tp = type.types[i];\n      storeTypeDocs(query, tp, result);\n      if (!span) span = getSpan(tp);\n    }\n\n    if (span && span.node) { // refers to a loaded file\n      var spanFile = span.node.sourceFile || srv.fileMap[span.origin];\n      var start = outputPos(query, spanFile, span.node.start), end = outputPos(query, spanFile, span.node.end);\n      result.start = start; result.end = end;\n      result.file = span.origin;\n      var cxStart = Math.max(0, span.node.start - 50);\n      result.contextOffset = span.node.start - cxStart;\n      result.context = spanFile.text.slice(cxStart, cxStart + 50);\n    } else if (span) { // external\n      result.file = span.origin;\n      storeSpan(srv, query, span, result);\n    }\n    return clean(result);\n  }\n\n  function findRefsToVariable(srv, query, file, expr, isRename) {\n    var name = expr.node.name;\n\n    for (var scope = expr.state; scope && !(name in scope.props); scope = scope.prev) {}\n    if (!scope) throw ternError(\"Could not find a definition for \" + name);\n\n    var type, refs = [];\n    function storeRef(file) {\n      return function(node, scopeHere, ancestors) {\n        var value = {file: file.name,\n                     start: outputPos(query, file, node.start),\n                     end: outputPos(query, file, node.end)};\n        if (isRename) {\n          for (var s = scopeHere; s != scope; s = s.prev) {\n            var exists = s.hasProp(isRename);\n            if (exists)\n              throw ternError(\"Renaming `\" + name + \"` to `\" + isRename + \"` would make a variable at line \" +\n                              (asLineChar(file, node.start).line + 1) + \" point to the definition at line \" +\n                              (asLineChar(file, exists.name.start).line + 1));\n          }\n          var parent = ancestors[ancestors.length - 2];\n          if (parent && parent.type == \"Property\" && parent.key == parent.value)\n            value.isShorthand = true;\n        }\n        refs.push(value);\n      };\n    }\n\n    if (scope.originNode) {\n      type = \"local\";\n      if (isRename) {\n        for (var prev = scope.prev; prev; prev = prev.prev)\n          if (isRename in prev.props) break;\n        if (prev) infer.findRefs(scope.originNode, scope, isRename, prev, function(node) {\n          throw ternError(\"Renaming `\" + name + \"` to `\" + isRename + \"` would shadow the definition used at line \" +\n                          (asLineChar(file, node.start).line + 1));\n        });\n      }\n      infer.findRefs(scope.originNode, scope, name, scope, storeRef(file));\n    } else {\n      type = \"global\";\n      if (query.onlySourceFile) {\n        infer.findRefs(file.ast, file.scope, name, scope, storeRef(file));\n      } else {\n        for (var i = 0; i < srv.files.length; ++i) {\n          var cur = srv.files[i];\n          infer.findRefs(cur.ast, cur.scope, name, scope, storeRef(cur));\n        }\n      }\n    }\n\n    return {refs: refs, type: type, name: name};\n  }\n\n  function findRefsToProperty(srv, query, sourceFile, expr, prop) {\n    var exprType = infer.expressionType(expr);\n    if (expr.node.type == \"MethodDefinition\") {\n      exprType = exprType.propertyOf;\n    }\n    var objType = exprType.getObjType();\n    if (!objType) throw ternError(\"Couldn't determine type of base object.\");\n\n    var refs = [];\n    function storeRef(file) {\n      return function(node) {\n        refs.push({file: file.name,\n                   start: outputPos(query, file, node.start),\n                   end: outputPos(query, file, node.end)});\n      };\n    }\n\n    if (query.onlySourceFile) {\n        infer.findPropRefs(sourceFile.ast, sourceFile.scope, objType, prop.name, storeRef(sourceFile));\n    } else {\n      for (var i = 0; i < srv.files.length; ++i) {\n        var cur = srv.files[i];\n        infer.findPropRefs(cur.ast, cur.scope, objType, prop.name, storeRef(cur));\n      }\n    }\n\n    return {refs: refs, name: prop.name};\n  }\n\n  function findRefs(srv, query, file) {\n    var expr = findExprOrThrow(file, query, true);\n    if (expr && expr.node.type == \"Identifier\") {\n      return findRefsToVariable(srv, query, file, expr);\n    } else if (expr && expr.node.type == \"MemberExpression\" && !expr.node.computed) {\n      var p = expr.node.property;\n      expr.node = expr.node.object;\n      return findRefsToProperty(srv, query, file, expr, p);\n    } else if (expr && expr.node.type == \"ObjectExpression\") {\n      var pos = resolvePos(file, query.end);\n      for (var i = 0; i < expr.node.properties.length; ++i) {\n        var k = expr.node.properties[i].key;\n        if (k.start <= pos && k.end >= pos)\n          return findRefsToProperty(srv, query, file, expr, k);\n      }\n    } else if (expr && expr.node.type == \"MethodDefinition\") {\n      var p = expr.node.key;\n      return findRefsToProperty(srv, query, file, expr, p);\n    }\n    throw ternError(\"Not at a variable or property name.\");\n  }\n\n  function buildRename(srv, query, file) {\n    if (typeof query.newName != \"string\") throw ternError(\".query.newName should be a string\");\n    var expr = findExprOrThrow(file, query);\n    if (!expr || expr.node.type != \"Identifier\") throw ternError(\"Not at a variable.\");\n\n    var data = findRefsToVariable(srv, query, file, expr, query.newName), refs = data.refs;\n    delete data.refs;\n    data.files = srv.files.map(function(f){return f.name;});\n\n    var changes = data.changes = [];\n    for (var i = 0; i < refs.length; ++i) {\n      var use = refs[i];\n      if (use.isShorthand) use.text = expr.node.name + \": \" + query.newName;\n      else use.text = query.newName;\n      changes.push(use);\n    }\n\n    return data;\n  }\n\n  function listFiles(srv) {\n    return {files: srv.files.map(function(f){return f.name;})};\n  }\n\n  exports.version = \"0.24.3\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/lib/tern.js\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.js":
/*!************************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.mjs\")) :\n  undefined;\n}(this, function (exports, acorn) { 'use strict';\n\n  function noop() {}\n\n  var LooseParser = function LooseParser(input, options) {\n    if ( options === void 0 ) options = {};\n\n    this.toks = this.constructor.BaseParser.tokenizer(input, options);\n    this.options = this.toks.options;\n    this.input = this.toks.input;\n    this.tok = this.last = {type: acorn.tokTypes.eof, start: 0, end: 0};\n    this.tok.validateRegExpFlags = noop;\n    this.tok.validateRegExpPattern = noop;\n    if (this.options.locations) {\n      var here = this.toks.curPosition();\n      this.tok.loc = new acorn.SourceLocation(this.toks, here, here);\n    }\n    this.ahead = []; // Tokens ahead\n    this.context = []; // Indentation contexted\n    this.curIndent = 0;\n    this.curLineStart = 0;\n    this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n    this.inAsync = false;\n    this.inFunction = false;\n  };\n\n  LooseParser.prototype.startNode = function startNode () {\n    return new acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n  };\n\n  LooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n    return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n  };\n\n  LooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n    if (this.options.locations) {\n      return new acorn.Node(this.toks, pos[0], pos[1])\n    } else {\n      return new acorn.Node(this.toks, pos)\n    }\n  };\n\n  LooseParser.prototype.finishNode = function finishNode (node, type) {\n    node.type = type;\n    node.end = this.last.end;\n    if (this.options.locations)\n      { node.loc.end = this.last.loc.end; }\n    if (this.options.ranges)\n      { node.range[1] = this.last.end; }\n    return node\n  };\n\n  LooseParser.prototype.dummyNode = function dummyNode (type) {\n    var dummy = this.startNode();\n    dummy.type = type;\n    dummy.end = dummy.start;\n    if (this.options.locations)\n      { dummy.loc.end = dummy.loc.start; }\n    if (this.options.ranges)\n      { dummy.range[1] = dummy.start; }\n    this.last = {type: acorn.tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc};\n    return dummy\n  };\n\n  LooseParser.prototype.dummyIdent = function dummyIdent () {\n    var dummy = this.dummyNode(\"Identifier\");\n    dummy.name = \"✖\";\n    return dummy\n  };\n\n  LooseParser.prototype.dummyString = function dummyString () {\n    var dummy = this.dummyNode(\"Literal\");\n    dummy.value = dummy.raw = \"✖\";\n    return dummy\n  };\n\n  LooseParser.prototype.eat = function eat (type) {\n    if (this.tok.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  LooseParser.prototype.isContextual = function isContextual (name) {\n    return this.tok.type === acorn.tokTypes.name && this.tok.value === name\n  };\n\n  LooseParser.prototype.eatContextual = function eatContextual (name) {\n    return this.tok.value === name && this.eat(acorn.tokTypes.name)\n  };\n\n  LooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n    return this.tok.type === acorn.tokTypes.eof || this.tok.type === acorn.tokTypes.braceR ||\n      acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n  };\n\n  LooseParser.prototype.semicolon = function semicolon () {\n    return this.eat(acorn.tokTypes.semi)\n  };\n\n  LooseParser.prototype.expect = function expect (type) {\n    if (this.eat(type)) { return true }\n    for (var i = 1; i <= 2; i++) {\n      if (this.lookAhead(i).type === type) {\n        for (var j = 0; j < i; j++) { this.next(); }\n        return true\n      }\n    }\n  };\n\n  LooseParser.prototype.pushCx = function pushCx () {\n    this.context.push(this.curIndent);\n  };\n\n  LooseParser.prototype.popCx = function popCx () {\n    this.curIndent = this.context.pop();\n  };\n\n  LooseParser.prototype.lineEnd = function lineEnd (pos) {\n    while (pos < this.input.length && !acorn.isNewLine(this.input.charCodeAt(pos))) { ++pos; }\n    return pos\n  };\n\n  LooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n    for (var count = 0;; ++pos) {\n      var ch = this.input.charCodeAt(pos);\n      if (ch === 32) { ++count; }\n      else if (ch === 9) { count += this.options.tabSize; }\n      else { return count }\n    }\n  };\n\n  LooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n    if (this.tok.type === closeTok || this.tok.type === acorn.tokTypes.eof) { return true }\n    return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n      (!blockHeuristic || this.nextLineStart >= this.input.length ||\n       this.indentationAfter(this.nextLineStart) < indent)\n  };\n\n  LooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n    for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n      var ch = this.input.charCodeAt(p);\n      if (ch !== 9 && ch !== 32) { return false }\n    }\n    return true\n  };\n\n  LooseParser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name]);\n  };\n\n  LooseParser.prototype.parse = function parse () {\n    this.next();\n    return this.parseTopLevel()\n  };\n\n  LooseParser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  LooseParser.parse = function parse (input, options) {\n    return new this(input, options).parse()\n  };\n\n  // Allows plugins to extend the base parser / tokenizer used\n  LooseParser.BaseParser = acorn.Parser;\n\n  var lp = LooseParser.prototype;\n\n  function isSpace(ch) {\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || acorn.isNewLine(ch)\n  }\n\n  lp.next = function() {\n    this.last = this.tok;\n    if (this.ahead.length)\n      { this.tok = this.ahead.shift(); }\n    else\n      { this.tok = this.readToken(); }\n\n    if (this.tok.start >= this.nextLineStart) {\n      while (this.tok.start >= this.nextLineStart) {\n        this.curLineStart = this.nextLineStart;\n        this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n      }\n      this.curIndent = this.indentationAfter(this.curLineStart);\n    }\n  };\n\n  lp.readToken = function() {\n    for (;;) {\n      try {\n        this.toks.next();\n        if (this.toks.type === acorn.tokTypes.dot &&\n            this.input.substr(this.toks.end, 1) === \".\" &&\n            this.options.ecmaVersion >= 6) {\n          this.toks.end++;\n          this.toks.type = acorn.tokTypes.ellipsis;\n        }\n        return new acorn.Token(this.toks)\n      } catch (e) {\n        if (!(e instanceof SyntaxError)) { throw e }\n\n        // Try to skip some text, based on the error message, and then continue\n        var msg = e.message, pos = e.raisedAt, replace = true;\n        if (/unterminated/i.test(msg)) {\n          pos = this.lineEnd(e.pos + 1);\n          if (/string/.test(msg)) {\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.string, value: this.input.slice(e.pos + 1, pos)};\n          } else if (/regular expr/i.test(msg)) {\n            var re = this.input.slice(e.pos, pos);\n            try { re = new RegExp(re); } catch (e) { /* ignore compilation error due to new syntax */ }\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.regexp, value: re};\n          } else if (/template/.test(msg)) {\n            replace = {\n              start: e.pos,\n              end: pos,\n              type: acorn.tokTypes.template,\n              value: this.input.slice(e.pos, pos)\n            };\n          } else {\n            replace = false;\n          }\n        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n          while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) { ++pos; }\n        } else if (/character escape|expected hexadecimal/i.test(msg)) {\n          while (pos < this.input.length) {\n            var ch = this.input.charCodeAt(pos++);\n            if (ch === 34 || ch === 39 || acorn.isNewLine(ch)) { break }\n          }\n        } else if (/unexpected character/i.test(msg)) {\n          pos++;\n          replace = false;\n        } else if (/regular expression/i.test(msg)) {\n          replace = true;\n        } else {\n          throw e\n        }\n        this.resetTo(pos);\n        if (replace === true) { replace = {start: pos, end: pos, type: acorn.tokTypes.name, value: \"✖\"}; }\n        if (replace) {\n          if (this.options.locations)\n            { replace.loc = new acorn.SourceLocation(\n              this.toks,\n              acorn.getLineInfo(this.input, replace.start),\n              acorn.getLineInfo(this.input, replace.end)); }\n          return replace\n        }\n      }\n    }\n  };\n\n  lp.resetTo = function(pos) {\n    this.toks.pos = pos;\n    var ch = this.input.charAt(pos - 1);\n    this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) ||\n      /[enwfd]/.test(ch) &&\n      /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n    if (this.options.locations) {\n      this.toks.curLine = 1;\n      this.toks.lineStart = acorn.lineBreakG.lastIndex = 0;\n      var match;\n      while ((match = acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n        ++this.toks.curLine;\n        this.toks.lineStart = match.index + match[0].length;\n      }\n    }\n  };\n\n  lp.lookAhead = function(n) {\n    while (n > this.ahead.length)\n      { this.ahead.push(this.readToken()); }\n    return this.ahead[n - 1]\n  };\n\n  function isDummy(node) { return node.name === \"✖\" }\n\n  var lp$1 = LooseParser.prototype;\n\n  lp$1.parseTopLevel = function() {\n    var node = this.startNodeAt(this.options.locations ? [0, acorn.getLineInfo(this.input, 0)] : 0);\n    node.body = [];\n    while (this.tok.type !== acorn.tokTypes.eof) { node.body.push(this.parseStatement()); }\n    this.toks.adaptDirectivePrologue(node.body);\n    this.last = this.tok;\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType;\n    }\n    return this.finishNode(node, \"Program\")\n  };\n\n  lp$1.parseStatement = function() {\n    var starttype = this.tok.type, node = this.startNode(), kind;\n\n    if (this.toks.isLet()) {\n      starttype = acorn.tokTypes._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n    case acorn.tokTypes._break: case acorn.tokTypes._continue:\n      this.next();\n      var isBreak = starttype === acorn.tokTypes._break;\n      if (this.semicolon() || this.canInsertSemicolon()) {\n        node.label = null;\n      } else {\n        node.label = this.tok.type === acorn.tokTypes.name ? this.parseIdent() : null;\n        this.semicolon();\n      }\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n    case acorn.tokTypes._debugger:\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\")\n\n    case acorn.tokTypes._do:\n      this.next();\n      node.body = this.parseStatement();\n      node.test = this.eat(acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n      this.semicolon();\n      return this.finishNode(node, \"DoWhileStatement\")\n\n    case acorn.tokTypes._for:\n      this.next(); // `for` keyword\n      var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n\n      this.pushCx();\n      this.expect(acorn.tokTypes.parenL);\n      if (this.tok.type === acorn.tokTypes.semi) { return this.parseFor(node, null) }\n      var isLet = this.toks.isLet();\n      if (isLet || this.tok.type === acorn.tokTypes._var || this.tok.type === acorn.tokTypes._const) {\n        var init$1 = this.parseVar(this.startNode(), true, isLet ? \"let\" : this.tok.value);\n        if (init$1.declarations.length === 1 && (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\"))) {\n          if (this.options.ecmaVersion >= 9 && this.tok.type !== acorn.tokTypes._in) {\n            node.await = isAwait;\n          }\n          return this.parseForIn(node, init$1)\n        }\n        return this.parseFor(node, init$1)\n      }\n      var init = this.parseExpression(true);\n      if (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\")) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== acorn.tokTypes._in) {\n          node.await = isAwait;\n        }\n        return this.parseForIn(node, this.toAssignable(init))\n      }\n      return this.parseFor(node, init)\n\n    case acorn.tokTypes._function:\n      this.next();\n      return this.parseFunction(node, true)\n\n    case acorn.tokTypes._if:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.consequent = this.parseStatement();\n      node.alternate = this.eat(acorn.tokTypes._else) ? this.parseStatement() : null;\n      return this.finishNode(node, \"IfStatement\")\n\n    case acorn.tokTypes._return:\n      this.next();\n      if (this.eat(acorn.tokTypes.semi) || this.canInsertSemicolon()) { node.argument = null; }\n      else { node.argument = this.parseExpression(); this.semicolon(); }\n      return this.finishNode(node, \"ReturnStatement\")\n\n    case acorn.tokTypes._switch:\n      var blockIndent = this.curIndent, line = this.curLineStart;\n      this.next();\n      node.discriminant = this.parseParenExpression();\n      node.cases = [];\n      this.pushCx();\n      this.expect(acorn.tokTypes.braceL);\n\n      var cur;\n      while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true)) {\n        if (this.tok.type === acorn.tokTypes._case || this.tok.type === acorn.tokTypes._default) {\n          var isCase = this.tok.type === acorn.tokTypes._case;\n          if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n          node.cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n          if (isCase) { cur.test = this.parseExpression(); }\n          else { cur.test = null; }\n          this.expect(acorn.tokTypes.colon);\n        } else {\n          if (!cur) {\n            node.cases.push(cur = this.startNode());\n            cur.consequent = [];\n            cur.test = null;\n          }\n          cur.consequent.push(this.parseStatement());\n        }\n      }\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      this.popCx();\n      this.eat(acorn.tokTypes.braceR);\n      return this.finishNode(node, \"SwitchStatement\")\n\n    case acorn.tokTypes._throw:\n      this.next();\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\")\n\n    case acorn.tokTypes._try:\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n      if (this.tok.type === acorn.tokTypes._catch) {\n        var clause = this.startNode();\n        this.next();\n        if (this.eat(acorn.tokTypes.parenL)) {\n          clause.param = this.toAssignable(this.parseExprAtom(), true);\n          this.expect(acorn.tokTypes.parenR);\n        } else {\n          clause.param = null;\n        }\n        clause.body = this.parseBlock();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n      node.finalizer = this.eat(acorn.tokTypes._finally) ? this.parseBlock() : null;\n      if (!node.handler && !node.finalizer) { return node.block }\n      return this.finishNode(node, \"TryStatement\")\n\n    case acorn.tokTypes._var:\n    case acorn.tokTypes._const:\n      return this.parseVar(node, false, kind || this.tok.value)\n\n    case acorn.tokTypes._while:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WhileStatement\")\n\n    case acorn.tokTypes._with:\n      this.next();\n      node.object = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WithStatement\")\n\n    case acorn.tokTypes.braceL:\n      return this.parseBlock()\n\n    case acorn.tokTypes.semi:\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\")\n\n    case acorn.tokTypes._class:\n      return this.parseClass(true)\n\n    case acorn.tokTypes._import:\n      if (this.options.ecmaVersion > 10 && this.lookAhead(1).type === acorn.tokTypes.parenL) {\n        node.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\")\n      }\n\n      return this.parseImport()\n\n    case acorn.tokTypes._export:\n      return this.parseExport()\n\n    default:\n      if (this.toks.isAsyncFunction()) {\n        this.next();\n        this.next();\n        return this.parseFunction(node, true, true)\n      }\n      var expr = this.parseExpression();\n      if (isDummy(expr)) {\n        this.next();\n        if (this.tok.type === acorn.tokTypes.eof) { return this.finishNode(node, \"EmptyStatement\") }\n        return this.parseStatement()\n      } else if (starttype === acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(acorn.tokTypes.colon)) {\n        node.body = this.parseStatement();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\")\n      } else {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\")\n      }\n    }\n  };\n\n  lp$1.parseBlock = function() {\n    var node = this.startNode();\n    this.pushCx();\n    this.expect(acorn.tokTypes.braceL);\n    var blockIndent = this.curIndent, line = this.curLineStart;\n    node.body = [];\n    while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true))\n      { node.body.push(this.parseStatement()); }\n    this.popCx();\n    this.eat(acorn.tokTypes.braceR);\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  lp$1.parseFor = function(node, init) {\n    node.init = init;\n    node.test = node.update = null;\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.semi) { node.test = this.parseExpression(); }\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.parenR) { node.update = this.parseExpression(); }\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  lp$1.parseForIn = function(node, init) {\n    var type = this.tok.type === acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n    node.left = init;\n    node.right = this.parseExpression();\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, type)\n  };\n\n  lp$1.parseVar = function(node, noIn, kind) {\n    node.kind = kind;\n    this.next();\n    node.declarations = [];\n    do {\n      var decl = this.startNode();\n      decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent();\n      decl.init = this.eat(acorn.tokTypes.eq) ? this.parseMaybeAssign(noIn) : null;\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    } while (this.eat(acorn.tokTypes.comma))\n    if (!node.declarations.length) {\n      var decl$1 = this.startNode();\n      decl$1.id = this.dummyIdent();\n      node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n    }\n    if (!noIn) { this.semicolon(); }\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  lp$1.parseClass = function(isStatement) {\n    var node = this.startNode();\n    this.next();\n    if (this.tok.type === acorn.tokTypes.name) { node.id = this.parseIdent(); }\n    else if (isStatement === true) { node.id = this.dummyIdent(); }\n    else { node.id = null; }\n    node.superClass = this.eat(acorn.tokTypes._extends) ? this.parseExpression() : null;\n    node.body = this.startNode();\n    node.body.body = [];\n    this.pushCx();\n    var indent = this.curIndent + 1, line = this.curLineStart;\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      if (this.semicolon()) { continue }\n      var method = this.startNode(), isGenerator = (void 0), isAsync = (void 0);\n      if (this.options.ecmaVersion >= 6) {\n        method.static = false;\n        isGenerator = this.eat(acorn.tokTypes.star);\n      }\n      this.parsePropertyName(method);\n      if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) { this.next(); } this.eat(acorn.tokTypes.comma); continue }\n      if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n          (this.tok.type !== acorn.tokTypes.parenL && this.tok.type !== acorn.tokTypes.braceL)) {\n        method.static = true;\n        isGenerator = this.eat(acorn.tokTypes.star);\n        this.parsePropertyName(method);\n      } else {\n        method.static = false;\n      }\n      if (!method.computed &&\n          method.key.type === \"Identifier\" && method.key.name === \"async\" && this.tok.type !== acorn.tokTypes.parenL &&\n          !this.canInsertSemicolon()) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(acorn.tokTypes.star);\n        this.parsePropertyName(method);\n      } else {\n        isAsync = false;\n      }\n      if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n          !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n          this.tok.type !== acorn.tokTypes.parenL && this.tok.type !== acorn.tokTypes.braceL) {\n        method.kind = method.key.name;\n        this.parsePropertyName(method);\n        method.value = this.parseMethod(false);\n      } else {\n        if (!method.computed && !method.static && !isGenerator && !isAsync && (\n          method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n            method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n          method.kind = \"constructor\";\n        } else {\n          method.kind = \"method\";\n        }\n        method.value = this.parseMethod(isGenerator, isAsync);\n      }\n      node.body.body.push(this.finishNode(method, \"MethodDefinition\"));\n    }\n    this.popCx();\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    this.semicolon();\n    this.finishNode(node.body, \"ClassBody\");\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  lp$1.parseFunction = function(node, isStatement, isAsync) {\n    var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = this.eat(acorn.tokTypes.star);\n    }\n    if (this.options.ecmaVersion >= 8) {\n      node.async = !!isAsync;\n    }\n    if (this.tok.type === acorn.tokTypes.name) { node.id = this.parseIdent(); }\n    else if (isStatement === true) { node.id = this.dummyIdent(); }\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  lp$1.parseExport = function() {\n    var node = this.startNode();\n    this.next();\n    if (this.eat(acorn.tokTypes.star)) {\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(acorn.tokTypes._default)) {\n      // export default (function foo() {}) // This is FunctionExpression.\n      var isAsync;\n      if (this.tok.type === acorn.tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n      } else if (this.tok.type === acorn.tokTypes._class) {\n        node.declaration = this.parseClass(\"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n      node.declaration = this.parseStatement();\n      node.specifiers = [];\n      node.source = null;\n    } else {\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifierList();\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  lp$1.parseImport = function() {\n    var node = this.startNode();\n    this.next();\n    if (this.tok.type === acorn.tokTypes.string) {\n      node.specifiers = [];\n      node.source = this.parseExprAtom();\n    } else {\n      var elt;\n      if (this.tok.type === acorn.tokTypes.name && this.tok.value !== \"from\") {\n        elt = this.startNode();\n        elt.local = this.parseIdent();\n        this.finishNode(elt, \"ImportDefaultSpecifier\");\n        this.eat(acorn.tokTypes.comma);\n      }\n      node.specifiers = this.parseImportSpecifiers();\n      node.source = this.eatContextual(\"from\") && this.tok.type === acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString();\n      if (elt) { node.specifiers.unshift(elt); }\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  lp$1.parseImportSpecifiers = function() {\n    var elts = [];\n    if (this.tok.type === acorn.tokTypes.star) {\n      var elt = this.startNode();\n      this.next();\n      elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n      elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n    } else {\n      var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n      this.pushCx();\n      this.eat(acorn.tokTypes.braceL);\n      if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n      while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n        var elt$1 = this.startNode();\n        if (this.eat(acorn.tokTypes.star)) {\n          elt$1.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n          this.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n        } else {\n          if (this.isContextual(\"from\")) { break }\n          elt$1.imported = this.parseIdent();\n          if (isDummy(elt$1.imported)) { break }\n          elt$1.local = this.eatContextual(\"as\") ? this.parseIdent() : elt$1.imported;\n          this.finishNode(elt$1, \"ImportSpecifier\");\n        }\n        elts.push(elt$1);\n        this.eat(acorn.tokTypes.comma);\n      }\n      this.eat(acorn.tokTypes.braceR);\n      this.popCx();\n    }\n    return elts\n  };\n\n  lp$1.parseExportSpecifierList = function() {\n    var elts = [];\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      if (this.isContextual(\"from\")) { break }\n      var elt = this.startNode();\n      elt.local = this.parseIdent();\n      if (isDummy(elt.local)) { break }\n      elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local;\n      this.finishNode(elt, \"ExportSpecifier\");\n      elts.push(elt);\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.eat(acorn.tokTypes.braceR);\n    this.popCx();\n    return elts\n  };\n\n  var lp$2 = LooseParser.prototype;\n\n  lp$2.checkLVal = function(expr) {\n    if (!expr) { return expr }\n    switch (expr.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n      return expr\n\n    case \"ParenthesizedExpression\":\n      expr.expression = this.checkLVal(expr.expression);\n      return expr\n\n    default:\n      return this.dummyIdent()\n    }\n  };\n\n  lp$2.parseExpression = function(noIn) {\n    var start = this.storeCurrentPos();\n    var expr = this.parseMaybeAssign(noIn);\n    if (this.tok.type === acorn.tokTypes.comma) {\n      var node = this.startNodeAt(start);\n      node.expressions = [expr];\n      while (this.eat(acorn.tokTypes.comma)) { node.expressions.push(this.parseMaybeAssign(noIn)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  lp$2.parseParenExpression = function() {\n    this.pushCx();\n    this.expect(acorn.tokTypes.parenL);\n    var val = this.parseExpression();\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    return val\n  };\n\n  lp$2.parseMaybeAssign = function(noIn) {\n    if (this.toks.isContextual(\"yield\")) {\n      var node = this.startNode();\n      this.next();\n      if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type !== acorn.tokTypes.star && !this.tok.type.startsExpr)) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(acorn.tokTypes.star);\n        node.argument = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"YieldExpression\")\n    }\n\n    var start = this.storeCurrentPos();\n    var left = this.parseMaybeConditional(noIn);\n    if (this.tok.type.isAssign) {\n      var node$1 = this.startNodeAt(start);\n      node$1.operator = this.tok.value;\n      node$1.left = this.tok.type === acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n      this.next();\n      node$1.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node$1, \"AssignmentExpression\")\n    }\n    return left\n  };\n\n  lp$2.parseMaybeConditional = function(noIn) {\n    var start = this.storeCurrentPos();\n    var expr = this.parseExprOps(noIn);\n    if (this.eat(acorn.tokTypes.question)) {\n      var node = this.startNodeAt(start);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      node.alternate = this.expect(acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  lp$2.parseExprOps = function(noIn) {\n    var start = this.storeCurrentPos();\n    var indent = this.curIndent, line = this.curLineStart;\n    return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n  };\n\n  lp$2.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n    if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) { return left }\n    var prec = this.tok.type.binop;\n    if (prec != null && (!noIn || this.tok.type !== acorn.tokTypes._in)) {\n      if (prec > minPrec) {\n        var node = this.startNodeAt(start);\n        node.left = left;\n        node.operator = this.tok.value;\n        this.next();\n        if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n          node.right = this.dummyIdent();\n        } else {\n          var rightStart = this.storeCurrentPos();\n          node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n        }\n        this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n      }\n    }\n    return left\n  };\n\n  lp$2.parseMaybeUnary = function(sawUnary) {\n    var start = this.storeCurrentPos(), expr;\n    if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") &&\n      (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))\n    ) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.tok.type.prefix) {\n      var node = this.startNode(), update = this.tok.type === acorn.tokTypes.incDec;\n      if (!update) { sawUnary = true; }\n      node.operator = this.tok.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(true);\n      if (update) { node.argument = this.checkLVal(node.argument); }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (this.tok.type === acorn.tokTypes.ellipsis) {\n      var node$1 = this.startNode();\n      this.next();\n      node$1.argument = this.parseMaybeUnary(sawUnary);\n      expr = this.finishNode(node$1, \"SpreadElement\");\n    } else {\n      expr = this.parseExprSubscripts();\n      while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n        var node$2 = this.startNodeAt(start);\n        node$2.operator = this.tok.value;\n        node$2.prefix = false;\n        node$2.argument = this.checkLVal(expr);\n        this.next();\n        expr = this.finishNode(node$2, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(acorn.tokTypes.starstar)) {\n      var node$3 = this.startNodeAt(start);\n      node$3.operator = \"**\";\n      node$3.left = expr;\n      node$3.right = this.parseMaybeUnary(false);\n      return this.finishNode(node$3, \"BinaryExpression\")\n    }\n\n    return expr\n  };\n\n  lp$2.parseExprSubscripts = function() {\n    var start = this.storeCurrentPos();\n    return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n  };\n\n  lp$2.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n    for (;;) {\n      if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n        if (this.tok.type === acorn.tokTypes.dot && this.curIndent === startIndent)\n          { --startIndent; }\n        else\n          { return base }\n      }\n\n      var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n\n      if (this.eat(acorn.tokTypes.dot)) {\n        var node = this.startNodeAt(start);\n        node.object = base;\n        if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine())\n          { node.property = this.dummyIdent(); }\n        else\n          { node.property = this.parsePropertyAccessor() || this.dummyIdent(); }\n        node.computed = false;\n        base = this.finishNode(node, \"MemberExpression\");\n      } else if (this.tok.type === acorn.tokTypes.bracketL) {\n        this.pushCx();\n        this.next();\n        var node$1 = this.startNodeAt(start);\n        node$1.object = base;\n        node$1.property = this.parseExpression();\n        node$1.computed = true;\n        this.popCx();\n        this.expect(acorn.tokTypes.bracketR);\n        base = this.finishNode(node$1, \"MemberExpression\");\n      } else if (!noCalls && this.tok.type === acorn.tokTypes.parenL) {\n        var exprList = this.parseExprList(acorn.tokTypes.parenR);\n        if (maybeAsyncArrow && this.eat(acorn.tokTypes.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(start), exprList, true) }\n        var node$2 = this.startNodeAt(start);\n        node$2.callee = base;\n        node$2.arguments = exprList;\n        base = this.finishNode(node$2, \"CallExpression\");\n      } else if (this.tok.type === acorn.tokTypes.backQuote) {\n        var node$3 = this.startNodeAt(start);\n        node$3.tag = base;\n        node$3.quasi = this.parseTemplate();\n        base = this.finishNode(node$3, \"TaggedTemplateExpression\");\n      } else {\n        return base\n      }\n    }\n  };\n\n  lp$2.parseExprAtom = function() {\n    var node;\n    switch (this.tok.type) {\n    case acorn.tokTypes._this:\n    case acorn.tokTypes._super:\n      var type = this.tok.type === acorn.tokTypes._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type)\n\n    case acorn.tokTypes.name:\n      var start = this.storeCurrentPos();\n      var id = this.parseIdent();\n      var isAsync = false;\n      if (id.name === \"async\" && !this.canInsertSemicolon()) {\n        if (this.eat(acorn.tokTypes._function))\n          { return this.parseFunction(this.startNodeAt(start), false, true) }\n        if (this.tok.type === acorn.tokTypes.name) {\n          id = this.parseIdent();\n          isAsync = true;\n        }\n      }\n      return this.eat(acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id\n\n    case acorn.tokTypes.regexp:\n      node = this.startNode();\n      var val = this.tok.value;\n      node.regex = {pattern: val.pattern, flags: val.flags};\n      node.value = val.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.num: case acorn.tokTypes.string:\n      node = this.startNode();\n      node.value = this.tok.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      if (this.tok.type === acorn.tokTypes.num && node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes._null: case acorn.tokTypes._true: case acorn.tokTypes._false:\n      node = this.startNode();\n      node.value = this.tok.type === acorn.tokTypes._null ? null : this.tok.type === acorn.tokTypes._true;\n      node.raw = this.tok.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.parenL:\n      var parenStart = this.storeCurrentPos();\n      this.next();\n      var inner = this.parseExpression();\n      this.expect(acorn.tokTypes.parenR);\n      if (this.eat(acorn.tokTypes.arrow)) {\n        // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n        var params = inner.expressions || [inner];\n        if (params.length && isDummy(params[params.length - 1]))\n          { params.pop(); }\n        return this.parseArrowExpression(this.startNodeAt(parenStart), params)\n      }\n      if (this.options.preserveParens) {\n        var par = this.startNodeAt(parenStart);\n        par.expression = inner;\n        inner = this.finishNode(par, \"ParenthesizedExpression\");\n      }\n      return inner\n\n    case acorn.tokTypes.bracketL:\n      node = this.startNode();\n      node.elements = this.parseExprList(acorn.tokTypes.bracketR, true);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case acorn.tokTypes.braceL:\n      return this.parseObj()\n\n    case acorn.tokTypes._class:\n      return this.parseClass(false)\n\n    case acorn.tokTypes._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false)\n\n    case acorn.tokTypes._new:\n      return this.parseNew()\n\n    case acorn.tokTypes.backQuote:\n      return this.parseTemplate()\n\n    case acorn.tokTypes._import:\n      if (this.options.ecmaVersion > 10) {\n        return this.parseDynamicImport()\n      } else {\n        return this.dummyIdent()\n      }\n\n    default:\n      return this.dummyIdent()\n    }\n  };\n\n  lp$2.parseDynamicImport = function() {\n    var node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"Import\")\n  };\n\n  lp$2.parseNew = function() {\n    var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart;\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(acorn.tokTypes.dot)) {\n      node.meta = meta;\n      node.property = this.parseIdent(true);\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var start = this.storeCurrentPos();\n    node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n    if (this.tok.type === acorn.tokTypes.parenL) {\n      node.arguments = this.parseExprList(acorn.tokTypes.parenR);\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  lp$2.parseTemplateElement = function() {\n    var elem = this.startNode();\n\n    // The loose parser accepts invalid unicode escapes even in untagged templates.\n    if (this.tok.type === acorn.tokTypes.invalidTemplate) {\n      elem.value = {\n        raw: this.tok.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.tok.value\n      };\n    }\n    this.next();\n    elem.tail = this.tok.type === acorn.tokTypes.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  lp$2.parseTemplate = function() {\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement();\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.next();\n      node.expressions.push(this.parseExpression());\n      if (this.expect(acorn.tokTypes.braceR)) {\n        curElt = this.parseTemplateElement();\n      } else {\n        curElt = this.startNode();\n        curElt.value = {cooked: \"\", raw: \"\"};\n        curElt.tail = true;\n        this.finishNode(curElt, \"TemplateElement\");\n      }\n      node.quasis.push(curElt);\n    }\n    this.expect(acorn.tokTypes.backQuote);\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  lp$2.parseObj = function() {\n    var node = this.startNode();\n    node.properties = [];\n    this.pushCx();\n    var indent = this.curIndent + 1, line = this.curLineStart;\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      var prop = this.startNode(), isGenerator = (void 0), isAsync = (void 0), start = (void 0);\n      if (this.options.ecmaVersion >= 9 && this.eat(acorn.tokTypes.ellipsis)) {\n        prop.argument = this.parseMaybeAssign();\n        node.properties.push(this.finishNode(prop, \"SpreadElement\"));\n        this.eat(acorn.tokTypes.comma);\n        continue\n      }\n      if (this.options.ecmaVersion >= 6) {\n        start = this.storeCurrentPos();\n        prop.method = false;\n        prop.shorthand = false;\n        isGenerator = this.eat(acorn.tokTypes.star);\n      }\n      this.parsePropertyName(prop);\n      if (this.toks.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(acorn.tokTypes.star);\n        this.parsePropertyName(prop);\n      } else {\n        isAsync = false;\n      }\n      if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) { this.next(); } this.eat(acorn.tokTypes.comma); continue }\n      if (this.eat(acorn.tokTypes.colon)) {\n        prop.kind = \"init\";\n        prop.value = this.parseMaybeAssign();\n      } else if (this.options.ecmaVersion >= 6 && (this.tok.type === acorn.tokTypes.parenL || this.tok.type === acorn.tokTypes.braceL)) {\n        prop.kind = \"init\";\n        prop.method = true;\n        prop.value = this.parseMethod(isGenerator, isAsync);\n      } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n                 !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n                 (this.tok.type !== acorn.tokTypes.comma && this.tok.type !== acorn.tokTypes.braceR && this.tok.type !== acorn.tokTypes.eq)) {\n        prop.kind = prop.key.name;\n        this.parsePropertyName(prop);\n        prop.value = this.parseMethod(false);\n      } else {\n        prop.kind = \"init\";\n        if (this.options.ecmaVersion >= 6) {\n          if (this.eat(acorn.tokTypes.eq)) {\n            var assign = this.startNodeAt(start);\n            assign.operator = \"=\";\n            assign.left = prop.key;\n            assign.right = this.parseMaybeAssign();\n            prop.value = this.finishNode(assign, \"AssignmentExpression\");\n          } else {\n            prop.value = prop.key;\n          }\n        } else {\n          prop.value = this.dummyIdent();\n        }\n        prop.shorthand = true;\n      }\n      node.properties.push(this.finishNode(prop, \"Property\"));\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.popCx();\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    return this.finishNode(node, \"ObjectExpression\")\n  };\n\n  lp$2.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(acorn.tokTypes.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseExpression();\n        this.expect(acorn.tokTypes.bracketR);\n        return\n      } else {\n        prop.computed = false;\n      }\n    }\n    var key = (this.tok.type === acorn.tokTypes.num || this.tok.type === acorn.tokTypes.string) ? this.parseExprAtom() : this.parseIdent();\n    prop.key = key || this.dummyIdent();\n  };\n\n  lp$2.parsePropertyAccessor = function() {\n    if (this.tok.type === acorn.tokTypes.name || this.tok.type.keyword) { return this.parseIdent() }\n  };\n\n  lp$2.parseIdent = function() {\n    var name = this.tok.type === acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword;\n    if (!name) { return this.dummyIdent() }\n    var node = this.startNode();\n    this.next();\n    node.name = name;\n    return this.finishNode(node, \"Identifier\")\n  };\n\n  lp$2.initFunction = function(node) {\n    node.id = null;\n    node.params = [];\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false;\n      node.expression = false;\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = false; }\n  };\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  lp$2.toAssignable = function(node, binding) {\n    if (!node || node.type === \"Identifier\" || (node.type === \"MemberExpression\" && !binding)) ; else if (node.type === \"ParenthesizedExpression\") {\n      this.toAssignable(node.expression, binding);\n    } else if (this.options.ecmaVersion < 6) {\n      return this.dummyIdent()\n    } else if (node.type === \"ObjectExpression\") {\n      node.type = \"ObjectPattern\";\n      for (var i = 0, list = node.properties; i < list.length; i += 1)\n        {\n        var prop = list[i];\n\n        this.toAssignable(prop, binding);\n      }\n    } else if (node.type === \"ArrayExpression\") {\n      node.type = \"ArrayPattern\";\n      this.toAssignableList(node.elements, binding);\n    } else if (node.type === \"Property\") {\n      this.toAssignable(node.value, binding);\n    } else if (node.type === \"SpreadElement\") {\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, binding);\n    } else if (node.type === \"AssignmentExpression\") {\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n    } else {\n      return this.dummyIdent()\n    }\n    return node\n  };\n\n  lp$2.toAssignableList = function(exprList, binding) {\n    for (var i = 0, list = exprList; i < list.length; i += 1)\n      {\n      var expr = list[i];\n\n      this.toAssignable(expr, binding);\n    }\n    return exprList\n  };\n\n  lp$2.parseFunctionParams = function(params) {\n    params = this.parseExprList(acorn.tokTypes.parenR);\n    return this.toAssignableList(params, true)\n  };\n\n  lp$2.parseMethod = function(isGenerator, isAsync) {\n    var node = this.startNode(), oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = !!isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  lp$2.parseArrowExpression = function(node, params, isAsync) {\n    var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.toAssignableList(params, true);\n    node.expression = this.tok.type !== acorn.tokTypes.braceL;\n    if (node.expression) {\n      node.body = this.parseMaybeAssign();\n    } else {\n      node.body = this.parseBlock();\n      this.toks.adaptDirectivePrologue(node.body.body);\n    }\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  lp$2.parseExprList = function(close, allowEmpty) {\n    this.pushCx();\n    var indent = this.curIndent, line = this.curLineStart, elts = [];\n    this.next(); // Opening bracket\n    while (!this.closes(close, indent + 1, line)) {\n      if (this.eat(acorn.tokTypes.comma)) {\n        elts.push(allowEmpty ? null : this.dummyIdent());\n        continue\n      }\n      var elt = this.parseMaybeAssign();\n      if (isDummy(elt)) {\n        if (this.closes(close, indent, line)) { break }\n        this.next();\n      } else {\n        elts.push(elt);\n      }\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.popCx();\n    if (!this.eat(close)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    return elts\n  };\n\n  lp$2.parseAwait = function() {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  // Acorn: Loose parser\n\n  acorn.defaultOptions.tabSize = 4;\n\n  function parse(input, options) {\n    return LooseParser.parse(input, options)\n  }\n\n  exports.LooseParser = LooseParser;\n  exports.parse = parse;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.js\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.mjs ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.LooseParser = void 0;\n\nvar _acorn = __webpack_require__(/*! acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.js\");\n\nfunction noop() {}\n\nvar LooseParser = function LooseParser(input, options) {\n  if (options === void 0) options = {};\n  this.toks = this.constructor.BaseParser.tokenizer(input, options);\n  this.options = this.toks.options;\n  this.input = this.toks.input;\n  this.tok = this.last = {\n    type: _acorn.tokTypes.eof,\n    start: 0,\n    end: 0\n  };\n  this.tok.validateRegExpFlags = noop;\n  this.tok.validateRegExpPattern = noop;\n\n  if (this.options.locations) {\n    var here = this.toks.curPosition();\n    this.tok.loc = new _acorn.SourceLocation(this.toks, here, here);\n  }\n\n  this.ahead = []; // Tokens ahead\n\n  this.context = []; // Indentation contexted\n\n  this.curIndent = 0;\n  this.curLineStart = 0;\n  this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n  this.inAsync = false;\n  this.inFunction = false;\n};\n\nexports.LooseParser = LooseParser;\n\nLooseParser.prototype.startNode = function startNode() {\n  return new _acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null);\n};\n\nLooseParser.prototype.storeCurrentPos = function storeCurrentPos() {\n  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start;\n};\n\nLooseParser.prototype.startNodeAt = function startNodeAt(pos) {\n  if (this.options.locations) {\n    return new _acorn.Node(this.toks, pos[0], pos[1]);\n  } else {\n    return new _acorn.Node(this.toks, pos);\n  }\n};\n\nLooseParser.prototype.finishNode = function finishNode(node, type) {\n  node.type = type;\n  node.end = this.last.end;\n\n  if (this.options.locations) {\n    node.loc.end = this.last.loc.end;\n  }\n\n  if (this.options.ranges) {\n    node.range[1] = this.last.end;\n  }\n\n  return node;\n};\n\nLooseParser.prototype.dummyNode = function dummyNode(type) {\n  var dummy = this.startNode();\n  dummy.type = type;\n  dummy.end = dummy.start;\n\n  if (this.options.locations) {\n    dummy.loc.end = dummy.loc.start;\n  }\n\n  if (this.options.ranges) {\n    dummy.range[1] = dummy.start;\n  }\n\n  this.last = {\n    type: _acorn.tokTypes.name,\n    start: dummy.start,\n    end: dummy.start,\n    loc: dummy.loc\n  };\n  return dummy;\n};\n\nLooseParser.prototype.dummyIdent = function dummyIdent() {\n  var dummy = this.dummyNode(\"Identifier\");\n  dummy.name = \"✖\";\n  return dummy;\n};\n\nLooseParser.prototype.dummyString = function dummyString() {\n  var dummy = this.dummyNode(\"Literal\");\n  dummy.value = dummy.raw = \"✖\";\n  return dummy;\n};\n\nLooseParser.prototype.eat = function eat(type) {\n  if (this.tok.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\nLooseParser.prototype.isContextual = function isContextual(name) {\n  return this.tok.type === _acorn.tokTypes.name && this.tok.value === name;\n};\n\nLooseParser.prototype.eatContextual = function eatContextual(name) {\n  return this.tok.value === name && this.eat(_acorn.tokTypes.name);\n};\n\nLooseParser.prototype.canInsertSemicolon = function canInsertSemicolon() {\n  return this.tok.type === _acorn.tokTypes.eof || this.tok.type === _acorn.tokTypes.braceR || _acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start));\n};\n\nLooseParser.prototype.semicolon = function semicolon() {\n  return this.eat(_acorn.tokTypes.semi);\n};\n\nLooseParser.prototype.expect = function expect(type) {\n  if (this.eat(type)) {\n    return true;\n  }\n\n  for (var i = 1; i <= 2; i++) {\n    if (this.lookAhead(i).type === type) {\n      for (var j = 0; j < i; j++) {\n        this.next();\n      }\n\n      return true;\n    }\n  }\n};\n\nLooseParser.prototype.pushCx = function pushCx() {\n  this.context.push(this.curIndent);\n};\n\nLooseParser.prototype.popCx = function popCx() {\n  this.curIndent = this.context.pop();\n};\n\nLooseParser.prototype.lineEnd = function lineEnd(pos) {\n  while (pos < this.input.length && !(0, _acorn.isNewLine)(this.input.charCodeAt(pos))) {\n    ++pos;\n  }\n\n  return pos;\n};\n\nLooseParser.prototype.indentationAfter = function indentationAfter(pos) {\n  for (var count = 0;; ++pos) {\n    var ch = this.input.charCodeAt(pos);\n\n    if (ch === 32) {\n      ++count;\n    } else if (ch === 9) {\n      count += this.options.tabSize;\n    } else {\n      return count;\n    }\n  }\n};\n\nLooseParser.prototype.closes = function closes(closeTok, indent, line, blockHeuristic) {\n  if (this.tok.type === closeTok || this.tok.type === _acorn.tokTypes.eof) {\n    return true;\n  }\n\n  return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() && (!blockHeuristic || this.nextLineStart >= this.input.length || this.indentationAfter(this.nextLineStart) < indent);\n};\n\nLooseParser.prototype.tokenStartsLine = function tokenStartsLine() {\n  for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n    var ch = this.input.charCodeAt(p);\n\n    if (ch !== 9 && ch !== 32) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nLooseParser.prototype.extend = function extend(name, f) {\n  this[name] = f(this[name]);\n};\n\nLooseParser.prototype.parse = function parse() {\n  this.next();\n  return this.parseTopLevel();\n};\n\nLooseParser.extend = function extend() {\n  var plugins = [],\n      len = arguments.length;\n\n  while (len--) {\n    plugins[len] = arguments[len];\n  }\n\n  var cls = this;\n\n  for (var i = 0; i < plugins.length; i++) {\n    cls = plugins[i](cls);\n  }\n\n  return cls;\n};\n\nLooseParser.parse = function parse(input, options) {\n  return new this(input, options).parse();\n}; // Allows plugins to extend the base parser / tokenizer used\n\n\nLooseParser.BaseParser = _acorn.Parser;\nvar lp = LooseParser.prototype;\n\nfunction isSpace(ch) {\n  return ch < 14 && ch > 8 || ch === 32 || ch === 160 || (0, _acorn.isNewLine)(ch);\n}\n\nlp.next = function () {\n  this.last = this.tok;\n\n  if (this.ahead.length) {\n    this.tok = this.ahead.shift();\n  } else {\n    this.tok = this.readToken();\n  }\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this.curLineStart = this.nextLineStart;\n      this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n    }\n\n    this.curIndent = this.indentationAfter(this.curLineStart);\n  }\n};\n\nlp.readToken = function () {\n  for (;;) {\n    try {\n      this.toks.next();\n\n      if (this.toks.type === _acorn.tokTypes.dot && this.input.substr(this.toks.end, 1) === \".\" && this.options.ecmaVersion >= 6) {\n        this.toks.end++;\n        this.toks.type = _acorn.tokTypes.ellipsis;\n      }\n\n      return new _acorn.Token(this.toks);\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) {\n        throw e;\n      } // Try to skip some text, based on the error message, and then continue\n\n\n      var msg = e.message,\n          pos = e.raisedAt,\n          replace = true;\n\n      if (/unterminated/i.test(msg)) {\n        pos = this.lineEnd(e.pos + 1);\n\n        if (/string/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: _acorn.tokTypes.string,\n            value: this.input.slice(e.pos + 1, pos)\n          };\n        } else if (/regular expr/i.test(msg)) {\n          var re = this.input.slice(e.pos, pos);\n\n          try {\n            re = new RegExp(re);\n          } catch (e) {\n            /* ignore compilation error due to new syntax */\n          }\n\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: _acorn.tokTypes.regexp,\n            value: re\n          };\n        } else if (/template/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: _acorn.tokTypes.template,\n            value: this.input.slice(e.pos, pos)\n          };\n        } else {\n          replace = false;\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) {\n          ++pos;\n        }\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          var ch = this.input.charCodeAt(pos++);\n\n          if (ch === 34 || ch === 39 || (0, _acorn.isNewLine)(ch)) {\n            break;\n          }\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++;\n        replace = false;\n      } else if (/regular expression/i.test(msg)) {\n        replace = true;\n      } else {\n        throw e;\n      }\n\n      this.resetTo(pos);\n\n      if (replace === true) {\n        replace = {\n          start: pos,\n          end: pos,\n          type: _acorn.tokTypes.name,\n          value: \"✖\"\n        };\n      }\n\n      if (replace) {\n        if (this.options.locations) {\n          replace.loc = new _acorn.SourceLocation(this.toks, (0, _acorn.getLineInfo)(this.input, replace.start), (0, _acorn.getLineInfo)(this.input, replace.end));\n        }\n\n        return replace;\n      }\n    }\n  }\n};\n\nlp.resetTo = function (pos) {\n  this.toks.pos = pos;\n  var ch = this.input.charAt(pos - 1);\n  this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) || /[enwfd]/.test(ch) && /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n  if (this.options.locations) {\n    this.toks.curLine = 1;\n    this.toks.lineStart = _acorn.lineBreakG.lastIndex = 0;\n    var match;\n\n    while ((match = _acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this.toks.curLine;\n      this.toks.lineStart = match.index + match[0].length;\n    }\n  }\n};\n\nlp.lookAhead = function (n) {\n  while (n > this.ahead.length) {\n    this.ahead.push(this.readToken());\n  }\n\n  return this.ahead[n - 1];\n};\n\nfunction isDummy(node) {\n  return node.name === \"✖\";\n}\n\nvar lp$1 = LooseParser.prototype;\n\nlp$1.parseTopLevel = function () {\n  var node = this.startNodeAt(this.options.locations ? [0, (0, _acorn.getLineInfo)(this.input, 0)] : 0);\n  node.body = [];\n\n  while (this.tok.type !== _acorn.tokTypes.eof) {\n    node.body.push(this.parseStatement());\n  }\n\n  this.toks.adaptDirectivePrologue(node.body);\n  this.last = this.tok;\n\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n\n  return this.finishNode(node, \"Program\");\n};\n\nlp$1.parseStatement = function () {\n  var starttype = this.tok.type,\n      node = this.startNode(),\n      kind;\n\n  if (this.toks.isLet()) {\n    starttype = _acorn.tokTypes._var;\n    kind = \"let\";\n  }\n\n  switch (starttype) {\n    case _acorn.tokTypes._break:\n    case _acorn.tokTypes._continue:\n      this.next();\n      var isBreak = starttype === _acorn.tokTypes._break;\n\n      if (this.semicolon() || this.canInsertSemicolon()) {\n        node.label = null;\n      } else {\n        node.label = this.tok.type === _acorn.tokTypes.name ? this.parseIdent() : null;\n        this.semicolon();\n      }\n\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\n    case _acorn.tokTypes._debugger:\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n\n    case _acorn.tokTypes._do:\n      this.next();\n      node.body = this.parseStatement();\n      node.test = this.eat(_acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n      this.semicolon();\n      return this.finishNode(node, \"DoWhileStatement\");\n\n    case _acorn.tokTypes._for:\n      this.next(); // `for` keyword\n\n      var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n      this.pushCx();\n      this.expect(_acorn.tokTypes.parenL);\n\n      if (this.tok.type === _acorn.tokTypes.semi) {\n        return this.parseFor(node, null);\n      }\n\n      var isLet = this.toks.isLet();\n\n      if (isLet || this.tok.type === _acorn.tokTypes._var || this.tok.type === _acorn.tokTypes._const) {\n        var init$1 = this.parseVar(this.startNode(), true, isLet ? \"let\" : this.tok.value);\n\n        if (init$1.declarations.length === 1 && (this.tok.type === _acorn.tokTypes._in || this.isContextual(\"of\"))) {\n          if (this.options.ecmaVersion >= 9 && this.tok.type !== _acorn.tokTypes._in) {\n            node.await = isAwait;\n          }\n\n          return this.parseForIn(node, init$1);\n        }\n\n        return this.parseFor(node, init$1);\n      }\n\n      var init = this.parseExpression(true);\n\n      if (this.tok.type === _acorn.tokTypes._in || this.isContextual(\"of\")) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== _acorn.tokTypes._in) {\n          node.await = isAwait;\n        }\n\n        return this.parseForIn(node, this.toAssignable(init));\n      }\n\n      return this.parseFor(node, init);\n\n    case _acorn.tokTypes._function:\n      this.next();\n      return this.parseFunction(node, true);\n\n    case _acorn.tokTypes._if:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.consequent = this.parseStatement();\n      node.alternate = this.eat(_acorn.tokTypes._else) ? this.parseStatement() : null;\n      return this.finishNode(node, \"IfStatement\");\n\n    case _acorn.tokTypes._return:\n      this.next();\n\n      if (this.eat(_acorn.tokTypes.semi) || this.canInsertSemicolon()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n\n    case _acorn.tokTypes._switch:\n      var blockIndent = this.curIndent,\n          line = this.curLineStart;\n      this.next();\n      node.discriminant = this.parseParenExpression();\n      node.cases = [];\n      this.pushCx();\n      this.expect(_acorn.tokTypes.braceL);\n      var cur;\n\n      while (!this.closes(_acorn.tokTypes.braceR, blockIndent, line, true)) {\n        if (this.tok.type === _acorn.tokTypes._case || this.tok.type === _acorn.tokTypes._default) {\n          var isCase = this.tok.type === _acorn.tokTypes._case;\n\n          if (cur) {\n            this.finishNode(cur, \"SwitchCase\");\n          }\n\n          node.cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            cur.test = null;\n          }\n\n          this.expect(_acorn.tokTypes.colon);\n        } else {\n          if (!cur) {\n            node.cases.push(cur = this.startNode());\n            cur.consequent = [];\n            cur.test = null;\n          }\n\n          cur.consequent.push(this.parseStatement());\n        }\n      }\n\n      if (cur) {\n        this.finishNode(cur, \"SwitchCase\");\n      }\n\n      this.popCx();\n      this.eat(_acorn.tokTypes.braceR);\n      return this.finishNode(node, \"SwitchStatement\");\n\n    case _acorn.tokTypes._throw:\n      this.next();\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n\n    case _acorn.tokTypes._try:\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.tok.type === _acorn.tokTypes._catch) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.eat(_acorn.tokTypes.parenL)) {\n          clause.param = this.toAssignable(this.parseExprAtom(), true);\n          this.expect(_acorn.tokTypes.parenR);\n        } else {\n          clause.param = null;\n        }\n\n        clause.body = this.parseBlock();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(_acorn.tokTypes._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        return node.block;\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n\n    case _acorn.tokTypes._var:\n    case _acorn.tokTypes._const:\n      return this.parseVar(node, false, kind || this.tok.value);\n\n    case _acorn.tokTypes._while:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WhileStatement\");\n\n    case _acorn.tokTypes._with:\n      this.next();\n      node.object = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WithStatement\");\n\n    case _acorn.tokTypes.braceL:\n      return this.parseBlock();\n\n    case _acorn.tokTypes.semi:\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n\n    case _acorn.tokTypes._class:\n      return this.parseClass(true);\n\n    case _acorn.tokTypes._import:\n      if (this.options.ecmaVersion > 10 && this.lookAhead(1).type === _acorn.tokTypes.parenL) {\n        node.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\");\n      }\n\n      return this.parseImport();\n\n    case _acorn.tokTypes._export:\n      return this.parseExport();\n\n    default:\n      if (this.toks.isAsyncFunction()) {\n        this.next();\n        this.next();\n        return this.parseFunction(node, true, true);\n      }\n\n      var expr = this.parseExpression();\n\n      if (isDummy(expr)) {\n        this.next();\n\n        if (this.tok.type === _acorn.tokTypes.eof) {\n          return this.finishNode(node, \"EmptyStatement\");\n        }\n\n        return this.parseStatement();\n      } else if (starttype === _acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(_acorn.tokTypes.colon)) {\n        node.body = this.parseStatement();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\");\n      } else {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\");\n      }\n\n  }\n};\n\nlp$1.parseBlock = function () {\n  var node = this.startNode();\n  this.pushCx();\n  this.expect(_acorn.tokTypes.braceL);\n  var blockIndent = this.curIndent,\n      line = this.curLineStart;\n  node.body = [];\n\n  while (!this.closes(_acorn.tokTypes.braceR, blockIndent, line, true)) {\n    node.body.push(this.parseStatement());\n  }\n\n  this.popCx();\n  this.eat(_acorn.tokTypes.braceR);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\nlp$1.parseFor = function (node, init) {\n  node.init = init;\n  node.test = node.update = null;\n\n  if (this.eat(_acorn.tokTypes.semi) && this.tok.type !== _acorn.tokTypes.semi) {\n    node.test = this.parseExpression();\n  }\n\n  if (this.eat(_acorn.tokTypes.semi) && this.tok.type !== _acorn.tokTypes.parenR) {\n    node.update = this.parseExpression();\n  }\n\n  this.popCx();\n  this.expect(_acorn.tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, \"ForStatement\");\n};\n\nlp$1.parseForIn = function (node, init) {\n  var type = this.tok.type === _acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.popCx();\n  this.expect(_acorn.tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, type);\n};\n\nlp$1.parseVar = function (node, noIn, kind) {\n  node.kind = kind;\n  this.next();\n  node.declarations = [];\n\n  do {\n    var decl = this.startNode();\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent();\n    decl.init = this.eat(_acorn.tokTypes.eq) ? this.parseMaybeAssign(noIn) : null;\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n  } while (this.eat(_acorn.tokTypes.comma));\n\n  if (!node.declarations.length) {\n    var decl$1 = this.startNode();\n    decl$1.id = this.dummyIdent();\n    node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n  }\n\n  if (!noIn) {\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\nlp$1.parseClass = function (isStatement) {\n  var node = this.startNode();\n  this.next();\n\n  if (this.tok.type === _acorn.tokTypes.name) {\n    node.id = this.parseIdent();\n  } else if (isStatement === true) {\n    node.id = this.dummyIdent();\n  } else {\n    node.id = null;\n  }\n\n  node.superClass = this.eat(_acorn.tokTypes._extends) ? this.parseExpression() : null;\n  node.body = this.startNode();\n  node.body.body = [];\n  this.pushCx();\n  var indent = this.curIndent + 1,\n      line = this.curLineStart;\n  this.eat(_acorn.tokTypes.braceL);\n\n  if (this.curIndent + 1 < indent) {\n    indent = this.curIndent;\n    line = this.curLineStart;\n  }\n\n  while (!this.closes(_acorn.tokTypes.braceR, indent, line)) {\n    if (this.semicolon()) {\n      continue;\n    }\n\n    var method = this.startNode(),\n        isGenerator = void 0,\n        isAsync = void 0;\n\n    if (this.options.ecmaVersion >= 6) {\n      method.static = false;\n      isGenerator = this.eat(_acorn.tokTypes.star);\n    }\n\n    this.parsePropertyName(method);\n\n    if (isDummy(method.key)) {\n      if (isDummy(this.parseMaybeAssign())) {\n        this.next();\n      }\n\n      this.eat(_acorn.tokTypes.comma);\n      continue;\n    }\n\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" && this.tok.type !== _acorn.tokTypes.parenL && this.tok.type !== _acorn.tokTypes.braceL) {\n      method.static = true;\n      isGenerator = this.eat(_acorn.tokTypes.star);\n      this.parsePropertyName(method);\n    } else {\n      method.static = false;\n    }\n\n    if (!method.computed && method.key.type === \"Identifier\" && method.key.name === \"async\" && this.tok.type !== _acorn.tokTypes.parenL && !this.canInsertSemicolon()) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(_acorn.tokTypes.star);\n      this.parsePropertyName(method);\n    } else {\n      isAsync = false;\n    }\n\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" && !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") && this.tok.type !== _acorn.tokTypes.parenL && this.tok.type !== _acorn.tokTypes.braceL) {\n      method.kind = method.key.name;\n      this.parsePropertyName(method);\n      method.value = this.parseMethod(false);\n    } else {\n      if (!method.computed && !method.static && !isGenerator && !isAsync && (method.key.type === \"Identifier\" && method.key.name === \"constructor\" || method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\";\n      } else {\n        method.kind = \"method\";\n      }\n\n      method.value = this.parseMethod(isGenerator, isAsync);\n    }\n\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"));\n  }\n\n  this.popCx();\n\n  if (!this.eat(_acorn.tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  this.semicolon();\n  this.finishNode(node.body, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\nlp$1.parseFunction = function (node, isStatement, isAsync) {\n  var oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(_acorn.tokTypes.star);\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  if (this.tok.type === _acorn.tokTypes.name) {\n    node.id = this.parseIdent();\n  } else if (isStatement === true) {\n    node.id = this.dummyIdent();\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\nlp$1.parseExport = function () {\n  var node = this.startNode();\n  this.next();\n\n  if (this.eat(_acorn.tokTypes.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n\n  if (this.eat(_acorn.tokTypes._default)) {\n    // export default (function foo() {}) // This is FunctionExpression.\n    var isAsync;\n\n    if (this.tok.type === _acorn.tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n    } else if (this.tok.type === _acorn.tokTypes._class) {\n      node.declaration = this.parseClass(\"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n\n  if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n    node.declaration = this.parseStatement();\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifierList();\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\nlp$1.parseImport = function () {\n  var node = this.startNode();\n  this.next();\n\n  if (this.tok.type === _acorn.tokTypes.string) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    var elt;\n\n    if (this.tok.type === _acorn.tokTypes.name && this.tok.value !== \"from\") {\n      elt = this.startNode();\n      elt.local = this.parseIdent();\n      this.finishNode(elt, \"ImportDefaultSpecifier\");\n      this.eat(_acorn.tokTypes.comma);\n    }\n\n    node.specifiers = this.parseImportSpecifiers();\n    node.source = this.eatContextual(\"from\") && this.tok.type === _acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString();\n\n    if (elt) {\n      node.specifiers.unshift(elt);\n    }\n  }\n\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\nlp$1.parseImportSpecifiers = function () {\n  var elts = [];\n\n  if (this.tok.type === _acorn.tokTypes.star) {\n    var elt = this.startNode();\n    this.next();\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n  } else {\n    var indent = this.curIndent,\n        line = this.curLineStart,\n        continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(_acorn.tokTypes.braceL);\n\n    if (this.curLineStart > continuedLine) {\n      continuedLine = this.curLineStart;\n    }\n\n    while (!this.closes(_acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      var elt$1 = this.startNode();\n\n      if (this.eat(_acorn.tokTypes.star)) {\n        elt$1.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n        this.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n      } else {\n        if (this.isContextual(\"from\")) {\n          break;\n        }\n\n        elt$1.imported = this.parseIdent();\n\n        if (isDummy(elt$1.imported)) {\n          break;\n        }\n\n        elt$1.local = this.eatContextual(\"as\") ? this.parseIdent() : elt$1.imported;\n        this.finishNode(elt$1, \"ImportSpecifier\");\n      }\n\n      elts.push(elt$1);\n      this.eat(_acorn.tokTypes.comma);\n    }\n\n    this.eat(_acorn.tokTypes.braceR);\n    this.popCx();\n  }\n\n  return elts;\n};\n\nlp$1.parseExportSpecifierList = function () {\n  var elts = [];\n  var indent = this.curIndent,\n      line = this.curLineStart,\n      continuedLine = this.nextLineStart;\n  this.pushCx();\n  this.eat(_acorn.tokTypes.braceL);\n\n  if (this.curLineStart > continuedLine) {\n    continuedLine = this.curLineStart;\n  }\n\n  while (!this.closes(_acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) {\n      break;\n    }\n\n    var elt = this.startNode();\n    elt.local = this.parseIdent();\n\n    if (isDummy(elt.local)) {\n      break;\n    }\n\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local;\n    this.finishNode(elt, \"ExportSpecifier\");\n    elts.push(elt);\n    this.eat(_acorn.tokTypes.comma);\n  }\n\n  this.eat(_acorn.tokTypes.braceR);\n  this.popCx();\n  return elts;\n};\n\nvar lp$2 = LooseParser.prototype;\n\nlp$2.checkLVal = function (expr) {\n  if (!expr) {\n    return expr;\n  }\n\n  switch (expr.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n      return expr;\n\n    case \"ParenthesizedExpression\":\n      expr.expression = this.checkLVal(expr.expression);\n      return expr;\n\n    default:\n      return this.dummyIdent();\n  }\n};\n\nlp$2.parseExpression = function (noIn) {\n  var start = this.storeCurrentPos();\n  var expr = this.parseMaybeAssign(noIn);\n\n  if (this.tok.type === _acorn.tokTypes.comma) {\n    var node = this.startNodeAt(start);\n    node.expressions = [expr];\n\n    while (this.eat(_acorn.tokTypes.comma)) {\n      node.expressions.push(this.parseMaybeAssign(noIn));\n    }\n\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseParenExpression = function () {\n  this.pushCx();\n  this.expect(_acorn.tokTypes.parenL);\n  var val = this.parseExpression();\n  this.popCx();\n  this.expect(_acorn.tokTypes.parenR);\n  return val;\n};\n\nlp$2.parseMaybeAssign = function (noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    var node = this.startNode();\n    this.next();\n\n    if (this.semicolon() || this.canInsertSemicolon() || this.tok.type !== _acorn.tokTypes.star && !this.tok.type.startsExpr) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(_acorn.tokTypes.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  var start = this.storeCurrentPos();\n  var left = this.parseMaybeConditional(noIn);\n\n  if (this.tok.type.isAssign) {\n    var node$1 = this.startNodeAt(start);\n    node$1.operator = this.tok.value;\n    node$1.left = this.tok.type === _acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n    this.next();\n    node$1.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node$1, \"AssignmentExpression\");\n  }\n\n  return left;\n};\n\nlp$2.parseMaybeConditional = function (noIn) {\n  var start = this.storeCurrentPos();\n  var expr = this.parseExprOps(noIn);\n\n  if (this.eat(_acorn.tokTypes.question)) {\n    var node = this.startNodeAt(start);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    node.alternate = this.expect(_acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseExprOps = function (noIn) {\n  var start = this.storeCurrentPos();\n  var indent = this.curIndent,\n      line = this.curLineStart;\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line);\n};\n\nlp$2.parseExprOp = function (left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n    return left;\n  }\n\n  var prec = this.tok.type.binop;\n\n  if (prec != null && (!noIn || this.tok.type !== _acorn.tokTypes._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(start);\n      node.left = left;\n      node.operator = this.tok.value;\n      this.next();\n\n      if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent();\n      } else {\n        var rightStart = this.storeCurrentPos();\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n      }\n\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line);\n    }\n  }\n\n  return left;\n};\n\nlp$2.parseMaybeUnary = function (sawUnary) {\n  var start = this.storeCurrentPos(),\n      expr;\n\n  if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.tok.type.prefix) {\n    var node = this.startNode(),\n        update = this.tok.type === _acorn.tokTypes.incDec;\n\n    if (!update) {\n      sawUnary = true;\n    }\n\n    node.operator = this.tok.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(true);\n\n    if (update) {\n      node.argument = this.checkLVal(node.argument);\n    }\n\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (this.tok.type === _acorn.tokTypes.ellipsis) {\n    var node$1 = this.startNode();\n    this.next();\n    node$1.argument = this.parseMaybeUnary(sawUnary);\n    expr = this.finishNode(node$1, \"SpreadElement\");\n  } else {\n    expr = this.parseExprSubscripts();\n\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      var node$2 = this.startNodeAt(start);\n      node$2.operator = this.tok.value;\n      node$2.prefix = false;\n      node$2.argument = this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node$2, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(_acorn.tokTypes.starstar)) {\n    var node$3 = this.startNodeAt(start);\n    node$3.operator = \"**\";\n    node$3.left = expr;\n    node$3.right = this.parseMaybeUnary(false);\n    return this.finishNode(node$3, \"BinaryExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseExprSubscripts = function () {\n  var start = this.storeCurrentPos();\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart);\n};\n\nlp$2.parseSubscripts = function (base, start, noCalls, startIndent, line) {\n  for (;;) {\n    if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type === _acorn.tokTypes.dot && this.curIndent === startIndent) {\n        --startIndent;\n      } else {\n        return base;\n      }\n    }\n\n    var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n\n    if (this.eat(_acorn.tokTypes.dot)) {\n      var node = this.startNodeAt(start);\n      node.object = base;\n\n      if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n        node.property = this.dummyIdent();\n      } else {\n        node.property = this.parsePropertyAccessor() || this.dummyIdent();\n      }\n\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.tok.type === _acorn.tokTypes.bracketL) {\n      this.pushCx();\n      this.next();\n      var node$1 = this.startNodeAt(start);\n      node$1.object = base;\n      node$1.property = this.parseExpression();\n      node$1.computed = true;\n      this.popCx();\n      this.expect(_acorn.tokTypes.bracketR);\n      base = this.finishNode(node$1, \"MemberExpression\");\n    } else if (!noCalls && this.tok.type === _acorn.tokTypes.parenL) {\n      var exprList = this.parseExprList(_acorn.tokTypes.parenR);\n\n      if (maybeAsyncArrow && this.eat(_acorn.tokTypes.arrow)) {\n        return this.parseArrowExpression(this.startNodeAt(start), exprList, true);\n      }\n\n      var node$2 = this.startNodeAt(start);\n      node$2.callee = base;\n      node$2.arguments = exprList;\n      base = this.finishNode(node$2, \"CallExpression\");\n    } else if (this.tok.type === _acorn.tokTypes.backQuote) {\n      var node$3 = this.startNodeAt(start);\n      node$3.tag = base;\n      node$3.quasi = this.parseTemplate();\n      base = this.finishNode(node$3, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\nlp$2.parseExprAtom = function () {\n  var node;\n\n  switch (this.tok.type) {\n    case _acorn.tokTypes._this:\n    case _acorn.tokTypes._super:\n      var type = this.tok.type === _acorn.tokTypes._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _acorn.tokTypes.name:\n      var start = this.storeCurrentPos();\n      var id = this.parseIdent();\n      var isAsync = false;\n\n      if (id.name === \"async\" && !this.canInsertSemicolon()) {\n        if (this.eat(_acorn.tokTypes._function)) {\n          return this.parseFunction(this.startNodeAt(start), false, true);\n        }\n\n        if (this.tok.type === _acorn.tokTypes.name) {\n          id = this.parseIdent();\n          isAsync = true;\n        }\n      }\n\n      return this.eat(_acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id;\n\n    case _acorn.tokTypes.regexp:\n      node = this.startNode();\n      var val = this.tok.value;\n      node.regex = {\n        pattern: val.pattern,\n        flags: val.flags\n      };\n      node.value = val.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _acorn.tokTypes.num:\n    case _acorn.tokTypes.string:\n      node = this.startNode();\n      node.value = this.tok.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n\n      if (this.tok.type === _acorn.tokTypes.num && node.raw.charCodeAt(node.raw.length - 1) === 110) {\n        node.bigint = node.raw.slice(0, -1);\n      }\n\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _acorn.tokTypes._null:\n    case _acorn.tokTypes._true:\n    case _acorn.tokTypes._false:\n      node = this.startNode();\n      node.value = this.tok.type === _acorn.tokTypes._null ? null : this.tok.type === _acorn.tokTypes._true;\n      node.raw = this.tok.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _acorn.tokTypes.parenL:\n      var parenStart = this.storeCurrentPos();\n      this.next();\n      var inner = this.parseExpression();\n      this.expect(_acorn.tokTypes.parenR);\n\n      if (this.eat(_acorn.tokTypes.arrow)) {\n        // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n        var params = inner.expressions || [inner];\n\n        if (params.length && isDummy(params[params.length - 1])) {\n          params.pop();\n        }\n\n        return this.parseArrowExpression(this.startNodeAt(parenStart), params);\n      }\n\n      if (this.options.preserveParens) {\n        var par = this.startNodeAt(parenStart);\n        par.expression = inner;\n        inner = this.finishNode(par, \"ParenthesizedExpression\");\n      }\n\n      return inner;\n\n    case _acorn.tokTypes.bracketL:\n      node = this.startNode();\n      node.elements = this.parseExprList(_acorn.tokTypes.bracketR, true);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _acorn.tokTypes.braceL:\n      return this.parseObj();\n\n    case _acorn.tokTypes._class:\n      return this.parseClass(false);\n\n    case _acorn.tokTypes._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _acorn.tokTypes._new:\n      return this.parseNew();\n\n    case _acorn.tokTypes.backQuote:\n      return this.parseTemplate();\n\n    case _acorn.tokTypes._import:\n      if (this.options.ecmaVersion > 10) {\n        return this.parseDynamicImport();\n      } else {\n        return this.dummyIdent();\n      }\n\n    default:\n      return this.dummyIdent();\n  }\n};\n\nlp$2.parseDynamicImport = function () {\n  var node = this.startNode();\n  this.next();\n  return this.finishNode(node, \"Import\");\n};\n\nlp$2.parseNew = function () {\n  var node = this.startNode(),\n      startIndent = this.curIndent,\n      line = this.curLineStart;\n  var meta = this.parseIdent(true);\n\n  if (this.options.ecmaVersion >= 6 && this.eat(_acorn.tokTypes.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  var start = this.storeCurrentPos();\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n\n  if (this.tok.type === _acorn.tokTypes.parenL) {\n    node.arguments = this.parseExprList(_acorn.tokTypes.parenR);\n  } else {\n    node.arguments = [];\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n};\n\nlp$2.parseTemplateElement = function () {\n  var elem = this.startNode(); // The loose parser accepts invalid unicode escapes even in untagged templates.\n\n  if (this.tok.type === _acorn.tokTypes.invalidTemplate) {\n    elem.value = {\n      raw: this.tok.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.tok.value\n    };\n  }\n\n  this.next();\n  elem.tail = this.tok.type === _acorn.tokTypes.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\nlp$2.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n\n  while (!curElt.tail) {\n    this.next();\n    node.expressions.push(this.parseExpression());\n\n    if (this.expect(_acorn.tokTypes.braceR)) {\n      curElt = this.parseTemplateElement();\n    } else {\n      curElt = this.startNode();\n      curElt.value = {\n        cooked: \"\",\n        raw: \"\"\n      };\n      curElt.tail = true;\n      this.finishNode(curElt, \"TemplateElement\");\n    }\n\n    node.quasis.push(curElt);\n  }\n\n  this.expect(_acorn.tokTypes.backQuote);\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\nlp$2.parseObj = function () {\n  var node = this.startNode();\n  node.properties = [];\n  this.pushCx();\n  var indent = this.curIndent + 1,\n      line = this.curLineStart;\n  this.eat(_acorn.tokTypes.braceL);\n\n  if (this.curIndent + 1 < indent) {\n    indent = this.curIndent;\n    line = this.curLineStart;\n  }\n\n  while (!this.closes(_acorn.tokTypes.braceR, indent, line)) {\n    var prop = this.startNode(),\n        isGenerator = void 0,\n        isAsync = void 0,\n        start = void 0;\n\n    if (this.options.ecmaVersion >= 9 && this.eat(_acorn.tokTypes.ellipsis)) {\n      prop.argument = this.parseMaybeAssign();\n      node.properties.push(this.finishNode(prop, \"SpreadElement\"));\n      this.eat(_acorn.tokTypes.comma);\n      continue;\n    }\n\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos();\n      prop.method = false;\n      prop.shorthand = false;\n      isGenerator = this.eat(_acorn.tokTypes.star);\n    }\n\n    this.parsePropertyName(prop);\n\n    if (this.toks.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(_acorn.tokTypes.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    if (isDummy(prop.key)) {\n      if (isDummy(this.parseMaybeAssign())) {\n        this.next();\n      }\n\n      this.eat(_acorn.tokTypes.comma);\n      continue;\n    }\n\n    if (this.eat(_acorn.tokTypes.colon)) {\n      prop.kind = \"init\";\n      prop.value = this.parseMaybeAssign();\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === _acorn.tokTypes.parenL || this.tok.type === _acorn.tokTypes.braceL)) {\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" && !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.tok.type !== _acorn.tokTypes.comma && this.tok.type !== _acorn.tokTypes.braceR && this.tok.type !== _acorn.tokTypes.eq) {\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n    } else {\n      prop.kind = \"init\";\n\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(_acorn.tokTypes.eq)) {\n          var assign = this.startNodeAt(start);\n          assign.operator = \"=\";\n          assign.left = prop.key;\n          assign.right = this.parseMaybeAssign();\n          prop.value = this.finishNode(assign, \"AssignmentExpression\");\n        } else {\n          prop.value = prop.key;\n        }\n      } else {\n        prop.value = this.dummyIdent();\n      }\n\n      prop.shorthand = true;\n    }\n\n    node.properties.push(this.finishNode(prop, \"Property\"));\n    this.eat(_acorn.tokTypes.comma);\n  }\n\n  this.popCx();\n\n  if (!this.eat(_acorn.tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  return this.finishNode(node, \"ObjectExpression\");\n};\n\nlp$2.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_acorn.tokTypes.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseExpression();\n      this.expect(_acorn.tokTypes.bracketR);\n      return;\n    } else {\n      prop.computed = false;\n    }\n  }\n\n  var key = this.tok.type === _acorn.tokTypes.num || this.tok.type === _acorn.tokTypes.string ? this.parseExprAtom() : this.parseIdent();\n  prop.key = key || this.dummyIdent();\n};\n\nlp$2.parsePropertyAccessor = function () {\n  if (this.tok.type === _acorn.tokTypes.name || this.tok.type.keyword) {\n    return this.parseIdent();\n  }\n};\n\nlp$2.parseIdent = function () {\n  var name = this.tok.type === _acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword;\n\n  if (!name) {\n    return this.dummyIdent();\n  }\n\n  var node = this.startNode();\n  this.next();\n  node.name = name;\n  return this.finishNode(node, \"Identifier\");\n};\n\nlp$2.initFunction = function (node) {\n  node.id = null;\n  node.params = [];\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = false;\n  }\n}; // Convert existing expression atom to assignable pattern\n// if possible.\n\n\nlp$2.toAssignable = function (node, binding) {\n  if (!node || node.type === \"Identifier\" || node.type === \"MemberExpression\" && !binding) ;else if (node.type === \"ParenthesizedExpression\") {\n    this.toAssignable(node.expression, binding);\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent();\n  } else if (node.type === \"ObjectExpression\") {\n    node.type = \"ObjectPattern\";\n\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\n      var prop = list[i];\n      this.toAssignable(prop, binding);\n    }\n  } else if (node.type === \"ArrayExpression\") {\n    node.type = \"ArrayPattern\";\n    this.toAssignableList(node.elements, binding);\n  } else if (node.type === \"Property\") {\n    this.toAssignable(node.value, binding);\n  } else if (node.type === \"SpreadElement\") {\n    node.type = \"RestElement\";\n    this.toAssignable(node.argument, binding);\n  } else if (node.type === \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\";\n    delete node.operator;\n  } else {\n    return this.dummyIdent();\n  }\n  return node;\n};\n\nlp$2.toAssignableList = function (exprList, binding) {\n  for (var i = 0, list = exprList; i < list.length; i += 1) {\n    var expr = list[i];\n    this.toAssignable(expr, binding);\n  }\n\n  return exprList;\n};\n\nlp$2.parseFunctionParams = function (params) {\n  params = this.parseExprList(_acorn.tokTypes.parenR);\n  return this.toAssignableList(params, true);\n};\n\nlp$2.parseMethod = function (isGenerator, isAsync) {\n  var node = this.startNode(),\n      oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = !!isGenerator;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\nlp$2.parseArrowExpression = function (node, params, isAsync) {\n  var oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.toAssignableList(params, true);\n  node.expression = this.tok.type !== _acorn.tokTypes.braceL;\n\n  if (node.expression) {\n    node.body = this.parseMaybeAssign();\n  } else {\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n  }\n\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\nlp$2.parseExprList = function (close, allowEmpty) {\n  this.pushCx();\n  var indent = this.curIndent,\n      line = this.curLineStart,\n      elts = [];\n  this.next(); // Opening bracket\n\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(_acorn.tokTypes.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent());\n      continue;\n    }\n\n    var elt = this.parseMaybeAssign();\n\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) {\n        break;\n      }\n\n      this.next();\n    } else {\n      elts.push(elt);\n    }\n\n    this.eat(_acorn.tokTypes.comma);\n  }\n\n  this.popCx();\n\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  return elts;\n};\n\nlp$2.parseAwait = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\");\n}; // Acorn: Loose parser\n\n\n_acorn.defaultOptions.tabSize = 4;\n\nfunction parse(input, options) {\n  return LooseParser.parse(input, options);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn-loose/dist/acorn-loose.mjs\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn-walk/dist/walk.js":
/*!****************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn-walk/dist/walk.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, function (exports) { 'use strict';\n\n  // AST walker module for Mozilla Parser API compatible trees\n\n  // A simple walk is one where you simply specify callbacks to be\n  // called on specific nodes. The last two arguments are optional. A\n  // simple use would be\n  //\n  //     walk.simple(myTree, {\n  //         Expression: function(node) { ... }\n  //     });\n  //\n  // to do something with all expressions. All Parser API node types\n  // can be used to identify node types, as well as Expression and\n  // Statement, which denote categories of nodes.\n  //\n  // The base argument can be used to pass a custom (recursive)\n  // walker, and state can be used to give this walked an initial\n  // state.\n\n  function simple(node, visitors, baseVisitor, state, override) {\n    if (!baseVisitor) { baseVisitor = base\n    ; }(function c(node, st, override) {\n      var type = override || node.type, found = visitors[type];\n      baseVisitor[type](node, st, c);\n      if (found) { found(node, st); }\n    })(node, state, override);\n  }\n\n  // An ancestor walk keeps an array of ancestor nodes (including the\n  // current node) and passes them to the callback as third parameter\n  // (and also as state parameter when no other state is present).\n  function ancestor(node, visitors, baseVisitor, state) {\n    var ancestors = [];\n    if (!baseVisitor) { baseVisitor = base\n    ; }(function c(node, st, override) {\n      var type = override || node.type, found = visitors[type];\n      var isNew = node !== ancestors[ancestors.length - 1];\n      if (isNew) { ancestors.push(node); }\n      baseVisitor[type](node, st, c);\n      if (found) { found(node, st || ancestors, ancestors); }\n      if (isNew) { ancestors.pop(); }\n    })(node, state);\n  }\n\n  // A recursive walk is one where your functions override the default\n  // walkers. They can modify and replace the state parameter that's\n  // threaded through the walk, and can opt how and whether to walk\n  // their child nodes (by calling their third argument on these\n  // nodes).\n  function recursive(node, state, funcs, baseVisitor, override) {\n    var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\n    ;(function c(node, st, override) {\n      visitor[override || node.type](node, st, c);\n    })(node, state, override);\n  }\n\n  function makeTest(test) {\n    if (typeof test === \"string\")\n      { return function (type) { return type === test; } }\n    else if (!test)\n      { return function () { return true; } }\n    else\n      { return test }\n  }\n\n  var Found = function Found(node, state) { this.node = node; this.state = state; };\n\n  // A full walk triggers the callback on each node\n  function full(node, callback, baseVisitor, state, override) {\n    if (!baseVisitor) { baseVisitor = base\n    ; }(function c(node, st, override) {\n      var type = override || node.type;\n      baseVisitor[type](node, st, c);\n      if (!override) { callback(node, st, type); }\n    })(node, state, override);\n  }\n\n  // An fullAncestor walk is like an ancestor walk, but triggers\n  // the callback on each node\n  function fullAncestor(node, callback, baseVisitor, state) {\n    if (!baseVisitor) { baseVisitor = base; }\n    var ancestors = []\n    ;(function c(node, st, override) {\n      var type = override || node.type;\n      var isNew = node !== ancestors[ancestors.length - 1];\n      if (isNew) { ancestors.push(node); }\n      baseVisitor[type](node, st, c);\n      if (!override) { callback(node, st || ancestors, ancestors, type); }\n      if (isNew) { ancestors.pop(); }\n    })(node, state);\n  }\n\n  // Find a node with a given start, end, and type (all are optional,\n  // null can be used as wildcard). Returns a {node, state} object, or\n  // undefined when it doesn't find a matching node.\n  function findNodeAt(node, start, end, test, baseVisitor, state) {\n    if (!baseVisitor) { baseVisitor = base; }\n    test = makeTest(test);\n    try {\n      (function c(node, st, override) {\n        var type = override || node.type;\n        if ((start == null || node.start <= start) &&\n            (end == null || node.end >= end))\n          { baseVisitor[type](node, st, c); }\n        if ((start == null || node.start === start) &&\n            (end == null || node.end === end) &&\n            test(type, node))\n          { throw new Found(node, st) }\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) { return e }\n      throw e\n    }\n  }\n\n  // Find the innermost node of a given type that contains the given\n  // position. Interface similar to findNodeAt.\n  function findNodeAround(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n    if (!baseVisitor) { baseVisitor = base; }\n    try {\n      (function c(node, st, override) {\n        var type = override || node.type;\n        if (node.start > pos || node.end < pos) { return }\n        baseVisitor[type](node, st, c);\n        if (test(type, node)) { throw new Found(node, st) }\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) { return e }\n      throw e\n    }\n  }\n\n  // Find the outermost matching node after a given position.\n  function findNodeAfter(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n    if (!baseVisitor) { baseVisitor = base; }\n    try {\n      (function c(node, st, override) {\n        if (node.end < pos) { return }\n        var type = override || node.type;\n        if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\n        baseVisitor[type](node, st, c);\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) { return e }\n      throw e\n    }\n  }\n\n  // Find the outermost matching node before a given position.\n  function findNodeBefore(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n    if (!baseVisitor) { baseVisitor = base; }\n    var max\n    ;(function c(node, st, override) {\n      if (node.start > pos) { return }\n      var type = override || node.type;\n      if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n        { max = new Found(node, st); }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n    return max\n  }\n\n  // Fallback to an Object.create polyfill for older environments.\n  var create = Object.create || function(proto) {\n    function Ctor() {}\n    Ctor.prototype = proto;\n    return new Ctor\n  };\n\n  // Used to create a custom walker. Will fill in all missing node\n  // type properties with the defaults.\n  function make(funcs, baseVisitor) {\n    var visitor = create(baseVisitor || base);\n    for (var type in funcs) { visitor[type] = funcs[type]; }\n    return visitor\n  }\n\n  function skipThrough(node, st, c) { c(node, st); }\n  function ignore(_node, _st, _c) {}\n\n  // Node walkers.\n\n  var base = {};\n\n  base.Program = base.BlockStatement = function (node, st, c) {\n    for (var i = 0, list = node.body; i < list.length; i += 1)\n      {\n      var stmt = list[i];\n\n      c(stmt, st, \"Statement\");\n    }\n  };\n  base.Statement = skipThrough;\n  base.EmptyStatement = ignore;\n  base.ExpressionStatement = base.ParenthesizedExpression =\n    function (node, st, c) { return c(node.expression, st, \"Expression\"); };\n  base.IfStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Statement\");\n    if (node.alternate) { c(node.alternate, st, \"Statement\"); }\n  };\n  base.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\n  base.BreakStatement = base.ContinueStatement = ignore;\n  base.WithStatement = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n  base.SwitchStatement = function (node, st, c) {\n    c(node.discriminant, st, \"Expression\");\n    for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n      var cs = list$1[i$1];\n\n      if (cs.test) { c(cs.test, st, \"Expression\"); }\n      for (var i = 0, list = cs.consequent; i < list.length; i += 1)\n        {\n        var cons = list[i];\n\n        c(cons, st, \"Statement\");\n      }\n    }\n  };\n  base.SwitchCase = function (node, st, c) {\n    if (node.test) { c(node.test, st, \"Expression\"); }\n    for (var i = 0, list = node.consequent; i < list.length; i += 1)\n      {\n      var cons = list[i];\n\n      c(cons, st, \"Statement\");\n    }\n  };\n  base.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n    if (node.argument) { c(node.argument, st, \"Expression\"); }\n  };\n  base.ThrowStatement = base.SpreadElement =\n    function (node, st, c) { return c(node.argument, st, \"Expression\"); };\n  base.TryStatement = function (node, st, c) {\n    c(node.block, st, \"Statement\");\n    if (node.handler) { c(node.handler, st); }\n    if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\n  };\n  base.CatchClause = function (node, st, c) {\n    if (node.param) { c(node.param, st, \"Pattern\"); }\n    c(node.body, st, \"Statement\");\n  };\n  base.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n  base.ForStatement = function (node, st, c) {\n    if (node.init) { c(node.init, st, \"ForInit\"); }\n    if (node.test) { c(node.test, st, \"Expression\"); }\n    if (node.update) { c(node.update, st, \"Expression\"); }\n    c(node.body, st, \"Statement\");\n  };\n  base.ForInStatement = base.ForOfStatement = function (node, st, c) {\n    c(node.left, st, \"ForInit\");\n    c(node.right, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n  base.ForInit = function (node, st, c) {\n    if (node.type === \"VariableDeclaration\") { c(node, st); }\n    else { c(node, st, \"Expression\"); }\n  };\n  base.DebuggerStatement = ignore;\n\n  base.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\n  base.VariableDeclaration = function (node, st, c) {\n    for (var i = 0, list = node.declarations; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      c(decl, st);\n    }\n  };\n  base.VariableDeclarator = function (node, st, c) {\n    c(node.id, st, \"Pattern\");\n    if (node.init) { c(node.init, st, \"Expression\"); }\n  };\n\n  base.Function = function (node, st, c) {\n    if (node.id) { c(node.id, st, \"Pattern\"); }\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      c(param, st, \"Pattern\");\n    }\n    c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n  };\n\n  base.Pattern = function (node, st, c) {\n    if (node.type === \"Identifier\")\n      { c(node, st, \"VariablePattern\"); }\n    else if (node.type === \"MemberExpression\")\n      { c(node, st, \"MemberPattern\"); }\n    else\n      { c(node, st); }\n  };\n  base.VariablePattern = ignore;\n  base.MemberPattern = skipThrough;\n  base.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\n  base.ArrayPattern = function (node, st, c) {\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\n      var elt = list[i];\n\n      if (elt) { c(elt, st, \"Pattern\"); }\n    }\n  };\n  base.ObjectPattern = function (node, st, c) {\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n      if (prop.type === \"Property\") {\n        if (prop.computed) { c(prop.key, st, \"Expression\"); }\n        c(prop.value, st, \"Pattern\");\n      } else if (prop.type === \"RestElement\") {\n        c(prop.argument, st, \"Pattern\");\n      }\n    }\n  };\n\n  base.Expression = skipThrough;\n  base.ThisExpression = base.Super = base.MetaProperty = ignore;\n  base.ArrayExpression = function (node, st, c) {\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\n      var elt = list[i];\n\n      if (elt) { c(elt, st, \"Expression\"); }\n    }\n  };\n  base.ObjectExpression = function (node, st, c) {\n    for (var i = 0, list = node.properties; i < list.length; i += 1)\n      {\n      var prop = list[i];\n\n      c(prop, st);\n    }\n  };\n  base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\n  base.SequenceExpression = function (node, st, c) {\n    for (var i = 0, list = node.expressions; i < list.length; i += 1)\n      {\n      var expr = list[i];\n\n      c(expr, st, \"Expression\");\n    }\n  };\n  base.TemplateLiteral = function (node, st, c) {\n    for (var i = 0, list = node.quasis; i < list.length; i += 1)\n      {\n      var quasi = list[i];\n\n      c(quasi, st);\n    }\n\n    for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\n      {\n      var expr = list$1[i$1];\n\n      c(expr, st, \"Expression\");\n    }\n  };\n  base.TemplateElement = ignore;\n  base.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n    c(node.argument, st, \"Expression\");\n  };\n  base.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n    c(node.left, st, \"Expression\");\n    c(node.right, st, \"Expression\");\n  };\n  base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n    c(node.left, st, \"Pattern\");\n    c(node.right, st, \"Expression\");\n  };\n  base.ConditionalExpression = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Expression\");\n    c(node.alternate, st, \"Expression\");\n  };\n  base.NewExpression = base.CallExpression = function (node, st, c) {\n    c(node.callee, st, \"Expression\");\n    if (node.arguments)\n      { for (var i = 0, list = node.arguments; i < list.length; i += 1)\n        {\n          var arg = list[i];\n\n          c(arg, st, \"Expression\");\n        } }\n  };\n  base.MemberExpression = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n    if (node.computed) { c(node.property, st, \"Expression\"); }\n  };\n  base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n    if (node.declaration)\n      { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\n    if (node.source) { c(node.source, st, \"Expression\"); }\n  };\n  base.ExportAllDeclaration = function (node, st, c) {\n    c(node.source, st, \"Expression\");\n  };\n  base.ImportDeclaration = function (node, st, c) {\n    for (var i = 0, list = node.specifiers; i < list.length; i += 1)\n      {\n      var spec = list[i];\n\n      c(spec, st);\n    }\n    c(node.source, st, \"Expression\");\n  };\n  base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = base.Import = ignore;\n\n  base.TaggedTemplateExpression = function (node, st, c) {\n    c(node.tag, st, \"Expression\");\n    c(node.quasi, st, \"Expression\");\n  };\n  base.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\n  base.Class = function (node, st, c) {\n    if (node.id) { c(node.id, st, \"Pattern\"); }\n    if (node.superClass) { c(node.superClass, st, \"Expression\"); }\n    c(node.body, st);\n  };\n  base.ClassBody = function (node, st, c) {\n    for (var i = 0, list = node.body; i < list.length; i += 1)\n      {\n      var elt = list[i];\n\n      c(elt, st);\n    }\n  };\n  base.MethodDefinition = base.Property = function (node, st, c) {\n    if (node.computed) { c(node.key, st, \"Expression\"); }\n    c(node.value, st, \"Expression\");\n  };\n\n  exports.ancestor = ancestor;\n  exports.base = base;\n  exports.findNodeAfter = findNodeAfter;\n  exports.findNodeAround = findNodeAround;\n  exports.findNodeAt = findNodeAt;\n  exports.findNodeBefore = findNodeBefore;\n  exports.full = full;\n  exports.fullAncestor = fullAncestor;\n  exports.make = make;\n  exports.recursive = recursive;\n  exports.simple = simple;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn-walk/dist/walk.js\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs ***!
  \*****************************************************************/
/*! exports provided: ancestor, base, findNodeAfter, findNodeAround, findNodeAt, findNodeBefore, full, fullAncestor, make, recursive, simple */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ancestor\", function() { return ancestor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"base\", function() { return base; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findNodeAfter\", function() { return findNodeAfter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findNodeAround\", function() { return findNodeAround; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findNodeAt\", function() { return findNodeAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findNodeBefore\", function() { return findNodeBefore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"full\", function() { return full; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fullAncestor\", function() { return fullAncestor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"make\", function() { return make; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"recursive\", function() { return recursive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"simple\", function() { return simple; });\n// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st); }\n  })(node, state, override);\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nfunction ancestor(node, visitors, baseVisitor, state) {\n  var ancestors = [];\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st || ancestors, ancestors); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\")\n    { return function (type) { return type === test; } }\n  else if (!test)\n    { return function () { return true; } }\n  else\n    { return test }\n}\n\nvar Found = function Found(node, state) { this.node = node; this.state = state; };\n\n// A full walk triggers the callback on each node\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st, type); }\n  })(node, state, override);\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  var ancestors = []\n  ;(function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st || ancestors, ancestors, type); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  test = makeTest(test);\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        { baseVisitor[type](node, st, c); }\n      if ((start == null || node.start === start) &&\n          (end == null || node.end === end) &&\n          test(type, node))\n        { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) { return }\n      baseVisitor[type](node, st, c);\n      if (test(type, node)) { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) { return }\n      var type = override || node.type;\n      if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  var max\n  ;(function c(node, st, override) {\n    if (node.start > pos) { return }\n    var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      { max = new Found(node, st); }\n    baseVisitor[type](node, st, c);\n  })(node, state);\n  return max\n}\n\n// Fallback to an Object.create polyfill for older environments.\nvar create = Object.create || function(proto) {\n  function Ctor() {}\n  Ctor.prototype = proto;\n  return new Ctor\n};\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n  for (var type in funcs) { visitor[type] = funcs[type]; }\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st); }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var stmt = list[i];\n\n    c(stmt, st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression =\n  function (node, st, c) { return c(node.expression, st, \"Expression\"); };\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) { c(node.alternate, st, \"Statement\"); }\n};\nbase.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n\n    if (cs.test) { c(cs.test, st, \"Expression\"); }\n    for (var i = 0, list = cs.consequent; i < list.length; i += 1)\n      {\n      var cons = list[i];\n\n      c(cons, st, \"Statement\");\n    }\n  }\n};\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  for (var i = 0, list = node.consequent; i < list.length; i += 1)\n    {\n    var cons = list[i];\n\n    c(cons, st, \"Statement\");\n  }\n};\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) { c(node.argument, st, \"Expression\"); }\n};\nbase.ThrowStatement = base.SpreadElement =\n  function (node, st, c) { return c(node.argument, st, \"Expression\"); };\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) { c(node.handler, st); }\n  if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\n};\nbase.CatchClause = function (node, st, c) {\n  if (node.param) { c(node.param, st, \"Pattern\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) { c(node.init, st, \"ForInit\"); }\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  if (node.update) { c(node.update, st, \"Expression\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") { c(node, st); }\n  else { c(node, st, \"Expression\"); }\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    c(decl, st);\n  }\n};\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n  if (node.init) { c(node.init, st, \"Expression\"); }\n};\n\nbase.Function = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    c(param, st, \"Pattern\");\n  }\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n};\n\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\")\n    { c(node, st, \"VariablePattern\"); }\n  else if (node.type === \"MemberExpression\")\n    { c(node, st, \"MemberPattern\"); }\n  else\n    { c(node, st); }\n};\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\nbase.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Pattern\"); }\n  }\n};\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === \"Property\") {\n      if (prop.computed) { c(prop.key, st, \"Expression\"); }\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Expression\"); }\n  }\n};\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1)\n    {\n    var prop = list[i];\n\n    c(prop, st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.quasis; i < list.length; i += 1)\n    {\n    var quasi = list[i];\n\n    c(quasi, st);\n  }\n\n  for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\n    {\n    var expr = list$1[i$1];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateElement = ignore;\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments)\n    { for (var i = 0, list = node.arguments; i < list.length; i += 1)\n      {\n        var arg = list[i];\n\n        c(arg, st, \"Expression\");\n      } }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) { c(node.property, st, \"Expression\"); }\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration)\n    { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\n  if (node.source) { c(node.source, st, \"Expression\"); }\n};\nbase.ExportAllDeclaration = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1)\n    {\n    var spec = list[i];\n\n    c(spec, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = base.Import = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\nbase.Class = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  if (node.superClass) { c(node.superClass, st, \"Expression\"); }\n  c(node.body, st);\n};\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var elt = list[i];\n\n    c(elt, st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) { c(node.key, st, \"Expression\"); }\n  c(node.value, st, \"Expression\");\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn/dist/acorn.js":
/*!************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn/dist/acorn.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.acorn = {}));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n\n  // eslint-disable-next-line comma-spacing\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n  // eslint-disable-next-line comma-spacing\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n  // Map keyword names to token types.\n\n  var keywords$1 = {};\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords$1[name] = new TokenType(name, options)\n  }\n\n  var types = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code, ecma2019String) {\n    return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return hasOwnProperty.call(obj, propName)\n  }\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  function wordsRegexp(words) {\n    return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur;\n      var match = lineBreakG.exec(input);\n      if (match && match.index < offset) {\n        ++line;\n        cur = match.index + match[0].length;\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n    // (2019). This influences support for strict mode, the set of\n    // reserved words, and support for new syntax features. The default\n    // is 9.\n    ecmaVersion: 9,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // the position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n  };\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion >= 2015)\n      { options.ecmaVersion -= 2009; }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  // Each scope gets a bitset that may contain these flags\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  // Used in checkLVal and declareName to determine the type of a binding\n  var\n      BIND_NONE = 0, // Not a binding\n      BIND_VAR = 1, // Var-style binding\n      BIND_LEXICAL = 2, // Let- or const-style binding\n      BIND_FUNCTION = 3, // Function declaration\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      for (var v = options.ecmaVersion;; v--)\n        { if (reserved = reservedWords[v]) { break } }\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = {};\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    // For RegExp validation\n    this.regexpState = null;\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\n  prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  // Switch to a getter for 7.0.0.\n  Parser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp = Parser.prototype;\n\n  // ## Parser utilities\n\n  var literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\n  pp.strictDirective = function(start) {\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") { return true }\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === types.name && this.value === name && !this.containsEsc\n  };\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === types.eof ||\n      this.type === types.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  }\n\n  pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n  };\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$1 = Parser.prototype;\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var exports = {};\n    if (!node.body) { node.body = []; }\n    while (this.type !== types.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$1.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91) { return true } // '['\n    if (context) { return false }\n\n    if (nextCh === 123) { return true } // '{'\n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$1.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n  };\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types._debugger: return this.parseDebuggerStatement(node)\n    case types._do: return this.parseDoStatement(node)\n    case types._for: return this.parseForStatement(node)\n    case types._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types._if: return this.parseIfStatement(node)\n    case types._return: return this.parseReturnStatement(node)\n    case types._switch: return this.parseSwitchStatement(node)\n    case types._throw: return this.parseThrowStatement(node)\n    case types._try: return this.parseTryStatement(node)\n    case types._const: case types._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types._while: return this.parseWhileStatement(node)\n    case types._with: return this.parseWithStatement(node)\n    case types.braceL: return this.parseBlock(true, node)\n    case types.semi: return this.parseEmptyStatement(node)\n    case types._export:\n    case types._import:\n      if (this.options.ecmaVersion > 10 && starttype === types._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40) // '('\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$1.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types.parenL);\n    if (this.type === types.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types._var || this.type === types._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(true, refDestructuringErrors);\n    if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLVal(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$1.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$1.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    var cur;\n    for (var sawDefault = false; this.type !== types.braceR;) {\n      if (this.type === types._case || this.type === types._default) {\n        var isCase = this.type === types._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = [];\n\n  pp$1.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types.parenL)) {\n        clause.param = this.parseBindingAtom();\n        var simple = clause.param.type === \"Identifier\";\n        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n        this.expect(types.parenR);\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        // Update information about previous labels on this node\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(createNewLexicalScope, node) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (!this.eat(types.braceR)) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.type === types.semi ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.type === types.parenR ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var isForIn = this.type === types._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) { break }\n    }\n    return node\n  };\n\n  pp$1.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n  // Parse a function declaration or literal (depending on the\n  // `statement & FUNC_STATEMENT`).\n\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n  pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    this.next();\n\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        }\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$1.parseClassElement = function(constructorAllowsSuper) {\n    var this$1 = this;\n\n    if (this.eat(types.semi)) { return null }\n\n    var method = this.startNode();\n    var tryContextual = function (k, noLineBreak) {\n      if ( noLineBreak === void 0 ) noLineBreak = false;\n\n      var start = this$1.start, startLoc = this$1.startLoc;\n      if (!this$1.eatContextual(k)) { return false }\n      if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n      if (method.key) { this$1.unexpected(); }\n      method.computed = false;\n      method.key = this$1.startNodeAt(start, startLoc);\n      method.key.name = k;\n      this$1.finishNode(method.key, \"Identifier\");\n      return false\n    };\n\n    method.kind = \"method\";\n    method.static = tryContextual(\"static\");\n    var isGenerator = this.eat(types.star);\n    var isAsync = false;\n    if (!isGenerator) {\n      if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      } else if (tryContextual(\"get\")) {\n        method.kind = \"get\";\n      } else if (tryContextual(\"set\")) {\n        method.kind = \"set\";\n      }\n    }\n    if (!method.key) { this.parsePropertyName(method); }\n    var key = method.key;\n    var allowsDirectSuper = false;\n    if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n        key.type === \"Literal\" && key.value === \"constructor\")) {\n      if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n      method.kind = \"constructor\";\n      allowsDirectSuper = constructorAllowsSuper;\n    } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n    this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n    if (method.kind === \"get\" && method.value.params.length !== 0)\n      { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && method.value.params.length !== 1)\n      { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n    return method\n  };\n\n  pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$1.parseClassId = function(node, isStatement) {\n    if (this.type === types.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLVal(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  };\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types.star)) {\n      this.expectContextual(\"from\");\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(types._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      var isAsync;\n      if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n      } else if (this.type === types._class) {\n        var cNode = this.startNode();\n        node.declaration = this.parseClass(cNode, \"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(null);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          // check for keywords used as local names\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          // check if export is defined\n          this.checkLocalExport(spec.local);\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$1.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (has(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$1.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat.name, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n    else if (type === \"ParenthesizedExpression\")\n      { this.checkPatternExport(exports, pat.expression); }\n  };\n\n  pp$1.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node = this.startNode();\n      node.local = this.parseIdent(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n      this.checkExport(exports, node.exported.name, node.exported.start);\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n    return nodes\n  };\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next();\n    // import '...'\n    if (this.type === types.string) {\n      node.specifiers = empty;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode();\n      node.local = this.parseIdent();\n      this.checkLVal(node.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n      if (!this.eat(types.comma)) { return nodes }\n    }\n    if (this.type === types.star) {\n      var node$1 = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      node$1.local = this.parseIdent();\n      this.checkLVal(node$1.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n      return nodes\n    }\n    this.expect(types.braceL);\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var node$2 = this.startNode();\n      node$2.imported = this.parseIdent(true);\n      if (this.eatContextual(\"as\")) {\n        node$2.local = this.parseIdent();\n      } else {\n        this.checkUnreserved(node$2.imported);\n        node$2.local = node$2.imported;\n      }\n      this.checkLVal(node$2.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n    }\n    return nodes\n  };\n\n  // Set `ExpressionStatement#directive` property for directive prologues.\n  pp$1.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$1.isDirectiveCandidate = function(statement) {\n    return (\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      // Reject parenthesized strings.\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$2 = Parser.prototype;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        // falls through to AssignmentPattern\n\n      case \"AssignmentPattern\":\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$2.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types.comma); }\n      if (allowEmpty && this.type === types.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        var elem = this.parseMaybeDefault(this.start, this.startLoc);\n        this.parseBindingListItem(elem);\n        elts.push(elem);\n      }\n    }\n    return elts\n  };\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  };\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n  // bindingType can be either:\n  // 'var' indicating that the lval creates a 'var' binding\n  // 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n  // 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\n  pp$2.checkLVal = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      break\n\n    case \"MemberExpression\":\n      if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1)\n        {\n      var prop = list[i];\n\n      this.checkLVal(prop, bindingType, checkClashes);\n    }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLVal(expr.value, bindingType, checkClashes);\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLVal(elem, bindingType, checkClashes); }\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, bindingType, checkClashes);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, bindingType, checkClashes);\n      break\n\n    default:\n      this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n  // A recursive descent parser operates by defining functions for all\n\n  var pp$3 = Parser.prototype;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n          // Backwards-compat kludge. Can be removed in version 6.0\n          else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n    if (this.type === types.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(noIn) }\n      // The tokenizer will assume an expression is allowed after\n      // `yield`, but this isn't that kind of yield\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldShorthandAssign = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      oldShorthandAssign = refDestructuringErrors.shorthandAssign;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types.parenL || this.type === types.name)\n      { this.potentialArrowAt = this.start; }\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n      if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n      refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      this.checkLVal(left);\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    if (oldShorthandAssign > -1) { refDestructuringErrors.shorthandAssign = oldShorthandAssign; }\n    return left\n  };\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(noIn, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  };\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop;\n    if (prec != null && (!noIn || this.type !== types._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  };\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLVal(node.argument); }\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLVal(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(types.starstar))\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n    else\n      { return expr }\n  };\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors);\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    }\n    return result\n  };\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n      if (element === base || element.type === \"ArrowFunctionExpression\") { return element }\n      base = element;\n    }\n  };\n\n  pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n    var computed = this.eat(types.bracketL);\n    if (computed || this.eat(types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n      node.computed = !!computed;\n      if (computed) { this.expect(types.bracketR); }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8 && base.type !== \"Import\", false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      if (node$1.callee.type === \"Import\") {\n        if (node$1.arguments.length !== 1) {\n          this.raise(node$1.start, \"import() requires exactly one argument\");\n        }\n\n        var importArg = node$1.arguments[0];\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, \"... is not allowed in import()\");\n        }\n      }\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types.backQuote) {\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super Arguments\n      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n        { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n        }\n      }\n      return id\n\n    case types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types.num: case types.string:\n      return this.parseLiteral(this.value)\n\n    case types._null: case types._true: case types._false:\n      node = this.startNode();\n      node.value = this.type === types._null ? null : this.type === types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types._new:\n      return this.parseNew()\n\n    case types.backQuote:\n      return this.parseTemplate()\n\n    case types._import:\n      if (this.options.ecmaVersion > 10) {\n        return this.parseDynamicImport()\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$3.parseDynamicImport = function() {\n    var node = this.startNode();\n    this.next();\n    if (this.type !== types.parenL) {\n      this.unexpected();\n    }\n    return this.finishNode(node, \"Import\")\n  };\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$3.parseParenExpression = function() {\n    this.expect(types.parenL);\n    var val = this.parseExpression();\n    this.expect(types.parenR);\n    return val\n  };\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\n      while (this.type !== types.parenR) {\n        first ? first = false : this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc;\n      this.expect(types.parenR);\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  };\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = [];\n\n  pp$3.parseNew = function() {\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n      node.meta = meta;\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\" || containsEsc)\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n      if (!this.inNonArrowFunction())\n        { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    if (this.options.ecmaVersion > 10 && node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    }\n    if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8 && node.callee.type !== \"Import\", false); }\n    else { node.arguments = empty$1; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$3.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$3.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types.braceR)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (this.afterTrailingComma(types.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types.comma) {\n          this.raise(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      // To disallow parenthesized identifier via `this.toAssignable()`.\n      if (this.type === types.parenL && refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0) {\n          refDestructuringErrors.parenthesizedAssign = this.start;\n        }\n        if (refDestructuringErrors.parenthesizedBind < 0) {\n          refDestructuringErrors.parenthesizedBind = this.start;\n        }\n      }\n      // Parse argument.\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      // To disallow trailing comma via `this.toAssignable()`.\n      if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      // Finish\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n      this.parsePropertyName(prop, refDestructuringErrors);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types.comma && this.type !== types.braceR)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\")\n          { this.raiseRecoverable(start, \"getter should have no params\"); }\n        else\n          { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n          { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else if (this.type === types.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else {\n        prop.value = prop.key;\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params, isAsync) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n    var isExpression = isArrowFunction && this.type !== types.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      node.body = this.parseBlock(false);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n    this.strict = oldStrict;\n  };\n\n  pp$3.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, allowDuplicates) {\n    var nameHash = {};\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types.comma)\n        { elt = null; }\n      else if (this.type === types.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$3.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal, isBinding) {\n    var node = this.startNode();\n    if (this.type === types.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      // To fix https://github.com/acornjs/acorn/issues/575\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n      if ((node.name === \"class\" || node.name === \"function\") &&\n          (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function(noIn) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$3.parseAwait = function() {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$5 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n  };\n\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n  pp$5.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$5.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  pp$5.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$5.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$5.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$5.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$5.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  pp$5.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$6.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$6.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n  // Finish node at given position\n\n  pp$6.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n  // The algorithm used to determine whether a regexp can appear at a\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types$1 = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$7 = Parser.prototype;\n\n  pp$7.initialContext = function() {\n    return [types$1.b_stat]\n  };\n\n  pp$7.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types$1.f_expr || parent === types$1.f_stat)\n      { return true }\n    if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n      { return !parent.isExpr }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types._return || prevType === types.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n      { return true }\n    if (prevType === types.braceL)\n      { return parent === types$1.b_stat }\n    if (prevType === types._var || prevType === types._const || prevType === types.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$7.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$7.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n  // Token-specific context update code\n\n  types.parenR.updateContext = types.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types$1.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types.dollarBraceL.updateContext = function() {\n    this.context.push(types$1.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n    this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  };\n\n  types._function.updateContext = types._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n        !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n      { this.context.push(types$1.f_expr); }\n    else\n      { this.context.push(types$1.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types.backQuote.updateContext = function() {\n    if (this.curContext() === types$1.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types$1.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types.star.updateContext = function(prevType) {\n    if (prevType === types._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types$1.f_expr)\n        { this.context[index] = types$1.f_expr_gen; }\n      else\n        { this.context[index] = types$1.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n  // This file contains Unicode properties extracted from the ECMAScript\n  // specification. The lists are extracted like so:\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n  // #table-binary-unicode-properties\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties\n  };\n\n  // #table-unicode-general-category-values\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  // #table-unicode-script-values\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n  buildUnicodeData(9);\n  buildUnicodeData(10);\n  buildUnicodeData(11);\n\n  var pp$8 = Parser.prototype;\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n  RegExpValidationState.prototype.at = function at (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current () {\n    return this.at(this.pos)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead () {\n    return this.at(this.nextIndex(this.pos))\n  };\n\n  RegExpValidationState.prototype.advance = function advance () {\n    this.pos = this.nextIndex(this.pos);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch) {\n    if (this.current() === ch) {\n      this.advance();\n      return true\n    }\n    return false\n  };\n\n  function codePointToString(ch) {\n    if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n    ch -= 0x10000;\n    return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n  }\n\n  /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$8.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n    }\n  };\n\n  /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$8.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n  pp$8.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      // Make the same messages as V8.\n      if (state.eat(0x29 /* ) */)) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (state.groupNames.indexOf(name) === -1) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n  pp$8.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while (state.eat(0x7C /* | */)) {\n      this.regexp_alternative(state);\n    }\n\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n  pp$8.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\n      { }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n  pp$8.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      // Handle `QuantifiableAssertion Quantifier` alternative.\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n      // is a QuantifiableAssertion.\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        // Make the same message as V8.\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n  pp$8.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    // ^, $\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n      return true\n    }\n\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */)) {\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C /* < */);\n      }\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 /* ) */)) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n  pp$8.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F /* ? */);\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n  pp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A /* * */) ||\n      state.eat(0x2B /* + */) ||\n      state.eat(0x3F /* ? */) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$8.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */)) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D /* } */)) {\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n  pp$8.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */)) {\n      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */)) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */)) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F /* ? */) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n  pp$8.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n  pp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n  pp$8.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24 /* $ */ ||\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n      ch === 0x2E /* . */ ||\n      ch === 0x3F /* ? */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n  // But eat eager.\n  pp$8.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n  pp$8.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24 /* $ */ &&\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n      ch !== 0x2E /* . */ &&\n      ch !== 0x3F /* ? */ &&\n      ch !== 0x5B /* [ */ &&\n      ch !== 0x5E /* ^ */ &&\n      ch !== 0x7C /* | */\n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // GroupSpecifier[U] ::\n  //   [empty]\n  //   `?` GroupName[?U]\n  pp$8.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */)) {\n      if (this.regexp_eatGroupName(state)) {\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n          state.raise(\"Duplicate capture group name\");\n        }\n        state.groupNames.push(state.lastStringValue);\n        return\n      }\n      state.raise(\"Invalid group\");\n    }\n  };\n\n  // GroupName[U] ::\n  //   `<` RegExpIdentifierName[?U] `>`\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$8.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */)) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  // RegExpIdentifierName[U] ::\n  //   RegExpIdentifierStart[?U]\n  //   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$8.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  // RegExpIdentifierStart[U] ::\n  //   UnicodeIDStart\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[?U]\n  pp$8.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n  }\n\n  // RegExpIdentifierPart[U] ::\n  //   UnicodeIDContinue\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[?U]\n  //   <ZWNJ>\n  //   <ZWJ>\n  pp$8.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var ch = state.current();\n    state.advance();\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n  pp$8.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      if (state.current() === 0x63 /* c */) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$8.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */)) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n  pp$8.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$8.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */)) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$8.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n  pp$8.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */) {\n      state.lastIntValue = 0x09; /* \\t */\n      state.advance();\n      return true\n    }\n    if (ch === 0x6E /* n */) {\n      state.lastIntValue = 0x0A; /* \\n */\n      state.advance();\n      return true\n    }\n    if (ch === 0x76 /* v */) {\n      state.lastIntValue = 0x0B; /* \\v */\n      state.advance();\n      return true\n    }\n    if (ch === 0x66 /* f */) {\n      state.lastIntValue = 0x0C; /* \\f */\n      state.advance();\n      return true\n    }\n    if (ch === 0x72 /* r */) {\n      state.lastIntValue = 0x0D; /* \\r */\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n  pp$8.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n  pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x75 /* u */)) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        state.switchU &&\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D /* } */) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n  pp$8.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F /* / */)) {\n        state.lastIntValue = 0x2F; /* / */\n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n  pp$8.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n        state.advance();\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n  pp$8.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return true\n    }\n\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      if (\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatUnicodePropertyValueExpression(state) &&\n        state.eat(0x7D /* } */)\n      ) {\n        return true\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return false\n  };\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64 /* d */ ||\n      ch === 0x44 /* D */ ||\n      ch === 0x73 /* s */ ||\n      ch === 0x53 /* S */ ||\n      ch === 0x77 /* w */ ||\n      ch === 0x57 /* W */\n    )\n  }\n\n  // UnicodePropertyValueExpression ::\n  //   UnicodePropertyName `=` UnicodePropertyValue\n  //   LoneUnicodePropertyNameOrValue\n  pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return true\n      }\n    }\n    state.pos = start;\n\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n      return true\n    }\n    return false\n  };\n  pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!has(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n  pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (!state.unicodeProperties.binary.test(nameOrValue))\n      { state.raise(\"Invalid property name\"); }\n  };\n\n  // UnicodePropertyName ::\n  //   UnicodePropertyNameCharacters\n  pp$8.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */\n  }\n\n  // UnicodePropertyValue ::\n  //   UnicodePropertyValueCharacters\n  pp$8.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  // LoneUnicodePropertyNameOrValue ::\n  //   UnicodePropertyValueCharacters\n  pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n  pp$8.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */)) {\n      state.eat(0x5E /* ^ */);\n      this.regexp_classRanges(state);\n      if (state.eat(0x5D /* [ */)) {\n        return true\n      }\n      // Unreachable since it threw \"unterminated regular expression\" error before.\n      state.raise(\"Unterminated character class\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n  pp$8.regexp_classRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n  pp$8.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        // Make the same message as V8.\n        var ch$1 = state.current();\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D /* [ */) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n  pp$8.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D /* - */)) {\n      state.lastIntValue = 0x2D; /* - */\n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 /* c */)) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n  pp$8.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$8.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */)) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n  pp$8.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n  pp$8.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n      return 10 + (ch - 0x41 /* A */)\n    }\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n      return 10 + (ch - 0x61 /* a */)\n    }\n    return ch - 0x30 /* 0 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\n  pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n  pp$8.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; /* 0 */\n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$8.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n  // ## Tokenizer\n\n  var pp$9 = Parser.prototype;\n\n  // Move to the next token\n\n  pp$9.next = function() {\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp$9.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    { pp$9[Symbol.iterator] = function() {\n      var this$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1.getToken();\n          return {\n            done: token.type === types.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$9.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$9.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp$9.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp$9.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xe000) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return (code << 10) + next - 0x35fdc00\n  };\n\n  pp$9.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start;\n      var match;\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this.curLine;\n        this.lineStart = match.index + match[0].length;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp$9.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$9.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: // '*'\n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$9.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$9.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(types.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types.dot)\n    }\n  };\n\n  pp$9.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.slash, 1)\n  };\n\n  pp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types.star : types.modulo;\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp$9.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n  };\n\n  pp$9.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.bitwiseXOR, 1)\n  };\n\n  pp$9.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types.assign, 2) }\n    return this.finishOp(types.plusMin, 1)\n  };\n\n  pp$9.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n      return this.finishOp(types.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types.relational, size)\n  };\n\n  pp$9.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2;\n      return this.finishToken(types.arrow)\n    }\n    return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n  };\n\n  pp$9.getTokenFromCode = function(code) {\n    switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n    // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(types.parenL)\n    case 41: ++this.pos; return this.finishToken(types.parenR)\n    case 59: ++this.pos; return this.finishToken(types.semi)\n    case 44: ++this.pos; return this.finishToken(types.comma)\n    case 91: ++this.pos; return this.finishToken(types.bracketL)\n    case 93: ++this.pos; return this.finishToken(types.bracketR)\n    case 123: ++this.pos; return this.finishToken(types.braceL)\n    case 125: ++this.pos; return this.finishToken(types.braceR)\n    case 58: ++this.pos; return this.finishToken(types.colon)\n    case 63: ++this.pos; return this.finishToken(types.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n    // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(types.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n  };\n\n  pp$9.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp$9.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    // Create Literal#value property value.\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n      // ESTree requires null if it failed to instantiate RegExp object.\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n\n    return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$9.readInt = function(radix, len) {\n    var start = this.pos, total = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n      if (code >= 97) { val = code - 97 + 10; } // a\n      else if (code >= 65) { val = code - 65 + 10; } // A\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n      else { val = Infinity; }\n      if (val >= radix) { break }\n      ++this.pos;\n      total = total * radix + val;\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  pp$9.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val)\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$9.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var str$1 = this.input.slice(start, this.pos);\n      var val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types.num, val$1)\n    }\n    if (next === 46 && !octal) { // '.'\n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var str = this.input.slice(start, this.pos);\n    var val = octal ? parseInt(str, 8) : parseFloat(str);\n    return this.finishToken(types.num, val)\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$9.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { // '{'\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  function codePointToString$1(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$9.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else {\n        if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types.string, out)\n  };\n\n  // Reads template string tokens.\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp$9.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp$9.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp$9.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n        if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  // Reads a template token to search for the end, without validating any escape sequences\n  pp$9.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break\n        }\n      // falls through\n\n      case \"`\":\n        return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      // no default\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n  // Used to read escaped characters\n\n  pp$9.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$9.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$9.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { // \"\\\"\n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString$1(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$9.readWord = function() {\n    var word = this.readWord1();\n    var type = types.name;\n    if (this.keywords.test(word)) {\n      if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n      type = keywords$1[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\n  var version = \"6.4.0\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types,\n    keywordTypes: keywords$1,\n    TokContext: TokContext,\n    tokContexts: types$1,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords$1;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types$1;\n  exports.tokTypes = types;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn/dist/acorn.js\n");

/***/ }),

/***/ "./node_modules/tern/node_modules/acorn/dist/acorn.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/tern/node_modules/acorn/dist/acorn.mjs ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLineInfo = getLineInfo;\nexports.isIdentifierChar = isIdentifierChar;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isNewLine = isNewLine;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\nexports.version = exports.tokTypes = exports.tokContexts = exports.nonASCIIwhitespace = exports.lineBreakG = exports.lineBreak = exports.keywordTypes = exports.defaultOptions = exports.TokenType = exports.Token = exports.TokContext = exports.SourceLocation = exports.Position = exports.Parser = exports.Node = void 0;\n// Reserved word lists for various dialects of the language\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n}; // And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\nvar keywordRelationalOperator = /^in(stanceof)?$/; // ## Character categories\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n// eslint-disable-next-line comma-spacing\n\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541]; // eslint-disable-next-line comma-spacing\n\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239]; // This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n\n    if (pos > code) {\n      return false;\n    }\n\n    pos += set[i + 1];\n\n    if (pos >= code) {\n      return true;\n    }\n  }\n} // Test whether a given character code starts an identifier.\n\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) {\n    return code === 36;\n  }\n\n  if (code < 91) {\n    return true;\n  }\n\n  if (code < 97) {\n    return code === 95;\n  }\n\n  if (code < 123) {\n    return true;\n  }\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  if (astral === false) {\n    return false;\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n} // Test whether a given character is part of an identifier.\n\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) {\n    return code === 36;\n  }\n\n  if (code < 58) {\n    return true;\n  }\n\n  if (code < 65) {\n    return false;\n  }\n\n  if (code < 91) {\n    return true;\n  }\n\n  if (code < 97) {\n    return code === 95;\n  }\n\n  if (code < 123) {\n    return true;\n  }\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  if (astral === false) {\n    return false;\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n} // ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\nvar TokenType = function TokenType(label, conf) {\n  if (conf === void 0) conf = {};\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, {\n    beforeExpr: true,\n    binop: prec\n  });\n}\n\nvar beforeExpr = {\n  beforeExpr: true\n},\n    startsExpr = {\n  startsExpr: true\n}; // Map keyword names to token types.\n\nvar keywords$1 = {}; // Succinct definitions of keyword token types\n\nexports.keywordTypes = keywords$1;\n\nfunction kw(name, options) {\n  if (options === void 0) options = {};\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options);\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n  eq: new TokenType(\"=\", {\n    beforeExpr: true,\n    isAssign: true\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: true,\n    isAssign: true\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: true,\n    postfix: true,\n    startsExpr: true\n  }),\n  prefix: new TokenType(\"!/~\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: true,\n    binop: 9,\n    prefix: true,\n    startsExpr: true\n  }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {\n    beforeExpr: true\n  }),\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {\n    isLoop: true,\n    beforeExpr: true\n  }),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {\n    isLoop: true\n  }),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {\n    isLoop: true\n  }),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {\n    beforeExpr: true,\n    binop: 7\n  }),\n  _instanceof: kw(\"instanceof\", {\n    beforeExpr: true,\n    binop: 7\n  }),\n  _typeof: kw(\"typeof\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  _void: kw(\"void\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  _delete: kw(\"delete\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  })\n}; // Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nexports.tokTypes = types;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString; // Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName);\n}\n\nvar isArray = Array.isArray || function (obj) {\n  return toString.call(obj) === \"[object Array]\";\n};\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\");\n} // These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nexports.Position = Position;\n\nPosition.prototype.offset = function offset(n) {\n  return new Position(this.line, this.column + n);\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n\n  if (p.sourceFile !== null) {\n    this.source = p.sourceFile;\n  }\n}; // The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n} // A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n  // (2019). This influences support for strict mode, the set of\n  // reserved words, and support for new syntax features. The default\n  // is 9.\n  ecmaVersion: 9,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n}; // Interpret and default an options object\n\nexports.defaultOptions = defaultOptions;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions) {\n    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }\n\n  if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null) {\n    options.allowReserved = options.ecmaVersion < 5;\n  }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n\n    options.onToken = function (token) {\n      return tokens.push(token);\n    };\n  }\n\n  if (isArray(options.onComment)) {\n    options.onComment = pushComment(options, options.onComment);\n  }\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n\n    if (options.locations) {\n      comment.loc = new SourceLocation(this, startLoc, endLoc);\n    }\n\n    if (options.ranges) {\n      comment.range = [start, end];\n    }\n\n    array.push(comment);\n  };\n} // Each scope gets a bitset that may contain these flags\n\n\nvar SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);\n} // Used in checkLVal and declareName to determine the type of a binding\n\n\nvar BIND_NONE = 0,\n    // Not a binding\nBIND_VAR = 1,\n    // Var-style binding\nBIND_LEXICAL = 2,\n    // Let- or const-style binding\nBIND_FUNCTION = 3,\n    // Function declaration\nBIND_SIMPLE_CATCH = 4,\n    // Simple (identifier pattern) catch binding\nBIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n\n  if (options.allowReserved !== true) {\n    for (var v = options.ecmaVersion;; v--) {\n      if (reserved = reservedWords[v]) {\n        break;\n      }\n    }\n\n    if (options.sourceType === \"module\") {\n      reserved += \" await\";\n    }\n  }\n\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input); // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n  this.containsEsc = false; // Set up token state\n  // The current position of the tokenizer in the input.\n\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  } // Properties of the current token:\n  // Its type\n\n\n  this.type = types.eof; // For tokens that include more information than their type, the value\n\n  this.value = null; // Its start and end offset\n\n  this.start = this.end = this.pos; // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n\n  this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token\n\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n\n  this.context = this.initialContext();\n  this.exprAllowed = true; // Figure out if it's a module code.\n\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function\n\n  this.potentialArrowAt = -1; // Positions to delayed-check that yield/await does not exist in default parameters.\n\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0; // Labels in scope.\n\n  this.labels = []; // Thus-far undefined exports.\n\n  this.undefinedExports = {}; // If enabled, skip leading hashbang line.\n\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") {\n    this.skipLineComment(2);\n  } // Scope tracking for duplicate variable names (see scope.js)\n\n\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP); // For RegExp validation\n\n  this.regexpState = null;\n};\n\nexports.Parser = Parser;\nvar prototypeAccessors = {\n  inFunction: {\n    configurable: true\n  },\n  inGenerator: {\n    configurable: true\n  },\n  inAsync: {\n    configurable: true\n  },\n  allowSuper: {\n    configurable: true\n  },\n  allowDirectSuper: {\n    configurable: true\n  },\n  treatFunctionsAsVar: {\n    configurable: true\n  }\n};\n\nParser.prototype.parse = function parse() {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node);\n};\n\nprototypeAccessors.inFunction.get = function () {\n  return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n};\n\nprototypeAccessors.inGenerator.get = function () {\n  return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n};\n\nprototypeAccessors.inAsync.get = function () {\n  return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n};\n\nprototypeAccessors.allowDirectSuper.get = function () {\n  return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n};\n\nprototypeAccessors.treatFunctionsAsVar.get = function () {\n  return this.treatFunctionsAsVarInScope(this.currentScope());\n}; // Switch to a getter for 7.0.0.\n\n\nParser.prototype.inNonArrowFunction = function inNonArrowFunction() {\n  return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n};\n\nParser.extend = function extend() {\n  var plugins = [],\n      len = arguments.length;\n\n  while (len--) {\n    plugins[len] = arguments[len];\n  }\n\n  var cls = this;\n\n  for (var i = 0; i < plugins.length; i++) {\n    cls = plugins[i](cls);\n  }\n\n  return cls;\n};\n\nParser.parse = function parse(input, options) {\n  return new this(options, input).parse();\n};\n\nParser.parseExpressionAt = function parseExpressionAt(input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression();\n};\n\nParser.tokenizer = function tokenizer(input, options) {\n  return new this(options, input);\n};\n\nObject.defineProperties(Parser.prototype, prototypeAccessors);\nvar pp = Parser.prototype; // ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;\n\npp.strictDirective = function (start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n\n    if (!match) {\n      return false;\n    }\n\n    if ((match[1] || match[2]) === \"use strict\") {\n      return true;\n    }\n\n    start += match[0].length; // Skip semicolon, if any.\n\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n\n    if (this.input[start] === \";\") {\n      start++;\n    }\n  }\n}; // Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n}; // Tests whether parsed token is a contextual keyword.\n\n\npp.isContextual = function (name) {\n  return this.type === types.name && this.value === name && !this.containsEsc;\n}; // Consumes contextual keyword if possible.\n\n\npp.eatContextual = function (name) {\n  if (!this.isContextual(name)) {\n    return false;\n  }\n\n  this.next();\n  return true;\n}; // Asserts that following token is given contextual keyword.\n\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) {\n    this.unexpected();\n  }\n}; // Test whether a semicolon can be inserted at the current position.\n\n\npp.canInsertSemicolon = function () {\n  return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) {\n      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    }\n\n    return true;\n  }\n}; // Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\n\npp.semicolon = function () {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) {\n    this.unexpected();\n  }\n};\n\npp.afterTrailingComma = function (tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma) {\n      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    }\n\n    if (!notNext) {\n      this.next();\n    }\n\n    return true;\n  }\n}; // Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n}; // Raise an unexpected token error.\n\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n}\n\npp.checkPatternErrors = function (refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) {\n    return;\n  }\n\n  if (refDestructuringErrors.trailingComma > -1) {\n    this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n  }\n\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n\n  if (parens > -1) {\n    this.raiseRecoverable(parens, \"Parenthesized pattern\");\n  }\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) {\n    return false;\n  }\n\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n\n  if (!andThrow) {\n    return shorthandAssign >= 0 || doubleProto >= 0;\n  }\n\n  if (shorthandAssign >= 0) {\n    this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n  }\n\n  if (doubleProto >= 0) {\n    this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n  }\n};\n\npp.checkYieldAwaitInDefaultParams = function () {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {\n    this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n  }\n\n  if (this.awaitPos) {\n    this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n  }\n};\n\npp.isSimpleAssignTarget = function (expr) {\n  if (expr.type === \"ParenthesizedExpression\") {\n    return this.isSimpleAssignTarget(expr.expression);\n  }\n\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n};\n\nvar pp$1 = Parser.prototype; // ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function (node) {\n  var exports = {};\n\n  if (!node.body) {\n    node.body = [];\n  }\n\n  while (this.type !== types.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n\n  if (this.inModule) {\n    for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {\n      var name = list[i];\n      this.raiseRecoverable(this.undefinedExports[name].start, \"Export '\" + name + \"' is not defined\");\n    }\n  }\n\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\n\npp$1.isLet = function (context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) {\n    return false;\n  }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length,\n      nextCh = this.input.charCodeAt(next); // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n\n  if (nextCh === 91) {\n    return true;\n  } // '['\n\n\n  if (context) {\n    return false;\n  }\n\n  if (nextCh === 123) {\n    return true;\n  } // '{'\n\n\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) {\n      ++pos;\n    }\n\n    var ident = this.input.slice(next, pos);\n\n    if (!keywordRelationalOperator.test(ident)) {\n      return true;\n    }\n  }\n\n  return false;\n}; // check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\n\n\npp$1.isAsyncFunction = function () {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) {\n    return false;\n  }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));\n}; // Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\n\npp$1.parseStatement = function (context, topLevel, exports) {\n  var starttype = this.type,\n      node = this.startNode(),\n      kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  } // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n\n  switch (starttype) {\n    case types._break:\n    case types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n\n    case types._debugger:\n      return this.parseDebuggerStatement(node);\n\n    case types._do:\n      return this.parseDoStatement(node);\n\n    case types._for:\n      return this.parseForStatement(node);\n\n    case types._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if (context && (this.strict || context !== \"if\" && context !== \"label\") && this.options.ecmaVersion >= 6) {\n        this.unexpected();\n      }\n\n      return this.parseFunctionStatement(node, false, !context);\n\n    case types._class:\n      if (context) {\n        this.unexpected();\n      }\n\n      return this.parseClass(node, true);\n\n    case types._if:\n      return this.parseIfStatement(node);\n\n    case types._return:\n      return this.parseReturnStatement(node);\n\n    case types._switch:\n      return this.parseSwitchStatement(node);\n\n    case types._throw:\n      return this.parseThrowStatement(node);\n\n    case types._try:\n      return this.parseTryStatement(node);\n\n    case types._const:\n    case types._var:\n      kind = kind || this.value;\n\n      if (context && kind !== \"var\") {\n        this.unexpected();\n      }\n\n      return this.parseVarStatement(node, kind);\n\n    case types._while:\n      return this.parseWhileStatement(node);\n\n    case types._with:\n      return this.parseWithStatement(node);\n\n    case types.braceL:\n      return this.parseBlock(true, node);\n\n    case types.semi:\n      return this.parseEmptyStatement(node);\n\n    case types._export:\n    case types._import:\n      if (this.options.ecmaVersion > 10 && starttype === types._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length,\n            nextCh = this.input.charCodeAt(next);\n\n        if (nextCh === 40) // '('\n          {\n            return this.parseExpressionStatement(node, this.parseExpression());\n          }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) {\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        }\n\n        if (!this.inModule) {\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n        }\n      }\n\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.parseFunctionStatement(node, true, !context);\n      }\n\n      var maybeName = this.value,\n          expr = this.parseExpression();\n\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n\n  }\n};\n\npp$1.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n\n  if (this.eat(types.semi) || this.insertSemicolon()) {\n    node.label = null;\n  } else if (this.type !== types.name) {\n    this.unexpected();\n  } else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  } // Verify that there is an actual destination to break or\n  // continue to.\n\n\n  var i = 0;\n\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) {\n        break;\n      }\n\n      if (node.label && isBreak) {\n        break;\n      }\n    }\n  }\n\n  if (i === this.labels.length) {\n    this.raise(node.start, \"Unsyntactic \" + keyword);\n  }\n\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp$1.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp$1.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n\n  if (this.options.ecmaVersion >= 6) {\n    this.eat(types.semi);\n  } else {\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"DoWhileStatement\");\n}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\n\npp$1.parseForStatement = function (node) {\n  this.next();\n  var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n\n  if (this.type === types.semi) {\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, null);\n  }\n\n  var isLet = this.isLet();\n\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(),\n        kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n\n    if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n          }\n        } else {\n          node.await = awaitAt > -1;\n        }\n      }\n\n      return this.parseForIn(node, init$1);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init$1);\n  }\n\n  var refDestructuringErrors = new DestructuringErrors();\n  var init = this.parseExpression(true, refDestructuringErrors);\n\n  if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n      } else {\n        node.await = awaitAt > -1;\n      }\n    }\n\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n\n  if (awaitAt > -1) {\n    this.unexpected(awaitAt);\n  }\n\n  return this.parseFor(node, init);\n};\n\npp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);\n};\n\npp$1.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode\n\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp$1.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {\n    this.raise(this.start, \"'return' outside of function\");\n  }\n\n  this.next(); // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp$1.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0); // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this.type === types._case || this.type === types._default) {\n      var isCase = this.type === types._case;\n\n      if (cur) {\n        this.finishNode(cur, \"SwitchCase\");\n      }\n\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) {\n          this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n        }\n\n        sawDefault = true;\n        cur.test = null;\n      }\n\n      this.expect(types.colon);\n    } else {\n      if (!cur) {\n        this.unexpected();\n      }\n\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n\n  this.exitScope();\n\n  if (cur) {\n    this.finishNode(cur, \"SwitchCase\");\n  }\n\n  this.next(); // Closing brace\n\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp$1.parseThrowStatement = function (node) {\n  this.next();\n\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  }\n\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n}; // Reused empty array added for node fields that are always empty.\n\n\nvar empty = [];\n\npp$1.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) {\n        this.unexpected();\n      }\n\n      clause.param = null;\n      this.enterScope(0);\n    }\n\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n  if (!node.handler && !node.finalizer) {\n    this.raise(node.start, \"Missing catch or finally clause\");\n  }\n\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp$1.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp$1.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp$1.parseWithStatement = function (node) {\n  if (this.strict) {\n    this.raise(this.start, \"'with' in strict mode\");\n  }\n\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp$1.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp$1.parseLabeledStatement = function (node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {\n    var label = list[i$1];\n\n    if (label.name === maybeName) {\n      this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n  }\n\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else {\n      break;\n    }\n  }\n\n  this.labels.push({\n    name: maybeName,\n    kind: kind,\n    statementStart: this.start\n  });\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp$1.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n}; // Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\n\npp$1.parseBlock = function (createNewLexicalScope, node) {\n  if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n  if (node === void 0) node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n\n  if (createNewLexicalScope) {\n    this.enterScope(0);\n  }\n\n  while (!this.eat(types.braceR)) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n\n  if (createNewLexicalScope) {\n    this.exitScope();\n  }\n\n  return this.finishNode(node, \"BlockStatement\");\n}; // Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\n\npp$1.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n}; // Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\n\npp$1.parseForIn = function (node, init) {\n  var isForIn = this.type === types._in;\n  this.next();\n\n  if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n    this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n  } else if (init.type === \"AssignmentPattern\") {\n    this.raise(init.start, \"Invalid left-hand side in for-loop\");\n  }\n\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n}; // Parse a list of variable declarations.\n\n\npp$1.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n\n    if (!this.eat(types.comma)) {\n      break;\n    }\n  }\n\n  return node;\n};\n\npp$1.parseVarId = function (decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4; // Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n\npp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {\n      this.unexpected();\n    }\n\n    node.generator = this.eat(types.star);\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();\n\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      {\n        this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);\n      }\n  }\n\n  var oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT)) {\n    node.id = this.type === types.name ? this.parseIdent() : null;\n  }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, statement & FUNC_STATEMENT ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp$1.parseFunctionParams = function (node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n}; // Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\n\npp$1.parseClass = function (node, isStatement) {\n  this.next(); // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n\n  var oldStrict = this.strict;\n  this.strict = true;\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    var element = this.parseClassElement(node.superClass !== null);\n\n    if (element) {\n      classBody.body.push(element);\n\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) {\n          this.raise(element.start, \"Duplicate constructor in the same class\");\n        }\n\n        hadConstructor = true;\n      }\n    }\n  }\n\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.strict = oldStrict;\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp$1.parseClassElement = function (constructorAllowsSuper) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) {\n    return null;\n  }\n\n  var method = this.startNode();\n\n  var tryContextual = function tryContextual(k, noLineBreak) {\n    if (noLineBreak === void 0) noLineBreak = false;\n    var start = this$1.start,\n        startLoc = this$1.startLoc;\n\n    if (!this$1.eatContextual(k)) {\n      return false;\n    }\n\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {\n      return true;\n    }\n\n    if (method.key) {\n      this$1.unexpected();\n    }\n\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false;\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n\n  if (!method.key) {\n    this.parsePropertyName(method);\n  }\n\n  var key = method.key;\n  var allowsDirectSuper = false;\n\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") {\n      this.raise(key.start, \"Constructor can't have get/set modifier\");\n    }\n\n    if (isGenerator) {\n      this.raise(key.start, \"Constructor can't be a generator\");\n    }\n\n    if (isAsync) {\n      this.raise(key.start, \"Constructor can't be an async method\");\n    }\n\n    method.kind = \"constructor\";\n    allowsDirectSuper = constructorAllowsSuper;\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n\n  if (method.kind === \"get\" && method.value.params.length !== 0) {\n    this.raiseRecoverable(method.value.start, \"getter should have no params\");\n  }\n\n  if (method.kind === \"set\" && method.value.params.length !== 1) {\n    this.raiseRecoverable(method.value.start, \"setter should have exactly one param\");\n  }\n\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") {\n    this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n  }\n\n  return method;\n};\n\npp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {\n  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n  return this.finishNode(method, \"MethodDefinition\");\n};\n\npp$1.parseClassId = function (node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n\n    if (isStatement) {\n      this.checkLVal(node.id, BIND_LEXICAL, false);\n    }\n  } else {\n    if (isStatement === true) {\n      this.unexpected();\n    }\n\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function (node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n}; // Parses module export declaration.\n\n\npp$1.parseExport = function (node, exports) {\n  this.next(); // export * from '...'\n\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n\n    if (this.type !== types.string) {\n      this.unexpected();\n    }\n\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n\n  if (this.eat(types._default)) {\n    // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  } // export var|const|let|function|class ...\n\n\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n\n    if (node.declaration.type === \"VariableDeclaration\") {\n      this.checkVariableExport(exports, node.declaration.declarations);\n    } else {\n      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n    }\n\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) {\n        this.unexpected();\n      }\n\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n        this.checkUnreserved(spec.local); // check if export is defined\n\n        this.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp$1.checkExport = function (exports, name, pos) {\n  if (!exports) {\n    return;\n  }\n\n  if (has(exports, name)) {\n    this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n  }\n\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function (exports, pat) {\n  var type = pat.type;\n\n  if (type === \"Identifier\") {\n    this.checkExport(exports, pat.name, pat.start);\n  } else if (type === \"ObjectPattern\") {\n    for (var i = 0, list = pat.properties; i < list.length; i += 1) {\n      var prop = list[i];\n      this.checkPatternExport(exports, prop);\n    }\n  } else if (type === \"ArrayPattern\") {\n    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n      if (elt) {\n        this.checkPatternExport(exports, elt);\n      }\n    }\n  } else if (type === \"Property\") {\n    this.checkPatternExport(exports, pat.value);\n  } else if (type === \"AssignmentPattern\") {\n    this.checkPatternExport(exports, pat.left);\n  } else if (type === \"RestElement\") {\n    this.checkPatternExport(exports, pat.argument);\n  } else if (type === \"ParenthesizedExpression\") {\n    this.checkPatternExport(exports, pat.expression);\n  }\n};\n\npp$1.checkVariableExport = function (exports, decls) {\n  if (!exports) {\n    return;\n  }\n\n  for (var i = 0, list = decls; i < list.length; i += 1) {\n    var decl = list[i];\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function () {\n  return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n}; // Parses a comma-separated list of module exports.\n\n\npp$1.parseExportSpecifiers = function (exports) {\n  var nodes = [],\n      first = true; // export { x, y as z } [from '...']\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n\n      if (this.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var node = this.startNode();\n    node.local = this.parseIdent(true);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    this.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n\n  return nodes;\n}; // Parses import declaration.\n\n\npp$1.parseImport = function (node) {\n  this.next(); // import '...'\n\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n}; // Parses a comma-separated list of module imports.\n\n\npp$1.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n\n    if (!this.eat(types.comma)) {\n      return nodes;\n    }\n  }\n\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n\n      if (this.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseIdent(true);\n\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n\n    this.checkLVal(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n\n  return nodes;\n}; // Set `ExpressionStatement#directive` property for directive prologues.\n\n\npp$1.adaptDirectivePrologue = function (statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\n\npp$1.isDirectiveCandidate = function (statement) {\n  return statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && ( // Reject parenthesized strings.\n  this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\");\n};\n\nvar pp$2 = Parser.prototype; // Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\") {\n          this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\");\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        if (refDestructuringErrors) {\n          this.checkPatternErrors(refDestructuringErrors, true);\n        }\n\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n          this.toAssignable(prop, isBinding); // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n\n          if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n\n        break;\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") {\n          this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n        }\n\n        this.toAssignable(node.value, isBinding);\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n\n        if (refDestructuringErrors) {\n          this.checkPatternErrors(refDestructuringErrors, true);\n        }\n\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n\n        if (node.argument.type === \"AssignmentPattern\") {\n          this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n        }\n\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) {\n          break;\n        }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n  }\n\n  return node;\n}; // Convert list of expression atoms to binding list.\n\n\npp$2.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n\n    if (elt) {\n      this.toAssignable(elt, isBinding);\n    }\n  }\n\n  if (end) {\n    var last = exprList[end - 1];\n\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") {\n      this.unexpected(last.argument.start);\n    }\n  }\n\n  return exprList;\n}; // Parses spread element.\n\n\npp$2.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp$2.parseRestBinding = function () {\n  var node = this.startNode();\n  this.next(); // RestElement inside of a function parameter must be an identifier\n\n  if (this.options.ecmaVersion === 6 && this.type !== types.name) {\n    this.unexpected();\n  }\n\n  node.argument = this.parseBindingAtom();\n  return this.finishNode(node, \"RestElement\");\n}; // Parses lvalue (assignable) atom.\n\n\npp$2.parseBindingAtom = function () {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n      case types.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\");\n\n      case types.braceL:\n        return this.parseObj(true);\n    }\n  }\n\n  return this.parseIdent();\n};\n\npp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {\n  var elts = [],\n      first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this.expect(types.comma);\n    }\n\n    if (allowEmpty && this.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === types.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n\n  return elts;\n};\n\npp$2.parseBindingListItem = function (param) {\n  return param;\n}; // Parses assignment pattern around given atom if possible.\n\n\npp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {\n    return left;\n  }\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n}; // Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\n\npp$2.checkLVal = function (expr, bindingType, checkClashes) {\n  if (bindingType === void 0) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n    case \"Identifier\":\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\") {\n        this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\");\n      }\n\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {\n        this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      }\n\n      if (checkClashes) {\n        if (has(checkClashes, expr.name)) {\n          this.raiseRecoverable(expr.start, \"Argument name clash\");\n        }\n\n        checkClashes[expr.name] = true;\n      }\n\n      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {\n        this.declareName(expr.name, bindingType, expr.start);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n      if (bindingType) {\n        this.raiseRecoverable(expr.start, \"Binding member expression\");\n      }\n\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n        var prop = list[i];\n        this.checkLVal(prop, bindingType, checkClashes);\n      }\n\n      break;\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLVal(expr.value, bindingType, checkClashes);\n      break;\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n        if (elem) {\n          this.checkLVal(elem, bindingType, checkClashes);\n        }\n      }\n\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, bindingType, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, bindingType, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, bindingType, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n}; // A recursive descent parser operates by defining functions for all\n\n\nvar pp$3 = Parser.prototype; // Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") {\n    return;\n  }\n\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {\n    return;\n  }\n\n  var key = prop.key;\n  var name;\n\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;\n      break;\n\n    case \"Literal\":\n      name = String(key.value);\n      break;\n\n    default:\n      return;\n  }\n\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) {\n          refDestructuringErrors.doubleProto = key.start;\n        } // Backwards-compat kludge. Can be removed in version 6.0\n        else {\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n          }\n      }\n\n      propHash.proto = true;\n    }\n\n    return;\n  }\n\n  name = \"$\" + name;\n  var other = propHash[name];\n\n  if (other) {\n    var redefinition;\n\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n\n    if (redefinition) {\n      this.raiseRecoverable(key.start, \"Redefinition of property\");\n    }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n\n  other[kind] = true;\n}; // ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\n\npp$3.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n\n    while (this.eat(types.comma)) {\n      node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    }\n\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n\n  return expr;\n}; // Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\n\npp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) {\n      return this.parseYield(noIn);\n    } // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else {\n        this.exprAllowed = false;\n      }\n  }\n\n  var ownDestructuringErrors = false,\n      oldParenAssign = -1,\n      oldTrailingComma = -1,\n      oldShorthandAssign = -1;\n\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldShorthandAssign = refDestructuringErrors.shorthandAssign;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors();\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start,\n      startLoc = this.startLoc;\n\n  if (this.type === types.parenL || this.type === types.name) {\n    this.potentialArrowAt = this.start;\n  }\n\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n\n  if (afterLeftParse) {\n    left = afterLeftParse.call(this, left, startPos, startLoc);\n  }\n\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n\n    if (!ownDestructuringErrors) {\n      DestructuringErrors.call(refDestructuringErrors);\n    }\n\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (ownDestructuringErrors) {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n  }\n\n  if (oldParenAssign > -1) {\n    refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n  }\n\n  if (oldTrailingComma > -1) {\n    refDestructuringErrors.trailingComma = oldTrailingComma;\n  }\n\n  if (oldShorthandAssign > -1) {\n    refDestructuringErrors.shorthandAssign = oldShorthandAssign;\n  }\n\n  return left;\n}; // Parse a ternary conditional (`?:`) operator.\n\n\npp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n\n  if (this.checkExpressionErrors(refDestructuringErrors)) {\n    return expr;\n  }\n\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  return expr;\n}; // Start the precedence parser.\n\n\npp$3.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n\n  if (this.checkExpressionErrors(refDestructuringErrors)) {\n    return expr;\n  }\n\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n}; // Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\n\npp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n\n  return left;\n};\n\npp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n}; // Parse unary operators, both prefix and postfix.\n\n\npp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      expr;\n\n  if (this.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (update) {\n      this.checkLVal(node.argument);\n    } else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n      this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n    } else {\n      sawUnary = true;\n    }\n\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n\n    if (this.checkExpressionErrors(refDestructuringErrors)) {\n      return expr;\n    }\n\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar)) {\n    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);\n  } else {\n    return expr;\n  }\n}; // Parse call, dot, and `[]`-subscript expressions.\n\n\npp$3.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {\n    return expr;\n  }\n\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) {\n      refDestructuringErrors.parenthesizedAssign = -1;\n    }\n\n    if (refDestructuringErrors.parenthesizedBind >= result.start) {\n      refDestructuringErrors.parenthesizedBind = -1;\n    }\n  }\n\n  return result;\n};\n\npp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);\n\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      return element;\n    }\n\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow) {\n  var computed = this.eat(types.bracketL);\n\n  if (computed || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n    node.computed = !!computed;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors(),\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8 && base.type !== \"Import\", false, refDestructuringErrors);\n\n    if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n\n      if (this.awaitIdentPos > 0) {\n        this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\");\n      }\n\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);\n    }\n\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n\n    if (node$1.callee.type === \"Import\") {\n      if (node$1.arguments.length !== 1) {\n        this.raise(node$1.start, \"import() requires exactly one argument\");\n      }\n\n      var importArg = node$1.arguments[0];\n\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({\n      isTagged: true\n    });\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n\n  return base;\n}; // Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\n\npp$3.parseExprAtom = function (refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) {\n    this.readRegexp();\n  }\n\n  var node,\n      canBeArrow = this.potentialArrowAt === this.start;\n\n  switch (this.type) {\n    case types._super:\n      if (!this.allowSuper) {\n        this.raise(this.start, \"'super' keyword outside a method\");\n      }\n\n      node = this.startNode();\n      this.next();\n\n      if (this.type === types.parenL && !this.allowDirectSuper) {\n        this.raise(node.start, \"super() call outside constructor of a subclass\");\n      } // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super Arguments\n\n\n      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {\n        this.unexpected();\n      }\n\n      return this.finishNode(node, \"Super\");\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\");\n\n    case types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc,\n          containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function)) {\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);\n      }\n\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types.arrow)) {\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);\n        }\n\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n          id = this.parseIdent(false);\n\n          if (this.canInsertSemicolon() || !this.eat(types.arrow)) {\n            this.unexpected();\n          }\n\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);\n        }\n      }\n\n      return id;\n\n    case types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {\n        pattern: value.pattern,\n        flags: value.flags\n      };\n      return node;\n\n    case types.num:\n    case types.string:\n      return this.parseLiteral(this.value);\n\n    case types._null:\n    case types._true:\n    case types._false:\n      node = this.startNode();\n      node.value = this.type === types._null ? null : this.type === types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case types.parenL:\n      var start = this.start,\n          expr = this.parseParenAndDistinguishExpression(canBeArrow);\n\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {\n          refDestructuringErrors.parenthesizedAssign = start;\n        }\n\n        if (refDestructuringErrors.parenthesizedBind < 0) {\n          refDestructuringErrors.parenthesizedBind = start;\n        }\n      }\n\n      return expr;\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0);\n\n    case types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case types._new:\n      return this.parseNew();\n\n    case types.backQuote:\n      return this.parseTemplate();\n\n    case types._import:\n      if (this.options.ecmaVersion > 10) {\n        return this.parseDynamicImport();\n      } else {\n        return this.unexpected();\n      }\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$3.parseDynamicImport = function () {\n  var node = this.startNode();\n  this.next();\n\n  if (this.type !== types.parenL) {\n    this.unexpected();\n  }\n\n  return this.finishNode(node, \"Import\");\n};\n\npp$3.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) {\n    node.bigint = node.raw.slice(0, -1);\n  }\n\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp$3.parseParenExpression = function () {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val;\n};\n\npp$3.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val,\n      allowTrailingComma = this.options.ecmaVersion >= 8;\n\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true,\n        lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors(),\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0; // Do not save awaitIdentPos to allow checking awaits nested in parameters\n\n    while (this.type !== types.parenR) {\n      first ? first = false : this.expect(types.comma);\n\n      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break;\n      } else if (this.type === types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n\n        if (this.type === types.comma) {\n          this.raise(this.start, \"Comma is not permitted after the rest element\");\n        }\n\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length || lastIsComma) {\n      this.unexpected(this.lastTokStart);\n    }\n\n    if (spreadStart) {\n      this.unexpected(spreadStart);\n    }\n\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp$3.parseParenItem = function (item) {\n  return item;\n};\n\npp$3.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n}; // New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\n\nvar empty$1 = [];\n\npp$3.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n\n    if (node.property.name !== \"target\" || containsEsc) {\n      this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n    }\n\n    if (!this.inNonArrowFunction()) {\n      this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n\n  if (this.options.ecmaVersion > 10 && node.callee.type === \"Import\") {\n    this.raise(node.callee.start, \"Cannot use new with import(...)\");\n  }\n\n  if (this.eat(types.parenL)) {\n    node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8 && node.callee.type !== \"Import\", false);\n  } else {\n    node.arguments = empty$1;\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n}; // Parse template expression.\n\n\npp$3.parseTemplateElement = function (ref) {\n  var isTagged = ref.isTagged;\n  var elem = this.startNode();\n\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp$3.parseTemplate = function (ref) {\n  if (ref === void 0) ref = {};\n  var isTagged = ref.isTagged;\n  if (isTagged === void 0) isTagged = false;\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({\n    isTagged: isTagged\n  });\n  node.quasis = [curElt];\n\n  while (!curElt.tail) {\n    if (this.type === types.eof) {\n      this.raise(this.pos, \"Unterminated template literal\");\n    }\n\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({\n      isTagged: isTagged\n    }));\n  }\n\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\npp$3.isAsyncProp = function (prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n}; // Parse an object literal or binding pattern.\n\n\npp$3.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n\n      if (this.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n\n    if (!isPattern) {\n      this.checkPropClash(prop, propHash, refDestructuringErrors);\n    }\n\n    node.properties.push(prop);\n  }\n\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp$3.parseProperty = function (isPattern, refDestructuringErrors) {\n  var prop = this.startNode(),\n      isGenerator,\n      isAsync,\n      startPos,\n      startLoc;\n\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n\n      return this.finishNode(prop, \"RestElement\");\n    } // To disallow parenthesized identifier via `this.toAssignable()`.\n\n\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    } // Parse argument.\n\n\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors); // To disallow trailing comma via `this.toAssignable()`.\n\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    } // Finish\n\n\n    return this.finishNode(prop, \"SpreadElement\");\n  }\n\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n  }\n\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\");\n};\n\npp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon) {\n    this.unexpected();\n  }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) {\n      this.unexpected();\n    }\n\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== types.comma && this.type !== types.braceR) {\n    if (isGenerator || isAsync) {\n      this.unexpected();\n    }\n\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n\n      if (prop.kind === \"get\") {\n        this.raiseRecoverable(start, \"getter should have no params\");\n      } else {\n        this.raiseRecoverable(start, \"setter should have exactly one param\");\n      }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n      }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) {\n      this.unexpected();\n    }\n\n    this.checkUnreserved(prop.key);\n\n    if (prop.key.name === \"await\" && !this.awaitIdentPos) {\n      this.awaitIdentPos = startPos;\n    }\n\n    prop.kind = \"init\";\n\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0) {\n        refDestructuringErrors.shorthandAssign = this.start;\n      }\n\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n\n    prop.shorthand = true;\n  } else {\n    this.unexpected();\n  }\n};\n\npp$3.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n}; // Initialize empty function node.\n\n\npp$3.initFunction = function (node) {\n  node.id = null;\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = node.expression = false;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = false;\n  }\n}; // Parse object or class method.\n\n\npp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(),\n      oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldAwaitIdentPos = this.awaitIdentPos;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = isGenerator;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\");\n}; // Parse arrow function expression with given parameters.\n\n\npp$3.parseArrowExpression = function (node, params, isAsync) {\n  var oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldAwaitIdentPos = this.awaitIdentPos;\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n}; // Parse function body and check parameters.\n\n\npp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict,\n      useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n\n      if (useStrict && nonSimple) {\n        this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n      }\n    } // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n\n\n    var oldLabels = this.labels;\n    this.labels = [];\n\n    if (useStrict) {\n      this.strict = true;\n    } // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n\n\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n\n  this.exitScope(); // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n\n  if (this.strict && node.id) {\n    this.checkLVal(node.id, BIND_OUTSIDE);\n  }\n\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function (params) {\n  for (var i = 0, list = params; i < list.length; i += 1) {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") {\n      return false;\n    }\n  }\n\n  return true;\n}; // Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\n\npp$3.checkParams = function (node, allowDuplicates) {\n  var nameHash = {};\n\n  for (var i = 0, list = node.params; i < list.length; i += 1) {\n    var param = list[i];\n    this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n}; // Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\n\npp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types.comma);\n\n      if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var elt = void 0;\n\n    if (allowEmpty && this.type === types.comma) {\n      elt = null;\n    } else if (this.type === types.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n\n      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n\n    elts.push(elt);\n  }\n\n  return elts;\n};\n\npp$3.checkUnreserved = function (ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\") {\n    this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\");\n  }\n\n  if (this.inAsync && name === \"await\") {\n    this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\");\n  }\n\n  if (this.keywords.test(name)) {\n    this.raise(start, \"Unexpected keyword '\" + name + \"'\");\n  }\n\n  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) {\n    return;\n  }\n\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\") {\n      this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\");\n    }\n\n    this.raiseRecoverable(start, \"The keyword '\" + name + \"' is reserved\");\n  }\n}; // Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\n\npp$3.parseIdent = function (liberal, isBinding) {\n  var node = this.startNode();\n\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword; // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n\n    if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n\n  this.next();\n  this.finishNode(node, \"Identifier\");\n\n  if (!liberal) {\n    this.checkUnreserved(node);\n\n    if (node.name === \"await\" && !this.awaitIdentPos) {\n      this.awaitIdentPos = node.start;\n    }\n  }\n\n  return node;\n}; // Parses yield expression inside generator.\n\n\npp$3.parseYield = function (noIn) {\n  if (!this.yieldPos) {\n    this.yieldPos = this.start;\n  }\n\n  var node = this.startNode();\n  this.next();\n\n  if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(noIn);\n  }\n\n  return this.finishNode(node, \"YieldExpression\");\n};\n\npp$3.parseAwait = function () {\n  if (!this.awaitPos) {\n    this.awaitPos = this.start;\n  }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\");\n};\n\nvar pp$4 = Parser.prototype; // This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;\n  err.loc = loc;\n  err.raisedAt = this.pos;\n  throw err;\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function () {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags; // A list of var-declared names in the current lexical scope\n\n  this.var = []; // A list of lexically-declared names in the current lexical scope\n\n  this.lexical = []; // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n\n  this.functions = [];\n}; // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n\npp$5.enterScope = function (flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function () {\n  this.scopeStack.pop();\n}; // The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\n\n\npp$5.treatFunctionsAsVarInScope = function (scope) {\n  return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;\n};\n\npp$5.declareName = function (name, bindingType, pos) {\n  var redeclared = false;\n\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n\n    if (this.inModule && scope.flags & SCOPE_TOP) {\n      delete this.undefinedExports[name];\n    }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n\n    if (this.treatFunctionsAsVar) {\n      redeclared = scope$2.lexical.indexOf(name) > -1;\n    } else {\n      redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;\n    }\n\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n\n      if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break;\n      }\n\n      scope$3.var.push(name);\n\n      if (this.inModule && scope$3.flags & SCOPE_TOP) {\n        delete this.undefinedExports[name];\n      }\n\n      if (scope$3.flags & SCOPE_VAR) {\n        break;\n      }\n    }\n  }\n\n  if (redeclared) {\n    this.raiseRecoverable(pos, \"Identifier '\" + name + \"' has already been declared\");\n  }\n};\n\npp$5.checkLocalExport = function (id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function () {\n  return this.scopeStack[this.scopeStack.length - 1];\n};\n\npp$5.currentVarScope = function () {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n\n    if (scope.flags & SCOPE_VAR) {\n      return scope;\n    }\n  }\n}; // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n\n\npp$5.currentThisScope = function () {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {\n      return scope;\n    }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n\n  if (parser.options.locations) {\n    this.loc = new SourceLocation(parser, loc);\n  }\n\n  if (parser.options.directSourceFile) {\n    this.sourceFile = parser.options.directSourceFile;\n  }\n\n  if (parser.options.ranges) {\n    this.range = [pos, 0];\n  }\n}; // Start an AST node, attaching a start offset.\n\n\nexports.Node = Node;\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp$6.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n}; // Finish an AST node, adding `type` and `end` properties.\n\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n\n  if (this.options.locations) {\n    node.loc.end = loc;\n  }\n\n  if (this.options.ranges) {\n    node.range[1] = pos;\n  }\n\n  return node;\n}\n\npp$6.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n}; // Finish node at given position\n\n\npp$6.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n}; // The algorithm used to determine whether a regexp can appear at a\n\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nexports.TokContext = TokContext;\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.tryReadTemplateToken();\n  }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\nexports.tokContexts = types$1;\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function () {\n  return [types$1.b_stat];\n};\n\npp$7.braceIsBlock = function (prevType) {\n  var parent = this.curContext();\n\n  if (parent === types$1.f_expr || parent === types$1.f_stat) {\n    return true;\n  }\n\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {\n    return !parent.isExpr;\n  } // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n\n\n  if (prevType === types._return || prevType === types.name && this.exprAllowed) {\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  }\n\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n    return true;\n  }\n\n  if (prevType === types.braceL) {\n    return parent === types$1.b_stat;\n  }\n\n  if (prevType === types._var || prevType === types._const || prevType === types.name) {\n    return false;\n  }\n\n  return !this.exprAllowed;\n};\n\npp$7.inGeneratorContext = function () {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n\n    if (context.token === \"function\") {\n      return context.generator;\n    }\n  }\n\n  return false;\n};\n\npp$7.updateContext = function (prevType) {\n  var update,\n      type = this.type;\n\n  if (type.keyword && prevType === types.dot) {\n    this.exprAllowed = false;\n  } else if (update = type.updateContext) {\n    update.call(this, prevType);\n  } else {\n    this.exprAllowed = type.beforeExpr;\n  }\n}; // Token-specific context update code\n\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return;\n  }\n\n  var out = this.context.pop();\n\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {// tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.context.push(types$1.f_expr);\n  } else {\n    this.context.push(types$1.f_stat);\n  }\n\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.q_tmpl) {\n    this.context.pop();\n  } else {\n    this.context.push(types$1.q_tmpl);\n  }\n\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function (prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n\n    if (this.context[index] === types$1.f_expr) {\n      this.context[index] = types$1.f_expr_gen;\n    } else {\n      this.context[index] = types$1.f_gen;\n    }\n  }\n\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function (prevType) {\n  var allowed = false;\n\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) {\n      allowed = true;\n    }\n  }\n\n  this.exprAllowed = allowed;\n}; // This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n// #table-binary-unicode-properties\n\n\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties\n}; // #table-unicode-general-category-values\n\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\"; // #table-unicode-script-values\n\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues\n};\nvar data = {};\n\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nbuildUnicodeData(9);\nbuildUnicodeData(10);\nbuildUnicodeData(11);\nvar pp$8 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise(message) {\n  this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n}; // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n\n\nRegExpValidationState.prototype.at = function at(i) {\n  var s = this.source;\n  var l = s.length;\n\n  if (i >= l) {\n    return -1;\n  }\n\n  var c = s.charCodeAt(i);\n\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c;\n  }\n\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex(i) {\n  var s = this.source;\n  var l = s.length;\n\n  if (i >= l) {\n    return l;\n  }\n\n  var c = s.charCodeAt(i),\n      next;\n\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1;\n  }\n\n  return i + 2;\n};\n\nRegExpValidationState.prototype.current = function current() {\n  return this.at(this.pos);\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead() {\n  return this.at(this.nextIndex(this.pos));\n};\n\nRegExpValidationState.prototype.advance = function advance() {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat(ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction codePointToString(ch) {\n  if (ch <= 0xFFFF) {\n    return String.fromCharCode(ch);\n  }\n\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);\n}\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\n\n\npp$8.validateRegExpFlags = function (state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\n\n\npp$8.validateRegExpPattern = function (state) {\n  this.regexp_pattern(state); // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n\n\npp$8.regexp_pattern = function (state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29\n    /* ) */\n    )) {\n      state.raise(\"Unmatched ')'\");\n    }\n\n    if (state.eat(0x5D\n    /* [ */\n    ) || state.eat(0x7D\n    /* } */\n    )) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n\n\npp$8.regexp_disjunction = function (state) {\n  this.regexp_alternative(state);\n\n  while (state.eat(0x7C\n  /* | */\n  )) {\n    this.regexp_alternative(state);\n  } // Make the same message as V8.\n\n\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n\n  if (state.eat(0x7B\n  /* { */\n  )) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n\n\npp$8.regexp_alternative = function (state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n\n\npp$8.regexp_eatTerm = function (state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n\n    return true;\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n\n\npp$8.regexp_eatAssertion = function (state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false; // ^, $\n\n  if (state.eat(0x5E\n  /* ^ */\n  ) || state.eat(0x24\n  /* $ */\n  )) {\n    return true;\n  } // \\b \\B\n\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (state.eat(0x42\n    /* B */\n    ) || state.eat(0x62\n    /* b */\n    )) {\n      return true;\n    }\n\n    state.pos = start;\n  } // Lookahead / Lookbehind\n\n\n  if (state.eat(0x28\n  /* ( */\n  ) && state.eat(0x3F\n  /* ? */\n  )) {\n    var lookbehind = false;\n\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C\n      /* < */\n      );\n    }\n\n    if (state.eat(0x3D\n    /* = */\n    ) || state.eat(0x21\n    /* ! */\n    )) {\n      this.regexp_disjunction(state);\n\n      if (!state.eat(0x29\n      /* ) */\n      )) {\n        state.raise(\"Unterminated group\");\n      }\n\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true;\n    }\n  }\n\n  state.pos = start;\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n\n\npp$8.regexp_eatQuantifier = function (state, noError) {\n  if (noError === void 0) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F\n    /* ? */\n    );\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n\n\npp$8.regexp_eatQuantifierPrefix = function (state, noError) {\n  return state.eat(0x2A\n  /* * */\n  ) || state.eat(0x2B\n  /* + */\n  ) || state.eat(0x3F\n  /* ? */\n  ) || this.regexp_eatBracedQuantifier(state, noError);\n};\n\npp$8.regexp_eatBracedQuantifier = function (state, noError) {\n  var start = state.pos;\n\n  if (state.eat(0x7B\n  /* { */\n  )) {\n    var min = 0,\n        max = -1;\n\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n\n      if (state.eat(0x2C\n      /* , */\n      ) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n\n      if (state.eat(0x7D\n      /* } */\n      )) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n\n        return true;\n      }\n    }\n\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n\n\npp$8.regexp_eatAtom = function (state) {\n  return this.regexp_eatPatternCharacters(state) || state.eat(0x2E\n  /* . */\n  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n};\n\npp$8.regexp_eatReverseSolidusAtomEscape = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$8.regexp_eatUncapturingGroup = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x28\n  /* ( */\n  )) {\n    if (state.eat(0x3F\n    /* ? */\n    ) && state.eat(0x3A\n    /* : */\n    )) {\n      this.regexp_disjunction(state);\n\n      if (state.eat(0x29\n      /* ) */\n      )) {\n        return true;\n      }\n\n      state.raise(\"Unterminated group\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$8.regexp_eatCapturingGroup = function (state) {\n  if (state.eat(0x28\n  /* ( */\n  )) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F\n    /* ? */\n    ) {\n        state.raise(\"Invalid group\");\n      }\n\n    this.regexp_disjunction(state);\n\n    if (state.eat(0x29\n    /* ) */\n    )) {\n      state.numCapturingParens += 1;\n      return true;\n    }\n\n    state.raise(\"Unterminated group\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n\n\npp$8.regexp_eatExtendedAtom = function (state) {\n  return state.eat(0x2E\n  /* . */\n  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n\n\npp$8.regexp_eatInvalidBracedQuantifier = function (state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n\n\npp$8.regexp_eatSyntaxCharacter = function (state) {\n  var ch = state.current();\n\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction isSyntaxCharacter(ch) {\n  return ch === 0x24\n  /* $ */\n  || ch >= 0x28\n  /* ( */\n  && ch <= 0x2B\n  /* + */\n  || ch === 0x2E\n  /* . */\n  || ch === 0x3F\n  /* ? */\n  || ch >= 0x5B\n  /* [ */\n  && ch <= 0x5E\n  /* ^ */\n  || ch >= 0x7B\n  /* { */\n  && ch <= 0x7D\n  /* } */\n  ;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\n\n\npp$8.regexp_eatPatternCharacters = function (state) {\n  var start = state.pos;\n  var ch = 0;\n\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n\n  return state.pos !== start;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n\n\npp$8.regexp_eatExtendedPatternCharacter = function (state) {\n  var ch = state.current();\n\n  if (ch !== -1 && ch !== 0x24\n  /* $ */\n  && !(ch >= 0x28\n  /* ( */\n  && ch <= 0x2B\n  /* + */\n  ) && ch !== 0x2E\n  /* . */\n  && ch !== 0x3F\n  /* ? */\n  && ch !== 0x5B\n  /* [ */\n  && ch !== 0x5E\n  /* ^ */\n  && ch !== 0x7C\n  /* | */\n  ) {\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\n\n\npp$8.regexp_groupSpecifier = function (state) {\n  if (state.eat(0x3F\n  /* ? */\n  )) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n\n      state.groupNames.push(state.lastStringValue);\n      return;\n    }\n\n    state.raise(\"Invalid group\");\n  }\n}; // GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\n\n\npp$8.regexp_eatGroupName = function (state) {\n  state.lastStringValue = \"\";\n\n  if (state.eat(0x3C\n  /* < */\n  )) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E\n    /* > */\n    )) {\n      return true;\n    }\n\n    state.raise(\"Invalid capture group name\");\n  }\n\n  return false;\n}; // RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\n\n\npp$8.regexp_eatRegExpIdentifierName = function (state) {\n  state.lastStringValue = \"\";\n\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n\n    return true;\n  }\n\n  return false;\n}; // RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n\n\npp$8.regexp_eatRegExpIdentifierStart = function (state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C\n  /* \\ */\n  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true;\n  }\n\n  state.pos = start;\n  return false;\n};\n\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24\n  /* $ */\n  || ch === 0x5F;\n  /* _ */\n} // RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\n\n\npp$8.regexp_eatRegExpIdentifierPart = function (state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C\n  /* \\ */\n  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true;\n  }\n\n  state.pos = start;\n  return false;\n};\n\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24\n  /* $ */\n  || ch === 0x5F\n  /* _ */\n  || ch === 0x200C\n  /* <ZWNJ> */\n  || ch === 0x200D;\n  /* <ZWJ> */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n\n\npp$8.regexp_eatAtomEscape = function (state) {\n  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {\n    return true;\n  }\n\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63\n    /* c */\n    ) {\n        state.raise(\"Invalid unicode escape\");\n      }\n\n    state.raise(\"Invalid escape\");\n  }\n\n  return false;\n};\n\npp$8.regexp_eatBackReference = function (state) {\n  var start = state.pos;\n\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n\n      return true;\n    }\n\n    if (n <= state.numCapturingParens) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$8.regexp_eatKGroupName = function (state) {\n  if (state.eat(0x6B\n  /* k */\n  )) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true;\n    }\n\n    state.raise(\"Invalid named reference\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n\n\npp$8.regexp_eatCharacterEscape = function (state) {\n  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n};\n\npp$8.regexp_eatCControlLetter = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x63\n  /* c */\n  )) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$8.regexp_eatZero = function (state) {\n  if (state.current() === 0x30\n  /* 0 */\n  && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n\n\npp$8.regexp_eatControlEscape = function (state) {\n  var ch = state.current();\n\n  if (ch === 0x74\n  /* t */\n  ) {\n      state.lastIntValue = 0x09;\n      /* \\t */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x6E\n  /* n */\n  ) {\n      state.lastIntValue = 0x0A;\n      /* \\n */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x76\n  /* v */\n  ) {\n      state.lastIntValue = 0x0B;\n      /* \\v */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x66\n  /* f */\n  ) {\n      state.lastIntValue = 0x0C;\n      /* \\f */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x72\n  /* r */\n  ) {\n      state.lastIntValue = 0x0D;\n      /* \\r */\n\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n\n\npp$8.regexp_eatControlLetter = function (state) {\n  var ch = state.current();\n\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction isControlLetter(ch) {\n  return ch >= 0x41\n  /* A */\n  && ch <= 0x5A\n  /* Z */\n  || ch >= 0x61\n  /* a */\n  && ch <= 0x7A\n  /* z */\n  ;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n\n\npp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x75\n  /* u */\n  )) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n\n        if (state.eat(0x5C\n        /* \\ */\n        ) && state.eat(0x75\n        /* u */\n        ) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true;\n          }\n        }\n\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n\n      return true;\n    }\n\n    if (state.switchU && state.eat(0x7B\n    /* { */\n    ) && this.regexp_eatHexDigits(state) && state.eat(0x7D\n    /* } */\n    ) && isValidUnicode(state.lastIntValue)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n\n\npp$8.regexp_eatIdentityEscape = function (state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true;\n    }\n\n    if (state.eat(0x2F\n    /* / */\n    )) {\n      state.lastIntValue = 0x2F;\n      /* / */\n\n      return true;\n    }\n\n    return false;\n  }\n\n  var ch = state.current();\n\n  if (ch !== 0x63\n  /* c */\n  && (!state.switchN || ch !== 0x6B\n  /* k */\n  )) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n\n\npp$8.regexp_eatDecimalEscape = function (state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n\n  if (ch >= 0x31\n  /* 1 */\n  && ch <= 0x39\n  /* 9 */\n  ) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30\n        /* 0 */\n        );\n        state.advance();\n      } while ((ch = state.current()) >= 0x30\n      /* 0 */\n      && ch <= 0x39\n      /* 9 */\n      );\n\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n\n\npp$8.regexp_eatCharacterClassEscape = function (state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true;\n  }\n\n  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50\n  /* P */\n  || ch === 0x70\n  /* p */\n  )) {\n    state.lastIntValue = -1;\n    state.advance();\n\n    if (state.eat(0x7B\n    /* { */\n    ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D\n    /* } */\n    )) {\n      return true;\n    }\n\n    state.raise(\"Invalid property name\");\n  }\n\n  return false;\n};\n\nfunction isCharacterClassEscape(ch) {\n  return ch === 0x64\n  /* d */\n  || ch === 0x44\n  /* D */\n  || ch === 0x73\n  /* s */\n  || ch === 0x53\n  /* S */\n  || ch === 0x77\n  /* w */\n  || ch === 0x57\n  /* W */\n  ;\n} // UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\n\n\npp$8.regexp_eatUnicodePropertyValueExpression = function (state) {\n  var start = state.pos; // UnicodePropertyName `=` UnicodePropertyValue\n\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D\n  /* = */\n  )) {\n    var name = state.lastStringValue;\n\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true;\n    }\n  }\n\n  state.pos = start; // LoneUnicodePropertyNameOrValue\n\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true;\n  }\n\n  return false;\n};\n\npp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name)) {\n    state.raise(\"Invalid property name\");\n  }\n\n  if (!state.unicodeProperties.nonBinary[name].test(value)) {\n    state.raise(\"Invalid property value\");\n  }\n};\n\npp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue)) {\n    state.raise(\"Invalid property name\");\n  }\n}; // UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\n\n\npp$8.regexp_eatUnicodePropertyName = function (state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n\n  return state.lastStringValue !== \"\";\n};\n\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F;\n  /* _ */\n} // UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\n\n\npp$8.regexp_eatUnicodePropertyValue = function (state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n\n  return state.lastStringValue !== \"\";\n};\n\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);\n} // LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\n\n\npp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {\n  return this.regexp_eatUnicodePropertyValue(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n\n\npp$8.regexp_eatCharacterClass = function (state) {\n  if (state.eat(0x5B\n  /* [ */\n  )) {\n    state.eat(0x5E\n    /* ^ */\n    );\n    this.regexp_classRanges(state);\n\n    if (state.eat(0x5D\n    /* [ */\n    )) {\n      return true;\n    } // Unreachable since it threw \"unterminated regular expression\" error before.\n\n\n    state.raise(\"Unterminated character class\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n\n\npp$8.regexp_classRanges = function (state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n\n    if (state.eat(0x2D\n    /* - */\n    ) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n\n\npp$8.regexp_eatClassAtom = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n\n      if (ch$1 === 0x63\n      /* c */\n      || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n\n      state.raise(\"Invalid escape\");\n    }\n\n    state.pos = start;\n  }\n\n  var ch = state.current();\n\n  if (ch !== 0x5D\n  /* [ */\n  ) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n\n\npp$8.regexp_eatClassEscape = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x62\n  /* b */\n  )) {\n    state.lastIntValue = 0x08;\n    /* <BS> */\n\n    return true;\n  }\n\n  if (state.switchU && state.eat(0x2D\n  /* - */\n  )) {\n    state.lastIntValue = 0x2D;\n    /* - */\n\n    return true;\n  }\n\n  if (!state.switchU && state.eat(0x63\n  /* c */\n  )) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n\n\npp$8.regexp_eatClassControlLetter = function (state) {\n  var ch = state.current();\n\n  if (isDecimalDigit(ch) || ch === 0x5F\n  /* _ */\n  ) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n\n\npp$8.regexp_eatHexEscapeSequence = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x78\n  /* x */\n  )) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n\n\npp$8.regexp_eatDecimalDigits = function (state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30\n    /* 0 */\n    );\n    state.advance();\n  }\n\n  return state.pos !== start;\n};\n\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x39;\n  /* 9 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n\n\npp$8.regexp_eatHexDigits = function (state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n\n  return state.pos !== start;\n};\n\nfunction isHexDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x39\n  /* 9 */\n  || ch >= 0x41\n  /* A */\n  && ch <= 0x46\n  /* F */\n  || ch >= 0x61\n  /* a */\n  && ch <= 0x66\n  /* f */\n  ;\n}\n\nfunction hexToInt(ch) {\n  if (ch >= 0x41\n  /* A */\n  && ch <= 0x46\n  /* F */\n  ) {\n      return 10 + (ch - 0x41\n      /* A */\n      );\n    }\n\n  if (ch >= 0x61\n  /* a */\n  && ch <= 0x66\n  /* f */\n  ) {\n      return 10 + (ch - 0x61\n      /* a */\n      );\n    }\n\n  return ch - 0x30;\n  /* 0 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\n\n\npp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n\n\npp$8.regexp_eatOctalDigit = function (state) {\n  var ch = state.current();\n\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30;\n    /* 0 */\n\n    state.advance();\n    return true;\n  }\n\n  state.lastIntValue = 0;\n  return false;\n};\n\nfunction isOctalDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x37;\n  /* 7 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n\n\npp$8.regexp_eatFixedHexDigits = function (state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false;\n    }\n\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n\n  return true;\n}; // Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n\n  if (p.options.locations) {\n    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n  }\n\n  if (p.options.ranges) {\n    this.range = [p.start, p.end];\n  }\n}; // ## Tokenizer\n\n\nexports.Token = Token;\nvar pp$9 = Parser.prototype; // Move to the next token\n\npp$9.next = function () {\n  if (this.options.onToken) {\n    this.options.onToken(new Token(this));\n  }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$9.getToken = function () {\n  this.next();\n  return new Token(this);\n}; // If we're in an ES6 environment, make parsers iterable\n\n\nif (typeof Symbol !== \"undefined\") {\n  pp$9[Symbol.iterator] = function () {\n    var this$1 = this;\n    return {\n      next: function next() {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        };\n      }\n    };\n  };\n} // Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n\npp$9.curContext = function () {\n  return this.context[this.context.length - 1];\n}; // Read a single token, updating the parser object's token-related\n// properties.\n\n\npp$9.nextToken = function () {\n  var curContext = this.curContext();\n\n  if (!curContext || !curContext.preserveSpace) {\n    this.skipSpace();\n  }\n\n  this.start = this.pos;\n\n  if (this.options.locations) {\n    this.startLoc = this.curPosition();\n  }\n\n  if (this.pos >= this.input.length) {\n    return this.finishToken(types.eof);\n  }\n\n  if (curContext.override) {\n    return curContext.override(this);\n  } else {\n    this.readToken(this.fullCharCodeAtPos());\n  }\n};\n\npp$9.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92\n  /* '\\' */\n  ) {\n      return this.readWord();\n    }\n\n  return this.getTokenFromCode(code);\n};\n\npp$9.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n\n  if (code <= 0xd7ff || code >= 0xe000) {\n    return code;\n  }\n\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp$9.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n\n  if (end === -1) {\n    this.raise(this.pos - 2, \"Unterminated comment\");\n  }\n\n  this.pos = end + 2;\n\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n\n  if (this.options.onComment) {\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n  }\n};\n\npp$9.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n\n  if (this.options.onComment) {\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n  }\n}; // Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\n\npp$9.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n\n    switch (ch) {\n      case 32:\n      case 160:\n        // ' '\n        ++this.pos;\n        break;\n\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n\n      case 10:\n      case 8232:\n      case 8233:\n        ++this.pos;\n\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n\n        break;\n\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n\n          case 47:\n            this.skipLineComment(2);\n            break;\n\n          default:\n            break loop;\n        }\n\n        break;\n\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n\n    }\n  }\n}; // Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\n\npp$9.finishToken = function (type, val) {\n  this.end = this.pos;\n\n  if (this.options.locations) {\n    this.endLoc = this.curPosition();\n  }\n\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n  this.updateContext(prevType);\n}; // ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\n\n\npp$9.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next >= 48 && next <= 57) {\n    return this.readNumber(true);\n  }\n\n  var next2 = this.input.charCodeAt(this.pos + 2);\n\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot);\n  }\n};\n\npp$9.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (this.exprAllowed) {\n    ++this.pos;\n    return this.readRegexp();\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.slash, 1);\n};\n\npp$9.readToken_mult_modulo_exp = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo; // exponentiation operator ** and **=\n\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, size + 1);\n  }\n\n  return this.finishOp(tokentype, size);\n};\n\npp$9.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === code) {\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n};\n\npp$9.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.bitwiseXOR, 1);\n};\n\npp$9.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    return this.finishOp(types.incDec, 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.plusMin, 1);\n};\n\npp$9.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n\n    if (this.input.charCodeAt(this.pos + size) === 61) {\n      return this.finishOp(types.assign, size + 1);\n    }\n\n    return this.finishOp(types.bitShift, size);\n  }\n\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n\n  if (next === 61) {\n    size = 2;\n  }\n\n  return this.finishOp(types.relational, size);\n};\n\npp$9.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === 61) {\n    return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  }\n\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow);\n  }\n\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n};\n\npp$9.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n    // Punctuation tokens.\n\n    case 40:\n      ++this.pos;\n      return this.finishToken(types.parenL);\n\n    case 41:\n      ++this.pos;\n      return this.finishToken(types.parenR);\n\n    case 59:\n      ++this.pos;\n      return this.finishToken(types.semi);\n\n    case 44:\n      ++this.pos;\n      return this.finishToken(types.comma);\n\n    case 91:\n      ++this.pos;\n      return this.finishToken(types.bracketL);\n\n    case 93:\n      ++this.pos;\n      return this.finishToken(types.bracketR);\n\n    case 123:\n      ++this.pos;\n      return this.finishToken(types.braceL);\n\n    case 125:\n      ++this.pos;\n      return this.finishToken(types.braceR);\n\n    case 58:\n      ++this.pos;\n      return this.finishToken(types.colon);\n\n    case 63:\n      ++this.pos;\n      return this.finishToken(types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) {\n        break;\n      }\n\n      ++this.pos;\n      return this.finishToken(types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n\n      if (next === 120 || next === 88) {\n        return this.readRadixNumber(16);\n      } // '0x', '0X' - hex number\n\n\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) {\n          return this.readRadixNumber(8);\n        } // '0o', '0O' - octal number\n\n\n        if (next === 98 || next === 66) {\n          return this.readRadixNumber(2);\n        } // '0b', '0B' - binary number\n\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      // 1-9\n      return this.readNumber(false);\n    // Quotes produce strings.\n\n    case 34:\n    case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:\n    case 42:\n      // '%*'\n      return this.readToken_mult_modulo_exp(code);\n\n    case 124:\n    case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:\n    case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:\n    case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:\n    case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\npp$9.readRegexp = function () {\n  var escaped,\n      inClass,\n      start = this.pos;\n\n  for (;;) {\n    if (this.pos >= this.input.length) {\n      this.raise(start, \"Unterminated regular expression\");\n    }\n\n    var ch = this.input.charAt(this.pos);\n\n    if (lineBreak.test(ch)) {\n      this.raise(start, \"Unterminated regular expression\");\n    }\n\n    if (!escaped) {\n      if (ch === \"[\") {\n        inClass = true;\n      } else if (ch === \"]\" && inClass) {\n        inClass = false;\n      } else if (ch === \"/\" && !inClass) {\n        break;\n      }\n\n      escaped = ch === \"\\\\\";\n    } else {\n      escaped = false;\n    }\n\n    ++this.pos;\n  }\n\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n\n  if (this.containsEsc) {\n    this.unexpected(flagsStart);\n  } // Validate pattern\n\n\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state); // Create Literal#value property value.\n\n  var value = null;\n\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {// ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {\n    pattern: pattern,\n    flags: flags,\n    value: value\n  });\n}; // Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\n\npp$9.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = void 0;\n\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } // a\n    else if (code >= 65) {\n        val = code - 65 + 10;\n      } // A\n      else if (code >= 48 && code <= 57) {\n          val = code - 48;\n        } // 0-9\n        else {\n            val = Infinity;\n          }\n\n    if (val >= radix) {\n      break;\n    }\n\n    ++this.pos;\n    total = total * radix + val;\n  }\n\n  if (this.pos === start || len != null && this.pos - start !== len) {\n    return null;\n  }\n\n  return total;\n};\n\npp$9.readRadixNumber = function (radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n\n  var val = this.readInt(radix);\n\n  if (val == null) {\n    this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  }\n\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n    this.raise(this.pos, \"Identifier directly after number\");\n  }\n\n  return this.finishToken(types.num, val);\n}; // Read an integer, octal integer, or floating-point number.\n\n\npp$9.readNumber = function (startsWithDot) {\n  var start = this.pos;\n\n  if (!startsWithDot && this.readInt(10) === null) {\n    this.raise(start, \"Invalid number\");\n  }\n\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n  if (octal && this.strict) {\n    this.raise(start, \"Invalid number\");\n  }\n\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) {\n    octal = false;\n  }\n\n  var next = this.input.charCodeAt(this.pos);\n\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var str$1 = this.input.slice(start, this.pos);\n    var val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;\n    ++this.pos;\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) {\n      this.raise(this.pos, \"Identifier directly after number\");\n    }\n\n    return this.finishToken(types.num, val$1);\n  }\n\n  if (next === 46 && !octal) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n\n  if ((next === 69 || next === 101) && !octal) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n\n    if (next === 43 || next === 45) {\n      ++this.pos;\n    } // '+-'\n\n\n    if (this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n  }\n\n  if (isIdentifierStart(this.fullCharCodeAtPos())) {\n    this.raise(this.pos, \"Identifier directly after number\");\n  }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val);\n}; // Read a string value, interpreting backslash-escapes.\n\n\npp$9.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code;\n\n  if (ch === 123) {\n    // '{'\n    if (this.options.ecmaVersion < 6) {\n      this.unexpected();\n    }\n\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n\n    if (code > 0x10FFFF) {\n      this.invalidStringToken(codePos, \"Code point out of bounds\");\n    }\n  } else {\n    code = this.readHexChar(4);\n  }\n\n  return code;\n};\n\nfunction codePointToString$1(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp$9.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n\n  for (;;) {\n    if (this.pos >= this.input.length) {\n      this.raise(this.start, \"Unterminated string constant\");\n    }\n\n    var ch = this.input.charCodeAt(this.pos);\n\n    if (ch === quote) {\n      break;\n    }\n\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch, this.options.ecmaVersion >= 10)) {\n        this.raise(this.start, \"Unterminated string constant\");\n      }\n\n      ++this.pos;\n    }\n  }\n\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out);\n}; // Reads template string tokens.\n\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$9.tryReadTemplateToken = function () {\n  this.inTemplateElement = true;\n\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err;\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$9.invalidStringToken = function (position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR;\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$9.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n\n  for (;;) {\n    if (this.pos >= this.input.length) {\n      this.raise(this.start, \"Unterminated template\");\n    }\n\n    var ch = this.input.charCodeAt(this.pos);\n\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(types.backQuote);\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types.template, out);\n    }\n\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) {\n            ++this.pos;\n          }\n\n        case 10:\n          out += \"\\n\";\n          break;\n\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n}; // Reads a template token to search for the end, without validating any escape sequences\n\n\npp$9.readInvalidTemplateToken = function () {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break;\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break;\n        }\n\n      // falls through\n\n      case \"`\":\n        return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));\n      // no default\n    }\n  }\n\n  this.raise(this.start, \"Unterminated template\");\n}; // Used to read escaped characters\n\n\npp$9.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n\n  switch (ch) {\n    case 110:\n      return \"\\n\";\n    // 'n' -> '\\n'\n\n    case 114:\n      return \"\\r\";\n    // 'r' -> '\\r'\n\n    case 120:\n      return String.fromCharCode(this.readHexChar(2));\n    // 'x'\n\n    case 117:\n      return codePointToString$1(this.readCodePoint());\n    // 'u'\n\n    case 116:\n      return \"\\t\";\n    // 't' -> '\\t'\n\n    case 98:\n      return \"\\b\";\n    // 'b' -> '\\b'\n\n    case 118:\n      return \"\\x0B\";\n    // 'v' -> '\\u000b'\n\n    case 102:\n      return \"\\f\";\n    // 'f' -> '\\f'\n\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n      }\n\n    // '\\r\\n'\n\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;\n        ++this.curLine;\n      }\n\n      return \"\";\n\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n        }\n\n        return String.fromCharCode(octal);\n      }\n\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        return \"\";\n      }\n\n      return String.fromCharCode(ch);\n  }\n}; // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n\npp$9.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n\n  if (n === null) {\n    this.invalidStringToken(codePos, \"Bad character escape sequence\");\n  }\n\n  return n;\n}; // Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\n\npp$9.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        {\n          this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n      ++this.pos;\n      var esc = this.readCodePoint();\n\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {\n        this.invalidStringToken(escStart, \"Invalid Unicode escape\");\n      }\n\n      word += codePointToString$1(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n\n    first = false;\n  }\n\n  return word + this.input.slice(chunkStart, this.pos);\n}; // Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\n\npp$9.readWord = function () {\n  var word = this.readWord1();\n  var type = types.name;\n\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) {\n      this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word);\n    }\n\n    type = keywords$1[word];\n  }\n\n  return this.finishToken(type, word);\n}; // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\n\nvar version = \"6.4.0\";\nexports.version = version;\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types,\n  keywordTypes: keywords$1,\n  TokContext: TokContext,\n  tokContexts: types$1,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n}; // The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options);\n} // This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options);\n} // Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/node_modules/acorn/dist/acorn.mjs\n");

/***/ }),

/***/ "./node_modules/tern/plugin/doc_comment.js":
/*!*************************************************!*\
  !*** ./node_modules/tern/plugin/doc_comment.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Parses comments above variable declarations, function declarations,\n// and object properties as docstrings and JSDoc-style type\n// annotations.\n\n(function(mod) {\n  if (true) // CommonJS\n    return mod(__webpack_require__(/*! ../lib/infer */ \"./node_modules/tern/lib/infer.js\"), __webpack_require__(/*! ../lib/tern */ \"./node_modules/tern/lib/tern.js\"), __webpack_require__(/*! ../lib/comment */ \"./node_modules/tern/lib/comment.js\"),\n               __webpack_require__(/*! acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.mjs\"), __webpack_require__(/*! acorn-walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.mjs\"));\n  if (true) // AMD\n    return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../lib/infer */ \"./node_modules/tern/lib/infer.js\"), __webpack_require__(/*! ../lib/tern */ \"./node_modules/tern/lib/tern.js\"), __webpack_require__(/*! ../lib/comment */ \"./node_modules/tern/lib/comment.js\"), __webpack_require__(/*! acorn/dist/acorn */ \"./node_modules/tern/node_modules/acorn/dist/acorn.js\"), __webpack_require__(/*! acorn-walk/dist/walk */ \"./node_modules/tern/node_modules/acorn-walk/dist/walk.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  mod(tern, tern, tern.comment, acorn, acorn.walk);\n})(function(infer, tern, comment, acorn, walk) {\n  \"use strict\";\n\n  var WG_MADEUP = 1, WG_STRONG = 101;\n\n  tern.registerPlugin(\"doc_comment\", function(server, options) {\n    server.mod.jsdocTypedefs = Object.create(null);\n    server.on(\"reset\", function() {\n      server.mod.jsdocTypedefs = Object.create(null);\n    });\n    server.mod.docComment = {\n      weight: options && options.strong ? WG_STRONG : undefined,\n      fullDocs: options && options.fullDocs\n    };\n\n    server.on(\"postParse\", postParse);\n    server.on(\"postInfer\", postInfer);\n    server.on(\"postLoadDef\", postLoadDef);\n  });\n\n  function postParse(ast, text) {\n    function attachComments(node) { comment.ensureCommentsBefore(text, node); }\n\n    walk.simple(ast, {\n      VariableDeclaration: attachComments,\n      FunctionDeclaration: attachComments,\n      MethodDefinition: attachComments,\n      Property: attachComments,\n      AssignmentExpression: function(node) {\n        if (node.operator == \"=\") attachComments(node);\n      },\n      CallExpression: function(node) {\n        if (isDefinePropertyCall(node)) attachComments(node);\n      },\n      ExportNamedDeclaration: attachComments,\n      ExportDefaultDeclaration: attachComments,\n      ClassDeclaration: attachComments\n    });\n  }\n\n  function isDefinePropertyCall(node) {\n    return node.callee.type == \"MemberExpression\" &&\n      node.callee.object.name == \"Object\" &&\n      node.callee.property.name == \"defineProperty\" &&\n      node.arguments.length >= 3 &&\n      typeof node.arguments[1].value == \"string\";\n  }\n\n  function postInfer(ast, scope) {\n    jsdocParseTypedefs(ast.sourceFile.text, scope);\n\n    walk.simple(ast, {\n      VariableDeclaration: function(node, scope) {\n        var decl = node.declarations[0].id;\n        if (node.commentsBefore && decl.type == \"Identifier\")\n          interpretComments(node, node.commentsBefore, scope,\n                            scope.getProp(node.declarations[0].id.name));\n      },\n      FunctionDeclaration: function(node, scope) {\n        if (node.commentsBefore)\n          interpretComments(node, node.commentsBefore, scope,\n                            scope.getProp(node.id.name),\n                            node.scope.fnType);\n      },\n      ClassDeclaration: function(node, scope) {\n        if (node.commentsBefore)\n          interpretComments(node, node.commentsBefore, scope,\n                            scope.getProp(node.id.name),\n                            node.objType);\n      },\n      AssignmentExpression: function(node, scope) {\n        if (node.commentsBefore)\n          interpretComments(node, node.commentsBefore, scope,\n                            infer.expressionType({node: node.left, state: scope}));\n      },\n      ObjectExpression: function(node, scope) {\n        for (var i = 0; i < node.properties.length; ++i) {\n          var prop = node.properties[i];\n          if (prop.type == 'SpreadElement') { continue; }\n          var name = infer.propName(prop);\n          if (name != \"<i>\" && prop.commentsBefore)\n            interpretComments(prop, prop.commentsBefore, scope, node.objType.getProp(name));\n        }\n      },\n      Class: function(node, scope) {\n        if (!node.objType) return;\n        var proto = node.objType.getProp(\"prototype\").getObjType();\n        if (!proto) return;\n        for (var i = 0; i < node.body.body.length; i++) {\n          var method = node.body.body[i], name;\n          if (!method.commentsBefore) continue;\n          if (method.kind == \"constructor\")\n            interpretComments(method, method.commentsBefore, scope, node.objType);\n          else if ((name = infer.propName(method)) != \"<i>\")\n            interpretComments(method, method.commentsBefore, scope, proto.getProp(name));\n        }\n      },\n      CallExpression: function(node, scope) {\n        if (node.commentsBefore && isDefinePropertyCall(node)) {\n          var type = infer.expressionType({node: node.arguments[0], state: scope}).getObjType();\n          if (type && type instanceof infer.Obj) {\n            var prop = type.props[node.arguments[1].value];\n            if (prop) interpretComments(node, node.commentsBefore, scope, prop);\n          }\n        }\n      },\n      ExportNamedDeclaration: function(node, scope) {\n        if (node.commentsBefore && node.declaration && node.declaration.type === 'FunctionDeclaration') {\n          interpretComments(node.declaration, node.commentsBefore, scope,\n                            scope.getProp(node.declaration.id.name),\n                            node.declaration.scope.fnType);\n        }\n      },\n      ExportDefaultDeclaration: function(node, scope) {\n        if (node.commentsBefore && node.declaration && node.declaration.type === 'FunctionDeclaration') {\n          interpretComments(node.declaration, node.commentsBefore, scope,\n                            scope.getProp(node.declaration.id.name),\n                            node.declaration.scope.fnType);\n        }\n      }\n    }, infer.searchVisitor, scope);\n  }\n\n  function postLoadDef(data) {\n    var defs = data[\"!typedef\"];\n    var cx = infer.cx(), orig = data[\"!name\"];\n    if (defs) for (var name in defs)\n      cx.parent.mod.jsdocTypedefs[name] =\n        maybeInstance(infer.def.parse(defs[name], orig, name), name);\n  }\n\n  // COMMENT INTERPRETATION\n\n  function stripLeadingChars(lines) {\n    for (var head, i = 1; i < lines.length; i++) {\n      var line = lines[i], lineHead = line.match(/^[\\s\\*]*/)[0];\n      if (lineHead != line) {\n        if (head == null) {\n          head = lineHead;\n        } else {\n          var same = 0;\n          while (same < head.length && head.charCodeAt(same) == lineHead.charCodeAt(same)) ++same;\n          if (same < head.length) head = head.slice(0, same);\n        }\n      }\n    }\n    lines = lines.map(function(line, i) {\n      line = line.replace(/\\s+$/, \"\");\n      if (i == 0 && head != null) {\n        for (var j = 0; j < head.length; j++) {\n          var found = line.indexOf(head.slice(j));\n          if (found == 0) return line.slice(head.length - j);\n        }\n      }\n      if (head == null || i == 0) return line.replace(/^[\\s\\*]*/, \"\");\n      if (line.length < head.length) return \"\";\n      return line.slice(head.length);\n    });\n    while (lines.length && !lines[lines.length - 1]) lines.pop();\n    while (lines.length && !lines[0]) lines.shift();\n    return lines;\n  }\n\n  function interpretComments(node, comments, scope, aval, type) {\n    jsdocInterpretComments(node, scope, aval, comments);\n    var cx = infer.cx();\n\n    if (!type && aval instanceof infer.AVal && aval.types.length) {\n      type = aval.types[aval.types.length - 1];\n      if (!(type instanceof infer.Obj) || type.origin != cx.curOrigin || type.doc)\n        type = null;\n    }\n\n    for (var i = comments.length - 1; i >= 0; i--) {\n      var text = stripLeadingChars(comments[i].split(/\\r\\n?|\\n/)).join(\"\\n\");\n      if (text) {\n        if (aval instanceof infer.AVal) aval.doc = text;\n        if (type) type.doc = text;\n        break;\n      }\n    }\n  }\n\n  // Parses a subset of JSDoc-style comments in order to include the\n  // explicitly defined types in the analysis.\n\n  function skipSpace(str, pos) {\n    while (/\\s/.test(str.charAt(pos))) ++pos;\n    return pos;\n  }\n\n  function isIdentifier(string) {\n    if (!acorn.isIdentifierStart(string.charCodeAt(0))) return false;\n    for (var i = 1; i < string.length; i++)\n      if (!acorn.isIdentifierChar(string.charCodeAt(i))) return false;\n    return true;\n  }\n\n  function parseLabelList(scope, str, pos, close) {\n    var labels = [], types = [], madeUp = false;\n    for (var first = true; ; first = false) {\n      pos = skipSpace(str, pos);\n      if (first && str.charAt(pos) == close) break;\n      var colon = str.indexOf(\":\", pos);\n      if (colon < 0) return null;\n      var label = str.slice(pos, colon);\n      if (!isIdentifier(label)) return null;\n      labels.push(label);\n      pos = colon + 1;\n      var type = parseType(scope, str, pos);\n      if (!type) return null;\n      pos = type.end;\n      madeUp = madeUp || type.madeUp;\n      types.push(type.type);\n      pos = skipSpace(str, pos);\n      var next = str.charAt(pos);\n      ++pos;\n      if (next == close) break;\n      if (next != \",\") return null;\n    }\n    return {labels: labels, types: types, end: pos, madeUp: madeUp};\n  }\n\n  function parseTypeAtom(scope, str, pos) {\n    var result = parseTypeInner(scope, str, pos);\n    if (!result) return null;\n    if (str.slice(result.end, result.end + 2) == \"[]\")\n      return {madeUp: result.madeUp, end: result.end + 2, type: new infer.Arr(result.type)};\n    else return result;\n  }\n\n  function parseType(scope, str, pos) {\n    var type, union = false, madeUp = false;\n    for (;;) {\n      var inner = parseTypeAtom(scope, str, pos);\n      if (!inner) return null;\n      madeUp = madeUp || inner.madeUp;\n      if (union) inner.type.propagate(union);\n      else type = inner.type;\n      pos = skipSpace(str, inner.end);\n      if (str.charAt(pos) != \"|\") break;\n      pos++;\n      if (!union) {\n        union = new infer.AVal;\n        type.propagate(union);\n        type = union;\n      }\n    }\n    var isOptional = false;\n    if (str.charAt(pos) == \"=\") {\n      ++pos;\n      isOptional = true;\n    }\n    return {type: type, end: pos, isOptional: isOptional, madeUp: madeUp};\n  }\n\n  function parseTypeInner(scope, str, pos) {\n    pos = skipSpace(str, pos);\n    if (/[?!]/.test(str.charAt(pos))) pos++;\n    var type, madeUp = false;\n\n    if (str.indexOf(\"function(\", pos) == pos) {\n      var args = parseLabelList(scope, str, pos + 9, \")\"), ret = infer.ANull;\n      if (!args) return null;\n      pos = skipSpace(str, args.end);\n      if (str.charAt(pos) == \":\") {\n        ++pos;\n        var retType = parseType(scope, str, pos + 1);\n        if (!retType) return null;\n        pos = retType.end;\n        ret = retType.type;\n        madeUp = retType.madeUp;\n      }\n      type = new infer.Fn(null, infer.ANull, args.types, args.labels, ret);\n    } else if (str.charAt(pos) == \"[\") {\n      var inner = parseType(scope, str, pos + 1);\n      if (!inner) return null;\n      pos = skipSpace(str, inner.end);\n      madeUp = inner.madeUp;\n      if (str.charAt(pos) != \"]\") return null;\n      ++pos;\n      type = new infer.Arr(inner.type);\n    } else if (str.charAt(pos) == \"{\") {\n      var fields = parseLabelList(scope, str, pos + 1, \"}\");\n      if (!fields) return null;\n      type = new infer.Obj(true);\n      for (var i = 0; i < fields.types.length; ++i) {\n        var field = type.defProp(fields.labels[i]);\n        field.initializer = true;\n        fields.types[i].propagate(field);\n      }\n      pos = fields.end;\n      madeUp = fields.madeUp;\n    } else if (str.charAt(pos) == \"(\") {\n      var inner = parseType(scope, str, pos + 1);\n      if (!inner) return null;\n      pos = skipSpace(str, inner.end);\n      if (str.charAt(pos) != \")\") return null;\n      ++pos;\n      type = inner.type;\n    } else {\n      var start = pos;\n      if (!acorn.isIdentifierStart(str.charCodeAt(pos))) return null;\n      while (acorn.isIdentifierChar(str.charCodeAt(pos))) ++pos;\n      if (start == pos) return null;\n      var word = str.slice(start, pos);\n      if (/^(number|integer)$/i.test(word)) type = infer.cx().num;\n      else if (/^bool(ean)?$/i.test(word)) type = infer.cx().bool;\n      else if (/^string$/i.test(word)) type = infer.cx().str;\n      else if (/^(null|undefined)$/i.test(word)) type = infer.ANull;\n      else if (/^array$/i.test(word)) {\n        var inner = null;\n        if (str.charAt(pos) == \".\" && str.charAt(pos + 1) == \"<\") {\n          var inAngles = parseType(scope, str, pos + 2);\n          if (!inAngles) return null;\n          pos = skipSpace(str, inAngles.end);\n          madeUp = inAngles.madeUp;\n          if (str.charAt(pos++) != \">\") return null;\n          inner = inAngles.type;\n        }\n        type = new infer.Arr(inner);\n      } else if (/^object$/i.test(word)) {\n        type = new infer.Obj(true);\n        if (str.charAt(pos) == \".\" && str.charAt(pos + 1) == \"<\") {\n          var key = parseType(scope, str, pos + 2);\n          if (!key) return null;\n          pos = skipSpace(str, key.end);\n          if (str.charAt(pos++) != \",\") return null;\n          var val = parseType(scope, str, pos);\n          if (!val) return null;\n          pos = skipSpace(str, val.end);\n          madeUp = key.madeUp || val.madeUp;\n          if (str.charAt(pos++) != \">\") return null;\n          val.type.propagate(type.defProp(\"<i>\"));\n        }\n      } else {\n        while (str.charCodeAt(pos) == 46 ||\n               acorn.isIdentifierChar(str.charCodeAt(pos))) ++pos;\n        var path = str.slice(start, pos);\n        var cx = infer.cx(), defs = cx.parent && cx.parent.mod.jsdocTypedefs, found;\n        if (defs && (path in defs)) {\n          type = defs[path];\n        } else if (found = infer.def.parsePath(path, scope).getObjType()) {\n          type = maybeInstance(found, path);\n        } else {\n          if (!cx.jsdocPlaceholders) cx.jsdocPlaceholders = Object.create(null);\n          if (!(path in cx.jsdocPlaceholders))\n            type = cx.jsdocPlaceholders[path] = new infer.Obj(null, path);\n          else\n            type = cx.jsdocPlaceholders[path];\n          madeUp = true;\n        }\n      }\n    }\n\n    return {type: type, end: pos, madeUp: madeUp};\n  }\n\n  function maybeInstance(type, path) {\n    if (type instanceof infer.Fn && /(?:^|\\.)[A-Z][^\\.]*$/.test(path)) {\n      var proto = type.getProp(\"prototype\").getObjType();\n      if (proto instanceof infer.Obj) return infer.getInstance(proto);\n    }\n    return type;\n  }\n\n  function parseTypeOuter(scope, str, pos) {\n    pos = skipSpace(str, pos || 0);\n    if (str.charAt(pos) != \"{\") return null;\n    var result = parseType(scope, str, pos + 1);\n    if (!result) return null;\n    var end = skipSpace(str, result.end);\n    if (str.charAt(end) != \"}\") return null;\n    result.end = end + 1;\n    return result;\n  }\n\n  function jsdocInterpretComments(node, scope, aval, comments) {\n    var type, args, ret, foundOne, self, parsed;\n\n    for (var i = 0; i < comments.length; ++i) {\n      var comment = comments[i];\n      var decl = /(?:\\n|\\*)\\s*@(type|param|arg(?:ument)?|returns?|this|class|constructor)(?:\\s*?\\n|\\s+(.*))/g, m;\n      while (m = decl.exec(comment)) {\n        if (m[1] == \"class\" || m[1] == \"constructor\") {\n          self = foundOne = true;\n          continue;\n        }\n\n        if (m[2] === undefined) continue; // to avoid tags that require a type argument.\n\n        if (m[1] == \"this\" && (parsed = parseType(scope, m[2], 0))) {\n          self = parsed;\n          foundOne = true;\n          continue;\n        }\n\n        if (!(parsed = parseTypeOuter(scope, m[2]))) continue;\n        foundOne = true;\n\n        switch(m[1]) {\n        case \"returns\": case \"return\":\n          ret = parsed; break;\n        case \"type\":\n          type = parsed; break;\n        case \"param\": case \"arg\": case \"argument\":\n            // Possible jsdoc param name situations:\n            // employee\n            // [employee]\n            // [employee=John Doe]\n            // employee.name\n            // employees[].name\n            var name = m[2].slice(parsed.end).match(/^\\s*(\\[?)\\s*([^\\[\\]\\s=]+(\\[\\][^\\[\\]\\s=]+)?)\\s*(?:=[^\\]]+\\s*)?(\\]?).*/);\n            if (!name) continue;\n            var argname = name[2] + (parsed.isOptional || (name[1] === '[' && name[4] === ']') ? \"?\" : \"\");\n\n            // Check to see if the jsdoc is indicating a property of a previously documented parameter\n            var isObjProp = false;\n            var parts = argname.split('.');\n            if (args && parts.length == 2) {\n              var objname = parts[0];\n              argname = parts[1];\n\n              // Go through each of the previously found parameter to find the\n              // object or array for which this new parameter should be a part\n              // of\n              var key, value;\n              for (key in args) {\n                value = args[key];\n\n                if (key === objname && value.type instanceof infer.Obj) {\n                  isObjProp = true;\n                  parsed.type.propagate(value.type.defProp(argname));\n                }\n                else if (key + '[]' === objname && value.type instanceof infer.Arr) {\n                  isObjProp = true;\n                  parsed.type.propagate(value.type.getProp(\"<i>\").getType().defProp(argname));\n                }\n              }\n            }\n            if (!isObjProp) {\n              (args || (args = Object.create(null)))[argname] = parsed;\n            }\n          break;\n        }\n      }\n    }\n\n    if (foundOne) applyType(type, self, args, ret, node, aval);\n  }\n\n  function jsdocParseTypedefs(text, scope) {\n    var cx = infer.cx();\n\n    var re = /\\s@typedef\\s+(.*)/g, m;\n    while (m = re.exec(text)) {\n      var parsed = parseTypeOuter(scope, m[1]);\n      var name = parsed && m[1].slice(parsed.end).match(/^\\s*(\\S+)/);\n      if (name && parsed.type instanceof infer.Obj) {\n        var rest = text.slice(m.index + m[0].length);\n        while (m = /\\s+@prop(?:erty)?\\s+(.*)/.exec(rest)) {\n          var propType = parseTypeOuter(scope, m[1]), propName;\n          if (propType && (propName = m[1].slice(propType.end).match(/^\\s*(\\S+)/)))\n            propType.type.propagate(parsed.type.defProp(propName[1]));\n          rest = rest.slice(m[0].length);\n        }\n        cx.parent.mod.jsdocTypedefs[name[1]] = parsed.type;\n      }\n    }\n  }\n\n  function propagateWithWeight(type, target) {\n    var weight = infer.cx().parent.mod.docComment.weight;\n    type.type.propagate(target, weight || (type.madeUp ? WG_MADEUP : undefined));\n  }\n\n  function isFunExpr(node) { return node.type == \"FunctionExpression\" || node.type == \"ArrowFunctionExpression\" }\n\n  function applyType(type, self, args, ret, node, aval) {\n    var fn;\n    if (node.type == \"VariableDeclaration\") {\n      var decl = node.declarations[0];\n      if (decl.init && isFunExpr(decl.init)) fn = decl.init.scope.fnType;\n    } else if (node.type == \"FunctionDeclaration\") {\n      fn = node.scope.fnType;\n    } else if (node.type == \"AssignmentExpression\") {\n      if (isFunExpr(node.right))\n        fn = node.right.scope.fnType;\n    } else if (node.type == \"CallExpression\" || node.type === \"ClassDeclaration\") {\n    } else { // An object property\n      if (isFunExpr(node.value)) fn = node.value.scope.fnType;\n    }\n\n    if (fn && (args || ret || self)) {\n      if (args) for (var i = 0; i < fn.argNames.length; ++i) {\n        var name = fn.argNames[i], known = args[name];\n        if (!known && (known = args[name + \"?\"]))\n          fn.argNames[i] += \"?\";\n        if (known) propagateWithWeight(known, fn.args[i]);\n      }\n      if (ret) {\n        if (fn.retval == infer.ANull) fn.retval = new infer.AVal;\n        propagateWithWeight(ret, fn.retval);\n      }\n      if (self === true) {\n        var proto = fn.getProp(\"prototype\").getObjType();\n        self = proto && {type: infer.getInstance(proto, fn)};\n      }\n      if (self) propagateWithWeight(self, fn.self);\n    } else if (type) {\n      propagateWithWeight(type, aval);\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tern/plugin/doc_comment.js\n");

/***/ }),

/***/ "./src/defs/jscodeshift.json":
/*!***********************************!*\
  !*** ./src/defs/jscodeshift.json ***!
  \***********************************/
/*! exports provided: !name, !define, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"!name\\\":\\\"jscodeshift\\\",\\\"!define\\\":{\\\"file\\\":{\\\"source\\\":{\\\"!type\\\":\\\"string\\\",\\\"!doc\\\":\\\"The source code of the current file.\\\"},\\\"path\\\":{\\\"!type\\\":\\\"string\\\",\\\"!doc\\\":\\\"The absolute path to the current file\\\"}},\\\"apiObject\\\":{\\\"stats\\\":{\\\"!type\\\":\\\"fn(value: string)\\\",\\\"!doc\\\":\\\"Helper function to collect data during --dry runs. This function keeps a counter for how often it was called with a specific argument. The result is shown in the console. Useful for finding out how many files match a criterion.\\\"},\\\"jscodeshift\\\":{\\\"!type\\\":\\\"fn(source: string|+NodePath) -> +Collection\\\",\\\"template\\\":{\\\"expression\\\":{\\\"!type\\\":\\\"fn(strings: [string], value: ?, value: ?) -> Expression\\\",\\\"!doc\\\":\\\"Tagged template function. Parses the string as source and returns an Expression AST node.\\\"},\\\"statement\\\":{\\\"!type\\\":\\\"fn(strings: [string], value: ?, value: ?) -> Statement\\\",\\\"!doc\\\":\\\"Tagged template function. Parses the string as source and returns an Statement AST node.\\\"},\\\"statements\\\":{\\\"!type\\\":\\\"fn(strings: [string], value: ?, value: ?) -> [Statement]\\\",\\\"!doc\\\":\\\"Tagged template function. Parses the string as source and returns an array of Statement AST nodes.\\\"}},\\\"match\\\":{\\\"!type\\\":\\\"fn(node: ASTNode, pattern: object) -> bool\\\",\\\"!doc\\\":\\\"Returns true if node matches the pattern, else false\\\"},\\\"ModuleSpecifier\\\":\\\"TypeDefinition\\\",\\\"ConditionalExpression\\\":\\\"TypeDefinition\\\",\\\"Node\\\":\\\"TypeDefinition\\\",\\\"MixedTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"XMLAttributeSelector\\\":\\\"TypeDefinition\\\",\\\"JSXNamespacedName\\\":\\\"TypeDefinition\\\",\\\"GenericTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"XMLFunctionQualifiedIdentifier\\\":\\\"TypeDefinition\\\",\\\"ClassPropertyDefinition\\\":\\\"TypeDefinition\\\",\\\"NullableTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"ForInStatement\\\":\\\"TypeDefinition\\\",\\\"YieldExpression\\\":\\\"TypeDefinition\\\",\\\"ClassProperty\\\":\\\"TypeDefinition\\\",\\\"XMLDefaultDeclaration\\\":\\\"TypeDefinition\\\",\\\"TemplateElement\\\":\\\"TypeDefinition\\\",\\\"ExportDefaultDeclaration\\\":\\\"TypeDefinition\\\",\\\"TupleTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"GraphExpression\\\":\\\"TypeDefinition\\\",\\\"MemberExpression\\\":\\\"TypeDefinition\\\",\\\"ImportDeclaration\\\":\\\"TypeDefinition\\\",\\\"File\\\":\\\"TypeDefinition\\\",\\\"JSXSpreadAttribute\\\":\\\"TypeDefinition\\\",\\\"XMLName\\\":\\\"TypeDefinition\\\",\\\"ClassExpression\\\":\\\"TypeDefinition\\\",\\\"TemplateLiteral\\\":\\\"TypeDefinition\\\",\\\"ClassImplements\\\":\\\"TypeDefinition\\\",\\\"TypeAlias\\\":\\\"TypeDefinition\\\",\\\"StringLiteralTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"TaggedTemplateExpression\\\":\\\"TypeDefinition\\\",\\\"Identifier\\\":\\\"TypeDefinition\\\",\\\"JSXElement\\\":\\\"TypeDefinition\\\",\\\"BooleanLiteralTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"MethodDefinition\\\":\\\"TypeDefinition\\\",\\\"Line\\\":\\\"TypeDefinition\\\",\\\"GeneratorExpression\\\":\\\"TypeDefinition\\\",\\\"LetStatement\\\":\\\"TypeDefinition\\\",\\\"Literal\\\":\\\"TypeDefinition\\\",\\\"BooleanTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"JSXAttribute\\\":\\\"TypeDefinition\\\",\\\"ExportNamespaceSpecifier\\\":\\\"TypeDefinition\\\",\\\"ArrayTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"BlockStatement\\\":\\\"TypeDefinition\\\",\\\"WithStatement\\\":\\\"TypeDefinition\\\",\\\"XMLProcessingInstruction\\\":\\\"TypeDefinition\\\",\\\"SpreadPropertyPattern\\\":\\\"TypeDefinition\\\",\\\"WhileStatement\\\":\\\"TypeDefinition\\\",\\\"ThrowStatement\\\":\\\"TypeDefinition\\\",\\\"InterfaceDeclaration\\\":\\\"TypeDefinition\\\",\\\"TypeofTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"LetExpression\\\":\\\"TypeDefinition\\\",\\\"ExportSpecifier\\\":\\\"TypeDefinition\\\",\\\"ContinueStatement\\\":\\\"TypeDefinition\\\",\\\"Printable\\\":\\\"TypeDefinition\\\",\\\"ThisExpression\\\":\\\"TypeDefinition\\\",\\\"IntersectionTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"JSXClosingElement\\\":\\\"TypeDefinition\\\",\\\"DeclareFunction\\\":\\\"TypeDefinition\\\",\\\"VariableDeclaration\\\":\\\"TypeDefinition\\\",\\\"BreakStatement\\\":\\\"TypeDefinition\\\",\\\"ImportSpecifier\\\":\\\"TypeDefinition\\\",\\\"ParenthesizedExpression\\\":\\\"TypeDefinition\\\",\\\"RestElement\\\":\\\"TypeDefinition\\\",\\\"Specifier\\\":\\\"TypeDefinition\\\",\\\"ArrayExpression\\\":\\\"TypeDefinition\\\",\\\"XMLAnyName\\\":\\\"TypeDefinition\\\",\\\"ExportDeclaration\\\":\\\"TypeDefinition\\\",\\\"ObjectTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"ExportAllDeclaration\\\":\\\"TypeDefinition\\\",\\\"SourceLocation\\\":\\\"TypeDefinition\\\",\\\"TypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"Statement\\\":\\\"TypeDefinition\\\",\\\"Position\\\":\\\"TypeDefinition\\\",\\\"ObjectExpression\\\":\\\"TypeDefinition\\\",\\\"Program\\\":\\\"TypeDefinition\\\",\\\"Comment\\\":\\\"TypeDefinition\\\",\\\"AssignmentPattern\\\":\\\"TypeDefinition\\\",\\\"ObjectTypeIndexer\\\":\\\"TypeDefinition\\\",\\\"ArrowFunctionExpression\\\":\\\"TypeDefinition\\\",\\\"XMLAttribute\\\":\\\"TypeDefinition\\\",\\\"Noop\\\":\\\"TypeDefinition\\\",\\\"DeclareClass\\\":\\\"TypeDefinition\\\",\\\"XMLEndTag\\\":\\\"TypeDefinition\\\",\\\"JSXIdentifier\\\":\\\"TypeDefinition\\\",\\\"VoidTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"ComprehensionBlock\\\":\\\"TypeDefinition\\\",\\\"FunctionTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"ComprehensionExpression\\\":\\\"TypeDefinition\\\",\\\"MetaProperty\\\":\\\"TypeDefinition\\\",\\\"XMLQualifiedIdentifier\\\":\\\"TypeDefinition\\\",\\\"DoWhileStatement\\\":\\\"TypeDefinition\\\",\\\"EmptyStatement\\\":\\\"TypeDefinition\\\",\\\"VariableDeclarator\\\":\\\"TypeDefinition\\\",\\\"ObjectPattern\\\":\\\"TypeDefinition\\\",\\\"AssignmentExpression\\\":\\\"TypeDefinition\\\",\\\"Declaration\\\":\\\"TypeDefinition\\\",\\\"DoExpression\\\":\\\"TypeDefinition\\\",\\\"GraphIndexExpression\\\":\\\"TypeDefinition\\\",\\\"DeclareVariable\\\":\\\"TypeDefinition\\\",\\\"ObjectTypeProperty\\\":\\\"TypeDefinition\\\",\\\"IfStatement\\\":\\\"TypeDefinition\\\",\\\"BindExpression\\\":\\\"TypeDefinition\\\",\\\"LogicalExpression\\\":\\\"TypeDefinition\\\",\\\"CommentLine\\\":\\\"TypeDefinition\\\",\\\"ObjectTypeCallProperty\\\":\\\"TypeDefinition\\\",\\\"FunctionDeclaration\\\":\\\"TypeDefinition\\\",\\\"NewExpression\\\":\\\"TypeDefinition\\\",\\\"TypeCastExpression\\\":\\\"TypeDefinition\\\",\\\"XMLStartTag\\\":\\\"TypeDefinition\\\",\\\"XMLPointTag\\\":\\\"TypeDefinition\\\",\\\"Pattern\\\":\\\"TypeDefinition\\\",\\\"ImportDefaultSpecifier\\\":\\\"TypeDefinition\\\",\\\"XMLFilterExpression\\\":\\\"TypeDefinition\\\",\\\"XMLEscape\\\":\\\"TypeDefinition\\\",\\\"JSXEmptyExpression\\\":\\\"TypeDefinition\\\",\\\"SequenceExpression\\\":\\\"TypeDefinition\\\",\\\"InterfaceExtends\\\":\\\"TypeDefinition\\\",\\\"PropertyPattern\\\":\\\"TypeDefinition\\\",\\\"CatchClause\\\":\\\"TypeDefinition\\\",\\\"SpreadElement\\\":\\\"TypeDefinition\\\",\\\"FunctionTypeParam\\\":\\\"TypeDefinition\\\",\\\"Property\\\":\\\"TypeDefinition\\\",\\\"JSXOpeningElement\\\":\\\"TypeDefinition\\\",\\\"StringTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"ForStatement\\\":\\\"TypeDefinition\\\",\\\"Decorator\\\":\\\"TypeDefinition\\\",\\\"SpreadElementPattern\\\":\\\"TypeDefinition\\\",\\\"JSXMemberExpression\\\":\\\"TypeDefinition\\\",\\\"FunctionExpression\\\":\\\"TypeDefinition\\\",\\\"BinaryExpression\\\":\\\"TypeDefinition\\\",\\\"TryStatement\\\":\\\"TypeDefinition\\\",\\\"Expression\\\":\\\"TypeDefinition\\\",\\\"ExportNamedDeclaration\\\":\\\"TypeDefinition\\\",\\\"SwitchStatement\\\":\\\"TypeDefinition\\\",\\\"Block\\\":\\\"TypeDefinition\\\",\\\"ExportBatchSpecifier\\\":\\\"TypeDefinition\\\",\\\"ExpressionStatement\\\":\\\"TypeDefinition\\\",\\\"ArrayPattern\\\":\\\"TypeDefinition\\\",\\\"XMLList\\\":\\\"TypeDefinition\\\",\\\"ReturnStatement\\\":\\\"TypeDefinition\\\",\\\"CallExpression\\\":\\\"TypeDefinition\\\",\\\"DeclareModule\\\":\\\"TypeDefinition\\\",\\\"NumberLiteralTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"Type\\\":\\\"TypeDefinition\\\",\\\"TypeParameterDeclaration\\\":\\\"TypeDefinition\\\",\\\"XMLText\\\":\\\"TypeDefinition\\\",\\\"Function\\\":\\\"TypeDefinition\\\",\\\"UnaryExpression\\\":\\\"TypeDefinition\\\",\\\"XML\\\":\\\"TypeDefinition\\\",\\\"Super\\\":\\\"TypeDefinition\\\",\\\"TypeParameterInstantiation\\\":\\\"TypeDefinition\\\",\\\"XMLComment\\\":\\\"TypeDefinition\\\",\\\"MemberTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"SwitchCase\\\":\\\"TypeDefinition\\\",\\\"AwaitExpression\\\":\\\"TypeDefinition\\\",\\\"ExportDefaultSpecifier\\\":\\\"TypeDefinition\\\",\\\"XMLElement\\\":\\\"TypeDefinition\\\",\\\"AnyTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"CommentBlock\\\":\\\"TypeDefinition\\\",\\\"ClassBody\\\":\\\"TypeDefinition\\\",\\\"ImportNamespaceSpecifier\\\":\\\"TypeDefinition\\\",\\\"JSXExpressionContainer\\\":\\\"TypeDefinition\\\",\\\"DeclareExportDeclaration\\\":\\\"TypeDefinition\\\",\\\"UnionTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"XMLCdata\\\":\\\"TypeDefinition\\\",\\\"JSXText\\\":\\\"TypeDefinition\\\",\\\"QualifiedTypeIdentifier\\\":\\\"TypeDefinition\\\",\\\"DebuggerStatement\\\":\\\"TypeDefinition\\\",\\\"ForOfStatement\\\":\\\"TypeDefinition\\\",\\\"LabeledStatement\\\":\\\"TypeDefinition\\\",\\\"SpreadProperty\\\":\\\"TypeDefinition\\\",\\\"UpdateExpression\\\":\\\"TypeDefinition\\\",\\\"ClassDeclaration\\\":\\\"TypeDefinition\\\",\\\"NumberTypeAnnotation\\\":\\\"TypeDefinition\\\",\\\"switchStatement\\\":{\\\"!type\\\":\\\"fn(discriminant: Expression, cases: [SwitchCase], lexical: boolean) -> SwitchStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SwitchStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"identifier\\\":{\\\"!type\\\":\\\"fn(name: string) -> Identifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Identifier'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"classPropertyDefinition\\\":{\\\"!type\\\":\\\"fn(definition: MethodDefinition|VariableDeclarator|ClassPropertyDefinition|ClassProperty) -> ClassPropertyDefinition\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassPropertyDefinition'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"jsxMemberExpression\\\":{\\\"!type\\\":\\\"fn(object: JSXIdentifier|JSXMemberExpression, property: JSXIdentifier) -> JSXMemberExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXMemberExpression'.\\\\nSuper types: MemberExpression, Expression, Pattern, Node, Printable\\\"},\\\"exportNamespaceSpecifier\\\":{\\\"!type\\\":\\\"fn(exported: Identifier) -> ExportNamespaceSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportNamespaceSpecifier'.\\\\nSuper types: Specifier, Node, Printable\\\"},\\\"conditionalExpression\\\":{\\\"!type\\\":\\\"fn(test: Expression, consequent: Expression, alternate: Expression) -> ConditionalExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ConditionalExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"parenthesizedExpression\\\":{\\\"!type\\\":\\\"fn(expression: Expression) -> ParenthesizedExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ParenthesizedExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"yieldExpression\\\":{\\\"!type\\\":\\\"fn(argument: Expression|null, delegate: boolean) -> YieldExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'YieldExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"typeParameterInstantiation\\\":{\\\"!type\\\":\\\"fn(params: [Type]) -> TypeParameterInstantiation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeParameterInstantiation'.\\\\nSuper types: Node, Printable\\\"},\\\"bindExpression\\\":{\\\"!type\\\":\\\"fn(object: Expression|null, callee: Expression) -> BindExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BindExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"expressionStatement\\\":{\\\"!type\\\":\\\"fn(expression: Expression) -> ExpressionStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExpressionStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"spreadElement\\\":{\\\"!type\\\":\\\"fn(argument: Expression) -> SpreadElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SpreadElement'.\\\\nSuper types: Node, Printable\\\"},\\\"program\\\":{\\\"!type\\\":\\\"fn(body: [Statement]) -> Program\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Program'.\\\\nSuper types: Node, Printable\\\"},\\\"jsxElement\\\":{\\\"!type\\\":\\\"fn(openingElement: JSXOpeningElement, closingElement: JSXClosingElement|null, children: [JSXElement|JSXExpressionContainer|JSXText|Literal]) -> JSXElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXElement'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"memberTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(object: Identifier, property: MemberTypeAnnotation|GenericTypeAnnotation) -> MemberTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'MemberTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"importNamespaceSpecifier\\\":{\\\"!type\\\":\\\"fn(local: Identifier|null) -> ImportNamespaceSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ImportNamespaceSpecifier'.\\\\nSuper types: ModuleSpecifier, Specifier, Node, Printable\\\"},\\\"numberLiteralTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(value: number, raw: string) -> NumberLiteralTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'NumberLiteralTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"typeofTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(argument: Type) -> TypeofTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeofTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"declareClass\\\":{\\\"!type\\\":\\\"fn(id: Identifier) -> DeclareClass\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DeclareClass'.\\\\nSuper types: InterfaceDeclaration, Statement, Node, Printable\\\"},\\\"declareFunction\\\":{\\\"!type\\\":\\\"fn(id: Identifier) -> DeclareFunction\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DeclareFunction'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"logicalExpression\\\":{\\\"!type\\\":\\\"fn(operator: string, left: Expression, right: Expression) -> LogicalExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'LogicalExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n operator (string) one of: |||&&\\\\n\\\"},\\\"jsxNamespacedName\\\":{\\\"!type\\\":\\\"fn(namespace: JSXIdentifier, name: JSXIdentifier) -> JSXNamespacedName\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXNamespacedName'.\\\\nSuper types: Node, Printable\\\"},\\\"debuggerStatement\\\":{\\\"!type\\\":\\\"fn() -> DebuggerStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DebuggerStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"methodDefinition\\\":{\\\"!type\\\":\\\"fn(kind: string, key: Literal|Identifier|Expression, value: Function, static: boolean) -> MethodDefinition\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'MethodDefinition'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\\n\\\\n kind (string) one of: constructor|method|get|set\\\\n\\\"},\\\"functionTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(params: [FunctionTypeParam], returnType: Type, rest: FunctionTypeParam|null, typeParameters: TypeParameterDeclaration|null) -> FunctionTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'FunctionTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"objectPattern\\\":{\\\"!type\\\":\\\"fn(properties: [Property|PropertyPattern|SpreadPropertyPattern|SpreadProperty]) -> ObjectPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"unionTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(types: [Type]) -> UnionTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'UnionTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"ifStatement\\\":{\\\"!type\\\":\\\"fn(test: Expression, consequent: Statement, alternate: Statement|null) -> IfStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'IfStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"forInStatement\\\":{\\\"!type\\\":\\\"fn(left: VariableDeclaration|Expression, right: Expression, body: Statement, each: boolean) -> ForInStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ForInStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"letStatement\\\":{\\\"!type\\\":\\\"fn(head: [VariableDeclarator], body: Statement) -> LetStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'LetStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"jsxEmptyExpression\\\":{\\\"!type\\\":\\\"fn() -> JSXEmptyExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXEmptyExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"qualifiedTypeIdentifier\\\":{\\\"!type\\\":\\\"fn(qualification: Identifier|QualifiedTypeIdentifier, id: Identifier) -> QualifiedTypeIdentifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'QualifiedTypeIdentifier'.\\\\nSuper types: Node, Printable\\\"},\\\"metaProperty\\\":{\\\"!type\\\":\\\"fn(meta: Identifier, property: Identifier) -> MetaProperty\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'MetaProperty'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"tryStatement\\\":{\\\"!type\\\":\\\"fn(block: BlockStatement, handler: CatchClause|null, finalizer: BlockStatement|null) -> TryStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TryStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"arrayTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(elementType: Type) -> ArrayTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ArrayTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"taggedTemplateExpression\\\":{\\\"!type\\\":\\\"fn(tag: Expression, quasi: TemplateLiteral) -> TaggedTemplateExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TaggedTemplateExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"spreadPropertyPattern\\\":{\\\"!type\\\":\\\"fn(argument: Pattern) -> SpreadPropertyPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SpreadPropertyPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"stringTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> StringTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'StringTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"objectTypeProperty\\\":{\\\"!type\\\":\\\"fn(key: Literal|Identifier, value: Type, optional: boolean) -> ObjectTypeProperty\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectTypeProperty'.\\\\nSuper types: Node, Printable\\\"},\\\"labeledStatement\\\":{\\\"!type\\\":\\\"fn(label: Identifier, body: Statement) -> LabeledStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'LabeledStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"typeAlias\\\":{\\\"!type\\\":\\\"fn(id: Identifier, typeParameters: TypeParameterDeclaration|null, right: Type) -> TypeAlias\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeAlias'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"exportSpecifier\\\":{\\\"!type\\\":\\\"fn(local: Identifier|null, exported: Identifier) -> ExportSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportSpecifier'.\\\\nSuper types: ModuleSpecifier, Specifier, Node, Printable\\\"},\\\"whileStatement\\\":{\\\"!type\\\":\\\"fn(test: Expression, body: Statement) -> WhileStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'WhileStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"functionDeclaration\\\":{\\\"!type\\\":\\\"fn(id: Identifier, params: [Pattern], body: BlockStatement|Expression, generator: boolean, expression: boolean) -> FunctionDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'FunctionDeclaration'.\\\\nSuper types: Function, Declaration, Statement, Node, Printable\\\"},\\\"stringLiteralTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(value: string, raw: string) -> StringLiteralTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'StringLiteralTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"callExpression\\\":{\\\"!type\\\":\\\"fn(callee: Expression, arguments: [Expression|SpreadElement]) -> CallExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'CallExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"assignmentPattern\\\":{\\\"!type\\\":\\\"fn(left: Pattern, right: Expression) -> AssignmentPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'AssignmentPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"declareVariable\\\":{\\\"!type\\\":\\\"fn(id: Identifier) -> DeclareVariable\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DeclareVariable'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"assignmentExpression\\\":{\\\"!type\\\":\\\"fn(operator: string, left: Pattern, right: Expression) -> AssignmentExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'AssignmentExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n operator (string) one of: =|+=|-=|*=|/=|%=|<<=|>>=|>>>=||=|^=|&=\\\\n\\\"},\\\"arrayPattern\\\":{\\\"!type\\\":\\\"fn(elements: [Pattern|SpreadElement|null]) -> ArrayPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ArrayPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"generatorExpression\\\":{\\\"!type\\\":\\\"fn(body: Expression, blocks: [ComprehensionBlock], filter: Expression|null) -> GeneratorExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'GeneratorExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"forStatement\\\":{\\\"!type\\\":\\\"fn(init: VariableDeclaration|Expression|null, test: Expression|null, update: Expression|null, body: Statement) -> ForStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ForStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"graphExpression\\\":{\\\"!type\\\":\\\"fn(index: number, expression: Literal) -> GraphExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'GraphExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n ${name} (number) must be >= 0\\\"},\\\"commentLine\\\":{\\\"!type\\\":\\\"fn(value: string, leading: boolean, trailing: boolean) -> CommentLine\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'CommentLine'.\\\\nSuper types: Comment, Printable\\\"},\\\"functionExpression\\\":{\\\"!type\\\":\\\"fn(id: Identifier|null, params: [Pattern], body: BlockStatement|Expression, generator: boolean, expression: boolean) -> FunctionExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'FunctionExpression'.\\\\nSuper types: Function, Expression, Pattern, Node, Printable\\\"},\\\"thisExpression\\\":{\\\"!type\\\":\\\"fn() -> ThisExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ThisExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"jsxOpeningElement\\\":{\\\"!type\\\":\\\"fn(name: JSXIdentifier|JSXNamespacedName|JSXMemberExpression, attributes: [JSXAttribute|JSXSpreadAttribute], selfClosing: boolean) -> JSXOpeningElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXOpeningElement'.\\\\nSuper types: Node, Printable\\\"},\\\"exportNamedDeclaration\\\":{\\\"!type\\\":\\\"fn(declaration: Declaration|null, specifiers: [ExportSpecifier], source: Literal|null) -> ExportNamedDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportNamedDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"mixedTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> MixedTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'MixedTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"objectTypeCallProperty\\\":{\\\"!type\\\":\\\"fn(value: FunctionTypeAnnotation) -> ObjectTypeCallProperty\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectTypeCallProperty'.\\\\nSuper types: Node, Printable\\\"},\\\"classBody\\\":{\\\"!type\\\":\\\"fn(body: [MethodDefinition|VariableDeclarator|ClassPropertyDefinition|ClassProperty]) -> ClassBody\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassBody'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"position\\\":{\\\"!type\\\":\\\"fn(line: number, column: number) -> Position\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Position'.\\\\n\\\\n ${name} (number) must be >= 1${name} (number) must be >= 0\\\"},\\\"importSpecifier\\\":{\\\"!type\\\":\\\"fn(imported: Identifier, local: Identifier|null) -> ImportSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ImportSpecifier'.\\\\nSuper types: ModuleSpecifier, Specifier, Node, Printable\\\"},\\\"jsxExpressionContainer\\\":{\\\"!type\\\":\\\"fn(expression: Expression) -> JSXExpressionContainer\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXExpressionContainer'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"booleanTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> BooleanTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BooleanTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"classProperty\\\":{\\\"!type\\\":\\\"fn(key: Literal|Identifier|Expression, value: Expression|null, typeAnnotation: TypeAnnotation|null, static: boolean) -> ClassProperty\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassProperty'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"withStatement\\\":{\\\"!type\\\":\\\"fn(object: Expression, body: Statement) -> WithStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'WithStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"typeAnnotation\\\":{\\\"!type\\\":\\\"fn(typeAnnotation: Type) -> TypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeAnnotation'.\\\\nSuper types: Node, Printable\\\"},\\\"variableDeclarator\\\":{\\\"!type\\\":\\\"fn(id: Pattern, init: Expression|null) -> VariableDeclarator\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'VariableDeclarator'.\\\\nSuper types: Node, Printable\\\"},\\\"exportDeclaration\\\":{\\\"!type\\\":\\\"fn(default: boolean, declaration: Declaration|Expression|null, specifiers: [ExportSpecifier|ExportBatchSpecifier], source: Literal|null) -> ExportDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"jsxAttribute\\\":{\\\"!type\\\":\\\"fn(name: JSXIdentifier|JSXNamespacedName, value: Literal|JSXExpressionContainer|null) -> JSXAttribute\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXAttribute'.\\\\nSuper types: Node, Printable\\\"},\\\"spreadElementPattern\\\":{\\\"!type\\\":\\\"fn(argument: Pattern) -> SpreadElementPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SpreadElementPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"jsxIdentifier\\\":{\\\"!type\\\":\\\"fn(name: string) -> JSXIdentifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXIdentifier'.\\\\nSuper types: Identifier, Expression, Pattern, Node, Printable\\\"},\\\"objectTypeIndexer\\\":{\\\"!type\\\":\\\"fn(id: Identifier, key: Type, value: Type) -> ObjectTypeIndexer\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectTypeIndexer'.\\\\nSuper types: Node, Printable\\\"},\\\"block\\\":{\\\"!type\\\":\\\"fn(value: string, leading: boolean, trailing: boolean) -> Block\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Block'.\\\\nSuper types: Comment, Printable\\\"},\\\"declareModule\\\":{\\\"!type\\\":\\\"fn(id: Identifier|Literal, body: BlockStatement) -> DeclareModule\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DeclareModule'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"exportDefaultDeclaration\\\":{\\\"!type\\\":\\\"fn(declaration: Declaration|Expression) -> ExportDefaultDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportDefaultDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"emptyStatement\\\":{\\\"!type\\\":\\\"fn() -> EmptyStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'EmptyStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"sequenceExpression\\\":{\\\"!type\\\":\\\"fn(expressions: [Expression]) -> SequenceExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SequenceExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"spreadProperty\\\":{\\\"!type\\\":\\\"fn(argument: Expression) -> SpreadProperty\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SpreadProperty'.\\\\nSuper types: Node, Printable\\\"},\\\"awaitExpression\\\":{\\\"!type\\\":\\\"fn(argument: Expression|null, all: boolean) -> AwaitExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'AwaitExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"classDeclaration\\\":{\\\"!type\\\":\\\"fn(id: Identifier|null, body: ClassBody, superClass: Expression|null) -> ClassDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"literal\\\":{\\\"!type\\\":\\\"fn(value: string|boolean|null|number|RegExp) -> Literal\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Literal'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"letExpression\\\":{\\\"!type\\\":\\\"fn(head: [VariableDeclarator], body: Expression) -> LetExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'LetExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"exportAllDeclaration\\\":{\\\"!type\\\":\\\"fn(exported: Identifier|null, source: Literal) -> ExportAllDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportAllDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"forOfStatement\\\":{\\\"!type\\\":\\\"fn(left: VariableDeclaration|Expression, right: Expression, body: Statement) -> ForOfStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ForOfStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"doWhileStatement\\\":{\\\"!type\\\":\\\"fn(body: Statement, test: Expression) -> DoWhileStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DoWhileStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"booleanLiteralTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(value: boolean, raw: string) -> BooleanLiteralTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BooleanLiteralTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"genericTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(id: Identifier|QualifiedTypeIdentifier, typeParameters: TypeParameterInstantiation|null) -> GenericTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'GenericTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"declareExportDeclaration\\\":{\\\"!type\\\":\\\"fn(default: boolean, declaration: DeclareVariable|DeclareFunction|DeclareClass|Type|null, specifiers: [ExportSpecifier|ExportBatchSpecifier], source: Literal|null) -> DeclareExportDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DeclareExportDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"classExpression\\\":{\\\"!type\\\":\\\"fn(id: Identifier|null, body: ClassBody, superClass: Expression|null) -> ClassExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"templateElement\\\":{\\\"!type\\\":\\\"fn(value: TemplateElementValue, tail: boolean) -> TemplateElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TemplateElement'.\\\\nSuper types: Node, Printable\\\\n\\\\n value (object) has form {cooked: string, raw: string}\\\"},\\\"intersectionTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(types: [Type]) -> IntersectionTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'IntersectionTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"noop\\\":{\\\"!type\\\":\\\"fn() -> Noop\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Noop'.\\\\nSuper types: Node, Printable\\\"},\\\"jsxSpreadAttribute\\\":{\\\"!type\\\":\\\"fn(argument: Expression) -> JSXSpreadAttribute\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXSpreadAttribute'.\\\\nSuper types: Node, Printable\\\"},\\\"line\\\":{\\\"!type\\\":\\\"fn(value: string, leading: boolean, trailing: boolean) -> Line\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Line'.\\\\nSuper types: Comment, Printable\\\"},\\\"jsxText\\\":{\\\"!type\\\":\\\"fn(value: string) -> JSXText\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXText'.\\\\nSuper types: Literal, Expression, Pattern, Node, Printable\\\"},\\\"voidTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> VoidTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'VoidTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"comprehensionExpression\\\":{\\\"!type\\\":\\\"fn(body: Expression, blocks: [ComprehensionBlock], filter: Expression|null) -> ComprehensionExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ComprehensionExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"jsxClosingElement\\\":{\\\"!type\\\":\\\"fn(name: JSXIdentifier|JSXNamespacedName|JSXMemberExpression) -> JSXClosingElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'JSXClosingElement'.\\\\nSuper types: Node, Printable\\\"},\\\"typeParameterDeclaration\\\":{\\\"!type\\\":\\\"fn(params: [Identifier]) -> TypeParameterDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeParameterDeclaration'.\\\\nSuper types: Node, Printable\\\"},\\\"super\\\":{\\\"!type\\\":\\\"fn() -> Super\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Super'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"numberTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> NumberTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'NumberTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"throwStatement\\\":{\\\"!type\\\":\\\"fn(argument: Expression) -> ThrowStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ThrowStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"catchClause\\\":{\\\"!type\\\":\\\"fn(param: Pattern, guard: Expression|null, body: BlockStatement) -> CatchClause\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'CatchClause'.\\\\nSuper types: Node, Printable\\\"},\\\"variableDeclaration\\\":{\\\"!type\\\":\\\"fn(kind: string, declarations: [VariableDeclarator|Identifier]) -> VariableDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'VariableDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\\n\\\\n kind (string) one of: var|let|const\\\\n\\\"},\\\"exportDefaultSpecifier\\\":{\\\"!type\\\":\\\"fn(exported: Identifier) -> ExportDefaultSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportDefaultSpecifier'.\\\\nSuper types: Specifier, Node, Printable\\\"},\\\"newExpression\\\":{\\\"!type\\\":\\\"fn(callee: Expression, arguments: [Expression|SpreadElement]) -> NewExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'NewExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"graphIndexExpression\\\":{\\\"!type\\\":\\\"fn(index: number) -> GraphIndexExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'GraphIndexExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n ${name} (number) must be >= 0\\\"},\\\"updateExpression\\\":{\\\"!type\\\":\\\"fn(operator: string, argument: Expression, prefix: boolean) -> UpdateExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'UpdateExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n operator (string) one of: ++|--\\\\n\\\"},\\\"commentBlock\\\":{\\\"!type\\\":\\\"fn(value: string, leading: boolean, trailing: boolean) -> CommentBlock\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'CommentBlock'.\\\\nSuper types: Comment, Printable\\\"},\\\"typeCastExpression\\\":{\\\"!type\\\":\\\"fn(expression: Expression, typeAnnotation: TypeAnnotation) -> TypeCastExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TypeCastExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"property\\\":{\\\"!type\\\":\\\"fn(kind: string, key: Literal|Identifier|Expression, value: Expression|Pattern) -> Property\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Property'.\\\\nSuper types: Node, Printable\\\\n\\\\n kind (string) one of: init|get|set\\\\n\\\"},\\\"interfaceDeclaration\\\":{\\\"!type\\\":\\\"fn(id: Identifier, body: ObjectTypeAnnotation, extends: [InterfaceExtends]) -> InterfaceDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'InterfaceDeclaration'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"functionTypeParam\\\":{\\\"!type\\\":\\\"fn(name: Identifier, typeAnnotation: Type, optional: boolean) -> FunctionTypeParam\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'FunctionTypeParam'.\\\\nSuper types: Node, Printable\\\"},\\\"returnStatement\\\":{\\\"!type\\\":\\\"fn(argument: Expression|null) -> ReturnStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ReturnStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"exportBatchSpecifier\\\":{\\\"!type\\\":\\\"fn() -> ExportBatchSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ExportBatchSpecifier'.\\\\nSuper types: Specifier, Node, Printable\\\"},\\\"decorator\\\":{\\\"!type\\\":\\\"fn(expression: Expression) -> Decorator\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'Decorator'.\\\\nSuper types: Node, Printable\\\"},\\\"sourceLocation\\\":{\\\"!type\\\":\\\"fn(start: Position, end: Position, source: string|null) -> SourceLocation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SourceLocation'.\\\"},\\\"file\\\":{\\\"!type\\\":\\\"fn(program: Program) -> File\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'File'.\\\\nSuper types: Node, Printable\\\"},\\\"binaryExpression\\\":{\\\"!type\\\":\\\"fn(operator: string, left: Expression, right: Expression) -> BinaryExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BinaryExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n operator (string) one of: ==|!=|===|!==|<|<=|>|>=|<<|>>|>>>|+|-|*|/|%|&|||^|in|instanceof|..\\\\n\\\"},\\\"propertyPattern\\\":{\\\"!type\\\":\\\"fn(key: Literal|Identifier|Expression, pattern: Pattern) -> PropertyPattern\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'PropertyPattern'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"importDeclaration\\\":{\\\"!type\\\":\\\"fn(specifiers: [ImportSpecifier|ImportNamespaceSpecifier|ImportDefaultSpecifier], source: Literal) -> ImportDeclaration\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ImportDeclaration'.\\\\nSuper types: Declaration, Statement, Node, Printable\\\"},\\\"doExpression\\\":{\\\"!type\\\":\\\"fn(body: [Statement]) -> DoExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'DoExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"restElement\\\":{\\\"!type\\\":\\\"fn(argument: Pattern) -> RestElement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'RestElement'.\\\\nSuper types: Pattern, Node, Printable\\\"},\\\"anyTypeAnnotation\\\":{\\\"!type\\\":\\\"fn() -> AnyTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'AnyTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"templateLiteral\\\":{\\\"!type\\\":\\\"fn(quasis: [TemplateElement], expressions: [Expression]) -> TemplateLiteral\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TemplateLiteral'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"nullableTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(typeAnnotation: Type) -> NullableTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'NullableTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"continueStatement\\\":{\\\"!type\\\":\\\"fn(label: Identifier|null) -> ContinueStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ContinueStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"arrayExpression\\\":{\\\"!type\\\":\\\"fn(elements: [Expression|SpreadElement|RestElement|null]) -> ArrayExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ArrayExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"classImplements\\\":{\\\"!type\\\":\\\"fn(id: Identifier) -> ClassImplements\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ClassImplements'.\\\\nSuper types: Node, Printable\\\"},\\\"objectTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(properties: [ObjectTypeProperty]) -> ObjectTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"memberExpression\\\":{\\\"!type\\\":\\\"fn(object: Expression, property: Identifier|Expression, computed: boolean) -> MemberExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'MemberExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"comprehensionBlock\\\":{\\\"!type\\\":\\\"fn(left: Pattern, right: Expression, each: boolean) -> ComprehensionBlock\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ComprehensionBlock'.\\\\nSuper types: Node, Printable\\\"},\\\"breakStatement\\\":{\\\"!type\\\":\\\"fn(label: Identifier|null) -> BreakStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BreakStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"arrowFunctionExpression\\\":{\\\"!type\\\":\\\"fn(params: [Pattern], body: BlockStatement|Expression, expression: boolean) -> ArrowFunctionExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ArrowFunctionExpression'.\\\\nSuper types: Function, Expression, Pattern, Node, Printable\\\"},\\\"switchCase\\\":{\\\"!type\\\":\\\"fn(test: Expression|null, consequent: [Statement]) -> SwitchCase\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'SwitchCase'.\\\\nSuper types: Node, Printable\\\"},\\\"blockStatement\\\":{\\\"!type\\\":\\\"fn(body: [Statement]) -> BlockStatement\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'BlockStatement'.\\\\nSuper types: Statement, Node, Printable\\\"},\\\"unaryExpression\\\":{\\\"!type\\\":\\\"fn(operator: string, argument: Expression, prefix: boolean) -> UnaryExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'UnaryExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\\n\\\\n operator (string) one of: -|+|!|~|typeof|void|delete\\\\n\\\"},\\\"objectExpression\\\":{\\\"!type\\\":\\\"fn(properties: [Property|SpreadProperty]) -> ObjectExpression\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ObjectExpression'.\\\\nSuper types: Expression, Pattern, Node, Printable\\\"},\\\"tupleTypeAnnotation\\\":{\\\"!type\\\":\\\"fn(types: [Type]) -> TupleTypeAnnotation\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'TupleTypeAnnotation'.\\\\nSuper types: Type, Node, Printable\\\"},\\\"interfaceExtends\\\":{\\\"!type\\\":\\\"fn(id: Identifier) -> InterfaceExtends\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'InterfaceExtends'.\\\\nSuper types: Node, Printable\\\"},\\\"importDefaultSpecifier\\\":{\\\"!type\\\":\\\"fn(local: Identifier|null) -> ImportDefaultSpecifier\\\",\\\"!doc\\\":\\\"Builds an AST node of type 'ImportDefaultSpecifier'.\\\\nSuper types: ModuleSpecifier, Specifier, Node, Printable\\\"}}},\\\"Collection\\\":{\\\"!type:\\\":\\\"fn(source: [+NodePath], parent: +Collection)\\\",\\\"prototype\\\":{\\\"filter\\\":{\\\"!type\\\":\\\"fn(callback: fn(path: +NodePath) -> bool) -> +Collection\\\",\\\"!doc\\\":\\\"Returns a new collection containing the nodes for which the callback returns true.\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath\\\"]},\\\"forEach\\\":{\\\"!type\\\":\\\"fn(callback: fn(path: +NodePath)) -> !this\\\",\\\"!doc\\\":\\\"Executes callback for each NodePath in the collection.\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath\\\"]},\\\"map\\\":{\\\"!type\\\":\\\"fn(callback: fn(path: +NodePath) -> +NodePath|[+NodePath]) -> +Collection\\\",\\\"!doc\\\":\\\"Executes the callback for every path in the collection and returns a\\\\nnew collection from the return values (which must be paths).\\\\n\\\\nThe callback can return null to remove the element from the new collection.\\\\n\\\\nIf an array is returned, it will be flattened into the result colletion.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath\\\"]},\\\"size\\\":{\\\"!type\\\":\\\"fn() -> number\\\",\\\"!doc\\\":\\\"Returns the number of elements in this collection.\\\"},\\\"nodes\\\":{\\\"!type\\\":\\\"fn() -> [ASTNode]\\\",\\\"!doc\\\":\\\"Returns an array of AST nodes in this collection.\\\"},\\\"paths\\\":{\\\"!type\\\":\\\"fn() -> [NodePath]\\\",\\\"!doc\\\":\\\"Returns an array of NodePaths in this this collection.\\\"},\\\"toSource\\\":{\\\"!type\\\":\\\"fn(options?: object) -> string\\\",\\\"!doc\\\":\\\"Converts the AST back to a string, using recast. The options are directly passed to recast's printer.\\\"},\\\"at\\\":{\\\"!type\\\":\\\"fn(index: number) -> +Collection\\\",\\\"!doc\\\":\\\"Returns a new collection containing only the element at the position\\\\n`index`. In case of a negative index, the element is taken from the end.\\\\n\\\"},\\\"get\\\":{\\\"!type\\\":\\\"fn(name: string|number) -> +NodePath\\\",\\\"!doc\\\":\\\"Calls \\\\\\\"get\\\\\\\" on the first path (same as \\\\\\\"collection.paths(0).get(...)\\\\\\\").\\\"},\\\"find\\\":{\\\"!type\\\":\\\"fn(type: TypeDefinition, filter?: object) -> +Collection\\\",\\\"!doc\\\":\\\"Finds descendants of a specific type within the Nodes of this collection.\\\"},\\\"closestScope\\\":{\\\"!type\\\":\\\"fn() -> +Collection\\\",\\\"!doc\\\":\\\"Returns a collection containing the Paths that create the scope which contains the selected Nodes.\\\"},\\\"closest\\\":{\\\"!type\\\":\\\"fn(type: TypeDefinition, filter?: object) -> +Collection\\\",\\\"!doc\\\":\\\"For each node in the collection, traverses the AST up and finds the closest node that matches the type and filter.\\\"},\\\"replaceWith\\\":{\\\"!type\\\":\\\"fn(nodes: ASTNode|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this\\\",\\\"!doc\\\":\\\"Replaces the selected nodes with the provided node(s). If a function is\\\\nprovided, it is executed for every node and the node is replaced with\\\\nthe return value of the function.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath number\\\"]},\\\"insertBefore\\\":{\\\"!type\\\":\\\"fn(nodes: ASTNode|[ASTNode]|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this\\\",\\\"!doc\\\":\\\"Inserts the new node(s) before each of the selected nodes. If a function\\\\nis provided, it is executed for every node and return value is inserted\\\\nbefore that node.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath\\\"]},\\\"insertAfter\\\":{\\\"!type\\\":\\\"fn(nodes: ASTNode|[ASTNode]|fn(path: +NodePath, index: number) -> ASTNode|[ASTNode]) -> !this\\\",\\\"!doc\\\":\\\"Inserts the new node(s) after each of the selected nodes. If a function\\\\nis provided, it is executed for every node and return value is inserted\\\\nafter that node.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=+NodePath +NodePath\\\"]},\\\"remove\\\":{\\\"!type\\\":\\\"fn() -> !this\\\",\\\"!doc\\\":\\\"Calls \\\\\\\"prune\\\\\\\" on every selected NodePath.\\\"}}},\\\"NodePath\\\":{\\\"!type\\\":\\\"fn(value: ASTNode|[ASTNode], parentPath: +NodePath, name: string)\\\",\\\"!effects\\\":[\\\"propagate !0 !this.value\\\"],\\\"prototype\\\":{\\\"parentPath\\\":\\\"+NodePath\\\",\\\"name\\\":\\\"string\\\",\\\"node\\\":{\\\"!type\\\":\\\"ASTNode\\\",\\\"!doc\\\":\\\"The value of the first ancestor NodePath whose value is a Node.\\\"},\\\"parent\\\":{\\\"!type\\\":\\\"+NodePath\\\",\\\"!doc\\\":\\\"The first ancestor Path whose value is a Node distinct from this.node.\\\"},\\\"scope\\\":{\\\"!type\\\":\\\"+Scope\\\",\\\"!doc\\\":\\\"The closest enclosing scope that governs this node.\\\"},\\\"replace\\\":{\\\"!type\\\":\\\"fn(newNode?: ASTNode|[ASTNode])\\\",\\\"!doc\\\":\\\"Replaces the Node(s) represented by this Path, or removes it if no argument is passed.\\\"},\\\"prune\\\":{\\\"!type\\\":\\\"fn()\\\",\\\"!doc\\\":\\\"Removes this Node and any ancestor that would become \\\\\\\"empty\\\\\\\".\\\"},\\\"getValueProperty\\\":{\\\"!type\\\":\\\"fn(name: string) -> ?\\\",\\\"!doc\\\":\\\"Returns the value of of that property. This is different from 'path.node.value' because\\\\nit will return the default value for that field as defined in the Node definition.\\\\n\\\"},\\\"each\\\":{\\\"!type\\\":\\\"fn(callback: fn(childPath: +NodePath), context?: ?)\\\",\\\"!doc\\\":\\\"If the Path represents an array of nodes, applies the provided function to each\\\\nNode in the array.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.value.<i> !this\\\"]},\\\"map\\\":{\\\"!type\\\":\\\"fn(callback: fn(childPath: +NodePath) -> ?, context?: ?) -> [?]\\\",\\\"!doc\\\":\\\"If the Path represents an array of nodes, applies the provided function to each\\\\nNode in the array and returns an array of the results.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.value.<i> !this\\\"]},\\\"filter\\\":{\\\"!type\\\":\\\"fn(callback: fn(childPath: +NodePath) -> bool, context?: ?) -> [+NodePath]\\\",\\\"!doc\\\":\\\"If the Path represents an array of nodes, applies the provided function to each\\\\nNode in the array and returns an array of Paths for which the callback returned true.\\\\n\\\",\\\"!effects\\\":[\\\"call !0 this=!1 !this.value.<i> !this\\\"]},\\\"shift\\\":{\\\"!type\\\":\\\"fn() -> +NodePath\\\",\\\"!doc\\\":\\\"If the Path represents an array of nodes, removes the first Node in that array and returns it.\\\\n\\\"},\\\"unshift\\\":{\\\"!type\\\":\\\"fn(newNode: ASTNode)\\\"},\\\"push\\\":{\\\"!type\\\":\\\"fn(newNode: ASTNode)\\\"},\\\"pop\\\":{\\\"!type\\\":\\\"fn() -> NodePath\\\"},\\\"insertAt\\\":{\\\"!type\\\":\\\"fn(index: number, node: ASTNode)\\\"},\\\"insertBefore\\\":{\\\"!type\\\":\\\"fn(node: ASTNode)\\\"},\\\"insertAfter\\\":{\\\"!type\\\":\\\"fn(node: ASTNode)\\\"}}},\\\"ASTNode\\\":{\\\"type\\\":{\\\"!type\\\":\\\"string\\\",\\\"!doc\\\":\\\"The type of this AST node.\\\"}},\\\"Scope\\\":{\\\"!type\\\":\\\"fn(path: +NodePath, parentScope: +Scope)\\\",\\\"isEstablishedBy\\\":\\\"fn(node: ASTNode) -> bool\\\",\\\"prototype\\\":{\\\"declares\\\":\\\"fn(name: string) -> bool\\\",\\\"declaresType\\\":\\\"fn(name: string) -> bool\\\",\\\"declareTemporary\\\":\\\"fn(prefix: string) -> Identifier\\\",\\\"injectTemporary\\\":\\\"fn(prefix: string, init?: ASTNode) -> Identifier\\\",\\\"getBindings\\\":\\\"fn() -> [ASTNode]\\\",\\\"getTypes\\\":\\\"fn() -> [ASTNode]\\\",\\\"lookup\\\":\\\"fn(name: string) -> +Scope\\\",\\\"lookupType\\\":\\\"fn(name: string) -> +Scope\\\"},\\\"getGlobalScope\\\":\\\"fn() -> +Scope\\\"},\\\"ModuleSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ConditionalExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Node\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"MixedTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLAttributeSelector\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXNamespacedName\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"GenericTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLFunctionQualifiedIdentifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassPropertyDefinition\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"NullableTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ForInStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"YieldExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassProperty\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLDefaultDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TemplateElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportDefaultDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TupleTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"GraphExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"MemberExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ImportDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"File\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXSpreadAttribute\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLName\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TemplateLiteral\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassImplements\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeAlias\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"StringLiteralTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TaggedTemplateExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Identifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BooleanLiteralTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"MethodDefinition\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Line\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"GeneratorExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"LetStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Literal\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BooleanTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXAttribute\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportNamespaceSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ArrayTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BlockStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"WithStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLProcessingInstruction\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SpreadPropertyPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"WhileStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ThrowStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"InterfaceDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeofTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"LetExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ContinueStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Printable\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ThisExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"IntersectionTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXClosingElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DeclareFunction\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"VariableDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BreakStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ImportSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ParenthesizedExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"RestElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Specifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ArrayExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLAnyName\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportAllDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SourceLocation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Statement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Position\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Program\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Comment\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"AssignmentPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectTypeIndexer\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ArrowFunctionExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLAttribute\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Noop\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DeclareClass\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLEndTag\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXIdentifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"VoidTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ComprehensionBlock\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"FunctionTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ComprehensionExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"MetaProperty\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLQualifiedIdentifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DoWhileStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"EmptyStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"VariableDeclarator\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"AssignmentExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Declaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DoExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"GraphIndexExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DeclareVariable\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectTypeProperty\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"IfStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BindExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"LogicalExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"CommentLine\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ObjectTypeCallProperty\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"FunctionDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"NewExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeCastExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLStartTag\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLPointTag\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Pattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ImportDefaultSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLFilterExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLEscape\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXEmptyExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SequenceExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"InterfaceExtends\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"PropertyPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"CatchClause\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SpreadElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"FunctionTypeParam\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Property\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXOpeningElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"StringTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ForStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Decorator\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SpreadElementPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXMemberExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"FunctionExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"BinaryExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TryStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Expression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportNamedDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SwitchStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Block\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportBatchSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExpressionStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ArrayPattern\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLList\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ReturnStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"CallExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DeclareModule\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"NumberLiteralTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Type\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeParameterDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLText\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Function\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"UnaryExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XML\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"Super\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TypeParameterInstantiation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLComment\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"MemberTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SwitchCase\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"AwaitExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ExportDefaultSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLElement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"AnyTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"CommentBlock\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassBody\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ImportNamespaceSpecifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXExpressionContainer\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DeclareExportDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"UnionTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"XMLCdata\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"JSXText\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"QualifiedTypeIdentifier\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"DebuggerStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ForOfStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"LabeledStatement\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"SpreadProperty\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"UpdateExpression\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"ClassDeclaration\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"NumberTypeAnnotation\\\":{\\\"!proto\\\":\\\"ASTNode\\\"},\\\"TemplateElementValue\\\":{\\\"cooked\\\":\\\"string\\\",\\\"raw\\\":\\\"string\\\"},\\\"TypeDefinition\\\":{\\\"name\\\":\\\"string\\\",\\\"check\\\":\\\"fn(node: Node, deep: ?) -> bool\\\"}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGVmcy9qc2NvZGVzaGlmdC5qc29uLmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/defs/jscodeshift.json\n");

/***/ })

}]);