(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[32],{

/***/ "./node_modules/chevrotain/lib_esm/src/api.js":
/*!****************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/api.js ***!
  \****************************************************/
/*! exports provided: VERSION, Parser, CstParser, EmbeddedActionsParser, ParserDefinitionErrorType, EMPTY_ALT, Lexer, LexerDefinitionErrorType, createToken, createTokenInstance, EOF, tokenLabel, tokenMatcher, tokenName, defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider, defaultParserErrorProvider, EarlyExitException, isRecognitionException, MismatchedTokenException, NotAllInputParsedException, NoViableAltException, defaultLexerErrorProvider, Alternation, Flat, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal, serializeGrammar, serializeProduction, GAstVisitor, assignOccurrenceIndices, resolveGrammar, validateGrammar, clearCache, createSyntaxDiagramsCode, generateParserFactory, generateParserModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearCache\", function() { return clearCache; });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"./node_modules/chevrotain/lib_esm/src/version.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return _version__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"]; });\n\n/* harmony import */ var _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse/parser/parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"Parser\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CstParser\", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"CstParser\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EmbeddedActionsParser\", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"EmbeddedActionsParser\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ParserDefinitionErrorType\", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EMPTY_ALT\", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"EMPTY_ALT\"]; });\n\n/* harmony import */ var _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scan/lexer_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Lexer\", function() { return _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__[\"Lexer\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LexerDefinitionErrorType\", function() { return _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__[\"LexerDefinitionErrorType\"]; });\n\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"createToken\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"createToken\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"createTokenInstance\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"createTokenInstance\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EOF\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"EOF\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tokenLabel\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"tokenLabel\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tokenMatcher\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"tokenMatcher\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tokenName\", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__[\"tokenName\"]; });\n\n/* harmony import */ var _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parse/errors_public */ \"./node_modules/chevrotain/lib_esm/src/parse/errors_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultGrammarResolverErrorProvider\", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__[\"defaultGrammarResolverErrorProvider\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultGrammarValidatorErrorProvider\", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__[\"defaultGrammarValidatorErrorProvider\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultParserErrorProvider\", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__[\"defaultParserErrorProvider\"]; });\n\n/* harmony import */ var _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parse/exceptions_public */ \"./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EarlyExitException\", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__[\"EarlyExitException\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isRecognitionException\", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__[\"isRecognitionException\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MismatchedTokenException\", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__[\"MismatchedTokenException\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NotAllInputParsedException\", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__[\"NotAllInputParsedException\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NoViableAltException\", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__[\"NoViableAltException\"]; });\n\n/* harmony import */ var _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scan/lexer_errors_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"defaultLexerErrorProvider\", function() { return _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_6__[\"defaultLexerErrorProvider\"]; });\n\n/* harmony import */ var _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parse/grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Alternation\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Alternation\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Flat\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Flat\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NonTerminal\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"NonTerminal\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Option\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Option\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Repetition\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Repetition\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RepetitionMandatory\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"RepetitionMandatory\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RepetitionMandatoryWithSeparator\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"RepetitionMandatoryWithSeparator\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RepetitionWithSeparator\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"RepetitionWithSeparator\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Rule\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Rule\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Terminal\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"Terminal\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"serializeGrammar\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"serializeGrammar\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"serializeProduction\", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__[\"serializeProduction\"]; });\n\n/* harmony import */ var _parse_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse/grammar/gast/gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GAstVisitor\", function() { return _parse_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_8__[\"GAstVisitor\"]; });\n\n/* harmony import */ var _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse/grammar/gast/gast_resolver_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"assignOccurrenceIndices\", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__[\"assignOccurrenceIndices\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"resolveGrammar\", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__[\"resolveGrammar\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"validateGrammar\", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__[\"validateGrammar\"]; });\n\n/* harmony import */ var _diagrams_render_public__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./diagrams/render_public */ \"./node_modules/chevrotain/lib_esm/src/diagrams/render_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"createSyntaxDiagramsCode\", function() { return _diagrams_render_public__WEBPACK_IMPORTED_MODULE_10__[\"createSyntaxDiagramsCode\"]; });\n\n/* harmony import */ var _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./generate/generate_public */ \"./node_modules/chevrotain/lib_esm/src/generate/generate_public.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"generateParserFactory\", function() { return _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__[\"generateParserFactory\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"generateParserModule\", function() { return _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__[\"generateParserModule\"]; });\n\n// semantic version\n\n\n\n// Tokens utilities\n\n// Other Utilities\n\n\n\n// grammar reflection API\n\n// GAST Utilities\n\n\n\n/* istanbul ignore next */\nfunction clearCache() {\n    console.warn(\"The clearCache function was 'soft' removed from the Chevrotain API.\" +\n        \"\\n\\t It performs no action other than printing this message.\" +\n        \"\\n\\t Please avoid using it as it will be completely removed in the future\");\n}\n\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9hcGkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9hcGkuanM/ZmE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzZW1hbnRpYyB2ZXJzaW9uXG5leHBvcnQgeyBWRVJTSU9OIH0gZnJvbSBcIi4vdmVyc2lvblwiO1xuZXhwb3J0IHsgUGFyc2VyLCBDc3RQYXJzZXIsIEVtYmVkZGVkQWN0aW9uc1BhcnNlciwgUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZSwgRU1QVFlfQUxUIH0gZnJvbSBcIi4vcGFyc2UvcGFyc2VyL3BhcnNlclwiO1xuZXhwb3J0IHsgTGV4ZXIsIExleGVyRGVmaW5pdGlvbkVycm9yVHlwZSB9IGZyb20gXCIuL3NjYW4vbGV4ZXJfcHVibGljXCI7XG4vLyBUb2tlbnMgdXRpbGl0aWVzXG5leHBvcnQgeyBjcmVhdGVUb2tlbiwgY3JlYXRlVG9rZW5JbnN0YW5jZSwgRU9GLCB0b2tlbkxhYmVsLCB0b2tlbk1hdGNoZXIsIHRva2VuTmFtZSB9IGZyb20gXCIuL3NjYW4vdG9rZW5zX3B1YmxpY1wiO1xuLy8gT3RoZXIgVXRpbGl0aWVzXG5leHBvcnQgeyBkZWZhdWx0R3JhbW1hclJlc29sdmVyRXJyb3JQcm92aWRlciwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyLCBkZWZhdWx0UGFyc2VyRXJyb3JQcm92aWRlciB9IGZyb20gXCIuL3BhcnNlL2Vycm9yc19wdWJsaWNcIjtcbmV4cG9ydCB7IEVhcmx5RXhpdEV4Y2VwdGlvbiwgaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbiwgTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uLCBOb3RBbGxJbnB1dFBhcnNlZEV4Y2VwdGlvbiwgTm9WaWFibGVBbHRFeGNlcHRpb24gfSBmcm9tIFwiLi9wYXJzZS9leGNlcHRpb25zX3B1YmxpY1wiO1xuZXhwb3J0IHsgZGVmYXVsdExleGVyRXJyb3JQcm92aWRlciB9IGZyb20gXCIuL3NjYW4vbGV4ZXJfZXJyb3JzX3B1YmxpY1wiO1xuLy8gZ3JhbW1hciByZWZsZWN0aW9uIEFQSVxuZXhwb3J0IHsgQWx0ZXJuYXRpb24sIEZsYXQsIE5vblRlcm1pbmFsLCBPcHRpb24sIFJlcGV0aXRpb24sIFJlcGV0aXRpb25NYW5kYXRvcnksIFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yLCBSZXBldGl0aW9uV2l0aFNlcGFyYXRvciwgUnVsZSwgVGVybWluYWwgfSBmcm9tIFwiLi9wYXJzZS9ncmFtbWFyL2dhc3QvZ2FzdF9wdWJsaWNcIjtcbi8vIEdBU1QgVXRpbGl0aWVzXG5leHBvcnQgeyBzZXJpYWxpemVHcmFtbWFyLCBzZXJpYWxpemVQcm9kdWN0aW9uIH0gZnJvbSBcIi4vcGFyc2UvZ3JhbW1hci9nYXN0L2dhc3RfcHVibGljXCI7XG5leHBvcnQgeyBHQXN0VmlzaXRvciB9IGZyb20gXCIuL3BhcnNlL2dyYW1tYXIvZ2FzdC9nYXN0X3Zpc2l0b3JfcHVibGljXCI7XG5leHBvcnQgeyBhc3NpZ25PY2N1cnJlbmNlSW5kaWNlcywgcmVzb2x2ZUdyYW1tYXIsIHZhbGlkYXRlR3JhbW1hciB9IGZyb20gXCIuL3BhcnNlL2dyYW1tYXIvZ2FzdC9nYXN0X3Jlc29sdmVyX3B1YmxpY1wiO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhY2hlKCkge1xuICAgIGNvbnNvbGUud2FybihcIlRoZSBjbGVhckNhY2hlIGZ1bmN0aW9uIHdhcyAnc29mdCcgcmVtb3ZlZCBmcm9tIHRoZSBDaGV2cm90YWluIEFQSS5cIiArXG4gICAgICAgIFwiXFxuXFx0IEl0IHBlcmZvcm1zIG5vIGFjdGlvbiBvdGhlciB0aGFuIHByaW50aW5nIHRoaXMgbWVzc2FnZS5cIiArXG4gICAgICAgIFwiXFxuXFx0IFBsZWFzZSBhdm9pZCB1c2luZyBpdCBhcyBpdCB3aWxsIGJlIGNvbXBsZXRlbHkgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlXCIpO1xufVxuZXhwb3J0IHsgY3JlYXRlU3ludGF4RGlhZ3JhbXNDb2RlIH0gZnJvbSBcIi4vZGlhZ3JhbXMvcmVuZGVyX3B1YmxpY1wiO1xuZXhwb3J0IHsgZ2VuZXJhdGVQYXJzZXJGYWN0b3J5LCBnZW5lcmF0ZVBhcnNlck1vZHVsZSB9IGZyb20gXCIuL2dlbmVyYXRlL2dlbmVyYXRlX3B1YmxpY1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/api.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/diagrams/render_public.js":
/*!***********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/diagrams/render_public.js ***!
  \***********************************************************************/
/*! exports provided: createSyntaxDiagramsCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSyntaxDiagramsCode\", function() { return createSyntaxDiagramsCode; });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"./node_modules/chevrotain/lib_esm/src/version.js\");\n\nfunction createSyntaxDiagramsCode(grammar, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.resourceBase, resourceBase = _c === void 0 ? \"https://unpkg.com/chevrotain@\" + _version__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"] + \"/diagrams/\" : _c, _d = _b.css, css = _d === void 0 ? \"https://unpkg.com/chevrotain@\" + _version__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"] + \"/diagrams/diagrams.css\" : _d;\n    var header = \"\\n<!-- This is a generated file -->\\n<!DOCTYPE html>\\n<meta charset=\\\"utf-8\\\">\\n<style>\\n  body {\\n    background-color: hsl(30, 20%, 95%)\\n  }\\n</style>\\n\\n\";\n    var cssHtml = \"\\n<link rel='stylesheet' href='\" + css + \"'>\\n\";\n    var scripts = \"\\n<script src='\" + resourceBase + \"vendor/railroad-diagrams.js'></script>\\n<script src='\" + resourceBase + \"src/diagrams_builder.js'></script>\\n<script src='\" + resourceBase + \"src/diagrams_behavior.js'></script>\\n<script src='\" + resourceBase + \"src/main.js'></script>\\n\";\n    var diagramsDiv = \"\\n<div id=\\\"diagrams\\\" align=\\\"center\\\"></div>    \\n\";\n    var serializedGrammar = \"\\n<script>\\n    window.serializedGrammar = \" + JSON.stringify(grammar, null, \"  \") + \";\\n</script>\\n\";\n    var initLogic = \"\\n<script>\\n    var diagramsDiv = document.getElementById(\\\"diagrams\\\");\\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\\n</script>\\n\";\n    return (header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic);\n}\n//# sourceMappingURL=render_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9kaWFncmFtcy9yZW5kZXJfcHVibGljLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvZGlhZ3JhbXMvcmVuZGVyX3B1YmxpYy5qcz8zYmY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi4vdmVyc2lvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN5bnRheERpYWdyYW1zQ29kZShncmFtbWFyLCBfYSkge1xuICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLnJlc291cmNlQmFzZSwgcmVzb3VyY2VCYXNlID0gX2MgPT09IHZvaWQgMCA/IFwiaHR0cHM6Ly91bnBrZy5jb20vY2hldnJvdGFpbkBcIiArIFZFUlNJT04gKyBcIi9kaWFncmFtcy9cIiA6IF9jLCBfZCA9IF9iLmNzcywgY3NzID0gX2QgPT09IHZvaWQgMCA/IFwiaHR0cHM6Ly91bnBrZy5jb20vY2hldnJvdGFpbkBcIiArIFZFUlNJT04gKyBcIi9kaWFncmFtcy9kaWFncmFtcy5jc3NcIiA6IF9kO1xuICAgIHZhciBoZWFkZXIgPSBcIlxcbjwhLS0gVGhpcyBpcyBhIGdlbmVyYXRlZCBmaWxlIC0tPlxcbjwhRE9DVFlQRSBodG1sPlxcbjxtZXRhIGNoYXJzZXQ9XFxcInV0Zi04XFxcIj5cXG48c3R5bGU+XFxuICBib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDMwLCAyMCUsIDk1JSlcXG4gIH1cXG48L3N0eWxlPlxcblxcblwiO1xuICAgIHZhciBjc3NIdG1sID0gXCJcXG48bGluayByZWw9J3N0eWxlc2hlZXQnIGhyZWY9J1wiICsgY3NzICsgXCInPlxcblwiO1xuICAgIHZhciBzY3JpcHRzID0gXCJcXG48c2NyaXB0IHNyYz0nXCIgKyByZXNvdXJjZUJhc2UgKyBcInZlbmRvci9yYWlscm9hZC1kaWFncmFtcy5qcyc+PC9zY3JpcHQ+XFxuPHNjcmlwdCBzcmM9J1wiICsgcmVzb3VyY2VCYXNlICsgXCJzcmMvZGlhZ3JhbXNfYnVpbGRlci5qcyc+PC9zY3JpcHQ+XFxuPHNjcmlwdCBzcmM9J1wiICsgcmVzb3VyY2VCYXNlICsgXCJzcmMvZGlhZ3JhbXNfYmVoYXZpb3IuanMnPjwvc2NyaXB0PlxcbjxzY3JpcHQgc3JjPSdcIiArIHJlc291cmNlQmFzZSArIFwic3JjL21haW4uanMnPjwvc2NyaXB0PlxcblwiO1xuICAgIHZhciBkaWFncmFtc0RpdiA9IFwiXFxuPGRpdiBpZD1cXFwiZGlhZ3JhbXNcXFwiIGFsaWduPVxcXCJjZW50ZXJcXFwiPjwvZGl2PiAgICBcXG5cIjtcbiAgICB2YXIgc2VyaWFsaXplZEdyYW1tYXIgPSBcIlxcbjxzY3JpcHQ+XFxuICAgIHdpbmRvdy5zZXJpYWxpemVkR3JhbW1hciA9IFwiICsgSlNPTi5zdHJpbmdpZnkoZ3JhbW1hciwgbnVsbCwgXCIgIFwiKSArIFwiO1xcbjwvc2NyaXB0PlxcblwiO1xuICAgIHZhciBpbml0TG9naWMgPSBcIlxcbjxzY3JpcHQ+XFxuICAgIHZhciBkaWFncmFtc0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcXCJkaWFncmFtc1xcXCIpO1xcbiAgICBtYWluLmRyYXdEaWFncmFtc0Zyb21TZXJpYWxpemVkR3JhbW1hcihzZXJpYWxpemVkR3JhbW1hciwgZGlhZ3JhbXNEaXYpO1xcbjwvc2NyaXB0PlxcblwiO1xuICAgIHJldHVybiAoaGVhZGVyICsgY3NzSHRtbCArIHNjcmlwdHMgKyBkaWFncmFtc0RpdiArIHNlcmlhbGl6ZWRHcmFtbWFyICsgaW5pdExvZ2ljKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlcl9wdWJsaWMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/diagrams/render_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/generate/generate.js":
/*!******************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/generate/generate.js ***!
  \******************************************************************/
/*! exports provided: genUmdModule, genWrapperFunction, genClass, genAllRules, genRule, genTerminal, genNonTerminal, genAlternation, genSingleAlt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genUmdModule\", function() { return genUmdModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genWrapperFunction\", function() { return genWrapperFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genClass\", function() { return genClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genAllRules\", function() { return genAllRules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genRule\", function() { return genRule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genTerminal\", function() { return genTerminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genNonTerminal\", function() { return genNonTerminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genAlternation\", function() { return genAlternation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genSingleAlt\", function() { return genSingleAlt; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parse/grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n\n\n/**\n * Missing features\n * 1. Rule arguments\n * 2. Gates\n * 3. embedded actions\n */\nvar NL = \"\\n\";\nfunction genUmdModule(options) {\n    return \"\\n(function (root, factory) {\\n    if (typeof define === 'function' && define.amd) {\\n        // AMD. Register as an anonymous module.\\n        define(['chevrotain'], factory);\\n    } else if (typeof module === 'object' && module.exports) {\\n        // Node. Does not work with strict CommonJS, but\\n        // only CommonJS-like environments that support module.exports,\\n        // like Node.\\n        module.exports = factory(require('chevrotain'));\\n    } else {\\n        // Browser globals (root is window)\\n        root.returnExports = factory(root.b);\\n    }\\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\\n\\n\" + genClass(options) + \"\\n    \\nreturn {\\n    \" + options.name + \": \" + options.name + \" \\n}\\n}));\\n\";\n}\nfunction genWrapperFunction(options) {\n    return \"    \\n\" + genClass(options) + \"\\nreturn new \" + options.name + \"(tokenVocabulary, config)    \\n\";\n}\nfunction genClass(options) {\n    // TODO: how to pass the token vocabulary? Constructor? other?\n    var result = \"\\nfunction \" + options.name + \"(tokenVocabulary, config) {\\n    // invoke super constructor\\n    // No support for embedded actions currently, so we can 'hardcode'\\n    // The use of CstParser.\\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\\n\\n    const $ = this\\n\\n    \" + genAllRules(options.rules) + \"\\n\\n    // very important to call this after all the rules have been defined.\\n    // otherwise the parser may not work correctly as it will lack information\\n    // derived during the self analysis phase.\\n    this.performSelfAnalysis(this)\\n}\\n\\n// inheritance as implemented in javascript in the previous decade... :(\\n\" + options.name + \".prototype = Object.create(chevrotain.CstParser.prototype)\\n\" + options.name + \".prototype.constructor = \" + options.name + \"    \\n    \";\n    return result;\n}\nfunction genAllRules(rules) {\n    var rulesText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(rules, function (currRule) {\n        return genRule(currRule, 1);\n    });\n    return rulesText.join(\"\\n\");\n}\nfunction genRule(prod, n) {\n    var result = indent(n, \"$.RULE(\\\"\" + prod.name + \"\\\", function() {\") + NL;\n    result += genDefinition(prod.definition, n + 1);\n    result += indent(n + 1, \"})\") + NL;\n    return result;\n}\nfunction genTerminal(prod, n) {\n    var name = prod.terminalType.name;\n    // TODO: potential performance optimization, avoid tokenMap Dictionary access\n    return indent(n, \"$.CONSUME\" + prod.idx + \"(this.tokensMap.\" + name + \")\" + NL);\n}\nfunction genNonTerminal(prod, n) {\n    return indent(n, \"$.SUBRULE\" + prod.idx + \"($.\" + prod.nonTerminalName + \")\" + NL);\n}\nfunction genAlternation(prod, n) {\n    var result = indent(n, \"$.OR\" + prod.idx + \"([\") + NL;\n    var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(prod.definition, function (altDef) { return genSingleAlt(altDef, n + 1); });\n    result += alts.join(\",\" + NL);\n    result += NL + indent(n, \"])\" + NL);\n    return result;\n}\nfunction genSingleAlt(prod, n) {\n    var result = indent(n, \"{\") + NL;\n    if (prod.name) {\n        result += indent(n + 1, \"NAME: \\\"\" + prod.name + \"\\\",\") + NL;\n    }\n    result += indent(n + 1, \"ALT: function() {\") + NL;\n    result += genDefinition(prod.definition, n + 1);\n    result += indent(n + 1, \"}\") + NL;\n    result += indent(n, \"}\");\n    return result;\n}\nfunction genProd(prod, n) {\n    /* istanbul ignore else */\n    if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]) {\n        return genNonTerminal(prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]) {\n        return genDSLRule(\"OPTION\", prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatory\"]) {\n        return genDSLRule(\"AT_LEAST_ONE\", prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatoryWithSeparator\"]) {\n        return genDSLRule(\"AT_LEAST_ONE_SEP\", prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"]) {\n        return genDSLRule(\"MANY_SEP\", prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"]) {\n        return genDSLRule(\"MANY\", prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"]) {\n        return genAlternation(prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]) {\n        return genTerminal(prod, n);\n    }\n    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Flat\"]) {\n        return genDefinition(prod.definition, n);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction genDSLRule(dslName, prod, n) {\n    var result = indent(n, \"$.\" + (dslName + prod.idx) + \"(\");\n    if (prod.name || prod.separator) {\n        result += \"{\" + NL;\n        if (prod.name) {\n            result += indent(n + 1, \"NAME: \\\"\" + prod.name + \"\\\"\") + \",\" + NL;\n        }\n        if (prod.separator) {\n            result +=\n                indent(n + 1, \"SEP: this.tokensMap.\" + prod.separator.name) +\n                    \",\" +\n                    NL;\n        }\n        result += \"DEF: \" + genDefFunction(prod.definition, n + 2) + NL;\n        result += indent(n, \"}\") + NL;\n    }\n    else {\n        result += genDefFunction(prod.definition, n + 1);\n    }\n    result += indent(n, \")\") + NL;\n    return result;\n}\nfunction genDefFunction(definition, n) {\n    var def = \"function() {\" + NL;\n    def += genDefinition(definition, n);\n    def += indent(n, \"}\") + NL;\n    return def;\n}\nfunction genDefinition(def, n) {\n    var result = \"\";\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(def, function (prod) {\n        result += genProd(prod, n + 1);\n    });\n    return result;\n}\nfunction indent(howMuch, text) {\n    var spaces = Array(howMuch * 4 + 1).join(\" \");\n    return spaces + text;\n}\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/generate/generate.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/generate/generate_public.js":
/*!*************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/generate/generate_public.js ***!
  \*************************************************************************/
/*! exports provided: generateParserFactory, generateParserModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateParserFactory\", function() { return generateParserFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateParserModule\", function() { return generateParserModule; });\n/* harmony import */ var _generate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generate */ \"./node_modules/chevrotain/lib_esm/src/generate/generate.js\");\n\nfunction generateParserFactory(options) {\n    var wrapperText = Object(_generate__WEBPACK_IMPORTED_MODULE_0__[\"genWrapperFunction\"])({\n        name: options.name,\n        rules: options.rules\n    });\n    var constructorWrapper = new Function(\"tokenVocabulary\", \"config\", \"chevrotain\", wrapperText);\n    return function (config) {\n        return constructorWrapper(options.tokenVocabulary, config, \n        // TODO: check how the require is transpiled/webpacked\n        __webpack_require__(/*! ../api */ \"./node_modules/chevrotain/lib_esm/src/api.js\"));\n    };\n}\nfunction generateParserModule(options) {\n    return Object(_generate__WEBPACK_IMPORTED_MODULE_0__[\"genUmdModule\"])({ name: options.name, rules: options.rules });\n}\n//# sourceMappingURL=generate_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9nZW5lcmF0ZS9nZW5lcmF0ZV9wdWJsaWMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9nZW5lcmF0ZS9nZW5lcmF0ZV9wdWJsaWMuanM/Njc5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5VbWRNb2R1bGUsIGdlbldyYXBwZXJGdW5jdGlvbiB9IGZyb20gXCIuL2dlbmVyYXRlXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQYXJzZXJGYWN0b3J5KG9wdGlvbnMpIHtcbiAgICB2YXIgd3JhcHBlclRleHQgPSBnZW5XcmFwcGVyRnVuY3Rpb24oe1xuICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIHJ1bGVzOiBvcHRpb25zLnJ1bGVzXG4gICAgfSk7XG4gICAgdmFyIGNvbnN0cnVjdG9yV3JhcHBlciA9IG5ldyBGdW5jdGlvbihcInRva2VuVm9jYWJ1bGFyeVwiLCBcImNvbmZpZ1wiLCBcImNoZXZyb3RhaW5cIiwgd3JhcHBlclRleHQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RvcldyYXBwZXIob3B0aW9ucy50b2tlblZvY2FidWxhcnksIGNvbmZpZywgXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGhvdyB0aGUgcmVxdWlyZSBpcyB0cmFuc3BpbGVkL3dlYnBhY2tlZFxuICAgICAgICByZXF1aXJlKFwiLi4vYXBpXCIpKTtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGFyc2VyTW9kdWxlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2VuVW1kTW9kdWxlKHsgbmFtZTogb3B0aW9ucy5uYW1lLCBydWxlczogb3B0aW9ucy5ydWxlcyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlX3B1YmxpYy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/generate/generate_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js ***!
  \*********************************************************************/
/*! exports provided: classNameFromInstance, functionName, defineNameProp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"classNameFromInstance\", function() { return classNameFromInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"functionName\", function() { return functionName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defineNameProp\", function() { return defineNameProp; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n\nfunction classNameFromInstance(instance) {\n    return functionName(instance.constructor);\n}\nvar FUNC_NAME_REGEXP = /^\\s*function\\s*(\\S*)\\s*\\(/;\nvar NAME = \"name\";\n/* istanbul ignore next too many hacks for IE/old versions of node.js here*/\nfunction functionName(func) {\n    // Engines that support Function.prototype.name OR the nth (n>1) time after\n    // the name has been computed in the following else block.\n    var existingNameProp = func.name;\n    if (existingNameProp) {\n        return existingNameProp;\n    }\n    // hack for IE and engines that do not support Object.defineProperty on function.name (Node.js 0.10 && 0.12)\n    var computedName = func.toString().match(FUNC_NAME_REGEXP)[1];\n    return computedName;\n}\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nfunction defineNameProp(obj, nameValue) {\n    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n    /* istanbul ignore else -> will only run in old versions of node.js */\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isUndefined\"])(namePropDescriptor) || namePropDescriptor.configurable) {\n        Object.defineProperty(obj, NAME, {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: nameValue\n        });\n        return true;\n    }\n    /* istanbul ignore next -> will only run in old versions of node.js */\n    return false;\n}\n//# sourceMappingURL=lang_extensions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9sYW5nL2xhbmdfZXh0ZW5zaW9ucy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL2xhbmcvbGFuZ19leHRlbnNpb25zLmpzP2Y3NGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFzc05hbWVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25OYW1lKGluc3RhbmNlLmNvbnN0cnVjdG9yKTtcbn1cbnZhciBGVU5DX05BTUVfUkVHRVhQID0gL15cXHMqZnVuY3Rpb25cXHMqKFxcUyopXFxzKlxcKC87XG52YXIgTkFNRSA9IFwibmFtZVwiO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgdG9vIG1hbnkgaGFja3MgZm9yIElFL29sZCB2ZXJzaW9ucyBvZiBub2RlLmpzIGhlcmUqL1xuZXhwb3J0IGZ1bmN0aW9uIGZ1bmN0aW9uTmFtZShmdW5jKSB7XG4gICAgLy8gRW5naW5lcyB0aGF0IHN1cHBvcnQgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgT1IgdGhlIG50aCAobj4xKSB0aW1lIGFmdGVyXG4gICAgLy8gdGhlIG5hbWUgaGFzIGJlZW4gY29tcHV0ZWQgaW4gdGhlIGZvbGxvd2luZyBlbHNlIGJsb2NrLlxuICAgIHZhciBleGlzdGluZ05hbWVQcm9wID0gZnVuYy5uYW1lO1xuICAgIGlmIChleGlzdGluZ05hbWVQcm9wKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ05hbWVQcm9wO1xuICAgIH1cbiAgICAvLyBoYWNrIGZvciBJRSBhbmQgZW5naW5lcyB0aGF0IGRvIG5vdCBzdXBwb3J0IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBvbiBmdW5jdGlvbi5uYW1lIChOb2RlLmpzIDAuMTAgJiYgMC4xMilcbiAgICB2YXIgY29tcHV0ZWROYW1lID0gZnVuYy50b1N0cmluZygpLm1hdGNoKEZVTkNfTkFNRV9SRUdFWFApWzFdO1xuICAgIHJldHVybiBjb21wdXRlZE5hbWU7XG59XG4vKipcbiAqIEByZXR1cm5zIHtib29sZWFufSAtIGhhcyB0aGUgcHJvcGVydHkgYmVlbiBzdWNjZXNzZnVsbHkgZGVmaW5lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lTmFtZVByb3Aob2JqLCBuYW1lVmFsdWUpIHtcbiAgICB2YXIgbmFtZVByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIE5BTUUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0+IHdpbGwgb25seSBydW4gaW4gb2xkIHZlcnNpb25zIG9mIG5vZGUuanMgKi9cbiAgICBpZiAoaXNVbmRlZmluZWQobmFtZVByb3BEZXNjcmlwdG9yKSB8fCBuYW1lUHJvcERlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIE5BTUUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG5hbWVWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0+IHdpbGwgb25seSBydW4gaW4gb2xkIHZlcnNpb25zIG9mIG5vZGUuanMgKi9cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5nX2V4dGVuc2lvbnMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/constants.js ***!
  \****************************************************************/
/*! exports provided: IN */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IN\", function() { return IN; });\n// TODO: can this be removed? where is it used?\nvar IN = \"_~IN~_\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9jb25zdGFudHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9jb25zdGFudHMuanM/YjUyOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBjYW4gdGhpcyBiZSByZW1vdmVkPyB3aGVyZSBpcyBpdCB1c2VkP1xuZXhwb3J0IHZhciBJTiA9IFwiX35JTn5fXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/constants.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js":
/*!**************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js ***!
  \**************************************************************/
/*! exports provided: setNodeLocationOnlyOffset, setNodeLocationFull, addTerminalToCst, addNoneTerminalToCst, NamedDSLMethodsCollectorVisitor, expandAllNestedRuleNames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setNodeLocationOnlyOffset\", function() { return setNodeLocationOnlyOffset; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setNodeLocationFull\", function() { return setNodeLocationFull; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addTerminalToCst\", function() { return addTerminalToCst; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addNoneTerminalToCst\", function() { return addNoneTerminalToCst; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NamedDSLMethodsCollectorVisitor\", function() { return NamedDSLMethodsCollectorVisitor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expandAllNestedRuleNames\", function() { return expandAllNestedRuleNames; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammar/keys */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\");\n/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../grammar/gast/gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nfunction setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (both start/end offsets exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n}\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nfunction setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n        // assumption1: Token location information is either NaN or a valid number\n        // assumption2: Token location information is fully valid if it exist\n        // (all start/end props exist and are numbers).\n        currNodeLocation.startOffset = newLocationInfo.startOffset;\n        currNodeLocation.startColumn = newLocationInfo.startColumn;\n        currNodeLocation.startLine = newLocationInfo.startLine;\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n        currNodeLocation.endOffset = newLocationInfo.endOffset;\n        currNodeLocation.endColumn = newLocationInfo.endColumn;\n        currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n}\nfunction addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n        node.children[tokenTypeName] = [token];\n    }\n    else {\n        node.children[tokenTypeName].push(token);\n    }\n}\nfunction addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n        node.children[ruleName] = [ruleResult];\n    }\n    else {\n        node.children[ruleName].push(ruleResult);\n    }\n}\nvar NamedDSLMethodsCollectorVisitor = /** @class */ (function (_super) {\n    __extends(NamedDSLMethodsCollectorVisitor, _super);\n    function NamedDSLMethodsCollectorVisitor(ruleIdx) {\n        var _this = _super.call(this) || this;\n        _this.result = [];\n        _this.ruleIdx = ruleIdx;\n        return _this;\n    }\n    NamedDSLMethodsCollectorVisitor.prototype.collectNamedDSLMethod = function (node, newNodeConstructor, methodIdx) {\n        // TODO: better hack to copy what we need here...\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isUndefined\"])(node.name)) {\n            // copy without name so this will indeed be processed later.\n            var nameLessNode \n            /* istanbul ignore else */\n            = void 0;\n            /* istanbul ignore else */\n            if (node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Option\"] ||\n                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Repetition\"] ||\n                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionMandatory\"] ||\n                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Alternation\"]) {\n                nameLessNode = new newNodeConstructor({\n                    definition: node.definition,\n                    idx: node.idx\n                });\n            }\n            else if (node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionMandatoryWithSeparator\"] ||\n                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionWithSeparator\"]) {\n                nameLessNode = new newNodeConstructor({\n                    definition: node.definition,\n                    idx: node.idx,\n                    separator: node.separator\n                });\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n            var def = [nameLessNode];\n            var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"getKeyForAutomaticLookahead\"])(this.ruleIdx, methodIdx, node.idx);\n            this.result.push({ def: def, key: key, name: node.name, orgProd: node });\n        }\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitOption = function (node) {\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Option\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OPTION_IDX\"]);\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitRepetition = function (node) {\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Repetition\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_IDX\"]);\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (node) {\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionMandatory\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_IDX\"]);\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionMandatoryWithSeparator\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_SEP_IDX\"]);\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"RepetitionWithSeparator\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_SEP_IDX\"]);\n    };\n    NamedDSLMethodsCollectorVisitor.prototype.visitAlternation = function (node) {\n        var _this = this;\n        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Alternation\"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OR_IDX\"]);\n        var hasMoreThanOneAlternative = node.definition.length > 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(node.definition, function (currFlatAlt, altIdx) {\n            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isUndefined\"])(currFlatAlt.name)) {\n                var def = currFlatAlt.definition;\n                if (hasMoreThanOneAlternative) {\n                    def = [new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Option\"]({ definition: currFlatAlt.definition })];\n                }\n                else {\n                    // mandatory\n                    def = currFlatAlt.definition;\n                }\n                var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"getKeyForAltIndex\"])(_this.ruleIdx, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OR_IDX\"], node.idx, altIdx);\n                _this.result.push({\n                    def: def,\n                    key: key,\n                    name: currFlatAlt.name,\n                    orgProd: currFlatAlt\n                });\n            }\n        });\n    };\n    return NamedDSLMethodsCollectorVisitor;\n}(_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_3__[\"GAstVisitor\"]));\n\nfunction expandAllNestedRuleNames(topRules, fullToShortName) {\n    var result = {\n        allRuleNames: []\n    };\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(topRules, function (currTopRule) {\n        var currTopRuleShortName = fullToShortName[currTopRule.name];\n        result.allRuleNames.push(currTopRule.name);\n        var namedCollectorVisitor = new NamedDSLMethodsCollectorVisitor(currTopRuleShortName);\n        currTopRule.accept(namedCollectorVisitor);\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(namedCollectorVisitor.result, function (_a) {\n            var def = _a.def, key = _a.key, name = _a.name;\n            result.allRuleNames.push(currTopRule.name + name);\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=cst.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js ***!
  \**********************************************************************/
/*! exports provided: defaultVisit, createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults, CstVisitorDefinitionError, validateVisitor, validateMissingCstMethods, validateRedundantMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultVisit\", function() { return defaultVisit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createBaseSemanticVisitorConstructor\", function() { return createBaseSemanticVisitorConstructor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createBaseVisitorConstructorWithDefaults\", function() { return createBaseVisitorConstructorWithDefaults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CstVisitorDefinitionError\", function() { return CstVisitorDefinitionError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateVisitor\", function() { return validateVisitor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateMissingCstMethods\", function() { return validateMissingCstMethods; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateRedundantMethods\", function() { return validateRedundantMethods; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lang/lang_extensions */ \"./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js\");\n/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grammar/checks */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js\");\n\n\n\nfunction defaultVisit(ctx, param) {\n    var childrenNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"keys\"])(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                if (currChild.fullName !== undefined) {\n                    this[currChild.fullName](currChild.children, param);\n                }\n                else {\n                    this[currChild.name](currChild.children, param);\n                }\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n    return undefined;\n}\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__[\"defineNameProp\"])(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isUndefined\"])(cstNode)) {\n                return undefined;\n            }\n            if (cstNode.fullName !== undefined) {\n                return this[cstNode.fullName](cstNode.children, param);\n            }\n            else {\n                return this[cstNode.name](cstNode.children, param);\n            }\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(semanticDefinitionErrors)) {\n                var errorMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\" + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__[\"functionName\"])(this.constructor) + \">:\\n\\t\" +\n                    (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__[\"defineNameProp\"])(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n    return missingErrors.concat(redundantErrors);\n}\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(ruleNames, function (currRuleName) {\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isFunction\"])(visitorInstance[currRuleName])) {\n            return {\n                msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__[\"functionName\"])(visitorInstance.constructor) + \" CST Visitor.\",\n                type: CstVisitorDefinitionError.MISSING_METHOD,\n                methodName: currRuleName\n            };\n        }\n    });\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"compact\"])(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n    var errors = [];\n    for (var prop in visitorInstance) {\n        if (_grammar_checks__WEBPACK_IMPORTED_MODULE_2__[\"validTermsPattern\"].test(prop) &&\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isFunction\"])(visitorInstance[prop]) &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(VALID_PROP_NAMES, prop) &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(ruleNames, prop)) {\n            errors.push({\n                msg: \"Redundant visitor method: <\" + prop + \"> on \" + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__[\"functionName\"])(visitorInstance.constructor) + \" CST Visitor\\n\" +\n                    \"There is no Grammar Rule corresponding to this method's name.\\n\" +\n                    (\"For utility methods on visitor classes use methods names that do not match /\" + _grammar_checks__WEBPACK_IMPORTED_MODULE_2__[\"validTermsPattern\"].source + \"/.\"),\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n                methodName: prop\n            });\n        }\n    }\n    return errors;\n}\n//# sourceMappingURL=cst_visitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9jc3QvY3N0X3Zpc2l0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9jc3QvY3N0X3Zpc2l0b3IuanM/NjM2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wYWN0LCBjb250YWlucywgZm9yRWFjaCwgaXNBcnJheSwgaXNFbXB0eSwgaXNGdW5jdGlvbiwgaXNVbmRlZmluZWQsIGtleXMsIG1hcCB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgZGVmaW5lTmFtZVByb3AsIGZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuLi8uLi9sYW5nL2xhbmdfZXh0ZW5zaW9uc1wiO1xuaW1wb3J0IHsgdmFsaWRUZXJtc1BhdHRlcm4gfSBmcm9tIFwiLi4vZ3JhbW1hci9jaGVja3NcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0VmlzaXQoY3R4LCBwYXJhbSkge1xuICAgIHZhciBjaGlsZHJlbk5hbWVzID0ga2V5cyhjdHgpO1xuICAgIHZhciBjaGlsZHJlbk5hbWVzTGVuZ3RoID0gY2hpbGRyZW5OYW1lcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbk5hbWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJDaGlsZE5hbWUgPSBjaGlsZHJlbk5hbWVzW2ldO1xuICAgICAgICB2YXIgY3VyckNoaWxkQXJyYXkgPSBjdHhbY3VyckNoaWxkTmFtZV07XG4gICAgICAgIHZhciBjdXJyQ2hpbGRBcnJheUxlbmd0aCA9IGN1cnJDaGlsZEFycmF5Lmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjdXJyQ2hpbGRBcnJheUxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgY3VyckNoaWxkID0gY3VyckNoaWxkQXJyYXlbal07XG4gICAgICAgICAgICAvLyBkaXN0aW5jdGlvbiBiZXR3ZWVuIFRva2VucyBDaGlsZHJlbiBhbmQgQ3N0Tm9kZSBjaGlsZHJlblxuICAgICAgICAgICAgaWYgKGN1cnJDaGlsZC50b2tlblR5cGVJZHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyQ2hpbGQuZnVsbE5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2N1cnJDaGlsZC5mdWxsTmFtZV0oY3VyckNoaWxkLmNoaWxkcmVuLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2N1cnJDaGlsZC5uYW1lXShjdXJyQ2hpbGQuY2hpbGRyZW4sIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZGVmYXVsdFZpc2l0IGRvZXMgbm90IHN1cHBvcnQgZ2VuZXJpYyBvdXQgcGFyYW1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhc2VTZW1hbnRpY1Zpc2l0b3JDb25zdHJ1Y3RvcihncmFtbWFyTmFtZSwgcnVsZU5hbWVzKSB7XG4gICAgdmFyIGRlcml2ZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvLyBjYW4gYmUgb3ZlcndyaXR0ZW4gYWNjb3JkaW5nIHRvOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL1xuICAgIC8vIG5hbWU/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkZ1bmN0aW9uJTJGbmFtZVxuICAgIGRlZmluZU5hbWVQcm9wKGRlcml2ZWRDb25zdHJ1Y3RvciwgZ3JhbW1hck5hbWUgKyBcIkJhc2VTZW1hbnRpY3NcIik7XG4gICAgdmFyIHNlbWFudGljUHJvdG8gPSB7XG4gICAgICAgIHZpc2l0OiBmdW5jdGlvbiAoY3N0Tm9kZSwgcGFyYW0pIHtcbiAgICAgICAgICAgIC8vIGVuYWJsZXMgd3JpdGluZyBtb3JlIGNvbmNpc2UgdmlzaXRvciBtZXRob2RzIHdoZW4gQ3N0Tm9kZSBoYXMgb25seSBhIHNpbmdsZSBjaGlsZFxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoY3N0Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBBIENTVCBOb2RlJ3MgY2hpbGRyZW4gZGljdGlvbmFyeSBjYW4gbmV2ZXIgaGF2ZSBlbXB0eSBhcnJheXMgYXMgdmFsdWVzXG4gICAgICAgICAgICAgICAgLy8gSWYgYSBrZXkgaXMgZGVmaW5lZCB0aGVyZSB3aWxsIGJlIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIGFycmF5LlxuICAgICAgICAgICAgICAgIGNzdE5vZGUgPSBjc3ROb2RlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZW5hYmxlcyBwYXNzaW5nIG9wdGlvbmFsIENzdE5vZGVzIGNvbmNpc2VseS5cbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChjc3ROb2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3N0Tm9kZS5mdWxsTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY3N0Tm9kZS5mdWxsTmFtZV0oY3N0Tm9kZS5jaGlsZHJlbiwgcGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY3N0Tm9kZS5uYW1lXShjc3ROb2RlLmNoaWxkcmVuLCBwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlVmlzaXRvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbWFudGljRGVmaW5pdGlvbkVycm9ycyA9IHZhbGlkYXRlVmlzaXRvcih0aGlzLCBydWxlTmFtZXMpO1xuICAgICAgICAgICAgaWYgKCFpc0VtcHR5KHNlbWFudGljRGVmaW5pdGlvbkVycm9ycykpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IG1hcChzZW1hbnRpY0RlZmluaXRpb25FcnJvcnMsIGZ1bmN0aW9uIChjdXJyRGVmRXJyb3IpIHsgcmV0dXJuIGN1cnJEZWZFcnJvci5tc2c7IH0pO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiRXJyb3JzIERldGVjdGVkIGluIENTVCBWaXNpdG9yIDxcIiArIGZ1bmN0aW9uTmFtZSh0aGlzLmNvbnN0cnVjdG9yKSArIFwiPjpcXG5cXHRcIiArXG4gICAgICAgICAgICAgICAgICAgIChcIlwiICsgZXJyb3JNZXNzYWdlcy5qb2luKFwiXFxuXFxuXCIpLnJlcGxhY2UoL1xcbi9nLCBcIlxcblxcdFwiKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBkZXJpdmVkQ29uc3RydWN0b3IucHJvdG90eXBlID0gc2VtYW50aWNQcm90bztcbiAgICBkZXJpdmVkQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZGVyaXZlZENvbnN0cnVjdG9yO1xuICAgIGRlcml2ZWRDb25zdHJ1Y3Rvci5fUlVMRV9OQU1FUyA9IHJ1bGVOYW1lcztcbiAgICByZXR1cm4gZGVyaXZlZENvbnN0cnVjdG9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhc2VWaXNpdG9yQ29uc3RydWN0b3JXaXRoRGVmYXVsdHMoZ3JhbW1hck5hbWUsIHJ1bGVOYW1lcywgYmFzZUNvbnN0cnVjdG9yKSB7XG4gICAgdmFyIGRlcml2ZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvLyBjYW4gYmUgb3ZlcndyaXR0ZW4gYWNjb3JkaW5nIHRvOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL1xuICAgIC8vIG5hbWU/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkZ1bmN0aW9uJTJGbmFtZVxuICAgIGRlZmluZU5hbWVQcm9wKGRlcml2ZWRDb25zdHJ1Y3RvciwgZ3JhbW1hck5hbWUgKyBcIkJhc2VTZW1hbnRpY3NXaXRoRGVmYXVsdHNcIik7XG4gICAgdmFyIHdpdGhEZWZhdWx0c1Byb3RvID0gT2JqZWN0LmNyZWF0ZShiYXNlQ29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICBmb3JFYWNoKHJ1bGVOYW1lcywgZnVuY3Rpb24gKHJ1bGVOYW1lKSB7XG4gICAgICAgIHdpdGhEZWZhdWx0c1Byb3RvW3J1bGVOYW1lXSA9IGRlZmF1bHRWaXNpdDtcbiAgICB9KTtcbiAgICBkZXJpdmVkQ29uc3RydWN0b3IucHJvdG90eXBlID0gd2l0aERlZmF1bHRzUHJvdG87XG4gICAgZGVyaXZlZENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGRlcml2ZWRDb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gZGVyaXZlZENvbnN0cnVjdG9yO1xufVxuZXhwb3J0IHZhciBDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yO1xuKGZ1bmN0aW9uIChDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yKSB7XG4gICAgQ3N0VmlzaXRvckRlZmluaXRpb25FcnJvcltDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yW1wiUkVEVU5EQU5UX01FVEhPRFwiXSA9IDBdID0gXCJSRURVTkRBTlRfTUVUSE9EXCI7XG4gICAgQ3N0VmlzaXRvckRlZmluaXRpb25FcnJvcltDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yW1wiTUlTU0lOR19NRVRIT0RcIl0gPSAxXSA9IFwiTUlTU0lOR19NRVRIT0RcIjtcbn0pKENzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3IgfHwgKENzdFZpc2l0b3JEZWZpbml0aW9uRXJyb3IgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVmlzaXRvcih2aXNpdG9ySW5zdGFuY2UsIHJ1bGVOYW1lcykge1xuICAgIHZhciBtaXNzaW5nRXJyb3JzID0gdmFsaWRhdGVNaXNzaW5nQ3N0TWV0aG9kcyh2aXNpdG9ySW5zdGFuY2UsIHJ1bGVOYW1lcyk7XG4gICAgdmFyIHJlZHVuZGFudEVycm9ycyA9IHZhbGlkYXRlUmVkdW5kYW50TWV0aG9kcyh2aXNpdG9ySW5zdGFuY2UsIHJ1bGVOYW1lcyk7XG4gICAgcmV0dXJuIG1pc3NpbmdFcnJvcnMuY29uY2F0KHJlZHVuZGFudEVycm9ycyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVNaXNzaW5nQ3N0TWV0aG9kcyh2aXNpdG9ySW5zdGFuY2UsIHJ1bGVOYW1lcykge1xuICAgIHZhciBlcnJvcnMgPSBtYXAocnVsZU5hbWVzLCBmdW5jdGlvbiAoY3VyclJ1bGVOYW1lKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbih2aXNpdG9ySW5zdGFuY2VbY3VyclJ1bGVOYW1lXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbXNnOiBcIk1pc3NpbmcgdmlzaXRvciBtZXRob2Q6IDxcIiArIGN1cnJSdWxlTmFtZSArIFwiPiBvbiBcIiArIGZ1bmN0aW9uTmFtZSh2aXNpdG9ySW5zdGFuY2UuY29uc3RydWN0b3IpICsgXCIgQ1NUIFZpc2l0b3IuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogQ3N0VmlzaXRvckRlZmluaXRpb25FcnJvci5NSVNTSU5HX01FVEhPRCxcbiAgICAgICAgICAgICAgICBtZXRob2ROYW1lOiBjdXJyUnVsZU5hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29tcGFjdChlcnJvcnMpO1xufVxudmFyIFZBTElEX1BST1BfTkFNRVMgPSBbXCJjb25zdHJ1Y3RvclwiLCBcInZpc2l0XCIsIFwidmFsaWRhdGVWaXNpdG9yXCJdO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmVkdW5kYW50TWV0aG9kcyh2aXNpdG9ySW5zdGFuY2UsIHJ1bGVOYW1lcykge1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHZpc2l0b3JJbnN0YW5jZSkge1xuICAgICAgICBpZiAodmFsaWRUZXJtc1BhdHRlcm4udGVzdChwcm9wKSAmJlxuICAgICAgICAgICAgaXNGdW5jdGlvbih2aXNpdG9ySW5zdGFuY2VbcHJvcF0pICYmXG4gICAgICAgICAgICAhY29udGFpbnMoVkFMSURfUFJPUF9OQU1FUywgcHJvcCkgJiZcbiAgICAgICAgICAgICFjb250YWlucyhydWxlTmFtZXMsIHByb3ApKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgbXNnOiBcIlJlZHVuZGFudCB2aXNpdG9yIG1ldGhvZDogPFwiICsgcHJvcCArIFwiPiBvbiBcIiArIGZ1bmN0aW9uTmFtZSh2aXNpdG9ySW5zdGFuY2UuY29uc3RydWN0b3IpICsgXCIgQ1NUIFZpc2l0b3JcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlcmUgaXMgbm8gR3JhbW1hciBSdWxlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBtZXRob2QncyBuYW1lLlxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgKFwiRm9yIHV0aWxpdHkgbWV0aG9kcyBvbiB2aXNpdG9yIGNsYXNzZXMgdXNlIG1ldGhvZHMgbmFtZXMgdGhhdCBkbyBub3QgbWF0Y2ggL1wiICsgdmFsaWRUZXJtc1BhdHRlcm4uc291cmNlICsgXCIvLlwiKSxcbiAgICAgICAgICAgICAgICB0eXBlOiBDc3RWaXNpdG9yRGVmaW5pdGlvbkVycm9yLlJFRFVOREFOVF9NRVRIT0QsXG4gICAgICAgICAgICAgICAgbWV0aG9kTmFtZTogcHJvcFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzdF92aXNpdG9yLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/errors_public.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/errors_public.js ***!
  \********************************************************************/
/*! exports provided: defaultParserErrorProvider, defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultParserErrorProvider\", function() { return defaultParserErrorProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultGrammarResolverErrorProvider\", function() { return defaultGrammarResolverErrorProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultGrammarValidatorErrorProvider\", function() { return defaultGrammarValidatorErrorProvider; });\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./grammar/gast/gast */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\");\n/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./grammar/checks */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js\");\n\n\n\n\n\n\nvar defaultParserErrorProvider = {\n    buildMismatchTokenMessage: function (_a) {\n        var expected = _a.expected, actual = _a.actual, previous = _a.previous, ruleName = _a.ruleName;\n        var hasLabel = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"hasTokenLabel\"])(expected);\n        var expectedMsg = hasLabel\n            ? \"--> \" + Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"tokenLabel\"])(expected) + \" <--\"\n            : \"token of type --> \" + expected.name + \" <--\";\n        var msg = \"Expecting \" + expectedMsg + \" but found --> '\" + actual.image + \"' <--\";\n        return msg;\n    },\n    buildNotAllInputParsedMessage: function (_a) {\n        var firstRedundant = _a.firstRedundant, ruleName = _a.ruleName;\n        return (\"Redundant input, expecting EOF but found: \" + firstRedundant.image);\n    },\n    buildNoViableAltMessage: function (_a) {\n        var expectedPathsPerAlt = _a.expectedPathsPerAlt, actual = _a.actual, previous = _a.previous, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;\n        var errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        var actualText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(actual).image;\n        var errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            var allLookAheadPaths = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"reduce\"])(expectedPathsPerAlt, function (result, currAltPaths) { return result.concat(currAltPaths); }, []);\n            var nextValidTokenSequences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(allLookAheadPaths, function (currPath) {\n                return \"[\" + Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(currPath, function (currTokenType) {\n                    return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"tokenLabel\"])(currTokenType);\n                }).join(\", \") + \"]\";\n            });\n            var nextValidSequenceItems = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(nextValidTokenSequences, function (itemMsg, idx) { return \"  \" + (idx + 1) + \". \" + itemMsg; });\n            var calculatedDescription = \"one of these possible Token sequences:\\n\" + nextValidSequenceItems.join(\"\\n\");\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    },\n    buildEarlyExitMessage: function (_a) {\n        var expectedIterationPaths = _a.expectedIterationPaths, actual = _a.actual, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;\n        var errPrefix = \"Expecting: \";\n        // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n        var actualText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(actual).image;\n        var errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n        if (customUserDescription) {\n            return errPrefix + customUserDescription + errSuffix;\n        }\n        else {\n            var nextValidTokenSequences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(expectedIterationPaths, function (currPath) {\n                return \"[\" + Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(currPath, function (currTokenType) {\n                    return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"tokenLabel\"])(currTokenType);\n                }).join(\",\") + \"]\";\n            });\n            var calculatedDescription = \"expecting at least one iteration which starts with one of these possible Token sequences::\\n  \" +\n                (\"<\" + nextValidTokenSequences.join(\" ,\") + \">\");\n            return errPrefix + calculatedDescription + errSuffix;\n        }\n    }\n};\nObject.freeze(defaultParserErrorProvider);\nvar defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError: function (topLevelRule, undefinedRule) {\n        var msg = \"Invalid grammar, reference to a rule which is not defined: ->\" +\n            undefinedRule.nonTerminalName +\n            \"<-\\n\" +\n            \"inside top level rule: ->\" +\n            topLevelRule.name +\n            \"<-\";\n        return msg;\n    }\n};\nvar defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError: function (topLevelRule, duplicateProds) {\n        function getExtraProductionArgument(prod) {\n            if (prod instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Terminal\"]) {\n                return prod.terminalType.name;\n            }\n            else if (prod instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"NonTerminal\"]) {\n                return prod.nonTerminalName;\n            }\n            else {\n                return \"\";\n            }\n        }\n        var topLevelName = topLevelRule.name;\n        var duplicateProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(duplicateProds);\n        var index = duplicateProd.idx;\n        var dslName = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__[\"getProductionDslName\"])(duplicateProd);\n        var extraArgument = getExtraProductionArgument(duplicateProd);\n        var hasExplicitIndex = index > 0;\n        var msg = \"->\" + dslName + (hasExplicitIndex ? index : \"\") + \"<- \" + (extraArgument ? \"with argument: ->\" + extraArgument + \"<-\" : \"\") + \"\\n                  appears more than once (\" + duplicateProds.length + \" times) in the top level rule: ->\" + topLevelName + \"<-.                  \\n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \\n                  \";\n        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n        msg = msg.replace(/[ \\t]+/g, \" \");\n        msg = msg.replace(/\\s\\s+/g, \"\\n\");\n        return msg;\n    },\n    buildInvalidNestedRuleNameError: function (topLevelRule, nestedProd) {\n        var msg = \"Invalid nested rule name: ->\" + nestedProd.name + \"<- inside rule: ->\" + topLevelRule.name + \"<-\\n\" +\n            (\"it must match the pattern: ->\" + _grammar_checks__WEBPACK_IMPORTED_MODULE_4__[\"validNestedRuleName\"].toString() + \"<-.\\n\") +\n            \"Note that this means a nested rule name must start with the '$'(dollar) sign.\";\n        return msg;\n    },\n    buildDuplicateNestedRuleNameError: function (topLevelRule, nestedProd) {\n        var duplicateName = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(nestedProd).name;\n        var errMsg = \"Duplicate nested rule name: ->\" + duplicateName + \"<- inside rule: ->\" + topLevelRule.name + \"<-\\n\" +\n            \"A nested name must be unique in the scope of a top level grammar rule.\";\n        return errMsg;\n    },\n    buildNamespaceConflictError: function (rule) {\n        var errMsg = \"Namespace conflict found in grammar.\\n\" +\n            (\"The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <\" + rule.name + \">.\\n\") +\n            \"To resolve this make sure each Terminal and Non-Terminal names are unique\\n\" +\n            \"This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n\" +\n            \"and Non-Terminal names start with a lower case letter.\";\n        return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError: function (options) {\n        var pathMsg = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(options.prefixPath, function (currTok) {\n            return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"tokenLabel\"])(currTok);\n        }).join(\", \");\n        var occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        var errMsg = \"Ambiguous alternatives: <\" + options.ambiguityIndices.join(\" ,\") + \"> due to common lookahead prefix\\n\" +\n            (\"in <OR\" + occurrence + \"> inside <\" + options.topLevelRule.name + \"> Rule,\\n\") +\n            (\"<\" + pathMsg + \"> may appears as a prefix path in all these alternatives.\\n\") +\n            \"See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n\" +\n            \"For Further details.\";\n        return errMsg;\n    },\n    buildAlternationAmbiguityError: function (options) {\n        var pathMsg = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(options.prefixPath, function (currtok) {\n            return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"tokenLabel\"])(currtok);\n        }).join(\", \");\n        var occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n        var currMessage = \"Ambiguous Alternatives Detected: <\" + options.ambiguityIndices.join(\" ,\") + \"> in <OR\" + occurrence + \">\" +\n            (\" inside <\" + options.topLevelRule.name + \"> Rule,\\n\") +\n            (\"<\" + pathMsg + \"> may appears as a prefix path in all these alternatives.\\n\");\n        currMessage =\n            currMessage +\n                \"See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n\" +\n                \"For Further details.\";\n        return currMessage;\n    },\n    buildEmptyRepetitionError: function (options) {\n        var dslName = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__[\"getProductionDslName\"])(options.repetition);\n        if (options.repetition.idx !== 0) {\n            dslName += options.repetition.idx;\n        }\n        var errMsg = \"The repetition <\" + dslName + \"> within Rule <\" + options.topLevelRule.name + \"> can never consume any tokens.\\n\" +\n            \"This could lead to an infinite loop.\";\n        return errMsg;\n    },\n    buildTokenNameError: function (options) {\n        var tokTypeName = options.tokenType.name;\n        var errMsg = \"Invalid Grammar Token name: ->\" + tokTypeName + \"<- it must match the pattern: ->\" + options.expectedPattern.toString() + \"<-\";\n        return errMsg;\n    },\n    buildEmptyAlternationError: function (options) {\n        var errMsg = \"Ambiguous empty alternative: <\" + (options.emptyChoiceIdx + 1) + \">\" +\n            (\" in <OR\" + options.alternation.idx + \"> inside <\" + options.topLevelRule.name + \"> Rule.\\n\") +\n            \"Only the last alternative may be an empty alternative.\";\n        return errMsg;\n    },\n    buildTooManyAlternativesError: function (options) {\n        var errMsg = \"An Alternation cannot have more than 256 alternatives:\\n\" +\n            (\"<OR\" + options.alternation.idx + \"> inside <\" + options.topLevelRule.name + \"> Rule.\\n has \" + (options.alternation.definition.length +\n                1) + \" alternatives.\");\n        return errMsg;\n    },\n    buildLeftRecursionError: function (options) {\n        var ruleName = options.topLevelRule.name;\n        var pathNames = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"](options.leftRecursionPath, function (currRule) { return currRule.name; });\n        var leftRecursivePath = ruleName + \" --> \" + pathNames\n            .concat([ruleName])\n            .join(\" --> \");\n        var errMsg = \"Left Recursion found in grammar.\\n\" +\n            (\"rule: <\" + ruleName + \"> can be invoked from itself (directly or indirectly)\\n\") +\n            (\"without consuming any Tokens. The grammar path that causes this is: \\n \" + leftRecursivePath + \"\\n\") +\n            \" To fix this refactor your grammar to remove the left recursion.\\n\" +\n            \"see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.\";\n        return errMsg;\n    },\n    buildInvalidRuleNameError: function (options) {\n        var ruleName = options.topLevelRule.name;\n        var expectedPatternString = options.expectedPattern.toString();\n        var errMsg = \"Invalid grammar rule name: ->\" + ruleName + \"<- it must match the pattern: ->\" + expectedPatternString + \"<-\";\n        return errMsg;\n    },\n    buildDuplicateRuleNameError: function (options) {\n        var ruleName;\n        if (options.topLevelRule instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__[\"Rule\"]) {\n            ruleName = options.topLevelRule.name;\n        }\n        else {\n            ruleName = options.topLevelRule;\n        }\n        var errMsg = \"Duplicate definition, rule: ->\" + ruleName + \"<- is already defined in the grammar: ->\" + options.grammarName + \"<-\";\n        return errMsg;\n    }\n};\n//# sourceMappingURL=errors_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/errors_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js":
/*!************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js ***!
  \************************************************************************/
/*! exports provided: isRecognitionException, MismatchedTokenException, NoViableAltException, NotAllInputParsedException, EarlyExitException */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isRecognitionException\", function() { return isRecognitionException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MismatchedTokenException\", function() { return MismatchedTokenException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoViableAltException\", function() { return NoViableAltException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NotAllInputParsedException\", function() { return NotAllInputParsedException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EarlyExitException\", function() { return EarlyExitException; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nfunction isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nfunction MismatchedTokenException(message, token, previousToken) {\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\n// must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\nMismatchedTokenException.prototype = Error.prototype;\nfunction NoViableAltException(message, token, previousToken) {\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nfunction NotAllInputParsedException(message, token) {\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nfunction EarlyExitException(message, token, previousToken) {\n    this.name = EARLY_EXIT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;\n//# sourceMappingURL=exceptions_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9leGNlcHRpb25zX3B1YmxpYy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3BhcnNlL2V4Y2VwdGlvbnNfcHVibGljLmpzP2JkOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udGFpbnMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbnZhciBNSVNNQVRDSEVEX1RPS0VOX0VYQ0VQVElPTiA9IFwiTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uXCI7XG52YXIgTk9fVklBQkxFX0FMVF9FWENFUFRJT04gPSBcIk5vVmlhYmxlQWx0RXhjZXB0aW9uXCI7XG52YXIgRUFSTFlfRVhJVF9FWENFUFRJT04gPSBcIkVhcmx5RXhpdEV4Y2VwdGlvblwiO1xudmFyIE5PVF9BTExfSU5QVVRfUEFSU0VEX0VYQ0VQVElPTiA9IFwiTm90QWxsSW5wdXRQYXJzZWRFeGNlcHRpb25cIjtcbnZhciBSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMgPSBbXG4gICAgTUlTTUFUQ0hFRF9UT0tFTl9FWENFUFRJT04sXG4gICAgTk9fVklBQkxFX0FMVF9FWENFUFRJT04sXG4gICAgRUFSTFlfRVhJVF9FWENFUFRJT04sXG4gICAgTk9UX0FMTF9JTlBVVF9QQVJTRURfRVhDRVBUSU9OXG5dO1xuT2JqZWN0LmZyZWV6ZShSRUNPR05JVElPTl9FWENFUFRJT05fTkFNRVMpO1xuLy8gaGFja3MgdG8gYnlwYXNzIG5vIHN1cHBvcnQgZm9yIGN1c3RvbSBFcnJvcnMgaW4gamF2YXNjcmlwdC90eXBlc2NyaXB0XG5leHBvcnQgZnVuY3Rpb24gaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbihlcnJvcikge1xuICAgIC8vIGNhbid0IGRvIGluc3RhbmNlb2Ygb24gaGFja2VkIGN1c3RvbSBqcyBleGNlcHRpb25zXG4gICAgcmV0dXJuIGNvbnRhaW5zKFJFQ09HTklUSU9OX0VYQ0VQVElPTl9OQU1FUywgZXJyb3IubmFtZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gTWlzbWF0Y2hlZFRva2VuRXhjZXB0aW9uKG1lc3NhZ2UsIHRva2VuLCBwcmV2aW91c1Rva2VuKSB7XG4gICAgdGhpcy5uYW1lID0gTUlTTUFUQ0hFRF9UT0tFTl9FWENFUFRJT047XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5wcmV2aW91c1Rva2VuID0gcHJldmlvdXNUb2tlbjtcbiAgICB0aGlzLnJlc3luY2VkVG9rZW5zID0gW107XG59XG4vLyBtdXN0IHVzZSB0aGUgXCJFcnJvci5wcm90b3R5cGVcIiBpbnN0ZWFkIG9mIFwibmV3IEVycm9yXCJcbi8vIGJlY2F1c2UgdGhlIHN0YWNrIHRyYWNlIHBvaW50cyB0byB3aGVyZSBcIm5ldyBFcnJvclwiIHdhcyBpbnZva2VkXCJcbk1pc21hdGNoZWRUb2tlbkV4Y2VwdGlvbi5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5leHBvcnQgZnVuY3Rpb24gTm9WaWFibGVBbHRFeGNlcHRpb24obWVzc2FnZSwgdG9rZW4sIHByZXZpb3VzVG9rZW4pIHtcbiAgICB0aGlzLm5hbWUgPSBOT19WSUFCTEVfQUxUX0VYQ0VQVElPTjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLnByZXZpb3VzVG9rZW4gPSBwcmV2aW91c1Rva2VuO1xuICAgIHRoaXMucmVzeW5jZWRUb2tlbnMgPSBbXTtcbn1cbk5vVmlhYmxlQWx0RXhjZXB0aW9uLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBOb3RBbGxJbnB1dFBhcnNlZEV4Y2VwdGlvbihtZXNzYWdlLCB0b2tlbikge1xuICAgIHRoaXMubmFtZSA9IE5PVF9BTExfSU5QVVRfUEFSU0VEX0VYQ0VQVElPTjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLnJlc3luY2VkVG9rZW5zID0gW107XG59XG5Ob3RBbGxJbnB1dFBhcnNlZEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5leHBvcnQgZnVuY3Rpb24gRWFybHlFeGl0RXhjZXB0aW9uKG1lc3NhZ2UsIHRva2VuLCBwcmV2aW91c1Rva2VuKSB7XG4gICAgdGhpcy5uYW1lID0gRUFSTFlfRVhJVF9FWENFUFRJT047XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5wcmV2aW91c1Rva2VuID0gcHJldmlvdXNUb2tlbjtcbiAgICB0aGlzLnJlc3luY2VkVG9rZW5zID0gW107XG59XG5FYXJseUV4aXRFeGNlcHRpb24ucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhjZXB0aW9uc19wdWJsaWMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js ***!
  \*********************************************************************/
/*! exports provided: validateGrammar, identifyProductionForDuplicates, OccurrenceValidationCollector, validTermsPattern, validNestedRuleName, validateRuleName, validateNestedRuleName, validateTokenName, validateRuleDoesNotAlreadyExist, validateRuleIsOverridden, validateNoLeftRecursion, getFirstNoneTerminal, validateEmptyOrAlternative, validateAmbiguousAlternationAlternatives, RepetionCollector, validateTooManyAlts, validateSomeNonEmptyLookaheadPath, checkPrefixAlternativesAmbiguities */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateGrammar\", function() { return validateGrammar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identifyProductionForDuplicates\", function() { return identifyProductionForDuplicates; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OccurrenceValidationCollector\", function() { return OccurrenceValidationCollector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validTermsPattern\", function() { return validTermsPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validNestedRuleName\", function() { return validNestedRuleName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateRuleName\", function() { return validateRuleName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateNestedRuleName\", function() { return validateNestedRuleName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateTokenName\", function() { return validateTokenName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateRuleDoesNotAlreadyExist\", function() { return validateRuleDoesNotAlreadyExist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateRuleIsOverridden\", function() { return validateRuleIsOverridden; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateNoLeftRecursion\", function() { return validateNoLeftRecursion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFirstNoneTerminal\", function() { return getFirstNoneTerminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateEmptyOrAlternative\", function() { return validateEmptyOrAlternative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateAmbiguousAlternationAlternatives\", function() { return validateAmbiguousAlternationAlternatives; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepetionCollector\", function() { return RepetionCollector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateTooManyAlts\", function() { return validateTooManyAlts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateSomeNonEmptyLookaheadPath\", function() { return validateSomeNonEmptyLookaheadPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkPrefixAlternativesAmbiguities\", function() { return checkPrefixAlternativesAmbiguities; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _gast_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gast/gast */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\");\n/* harmony import */ var _lookahead__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lookahead */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cst/cst */ \"./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js\");\n/* harmony import */ var _interpreter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interpreter */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gast/gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\nfunction validateGrammar(topLevels, globalMaxLookahead, tokenTypes, ignoredIssues, errMsgProvider, grammarName) {\n    var duplicateErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](topLevels, function (currTopLevel) {\n        return validateDuplicateProductions(currTopLevel, errMsgProvider);\n    });\n    var leftRecursionErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](topLevels, function (currTopRule) {\n        return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);\n    });\n    var emptyAltErrors = [];\n    var ambiguousAltsErrors = [];\n    var emptyRepetitionErrors = [];\n    // left recursion could cause infinite loops in the following validations.\n    // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(leftRecursionErrors, _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])) {\n        emptyAltErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topLevels, function (currTopRule) {\n            return validateEmptyOrAlternative(currTopRule, errMsgProvider);\n        });\n        ambiguousAltsErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topLevels, function (currTopRule) {\n            return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, ignoredIssues, errMsgProvider);\n        });\n        emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);\n    }\n    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    var tokenNameErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](tokenTypes, function (currTokType) {\n        return validateTokenName(currTokType, errMsgProvider);\n    });\n    var nestedRulesNameErrors = validateNestedRulesNames(topLevels, errMsgProvider);\n    var nestedRulesDuplicateErrors = validateDuplicateNestedRules(topLevels, errMsgProvider);\n    var tooManyAltsErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topLevels, function (curRule) {\n        return validateTooManyAlts(curRule, errMsgProvider);\n    });\n    var ruleNameErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topLevels, function (curRule) {\n        return validateRuleName(curRule, errMsgProvider);\n    });\n    var duplicateRulesError = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topLevels, function (curRule) {\n        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n    });\n    return (_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"](duplicateErrors.concat(tokenNameErrors, nestedRulesNameErrors, nestedRulesDuplicateErrors, emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, ruleNameErrors, duplicateRulesError)));\n}\nfunction validateNestedRulesNames(topLevels, errMsgProvider) {\n    var result = [];\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(topLevels, function (curTopLevel) {\n        var namedCollectorVisitor = new _cst_cst__WEBPACK_IMPORTED_MODULE_4__[\"NamedDSLMethodsCollectorVisitor\"](\"\");\n        curTopLevel.accept(namedCollectorVisitor);\n        var nestedProds = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(namedCollectorVisitor.result, function (currItem) { return currItem.orgProd; });\n        result.push(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(nestedProds, function (currNestedProd) {\n            return validateNestedRuleName(curTopLevel, currNestedProd, errMsgProvider);\n        }));\n    });\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(result);\n}\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    var collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    var productionGroups = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"groupBy\"](allRuleProductions, identifyProductionForDuplicates);\n    var duplicates = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"](productionGroups, function (currGroup) {\n        return currGroup.length > 1;\n    });\n    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"](duplicates), function (currDuplicates) {\n        var firstProd = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"first\"](currDuplicates);\n        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        var dslName = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"getProductionDslName\"])(firstProd);\n        var defError = {\n            message: msg,\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx\n        };\n        var param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nfunction identifyProductionForDuplicates(prod) {\n    return Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"getProductionDslName\"])(prod) + \"_#_\" + prod.idx + \"_#_\" + getExtraProductionArgument(prod);\n}\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Terminal\"]) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"NonTerminal\"]) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nvar OccurrenceValidationCollector = /** @class */ (function (_super) {\n    __extends(OccurrenceValidationCollector, _super);\n    function OccurrenceValidationCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n        this.allProductions.push(subrule);\n    };\n    OccurrenceValidationCollector.prototype.visitOption = function (option) {\n        this.allProductions.push(option);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n        this.allProductions.push(or);\n    };\n    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n        this.allProductions.push(terminal);\n    };\n    return OccurrenceValidationCollector;\n}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__[\"GAstVisitor\"]));\n\nvar validTermsPattern = /^[a-zA-Z_]\\w*$/;\nvar validNestedRuleName = new RegExp(validTermsPattern.source.replace(\"^\", \"^\\\\$\"));\n// TODO: remove this limitation now that we use recorders\nfunction validateRuleName(rule, errMsgProvider) {\n    var errors = [];\n    var ruleName = rule.name;\n    if (!ruleName.match(validTermsPattern)) {\n        errors.push({\n            message: errMsgProvider.buildInvalidRuleNameError({\n                topLevelRule: rule,\n                expectedPattern: validTermsPattern\n            }),\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].INVALID_RULE_NAME,\n            ruleName: ruleName\n        });\n    }\n    return errors;\n}\n// TODO: did the nested rule name regExp now change?\nfunction validateNestedRuleName(topLevel, nestedProd, errMsgProvider) {\n    var errors = [];\n    var errMsg;\n    if (!nestedProd.name.match(validNestedRuleName)) {\n        errMsg = errMsgProvider.buildInvalidNestedRuleNameError(topLevel, nestedProd);\n        errors.push({\n            message: errMsg,\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].INVALID_NESTED_RULE_NAME,\n            ruleName: topLevel.name\n        });\n    }\n    return errors;\n}\n// TODO: remove this limitation now that we use recorders\nfunction validateTokenName(tokenType, errMsgProvider) {\n    var errors = [];\n    var tokTypeName = tokenType.name;\n    if (!tokTypeName.match(validTermsPattern)) {\n        errors.push({\n            message: errMsgProvider.buildTokenNameError({\n                tokenType: tokenType,\n                expectedPattern: validTermsPattern\n            }),\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].INVALID_TOKEN_NAME\n        });\n    }\n    return errors;\n}\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    var errors = [];\n    var occurrences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(allRules, function (result, curRule) {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className\n        });\n        errors.push({\n            message: errMsg,\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].DUPLICATE_RULE_NAME,\n            ruleName: rule.name\n        });\n    }\n    return errors;\n}\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    var errors = [];\n    var errMsg;\n    if (!_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"](definedRulesNames, ruleName)) {\n        errMsg =\n            \"Invalid rule override, rule: ->\" + ruleName + \"<- cannot be overridden in the grammar: ->\" + className + \"<-\" +\n                \"as it is not defined in any of the super grammars \";\n        errors.push({\n            message: errMsg,\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].INVALID_RULE_OVERRIDE,\n            ruleName: ruleName\n        });\n    }\n    return errors;\n}\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n    if (path === void 0) { path = []; }\n    var errors = [];\n    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"](nextNonTerminals)) {\n        return [];\n    }\n    else {\n        var ruleName = topRule.name;\n        var foundLeftRecursion = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"](nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path\n                }),\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].LEFT_RECURSION,\n                ruleName: ruleName\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        var validNextSteps = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"difference\"](nextNonTerminals, path.concat([topRule]));\n        var errorsFromNextSteps = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](validNextSteps, function (currRefRule) {\n            var newPath = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneArr\"](path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"](errorsFromNextSteps));\n    }\n}\nfunction getFirstNoneTerminal(definition) {\n    var result = [];\n    if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"](definition)) {\n        return result;\n    }\n    var firstProd = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"first\"](definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"NonTerminal\"]) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Flat\"] ||\n        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Option\"] ||\n        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"RepetitionMandatory\"] ||\n        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"RepetitionMandatoryWithSeparator\"] ||\n        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"RepetitionWithSeparator\"] ||\n        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Repetition\"]) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Alternation\"]) {\n        // each sub definition in alternation is a FLAT\n        result = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"](_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](firstProd.definition, function (currSubDef) {\n            return getFirstNoneTerminal(currSubDef.definition);\n        }));\n    }\n    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__[\"Terminal\"]) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    var isFirstOptional = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"isOptionalProd\"])(firstProd);\n    var hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        var rest = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"drop\"](definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nvar OrCollector = /** @class */ (function (_super) {\n    __extends(OrCollector, _super);\n    function OrCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.alternations = [];\n        return _this;\n    }\n    OrCollector.prototype.visitAlternation = function (node) {\n        this.alternations.push(node);\n    };\n    return OrCollector;\n}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__[\"GAstVisitor\"]));\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"](ors, function (errors, currOr) {\n        var exceptLast = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"dropRight\"](currOr.definition);\n        var currErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](exceptLast, function (currAlternative, currAltIdx) {\n            var possibleFirstInAlt = Object(_interpreter__WEBPACK_IMPORTED_MODULE_5__[\"nextPossibleTokensAfter\"])([currAlternative], [], null, 1);\n            if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"](possibleFirstInAlt)) {\n                return {\n                    message: errMsgProvider.buildEmptyAlternationError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr,\n                        emptyChoiceIdx: currAltIdx\n                    }),\n                    type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].NONE_LAST_EMPTY_ALT,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx,\n                    alternative: currAltIdx + 1\n                };\n            }\n            else {\n                return null;\n            }\n        });\n        return errors.concat(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"compact\"](currErrors));\n    }, []);\n    return errors;\n}\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, ignoredIssues, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    // TODO: this filtering should be deprecated once we remove the ignoredIssues\n    //  IParserConfig property\n    var ignoredIssuesForCurrentRule = ignoredIssues[topLevelRule.name];\n    if (ignoredIssuesForCurrentRule) {\n        ors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reject\"])(ors, function (currOr) {\n            return ignoredIssuesForCurrentRule[Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"getProductionDslName\"])(currOr) +\n                (currOr.idx === 0 ? \"\" : currOr.idx)];\n        });\n    }\n    // New Handling of ignoring ambiguities\n    // - https://github.com/SAP/chevrotain/issues/869\n    ors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reject\"])(ors, function (currOr) { return currOr.ignoreAmbiguities === true; });\n    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"](ors, function (result, currOr) {\n        var currOccurrence = currOr.idx;\n        var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        var alternatives = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"getLookaheadPathsForOr\"])(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);\n    }, []);\n    return errors;\n}\nvar RepetionCollector = /** @class */ (function (_super) {\n    __extends(RepetionCollector, _super);\n    function RepetionCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    RepetionCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    return RepetionCollector;\n}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__[\"GAstVisitor\"]));\n\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"](ors, function (errors, currOr) {\n        if (currOr.definition.length > 255) {\n            errors.push({\n                message: errMsgProvider.buildTooManyAlternativesError({\n                    topLevelRule: topLevelRule,\n                    alternation: currOr\n                }),\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].TOO_MANY_ALTS,\n                ruleName: topLevelRule.name,\n                occurrence: currOr.idx\n            });\n        }\n        return errors;\n    }, []);\n    return errors;\n}\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    var errors = [];\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(topLevelRules, function (currTopRule) {\n        var collectorVisitor = new RepetionCollector();\n        currTopRule.accept(collectorVisitor);\n        var allRuleProductions = collectorVisitor.allProductions;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(allRuleProductions, function (currProd) {\n            var prodType = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"getProdType\"])(currProd);\n            var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            var currOccurrence = currProd.idx;\n            var paths = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"getLookaheadPathsForOptionalProd\"])(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            var pathsInsideProduction = paths[0];\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(pathsInsideProduction))) {\n                var errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd\n                });\n                errors.push({\n                    message: errMsg,\n                    type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    var foundAmbiguousPaths = [];\n    var identicalAmbiguities = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(alternatives, function (result, currAlt, currAltIdx) {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currAlt, function (currPath) {\n            var altsCurrPathAppearsIn = [currAltIdx];\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(alternatives, function (currOtherAlt, currOtherAltIdx) {\n                if (currAltIdx !== currOtherAltIdx &&\n                    Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"containsPath\"])(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx]\n                        .ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"containsPath\"])(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath\n                });\n            }\n        });\n        return result;\n    }, []);\n    var currErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"](identicalAmbiguities, function (currAmbDescriptor) {\n        var ambgIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });\n        var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path\n        });\n        return {\n            message: currMessage,\n            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: [currAmbDescriptor.alts]\n        };\n    });\n    return currErrors;\n}\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    var errors = [];\n    // flatten\n    var pathsAndIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(alternatives, function (result, currAlt, idx) {\n        var currPathsAndIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(currAlt, function (currPath) {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(pathsAndIndices, function (currPathAndIdx) {\n        var alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return;\n        }\n        var targetIdx = currPathAndIdx.idx;\n        var targetPath = currPathAndIdx.path;\n        var prefixAmbiguitiesPathsAndIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"findAll\"])(pathsAndIndices, function (searchPathAndIdx) {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx]\n                .ignoreAmbiguities !== true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"isStrictPrefixOfPath\"])(searchPathAndIdx.path, targetPath));\n        });\n        var currPathPrefixErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path\n            });\n            return {\n                message: message,\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices\n            };\n        });\n        errors = errors.concat(currPathPrefixErrors);\n    });\n    return errors;\n}\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    var errors = [];\n    var tokenNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(tokenTypes, function (currToken) { return currToken.name; });\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(topLevels, function (currRule) {\n        var currRuleName = currRule.name;\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(tokenNames, currRuleName)) {\n            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName\n            });\n        }\n    });\n    return errors;\n}\nfunction validateDuplicateNestedRules(topLevelRules, errMsgProvider) {\n    var errors = [];\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(topLevelRules, function (currTopRule) {\n        var namedCollectorVisitor = new _cst_cst__WEBPACK_IMPORTED_MODULE_4__[\"NamedDSLMethodsCollectorVisitor\"](\"\");\n        currTopRule.accept(namedCollectorVisitor);\n        var prodsByGroup = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"groupBy\"])(namedCollectorVisitor.result, function (item) { return item.name; });\n        var duplicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(prodsByGroup, function (currGroup) {\n            return currGroup.length > 1;\n        });\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(duplicates), function (currDupGroup) {\n            var currDupProds = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(currDupGroup, function (dupGroup) { return dupGroup.orgProd; });\n            var errMsg = errMsgProvider.buildDuplicateNestedRuleNameError(currTopRule, currDupProds);\n            errors.push({\n                message: errMsg,\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__[\"ParserDefinitionErrorType\"].DUPLICATE_NESTED_NAME,\n                ruleName: currTopRule.name\n            });\n        });\n    });\n    return errors;\n}\n//# sourceMappingURL=checks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2NoZWNrcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3BhcnNlL2dyYW1tYXIvY2hlY2tzLmpzPzY2YzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IGNvbnRhaW5zLCBldmVyeSwgZmluZEFsbCwgZmxhdHRlbiwgZm9yRWFjaCwgZ3JvdXBCeSwgaXNFbXB0eSwgbWFwLCBwaWNrLCByZWR1Y2UsIHJlamVjdCwgdmFsdWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlIH0gZnJvbSBcIi4uL3BhcnNlci9wYXJzZXJcIjtcbmltcG9ydCB7IGdldFByb2R1Y3Rpb25Ec2xOYW1lLCBpc09wdGlvbmFsUHJvZCB9IGZyb20gXCIuL2dhc3QvZ2FzdFwiO1xuaW1wb3J0IHsgY29udGFpbnNQYXRoLCBnZXRMb29rYWhlYWRQYXRoc0Zvck9wdGlvbmFsUHJvZCwgZ2V0TG9va2FoZWFkUGF0aHNGb3JPciwgZ2V0UHJvZFR5cGUsIGlzU3RyaWN0UHJlZml4T2ZQYXRoIH0gZnJvbSBcIi4vbG9va2FoZWFkXCI7XG5pbXBvcnQgeyBOYW1lZERTTE1ldGhvZHNDb2xsZWN0b3JWaXNpdG9yIH0gZnJvbSBcIi4uL2NzdC9jc3RcIjtcbmltcG9ydCB7IG5leHRQb3NzaWJsZVRva2Vuc0FmdGVyIH0gZnJvbSBcIi4vaW50ZXJwcmV0ZXJcIjtcbmltcG9ydCB7IEFsdGVybmF0aW9uLCBGbGF0LCBOb25UZXJtaW5hbCwgT3B0aW9uLCBSZXBldGl0aW9uLCBSZXBldGl0aW9uTWFuZGF0b3J5LCBSZXBldGl0aW9uTWFuZGF0b3J5V2l0aFNlcGFyYXRvciwgUmVwZXRpdGlvbldpdGhTZXBhcmF0b3IsIFRlcm1pbmFsIH0gZnJvbSBcIi4vZ2FzdC9nYXN0X3B1YmxpY1wiO1xuaW1wb3J0IHsgR0FzdFZpc2l0b3IgfSBmcm9tIFwiLi9nYXN0L2dhc3RfdmlzaXRvcl9wdWJsaWNcIjtcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUdyYW1tYXIodG9wTGV2ZWxzLCBnbG9iYWxNYXhMb29rYWhlYWQsIHRva2VuVHlwZXMsIGlnbm9yZWRJc3N1ZXMsIGVyck1zZ1Byb3ZpZGVyLCBncmFtbWFyTmFtZSkge1xuICAgIHZhciBkdXBsaWNhdGVFcnJvcnMgPSB1dGlscy5tYXAodG9wTGV2ZWxzLCBmdW5jdGlvbiAoY3VyclRvcExldmVsKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZUR1cGxpY2F0ZVByb2R1Y3Rpb25zKGN1cnJUb3BMZXZlbCwgZXJyTXNnUHJvdmlkZXIpO1xuICAgIH0pO1xuICAgIHZhciBsZWZ0UmVjdXJzaW9uRXJyb3JzID0gdXRpbHMubWFwKHRvcExldmVscywgZnVuY3Rpb24gKGN1cnJUb3BSdWxlKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZU5vTGVmdFJlY3Vyc2lvbihjdXJyVG9wUnVsZSwgY3VyclRvcFJ1bGUsIGVyck1zZ1Byb3ZpZGVyKTtcbiAgICB9KTtcbiAgICB2YXIgZW1wdHlBbHRFcnJvcnMgPSBbXTtcbiAgICB2YXIgYW1iaWd1b3VzQWx0c0Vycm9ycyA9IFtdO1xuICAgIHZhciBlbXB0eVJlcGV0aXRpb25FcnJvcnMgPSBbXTtcbiAgICAvLyBsZWZ0IHJlY3Vyc2lvbiBjb3VsZCBjYXVzZSBpbmZpbml0ZSBsb29wcyBpbiB0aGUgZm9sbG93aW5nIHZhbGlkYXRpb25zLlxuICAgIC8vIEl0IGlzIHNhZmVzdCB0byBmaXJzdCBoYXZlIHRoZSB1c2VyIGZpeCB0aGUgbGVmdCByZWN1cnNpb24gZXJyb3JzIGZpcnN0IGFuZCBvbmx5IHRoZW4gZXhhbWluZSBGdXJ0aGVyIGlzc3Vlcy5cbiAgICBpZiAoZXZlcnkobGVmdFJlY3Vyc2lvbkVycm9ycywgaXNFbXB0eSkpIHtcbiAgICAgICAgZW1wdHlBbHRFcnJvcnMgPSBtYXAodG9wTGV2ZWxzLCBmdW5jdGlvbiAoY3VyclRvcFJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZUVtcHR5T3JBbHRlcm5hdGl2ZShjdXJyVG9wUnVsZSwgZXJyTXNnUHJvdmlkZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgYW1iaWd1b3VzQWx0c0Vycm9ycyA9IG1hcCh0b3BMZXZlbHMsIGZ1bmN0aW9uIChjdXJyVG9wUnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXMoY3VyclRvcFJ1bGUsIGdsb2JhbE1heExvb2thaGVhZCwgaWdub3JlZElzc3VlcywgZXJyTXNnUHJvdmlkZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZW1wdHlSZXBldGl0aW9uRXJyb3JzID0gdmFsaWRhdGVTb21lTm9uRW1wdHlMb29rYWhlYWRQYXRoKHRvcExldmVscywgZ2xvYmFsTWF4TG9va2FoZWFkLCBlcnJNc2dQcm92aWRlcik7XG4gICAgfVxuICAgIHZhciB0ZXJtc05hbWVzcGFjZUNvbmZsaWN0RXJyb3JzID0gY2hlY2tUZXJtaW5hbEFuZE5vbmVUZXJtaW5hbHNOYW1lU3BhY2UodG9wTGV2ZWxzLCB0b2tlblR5cGVzLCBlcnJNc2dQcm92aWRlcik7XG4gICAgdmFyIHRva2VuTmFtZUVycm9ycyA9IHV0aWxzLm1hcCh0b2tlblR5cGVzLCBmdW5jdGlvbiAoY3VyclRva1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlVG9rZW5OYW1lKGN1cnJUb2tUeXBlLCBlcnJNc2dQcm92aWRlcik7XG4gICAgfSk7XG4gICAgdmFyIG5lc3RlZFJ1bGVzTmFtZUVycm9ycyA9IHZhbGlkYXRlTmVzdGVkUnVsZXNOYW1lcyh0b3BMZXZlbHMsIGVyck1zZ1Byb3ZpZGVyKTtcbiAgICB2YXIgbmVzdGVkUnVsZXNEdXBsaWNhdGVFcnJvcnMgPSB2YWxpZGF0ZUR1cGxpY2F0ZU5lc3RlZFJ1bGVzKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpO1xuICAgIHZhciB0b29NYW55QWx0c0Vycm9ycyA9IG1hcCh0b3BMZXZlbHMsIGZ1bmN0aW9uIChjdXJSdWxlKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZVRvb01hbnlBbHRzKGN1clJ1bGUsIGVyck1zZ1Byb3ZpZGVyKTtcbiAgICB9KTtcbiAgICB2YXIgcnVsZU5hbWVFcnJvcnMgPSBtYXAodG9wTGV2ZWxzLCBmdW5jdGlvbiAoY3VyUnVsZSkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlTmFtZShjdXJSdWxlLCBlcnJNc2dQcm92aWRlcik7XG4gICAgfSk7XG4gICAgdmFyIGR1cGxpY2F0ZVJ1bGVzRXJyb3IgPSBtYXAodG9wTGV2ZWxzLCBmdW5jdGlvbiAoY3VyUnVsZSkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVSdWxlRG9lc05vdEFscmVhZHlFeGlzdChjdXJSdWxlLCB0b3BMZXZlbHMsIGdyYW1tYXJOYW1lLCBlcnJNc2dQcm92aWRlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuICh1dGlscy5mbGF0dGVuKGR1cGxpY2F0ZUVycm9ycy5jb25jYXQodG9rZW5OYW1lRXJyb3JzLCBuZXN0ZWRSdWxlc05hbWVFcnJvcnMsIG5lc3RlZFJ1bGVzRHVwbGljYXRlRXJyb3JzLCBlbXB0eVJlcGV0aXRpb25FcnJvcnMsIGxlZnRSZWN1cnNpb25FcnJvcnMsIGVtcHR5QWx0RXJyb3JzLCBhbWJpZ3VvdXNBbHRzRXJyb3JzLCB0ZXJtc05hbWVzcGFjZUNvbmZsaWN0RXJyb3JzLCB0b29NYW55QWx0c0Vycm9ycywgcnVsZU5hbWVFcnJvcnMsIGR1cGxpY2F0ZVJ1bGVzRXJyb3IpKSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU5lc3RlZFJ1bGVzTmFtZXModG9wTGV2ZWxzLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3JFYWNoKHRvcExldmVscywgZnVuY3Rpb24gKGN1clRvcExldmVsKSB7XG4gICAgICAgIHZhciBuYW1lZENvbGxlY3RvclZpc2l0b3IgPSBuZXcgTmFtZWREU0xNZXRob2RzQ29sbGVjdG9yVmlzaXRvcihcIlwiKTtcbiAgICAgICAgY3VyVG9wTGV2ZWwuYWNjZXB0KG5hbWVkQ29sbGVjdG9yVmlzaXRvcik7XG4gICAgICAgIHZhciBuZXN0ZWRQcm9kcyA9IG1hcChuYW1lZENvbGxlY3RvclZpc2l0b3IucmVzdWx0LCBmdW5jdGlvbiAoY3Vyckl0ZW0pIHsgcmV0dXJuIGN1cnJJdGVtLm9yZ1Byb2Q7IH0pO1xuICAgICAgICByZXN1bHQucHVzaChtYXAobmVzdGVkUHJvZHMsIGZ1bmN0aW9uIChjdXJyTmVzdGVkUHJvZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlTmVzdGVkUnVsZU5hbWUoY3VyVG9wTGV2ZWwsIGN1cnJOZXN0ZWRQcm9kLCBlcnJNc2dQcm92aWRlcik7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmxhdHRlbihyZXN1bHQpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVEdXBsaWNhdGVQcm9kdWN0aW9ucyh0b3BMZXZlbFJ1bGUsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgdmFyIGNvbGxlY3RvclZpc2l0b3IgPSBuZXcgT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3IoKTtcbiAgICB0b3BMZXZlbFJ1bGUuYWNjZXB0KGNvbGxlY3RvclZpc2l0b3IpO1xuICAgIHZhciBhbGxSdWxlUHJvZHVjdGlvbnMgPSBjb2xsZWN0b3JWaXNpdG9yLmFsbFByb2R1Y3Rpb25zO1xuICAgIHZhciBwcm9kdWN0aW9uR3JvdXBzID0gdXRpbHMuZ3JvdXBCeShhbGxSdWxlUHJvZHVjdGlvbnMsIGlkZW50aWZ5UHJvZHVjdGlvbkZvckR1cGxpY2F0ZXMpO1xuICAgIHZhciBkdXBsaWNhdGVzID0gdXRpbHMucGljayhwcm9kdWN0aW9uR3JvdXBzLCBmdW5jdGlvbiAoY3Vyckdyb3VwKSB7XG4gICAgICAgIHJldHVybiBjdXJyR3JvdXAubGVuZ3RoID4gMTtcbiAgICB9KTtcbiAgICB2YXIgZXJyb3JzID0gdXRpbHMubWFwKHV0aWxzLnZhbHVlcyhkdXBsaWNhdGVzKSwgZnVuY3Rpb24gKGN1cnJEdXBsaWNhdGVzKSB7XG4gICAgICAgIHZhciBmaXJzdFByb2QgPSB1dGlscy5maXJzdChjdXJyRHVwbGljYXRlcyk7XG4gICAgICAgIHZhciBtc2cgPSBlcnJNc2dQcm92aWRlci5idWlsZER1cGxpY2F0ZUZvdW5kRXJyb3IodG9wTGV2ZWxSdWxlLCBjdXJyRHVwbGljYXRlcyk7XG4gICAgICAgIHZhciBkc2xOYW1lID0gZ2V0UHJvZHVjdGlvbkRzbE5hbWUoZmlyc3RQcm9kKTtcbiAgICAgICAgdmFyIGRlZkVycm9yID0ge1xuICAgICAgICAgICAgbWVzc2FnZTogbXNnLFxuICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5EVVBMSUNBVEVfUFJPRFVDVElPTlMsXG4gICAgICAgICAgICBydWxlTmFtZTogdG9wTGV2ZWxSdWxlLm5hbWUsXG4gICAgICAgICAgICBkc2xOYW1lOiBkc2xOYW1lLFxuICAgICAgICAgICAgb2NjdXJyZW5jZTogZmlyc3RQcm9kLmlkeFxuICAgICAgICB9O1xuICAgICAgICB2YXIgcGFyYW0gPSBnZXRFeHRyYVByb2R1Y3Rpb25Bcmd1bWVudChmaXJzdFByb2QpO1xuICAgICAgICBpZiAocGFyYW0pIHtcbiAgICAgICAgICAgIGRlZkVycm9yLnBhcmFtZXRlciA9IHBhcmFtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZFcnJvcjtcbiAgICB9KTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZ5UHJvZHVjdGlvbkZvckR1cGxpY2F0ZXMocHJvZCkge1xuICAgIHJldHVybiBnZXRQcm9kdWN0aW9uRHNsTmFtZShwcm9kKSArIFwiXyNfXCIgKyBwcm9kLmlkeCArIFwiXyNfXCIgKyBnZXRFeHRyYVByb2R1Y3Rpb25Bcmd1bWVudChwcm9kKTtcbn1cbmZ1bmN0aW9uIGdldEV4dHJhUHJvZHVjdGlvbkFyZ3VtZW50KHByb2QpIHtcbiAgICBpZiAocHJvZCBpbnN0YW5jZW9mIFRlcm1pbmFsKSB7XG4gICAgICAgIHJldHVybiBwcm9kLnRlcm1pbmFsVHlwZS5uYW1lO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9kIGluc3RhbmNlb2YgTm9uVGVybWluYWwpIHtcbiAgICAgICAgcmV0dXJuIHByb2Qubm9uVGVybWluYWxOYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxudmFyIE9jY3VycmVuY2VWYWxpZGF0aW9uQ29sbGVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3RvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3RvcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFsbFByb2R1Y3Rpb25zID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0Tm9uVGVybWluYWwgPSBmdW5jdGlvbiAoc3VicnVsZSkge1xuICAgICAgICB0aGlzLmFsbFByb2R1Y3Rpb25zLnB1c2goc3VicnVsZSk7XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3Rvci5wcm90b3R5cGUudmlzaXRPcHRpb24gPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHRoaXMuYWxsUHJvZHVjdGlvbnMucHVzaChvcHRpb24pO1xuICAgIH07XG4gICAgT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbldpdGhTZXBhcmF0b3IgPSBmdW5jdGlvbiAobWFueVNlcCkge1xuICAgICAgICB0aGlzLmFsbFByb2R1Y3Rpb25zLnB1c2gobWFueVNlcCk7XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3Rvci5wcm90b3R5cGUudmlzaXRSZXBldGl0aW9uTWFuZGF0b3J5ID0gZnVuY3Rpb24gKGF0TGVhc3RPbmUpIHtcbiAgICAgICAgdGhpcy5hbGxQcm9kdWN0aW9ucy5wdXNoKGF0TGVhc3RPbmUpO1xuICAgIH07XG4gICAgT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbk1hbmRhdG9yeVdpdGhTZXBhcmF0b3IgPSBmdW5jdGlvbiAoYXRMZWFzdE9uZVNlcCkge1xuICAgICAgICB0aGlzLmFsbFByb2R1Y3Rpb25zLnB1c2goYXRMZWFzdE9uZVNlcCk7XG4gICAgfTtcbiAgICBPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3Rvci5wcm90b3R5cGUudmlzaXRSZXBldGl0aW9uID0gZnVuY3Rpb24gKG1hbnkpIHtcbiAgICAgICAgdGhpcy5hbGxQcm9kdWN0aW9ucy5wdXNoKG1hbnkpO1xuICAgIH07XG4gICAgT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0QWx0ZXJuYXRpb24gPSBmdW5jdGlvbiAob3IpIHtcbiAgICAgICAgdGhpcy5hbGxQcm9kdWN0aW9ucy5wdXNoKG9yKTtcbiAgICB9O1xuICAgIE9jY3VycmVuY2VWYWxpZGF0aW9uQ29sbGVjdG9yLnByb3RvdHlwZS52aXNpdFRlcm1pbmFsID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuYWxsUHJvZHVjdGlvbnMucHVzaCh0ZXJtaW5hbCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2NjdXJyZW5jZVZhbGlkYXRpb25Db2xsZWN0b3I7XG59KEdBc3RWaXNpdG9yKSk7XG5leHBvcnQgeyBPY2N1cnJlbmNlVmFsaWRhdGlvbkNvbGxlY3RvciB9O1xuZXhwb3J0IHZhciB2YWxpZFRlcm1zUGF0dGVybiA9IC9eW2EtekEtWl9dXFx3KiQvO1xuZXhwb3J0IHZhciB2YWxpZE5lc3RlZFJ1bGVOYW1lID0gbmV3IFJlZ0V4cCh2YWxpZFRlcm1zUGF0dGVybi5zb3VyY2UucmVwbGFjZShcIl5cIiwgXCJeXFxcXCRcIikpO1xuLy8gVE9ETzogcmVtb3ZlIHRoaXMgbGltaXRhdGlvbiBub3cgdGhhdCB3ZSB1c2UgcmVjb3JkZXJzXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSdWxlTmFtZShydWxlLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgcnVsZU5hbWUgPSBydWxlLm5hbWU7XG4gICAgaWYgKCFydWxlTmFtZS5tYXRjaCh2YWxpZFRlcm1zUGF0dGVybikpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyTXNnUHJvdmlkZXIuYnVpbGRJbnZhbGlkUnVsZU5hbWVFcnJvcih7XG4gICAgICAgICAgICAgICAgdG9wTGV2ZWxSdWxlOiBydWxlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkUGF0dGVybjogdmFsaWRUZXJtc1BhdHRlcm5cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5JTlZBTElEX1JVTEVfTkFNRSxcbiAgICAgICAgICAgIHJ1bGVOYW1lOiBydWxlTmFtZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbi8vIFRPRE86IGRpZCB0aGUgbmVzdGVkIHJ1bGUgbmFtZSByZWdFeHAgbm93IGNoYW5nZT9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU5lc3RlZFJ1bGVOYW1lKHRvcExldmVsLCBuZXN0ZWRQcm9kLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgZXJyTXNnO1xuICAgIGlmICghbmVzdGVkUHJvZC5uYW1lLm1hdGNoKHZhbGlkTmVzdGVkUnVsZU5hbWUpKSB7XG4gICAgICAgIGVyck1zZyA9IGVyck1zZ1Byb3ZpZGVyLmJ1aWxkSW52YWxpZE5lc3RlZFJ1bGVOYW1lRXJyb3IodG9wTGV2ZWwsIG5lc3RlZFByb2QpO1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2csXG4gICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLklOVkFMSURfTkVTVEVEX1JVTEVfTkFNRSxcbiAgICAgICAgICAgIHJ1bGVOYW1lOiB0b3BMZXZlbC5uYW1lXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuLy8gVE9ETzogcmVtb3ZlIHRoaXMgbGltaXRhdGlvbiBub3cgdGhhdCB3ZSB1c2UgcmVjb3JkZXJzXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUb2tlbk5hbWUodG9rZW5UeXBlLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgdG9rVHlwZU5hbWUgPSB0b2tlblR5cGUubmFtZTtcbiAgICBpZiAoIXRva1R5cGVOYW1lLm1hdGNoKHZhbGlkVGVybXNQYXR0ZXJuKSkge1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2dQcm92aWRlci5idWlsZFRva2VuTmFtZUVycm9yKHtcbiAgICAgICAgICAgICAgICB0b2tlblR5cGU6IHRva2VuVHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZFBhdHRlcm46IHZhbGlkVGVybXNQYXR0ZXJuXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR5cGU6IFBhcnNlckRlZmluaXRpb25FcnJvclR5cGUuSU5WQUxJRF9UT0tFTl9OQU1FXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUnVsZURvZXNOb3RBbHJlYWR5RXhpc3QocnVsZSwgYWxsUnVsZXMsIGNsYXNzTmFtZSwgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIG9jY3VycmVuY2VzID0gcmVkdWNlKGFsbFJ1bGVzLCBmdW5jdGlvbiAocmVzdWx0LCBjdXJSdWxlKSB7XG4gICAgICAgIGlmIChjdXJSdWxlLm5hbWUgPT09IHJ1bGUubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCAwKTtcbiAgICBpZiAob2NjdXJyZW5jZXMgPiAxKSB7XG4gICAgICAgIHZhciBlcnJNc2cgPSBlcnJNc2dQcm92aWRlci5idWlsZER1cGxpY2F0ZVJ1bGVOYW1lRXJyb3Ioe1xuICAgICAgICAgICAgdG9wTGV2ZWxSdWxlOiBydWxlLFxuICAgICAgICAgICAgZ3JhbW1hck5hbWU6IGNsYXNzTmFtZVxuICAgICAgICB9KTtcbiAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyTXNnLFxuICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5EVVBMSUNBVEVfUlVMRV9OQU1FLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHJ1bGUubmFtZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbi8vIFRPRE86IGlzIHRoZXJlIGFueXdheSB0byBnZXQgb25seSB0aGUgcnVsZSBuYW1lcyBvZiBydWxlcyBpbmhlcml0ZWQgZnJvbSB0aGUgc3VwZXIgZ3JhbW1hcnM/XG4vLyBUaGlzIGlzIG5vdCBwYXJ0IG9mIHRoZSBJR3JhbW1hckVycm9yUHJvdmlkZXIgYmVjYXVzZSB0aGUgdmFsaWRhdGlvbiBjYW5ub3QgYmUgcGVyZm9ybWVkIG9uXG4vLyBUaGUgZ3JhbW1hciBzdHJ1Y3R1cmUsIG9ubHkgYXQgcnVudGltZS5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJ1bGVJc092ZXJyaWRkZW4ocnVsZU5hbWUsIGRlZmluZWRSdWxlc05hbWVzLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIGVyck1zZztcbiAgICBpZiAoIXV0aWxzLmNvbnRhaW5zKGRlZmluZWRSdWxlc05hbWVzLCBydWxlTmFtZSkpIHtcbiAgICAgICAgZXJyTXNnID1cbiAgICAgICAgICAgIFwiSW52YWxpZCBydWxlIG92ZXJyaWRlLCBydWxlOiAtPlwiICsgcnVsZU5hbWUgKyBcIjwtIGNhbm5vdCBiZSBvdmVycmlkZGVuIGluIHRoZSBncmFtbWFyOiAtPlwiICsgY2xhc3NOYW1lICsgXCI8LVwiICtcbiAgICAgICAgICAgICAgICBcImFzIGl0IGlzIG5vdCBkZWZpbmVkIGluIGFueSBvZiB0aGUgc3VwZXIgZ3JhbW1hcnMgXCI7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVyck1zZyxcbiAgICAgICAgICAgIHR5cGU6IFBhcnNlckRlZmluaXRpb25FcnJvclR5cGUuSU5WQUxJRF9SVUxFX09WRVJSSURFLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHJ1bGVOYW1lXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKHRvcFJ1bGUsIGN1cnJSdWxlLCBlcnJNc2dQcm92aWRlciwgcGF0aCkge1xuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFtdOyB9XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBuZXh0Tm9uVGVybWluYWxzID0gZ2V0Rmlyc3ROb25lVGVybWluYWwoY3VyclJ1bGUuZGVmaW5pdGlvbik7XG4gICAgaWYgKHV0aWxzLmlzRW1wdHkobmV4dE5vblRlcm1pbmFscykpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJ1bGVOYW1lID0gdG9wUnVsZS5uYW1lO1xuICAgICAgICB2YXIgZm91bmRMZWZ0UmVjdXJzaW9uID0gdXRpbHMuY29udGFpbnMobmV4dE5vblRlcm1pbmFscywgdG9wUnVsZSk7XG4gICAgICAgIGlmIChmb3VuZExlZnRSZWN1cnNpb24pIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2dQcm92aWRlci5idWlsZExlZnRSZWN1cnNpb25FcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIHRvcExldmVsUnVsZTogdG9wUnVsZSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdFJlY3Vyc2lvblBhdGg6IHBhdGhcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLkxFRlRfUkVDVVJTSU9OLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBydWxlTmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgYXJlIG9ubHkgbG9va2luZyBmb3IgY3ljbGljIHBhdGhzIGxlYWRpbmcgYmFjayB0byB0aGUgc3BlY2lmaWMgdG9wUnVsZVxuICAgICAgICAvLyBvdGhlciBjeWNsaWMgcGF0aHMgYXJlIGlnbm9yZWQsIHdlIHN0aWxsIG5lZWQgdGhpcyBkaWZmZXJlbmNlIHRvIGF2b2lkIGluZmluaXRlIGxvb3BzLi4uXG4gICAgICAgIHZhciB2YWxpZE5leHRTdGVwcyA9IHV0aWxzLmRpZmZlcmVuY2UobmV4dE5vblRlcm1pbmFscywgcGF0aC5jb25jYXQoW3RvcFJ1bGVdKSk7XG4gICAgICAgIHZhciBlcnJvcnNGcm9tTmV4dFN0ZXBzID0gdXRpbHMubWFwKHZhbGlkTmV4dFN0ZXBzLCBmdW5jdGlvbiAoY3VyclJlZlJ1bGUpIHtcbiAgICAgICAgICAgIHZhciBuZXdQYXRoID0gdXRpbHMuY2xvbmVBcnIocGF0aCk7XG4gICAgICAgICAgICBuZXdQYXRoLnB1c2goY3VyclJlZlJ1bGUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlTm9MZWZ0UmVjdXJzaW9uKHRvcFJ1bGUsIGN1cnJSZWZSdWxlLCBlcnJNc2dQcm92aWRlciwgbmV3UGF0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZXJyb3JzLmNvbmNhdCh1dGlscy5mbGF0dGVuKGVycm9yc0Zyb21OZXh0U3RlcHMpKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3ROb25lVGVybWluYWwoZGVmaW5pdGlvbikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBpZiAodXRpbHMuaXNFbXB0eShkZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB2YXIgZmlyc3RQcm9kID0gdXRpbHMuZmlyc3QoZGVmaW5pdGlvbik7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoZmlyc3RQcm9kIGluc3RhbmNlb2YgTm9uVGVybWluYWwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goZmlyc3RQcm9kLnJlZmVyZW5jZWRSdWxlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RQcm9kIGluc3RhbmNlb2YgRmxhdCB8fFxuICAgICAgICBmaXJzdFByb2QgaW5zdGFuY2VvZiBPcHRpb24gfHxcbiAgICAgICAgZmlyc3RQcm9kIGluc3RhbmNlb2YgUmVwZXRpdGlvbk1hbmRhdG9yeSB8fFxuICAgICAgICBmaXJzdFByb2QgaW5zdGFuY2VvZiBSZXBldGl0aW9uTWFuZGF0b3J5V2l0aFNlcGFyYXRvciB8fFxuICAgICAgICBmaXJzdFByb2QgaW5zdGFuY2VvZiBSZXBldGl0aW9uV2l0aFNlcGFyYXRvciB8fFxuICAgICAgICBmaXJzdFByb2QgaW5zdGFuY2VvZiBSZXBldGl0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoZ2V0Rmlyc3ROb25lVGVybWluYWwoZmlyc3RQcm9kLmRlZmluaXRpb24pKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RQcm9kIGluc3RhbmNlb2YgQWx0ZXJuYXRpb24pIHtcbiAgICAgICAgLy8gZWFjaCBzdWIgZGVmaW5pdGlvbiBpbiBhbHRlcm5hdGlvbiBpcyBhIEZMQVRcbiAgICAgICAgcmVzdWx0ID0gdXRpbHMuZmxhdHRlbih1dGlscy5tYXAoZmlyc3RQcm9kLmRlZmluaXRpb24sIGZ1bmN0aW9uIChjdXJyU3ViRGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Rmlyc3ROb25lVGVybWluYWwoY3VyclN1YkRlZi5kZWZpbml0aW9uKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChmaXJzdFByb2QgaW5zdGFuY2VvZiBUZXJtaW5hbCkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIHNlZSwgbW92ZSBhbG9uZ1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJub24gZXhoYXVzdGl2ZSBtYXRjaFwiKTtcbiAgICB9XG4gICAgdmFyIGlzRmlyc3RPcHRpb25hbCA9IGlzT3B0aW9uYWxQcm9kKGZpcnN0UHJvZCk7XG4gICAgdmFyIGhhc01vcmUgPSBkZWZpbml0aW9uLmxlbmd0aCA+IDE7XG4gICAgaWYgKGlzRmlyc3RPcHRpb25hbCAmJiBoYXNNb3JlKSB7XG4gICAgICAgIHZhciByZXN0ID0gdXRpbHMuZHJvcChkZWZpbml0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb25jYXQoZ2V0Rmlyc3ROb25lVGVybWluYWwocmVzdCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG52YXIgT3JDb2xsZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9yQ29sbGVjdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9yQ29sbGVjdG9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWx0ZXJuYXRpb25zID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT3JDb2xsZWN0b3IucHJvdG90eXBlLnZpc2l0QWx0ZXJuYXRpb24gPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB0aGlzLmFsdGVybmF0aW9ucy5wdXNoKG5vZGUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9yQ29sbGVjdG9yO1xufShHQXN0VmlzaXRvcikpO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW1wdHlPckFsdGVybmF0aXZlKHRvcExldmVsUnVsZSwgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICB2YXIgb3JDb2xsZWN0b3IgPSBuZXcgT3JDb2xsZWN0b3IoKTtcbiAgICB0b3BMZXZlbFJ1bGUuYWNjZXB0KG9yQ29sbGVjdG9yKTtcbiAgICB2YXIgb3JzID0gb3JDb2xsZWN0b3IuYWx0ZXJuYXRpb25zO1xuICAgIHZhciBlcnJvcnMgPSB1dGlscy5yZWR1Y2Uob3JzLCBmdW5jdGlvbiAoZXJyb3JzLCBjdXJyT3IpIHtcbiAgICAgICAgdmFyIGV4Y2VwdExhc3QgPSB1dGlscy5kcm9wUmlnaHQoY3Vyck9yLmRlZmluaXRpb24pO1xuICAgICAgICB2YXIgY3VyckVycm9ycyA9IHV0aWxzLm1hcChleGNlcHRMYXN0LCBmdW5jdGlvbiAoY3VyckFsdGVybmF0aXZlLCBjdXJyQWx0SWR4KSB7XG4gICAgICAgICAgICB2YXIgcG9zc2libGVGaXJzdEluQWx0ID0gbmV4dFBvc3NpYmxlVG9rZW5zQWZ0ZXIoW2N1cnJBbHRlcm5hdGl2ZV0sIFtdLCBudWxsLCAxKTtcbiAgICAgICAgICAgIGlmICh1dGlscy5pc0VtcHR5KHBvc3NpYmxlRmlyc3RJbkFsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2dQcm92aWRlci5idWlsZEVtcHR5QWx0ZXJuYXRpb25FcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3BMZXZlbFJ1bGU6IHRvcExldmVsUnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uOiBjdXJyT3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eUNob2ljZUlkeDogY3VyckFsdElkeFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5OT05FX0xBU1RfRU1QVFlfQUxULFxuICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogdG9wTGV2ZWxSdWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9jY3VycmVuY2U6IGN1cnJPci5pZHgsXG4gICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlOiBjdXJyQWx0SWR4ICsgMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlcnJvcnMuY29uY2F0KHV0aWxzLmNvbXBhY3QoY3VyckVycm9ycykpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQW1iaWd1b3VzQWx0ZXJuYXRpb25BbHRlcm5hdGl2ZXModG9wTGV2ZWxSdWxlLCBnbG9iYWxNYXhMb29rYWhlYWQsIGlnbm9yZWRJc3N1ZXMsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgdmFyIG9yQ29sbGVjdG9yID0gbmV3IE9yQ29sbGVjdG9yKCk7XG4gICAgdG9wTGV2ZWxSdWxlLmFjY2VwdChvckNvbGxlY3Rvcik7XG4gICAgdmFyIG9ycyA9IG9yQ29sbGVjdG9yLmFsdGVybmF0aW9ucztcbiAgICAvLyBUT0RPOiB0aGlzIGZpbHRlcmluZyBzaG91bGQgYmUgZGVwcmVjYXRlZCBvbmNlIHdlIHJlbW92ZSB0aGUgaWdub3JlZElzc3Vlc1xuICAgIC8vICBJUGFyc2VyQ29uZmlnIHByb3BlcnR5XG4gICAgdmFyIGlnbm9yZWRJc3N1ZXNGb3JDdXJyZW50UnVsZSA9IGlnbm9yZWRJc3N1ZXNbdG9wTGV2ZWxSdWxlLm5hbWVdO1xuICAgIGlmIChpZ25vcmVkSXNzdWVzRm9yQ3VycmVudFJ1bGUpIHtcbiAgICAgICAgb3JzID0gcmVqZWN0KG9ycywgZnVuY3Rpb24gKGN1cnJPcikge1xuICAgICAgICAgICAgcmV0dXJuIGlnbm9yZWRJc3N1ZXNGb3JDdXJyZW50UnVsZVtnZXRQcm9kdWN0aW9uRHNsTmFtZShjdXJyT3IpICtcbiAgICAgICAgICAgICAgICAoY3Vyck9yLmlkeCA9PT0gMCA/IFwiXCIgOiBjdXJyT3IuaWR4KV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBOZXcgSGFuZGxpbmcgb2YgaWdub3JpbmcgYW1iaWd1aXRpZXNcbiAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9TQVAvY2hldnJvdGFpbi9pc3N1ZXMvODY5XG4gICAgb3JzID0gcmVqZWN0KG9ycywgZnVuY3Rpb24gKGN1cnJPcikgeyByZXR1cm4gY3Vyck9yLmlnbm9yZUFtYmlndWl0aWVzID09PSB0cnVlOyB9KTtcbiAgICB2YXIgZXJyb3JzID0gdXRpbHMucmVkdWNlKG9ycywgZnVuY3Rpb24gKHJlc3VsdCwgY3Vyck9yKSB7XG4gICAgICAgIHZhciBjdXJyT2NjdXJyZW5jZSA9IGN1cnJPci5pZHg7XG4gICAgICAgIHZhciBhY3R1YWxNYXhMb29rYWhlYWQgPSBjdXJyT3IubWF4TG9va2FoZWFkIHx8IGdsb2JhbE1heExvb2thaGVhZDtcbiAgICAgICAgdmFyIGFsdGVybmF0aXZlcyA9IGdldExvb2thaGVhZFBhdGhzRm9yT3IoY3Vyck9jY3VycmVuY2UsIHRvcExldmVsUnVsZSwgYWN0dWFsTWF4TG9va2FoZWFkLCBjdXJyT3IpO1xuICAgICAgICB2YXIgYWx0c0FtYmlndWl0eUVycm9ycyA9IGNoZWNrQWx0ZXJuYXRpdmVzQW1iaWd1aXRpZXMoYWx0ZXJuYXRpdmVzLCBjdXJyT3IsIHRvcExldmVsUnVsZSwgZXJyTXNnUHJvdmlkZXIpO1xuICAgICAgICB2YXIgYWx0c1ByZWZpeEFtYmlndWl0eUVycm9ycyA9IGNoZWNrUHJlZml4QWx0ZXJuYXRpdmVzQW1iaWd1aXRpZXMoYWx0ZXJuYXRpdmVzLCBjdXJyT3IsIHRvcExldmVsUnVsZSwgZXJyTXNnUHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChhbHRzQW1iaWd1aXR5RXJyb3JzLCBhbHRzUHJlZml4QW1iaWd1aXR5RXJyb3JzKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbnZhciBSZXBldGlvbkNvbGxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwZXRpb25Db2xsZWN0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwZXRpb25Db2xsZWN0b3IoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hbGxQcm9kdWN0aW9ucyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGV0aW9uQ29sbGVjdG9yLnByb3RvdHlwZS52aXNpdFJlcGV0aXRpb25XaXRoU2VwYXJhdG9yID0gZnVuY3Rpb24gKG1hbnlTZXApIHtcbiAgICAgICAgdGhpcy5hbGxQcm9kdWN0aW9ucy5wdXNoKG1hbnlTZXApO1xuICAgIH07XG4gICAgUmVwZXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbk1hbmRhdG9yeSA9IGZ1bmN0aW9uIChhdExlYXN0T25lKSB7XG4gICAgICAgIHRoaXMuYWxsUHJvZHVjdGlvbnMucHVzaChhdExlYXN0T25lKTtcbiAgICB9O1xuICAgIFJlcGV0aW9uQ29sbGVjdG9yLnByb3RvdHlwZS52aXNpdFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yID0gZnVuY3Rpb24gKGF0TGVhc3RPbmVTZXApIHtcbiAgICAgICAgdGhpcy5hbGxQcm9kdWN0aW9ucy5wdXNoKGF0TGVhc3RPbmVTZXApO1xuICAgIH07XG4gICAgUmVwZXRpb25Db2xsZWN0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbiA9IGZ1bmN0aW9uIChtYW55KSB7XG4gICAgICAgIHRoaXMuYWxsUHJvZHVjdGlvbnMucHVzaChtYW55KTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBldGlvbkNvbGxlY3Rvcjtcbn0oR0FzdFZpc2l0b3IpKTtcbmV4cG9ydCB7IFJlcGV0aW9uQ29sbGVjdG9yIH07XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUb29NYW55QWx0cyh0b3BMZXZlbFJ1bGUsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgdmFyIG9yQ29sbGVjdG9yID0gbmV3IE9yQ29sbGVjdG9yKCk7XG4gICAgdG9wTGV2ZWxSdWxlLmFjY2VwdChvckNvbGxlY3Rvcik7XG4gICAgdmFyIG9ycyA9IG9yQ29sbGVjdG9yLmFsdGVybmF0aW9ucztcbiAgICB2YXIgZXJyb3JzID0gdXRpbHMucmVkdWNlKG9ycywgZnVuY3Rpb24gKGVycm9ycywgY3Vyck9yKSB7XG4gICAgICAgIGlmIChjdXJyT3IuZGVmaW5pdGlvbi5sZW5ndGggPiAyNTUpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2dQcm92aWRlci5idWlsZFRvb01hbnlBbHRlcm5hdGl2ZXNFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIHRvcExldmVsUnVsZTogdG9wTGV2ZWxSdWxlLFxuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbjogY3Vyck9yXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5UT09fTUFOWV9BTFRTLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiB0b3BMZXZlbFJ1bGUubmFtZSxcbiAgICAgICAgICAgICAgICBvY2N1cnJlbmNlOiBjdXJyT3IuaWR4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU29tZU5vbkVtcHR5TG9va2FoZWFkUGF0aCh0b3BMZXZlbFJ1bGVzLCBtYXhMb29rYWhlYWQsIGVyck1zZ1Byb3ZpZGVyKSB7XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIGZvckVhY2godG9wTGV2ZWxSdWxlcywgZnVuY3Rpb24gKGN1cnJUb3BSdWxlKSB7XG4gICAgICAgIHZhciBjb2xsZWN0b3JWaXNpdG9yID0gbmV3IFJlcGV0aW9uQ29sbGVjdG9yKCk7XG4gICAgICAgIGN1cnJUb3BSdWxlLmFjY2VwdChjb2xsZWN0b3JWaXNpdG9yKTtcbiAgICAgICAgdmFyIGFsbFJ1bGVQcm9kdWN0aW9ucyA9IGNvbGxlY3RvclZpc2l0b3IuYWxsUHJvZHVjdGlvbnM7XG4gICAgICAgIGZvckVhY2goYWxsUnVsZVByb2R1Y3Rpb25zLCBmdW5jdGlvbiAoY3VyclByb2QpIHtcbiAgICAgICAgICAgIHZhciBwcm9kVHlwZSA9IGdldFByb2RUeXBlKGN1cnJQcm9kKTtcbiAgICAgICAgICAgIHZhciBhY3R1YWxNYXhMb29rYWhlYWQgPSBjdXJyUHJvZC5tYXhMb29rYWhlYWQgfHwgbWF4TG9va2FoZWFkO1xuICAgICAgICAgICAgdmFyIGN1cnJPY2N1cnJlbmNlID0gY3VyclByb2QuaWR4O1xuICAgICAgICAgICAgdmFyIHBhdGhzID0gZ2V0TG9va2FoZWFkUGF0aHNGb3JPcHRpb25hbFByb2QoY3Vyck9jY3VycmVuY2UsIGN1cnJUb3BSdWxlLCBwcm9kVHlwZSwgYWN0dWFsTWF4TG9va2FoZWFkKTtcbiAgICAgICAgICAgIHZhciBwYXRoc0luc2lkZVByb2R1Y3Rpb24gPSBwYXRoc1swXTtcbiAgICAgICAgICAgIGlmIChpc0VtcHR5KGZsYXR0ZW4ocGF0aHNJbnNpZGVQcm9kdWN0aW9uKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyTXNnID0gZXJyTXNnUHJvdmlkZXIuYnVpbGRFbXB0eVJlcGV0aXRpb25FcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIHRvcExldmVsUnVsZTogY3VyclRvcFJ1bGUsXG4gICAgICAgICAgICAgICAgICAgIHJlcGV0aXRpb246IGN1cnJQcm9kXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2csXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFBhcnNlckRlZmluaXRpb25FcnJvclR5cGUuTk9fTk9OX0VNUFRZX0xPT0tBSEVBRCxcbiAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IGN1cnJUb3BSdWxlLm5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpdmVzQW1iaWd1aXRpZXMoYWx0ZXJuYXRpdmVzLCBhbHRlcm5hdGlvbiwgcnVsZSwgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICB2YXIgZm91bmRBbWJpZ3VvdXNQYXRocyA9IFtdO1xuICAgIHZhciBpZGVudGljYWxBbWJpZ3VpdGllcyA9IHJlZHVjZShhbHRlcm5hdGl2ZXMsIGZ1bmN0aW9uIChyZXN1bHQsIGN1cnJBbHQsIGN1cnJBbHRJZHgpIHtcbiAgICAgICAgLy8gaWdub3JlIChza2lwKSBhbWJpZ3VpdGllcyB3aXRoIHRoaXMgYWx0ZXJuYXRpdmVcbiAgICAgICAgaWYgKGFsdGVybmF0aW9uLmRlZmluaXRpb25bY3VyckFsdElkeF0uaWdub3JlQW1iaWd1aXRpZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yRWFjaChjdXJyQWx0LCBmdW5jdGlvbiAoY3VyclBhdGgpIHtcbiAgICAgICAgICAgIHZhciBhbHRzQ3VyclBhdGhBcHBlYXJzSW4gPSBbY3VyckFsdElkeF07XG4gICAgICAgICAgICBmb3JFYWNoKGFsdGVybmF0aXZlcywgZnVuY3Rpb24gKGN1cnJPdGhlckFsdCwgY3Vyck90aGVyQWx0SWR4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJBbHRJZHggIT09IGN1cnJPdGhlckFsdElkeCAmJlxuICAgICAgICAgICAgICAgICAgICBjb250YWluc1BhdGgoY3Vyck90aGVyQWx0LCBjdXJyUGF0aCkgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIChza2lwKSBhbWJpZ3VpdGllcyB3aXRoIHRoaXMgXCJvdGhlclwiIGFsdGVybmF0aXZlXG4gICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uLmRlZmluaXRpb25bY3Vyck90aGVyQWx0SWR4XVxuICAgICAgICAgICAgICAgICAgICAgICAgLmlnbm9yZUFtYmlndWl0aWVzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdHNDdXJyUGF0aEFwcGVhcnNJbi5wdXNoKGN1cnJPdGhlckFsdElkeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoYWx0c0N1cnJQYXRoQXBwZWFyc0luLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgICAgICAgICAhY29udGFpbnNQYXRoKGZvdW5kQW1iaWd1b3VzUGF0aHMsIGN1cnJQYXRoKSkge1xuICAgICAgICAgICAgICAgIGZvdW5kQW1iaWd1b3VzUGF0aHMucHVzaChjdXJyUGF0aCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBhbHRzOiBhbHRzQ3VyclBhdGhBcHBlYXJzSW4sXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN1cnJQYXRoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIFtdKTtcbiAgICB2YXIgY3VyckVycm9ycyA9IHV0aWxzLm1hcChpZGVudGljYWxBbWJpZ3VpdGllcywgZnVuY3Rpb24gKGN1cnJBbWJEZXNjcmlwdG9yKSB7XG4gICAgICAgIHZhciBhbWJnSW5kaWNlcyA9IG1hcChjdXJyQW1iRGVzY3JpcHRvci5hbHRzLCBmdW5jdGlvbiAoY3VyckFsdElkeCkgeyByZXR1cm4gY3VyckFsdElkeCArIDE7IH0pO1xuICAgICAgICB2YXIgY3Vyck1lc3NhZ2UgPSBlcnJNc2dQcm92aWRlci5idWlsZEFsdGVybmF0aW9uQW1iaWd1aXR5RXJyb3Ioe1xuICAgICAgICAgICAgdG9wTGV2ZWxSdWxlOiBydWxlLFxuICAgICAgICAgICAgYWx0ZXJuYXRpb246IGFsdGVybmF0aW9uLFxuICAgICAgICAgICAgYW1iaWd1aXR5SW5kaWNlczogYW1iZ0luZGljZXMsXG4gICAgICAgICAgICBwcmVmaXhQYXRoOiBjdXJyQW1iRGVzY3JpcHRvci5wYXRoXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZTogY3Vyck1lc3NhZ2UsXG4gICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLkFNQklHVU9VU19BTFRTLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHJ1bGUubmFtZSxcbiAgICAgICAgICAgIG9jY3VycmVuY2U6IGFsdGVybmF0aW9uLmlkeCxcbiAgICAgICAgICAgIGFsdGVybmF0aXZlczogW2N1cnJBbWJEZXNjcmlwdG9yLmFsdHNdXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1cnJFcnJvcnM7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcmVmaXhBbHRlcm5hdGl2ZXNBbWJpZ3VpdGllcyhhbHRlcm5hdGl2ZXMsIGFsdGVybmF0aW9uLCBydWxlLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAvLyBmbGF0dGVuXG4gICAgdmFyIHBhdGhzQW5kSW5kaWNlcyA9IHJlZHVjZShhbHRlcm5hdGl2ZXMsIGZ1bmN0aW9uIChyZXN1bHQsIGN1cnJBbHQsIGlkeCkge1xuICAgICAgICB2YXIgY3VyclBhdGhzQW5kSWR4ID0gbWFwKGN1cnJBbHQsIGZ1bmN0aW9uIChjdXJyUGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaWR4OiBpZHgsIHBhdGg6IGN1cnJQYXRoIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChjdXJyUGF0aHNBbmRJZHgpO1xuICAgIH0sIFtdKTtcbiAgICBmb3JFYWNoKHBhdGhzQW5kSW5kaWNlcywgZnVuY3Rpb24gKGN1cnJQYXRoQW5kSWR4KSB7XG4gICAgICAgIHZhciBhbHRlcm5hdGl2ZUdhc3QgPSBhbHRlcm5hdGlvbi5kZWZpbml0aW9uW2N1cnJQYXRoQW5kSWR4LmlkeF07XG4gICAgICAgIC8vIGlnbm9yZSAoc2tpcCkgYW1iaWd1aXRpZXMgd2l0aCB0aGlzIGFsdGVybmF0aXZlXG4gICAgICAgIGlmIChhbHRlcm5hdGl2ZUdhc3QuaWdub3JlQW1iaWd1aXRpZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0SWR4ID0gY3VyclBhdGhBbmRJZHguaWR4O1xuICAgICAgICB2YXIgdGFyZ2V0UGF0aCA9IGN1cnJQYXRoQW5kSWR4LnBhdGg7XG4gICAgICAgIHZhciBwcmVmaXhBbWJpZ3VpdGllc1BhdGhzQW5kSW5kaWNlcyA9IGZpbmRBbGwocGF0aHNBbmRJbmRpY2VzLCBmdW5jdGlvbiAoc2VhcmNoUGF0aEFuZElkeCkge1xuICAgICAgICAgICAgLy8gcHJlZml4IGFtYmlndWl0eSBjYW4gb25seSBiZSBjcmVhdGVkIGZyb20gbG93ZXIgaWR4IChoaWdoZXIgcHJpb3JpdHkpIHBhdGhcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAvLyBpZ25vcmUgKHNraXApIGFtYmlndWl0aWVzIHdpdGggdGhpcyBcIm90aGVyXCIgYWx0ZXJuYXRpdmVcbiAgICAgICAgICAgIGFsdGVybmF0aW9uLmRlZmluaXRpb25bc2VhcmNoUGF0aEFuZElkeC5pZHhdXG4gICAgICAgICAgICAgICAgLmlnbm9yZUFtYmlndWl0aWVzICE9PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgc2VhcmNoUGF0aEFuZElkeC5pZHggPCB0YXJnZXRJZHggJiZcbiAgICAgICAgICAgICAgICAvLyBjaGVja2luZyBmb3Igc3RyaWN0IHByZWZpeCBiZWNhdXNlIGlkZW50aWNhbCBsb29rYWhlYWRzXG4gICAgICAgICAgICAgICAgLy8gd2lsbCBiZSBiZSBkZXRlY3RlZCB1c2luZyBhIGRpZmZlcmVudCB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgICAgIGlzU3RyaWN0UHJlZml4T2ZQYXRoKHNlYXJjaFBhdGhBbmRJZHgucGF0aCwgdGFyZ2V0UGF0aCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGN1cnJQYXRoUHJlZml4RXJyb3JzID0gbWFwKHByZWZpeEFtYmlndWl0aWVzUGF0aHNBbmRJbmRpY2VzLCBmdW5jdGlvbiAoY3VyckFtYlBhdGhBbmRJZHgpIHtcbiAgICAgICAgICAgIHZhciBhbWJnSW5kaWNlcyA9IFtjdXJyQW1iUGF0aEFuZElkeC5pZHggKyAxLCB0YXJnZXRJZHggKyAxXTtcbiAgICAgICAgICAgIHZhciBvY2N1cnJlbmNlID0gYWx0ZXJuYXRpb24uaWR4ID09PSAwID8gXCJcIiA6IGFsdGVybmF0aW9uLmlkeDtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZXJyTXNnUHJvdmlkZXIuYnVpbGRBbHRlcm5hdGlvblByZWZpeEFtYmlndWl0eUVycm9yKHtcbiAgICAgICAgICAgICAgICB0b3BMZXZlbFJ1bGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRpb246IGFsdGVybmF0aW9uLFxuICAgICAgICAgICAgICAgIGFtYmlndWl0eUluZGljZXM6IGFtYmdJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHByZWZpeFBhdGg6IGN1cnJBbWJQYXRoQW5kSWR4LnBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFBhcnNlckRlZmluaXRpb25FcnJvclR5cGUuQU1CSUdVT1VTX1BSRUZJWF9BTFRTLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBydWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgb2NjdXJyZW5jZTogb2NjdXJyZW5jZSxcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZXM6IGFtYmdJbmRpY2VzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChjdXJyUGF0aFByZWZpeEVycm9ycyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIGNoZWNrVGVybWluYWxBbmROb25lVGVybWluYWxzTmFtZVNwYWNlKHRvcExldmVscywgdG9rZW5UeXBlcywgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIHRva2VuTmFtZXMgPSBtYXAodG9rZW5UeXBlcywgZnVuY3Rpb24gKGN1cnJUb2tlbikgeyByZXR1cm4gY3VyclRva2VuLm5hbWU7IH0pO1xuICAgIGZvckVhY2godG9wTGV2ZWxzLCBmdW5jdGlvbiAoY3VyclJ1bGUpIHtcbiAgICAgICAgdmFyIGN1cnJSdWxlTmFtZSA9IGN1cnJSdWxlLm5hbWU7XG4gICAgICAgIGlmIChjb250YWlucyh0b2tlbk5hbWVzLCBjdXJyUnVsZU5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgZXJyTXNnID0gZXJyTXNnUHJvdmlkZXIuYnVpbGROYW1lc3BhY2VDb25mbGljdEVycm9yKGN1cnJSdWxlKTtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJNc2csXG4gICAgICAgICAgICAgICAgdHlwZTogUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZS5DT05GTElDVF9UT0tFTlNfUlVMRVNfTkFNRVNQQUNFLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBjdXJyUnVsZU5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRHVwbGljYXRlTmVzdGVkUnVsZXModG9wTGV2ZWxSdWxlcywgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgZm9yRWFjaCh0b3BMZXZlbFJ1bGVzLCBmdW5jdGlvbiAoY3VyclRvcFJ1bGUpIHtcbiAgICAgICAgdmFyIG5hbWVkQ29sbGVjdG9yVmlzaXRvciA9IG5ldyBOYW1lZERTTE1ldGhvZHNDb2xsZWN0b3JWaXNpdG9yKFwiXCIpO1xuICAgICAgICBjdXJyVG9wUnVsZS5hY2NlcHQobmFtZWRDb2xsZWN0b3JWaXNpdG9yKTtcbiAgICAgICAgdmFyIHByb2RzQnlHcm91cCA9IGdyb3VwQnkobmFtZWRDb2xsZWN0b3JWaXNpdG9yLnJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0ubmFtZTsgfSk7XG4gICAgICAgIHZhciBkdXBsaWNhdGVzID0gcGljayhwcm9kc0J5R3JvdXAsIGZ1bmN0aW9uIChjdXJyR3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyR3JvdXAubGVuZ3RoID4gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvckVhY2godmFsdWVzKGR1cGxpY2F0ZXMpLCBmdW5jdGlvbiAoY3VyckR1cEdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgY3VyckR1cFByb2RzID0gbWFwKGN1cnJEdXBHcm91cCwgZnVuY3Rpb24gKGR1cEdyb3VwKSB7IHJldHVybiBkdXBHcm91cC5vcmdQcm9kOyB9KTtcbiAgICAgICAgICAgIHZhciBlcnJNc2cgPSBlcnJNc2dQcm92aWRlci5idWlsZER1cGxpY2F0ZU5lc3RlZFJ1bGVOYW1lRXJyb3IoY3VyclRvcFJ1bGUsIGN1cnJEdXBQcm9kcyk7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyTXNnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFBhcnNlckRlZmluaXRpb25FcnJvclR5cGUuRFVQTElDQVRFX05FU1RFRF9OQU1FLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBjdXJyVG9wUnVsZS5uYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrcy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js ***!
  \********************************************************************/
/*! exports provided: first, firstForSequence, firstForBranching, firstForTerminal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"first\", function() { return first; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstForSequence\", function() { return firstForSequence; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstForBranching\", function() { return firstForBranching; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstForTerminal\", function() { return firstForTerminal; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _gast_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gast/gast */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\");\n\n\n\nfunction first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]) {\n        return firstForTerminal(prod);\n    }\n    else if (Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"isSequenceProd\"])(prod)) {\n        return firstForSequence(prod);\n    }\n    else if (Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"isBranchingProd\"])(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction firstForSequence(prod) {\n    var firstSet = [];\n    var seq = prod.definition;\n    var nextSubProdIdx = 0;\n    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    var currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    var isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__[\"isOptionalProd\"])(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"uniq\"])(firstSet);\n}\nfunction firstForBranching(prod) {\n    var allAlternativesFirsts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(prod.definition, function (innerProd) {\n        return first(innerProd);\n    });\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"uniq\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(allAlternativesFirsts));\n}\nfunction firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n//# sourceMappingURL=first.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2ZpcnN0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvcGFyc2UvZ3JhbW1hci9maXJzdC5qcz8xNTU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuaXEsIG1hcCwgZmxhdHRlbiB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgTm9uVGVybWluYWwsIFRlcm1pbmFsIH0gZnJvbSBcIi4vZ2FzdC9nYXN0X3B1YmxpY1wiO1xuaW1wb3J0IHsgaXNCcmFuY2hpbmdQcm9kLCBpc09wdGlvbmFsUHJvZCwgaXNTZXF1ZW5jZVByb2QgfSBmcm9tIFwiLi9nYXN0L2dhc3RcIjtcbmV4cG9ydCBmdW5jdGlvbiBmaXJzdChwcm9kKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvZCBpbnN0YW5jZW9mIE5vblRlcm1pbmFsKSB7XG4gICAgICAgIC8vIHRoaXMgY291bGQgaW4gdGhlb3J5IGNhdXNlIGluZmluaXRlIGxvb3BzIGlmXG4gICAgICAgIC8vICgxKSBwcm9kIEEgcmVmcyBwcm9kIEIuXG4gICAgICAgIC8vICgyKSBwcm9kIEIgcmVmcyBwcm9kIEFcbiAgICAgICAgLy8gKDMpIEFCIGNhbiBtYXRjaCB0aGUgZW1wdHkgc2V0XG4gICAgICAgIC8vIGluIG90aGVyIHdvcmRzIGEgY3ljbGUgd2hlcmUgZXZlcnl0aGluZyBpcyBvcHRpb25hbCBzbyB0aGUgZmlyc3Qgd2lsbCBrZWVwXG4gICAgICAgIC8vIGxvb2tpbmcgYWhlYWQgZm9yIHRoZSBuZXh0IG9wdGlvbmFsIHBhcnQgYW5kIHdpbGwgbmV2ZXIgZXhpdFxuICAgICAgICAvLyBjdXJyZW50bHkgdGhlcmUgaXMgbm8gc2FmZWd1YXJkIGZvciB0aGlzIHVuaXF1ZSBlZGdlIGNhc2UgYmVjYXVzZVxuICAgICAgICAvLyAoMSkgbm90IHN1cmUgYSBncmFtbWFyIGluIHdoaWNoIHRoaXMgY2FuIGhhcHBlbiBpcyB1c2VmdWwgZm9yIGFueXRoaW5nIChwcm9kdWN0aXZlKVxuICAgICAgICByZXR1cm4gZmlyc3QocHJvZC5yZWZlcmVuY2VkUnVsZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb2QgaW5zdGFuY2VvZiBUZXJtaW5hbCkge1xuICAgICAgICByZXR1cm4gZmlyc3RGb3JUZXJtaW5hbChwcm9kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTZXF1ZW5jZVByb2QocHJvZCkpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0Rm9yU2VxdWVuY2UocHJvZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQnJhbmNoaW5nUHJvZChwcm9kKSkge1xuICAgICAgICByZXR1cm4gZmlyc3RGb3JCcmFuY2hpbmcocHJvZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIm5vbiBleGhhdXN0aXZlIG1hdGNoXCIpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdEZvclNlcXVlbmNlKHByb2QpIHtcbiAgICB2YXIgZmlyc3RTZXQgPSBbXTtcbiAgICB2YXIgc2VxID0gcHJvZC5kZWZpbml0aW9uO1xuICAgIHZhciBuZXh0U3ViUHJvZElkeCA9IDA7XG4gICAgdmFyIGhhc0lubmVyUHJvZHNSZW1haW5pbmcgPSBzZXEubGVuZ3RoID4gbmV4dFN1YlByb2RJZHg7XG4gICAgdmFyIGN1cnJTdWJQcm9kO1xuICAgIC8vIHNvIHdlIGVudGVyIHRoZSBsb29wIGF0IGxlYXN0IG9uY2UgKGlmIHRoZSBkZWZpbml0aW9uIGlzIG5vdCBlbXB0eVxuICAgIHZhciBpc0xhc3RJbm5lclByb2RPcHRpb25hbCA9IHRydWU7XG4gICAgLy8gc2NhbiBhIHNlcXVlbmNlIHVudGlsIGl0J3MgZW5kIG9yIHVudGlsIHdlIGhhdmUgZm91bmQgYSBOT05FIG9wdGlvbmFsIHByb2R1Y3Rpb24gaW4gaXRcbiAgICB3aGlsZSAoaGFzSW5uZXJQcm9kc1JlbWFpbmluZyAmJiBpc0xhc3RJbm5lclByb2RPcHRpb25hbCkge1xuICAgICAgICBjdXJyU3ViUHJvZCA9IHNlcVtuZXh0U3ViUHJvZElkeF07XG4gICAgICAgIGlzTGFzdElubmVyUHJvZE9wdGlvbmFsID0gaXNPcHRpb25hbFByb2QoY3VyclN1YlByb2QpO1xuICAgICAgICBmaXJzdFNldCA9IGZpcnN0U2V0LmNvbmNhdChmaXJzdChjdXJyU3ViUHJvZCkpO1xuICAgICAgICBuZXh0U3ViUHJvZElkeCA9IG5leHRTdWJQcm9kSWR4ICsgMTtcbiAgICAgICAgaGFzSW5uZXJQcm9kc1JlbWFpbmluZyA9IHNlcS5sZW5ndGggPiBuZXh0U3ViUHJvZElkeDtcbiAgICB9XG4gICAgcmV0dXJuIHVuaXEoZmlyc3RTZXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Rm9yQnJhbmNoaW5nKHByb2QpIHtcbiAgICB2YXIgYWxsQWx0ZXJuYXRpdmVzRmlyc3RzID0gbWFwKHByb2QuZGVmaW5pdGlvbiwgZnVuY3Rpb24gKGlubmVyUHJvZCkge1xuICAgICAgICByZXR1cm4gZmlyc3QoaW5uZXJQcm9kKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5pcShmbGF0dGVuKGFsbEFsdGVybmF0aXZlc0ZpcnN0cykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Rm9yVGVybWluYWwodGVybWluYWwpIHtcbiAgICByZXR1cm4gW3Rlcm1pbmFsLnRlcm1pbmFsVHlwZV07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/follow.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/follow.js ***!
  \*********************************************************************/
/*! exports provided: ResyncFollowsWalker, computeAllProdsFollows, buildBetweenProdsFollowPrefix, buildInProdFollowPrefix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResyncFollowsWalker\", function() { return ResyncFollowsWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"computeAllProdsFollows\", function() { return computeAllProdsFollows; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildBetweenProdsFollowPrefix\", function() { return buildBetweenProdsFollowPrefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildInProdFollowPrefix\", function() { return buildInProdFollowPrefix; });\n/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rest */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js\");\n/* harmony import */ var _first__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./first */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"./node_modules/chevrotain/lib_esm/src/parse/constants.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nvar ResyncFollowsWalker = /** @class */ (function (_super) {\n    __extends(ResyncFollowsWalker, _super);\n    function ResyncFollowsWalker(topProd) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.follows = {};\n        return _this;\n    }\n    ResyncFollowsWalker.prototype.startWalking = function () {\n        this.walk(this.topProd);\n        return this.follows;\n    };\n    ResyncFollowsWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n        // do nothing! just like in the public sector after 13:00\n    };\n    ResyncFollowsWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n        var followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n            this.topProd.name;\n        var fullRest = currRest.concat(prevRest);\n        var restProd = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Flat\"]({ definition: fullRest });\n        var t_in_topProd_follows = Object(_first__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(restProd);\n        this.follows[followName] = t_in_topProd_follows;\n    };\n    return ResyncFollowsWalker;\n}(_rest__WEBPACK_IMPORTED_MODULE_0__[\"RestWalker\"]));\n\nfunction computeAllProdsFollows(topProductions) {\n    var reSyncFollows = {};\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(topProductions, function (topProd) {\n        var currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"assign\"])(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n}\nfunction buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + _constants__WEBPACK_IMPORTED_MODULE_3__[\"IN\"];\n}\nfunction buildInProdFollowPrefix(terminal) {\n    var terminalName = terminal.terminalType.name;\n    return terminalName + terminal.idx + _constants__WEBPACK_IMPORTED_MODULE_3__[\"IN\"];\n}\n//# sourceMappingURL=follow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2ZvbGxvdy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3BhcnNlL2dyYW1tYXIvZm9sbG93LmpzP2NjNjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5pbXBvcnQgeyBSZXN0V2Fsa2VyIH0gZnJvbSBcIi4vcmVzdFwiO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi9maXJzdFwiO1xuaW1wb3J0IHsgYXNzaWduLCBmb3JFYWNoIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBJTiB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEZsYXQgfSBmcm9tIFwiLi9nYXN0L2dhc3RfcHVibGljXCI7XG4vLyBUaGlzIFJlc3luY0ZvbGxvd3NXYWxrZXIgY29tcHV0ZXMgYWxsIG9mIHRoZSBmb2xsb3dzIHJlcXVpcmVkIGZvciBSRVNZTkNcbi8vIChza2lwcGluZyByZWZlcmVuY2UgcHJvZHVjdGlvbikuXG52YXIgUmVzeW5jRm9sbG93c1dhbGtlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVzeW5jRm9sbG93c1dhbGtlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXN5bmNGb2xsb3dzV2Fsa2VyKHRvcFByb2QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG9wUHJvZCA9IHRvcFByb2Q7XG4gICAgICAgIF90aGlzLmZvbGxvd3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXN5bmNGb2xsb3dzV2Fsa2VyLnByb3RvdHlwZS5zdGFydFdhbGtpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2Fsayh0aGlzLnRvcFByb2QpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb2xsb3dzO1xuICAgIH07XG4gICAgUmVzeW5jRm9sbG93c1dhbGtlci5wcm90b3R5cGUud2Fsa1Rlcm1pbmFsID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBjdXJyUmVzdCwgcHJldlJlc3QpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZyEganVzdCBsaWtlIGluIHRoZSBwdWJsaWMgc2VjdG9yIGFmdGVyIDEzOjAwXG4gICAgfTtcbiAgICBSZXN5bmNGb2xsb3dzV2Fsa2VyLnByb3RvdHlwZS53YWxrUHJvZFJlZiA9IGZ1bmN0aW9uIChyZWZQcm9kLCBjdXJyUmVzdCwgcHJldlJlc3QpIHtcbiAgICAgICAgdmFyIGZvbGxvd05hbWUgPSBidWlsZEJldHdlZW5Qcm9kc0ZvbGxvd1ByZWZpeChyZWZQcm9kLnJlZmVyZW5jZWRSdWxlLCByZWZQcm9kLmlkeCkgK1xuICAgICAgICAgICAgdGhpcy50b3BQcm9kLm5hbWU7XG4gICAgICAgIHZhciBmdWxsUmVzdCA9IGN1cnJSZXN0LmNvbmNhdChwcmV2UmVzdCk7XG4gICAgICAgIHZhciByZXN0UHJvZCA9IG5ldyBGbGF0KHsgZGVmaW5pdGlvbjogZnVsbFJlc3QgfSk7XG4gICAgICAgIHZhciB0X2luX3RvcFByb2RfZm9sbG93cyA9IGZpcnN0KHJlc3RQcm9kKTtcbiAgICAgICAgdGhpcy5mb2xsb3dzW2ZvbGxvd05hbWVdID0gdF9pbl90b3BQcm9kX2ZvbGxvd3M7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzeW5jRm9sbG93c1dhbGtlcjtcbn0oUmVzdFdhbGtlcikpO1xuZXhwb3J0IHsgUmVzeW5jRm9sbG93c1dhbGtlciB9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVBbGxQcm9kc0ZvbGxvd3ModG9wUHJvZHVjdGlvbnMpIHtcbiAgICB2YXIgcmVTeW5jRm9sbG93cyA9IHt9O1xuICAgIGZvckVhY2godG9wUHJvZHVjdGlvbnMsIGZ1bmN0aW9uICh0b3BQcm9kKSB7XG4gICAgICAgIHZhciBjdXJyUmVmc0ZvbGxvdyA9IG5ldyBSZXN5bmNGb2xsb3dzV2Fsa2VyKHRvcFByb2QpLnN0YXJ0V2Fsa2luZygpO1xuICAgICAgICBhc3NpZ24ocmVTeW5jRm9sbG93cywgY3VyclJlZnNGb2xsb3cpO1xuICAgIH0pO1xuICAgIHJldHVybiByZVN5bmNGb2xsb3dzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQmV0d2VlblByb2RzRm9sbG93UHJlZml4KGlubmVyLCBvY2N1cmVuY2VJblBhcmVudCkge1xuICAgIHJldHVybiBpbm5lci5uYW1lICsgb2NjdXJlbmNlSW5QYXJlbnQgKyBJTjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEluUHJvZEZvbGxvd1ByZWZpeCh0ZXJtaW5hbCkge1xuICAgIHZhciB0ZXJtaW5hbE5hbWUgPSB0ZXJtaW5hbC50ZXJtaW5hbFR5cGUubmFtZTtcbiAgICByZXR1cm4gdGVybWluYWxOYW1lICsgdGVybWluYWwuaWR4ICsgSU47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2xsb3cuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/follow.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js":
/*!************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js ***!
  \************************************************************************/
/*! exports provided: isSequenceProd, isOptionalProd, isBranchingProd, getProductionDslName, DslMethodsCollectorVisitor, collectMethods */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isSequenceProd\", function() { return isSequenceProd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isOptionalProd\", function() { return isOptionalProd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBranchingProd\", function() { return isBranchingProd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getProductionDslName\", function() { return getProductionDslName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DslMethodsCollectorVisitor\", function() { return DslMethodsCollectorVisitor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"collectMethods\", function() { return collectMethods; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nfunction isSequenceProd(prod) {\n    return (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Flat\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatory\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatoryWithSeparator\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Rule\"]);\n}\nfunction isOptionalProd(prod, alreadyVisited) {\n    if (alreadyVisited === void 0) { alreadyVisited = []; }\n    var isDirectlyOptional = prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"] ||\n        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"];\n    if (isDirectlyOptional) {\n        return true;\n    }\n    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n    // empty optional top rule\n    // may be indirectly optional ((A?B?C?) | (D?E?F?))\n    if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"]) {\n        // for OR its enough for just one of the alternatives to be optional\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"some\"])(prod.definition, function (subProd) {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"] && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(alreadyVisited, prod)) {\n        // avoiding stack overflow due to infinite recursion\n        return false;\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"AbstractProduction\"]) {\n        if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]) {\n            alreadyVisited.push(prod);\n        }\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(prod.definition, function (subProd) {\n            return isOptionalProd(subProd, alreadyVisited);\n        });\n    }\n    else {\n        return false;\n    }\n}\nfunction isBranchingProd(prod) {\n    return prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"];\n}\nfunction getProductionDslName(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]) {\n        return \"SUBRULE\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]) {\n        return \"OPTION\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"]) {\n        return \"OR\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatory\"]) {\n        return \"AT_LEAST_ONE\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatoryWithSeparator\"]) {\n        return \"AT_LEAST_ONE_SEP\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"]) {\n        return \"MANY_SEP\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"]) {\n        return \"MANY\";\n    }\n    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]) {\n        return \"CONSUME\";\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nvar DslMethodsCollectorVisitor = /** @class */ (function (_super) {\n    __extends(DslMethodsCollectorVisitor, _super);\n    function DslMethodsCollectorVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // A minus is never valid in an identifier name\n        _this.separator = \"-\";\n        _this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: []\n        };\n        return _this;\n    }\n    DslMethodsCollectorVisitor.prototype.reset = function () {\n        this.dslMethods = {\n            option: [],\n            alternation: [],\n            repetition: [],\n            repetitionWithSeparator: [],\n            repetitionMandatory: [],\n            repetitionMandatoryWithSeparator: []\n        };\n    };\n    DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n        var key = terminal.terminalType.name + this.separator + \"Terminal\";\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(this.dslMethods, key)) {\n            this.dslMethods[key] = [];\n        }\n        this.dslMethods[key].push(terminal);\n    };\n    DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n        var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(this.dslMethods, key)) {\n            this.dslMethods[key] = [];\n        }\n        this.dslMethods[key].push(subrule);\n    };\n    DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n        this.dslMethods.option.push(option);\n    };\n    DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.dslMethods.repetitionWithSeparator.push(manySep);\n    };\n    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.dslMethods.repetitionMandatory.push(atLeastOne);\n    };\n    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    };\n    DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n        this.dslMethods.repetition.push(many);\n    };\n    DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n        this.dslMethods.alternation.push(or);\n    };\n    return DslMethodsCollectorVisitor;\n}(_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__[\"GAstVisitor\"]));\n\nvar collectorVisitor = new DslMethodsCollectorVisitor();\nfunction collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    var dslMethods = collectorVisitor.dslMethods;\n    // avoid uncleaned references\n    collectorVisitor.reset();\n    return dslMethods;\n}\n//# sourceMappingURL=gast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js ***!
  \*******************************************************************************/
/*! exports provided: AbstractProduction, NonTerminal, Rule, Flat, Option, RepetitionMandatory, RepetitionMandatoryWithSeparator, Repetition, RepetitionWithSeparator, Alternation, Terminal, serializeGrammar, serializeProduction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractProduction\", function() { return AbstractProduction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NonTerminal\", function() { return NonTerminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rule\", function() { return Rule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Flat\", function() { return Flat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Option\", function() { return Option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepetitionMandatory\", function() { return RepetitionMandatory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepetitionMandatoryWithSeparator\", function() { return RepetitionMandatoryWithSeparator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Repetition\", function() { return Repetition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepetitionWithSeparator\", function() { return RepetitionWithSeparator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Alternation\", function() { return Alternation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Terminal\", function() { return Terminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"serializeGrammar\", function() { return serializeGrammar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"serializeProduction\", function() { return serializeProduction; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar AbstractProduction = /** @class */ (function () {\n    function AbstractProduction(definition) {\n        this.definition = definition;\n    }\n    AbstractProduction.prototype.accept = function (visitor) {\n        visitor.visit(this);\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(this.definition, function (prod) {\n            prod.accept(visitor);\n        });\n    };\n    return AbstractProduction;\n}());\n\nvar NonTerminal = /** @class */ (function (_super) {\n    __extends(NonTerminal, _super);\n    function NonTerminal(options) {\n        var _this = _super.call(this, []) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    Object.defineProperty(NonTerminal.prototype, \"definition\", {\n        get: function () {\n            if (this.referencedRule !== undefined) {\n                return this.referencedRule.definition;\n            }\n            return [];\n        },\n        set: function (definition) {\n            // immutable\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NonTerminal.prototype.accept = function (visitor) {\n        visitor.visit(this);\n        // don't visit children of a reference, we will get cyclic infinite loops if we do so\n    };\n    return NonTerminal;\n}(AbstractProduction));\n\nvar Rule = /** @class */ (function (_super) {\n    __extends(Rule, _super);\n    function Rule(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.orgText = \"\";\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return Rule;\n}(AbstractProduction));\n\n// TODO: is this only used in an Alternation?\n//       Perhaps `Flat` should be renamed to `Alternative`?\nvar Flat = /** @class */ (function (_super) {\n    __extends(Flat, _super);\n    // A named Flat production is used to indicate a Nested Rule in an alternation\n    function Flat(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.ignoreAmbiguities = false;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return Flat;\n}(AbstractProduction));\n\nvar Option = /** @class */ (function (_super) {\n    __extends(Option, _super);\n    function Option(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return Option;\n}(AbstractProduction));\n\nvar RepetitionMandatory = /** @class */ (function (_super) {\n    __extends(RepetitionMandatory, _super);\n    function RepetitionMandatory(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return RepetitionMandatory;\n}(AbstractProduction));\n\nvar RepetitionMandatoryWithSeparator = /** @class */ (function (_super) {\n    __extends(RepetitionMandatoryWithSeparator, _super);\n    function RepetitionMandatoryWithSeparator(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return RepetitionMandatoryWithSeparator;\n}(AbstractProduction));\n\nvar Repetition = /** @class */ (function (_super) {\n    __extends(Repetition, _super);\n    function Repetition(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return Repetition;\n}(AbstractProduction));\n\nvar RepetitionWithSeparator = /** @class */ (function (_super) {\n    __extends(RepetitionWithSeparator, _super);\n    function RepetitionWithSeparator(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return RepetitionWithSeparator;\n}(AbstractProduction));\n\nvar Alternation = /** @class */ (function (_super) {\n    __extends(Alternation, _super);\n    function Alternation(options) {\n        var _this = _super.call(this, options.definition) || this;\n        _this.idx = 1;\n        _this.ignoreAmbiguities = false;\n        _this.hasPredicates = false;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n        return _this;\n    }\n    return Alternation;\n}(AbstractProduction));\n\nvar Terminal = /** @class */ (function () {\n    function Terminal(options) {\n        this.idx = 1;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"assign\"])(this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"pick\"])(options, function (v) { return v !== undefined; }));\n    }\n    Terminal.prototype.accept = function (visitor) {\n        visitor.visit(this);\n    };\n    return Terminal;\n}());\n\nfunction serializeGrammar(topRules) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(topRules, serializeProduction);\n}\nfunction serializeProduction(node) {\n    function convertDefinition(definition) {\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(definition, serializeProduction);\n    }\n    /* istanbul ignore else */\n    if (node instanceof NonTerminal) {\n        return {\n            type: \"NonTerminal\",\n            name: node.nonTerminalName,\n            idx: node.idx\n        };\n    }\n    else if (node instanceof Flat) {\n        return {\n            type: \"Flat\",\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof Option) {\n        return {\n            type: \"Option\",\n            idx: node.idx,\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof RepetitionMandatory) {\n        return {\n            type: \"RepetitionMandatory\",\n            name: node.name,\n            idx: node.idx,\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof RepetitionMandatoryWithSeparator) {\n        return {\n            type: \"RepetitionMandatoryWithSeparator\",\n            name: node.name,\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof RepetitionWithSeparator) {\n        return {\n            type: \"RepetitionWithSeparator\",\n            name: node.name,\n            idx: node.idx,\n            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof Repetition) {\n        return {\n            type: \"Repetition\",\n            name: node.name,\n            idx: node.idx,\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof Alternation) {\n        return {\n            type: \"Alternation\",\n            name: node.name,\n            idx: node.idx,\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else if (node instanceof Terminal) {\n        var serializedTerminal = {\n            type: \"Terminal\",\n            name: node.terminalType.name,\n            label: Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_1__[\"tokenLabel\"])(node.terminalType),\n            idx: node.idx\n        };\n        var pattern = node.terminalType.PATTERN;\n        if (node.terminalType.PATTERN) {\n            serializedTerminal.pattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isRegExp\"])(pattern)\n                ? pattern.source\n                : pattern;\n        }\n        return serializedTerminal;\n    }\n    else if (node instanceof Rule) {\n        return {\n            type: \"Rule\",\n            name: node.name,\n            orgText: node.orgText,\n            definition: convertDefinition(node.definition)\n        };\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\n//# sourceMappingURL=gast_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js ***!
  \****************************************************************************************/
/*! exports provided: resolveGrammar, validateGrammar, assignOccurrenceIndices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveGrammar\", function() { return resolveGrammar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateGrammar\", function() { return validateGrammar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignOccurrenceIndices\", function() { return assignOccurrenceIndices; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resolver */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/resolver.js\");\n/* harmony import */ var _checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../checks */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js\");\n/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors_public */ \"./node_modules/chevrotain/lib_esm/src/parse/errors_public.js\");\n/* harmony import */ var _gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gast */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\");\n\n\n\n\n\nfunction resolveGrammar(options) {\n    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"defaults\"])(options, {\n        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_3__[\"defaultGrammarResolverErrorProvider\"]\n    });\n    var topRulesTable = {};\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(options.rules, function (rule) {\n        topRulesTable[rule.name] = rule;\n    });\n    return Object(_resolver__WEBPACK_IMPORTED_MODULE_1__[\"resolveGrammar\"])(topRulesTable, options.errMsgProvider);\n}\nfunction validateGrammar(options) {\n    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"defaults\"])(options, {\n        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_3__[\"defaultGrammarValidatorErrorProvider\"],\n        ignoredIssues: {}\n    });\n    return Object(_checks__WEBPACK_IMPORTED_MODULE_2__[\"validateGrammar\"])(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);\n}\nfunction assignOccurrenceIndices(options) {\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(options.rules, function (currRule) {\n        var methodsCollector = new _gast__WEBPACK_IMPORTED_MODULE_4__[\"DslMethodsCollectorVisitor\"]();\n        currRule.accept(methodsCollector);\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(methodsCollector.dslMethods, function (methods) {\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(methods, function (currMethod, arrIdx) {\n                currMethod.idx = arrIdx + 1;\n            });\n        });\n    });\n}\n//# sourceMappingURL=gast_resolver_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2dhc3QvZ2FzdF9yZXNvbHZlcl9wdWJsaWMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2dhc3QvZ2FzdF9yZXNvbHZlcl9wdWJsaWMuanM/ZDk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0cywgZm9yRWFjaCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZUdyYW1tYXIgYXMgb3JnUmVzb2x2ZUdyYW1tYXIgfSBmcm9tIFwiLi4vcmVzb2x2ZXJcIjtcbmltcG9ydCB7IHZhbGlkYXRlR3JhbW1hciBhcyBvcmdWYWxpZGF0ZUdyYW1tYXIgfSBmcm9tIFwiLi4vY2hlY2tzXCI7XG5pbXBvcnQgeyBkZWZhdWx0R3JhbW1hclJlc29sdmVyRXJyb3JQcm92aWRlciwgZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2Vycm9yc19wdWJsaWNcIjtcbmltcG9ydCB7IERzbE1ldGhvZHNDb2xsZWN0b3JWaXNpdG9yIH0gZnJvbSBcIi4vZ2FzdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVHcmFtbWFyKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgICBlcnJNc2dQcm92aWRlcjogZGVmYXVsdEdyYW1tYXJSZXNvbHZlckVycm9yUHJvdmlkZXJcbiAgICB9KTtcbiAgICB2YXIgdG9wUnVsZXNUYWJsZSA9IHt9O1xuICAgIGZvckVhY2gob3B0aW9ucy5ydWxlcywgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgdG9wUnVsZXNUYWJsZVtydWxlLm5hbWVdID0gcnVsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gb3JnUmVzb2x2ZUdyYW1tYXIodG9wUnVsZXNUYWJsZSwgb3B0aW9ucy5lcnJNc2dQcm92aWRlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVHcmFtbWFyKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgICBlcnJNc2dQcm92aWRlcjogZGVmYXVsdEdyYW1tYXJWYWxpZGF0b3JFcnJvclByb3ZpZGVyLFxuICAgICAgICBpZ25vcmVkSXNzdWVzOiB7fVxuICAgIH0pO1xuICAgIHJldHVybiBvcmdWYWxpZGF0ZUdyYW1tYXIob3B0aW9ucy5ydWxlcywgb3B0aW9ucy5tYXhMb29rYWhlYWQsIG9wdGlvbnMudG9rZW5UeXBlcywgb3B0aW9ucy5pZ25vcmVkSXNzdWVzLCBvcHRpb25zLmVyck1zZ1Byb3ZpZGVyLCBvcHRpb25zLmdyYW1tYXJOYW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25PY2N1cnJlbmNlSW5kaWNlcyhvcHRpb25zKSB7XG4gICAgZm9yRWFjaChvcHRpb25zLnJ1bGVzLCBmdW5jdGlvbiAoY3VyclJ1bGUpIHtcbiAgICAgICAgdmFyIG1ldGhvZHNDb2xsZWN0b3IgPSBuZXcgRHNsTWV0aG9kc0NvbGxlY3RvclZpc2l0b3IoKTtcbiAgICAgICAgY3VyclJ1bGUuYWNjZXB0KG1ldGhvZHNDb2xsZWN0b3IpO1xuICAgICAgICBmb3JFYWNoKG1ldGhvZHNDb2xsZWN0b3IuZHNsTWV0aG9kcywgZnVuY3Rpb24gKG1ldGhvZHMpIHtcbiAgICAgICAgICAgIGZvckVhY2gobWV0aG9kcywgZnVuY3Rpb24gKGN1cnJNZXRob2QsIGFycklkeCkge1xuICAgICAgICAgICAgICAgIGN1cnJNZXRob2QuaWR4ID0gYXJySWR4ICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdhc3RfcmVzb2x2ZXJfcHVibGljLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js ***!
  \***************************************************************************************/
/*! exports provided: GAstVisitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAstVisitor\", function() { return GAstVisitor; });\n/* harmony import */ var _gast_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n\nvar GAstVisitor = /** @class */ (function () {\n    function GAstVisitor() {\n    }\n    GAstVisitor.prototype.visit = function (node) {\n        var nodeAny = node;\n        switch (nodeAny.constructor) {\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"NonTerminal\"]:\n                return this.visitNonTerminal(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Flat\"]:\n                return this.visitFlat(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Option\"]:\n                return this.visitOption(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"RepetitionMandatory\"]:\n                return this.visitRepetitionMandatory(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"RepetitionMandatoryWithSeparator\"]:\n                return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"RepetitionWithSeparator\"]:\n                return this.visitRepetitionWithSeparator(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Repetition\"]:\n                return this.visitRepetition(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Alternation\"]:\n                return this.visitAlternation(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Terminal\"]:\n                return this.visitTerminal(nodeAny);\n            case _gast_public__WEBPACK_IMPORTED_MODULE_0__[\"Rule\"]:\n                return this.visitRule(nodeAny);\n            /* istanbul ignore next */\n            default:\n                throw Error(\"non exhaustive match\");\n        }\n    };\n    GAstVisitor.prototype.visitNonTerminal = function (node) { };\n    GAstVisitor.prototype.visitFlat = function (node) { };\n    GAstVisitor.prototype.visitOption = function (node) { };\n    GAstVisitor.prototype.visitRepetition = function (node) { };\n    GAstVisitor.prototype.visitRepetitionMandatory = function (node) { };\n    GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) { };\n    GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) { };\n    GAstVisitor.prototype.visitAlternation = function (node) { };\n    GAstVisitor.prototype.visitTerminal = function (node) { };\n    GAstVisitor.prototype.visitRule = function (node) { };\n    return GAstVisitor;\n}());\n\n//# sourceMappingURL=gast_visitor_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2dhc3QvZ2FzdF92aXNpdG9yX3B1YmxpYy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3BhcnNlL2dyYW1tYXIvZ2FzdC9nYXN0X3Zpc2l0b3JfcHVibGljLmpzPzA1OTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWx0ZXJuYXRpb24sIEZsYXQsIE5vblRlcm1pbmFsLCBPcHRpb24sIFJlcGV0aXRpb24sIFJlcGV0aXRpb25NYW5kYXRvcnksIFJlcGV0aXRpb25NYW5kYXRvcnlXaXRoU2VwYXJhdG9yLCBSZXBldGl0aW9uV2l0aFNlcGFyYXRvciwgUnVsZSwgVGVybWluYWwgfSBmcm9tIFwiLi9nYXN0X3B1YmxpY1wiO1xudmFyIEdBc3RWaXNpdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdBc3RWaXNpdG9yKCkge1xuICAgIH1cbiAgICBHQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgbm9kZUFueSA9IG5vZGU7XG4gICAgICAgIHN3aXRjaCAobm9kZUFueS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBOb25UZXJtaW5hbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdE5vblRlcm1pbmFsKG5vZGVBbnkpO1xuICAgICAgICAgICAgY2FzZSBGbGF0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0RmxhdChub2RlQW55KTtcbiAgICAgICAgICAgIGNhc2UgT3B0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0T3B0aW9uKG5vZGVBbnkpO1xuICAgICAgICAgICAgY2FzZSBSZXBldGl0aW9uTWFuZGF0b3J5OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0UmVwZXRpdGlvbk1hbmRhdG9yeShub2RlQW55KTtcbiAgICAgICAgICAgIGNhc2UgUmVwZXRpdGlvbk1hbmRhdG9yeVdpdGhTZXBhcmF0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXRSZXBldGl0aW9uTWFuZGF0b3J5V2l0aFNlcGFyYXRvcihub2RlQW55KTtcbiAgICAgICAgICAgIGNhc2UgUmVwZXRpdGlvbldpdGhTZXBhcmF0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXRSZXBldGl0aW9uV2l0aFNlcGFyYXRvcihub2RlQW55KTtcbiAgICAgICAgICAgIGNhc2UgUmVwZXRpdGlvbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdFJlcGV0aXRpb24obm9kZUFueSk7XG4gICAgICAgICAgICBjYXNlIEFsdGVybmF0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0QWx0ZXJuYXRpb24obm9kZUFueSk7XG4gICAgICAgICAgICBjYXNlIFRlcm1pbmFsOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0VGVybWluYWwobm9kZUFueSk7XG4gICAgICAgICAgICBjYXNlIFJ1bGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXRSdWxlKG5vZGVBbnkpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJub24gZXhoYXVzdGl2ZSBtYXRjaFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR0FzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0Tm9uVGVybWluYWwgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIEdBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZsYXQgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIEdBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdE9wdGlvbiA9IGZ1bmN0aW9uIChub2RlKSB7IH07XG4gICAgR0FzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbiA9IGZ1bmN0aW9uIChub2RlKSB7IH07XG4gICAgR0FzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbk1hbmRhdG9yeSA9IGZ1bmN0aW9uIChub2RlKSB7IH07XG4gICAgR0FzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0UmVwZXRpdGlvbk1hbmRhdG9yeVdpdGhTZXBhcmF0b3IgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIEdBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdFJlcGV0aXRpb25XaXRoU2VwYXJhdG9yID0gZnVuY3Rpb24gKG5vZGUpIHsgfTtcbiAgICBHQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRBbHRlcm5hdGlvbiA9IGZ1bmN0aW9uIChub2RlKSB7IH07XG4gICAgR0FzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGVybWluYWwgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIEdBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdFJ1bGUgPSBmdW5jdGlvbiAobm9kZSkgeyB9O1xuICAgIHJldHVybiBHQXN0VmlzaXRvcjtcbn0oKSk7XG5leHBvcnQgeyBHQXN0VmlzaXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2FzdF92aXNpdG9yX3B1YmxpYy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js ***!
  \**************************************************************************/
/*! exports provided: AbstractNextPossibleTokensWalker, NextAfterTokenWalker, AbstractNextTerminalAfterProductionWalker, NextTerminalAfterManyWalker, NextTerminalAfterManySepWalker, NextTerminalAfterAtLeastOneWalker, NextTerminalAfterAtLeastOneSepWalker, possiblePathsFrom, nextPossibleTokensAfter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractNextPossibleTokensWalker\", function() { return AbstractNextPossibleTokensWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextAfterTokenWalker\", function() { return NextAfterTokenWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractNextTerminalAfterProductionWalker\", function() { return AbstractNextTerminalAfterProductionWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextTerminalAfterManyWalker\", function() { return NextTerminalAfterManyWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextTerminalAfterManySepWalker\", function() { return NextTerminalAfterManySepWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextTerminalAfterAtLeastOneWalker\", function() { return NextTerminalAfterAtLeastOneWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextTerminalAfterAtLeastOneSepWalker\", function() { return NextTerminalAfterAtLeastOneSepWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"possiblePathsFrom\", function() { return possiblePathsFrom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nextPossibleTokensAfter\", function() { return nextPossibleTokensAfter; });\n/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rest */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _first__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./first */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextPossibleTokensWalker, _super);\n    function AbstractNextPossibleTokensWalker(topProd, path) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.path = path;\n        _this.possibleTokTypes = [];\n        _this.nextProductionName = \"\";\n        _this.nextProductionOccurrence = 0;\n        _this.found = false;\n        _this.isAtEndOfPath = false;\n        return _this;\n    }\n    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    };\n    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n        if (prevRest === void 0) { prevRest = []; }\n        // stop scanning once we found the path\n        if (!this.found) {\n            _super.prototype.walk.call(this, prod, prevRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            var fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n        // need to consume the Terminal\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    };\n    return AbstractNextPossibleTokensWalker;\n}(_rest__WEBPACK_IMPORTED_MODULE_0__[\"RestWalker\"]));\n\nvar NextAfterTokenWalker = /** @class */ (function (_super) {\n    __extends(NextAfterTokenWalker, _super);\n    function NextAfterTokenWalker(topProd, path) {\n        var _this = _super.call(this, topProd, path) || this;\n        _this.path = path;\n        _this.nextTerminalName = \"\";\n        _this.nextTerminalOccurrence = 0;\n        _this.nextTerminalName = _this.path.lastTok.name;\n        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n        return _this;\n    }\n    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            var fullRest = currRest.concat(prevRest);\n            var restProd = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Flat\"]({ definition: fullRest });\n            this.possibleTokTypes = Object(_first__WEBPACK_IMPORTED_MODULE_2__[\"first\"])(restProd);\n            this.found = true;\n        }\n    };\n    return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker));\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nvar AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextTerminalAfterProductionWalker, _super);\n    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n        var _this = _super.call(this) || this;\n        _this.topRule = topRule;\n        _this.occurrence = occurrence;\n        _this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined\n        };\n        return _this;\n    }\n    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n        this.walk(this.topRule);\n        return this.result;\n    };\n    return AbstractNextTerminalAfterProductionWalker;\n}(_rest__WEBPACK_IMPORTED_MODULE_0__[\"RestWalker\"]));\n\nvar NextTerminalAfterManyWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManyWalker, _super);\n    function NextTerminalAfterManyWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            var firstAfterMany = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker));\n\nvar NextTerminalAfterManySepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManySepWalker, _super);\n    function NextTerminalAfterManySepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            var firstAfterManySep = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\n\nvar NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneWalker, _super);\n    function NextTerminalAfterAtLeastOneWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            var firstAfterAtLeastOne = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker));\n\n// TODO: reduce code duplication in the AfterWalkers\nvar NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n    function NextTerminalAfterAtLeastOneSepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            var firstAfterfirstAfterAtLeastOneSep = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(currRest.concat(prevRest));\n            this.result.isEndOfRule =\n                firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n                this.result.token =\n                    firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\n\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n    if (currPath === void 0) { currPath = []; }\n    // avoid side effects\n    currPath = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(currPath);\n    var result = [];\n    var i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        var prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Flat\"]) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"NonTerminal\"]) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Option\"]) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionMandatory\"]) {\n            var newDef = prod.definition.concat([\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                    definition: prod.definition\n                })\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionMandatoryWithSeparator\"]) {\n            var newDef = [\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Flat\"]({ definition: prod.definition }),\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                    definition: [\n                        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]({ terminalType: prod.separator })\n                    ].concat(prod.definition)\n                })\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionWithSeparator\"]) {\n            var newDef = prod.definition.concat([\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                    definition: [\n                        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]({ terminalType: prod.separator })\n                    ].concat(prod.definition)\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]) {\n            var newDef = prod.definition.concat([\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                    definition: prod.definition\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Alternation\"]) {\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(prod.definition, function (currAlt) {\n                result = getAlternativesForProd(currAlt.definition);\n            });\n            return result;\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(targetDef, i)\n    });\n    return result;\n}\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    var foundCompletePath = false;\n    var tokenVectorLength = tokenVector.length;\n    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    var result = [];\n    var possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: []\n    });\n    while (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(possiblePaths)) {\n        var currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"last\"])(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        var currDef = currPath.def;\n        var currIdx = currPath.idx;\n        var currRuleStack = currPath.ruleStack;\n        var currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(currDef)) {\n            continue;\n        }\n        var prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            var nextPath = {\n                idx: currIdx,\n                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef),\n                ruleStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropRight\"])(currRuleStack),\n                occurrenceStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropRight\"])(currOccurrenceStack)\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                var nextIdx = currIdx + 1;\n                var actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    var nextPath = {\n                        idx: nextIdx,\n                        def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"NonTerminal\"]) {\n            var newRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            var newOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            var nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Option\"]) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionMandatory\"]) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var secondIteration = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionMandatoryWithSeparator\"]) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var separatorGast = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]({\n                terminalType: prod.separator\n            });\n            var secondIteration = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"RepetitionWithSeparator\"]) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var separatorGast = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Terminal\"]({\n                terminalType: prod.separator\n            });\n            var nthRepetition = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            var nthRepetition = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Repetition\"]({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Alternation\"]) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (var i = prod.definition.length - 1; i >= 0; i--) {\n                var currAlt = prod.definition[i];\n                var currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Flat\"]) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"drop\"])(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            });\n        }\n        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__[\"Rule\"]) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    var newRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(currRuleStack);\n    newRuleStack.push(topRule.name);\n    var newCurrOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack\n    };\n}\n//# sourceMappingURL=interpreter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js ***!
  \*******************************************************************/
/*! exports provided: BITS_FOR_METHOD_TYPE, BITS_FOR_OCCURRENCE_IDX, BITS_FOR_RULE_IDX, BITS_FOR_ALT_IDX, OR_IDX, OPTION_IDX, MANY_IDX, AT_LEAST_ONE_IDX, MANY_SEP_IDX, AT_LEAST_ONE_SEP_IDX, getKeyForAutomaticLookahead, getKeyForAltIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BITS_FOR_METHOD_TYPE\", function() { return BITS_FOR_METHOD_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BITS_FOR_OCCURRENCE_IDX\", function() { return BITS_FOR_OCCURRENCE_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BITS_FOR_RULE_IDX\", function() { return BITS_FOR_RULE_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BITS_FOR_ALT_IDX\", function() { return BITS_FOR_ALT_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OR_IDX\", function() { return OR_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OPTION_IDX\", function() { return OPTION_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MANY_IDX\", function() { return MANY_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AT_LEAST_ONE_IDX\", function() { return AT_LEAST_ONE_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MANY_SEP_IDX\", function() { return MANY_SEP_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AT_LEAST_ONE_SEP_IDX\", function() { return AT_LEAST_ONE_SEP_IDX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getKeyForAutomaticLookahead\", function() { return getKeyForAutomaticLookahead; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getKeyForAltIndex\", function() { return getKeyForAltIndex; });\n// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nvar BITS_FOR_METHOD_TYPE = 4;\nvar BITS_FOR_OCCURRENCE_IDX = 8;\nvar BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nvar BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n/* tslint:disable */\nvar OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nvar OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nvar MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nvar AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nvar MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nvar AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    /* tslint:disable */\n    return occurrence | dslMethodIdx | ruleIdx;\n    /* tslint:enable */\n}\nvar BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\nfunction getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {\n    /* tslint:disable */\n    // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.\n    var altIdxBitMap = (altIdx + 1) << BITS_START_FOR_ALT_IDX;\n    return (getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) |\n        altIdxBitMap);\n    /* tslint:enable */\n}\n//# sourceMappingURL=keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2tleXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL2tleXMuanM/YmUyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb29rYWhlYWQga2V5cyBhcmUgMzJCaXQgaW50ZWdlcnMgaW4gdGhlIGZvcm1cbi8vIFRUVFRUVFRULVpaWlpaWlpaWlpaWi1ZWVlZLVhYWFhYWFhYXG4vLyBYWFhYIC0+IE9jY3VycmVuY2UgSW5kZXggYml0bWFwLlxuLy8gWVlZWSAtPiBEU0wgTWV0aG9kIFR5cGUgYml0bWFwLlxuLy8gWlpaWlpaWlpaWlpaWlpaIC0+IFJ1bGUgc2hvcnQgSW5kZXggYml0bWFwLlxuLy8gVFRUVFRUVFRUIC0+IGFsdGVybmF0aW9uIGFsdGVybmF0aXZlIGluZGV4IGJpdG1hcFxuZXhwb3J0IHZhciBCSVRTX0ZPUl9NRVRIT0RfVFlQRSA9IDQ7XG5leHBvcnQgdmFyIEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYID0gODtcbmV4cG9ydCB2YXIgQklUU19GT1JfUlVMRV9JRFggPSAxMjtcbi8vIFRPRE86IHZhbGlkYXRpb24sIHRoaXMgbWVhbnMgdGhhdCB0aGVyZSBtYXkgYXQgbW9zdCAyXjggLS0+IDI1NiBhbHRlcm5hdGl2ZXMgZm9yIGFuIGFsdGVybmF0aW9uLlxuZXhwb3J0IHZhciBCSVRTX0ZPUl9BTFRfSURYID0gODtcbi8vIHNob3J0IHN0cmluZyB1c2VkIGFzIHBhcnQgb2YgbWFwcGluZyBrZXlzLlxuLy8gYmVpbmcgc2hvcnQgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIHdoZW4gY29tcG9zaW5nIEtFWVMgZm9yIG1hcHMgb3V0IG9mIHRoZXNlXG4vLyBUaGUgNSAtIDggYml0cyAoMTYgcG9zc2libGUgdmFsdWVzLCBhcmUgcmVzZXJ2ZWQgZm9yIHRoZSBEU0wgbWV0aG9kIGluZGljZXMpXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuZXhwb3J0IHZhciBPUl9JRFggPSAxIDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IHZhciBPUFRJT05fSURYID0gMiA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbmV4cG9ydCB2YXIgTUFOWV9JRFggPSAzIDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuZXhwb3J0IHZhciBBVF9MRUFTVF9PTkVfSURYID0gNCA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbmV4cG9ydCB2YXIgTUFOWV9TRVBfSURYID0gNSA8PCBCSVRTX0ZPUl9PQ0NVUlJFTkNFX0lEWDtcbmV4cG9ydCB2YXIgQVRfTEVBU1RfT05FX1NFUF9JRFggPSA2IDw8IEJJVFNfRk9SX09DQ1VSUkVOQ0VfSURYO1xuLyogdHNsaW50OmVuYWJsZSAqL1xuLy8gdGhpcyBhY3R1YWxseSByZXR1cm5zIGEgbnVtYmVyLCBidXQgaXQgaXMgYWx3YXlzIHVzZWQgYXMgYSBzdHJpbmcgKG9iamVjdCBwcm9wIGtleSlcbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlGb3JBdXRvbWF0aWNMb29rYWhlYWQocnVsZUlkeCwgZHNsTWV0aG9kSWR4LCBvY2N1cnJlbmNlKSB7XG4gICAgLyogdHNsaW50OmRpc2FibGUgKi9cbiAgICByZXR1cm4gb2NjdXJyZW5jZSB8IGRzbE1ldGhvZElkeCB8IHJ1bGVJZHg7XG4gICAgLyogdHNsaW50OmVuYWJsZSAqL1xufVxudmFyIEJJVFNfU1RBUlRfRk9SX0FMVF9JRFggPSAzMiAtIEJJVFNfRk9SX0FMVF9JRFg7XG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5Rm9yQWx0SW5kZXgocnVsZUlkeCwgZHNsTWV0aG9kSWR4LCBvY2N1cnJlbmNlLCBhbHRJZHgpIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuICAgIC8vIGFsdGVybmF0aXZlIGluZGljZXMgYXJlIHplcm8gYmFzZWQsIHRodXMgbXVzdCBhbHdheXMgYWRkIG9uZSAodHVybiBvbiBvbmUgYml0KSB0byBndWFyYW50ZWUgdW5pcXVlbmVzcy5cbiAgICB2YXIgYWx0SWR4Qml0TWFwID0gKGFsdElkeCArIDEpIDw8IEJJVFNfU1RBUlRfRk9SX0FMVF9JRFg7XG4gICAgcmV0dXJuIChnZXRLZXlGb3JBdXRvbWF0aWNMb29rYWhlYWQocnVsZUlkeCwgZHNsTWV0aG9kSWR4LCBvY2N1cnJlbmNlKSB8XG4gICAgICAgIGFsdElkeEJpdE1hcCk7XG4gICAgLyogdHNsaW50OmVuYWJsZSAqL1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5cy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js":
/*!************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js ***!
  \************************************************************************/
/*! exports provided: PROD_TYPE, getProdType, buildLookaheadFuncForOr, buildLookaheadFuncForOptionalProd, buildAlternativesLookAheadFunc, buildSingleAlternativeLookaheadFunction, lookAheadSequenceFromAlternatives, getLookaheadPathsForOr, getLookaheadPathsForOptionalProd, containsPath, isStrictPrefixOfPath, areTokenCategoriesNotUsed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROD_TYPE\", function() { return PROD_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getProdType\", function() { return getProdType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildLookaheadFuncForOr\", function() { return buildLookaheadFuncForOr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildLookaheadFuncForOptionalProd\", function() { return buildLookaheadFuncForOptionalProd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildAlternativesLookAheadFunc\", function() { return buildAlternativesLookAheadFunc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildSingleAlternativeLookaheadFunction\", function() { return buildSingleAlternativeLookaheadFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lookAheadSequenceFromAlternatives\", function() { return lookAheadSequenceFromAlternatives; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLookaheadPathsForOr\", function() { return getLookaheadPathsForOr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLookaheadPathsForOptionalProd\", function() { return getLookaheadPathsForOptionalProd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"containsPath\", function() { return containsPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isStrictPrefixOfPath\", function() { return isStrictPrefixOfPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"areTokenCategoriesNotUsed\", function() { return areTokenCategoriesNotUsed; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _interpreter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpreter */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rest */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js\");\n/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../scan/tokens */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gast/gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\nvar PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE || (PROD_TYPE = {}));\nfunction getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Option\"]) {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Repetition\"]) {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"RepetitionMandatory\"]) {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"RepetitionMandatoryWithSeparator\"]) {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"RepetitionWithSeparator\"]) {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Alternation\"]) {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? _scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"tokenStructuredMatcherNoCategories\"]\n        : _scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"tokenStructuredMatcher\"];\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? _scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"tokenStructuredMatcherNoCategories\"]\n        : _scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"tokenStructuredMatcher\"];\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    var numOfAlts = alts.length;\n    var areAllOneTokenLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(alts, function (currAlt) {\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(currAlt, function (currPath) {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            var predicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(orAlts, function (currAlt) { return currAlt.GATE; });\n            for (var t = 0; t < numOfAlts; t++) {\n                var currAlt = alts[t];\n                var currNumOfPaths = currAlt.length;\n                var currPredicate = predicates[t];\n                if (currPredicate !== undefined &&\n                    currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n                    var currPath = currAlt[j];\n                    var currPathLength = currPath.length;\n                    for (var i = 0; i < currPathLength; i++) {\n                        var nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        var singleTokenAlts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(alts, function (currAlt) {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(currAlt);\n        });\n        var choiceToAlt_1 = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(singleTokenAlts, function (result, currAlt, idx) {\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currAlt, function (currTokType) {\n                if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currTokType.categoryMatches, function (currExtendingType) {\n                    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, []);\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            var nextToken = this.LA(1);\n            return choiceToAlt_1[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (var t = 0; t < numOfAlts; t++) {\n                var currAlt = alts[t];\n                var currNumOfPaths = currAlt.length;\n                nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n                    var currPath = currAlt[j];\n                    var currPathLength = currPath.length;\n                    for (var i = 0; i < currPathLength; i++) {\n                        var nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    var areAllOneTokenLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(alt, function (currPath) {\n        return currPath.length === 1;\n    });\n    var numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        var singleTokensTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(alt);\n        if (singleTokensTypes.length === 1 &&\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(singleTokensTypes[0].categoryMatches)) {\n            var expectedTokenType = singleTokensTypes[0];\n            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n            };\n        }\n        else {\n            var choiceToAlt_2 = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(singleTokensTypes, function (result, currTokType, idx) {\n                result[currTokType.tokenTypeIdx] = true;\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currTokType.categoryMatches, function (currExtendingType) {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                var nextToken = this.LA(1);\n                return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (var j = 0; j < numOfPaths; j++) {\n                var currPath = alt[j];\n                var currPathLength = currPath.length;\n                for (var i = 0; i < currPathLength; i++) {\n                    var nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nvar RestDefinitionFinderWalker = /** @class */ (function (_super) {\n    __extends(RestDefinitionFinderWalker, _super);\n    function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.targetOccurrence = targetOccurrence;\n        _this.targetProdType = targetProdType;\n        return _this;\n    }\n    RestDefinitionFinderWalker.prototype.startWalking = function () {\n        this.walk(this.topProd);\n        return this.restDef;\n    };\n    RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    };\n    RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n        }\n    };\n    return RestDefinitionFinderWalker;\n}(_rest__WEBPACK_IMPORTED_MODULE_2__[\"RestWalker\"]));\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nvar InsideDefinitionFinderVisitor = /** @class */ (function (_super) {\n    __extends(InsideDefinitionFinderVisitor, _super);\n    function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n        var _this = _super.call(this) || this;\n        _this.targetOccurrence = targetOccurrence;\n        _this.targetProdType = targetProdType;\n        _this.targetRef = targetRef;\n        _this.result = [];\n        return _this;\n    }\n    InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    };\n    InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    };\n    return InsideDefinitionFinderVisitor;\n}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_5__[\"GAstVisitor\"]));\nfunction initializeArrayOfArrays(size) {\n    var result = new Array(size);\n    for (var i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    var keys = [\"\"];\n    for (var i = 0; i < path.length; i++) {\n        var tokType = path[i];\n        var longerKeys = [];\n        for (var j = 0; j < keys.length; j++) {\n            var currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (var t = 0; t < tokType.categoryMatches.length; t++) {\n                var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            var searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n    var partialAlts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(altsDefs, function (currAlt) { return Object(_interpreter__WEBPACK_IMPORTED_MODULE_1__[\"possiblePathsFrom\"])([currAlt], 1); });\n    var finalResult = initializeArrayOfArrays(partialAlts.length);\n    var altsHashes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(partialAlts, function (currAltPaths) {\n        var dict = {};\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currAltPaths, function (item) {\n            var keys = pathToHashKeys(item.partialPath);\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(keys, function (currKey) {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    var newData = partialAlts;\n    // maxLookahead loop\n    for (var pathLength = 1; pathLength <= k; pathLength++) {\n        var currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        var _loop_1 = function (altIdx) {\n            var currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                var prefixKeys = pathToHashKeys(currPathPrefix);\n                var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique ||\n                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(suffixDef) ||\n                    currPathPrefix.length === k) {\n                    var currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (var j = 0; j < prefixKeys.length; j++) {\n                            var currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    var newPartialPathsAndSuffixes = Object(_interpreter__WEBPACK_IMPORTED_MODULE_1__[\"possiblePathsFrom\"])(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(newPartialPathsAndSuffixes, function (item) {\n                        var prefixKeys = pathToHashKeys(item.partialPath);\n                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(prefixKeys, function (key) {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        };\n        // alternatives loop\n        for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            _loop_1(altIdx);\n        }\n    }\n    return finalResult;\n}\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    var insideDef = insideDefVisitor.result;\n    var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    var afterDef = afterDefWalker.startWalking();\n    var insideFlat = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Flat\"]({ definition: insideDef });\n    var afterFlat = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__[\"Flat\"]({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nfunction containsPath(alternative, searchPath) {\n    compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n        var otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (var j = 0; j < otherPath.length; j++) {\n            var searchTok = searchPath[j];\n            var otherTok = otherPath[j];\n            var matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !==\n                    undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(prefix, function (tokType, idx) {\n            var otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(lookAheadPaths, function (singleAltPaths) {\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(singleAltPaths, function (singlePath) {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(singlePath, function (token) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(token.categoryMatches); });\n        });\n    });\n}\n//# sourceMappingURL=lookahead.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/resolver.js":
/*!***********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/resolver.js ***!
  \***********************************************************************/
/*! exports provided: resolveGrammar, GastRefResolverVisitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveGrammar\", function() { return resolveGrammar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GastRefResolverVisitor\", function() { return GastRefResolverVisitor; });\n/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gast/gast_visitor_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nfunction resolveGrammar(topLevels, errMsgProvider) {\n    var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n}\nvar GastRefResolverVisitor = /** @class */ (function (_super) {\n    __extends(GastRefResolverVisitor, _super);\n    function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {\n        var _this = _super.call(this) || this;\n        _this.nameToTopRule = nameToTopRule;\n        _this.errMsgProvider = errMsgProvider;\n        _this.errors = [];\n        return _this;\n    }\n    GastRefResolverVisitor.prototype.resolveRefs = function () {\n        var _this = this;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"values\"])(this.nameToTopRule), function (prod) {\n            _this.currTopLevel = prod;\n            prod.accept(_this);\n        });\n    };\n    GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {\n        var ref = this.nameToTopRule[node.nonTerminalName];\n        if (!ref) {\n            var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n            this.errors.push({\n                message: msg,\n                type: _parser_parser__WEBPACK_IMPORTED_MODULE_0__[\"ParserDefinitionErrorType\"].UNRESOLVED_SUBRULE_REF,\n                ruleName: this.currTopLevel.name,\n                unresolvedRefName: node.nonTerminalName\n            });\n        }\n        else {\n            node.referencedRule = ref;\n        }\n    };\n    return GastRefResolverVisitor;\n}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__[\"GAstVisitor\"]));\n\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9ncmFtbWFyL3Jlc29sdmVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvcGFyc2UvZ3JhbW1hci9yZXNvbHZlci5qcz8zMmY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgUGFyc2VyRGVmaW5pdGlvbkVycm9yVHlwZSB9IGZyb20gXCIuLi9wYXJzZXIvcGFyc2VyXCI7XG5pbXBvcnQgeyBmb3JFYWNoLCB2YWx1ZXMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IEdBc3RWaXNpdG9yIH0gZnJvbSBcIi4vZ2FzdC9nYXN0X3Zpc2l0b3JfcHVibGljXCI7XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUdyYW1tYXIodG9wTGV2ZWxzLCBlcnJNc2dQcm92aWRlcikge1xuICAgIHZhciByZWZSZXNvbHZlciA9IG5ldyBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yKHRvcExldmVscywgZXJyTXNnUHJvdmlkZXIpO1xuICAgIHJlZlJlc29sdmVyLnJlc29sdmVSZWZzKCk7XG4gICAgcmV0dXJuIHJlZlJlc29sdmVyLmVycm9ycztcbn1cbnZhciBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdhc3RSZWZSZXNvbHZlclZpc2l0b3IobmFtZVRvVG9wUnVsZSwgZXJyTXNnUHJvdmlkZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubmFtZVRvVG9wUnVsZSA9IG5hbWVUb1RvcFJ1bGU7XG4gICAgICAgIF90aGlzLmVyck1zZ1Byb3ZpZGVyID0gZXJyTXNnUHJvdmlkZXI7XG4gICAgICAgIF90aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEdhc3RSZWZSZXNvbHZlclZpc2l0b3IucHJvdG90eXBlLnJlc29sdmVSZWZzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBmb3JFYWNoKHZhbHVlcyh0aGlzLm5hbWVUb1RvcFJ1bGUpLCBmdW5jdGlvbiAocHJvZCkge1xuICAgICAgICAgICAgX3RoaXMuY3VyclRvcExldmVsID0gcHJvZDtcbiAgICAgICAgICAgIHByb2QuYWNjZXB0KF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdE5vblRlcm1pbmFsID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMubmFtZVRvVG9wUnVsZVtub2RlLm5vblRlcm1pbmFsTmFtZV07XG4gICAgICAgIGlmICghcmVmKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gdGhpcy5lcnJNc2dQcm92aWRlci5idWlsZFJ1bGVOb3RGb3VuZEVycm9yKHRoaXMuY3VyclRvcExldmVsLCBub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgICAgICB0eXBlOiBQYXJzZXJEZWZpbml0aW9uRXJyb3JUeXBlLlVOUkVTT0xWRURfU1VCUlVMRV9SRUYsXG4gICAgICAgICAgICAgICAgcnVsZU5hbWU6IHRoaXMuY3VyclRvcExldmVsLm5hbWUsXG4gICAgICAgICAgICAgICAgdW5yZXNvbHZlZFJlZk5hbWU6IG5vZGUubm9uVGVybWluYWxOYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUucmVmZXJlbmNlZFJ1bGUgPSByZWY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBHYXN0UmVmUmVzb2x2ZXJWaXNpdG9yO1xufShHQXN0VmlzaXRvcikpO1xuZXhwb3J0IHsgR2FzdFJlZlJlc29sdmVyVmlzaXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/resolver.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js ***!
  \*******************************************************************/
/*! exports provided: RestWalker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RestWalker\", function() { return RestWalker; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nvar RestWalker = /** @class */ (function () {\n    function RestWalker() {\n    }\n    RestWalker.prototype.walk = function (prod, prevRest) {\n        var _this = this;\n        if (prevRest === void 0) { prevRest = []; }\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(prod.definition, function (subProd, index) {\n            var currRest = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"drop\"])(prod.definition, index + 1);\n            /* istanbul ignore else */\n            if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]) {\n                _this.walkProdRef(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]) {\n                _this.walkTerminal(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Flat\"]) {\n                _this.walkFlat(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]) {\n                _this.walkOption(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatory\"]) {\n                _this.walkAtLeastOne(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatoryWithSeparator\"]) {\n                _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"]) {\n                _this.walkManySep(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"]) {\n                _this.walkMany(subProd, currRest, prevRest);\n            }\n            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"]) {\n                _this.walkOr(subProd, currRest, prevRest);\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    };\n    RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) { };\n    RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) { };\n    RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n        // ABCDEF => after the D the rest is EF\n        var fullOrRest = currRest.concat(prevRest);\n        this.walk(flatProd, fullOrRest);\n    };\n    RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n        // ABC(DE)?F => after the (DE)? the rest is F\n        var fullOrRest = currRest.concat(prevRest);\n        this.walk(optionProd, fullOrRest);\n    };\n    RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n        var fullAtLeastOneRest = [\n            new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]({ definition: atLeastOneProd.definition })\n        ].concat(currRest, prevRest);\n        this.walk(atLeastOneProd, fullAtLeastOneRest);\n    };\n    RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n        var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    };\n    RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n        var fullManyRest = [\n            new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]({ definition: manyProd.definition })\n        ].concat(currRest, prevRest);\n        this.walk(manyProd, fullManyRest);\n    };\n    RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n        var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n        this.walk(manySepProd, fullManySepRest);\n    };\n    RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n        var _this = this;\n        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n        var fullOrRest = currRest.concat(prevRest);\n        // walk all different alternatives\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(orProd.definition, function (alt) {\n            // wrapping each alternative in a single definition wrapper\n            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n            var prodWrapper = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Flat\"]({ definition: [alt] });\n            _this.walk(prodWrapper, fullOrRest);\n        });\n    };\n    return RestWalker;\n}());\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    var repSepRest = [\n        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"]({\n            definition: [\n                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]({ terminalType: repSepProd.separator })\n            ].concat(repSepProd.definition)\n        })\n    ];\n    var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n}\n//# sourceMappingURL=rest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js ***!
  \********************************************************************/
/*! exports provided: END_OF_FILE, DEFAULT_PARSER_CONFIG, DEFAULT_RULE_CONFIG, ParserDefinitionErrorType, EMPTY_ALT, Parser, CstParser, EmbeddedActionsParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"END_OF_FILE\", function() { return END_OF_FILE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_PARSER_CONFIG\", function() { return DEFAULT_PARSER_CONFIG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_RULE_CONFIG\", function() { return DEFAULT_RULE_CONFIG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParserDefinitionErrorType\", function() { return ParserDefinitionErrorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EMPTY_ALT\", function() { return EMPTY_ALT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CstParser\", function() { return CstParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmbeddedActionsParser\", function() { return EmbeddedActionsParser; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_follow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammar/follow */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/follow.js\");\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cst/cst */ \"./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js\");\n/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors_public */ \"./node_modules/chevrotain/lib_esm/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../grammar/gast/gast_resolver_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js\");\n/* harmony import */ var _traits_recoverable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./traits/recoverable */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _traits_looksahead__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./traits/looksahead */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/looksahead.js\");\n/* harmony import */ var _traits_tree_builder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./traits/tree_builder */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/tree_builder.js\");\n/* harmony import */ var _traits_lexer_adapter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./traits/lexer_adapter */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/lexer_adapter.js\");\n/* harmony import */ var _traits_recognizer_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./traits/recognizer_api */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_api.js\");\n/* harmony import */ var _traits_recognizer_engine__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./traits/recognizer_engine */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_engine.js\");\n/* harmony import */ var _traits_error_handler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./traits/error_handler */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js\");\n/* harmony import */ var _traits_context_assist__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./traits/context_assist */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/context_assist.js\");\n/* harmony import */ var _traits_gast_recorder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./traits/gast_recorder */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/gast_recorder.js\");\n/* harmony import */ var _traits_perf_tracer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./traits/perf_tracer */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar END_OF_FILE = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__[\"createTokenInstance\"])(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__[\"EOF\"], \"\", NaN, NaN, NaN, NaN, NaN, NaN);\nObject.freeze(END_OF_FILE);\nvar DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 4,\n    ignoredIssues: {},\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: _errors_public__WEBPACK_IMPORTED_MODULE_4__[\"defaultParserErrorProvider\"],\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false\n});\nvar DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: function () { return undefined; },\n    resyncEnabled: true\n});\nvar ParserDefinitionErrorType;\n(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"INVALID_NESTED_RULE_NAME\"] = 10] = \"INVALID_NESTED_RULE_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"DUPLICATE_NESTED_NAME\"] = 11] = \"DUPLICATE_NESTED_NAME\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"NO_NON_EMPTY_LOOKAHEAD\"] = 12] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"AMBIGUOUS_PREFIX_ALTS\"] = 13] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType[ParserDefinitionErrorType[\"TOO_MANY_ALTS\"] = 14] = \"TOO_MANY_ALTS\";\n})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\nfunction EMPTY_ALT(value) {\n    if (value === void 0) { value = undefined; }\n    return function () {\n        return value;\n    };\n}\nvar Parser = /** @class */ (function () {\n    function Parser(tokenVocabulary, config) {\n        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }\n        this.ignoredIssues = DEFAULT_PARSER_CONFIG.ignoredIssues;\n        this.definitionErrors = [];\n        this.selfAnalysisDone = false;\n        var that = this;\n        that.initErrorHandler(config);\n        that.initLexerAdapter();\n        that.initLooksAhead(config);\n        that.initRecognizerEngine(tokenVocabulary, config);\n        that.initRecoverable(config);\n        that.initTreeBuilder(config);\n        that.initContentAssist();\n        that.initGastRecorder(config);\n        that.initPerformanceTracer(config);\n        /* istanbul ignore if - complete over-kill to test this, we should only add a test when we actually hard deprecate it and throw an error... */\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"ignoredIssues\") &&\n            config.ignoredIssues !== DEFAULT_PARSER_CONFIG.ignoredIssues) {\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"PRINT_WARNING\"])(\"The <ignoredIssues> IParserConfig property is soft-deprecated and will be removed in future versions.\\n\\t\" +\n                \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\");\n        }\n        this.ignoredIssues = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"ignoredIssues\")\n            ? config.ignoredIssues\n            : DEFAULT_PARSER_CONFIG.ignoredIssues;\n        this.skipValidations = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"skipValidations\")\n            ? config.skipValidations\n            : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    Parser.performSelfAnalysis = function (parserInstance) {\n        ;\n        parserInstance.performSelfAnalysis();\n    };\n    Parser.prototype.performSelfAnalysis = function () {\n        var _this = this;\n        this.TRACE_INIT(\"performSelfAnalysis\", function () {\n            var defErrorsMsgs;\n            _this.selfAnalysisDone = true;\n            var className = _this.className;\n            _this.TRACE_INIT(\"toFastProps\", function () {\n                // Without this voodoo magic the parser would be x3-x4 slower\n                // It seems it is better to invoke `toFastProperties` **before**\n                // Any manipulations of the `this` object done during the recording phase.\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"toFastProperties\"])(_this);\n            });\n            _this.TRACE_INIT(\"Grammar Recording\", function () {\n                try {\n                    _this.enableRecording();\n                    // Building the GAST\n                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(_this.definedRulesNames, function (currRuleName) {\n                        var wrappedRule = _this[currRuleName];\n                        var originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n                        var recordedRuleGast = undefined;\n                        _this.TRACE_INIT(currRuleName + \" Rule\", function () {\n                            recordedRuleGast = _this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n                        });\n                        _this.gastProductionsCache[currRuleName] = recordedRuleGast;\n                    });\n                }\n                finally {\n                    _this.disableRecording();\n                }\n            });\n            var resolverErrors = [];\n            _this.TRACE_INIT(\"Grammar Resolving\", function () {\n                resolverErrors = Object(_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__[\"resolveGrammar\"])({\n                    rules: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.gastProductionsCache)\n                });\n                _this.definitionErrors.push.apply(_this.definitionErrors, resolverErrors); // mutability for the win?\n            });\n            _this.TRACE_INIT(\"Grammar Validations\", function () {\n                // only perform additional grammar validations IFF no resolving errors have occurred.\n                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(resolverErrors) && _this.skipValidations === false) {\n                    var validationErrors = Object(_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__[\"validateGrammar\"])({\n                        rules: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.gastProductionsCache),\n                        maxLookahead: _this.maxLookahead,\n                        tokenTypes: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.tokensMap),\n                        ignoredIssues: _this.ignoredIssues,\n                        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_4__[\"defaultGrammarValidatorErrorProvider\"],\n                        grammarName: className\n                    });\n                    _this.definitionErrors.push.apply(_this.definitionErrors, validationErrors); // mutability for the win?\n                }\n            });\n            // this analysis may fail if the grammar is not perfectly valid\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(_this.definitionErrors)) {\n                // The results of these computations are not needed unless error recovery is enabled.\n                if (_this.recoveryEnabled) {\n                    _this.TRACE_INIT(\"computeAllProdsFollows\", function () {\n                        var allFollows = Object(_grammar_follow__WEBPACK_IMPORTED_MODULE_1__[\"computeAllProdsFollows\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.gastProductionsCache));\n                        _this.resyncFollows = allFollows;\n                    });\n                }\n                _this.TRACE_INIT(\"ComputeLookaheadFunctions\", function () {\n                    _this.preComputeLookaheadFunctions(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.gastProductionsCache));\n                });\n            }\n            _this.TRACE_INIT(\"expandAllNestedRuleNames\", function () {\n                // TODO: is this needed for EmbeddedActionsParser?\n                var cstAnalysisResult = Object(_cst_cst__WEBPACK_IMPORTED_MODULE_3__[\"expandAllNestedRuleNames\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(_this.gastProductionsCache), _this.fullRuleNameToShort);\n                _this.allRuleNames = cstAnalysisResult.allRuleNames;\n            });\n            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n                !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(_this.definitionErrors)) {\n                defErrorsMsgs = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(_this.definitionErrors, function (defError) { return defError.message; });\n                throw new Error(\"Parser Definition Errors detected:\\n \" + defErrorsMsgs.join(\"\\n-------------------------------\\n\"));\n            }\n        });\n    };\n    // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n    // (normally during the parser's constructor).\n    // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n    // for example: duplicate rule names, referencing an unresolved subrule, ect...\n    // This flag should not be enabled during normal usage, it is used in special situations, for example when\n    // needing to display the parser definition errors in some GUI(online playground).\n    Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n    return Parser;\n}());\n\nObject(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"applyMixins\"])(Parser, [\n    _traits_recoverable__WEBPACK_IMPORTED_MODULE_6__[\"Recoverable\"],\n    _traits_looksahead__WEBPACK_IMPORTED_MODULE_7__[\"LooksAhead\"],\n    _traits_tree_builder__WEBPACK_IMPORTED_MODULE_8__[\"TreeBuilder\"],\n    _traits_lexer_adapter__WEBPACK_IMPORTED_MODULE_9__[\"LexerAdapter\"],\n    _traits_recognizer_engine__WEBPACK_IMPORTED_MODULE_11__[\"RecognizerEngine\"],\n    _traits_recognizer_api__WEBPACK_IMPORTED_MODULE_10__[\"RecognizerApi\"],\n    _traits_error_handler__WEBPACK_IMPORTED_MODULE_12__[\"ErrorHandler\"],\n    _traits_context_assist__WEBPACK_IMPORTED_MODULE_13__[\"ContentAssist\"],\n    _traits_gast_recorder__WEBPACK_IMPORTED_MODULE_14__[\"GastRecorder\"],\n    _traits_perf_tracer__WEBPACK_IMPORTED_MODULE_15__[\"PerformanceTracer\"]\n]);\nvar CstParser = /** @class */ (function (_super) {\n    __extends(CstParser, _super);\n    function CstParser(tokenVocabulary, config) {\n        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }\n        var _this = this;\n        var configClone = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneObj\"])(config);\n        configClone.outputCst = true;\n        _this = _super.call(this, tokenVocabulary, configClone) || this;\n        return _this;\n    }\n    return CstParser;\n}(Parser));\n\nvar EmbeddedActionsParser = /** @class */ (function (_super) {\n    __extends(EmbeddedActionsParser, _super);\n    function EmbeddedActionsParser(tokenVocabulary, config) {\n        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }\n        var _this = this;\n        var configClone = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneObj\"])(config);\n        configClone.outputCst = false;\n        _this = _super.call(this, tokenVocabulary, configClone) || this;\n        return _this;\n    }\n    return EmbeddedActionsParser;\n}(Parser));\n\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/context_assist.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/context_assist.js ***!
  \***********************************************************************************/
/*! exports provided: ContentAssist */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContentAssist\", function() { return ContentAssist; });\n/* harmony import */ var _grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/interpreter */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n\n\nvar ContentAssist = /** @class */ (function () {\n    function ContentAssist() {\n    }\n    ContentAssist.prototype.initContentAssist = function () { };\n    ContentAssist.prototype.computeContentAssist = function (startRuleName, precedingInput) {\n        var startRuleGast = this.gastProductionsCache[startRuleName];\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isUndefined\"])(startRuleGast)) {\n            throw Error(\"Rule ->\" + startRuleName + \"<- does not exist in this grammar.\");\n        }\n        return Object(_grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__[\"nextPossibleTokensAfter\"])([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    };\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    ContentAssist.prototype.getNextPossibleTokenTypes = function (grammarPath) {\n        var topRuleName = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"first\"])(grammarPath.ruleStack);\n        var gastProductions = this.getGAstProductions();\n        var topProduction = gastProductions[topRuleName];\n        var nextPossibleTokenTypes = new _grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__[\"NextAfterTokenWalker\"](topProduction, grammarPath).startWalking();\n        return nextPossibleTokenTypes;\n    };\n    return ContentAssist;\n}());\n\n//# sourceMappingURL=context_assist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2NvbnRleHRfYXNzaXN0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvcGFyc2UvcGFyc2VyL3RyYWl0cy9jb250ZXh0X2Fzc2lzdC5qcz8zNjRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBZnRlclRva2VuV2Fsa2VyLCBuZXh0UG9zc2libGVUb2tlbnNBZnRlciB9IGZyb20gXCIuLi8uLi9ncmFtbWFyL2ludGVycHJldGVyXCI7XG5pbXBvcnQgeyBmaXJzdCwgaXNVbmRlZmluZWQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbnZhciBDb250ZW50QXNzaXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRlbnRBc3Npc3QoKSB7XG4gICAgfVxuICAgIENvbnRlbnRBc3Npc3QucHJvdG90eXBlLmluaXRDb250ZW50QXNzaXN0ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIENvbnRlbnRBc3Npc3QucHJvdG90eXBlLmNvbXB1dGVDb250ZW50QXNzaXN0ID0gZnVuY3Rpb24gKHN0YXJ0UnVsZU5hbWUsIHByZWNlZGluZ0lucHV0KSB7XG4gICAgICAgIHZhciBzdGFydFJ1bGVHYXN0ID0gdGhpcy5nYXN0UHJvZHVjdGlvbnNDYWNoZVtzdGFydFJ1bGVOYW1lXTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHN0YXJ0UnVsZUdhc3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlJ1bGUgLT5cIiArIHN0YXJ0UnVsZU5hbWUgKyBcIjwtIGRvZXMgbm90IGV4aXN0IGluIHRoaXMgZ3JhbW1hci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHRQb3NzaWJsZVRva2Vuc0FmdGVyKFtzdGFydFJ1bGVHYXN0XSwgcHJlY2VkaW5nSW5wdXQsIHRoaXMudG9rZW5NYXRjaGVyLCB0aGlzLm1heExvb2thaGVhZCk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBhIG1lbWJlciBtZXRob2Qgb3IgYSB1dGlsaXR5PyBpdCBkb2VzIG5vdCBoYXZlIGFueSBzdGF0ZSBvciB1c2FnZSBvZiAndGhpcycuLi5cbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBtb3JlIGV4cGxpY2l0bHkgcGFydCBvZiB0aGUgcHVibGljIEFQST9cbiAgICBDb250ZW50QXNzaXN0LnByb3RvdHlwZS5nZXROZXh0UG9zc2libGVUb2tlblR5cGVzID0gZnVuY3Rpb24gKGdyYW1tYXJQYXRoKSB7XG4gICAgICAgIHZhciB0b3BSdWxlTmFtZSA9IGZpcnN0KGdyYW1tYXJQYXRoLnJ1bGVTdGFjayk7XG4gICAgICAgIHZhciBnYXN0UHJvZHVjdGlvbnMgPSB0aGlzLmdldEdBc3RQcm9kdWN0aW9ucygpO1xuICAgICAgICB2YXIgdG9wUHJvZHVjdGlvbiA9IGdhc3RQcm9kdWN0aW9uc1t0b3BSdWxlTmFtZV07XG4gICAgICAgIHZhciBuZXh0UG9zc2libGVUb2tlblR5cGVzID0gbmV3IE5leHRBZnRlclRva2VuV2Fsa2VyKHRvcFByb2R1Y3Rpb24sIGdyYW1tYXJQYXRoKS5zdGFydFdhbGtpbmcoKTtcbiAgICAgICAgcmV0dXJuIG5leHRQb3NzaWJsZVRva2VuVHlwZXM7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGVudEFzc2lzdDtcbn0oKSk7XG5leHBvcnQgeyBDb250ZW50QXNzaXN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0X2Fzc2lzdC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/context_assist.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js ***!
  \**********************************************************************************/
/*! exports provided: ErrorHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorHandler\", function() { return ErrorHandler; });\n/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../exceptions_public */ \"./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../grammar/lookahead */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n\n\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n    }\n    ErrorHandler.prototype.initErrorHandler = function (config) {\n        this._errors = [];\n        this.errorMessageProvider = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"defaults\"])(config.errorMessageProvider, _parser__WEBPACK_IMPORTED_MODULE_3__[\"DEFAULT_PARSER_CONFIG\"].errorMessageProvider);\n    };\n    ErrorHandler.prototype.SAVE_ERROR = function (error) {\n        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_0__[\"isRecognitionException\"])(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(this.RULE_OCCURRENCE_STACK)\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    };\n    Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n        // TODO: extract these methods to ErrorHandler Trait?\n        get: function () {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(this._errors);\n        },\n        set: function (newErrors) {\n            this._errors = newErrors;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        var lookAheadPathsPerAlternative = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__[\"getLookaheadPathsForOptionalProd\"])(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        var insideProdPaths = lookAheadPathsPerAlternative[0];\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName\n        });\n        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_0__[\"EarlyExitException\"](msg, this.LA(1), this.LA(0)));\n    };\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        var lookAheadPathsPerAlternative = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__[\"getLookaheadPathsForOr\"])(occurrence, ruleGrammar, this.maxLookahead);\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var previousToken = this.LA(0);\n        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName()\n        });\n        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_0__[\"NoViableAltException\"](errMsg, this.LA(1), previousToken));\n    };\n    return ErrorHandler;\n}());\n\n//# sourceMappingURL=error_handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2Vycm9yX2hhbmRsZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2Vycm9yX2hhbmRsZXIuanM/NTFiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFYXJseUV4aXRFeGNlcHRpb24sIGlzUmVjb2duaXRpb25FeGNlcHRpb24sIE5vVmlhYmxlQWx0RXhjZXB0aW9uIH0gZnJvbSBcIi4uLy4uL2V4Y2VwdGlvbnNfcHVibGljXCI7XG5pbXBvcnQgeyBjbG9uZUFyciwgZGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IGdldExvb2thaGVhZFBhdGhzRm9yT3B0aW9uYWxQcm9kLCBnZXRMb29rYWhlYWRQYXRoc0Zvck9yIH0gZnJvbSBcIi4uLy4uL2dyYW1tYXIvbG9va2FoZWFkXCI7XG5pbXBvcnQgeyBERUZBVUxUX1BBUlNFUl9DT05GSUcgfSBmcm9tIFwiLi4vcGFyc2VyXCI7XG4vKipcbiAqIFRyYWl0IHJlc3BvbnNpYmxlIGZvciBydW50aW1lIHBhcnNpbmcgZXJyb3JzLlxuICovXG52YXIgRXJyb3JIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVycm9ySGFuZGxlcigpIHtcbiAgICB9XG4gICAgRXJyb3JIYW5kbGVyLnByb3RvdHlwZS5pbml0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB0aGlzLl9lcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VQcm92aWRlciA9IGRlZmF1bHRzKGNvbmZpZy5lcnJvck1lc3NhZ2VQcm92aWRlciwgREVGQVVMVF9QQVJTRVJfQ09ORklHLmVycm9yTWVzc2FnZVByb3ZpZGVyKTtcbiAgICB9O1xuICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUuU0FWRV9FUlJPUiA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbihlcnJvcikpIHtcbiAgICAgICAgICAgIGVycm9yLmNvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgcnVsZVN0YWNrOiB0aGlzLmdldEh1bWFuUmVhZGFibGVSdWxlU3RhY2soKSxcbiAgICAgICAgICAgICAgICBydWxlT2NjdXJyZW5jZVN0YWNrOiBjbG9uZUFycih0aGlzLlJVTEVfT0NDVVJSRU5DRV9TVEFDSylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlRyeWluZyB0byBzYXZlIGFuIEVycm9yIHdoaWNoIGlzIG5vdCBhIFJlY29nbml0aW9uRXhjZXB0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXJyb3JIYW5kbGVyLnByb3RvdHlwZSwgXCJlcnJvcnNcIiwge1xuICAgICAgICAvLyBUT0RPOiBleHRyYWN0IHRoZXNlIG1ldGhvZHMgdG8gRXJyb3JIYW5kbGVyIFRyYWl0P1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUFycih0aGlzLl9lcnJvcnMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdFcnJvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9ycyA9IG5ld0Vycm9ycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgY2FjaGluZyB0aGUgZXJyb3IgbWVzc2FnZSBjb21wdXRlZCBpbmZvcm1hdGlvblxuICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUucmFpc2VFYXJseUV4aXRFeGNlcHRpb24gPSBmdW5jdGlvbiAob2NjdXJyZW5jZSwgcHJvZFR5cGUsIHVzZXJEZWZpbmVkRXJyTXNnKSB7XG4gICAgICAgIHZhciBydWxlTmFtZSA9IHRoaXMuZ2V0Q3VyclJ1bGVGdWxsTmFtZSgpO1xuICAgICAgICB2YXIgcnVsZUdyYW1tYXIgPSB0aGlzLmdldEdBc3RQcm9kdWN0aW9ucygpW3J1bGVOYW1lXTtcbiAgICAgICAgdmFyIGxvb2tBaGVhZFBhdGhzUGVyQWx0ZXJuYXRpdmUgPSBnZXRMb29rYWhlYWRQYXRoc0Zvck9wdGlvbmFsUHJvZChvY2N1cnJlbmNlLCBydWxlR3JhbW1hciwgcHJvZFR5cGUsIHRoaXMubWF4TG9va2FoZWFkKTtcbiAgICAgICAgdmFyIGluc2lkZVByb2RQYXRocyA9IGxvb2tBaGVhZFBhdGhzUGVyQWx0ZXJuYXRpdmVbMF07XG4gICAgICAgIHZhciBhY3R1YWxUb2tlbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5tYXhMb29rYWhlYWQ7IGkrKykge1xuICAgICAgICAgICAgYWN0dWFsVG9rZW5zLnB1c2godGhpcy5MQShpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zZyA9IHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXIuYnVpbGRFYXJseUV4aXRNZXNzYWdlKHtcbiAgICAgICAgICAgIGV4cGVjdGVkSXRlcmF0aW9uUGF0aHM6IGluc2lkZVByb2RQYXRocyxcbiAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsVG9rZW5zLFxuICAgICAgICAgICAgcHJldmlvdXM6IHRoaXMuTEEoMCksXG4gICAgICAgICAgICBjdXN0b21Vc2VyRGVzY3JpcHRpb246IHVzZXJEZWZpbmVkRXJyTXNnLFxuICAgICAgICAgICAgcnVsZU5hbWU6IHJ1bGVOYW1lXG4gICAgICAgIH0pO1xuICAgICAgICB0aHJvdyB0aGlzLlNBVkVfRVJST1IobmV3IEVhcmx5RXhpdEV4Y2VwdGlvbihtc2csIHRoaXMuTEEoMSksIHRoaXMuTEEoMCkpKTtcbiAgICB9O1xuICAgIC8vIFRPRE86IGNvbnNpZGVyIGNhY2hpbmcgdGhlIGVycm9yIG1lc3NhZ2UgY29tcHV0ZWQgaW5mb3JtYXRpb25cbiAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnJhaXNlTm9BbHRFeGNlcHRpb24gPSBmdW5jdGlvbiAob2NjdXJyZW5jZSwgZXJyTXNnVHlwZXMpIHtcbiAgICAgICAgdmFyIHJ1bGVOYW1lID0gdGhpcy5nZXRDdXJyUnVsZUZ1bGxOYW1lKCk7XG4gICAgICAgIHZhciBydWxlR3JhbW1hciA9IHRoaXMuZ2V0R0FzdFByb2R1Y3Rpb25zKClbcnVsZU5hbWVdO1xuICAgICAgICAvLyBUT0RPOiBnZXRMb29rYWhlYWRQYXRoc0Zvck9yIGNhbiBiZSBzbG93IGZvciBsYXJnZSBlbm91Z2ggbWF4TG9va2FoZWFkIGFuZCBjZXJ0YWluIGdyYW1tYXJzLCBjb25zaWRlciBjYWNoaW5nID9cbiAgICAgICAgdmFyIGxvb2tBaGVhZFBhdGhzUGVyQWx0ZXJuYXRpdmUgPSBnZXRMb29rYWhlYWRQYXRoc0Zvck9yKG9jY3VycmVuY2UsIHJ1bGVHcmFtbWFyLCB0aGlzLm1heExvb2thaGVhZCk7XG4gICAgICAgIHZhciBhY3R1YWxUb2tlbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5tYXhMb29rYWhlYWQ7IGkrKykge1xuICAgICAgICAgICAgYWN0dWFsVG9rZW5zLnB1c2godGhpcy5MQShpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzVG9rZW4gPSB0aGlzLkxBKDApO1xuICAgICAgICB2YXIgZXJyTXNnID0gdGhpcy5lcnJvck1lc3NhZ2VQcm92aWRlci5idWlsZE5vVmlhYmxlQWx0TWVzc2FnZSh7XG4gICAgICAgICAgICBleHBlY3RlZFBhdGhzUGVyQWx0OiBsb29rQWhlYWRQYXRoc1BlckFsdGVybmF0aXZlLFxuICAgICAgICAgICAgYWN0dWFsOiBhY3R1YWxUb2tlbnMsXG4gICAgICAgICAgICBwcmV2aW91czogcHJldmlvdXNUb2tlbixcbiAgICAgICAgICAgIGN1c3RvbVVzZXJEZXNjcmlwdGlvbjogZXJyTXNnVHlwZXMsXG4gICAgICAgICAgICBydWxlTmFtZTogdGhpcy5nZXRDdXJyUnVsZUZ1bGxOYW1lKClcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IHRoaXMuU0FWRV9FUlJPUihuZXcgTm9WaWFibGVBbHRFeGNlcHRpb24oZXJyTXNnLCB0aGlzLkxBKDEpLCBwcmV2aW91c1Rva2VuKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXJyb3JIYW5kbGVyO1xufSgpKTtcbmV4cG9ydCB7IEVycm9ySGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JfaGFuZGxlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/gast_recorder.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/gast_recorder.js ***!
  \**********************************************************************************/
/*! exports provided: GastRecorder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GastRecorder\", function() { return GastRecorder; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n/* harmony import */ var _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../scan/lexer_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js\");\n/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../scan/tokens */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens.js\");\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../grammar/keys */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\");\n\n\n\n\n\n\n\nvar RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nvar HANDLE_SEPARATOR = true;\nvar MAX_METHOD_IDX = Math.pow(2, _grammar_keys__WEBPACK_IMPORTED_MODULE_6__[\"BITS_FOR_OCCURRENCE_IDX\"]) - 1;\nvar RFT = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__[\"createToken\"])({ name: \"RECORDING_PHASE_TOKEN\", pattern: _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__[\"Lexer\"].NA });\nObject(_scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"augmentTokenTypes\"])([RFT]);\nvar RECORDING_PHASE_TOKEN = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__[\"createTokenInstance\"])(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details\", \n// Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nvar RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n        \"See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details\",\n    children: {}\n};\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nvar GastRecorder = /** @class */ (function () {\n    function GastRecorder() {\n    }\n    GastRecorder.prototype.initGastRecorder = function (config) {\n        this.recordingProdStack = [];\n        this.RECORDING_PHASE = false;\n    };\n    GastRecorder.prototype.enableRecording = function () {\n        var _this = this;\n        this.RECORDING_PHASE = true;\n        this.TRACE_INIT(\"Enable Recording\", function () {\n            var _loop_1 = function (i) {\n                var idx = i > 0 ? i : \"\";\n                _this[\"CONSUME\" + idx] = function (arg1, arg2) {\n                    return this.consumeInternalRecord(arg1, i, arg2);\n                };\n                _this[\"SUBRULE\" + idx] = function (arg1, arg2) {\n                    return this.subruleInternalRecord(arg1, i, arg2);\n                };\n                _this[\"OPTION\" + idx] = function (arg1) {\n                    return this.optionInternalRecord(arg1, i);\n                };\n                _this[\"OR\" + idx] = function (arg1) {\n                    return this.orInternalRecord(arg1, i);\n                };\n                _this[\"MANY\" + idx] = function (arg1) {\n                    this.manyInternalRecord(i, arg1);\n                };\n                _this[\"MANY_SEP\" + idx] = function (arg1) {\n                    this.manySepFirstInternalRecord(i, arg1);\n                };\n                _this[\"AT_LEAST_ONE\" + idx] = function (arg1) {\n                    this.atLeastOneInternalRecord(i, arg1);\n                };\n                _this[\"AT_LEAST_ONE_SEP\" + idx] = function (arg1) {\n                    this.atLeastOneSepFirstInternalRecord(i, arg1);\n                };\n            };\n            /**\n             * Warning Dark Voodoo Magic upcoming!\n             * We are \"replacing\" the public parsing DSL methods API\n             * With **new** alternative implementations on the Parser **instance**\n             *\n             * So far this is the only way I've found to avoid performance regressions during parsing time.\n             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n             *   implementations directly instead.\n             */\n            for (var i = 0; i < 10; i++) {\n                _loop_1(i);\n            }\n            // DSL methods with the idx(suffix) as an argument\n            _this[\"consume\"] = function (idx, arg1, arg2) {\n                return this.consumeInternalRecord(arg1, idx, arg2);\n            };\n            _this[\"subrule\"] = function (idx, arg1, arg2) {\n                return this.subruleInternalRecord(arg1, idx, arg2);\n            };\n            _this[\"option\"] = function (idx, arg1) {\n                return this.optionInternalRecord(arg1, idx);\n            };\n            _this[\"or\"] = function (idx, arg1) {\n                return this.orInternalRecord(arg1, idx);\n            };\n            _this[\"many\"] = function (idx, arg1) {\n                this.manyInternalRecord(idx, arg1);\n            };\n            _this[\"atLeastOne\"] = function (idx, arg1) {\n                this.atLeastOneInternalRecord(idx, arg1);\n            };\n            _this.ACTION = _this.ACTION_RECORD;\n            _this.BACKTRACK = _this.BACKTRACK_RECORD;\n            _this.LA = _this.LA_RECORD;\n        });\n    };\n    GastRecorder.prototype.disableRecording = function () {\n        var _this = this;\n        this.RECORDING_PHASE = false;\n        // By deleting these **instance** properties, any future invocation\n        // will be deferred to the original methods on the **prototype** object\n        // This seems to get rid of any incorrect optimizations that V8 may\n        // do during the recording phase.\n        this.TRACE_INIT(\"Deleting Recording methods\", function () {\n            for (var i = 0; i < 10; i++) {\n                var idx = i > 0 ? i : \"\";\n                delete _this[\"CONSUME\" + idx];\n                delete _this[\"SUBRULE\" + idx];\n                delete _this[\"OPTION\" + idx];\n                delete _this[\"OR\" + idx];\n                delete _this[\"MANY\" + idx];\n                delete _this[\"MANY_SEP\" + idx];\n                delete _this[\"AT_LEAST_ONE\" + idx];\n                delete _this[\"AT_LEAST_ONE_SEP\" + idx];\n            }\n            delete _this[\"consume\"];\n            delete _this[\"subrule\"];\n            delete _this[\"option\"];\n            delete _this[\"or\"];\n            delete _this[\"many\"];\n            delete _this[\"atLeastOne\"];\n            delete _this.ACTION;\n            delete _this.BACKTRACK;\n            delete _this.LA;\n        });\n    };\n    // TODO: is there any way to use this method to check no\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    GastRecorder.prototype.ACTION_RECORD = function (impl) {\n        // NO-OP during recording\n        return;\n    };\n    // Executing backtracking logic will break our recording logic assumptions\n    GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {\n        return function () { return true; };\n    };\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    GastRecorder.prototype.LA_RECORD = function (howMuch) {\n        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n        // On LA return EOF at the end of the input so an infinite loop may occur.\n        return _parser__WEBPACK_IMPORTED_MODULE_5__[\"END_OF_FILE\"];\n    };\n    GastRecorder.prototype.topLevelRuleRecord = function (name, def) {\n        try {\n            var newTopLevelRule = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Rule\"]({ definition: [], name: name });\n            newTopLevelRule.name = name;\n            this.recordingProdStack.push(newTopLevelRule);\n            def.call(this);\n            this.recordingProdStack.pop();\n            return newTopLevelRule;\n        }\n        catch (originalError) {\n            if (originalError.KNOWN_RECORDER_ERROR !== true) {\n                try {\n                    originalError.message =\n                        originalError.message +\n                            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n                            \"https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording\";\n                }\n                catch (mutabilityError) {\n                    // We may not be able to modify the original error object\n                    throw originalError;\n                }\n            }\n            throw originalError;\n        }\n    };\n    // Implementation of parsing DSL\n    GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {\n        return recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Option\"], actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {\n        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatory\"], actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {\n        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionMandatoryWithSeparator\"], options, occurrence, HANDLE_SEPARATOR);\n    };\n    GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {\n        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Repetition\"], actionORMethodDef, occurrence);\n    };\n    GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {\n        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"RepetitionWithSeparator\"], options, occurrence, HANDLE_SEPARATOR);\n    };\n    GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {\n        return recordOrProd.call(this, altsOrOpts, occurrence);\n    };\n    GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!ruleToCall || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(ruleToCall, \"ruleName\") === false) {\n            var error = new Error(\"<SUBRULE\" + getIdxSuffix(occurrence) + \"> argument is invalid\" +\n                (\" expecting a Parser method reference but got: <\" + JSON.stringify(ruleToCall) + \">\") +\n                (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"peek\"])(this.recordingProdStack);\n        var ruleName = ruleToCall[\"ruleName\"];\n        var newNoneTerminal = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"NonTerminal\"]({\n            idx: occurrence,\n            nonTerminalName: ruleName,\n            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n            referencedRule: undefined\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return this.outputCst\n            ? RECORDING_PHASE_CSTNODE\n            : RECORDING_NULL_OBJECT;\n    };\n    GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {\n        assertMethodIdxIsValid(occurrence);\n        if (!Object(_scan_tokens__WEBPACK_IMPORTED_MODULE_3__[\"hasShortKeyProperty\"])(tokType)) {\n            var error = new Error(\"<CONSUME\" + getIdxSuffix(occurrence) + \"> argument is invalid\" +\n                (\" expecting a TokenType reference but got: <\" + JSON.stringify(tokType) + \">\") +\n                (\"\\n inside top level rule: <\" + this.recordingProdStack[0].name + \">\"));\n            error.KNOWN_RECORDER_ERROR = true;\n            throw error;\n        }\n        var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"peek\"])(this.recordingProdStack);\n        var newNoneTerminal = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Terminal\"]({\n            idx: occurrence,\n            terminalType: tokType\n        });\n        prevProd.definition.push(newNoneTerminal);\n        return RECORDING_PHASE_TOKEN;\n    };\n    return GastRecorder;\n}());\n\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {\n    if (handleSep === void 0) { handleSep = false; }\n    assertMethodIdxIsValid(occurrence);\n    var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"peek\"])(this.recordingProdStack);\n    var grammarAction = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isFunction\"])(mainProdArg)\n        ? mainProdArg\n        : mainProdArg.DEF;\n    var newProd = new prodConstructor({ definition: [], idx: occurrence });\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(mainProdArg, \"NAME\")) {\n        newProd.name = mainProdArg.NAME;\n    }\n    if (handleSep) {\n        newProd.separator = mainProdArg.SEP;\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n}\nfunction recordOrProd(mainProdArg, occurrence) {\n    var _this = this;\n    assertMethodIdxIsValid(occurrence);\n    var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"peek\"])(this.recordingProdStack);\n    // Only an array of alternatives\n    var hasOptions = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(mainProdArg) === false;\n    var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    var newOrProd = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Alternation\"]({\n        definition: [],\n        idx: occurrence,\n        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n    });\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(mainProdArg, \"NAME\")) {\n        newOrProd.name = mainProdArg.NAME;\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(mainProdArg, \"MAX_LOOKAHEAD\")) {\n        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    var hasPredicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"some\"])(alts, function (currAlt) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isFunction\"])(currAlt.GATE); });\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(alts, function (currAlt) {\n        var currAltFlat = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__[\"Flat\"]({ definition: [] });\n        newOrProd.definition.push(currAltFlat);\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(currAlt, \"NAME\")) {\n            currAltFlat.name = currAlt.NAME;\n        }\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(currAlt, \"IGNORE_AMBIGUITIES\")) {\n            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;\n        }\n        // **implicit** ignoreAmbiguities due to usage of gate\n        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(currAlt, \"GATE\")) {\n            currAltFlat.ignoreAmbiguities = true;\n        }\n        _this.recordingProdStack.push(currAltFlat);\n        currAlt.ALT.call(_this);\n        _this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n}\nfunction getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : \"\" + idx;\n}\nfunction assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n        var error = new Error(\n        // The stack trace will contain all the needed details\n        \"Invalid DSL Method idx value: <\" + idx + \">\\n\\t\" +\n            (\"Idx value must be a none negative value smaller than \" + (MAX_METHOD_IDX +\n                1)));\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n    }\n}\n//# sourceMappingURL=gast_recorder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/gast_recorder.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/lexer_adapter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/lexer_adapter.js ***!
  \**********************************************************************************/
/*! exports provided: LexerAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LexerAdapter\", function() { return LexerAdapter; });\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nvar LexerAdapter = /** @class */ (function () {\n    function LexerAdapter() {\n    }\n    LexerAdapter.prototype.initLexerAdapter = function () {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    };\n    Object.defineProperty(LexerAdapter.prototype, \"input\", {\n        get: function () {\n            return this.tokVector;\n        },\n        set: function (newInput) {\n            if (this.selfAnalysisDone !== true) {\n                throw Error(\"Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.\");\n            }\n            this.reset();\n            this.tokVector = newInput;\n            this.tokVectorLength = newInput.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // skips a token and returns the next token\n    LexerAdapter.prototype.SKIP_TOKEN = function () {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        }\n        else {\n            return _parser__WEBPACK_IMPORTED_MODULE_0__[\"END_OF_FILE\"];\n        }\n    };\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LexerAdapter.prototype.LA = function (howMuch) {\n        var soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return _parser__WEBPACK_IMPORTED_MODULE_0__[\"END_OF_FILE\"];\n        }\n        else {\n            return this.tokVector[soughtIdx];\n        }\n    };\n    LexerAdapter.prototype.consumeToken = function () {\n        this.currIdx++;\n    };\n    LexerAdapter.prototype.exportLexerState = function () {\n        return this.currIdx;\n    };\n    LexerAdapter.prototype.importLexerState = function (newState) {\n        this.currIdx = newState;\n    };\n    LexerAdapter.prototype.resetLexerState = function () {\n        this.currIdx = -1;\n    };\n    LexerAdapter.prototype.moveToTerminatedState = function () {\n        this.currIdx = this.tokVector.length - 1;\n    };\n    LexerAdapter.prototype.getLexerPosition = function () {\n        return this.exportLexerState();\n    };\n    return LexerAdapter;\n}());\n\n//# sourceMappingURL=lexer_adapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2xleGVyX2FkYXB0ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL2xleGVyX2FkYXB0ZXIuanM/MzUzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTkRfT0ZfRklMRSB9IGZyb20gXCIuLi9wYXJzZXJcIjtcbi8qKlxuICogVHJhaXQgcmVzcG9uc2libGUgYWJzdHJhY3Rpbmcgb3ZlciB0aGUgaW50ZXJhY3Rpb24gd2l0aCBMZXhlciBvdXRwdXQgKFRva2VuIHZlY3RvcikuXG4gKlxuICogVGhpcyBjb3VsZCBiZSBnZW5lcmFsaXplZCB0byBzdXBwb3J0IG90aGVyIGtpbmRzIG9mIGxleGVycywgZS5nLlxuICogLSBKdXN0IGluIFRpbWUgTGV4aW5nIC8gTGV4ZXItTGVzcyBwYXJzaW5nLlxuICogLSBTdHJlYW1pbmcgTGV4ZXIuXG4gKi9cbnZhciBMZXhlckFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGV4ZXJBZGFwdGVyKCkge1xuICAgIH1cbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLmluaXRMZXhlckFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudG9rVmVjdG9yID0gW107XG4gICAgICAgIHRoaXMudG9rVmVjdG9yTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGV4ZXJBZGFwdGVyLnByb3RvdHlwZSwgXCJpbnB1dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rVmVjdG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdJbnB1dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZkFuYWx5c2lzRG9uZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTWlzc2luZyA8cGVyZm9ybVNlbGZBbmFseXNpcz4gaW52b2NhdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBQYXJzZXIncyBjb25zdHJ1Y3Rvci5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnRva1ZlY3RvciA9IG5ld0lucHV0O1xuICAgICAgICAgICAgdGhpcy50b2tWZWN0b3JMZW5ndGggPSBuZXdJbnB1dC5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIHNraXBzIGEgdG9rZW4gYW5kIHJldHVybnMgdGhlIG5leHQgdG9rZW5cbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLlNLSVBfVE9LRU4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJJZHggPD0gdGhpcy50b2tWZWN0b3IubGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lVG9rZW4oKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkxBKDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEVORF9PRl9GSUxFO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBMZXhlciAoYWNjZXNzaW5nIFRva2VuIHZlY3RvcikgcmVsYXRlZCBtZXRob2RzIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIHRvIGltcGxlbWVudCBsYXp5IGxleGVyc1xuICAgIC8vIG9yIGxleGVycyBkZXBlbmRlbnQgb24gcGFyc2VyIGNvbnRleHQuXG4gICAgTGV4ZXJBZGFwdGVyLnByb3RvdHlwZS5MQSA9IGZ1bmN0aW9uIChob3dNdWNoKSB7XG4gICAgICAgIHZhciBzb3VnaHRJZHggPSB0aGlzLmN1cnJJZHggKyBob3dNdWNoO1xuICAgICAgICBpZiAoc291Z2h0SWR4IDwgMCB8fCB0aGlzLnRva1ZlY3Rvckxlbmd0aCA8PSBzb3VnaHRJZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBFTkRfT0ZfRklMRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva1ZlY3Rvcltzb3VnaHRJZHhdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLmNvbnN1bWVUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4Kys7XG4gICAgfTtcbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLmV4cG9ydExleGVyU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJJZHg7XG4gICAgfTtcbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLmltcG9ydExleGVyU3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gbmV3U3RhdGU7XG4gICAgfTtcbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLnJlc2V0TGV4ZXJTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gLTE7XG4gICAgfTtcbiAgICBMZXhlckFkYXB0ZXIucHJvdG90eXBlLm1vdmVUb1Rlcm1pbmF0ZWRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdXJySWR4ID0gdGhpcy50b2tWZWN0b3IubGVuZ3RoIC0gMTtcbiAgICB9O1xuICAgIExleGVyQWRhcHRlci5wcm90b3R5cGUuZ2V0TGV4ZXJQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0TGV4ZXJTdGF0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIExleGVyQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBMZXhlckFkYXB0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxleGVyX2FkYXB0ZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/lexer_adapter.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/looksahead.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/looksahead.js ***!
  \*******************************************************************************/
/*! exports provided: LooksAhead */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LooksAhead\", function() { return LooksAhead; });\n/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../grammar/lookahead */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/keys */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\");\n/* harmony import */ var _grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../grammar/gast/gast */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js\");\n\n\n\n\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nvar LooksAhead = /** @class */ (function () {\n    function LooksAhead() {\n    }\n    LooksAhead.prototype.initLooksAhead = function (config) {\n        this.dynamicTokensEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"has\"])(config, \"dynamicTokensEnabled\")\n            ? config.dynamicTokensEnabled\n            : _parser__WEBPACK_IMPORTED_MODULE_2__[\"DEFAULT_PARSER_CONFIG\"].dynamicTokensEnabled;\n        this.maxLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"has\"])(config, \"maxLookahead\")\n            ? config.maxLookahead\n            : _parser__WEBPACK_IMPORTED_MODULE_2__[\"DEFAULT_PARSER_CONFIG\"].maxLookahead;\n        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n        this.lookAheadFuncsCache = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isES2015MapSupported\"])() ? new Map() : [];\n        // Performance optimization on newer engines that support ES6 Map\n        // For larger Maps this is slightly faster than using a plain object (array in our case).\n        /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isES2015MapSupported\"])()) {\n            this.getLaFuncFromCache = this.getLaFuncFromMap;\n            this.setLaFuncCache = this.setLaFuncCacheUsingMap;\n        }\n        else {\n            this.getLaFuncFromCache = this.getLaFuncFromObj;\n            this.setLaFuncCache = this.setLaFuncUsingObj;\n        }\n    };\n    LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {\n        var _this = this;\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(rules, function (currRule) {\n            _this.TRACE_INIT(currRule.name + \" Rule Lookahead\", function () {\n                var _a = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"collectMethods\"])(currRule), alternation = _a.alternation, repetition = _a.repetition, option = _a.option, repetitionMandatory = _a.repetitionMandatory, repetitionMandatoryWithSeparator = _a.repetitionMandatoryWithSeparator, repetitionWithSeparator = _a.repetitionWithSeparator;\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(alternation, function (currProd) {\n                    var prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n                    _this.TRACE_INIT(\"\" + Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd) + prodIdx, function () {\n                        var laFunc = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"buildLookaheadFuncForOr\"])(currProd.idx, currRule, currProd.maxLookahead || _this.maxLookahead, currProd.hasPredicates, _this.dynamicTokensEnabled, _this.lookAheadBuilderForAlternatives);\n                        var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"getKeyForAutomaticLookahead\"])(_this.fullRuleNameToShort[currRule.name], _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"OR_IDX\"], currProd.idx);\n                        _this.setLaFuncCache(key, laFunc);\n                    });\n                });\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(repetition, function (currProd) {\n                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"MANY_IDX\"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"PROD_TYPE\"].REPETITION, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd));\n                });\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(option, function (currProd) {\n                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"OPTION_IDX\"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"PROD_TYPE\"].OPTION, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd));\n                });\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(repetitionMandatory, function (currProd) {\n                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"AT_LEAST_ONE_IDX\"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"PROD_TYPE\"].REPETITION_MANDATORY, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd));\n                });\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(repetitionMandatoryWithSeparator, function (currProd) {\n                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"AT_LEAST_ONE_SEP_IDX\"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"PROD_TYPE\"].REPETITION_MANDATORY_WITH_SEPARATOR, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd));\n                });\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(repetitionWithSeparator, function (currProd) {\n                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"MANY_SEP_IDX\"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"PROD_TYPE\"].REPETITION_WITH_SEPARATOR, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__[\"getProductionDslName\"])(currProd));\n                });\n            });\n        });\n    };\n    LooksAhead.prototype.computeLookaheadFunc = function (rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n        var _this = this;\n        this.TRACE_INIT(\"\" + dslMethodName + (prodOccurrence === 0 ? \"\" : prodOccurrence), function () {\n            var laFunc = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"buildLookaheadFuncForOptionalProd\"])(prodOccurrence, rule, prodMaxLookahead || _this.maxLookahead, _this.dynamicTokensEnabled, prodType, _this.lookAheadBuilderForOptional);\n            var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"getKeyForAutomaticLookahead\"])(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n            _this.setLaFuncCache(key, laFunc);\n        });\n    };\n    LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {\n        return Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"buildSingleAlternativeLookaheadFunction\"])(alt, tokenMatcher, dynamicTokensEnabled);\n    };\n    LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n        return Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__[\"buildAlternativesLookAheadFunc\"])(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n    };\n    // this actually returns a number, but it is always used as a string (object prop key)\n    LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {\n        var currRuleShortName = this.getLastExplicitRuleShortName();\n        return Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"getKeyForAutomaticLookahead\"])(currRuleShortName, dslMethodIdx, occurrence);\n    };\n    /* istanbul ignore next */\n    LooksAhead.prototype.getLaFuncFromCache = function (key) {\n        return undefined;\n    };\n    LooksAhead.prototype.getLaFuncFromMap = function (key) {\n        return this.lookAheadFuncsCache.get(key);\n    };\n    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n    LooksAhead.prototype.getLaFuncFromObj = function (key) {\n        return this.lookAheadFuncsCache[key];\n    };\n    /* istanbul ignore next */\n    LooksAhead.prototype.setLaFuncCache = function (key, value) { };\n    LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {\n        this.lookAheadFuncsCache.set(key, value);\n    };\n    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */\n    LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {\n        this.lookAheadFuncsCache[key] = value;\n    };\n    return LooksAhead;\n}());\n\n//# sourceMappingURL=looksahead.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/looksahead.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js ***!
  \********************************************************************************/
/*! exports provided: PerformanceTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PerformanceTracer\", function() { return PerformanceTracer; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf;\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = _parser__WEBPACK_IMPORTED_MODULE_1__[\"DEFAULT_PARSER_CONFIG\"].traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"timer\"])(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\n\n//# sourceMappingURL=perf_tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9wYXJzZS9wYXJzZXIvdHJhaXRzL3BlcmZfdHJhY2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvcGFyc2UvcGFyc2VyL3RyYWl0cy9wZXJmX3RyYWNlci5qcz84MGE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhcywgdGltZXIgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IERFRkFVTFRfUEFSU0VSX0NPTkZJRyB9IGZyb20gXCIuLi9wYXJzZXJcIjtcbi8qKlxuICogVHJhaXQgcmVzcG9uc2libGUgZm9yIHJ1bnRpbWUgcGFyc2luZyBlcnJvcnMuXG4gKi9cbnZhciBQZXJmb3JtYW5jZVRyYWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQZXJmb3JtYW5jZVRyYWNlcigpIHtcbiAgICB9XG4gICAgUGVyZm9ybWFuY2VUcmFjZXIucHJvdG90eXBlLmluaXRQZXJmb3JtYW5jZVRyYWNlciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgaWYgKGhhcyhjb25maWcsIFwidHJhY2VJbml0UGVyZlwiKSkge1xuICAgICAgICAgICAgdmFyIHVzZXJUcmFjZUluaXRQZXJmID0gY29uZmlnLnRyYWNlSW5pdFBlcmY7XG4gICAgICAgICAgICB2YXIgdHJhY2VJc051bWJlciA9IHR5cGVvZiB1c2VyVHJhY2VJbml0UGVyZiA9PT0gXCJudW1iZXJcIjtcbiAgICAgICAgICAgIHRoaXMudHJhY2VJbml0TWF4SWRlbnQgPSB0cmFjZUlzTnVtYmVyXG4gICAgICAgICAgICAgICAgPyB1c2VyVHJhY2VJbml0UGVyZlxuICAgICAgICAgICAgICAgIDogSW5maW5pdHk7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdFBlcmYgPSB0cmFjZUlzTnVtYmVyXG4gICAgICAgICAgICAgICAgPyB1c2VyVHJhY2VJbml0UGVyZiA+IDBcbiAgICAgICAgICAgICAgICA6IHVzZXJUcmFjZUluaXRQZXJmO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFjZUluaXRNYXhJZGVudCA9IDA7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdFBlcmYgPSBERUZBVUxUX1BBUlNFUl9DT05GSUcudHJhY2VJbml0UGVyZjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYWNlSW5pdEluZGVudCA9IC0xO1xuICAgIH07XG4gICAgUGVyZm9ybWFuY2VUcmFjZXIucHJvdG90eXBlLlRSQUNFX0lOSVQgPSBmdW5jdGlvbiAocGhhc2VEZXNjLCBwaGFzZUltcGwpIHtcbiAgICAgICAgLy8gTm8gbmVlZCB0byBvcHRpbWl6ZSB0aGlzIHVzaW5nIE5PT1AgcGF0dGVybiBiZWNhdXNlXG4gICAgICAgIC8vIEl0IGlzIG5vdCBjYWxsZWQgaW4gYSBob3Qgc3BvdC4uLlxuICAgICAgICBpZiAodGhpcy50cmFjZUluaXRQZXJmID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdEluZGVudCsrO1xuICAgICAgICAgICAgdmFyIGluZGVudCA9IG5ldyBBcnJheSh0aGlzLnRyYWNlSW5pdEluZGVudCArIDEpLmpvaW4oXCJcXHRcIik7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFjZUluaXRJbmRlbnQgPCB0aGlzLnRyYWNlSW5pdE1heElkZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5kZW50ICsgXCItLT4gPFwiICsgcGhhc2VEZXNjICsgXCI+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gdGltZXIocGhhc2VJbXBsKSwgdGltZSA9IF9hLnRpbWUsIHZhbHVlID0gX2EudmFsdWU7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIERpZmZpY3VsdCB0byByZXByb2R1Y2Ugc3BlY2lmaWMgcGVyZm9ybWFuY2UgYmVoYXZpb3IgKD4xMG1zKSBpbiB0ZXN0cyAqL1xuICAgICAgICAgICAgdmFyIHRyYWNlTWV0aG9kID0gdGltZSA+IDEwID8gY29uc29sZS53YXJuIDogY29uc29sZS5sb2c7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFjZUluaXRJbmRlbnQgPCB0aGlzLnRyYWNlSW5pdE1heElkZW50KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VNZXRob2QoaW5kZW50ICsgXCI8LS0gPFwiICsgcGhhc2VEZXNjICsgXCI+IHRpbWU6IFwiICsgdGltZSArIFwibXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyYWNlSW5pdEluZGVudC0tO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBoYXNlSW1wbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUGVyZm9ybWFuY2VUcmFjZXI7XG59KCkpO1xuZXhwb3J0IHsgUGVyZm9ybWFuY2VUcmFjZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZfdHJhY2VyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_api.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_api.js ***!
  \***********************************************************************************/
/*! exports provided: RecognizerApi */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecognizerApi\", function() { return RecognizerApi; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../exceptions_public */ \"./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors_public */ \"./node_modules/chevrotain/lib_esm/src/parse/errors_public.js\");\n/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../grammar/checks */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js\");\n/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../grammar/gast/gast_public */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js\");\n\n\n\n\n\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nvar RecognizerApi = /** @class */ (function () {\n    function RecognizerApi() {\n    }\n    RecognizerApi.prototype.ACTION = function (impl) {\n        return impl.call(this);\n    };\n    RecognizerApi.prototype.consume = function (idx, tokType, options) {\n        return this.consumeInternal(tokType, idx, options);\n    };\n    RecognizerApi.prototype.subrule = function (idx, ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, idx, options);\n    };\n    RecognizerApi.prototype.option = function (idx, actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, idx);\n    };\n    RecognizerApi.prototype.or = function (idx, altsOrOpts) {\n        return this.orInternal(altsOrOpts, idx);\n    };\n    RecognizerApi.prototype.many = function (idx, actionORMethodDef) {\n        return this.manyInternal(idx, actionORMethodDef);\n    };\n    RecognizerApi.prototype.atLeastOne = function (idx, actionORMethodDef) {\n        return this.atLeastOneInternal(idx, actionORMethodDef);\n    };\n    RecognizerApi.prototype.CONSUME = function (tokType, options) {\n        return this.consumeInternal(tokType, 0, options);\n    };\n    RecognizerApi.prototype.CONSUME1 = function (tokType, options) {\n        return this.consumeInternal(tokType, 1, options);\n    };\n    RecognizerApi.prototype.CONSUME2 = function (tokType, options) {\n        return this.consumeInternal(tokType, 2, options);\n    };\n    RecognizerApi.prototype.CONSUME3 = function (tokType, options) {\n        return this.consumeInternal(tokType, 3, options);\n    };\n    RecognizerApi.prototype.CONSUME4 = function (tokType, options) {\n        return this.consumeInternal(tokType, 4, options);\n    };\n    RecognizerApi.prototype.CONSUME5 = function (tokType, options) {\n        return this.consumeInternal(tokType, 5, options);\n    };\n    RecognizerApi.prototype.CONSUME6 = function (tokType, options) {\n        return this.consumeInternal(tokType, 6, options);\n    };\n    RecognizerApi.prototype.CONSUME7 = function (tokType, options) {\n        return this.consumeInternal(tokType, 7, options);\n    };\n    RecognizerApi.prototype.CONSUME8 = function (tokType, options) {\n        return this.consumeInternal(tokType, 8, options);\n    };\n    RecognizerApi.prototype.CONSUME9 = function (tokType, options) {\n        return this.consumeInternal(tokType, 9, options);\n    };\n    RecognizerApi.prototype.SUBRULE = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 0, options);\n    };\n    RecognizerApi.prototype.SUBRULE1 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 1, options);\n    };\n    RecognizerApi.prototype.SUBRULE2 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 2, options);\n    };\n    RecognizerApi.prototype.SUBRULE3 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 3, options);\n    };\n    RecognizerApi.prototype.SUBRULE4 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 4, options);\n    };\n    RecognizerApi.prototype.SUBRULE5 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 5, options);\n    };\n    RecognizerApi.prototype.SUBRULE6 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 6, options);\n    };\n    RecognizerApi.prototype.SUBRULE7 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 7, options);\n    };\n    RecognizerApi.prototype.SUBRULE8 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 8, options);\n    };\n    RecognizerApi.prototype.SUBRULE9 = function (ruleToCall, options) {\n        return this.subruleInternal(ruleToCall, 9, options);\n    };\n    RecognizerApi.prototype.OPTION = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 0);\n    };\n    RecognizerApi.prototype.OPTION1 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 1);\n    };\n    RecognizerApi.prototype.OPTION2 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 2);\n    };\n    RecognizerApi.prototype.OPTION3 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 3);\n    };\n    RecognizerApi.prototype.OPTION4 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 4);\n    };\n    RecognizerApi.prototype.OPTION5 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 5);\n    };\n    RecognizerApi.prototype.OPTION6 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 6);\n    };\n    RecognizerApi.prototype.OPTION7 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 7);\n    };\n    RecognizerApi.prototype.OPTION8 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 8);\n    };\n    RecognizerApi.prototype.OPTION9 = function (actionORMethodDef) {\n        return this.optionInternal(actionORMethodDef, 9);\n    };\n    RecognizerApi.prototype.OR = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 0);\n    };\n    RecognizerApi.prototype.OR1 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 1);\n    };\n    RecognizerApi.prototype.OR2 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 2);\n    };\n    RecognizerApi.prototype.OR3 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 3);\n    };\n    RecognizerApi.prototype.OR4 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 4);\n    };\n    RecognizerApi.prototype.OR5 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 5);\n    };\n    RecognizerApi.prototype.OR6 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 6);\n    };\n    RecognizerApi.prototype.OR7 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 7);\n    };\n    RecognizerApi.prototype.OR8 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 8);\n    };\n    RecognizerApi.prototype.OR9 = function (altsOrOpts) {\n        return this.orInternal(altsOrOpts, 9);\n    };\n    RecognizerApi.prototype.MANY = function (actionORMethodDef) {\n        this.manyInternal(0, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY1 = function (actionORMethodDef) {\n        this.manyInternal(1, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY2 = function (actionORMethodDef) {\n        this.manyInternal(2, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY3 = function (actionORMethodDef) {\n        this.manyInternal(3, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY4 = function (actionORMethodDef) {\n        this.manyInternal(4, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY5 = function (actionORMethodDef) {\n        this.manyInternal(5, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY6 = function (actionORMethodDef) {\n        this.manyInternal(6, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY7 = function (actionORMethodDef) {\n        this.manyInternal(7, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY8 = function (actionORMethodDef) {\n        this.manyInternal(8, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY9 = function (actionORMethodDef) {\n        this.manyInternal(9, actionORMethodDef);\n    };\n    RecognizerApi.prototype.MANY_SEP = function (options) {\n        this.manySepFirstInternal(0, options);\n    };\n    RecognizerApi.prototype.MANY_SEP1 = function (options) {\n        this.manySepFirstInternal(1, options);\n    };\n    RecognizerApi.prototype.MANY_SEP2 = function (options) {\n        this.manySepFirstInternal(2, options);\n    };\n    RecognizerApi.prototype.MANY_SEP3 = function (options) {\n        this.manySepFirstInternal(3, options);\n    };\n    RecognizerApi.prototype.MANY_SEP4 = function (options) {\n        this.manySepFirstInternal(4, options);\n    };\n    RecognizerApi.prototype.MANY_SEP5 = function (options) {\n        this.manySepFirstInternal(5, options);\n    };\n    RecognizerApi.prototype.MANY_SEP6 = function (options) {\n        this.manySepFirstInternal(6, options);\n    };\n    RecognizerApi.prototype.MANY_SEP7 = function (options) {\n        this.manySepFirstInternal(7, options);\n    };\n    RecognizerApi.prototype.MANY_SEP8 = function (options) {\n        this.manySepFirstInternal(8, options);\n    };\n    RecognizerApi.prototype.MANY_SEP9 = function (options) {\n        this.manySepFirstInternal(9, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE = function (actionORMethodDef) {\n        this.atLeastOneInternal(0, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE1 = function (actionORMethodDef) {\n        return this.atLeastOneInternal(1, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE2 = function (actionORMethodDef) {\n        this.atLeastOneInternal(2, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE3 = function (actionORMethodDef) {\n        this.atLeastOneInternal(3, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE4 = function (actionORMethodDef) {\n        this.atLeastOneInternal(4, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE5 = function (actionORMethodDef) {\n        this.atLeastOneInternal(5, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE6 = function (actionORMethodDef) {\n        this.atLeastOneInternal(6, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE7 = function (actionORMethodDef) {\n        this.atLeastOneInternal(7, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE8 = function (actionORMethodDef) {\n        this.atLeastOneInternal(8, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE9 = function (actionORMethodDef) {\n        this.atLeastOneInternal(9, actionORMethodDef);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP = function (options) {\n        this.atLeastOneSepFirstInternal(0, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP1 = function (options) {\n        this.atLeastOneSepFirstInternal(1, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP2 = function (options) {\n        this.atLeastOneSepFirstInternal(2, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP3 = function (options) {\n        this.atLeastOneSepFirstInternal(3, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP4 = function (options) {\n        this.atLeastOneSepFirstInternal(4, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP5 = function (options) {\n        this.atLeastOneSepFirstInternal(5, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP6 = function (options) {\n        this.atLeastOneSepFirstInternal(6, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP7 = function (options) {\n        this.atLeastOneSepFirstInternal(7, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP8 = function (options) {\n        this.atLeastOneSepFirstInternal(8, options);\n    };\n    RecognizerApi.prototype.AT_LEAST_ONE_SEP9 = function (options) {\n        this.atLeastOneSepFirstInternal(9, options);\n    };\n    RecognizerApi.prototype.RULE = function (name, implementation, config) {\n        if (config === void 0) { config = _parser__WEBPACK_IMPORTED_MODULE_2__[\"DEFAULT_RULE_CONFIG\"]; }\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(this.definedRulesNames, name)) {\n            var errMsg = _errors_public__WEBPACK_IMPORTED_MODULE_3__[\"defaultGrammarValidatorErrorProvider\"].buildDuplicateRuleNameError({\n                topLevelRule: name,\n                grammarName: this.className\n            });\n            var error = {\n                message: errMsg,\n                type: _parser__WEBPACK_IMPORTED_MODULE_2__[\"ParserDefinitionErrorType\"].DUPLICATE_RULE_NAME,\n                ruleName: name\n            };\n            this.definitionErrors.push(error);\n        }\n        this.definedRulesNames.push(name);\n        var ruleImplementation = this.defineRule(name, implementation, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    };\n    RecognizerApi.prototype.OVERRIDE_RULE = function (name, impl, config) {\n        if (config === void 0) { config = _parser__WEBPACK_IMPORTED_MODULE_2__[\"DEFAULT_RULE_CONFIG\"]; }\n        var ruleErrors = [];\n        ruleErrors = ruleErrors.concat(Object(_grammar_checks__WEBPACK_IMPORTED_MODULE_4__[\"validateRuleIsOverridden\"])(name, this.definedRulesNames, this.className));\n        this.definitionErrors.push.apply(this.definitionErrors, ruleErrors); // mutability for the win\n        var ruleImplementation = this.defineRule(name, impl, config);\n        this[name] = ruleImplementation;\n        return ruleImplementation;\n    };\n    RecognizerApi.prototype.BACKTRACK = function (grammarRule, args) {\n        return function () {\n            // save org state\n            this.isBackTrackingStack.push(1);\n            var orgState = this.saveRecogState();\n            try {\n                grammarRule.apply(this, args);\n                // if no exception was thrown we have succeed parsing the rule.\n                return true;\n            }\n            catch (e) {\n                if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_1__[\"isRecognitionException\"])(e)) {\n                    return false;\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                this.reloadRecogState(orgState);\n                this.isBackTrackingStack.pop();\n            }\n        };\n    };\n    // GAST export APIs\n    RecognizerApi.prototype.getGAstProductions = function () {\n        return this.gastProductionsCache;\n    };\n    RecognizerApi.prototype.getSerializedGastProductions = function () {\n        return Object(_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_5__[\"serializeGrammar\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(this.gastProductionsCache));\n    };\n    return RecognizerApi;\n}());\n\n//# sourceMappingURL=recognizer_api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_api.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_engine.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_engine.js ***!
  \**************************************************************************************/
/*! exports provided: RecognizerEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RecognizerEngine\", function() { return RecognizerEngine; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../grammar/keys */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\");\n/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../exceptions_public */ \"./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\");\n/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/lookahead */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js\");\n/* harmony import */ var _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../grammar/interpreter */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n/* harmony import */ var _recoverable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./recoverable */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js\");\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../scan/tokens */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens.js\");\n/* harmony import */ var _lang_lang_extensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../lang/lang_extensions */ \"./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nvar RecognizerEngine = /** @class */ (function () {\n    function RecognizerEngine() {\n    }\n    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n        this.className = Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_9__[\"classNameFromInstance\"])(this);\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = _scan_tokens__WEBPACK_IMPORTED_MODULE_8__[\"tokenStructuredMatcherNoCategories\"];\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.allRuleNames = [];\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(tokenVocabulary)) {\n            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(tokenVocabulary, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokenVocabulary, \"modes\") &&\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(tokenVocabulary.modes)), _scan_tokens__WEBPACK_IMPORTED_MODULE_8__[\"isTokenType\"])) {\n            var allTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(tokenVocabulary.modes));\n            var uniqueTokens = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"uniq\"])(allTokenTypes);\n            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"reduce\"])(uniqueTokens, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isObject\"])(tokenVocabulary)) {\n            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneObj\"])(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        /* tslint:disable */\n        this.tokensMap[\"EOF\"] = _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__[\"EOF\"];\n        // TODO: This check may not be accurate for multi mode lexers\n        var noTokenCategoriesUsed = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"every\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(tokenVocabulary), function (tokenConstructor) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(tokenConstructor.categoryMatches); });\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? _scan_tokens__WEBPACK_IMPORTED_MODULE_8__[\"tokenStructuredMatcherNoCategories\"]\n            : _scan_tokens__WEBPACK_IMPORTED_MODULE_8__[\"tokenStructuredMatcher\"];\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        Object(_scan_tokens__WEBPACK_IMPORTED_MODULE_8__[\"augmentTokenTypes\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"values\"])(this.tokensMap));\n    };\n    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(\"Grammar rule <\" + ruleName + \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\" +\n                \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n        }\n        var resyncEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"resyncEnabled\")\n            ? config.resyncEnabled\n            : _parser__WEBPACK_IMPORTED_MODULE_5__[\"DEFAULT_RULE_CONFIG\"].resyncEnabled;\n        var recoveryValueFunc = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc\n            : _parser__WEBPACK_IMPORTED_MODULE_5__[\"DEFAULT_RULE_CONFIG\"].recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        /* tslint:disable */\n        var shortName = this.ruleShortNameIdx <<\n            (_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"BITS_FOR_METHOD_TYPE\"] + _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"BITS_FOR_OCCURRENCE_IDX\"]);\n        /* tslint:enable */\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        function invokeRuleWithTry(args) {\n            try {\n                if (this.outputCst === true) {\n                    impl.apply(this, args);\n                    var cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                else {\n                    return impl.apply(this, args);\n                }\n            }\n            catch (e) {\n                return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n            }\n            finally {\n                this.ruleFinallyStateUpdate();\n            }\n        }\n        var wrappedGrammarRule;\n        wrappedGrammarRule = function (idxInCallingRule, args) {\n            if (idxInCallingRule === void 0) { idxInCallingRule = 0; }\n            this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);\n            return invokeRuleWithTry.call(this, args);\n        };\n        var ruleNamePropName = \"ruleName\";\n        wrappedGrammarRule[ruleNamePropName] = ruleName;\n        wrappedGrammarRule[\"originalGrammarAction\"] = impl;\n        return wrappedGrammarRule;\n    };\n    RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n        var isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        var reSyncEnabled = resyncEnabledConfig &&\n            !this.isBackTracking() &&\n            this.recoveryEnabled;\n        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_2__[\"isRecognitionException\"])(e)) {\n            var recogError = e;\n            if (reSyncEnabled) {\n                var reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc();\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc();\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    };\n    // Implementation of parsing DSL\n    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OPTION_IDX\"], occurrence);\n        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, key);\n        try {\n            return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(key, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.optionInternalNoCst = function (actionORMethodDef, occurrence) {\n        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OPTION_IDX\"], occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    };\n    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_1 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return (predicate.call(_this) && orgLookaheadFunction_1.call(_this));\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    };\n    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_IDX\"], prodOccurrence);\n        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);\n        try {\n            return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(laKey, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.atLeastOneInternalNoCst = function (prodOccurrence, actionORMethodDef) {\n        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_IDX\"], prodOccurrence);\n        this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key);\n    };\n    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_2 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return (predicate.call(_this) && orgLookaheadFunction_2.call(_this));\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            var notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"PROD_TYPE\"].REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_IDX\"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterAtLeastOneWalker\"]);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_SEP_IDX\"], prodOccurrence);\n        var nestedName = this.nestedRuleBeforeClause(options, laKey);\n        try {\n            this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(laKey, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternalNoCst = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_SEP_IDX\"], prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            ;\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterAtLeastOneSepWalker\"]\n            ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_SEP_IDX\"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterAtLeastOneSepWalker\"]);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__[\"PROD_TYPE\"].REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    };\n    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_IDX\"], prodOccurrence);\n        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);\n        try {\n            return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(laKey, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.manyInternalNoCst = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_IDX\"], prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    };\n    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookaheadFunction = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_3 = lookaheadFunction;\n                lookaheadFunction = function () {\n                    return (predicate.call(_this) && orgLookaheadFunction_3.call(_this));\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        var notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_IDX\"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterManyWalker\"], \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    };\n    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_SEP_IDX\"], prodOccurrence);\n        var nestedName = this.nestedRuleBeforeClause(options, laKey);\n        try {\n            this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(laKey, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.manySepFirstInternalNoCst = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_SEP_IDX\"], prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterManySepWalker\"]\n            ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"MANY_SEP_IDX\"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__[\"NextTerminalAfterManySepWalker\"]);\n        }\n    };\n    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker\n        ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"AT_LEAST_ONE_SEP_IDX\"], prodOccurrence, nextTerminalAfterWalker);\n    };\n    RecognizerEngine.prototype.doSingleRepetition = function (action) {\n        var beforeIteration = this.getLexerPosition();\n        action.call(this);\n        var afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    };\n    RecognizerEngine.prototype.orInternalNoCst = function (altsOrOpts, occurrence) {\n        var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(altsOrOpts)\n            ? altsOrOpts\n            : altsOrOpts.DEF;\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OR_IDX\"], occurrence);\n        var laFunc = this.getLaFuncFromCache(laKey);\n        var altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            var chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    };\n    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OR_IDX\"], occurrence);\n        var nestedName = this.nestedRuleBeforeClause(altsOrOpts, laKey);\n        try {\n            var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(altsOrOpts)\n                ? altsOrOpts\n                : altsOrOpts.DEF;\n            var laFunc = this.getLaFuncFromCache(laKey);\n            var altIdxToTake = laFunc.call(this, alts);\n            if (altIdxToTake !== undefined) {\n                var chosenAlternative = alts[altIdxToTake];\n                var nestedAltBeforeClauseResult = this.nestedAltBeforeClause(chosenAlternative, occurrence, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__[\"OR_IDX\"], altIdxToTake);\n                try {\n                    return chosenAlternative.ALT.call(this);\n                }\n                finally {\n                    if (nestedAltBeforeClauseResult !== undefined) {\n                        this.nestedRuleFinallyClause(nestedAltBeforeClauseResult.shortName, nestedAltBeforeClauseResult.nestedName);\n                    }\n                }\n            }\n            this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n        }\n        finally {\n            if (nestedName !== undefined) {\n                this.nestedRuleFinallyClause(laKey, nestedName);\n            }\n        }\n    };\n    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            var firstRedundantTok = this.LA(1);\n            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName()\n            });\n            this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__[\"NotAllInputParsedException\"](errMsg, firstRedundantTok));\n        }\n    };\n    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n        var ruleResult;\n        try {\n            var args = options !== undefined ? options.ARGS : undefined;\n            ruleResult = ruleToCall.call(this, idx, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    };\n    RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_2__[\"isRecognitionException\"])(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    };\n    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n        var consumedToken;\n        try {\n            var nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    };\n    RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n        var msg;\n        var previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName()\n            });\n        }\n        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__[\"MismatchedTokenException\"](msg, nextToken, previousToken));\n    };\n    RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === _recoverable__WEBPACK_IMPORTED_MODULE_6__[\"IN_RULE_RECOVERY_EXCEPTION\"]) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    };\n    RecognizerEngine.prototype.saveRecogState = function () {\n        // errors is a getter which will clone the errors array\n        var savedErrors = this.errors;\n        var savedRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneArr\"])(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK,\n            LAST_EXPLICIT_RULE_STACK: this.LAST_EXPLICIT_RULE_STACK\n        };\n    };\n    RecognizerEngine.prototype.reloadRecogState = function (newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    };\n    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName, shortName);\n    };\n    RecognizerEngine.prototype.isBackTracking = function () {\n        return this.isBackTrackingStack.length !== 0;\n    };\n    RecognizerEngine.prototype.getCurrRuleFullName = function () {\n        var shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.isAtEndOfInput = function () {\n        return this.tokenMatcher(this.LA(1), _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__[\"EOF\"]);\n    };\n    RecognizerEngine.prototype.reset = function () {\n        this.resetLexerState();\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        this.LAST_EXPLICIT_RULE_STACK = [];\n        // TODO: extract a specific rest for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    };\n    return RecognizerEngine;\n}());\n\n//# sourceMappingURL=recognizer_engine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_engine.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js":
/*!********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js ***!
  \********************************************************************************/
/*! exports provided: EOF_FOLLOW_KEY, IN_RULE_RECOVERY_EXCEPTION, InRuleRecoveryException, Recoverable, attemptInRepetitionRecovery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EOF_FOLLOW_KEY\", function() { return EOF_FOLLOW_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IN_RULE_RECOVERY_EXCEPTION\", function() { return IN_RULE_RECOVERY_EXCEPTION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InRuleRecoveryException\", function() { return InRuleRecoveryException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Recoverable\", function() { return Recoverable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"attemptInRepetitionRecovery\", function() { return attemptInRepetitionRecovery; });\n/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scan/tokens_public */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../exceptions_public */ \"./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants */ \"./node_modules/chevrotain/lib_esm/src/parse/constants.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n\n\n\n\n\nvar EOF_FOLLOW_KEY = {};\nvar IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nfunction InRuleRecoveryException(message) {\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n    this.message = message;\n}\nInRuleRecoveryException.prototype = Error.prototype;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nvar Recoverable = /** @class */ (function () {\n    function Recoverable() {\n    }\n    Recoverable.prototype.initRecoverable = function (config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"has\"])(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled\n            : _parser__WEBPACK_IMPORTED_MODULE_4__[\"DEFAULT_PARSER_CONFIG\"].recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    };\n    Recoverable.prototype.getTokenToInsert = function (tokType) {\n        var tokToInsert = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"createTokenInstance\"])(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    };\n    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n        return true;\n    };\n    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        var _this = this;\n        // TODO: can the resyncTokenType be cached?\n        var reSyncTokType = this.findReSyncTokenType();\n        var savedLexerState = this.exportLexerState();\n        var resyncedTokens = [];\n        var passedResyncPoint = false;\n        var nextTokenWithoutResync = this.LA(1);\n        var currToken = this.LA(1);\n        var generateErrorMessage = function () {\n            var previousToken = _this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: _this.getCurrRuleFullName()\n            });\n            var error = new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__[\"MismatchedTokenException\"](msg, nextTokenWithoutResync, _this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropRight\"])(resyncedTokens);\n            _this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    };\n    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // arguments to try and perform resync into the next iteration of the many are missing\n        if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    };\n    // Error Recovery functionality\n    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        var follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    };\n    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            var tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            var nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    };\n    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n        var _this = this;\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(follows)) {\n            return false;\n        }\n        var mismatchedTok = this.LA(1);\n        var isMisMatchedTokInFollows = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"find\"])(follows, function (possibleFollowsTokType) {\n            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    };\n    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n        var followKey = this.getCurrFollowKey();\n        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"contains\"])(currentRuleReSyncSet, tokenTypeIdx);\n    };\n    Recoverable.prototype.findReSyncTokenType = function () {\n        var allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        var nextToken = this.LA(1);\n        var k = 2;\n        while (true) {\n            var nextTokenType = nextToken.tokenType;\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"contains\"])(allPossibleReSyncTokTypes, nextTokenType)) {\n                return nextTokenType;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    };\n    Recoverable.prototype.getCurrFollowKey = function () {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return EOF_FOLLOW_KEY;\n        }\n        var currRuleShortName = this.getLastExplicitRuleShortName();\n        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName)\n        };\n    };\n    Recoverable.prototype.buildFullFollowKeyStack = function () {\n        var _this = this;\n        var explicitRuleStack = this.RULE_STACK;\n        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(this.LAST_EXPLICIT_RULE_STACK)) {\n            explicitRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_STACK[idx]; });\n            explicitOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_OCCURRENCE_STACK[idx]; });\n        }\n        // TODO: only iterate over explicit rules here\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(explicitRuleStack, function (ruleName, idx) {\n            if (idx === 0) {\n                return EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: _this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n            };\n        });\n    };\n    Recoverable.prototype.flattenFollowSet = function () {\n        var _this = this;\n        var followStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.buildFullFollowKeyStack(), function (currKey) {\n            return _this.getFollowSetFromFollowKey(currKey);\n        });\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"flatten\"])(followStack);\n    };\n    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n        if (followKey === EOF_FOLLOW_KEY) {\n            return [_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"EOF\"]];\n        }\n        var followName = followKey.ruleName +\n            followKey.idxInCallingRule +\n            _constants__WEBPACK_IMPORTED_MODULE_3__[\"IN\"] +\n            followKey.inRule;\n        return this.resyncFollows[followName];\n    };\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n        if (!this.tokenMatcher(token, _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"EOF\"])) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    };\n    Recoverable.prototype.reSyncTo = function (tokType) {\n        var resyncedTokens = [];\n        var nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"dropRight\"])(resyncedTokens);\n    };\n    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    };\n    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n        var pathRuleStack = this.getHumanReadableRuleStack();\n        var pathOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(this.RULE_OCCURRENCE_STACK);\n        var grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule\n        };\n        return grammarPath;\n    };\n    Recoverable.prototype.getHumanReadableRuleStack = function () {\n        var _this = this;\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(this.LAST_EXPLICIT_RULE_STACK)) {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.LAST_EXPLICIT_RULE_STACK, function (currIdx) {\n                return _this.shortRuleNameToFullName(_this.RULE_STACK[currIdx]);\n            });\n        }\n        else {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.RULE_STACK, function (currShortName) {\n                return _this.shortRuleNameToFullName(currShortName);\n            });\n        }\n    };\n    return Recoverable;\n}());\n\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    var firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        var currRuleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[currRuleName];\n        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    var expectTokAfterLastMatch = firstAfterRepInfo.token;\n    var nextTokIdx = firstAfterRepInfo.occurrence;\n    var isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__[\"EOF\"];\n        nextTokIdx = 1;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\n//# sourceMappingURL=recoverable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/parse/parser/traits/tree_builder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/tree_builder.js ***!
  \*********************************************************************************/
/*! exports provided: TreeBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TreeBuilder\", function() { return TreeBuilder; });\n/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cst/cst */ \"./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../cst/cst_visitor */ \"./node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js\");\n/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../grammar/keys */ \"./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser */ \"./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js\");\n\n\n\n\n\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */ (function () {\n    function TreeBuilder() {\n    }\n    TreeBuilder.prototype.initTreeBuilder = function (config) {\n        this.LAST_EXPLICIT_RULE_STACK = [];\n        this.CST_STACK = [];\n        this.outputCst = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"has\"])(config, \"outputCst\")\n            ? config.outputCst\n            : _parser__WEBPACK_IMPORTED_MODULE_4__[\"DEFAULT_PARSER_CONFIG\"].outputCst;\n        this.nodeLocationTracking = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"has\"])(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking\n            : _parser__WEBPACK_IMPORTED_MODULE_4__[\"DEFAULT_PARSER_CONFIG\"].nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            this.cstFinallyStateUpdate = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            this.cstPostTerminal = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            this.cstPostNonTerminal = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            this.getLastExplicitRuleShortName = this.getLastExplicitRuleShortNameNoCst;\n            this.getPreviousExplicitRuleShortName = this.getPreviousExplicitRuleShortNameNoCst;\n            this.getLastExplicitRuleOccurrenceIndex = this.getLastExplicitRuleOccurrenceIndexNoCst;\n            this.manyInternal = this.manyInternalNoCst;\n            this.orInternal = this.orInternalNoCst;\n            this.optionInternal = this.optionInternalNoCst;\n            this.atLeastOneInternal = this.atLeastOneInternalNoCst;\n            this.manySepFirstInternal = this.manySepFirstInternalNoCst;\n            this.atLeastOneSepFirstInternal = this.atLeastOneSepFirstInternalNoCst;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = _cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"setNodeLocationFull\"];\n                    this.setNodeLocationFromNode = _cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"setNodeLocationFull\"];\n                    this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = (_cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"setNodeLocationOnlyOffset\"]);\n                    this.setNodeLocationFromNode = (_cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"setNodeLocationOnlyOffset\"]);\n                    this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                this.setInitialNodeLocation = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n            }\n            else {\n                throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\" + config.nodeLocationTracking + \"\\\"\");\n            }\n        }\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n        var nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    // CST\n    TreeBuilder.prototype.cstNestedInvocationStateUpdate = function (nestedName, shortName) {\n        var cstNode = {\n            name: nestedName,\n            fullName: this.shortRuleNameToFull[this.getLastExplicitRuleShortName()] +\n                nestedName,\n            children: {}\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    };\n    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {\n        this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);\n        var cstNode = {\n            name: fullRuleName,\n            children: {}\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    };\n    TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n        this.LAST_EXPLICIT_RULE_STACK.pop();\n        this.CST_STACK.pop();\n    };\n    TreeBuilder.prototype.cstNestedFinallyStateUpdate = function () {\n        var lastCstNode = this.CST_STACK.pop();\n        // TODO: the naming is bad, this should go directly to the\n        //       (correct) cstLocation update method\n        //       e.g if we put other logic in postRule...\n        this.cstPostRule(lastCstNode);\n    };\n    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode or its nested children.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode or its nested children.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"addTerminalToCst\"])(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    };\n    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n        // Avoid side effects due to back tracking\n        // TODO: This costs a 2-3% in performance, A flag on IParserConfig\n        //   could be used to get rid of this conditional, but not sure its worth the effort\n        //   and API complexity.\n        if (this.isBackTracking() !== true) {\n            var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n            Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"addNoneTerminalToCst\"])(preCstNode, ruleName, ruleCstResult);\n            // This is only used when **both** error recovery and CST Output are enabled.\n            this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n        }\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isUndefined\"])(this.baseCstVisitorConstructor)) {\n            var newBaseCstVisitorConstructor = Object(_cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__[\"createBaseSemanticVisitorConstructor\"])(this.className, this.allRuleNames);\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isUndefined\"])(this.baseCstVisitorWithDefaultsConstructor)) {\n            var newConstructor = Object(_cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__[\"createBaseVisitorConstructorWithDefaults\"])(this.className, this.allRuleNames, this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    };\n    TreeBuilder.prototype.nestedRuleBeforeClause = function (methodOpts, laKey) {\n        var nestedName;\n        if (methodOpts.NAME !== undefined) {\n            nestedName = methodOpts.NAME;\n            this.nestedRuleInvocationStateUpdate(nestedName, laKey);\n            return nestedName;\n        }\n        else {\n            return undefined;\n        }\n    };\n    TreeBuilder.prototype.nestedAltBeforeClause = function (methodOpts, occurrence, methodKeyIdx, altIdx) {\n        var ruleIdx = this.getLastExplicitRuleShortName();\n        var shortName = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__[\"getKeyForAltIndex\"])(ruleIdx, methodKeyIdx, occurrence, altIdx);\n        var nestedName;\n        if (methodOpts.NAME !== undefined) {\n            nestedName = methodOpts.NAME;\n            this.nestedRuleInvocationStateUpdate(nestedName, shortName);\n            return {\n                shortName: shortName,\n                nestedName: nestedName\n            };\n        }\n        else {\n            return undefined;\n        }\n    };\n    TreeBuilder.prototype.nestedRuleFinallyClause = function (laKey, nestedName) {\n        var cstStack = this.CST_STACK;\n        var nestedRuleCst = cstStack[cstStack.length - 1];\n        this.nestedRuleFinallyStateUpdate();\n        // this return a different result than the previous invocation because \"nestedRuleFinallyStateUpdate\" pops the cst stack\n        var parentCstNode = cstStack[cstStack.length - 1];\n        Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__[\"addNoneTerminalToCst\"])(parentCstNode, nestedName, nestedRuleCst);\n        this.setNodeLocationFromNode(parentCstNode.location, nestedRuleCst.location);\n    };\n    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n        var lastExplictIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];\n        return this.RULE_STACK[lastExplictIndex];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleShortNameNoCst = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    };\n    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 2];\n        return this.RULE_STACK[lastExplicitIndex];\n    };\n    TreeBuilder.prototype.getPreviousExplicitRuleShortNameNoCst = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];\n        return this.RULE_OCCURRENCE_STACK[lastExplicitIndex];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndexNoCst = function () {\n        var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    };\n    TreeBuilder.prototype.nestedRuleInvocationStateUpdate = function (nestedRuleName, shortNameKey) {\n        this.RULE_OCCURRENCE_STACK.push(1);\n        this.RULE_STACK.push(shortNameKey);\n        this.cstNestedInvocationStateUpdate(nestedRuleName, shortNameKey);\n    };\n    TreeBuilder.prototype.nestedRuleFinallyStateUpdate = function () {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstNestedFinallyStateUpdate();\n    };\n    return TreeBuilder;\n}());\n\n//# sourceMappingURL=tree_builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/parse/parser/traits/tree_builder.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/lexer.js":
/*!***********************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/lexer.js ***!
  \***********************************************************/
/*! exports provided: DEFAULT_MODE, MODES, SUPPORT_STICKY, disableSticky, enableSticky, analyzeTokenTypes, validatePatterns, findMissingPatterns, findInvalidPatterns, findEndOfInputAnchor, findEmptyMatchRegExps, findStartOfInputAnchor, findUnsupportedFlags, findDuplicatePatterns, findInvalidGroupType, findModesThatDoNotExist, findUnreachablePatterns, addStartOfInput, addStickyFlag, performRuntimeChecks, performWarningRuntimeChecks, cloneEmptyGroups, isCustomPattern, isShortPattern, LineTerminatorOptimizedTester, buildLineBreakIssueMessage, minOptimizationVal, charCodeToOptimizedIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_MODE\", function() { return DEFAULT_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MODES\", function() { return MODES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SUPPORT_STICKY\", function() { return SUPPORT_STICKY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"disableSticky\", function() { return disableSticky; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableSticky\", function() { return enableSticky; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"analyzeTokenTypes\", function() { return analyzeTokenTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validatePatterns\", function() { return validatePatterns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findMissingPatterns\", function() { return findMissingPatterns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findInvalidPatterns\", function() { return findInvalidPatterns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findEndOfInputAnchor\", function() { return findEndOfInputAnchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findEmptyMatchRegExps\", function() { return findEmptyMatchRegExps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findStartOfInputAnchor\", function() { return findStartOfInputAnchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findUnsupportedFlags\", function() { return findUnsupportedFlags; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findDuplicatePatterns\", function() { return findDuplicatePatterns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findInvalidGroupType\", function() { return findInvalidGroupType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findModesThatDoNotExist\", function() { return findModesThatDoNotExist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findUnreachablePatterns\", function() { return findUnreachablePatterns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addStartOfInput\", function() { return addStartOfInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addStickyFlag\", function() { return addStickyFlag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"performRuntimeChecks\", function() { return performRuntimeChecks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"performWarningRuntimeChecks\", function() { return performWarningRuntimeChecks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneEmptyGroups\", function() { return cloneEmptyGroups; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isCustomPattern\", function() { return isCustomPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isShortPattern\", function() { return isShortPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineTerminatorOptimizedTester\", function() { return LineTerminatorOptimizedTester; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildLineBreakIssueMessage\", function() { return buildLineBreakIssueMessage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"minOptimizationVal\", function() { return minOptimizationVal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"charCodeToOptimizedIndex\", function() { return charCodeToOptimizedIndex; });\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regexp-to-ast */ \"./node_modules/regexp-to-ast/lib/regexp-to-ast.js\");\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lexer_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lexer_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _reg_exp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reg_exp */ \"./node_modules/chevrotain/lib_esm/src/scan/reg_exp.js\");\n/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser */ \"./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar PATTERN = \"PATTERN\";\nvar DEFAULT_MODE = \"defaultMode\";\nvar MODES = \"modes\";\nvar SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\nfunction disableSticky() {\n    SUPPORT_STICKY = false;\n}\nfunction enableSticky() {\n    SUPPORT_STICKY = true;\n}\nfunction analyzeTokenTypes(tokenTypes, options) {\n    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"defaults\"])(options, {\n        useSticky: SUPPORT_STICKY,\n        debug: false,\n        safeMode: false,\n        positionTracking: \"full\",\n        lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n        tracer: function (msg, action) { return action(); }\n    });\n    var tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", function () {\n        initCharCodeToOptimizedIndexMap();\n    });\n    var onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", function () {\n        onlyRelevantTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reject\"])(tokenTypes, function (currType) {\n            return currType[PATTERN] === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA;\n        });\n    });\n    var hasCustom = false;\n    var allTransformedPatterns;\n    tracer(\"Transform Patterns\", function () {\n        hasCustom = false;\n        allTransformedPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (currType) {\n            var currPattern = currType[PATTERN];\n            /* istanbul ignore else */\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(currPattern)) {\n                var regExpSource = currPattern.source;\n                if (regExpSource.length === 1 &&\n                    // only these regExp meta characters which can appear in a length one regExp\n                    regExpSource !== \"^\" &&\n                    regExpSource !== \"$\" &&\n                    regExpSource !== \".\") {\n                    return regExpSource;\n                }\n                else if (regExpSource.length === 2 &&\n                    regExpSource[0] === \"\\\\\" &&\n                    // not a meta character\n                    !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"contains\"])([\n                        \"d\",\n                        \"D\",\n                        \"s\",\n                        \"S\",\n                        \"t\",\n                        \"r\",\n                        \"n\",\n                        \"t\",\n                        \"0\",\n                        \"c\",\n                        \"b\",\n                        \"B\",\n                        \"f\",\n                        \"v\",\n                        \"w\",\n                        \"W\"\n                    ], regExpSource[1])) {\n                    // escaped meta Characters: /\\+/ /\\[/\n                    // or redundant escaping: /\\a/\n                    // without the escaping \"\\\"\n                    return regExpSource[1];\n                }\n                else {\n                    return options.useSticky\n                        ? addStickyFlag(currPattern)\n                        : addStartOfInput(currPattern);\n                }\n            }\n            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isFunction\"])(currPattern)) {\n                hasCustom = true;\n                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n                return { exec: currPattern };\n            }\n            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(currPattern, \"exec\")) {\n                hasCustom = true;\n                // ICustomPattern\n                return currPattern;\n            }\n            else if (typeof currPattern === \"string\") {\n                if (currPattern.length === 1) {\n                    return currPattern;\n                }\n                else {\n                    var escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n                    var wrappedRegExp = new RegExp(escapedRegExpString);\n                    return options.useSticky\n                        ? addStickyFlag(wrappedRegExp)\n                        : addStartOfInput(wrappedRegExp);\n                }\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n    });\n    var patternIdxToType;\n    var patternIdxToGroup;\n    var patternIdxToLongerAltIdx;\n    var patternIdxToPushMode;\n    var patternIdxToPopMode;\n    tracer(\"misc mapping\", function () {\n        patternIdxToType = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (currType) { return currType.tokenTypeIdx; });\n        patternIdxToGroup = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (clazz) {\n            var groupName = clazz.GROUP;\n            /* istanbul ignore next */\n            if (groupName === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].SKIPPED) {\n                return undefined;\n            }\n            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(groupName)) {\n                return groupName;\n            }\n            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isUndefined\"])(groupName)) {\n                return false;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        });\n        patternIdxToLongerAltIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (clazz) {\n            var longerAltType = clazz.LONGER_ALT;\n            if (longerAltType) {\n                var longerAltIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"indexOf\"])(onlyRelevantTypes, longerAltType);\n                return longerAltIdx;\n            }\n        });\n        patternIdxToPushMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (clazz) { return clazz.PUSH_MODE; });\n        patternIdxToPopMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (clazz) {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(clazz, \"POP_MODE\");\n        });\n    });\n    var patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", function () {\n        var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n        patternIdxToCanLineTerminator = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (tokType) { return false; });\n        if (options.positionTracking !== \"onlyOffset\") {\n            patternIdxToCanLineTerminator = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, function (tokType) {\n                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(tokType, \"LINE_BREAKS\")) {\n                    return tokType.LINE_BREAKS;\n                }\n                else {\n                    if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false) {\n                        return Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"canMatchCharCode\"])(lineTerminatorCharCodes, tokType.PATTERN);\n                    }\n                }\n            });\n        }\n    });\n    var patternIdxToIsCustom;\n    var patternIdxToShort;\n    var emptyGroups;\n    var patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", function () {\n        patternIdxToIsCustom = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(onlyRelevantTypes, isCustomPattern);\n        patternIdxToShort = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(allTransformedPatterns, isShortPattern);\n        emptyGroups = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reduce\"])(onlyRelevantTypes, function (acc, clazz) {\n            var groupName = clazz.GROUP;\n            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(groupName) && !(groupName === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].SKIPPED)) {\n                acc[groupName] = [];\n            }\n            return acc;\n        }, {});\n        patternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(allTransformedPatterns, function (x, idx) {\n            return {\n                pattern: allTransformedPatterns[idx],\n                longerAlt: patternIdxToLongerAltIdx[idx],\n                canLineTerminator: patternIdxToCanLineTerminator[idx],\n                isCustom: patternIdxToIsCustom[idx],\n                short: patternIdxToShort[idx],\n                group: patternIdxToGroup[idx],\n                push: patternIdxToPushMode[idx],\n                pop: patternIdxToPopMode[idx],\n                tokenTypeIdx: patternIdxToType[idx],\n                tokenType: onlyRelevantTypes[idx]\n            };\n        });\n    });\n    var canBeOptimized = true;\n    var charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n        tracer(\"First Char Optimization\", function () {\n            charCodeToPatternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reduce\"])(onlyRelevantTypes, function (result, currTokType, idx) {\n                if (typeof currTokType.PATTERN === \"string\") {\n                    var charCode = currTokType.PATTERN.charCodeAt(0);\n                    var optimizedIdx = charCodeToOptimizedIndex(charCode);\n                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n                }\n                else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isArray\"])(currTokType.START_CHARS_HINT)) {\n                    var lastOptimizedIdx_1;\n                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(currTokType.START_CHARS_HINT, function (charOrInt) {\n                        var charCode = typeof charOrInt === \"string\"\n                            ? charOrInt.charCodeAt(0)\n                            : charOrInt;\n                        var currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n                        // Avoid adding the config multiple times\n                        if (lastOptimizedIdx_1 !== currOptimizedIdx) {\n                            lastOptimizedIdx_1 = currOptimizedIdx;\n                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n                        }\n                    });\n                }\n                else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(currTokType.PATTERN)) {\n                    if (currTokType.PATTERN.unicode) {\n                        canBeOptimized = false;\n                        if (options.ensureOptimizations) {\n                            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"PRINT_ERROR\"])(\"\" + _reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"failedOptimizationPrefixMsg\"] +\n                                (\"\\tUnable to analyze < \" + currTokType.PATTERN.toString() + \" > pattern.\\n\") +\n                                \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                                \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                                \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n                        }\n                    }\n                    else {\n                        var optimizedCodes = Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"getOptimizedStartCodesIndices\"])(currTokType.PATTERN, options.ensureOptimizations);\n                        /* istanbul ignore if */\n                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                        // the first should be a different validation and the second cannot be tested.\n                        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isEmpty\"])(optimizedCodes)) {\n                            // we cannot understand what codes may start possible matches\n                            // The optimization correctness requires knowing start codes for ALL patterns.\n                            // Not actually sure this is an error, no debug message\n                            canBeOptimized = false;\n                        }\n                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(optimizedCodes, function (code) {\n                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n                        });\n                    }\n                }\n                else {\n                    if (options.ensureOptimizations) {\n                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"PRINT_ERROR\"])(\"\" + _reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"failedOptimizationPrefixMsg\"] +\n                            (\"\\tTokenType: <\" + currTokType.name + \"> is using a custom token pattern without providing <start_chars_hint> parameter.\\n\") +\n                            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                            \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n                    }\n                    canBeOptimized = false;\n                }\n                return result;\n            }, []);\n        });\n    }\n    tracer(\"ArrayPacking\", function () {\n        charCodeToPatternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"packArray\"])(charCodeToPatternIdxToConfig);\n    });\n    return {\n        emptyGroups: emptyGroups,\n        patternIdxToConfig: patternIdxToConfig,\n        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n        hasCustom: hasCustom,\n        canBeOptimized: canBeOptimized\n    };\n}\nfunction validatePatterns(tokenTypes, validModesNames) {\n    var errors = [];\n    var missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    var invalidResult = findInvalidPatterns(missingResult.valid);\n    var validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n}\nfunction validateRegExpPattern(tokenTypes) {\n    var errors = [];\n    var withRegExpPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currTokType) {\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(currTokType[PATTERN]);\n    });\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n}\nfunction findMissingPatterns(tokenTypes) {\n    var tokenTypesWithMissingPattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        return !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(currType, PATTERN);\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(tokenTypesWithMissingPattern, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- missing static 'PATTERN' property\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].MISSING_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    var valid = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"difference\"])(tokenTypes, tokenTypesWithMissingPattern);\n    return { errors: errors, valid: valid };\n}\nfunction findInvalidPatterns(tokenTypes) {\n    var tokenTypesWithInvalidPattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(pattern) &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isFunction\"])(pattern) &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(pattern, \"exec\") &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(pattern));\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(tokenTypesWithInvalidPattern, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' can only be a RegExp, a\" +\n                \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].INVALID_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    var valid = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"difference\"])(tokenTypes, tokenTypesWithInvalidPattern);\n    return { errors: errors, valid: valid };\n}\nvar end_of_input = /[^\\\\][\\$]/;\nfunction findEndOfInputAnchor(tokenTypes) {\n    var EndAnchorFinder = /** @class */ (function (_super) {\n        __extends(EndAnchorFinder, _super);\n        function EndAnchorFinder() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.found = false;\n            return _this;\n        }\n        EndAnchorFinder.prototype.visitEndAnchor = function (node) {\n            this.found = true;\n        };\n        return EndAnchorFinder;\n    }(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__[\"BaseRegExpVisitor\"]));\n    var invalidRegex = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        try {\n            var regexpAst = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__[\"getRegExpAst\"])(pattern);\n            var endAnchorVisitor = new EndAnchorFinder();\n            endAnchorVisitor.visit(regexpAst);\n            return endAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return end_of_input.test(pattern.source);\n        }\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(invalidRegex, function (currType) {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n                \"\\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].EOI_ANCHOR_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nfunction findEmptyMatchRegExps(tokenTypes) {\n    var matchesEmptyString = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return pattern.test(\"\");\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(matchesEmptyString, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' must not match an empty string\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].EMPTY_MATCH_PATTERN,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nvar start_of_input = /[^\\\\[][\\^]|^\\^/;\nfunction findStartOfInputAnchor(tokenTypes) {\n    var StartAnchorFinder = /** @class */ (function (_super) {\n        __extends(StartAnchorFinder, _super);\n        function StartAnchorFinder() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.found = false;\n            return _this;\n        }\n        StartAnchorFinder.prototype.visitStartAnchor = function (node) {\n            this.found = true;\n        };\n        return StartAnchorFinder;\n    }(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__[\"BaseRegExpVisitor\"]));\n    var invalidRegex = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        try {\n            var regexpAst = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__[\"getRegExpAst\"])(pattern);\n            var startAnchorVisitor = new StartAnchorFinder();\n            startAnchorVisitor.visit(regexpAst);\n            return startAnchorVisitor.found;\n        }\n        catch (e) {\n            // old behavior in case of runtime exceptions with regexp-to-ast.\n            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n            return start_of_input.test(pattern.source);\n        }\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(invalidRegex, function (currType) {\n        return {\n            message: \"Unexpected RegExp Anchor Error:\\n\" +\n                \"\\tToken Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n                \"\\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n                \"\\tfor details.\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].SOI_ANCHOR_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nfunction findUnsupportedFlags(tokenTypes) {\n    var invalidFlags = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (currType) {\n        var pattern = currType[PATTERN];\n        return (pattern instanceof RegExp && (pattern.multiline || pattern.global));\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(invalidFlags, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].UNSUPPORTED_FLAGS_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nfunction findDuplicatePatterns(tokenTypes) {\n    var found = [];\n    var identicalPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(tokenTypes, function (outerType) {\n        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reduce\"])(tokenTypes, function (result, innerType) {\n            if (outerType.PATTERN.source === innerType.PATTERN.source &&\n                !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"contains\"])(found, innerType) &&\n                innerType.PATTERN !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA) {\n                // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n                // in essence we are creating Equivalence classes on equality relation.\n                found.push(innerType);\n                result.push(innerType);\n                return result;\n            }\n            return result;\n        }, []);\n    });\n    identicalPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"compact\"])(identicalPatterns);\n    var duplicatePatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(identicalPatterns, function (currIdenticalSet) {\n        return currIdenticalSet.length > 1;\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(duplicatePatterns, function (setOfIdentical) {\n        var tokenTypeNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(setOfIdentical, function (currType) {\n            return currType.name;\n        });\n        var dupPatternSrc = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"first\"])(setOfIdentical).PATTERN;\n        return {\n            message: \"The same RegExp pattern ->\" + dupPatternSrc + \"<-\" +\n                (\"has been used in all of the following Token Types: \" + tokenTypeNames.join(\", \") + \" <-\"),\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].DUPLICATE_PATTERNS_FOUND,\n            tokenTypes: setOfIdentical\n        };\n    });\n    return errors;\n}\nfunction findInvalidGroupType(tokenTypes) {\n    var invalidTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (clazz) {\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(clazz, \"GROUP\")) {\n            return false;\n        }\n        var group = clazz.GROUP;\n        return group !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].SKIPPED && group !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA && !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(group);\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(invalidTypes, function (currType) {\n        return {\n            message: \"Token Type: ->\" +\n                currType.name +\n                \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].INVALID_GROUP_TYPE_FOUND,\n            tokenTypes: [currType]\n        };\n    });\n    return errors;\n}\nfunction findModesThatDoNotExist(tokenTypes, validModes) {\n    var invalidModes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"filter\"])(tokenTypes, function (clazz) {\n        return (clazz.PUSH_MODE !== undefined &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"contains\"])(validModes, clazz.PUSH_MODE));\n    });\n    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(invalidModes, function (tokType) {\n        var msg = \"Token Type: ->\" + tokType.name + \"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->\" + tokType.PUSH_MODE + \"<-\" +\n            \"which does not exist\";\n        return {\n            message: msg,\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].PUSH_MODE_DOES_NOT_EXIST,\n            tokenTypes: [tokType]\n        };\n    });\n    return errors;\n}\nfunction findUnreachablePatterns(tokenTypes) {\n    var errors = [];\n    var canBeTested = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reduce\"])(tokenTypes, function (result, tokType, idx) {\n        var pattern = tokType.PATTERN;\n        if (pattern === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA) {\n            return result;\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(pattern)) {\n            result.push({ str: pattern, idx: idx, tokenType: tokType });\n        }\n        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(pattern) && noMetaChar(pattern)) {\n            result.push({ str: pattern.source, idx: idx, tokenType: tokType });\n        }\n        return result;\n    }, []);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(tokenTypes, function (tokType, testIdx) {\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(canBeTested, function (_a) {\n            var str = _a.str, idx = _a.idx, tokenType = _a.tokenType;\n            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n                var msg = \"Token: ->\" + tokenType.name + \"<- can never be matched.\\n\" +\n                    (\"Because it appears AFTER the Token Type ->\" + tokType.name + \"<-\") +\n                    \"in the lexer's definition.\\n\" +\n                    \"See https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE\";\n                errors.push({\n                    message: msg,\n                    type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].UNREACHABLE_PATTERN,\n                    tokenTypes: [tokType, tokenType]\n                });\n            }\n        });\n    });\n    return errors;\n}\nfunction testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(pattern)) {\n        var regExpArray = pattern.exec(str);\n        return regExpArray !== null && regExpArray.index === 0;\n    }\n    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isFunction\"])(pattern)) {\n        // maintain the API of custom patterns\n        return pattern(str, 0, [], {});\n    }\n    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(pattern, \"exec\")) {\n        // maintain the API of custom patterns\n        return pattern.exec(str, 0, [], {});\n    }\n    else if (typeof pattern === \"string\") {\n        return pattern === str;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    var metaChars = [\n        \".\",\n        \"\\\\\",\n        \"[\",\n        \"]\",\n        \"|\",\n        \"^\",\n        \"$\",\n        \"(\",\n        \")\",\n        \"?\",\n        \"*\",\n        \"+\",\n        \"{\"\n    ];\n    return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"find\"])(metaChars, function (char) { return regExp.source.indexOf(char) !== -1; }) ===\n        undefined);\n}\nfunction addStartOfInput(pattern) {\n    var flags = pattern.ignoreCase ? \"i\" : \"\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(\"^(?:\" + pattern.source + \")\", flags);\n}\nfunction addStickyFlag(pattern) {\n    var flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(\"\" + pattern.source, flags);\n}\nfunction performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    var errors = [];\n    // some run time checks to help the end users.\n    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition, DEFAULT_MODE)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                DEFAULT_MODE +\n                \"> property in its definition\\n\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n        });\n    }\n    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition, MODES)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized without a <\" +\n                MODES +\n                \"> property in its definition\\n\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n        });\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition, MODES) &&\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition, DEFAULT_MODE) &&\n        !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n        errors.push({\n            message: \"A MultiMode Lexer cannot be initialized with a \" + DEFAULT_MODE + \": <\" + lexerDefinition.defaultMode + \">\" +\n                \"which does not exist\\n\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n        });\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(lexerDefinition, MODES)) {\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(lexerDefinition.modes, function (currModeValue, currModeName) {\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(currModeValue, function (currTokType, currIdx) {\n                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isUndefined\"])(currTokType)) {\n                    errors.push({\n                        message: \"A Lexer cannot be initialized using an undefined Token Type. Mode:\" +\n                            (\"<\" + currModeName + \"> at index: <\" + currIdx + \">\\n\"),\n                        type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n                    });\n                }\n            });\n        });\n    }\n    return errors;\n}\nfunction performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    var warnings = [];\n    var hasAnyLineBreak = false;\n    var allTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"compact\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"flatten\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"mapValues\"])(lexerDefinition.modes, function (tokTypes) { return tokTypes; })));\n    var concreteTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"reject\"])(allTokenTypes, function (currType) { return currType[PATTERN] === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA; });\n    var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(concreteTokenTypes, function (tokType) {\n            var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n            if (currIssue !== false) {\n                var message = buildLineBreakIssueMessage(tokType, currIssue);\n                var warningDescriptor = {\n                    message: message,\n                    type: currIssue.issue,\n                    tokenType: tokType\n                };\n                warnings.push(warningDescriptor);\n            }\n            else {\n                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(tokType, \"LINE_BREAKS\")) {\n                    if (tokType.LINE_BREAKS === true) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n                else {\n                    if (Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"canMatchCharCode\"])(terminatorCharCodes, tokType.PATTERN)) {\n                        hasAnyLineBreak = true;\n                    }\n                }\n            }\n        });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n        warnings.push({\n            message: \"Warning: No LINE_BREAKS Found.\\n\" +\n                \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n                \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n                \"\\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n                \"\\tfor details.\",\n            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].NO_LINE_BREAKS_FLAGS\n        });\n    }\n    return warnings;\n}\nfunction cloneEmptyGroups(emptyGroups) {\n    var clonedResult = {};\n    var groupKeys = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"keys\"])(emptyGroups);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"forEach\"])(groupKeys, function (currKey) {\n        var currGroupValue = emptyGroups[currKey];\n        /* istanbul ignore else */\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isArray\"])(currGroupValue)) {\n            clonedResult[currKey] = [];\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    });\n    return clonedResult;\n}\n// TODO: refactor to avoid duplication\nfunction isCustomPattern(tokenType) {\n    var pattern = tokenType.PATTERN;\n    /* istanbul ignore else */\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(pattern)) {\n        return false;\n    }\n    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isFunction\"])(pattern)) {\n        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n        return true;\n    }\n    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(pattern, \"exec\")) {\n        // ICustomPattern\n        return true;\n    }\n    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(pattern)) {\n        return false;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction isShortPattern(pattern) {\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(pattern) && pattern.length === 1) {\n        return pattern.charCodeAt(0);\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nvar LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n        var len = text.length;\n        for (var i = this.lastIndex; i < len; i++) {\n            var c = text.charCodeAt(i);\n            if (c === 10) {\n                this.lastIndex = i + 1;\n                return true;\n            }\n            else if (c === 13) {\n                if (text.charCodeAt(i + 1) === 10) {\n                    this.lastIndex = i + 2;\n                }\n                else {\n                    this.lastIndex = i + 1;\n                }\n                return true;\n            }\n        }\n        return false;\n    },\n    lastIndex: 0\n};\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"has\"])(tokType, \"LINE_BREAKS\")) {\n        // if the user explicitly declared the line_breaks option we will respect their choice\n        // and assume it is correct.\n        return false;\n    }\n    else {\n        /* istanbul ignore else */\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isRegExp\"])(tokType.PATTERN)) {\n            try {\n                Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__[\"canMatchCharCode\"])(lineTerminatorCharCodes, tokType.PATTERN);\n            }\n            catch (e) {\n                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n                return {\n                    issue: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].IDENTIFY_TERMINATOR,\n                    errMsg: e.message\n                };\n            }\n            return false;\n        }\n        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(tokType.PATTERN)) {\n            // string literal patterns can always be analyzed to detect line terminator usage\n            return false;\n        }\n        else if (isCustomPattern(tokType)) {\n            // custom token types\n            return { issue: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].CUSTOM_LINE_BREAK };\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n}\nfunction buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].IDENTIFY_TERMINATOR) {\n        return (\"Warning: unable to identify line terminator usage in pattern.\\n\" +\n            (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") +\n            (\"\\t Root cause: \" + details.errMsg + \".\\n\") +\n            \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    }\n    else if (details.issue === _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"LexerDefinitionErrorType\"].CUSTOM_LINE_BREAK) {\n        return (\"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n            (\"\\tThe problem is in the <\" + tokType.name + \"> Token Type\\n\") +\n            \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction getCharCodes(charsOrCodes) {\n    var charCodes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"map\"])(charsOrCodes, function (numOrString) {\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isString\"])(numOrString) && numOrString.length > 0) {\n            return numOrString.charCodeAt(0);\n        }\n        else {\n            return numOrString;\n        }\n    });\n    return charCodes;\n}\nfunction addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n        map[key] = [value];\n    }\n    else {\n        map[key].push(value);\n    }\n}\nvar minOptimizationVal = 256;\n/**\n * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nfunction charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal\n        ? charCode\n        : charCodeToOptimizedIdxMap[charCode];\n}\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nvar charCodeToOptimizedIdxMap = [];\nfunction initCharCodeToOptimizedIndexMap() {\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__[\"isEmpty\"])(charCodeToOptimizedIdxMap)) {\n        charCodeToOptimizedIdxMap = new Array(65536);\n        for (var i = 0; i < 65536; i++) {\n            /* tslint:disable */\n            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n            /* tslint:enable */\n        }\n    }\n}\n//# sourceMappingURL=lexer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/lexer.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js":
/*!*************************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js ***!
  \*************************************************************************/
/*! exports provided: defaultLexerErrorProvider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultLexerErrorProvider\", function() { return defaultLexerErrorProvider; });\nvar defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage: function (token) {\n        return \"Unable to pop Lexer Mode after encountering Token ->\" + token.image + \"<- The Mode Stack is empty\";\n    },\n    buildUnexpectedCharactersMessage: function (fullText, startOffset, length, line, column) {\n        return (\"unexpected character: ->\" + fullText.charAt(startOffset) + \"<- at offset: \" + startOffset + \",\" + (\" skipped \" + length + \" characters.\"));\n    }\n};\n//# sourceMappingURL=lexer_errors_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL2xleGVyX2Vycm9yc19wdWJsaWMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL2xleGVyX2Vycm9yc19wdWJsaWMuanM/ZjFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGRlZmF1bHRMZXhlckVycm9yUHJvdmlkZXIgPSB7XG4gICAgYnVpbGRVbmFibGVUb1BvcExleGVyTW9kZU1lc3NhZ2U6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICByZXR1cm4gXCJVbmFibGUgdG8gcG9wIExleGVyIE1vZGUgYWZ0ZXIgZW5jb3VudGVyaW5nIFRva2VuIC0+XCIgKyB0b2tlbi5pbWFnZSArIFwiPC0gVGhlIE1vZGUgU3RhY2sgaXMgZW1wdHlcIjtcbiAgICB9LFxuICAgIGJ1aWxkVW5leHBlY3RlZENoYXJhY3RlcnNNZXNzYWdlOiBmdW5jdGlvbiAoZnVsbFRleHQsIHN0YXJ0T2Zmc2V0LCBsZW5ndGgsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICByZXR1cm4gKFwidW5leHBlY3RlZCBjaGFyYWN0ZXI6IC0+XCIgKyBmdWxsVGV4dC5jaGFyQXQoc3RhcnRPZmZzZXQpICsgXCI8LSBhdCBvZmZzZXQ6IFwiICsgc3RhcnRPZmZzZXQgKyBcIixcIiArIChcIiBza2lwcGVkIFwiICsgbGVuZ3RoICsgXCIgY2hhcmFjdGVycy5cIikpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZXhlcl9lcnJvcnNfcHVibGljLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js":
/*!******************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js ***!
  \******************************************************************/
/*! exports provided: LexerDefinitionErrorType, Lexer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LexerDefinitionErrorType\", function() { return LexerDefinitionErrorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Lexer\", function() { return Lexer; });\n/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens.js\");\n/* harmony import */ var _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scan/lexer_errors_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js\");\n/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reg_exp_parser */ \"./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js\");\n\n\n\n\n\nvar LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nvar DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_3__[\"defaultLexerErrorProvider\"],\n    traceInitPerf: false,\n    skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nvar Lexer = /** @class */ (function () {\n    function Lexer(lexerDefinition, config) {\n        var _this = this;\n        if (config === void 0) { config = DEFAULT_LEXER_CONFIG; }\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.config = undefined;\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n                \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"merge\"])(DEFAULT_LEXER_CONFIG, config);\n        var traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        }\n        else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", function () {\n            var actualDefinition;\n            var hasOnlySingleMode = true;\n            _this.TRACE_INIT(\"Lexer Config handling\", function () {\n                if (_this.config.lineTerminatorsPattern ===\n                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    _this.config.lineTerminatorsPattern = _lexer__WEBPACK_IMPORTED_MODULE_0__[\"LineTerminatorOptimizedTester\"];\n                }\n                else {\n                    if (_this.config.lineTerminatorCharacters ===\n                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                            \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n                _this.trackEndLines = /full/i.test(_this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isArray\"])(lexerDefinition)) {\n                    actualDefinition = { modes: {} };\n                    actualDefinition.modes[_lexer__WEBPACK_IMPORTED_MODULE_0__[\"DEFAULT_MODE\"]] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneArr\"])(lexerDefinition);\n                    actualDefinition[_lexer__WEBPACK_IMPORTED_MODULE_0__[\"DEFAULT_MODE\"]] = _lexer__WEBPACK_IMPORTED_MODULE_0__[\"DEFAULT_MODE\"];\n                }\n                else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"cloneObj\"])((lexerDefinition));\n                }\n            });\n            if (_this.config.skipValidations === false) {\n                _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n                    _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"performRuntimeChecks\"])(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n                });\n                _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n                    _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"performWarningRuntimeChecks\"])(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes\n                ? actualDefinition.modes\n                : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(actualDefinition.modes, function (currModeValue, currModeName) {\n                actualDefinition.modes[currModeName] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"reject\"])(currModeValue, function (currTokType) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isUndefined\"])(currTokType); });\n            });\n            var allModeNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"keys\"])(actualDefinition.modes);\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(actualDefinition.modes, function (currModDef, currModName) {\n                _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n                    _this.modes.push(currModName);\n                    if (_this.config.skipValidations === false) {\n                        _this.TRACE_INIT(\"validatePatterns\", function () {\n                            _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"validatePatterns\"])(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(_this.lexerDefinitionErrors)) {\n                        Object(_tokens__WEBPACK_IMPORTED_MODULE_2__[\"augmentTokenTypes\"])(currModDef);\n                        var currAnalyzeResult_1;\n                        _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n                            currAnalyzeResult_1 = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"analyzeTokenTypes\"])(currModDef, {\n                                lineTerminatorCharacters: _this.config\n                                    .lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: _this.TRACE_INIT.bind(_this)\n                            });\n                        });\n                        _this.patternIdxToConfig[currModName] =\n                            currAnalyzeResult_1.patternIdxToConfig;\n                        _this.charCodeToPatternIdxToConfig[currModName] =\n                            currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n                        _this.emptyGroups = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"merge\"])(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n                        _this.hasCustom =\n                            currAnalyzeResult_1.hasCustom || _this.hasCustom;\n                        _this.canModeBeOptimized[currModName] =\n                            currAnalyzeResult_1.canBeOptimized;\n                    }\n                });\n            });\n            _this.defaultMode = actualDefinition.defaultMode;\n            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(_this.lexerDefinitionErrors) &&\n                !_this.config.deferDefinitionErrorsHandling) {\n                var allErrMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(_this.lexerDefinitionErrors, function (error) {\n                    return error.message;\n                });\n                var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" +\n                    allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(_this.lexerDefinitionWarning, function (warningDescriptor) {\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"PRINT_WARNING\"])(warningDescriptor.message);\n            });\n            _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (_lexer__WEBPACK_IMPORTED_MODULE_0__[\"SUPPORT_STICKY\"]) {\n                    _this.chopInput = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"IDENTITY\"];\n                    _this.match = _this.matchWithTest;\n                }\n                else {\n                    _this.updateLastIndex = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                    _this.match = _this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    _this.handleModes = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                }\n                if (_this.trackStartLines === false) {\n                    _this.computeNewColumn = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"IDENTITY\"];\n                }\n                if (_this.trackEndLines === false) {\n                    _this.updateTokenEndLineColumnLocation = _utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"NOOP\"];\n                }\n                if (/full/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createFullToken;\n                }\n                else if (/onlyStart/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createStartOnlyToken;\n                }\n                else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createOffsetOnlyToken;\n                }\n                else {\n                    throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n                }\n                if (_this.hasCustom) {\n                    _this.addToken = _this.addTokenUsingPush;\n                    _this.handlePayload = _this.handlePayloadWithCustom;\n                }\n                else {\n                    _this.addToken = _this.addTokenUsingMemberAccess;\n                    _this.handlePayload = _this.handlePayloadNoCustom;\n                }\n            });\n            _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n                var unOptimizedModes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"reduce\"])(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(unOptimizedModes)) {\n                    throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" +\n                        '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                        \"\\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n                Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__[\"clearRegExpParserCache\"])();\n            });\n            _this.TRACE_INIT(\"toFastProperties\", function () {\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"toFastProperties\"])(_this);\n            });\n        });\n    }\n    Lexer.prototype.tokenize = function (text, initialMode) {\n        if (initialMode === void 0) { initialMode = this.defaultMode; }\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isEmpty\"])(this.lexerDefinitionErrors)) {\n            var allErrMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"map\"])(this.lexerDefinitionErrors, function (error) {\n                return error.message;\n            });\n            var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n                allErrMessagesString);\n        }\n        var lexResult = this.tokenizeInternal(text, initialMode);\n        return lexResult;\n    };\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n        var _this = this;\n        var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        var orgText = text;\n        var orgLength = orgText.length;\n        var offset = 0;\n        var matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        var guessedNumberOfTokens = this.hasCustom\n            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n            : Math.floor(text.length / 10);\n        var matchedTokens = new Array(guessedNumberOfTokens);\n        var errors = [];\n        var line = this.trackStartLines ? 1 : undefined;\n        var column = this.trackStartLines ? 1 : undefined;\n        var groups = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"cloneEmptyGroups\"])(this.emptyGroups);\n        var trackLines = this.trackStartLines;\n        var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        var currModePatternsLength = 0;\n        var patternIdxToConfig = [];\n        var currCharCodeToPatternIdxToConfig = [];\n        var modeStack = [];\n        var emptyArray = [];\n        Object.freeze(emptyArray);\n        var getPossiblePatterns = undefined;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__[\"charCodeToOptimizedIndex\"])(charCode);\n            var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            }\n            else {\n                return possiblePatterns;\n            }\n        }\n        var pop_mode = function (popToken) {\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 &&\n                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n                // So no error should occur.\n                popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine !== undefined\n                        ? popToken.startLine\n                        : undefined,\n                    column: popToken.startColumn !== undefined\n                        ? popToken.startColumn\n                        : undefined,\n                    length: popToken.image.length,\n                    message: msg_1\n                });\n            }\n            else {\n                modeStack.pop();\n                var newMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"last\"])(modeStack);\n                patternIdxToConfig = _this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig = _this\n                    .charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                var modeCanBeOptimized = _this.canModeBeOptimized[newMode] &&\n                    _this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                }\n                else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig = this\n                .charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            var modeCanBeOptimized = this.canModeBeOptimized[newMode] &&\n                this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            }\n            else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        var currConfig;\n        while (offset < orgLength) {\n            matchedImage = null;\n            var nextCharCode = orgText.charCodeAt(offset);\n            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            var chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for (i = 0; i < chosenPatternsLength; i++) {\n                currConfig = chosenPatternIdxToConfig[i];\n                var currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                var singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                }\n                else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    }\n                    else {\n                        matchedImage = null;\n                    }\n                }\n                else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAltIdx = currConfig.longerAlt;\n                    if (longerAltIdx !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        var longerAltConfig = patternIdxToConfig[longerAltIdx];\n                        var longerAltPattern = longerAltConfig.pattern;\n                        altPayload = null;\n                        // single Char can never be a longer alt so no need to test it.\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        if (longerAltConfig.isCustom === true) {\n                            match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                            if (match !== null) {\n                                matchAltImage = match[0];\n                                if (match.payload !== undefined) {\n                                    altPayload = match.payload;\n                                }\n                            }\n                            else {\n                                matchAltImage = null;\n                            }\n                        }\n                        else {\n                            this.updateLastIndex(longerAltPattern, offset);\n                            matchAltImage = this.match(longerAltPattern, text, offset);\n                        }\n                        if (matchAltImage &&\n                            matchAltImage.length > matchedImage.length) {\n                            matchedImage = matchAltImage;\n                            payload = altPayload;\n                            currConfig = longerAltConfig;\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    }\n                    else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true &&\n                    currConfig.canLineTerminator === true) {\n                    var numOfLTsInMatch = 0;\n                    var foundTerminator = void 0;\n                    var lastLTEndOffset = void 0;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset =\n                                lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    } while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            }\n            else {\n                // error recovery, drop characters until we identify a valid token's start point\n                var errorStartOffset = offset;\n                var errorLine = line;\n                var errorColumn = column;\n                var foundResyncPoint = false;\n                while (!foundResyncPoint && offset < orgLength) {\n                    // drop chars until we succeed in matching something\n                    droppedChar = orgText.charCodeAt(offset);\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for (j = 0; j < currModePatternsLength; j++) {\n                        var currConfig_1 = patternIdxToConfig[j];\n                        var currPattern = currConfig_1.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        var singleCharCode = currConfig_1.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        }\n                        else if (currConfig_1.isCustom === true) {\n                            foundResyncPoint =\n                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n                        }\n                        else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg\n                });\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors\n        };\n    };\n    Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            var pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        }\n        else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    };\n    Lexer.prototype.chopInput = function (text, length) {\n        return text.substring(length);\n    };\n    Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    };\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        var lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n            // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    };\n    Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    };\n    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.createTokenInstance = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return null;\n    };\n    Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            startLine: startLine,\n            startColumn: startColumn,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine: startLine,\n            endLine: startLine,\n            startColumn: startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n        return 666;\n    };\n    Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    };\n    Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    };\n    // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.handlePayload = function (token, payload) { };\n    Lexer.prototype.handlePayloadNoCustom = function (token, payload) { };\n    Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    };\n    /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n    Lexer.prototype.match = function (pattern, text, offset) {\n        return null;\n    };\n    Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n        var found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    };\n    Lexer.prototype.matchWithExec = function (pattern, text) {\n        var regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : regExpArray;\n    };\n    // Duplicated from the parser's perf trace trait to allow future extraction\n    // of the lexer to a separate package.\n    Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"timer\"])(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" +\n        \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n    Lexer.NA = /NOT_APPLICABLE/;\n    return Lexer;\n}());\n\n//# sourceMappingURL=lexer_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/reg_exp.js":
/*!*************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/reg_exp.js ***!
  \*************************************************************/
/*! exports provided: failedOptimizationPrefixMsg, getOptimizedStartCodesIndices, firstCharOptimizedIndices, canMatchCharCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"failedOptimizationPrefixMsg\", function() { return failedOptimizationPrefixMsg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getOptimizedStartCodesIndices\", function() { return getOptimizedStartCodesIndices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"firstCharOptimizedIndices\", function() { return firstCharOptimizedIndices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canMatchCharCode\", function() { return canMatchCharCode; });\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regexp-to-ast */ \"./node_modules/regexp-to-ast/lib/regexp-to-ast.js\");\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reg_exp_parser */ \"./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js\");\n/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lexer */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nvar failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n    if (ensureOptimizations === void 0) { ensureOptimizations = false; }\n    try {\n        var ast = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__[\"getRegExpAst\"])(regExp);\n        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"PRINT_WARNING\"])(\"\" + failedOptimizationPrefixMsg +\n                    (\"\\tUnable to optimize: < \" + regExp.toString() + \" >\\n\") +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            var msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"PRINT_ERROR\"])(failedOptimizationPrefixMsg + \"\\n\" +\n                (\"\\tFailed parsing: < \" + regExp.toString() + \" >\\n\") +\n                (\"\\tUsing the regexp-to-ast library version: \" + regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__[\"VERSION\"] + \"\\n\") +\n                \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (var i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            var terms = ast.value;\n            for (var i = 0; i < terms.length; i++) {\n                var term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                var atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"forEach\"])(atom.value, function (code) {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                var range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (var rangeCode = range.from; rangeCode <= range.to &&\n                                        rangeCode < _lexer__WEBPACK_IMPORTED_MODULE_3__[\"minOptimizationVal\"]; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= _lexer__WEBPACK_IMPORTED_MODULE_3__[\"minOptimizationVal\"]) {\n                                        var minUnOptVal = range.from >= _lexer__WEBPACK_IMPORTED_MODULE_3__[\"minOptimizationVal\"]\n                                            ? range.from\n                                            : _lexer__WEBPACK_IMPORTED_MODULE_3__[\"minOptimizationVal\"];\n                                        var maxUnOptVal = range.to;\n                                        var minOptIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__[\"charCodeToOptimizedIndex\"])(minUnOptVal);\n                                        var maxOptIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__[\"charCodeToOptimizedIndex\"])(maxUnOptVal);\n                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                var isOptionalQuantifier = atom.quantifier !== undefined &&\n                    atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" &&\n                    isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"values\"])(result);\n}\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__[\"charCodeToOptimizedIndex\"])(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    var char = String.fromCharCode(code);\n    var upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__[\"charCodeToOptimizedIndex\"])(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        var lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__[\"charCodeToOptimizedIndex\"])(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"find\"])(setNode.value, function (codeOrRange) {\n        if (typeof codeOrRange === \"number\") {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"contains\"])(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            var range_1 = codeOrRange;\n            return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"find\"])(targetCharCodes, function (targetCode) {\n                return range_1.from <= targetCode && targetCode <= range_1.to;\n            }) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    if (ast.quantifier && ast.quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"isArray\"])(ast.value)\n        ? Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"every\"])(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nvar CharCodeFinder = /** @class */ (function (_super) {\n    __extends(CharCodeFinder, _super);\n    function CharCodeFinder(targetCharCodes) {\n        var _this = _super.call(this) || this;\n        _this.targetCharCodes = targetCharCodes;\n        _this.found = false;\n        return _this;\n    }\n    CharCodeFinder.prototype.visitChildren = function (node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        _super.prototype.visitChildren.call(this, node);\n    };\n    CharCodeFinder.prototype.visitCharacter = function (node) {\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"contains\"])(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    };\n    CharCodeFinder.prototype.visitSet = function (node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    };\n    return CharCodeFinder;\n}(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__[\"BaseRegExpVisitor\"]));\nfunction canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        var ast = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__[\"getRegExpAst\"])(pattern);\n        var charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"find\"])(pattern, function (char) {\n            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__[\"contains\"])(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\n//# sourceMappingURL=reg_exp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/reg_exp.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js ***!
  \********************************************************************/
/*! exports provided: getRegExpAst, clearRegExpParserCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRegExpAst\", function() { return getRegExpAst; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearRegExpParserCache\", function() { return clearRegExpParserCache; });\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regexp-to-ast */ \"./node_modules/regexp-to-ast/lib/regexp-to-ast.js\");\n/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);\n\nvar regExpAstCache = {};\nvar regExpParser = new regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__[\"RegExpParser\"]();\nfunction getRegExpAst(regExp) {\n    var regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n        return regExpAstCache[regExpStr];\n    }\n    else {\n        var regExpAst = regExpParser.pattern(regExpStr);\n        regExpAstCache[regExpStr] = regExpAst;\n        return regExpAst;\n    }\n}\nfunction clearRegExpParserCache() {\n    regExpAstCache = {};\n}\n//# sourceMappingURL=reg_exp_parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL3JlZ19leHBfcGFyc2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvc2Nhbi9yZWdfZXhwX3BhcnNlci5qcz8wNDc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ0V4cFBhcnNlciB9IGZyb20gXCJyZWdleHAtdG8tYXN0XCI7XG52YXIgcmVnRXhwQXN0Q2FjaGUgPSB7fTtcbnZhciByZWdFeHBQYXJzZXIgPSBuZXcgUmVnRXhwUGFyc2VyKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnRXhwQXN0KHJlZ0V4cCkge1xuICAgIHZhciByZWdFeHBTdHIgPSByZWdFeHAudG9TdHJpbmcoKTtcbiAgICBpZiAocmVnRXhwQXN0Q2FjaGUuaGFzT3duUHJvcGVydHkocmVnRXhwU3RyKSkge1xuICAgICAgICByZXR1cm4gcmVnRXhwQXN0Q2FjaGVbcmVnRXhwU3RyXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZWdFeHBBc3QgPSByZWdFeHBQYXJzZXIucGF0dGVybihyZWdFeHBTdHIpO1xuICAgICAgICByZWdFeHBBc3RDYWNoZVtyZWdFeHBTdHJdID0gcmVnRXhwQXN0O1xuICAgICAgICByZXR1cm4gcmVnRXhwQXN0O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclJlZ0V4cFBhcnNlckNhY2hlKCkge1xuICAgIHJlZ0V4cEFzdENhY2hlID0ge307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdfZXhwX3BhcnNlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/tokens.js":
/*!************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/tokens.js ***!
  \************************************************************/
/*! exports provided: tokenStructuredMatcher, tokenStructuredMatcherNoCategories, tokenShortNameIdx, tokenIdxToClass, augmentTokenTypes, expandCategories, assignTokenDefaultProps, assignCategoriesTokensProp, assignCategoriesMapProp, singleAssignCategoriesToksMap, hasShortKeyProperty, hasCategoriesProperty, hasExtendingTokensTypesProperty, hasExtendingTokensTypesMapProperty, isTokenType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenStructuredMatcher\", function() { return tokenStructuredMatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenStructuredMatcherNoCategories\", function() { return tokenStructuredMatcherNoCategories; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenShortNameIdx\", function() { return tokenShortNameIdx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenIdxToClass\", function() { return tokenIdxToClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"augmentTokenTypes\", function() { return augmentTokenTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expandCategories\", function() { return expandCategories; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignTokenDefaultProps\", function() { return assignTokenDefaultProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignCategoriesTokensProp\", function() { return assignCategoriesTokensProp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignCategoriesMapProp\", function() { return assignCategoriesMapProp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"singleAssignCategoriesToksMap\", function() { return singleAssignCategoriesToksMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasShortKeyProperty\", function() { return hasShortKeyProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasCategoriesProperty\", function() { return hasCategoriesProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasExtendingTokensTypesProperty\", function() { return hasExtendingTokensTypesProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasExtendingTokensTypesMapProperty\", function() { return hasExtendingTokensTypesMapProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTokenType\", function() { return isTokenType; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n    var instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n        return true;\n    }\n    else {\n        return (tokConstructor.isParent === true &&\n            tokConstructor.categoryMatchesMap[instanceType] === true);\n    }\n}\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\nvar tokenShortNameIdx = 1;\nvar tokenIdxToClass = {};\nfunction augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    var tokenTypesAndParents = expandCategories(tokenTypes);\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents);\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(tokenTypesAndParents, function (tokType) {\n        tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n}\nfunction expandCategories(tokenTypes) {\n    var result = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"cloneArr\"])(tokenTypes);\n    var categories = tokenTypes;\n    var searching = true;\n    while (searching) {\n        categories = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"compact\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"flatten\"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"map\"])(categories, function (currTokType) { return currTokType.CATEGORIES; })));\n        var newCategories = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"difference\"])(categories, result);\n        result = result.concat(newCategories);\n        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isEmpty\"])(newCategories)) {\n            searching = false;\n        }\n        else {\n            categories = newCategories;\n        }\n    }\n    return result;\n}\nfunction assignTokenDefaultProps(tokenTypes) {\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(tokenTypes, function (currTokType) {\n        if (!hasShortKeyProperty(currTokType)) {\n            tokenIdxToClass[tokenShortNameIdx] = currTokType;\n            currTokType.tokenTypeIdx = tokenShortNameIdx++;\n        }\n        // CATEGORIES? : TokenType | TokenType[]\n        if (hasCategoriesProperty(currTokType) &&\n            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isArray\"])(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n        ) {\n            currTokType.CATEGORIES = [currTokType.CATEGORIES];\n        }\n        if (!hasCategoriesProperty(currTokType)) {\n            currTokType.CATEGORIES = [];\n        }\n        if (!hasExtendingTokensTypesProperty(currTokType)) {\n            currTokType.categoryMatches = [];\n        }\n        if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n            currTokType.categoryMatchesMap = {};\n        }\n    });\n}\nfunction assignCategoriesTokensProp(tokenTypes) {\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(tokenTypes, function (currTokType) {\n        // avoid duplications\n        currTokType.categoryMatches = [];\n        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(currTokType.categoryMatchesMap, function (val, key) {\n            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n        });\n    });\n}\nfunction assignCategoriesMapProp(tokenTypes) {\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(tokenTypes, function (currTokType) {\n        singleAssignCategoriesToksMap([], currTokType);\n    });\n}\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(path, function (pathNode) {\n        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"forEach\"])(nextNode.CATEGORIES, function (nextCategory) {\n        var newPath = path.concat(nextNode);\n        // avoids infinite loops due to cyclic categories.\n        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"contains\"])(newPath, nextCategory)) {\n            singleAssignCategoriesToksMap(newPath, nextCategory);\n        }\n    });\n}\nfunction hasShortKeyProperty(tokType) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokType, \"tokenTypeIdx\");\n}\nfunction hasCategoriesProperty(tokType) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokType, \"CATEGORIES\");\n}\nfunction hasExtendingTokensTypesProperty(tokType) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokType, \"categoryMatches\");\n}\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokType, \"categoryMatchesMap\");\n}\nfunction isTokenType(tokType) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(tokType, \"tokenTypeIdx\");\n}\n//# sourceMappingURL=tokens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL3Rva2Vucy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3NjYW4vdG9rZW5zLmpzPzViYTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVBcnIsIGNvbXBhY3QsIGNvbnRhaW5zLCBkaWZmZXJlbmNlLCBmbGF0dGVuLCBmb3JFYWNoLCBoYXMsIGlzQXJyYXksIGlzRW1wdHksIG1hcCB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuU3RydWN0dXJlZE1hdGNoZXIodG9rSW5zdGFuY2UsIHRva0NvbnN0cnVjdG9yKSB7XG4gICAgdmFyIGluc3RhbmNlVHlwZSA9IHRva0luc3RhbmNlLnRva2VuVHlwZUlkeDtcbiAgICBpZiAoaW5zdGFuY2VUeXBlID09PSB0b2tDb25zdHJ1Y3Rvci50b2tlblR5cGVJZHgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKHRva0NvbnN0cnVjdG9yLmlzUGFyZW50ID09PSB0cnVlICYmXG4gICAgICAgICAgICB0b2tDb25zdHJ1Y3Rvci5jYXRlZ29yeU1hdGNoZXNNYXBbaW5zdGFuY2VUeXBlXSA9PT0gdHJ1ZSk7XG4gICAgfVxufVxuLy8gT3B0aW1pemVkIHRva2VuTWF0Y2hlciBpbiBjYXNlIG91ciBncmFtbWFyIGRvZXMgbm90IHVzZSB0b2tlbiBjYXRlZ29yaWVzXG4vLyBCZWluZyBzbyB0aW55IGl0IGlzIG11Y2ggbW9yZSBsaWtlbHkgdG8gYmUgaW4tbGluZWQgYW5kIHRoaXMgYXZvaWQgdGhlIGZ1bmN0aW9uIGNhbGwgb3ZlcmhlYWRcbmV4cG9ydCBmdW5jdGlvbiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyTm9DYXRlZ29yaWVzKHRva2VuLCB0b2tUeXBlKSB7XG4gICAgcmV0dXJuIHRva2VuLnRva2VuVHlwZUlkeCA9PT0gdG9rVHlwZS50b2tlblR5cGVJZHg7XG59XG5leHBvcnQgdmFyIHRva2VuU2hvcnROYW1lSWR4ID0gMTtcbmV4cG9ydCB2YXIgdG9rZW5JZHhUb0NsYXNzID0ge307XG5leHBvcnQgZnVuY3Rpb24gYXVnbWVudFRva2VuVHlwZXModG9rZW5UeXBlcykge1xuICAgIC8vIGNvbGxlY3QgdGhlIHBhcmVudCBUb2tlbiBUeXBlcyBhcyB3ZWxsLlxuICAgIHZhciB0b2tlblR5cGVzQW5kUGFyZW50cyA9IGV4cGFuZENhdGVnb3JpZXModG9rZW5UeXBlcyk7XG4gICAgLy8gYWRkIHJlcXVpcmVkIHRva2VuVHlwZSBhbmQgY2F0ZWdvcnlNYXRjaGVzIHByb3BlcnRpZXNcbiAgICBhc3NpZ25Ub2tlbkRlZmF1bHRQcm9wcyh0b2tlblR5cGVzQW5kUGFyZW50cyk7XG4gICAgLy8gZmlsbCB1cCB0aGUgY2F0ZWdvcnlNYXRjaGVzXG4gICAgYXNzaWduQ2F0ZWdvcmllc01hcFByb3AodG9rZW5UeXBlc0FuZFBhcmVudHMpO1xuICAgIGFzc2lnbkNhdGVnb3JpZXNUb2tlbnNQcm9wKHRva2VuVHlwZXNBbmRQYXJlbnRzKTtcbiAgICBmb3JFYWNoKHRva2VuVHlwZXNBbmRQYXJlbnRzLCBmdW5jdGlvbiAodG9rVHlwZSkge1xuICAgICAgICB0b2tUeXBlLmlzUGFyZW50ID0gdG9rVHlwZS5jYXRlZ29yeU1hdGNoZXMubGVuZ3RoID4gMDtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRDYXRlZ29yaWVzKHRva2VuVHlwZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2xvbmVBcnIodG9rZW5UeXBlcyk7XG4gICAgdmFyIGNhdGVnb3JpZXMgPSB0b2tlblR5cGVzO1xuICAgIHZhciBzZWFyY2hpbmcgPSB0cnVlO1xuICAgIHdoaWxlIChzZWFyY2hpbmcpIHtcbiAgICAgICAgY2F0ZWdvcmllcyA9IGNvbXBhY3QoZmxhdHRlbihtYXAoY2F0ZWdvcmllcywgZnVuY3Rpb24gKGN1cnJUb2tUeXBlKSB7IHJldHVybiBjdXJyVG9rVHlwZS5DQVRFR09SSUVTOyB9KSkpO1xuICAgICAgICB2YXIgbmV3Q2F0ZWdvcmllcyA9IGRpZmZlcmVuY2UoY2F0ZWdvcmllcywgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChuZXdDYXRlZ29yaWVzKTtcbiAgICAgICAgaWYgKGlzRW1wdHkobmV3Q2F0ZWdvcmllcykpIHtcbiAgICAgICAgICAgIHNlYXJjaGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IG5ld0NhdGVnb3JpZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Ub2tlbkRlZmF1bHRQcm9wcyh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCBmdW5jdGlvbiAoY3VyclRva1R5cGUpIHtcbiAgICAgICAgaWYgKCFoYXNTaG9ydEtleVByb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgdG9rZW5JZHhUb0NsYXNzW3Rva2VuU2hvcnROYW1lSWR4XSA9IGN1cnJUb2tUeXBlO1xuICAgICAgICAgICAgY3VyclRva1R5cGUudG9rZW5UeXBlSWR4ID0gdG9rZW5TaG9ydE5hbWVJZHgrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBDQVRFR09SSUVTPyA6IFRva2VuVHlwZSB8IFRva2VuVHlwZVtdXG4gICAgICAgIGlmIChoYXNDYXRlZ29yaWVzUHJvcGVydHkoY3VyclRva1R5cGUpICYmXG4gICAgICAgICAgICAhaXNBcnJheShjdXJyVG9rVHlwZS5DQVRFR09SSUVTKVxuICAgICAgICAvLyAmJlxuICAgICAgICAvLyAhaXNVbmRlZmluZWQoY3VyclRva1R5cGUuQ0FURUdPUklFUy5QQVRURVJOKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnJUb2tUeXBlLkNBVEVHT1JJRVMgPSBbY3VyclRva1R5cGUuQ0FURUdPUklFU107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNDYXRlZ29yaWVzUHJvcGVydHkoY3VyclRva1R5cGUpKSB7XG4gICAgICAgICAgICBjdXJyVG9rVHlwZS5DQVRFR09SSUVTID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNFeHRlbmRpbmdUb2tlbnNUeXBlc1Byb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgY3VyclRva1R5cGUuY2F0ZWdvcnlNYXRjaGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYXNFeHRlbmRpbmdUb2tlbnNUeXBlc01hcFByb3BlcnR5KGN1cnJUb2tUeXBlKSkge1xuICAgICAgICAgICAgY3VyclRva1R5cGUuY2F0ZWdvcnlNYXRjaGVzTWFwID0ge307XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25DYXRlZ29yaWVzVG9rZW5zUHJvcCh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCBmdW5jdGlvbiAoY3VyclRva1R5cGUpIHtcbiAgICAgICAgLy8gYXZvaWQgZHVwbGljYXRpb25zXG4gICAgICAgIGN1cnJUb2tUeXBlLmNhdGVnb3J5TWF0Y2hlcyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGN1cnJUb2tUeXBlLmNhdGVnb3J5TWF0Y2hlc01hcCwgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgICAgICBjdXJyVG9rVHlwZS5jYXRlZ29yeU1hdGNoZXMucHVzaCh0b2tlbklkeFRvQ2xhc3Nba2V5XS50b2tlblR5cGVJZHgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25DYXRlZ29yaWVzTWFwUHJvcCh0b2tlblR5cGVzKSB7XG4gICAgZm9yRWFjaCh0b2tlblR5cGVzLCBmdW5jdGlvbiAoY3VyclRva1R5cGUpIHtcbiAgICAgICAgc2luZ2xlQXNzaWduQ2F0ZWdvcmllc1Rva3NNYXAoW10sIGN1cnJUb2tUeXBlKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVBc3NpZ25DYXRlZ29yaWVzVG9rc01hcChwYXRoLCBuZXh0Tm9kZSkge1xuICAgIGZvckVhY2gocGF0aCwgZnVuY3Rpb24gKHBhdGhOb2RlKSB7XG4gICAgICAgIG5leHROb2RlLmNhdGVnb3J5TWF0Y2hlc01hcFtwYXRoTm9kZS50b2tlblR5cGVJZHhdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKG5leHROb2RlLkNBVEVHT1JJRVMsIGZ1bmN0aW9uIChuZXh0Q2F0ZWdvcnkpIHtcbiAgICAgICAgdmFyIG5ld1BhdGggPSBwYXRoLmNvbmNhdChuZXh0Tm9kZSk7XG4gICAgICAgIC8vIGF2b2lkcyBpbmZpbml0ZSBsb29wcyBkdWUgdG8gY3ljbGljIGNhdGVnb3JpZXMuXG4gICAgICAgIGlmICghY29udGFpbnMobmV3UGF0aCwgbmV4dENhdGVnb3J5KSkge1xuICAgICAgICAgICAgc2luZ2xlQXNzaWduQ2F0ZWdvcmllc1Rva3NNYXAobmV3UGF0aCwgbmV4dENhdGVnb3J5KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Nob3J0S2V5UHJvcGVydHkodG9rVHlwZSkge1xuICAgIHJldHVybiBoYXModG9rVHlwZSwgXCJ0b2tlblR5cGVJZHhcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzQ2F0ZWdvcmllc1Byb3BlcnR5KHRva1R5cGUpIHtcbiAgICByZXR1cm4gaGFzKHRva1R5cGUsIFwiQ0FURUdPUklFU1wiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNFeHRlbmRpbmdUb2tlbnNUeXBlc1Byb3BlcnR5KHRva1R5cGUpIHtcbiAgICByZXR1cm4gaGFzKHRva1R5cGUsIFwiY2F0ZWdvcnlNYXRjaGVzXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0V4dGVuZGluZ1Rva2Vuc1R5cGVzTWFwUHJvcGVydHkodG9rVHlwZSkge1xuICAgIHJldHVybiBoYXModG9rVHlwZSwgXCJjYXRlZ29yeU1hdGNoZXNNYXBcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlblR5cGUodG9rVHlwZSkge1xuICAgIHJldHVybiBoYXModG9rVHlwZSwgXCJ0b2tlblR5cGVJZHhcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbnMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/tokens.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js ***!
  \*******************************************************************/
/*! exports provided: tokenLabel, tokenName, hasTokenLabel, createToken, EOF, createTokenInstance, tokenMatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenLabel\", function() { return tokenLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenName\", function() { return tokenName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasTokenLabel\", function() { return hasTokenLabel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createToken\", function() { return createToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EOF\", function() { return EOF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTokenInstance\", function() { return createTokenInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenMatcher\", function() { return tokenMatcher; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./node_modules/chevrotain/lib_esm/src/utils/utils.js\");\n/* harmony import */ var _lexer_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lexer_public */ \"./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js\");\n/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens */ \"./node_modules/chevrotain/lib_esm/src/scan/tokens.js\");\n\n\n\nfunction tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n        return tokType.LABEL;\n    }\n    else {\n        return tokType.name;\n    }\n}\nfunction tokenName(tokType) {\n    return tokType.name;\n}\nfunction hasTokenLabel(obj) {\n    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isString\"])(obj.LABEL) && obj.LABEL !== \"\";\n}\nvar PARENT = \"parent\";\nvar CATEGORIES = \"categories\";\nvar LABEL = \"label\";\nvar GROUP = \"group\";\nvar PUSH_MODE = \"push_mode\";\nvar POP_MODE = \"pop_mode\";\nvar LONGER_ALT = \"longer_alt\";\nvar LINE_BREAKS = \"line_breaks\";\nvar START_CHARS_HINT = \"start_chars_hint\";\nfunction createToken(config) {\n    return createTokenInternal(config);\n}\nfunction createTokenInternal(config) {\n    var pattern = config.pattern;\n    var tokenType = {};\n    tokenType.name = config.name;\n    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"isUndefined\"])(pattern)) {\n        tokenType.PATTERN = pattern;\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, PARENT)) {\n        throw \"The parent property is no longer supported.\\n\" +\n            \"See: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.\";\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, CATEGORIES)) {\n        // casting to ANY as this will be fixed inside `augmentTokenTypes``\n        tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    Object(_tokens__WEBPACK_IMPORTED_MODULE_2__[\"augmentTokenTypes\"])([tokenType]);\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, LABEL)) {\n        tokenType.LABEL = config[LABEL];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, GROUP)) {\n        tokenType.GROUP = config[GROUP];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, POP_MODE)) {\n        tokenType.POP_MODE = config[POP_MODE];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, PUSH_MODE)) {\n        tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, LONGER_ALT)) {\n        tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, LINE_BREAKS)) {\n        tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"has\"])(config, START_CHARS_HINT)) {\n        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n}\nvar EOF = createToken({ name: \"EOF\", pattern: _lexer_public__WEBPACK_IMPORTED_MODULE_1__[\"Lexer\"].NA });\nObject(_tokens__WEBPACK_IMPORTED_MODULE_2__[\"augmentTokenTypes\"])([EOF]);\nfunction createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n        image: image,\n        startOffset: startOffset,\n        endOffset: endOffset,\n        startLine: startLine,\n        endLine: endLine,\n        startColumn: startColumn,\n        endColumn: endColumn,\n        tokenTypeIdx: tokType.tokenTypeIdx,\n        tokenType: tokType\n    };\n}\nfunction tokenMatcher(token, tokType) {\n    return Object(_tokens__WEBPACK_IMPORTED_MODULE_2__[\"tokenStructuredMatcher\"])(token, tokType);\n}\n//# sourceMappingURL=tokens_public.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL3Rva2Vuc19wdWJsaWMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy9zY2FuL3Rva2Vuc19wdWJsaWMuanM/YmNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXMsIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi9sZXhlcl9wdWJsaWNcIjtcbmltcG9ydCB7IGF1Z21lbnRUb2tlblR5cGVzLCB0b2tlblN0cnVjdHVyZWRNYXRjaGVyIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5leHBvcnQgZnVuY3Rpb24gdG9rZW5MYWJlbCh0b2tUeXBlKSB7XG4gICAgaWYgKGhhc1Rva2VuTGFiZWwodG9rVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHRva1R5cGUuTEFCRUw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rVHlwZS5uYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbk5hbWUodG9rVHlwZSkge1xuICAgIHJldHVybiB0b2tUeXBlLm5hbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzVG9rZW5MYWJlbChvYmopIHtcbiAgICByZXR1cm4gaXNTdHJpbmcob2JqLkxBQkVMKSAmJiBvYmouTEFCRUwgIT09IFwiXCI7XG59XG52YXIgUEFSRU5UID0gXCJwYXJlbnRcIjtcbnZhciBDQVRFR09SSUVTID0gXCJjYXRlZ29yaWVzXCI7XG52YXIgTEFCRUwgPSBcImxhYmVsXCI7XG52YXIgR1JPVVAgPSBcImdyb3VwXCI7XG52YXIgUFVTSF9NT0RFID0gXCJwdXNoX21vZGVcIjtcbnZhciBQT1BfTU9ERSA9IFwicG9wX21vZGVcIjtcbnZhciBMT05HRVJfQUxUID0gXCJsb25nZXJfYWx0XCI7XG52YXIgTElORV9CUkVBS1MgPSBcImxpbmVfYnJlYWtzXCI7XG52YXIgU1RBUlRfQ0hBUlNfSElOVCA9IFwic3RhcnRfY2hhcnNfaGludFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRva2VuKGNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVUb2tlbkludGVybmFsKGNvbmZpZyk7XG59XG5mdW5jdGlvbiBjcmVhdGVUb2tlbkludGVybmFsKGNvbmZpZykge1xuICAgIHZhciBwYXR0ZXJuID0gY29uZmlnLnBhdHRlcm47XG4gICAgdmFyIHRva2VuVHlwZSA9IHt9O1xuICAgIHRva2VuVHlwZS5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChwYXR0ZXJuKSkge1xuICAgICAgICB0b2tlblR5cGUuUEFUVEVSTiA9IHBhdHRlcm47XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQQVJFTlQpKSB7XG4gICAgICAgIHRocm93IFwiVGhlIHBhcmVudCBwcm9wZXJ0eSBpcyBubyBsb25nZXIgc3VwcG9ydGVkLlxcblwiICtcbiAgICAgICAgICAgIFwiU2VlOiBodHRwczovL2dpdGh1Yi5jb20vU0FQL2NoZXZyb3RhaW4vaXNzdWVzLzU2NCNpc3N1ZWNvbW1lbnQtMzQ5MDYyMzQ2IGZvciBkZXRhaWxzLlwiO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgQ0FURUdPUklFUykpIHtcbiAgICAgICAgLy8gY2FzdGluZyB0byBBTlkgYXMgdGhpcyB3aWxsIGJlIGZpeGVkIGluc2lkZSBgYXVnbWVudFRva2VuVHlwZXNgYFxuICAgICAgICB0b2tlblR5cGUuQ0FURUdPUklFUyA9IGNvbmZpZ1tDQVRFR09SSUVTXTtcbiAgICB9XG4gICAgYXVnbWVudFRva2VuVHlwZXMoW3Rva2VuVHlwZV0pO1xuICAgIGlmIChoYXMoY29uZmlnLCBMQUJFTCkpIHtcbiAgICAgICAgdG9rZW5UeXBlLkxBQkVMID0gY29uZmlnW0xBQkVMXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIEdST1VQKSkge1xuICAgICAgICB0b2tlblR5cGUuR1JPVVAgPSBjb25maWdbR1JPVVBdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgUE9QX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QT1BfTU9ERSA9IGNvbmZpZ1tQT1BfTU9ERV07XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBQVVNIX01PREUpKSB7XG4gICAgICAgIHRva2VuVHlwZS5QVVNIX01PREUgPSBjb25maWdbUFVTSF9NT0RFXTtcbiAgICB9XG4gICAgaWYgKGhhcyhjb25maWcsIExPTkdFUl9BTFQpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MT05HRVJfQUxUID0gY29uZmlnW0xPTkdFUl9BTFRdO1xuICAgIH1cbiAgICBpZiAoaGFzKGNvbmZpZywgTElORV9CUkVBS1MpKSB7XG4gICAgICAgIHRva2VuVHlwZS5MSU5FX0JSRUFLUyA9IGNvbmZpZ1tMSU5FX0JSRUFLU107XG4gICAgfVxuICAgIGlmIChoYXMoY29uZmlnLCBTVEFSVF9DSEFSU19ISU5UKSkge1xuICAgICAgICB0b2tlblR5cGUuU1RBUlRfQ0hBUlNfSElOVCA9IGNvbmZpZ1tTVEFSVF9DSEFSU19ISU5UXTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuVHlwZTtcbn1cbmV4cG9ydCB2YXIgRU9GID0gY3JlYXRlVG9rZW4oeyBuYW1lOiBcIkVPRlwiLCBwYXR0ZXJuOiBMZXhlci5OQSB9KTtcbmF1Z21lbnRUb2tlblR5cGVzKFtFT0ZdKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUb2tlbkluc3RhbmNlKHRva1R5cGUsIGltYWdlLCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0LCBzdGFydExpbmUsIGVuZExpbmUsIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbWFnZTogaW1hZ2UsXG4gICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZnNldCxcbiAgICAgICAgZW5kT2Zmc2V0OiBlbmRPZmZzZXQsXG4gICAgICAgIHN0YXJ0TGluZTogc3RhcnRMaW5lLFxuICAgICAgICBlbmRMaW5lOiBlbmRMaW5lLFxuICAgICAgICBzdGFydENvbHVtbjogc3RhcnRDb2x1bW4sXG4gICAgICAgIGVuZENvbHVtbjogZW5kQ29sdW1uLFxuICAgICAgICB0b2tlblR5cGVJZHg6IHRva1R5cGUudG9rZW5UeXBlSWR4LFxuICAgICAgICB0b2tlblR5cGU6IHRva1R5cGVcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRva2VuTWF0Y2hlcih0b2tlbiwgdG9rVHlwZSkge1xuICAgIHJldHVybiB0b2tlblN0cnVjdHVyZWRNYXRjaGVyKHRva2VuLCB0b2tUeXBlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vuc19wdWJsaWMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/utils/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/utils/utils.js ***!
  \************************************************************/
/*! exports provided: isEmpty, keys, values, mapValues, map, flatten, first, last, forEach, isString, isUndefined, isFunction, drop, dropRight, filter, reject, pick, has, contains, cloneArr, cloneObj, find, findAll, reduce, compact, uniq, partial, isArray, isRegExp, isObject, every, difference, some, indexOf, sortBy, zipObject, assign, assignNoOverwrite, defaults, groupBy, merge, NOOP, IDENTITY, packArray, PRINT_ERROR, PRINT_WARNING, isES2015MapSupported, applyMixins, toFastProperties, peek, timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEmpty\", function() { return isEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keys\", function() { return keys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"values\", function() { return values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapValues\", function() { return mapValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatten\", function() { return flatten; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"first\", function() { return first; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"last\", function() { return last; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isString\", function() { return isString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isUndefined\", function() { return isUndefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isFunction\", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drop\", function() { return drop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dropRight\", function() { return dropRight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filter\", function() { return filter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reject\", function() { return reject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pick\", function() { return pick; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"has\", function() { return has; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contains\", function() { return contains; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneArr\", function() { return cloneArr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneObj\", function() { return cloneObj; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"find\", function() { return find; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"findAll\", function() { return findAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reduce\", function() { return reduce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compact\", function() { return compact; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uniq\", function() { return uniq; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"partial\", function() { return partial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isArray\", function() { return isArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isRegExp\", function() { return isRegExp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObject\", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"every\", function() { return every; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"difference\", function() { return difference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"some\", function() { return some; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"indexOf\", function() { return indexOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sortBy\", function() { return sortBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zipObject\", function() { return zipObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assign\", function() { return assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignNoOverwrite\", function() { return assignNoOverwrite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return defaults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"groupBy\", function() { return groupBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"merge\", function() { return merge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NOOP\", function() { return NOOP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IDENTITY\", function() { return IDENTITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"packArray\", function() { return packArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PRINT_ERROR\", function() { return PRINT_ERROR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PRINT_WARNING\", function() { return PRINT_WARNING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isES2015MapSupported\", function() { return isES2015MapSupported; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyMixins\", function() { return applyMixins; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toFastProperties\", function() { return toFastProperties; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"peek\", function() { return peek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timer\", function() { return timer; });\n/*\n Utils using lodash style API. (not necessarily 100% compliant) for functional and other utils.\n These utils should replace usage of lodash in the production code base. not because they are any better...\n but for the purpose of being a dependency free library.\n\n The hotspots in the code are already written in imperative style for performance reasons.\n so writing several dozen utils which may be slower than the original lodash, does not matter as much\n considering they will not be invoked in hotspots...\n */\nfunction isEmpty(arr) {\n    return arr && arr.length === 0;\n}\nfunction keys(obj) {\n    if (obj === undefined || obj === null) {\n        return [];\n    }\n    return Object.keys(obj);\n}\nfunction values(obj) {\n    var vals = [];\n    var keys = Object.keys(obj);\n    for (var i = 0; i < keys.length; i++) {\n        vals.push(obj[keys[i]]);\n    }\n    return vals;\n}\nfunction mapValues(obj, callback) {\n    var result = [];\n    var objKeys = keys(obj);\n    for (var idx = 0; idx < objKeys.length; idx++) {\n        var currKey = objKeys[idx];\n        result.push(callback.call(null, obj[currKey], currKey));\n    }\n    return result;\n}\nfunction map(arr, callback) {\n    var result = [];\n    for (var idx = 0; idx < arr.length; idx++) {\n        result.push(callback.call(null, arr[idx], idx));\n    }\n    return result;\n}\nfunction flatten(arr) {\n    var result = [];\n    for (var idx = 0; idx < arr.length; idx++) {\n        var currItem = arr[idx];\n        if (Array.isArray(currItem)) {\n            result = result.concat(flatten(currItem));\n        }\n        else {\n            result.push(currItem);\n        }\n    }\n    return result;\n}\nfunction first(arr) {\n    return isEmpty(arr) ? undefined : arr[0];\n}\nfunction last(arr) {\n    var len = arr && arr.length;\n    return len ? arr[len - 1] : undefined;\n}\nfunction forEach(collection, iteratorCallback) {\n    /* istanbul ignore else */\n    if (Array.isArray(collection)) {\n        for (var i = 0; i < collection.length; i++) {\n            iteratorCallback.call(null, collection[i], i);\n        }\n    }\n    else if (isObject(collection)) {\n        var colKeys = keys(collection);\n        for (var i = 0; i < colKeys.length; i++) {\n            var key = colKeys[i];\n            var value = collection[key];\n            iteratorCallback.call(null, value, key);\n        }\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nfunction isString(item) {\n    return typeof item === \"string\";\n}\nfunction isUndefined(item) {\n    return item === undefined;\n}\nfunction isFunction(item) {\n    return item instanceof Function;\n}\nfunction drop(arr, howMuch) {\n    if (howMuch === void 0) { howMuch = 1; }\n    return arr.slice(howMuch, arr.length);\n}\nfunction dropRight(arr, howMuch) {\n    if (howMuch === void 0) { howMuch = 1; }\n    return arr.slice(0, arr.length - howMuch);\n}\nfunction filter(arr, predicate) {\n    var result = [];\n    if (Array.isArray(arr)) {\n        for (var i = 0; i < arr.length; i++) {\n            var item = arr[i];\n            if (predicate.call(null, item)) {\n                result.push(item);\n            }\n        }\n    }\n    return result;\n}\nfunction reject(arr, predicate) {\n    return filter(arr, function (item) { return !predicate(item); });\n}\nfunction pick(obj, predicate) {\n    var keys = Object.keys(obj);\n    var result = {};\n    for (var i = 0; i < keys.length; i++) {\n        var currKey = keys[i];\n        var currItem = obj[currKey];\n        if (predicate(currItem)) {\n            result[currKey] = currItem;\n        }\n    }\n    return result;\n}\nfunction has(obj, prop) {\n    if (isObject(obj)) {\n        return obj.hasOwnProperty(prop);\n    }\n    return false;\n}\nfunction contains(arr, item) {\n    return find(arr, function (currItem) { return currItem === item; }) !== undefined ? true : false;\n}\n/**\n * shallow clone\n */\nfunction cloneArr(arr) {\n    var newArr = [];\n    for (var i = 0; i < arr.length; i++) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}\n/**\n * shallow clone\n */\nfunction cloneObj(obj) {\n    var clonedObj = {};\n    for (var key in obj) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = obj[key];\n        }\n    }\n    return clonedObj;\n}\nfunction find(arr, predicate) {\n    for (var i = 0; i < arr.length; i++) {\n        var item = arr[i];\n        if (predicate.call(null, item)) {\n            return item;\n        }\n    }\n    return undefined;\n}\nfunction findAll(arr, predicate) {\n    var found = [];\n    for (var i = 0; i < arr.length; i++) {\n        var item = arr[i];\n        if (predicate.call(null, item)) {\n            found.push(item);\n        }\n    }\n    return found;\n}\nfunction reduce(arrOrObj, iterator, initial) {\n    var isArr = Array.isArray(arrOrObj);\n    var vals = isArr ? arrOrObj : values(arrOrObj);\n    var objKeys = isArr ? [] : keys(arrOrObj);\n    var accumulator = initial;\n    for (var i = 0; i < vals.length; i++) {\n        accumulator = iterator.call(null, accumulator, vals[i], isArr ? i : objKeys[i]);\n    }\n    return accumulator;\n}\nfunction compact(arr) {\n    return reject(arr, function (item) { return item === null || item === undefined; });\n}\nfunction uniq(arr, identity) {\n    if (identity === void 0) { identity = function (item) { return item; }; }\n    var identities = [];\n    return reduce(arr, function (result, currItem) {\n        var currIdentity = identity(currItem);\n        if (contains(identities, currIdentity)) {\n            return result;\n        }\n        else {\n            identities.push(currIdentity);\n            return result.concat(currItem);\n        }\n    }, []);\n}\nfunction partial(func) {\n    var restArgs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        restArgs[_i - 1] = arguments[_i];\n    }\n    var firstArg = [null];\n    var allArgs = firstArg.concat(restArgs);\n    return Function.bind.apply(func, allArgs);\n}\nfunction isArray(obj) {\n    return Array.isArray(obj);\n}\nfunction isRegExp(obj) {\n    return obj instanceof RegExp;\n}\nfunction isObject(obj) {\n    return obj instanceof Object;\n}\nfunction every(arr, predicate) {\n    for (var i = 0; i < arr.length; i++) {\n        if (!predicate(arr[i], i)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction difference(arr, values) {\n    return reject(arr, function (item) { return contains(values, item); });\n}\nfunction some(arr, predicate) {\n    for (var i = 0; i < arr.length; i++) {\n        if (predicate(arr[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction indexOf(arr, value) {\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction sortBy(arr, orderFunc) {\n    var result = cloneArr(arr);\n    result.sort(function (a, b) { return orderFunc(a) - orderFunc(b); });\n    return result;\n}\nfunction zipObject(keys, values) {\n    if (keys.length !== values.length) {\n        throw Error(\"can't zipObject with different number of keys and values!\");\n    }\n    var result = {};\n    for (var i = 0; i < keys.length; i++) {\n        result[keys[i]] = values[i];\n    }\n    return result;\n}\n/**\n * mutates! (and returns) target\n */\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < sources.length; i++) {\n        var curSource = sources[i];\n        var currSourceKeys = keys(curSource);\n        for (var j = 0; j < currSourceKeys.length; j++) {\n            var currKey = currSourceKeys[j];\n            target[currKey] = curSource[currKey];\n        }\n    }\n    return target;\n}\n/**\n * mutates! (and returns) target\n */\nfunction assignNoOverwrite(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < sources.length; i++) {\n        var curSource = sources[i];\n        if (isUndefined(curSource)) {\n            continue;\n        }\n        var currSourceKeys = keys(curSource);\n        for (var j = 0; j < currSourceKeys.length; j++) {\n            var currKey = currSourceKeys[j];\n            if (!has(target, currKey)) {\n                target[currKey] = curSource[currKey];\n            }\n        }\n    }\n    return target;\n}\nfunction defaults() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return assignNoOverwrite.apply(null, [{}].concat(sources));\n}\nfunction groupBy(arr, groupKeyFunc) {\n    var result = {};\n    forEach(arr, function (item) {\n        var currGroupKey = groupKeyFunc(item);\n        var currGroupArr = result[currGroupKey];\n        if (currGroupArr) {\n            currGroupArr.push(item);\n        }\n        else {\n            result[currGroupKey] = [item];\n        }\n    });\n    return result;\n}\n/**\n * Merge obj2 into obj1.\n * Will overwrite existing properties with the same name\n */\nfunction merge(obj1, obj2) {\n    var result = cloneObj(obj1);\n    var keys2 = keys(obj2);\n    for (var i = 0; i < keys2.length; i++) {\n        var key = keys2[i];\n        var value = obj2[key];\n        result[key] = value;\n    }\n    return result;\n}\nfunction NOOP() { }\nfunction IDENTITY(item) {\n    return item;\n}\n/**\n * Will return a new packed array with same values.\n */\nfunction packArray(holeyArr) {\n    var result = [];\n    for (var i = 0; i < holeyArr.length; i++) {\n        var orgValue = holeyArr[i];\n        result.push(orgValue !== undefined ? orgValue : undefined);\n    }\n    return result;\n}\nfunction PRINT_ERROR(msg) {\n    /* istanbul ignore else - can't override global.console in node.js */\n    if (console && console.error) {\n        console.error(\"Error: \" + msg);\n    }\n}\nfunction PRINT_WARNING(msg) {\n    /* istanbul ignore else - can't override global.console in node.js*/\n    if (console && console.warn) {\n        // TODO: modify docs accordingly\n        console.warn(\"Warning: \" + msg);\n    }\n}\nfunction isES2015MapSupported() {\n    return typeof Map === \"function\";\n}\nfunction applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach(function (baseCtor) {\n        var baseProto = baseCtor.prototype;\n        Object.getOwnPropertyNames(baseProto).forEach(function (propName) {\n            if (propName === \"constructor\") {\n                return;\n            }\n            var basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n            // Handle Accessors\n            if (basePropDescriptor &&\n                (basePropDescriptor.get || basePropDescriptor.set)) {\n                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n            }\n            else {\n                derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n            }\n        });\n    });\n}\n// base on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nfunction toFastProperties(toBecomeFast) {\n    function FakeConstructor() { }\n    // If our object is used as a constructor it would receive\n    FakeConstructor.prototype = toBecomeFast;\n    var fakeInstance = new FakeConstructor();\n    function fakeAccess() {\n        return typeof fakeInstance.bar;\n    }\n    // help V8 understand this is a \"real\" prototype by actually using\n    // the fake instance.\n    fakeAccess();\n    fakeAccess();\n    return toBecomeFast;\n    // Eval prevents optimization of this method (even though this is dead code)\n    /* istanbul ignore next */\n    // tslint:disable-next-line\n    eval(toBecomeFast);\n}\nfunction peek(arr) {\n    return arr[arr.length - 1];\n}\n/* istanbul ignore next - for performance tracing*/\nfunction timer(func) {\n    var start = new Date().getTime();\n    var val = func();\n    var end = new Date().getTime();\n    var total = end - start;\n    return { time: total, value: val };\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy91dGlscy91dGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGV2cm90YWluL2xpYl9lc20vc3JjL3V0aWxzL3V0aWxzLmpzPzc3YWEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBVdGlscyB1c2luZyBsb2Rhc2ggc3R5bGUgQVBJLiAobm90IG5lY2Vzc2FyaWx5IDEwMCUgY29tcGxpYW50KSBmb3IgZnVuY3Rpb25hbCBhbmQgb3RoZXIgdXRpbHMuXG4gVGhlc2UgdXRpbHMgc2hvdWxkIHJlcGxhY2UgdXNhZ2Ugb2YgbG9kYXNoIGluIHRoZSBwcm9kdWN0aW9uIGNvZGUgYmFzZS4gbm90IGJlY2F1c2UgdGhleSBhcmUgYW55IGJldHRlci4uLlxuIGJ1dCBmb3IgdGhlIHB1cnBvc2Ugb2YgYmVpbmcgYSBkZXBlbmRlbmN5IGZyZWUgbGlicmFyeS5cblxuIFRoZSBob3RzcG90cyBpbiB0aGUgY29kZSBhcmUgYWxyZWFkeSB3cml0dGVuIGluIGltcGVyYXRpdmUgc3R5bGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gc28gd3JpdGluZyBzZXZlcmFsIGRvemVuIHV0aWxzIHdoaWNoIG1heSBiZSBzbG93ZXIgdGhhbiB0aGUgb3JpZ2luYWwgbG9kYXNoLCBkb2VzIG5vdCBtYXR0ZXIgYXMgbXVjaFxuIGNvbnNpZGVyaW5nIHRoZXkgd2lsbCBub3QgYmUgaW52b2tlZCBpbiBob3RzcG90cy4uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eShhcnIpIHtcbiAgICByZXR1cm4gYXJyICYmIGFyci5sZW5ndGggPT09IDA7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5cyhvYmopIHtcbiAgICBpZiAob2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzKG9iaikge1xuICAgIHZhciB2YWxzID0gW107XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxzLnB1c2gob2JqW2tleXNbaV1dKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHM7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgY2FsbGJhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIG9iaktleXMgPSBrZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgb2JqS2V5cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIHZhciBjdXJyS2V5ID0gb2JqS2V5c1tpZHhdO1xuICAgICAgICByZXN1bHQucHVzaChjYWxsYmFjay5jYWxsKG51bGwsIG9ialtjdXJyS2V5XSwgY3VycktleSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcChhcnIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyci5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNhbGxiYWNrLmNhbGwobnVsbCwgYXJyW2lkeF0sIGlkeCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW4oYXJyKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyci5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIHZhciBjdXJySXRlbSA9IGFycltpZHhdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJySXRlbSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoZmxhdHRlbihjdXJySXRlbSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY3Vyckl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3QoYXJyKSB7XG4gICAgcmV0dXJuIGlzRW1wdHkoYXJyKSA/IHVuZGVmaW5lZCA6IGFyclswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHZhciBsZW4gPSBhcnIgJiYgYXJyLmxlbmd0aDtcbiAgICByZXR1cm4gbGVuID8gYXJyW2xlbiAtIDFdIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0b3JDYWxsYmFjaykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpdGVyYXRvckNhbGxiYWNrLmNhbGwobnVsbCwgY29sbGVjdGlvbltpXSwgaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGNvbEtleXMgPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBjb2xLZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgaXRlcmF0b3JDYWxsYmFjay5jYWxsKG51bGwsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIm5vbiBleGhhdXN0aXZlIG1hdGNoXCIpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhpdGVtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSA9PT0gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgRnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gZHJvcChhcnIsIGhvd011Y2gpIHtcbiAgICBpZiAoaG93TXVjaCA9PT0gdm9pZCAwKSB7IGhvd011Y2ggPSAxOyB9XG4gICAgcmV0dXJuIGFyci5zbGljZShob3dNdWNoLCBhcnIubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyLCBob3dNdWNoKSB7XG4gICAgaWYgKGhvd011Y2ggPT09IHZvaWQgMCkgeyBob3dNdWNoID0gMTsgfVxuICAgIHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIGhvd011Y2gpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihhcnIsIHByZWRpY2F0ZSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFycltpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChudWxsLCBpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVqZWN0KGFyciwgcHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZpbHRlcihhcnIsIGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAhcHJlZGljYXRlKGl0ZW0pOyB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaWNrKG9iaiwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJLZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgY3Vyckl0ZW0gPSBvYmpbY3VycktleV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUoY3Vyckl0ZW0pKSB7XG4gICAgICAgICAgICByZXN1bHRbY3VycktleV0gPSBjdXJySXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhvYmosIHByb3ApIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnMoYXJyLCBpdGVtKSB7XG4gICAgcmV0dXJuIGZpbmQoYXJyLCBmdW5jdGlvbiAoY3Vyckl0ZW0pIHsgcmV0dXJuIGN1cnJJdGVtID09PSBpdGVtOyB9KSAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlO1xufVxuLyoqXG4gKiBzaGFsbG93IGNsb25lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUFycihhcnIpIHtcbiAgICB2YXIgbmV3QXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3QXJyLnB1c2goYXJyW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0Fycjtcbn1cbi8qKlxuICogc2hhbGxvdyBjbG9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVPYmoob2JqKSB7XG4gICAgdmFyIGNsb25lZE9iaiA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIGNsb25lZE9ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsb25lZE9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kKGFyciwgcHJlZGljYXRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChudWxsLCBpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWxsKGFyciwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGZvdW5kID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChudWxsLCBpdGVtKSkge1xuICAgICAgICAgICAgZm91bmQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlKGFyck9yT2JqLCBpdGVyYXRvciwgaW5pdGlhbCkge1xuICAgIHZhciBpc0FyciA9IEFycmF5LmlzQXJyYXkoYXJyT3JPYmopO1xuICAgIHZhciB2YWxzID0gaXNBcnIgPyBhcnJPck9iaiA6IHZhbHVlcyhhcnJPck9iaik7XG4gICAgdmFyIG9iaktleXMgPSBpc0FyciA/IFtdIDoga2V5cyhhcnJPck9iaik7XG4gICAgdmFyIGFjY3VtdWxhdG9yID0gaW5pdGlhbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRvci5jYWxsKG51bGwsIGFjY3VtdWxhdG9yLCB2YWxzW2ldLCBpc0FyciA/IGkgOiBvYmpLZXlzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QoYXJyKSB7XG4gICAgcmV0dXJuIHJlamVjdChhcnIsIGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtID09PSBudWxsIHx8IGl0ZW0gPT09IHVuZGVmaW5lZDsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5pcShhcnIsIGlkZW50aXR5KSB7XG4gICAgaWYgKGlkZW50aXR5ID09PSB2b2lkIDApIHsgaWRlbnRpdHkgPSBmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbTsgfTsgfVxuICAgIHZhciBpZGVudGl0aWVzID0gW107XG4gICAgcmV0dXJuIHJlZHVjZShhcnIsIGZ1bmN0aW9uIChyZXN1bHQsIGN1cnJJdGVtKSB7XG4gICAgICAgIHZhciBjdXJySWRlbnRpdHkgPSBpZGVudGl0eShjdXJySXRlbSk7XG4gICAgICAgIGlmIChjb250YWlucyhpZGVudGl0aWVzLCBjdXJySWRlbnRpdHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWRlbnRpdGllcy5wdXNoKGN1cnJJZGVudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChjdXJySXRlbSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFydGlhbChmdW5jKSB7XG4gICAgdmFyIHJlc3RBcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgcmVzdEFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBmaXJzdEFyZyA9IFtudWxsXTtcbiAgICB2YXIgYWxsQXJncyA9IGZpcnN0QXJnLmNvbmNhdChyZXN0QXJncyk7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLmJpbmQuYXBwbHkoZnVuYywgYWxsQXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZWdFeHA7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE9iamVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBldmVyeShhcnIsIHByZWRpY2F0ZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghcHJlZGljYXRlKGFycltpXSwgaSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlKGFyciwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHJlamVjdChhcnIsIGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBjb250YWlucyh2YWx1ZXMsIGl0ZW0pOyB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb21lKGFyciwgcHJlZGljYXRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnIsIHZhbHVlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycltpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnkoYXJyLCBvcmRlckZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2xvbmVBcnIoYXJyKTtcbiAgICByZXN1bHQuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gb3JkZXJGdW5jKGEpIC0gb3JkZXJGdW5jKGIpOyB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHppcE9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJjYW4ndCB6aXBPYmplY3Qgd2l0aCBkaWZmZXJlbnQgbnVtYmVyIG9mIGtleXMgYW5kIHZhbHVlcyFcIik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0W2tleXNbaV1dID0gdmFsdWVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBtdXRhdGVzISAoYW5kIHJldHVybnMpIHRhcmdldFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJTb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICB2YXIgY3VyclNvdXJjZUtleXMgPSBrZXlzKGN1clNvdXJjZSk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3VyclNvdXJjZUtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjdXJyS2V5ID0gY3VyclNvdXJjZUtleXNbal07XG4gICAgICAgICAgICB0YXJnZXRbY3VycktleV0gPSBjdXJTb3VyY2VbY3VycktleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8qKlxuICogbXV0YXRlcyEgKGFuZCByZXR1cm5zKSB0YXJnZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbk5vT3ZlcndyaXRlKHRhcmdldCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJTb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY3VyU291cmNlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJTb3VyY2VLZXlzID0ga2V5cyhjdXJTb3VyY2UpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGN1cnJTb3VyY2VLZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgY3VycktleSA9IGN1cnJTb3VyY2VLZXlzW2pdO1xuICAgICAgICAgICAgaWYgKCFoYXModGFyZ2V0LCBjdXJyS2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtjdXJyS2V5XSA9IGN1clNvdXJjZVtjdXJyS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRzKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXNzaWduTm9PdmVyd3JpdGUuYXBwbHkobnVsbCwgW3t9XS5jb25jYXQoc291cmNlcykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnkoYXJyLCBncm91cEtleUZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yRWFjaChhcnIsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciBjdXJyR3JvdXBLZXkgPSBncm91cEtleUZ1bmMoaXRlbSk7XG4gICAgICAgIHZhciBjdXJyR3JvdXBBcnIgPSByZXN1bHRbY3Vyckdyb3VwS2V5XTtcbiAgICAgICAgaWYgKGN1cnJHcm91cEFycikge1xuICAgICAgICAgICAgY3Vyckdyb3VwQXJyLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbY3Vyckdyb3VwS2V5XSA9IFtpdGVtXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIE1lcmdlIG9iajIgaW50byBvYmoxLlxuICogV2lsbCBvdmVyd3JpdGUgZXhpc3RpbmcgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKG9iajEsIG9iajIpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2xvbmVPYmoob2JqMSk7XG4gICAgdmFyIGtleXMyID0ga2V5cyhvYmoyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzMltpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqMltrZXldO1xuICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIE5PT1AoKSB7IH1cbmV4cG9ydCBmdW5jdGlvbiBJREVOVElUWShpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vKipcbiAqIFdpbGwgcmV0dXJuIGEgbmV3IHBhY2tlZCBhcnJheSB3aXRoIHNhbWUgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFja0FycmF5KGhvbGV5QXJyKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9sZXlBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG9yZ1ZhbHVlID0gaG9sZXlBcnJbaV07XG4gICAgICAgIHJlc3VsdC5wdXNoKG9yZ1ZhbHVlICE9PSB1bmRlZmluZWQgPyBvcmdWYWx1ZSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gUFJJTlRfRVJST1IobXNnKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLSBjYW4ndCBvdmVycmlkZSBnbG9iYWwuY29uc29sZSBpbiBub2RlLmpzICovXG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiICsgbXNnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gUFJJTlRfV0FSTklORyhtc2cpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIGNhbid0IG92ZXJyaWRlIGdsb2JhbC5jb25zb2xlIGluIG5vZGUuanMqL1xuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAvLyBUT0RPOiBtb2RpZnkgZG9jcyBhY2NvcmRpbmdseVxuICAgICAgICBjb25zb2xlLndhcm4oXCJXYXJuaW5nOiBcIiArIG1zZyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRVMyMDE1TWFwU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlNaXhpbnMoZGVyaXZlZEN0b3IsIGJhc2VDdG9ycykge1xuICAgIGJhc2VDdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChiYXNlQ3Rvcikge1xuICAgICAgICB2YXIgYmFzZVByb3RvID0gYmFzZUN0b3IucHJvdG90eXBlO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlUHJvdG8pLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiYXNlUHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2VQcm90bywgcHJvcE5hbWUpO1xuICAgICAgICAgICAgLy8gSGFuZGxlIEFjY2Vzc29yc1xuICAgICAgICAgICAgaWYgKGJhc2VQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgICAgICAgICAgIChiYXNlUHJvcERlc2NyaXB0b3IuZ2V0IHx8IGJhc2VQcm9wRGVzY3JpcHRvci5zZXQpKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlcml2ZWRDdG9yLnByb3RvdHlwZSwgcHJvcE5hbWUsIGJhc2VQcm9wRGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXJpdmVkQ3Rvci5wcm90b3R5cGVbcHJvcE5hbWVdID0gYmFzZUN0b3IucHJvdG90eXBlW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyBiYXNlIG9uOiBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL2Jsb2IvYjk3YzBkMmQ0ODdlOGM1MDc2ZThiZDg5N2UwZGNkNDYyMmQzMTg0Ni9zcmMvdXRpbC5qcyNMMjAxLUwyMTZcbmV4cG9ydCBmdW5jdGlvbiB0b0Zhc3RQcm9wZXJ0aWVzKHRvQmVjb21lRmFzdCkge1xuICAgIGZ1bmN0aW9uIEZha2VDb25zdHJ1Y3RvcigpIHsgfVxuICAgIC8vIElmIG91ciBvYmplY3QgaXMgdXNlZCBhcyBhIGNvbnN0cnVjdG9yIGl0IHdvdWxkIHJlY2VpdmVcbiAgICBGYWtlQ29uc3RydWN0b3IucHJvdG90eXBlID0gdG9CZWNvbWVGYXN0O1xuICAgIHZhciBmYWtlSW5zdGFuY2UgPSBuZXcgRmFrZUNvbnN0cnVjdG9yKCk7XG4gICAgZnVuY3Rpb24gZmFrZUFjY2VzcygpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBmYWtlSW5zdGFuY2UuYmFyO1xuICAgIH1cbiAgICAvLyBoZWxwIFY4IHVuZGVyc3RhbmQgdGhpcyBpcyBhIFwicmVhbFwiIHByb3RvdHlwZSBieSBhY3R1YWxseSB1c2luZ1xuICAgIC8vIHRoZSBmYWtlIGluc3RhbmNlLlxuICAgIGZha2VBY2Nlc3MoKTtcbiAgICBmYWtlQWNjZXNzKCk7XG4gICAgcmV0dXJuIHRvQmVjb21lRmFzdDtcbiAgICAvLyBFdmFsIHByZXZlbnRzIG9wdGltaXphdGlvbiBvZiB0aGlzIG1ldGhvZCAoZXZlbiB0aG91Z2ggdGhpcyBpcyBkZWFkIGNvZGUpXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBldmFsKHRvQmVjb21lRmFzdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGVlayhhcnIpIHtcbiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gZm9yIHBlcmZvcm1hbmNlIHRyYWNpbmcqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGZ1bmMpIHtcbiAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB2YXIgdmFsID0gZnVuYygpO1xuICAgIHZhciBlbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB2YXIgdG90YWwgPSBlbmQgLSBzdGFydDtcbiAgICByZXR1cm4geyB0aW1lOiB0b3RhbCwgdmFsdWU6IHZhbCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/utils/utils.js\n");

/***/ }),

/***/ "./node_modules/chevrotain/lib_esm/src/version.js":
/*!********************************************************!*\
  !*** ./node_modules/chevrotain/lib_esm/src/version.js ***!
  \********************************************************/
/*! exports provided: VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return VERSION; });\n// needs a separate module as this is required inside chevrotain productive code\n// and also in the entry point for webpack(api.ts).\n// A separate file avoids cyclic dependencies and webpack errors.\nvar VERSION = \"6.5.0\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hldnJvdGFpbi9saWJfZXNtL3NyYy92ZXJzaW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoZXZyb3RhaW4vbGliX2VzbS9zcmMvdmVyc2lvbi5qcz9jZTEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG5lZWRzIGEgc2VwYXJhdGUgbW9kdWxlIGFzIHRoaXMgaXMgcmVxdWlyZWQgaW5zaWRlIGNoZXZyb3RhaW4gcHJvZHVjdGl2ZSBjb2RlXG4vLyBhbmQgYWxzbyBpbiB0aGUgZW50cnkgcG9pbnQgZm9yIHdlYnBhY2soYXBpLnRzKS5cbi8vIEEgc2VwYXJhdGUgZmlsZSBhdm9pZHMgY3ljbGljIGRlcGVuZGVuY2llcyBhbmQgd2VicGFjayBlcnJvcnMuXG5leHBvcnQgdmFyIFZFUlNJT04gPSBcIjYuNS4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chevrotain/lib_esm/src/version.js\n");

/***/ }),

/***/ "./node_modules/java-parser/node_modules/lodash/lodash.js":
/*!****************************************************************!*\
  !*** ./node_modules/java-parser/node_modules/lodash/lodash.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.15';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.\n      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/[\\r\\n]/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      // Like with sourceURL, we take care to not check the option's prototype,\n      // as this configuration is a code injection vector.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/node_modules/lodash/lodash.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/comments.js":
/*!**************************************************!*\
  !*** ./node_modules/java-parser/src/comments.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst _ = __webpack_require__(/*! lodash */ \"./node_modules/java-parser/node_modules/lodash/lodash.js\");\n\n/**\n * Search where is the position of the comment in the token array by\n * using dichotomic search.\n * @param {*} tokens ordered array of tokens\n * @param {*} comment comment token\n * @return the position of the token next to the comment\n */\nfunction findUpperBoundToken(tokens, comment) {\n  let diff;\n  let i;\n  let current;\n\n  let len = tokens.length;\n  i = 0;\n\n  while (len) {\n    diff = len >>> 1;\n    current = i + diff;\n    if (tokens[current].startOffset > comment.startOffset) {\n      len = diff;\n    } else {\n      i = current + 1;\n      len -= diff + 1;\n    }\n  }\n  return i;\n}\n\nfunction isPrettierIgnoreComment(comment) {\n  return comment.image.match(\n    /(\\/\\/(\\s*)prettier-ignore(\\s*))|(\\/\\*(\\s*)prettier-ignore(\\s*)\\*\\/)/gm\n  );\n}\n\nfunction isFormatterOffOnComment(comment) {\n  return comment.image.match(\n    /(\\/\\/(\\s*)@formatter:(off|on)(\\s*))|(\\/\\*(\\s*)@formatter:(off|on)(\\s*)\\*\\/)/gm\n  );\n}\n\n/**\n * Pre-processing of tokens in order to\n * complete the parser's mostEnclosiveCstNodeByStartOffset and mostEnclosiveCstNodeByEndOffset structures.\n *\n * @param {ITokens[]} tokens - array of tokens\n * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset\n * @param {{[endOffset: number]: CSTNode}} mostEnclosiveCstNodeByEndOffset\n */\nfunction completeMostEnclosiveCSTNodeByOffset(\n  tokens,\n  mostEnclosiveCstNodeByStartOffset,\n  mostEnclosiveCstNodeByEndOffset\n) {\n  tokens.forEach(token => {\n    if (mostEnclosiveCstNodeByStartOffset[token.startOffset] === undefined) {\n      mostEnclosiveCstNodeByStartOffset[token.startOffset] = token;\n    }\n\n    if (mostEnclosiveCstNodeByEndOffset[token.endOffset] === undefined) {\n      mostEnclosiveCstNodeByEndOffset[token.endOffset] = token;\n    }\n  });\n}\n\nfunction extendRangeOffset(comments, tokens) {\n  let position;\n  comments.forEach(comment => {\n    position = findUpperBoundToken(tokens, comment);\n\n    const extendedStartOffset =\n      position - 1 < 0 ? comment.startOffset : tokens[position - 1].endOffset;\n    const extendedEndOffset =\n      position == tokens.length\n        ? comment.endOffset\n        : tokens[position].startOffset;\n    comment.extendedOffset = {\n      startOffset: extendedStartOffset,\n      endOffset: extendedEndOffset\n    };\n  });\n}\n\n/**\n * Create two data structures we use to know at which offset a comment can be attached.\n * - commentsByExtendedStartOffset: map a comment by the endOffset of the previous token.\n * - commentsByExtendedEndOffset: map a comment by the startOffset of the next token\n *\n * @param {ITokens[]} tokens - array of tokens\n *\n * @return {{commentsByExtendedStartOffset: {[extendedStartOffset: number]: Comment[]}, commentsByExtendedEndOffset: {[extendedEndOffset: number]: Comment[]}}}\n */\nfunction mapCommentsByExtendedRange(comments) {\n  const commentsByExtendedEndOffset = {};\n  const commentsByExtendedStartOffset = {};\n\n  comments.forEach(comment => {\n    const extendedStartOffset = comment.extendedOffset.startOffset;\n    const extendedEndOffset = comment.extendedOffset.endOffset;\n\n    if (commentsByExtendedEndOffset[extendedEndOffset] === undefined) {\n      commentsByExtendedEndOffset[extendedEndOffset] = [comment];\n    } else {\n      commentsByExtendedEndOffset[extendedEndOffset].push(comment);\n    }\n\n    if (commentsByExtendedStartOffset[extendedStartOffset] === undefined) {\n      commentsByExtendedStartOffset[extendedStartOffset] = [comment];\n    } else {\n      commentsByExtendedStartOffset[extendedStartOffset].push(comment);\n    }\n  });\n\n  return { commentsByExtendedEndOffset, commentsByExtendedStartOffset };\n}\n\n/**\n * Determine if a comment should be attached as a trailing comment to a specific node.\n * A comment should be trailing if it is on the same line than the previous token and\n * not on the same line than the next token\n *\n * @param {*} comment\n * @param {CSTNode} node\n * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset\n */\nfunction shouldAttachTrailingComments(\n  comment,\n  node,\n  mostEnclosiveCstNodeByStartOffset\n) {\n  if (isPrettierIgnoreComment(comment)) {\n    return false;\n  }\n\n  const nextNode =\n    mostEnclosiveCstNodeByStartOffset[comment.extendedOffset.endOffset];\n\n  // Last node of the file\n  if (nextNode === undefined) {\n    return true;\n  }\n\n  const nodeEndLine =\n    node.location !== undefined ? node.location.endLine : node.endLine;\n\n  if (comment.startLine !== nodeEndLine) {\n    return false;\n  }\n\n  const nextNodeStartLine =\n    nextNode.location !== undefined\n      ? nextNode.location.startLine\n      : nextNode.startLine;\n  return comment.endLine !== nextNodeStartLine;\n}\n\n/**\n * Attach comments to the most enclosive CSTNode (node or token)\n *\n * @param {ITokens[]} tokens\n * @param {*} comments\n * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset\n * @param {{[endOffset: number]: CSTNode}} mostEnclosiveCstNodeByEndOffset\n */\nfunction attachComments(\n  tokens,\n  comments,\n  mostEnclosiveCstNodeByStartOffset,\n  mostEnclosiveCstNodeByEndOffset\n) {\n  // Edge case: only comments in the file\n  if (tokens.length === 0) {\n    mostEnclosiveCstNodeByStartOffset[NaN].leadingComments = comments;\n    return;\n  }\n\n  // Pre-processing phase to complete the data structures we need to attach\n  // a comment to the right place\n  completeMostEnclosiveCSTNodeByOffset(\n    tokens,\n    mostEnclosiveCstNodeByStartOffset,\n    mostEnclosiveCstNodeByEndOffset\n  );\n\n  extendRangeOffset(comments, tokens);\n  const {\n    commentsByExtendedStartOffset,\n    commentsByExtendedEndOffset\n  } = mapCommentsByExtendedRange(comments);\n\n  /*\n    This set is here to ensure that we attach comments only once\n    If a comment is attached to a node or token, we remove it from this set\n  */\n  const commentsToAttach = new Set(comments);\n\n  // Attach comments as trailing comments if desirable\n  Object.keys(mostEnclosiveCstNodeByEndOffset).forEach(endOffset => {\n    // We look if some comments is directly following this node/token\n    if (commentsByExtendedStartOffset[endOffset] !== undefined) {\n      const nodeTrailingComments = commentsByExtendedStartOffset[\n        endOffset\n      ].filter(comment => {\n        return (\n          shouldAttachTrailingComments(\n            comment,\n            mostEnclosiveCstNodeByEndOffset[endOffset],\n            mostEnclosiveCstNodeByStartOffset\n          ) && commentsToAttach.has(comment)\n        );\n      });\n\n      if (nodeTrailingComments.length > 0) {\n        mostEnclosiveCstNodeByEndOffset[\n          endOffset\n        ].trailingComments = nodeTrailingComments;\n      }\n\n      nodeTrailingComments.forEach(comment => {\n        commentsToAttach.delete(comment);\n      });\n    }\n  });\n\n  // Attach rest of comments as leading comments\n  Object.keys(mostEnclosiveCstNodeByStartOffset).forEach(startOffset => {\n    // We look if some comments is directly preceding this node/token\n    if (commentsByExtendedEndOffset[startOffset] !== undefined) {\n      const nodeLeadingComments = commentsByExtendedEndOffset[\n        startOffset\n      ].filter(comment => commentsToAttach.has(comment));\n\n      if (nodeLeadingComments.length > 0) {\n        mostEnclosiveCstNodeByStartOffset[\n          startOffset\n        ].leadingComments = nodeLeadingComments;\n      }\n\n      // prettier ignore support\n      for (let i = 0; i < nodeLeadingComments.length; i++) {\n        if (isPrettierIgnoreComment(nodeLeadingComments[i])) {\n          mostEnclosiveCstNodeByStartOffset[startOffset].ignore = true;\n          break;\n        }\n      }\n    }\n  });\n}\n\n/**\n * Create pairs of formatter:off and formatter:on\n * @param comments\n * @returns pairs of formatter:off and formatter:on\n */\nfunction matchFormatterOffOnPairs(comments) {\n  const onOffComments = comments.filter(comment =>\n    isFormatterOffOnComment(comment)\n  );\n\n  let isPreviousCommentOff = false;\n  let isCurrentCommentOff = true;\n  const pairs = [];\n  let paired = {};\n  onOffComments.forEach(comment => {\n    isCurrentCommentOff = comment.image.slice(-3) === \"off\";\n\n    if (!isPreviousCommentOff) {\n      if (isCurrentCommentOff) {\n        paired.off = comment;\n      }\n    } else {\n      if (!isCurrentCommentOff) {\n        paired.on = comment;\n        pairs.push(paired);\n        paired = {};\n      }\n    }\n    isPreviousCommentOff = isCurrentCommentOff;\n  });\n\n  if (onOffComments.length > 0 && isCurrentCommentOff) {\n    paired.on = undefined;\n    pairs.push(paired);\n  }\n\n  return pairs;\n}\n\n/**\n * Check if the node is between formatter:off and formatter:on and change his ignore state\n * @param node\n * @param commentPairs\n */\nfunction shouldNotFormat(node, commentPairs) {\n  const matchingPair = _.findLast(\n    commentPairs,\n    comment => comment.off.endOffset < node.location.startOffset\n  );\n  if (\n    matchingPair !== undefined &&\n    (matchingPair.on === undefined ||\n      matchingPair.on.startOffset > node.location.endOffset)\n  ) {\n    node.ignore = true;\n  }\n}\n\nmodule.exports = {\n  matchFormatterOffOnPairs,\n  shouldNotFormat,\n  attachComments\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/comments.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/java-parser/src/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst JavaLexer = __webpack_require__(/*! ./lexer */ \"./node_modules/java-parser/src/lexer.js\");\nconst JavaParser = __webpack_require__(/*! ./parser */ \"./node_modules/java-parser/src/parser.js\");\nconst { attachComments, matchFormatterOffOnPairs } = __webpack_require__(/*! ./comments */ \"./node_modules/java-parser/src/comments.js\");\n\nconst parser = new JavaParser();\n\nconst BaseJavaCstVisitor = parser.getBaseCstVisitorConstructor();\nconst BaseJavaCstVisitorWithDefaults = parser.getBaseCstVisitorConstructorWithDefaults();\n\nfunction parse(inputText, entryPoint = \"compilationUnit\") {\n  // Lex\n  const lexResult = JavaLexer.tokenize(inputText);\n\n  if (lexResult.errors.length > 0) {\n    const firstError = lexResult.errors[0];\n    throw Error(\n      \"Sad sad panda, lexing errors detected in line: \" +\n        firstError.line +\n        \", column: \" +\n        firstError.column +\n        \"!\\n\" +\n        firstError.message\n    );\n  }\n\n  parser.input = lexResult.tokens;\n  parser.mostEnclosiveCstNodeByStartOffset = {};\n  parser.mostEnclosiveCstNodeByEndOffset = {};\n\n  parser.setOnOffCommentPairs(\n    matchFormatterOffOnPairs(lexResult.groups.comments)\n  );\n\n  // Automatic CST created when parsing\n  const cst = parser[entryPoint]();\n\n  if (parser.errors.length > 0) {\n    const error = parser.errors[0];\n    throw Error(\n      \"Sad sad panda, parsing errors detected in line: \" +\n        error.token.startLine +\n        \", column: \" +\n        error.token.startColumn +\n        \"!\\n\" +\n        error.message +\n        \"!\\n\\t->\" +\n        error.context.ruleStack.join(\"\\n\\t->\")\n    );\n  }\n\n  attachComments(\n    lexResult.tokens,\n    lexResult.groups.comments,\n    parser.mostEnclosiveCstNodeByStartOffset,\n    parser.mostEnclosiveCstNodeByEndOffset\n  );\n\n  return cst;\n}\n\nmodule.exports = {\n  parse,\n  BaseJavaCstVisitor,\n  BaseJavaCstVisitorWithDefaults\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2phdmEtcGFyc2VyL3NyYy9pbmRleC5qcz9mN2YwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgSmF2YUxleGVyID0gcmVxdWlyZShcIi4vbGV4ZXJcIik7XG5jb25zdCBKYXZhUGFyc2VyID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuY29uc3QgeyBhdHRhY2hDb21tZW50cywgbWF0Y2hGb3JtYXR0ZXJPZmZPblBhaXJzIH0gPSByZXF1aXJlKFwiLi9jb21tZW50c1wiKTtcblxuY29uc3QgcGFyc2VyID0gbmV3IEphdmFQYXJzZXIoKTtcblxuY29uc3QgQmFzZUphdmFDc3RWaXNpdG9yID0gcGFyc2VyLmdldEJhc2VDc3RWaXNpdG9yQ29uc3RydWN0b3IoKTtcbmNvbnN0IEJhc2VKYXZhQ3N0VmlzaXRvcldpdGhEZWZhdWx0cyA9IHBhcnNlci5nZXRCYXNlQ3N0VmlzaXRvckNvbnN0cnVjdG9yV2l0aERlZmF1bHRzKCk7XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0VGV4dCwgZW50cnlQb2ludCA9IFwiY29tcGlsYXRpb25Vbml0XCIpIHtcbiAgLy8gTGV4XG4gIGNvbnN0IGxleFJlc3VsdCA9IEphdmFMZXhlci50b2tlbml6ZShpbnB1dFRleHQpO1xuXG4gIGlmIChsZXhSZXN1bHQuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBmaXJzdEVycm9yID0gbGV4UmVzdWx0LmVycm9yc1swXTtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiU2FkIHNhZCBwYW5kYSwgbGV4aW5nIGVycm9ycyBkZXRlY3RlZCBpbiBsaW5lOiBcIiArXG4gICAgICAgIGZpcnN0RXJyb3IubGluZSArXG4gICAgICAgIFwiLCBjb2x1bW46IFwiICtcbiAgICAgICAgZmlyc3RFcnJvci5jb2x1bW4gK1xuICAgICAgICBcIiFcXG5cIiArXG4gICAgICAgIGZpcnN0RXJyb3IubWVzc2FnZVxuICAgICk7XG4gIH1cblxuICBwYXJzZXIuaW5wdXQgPSBsZXhSZXN1bHQudG9rZW5zO1xuICBwYXJzZXIubW9zdEVuY2xvc2l2ZUNzdE5vZGVCeVN0YXJ0T2Zmc2V0ID0ge307XG4gIHBhcnNlci5tb3N0RW5jbG9zaXZlQ3N0Tm9kZUJ5RW5kT2Zmc2V0ID0ge307XG5cbiAgcGFyc2VyLnNldE9uT2ZmQ29tbWVudFBhaXJzKFxuICAgIG1hdGNoRm9ybWF0dGVyT2ZmT25QYWlycyhsZXhSZXN1bHQuZ3JvdXBzLmNvbW1lbnRzKVxuICApO1xuXG4gIC8vIEF1dG9tYXRpYyBDU1QgY3JlYXRlZCB3aGVuIHBhcnNpbmdcbiAgY29uc3QgY3N0ID0gcGFyc2VyW2VudHJ5UG9pbnRdKCk7XG5cbiAgaWYgKHBhcnNlci5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVycm9yID0gcGFyc2VyLmVycm9yc1swXTtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiU2FkIHNhZCBwYW5kYSwgcGFyc2luZyBlcnJvcnMgZGV0ZWN0ZWQgaW4gbGluZTogXCIgK1xuICAgICAgICBlcnJvci50b2tlbi5zdGFydExpbmUgK1xuICAgICAgICBcIiwgY29sdW1uOiBcIiArXG4gICAgICAgIGVycm9yLnRva2VuLnN0YXJ0Q29sdW1uICtcbiAgICAgICAgXCIhXFxuXCIgK1xuICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgXCIhXFxuXFx0LT5cIiArXG4gICAgICAgIGVycm9yLmNvbnRleHQucnVsZVN0YWNrLmpvaW4oXCJcXG5cXHQtPlwiKVxuICAgICk7XG4gIH1cblxuICBhdHRhY2hDb21tZW50cyhcbiAgICBsZXhSZXN1bHQudG9rZW5zLFxuICAgIGxleFJlc3VsdC5ncm91cHMuY29tbWVudHMsXG4gICAgcGFyc2VyLm1vc3RFbmNsb3NpdmVDc3ROb2RlQnlTdGFydE9mZnNldCxcbiAgICBwYXJzZXIubW9zdEVuY2xvc2l2ZUNzdE5vZGVCeUVuZE9mZnNldFxuICApO1xuXG4gIHJldHVybiBjc3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZSxcbiAgQmFzZUphdmFDc3RWaXNpdG9yLFxuICBCYXNlSmF2YUNzdFZpc2l0b3JXaXRoRGVmYXVsdHNcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/index.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/lexer.js":
/*!***********************************************!*\
  !*** ./node_modules/java-parser/src/lexer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst chevrotain = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\nconst { allTokens } = __webpack_require__(/*! ./tokens */ \"./node_modules/java-parser/src/tokens.js\");\nconst { getSkipValidations } = __webpack_require__(/*! ./utils */ \"./node_modules/java-parser/src/utils.js\");\n\nconst Lexer = chevrotain.Lexer;\nconst JavaLexer = new Lexer(allTokens, {\n  ensureOptimizations: true,\n  skipValidations: getSkipValidations()\n});\n\nmodule.exports = JavaLexer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL2xleGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2phdmEtcGFyc2VyL3NyYy9sZXhlci5qcz84YTU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY2hldnJvdGFpbiA9IHJlcXVpcmUoXCJjaGV2cm90YWluXCIpO1xuY29uc3QgeyBhbGxUb2tlbnMgfSA9IHJlcXVpcmUoXCIuL3Rva2Vuc1wiKTtcbmNvbnN0IHsgZ2V0U2tpcFZhbGlkYXRpb25zIH0gPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuY29uc3QgTGV4ZXIgPSBjaGV2cm90YWluLkxleGVyO1xuY29uc3QgSmF2YUxleGVyID0gbmV3IExleGVyKGFsbFRva2Vucywge1xuICBlbnN1cmVPcHRpbWl6YXRpb25zOiB0cnVlLFxuICBza2lwVmFsaWRhdGlvbnM6IGdldFNraXBWYWxpZGF0aW9ucygpXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBKYXZhTGV4ZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/lexer.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/parser.js":
/*!************************************************!*\
  !*** ./node_modules/java-parser/src/parser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { Parser, isRecognitionException } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\nconst { allTokens, tokens: t } = __webpack_require__(/*! ./tokens */ \"./node_modules/java-parser/src/tokens.js\");\nconst lexicalStructure = __webpack_require__(/*! ./productions/lexical-structure */ \"./node_modules/java-parser/src/productions/lexical-structure.js\");\nconst typesValuesVariables = __webpack_require__(/*! ./productions/types-values-and-variables */ \"./node_modules/java-parser/src/productions/types-values-and-variables.js\");\nconst names = __webpack_require__(/*! ./productions/names */ \"./node_modules/java-parser/src/productions/names.js\");\nconst packagesModules = __webpack_require__(/*! ./productions/packages-and-modules */ \"./node_modules/java-parser/src/productions/packages-and-modules.js\");\nconst classes = __webpack_require__(/*! ./productions/classes */ \"./node_modules/java-parser/src/productions/classes.js\");\nconst interfaces = __webpack_require__(/*! ./productions/interfaces */ \"./node_modules/java-parser/src/productions/interfaces.js\");\nconst arrays = __webpack_require__(/*! ./productions/arrays */ \"./node_modules/java-parser/src/productions/arrays.js\");\nconst blocksStatements = __webpack_require__(/*! ./productions/blocks-and-statements */ \"./node_modules/java-parser/src/productions/blocks-and-statements.js\");\nconst expressions = __webpack_require__(/*! ./productions/expressions */ \"./node_modules/java-parser/src/productions/expressions.js\");\nconst { getSkipValidations } = __webpack_require__(/*! ./utils */ \"./node_modules/java-parser/src/utils.js\");\nconst { shouldNotFormat } = __webpack_require__(/*! ./comments */ \"./node_modules/java-parser/src/comments.js\");\n\n/**\n * This parser attempts to strongly align with the specs style at:\n * -  https://docs.oracle.com/javase/specs/jls/se11/html/jls-19.html\n *\n * Deviations from the spec will be marked.\n *\n * Note that deviations from the spec do not mean deviations from Java Grammar.\n * Rather it means an **equivalent** grammar which was written differently, e.g:\n * - LL(k) vs LR(K)\n * - Left Recursions vs Repetitions\n * - NonTerminals combined together or divided to sub-NonTerminals\n * - ...\n *\n * A special type of spec deviations are the \"super grammar\" kind.\n * This means that the parser has been defined in such a way that it accept a\n * **strict superset** of the inputs the official grammar accepts.\n *\n * This technique is used to simplify the parser when narrowing the set\n * of accepted inputs can more easily be done in a post parsing phase.\n *\n * TODO: document guide lines for using back tracking\n *\n */\nclass JavaParser extends Parser {\n  constructor() {\n    super(allTokens, {\n      maxLookahead: 1,\n      nodeLocationTracking: \"full\",\n      // traceInitPerf: 2,\n      skipValidations: getSkipValidations()\n    });\n\n    const $ = this;\n\n    this.mostEnclosiveCstNodeByStartOffset = {};\n    this.mostEnclosiveCstNodeByEndOffset = {};\n\n    // ---------------------\n    // Productions from §3 (Lexical Structure)\n    // ---------------------\n    // TODO: move this rule to the correct file\n    $.RULE(\"typeIdentifier\", () => {\n      // TODO: implement: Identifier but not var in the lexer\n      $.CONSUME(t.Identifier);\n    });\n\n    // Include the productions from all \"chapters\".\n    lexicalStructure.defineRules.call(this, $, t);\n    typesValuesVariables.defineRules.call(this, $, t);\n    names.defineRules.call(this, $, t);\n    classes.defineRules.call(this, $, t);\n    packagesModules.defineRules.call(this, $, t);\n    interfaces.defineRules.call(this, $, t);\n    arrays.defineRules.call(this, $, t);\n    blocksStatements.defineRules.call(this, $, t);\n    expressions.defineRules.call(this, $, t);\n\n    this.firstForUnaryExpressionNotPlusMinus = [];\n    this.performSelfAnalysis();\n    this.firstForUnaryExpressionNotPlusMinus = expressions.computeFirstForUnaryExpressionNotPlusMinus.call(\n      this\n    );\n  }\n\n  cstPostNonTerminal(ruleCstResult, ruleName) {\n    super.cstPostNonTerminal(ruleCstResult, ruleName);\n    if (this.isBackTracking() === false) {\n      this.mostEnclosiveCstNodeByStartOffset[\n        ruleCstResult.location.startOffset\n      ] = ruleCstResult;\n      this.mostEnclosiveCstNodeByEndOffset[\n        ruleCstResult.location.endOffset\n      ] = ruleCstResult;\n\n      shouldNotFormat(ruleCstResult, this.onOffCommentPairs);\n    }\n  }\n\n  BACKTRACK_LOOKAHEAD(production, errValue = false) {\n    return this.ACTION(() => {\n      this.isBackTrackingStack.push(1);\n      // TODO: \"saveRecogState\" does not handle the occurrence stack\n      const orgState = this.saveRecogState();\n      try {\n        // hack to enable outputting none CST values from grammar rules.\n        this.outputCst = false;\n        return production.call(this);\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return errValue;\n        }\n        throw e;\n      } finally {\n        this.outputCst = true;\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    });\n  }\n\n  setOnOffCommentPairs(onOffCommentPairs) {\n    this.onOffCommentPairs = onOffCommentPairs;\n  }\n}\n\nmodule.exports = JavaParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL3BhcnNlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qYXZhLXBhcnNlci9zcmMvcGFyc2VyLmpzPzc2YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7IFBhcnNlciwgaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbiB9ID0gcmVxdWlyZShcImNoZXZyb3RhaW5cIik7XG5jb25zdCB7IGFsbFRva2VucywgdG9rZW5zOiB0IH0gPSByZXF1aXJlKFwiLi90b2tlbnNcIik7XG5jb25zdCBsZXhpY2FsU3RydWN0dXJlID0gcmVxdWlyZShcIi4vcHJvZHVjdGlvbnMvbGV4aWNhbC1zdHJ1Y3R1cmVcIik7XG5jb25zdCB0eXBlc1ZhbHVlc1ZhcmlhYmxlcyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25zL3R5cGVzLXZhbHVlcy1hbmQtdmFyaWFibGVzXCIpO1xuY29uc3QgbmFtZXMgPSByZXF1aXJlKFwiLi9wcm9kdWN0aW9ucy9uYW1lc1wiKTtcbmNvbnN0IHBhY2thZ2VzTW9kdWxlcyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25zL3BhY2thZ2VzLWFuZC1tb2R1bGVzXCIpO1xuY29uc3QgY2xhc3NlcyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25zL2NsYXNzZXNcIik7XG5jb25zdCBpbnRlcmZhY2VzID0gcmVxdWlyZShcIi4vcHJvZHVjdGlvbnMvaW50ZXJmYWNlc1wiKTtcbmNvbnN0IGFycmF5cyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25zL2FycmF5c1wiKTtcbmNvbnN0IGJsb2Nrc1N0YXRlbWVudHMgPSByZXF1aXJlKFwiLi9wcm9kdWN0aW9ucy9ibG9ja3MtYW5kLXN0YXRlbWVudHNcIik7XG5jb25zdCBleHByZXNzaW9ucyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25zL2V4cHJlc3Npb25zXCIpO1xuY29uc3QgeyBnZXRTa2lwVmFsaWRhdGlvbnMgfSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgeyBzaG91bGROb3RGb3JtYXQgfSA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzXCIpO1xuXG4vKipcbiAqIFRoaXMgcGFyc2VyIGF0dGVtcHRzIHRvIHN0cm9uZ2x5IGFsaWduIHdpdGggdGhlIHNwZWNzIHN0eWxlIGF0OlxuICogLSAgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2pscy9zZTExL2h0bWwvamxzLTE5Lmh0bWxcbiAqXG4gKiBEZXZpYXRpb25zIGZyb20gdGhlIHNwZWMgd2lsbCBiZSBtYXJrZWQuXG4gKlxuICogTm90ZSB0aGF0IGRldmlhdGlvbnMgZnJvbSB0aGUgc3BlYyBkbyBub3QgbWVhbiBkZXZpYXRpb25zIGZyb20gSmF2YSBHcmFtbWFyLlxuICogUmF0aGVyIGl0IG1lYW5zIGFuICoqZXF1aXZhbGVudCoqIGdyYW1tYXIgd2hpY2ggd2FzIHdyaXR0ZW4gZGlmZmVyZW50bHksIGUuZzpcbiAqIC0gTEwoaykgdnMgTFIoSylcbiAqIC0gTGVmdCBSZWN1cnNpb25zIHZzIFJlcGV0aXRpb25zXG4gKiAtIE5vblRlcm1pbmFscyBjb21iaW5lZCB0b2dldGhlciBvciBkaXZpZGVkIHRvIHN1Yi1Ob25UZXJtaW5hbHNcbiAqIC0gLi4uXG4gKlxuICogQSBzcGVjaWFsIHR5cGUgb2Ygc3BlYyBkZXZpYXRpb25zIGFyZSB0aGUgXCJzdXBlciBncmFtbWFyXCIga2luZC5cbiAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgcGFyc2VyIGhhcyBiZWVuIGRlZmluZWQgaW4gc3VjaCBhIHdheSB0aGF0IGl0IGFjY2VwdCBhXG4gKiAqKnN0cmljdCBzdXBlcnNldCoqIG9mIHRoZSBpbnB1dHMgdGhlIG9mZmljaWFsIGdyYW1tYXIgYWNjZXB0cy5cbiAqXG4gKiBUaGlzIHRlY2huaXF1ZSBpcyB1c2VkIHRvIHNpbXBsaWZ5IHRoZSBwYXJzZXIgd2hlbiBuYXJyb3dpbmcgdGhlIHNldFxuICogb2YgYWNjZXB0ZWQgaW5wdXRzIGNhbiBtb3JlIGVhc2lseSBiZSBkb25lIGluIGEgcG9zdCBwYXJzaW5nIHBoYXNlLlxuICpcbiAqIFRPRE86IGRvY3VtZW50IGd1aWRlIGxpbmVzIGZvciB1c2luZyBiYWNrIHRyYWNraW5nXG4gKlxuICovXG5jbGFzcyBKYXZhUGFyc2VyIGV4dGVuZHMgUGFyc2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoYWxsVG9rZW5zLCB7XG4gICAgICBtYXhMb29rYWhlYWQ6IDEsXG4gICAgICBub2RlTG9jYXRpb25UcmFja2luZzogXCJmdWxsXCIsXG4gICAgICAvLyB0cmFjZUluaXRQZXJmOiAyLFxuICAgICAgc2tpcFZhbGlkYXRpb25zOiBnZXRTa2lwVmFsaWRhdGlvbnMoKVxuICAgIH0pO1xuXG4gICAgY29uc3QgJCA9IHRoaXM7XG5cbiAgICB0aGlzLm1vc3RFbmNsb3NpdmVDc3ROb2RlQnlTdGFydE9mZnNldCA9IHt9O1xuICAgIHRoaXMubW9zdEVuY2xvc2l2ZUNzdE5vZGVCeUVuZE9mZnNldCA9IHt9O1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUHJvZHVjdGlvbnMgZnJvbSDCpzMgKExleGljYWwgU3RydWN0dXJlKVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFRPRE86IG1vdmUgdGhpcyBydWxlIHRvIHRoZSBjb3JyZWN0IGZpbGVcbiAgICAkLlJVTEUoXCJ0eXBlSWRlbnRpZmllclwiLCAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBpbXBsZW1lbnQ6IElkZW50aWZpZXIgYnV0IG5vdCB2YXIgaW4gdGhlIGxleGVyXG4gICAgICAkLkNPTlNVTUUodC5JZGVudGlmaWVyKTtcbiAgICB9KTtcblxuICAgIC8vIEluY2x1ZGUgdGhlIHByb2R1Y3Rpb25zIGZyb20gYWxsIFwiY2hhcHRlcnNcIi5cbiAgICBsZXhpY2FsU3RydWN0dXJlLmRlZmluZVJ1bGVzLmNhbGwodGhpcywgJCwgdCk7XG4gICAgdHlwZXNWYWx1ZXNWYXJpYWJsZXMuZGVmaW5lUnVsZXMuY2FsbCh0aGlzLCAkLCB0KTtcbiAgICBuYW1lcy5kZWZpbmVSdWxlcy5jYWxsKHRoaXMsICQsIHQpO1xuICAgIGNsYXNzZXMuZGVmaW5lUnVsZXMuY2FsbCh0aGlzLCAkLCB0KTtcbiAgICBwYWNrYWdlc01vZHVsZXMuZGVmaW5lUnVsZXMuY2FsbCh0aGlzLCAkLCB0KTtcbiAgICBpbnRlcmZhY2VzLmRlZmluZVJ1bGVzLmNhbGwodGhpcywgJCwgdCk7XG4gICAgYXJyYXlzLmRlZmluZVJ1bGVzLmNhbGwodGhpcywgJCwgdCk7XG4gICAgYmxvY2tzU3RhdGVtZW50cy5kZWZpbmVSdWxlcy5jYWxsKHRoaXMsICQsIHQpO1xuICAgIGV4cHJlc3Npb25zLmRlZmluZVJ1bGVzLmNhbGwodGhpcywgJCwgdCk7XG5cbiAgICB0aGlzLmZpcnN0Rm9yVW5hcnlFeHByZXNzaW9uTm90UGx1c01pbnVzID0gW107XG4gICAgdGhpcy5wZXJmb3JtU2VsZkFuYWx5c2lzKCk7XG4gICAgdGhpcy5maXJzdEZvclVuYXJ5RXhwcmVzc2lvbk5vdFBsdXNNaW51cyA9IGV4cHJlc3Npb25zLmNvbXB1dGVGaXJzdEZvclVuYXJ5RXhwcmVzc2lvbk5vdFBsdXNNaW51cy5jYWxsKFxuICAgICAgdGhpc1xuICAgICk7XG4gIH1cblxuICBjc3RQb3N0Tm9uVGVybWluYWwocnVsZUNzdFJlc3VsdCwgcnVsZU5hbWUpIHtcbiAgICBzdXBlci5jc3RQb3N0Tm9uVGVybWluYWwocnVsZUNzdFJlc3VsdCwgcnVsZU5hbWUpO1xuICAgIGlmICh0aGlzLmlzQmFja1RyYWNraW5nKCkgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLm1vc3RFbmNsb3NpdmVDc3ROb2RlQnlTdGFydE9mZnNldFtcbiAgICAgICAgcnVsZUNzdFJlc3VsdC5sb2NhdGlvbi5zdGFydE9mZnNldFxuICAgICAgXSA9IHJ1bGVDc3RSZXN1bHQ7XG4gICAgICB0aGlzLm1vc3RFbmNsb3NpdmVDc3ROb2RlQnlFbmRPZmZzZXRbXG4gICAgICAgIHJ1bGVDc3RSZXN1bHQubG9jYXRpb24uZW5kT2Zmc2V0XG4gICAgICBdID0gcnVsZUNzdFJlc3VsdDtcblxuICAgICAgc2hvdWxkTm90Rm9ybWF0KHJ1bGVDc3RSZXN1bHQsIHRoaXMub25PZmZDb21tZW50UGFpcnMpO1xuICAgIH1cbiAgfVxuXG4gIEJBQ0tUUkFDS19MT09LQUhFQUQocHJvZHVjdGlvbiwgZXJyVmFsdWUgPSBmYWxzZSkge1xuICAgIHJldHVybiB0aGlzLkFDVElPTigoKSA9PiB7XG4gICAgICB0aGlzLmlzQmFja1RyYWNraW5nU3RhY2sucHVzaCgxKTtcbiAgICAgIC8vIFRPRE86IFwic2F2ZVJlY29nU3RhdGVcIiBkb2VzIG5vdCBoYW5kbGUgdGhlIG9jY3VycmVuY2Ugc3RhY2tcbiAgICAgIGNvbnN0IG9yZ1N0YXRlID0gdGhpcy5zYXZlUmVjb2dTdGF0ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gaGFjayB0byBlbmFibGUgb3V0cHV0dGluZyBub25lIENTVCB2YWx1ZXMgZnJvbSBncmFtbWFyIHJ1bGVzLlxuICAgICAgICB0aGlzLm91dHB1dENzdCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gcHJvZHVjdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaXNSZWNvZ25pdGlvbkV4Y2VwdGlvbihlKSkge1xuICAgICAgICAgIHJldHVybiBlcnJWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5vdXRwdXRDc3QgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbG9hZFJlY29nU3RhdGUob3JnU3RhdGUpO1xuICAgICAgICB0aGlzLmlzQmFja1RyYWNraW5nU3RhY2sucG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRPbk9mZkNvbW1lbnRQYWlycyhvbk9mZkNvbW1lbnRQYWlycykge1xuICAgIHRoaXMub25PZmZDb21tZW50UGFpcnMgPSBvbk9mZkNvbW1lbnRQYWlycztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEphdmFQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/parser.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/arrays.js":
/*!************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/arrays.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-ArrayInitializer\n  $.RULE(\"arrayInitializer\", () => {\n    $.CONSUME(t.LCurly);\n    $.OPTION(() => {\n      $.SUBRULE($.variableInitializerList);\n    });\n    $.OPTION2(() => {\n      $.CONSUME(t.Comma);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-VariableInitializerList\n  $.RULE(\"variableInitializerList\", () => {\n    $.SUBRULE($.variableInitializer);\n    $.MANY({\n      // The optional last \"Comma\" of an \"arrayInitializer\"\n      GATE: () => tokenMatcher(this.LA(2).tokenType, t.RCurly) === false,\n      DEF: () => {\n        $.CONSUME(t.Comma);\n        $.SUBRULE2($.variableInitializer);\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL3Byb2R1Y3Rpb25zL2FycmF5cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qYXZhLXBhcnNlci9zcmMvcHJvZHVjdGlvbnMvYXJyYXlzLmpzP2I2ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgdG9rZW5NYXRjaGVyIH0gPSByZXF1aXJlKFwiY2hldnJvdGFpblwiKTtcblxuZnVuY3Rpb24gZGVmaW5lUnVsZXMoJCwgdCkge1xuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtMTAuaHRtbCNqbHMtQXJyYXlJbml0aWFsaXplclxuICAkLlJVTEUoXCJhcnJheUluaXRpYWxpemVyXCIsICgpID0+IHtcbiAgICAkLkNPTlNVTUUodC5MQ3VybHkpO1xuICAgICQuT1BUSU9OKCgpID0+IHtcbiAgICAgICQuU1VCUlVMRSgkLnZhcmlhYmxlSW5pdGlhbGl6ZXJMaXN0KTtcbiAgICB9KTtcbiAgICAkLk9QVElPTjIoKCkgPT4ge1xuICAgICAgJC5DT05TVU1FKHQuQ29tbWEpO1xuICAgIH0pO1xuICAgICQuQ09OU1VNRSh0LlJDdXJseSk7XG4gIH0pO1xuXG4gIC8vIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS9zcGVjcy9qbHMvc2UxMS9odG1sL2pscy0xMC5odG1sI2pscy1WYXJpYWJsZUluaXRpYWxpemVyTGlzdFxuICAkLlJVTEUoXCJ2YXJpYWJsZUluaXRpYWxpemVyTGlzdFwiLCAoKSA9PiB7XG4gICAgJC5TVUJSVUxFKCQudmFyaWFibGVJbml0aWFsaXplcik7XG4gICAgJC5NQU5ZKHtcbiAgICAgIC8vIFRoZSBvcHRpb25hbCBsYXN0IFwiQ29tbWFcIiBvZiBhbiBcImFycmF5SW5pdGlhbGl6ZXJcIlxuICAgICAgR0FURTogKCkgPT4gdG9rZW5NYXRjaGVyKHRoaXMuTEEoMikudG9rZW5UeXBlLCB0LlJDdXJseSkgPT09IGZhbHNlLFxuICAgICAgREVGOiAoKSA9PiB7XG4gICAgICAgICQuQ09OU1VNRSh0LkNvbW1hKTtcbiAgICAgICAgJC5TVUJSVUxFMigkLnZhcmlhYmxlSW5pdGlhbGl6ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmluZVJ1bGVzXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/arrays.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/blocks-and-statements.js":
/*!***************************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/blocks-and-statements.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\n// Spec Deviation: The \"*NoShortIf\" variations were removed as the ambiguity of\n//                 the dangling else is resolved by attaching an \"else\" block\n//                 to the nearest \"if\"\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Block\n  $.RULE(\"block\", () => {\n    $.CONSUME(t.LCurly);\n    $.OPTION(() => {\n      $.SUBRULE($.blockStatements);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BlockStatements\n  $.RULE(\"blockStatements\", () => {\n    $.SUBRULE($.blockStatement);\n    $.MANY(() => {\n      $.SUBRULE2($.blockStatement);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BlockStatement\n  $.RULE(\"blockStatement\", () => {\n    const isLocalVariableDeclaration = this.BACKTRACK_LOOKAHEAD(\n      $.isLocalVariableDeclaration\n    );\n\n    const isClassDeclaration = this.BACKTRACK_LOOKAHEAD($.isClassDeclaration);\n\n    $.OR([\n      {\n        GATE: () => isLocalVariableDeclaration,\n        ALT: () => $.SUBRULE($.localVariableDeclarationStatement)\n      },\n      {\n        GATE: () => isClassDeclaration,\n        ALT: () => $.SUBRULE($.classDeclaration)\n      },\n      { ALT: () => $.SUBRULE($.statement) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableDeclaration\n  $.RULE(\"localVariableDeclarationStatement\", () => {\n    $.SUBRULE($.localVariableDeclaration);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableDeclaration\n  $.RULE(\"localVariableDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.localVariableType);\n    $.SUBRULE($.variableDeclaratorList);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableType\n  $.RULE(\"localVariableType\", () => {\n    $.OR({\n      DEF: [\n        { ALT: () => $.SUBRULE($.unannType) },\n        { ALT: () => $.CONSUME(t.Var) }\n      ],\n      IGNORE_AMBIGUITIES: true\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Statement\n  $.RULE(\"statement\", () => {\n    $.OR({\n      DEF: [\n        { ALT: () => $.SUBRULE($.statementWithoutTrailingSubstatement) },\n        { ALT: () => $.SUBRULE($.labeledStatement) },\n        // Spec deviation: combined \"IfThenStatement\" and \"IfThenElseStatement\"\n        { ALT: () => $.SUBRULE($.ifStatement) },\n        { ALT: () => $.SUBRULE($.whileStatement) },\n        { ALT: () => $.SUBRULE($.forStatement) }\n      ],\n      MAX_LOOKAHEAD: 2\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementWithoutTrailingSubstatement\n  $.RULE(\"statementWithoutTrailingSubstatement\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.block) },\n      { ALT: () => $.SUBRULE($.emptyStatement) },\n      { ALT: () => $.SUBRULE($.expressionStatement) },\n      { ALT: () => $.SUBRULE($.assertStatement) },\n      { ALT: () => $.SUBRULE($.switchStatement) },\n      { ALT: () => $.SUBRULE($.doStatement) },\n      { ALT: () => $.SUBRULE($.breakStatement) },\n      { ALT: () => $.SUBRULE($.continueStatement) },\n      { ALT: () => $.SUBRULE($.returnStatement) },\n      { ALT: () => $.SUBRULE($.synchronizedStatement) },\n      { ALT: () => $.SUBRULE($.throwStatement) },\n      { ALT: () => $.SUBRULE($.tryStatement) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EmptyStatement\n  $.RULE(\"emptyStatement\", () => {\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LabeledStatement\n  $.RULE(\"labeledStatement\", () => {\n    $.CONSUME(t.Identifier);\n    $.CONSUME(t.Colon);\n    $.SUBRULE($.statement);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ExpressionStatement\n  $.RULE(\"expressionStatement\", () => {\n    $.SUBRULE($.statementExpression);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementExpression\n  $.RULE(\"statementExpression\", () => {\n    // Spec deviation: The many alternatives here were replaced with\n    //                 the \"expression\" rule as it contains them all,\n    //                 and distinguishing between the alternatives cannot be done\n    //                 using a fixed lookahead.\n    // TODO: verify the resulting expression is one of the valid alternatives?\n    $.SUBRULE($.expression);\n  });\n\n  // Spec deviation: combined \"IfThenStatement\" and \"IfThenElseStatement\"\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-IfThenStatement\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-IfThenElseStatement\n  $.RULE(\"ifStatement\", () => {\n    $.CONSUME(t.If);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.statement);\n    $.OPTION(() => {\n      $.CONSUME(t.Else);\n      $.SUBRULE2($.statement);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-AssertStatement\n  $.RULE(\"assertStatement\", () => {\n    $.CONSUME(t.Assert);\n    $.SUBRULE($.expression);\n    $.OPTION(() => {\n      $.CONSUME(t.Colon);\n      $.SUBRULE2($.expression);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchStatement\n  $.RULE(\"switchStatement\", () => {\n    $.CONSUME(t.Switch);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.switchBlock);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchBlock\n  $.RULE(\"switchBlock\", () => {\n    $.CONSUME(t.LCurly);\n    $.MANY(() => {\n      // Spec Deviation: refactored \"switchBlock\" for easy post-processing\n      //                 each case and block together in the same rule.\n      $.SUBRULE($.switchCase);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  $.RULE(\"switchCase\", () => {\n    $.SUBRULE($.switchLabel);\n    $.OPTION(() => {\n      $.SUBRULE($.blockStatements);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchLabel\n  $.RULE(\"switchLabel\", () => {\n    $.OR([\n      {\n        ALT: () => {\n          $.CONSUME(t.Case);\n          $.SUBRULE($.constantExpression);\n          $.CONSUME(t.Colon);\n        }\n      },\n      // SPEC Deviation: the variant with \"enumConstantName\" was removed\n      // as it can be matched by the \"constantExpression\" variant\n      // the distinction is semantic not syntactic.\n      {\n        ALT: () => {\n          $.CONSUME(t.Default);\n          $.CONSUME3(t.Colon);\n        }\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EnumConstantName\n  $.RULE(\"enumConstantName\", () => {\n    $.CONSUME(t.Identifier);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-WhileStatement\n  $.RULE(\"whileStatement\", () => {\n    $.CONSUME(t.While);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.statement);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-DoStatement\n  $.RULE(\"doStatement\", () => {\n    $.CONSUME(t.Do);\n    $.SUBRULE($.statement);\n    $.CONSUME(t.While);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.CONSUME(t.Semicolon);\n  });\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForStatement\n  $.RULE(\"forStatement\", () => {\n    $.OR([\n      {\n        GATE: () => this.BACKTRACK_LOOKAHEAD($.isBasicForStatement),\n        ALT: () => $.SUBRULE($.basicForStatement)\n      },\n      { ALT: () => $.SUBRULE($.enhancedForStatement) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BasicForStatement\n  $.RULE(\"basicForStatement\", () => {\n    $.CONSUME(t.For);\n    $.CONSUME(t.LBrace);\n    $.OPTION(() => {\n      $.SUBRULE($.forInit);\n    });\n    $.CONSUME(t.Semicolon);\n    $.OPTION2(() => {\n      $.SUBRULE($.expression);\n    });\n    $.CONSUME2(t.Semicolon);\n    $.OPTION3(() => {\n      $.SUBRULE($.forUpdate);\n    });\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.statement);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForInit\n  $.RULE(\"forInit\", () => {\n    $.OR([\n      {\n        GATE: () => $.BACKTRACK_LOOKAHEAD($.isLocalVariableDeclaration),\n        ALT: () => $.SUBRULE($.localVariableDeclaration)\n      },\n      { ALT: () => $.SUBRULE($.statementExpressionList) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForUpdate\n  $.RULE(\"forUpdate\", () => {\n    $.SUBRULE($.statementExpressionList);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementExpressionList\n  $.RULE(\"statementExpressionList\", () => {\n    $.SUBRULE($.statementExpression);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.statementExpression);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EnhancedForStatement\n  $.RULE(\"enhancedForStatement\", () => {\n    $.CONSUME(t.For);\n    $.CONSUME(t.LBrace);\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.localVariableType);\n    $.SUBRULE($.variableDeclaratorId);\n    $.CONSUME(t.Colon);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.statement);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BreakStatement\n  $.RULE(\"breakStatement\", () => {\n    $.CONSUME(t.Break);\n    $.OPTION(() => {\n      $.CONSUME(t.Identifier);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ContinueStatement\n  $.RULE(\"continueStatement\", () => {\n    $.CONSUME(t.Continue);\n    $.OPTION(() => {\n      $.CONSUME(t.Identifier);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ReturnStatement\n  $.RULE(\"returnStatement\", () => {\n    $.CONSUME(t.Return);\n    $.OPTION(() => {\n      $.SUBRULE($.expression);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ThrowStatement\n  $.RULE(\"throwStatement\", () => {\n    $.CONSUME(t.Throw);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SynchronizedStatement\n  $.RULE(\"synchronizedStatement\", () => {\n    $.CONSUME(t.Synchronized);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.block);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-TryStatement\n  $.RULE(\"tryStatement\", () => {\n    $.OR({\n      DEF: [\n        {\n          ALT: () => {\n            $.CONSUME(t.Try);\n            $.SUBRULE($.block);\n            $.OR2([\n              {\n                ALT: () => {\n                  $.SUBRULE($.catches);\n                  $.OPTION(() => {\n                    $.SUBRULE($.finally);\n                  });\n                }\n              },\n              { ALT: () => $.SUBRULE2($.finally) }\n            ]);\n          }\n        },\n        { ALT: () => $.SUBRULE($.tryWithResourcesStatement) }\n      ],\n      MAX_LOOKAHEAD: 2\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Catches\n  $.RULE(\"catches\", () => {\n    $.SUBRULE($.catchClause);\n    $.MANY(() => {\n      $.SUBRULE2($.catchClause);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchClause\n  $.RULE(\"catchClause\", () => {\n    $.CONSUME(t.Catch);\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.catchFormalParameter);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.block);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchFormalParameter\n  $.RULE(\"catchFormalParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.catchType);\n    $.SUBRULE($.variableDeclaratorId);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchType\n  $.RULE(\"catchType\", () => {\n    $.SUBRULE($.unannClassType);\n    $.MANY(() => {\n      $.CONSUME(t.Or);\n      $.SUBRULE2($.classType);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Finally\n  $.RULE(\"finally\", () => {\n    $.CONSUME(t.Finally);\n    $.SUBRULE($.block);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-TryWithResourcesStatement\n  $.RULE(\"tryWithResourcesStatement\", () => {\n    $.CONSUME(t.Try);\n    $.SUBRULE($.resourceSpecification);\n    $.SUBRULE($.block);\n    $.OPTION(() => {\n      $.SUBRULE($.catches);\n    });\n    $.OPTION2(() => {\n      $.SUBRULE($.finally);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ResourceSpecification\n  $.RULE(\"resourceSpecification\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.resourceList);\n    $.OPTION(() => {\n      $.CONSUME(t.Semicolon);\n    });\n    $.CONSUME(t.RBrace);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ResourceList\n  $.RULE(\"resourceList\", () => {\n    $.SUBRULE($.resource);\n    $.MANY({\n      GATE: () => tokenMatcher($.LA(2).tokenType, t.RBrace) === false,\n      DEF: () => {\n        $.CONSUME(t.Semicolon);\n        $.SUBRULE2($.resource);\n      }\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Resource\n  $.RULE(\"resource\", () => {\n    $.OR([\n      {\n        GATE: $.BACKTRACK($.resourceInit),\n        // Spec Deviation: extracted this alternative to \"resourceInit\"\n        //                 to enable backtracking.\n        ALT: () => $.SUBRULE($.resourceInit)\n      },\n      { ALT: () => $.SUBRULE($.variableAccess) }\n    ]);\n  });\n\n  // Spec Deviation: extracted from \"resource\"\n  $.RULE(\"resourceInit\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.localVariableType);\n    $.CONSUME(t.Identifier);\n    $.CONSUME(t.Equals);\n    $.SUBRULE($.expression);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-VariableAccess\n  $.RULE(\"variableAccess\", () => {\n    // Spec Deviation: both \"expressionName\" and \"fieldAccess\" can be parsed\n    //                 by the \"primary\" rule\n    // TODO: verify that the primary is a fieldAccess or an expressionName.\n    $.SUBRULE($.primary);\n  });\n\n  // ------------------------------------\n  // Special optimized backtracking rules.\n  // ------------------------------------\n  $.RULE(\"isBasicForStatement\", () => {\n    $.CONSUME(t.For);\n    $.CONSUME(t.LBrace);\n    $.OPTION(() => {\n      $.SUBRULE($.forInit);\n    });\n    $.CONSUME(t.Semicolon);\n    // consuming the first semiColon distinguishes between\n    // \"basic\" and \"enhanced\" for statements\n    return true;\n  });\n\n  $.RULE(\"isLocalVariableDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.localVariableType);\n    $.SUBRULE($.variableDeclaratorId);\n\n    const nextTokenType = this.LA(1).tokenType;\n    switch (nextTokenType) {\n      // Int x;\n      case t.Semicolon:\n      // Int x, y, z;\n      case t.Comma:\n      // Int x = 5;\n      case t.Equals:\n        return true;\n      default:\n        return false;\n    }\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/blocks-and-statements.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/classes.js":
/*!*************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/classes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { isRecognitionException, tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassDeclaration\n  $.RULE(\"classDeclaration\", () => {\n    // Spec Deviation: extracted common \"{classModifier}\" prefix\n    //      extraction is safe because there are no other references to\n    //      \"normalClassDeclaration\" and \"enumDeclaration\"\n    $.MANY(() => {\n      $.SUBRULE($.classModifier);\n    });\n    $.OR([\n      { ALT: () => $.SUBRULE($.normalClassDeclaration) },\n      { ALT: () => $.SUBRULE($.enumDeclaration) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-NormalClassDeclaration\n  $.RULE(\"normalClassDeclaration\", () => {\n    // Spec Deviation: extracted common \"{classModifier}\" to \"classDeclaration\"\n    $.CONSUME(t.Class);\n    $.SUBRULE($.typeIdentifier);\n    $.OPTION(() => {\n      $.SUBRULE($.typeParameters);\n    });\n    $.OPTION2(() => {\n      $.SUBRULE($.superclass);\n    });\n    $.OPTION3(() => {\n      $.SUBRULE($.superinterfaces);\n    });\n    $.SUBRULE($.classBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassModifier\n  $.RULE(\"classModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Protected) },\n      { ALT: () => $.CONSUME(t.Private) },\n      { ALT: () => $.CONSUME(t.Abstract) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Final) },\n      { ALT: () => $.CONSUME(t.Strictfp) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-TypeParameters\n  $.RULE(\"typeParameters\", () => {\n    $.CONSUME(t.Less);\n    $.SUBRULE($.typeParameterList);\n    $.CONSUME(t.Greater);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-TypeParameterList\n  $.RULE(\"typeParameterList\", () => {\n    $.SUBRULE($.typeParameter);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.typeParameter);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Superclass\n  $.RULE(\"superclass\", () => {\n    $.CONSUME(t.Extends);\n    $.SUBRULE($.classType);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Superinterfaces\n  $.RULE(\"superinterfaces\", () => {\n    $.CONSUME(t.Implements);\n    $.SUBRULE($.interfaceTypeList);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-InterfaceTypeList\n  $.RULE(\"interfaceTypeList\", () => {\n    $.SUBRULE($.interfaceType);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.interfaceType);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassBody\n  $.RULE(\"classBody\", () => {\n    $.CONSUME(t.LCurly);\n    $.MANY(() => {\n      $.SUBRULE($.classBodyDeclaration);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  const classBodyTypes = {\n    unknown: 0,\n    fieldDeclaration: 1,\n    methodDeclaration: 2,\n    classDeclaration: 3,\n    interfaceDeclaration: 4,\n    semiColon: 5,\n    instanceInitializer: 6,\n    staticInitializer: 7,\n    constructorDeclaration: 8\n  };\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassBodyDeclaration\n  $.RULE(\"classBodyDeclaration\", () => {\n    const nextRuleType = $.BACKTRACK_LOOKAHEAD(\n      $.identifyClassBodyDeclarationType\n    );\n\n    $.OR([\n      {\n        GATE: () =>\n          nextRuleType >= classBodyTypes.fieldDeclaration &&\n          nextRuleType <= classBodyTypes.semiColon,\n        ALT: () => $.SUBRULE($.classMemberDeclaration, { ARGS: [nextRuleType] })\n      },\n      // no gate needed for the initializers because these are LL(1) rules.\n      { ALT: () => $.SUBRULE($.instanceInitializer) },\n      { ALT: () => $.SUBRULE($.staticInitializer) },\n      {\n        GATE: () =>\n          tokenMatcher(nextRuleType, classBodyTypes.constructorDeclaration),\n        ALT: () => $.SUBRULE($.constructorDeclaration)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassMemberDeclaration\n  $.RULE(\"classMemberDeclaration\", nextRuleType => {\n    $.OR([\n      {\n        GATE: () => nextRuleType === classBodyTypes.fieldDeclaration,\n        ALT: () => $.SUBRULE($.fieldDeclaration)\n      },\n      {\n        GATE: () => nextRuleType === classBodyTypes.methodDeclaration,\n        ALT: () => $.SUBRULE($.methodDeclaration)\n      },\n      {\n        GATE: () => nextRuleType === classBodyTypes.classDeclaration,\n        ALT: () => $.SUBRULE($.classDeclaration)\n      },\n      {\n        GATE: () => nextRuleType === classBodyTypes.interfaceDeclaration,\n        ALT: () => $.SUBRULE($.interfaceDeclaration)\n      },\n      {\n        // No GATE is needed as this is LL(1)\n        ALT: () => $.CONSUME(t.Semicolon)\n      }\n    ]);\n  });\n\n  // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FieldDeclaration\n  $.RULE(\"fieldDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.fieldModifier);\n    });\n    $.SUBRULE($.unannType);\n    $.SUBRULE($.variableDeclaratorList);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FieldModifier\n  $.RULE(\"fieldModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Protected) },\n      { ALT: () => $.CONSUME(t.Private) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Final) },\n      { ALT: () => $.CONSUME(t.Transient) },\n      { ALT: () => $.CONSUME(t.Volatile) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclaratorList\n  $.RULE(\"variableDeclaratorList\", () => {\n    $.SUBRULE($.variableDeclarator);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.variableDeclarator);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclarator\n  $.RULE(\"variableDeclarator\", () => {\n    $.SUBRULE($.variableDeclaratorId);\n    $.OPTION(() => {\n      $.CONSUME(t.Equals);\n      $.SUBRULE($.variableInitializer);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclaratorId\n  $.RULE(\"variableDeclaratorId\", () => {\n    $.CONSUME(t.Identifier);\n    $.OPTION(() => {\n      $.SUBRULE($.dims);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableInitializer\n  $.RULE(\"variableInitializer\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.expression) },\n      { ALT: () => $.SUBRULE($.arrayInitializer) }\n    ]);\n  });\n\n  // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannType\n  $.RULE(\"unannType\", () => {\n    $.OR([\n      // Spec Deviation: The array type \"dims\" suffix was extracted to this rule\n      // to avoid backtracking for performance reasons.\n      {\n        ALT: () => {\n          $.SUBRULE($.unannPrimitiveType);\n          $.OPTION({\n            GATE: () => this.BACKTRACK_LOOKAHEAD($.isDims),\n            DEF: () => $.SUBRULE2($.dims)\n          });\n        }\n      },\n      { ALT: () => $.SUBRULE($.unannReferenceType) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannPrimitiveType\n  $.RULE(\"unannPrimitiveType\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.numericType) },\n      { ALT: () => $.CONSUME(t.Boolean) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannReferenceType\n  $.RULE(\"unannReferenceType\", () => {\n    $.SUBRULE($.unannClassOrInterfaceType);\n    $.OPTION({\n      GATE: () => this.BACKTRACK_LOOKAHEAD($.isDims),\n      DEF: () => $.SUBRULE2($.dims)\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannClassType\n  $.RULE(\"unannClassOrInterfaceType\", () => {\n    // Spec Deviation: The spec says: \"UnannClassType  | UnannInterfaceType\" but \"UnannInterfaceType\"\n    //                 is not mentioned in the parser because it is identical to \"UnannClassType\"\n    //                 The distinction is **semantic** not syntactic.\n    $.SUBRULE($.unannClassType);\n  });\n\n  $.RULE(\"unannClassType\", () => {\n    // Spec Deviation: Refactored left recursion and alternation to iterations\n    $.CONSUME(t.Identifier);\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n    $.MANY2(() => {\n      $.CONSUME(t.Dot);\n      $.MANY3(() => {\n        $.SUBRULE2($.annotation);\n      });\n      // TODO: Semantic Check: This Identifier cannot be \"var\"\n      $.CONSUME2(t.Identifier);\n      $.OPTION2(() => {\n        $.SUBRULE2($.typeArguments);\n      });\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannInterfaceType\n  $.RULE(\"unannInterfaceType\", () => {\n    $.SUBRULE($.unannClassType);\n  });\n\n  $.RULE(\"unannTypeVariable\", () => {\n    // TODO: Semantic Check: This Identifier cannot be \"var\"\n    // TODO: or define as token type?\n    $.CONSUME(t.Identifier);\n  });\n\n  // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodDeclaration\n  $.RULE(\"methodDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.methodModifier);\n    });\n    $.SUBRULE($.methodHeader);\n    $.SUBRULE($.methodBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodModifier\n  $.RULE(\"methodModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Protected) },\n      { ALT: () => $.CONSUME(t.Private) },\n      { ALT: () => $.CONSUME(t.Abstract) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Final) },\n      { ALT: () => $.CONSUME(t.Synchronized) },\n      { ALT: () => $.CONSUME(t.Native) },\n      { ALT: () => $.CONSUME(t.Strictfp) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodHeader\n  $.RULE(\"methodHeader\", () => {\n    // Spec Deviation: extracted common prefix from both alternatives\n    $.OPTION(() => {\n      $.SUBRULE($.typeParameters);\n      $.MANY(() => {\n        $.SUBRULE($.annotation);\n      });\n    });\n    $.SUBRULE($.result);\n    $.SUBRULE($.methodDeclarator);\n    $.OPTION2(() => {\n      $.SUBRULE($.throws);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Result\n  $.RULE(\"result\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.unannType) },\n      { ALT: () => $.CONSUME(t.Void) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-MethodDeclarator\n  $.RULE(\"methodDeclarator\", () => {\n    $.CONSUME(t.Identifier);\n    $.CONSUME(t.LBrace);\n    $.OPTION(() => {\n      $.SUBRULE($.formalParameterList);\n    });\n    $.CONSUME(t.RBrace);\n    $.OPTION2(() => {\n      $.SUBRULE($.dims);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ReceiverParameter\n  $.RULE(\"receiverParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.SUBRULE($.unannType);\n    $.OPTION(() => {\n      $.CONSUME(t.Identifier);\n      $.CONSUME(t.Dot);\n    });\n    $.CONSUME(t.This);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FormalParameterList\n  $.RULE(\"formalParameterList\", () => {\n    $.SUBRULE($.formalParameter);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.formalParameter);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FormalParameter\n  $.RULE(\"formalParameter\", () => {\n    $.OR([\n      // Spec Deviation: extracted to \"variableParaRegularParameter\"\n      {\n        GATE: $.BACKTRACK($.variableParaRegularParameter),\n        ALT: () => $.SUBRULE($.variableParaRegularParameter)\n      },\n      { ALT: () => $.SUBRULE($.variableArityParameter) }\n    ]);\n  });\n\n  // Spec Deviation: extracted from \"formalParameter\"\n  $.RULE(\"variableParaRegularParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.unannType);\n    $.SUBRULE($.variableDeclaratorId);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableArityParameter\n  $.RULE(\"variableArityParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.unannType);\n    $.MANY2(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.DotDotDot);\n    $.CONSUME(t.Identifier);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableModifier\n  $.RULE(\"variableModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Final) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Throws\n  $.RULE(\"throws\", () => {\n    $.CONSUME(t.Throws);\n    $.SUBRULE($.exceptionTypeList);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExceptionTypeList\n  $.RULE(\"exceptionTypeList\", () => {\n    $.SUBRULE($.exceptionType);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.exceptionType);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExceptionType\n  $.RULE(\"exceptionType\", () => {\n    // Spec Deviation: \"typeVariable\" alternative is missing because\n    //                 it is contained in classType.\n    $.SUBRULE($.classType);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodBody\n  $.RULE(\"methodBody\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.block) },\n      { ALT: () => $.CONSUME(t.Semicolon) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-InstanceInitializer\n  $.RULE(\"instanceInitializer\", () => {\n    $.SUBRULE($.block);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-StaticInitializer\n  $.RULE(\"staticInitializer\", () => {\n    $.CONSUME(t.Static);\n    $.SUBRULE($.block);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorDeclaration\n  $.RULE(\"constructorDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.constructorModifier);\n    });\n    $.SUBRULE($.constructorDeclarator);\n    $.OPTION(() => {\n      $.SUBRULE($.throws);\n    });\n    $.SUBRULE($.constructorBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorModifier\n  $.RULE(\"constructorModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Protected) },\n      { ALT: () => $.CONSUME(t.Private) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorDeclarator\n  $.RULE(\"constructorDeclarator\", () => {\n    $.OPTION(() => {\n      $.SUBRULE($.typeParameters);\n    });\n    $.SUBRULE($.simpleTypeName);\n    $.CONSUME(t.LBrace);\n    $.OPTION2({\n      // a \"formalParameterList\" and a \"receiverParameter\"\n      // cannot be distinguished using fixed lookahead.\n      GATE: $.BACKTRACK($.receiverParameter),\n      DEF: () => {\n        $.SUBRULE($.receiverParameter);\n        $.CONSUME(t.Comma);\n      }\n    });\n    $.OPTION3(() => {\n      $.SUBRULE($.formalParameterList);\n    });\n    $.CONSUME(t.RBrace);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-SimpleTypeName\n  $.RULE(\"simpleTypeName\", () => {\n    // TODO: implement: Identifier but not var\n    $.CONSUME(t.Identifier);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorBody\n  $.RULE(\"constructorBody\", () => {\n    $.CONSUME(t.LCurly);\n    $.OPTION({\n      GATE: $.BACKTRACK($.explicitConstructorInvocation),\n      DEF: () => {\n        $.SUBRULE($.explicitConstructorInvocation);\n      }\n    });\n    $.OPTION2(() => {\n      $.SUBRULE($.blockStatements);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExplicitConstructorInvocation\n  $.RULE(\"explicitConstructorInvocation\", () => {\n    // Spec Deviation: split into two separate sub rules.\n    $.OR([\n      { ALT: () => $.SUBRULE($.unqualifiedExplicitConstructorInvocation) },\n      { ALT: () => $.SUBRULE($.qualifiedExplicitConstructorInvocation) }\n    ]);\n  });\n\n  $.RULE(\"unqualifiedExplicitConstructorInvocation\", () => {\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n    $.OR([\n      {\n        ALT: () => $.CONSUME(t.This)\n      },\n      {\n        ALT: () => $.CONSUME(t.Super)\n      }\n    ]);\n    $.CONSUME(t.LBrace);\n    $.OPTION2(() => {\n      $.SUBRULE($.argumentList);\n    });\n    $.CONSUME(t.RBrace);\n    $.CONSUME(t.Semicolon);\n  });\n\n  $.RULE(\"qualifiedExplicitConstructorInvocation\", () => {\n    // Spec Deviation: According to the spec the prefix may be a \"primary' as well,\n    //                 however, most primary variants don't make sense here\n    // TODO: discover which primary forms could be valid here\n    //       and handle only those specific cases.\n    //       It is best if we avoid referencing \"primary\" rule from\n    //       outside the expressions rules as the expressions rules are not aligned\n    //       to the spec style, so we want the smallest possible \"external api\"\n    //       for the expressions rules.\n    $.SUBRULE($.expressionName);\n    $.CONSUME(t.Dot);\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n    $.CONSUME(t.Super);\n    $.CONSUME(t.LBrace);\n    $.OPTION2(() => {\n      $.SUBRULE($.argumentList);\n    });\n    $.CONSUME(t.RBrace);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumDeclaration\n  $.RULE(\"enumDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.classModifier);\n    });\n    $.CONSUME(t.Enum);\n    $.SUBRULE($.typeIdentifier);\n    $.OPTION(() => {\n      $.SUBRULE($.superinterfaces);\n    });\n    $.SUBRULE($.enumBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumBody\n  $.RULE(\"enumBody\", () => {\n    $.CONSUME(t.LCurly);\n    $.OPTION(() => {\n      $.SUBRULE($.enumConstantList);\n    });\n    $.OPTION2(() => {\n      $.CONSUME(t.Comma);\n    });\n    $.OPTION3(() => {\n      $.SUBRULE($.enumBodyDeclarations);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstantList\n  $.RULE(\"enumConstantList\", () => {\n    $.SUBRULE($.enumConstant);\n    $.MANY({\n      GATE: () => {\n        const nextToken = $.LA(2);\n        return (\n          tokenMatcher(nextToken, t.Identifier) || tokenMatcher(nextToken, t.At)\n        );\n      },\n      DEF: () => {\n        $.CONSUME(t.Comma);\n        $.SUBRULE2($.enumConstant);\n      }\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstant\n  $.RULE(\"enumConstant\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.enumConstantModifier);\n    });\n    $.CONSUME(t.Identifier);\n    $.OPTION(() => {\n      $.CONSUME(t.LBrace);\n      $.OPTION2(() => {\n        $.SUBRULE($.argumentList);\n      });\n      $.CONSUME(t.RBrace);\n    });\n    $.OPTION3(() => {\n      $.SUBRULE($.classBody);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstantModifier\n  $.RULE(\"enumConstantModifier\", () => {\n    $.SUBRULE($.annotation);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumBodyDeclarations\n  $.RULE(\"enumBodyDeclarations\", () => {\n    $.CONSUME(t.Semicolon);\n    $.MANY(() => {\n      $.SUBRULE($.classBodyDeclaration);\n    });\n  });\n\n  $.RULE(\"isClassDeclaration\", () => {\n    let isEmptyTypeDeclaration = false;\n\n    if (\n      $.OPTION(() => {\n        $.CONSUME(t.Semicolon);\n      })\n    ) {\n      // an empty \"TypeDeclaration\"\n      isEmptyTypeDeclaration = true;\n    }\n\n    try {\n      // The {classModifier} is a super grammar of the \"interfaceModifier\"\n      // So we must parse all the \"{classModifier}\" before we can distinguish\n      // between the alternatives.\n      $.MANY({\n        GATE: () =>\n          (tokenMatcher($.LA(1).tokenType, t.At) &&\n            tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n        DEF: () => {\n          $.SUBRULE($.classModifier);\n        }\n      });\n    } catch (e) {\n      if (isRecognitionException(e)) {\n        // TODO: add original syntax error?\n        throw \"Cannot Identify if the <TypeDeclaration> is a <ClassDeclaration> or an <InterfaceDeclaration>\";\n      } else {\n        throw e;\n      }\n    }\n\n    if (isEmptyTypeDeclaration) {\n      return false;\n    }\n\n    const nextTokenType = this.LA(1).tokenType;\n    return (\n      tokenMatcher(nextTokenType, t.Class) ||\n      tokenMatcher(nextTokenType, t.Enum)\n    );\n  });\n\n  $.RULE(\"identifyClassBodyDeclarationType\", () => {\n    try {\n      let nextTokenType = this.LA(1).tokenType;\n      let nextNextTokenType = this.LA(2).tokenType;\n\n      switch (nextTokenType) {\n        case t.Semicolon:\n          return classBodyTypes.semiColon;\n        case t.LCurly:\n          return classBodyTypes.instanceInitializer;\n        case t.Static:\n          switch (nextNextTokenType) {\n            case t.LCurly:\n              return classBodyTypes.staticInitializer;\n          }\n      }\n\n      // We have to look beyond the modifiers to distinguish between the declaration types.\n      $.MANY({\n        GATE: () =>\n          (tokenMatcher($.LA(1).tokenType, t.At) &&\n            tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n        DEF: () => {\n          // This alternation includes all possible modifiers for all types of \"ClassBodyDeclaration\"\n          // Certain combinations are syntactically invalid, this is **not** checked here,\n          // Invalid combinations will cause a descriptive parsing error message to be\n          // Created inside the relevant parsing rules **after** this lookahead\n          // analysis.\n          $.OR([\n            {\n              GATE: () =>\n                (tokenMatcher($.LA(1).tokenType, t.At) &&\n                  tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n              ALT: () => $.SUBRULE($.annotation)\n            },\n            { ALT: () => $.CONSUME(t.Public) },\n            { ALT: () => $.CONSUME(t.Protected) },\n            { ALT: () => $.CONSUME(t.Private) },\n            { ALT: () => $.CONSUME(t.Abstract) },\n            { ALT: () => $.CONSUME(t.Static) },\n            { ALT: () => $.CONSUME(t.Final) },\n            { ALT: () => $.CONSUME(t.Transient) },\n            { ALT: () => $.CONSUME(t.Volatile) },\n            { ALT: () => $.CONSUME(t.Synchronized) },\n            { ALT: () => $.CONSUME(t.Native) },\n            { ALT: () => $.CONSUME(t.Strictfp) }\n          ]);\n        }\n      });\n\n      nextTokenType = this.LA(1).tokenType;\n      nextNextTokenType = this.LA(2).tokenType;\n      if (\n        tokenMatcher(nextTokenType, t.Identifier) &&\n        tokenMatcher(nextNextTokenType, t.LBrace)\n      ) {\n        return classBodyTypes.constructorDeclaration;\n      }\n\n      if (\n        tokenMatcher(nextTokenType, t.Class) ||\n        tokenMatcher(nextTokenType, t.Enum)\n      ) {\n        return classBodyTypes.classDeclaration;\n      }\n\n      if (\n        tokenMatcher(nextTokenType, t.Interface) ||\n        tokenMatcher(nextTokenType, t.At)\n      ) {\n        return classBodyTypes.interfaceDeclaration;\n      }\n\n      if (tokenMatcher(nextTokenType, t.Void)) {\n        // method with result type \"void\"\n        return classBodyTypes.methodDeclaration;\n      }\n\n      // Type Arguments common prefix\n      if (tokenMatcher(nextTokenType, t.Less)) {\n        this.SUBRULE($.typeParameters);\n        const nextTokenType = this.LA(1).tokenType;\n        const nextNextTokenType = this.LA(2).tokenType;\n        // \"<T> foo(\" -> constructor\n        if (\n          tokenMatcher(nextTokenType, t.Identifier) &&\n          tokenMatcher(nextNextTokenType, t.LBrace)\n        ) {\n          return classBodyTypes.constructorDeclaration;\n        }\n        // typeParameters can only appear in method or constructor\n        // declarations, so if it is not a constructor it must be a method\n        return classBodyTypes.methodDeclaration;\n      }\n\n      // Only field or method declarations may be valid at this point.\n      // All other alternatives should have been attempted.\n      // **both** start with \"unannType\"\n      this.SUBRULE($.unannType);\n\n      const nextToken = this.LA(1);\n      nextNextTokenType = this.LA(2).tokenType;\n      // \"foo(...\" --> look like method start\n      if (\n        tokenMatcher(nextToken, t.Identifier) &&\n        tokenMatcher(nextNextTokenType, t.LBrace)\n      ) {\n        return classBodyTypes.methodDeclaration;\n      }\n\n      // a valid field\n      // TODO: because we use token categories we should use tokenMatcher everywhere.\n      if (tokenMatcher(nextToken, t.Identifier)) {\n        return classBodyTypes.fieldDeclaration;\n      }\n\n      return classBodyTypes.unknown;\n    } catch (e) {\n      // TODO: add info from the original error\n      throw Error(\"Cannot Identify the type of a <classBodyDeclaration>\");\n    }\n  });\n\n  $.RULE(\"isDims\", () => {\n    $.MANY($.annotation);\n    return (\n      tokenMatcher(this.LA(1).tokenType, t.LSquare) &&\n      tokenMatcher(this.LA(2).tokenType, t.RSquare)\n    );\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/classes.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/expressions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/expressions.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\nfunction defineRules($, t) {\n  $.RULE(\"constantExpression\", () => {\n    $.SUBRULE($.expression);\n  });\n\n  $.RULE(\"expression\", () => {\n    $.OR([\n      {\n        GATE: () => this.BACKTRACK_LOOKAHEAD($.isLambdaExpression),\n        ALT: () => $.SUBRULE($.lambdaExpression)\n      },\n      { ALT: () => $.SUBRULE($.ternaryExpression) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-LambdaExpression\n  $.RULE(\"lambdaExpression\", () => {\n    $.SUBRULE($.lambdaParameters);\n    $.CONSUME(t.Arrow);\n    $.SUBRULE($.lambdaBody);\n  });\n\n  $.RULE(\"lambdaParameters\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.lambdaParametersWithBraces) },\n      { ALT: () => $.CONSUME(t.Identifier) }\n    ]);\n  });\n\n  $.RULE(\"lambdaParametersWithBraces\", () => {\n    $.CONSUME(t.LBrace);\n    $.OPTION(() => {\n      $.SUBRULE($.lambdaParameterList);\n    });\n    $.CONSUME(t.RBrace);\n  });\n\n  $.RULE(\"lambdaParameterList\", () => {\n    $.OR([\n      {\n        GATE: () => {\n          const nextTokType = this.LA(1).tokenType;\n          const nextNextTokType = this.LA(2).tokenType;\n          return (\n            tokenMatcher(nextTokType, t.Identifier) &&\n            (tokenMatcher(nextNextTokType, t.RBrace) ||\n              tokenMatcher(nextNextTokType, t.Comma))\n          );\n        },\n        ALT: () => $.SUBRULE($.inferredLambdaParameterList)\n      },\n      { ALT: () => $.SUBRULE($.explicitLambdaParameterList) }\n    ]);\n  });\n\n  $.RULE(\"inferredLambdaParameterList\", () => {\n    $.CONSUME(t.Identifier);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.CONSUME2(t.Identifier);\n    });\n  });\n\n  $.RULE(\"explicitLambdaParameterList\", () => {\n    $.SUBRULE($.lambdaParameter);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.lambdaParameter);\n    });\n  });\n\n  $.RULE(\"lambdaParameter\", () => {\n    // TODO: performance, investigate the performance boost that could\n    //       be gained by refactoring out the backtracking.\n    $.OR([\n      {\n        GATE: $.BACKTRACK($.regularLambdaParameter),\n        ALT: () => $.SUBRULE($.regularLambdaParameter)\n      },\n      { ALT: () => $.SUBRULE($.variableArityParameter) }\n    ]);\n  });\n\n  $.RULE(\"regularLambdaParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.variableModifier);\n    });\n    $.SUBRULE($.lambdaParameterType);\n    $.SUBRULE($.variableDeclaratorId);\n  });\n\n  $.RULE(\"lambdaParameterType\", () => {\n    $.OR({\n      DEF: [\n        { ALT: () => $.SUBRULE($.unannType) },\n        { ALT: () => $.CONSUME(t.Var) }\n      ],\n      IGNORE_AMBIGUITIES: true\n    });\n  });\n\n  $.RULE(\"lambdaBody\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.expression) },\n      { ALT: () => $.SUBRULE($.block) }\n    ]);\n  });\n\n  $.RULE(\"ternaryExpression\", () => {\n    $.SUBRULE($.binaryExpression);\n    $.OPTION(() => {\n      $.CONSUME(t.QuestionMark);\n      $.SUBRULE($.expression);\n      $.CONSUME(t.Colon);\n      // TODO: in the grammar this is limited to \"lambdaExpression: or \"conditionalExpression\"\n      $.SUBRULE2($.expression);\n    });\n  });\n\n  $.RULE(\"binaryExpression\", () => {\n    $.SUBRULE($.unaryExpression);\n    $.MANY(() => {\n      $.OR({\n        DEF: [\n          {\n            ALT: () => {\n              $.CONSUME(t.Instanceof);\n              $.SUBRULE($.referenceType);\n            }\n          },\n          {\n            ALT: () => {\n              $.CONSUME(t.AssignmentOperator);\n              $.SUBRULE2($.expression);\n            }\n          },\n          // This is an example of why Java does not have a well designed grammar\n          // See: https://manas.tech/blog/2008/10/12/why-java-generics-dont-have-problems-with-right-shift-operator.html\n          // TODO: ensure the LT/GT sequences have no whitespace between each other.\n          {\n            // TODO: this is a bug in Chevrotain lookahead calculation. the \"BinaryOperator\" token can match \"Less\" or \"Greater\"\n            //   as well, but because it is a **token Category** Chevrotain does not understand it need to looks two tokens ahead.\n            GATE: () =>\n              tokenMatcher($.LA(2).tokenType, t.Less) ||\n              tokenMatcher($.LA(2).tokenType, t.Greater),\n            ALT: () => {\n              $.OR2([\n                {\n                  GATE: () => $.LA(1).startOffset + 1 === $.LA(2).startOffset,\n                  ALT: () => {\n                    $.CONSUME(t.Less);\n                    $.CONSUME2(t.Less);\n                  }\n                },\n                {\n                  GATE: () => $.LA(1).startOffset + 1 === $.LA(2).startOffset,\n                  ALT: () => {\n                    $.CONSUME(t.Greater);\n                    $.CONSUME2(t.Greater);\n                    $.OPTION({\n                      GATE: () =>\n                        $.LA(0).startOffset + 1 === $.LA(1).startOffset,\n                      DEF: () => $.CONSUME3(t.Greater)\n                    });\n                  }\n                }\n              ]);\n              $.SUBRULE2($.unaryExpression);\n            }\n          },\n          {\n            ALT: () => {\n              $.CONSUME(t.BinaryOperator);\n              $.SUBRULE3($.unaryExpression);\n            }\n          }\n        ],\n        IGNORE_AMBIGUITIES: true // the ambiguity between 1 and 4 options is resolved by the order (instanceOf is first)\n      });\n    });\n  });\n\n  $.RULE(\"unaryExpression\", () => {\n    $.MANY(() => {\n      $.CONSUME(t.UnaryPrefixOperator);\n    });\n    $.SUBRULE($.primary);\n    $.MANY2(() => {\n      $.CONSUME(t.UnarySuffixOperator);\n    });\n  });\n\n  $.RULE(\"unaryExpressionNotPlusMinus\", () => {\n    $.MANY(() => {\n      $.CONSUME(t.UnaryPrefixOperatorNotPlusMinus);\n    });\n    $.SUBRULE($.primary);\n    $.MANY2(() => {\n      $.CONSUME(t.UnarySuffixOperator);\n    });\n  });\n\n  $.RULE(\"primary\", () => {\n    $.SUBRULE($.primaryPrefix);\n    $.MANY(() => {\n      $.SUBRULE($.primarySuffix);\n    });\n  });\n\n  $.RULE(\"primaryPrefix\", () => {\n    let isCastExpression = false;\n    if (tokenMatcher($.LA(1).tokenType, t.LBrace)) {\n      isCastExpression = this.BACKTRACK_LOOKAHEAD($.isCastExpression);\n    }\n\n    $.OR([\n      { ALT: () => $.SUBRULE($.literal) },\n      { ALT: () => $.CONSUME(t.This) },\n      { ALT: () => $.CONSUME(t.Void) },\n      // should be extracted to primitive type with optional dims suffix?\n      { ALT: () => $.SUBRULE($.numericType) },\n      { ALT: () => $.CONSUME(t.Boolean) },\n      { ALT: () => $.SUBRULE($.fqnOrRefType) },\n      {\n        GATE: () => isCastExpression,\n        ALT: () => $.SUBRULE($.castExpression)\n      },\n      { ALT: () => $.SUBRULE($.parenthesisExpression) },\n      { ALT: () => $.SUBRULE($.newExpression) }\n    ]);\n  });\n\n  $.RULE(\"primarySuffix\", () => {\n    $.OR({\n      DEF: [\n        {\n          ALT: () => {\n            $.CONSUME(t.Dot);\n            $.OR2([\n              { ALT: () => $.CONSUME(t.This) },\n              {\n                ALT: () =>\n                  $.SUBRULE($.unqualifiedClassInstanceCreationExpression)\n              },\n              {\n                ALT: () => {\n                  $.OPTION(() => {\n                    $.SUBRULE($.typeArguments);\n                  });\n                  $.CONSUME(t.Identifier);\n                }\n              }\n            ]);\n          }\n        },\n        { ALT: () => $.SUBRULE($.methodInvocationSuffix) },\n        { ALT: () => $.SUBRULE($.classLiteralSuffix) },\n        { ALT: () => $.SUBRULE($.arrayAccessSuffix) },\n        { ALT: () => $.SUBRULE($.methodReferenceSuffix) }\n      ],\n      MAX_LOOKAHEAD: 2\n    });\n  });\n\n  // See https://github.com/jhipster/prettier-java/pull/154 to understand\n  // why fqnOrRefTypePart is split in two rules (First and Rest)\n  $.RULE(\"fqnOrRefType\", () => {\n    $.SUBRULE($.fqnOrRefTypePartFirst);\n\n    $.MANY2({\n      // \".class\" is a classLiteralSuffix\n      GATE: () =>\n        // avoids ambiguity with \".this\" and \".new\" which are parsed as a primary suffix.\n        tokenMatcher(this.LA(2).tokenType, t.Class) === false &&\n        tokenMatcher(this.LA(2).tokenType, t.This) === false &&\n        tokenMatcher(this.LA(2).tokenType, t.New) === false,\n      DEF: () => {\n        $.CONSUME(t.Dot);\n        $.SUBRULE2($.fqnOrRefTypePartRest);\n      }\n    });\n\n    // in case of an arrayType\n    $.OPTION({\n      // it is not enough to check only the opening \"[\", we must avoid conflict with\n      // arrayAccessSuffix\n      GATE: () =>\n        tokenMatcher($.LA(1).tokenType, t.At) ||\n        tokenMatcher($.LA(2).tokenType, t.RSquare),\n      DEF: () => {\n        $.SUBRULE($.dims);\n      }\n    });\n  });\n\n  // TODO: validation:\n  //       1. \"annotation\" cannot be mixed with \"methodTypeArguments\" or \"Super\".\n  //       2. \"methodTypeArguments\" cannot be mixed with \"classTypeArguments\" or \"annotation\".\n  //       3. \"Super\" cannot be mixed with \"classTypeArguments\" or \"annotation\".\n  //       4. At most one \"Super\" may be used.\n  //       5. \"Super\" may be last or one before last (last may also be first if there is only a single part).\n  $.RULE(\"fqnOrRefTypePartRest\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n\n    $.OPTION({\n      NAME: \"$methodTypeArguments\",\n      DEF: () => {\n        $.SUBRULE2($.typeArguments);\n      }\n    });\n\n    $.SUBRULE($.fqnOrRefTypePartCommon);\n  });\n\n  $.RULE(\"fqnOrRefTypePartCommon\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.Identifier) },\n      { ALT: () => $.CONSUME(t.Super) }\n    ]);\n\n    let isRefTypeInMethodRef = false;\n    // Performance optimization, only perform this backtracking when a '<' is found\n    // TODO: performance optimization evaluation: avoid doing this backtracking for every \"<\" encountered.\n    //       we could do it once (using global state) per \"fqnOrRefType\"\n    // We could do it only once for\n    if (tokenMatcher($.LA(1).tokenType, t.Less)) {\n      isRefTypeInMethodRef = this.BACKTRACK_LOOKAHEAD($.isRefTypeInMethodRef);\n    }\n\n    $.OPTION2({\n      NAME: \"$classTypeArguments\",\n      // unrestricted typeArguments here would create an ambiguity with \"LessThan\" operator\n      // e.g: \"var x = a < b;\"\n      // The \"<\" would be parsed as the beginning of a \"typeArguments\"\n      // and we will get an error: \"expecting '>' but found: ';'\"\n      GATE: () => isRefTypeInMethodRef,\n      DEF: () => {\n        $.SUBRULE3($.typeArguments);\n      }\n    });\n  });\n\n  $.RULE(\"fqnOrRefTypePartFirst\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n\n    $.SUBRULE($.fqnOrRefTypePartCommon);\n  });\n\n  $.RULE(\"parenthesisExpression\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RBrace);\n  });\n\n  $.RULE(\"castExpression\", () => {\n    $.OR([\n      {\n        // TODO: performance: can avoid backtracking again here, parent rule could have this information\n        //       when it checks isCastExpression (refactor needed)\n        GATE: () => this.BACKTRACK_LOOKAHEAD($.isPrimitiveCastExpression),\n        ALT: () => $.SUBRULE($.primitiveCastExpression)\n      },\n      { ALT: () => $.SUBRULE($.referenceTypeCastExpression) }\n    ]);\n  });\n\n  $.RULE(\"primitiveCastExpression\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.primitiveType);\n    $.CONSUME(t.RBrace);\n    $.SUBRULE($.unaryExpression);\n  });\n\n  $.RULE(\"referenceTypeCastExpression\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.referenceType);\n    $.MANY(() => {\n      $.SUBRULE($.additionalBound);\n    });\n    $.CONSUME(t.RBrace);\n    $.OR([\n      {\n        GATE: () => this.BACKTRACK_LOOKAHEAD($.isLambdaExpression),\n        ALT: () => $.SUBRULE($.lambdaExpression)\n      },\n      { ALT: () => $.SUBRULE($.unaryExpressionNotPlusMinus) }\n    ]);\n  });\n\n  const newExpressionTypes = {\n    arrayCreationExpression: 1,\n    unqualifiedClassInstanceCreationExpression: 2\n  };\n  $.RULE(\"newExpression\", () => {\n    const type = this.BACKTRACK_LOOKAHEAD($.identifyNewExpressionType);\n\n    $.OR([\n      {\n        GATE: () => type === newExpressionTypes.arrayCreationExpression,\n        ALT: () => $.SUBRULE($.arrayCreationExpression)\n      },\n      {\n        GATE: () =>\n          type ===\n          newExpressionTypes.unqualifiedClassInstanceCreationExpression,\n        ALT: () => $.SUBRULE($.unqualifiedClassInstanceCreationExpression)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-UnqualifiedClassInstanceCreationExpression\n  $.RULE(\"unqualifiedClassInstanceCreationExpression\", () => {\n    $.CONSUME(t.New);\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n    $.SUBRULE($.classOrInterfaceTypeToInstantiate);\n    $.CONSUME(t.LBrace);\n    $.OPTION2(() => {\n      $.SUBRULE($.argumentList);\n    });\n    $.CONSUME(t.RBrace);\n    $.OPTION3(() => {\n      $.SUBRULE($.classBody);\n    });\n  });\n\n  $.RULE(\"classOrInterfaceTypeToInstantiate\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.Identifier);\n    $.MANY2(() => {\n      $.CONSUME(t.Dot);\n      $.MANY3(() => {\n        $.SUBRULE2($.annotation);\n      });\n      $.CONSUME2(t.Identifier);\n    });\n    $.OPTION(() => {\n      $.SUBRULE($.typeArgumentsOrDiamond);\n    });\n  });\n\n  $.RULE(\"typeArgumentsOrDiamond\", () => {\n    $.OR({\n      DEF: [\n        { ALT: () => $.SUBRULE($.diamond) },\n        { ALT: () => $.SUBRULE($.typeArguments) }\n      ],\n      MAX_LOOKAHEAD: 2\n    });\n  });\n\n  $.RULE(\"diamond\", () => {\n    $.CONSUME(t.Less);\n    $.CONSUME(t.Greater);\n  });\n\n  $.RULE(\"methodInvocationSuffix\", () => {\n    $.CONSUME(t.LBrace);\n    $.OPTION2(() => {\n      $.SUBRULE($.argumentList);\n    });\n    $.CONSUME(t.RBrace);\n  });\n\n  $.RULE(\"argumentList\", () => {\n    $.SUBRULE($.expression);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.expression);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-15.10.1\n  $.RULE(\"arrayCreationExpression\", () => {\n    $.CONSUME(t.New);\n    $.OR([\n      {\n        GATE: $.BACKTRACK($.primitiveType),\n        ALT: () => $.SUBRULE($.primitiveType)\n      },\n      { ALT: () => $.SUBRULE($.classOrInterfaceType) }\n    ]);\n\n    $.OR2([\n      {\n        GATE: $.BACKTRACK($.arrayCreationDefaultInitSuffix),\n        ALT: () => $.SUBRULE($.arrayCreationDefaultInitSuffix)\n      },\n      { ALT: () => $.SUBRULE($.arrayCreationExplicitInitSuffix) }\n    ]);\n  });\n\n  $.RULE(\"arrayCreationDefaultInitSuffix\", () => {\n    $.SUBRULE($.dimExprs);\n    $.OPTION(() => {\n      $.SUBRULE($.dims);\n    });\n  });\n\n  $.RULE(\"arrayCreationExplicitInitSuffix\", () => {\n    $.SUBRULE($.dims);\n    $.SUBRULE($.arrayInitializer);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-DimExprs\n  $.RULE(\"dimExprs\", () => {\n    $.SUBRULE($.dimExpr);\n    $.MANY({\n      // The GATE is to distinguish DimExpr from Dims :\n      // the only difference between these two is the presence of an expression in the DimExpr\n      // Example: If the GATE is not present double[3][] won't be parsed as the parser will try to parse \"[]\"\n      // as a dimExpr instead of a dims\n      GATE: () => tokenMatcher($.LA(2).tokenType, t.RSquare) === false,\n      DEF: () => $.SUBRULE2($.dimExpr)\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-DimExpr\n  $.RULE(\"dimExpr\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.LSquare);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RSquare);\n  });\n\n  $.RULE(\"classLiteralSuffix\", () => {\n    $.MANY(() => {\n      $.CONSUME(t.LSquare);\n      $.CONSUME(t.RSquare);\n    });\n    $.CONSUME(t.Dot);\n    $.CONSUME(t.Class);\n  });\n\n  $.RULE(\"arrayAccessSuffix\", () => {\n    $.CONSUME(t.LSquare);\n    $.SUBRULE($.expression);\n    $.CONSUME(t.RSquare);\n  });\n\n  $.RULE(\"methodReferenceSuffix\", () => {\n    $.CONSUME(t.ColonColon);\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n\n    $.OR([\n      { ALT: () => $.CONSUME(t.Identifier) },\n      // TODO: a constructor method reference (\"new\") can only be used\n      //   in specific contexts, but perhaps this verification is best left\n      //   for a semantic analysis phase\n      { ALT: () => $.CONSUME(t.New) }\n    ]);\n  });\n\n  // backtracking lookahead logic\n  $.RULE(\"identifyNewExpressionType\", () => {\n    $.CONSUME(t.New);\n    const firstTokenAfterNew = this.LA(1).tokenType;\n\n    // not an array initialization due to the prefix \"TypeArguments\"\n    if (tokenMatcher(firstTokenAfterNew, t.Less)) {\n      return newExpressionTypes.unqualifiedClassInstanceCreationExpression;\n    }\n\n    try {\n      $.SUBRULE($.classOrInterfaceTypeToInstantiate);\n    } catch (e) {\n      // if it is not a \"classOrInterfaceTypeToInstantiate\" then\n      // (assuming a valid input) we are looking at an \"arrayCreationExpression\"\n      return newExpressionTypes.arrayCreationExpression;\n    }\n\n    const firstTokenAfterClassType = this.LA(1).tokenType;\n    if (tokenMatcher(firstTokenAfterClassType, t.LBrace)) {\n      return newExpressionTypes.unqualifiedClassInstanceCreationExpression;\n    }\n\n    // The LBrace above is mandatory in \"classInstanceCreation...\" so\n    // it must be an \"arrayCreationExp\" (if the input is valid)\n    // TODO: upgrade the logic to return \"unknown\" type if at this\n    //       point it does not match \"arrayCreation\" either.\n    //   - This will provide a better error message to the user\n    //     in case of invalid inputs\n    return newExpressionTypes.arrayCreationExpression;\n  });\n\n  // Optimized backtracking, only scan ahead until the arrow(\"->\").\n  $.RULE(\"isLambdaExpression\", () => {\n    // TODO: this check of next two tokens is probably redundant as the normal lookahead should take care of this.\n    const firstTokenType = this.LA(1).tokenType;\n    const secondTokenType = this.LA(2).tokenType;\n    // no parent lambda \"x -> x * 2\"\n    if (\n      tokenMatcher(firstTokenType, t.Identifier) &&\n      tokenMatcher(secondTokenType, t.Arrow)\n    ) {\n      return true;\n    }\n    // Performance optimizations, fail fast if it is not a LBrace.\n    else if (tokenMatcher(firstTokenType, t.LBrace)) {\n      $.SUBRULE($.lambdaParametersWithBraces);\n      const followedByArrow = tokenMatcher(this.LA(1).tokenType, t.Arrow);\n      return followedByArrow;\n    }\n    return false;\n  });\n\n  $.RULE(\"isCastExpression\", () => {\n    if (this.BACKTRACK_LOOKAHEAD($.isPrimitiveCastExpression)) {\n      return true;\n    }\n    return this.BACKTRACK_LOOKAHEAD($.isReferenceTypeCastExpression);\n  });\n\n  $.RULE(\"isPrimitiveCastExpression\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.primitiveType);\n    // No dims so this is not a reference Type\n    $.CONSUME(t.RBrace);\n    return true;\n  });\n\n  $.RULE(\"isReferenceTypeCastExpression\", () => {\n    $.CONSUME(t.LBrace);\n    $.SUBRULE($.referenceType);\n    $.MANY(() => {\n      $.SUBRULE($.additionalBound);\n    });\n    $.CONSUME(t.RBrace);\n    const firstTokTypeAfterRBrace = this.LA(1).tokenType;\n\n    return (\n      this.firstForUnaryExpressionNotPlusMinus.find(tokType =>\n        tokenMatcher(firstTokTypeAfterRBrace, tokType)\n      ) !== undefined\n    );\n  });\n\n  $.RULE(\"isRefTypeInMethodRef\", () => {\n    let result = undefined;\n    $.SUBRULE($.typeArguments);\n\n    // arrayType\n    const hasDims = $.OPTION(() => {\n      $.SUBRULE($.dims);\n    });\n\n    const firstTokTypeAfterTypeArgs = this.LA(1).tokenType;\n    if (tokenMatcher(firstTokTypeAfterTypeArgs, t.ColonColon)) {\n      result = true;\n    }\n    // we must be at the end of a \"referenceType\" if \"dims\" were encountered\n    // So there is not point to check farther\n    else if (hasDims) {\n      result = false;\n    }\n\n    // in the middle of a \"classReferenceType\"\n    $.OPTION2(() => {\n      $.CONSUME(t.Dot);\n      $.SUBRULE($.classOrInterfaceType);\n    });\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    const firstTokTypeAfterRefType = this.LA(1).tokenType;\n    return tokenMatcher(firstTokTypeAfterRefType, t.ColonColon);\n  });\n}\n\nfunction computeFirstForUnaryExpressionNotPlusMinus() {\n  const firstUnaryExpressionNotPlusMinus = this.computeContentAssist(\n    \"unaryExpressionNotPlusMinus\",\n    []\n  );\n  const nextTokTypes = firstUnaryExpressionNotPlusMinus.map(\n    x => x.nextTokenType\n  );\n  // uniq\n  return nextTokTypes.filter((v, i, a) => a.indexOf(v) === i);\n}\n\nmodule.exports = {\n  defineRules,\n  computeFirstForUnaryExpressionNotPlusMinus\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/expressions.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/interfaces.js":
/*!****************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/interfaces.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceDeclaration\n  $.RULE(\"interfaceDeclaration\", () => {\n    // Spec Deviation: extracted the common \"interfaceModifier\" prefix to avoid backtracking.\n    $.MANY({\n      DEF: () => {\n        $.SUBRULE($.interfaceModifier);\n      },\n      MAX_LOOKAHEAD: 2\n    });\n\n    $.OR([\n      { ALT: () => $.SUBRULE($.normalInterfaceDeclaration) },\n      { ALT: () => $.SUBRULE($.annotationTypeDeclaration) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-NormalInterfaceDeclaration\n  $.RULE(\"normalInterfaceDeclaration\", () => {\n    // Spec Deviation: The \"interfaceModifier\" prefix was extracted to the \"interfaceDeclaration\"\n    $.CONSUME(t.Interface);\n    $.SUBRULE($.typeIdentifier);\n    $.OPTION(() => {\n      $.SUBRULE($.typeParameters);\n    });\n    $.OPTION2(() => {\n      $.SUBRULE($.extendsInterfaces);\n    });\n    $.SUBRULE($.interfaceBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceModifier\n  $.RULE(\"interfaceModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Protected) },\n      { ALT: () => $.CONSUME(t.Private) },\n      { ALT: () => $.CONSUME(t.Abstract) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Strictfp) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ExtendsInterfaces\n  $.RULE(\"extendsInterfaces\", () => {\n    $.CONSUME(t.Extends);\n    $.SUBRULE($.interfaceTypeList);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceBody\n  $.RULE(\"interfaceBody\", () => {\n    $.CONSUME(t.LCurly);\n    $.MANY(() => {\n      $.SUBRULE($.interfaceMemberDeclaration);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  const InterfaceBodyTypes = {\n    unknown: 0,\n    constantDeclaration: 1,\n    interfaceMethodDeclaration: 2,\n    classDeclaration: 3,\n    interfaceDeclaration: 4,\n    semiColon: 5\n  };\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMemberDeclaration\n  $.RULE(\"interfaceMemberDeclaration\", () => {\n    const detectedType = this.BACKTRACK_LOOKAHEAD(\n      $.identifyInterfaceBodyDeclarationType\n    );\n\n    $.OR([\n      {\n        GATE: () => detectedType === InterfaceBodyTypes.constantDeclaration,\n        ALT: () => $.SUBRULE($.constantDeclaration)\n      },\n      {\n        GATE: () =>\n          detectedType === InterfaceBodyTypes.interfaceMethodDeclaration,\n        ALT: () => $.SUBRULE($.interfaceMethodDeclaration)\n      },\n      {\n        GATE: () => detectedType === InterfaceBodyTypes.classDeclaration,\n        ALT: () => $.SUBRULE($.classDeclaration)\n      },\n      {\n        GATE: () => detectedType === InterfaceBodyTypes.interfaceDeclaration,\n        ALT: () => $.SUBRULE($.interfaceDeclaration)\n      },\n      {\n        // No GATE is needed as this is LL(1)\n        ALT: () => $.CONSUME(t.Semicolon)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ConstantDeclaration\n  $.RULE(\"constantDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.constantModifier);\n    });\n    $.SUBRULE($.unannType);\n    $.SUBRULE($.variableDeclaratorList);\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ConstantModifier\n  $.RULE(\"constantModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Final) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMethodDeclaration\n  $.RULE(\"interfaceMethodDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.interfaceMethodModifier);\n    });\n    $.SUBRULE($.methodHeader);\n    $.SUBRULE($.methodBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMethodModifier\n  $.RULE(\"interfaceMethodModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Private) },\n      { ALT: () => $.CONSUME(t.Abstract) },\n      { ALT: () => $.CONSUME(t.Default) },\n      { ALT: () => $.CONSUME(t.Static) },\n      { ALT: () => $.CONSUME(t.Strictfp) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeDeclaration\n  $.RULE(\"annotationTypeDeclaration\", () => {\n    // Spec Deviation: The \"interfaceModifier\" prefix was extracted to the \"interfaceDeclaration\"\n    $.CONSUME(t.At);\n    $.CONSUME(t.Interface);\n    $.SUBRULE($.typeIdentifier);\n    $.SUBRULE($.annotationTypeBody);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeBody\n  $.RULE(\"annotationTypeBody\", () => {\n    $.CONSUME(t.LCurly);\n    $.MANY(() => {\n      $.SUBRULE($.annotationTypeMemberDeclaration);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  const AnnotationBodyTypes = {\n    unknown: 0,\n    annotationTypeElementDeclaration: 2,\n    constantDeclaration: 1,\n    classDeclaration: 3,\n    interfaceDeclaration: 4,\n    semiColon: 5\n  };\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMemberDeclaration\n  $.RULE(\"annotationTypeMemberDeclaration\", () => {\n    const detectedType = this.BACKTRACK_LOOKAHEAD(\n      $.identifyAnnotationBodyDeclarationType\n    );\n\n    $.OR([\n      {\n        GATE: () =>\n          detectedType === AnnotationBodyTypes.annotationTypeElementDeclaration,\n        ALT: () => $.SUBRULE($.annotationTypeElementDeclaration)\n      },\n      {\n        GATE: () => detectedType === AnnotationBodyTypes.constantDeclaration,\n        ALT: () => $.SUBRULE($.constantDeclaration)\n      },\n      {\n        GATE: () => detectedType === AnnotationBodyTypes.classDeclaration,\n        ALT: () => $.SUBRULE($.classDeclaration)\n      },\n      {\n        GATE: () => detectedType === AnnotationBodyTypes.interfaceDeclaration,\n        ALT: () => $.SUBRULE($.interfaceDeclaration)\n      },\n      {\n        // No GATE is needed as this is LL(1)\n        ALT: () => $.CONSUME(t.Semicolon)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeElementDeclaration\n  $.RULE(\"annotationTypeElementDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotationTypeElementModifier);\n    });\n    $.SUBRULE($.unannType);\n    $.CONSUME(t.Identifier);\n    $.CONSUME(t.LBrace);\n    $.CONSUME(t.RBrace);\n    $.OPTION(() => {\n      $.SUBRULE($.dims);\n    });\n    $.OPTION2(() => {\n      $.SUBRULE($.defaultValue);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeElementModifier\n  $.RULE(\"annotationTypeElementModifier\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.annotation) },\n      { ALT: () => $.CONSUME(t.Public) },\n      { ALT: () => $.CONSUME(t.Abstract) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-DefaultValue\n  $.RULE(\"defaultValue\", () => {\n    $.CONSUME(t.Default);\n    $.SUBRULE($.elementValue);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-Annotation\n  $.RULE(\"annotation\", () => {\n    // Spec Deviation: The common prefix for all three annotation types was extracted to this rule.\n    // This was done to avoid the use of backtracking for performance reasons.\n    $.CONSUME(t.At);\n    $.SUBRULE($.typeName);\n\n    // If this optional grammar was not invoked we have a markerAnnotation\n    // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-MarkerAnnotation\n    $.OPTION(() => {\n      $.CONSUME(t.LBrace);\n      $.OR({\n        DEF: [\n          // normal annotation - https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-NormalAnnotation\n          { ALT: () => $.SUBRULE($.elementValuePairList) },\n          // Single Element Annotation - https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-SingleElementAnnotation\n          {\n            ALT: () => $.SUBRULE($.elementValue)\n          },\n          {\n            ALT: () => {\n              /* empty normal annotation contents */\n            }\n          }\n        ],\n        IGNORE_AMBIGUITIES: true,\n        MAX_LOOKAHEAD: 2\n      });\n      $.CONSUME(t.RBrace);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValuePairList\n  $.RULE(\"elementValuePairList\", () => {\n    $.SUBRULE($.elementValuePair);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.elementValuePair);\n    });\n  });\n\n  $.RULE(\"elementValuePair\", () => {\n    $.CONSUME(t.Identifier);\n    $.CONSUME(t.Equals);\n    $.SUBRULE($.elementValue);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValue\n  $.RULE(\"elementValue\", () => {\n    const isSimpleElementValueAnnotation = this.BACKTRACK_LOOKAHEAD(\n      $.isSimpleElementValueAnnotation\n    );\n\n    $.OR([\n      // Spec Deviation: \"conditionalExpression\" replaced with \"expression\"\n      // Because we cannot differentiate between the two using fixed lookahead.\n      {\n        GATE: () => isSimpleElementValueAnnotation === false,\n        ALT: () => $.SUBRULE($.expression)\n      },\n      { ALT: () => $.SUBRULE($.elementValueArrayInitializer) },\n      {\n        GATE: () => isSimpleElementValueAnnotation === true,\n        ALT: () => $.SUBRULE($.annotation)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValueArrayInitializer\n  $.RULE(\"elementValueArrayInitializer\", () => {\n    $.CONSUME(t.LCurly);\n    $.OPTION(() => {\n      $.SUBRULE($.elementValueList);\n    });\n    $.OPTION2(() => {\n      $.CONSUME(t.Comma);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValueList\n  $.RULE(\"elementValueList\", () => {\n    $.SUBRULE($.elementValue);\n    $.MANY({\n      GATE: () => tokenMatcher($.LA(2).tokenType, t.RCurly) === false,\n      DEF: () => {\n        $.CONSUME(t.Comma);\n        $.SUBRULE2($.elementValue);\n      }\n    });\n  });\n\n  // ------------------------------------\n  // Special optimized backtracking rules.\n  // ------------------------------------\n  $.RULE(\"identifyInterfaceBodyDeclarationType\", () => {\n    let nextTokenType = this.LA(1).tokenType;\n    if (tokenMatcher(nextTokenType, t.Semicolon)) {\n      return InterfaceBodyTypes.semiColon;\n    }\n\n    // We have to look beyond the modifiers to distinguish between the declaration types.\n    $.MANY({\n      // To avoid ambiguity with @interface (\"AnnotationTypeDeclaration\" vs \"Annotaion\")\n      GATE: () =>\n        (tokenMatcher($.LA(1).tokenType, t.At) &&\n          tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n      DEF: () => {\n        // This alternation includes all possible modifiers for all types of \"interfaceMemberDeclaration\"\n        // Certain combinations are syntactically invalid, this is **not** checked here,\n        // Invalid combinations will cause a descriptive parsing error message to be\n        // Created inside the relevant parsing rules **after** this lookahead\n        // analysis.\n        $.OR([\n          { ALT: () => $.SUBRULE($.annotation) },\n          { ALT: () => $.CONSUME(t.Public) },\n          { ALT: () => $.CONSUME(t.Protected) },\n          { ALT: () => $.CONSUME(t.Private) },\n          { ALT: () => $.CONSUME(t.Static) },\n          { ALT: () => $.CONSUME(t.Final) },\n          { ALT: () => $.CONSUME(t.Abstract) },\n          { ALT: () => $.CONSUME(t.Default) },\n          { ALT: () => $.CONSUME(t.Strictfp) }\n        ]);\n      }\n    });\n\n    nextTokenType = this.LA(1).tokenType;\n    if (\n      tokenMatcher(nextTokenType, t.Class) ||\n      tokenMatcher(nextTokenType, t.Enum)\n    ) {\n      return InterfaceBodyTypes.classDeclaration;\n    }\n    if (\n      tokenMatcher(nextTokenType, t.Interface) ||\n      tokenMatcher(nextTokenType, t.At)\n    ) {\n      return InterfaceBodyTypes.interfaceDeclaration;\n    }\n    if (\n      tokenMatcher(nextTokenType, t.Void) ||\n      tokenMatcher(nextTokenType, t.Less)\n    ) {\n      // method with result type \"void\"\n      return InterfaceBodyTypes.interfaceMethodDeclaration;\n    }\n\n    // Only constant or interfaceMethod declarations may be valid at this point.\n    // All other alternatives should have been attempted.\n    // **both** start with \"unannType\"\n    this.SUBRULE($.unannType);\n\n    const nextToken = this.LA(1);\n    const nextNextTokenType = this.LA(2).tokenType;\n    // \"foo(...\" --> look like method start\n    if (\n      tokenMatcher(nextToken, t.Identifier) &&\n      tokenMatcher(nextNextTokenType, t.LBrace)\n    ) {\n      return InterfaceBodyTypes.interfaceMethodDeclaration;\n    }\n    // a valid constant\n    if (tokenMatcher(nextToken, t.Identifier)) {\n      return InterfaceBodyTypes.constantDeclaration;\n    }\n    return InterfaceBodyTypes.unknown;\n  });\n\n  $.RULE(\"identifyAnnotationBodyDeclarationType\", () => {\n    let nextTokenType = this.LA(1).tokenType;\n    if (tokenMatcher(nextTokenType, t.Semicolon)) {\n      return AnnotationBodyTypes.semiColon;\n    }\n\n    // We have to look beyond the modifiers to distinguish between the declaration types.\n    $.MANY({\n      // To avoid ambiguity with @interface (\"AnnotationTypeDeclaration\" vs \"Annotaion\")\n      GATE: () =>\n        (tokenMatcher($.LA(1).tokenType, t.At) &&\n          tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n      DEF: () => {\n        // This alternation includes all possible modifiers for all types of \"annotationTypeMemberDeclaration\"\n        // Certain combinations are syntactically invalid, this is **not** checked here,\n        // Invalid combinations will cause a descriptive parsing error message to be\n        // Created inside the relevant parsing rules **after** this lookahead\n        // analysis.\n        $.OR([\n          { ALT: () => $.SUBRULE($.annotation) },\n          { ALT: () => $.CONSUME(t.Public) },\n          { ALT: () => $.CONSUME(t.Protected) },\n          { ALT: () => $.CONSUME(t.Private) },\n          { ALT: () => $.CONSUME(t.Abstract) },\n          { ALT: () => $.CONSUME(t.Static) },\n          { ALT: () => $.CONSUME(t.Final) },\n          { ALT: () => $.CONSUME(t.Strictfp) }\n        ]);\n      }\n    });\n\n    nextTokenType = this.LA(1).tokenType;\n    if (\n      tokenMatcher(nextTokenType, t.Class) ||\n      tokenMatcher(nextTokenType, t.Enum)\n    ) {\n      return AnnotationBodyTypes.classDeclaration;\n    }\n    if (\n      tokenMatcher(nextTokenType, t.Interface) ||\n      tokenMatcher(nextTokenType, t.At)\n    ) {\n      return AnnotationBodyTypes.interfaceDeclaration;\n    }\n\n    // Only constant or annotationTypeElement declarations may be valid at this point.\n    // All other alternatives should have been attempted.\n    // **both** start with \"unannType\"\n    this.SUBRULE($.unannType);\n\n    nextTokenType = this.LA(1).tokenType;\n    const nextNextTokenType = this.LA(2).tokenType;\n    // \"foo(...\" --> look like annotationTypeElement start\n    if (\n      tokenMatcher(nextTokenType, t.Identifier) &&\n      tokenMatcher(nextNextTokenType, t.LBrace)\n    ) {\n      return AnnotationBodyTypes.annotationTypeElementDeclaration;\n    }\n    // a valid constant\n    if (tokenMatcher(nextTokenType, t.Identifier)) {\n      return AnnotationBodyTypes.constantDeclaration;\n    }\n    return AnnotationBodyTypes.unknown;\n  });\n\n  $.RULE(\"isSimpleElementValueAnnotation\", () => {\n    $.SUBRULE($.annotation);\n    const nextTokenType = this.LA(1).tokenType;\n    switch (nextTokenType) {\n      // annotation in \"ElementValue\" would be followed by one of those\n      // any other TokenType would indicate it is an annotation in a \"referenceType\"\n      // as part of a \"methodReference\" in \"primary\"\n      case t.Comma:\n      case t.Semicolon:\n      case t.RCurly:\n      case t.RBrace:\n        return true;\n      default:\n        return false;\n    }\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/interfaces.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/lexical-structure.js":
/*!***********************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/lexical-structure.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-Literal\n  $.RULE(\"literal\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.integerLiteral) },\n      { ALT: () => $.SUBRULE($.floatingPointLiteral) },\n      { ALT: () => $.SUBRULE($.booleanLiteral) },\n      { ALT: () => $.CONSUME(t.CharLiteral) },\n      { ALT: () => $.CONSUME(t.StringLiteral) },\n      { ALT: () => $.CONSUME(t.Null) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-IntegerLiteral\n  $.RULE(\"integerLiteral\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.DecimalLiteral) },\n      { ALT: () => $.CONSUME(t.HexLiteral) },\n      { ALT: () => $.CONSUME(t.OctalLiteral) },\n      { ALT: () => $.CONSUME(t.BinaryLiteral) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-FloatingPointLiteral\n  $.RULE(\"floatingPointLiteral\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.FloatLiteral) },\n      { ALT: () => $.CONSUME(t.HexFloatLiteral) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-BooleanLiteral\n  $.RULE(\"booleanLiteral\", () => {\n    $.OR([{ ALT: () => $.CONSUME(t.True) }, { ALT: () => $.CONSUME(t.False) }]);\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL3Byb2R1Y3Rpb25zL2xleGljYWwtc3RydWN0dXJlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2phdmEtcGFyc2VyL3NyYy9wcm9kdWN0aW9ucy9sZXhpY2FsLXN0cnVjdHVyZS5qcz81OTQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZGVmaW5lUnVsZXMoJCwgdCkge1xuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtMy5odG1sI2pscy1MaXRlcmFsXG4gICQuUlVMRShcImxpdGVyYWxcIiwgKCkgPT4ge1xuICAgICQuT1IoW1xuICAgICAgeyBBTFQ6ICgpID0+ICQuU1VCUlVMRSgkLmludGVnZXJMaXRlcmFsKSB9LFxuICAgICAgeyBBTFQ6ICgpID0+ICQuU1VCUlVMRSgkLmZsb2F0aW5nUG9pbnRMaXRlcmFsKSB9LFxuICAgICAgeyBBTFQ6ICgpID0+ICQuU1VCUlVMRSgkLmJvb2xlYW5MaXRlcmFsKSB9LFxuICAgICAgeyBBTFQ6ICgpID0+ICQuQ09OU1VNRSh0LkNoYXJMaXRlcmFsKSB9LFxuICAgICAgeyBBTFQ6ICgpID0+ICQuQ09OU1VNRSh0LlN0cmluZ0xpdGVyYWwpIH0sXG4gICAgICB7IEFMVDogKCkgPT4gJC5DT05TVU1FKHQuTnVsbCkgfVxuICAgIF0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtMy5odG1sI2pscy1JbnRlZ2VyTGl0ZXJhbFxuICAkLlJVTEUoXCJpbnRlZ2VyTGl0ZXJhbFwiLCAoKSA9PiB7XG4gICAgJC5PUihbXG4gICAgICB7IEFMVDogKCkgPT4gJC5DT05TVU1FKHQuRGVjaW1hbExpdGVyYWwpIH0sXG4gICAgICB7IEFMVDogKCkgPT4gJC5DT05TVU1FKHQuSGV4TGl0ZXJhbCkgfSxcbiAgICAgIHsgQUxUOiAoKSA9PiAkLkNPTlNVTUUodC5PY3RhbExpdGVyYWwpIH0sXG4gICAgICB7IEFMVDogKCkgPT4gJC5DT05TVU1FKHQuQmluYXJ5TGl0ZXJhbCkgfVxuICAgIF0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtMy5odG1sI2pscy1GbG9hdGluZ1BvaW50TGl0ZXJhbFxuICAkLlJVTEUoXCJmbG9hdGluZ1BvaW50TGl0ZXJhbFwiLCAoKSA9PiB7XG4gICAgJC5PUihbXG4gICAgICB7IEFMVDogKCkgPT4gJC5DT05TVU1FKHQuRmxvYXRMaXRlcmFsKSB9LFxuICAgICAgeyBBTFQ6ICgpID0+ICQuQ09OU1VNRSh0LkhleEZsb2F0TGl0ZXJhbCkgfVxuICAgIF0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtMy5odG1sI2pscy1Cb29sZWFuTGl0ZXJhbFxuICAkLlJVTEUoXCJib29sZWFuTGl0ZXJhbFwiLCAoKSA9PiB7XG4gICAgJC5PUihbeyBBTFQ6ICgpID0+ICQuQ09OU1VNRSh0LlRydWUpIH0sIHsgQUxUOiAoKSA9PiAkLkNPTlNVTUUodC5GYWxzZSkgfV0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmluZVJ1bGVzXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/lexical-structure.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/names.js":
/*!***********************************************************!*\
  !*** ./node_modules/java-parser/src/productions/names.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-ModuleName\n  $.RULE(\"moduleName\", () => {\n    $.CONSUME(t.Identifier);\n    $.MANY(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-PackageName\n  $.RULE(\"packageName\", () => {\n    $.CONSUME(t.Identifier);\n    $.MANY(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-TypeName\n  $.RULE(\"typeName\", () => {\n    // Spec Deviation: The last Identifier in a \"typeName\" may not be be \"var\"\n    //                 But the parser does not check for that.\n    // TODO: post parsing semantic check: last \"Identifier\" in a \"typeName\"\n    //                                    cannot be the \"var\" keyword\n    // TODO: option 2 implement \"Not Var\" Ident using token categories?\n    $.CONSUME(t.Identifier);\n    $.MANY(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-ExpressionName\n  $.RULE(\"expressionName\", () => {\n    // Spec Deviation: in-lined \"ambiguousName\" to be LL(K)\n    $.CONSUME(t.Identifier);\n    $.MANY({\n      // expressionName could be called by \"qualifiedExplicitConstructorInvocation\"\n      // in that case it may be followed by \".super\" so we need to look two tokens\n      // ahead.\n      GATE: () => tokenMatcher(this.LA(2).tokenType, t.Identifier),\n      DEF: () => {\n        $.CONSUME(t.Dot);\n        $.CONSUME2(t.Identifier);\n      }\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-MethodName\n  $.RULE(\"methodName\", () => {\n    $.CONSUME(t.Identifier);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-PackageOrTypeName\n  $.RULE(\"packageOrTypeName\", () => {\n    $.CONSUME(t.Identifier);\n    $.MANY({\n      // In some contexts a \"Dot Star\" (.*) may appear\n      // after a \"packageOrTypeName\", by default Chevrotain will\n      // only look a single token ahead (Dot) to determine if another iteration\n      // exists which will cause a parsing error for inputs such as:\n      // \"import a.b.c.*\"\n      GATE: () => tokenMatcher(this.LA(2).tokenType, t.Star) === false,\n      DEF: () => {\n        $.CONSUME(t.Dot);\n        $.CONSUME2(t.Identifier);\n      }\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-AmbiguousName\n  $.RULE(\"ambiguousName\", () => {\n    $.CONSUME(t.Identifier);\n    $.MANY(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL3Byb2R1Y3Rpb25zL25hbWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2phdmEtcGFyc2VyL3NyYy9wcm9kdWN0aW9ucy9uYW1lcy5qcz9hYmY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgeyB0b2tlbk1hdGNoZXIgfSA9IHJlcXVpcmUoXCJjaGV2cm90YWluXCIpO1xuZnVuY3Rpb24gZGVmaW5lUnVsZXMoJCwgdCkge1xuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1Nb2R1bGVOYW1lXG4gICQuUlVMRShcIm1vZHVsZU5hbWVcIiwgKCkgPT4ge1xuICAgICQuQ09OU1VNRSh0LklkZW50aWZpZXIpO1xuICAgICQuTUFOWSgoKSA9PiB7XG4gICAgICAkLkNPTlNVTUUodC5Eb3QpO1xuICAgICAgJC5DT05TVU1FMih0LklkZW50aWZpZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1QYWNrYWdlTmFtZVxuICAkLlJVTEUoXCJwYWNrYWdlTmFtZVwiLCAoKSA9PiB7XG4gICAgJC5DT05TVU1FKHQuSWRlbnRpZmllcik7XG4gICAgJC5NQU5ZKCgpID0+IHtcbiAgICAgICQuQ09OU1VNRSh0LkRvdCk7XG4gICAgICAkLkNPTlNVTUUyKHQuSWRlbnRpZmllcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS9zcGVjcy9qbHMvc2UxMS9odG1sL2pscy02Lmh0bWwjamxzLVR5cGVOYW1lXG4gICQuUlVMRShcInR5cGVOYW1lXCIsICgpID0+IHtcbiAgICAvLyBTcGVjIERldmlhdGlvbjogVGhlIGxhc3QgSWRlbnRpZmllciBpbiBhIFwidHlwZU5hbWVcIiBtYXkgbm90IGJlIGJlIFwidmFyXCJcbiAgICAvLyAgICAgICAgICAgICAgICAgQnV0IHRoZSBwYXJzZXIgZG9lcyBub3QgY2hlY2sgZm9yIHRoYXQuXG4gICAgLy8gVE9ETzogcG9zdCBwYXJzaW5nIHNlbWFudGljIGNoZWNrOiBsYXN0IFwiSWRlbnRpZmllclwiIGluIGEgXCJ0eXBlTmFtZVwiXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5ub3QgYmUgdGhlIFwidmFyXCIga2V5d29yZFxuICAgIC8vIFRPRE86IG9wdGlvbiAyIGltcGxlbWVudCBcIk5vdCBWYXJcIiBJZGVudCB1c2luZyB0b2tlbiBjYXRlZ29yaWVzP1xuICAgICQuQ09OU1VNRSh0LklkZW50aWZpZXIpO1xuICAgICQuTUFOWSgoKSA9PiB7XG4gICAgICAkLkNPTlNVTUUodC5Eb3QpO1xuICAgICAgJC5DT05TVU1FMih0LklkZW50aWZpZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1FeHByZXNzaW9uTmFtZVxuICAkLlJVTEUoXCJleHByZXNzaW9uTmFtZVwiLCAoKSA9PiB7XG4gICAgLy8gU3BlYyBEZXZpYXRpb246IGluLWxpbmVkIFwiYW1iaWd1b3VzTmFtZVwiIHRvIGJlIExMKEspXG4gICAgJC5DT05TVU1FKHQuSWRlbnRpZmllcik7XG4gICAgJC5NQU5ZKHtcbiAgICAgIC8vIGV4cHJlc3Npb25OYW1lIGNvdWxkIGJlIGNhbGxlZCBieSBcInF1YWxpZmllZEV4cGxpY2l0Q29uc3RydWN0b3JJbnZvY2F0aW9uXCJcbiAgICAgIC8vIGluIHRoYXQgY2FzZSBpdCBtYXkgYmUgZm9sbG93ZWQgYnkgXCIuc3VwZXJcIiBzbyB3ZSBuZWVkIHRvIGxvb2sgdHdvIHRva2Vuc1xuICAgICAgLy8gYWhlYWQuXG4gICAgICBHQVRFOiAoKSA9PiB0b2tlbk1hdGNoZXIodGhpcy5MQSgyKS50b2tlblR5cGUsIHQuSWRlbnRpZmllciksXG4gICAgICBERUY6ICgpID0+IHtcbiAgICAgICAgJC5DT05TVU1FKHQuRG90KTtcbiAgICAgICAgJC5DT05TVU1FMih0LklkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1NZXRob2ROYW1lXG4gICQuUlVMRShcIm1ldGhvZE5hbWVcIiwgKCkgPT4ge1xuICAgICQuQ09OU1VNRSh0LklkZW50aWZpZXIpO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1QYWNrYWdlT3JUeXBlTmFtZVxuICAkLlJVTEUoXCJwYWNrYWdlT3JUeXBlTmFtZVwiLCAoKSA9PiB7XG4gICAgJC5DT05TVU1FKHQuSWRlbnRpZmllcik7XG4gICAgJC5NQU5ZKHtcbiAgICAgIC8vIEluIHNvbWUgY29udGV4dHMgYSBcIkRvdCBTdGFyXCIgKC4qKSBtYXkgYXBwZWFyXG4gICAgICAvLyBhZnRlciBhIFwicGFja2FnZU9yVHlwZU5hbWVcIiwgYnkgZGVmYXVsdCBDaGV2cm90YWluIHdpbGxcbiAgICAgIC8vIG9ubHkgbG9vayBhIHNpbmdsZSB0b2tlbiBhaGVhZCAoRG90KSB0byBkZXRlcm1pbmUgaWYgYW5vdGhlciBpdGVyYXRpb25cbiAgICAgIC8vIGV4aXN0cyB3aGljaCB3aWxsIGNhdXNlIGEgcGFyc2luZyBlcnJvciBmb3IgaW5wdXRzIHN1Y2ggYXM6XG4gICAgICAvLyBcImltcG9ydCBhLmIuYy4qXCJcbiAgICAgIEdBVEU6ICgpID0+IHRva2VuTWF0Y2hlcih0aGlzLkxBKDIpLnRva2VuVHlwZSwgdC5TdGFyKSA9PT0gZmFsc2UsXG4gICAgICBERUY6ICgpID0+IHtcbiAgICAgICAgJC5DT05TVU1FKHQuRG90KTtcbiAgICAgICAgJC5DT05TVU1FMih0LklkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2Uvc3BlY3MvamxzL3NlMTEvaHRtbC9qbHMtNi5odG1sI2pscy1BbWJpZ3VvdXNOYW1lXG4gICQuUlVMRShcImFtYmlndW91c05hbWVcIiwgKCkgPT4ge1xuICAgICQuQ09OU1VNRSh0LklkZW50aWZpZXIpO1xuICAgICQuTUFOWSgoKSA9PiB7XG4gICAgICAkLkNPTlNVTUUodC5Eb3QpO1xuICAgICAgJC5DT05TVU1FMih0LklkZW50aWZpZXIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmluZVJ1bGVzXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/names.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/packages-and-modules.js":
/*!**************************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/packages-and-modules.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { isRecognitionException, tokenMatcher, EOF } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\nfunction defineRules($, t) {\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#CompilationUnit\n  $.RULE(\"compilationUnit\", () => {\n    // custom optimized backtracking lookahead logic\n    const isModule = $.BACKTRACK_LOOKAHEAD($.isModuleCompilationUnit);\n\n    $.OR([\n      {\n        GATE: () => isModule === false,\n        ALT: () => $.SUBRULE($.ordinaryCompilationUnit)\n      },\n      {\n        ALT: () => $.SUBRULE($.modularCompilationUnit)\n      }\n    ]);\n    // https://github.com/jhipster/prettier-java/pull/217\n    $.CONSUME(EOF);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-OrdinaryCompilationUnit\n  $.RULE(\"ordinaryCompilationUnit\", () => {\n    $.OPTION({\n      GATE: $.BACKTRACK($.packageDeclaration),\n      DEF: () => {\n        $.SUBRULE($.packageDeclaration);\n      }\n    });\n    $.MANY(() => {\n      $.SUBRULE3($.importDeclaration);\n    });\n    $.MANY2(() => {\n      $.SUBRULE($.typeDeclaration);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModularCompilationUnit\n  $.RULE(\"modularCompilationUnit\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.importDeclaration);\n    });\n    $.SUBRULE($.moduleDeclaration);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-PackageDeclaration\n  $.RULE(\"packageDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.packageModifier);\n    });\n    $.CONSUME(t.Package);\n    $.CONSUME(t.Identifier);\n    $.MANY2(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n    $.CONSUME2(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-PackageModifier\n  $.RULE(\"packageModifier\", () => {\n    $.SUBRULE($.annotation);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ImportDeclaration\n  $.RULE(\"importDeclaration\", () => {\n    // Spec Deviation: The spec defines four different kinds of import declarations.\n    //                 Our grammar however combines those into a single rule due to difficulties\n    //                 distinguishing between the alternatives due to unbound common prefix.\n    // TODO: A post parsing step is required to align with the official specs.\n    //       The Identifier \"var\" is not allowed in all positions and variations of the importDeclaration\n    $.OR([\n      {\n        ALT: () => {\n          $.CONSUME(t.Import);\n          $.OPTION(() => {\n            $.CONSUME(t.Static);\n          });\n          $.SUBRULE($.packageOrTypeName);\n          $.OPTION2(() => {\n            $.CONSUME(t.Dot);\n            $.CONSUME(t.Star);\n          });\n          $.CONSUME(t.Semicolon);\n        }\n      },\n      // Spec Deviation: The spec do not allow empty statement in between imports.\n      //                 However Java compiler consider empty statements valid, we chose\n      //                 to support that case, thus deviate from the spec.\n      //                 See here: https://github.com/jhipster/prettier-java/pull/158\n      {\n        ALT: () => $.SUBRULE($.emptyStatement)\n      }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-TypeDeclaration\n  $.RULE(\"typeDeclaration\", () => {\n    // TODO: consider extracting the prefix modifiers here to avoid backtracking\n    const isClassDeclaration = this.BACKTRACK_LOOKAHEAD($.isClassDeclaration);\n\n    $.OR([\n      {\n        GATE: () => isClassDeclaration,\n        ALT: () => $.SUBRULE($.classDeclaration)\n      },\n      { ALT: () => $.SUBRULE($.interfaceDeclaration) },\n      { ALT: () => $.CONSUME(t.Semicolon) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModuleDeclaration\n  $.RULE(\"moduleDeclaration\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.OPTION(() => {\n      $.CONSUME(t.Open);\n    });\n    $.CONSUME(t.Module);\n    $.CONSUME(t.Identifier);\n    $.MANY2(() => {\n      $.CONSUME(t.Dot);\n      $.CONSUME2(t.Identifier);\n    });\n    $.CONSUME(t.LCurly);\n    $.MANY3(() => {\n      $.SUBRULE($.moduleDirective);\n    });\n    $.CONSUME(t.RCurly);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModuleDirective\n  $.RULE(\"moduleDirective\", () => {\n    // Spec Deviation: Each of the alternatives of \"moduleDirective\" was extracted\n    //                 to its own nonTerminal, to reduce verbosity.\n    $.OR([\n      { ALT: () => $.SUBRULE($.requiresModuleDirective) },\n      { ALT: () => $.SUBRULE($.exportsModuleDirective) },\n      { ALT: () => $.SUBRULE($.opensModuleDirective) },\n      { ALT: () => $.SUBRULE($.usesModuleDirective) },\n      { ALT: () => $.SUBRULE($.providesModuleDirective) }\n    ]);\n  });\n\n  $.RULE(\"requiresModuleDirective\", () => {\n    // Spec Deviation: extracted from \"moduleDirective\"\n    $.CONSUME(t.Requires);\n    $.MANY({\n      GATE: () => {\n        /**\n         * https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9 -\n         *   There is one exception: immediately to the right of the character sequence `requires` in the ModuleDirective production,\n         *   the character sequence `transitive` is tokenized as a keyword unless it is followed by a separator,\n         *   in which case it is tokenized as an identifier.\n         */\n        return (\n          (tokenMatcher($.LA(1).tokenType, t.Transitive) &&\n            tokenMatcher($.LA(2).tokenType, t.Separators)) === false\n        );\n      },\n      DEF: () => {\n        $.SUBRULE($.requiresModifier);\n      }\n    });\n    $.SUBRULE($.moduleName);\n    $.CONSUME(t.Semicolon);\n  });\n\n  $.RULE(\"exportsModuleDirective\", () => {\n    // Spec Deviation: extracted from \"moduleDirective\"\n    $.CONSUME(t.Exports);\n    $.SUBRULE($.packageName);\n    $.OPTION(() => {\n      $.CONSUME(t.To);\n      $.SUBRULE($.moduleName);\n      $.MANY(() => {\n        $.CONSUME(t.Comma);\n        $.SUBRULE2($.moduleName);\n      });\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  $.RULE(\"opensModuleDirective\", () => {\n    // Spec Deviation: extracted from \"moduleDirective\"\n    $.CONSUME(t.Opens);\n    $.SUBRULE($.packageName);\n    $.OPTION(() => {\n      $.CONSUME(t.To);\n      $.SUBRULE($.moduleName);\n      $.MANY(() => {\n        $.CONSUME(t.Comma);\n        $.SUBRULE2($.moduleName);\n      });\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  $.RULE(\"usesModuleDirective\", () => {\n    // Spec Deviation: extracted from \"moduleDirective\"\n    $.CONSUME(t.Uses);\n    $.SUBRULE($.typeName);\n    $.CONSUME(t.Semicolon);\n  });\n\n  $.RULE(\"providesModuleDirective\", () => {\n    // Spec Deviation: extracted from \"moduleDirective\"\n    $.CONSUME(t.Provides);\n    $.SUBRULE($.typeName);\n    $.CONSUME(t.With);\n    $.SUBRULE2($.typeName);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE3($.typeName);\n    });\n    $.CONSUME(t.Semicolon);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-RequiresModifier\n  $.RULE(\"requiresModifier\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.Transitive) },\n      { ALT: () => $.CONSUME(t.Static) }\n    ]);\n  });\n\n  $.RULE(\"isModuleCompilationUnit\", () => {\n    $.OPTION(() => {\n      $.SUBRULE($.packageDeclaration);\n      // TODO: this return must be outside the OPTION at the top level rule\n      // a Java Module source code may not contain a package declaration.\n      return false;\n    });\n\n    try {\n      // the \"{importDeclaration}\" is a common prefix\n      $.MANY(() => {\n        $.SUBRULE2($.importDeclaration);\n      });\n\n      $.MANY2({\n        // To avoid ambiguity with @interface (\"AnnotationTypeDeclaration\" vs \"Annotaion\")\n        GATE: () =>\n          (tokenMatcher($.LA(1).tokenType, t.At) &&\n            tokenMatcher($.LA(2).tokenType, t.Interface)) === false,\n        DEF: () => {\n          $.SUBRULE($.annotation);\n        }\n      });\n    } catch (e) {\n      // This means we had a syntax error in the imports or annotations\n      // So we can't keep parsing deep enough to make the decision\n      if (isRecognitionException(e)) {\n        // TODO: add original syntax error?\n        throw \"Cannot Identify if the source code is an OrdinaryCompilationUnit or  ModularCompilationUnit\";\n      } else {\n        throw e;\n      }\n    }\n\n    const nextTokenType = this.LA(1).tokenType;\n    return (\n      tokenMatcher(nextTokenType, t.Open) ||\n      tokenMatcher(nextTokenType, t.Module)\n    );\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/packages-and-modules.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/productions/types-values-and-variables.js":
/*!********************************************************************************!*\
  !*** ./node_modules/java-parser/src/productions/types-values-and-variables.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { tokenMatcher } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\n\nfunction defineRules($, t) {\n  // ---------------------\n  // Productions from §4 (Types, Values, and Variables)\n  // ---------------------\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-PrimitiveType\n  $.RULE(\"primitiveType\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.OR([\n      { ALT: () => $.SUBRULE($.numericType) },\n      { ALT: () => $.CONSUME(t.Boolean) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-NumericType\n  $.RULE(\"numericType\", () => {\n    $.OR([\n      { ALT: () => $.SUBRULE($.integralType) },\n      { ALT: () => $.SUBRULE($.floatingPointType) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-IntegralType\n  $.RULE(\"integralType\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.Byte) },\n      { ALT: () => $.CONSUME(t.Short) },\n      { ALT: () => $.CONSUME(t.Int) },\n      { ALT: () => $.CONSUME(t.Long) },\n      { ALT: () => $.CONSUME(t.Char) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-FloatingPointType\n  $.RULE(\"floatingPointType\", () => {\n    $.OR([\n      { ALT: () => $.CONSUME(t.Float) },\n      { ALT: () => $.CONSUME(t.Double) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ReferenceType\n  $.RULE(\"referenceType\", () => {\n    $.MANY(() => {\n      // Spec Deviation: by extracting the common \"annotation\" prefix\n      // we can avoid backtracking and thus improve performance.\n      // Note that the annotation prefix is still present inside\n      // \"primitiveType\" and \"classOrInterfaceType\"\n      $.SUBRULE($.annotation);\n    });\n    // Spec Deviation: The array type \"dims\" suffix was extracted to this rule\n    // to avoid backtracking for performance reasons.\n    $.OR({\n      DEF: [\n        {\n          ALT: () => {\n            $.SUBRULE($.primitiveType);\n            $.SUBRULE($.dims);\n          }\n        },\n        {\n          // Spec Deviation: \"typeVariable\" alternative is missing because\n          //                 it is included in \"classOrInterfaceType\"\n          ALT: () => {\n            $.SUBRULE($.classOrInterfaceType);\n            $.OPTION(() => {\n              $.SUBRULE2($.dims);\n            });\n          }\n        }\n      ],\n      IGNORE_AMBIGUITIES: true // annotation prefix was extracted to remove ambiguities\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ClassOrInterfaceType\n  $.RULE(\"classOrInterfaceType\", () => {\n    // Spec Deviation: The spec says: \"classType | interfaceType\" but \"interfaceType\"\n    //                 is not mentioned in the parser because it is identical to \"classType\"\n    //                 The distinction is **semantic** not syntactic.\n    $.SUBRULE($.classType);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ClassType\n  $.RULE(\"classType\", () => {\n    // Spec Deviation: Refactored left recursion and alternation to iterations\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.Identifier);\n    $.OPTION(() => {\n      $.SUBRULE($.typeArguments);\n    });\n    $.MANY2(() => {\n      $.CONSUME(t.Dot);\n      $.MANY3(() => {\n        $.SUBRULE2($.annotation);\n      });\n      // TODO: Semantic Check: This Identifier cannot be \"var\"\n      $.CONSUME2(t.Identifier);\n      $.OPTION2({\n        // To avoid confusion with \"TypeArgumentsOrDiamond\" rule\n        // as we use the \"classType\" rule in the \"identifyNewExpressionType\"\n        // optimized lookahead rule.\n        GATE: () => tokenMatcher($.LA(2).tokenType, t.Greater) === false,\n        DEF: () => {\n          $.SUBRULE2($.typeArguments);\n        }\n      });\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-InterfaceType\n  $.RULE(\"interfaceType\", () => {\n    $.SUBRULE($.classType);\n  });\n\n  $.RULE(\"typeVariable\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    // TODO: Semantic Check: This Identifier cannot be \"var\"\n    $.CONSUME(t.Identifier);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-Dims\n  $.RULE(\"dims\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.LSquare);\n    $.CONSUME(t.RSquare);\n    $.MANY2({\n      GATE: () => $.BACKTRACK_LOOKAHEAD($.isDims),\n      DEF: () => {\n        $.MANY3(() => {\n          $.SUBRULE2($.annotation);\n        });\n        $.CONSUME2(t.LSquare);\n        $.CONSUME2(t.RSquare);\n      }\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeParameter\n  $.RULE(\"typeParameter\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.typeParameterModifier);\n    });\n    $.SUBRULE($.typeIdentifier);\n    $.OPTION(() => {\n      $.SUBRULE($.typeBound);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeParameterModifier\n  $.RULE(\"typeParameterModifier\", () => {\n    $.SUBRULE($.annotation);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeBound\n  $.RULE(\"typeBound\", () => {\n    $.CONSUME(t.Extends);\n    // Spec Deviation: The alternative with \"TypeVariable\" is not specified\n    //      because it's syntax is included in \"classOrInterfaceType\"\n    $.SUBRULE($.classOrInterfaceType);\n    $.MANY2(() => {\n      $.SUBRULE($.additionalBound);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-AdditionalBound\n  $.RULE(\"additionalBound\", () => {\n    $.CONSUME(t.And);\n    $.SUBRULE($.interfaceType);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArguments\n  $.RULE(\"typeArguments\", () => {\n    $.CONSUME(t.Less);\n    $.SUBRULE($.typeArgumentList);\n    $.CONSUME(t.Greater);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArgumentList\n  $.RULE(\"typeArgumentList\", () => {\n    $.SUBRULE($.typeArgument);\n    $.MANY(() => {\n      $.CONSUME(t.Comma);\n      $.SUBRULE2($.typeArgument);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArgument\n  $.RULE(\"typeArgument\", () => {\n    // TODO: performance: evaluate flipping the order of alternatives\n    $.OR([\n      {\n        GATE: $.BACKTRACK($.referenceType),\n        ALT: () => $.SUBRULE($.referenceType)\n      },\n      { ALT: () => $.SUBRULE($.wildcard) }\n    ]);\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-Wildcard\n  $.RULE(\"wildcard\", () => {\n    $.MANY(() => {\n      $.SUBRULE($.annotation);\n    });\n    $.CONSUME(t.QuestionMark);\n    $.OPTION(() => {\n      $.SUBRULE($.wildcardBounds);\n    });\n  });\n\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-WildcardBounds\n  $.RULE(\"wildcardBounds\", () => {\n    // TODO: consider in-lining suffix into the alternatives to match the spec more strongly\n    $.OR([\n      { ALT: () => $.CONSUME(t.Extends) },\n      { ALT: () => $.CONSUME(t.Super) }\n    ]);\n    $.SUBRULE($.referenceType);\n  });\n}\n\nmodule.exports = {\n  defineRules\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/productions/types-values-and-variables.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/tokens.js":
/*!************************************************!*\
  !*** ./node_modules/java-parser/src/tokens.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst { createToken: createTokenOrg, Lexer } = __webpack_require__(/*! chevrotain */ \"./node_modules/chevrotain/lib_esm/src/api.js\");\nlet chars;\n// A little mini DSL for easier lexer definition.\nconst fragments = {};\ntry {\n  chars = __webpack_require__(/*! ./unicodesets */ \"./node_modules/java-parser/src/unicodesets.js\");\n} catch (e) {\n  throw Error(\n    \"unicodesets.js file could not be found. Did you try to run the command: yarn run build ?\"\n  );\n}\n\nfunction inlineFragments(def) {\n  let inlinedDef = def;\n  Object.keys(fragments).forEach(prevFragmentName => {\n    const prevFragmentDef = fragments[prevFragmentName];\n    const templateRegExp = new RegExp(`{{${prevFragmentName}}}`, \"g\");\n    inlinedDef = inlinedDef.replace(templateRegExp, prevFragmentDef);\n  });\n  return inlinedDef;\n}\n\nfunction FRAGMENT(name, def) {\n  fragments[name] = inlineFragments(def);\n}\n\nfunction MAKE_PATTERN(def, flags) {\n  const inlinedDef = inlineFragments(def);\n  return new RegExp(inlinedDef, flags);\n}\n\n// The order of fragments definitions is important\nFRAGMENT(\"Digits\", \"[0-9]([0-9_]*[0-9])?\");\nFRAGMENT(\"ExponentPart\", \"[eE][+-]?{{Digits}}\");\nFRAGMENT(\"HexDigit\", \"[0-9a-fA-F]\");\nFRAGMENT(\"HexDigits\", \"{{HexDigit}}(({{HexDigit}}|'_')*{{HexDigit}})?\");\nFRAGMENT(\"FloatTypeSuffix\", \"[fFdD]\");\nFRAGMENT(\"LineTerminator\", \"(\\\\x0A|(\\\\x0D(\\\\x0A)?))\");\nFRAGMENT(\"UnicodeMarker\", \"uu*\");\nFRAGMENT(\"UnicodeEscape\", \"\\\\\\\\{{UnicodeMarker}}{{HexDigit}}{4}\");\nFRAGMENT(\"RawInputCharacter\", \"\\\\\\\\{{UnicodeMarker}}[0-9a-fA-F]{4}\");\nFRAGMENT(\"UnicodeInputCharacter\", \"({{UnicodeEscape}}|{{RawInputCharacter}})\");\nFRAGMENT(\"OctalDigit\", \"[0-7]\");\nFRAGMENT(\"ZeroToThree\", \"[0-3]\");\nFRAGMENT(\n  \"OctalEscape\",\n  \"\\\\\\\\({{OctalDigit}}|{{ZeroToThree}}?{{OctalDigit}}{2})\"\n);\nFRAGMENT(\"EscapeSequence\", \"\\\\\\\\[btnfr\\\"'\\\\\\\\]|{{OctalEscape}}\");\n// Not using InputCharacter terminology there because CR and LF are already captured in EscapeSequence\nFRAGMENT(\n  \"StringCharacter\",\n  \"(?:(?:{{EscapeSequence}})|{{UnicodeInputCharacter}})\"\n);\n\nfunction matchJavaIdentifier(text, startOffset) {\n  let endOffset = startOffset;\n  let charCode = text.codePointAt(endOffset);\n\n  // We verifiy if the first character is from one of these categories\n  // Corresponds to the isJavaIdentifierStart function from Java\n  if (chars.firstIdentChar.has(charCode)) {\n    endOffset++;\n    // If we encounter a surrogate pair (something that is beyond 65535/FFFF)\n    // We skip another offset because a surrogate pair is of length 2.\n    if (charCode > 65535) {\n      endOffset++;\n    }\n    charCode = text.codePointAt(endOffset);\n  }\n\n  // We verify if the remaining characters is from one of these categories\n  // Corresponds to the isJavaIdentifierPart function from Java\n  while (chars.restIdentChar.has(charCode)) {\n    endOffset++;\n    // See above.\n    if (charCode > 65535) {\n      endOffset++;\n    }\n    charCode = text.codePointAt(endOffset);\n  }\n\n  // No match, must return null to conform with the RegExp.prototype.exec signature\n  if (endOffset === startOffset) {\n    return null;\n  }\n  const matchedString = text.substring(startOffset, endOffset);\n  // according to the RegExp.prototype.exec API the first item in the returned array must be the whole matched string.\n  return [matchedString];\n}\n\nconst Identifier = createTokenOrg({\n  name: \"Identifier\",\n  pattern: { exec: matchJavaIdentifier },\n  line_breaks: false,\n  start_chars_hint: Array.from(chars.firstIdentChar, x =>\n    String.fromCharCode(x)\n  )\n});\n\nconst allTokens = [];\nconst tokenDictionary = {};\n\nfunction createToken(options) {\n  // TODO create a test to check all the tokenbs have a label defined\n  if (!options.label) {\n    // simple token (e.g operator)\n    if (typeof options.pattern === \"string\") {\n      options.label = `'${options.pattern}'`;\n    }\n    // Complex token (e.g literal)\n    else if (options.pattern instanceof RegExp) {\n      options.label = `'${options.name}'`;\n    }\n  }\n\n  const newTokenType = createTokenOrg(options);\n  allTokens.push(newTokenType);\n  tokenDictionary[options.name] = newTokenType;\n  return newTokenType;\n}\n\nfunction createKeywordLikeToken(options) {\n  // A keyword 'like' token uses the \"longer_alt\" config option\n  // to resolve ambiguities, see: http://sap.github.io/chevrotain/docs/features/token_alternative_matches.html\n  options.longer_alt = Identifier;\n  return createToken(options);\n}\n\n// Token Categories\n// Used a Token Category to mark all restricted keywords.\n// This could be used in syntax highlights implementation.\nconst RestrictedKeyword = createToken({\n  name: \"RestrictedKeyword\",\n  pattern: Lexer.NA\n});\n\n// Used a Token Category to mark all keywords.\n// This could be used in syntax highlights implementation.\nconst Keyword = createToken({\n  name: \"Keyword\",\n  pattern: Lexer.NA\n});\n\nconst AssignmentOperator = createToken({\n  name: \"AssignmentOperator\",\n  pattern: Lexer.NA\n});\n\nconst BinaryOperator = createToken({\n  name: \"BinaryOperator\",\n  pattern: Lexer.NA\n});\n\nconst UnaryPrefixOperator = createToken({\n  name: \"UnaryPrefixOperator\",\n  pattern: Lexer.NA\n});\nconst UnaryPrefixOperatorNotPlusMinus = createToken({\n  name: \"UnaryPrefixOperatorNotPlusMinus\",\n  pattern: Lexer.NA\n});\n\nconst UnarySuffixOperator = createToken({\n  name: \"UnarySuffixOperator\",\n  pattern: Lexer.NA\n});\n\n// https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.11\nconst Separators = createToken({\n  name: \"Separators\",\n  pattern: Lexer.NA\n});\n\n// https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.6\n// Note [\\\\x09\\\\x20\\\\x0C] is equivalent to [\\\\t\\\\x20\\\\f] and that \\\\x20 represents\n// space character\ncreateToken({\n  name: \"WhiteSpace\",\n  pattern: MAKE_PATTERN(\"[\\\\x09\\\\x20\\\\x0C]|{{LineTerminator}}\"),\n  group: Lexer.SKIPPED\n});\ncreateToken({\n  name: \"LineComment\",\n  pattern: /\\/\\/[^\\n\\r]*/,\n  group: \"comments\"\n});\ncreateToken({\n  name: \"TraditionalComment\",\n  pattern: /\\/\\*([^*]|\\*(?!\\/))*\\*\\//,\n  group: \"comments\"\n});\ncreateToken({ name: \"BinaryLiteral\", pattern: /0[bB][01]([01_]*[01])?[lL]?/ });\ncreateToken({\n  name: \"FloatLiteral\",\n  pattern: MAKE_PATTERN(\n    \"{{Digits}}\\\\.({{Digits}})?({{ExponentPart}})?({{FloatTypeSuffix}})?|\" +\n      \"\\\\.{{Digits}}({{ExponentPart}})?({{FloatTypeSuffix}})?|\" +\n      \"{{Digits}}{{ExponentPart}}({{FloatTypeSuffix}})?|\" +\n      \"{{Digits}}({{ExponentPart}})?{{FloatTypeSuffix}}\"\n  )\n});\ncreateToken({ name: \"OctalLiteral\", pattern: /0_*[0-7]([0-7_]*[0-7])?[lL]?/ });\ncreateToken({\n  name: \"HexFloatLiteral\",\n  pattern: MAKE_PATTERN(\n    \"0[xX]({{HexDigits}}\\\\.?|({{HexDigits}})?\\\\.{{HexDigits}})[pP][+-]?{{Digits}}[fFdD]?\"\n  )\n});\ncreateToken({\n  name: \"HexLiteral\",\n  pattern: /0[xX][0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[lL]?/\n});\ncreateToken({\n  name: \"DecimalLiteral\",\n  pattern: MAKE_PATTERN(\"(0|[1-9](_+{{Digits}}|({{Digits}})?))[lL]?\")\n});\n// https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.10.4\ncreateToken({\n  name: \"CharLiteral\",\n  // Not using SingleCharacter Terminology because ' and \\ are captured in EscapeSequence\n  pattern: MAKE_PATTERN(\n    \"'(?:[^\\\\\\\\']|(?:(?:{{EscapeSequence}})|{{UnicodeInputCharacter}}))'\"\n  )\n});\ncreateToken({\n  name: \"StringLiteral\",\n  pattern: MAKE_PATTERN('\"(?:[^\\\\\\\\\"]|{{StringCharacter}})*\"')\n});\n\n// https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9\n// TODO: how to handle the special rule (see spec above) for \"requires\" and \"transitive\"\nconst restrictedKeywords = [\n  \"open\",\n  \"module\",\n  \"requires\",\n  \"transitive\",\n  \"exports\",\n  \"opens\",\n  \"to\",\n  \"uses\",\n  \"provides\",\n  \"with\"\n];\n\n// By sorting the keywords in descending order we avoid ambiguities\n// of common prefixes.\nsortDescLength(restrictedKeywords).forEach(word => {\n  createKeywordLikeToken({\n    name: word[0].toUpperCase() + word.substr(1),\n    pattern: word,\n    // restricted keywords can also be used as an Identifiers according to the spec.\n    // TODO: inspect this causes no ambiguities\n    categories: [Identifier, RestrictedKeyword]\n  });\n});\n\n// https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9\nconst keywords = [\n  \"abstract\",\n  \"continue\",\n  \"for\",\n  \"new\",\n  \"switch\",\n  \"assert\",\n  \"default\",\n  \"if\",\n  \"package\",\n  \"synchronized\",\n  \"boolean\",\n  \"do\",\n  \"goto\",\n  \"private\",\n  \"this\",\n  \"break\",\n  \"double\",\n  \"implements\",\n  \"protected\",\n  \"throw\",\n  \"byte\",\n  \"else\",\n  \"import\",\n  \"public\",\n  \"throws\",\n  \"case\",\n  \"enum\",\n  // \"instanceof\", // special handling for \"instanceof\" operator below\n  \"return\",\n  \"transient\",\n  \"catch\",\n  \"extends\",\n  \"int\",\n  \"short\",\n  \"try\",\n  \"char\",\n  \"final\",\n  \"interface\",\n  \"static\",\n  \"void\",\n  \"class\",\n  \"finally\",\n  \"long\",\n  \"strictfp\",\n  \"volatile\",\n  \"const\",\n  \"float\",\n  \"native\",\n  \"super\",\n  \"while\",\n  [\"_\", \"underscore\"]\n];\n\nsortDescLength(keywords).forEach(word => {\n  // For handling symbols keywords (underscore)\n  const isPair = Array.isArray(word);\n  const actualName = isPair ? word[1] : word;\n  const actualPattern = isPair ? word[0] : word;\n\n  const options = {\n    name: actualName[0].toUpperCase() + actualName.substr(1),\n    pattern: actualPattern,\n    categories: Keyword\n  };\n\n  if (isPair) {\n    options.label = `'${actualName}'`;\n  }\n  createKeywordLikeToken(options);\n});\n\ncreateKeywordLikeToken({\n  name: \"Instanceof\",\n  pattern: \"instanceof\",\n  categories: [Keyword, BinaryOperator]\n});\n\ncreateKeywordLikeToken({\n  name: \"Var\",\n  pattern: \"var\",\n  // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-Keyword\n  // \"var is not a keyword, but rather an identifier with special meaning as the type of a local variable declaration\"\n  categories: Identifier\n});\ncreateKeywordLikeToken({ name: \"True\", pattern: \"true\" });\ncreateKeywordLikeToken({ name: \"False\", pattern: \"false\" });\ncreateKeywordLikeToken({ name: \"Null\", pattern: \"null\" });\n\n// punctuation and symbols\ncreateToken({ name: \"At\", pattern: \"@\", categories: [Separators] });\ncreateToken({ name: \"Arrow\", pattern: \"->\" });\ncreateToken({ name: \"DotDotDot\", pattern: \"...\", categories: [Separators] });\ncreateToken({ name: \"Dot\", pattern: \".\", categories: [Separators] });\ncreateToken({ name: \"Comma\", pattern: \",\", categories: [Separators] });\ncreateToken({ name: \"Semicolon\", pattern: \";\", categories: [Separators] });\ncreateToken({ name: \"ColonColon\", pattern: \"::\", categories: [Separators] });\ncreateToken({ name: \"Colon\", pattern: \":\" });\ncreateToken({ name: \"QuestionMark\", pattern: \"?\" });\ncreateToken({ name: \"LBrace\", pattern: \"(\", categories: [Separators] });\ncreateToken({ name: \"RBrace\", pattern: \")\", categories: [Separators] });\ncreateToken({ name: \"LCurly\", pattern: \"{\", categories: [Separators] });\ncreateToken({ name: \"RCurly\", pattern: \"}\", categories: [Separators] });\ncreateToken({ name: \"LSquare\", pattern: \"[\", categories: [Separators] });\ncreateToken({ name: \"RSquare\", pattern: \"]\", categories: [Separators] });\n\n// prefix and suffix operators\n// must be defined before \"-\"\ncreateToken({\n  name: \"MinusMinus\",\n  pattern: \"--\",\n  categories: [\n    UnaryPrefixOperator,\n    UnarySuffixOperator,\n    UnaryPrefixOperatorNotPlusMinus\n  ]\n});\n// must be defined before \"+\"\ncreateToken({\n  name: \"PlusPlus\",\n  pattern: \"++\",\n  categories: [\n    UnaryPrefixOperator,\n    UnarySuffixOperator,\n    UnaryPrefixOperatorNotPlusMinus\n  ]\n});\ncreateToken({\n  name: \"Complement\",\n  pattern: \"~\",\n  categories: [UnaryPrefixOperator, UnaryPrefixOperatorNotPlusMinus]\n});\n\ncreateToken({\n  name: \"LessEquals\",\n  pattern: \"<=\",\n  categories: [BinaryOperator]\n});\ncreateToken({\n  name: \"LessLessEquals\",\n  pattern: \"<<=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Less\", pattern: \"<\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"GreaterEquals\",\n  pattern: \">=\",\n  categories: [BinaryOperator]\n});\ncreateToken({\n  name: \"GreaterGreaterEquals\",\n  pattern: \">>=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({\n  name: \"GreaterGreaterGreaterEquals\",\n  pattern: \">>>=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Greater\", pattern: \">\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"EqualsEquals\",\n  pattern: \"==\",\n  categories: [BinaryOperator]\n});\ncreateToken({\n  name: \"Equals\",\n  pattern: \"=\",\n  categories: [BinaryOperator, AssignmentOperator]\n});\ncreateToken({\n  name: \"MinusEquals\",\n  pattern: \"-=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({\n  name: \"Minus\",\n  pattern: \"-\",\n  categories: [BinaryOperator, UnaryPrefixOperator]\n});\ncreateToken({\n  name: \"PlusEquals\",\n  pattern: \"+=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({\n  name: \"Plus\",\n  pattern: \"+\",\n  categories: [BinaryOperator, UnaryPrefixOperator]\n});\ncreateToken({ name: \"AndAnd\", pattern: \"&&\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"AndEquals\",\n  pattern: \"&=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"And\", pattern: \"&\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"XorEquals\",\n  pattern: \"^=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Xor\", pattern: \"^\", categories: [BinaryOperator] });\ncreateToken({ name: \"NotEquals\", pattern: \"!=\", categories: [BinaryOperator] });\ncreateToken({ name: \"OrOr\", pattern: \"||\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"OrEquals\",\n  pattern: \"|=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Or\", pattern: \"|\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"MultiplyEquals\",\n  pattern: \"*=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Star\", pattern: \"*\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"DivideEquals\",\n  pattern: \"/=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Divide\", pattern: \"/\", categories: [BinaryOperator] });\ncreateToken({\n  name: \"ModuloEquals\",\n  pattern: \"%=\",\n  categories: [AssignmentOperator]\n});\ncreateToken({ name: \"Modulo\", pattern: \"%\", categories: [BinaryOperator] });\n\n// must be defined after \"!=\"\ncreateToken({\n  name: \"Not\",\n  pattern: \"!\",\n  categories: [UnaryPrefixOperator, UnaryPrefixOperatorNotPlusMinus]\n});\n\n// Identifier must appear AFTER all the keywords to avoid ambiguities.\n// See: https://github.com/SAP/chevrotain/blob/master/examples/lexer/keywords_vs_identifiers/keywords_vs_identifiers.js\nallTokens.push(Identifier);\ntokenDictionary[\"Identifier\"] = Identifier;\n\nfunction sortDescLength(arr) {\n  // sort is not stable, but that will not affect the lexing results.\n  return arr.sort((a, b) => {\n    return b.length - a.length;\n  });\n}\nmodule.exports = {\n  allTokens,\n  tokens: tokenDictionary\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/tokens.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/unicodesets.js":
/*!*****************************************************!*\
  !*** ./node_modules/java-parser/src/unicodesets.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*File generated with ../scripts/unicode.js using ../resources/Unicode/UnicodeData.txt.\n * As Java Identifiers may contains unicodes letters, this file defines two sets of unicode\n * characters, firstIdentChar used to help to determine if a character can be the first letter\n * of a JavaIdentifier and the other one (restIdentChar) to determine if it can be part of a\n * JavaIdentifier other than the first character.\n * Java uses the same file UnicodeData.txt as the unicode.js script to define the unicodes.\n * For more:\n *   https://github.com/jhipster/prettier-java/issues/116\n *   https://github.com/jhipster/prettier-java/pull/155\n */\n\nconst addRanges = (set, rangesArr) => {\n  for (let i = 0; i < rangesArr.length; i++) {\n    const range = rangesArr[i];\n    const start = range[0];\n    const end = range[1];\n    for (let codePoint = start; codePoint <= end; codePoint++) {\n      set.add(codePoint);\n    }\n  }\n};\nconst fic = new Set([\n  181,\n  257,\n  259,\n  261,\n  263,\n  265,\n  267,\n  269,\n  271,\n  273,\n  275,\n  277,\n  279,\n  281,\n  283,\n  285,\n  287,\n  289,\n  291,\n  293,\n  295,\n  297,\n  299,\n  301,\n  303,\n  305,\n  307,\n  309,\n  314,\n  316,\n  318,\n  320,\n  322,\n  324,\n  326,\n  331,\n  333,\n  335,\n  337,\n  339,\n  341,\n  343,\n  345,\n  347,\n  349,\n  351,\n  353,\n  355,\n  357,\n  359,\n  361,\n  363,\n  365,\n  367,\n  369,\n  371,\n  373,\n  375,\n  378,\n  380,\n  387,\n  389,\n  392,\n  402,\n  405,\n  414,\n  417,\n  419,\n  421,\n  424,\n  429,\n  432,\n  436,\n  438,\n  454,\n  457,\n  460,\n  462,\n  464,\n  466,\n  468,\n  470,\n  472,\n  474,\n  479,\n  481,\n  483,\n  485,\n  487,\n  489,\n  491,\n  493,\n  499,\n  501,\n  505,\n  507,\n  509,\n  511,\n  513,\n  515,\n  517,\n  519,\n  521,\n  523,\n  525,\n  527,\n  529,\n  531,\n  533,\n  535,\n  537,\n  539,\n  541,\n  543,\n  545,\n  547,\n  549,\n  551,\n  553,\n  555,\n  557,\n  559,\n  561,\n  572,\n  578,\n  583,\n  585,\n  587,\n  589,\n  881,\n  883,\n  887,\n  912,\n  985,\n  987,\n  989,\n  991,\n  993,\n  995,\n  997,\n  999,\n  1001,\n  1003,\n  1005,\n  1013,\n  1016,\n  1121,\n  1123,\n  1125,\n  1127,\n  1129,\n  1131,\n  1133,\n  1135,\n  1137,\n  1139,\n  1141,\n  1143,\n  1145,\n  1147,\n  1149,\n  1151,\n  1153,\n  1163,\n  1165,\n  1167,\n  1169,\n  1171,\n  1173,\n  1175,\n  1177,\n  1179,\n  1181,\n  1183,\n  1185,\n  1187,\n  1189,\n  1191,\n  1193,\n  1195,\n  1197,\n  1199,\n  1201,\n  1203,\n  1205,\n  1207,\n  1209,\n  1211,\n  1213,\n  1215,\n  1218,\n  1220,\n  1222,\n  1224,\n  1226,\n  1228,\n  1233,\n  1235,\n  1237,\n  1239,\n  1241,\n  1243,\n  1245,\n  1247,\n  1249,\n  1251,\n  1253,\n  1255,\n  1257,\n  1259,\n  1261,\n  1263,\n  1265,\n  1267,\n  1269,\n  1271,\n  1273,\n  1275,\n  1277,\n  1279,\n  1281,\n  1283,\n  1285,\n  1287,\n  1289,\n  1291,\n  1293,\n  1295,\n  1297,\n  1299,\n  1301,\n  1303,\n  1305,\n  1307,\n  1309,\n  1311,\n  1313,\n  1315,\n  1317,\n  1319,\n  1321,\n  1323,\n  1325,\n  1327,\n  7681,\n  7683,\n  7685,\n  7687,\n  7689,\n  7691,\n  7693,\n  7695,\n  7697,\n  7699,\n  7701,\n  7703,\n  7705,\n  7707,\n  7709,\n  7711,\n  7713,\n  7715,\n  7717,\n  7719,\n  7721,\n  7723,\n  7725,\n  7727,\n  7729,\n  7731,\n  7733,\n  7735,\n  7737,\n  7739,\n  7741,\n  7743,\n  7745,\n  7747,\n  7749,\n  7751,\n  7753,\n  7755,\n  7757,\n  7759,\n  7761,\n  7763,\n  7765,\n  7767,\n  7769,\n  7771,\n  7773,\n  7775,\n  7777,\n  7779,\n  7781,\n  7783,\n  7785,\n  7787,\n  7789,\n  7791,\n  7793,\n  7795,\n  7797,\n  7799,\n  7801,\n  7803,\n  7805,\n  7807,\n  7809,\n  7811,\n  7813,\n  7815,\n  7817,\n  7819,\n  7821,\n  7823,\n  7825,\n  7827,\n  7839,\n  7841,\n  7843,\n  7845,\n  7847,\n  7849,\n  7851,\n  7853,\n  7855,\n  7857,\n  7859,\n  7861,\n  7863,\n  7865,\n  7867,\n  7869,\n  7871,\n  7873,\n  7875,\n  7877,\n  7879,\n  7881,\n  7883,\n  7885,\n  7887,\n  7889,\n  7891,\n  7893,\n  7895,\n  7897,\n  7899,\n  7901,\n  7903,\n  7905,\n  7907,\n  7909,\n  7911,\n  7913,\n  7915,\n  7917,\n  7919,\n  7921,\n  7923,\n  7925,\n  7927,\n  7929,\n  7931,\n  7933,\n  8126,\n  8458,\n  8467,\n  8495,\n  8500,\n  8505,\n  8526,\n  8580,\n  11361,\n  11368,\n  11370,\n  11372,\n  11377,\n  11393,\n  11395,\n  11397,\n  11399,\n  11401,\n  11403,\n  11405,\n  11407,\n  11409,\n  11411,\n  11413,\n  11415,\n  11417,\n  11419,\n  11421,\n  11423,\n  11425,\n  11427,\n  11429,\n  11431,\n  11433,\n  11435,\n  11437,\n  11439,\n  11441,\n  11443,\n  11445,\n  11447,\n  11449,\n  11451,\n  11453,\n  11455,\n  11457,\n  11459,\n  11461,\n  11463,\n  11465,\n  11467,\n  11469,\n  11471,\n  11473,\n  11475,\n  11477,\n  11479,\n  11481,\n  11483,\n  11485,\n  11487,\n  11489,\n  11500,\n  11502,\n  11507,\n  11559,\n  11565,\n  42561,\n  42563,\n  42565,\n  42567,\n  42569,\n  42571,\n  42573,\n  42575,\n  42577,\n  42579,\n  42581,\n  42583,\n  42585,\n  42587,\n  42589,\n  42591,\n  42593,\n  42595,\n  42597,\n  42599,\n  42601,\n  42603,\n  42605,\n  42625,\n  42627,\n  42629,\n  42631,\n  42633,\n  42635,\n  42637,\n  42639,\n  42641,\n  42643,\n  42645,\n  42647,\n  42649,\n  42651,\n  42787,\n  42789,\n  42791,\n  42793,\n  42795,\n  42797,\n  42803,\n  42805,\n  42807,\n  42809,\n  42811,\n  42813,\n  42815,\n  42817,\n  42819,\n  42821,\n  42823,\n  42825,\n  42827,\n  42829,\n  42831,\n  42833,\n  42835,\n  42837,\n  42839,\n  42841,\n  42843,\n  42845,\n  42847,\n  42849,\n  42851,\n  42853,\n  42855,\n  42857,\n  42859,\n  42861,\n  42863,\n  42874,\n  42876,\n  42879,\n  42881,\n  42883,\n  42885,\n  42887,\n  42892,\n  42894,\n  42897,\n  42903,\n  42905,\n  42907,\n  42909,\n  42911,\n  42913,\n  42915,\n  42917,\n  42919,\n  42921,\n  42927,\n  42933,\n  42935,\n  42937,\n  42939,\n  42941,\n  42943,\n  42947,\n  43002,\n  119995,\n  120779,\n  748,\n  750,\n  884,\n  890,\n  1369,\n  1600,\n  2042,\n  2074,\n  2084,\n  2088,\n  2417,\n  3654,\n  3782,\n  4348,\n  6103,\n  6211,\n  6823,\n  7544,\n  8305,\n  8319,\n  11631,\n  11823,\n  12293,\n  12347,\n  40981,\n  42508,\n  42623,\n  42864,\n  42888,\n  43471,\n  43494,\n  43632,\n  43741,\n  65392,\n  94179,\n  125259,\n  170,\n  186,\n  443,\n  660,\n  1749,\n  1791,\n  1808,\n  1969,\n  2365,\n  2384,\n  2482,\n  2493,\n  2510,\n  2556,\n  2654,\n  2749,\n  2768,\n  2809,\n  2877,\n  2929,\n  2947,\n  2972,\n  3024,\n  3133,\n  3200,\n  3261,\n  3294,\n  3389,\n  3406,\n  3517,\n  3716,\n  3749,\n  3773,\n  3840,\n  4159,\n  4193,\n  4238,\n  4696,\n  4800,\n  6108,\n  6314,\n  7418,\n  12294,\n  12348,\n  12447,\n  12543,\n  13312,\n  19968,\n  42606,\n  42895,\n  42999,\n  43259,\n  43642,\n  43697,\n  43712,\n  43714,\n  43762,\n  44032,\n  64285,\n  64318,\n  67592,\n  67644,\n  68096,\n  69415,\n  69956,\n  70006,\n  70106,\n  70108,\n  70280,\n  70461,\n  70480,\n  70751,\n  70855,\n  71236,\n  71352,\n  71935,\n  72161,\n  72163,\n  72192,\n  72250,\n  72272,\n  72349,\n  72768,\n  73030,\n  73112,\n  94032,\n  94208,\n  123214,\n  126500,\n  126503,\n  126521,\n  126523,\n  126530,\n  126535,\n  126537,\n  126539,\n  126548,\n  126551,\n  126553,\n  126555,\n  126557,\n  126559,\n  126564,\n  126590,\n  131072,\n  173824,\n  177984,\n  178208,\n  183984,\n  453,\n  456,\n  459,\n  498,\n  8124,\n  8140,\n  8188,\n  256,\n  258,\n  260,\n  262,\n  264,\n  266,\n  268,\n  270,\n  272,\n  274,\n  276,\n  278,\n  280,\n  282,\n  284,\n  286,\n  288,\n  290,\n  292,\n  294,\n  296,\n  298,\n  300,\n  302,\n  304,\n  306,\n  308,\n  310,\n  313,\n  315,\n  317,\n  319,\n  321,\n  323,\n  325,\n  327,\n  330,\n  332,\n  334,\n  336,\n  338,\n  340,\n  342,\n  344,\n  346,\n  348,\n  350,\n  352,\n  354,\n  356,\n  358,\n  360,\n  362,\n  364,\n  366,\n  368,\n  370,\n  372,\n  374,\n  379,\n  381,\n  388,\n  418,\n  420,\n  425,\n  428,\n  437,\n  444,\n  452,\n  455,\n  458,\n  461,\n  463,\n  465,\n  467,\n  469,\n  471,\n  473,\n  475,\n  478,\n  480,\n  482,\n  484,\n  486,\n  488,\n  490,\n  492,\n  494,\n  497,\n  500,\n  506,\n  508,\n  510,\n  512,\n  514,\n  516,\n  518,\n  520,\n  522,\n  524,\n  526,\n  528,\n  530,\n  532,\n  534,\n  536,\n  538,\n  540,\n  542,\n  544,\n  546,\n  548,\n  550,\n  552,\n  554,\n  556,\n  558,\n  560,\n  562,\n  577,\n  584,\n  586,\n  588,\n  590,\n  880,\n  882,\n  886,\n  895,\n  902,\n  908,\n  975,\n  984,\n  986,\n  988,\n  990,\n  992,\n  994,\n  996,\n  998,\n  1000,\n  1002,\n  1004,\n  1006,\n  1012,\n  1015,\n  1120,\n  1122,\n  1124,\n  1126,\n  1128,\n  1130,\n  1132,\n  1134,\n  1136,\n  1138,\n  1140,\n  1142,\n  1144,\n  1146,\n  1148,\n  1150,\n  1152,\n  1162,\n  1164,\n  1166,\n  1168,\n  1170,\n  1172,\n  1174,\n  1176,\n  1178,\n  1180,\n  1182,\n  1184,\n  1186,\n  1188,\n  1190,\n  1192,\n  1194,\n  1196,\n  1198,\n  1200,\n  1202,\n  1204,\n  1206,\n  1208,\n  1210,\n  1212,\n  1214,\n  1219,\n  1221,\n  1223,\n  1225,\n  1227,\n  1229,\n  1232,\n  1234,\n  1236,\n  1238,\n  1240,\n  1242,\n  1244,\n  1246,\n  1248,\n  1250,\n  1252,\n  1254,\n  1256,\n  1258,\n  1260,\n  1262,\n  1264,\n  1266,\n  1268,\n  1270,\n  1272,\n  1274,\n  1276,\n  1278,\n  1280,\n  1282,\n  1284,\n  1286,\n  1288,\n  1290,\n  1292,\n  1294,\n  1296,\n  1298,\n  1300,\n  1302,\n  1304,\n  1306,\n  1308,\n  1310,\n  1312,\n  1314,\n  1316,\n  1318,\n  1320,\n  1322,\n  1324,\n  1326,\n  4295,\n  4301,\n  7680,\n  7682,\n  7684,\n  7686,\n  7688,\n  7690,\n  7692,\n  7694,\n  7696,\n  7698,\n  7700,\n  7702,\n  7704,\n  7706,\n  7708,\n  7710,\n  7712,\n  7714,\n  7716,\n  7718,\n  7720,\n  7722,\n  7724,\n  7726,\n  7728,\n  7730,\n  7732,\n  7734,\n  7736,\n  7738,\n  7740,\n  7742,\n  7744,\n  7746,\n  7748,\n  7750,\n  7752,\n  7754,\n  7756,\n  7758,\n  7760,\n  7762,\n  7764,\n  7766,\n  7768,\n  7770,\n  7772,\n  7774,\n  7776,\n  7778,\n  7780,\n  7782,\n  7784,\n  7786,\n  7788,\n  7790,\n  7792,\n  7794,\n  7796,\n  7798,\n  7800,\n  7802,\n  7804,\n  7806,\n  7808,\n  7810,\n  7812,\n  7814,\n  7816,\n  7818,\n  7820,\n  7822,\n  7824,\n  7826,\n  7828,\n  7838,\n  7840,\n  7842,\n  7844,\n  7846,\n  7848,\n  7850,\n  7852,\n  7854,\n  7856,\n  7858,\n  7860,\n  7862,\n  7864,\n  7866,\n  7868,\n  7870,\n  7872,\n  7874,\n  7876,\n  7878,\n  7880,\n  7882,\n  7884,\n  7886,\n  7888,\n  7890,\n  7892,\n  7894,\n  7896,\n  7898,\n  7900,\n  7902,\n  7904,\n  7906,\n  7908,\n  7910,\n  7912,\n  7914,\n  7916,\n  7918,\n  7920,\n  7922,\n  7924,\n  7926,\n  7928,\n  7930,\n  7932,\n  7934,\n  8025,\n  8027,\n  8029,\n  8031,\n  8450,\n  8455,\n  8469,\n  8484,\n  8486,\n  8488,\n  8517,\n  8579,\n  11360,\n  11367,\n  11369,\n  11371,\n  11378,\n  11381,\n  11394,\n  11396,\n  11398,\n  11400,\n  11402,\n  11404,\n  11406,\n  11408,\n  11410,\n  11412,\n  11414,\n  11416,\n  11418,\n  11420,\n  11422,\n  11424,\n  11426,\n  11428,\n  11430,\n  11432,\n  11434,\n  11436,\n  11438,\n  11440,\n  11442,\n  11444,\n  11446,\n  11448,\n  11450,\n  11452,\n  11454,\n  11456,\n  11458,\n  11460,\n  11462,\n  11464,\n  11466,\n  11468,\n  11470,\n  11472,\n  11474,\n  11476,\n  11478,\n  11480,\n  11482,\n  11484,\n  11486,\n  11488,\n  11490,\n  11499,\n  11501,\n  11506,\n  42560,\n  42562,\n  42564,\n  42566,\n  42568,\n  42570,\n  42572,\n  42574,\n  42576,\n  42578,\n  42580,\n  42582,\n  42584,\n  42586,\n  42588,\n  42590,\n  42592,\n  42594,\n  42596,\n  42598,\n  42600,\n  42602,\n  42604,\n  42624,\n  42626,\n  42628,\n  42630,\n  42632,\n  42634,\n  42636,\n  42638,\n  42640,\n  42642,\n  42644,\n  42646,\n  42648,\n  42650,\n  42786,\n  42788,\n  42790,\n  42792,\n  42794,\n  42796,\n  42798,\n  42802,\n  42804,\n  42806,\n  42808,\n  42810,\n  42812,\n  42814,\n  42816,\n  42818,\n  42820,\n  42822,\n  42824,\n  42826,\n  42828,\n  42830,\n  42832,\n  42834,\n  42836,\n  42838,\n  42840,\n  42842,\n  42844,\n  42846,\n  42848,\n  42850,\n  42852,\n  42854,\n  42856,\n  42858,\n  42860,\n  42862,\n  42873,\n  42875,\n  42880,\n  42882,\n  42884,\n  42886,\n  42891,\n  42893,\n  42896,\n  42898,\n  42902,\n  42904,\n  42906,\n  42908,\n  42910,\n  42912,\n  42914,\n  42916,\n  42918,\n  42920,\n  42934,\n  42936,\n  42938,\n  42940,\n  42942,\n  42946,\n  119964,\n  119970,\n  120134,\n  120778,\n  12295,\n  66369,\n  66378,\n  36,\n  1423,\n  1547,\n  2555,\n  2801,\n  3065,\n  3647,\n  6107,\n  43064,\n  65020,\n  65129,\n  65284,\n  123647,\n  126128,\n  95,\n  8276,\n  65343\n]);\nconst fic_a = [\n  [97, 122],\n  [223, 246],\n  [248, 255],\n  [311, 312],\n  [328, 329],\n  [382, 384],\n  [396, 397],\n  [409, 411],\n  [426, 427],\n  [441, 442],\n  [445, 447],\n  [476, 477],\n  [495, 496],\n  [563, 569],\n  [575, 576],\n  [591, 659],\n  [661, 687],\n  [891, 893],\n  [940, 974],\n  [976, 977],\n  [981, 983],\n  [1007, 1011],\n  [1019, 1020],\n  [1072, 1119],\n  [1230, 1231],\n  [1376, 1416],\n  [4304, 4346],\n  [4349, 4351],\n  [5112, 5117],\n  [7296, 7304],\n  [7424, 7467],\n  [7531, 7543],\n  [7545, 7578],\n  [7829, 7837],\n  [7935, 7943],\n  [7952, 7957],\n  [7968, 7975],\n  [7984, 7991],\n  [8000, 8005],\n  [8016, 8023],\n  [8032, 8039],\n  [8048, 8061],\n  [8064, 8071],\n  [8080, 8087],\n  [8096, 8103],\n  [8112, 8116],\n  [8118, 8119],\n  [8130, 8132],\n  [8134, 8135],\n  [8144, 8147],\n  [8150, 8151],\n  [8160, 8167],\n  [8178, 8180],\n  [8182, 8183],\n  [8462, 8463],\n  [8508, 8509],\n  [8518, 8521],\n  [11312, 11358],\n  [11365, 11366],\n  [11379, 11380],\n  [11382, 11387],\n  [11491, 11492],\n  [11520, 11557],\n  [42799, 42801],\n  [42865, 42872],\n  [42899, 42901],\n  [43824, 43866],\n  [43872, 43879],\n  [43888, 43967],\n  [64256, 64262],\n  [64275, 64279],\n  [65345, 65370],\n  [66600, 66639],\n  [66776, 66811],\n  [68800, 68850],\n  [71872, 71903],\n  [93792, 93823],\n  [119834, 119859],\n  [119886, 119892],\n  [119894, 119911],\n  [119938, 119963],\n  [119990, 119993],\n  [119997, 120003],\n  [120005, 120015],\n  [120042, 120067],\n  [120094, 120119],\n  [120146, 120171],\n  [120198, 120223],\n  [120250, 120275],\n  [120302, 120327],\n  [120354, 120379],\n  [120406, 120431],\n  [120458, 120485],\n  [120514, 120538],\n  [120540, 120545],\n  [120572, 120596],\n  [120598, 120603],\n  [120630, 120654],\n  [120656, 120661],\n  [120688, 120712],\n  [120714, 120719],\n  [120746, 120770],\n  [120772, 120777],\n  [125218, 125251],\n  [688, 705],\n  [710, 721],\n  [736, 740],\n  [1765, 1766],\n  [2036, 2037],\n  [7288, 7293],\n  [7468, 7530],\n  [7579, 7615],\n  [8336, 8348],\n  [11388, 11389],\n  [12337, 12341],\n  [12445, 12446],\n  [12540, 12542],\n  [42232, 42237],\n  [42652, 42653],\n  [42775, 42783],\n  [43000, 43001],\n  [43763, 43764],\n  [43868, 43871],\n  [65438, 65439],\n  [92992, 92995],\n  [94099, 94111],\n  [94176, 94177],\n  [123191, 123197],\n  [13313, 19893],\n  [19969, 40943],\n  [44033, 55203],\n  [94209, 100343],\n  [131073, 173782],\n  [173825, 177972],\n  [177985, 178205],\n  [178209, 183969],\n  [183985, 191456],\n  [448, 451],\n  [1488, 1514],\n  [1519, 1522],\n  [1568, 1599],\n  [1601, 1610],\n  [1646, 1647],\n  [1649, 1747],\n  [1774, 1775],\n  [1786, 1788],\n  [1810, 1839],\n  [1869, 1957],\n  [1994, 2026],\n  [2048, 2069],\n  [2112, 2136],\n  [2144, 2154],\n  [2208, 2228],\n  [2230, 2237],\n  [2308, 2361],\n  [2392, 2401],\n  [2418, 2432],\n  [2437, 2444],\n  [2447, 2448],\n  [2451, 2472],\n  [2474, 2480],\n  [2486, 2489],\n  [2524, 2525],\n  [2527, 2529],\n  [2544, 2545],\n  [2565, 2570],\n  [2575, 2576],\n  [2579, 2600],\n  [2602, 2608],\n  [2610, 2611],\n  [2613, 2614],\n  [2616, 2617],\n  [2649, 2652],\n  [2674, 2676],\n  [2693, 2701],\n  [2703, 2705],\n  [2707, 2728],\n  [2730, 2736],\n  [2738, 2739],\n  [2741, 2745],\n  [2784, 2785],\n  [2821, 2828],\n  [2831, 2832],\n  [2835, 2856],\n  [2858, 2864],\n  [2866, 2867],\n  [2869, 2873],\n  [2908, 2909],\n  [2911, 2913],\n  [2949, 2954],\n  [2958, 2960],\n  [2962, 2965],\n  [2969, 2970],\n  [2974, 2975],\n  [2979, 2980],\n  [2984, 2986],\n  [2990, 3001],\n  [3077, 3084],\n  [3086, 3088],\n  [3090, 3112],\n  [3114, 3129],\n  [3160, 3162],\n  [3168, 3169],\n  [3205, 3212],\n  [3214, 3216],\n  [3218, 3240],\n  [3242, 3251],\n  [3253, 3257],\n  [3296, 3297],\n  [3313, 3314],\n  [3333, 3340],\n  [3342, 3344],\n  [3346, 3386],\n  [3412, 3414],\n  [3423, 3425],\n  [3450, 3455],\n  [3461, 3478],\n  [3482, 3505],\n  [3507, 3515],\n  [3520, 3526],\n  [3585, 3632],\n  [3634, 3635],\n  [3648, 3653],\n  [3713, 3714],\n  [3718, 3722],\n  [3724, 3747],\n  [3751, 3760],\n  [3762, 3763],\n  [3776, 3780],\n  [3804, 3807],\n  [3904, 3911],\n  [3913, 3948],\n  [3976, 3980],\n  [4096, 4138],\n  [4176, 4181],\n  [4186, 4189],\n  [4197, 4198],\n  [4206, 4208],\n  [4213, 4225],\n  [4352, 4680],\n  [4682, 4685],\n  [4688, 4694],\n  [4698, 4701],\n  [4704, 4744],\n  [4746, 4749],\n  [4752, 4784],\n  [4786, 4789],\n  [4792, 4798],\n  [4802, 4805],\n  [4808, 4822],\n  [4824, 4880],\n  [4882, 4885],\n  [4888, 4954],\n  [4992, 5007],\n  [5121, 5740],\n  [5743, 5759],\n  [5761, 5786],\n  [5792, 5866],\n  [5873, 5880],\n  [5888, 5900],\n  [5902, 5905],\n  [5920, 5937],\n  [5952, 5969],\n  [5984, 5996],\n  [5998, 6000],\n  [6016, 6067],\n  [6176, 6210],\n  [6212, 6264],\n  [6272, 6276],\n  [6279, 6312],\n  [6320, 6389],\n  [6400, 6430],\n  [6480, 6509],\n  [6512, 6516],\n  [6528, 6571],\n  [6576, 6601],\n  [6656, 6678],\n  [6688, 6740],\n  [6917, 6963],\n  [6981, 6987],\n  [7043, 7072],\n  [7086, 7087],\n  [7098, 7141],\n  [7168, 7203],\n  [7245, 7247],\n  [7258, 7287],\n  [7401, 7404],\n  [7406, 7411],\n  [7413, 7414],\n  [8501, 8504],\n  [11568, 11623],\n  [11648, 11670],\n  [11680, 11686],\n  [11688, 11694],\n  [11696, 11702],\n  [11704, 11710],\n  [11712, 11718],\n  [11720, 11726],\n  [11728, 11734],\n  [11736, 11742],\n  [12353, 12438],\n  [12449, 12538],\n  [12549, 12591],\n  [12593, 12686],\n  [12704, 12730],\n  [12784, 12799],\n  [40960, 40980],\n  [40982, 42124],\n  [42192, 42231],\n  [42240, 42507],\n  [42512, 42527],\n  [42538, 42539],\n  [42656, 42725],\n  [43003, 43009],\n  [43011, 43013],\n  [43015, 43018],\n  [43020, 43042],\n  [43072, 43123],\n  [43138, 43187],\n  [43250, 43255],\n  [43261, 43262],\n  [43274, 43301],\n  [43312, 43334],\n  [43360, 43388],\n  [43396, 43442],\n  [43488, 43492],\n  [43495, 43503],\n  [43514, 43518],\n  [43520, 43560],\n  [43584, 43586],\n  [43588, 43595],\n  [43616, 43631],\n  [43633, 43638],\n  [43646, 43695],\n  [43701, 43702],\n  [43705, 43709],\n  [43739, 43740],\n  [43744, 43754],\n  [43777, 43782],\n  [43785, 43790],\n  [43793, 43798],\n  [43808, 43814],\n  [43816, 43822],\n  [43968, 44002],\n  [55216, 55238],\n  [55243, 55291],\n  [63744, 64109],\n  [64112, 64217],\n  [64287, 64296],\n  [64298, 64310],\n  [64312, 64316],\n  [64320, 64321],\n  [64323, 64324],\n  [64326, 64433],\n  [64467, 64829],\n  [64848, 64911],\n  [64914, 64967],\n  [65008, 65019],\n  [65136, 65140],\n  [65142, 65276],\n  [65382, 65391],\n  [65393, 65437],\n  [65440, 65470],\n  [65474, 65479],\n  [65482, 65487],\n  [65490, 65495],\n  [65498, 65500],\n  [65536, 65547],\n  [65549, 65574],\n  [65576, 65594],\n  [65596, 65597],\n  [65599, 65613],\n  [65616, 65629],\n  [65664, 65786],\n  [66176, 66204],\n  [66208, 66256],\n  [66304, 66335],\n  [66349, 66368],\n  [66370, 66377],\n  [66384, 66421],\n  [66432, 66461],\n  [66464, 66499],\n  [66504, 66511],\n  [66640, 66717],\n  [66816, 66855],\n  [66864, 66915],\n  [67072, 67382],\n  [67392, 67413],\n  [67424, 67431],\n  [67584, 67589],\n  [67594, 67637],\n  [67639, 67640],\n  [67647, 67669],\n  [67680, 67702],\n  [67712, 67742],\n  [67808, 67826],\n  [67828, 67829],\n  [67840, 67861],\n  [67872, 67897],\n  [67968, 68023],\n  [68030, 68031],\n  [68112, 68115],\n  [68117, 68119],\n  [68121, 68149],\n  [68192, 68220],\n  [68224, 68252],\n  [68288, 68295],\n  [68297, 68324],\n  [68352, 68405],\n  [68416, 68437],\n  [68448, 68466],\n  [68480, 68497],\n  [68608, 68680],\n  [68864, 68899],\n  [69376, 69404],\n  [69424, 69445],\n  [69600, 69622],\n  [69635, 69687],\n  [69763, 69807],\n  [69840, 69864],\n  [69891, 69926],\n  [69968, 70002],\n  [70019, 70066],\n  [70081, 70084],\n  [70144, 70161],\n  [70163, 70187],\n  [70272, 70278],\n  [70282, 70285],\n  [70287, 70301],\n  [70303, 70312],\n  [70320, 70366],\n  [70405, 70412],\n  [70415, 70416],\n  [70419, 70440],\n  [70442, 70448],\n  [70450, 70451],\n  [70453, 70457],\n  [70493, 70497],\n  [70656, 70708],\n  [70727, 70730],\n  [70784, 70831],\n  [70852, 70853],\n  [71040, 71086],\n  [71128, 71131],\n  [71168, 71215],\n  [71296, 71338],\n  [71424, 71450],\n  [71680, 71723],\n  [72096, 72103],\n  [72106, 72144],\n  [72203, 72242],\n  [72284, 72329],\n  [72384, 72440],\n  [72704, 72712],\n  [72714, 72750],\n  [72818, 72847],\n  [72960, 72966],\n  [72968, 72969],\n  [72971, 73008],\n  [73056, 73061],\n  [73063, 73064],\n  [73066, 73097],\n  [73440, 73458],\n  [73728, 74649],\n  [74880, 75075],\n  [77824, 78894],\n  [82944, 83526],\n  [92160, 92728],\n  [92736, 92766],\n  [92880, 92909],\n  [92928, 92975],\n  [93027, 93047],\n  [93053, 93071],\n  [93952, 94026],\n  [100352, 101106],\n  [110592, 110878],\n  [110928, 110930],\n  [110948, 110951],\n  [110960, 111355],\n  [113664, 113770],\n  [113776, 113788],\n  [113792, 113800],\n  [113808, 113817],\n  [123136, 123180],\n  [123584, 123627],\n  [124928, 125124],\n  [126464, 126467],\n  [126469, 126495],\n  [126497, 126498],\n  [126505, 126514],\n  [126516, 126519],\n  [126541, 126543],\n  [126545, 126546],\n  [126561, 126562],\n  [126567, 126570],\n  [126572, 126578],\n  [126580, 126583],\n  [126585, 126588],\n  [126592, 126601],\n  [126603, 126619],\n  [126625, 126627],\n  [126629, 126633],\n  [126635, 126651],\n  [194560, 195101],\n  [8072, 8079],\n  [8088, 8095],\n  [8104, 8111],\n  [65, 90],\n  [192, 214],\n  [216, 222],\n  [376, 377],\n  [385, 386],\n  [390, 391],\n  [393, 395],\n  [398, 401],\n  [403, 404],\n  [406, 408],\n  [412, 413],\n  [415, 416],\n  [422, 423],\n  [430, 431],\n  [433, 435],\n  [439, 440],\n  [502, 504],\n  [570, 571],\n  [573, 574],\n  [579, 582],\n  [904, 906],\n  [910, 911],\n  [913, 929],\n  [931, 939],\n  [978, 980],\n  [1017, 1018],\n  [1021, 1071],\n  [1216, 1217],\n  [1329, 1366],\n  [4256, 4293],\n  [5024, 5109],\n  [7312, 7354],\n  [7357, 7359],\n  [7944, 7951],\n  [7960, 7965],\n  [7976, 7983],\n  [7992, 7999],\n  [8008, 8013],\n  [8040, 8047],\n  [8120, 8123],\n  [8136, 8139],\n  [8152, 8155],\n  [8168, 8172],\n  [8184, 8187],\n  [8459, 8461],\n  [8464, 8466],\n  [8473, 8477],\n  [8490, 8493],\n  [8496, 8499],\n  [8510, 8511],\n  [11264, 11310],\n  [11362, 11364],\n  [11373, 11376],\n  [11390, 11392],\n  [42877, 42878],\n  [42922, 42926],\n  [42928, 42932],\n  [42948, 42950],\n  [65313, 65338],\n  [66560, 66599],\n  [66736, 66771],\n  [68736, 68786],\n  [71840, 71871],\n  [93760, 93791],\n  [119808, 119833],\n  [119860, 119885],\n  [119912, 119937],\n  [119966, 119967],\n  [119973, 119974],\n  [119977, 119980],\n  [119982, 119989],\n  [120016, 120041],\n  [120068, 120069],\n  [120071, 120074],\n  [120077, 120084],\n  [120086, 120092],\n  [120120, 120121],\n  [120123, 120126],\n  [120128, 120132],\n  [120138, 120144],\n  [120172, 120197],\n  [120224, 120249],\n  [120276, 120301],\n  [120328, 120353],\n  [120380, 120405],\n  [120432, 120457],\n  [120488, 120512],\n  [120546, 120570],\n  [120604, 120628],\n  [120662, 120686],\n  [120720, 120744],\n  [125184, 125217],\n  [5870, 5872],\n  [8544, 8578],\n  [8581, 8584],\n  [12321, 12329],\n  [12344, 12346],\n  [42726, 42735],\n  [65856, 65908],\n  [66513, 66517],\n  [74752, 74862],\n  [162, 165],\n  [2046, 2047],\n  [2546, 2547],\n  [8352, 8383],\n  [65504, 65505],\n  [65509, 65510],\n  [73693, 73696],\n  [8255, 8256],\n  [65075, 65076],\n  [65101, 65103]\n];\naddRanges(fic, fic_a);\nconst ricd = new Set([\n  1471,\n  1479,\n  1648,\n  1809,\n  2045,\n  2362,\n  2364,\n  2381,\n  2433,\n  2492,\n  2509,\n  2558,\n  2620,\n  2641,\n  2677,\n  2748,\n  2765,\n  2817,\n  2876,\n  2879,\n  2893,\n  2902,\n  2946,\n  3008,\n  3021,\n  3072,\n  3076,\n  3201,\n  3260,\n  3263,\n  3270,\n  3405,\n  3530,\n  3542,\n  3633,\n  3761,\n  3893,\n  3895,\n  3897,\n  4038,\n  4226,\n  4237,\n  4253,\n  6086,\n  6109,\n  6313,\n  6450,\n  6683,\n  6742,\n  6752,\n  6754,\n  6783,\n  6964,\n  6972,\n  6978,\n  7142,\n  7149,\n  7405,\n  7412,\n  8417,\n  11647,\n  42607,\n  43010,\n  43014,\n  43019,\n  43263,\n  43443,\n  43493,\n  43587,\n  43596,\n  43644,\n  43696,\n  43713,\n  43766,\n  44005,\n  44008,\n  44013,\n  64286,\n  66045,\n  66272,\n  68159,\n  69633,\n  70003,\n  70196,\n  70206,\n  70367,\n  70464,\n  70726,\n  70750,\n  70842,\n  71229,\n  71339,\n  71341,\n  71351,\n  72160,\n  72263,\n  72767,\n  73018,\n  73031,\n  73109,\n  73111,\n  94031,\n  121461,\n  121476,\n  173,\n  1564,\n  1757,\n  1807,\n  2274,\n  6158,\n  65279,\n  69821,\n  69837,\n  917505\n]);\nconst ricd_a = [\n  [768, 879],\n  [1155, 1159],\n  [1425, 1469],\n  [1473, 1474],\n  [1476, 1477],\n  [1552, 1562],\n  [1611, 1631],\n  [1750, 1756],\n  [1759, 1764],\n  [1767, 1768],\n  [1770, 1773],\n  [1840, 1866],\n  [1958, 1968],\n  [2027, 2035],\n  [2070, 2073],\n  [2075, 2083],\n  [2085, 2087],\n  [2089, 2093],\n  [2137, 2139],\n  [2259, 2273],\n  [2275, 2306],\n  [2369, 2376],\n  [2385, 2391],\n  [2402, 2403],\n  [2497, 2500],\n  [2530, 2531],\n  [2561, 2562],\n  [2625, 2626],\n  [2631, 2632],\n  [2635, 2637],\n  [2672, 2673],\n  [2689, 2690],\n  [2753, 2757],\n  [2759, 2760],\n  [2786, 2787],\n  [2810, 2815],\n  [2881, 2884],\n  [2914, 2915],\n  [3134, 3136],\n  [3142, 3144],\n  [3146, 3149],\n  [3157, 3158],\n  [3170, 3171],\n  [3276, 3277],\n  [3298, 3299],\n  [3328, 3329],\n  [3387, 3388],\n  [3393, 3396],\n  [3426, 3427],\n  [3538, 3540],\n  [3636, 3642],\n  [3655, 3662],\n  [3764, 3772],\n  [3784, 3789],\n  [3864, 3865],\n  [3953, 3966],\n  [3968, 3972],\n  [3974, 3975],\n  [3981, 3991],\n  [3993, 4028],\n  [4141, 4144],\n  [4146, 4151],\n  [4153, 4154],\n  [4157, 4158],\n  [4184, 4185],\n  [4190, 4192],\n  [4209, 4212],\n  [4229, 4230],\n  [4957, 4959],\n  [5906, 5908],\n  [5938, 5940],\n  [5970, 5971],\n  [6002, 6003],\n  [6068, 6069],\n  [6071, 6077],\n  [6089, 6099],\n  [6155, 6157],\n  [6277, 6278],\n  [6432, 6434],\n  [6439, 6440],\n  [6457, 6459],\n  [6679, 6680],\n  [6744, 6750],\n  [6757, 6764],\n  [6771, 6780],\n  [6832, 6845],\n  [6912, 6915],\n  [6966, 6970],\n  [7019, 7027],\n  [7040, 7041],\n  [7074, 7077],\n  [7080, 7081],\n  [7083, 7085],\n  [7144, 7145],\n  [7151, 7153],\n  [7212, 7219],\n  [7222, 7223],\n  [7376, 7378],\n  [7380, 7392],\n  [7394, 7400],\n  [7416, 7417],\n  [7616, 7673],\n  [7675, 7679],\n  [8400, 8412],\n  [8421, 8432],\n  [11503, 11505],\n  [11744, 11775],\n  [12330, 12333],\n  [12441, 12442],\n  [42612, 42621],\n  [42654, 42655],\n  [42736, 42737],\n  [43045, 43046],\n  [43204, 43205],\n  [43232, 43249],\n  [43302, 43309],\n  [43335, 43345],\n  [43392, 43394],\n  [43446, 43449],\n  [43452, 43453],\n  [43561, 43566],\n  [43569, 43570],\n  [43573, 43574],\n  [43698, 43700],\n  [43703, 43704],\n  [43710, 43711],\n  [43756, 43757],\n  [65024, 65039],\n  [65056, 65071],\n  [66422, 66426],\n  [68097, 68099],\n  [68101, 68102],\n  [68108, 68111],\n  [68152, 68154],\n  [68325, 68326],\n  [68900, 68903],\n  [69446, 69456],\n  [69688, 69702],\n  [69759, 69761],\n  [69811, 69814],\n  [69817, 69818],\n  [69888, 69890],\n  [69927, 69931],\n  [69933, 69940],\n  [70016, 70017],\n  [70070, 70078],\n  [70089, 70092],\n  [70191, 70193],\n  [70198, 70199],\n  [70371, 70378],\n  [70400, 70401],\n  [70459, 70460],\n  [70502, 70508],\n  [70512, 70516],\n  [70712, 70719],\n  [70722, 70724],\n  [70835, 70840],\n  [70847, 70848],\n  [70850, 70851],\n  [71090, 71093],\n  [71100, 71101],\n  [71103, 71104],\n  [71132, 71133],\n  [71219, 71226],\n  [71231, 71232],\n  [71344, 71349],\n  [71453, 71455],\n  [71458, 71461],\n  [71463, 71467],\n  [71727, 71735],\n  [71737, 71738],\n  [72148, 72151],\n  [72154, 72155],\n  [72193, 72202],\n  [72243, 72248],\n  [72251, 72254],\n  [72273, 72278],\n  [72281, 72283],\n  [72330, 72342],\n  [72344, 72345],\n  [72752, 72758],\n  [72760, 72765],\n  [72850, 72871],\n  [72874, 72880],\n  [72882, 72883],\n  [72885, 72886],\n  [73009, 73014],\n  [73020, 73021],\n  [73023, 73029],\n  [73104, 73105],\n  [73459, 73460],\n  [92912, 92916],\n  [92976, 92982],\n  [94095, 94098],\n  [113821, 113822],\n  [119143, 119145],\n  [119163, 119170],\n  [119173, 119179],\n  [119210, 119213],\n  [119362, 119364],\n  [121344, 121398],\n  [121403, 121452],\n  [121499, 121503],\n  [121505, 121519],\n  [122880, 122886],\n  [122888, 122904],\n  [122907, 122913],\n  [122915, 122916],\n  [122918, 122922],\n  [123184, 123190],\n  [123628, 123631],\n  [125136, 125142],\n  [125252, 125258],\n  [917760, 917999],\n  [1536, 1541],\n  [8203, 8207],\n  [8234, 8238],\n  [8288, 8292],\n  [8294, 8303],\n  [65529, 65531],\n  [78896, 78904],\n  [113824, 113827],\n  [119155, 119162],\n  [917536, 917631]\n];\naddRanges(ricd, ricd_a);\nconst mac_a = [\n  [0, 8],\n  [14, 27],\n  [127, 159],\n  [768, 879],\n  [6832, 6911],\n  [7616, 7679],\n  [8400, 8447],\n  [65056, 65071],\n  [48, 57]\n];\naddRanges(ricd, mac_a);\nconst ric = new Set(\n  (function*() {\n    yield* fic;\n    yield* ricd;\n  })()\n);\nmodule.exports = {\n  firstIdentChar: fic,\n  restIdentChar: ric\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/unicodesets.js\n");

/***/ }),

/***/ "./node_modules/java-parser/src/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/java-parser/src/utils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\n/**\n * Should Parser / Lexer Validations be skipped?\n *\n * By default (productive mode) the validations would be skipped to reduce parser initialization time.\n * But during development flows (e.g testing/CI) they should be enabled to detect possible issues.\n *\n * @returns {boolean}\n */\nfunction getSkipValidations() {\n  return (\n    (process && // (not every runtime has a global `process` object\n      process.env &&\n      process.env[\"prettier-java-development-mode\"] === \"enabled\") === false\n  );\n}\n\nmodule.exports = {\n  getSkipValidations\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvamF2YS1wYXJzZXIvc3JjL3V0aWxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2phdmEtcGFyc2VyL3NyYy91dGlscy5qcz8xNjAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFNob3VsZCBQYXJzZXIgLyBMZXhlciBWYWxpZGF0aW9ucyBiZSBza2lwcGVkP1xuICpcbiAqIEJ5IGRlZmF1bHQgKHByb2R1Y3RpdmUgbW9kZSkgdGhlIHZhbGlkYXRpb25zIHdvdWxkIGJlIHNraXBwZWQgdG8gcmVkdWNlIHBhcnNlciBpbml0aWFsaXphdGlvbiB0aW1lLlxuICogQnV0IGR1cmluZyBkZXZlbG9wbWVudCBmbG93cyAoZS5nIHRlc3RpbmcvQ0kpIHRoZXkgc2hvdWxkIGJlIGVuYWJsZWQgdG8gZGV0ZWN0IHBvc3NpYmxlIGlzc3Vlcy5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZ2V0U2tpcFZhbGlkYXRpb25zKCkge1xuICByZXR1cm4gKFxuICAgIChwcm9jZXNzICYmIC8vIChub3QgZXZlcnkgcnVudGltZSBoYXMgYSBnbG9iYWwgYHByb2Nlc3NgIG9iamVjdFxuICAgICAgcHJvY2Vzcy5lbnYgJiZcbiAgICAgIHByb2Nlc3MuZW52W1wicHJldHRpZXItamF2YS1kZXZlbG9wbWVudC1tb2RlXCJdID09PSBcImVuYWJsZWRcIikgPT09IGZhbHNlXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRTa2lwVmFsaWRhdGlvbnNcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/java-parser/src/utils.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/regexp-to-ast/lib/regexp-to-ast.js":
/*!*********************************************************!*\
  !*** ./node_modules/regexp-to-ast/lib/regexp-to-ast.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(root, factory) {\n    // istanbul ignore next\n    if (true) {\n        // istanbul ignore next\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n    } else {}\n})(\n    typeof self !== \"undefined\"\n        ? // istanbul ignore next\n          self\n        : this,\n    function() {\n        // references\n        // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n        // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\n        function RegExpParser() {}\n\n        RegExpParser.prototype.saveState = function() {\n            return {\n                idx: this.idx,\n                input: this.input,\n                groupIdx: this.groupIdx\n            }\n        }\n\n        RegExpParser.prototype.restoreState = function(newState) {\n            this.idx = newState.idx\n            this.input = newState.input\n            this.groupIdx = newState.groupIdx\n        }\n\n        RegExpParser.prototype.pattern = function(input) {\n            // parser state\n            this.idx = 0\n            this.input = input\n            this.groupIdx = 0\n\n            this.consumeChar(\"/\")\n            var value = this.disjunction()\n            this.consumeChar(\"/\")\n\n            var flags = {\n                type: \"Flags\",\n                global: false,\n                ignoreCase: false,\n                multiLine: false,\n                unicode: false,\n                sticky: false\n            }\n\n            while (this.isRegExpFlag()) {\n                switch (this.popChar()) {\n                    case \"g\":\n                        addFlag(flags, \"global\")\n                        break\n                    case \"i\":\n                        addFlag(flags, \"ignoreCase\")\n                        break\n                    case \"m\":\n                        addFlag(flags, \"multiLine\")\n                        break\n                    case \"u\":\n                        addFlag(flags, \"unicode\")\n                        break\n                    case \"y\":\n                        addFlag(flags, \"sticky\")\n                        break\n                }\n            }\n\n            if (this.idx !== this.input.length) {\n                throw Error(\n                    \"Redundant input: \" + this.input.substring(this.idx)\n                )\n            }\n            return { type: \"Pattern\", flags: flags, value: value }\n        }\n\n        RegExpParser.prototype.disjunction = function() {\n            var alts = []\n            alts.push(this.alternative())\n\n            while (this.peekChar() === \"|\") {\n                this.consumeChar(\"|\")\n                alts.push(this.alternative())\n            }\n\n            return { type: \"Disjunction\", value: alts }\n        }\n\n        RegExpParser.prototype.alternative = function() {\n            var terms = []\n\n            while (this.isTerm()) {\n                terms.push(this.term())\n            }\n\n            return { type: \"Alternative\", value: terms }\n        }\n\n        RegExpParser.prototype.term = function() {\n            if (this.isAssertion()) {\n                return this.assertion()\n            } else {\n                return this.atom()\n            }\n        }\n\n        RegExpParser.prototype.assertion = function() {\n            switch (this.popChar()) {\n                case \"^\":\n                    return { type: \"StartAnchor\" }\n                case \"$\":\n                    return { type: \"EndAnchor\" }\n                // '\\b' or '\\B'\n                case \"\\\\\":\n                    switch (this.popChar()) {\n                        case \"b\":\n                            return { type: \"WordBoundary\" }\n                        case \"B\":\n                            return { type: \"NonWordBoundary\" }\n                    }\n                    // istanbul ignore next\n                    throw Error(\"Invalid Assertion Escape\")\n                // '(?=' or '(?!'\n                case \"(\":\n                    this.consumeChar(\"?\")\n\n                    var type\n                    switch (this.popChar()) {\n                        case \"=\":\n                            type = \"Lookahead\"\n                            break\n                        case \"!\":\n                            type = \"NegativeLookahead\"\n                            break\n                    }\n                    ASSERT_EXISTS(type)\n\n                    var disjunction = this.disjunction()\n\n                    this.consumeChar(\")\")\n\n                    return { type: type, value: disjunction }\n            }\n            // istanbul ignore next\n            ASSERT_NEVER_REACH_HERE()\n        }\n\n        RegExpParser.prototype.quantifier = function(isBacktracking) {\n            var range\n            switch (this.popChar()) {\n                case \"*\":\n                    range = {\n                        atLeast: 0,\n                        atMost: Infinity\n                    }\n                    break\n                case \"+\":\n                    range = {\n                        atLeast: 1,\n                        atMost: Infinity\n                    }\n                    break\n                case \"?\":\n                    range = {\n                        atLeast: 0,\n                        atMost: 1\n                    }\n                    break\n                case \"{\":\n                    var atLeast = this.integerIncludingZero()\n                    switch (this.popChar()) {\n                        case \"}\":\n                            range = {\n                                atLeast: atLeast,\n                                atMost: atLeast\n                            }\n                            break\n                        case \",\":\n                            var atMost\n                            if (this.isDigit()) {\n                                atMost = this.integerIncludingZero()\n                                range = {\n                                    atLeast: atLeast,\n                                    atMost: atMost\n                                }\n                            } else {\n                                range = {\n                                    atLeast: atLeast,\n                                    atMost: Infinity\n                                }\n                            }\n                            this.consumeChar(\"}\")\n                            break\n                    }\n                    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n                    // causes severe performance degradations\n                    if (isBacktracking === true && range === undefined) {\n                        return undefined\n                    }\n                    ASSERT_EXISTS(range)\n                    break\n            }\n\n            // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n            // causes severe performance degradations\n            if (isBacktracking === true && range === undefined) {\n                return undefined\n            }\n\n            ASSERT_EXISTS(range)\n\n            if (this.peekChar(0) === \"?\") {\n                this.consumeChar(\"?\")\n                range.greedy = false\n            } else {\n                range.greedy = true\n            }\n\n            range.type = \"Quantifier\"\n            return range\n        }\n\n        RegExpParser.prototype.atom = function() {\n            var atom\n            switch (this.peekChar()) {\n                case \".\":\n                    atom = this.dotAll()\n                    break\n                case \"\\\\\":\n                    atom = this.atomEscape()\n                    break\n                case \"[\":\n                    atom = this.characterClass()\n                    break\n                case \"(\":\n                    atom = this.group()\n                    break\n            }\n\n            if (atom === undefined && this.isPatternCharacter()) {\n                atom = this.patternCharacter()\n            }\n\n            ASSERT_EXISTS(atom)\n\n            if (this.isQuantifier()) {\n                atom.quantifier = this.quantifier()\n            }\n\n            return atom\n        }\n\n        RegExpParser.prototype.dotAll = function() {\n            this.consumeChar(\".\")\n            return {\n                type: \"Set\",\n                complement: true,\n                value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")]\n            }\n        }\n\n        RegExpParser.prototype.atomEscape = function() {\n            this.consumeChar(\"\\\\\")\n\n            switch (this.peekChar()) {\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    return this.decimalEscapeAtom()\n                case \"d\":\n                case \"D\":\n                case \"s\":\n                case \"S\":\n                case \"w\":\n                case \"W\":\n                    return this.characterClassEscape()\n                case \"f\":\n                case \"n\":\n                case \"r\":\n                case \"t\":\n                case \"v\":\n                    return this.controlEscapeAtom()\n                case \"c\":\n                    return this.controlLetterEscapeAtom()\n                case \"0\":\n                    return this.nulCharacterAtom()\n                case \"x\":\n                    return this.hexEscapeSequenceAtom()\n                case \"u\":\n                    return this.regExpUnicodeEscapeSequenceAtom()\n                default:\n                    return this.identityEscapeAtom()\n            }\n        }\n\n        RegExpParser.prototype.decimalEscapeAtom = function() {\n            var value = this.positiveInteger()\n\n            return { type: \"GroupBackReference\", value: value }\n        }\n\n        RegExpParser.prototype.characterClassEscape = function() {\n            var set\n            var complement = false\n            switch (this.popChar()) {\n                case \"d\":\n                    set = digitsCharCodes\n                    break\n                case \"D\":\n                    set = digitsCharCodes\n                    complement = true\n                    break\n                case \"s\":\n                    set = whitespaceCodes\n                    break\n                case \"S\":\n                    set = whitespaceCodes\n                    complement = true\n                    break\n                case \"w\":\n                    set = wordCharCodes\n                    break\n                case \"W\":\n                    set = wordCharCodes\n                    complement = true\n                    break\n            }\n\n            ASSERT_EXISTS(set)\n\n            return { type: \"Set\", value: set, complement: complement }\n        }\n\n        RegExpParser.prototype.controlEscapeAtom = function() {\n            var escapeCode\n            switch (this.popChar()) {\n                case \"f\":\n                    escapeCode = cc(\"\\f\")\n                    break\n                case \"n\":\n                    escapeCode = cc(\"\\n\")\n                    break\n                case \"r\":\n                    escapeCode = cc(\"\\r\")\n                    break\n                case \"t\":\n                    escapeCode = cc(\"\\t\")\n                    break\n                case \"v\":\n                    escapeCode = cc(\"\\v\")\n                    break\n            }\n            ASSERT_EXISTS(escapeCode)\n\n            return { type: \"Character\", value: escapeCode }\n        }\n\n        RegExpParser.prototype.controlLetterEscapeAtom = function() {\n            this.consumeChar(\"c\")\n            var letter = this.popChar()\n            if (/[a-zA-Z]/.test(letter) === false) {\n                throw Error(\"Invalid \")\n            }\n\n            var letterCode = letter.toUpperCase().charCodeAt(0) - 64\n            return { type: \"Character\", value: letterCode }\n        }\n\n        RegExpParser.prototype.nulCharacterAtom = function() {\n            // TODO implement '[lookahead ∉ DecimalDigit]'\n            // TODO: for the deprecated octal escape sequence\n            this.consumeChar(\"0\")\n            return { type: \"Character\", value: cc(\"\\0\") }\n        }\n\n        RegExpParser.prototype.hexEscapeSequenceAtom = function() {\n            this.consumeChar(\"x\")\n            return this.parseHexDigits(2)\n        }\n\n        RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function() {\n            this.consumeChar(\"u\")\n            return this.parseHexDigits(4)\n        }\n\n        RegExpParser.prototype.identityEscapeAtom = function() {\n            // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n            // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n            var escapedChar = this.popChar()\n            return { type: \"Character\", value: cc(escapedChar) }\n        }\n\n        RegExpParser.prototype.classPatternCharacterAtom = function() {\n            switch (this.peekChar()) {\n                // istanbul ignore next\n                case \"\\n\":\n                // istanbul ignore next\n                case \"\\r\":\n                // istanbul ignore next\n                case \"\\u2028\":\n                // istanbul ignore next\n                case \"\\u2029\":\n                // istanbul ignore next\n                case \"\\\\\":\n                // istanbul ignore next\n                case \"]\":\n                    throw Error(\"TBD\")\n                default:\n                    var nextChar = this.popChar()\n                    return { type: \"Character\", value: cc(nextChar) }\n            }\n        }\n\n        RegExpParser.prototype.characterClass = function() {\n            var set = []\n            var complement = false\n            this.consumeChar(\"[\")\n            if (this.peekChar(0) === \"^\") {\n                this.consumeChar(\"^\")\n                complement = true\n            }\n\n            while (this.isClassAtom()) {\n                var from = this.classAtom()\n                var isFromSingleChar = from.type === \"Character\"\n                if (isFromSingleChar && this.isRangeDash()) {\n                    this.consumeChar(\"-\")\n                    var to = this.classAtom()\n                    var isToSingleChar = to.type === \"Character\"\n\n                    // a range can only be used when both sides are single characters\n                    if (isToSingleChar) {\n                        if (to.value < from.value) {\n                            throw Error(\"Range out of order in character class\")\n                        }\n                        set.push({ from: from.value, to: to.value })\n                    } else {\n                        // literal dash\n                        insertToSet(from.value, set)\n                        set.push(cc(\"-\"))\n                        insertToSet(to.value, set)\n                    }\n                } else {\n                    insertToSet(from.value, set)\n                }\n            }\n\n            this.consumeChar(\"]\")\n\n            return { type: \"Set\", complement: complement, value: set }\n        }\n\n        RegExpParser.prototype.classAtom = function() {\n            switch (this.peekChar()) {\n                // istanbul ignore next\n                case \"]\":\n                // istanbul ignore next\n                case \"\\n\":\n                // istanbul ignore next\n                case \"\\r\":\n                // istanbul ignore next\n                case \"\\u2028\":\n                // istanbul ignore next\n                case \"\\u2029\":\n                    throw Error(\"TBD\")\n                case \"\\\\\":\n                    return this.classEscape()\n                default:\n                    return this.classPatternCharacterAtom()\n            }\n        }\n\n        RegExpParser.prototype.classEscape = function() {\n            this.consumeChar(\"\\\\\")\n            switch (this.peekChar()) {\n                // Matches a backspace.\n                // (Not to be confused with \\b word boundary outside characterClass)\n                case \"b\":\n                    this.consumeChar(\"b\")\n                    return { type: \"Character\", value: cc(\"\\u0008\") }\n                case \"d\":\n                case \"D\":\n                case \"s\":\n                case \"S\":\n                case \"w\":\n                case \"W\":\n                    return this.characterClassEscape()\n                case \"f\":\n                case \"n\":\n                case \"r\":\n                case \"t\":\n                case \"v\":\n                    return this.controlEscapeAtom()\n                case \"c\":\n                    return this.controlLetterEscapeAtom()\n                case \"0\":\n                    return this.nulCharacterAtom()\n                case \"x\":\n                    return this.hexEscapeSequenceAtom()\n                case \"u\":\n                    return this.regExpUnicodeEscapeSequenceAtom()\n                default:\n                    return this.identityEscapeAtom()\n            }\n        }\n\n        RegExpParser.prototype.group = function() {\n            var capturing = true\n            this.consumeChar(\"(\")\n            switch (this.peekChar(0)) {\n                case \"?\":\n                    this.consumeChar(\"?\")\n                    this.consumeChar(\":\")\n                    capturing = false\n                    break\n                default:\n                    this.groupIdx++\n                    break\n            }\n            var value = this.disjunction()\n            this.consumeChar(\")\")\n\n            var groupAst = {\n                type: \"Group\",\n                capturing: capturing,\n                value: value\n            }\n\n            if (capturing) {\n                groupAst.idx = this.groupIdx\n            }\n\n            return groupAst\n        }\n\n        RegExpParser.prototype.positiveInteger = function() {\n            var number = this.popChar()\n\n            // istanbul ignore next - can't ever get here due to previous lookahead checks\n            // still implementing this error checking in case this ever changes.\n            if (decimalPatternNoZero.test(number) === false) {\n                throw Error(\"Expecting a positive integer\")\n            }\n\n            while (decimalPattern.test(this.peekChar(0))) {\n                number += this.popChar()\n            }\n\n            return parseInt(number, 10)\n        }\n\n        RegExpParser.prototype.integerIncludingZero = function() {\n            var number = this.popChar()\n            if (decimalPattern.test(number) === false) {\n                throw Error(\"Expecting an integer\")\n            }\n\n            while (decimalPattern.test(this.peekChar(0))) {\n                number += this.popChar()\n            }\n\n            return parseInt(number, 10)\n        }\n\n        RegExpParser.prototype.patternCharacter = function() {\n            var nextChar = this.popChar()\n            switch (nextChar) {\n                // istanbul ignore next\n                case \"\\n\":\n                // istanbul ignore next\n                case \"\\r\":\n                // istanbul ignore next\n                case \"\\u2028\":\n                // istanbul ignore next\n                case \"\\u2029\":\n                // istanbul ignore next\n                case \"^\":\n                // istanbul ignore next\n                case \"$\":\n                // istanbul ignore next\n                case \"\\\\\":\n                // istanbul ignore next\n                case \".\":\n                // istanbul ignore next\n                case \"*\":\n                // istanbul ignore next\n                case \"+\":\n                // istanbul ignore next\n                case \"?\":\n                // istanbul ignore next\n                case \"(\":\n                // istanbul ignore next\n                case \")\":\n                // istanbul ignore next\n                case \"[\":\n                // istanbul ignore next\n                case \"|\":\n                    // istanbul ignore next\n                    throw Error(\"TBD\")\n                default:\n                    return { type: \"Character\", value: cc(nextChar) }\n            }\n        }\n        RegExpParser.prototype.isRegExpFlag = function() {\n            switch (this.peekChar(0)) {\n                case \"g\":\n                case \"i\":\n                case \"m\":\n                case \"u\":\n                case \"y\":\n                    return true\n                default:\n                    return false\n            }\n        }\n\n        RegExpParser.prototype.isRangeDash = function() {\n            return this.peekChar() === \"-\" && this.isClassAtom(1)\n        }\n\n        RegExpParser.prototype.isDigit = function() {\n            return decimalPattern.test(this.peekChar(0))\n        }\n\n        RegExpParser.prototype.isClassAtom = function(howMuch) {\n            if (howMuch === undefined) {\n                howMuch = 0\n            }\n\n            switch (this.peekChar(howMuch)) {\n                case \"]\":\n                case \"\\n\":\n                case \"\\r\":\n                case \"\\u2028\":\n                case \"\\u2029\":\n                    return false\n                default:\n                    return true\n            }\n        }\n\n        RegExpParser.prototype.isTerm = function() {\n            return this.isAtom() || this.isAssertion()\n        }\n\n        RegExpParser.prototype.isAtom = function() {\n            if (this.isPatternCharacter()) {\n                return true\n            }\n\n            switch (this.peekChar(0)) {\n                case \".\":\n                case \"\\\\\": // atomEscape\n                case \"[\": // characterClass\n                // TODO: isAtom must be called before isAssertion - disambiguate\n                case \"(\": // group\n                    return true\n                default:\n                    return false\n            }\n        }\n\n        RegExpParser.prototype.isAssertion = function() {\n            switch (this.peekChar(0)) {\n                case \"^\":\n                case \"$\":\n                    return true\n                // '\\b' or '\\B'\n                case \"\\\\\":\n                    switch (this.peekChar(1)) {\n                        case \"b\":\n                        case \"B\":\n                            return true\n                        default:\n                            return false\n                    }\n                // '(?=' or '(?!'\n                case \"(\":\n                    return (\n                        this.peekChar(1) === \"?\" &&\n                        (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n                    )\n                default:\n                    return false\n            }\n        }\n\n        RegExpParser.prototype.isQuantifier = function() {\n            var prevState = this.saveState()\n            try {\n                return this.quantifier(true) !== undefined\n            } catch (e) {\n                return false\n            } finally {\n                this.restoreState(prevState)\n            }\n        }\n\n        RegExpParser.prototype.isPatternCharacter = function() {\n            switch (this.peekChar()) {\n                case \"^\":\n                case \"$\":\n                case \"\\\\\":\n                case \".\":\n                case \"*\":\n                case \"+\":\n                case \"?\":\n                case \"(\":\n                case \")\":\n                case \"[\":\n                case \"|\":\n                case \"/\":\n                case \"\\n\":\n                case \"\\r\":\n                case \"\\u2028\":\n                case \"\\u2029\":\n                    return false\n                default:\n                    return true\n            }\n        }\n\n        RegExpParser.prototype.parseHexDigits = function(howMany) {\n            var hexString = \"\"\n            for (var i = 0; i < howMany; i++) {\n                var hexChar = this.popChar()\n                if (hexDigitPattern.test(hexChar) === false) {\n                    throw Error(\"Expecting a HexDecimal digits\")\n                }\n                hexString += hexChar\n            }\n            var charCode = parseInt(hexString, 16)\n            return { type: \"Character\", value: charCode }\n        }\n\n        RegExpParser.prototype.peekChar = function(howMuch) {\n            if (howMuch === undefined) {\n                howMuch = 0\n            }\n            return this.input[this.idx + howMuch]\n        }\n\n        RegExpParser.prototype.popChar = function() {\n            var nextChar = this.peekChar(0)\n            this.consumeChar()\n            return nextChar\n        }\n\n        RegExpParser.prototype.consumeChar = function(char) {\n            if (char !== undefined && this.input[this.idx] !== char) {\n                throw Error(\n                    \"Expected: '\" +\n                        char +\n                        \"' but found: '\" +\n                        this.input[this.idx] +\n                        \"' at offset: \" +\n                        this.idx\n                )\n            }\n\n            if (this.idx >= this.input.length) {\n                throw Error(\"Unexpected end of input\")\n            }\n            this.idx++\n        }\n\n        // consts and utilities\n        var hexDigitPattern = /[0-9a-fA-F]/\n        var decimalPattern = /[0-9]/\n        var decimalPatternNoZero = /[1-9]/\n\n        function cc(char) {\n            return char.charCodeAt(0)\n        }\n\n        function insertToSet(item, set) {\n            if (item.length !== undefined) {\n                item.forEach(function(subItem) {\n                    set.push(subItem)\n                })\n            } else {\n                set.push(item)\n            }\n        }\n\n        function addFlag(flagObj, flagKey) {\n            if (flagObj[flagKey] === true) {\n                throw \"duplicate flag \" + flagKey\n            }\n\n            flagObj[flagKey] = true\n        }\n\n        function ASSERT_EXISTS(obj) {\n            // istanbul ignore next\n            if (obj === undefined) {\n                throw Error(\"Internal Error - Should never get here!\")\n            }\n        }\n\n        // istanbul ignore next\n        function ASSERT_NEVER_REACH_HERE() {\n            throw Error(\"Internal Error - Should never get here!\")\n        }\n\n        var i\n        var digitsCharCodes = []\n        for (i = cc(\"0\"); i <= cc(\"9\"); i++) {\n            digitsCharCodes.push(i)\n        }\n\n        var wordCharCodes = [cc(\"_\")].concat(digitsCharCodes)\n        for (i = cc(\"a\"); i <= cc(\"z\"); i++) {\n            wordCharCodes.push(i)\n        }\n\n        for (i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n            wordCharCodes.push(i)\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\n        var whitespaceCodes = [\n            cc(\" \"),\n            cc(\"\\f\"),\n            cc(\"\\n\"),\n            cc(\"\\r\"),\n            cc(\"\\t\"),\n            cc(\"\\v\"),\n            cc(\"\\t\"),\n            cc(\"\\u00a0\"),\n            cc(\"\\u1680\"),\n            cc(\"\\u2000\"),\n            cc(\"\\u2001\"),\n            cc(\"\\u2002\"),\n            cc(\"\\u2003\"),\n            cc(\"\\u2004\"),\n            cc(\"\\u2005\"),\n            cc(\"\\u2006\"),\n            cc(\"\\u2007\"),\n            cc(\"\\u2008\"),\n            cc(\"\\u2009\"),\n            cc(\"\\u200a\"),\n            cc(\"\\u2028\"),\n            cc(\"\\u2029\"),\n            cc(\"\\u202f\"),\n            cc(\"\\u205f\"),\n            cc(\"\\u3000\"),\n            cc(\"\\ufeff\")\n        ]\n\n        function BaseRegExpVisitor() {}\n\n        BaseRegExpVisitor.prototype.visitChildren = function(node) {\n            for (var key in node) {\n                var child = node[key]\n                /* istanbul ignore else */\n                if (node.hasOwnProperty(key)) {\n                    if (child.type !== undefined) {\n                        this.visit(child)\n                    } else if (Array.isArray(child)) {\n                        child.forEach(function(subChild) {\n                            this.visit(subChild)\n                        }, this)\n                    }\n                }\n            }\n        }\n\n        BaseRegExpVisitor.prototype.visit = function(node) {\n            switch (node.type) {\n                case \"Pattern\":\n                    this.visitPattern(node)\n                    break\n                case \"Flags\":\n                    this.visitFlags(node)\n                    break\n                case \"Disjunction\":\n                    this.visitDisjunction(node)\n                    break\n                case \"Alternative\":\n                    this.visitAlternative(node)\n                    break\n                case \"StartAnchor\":\n                    this.visitStartAnchor(node)\n                    break\n                case \"EndAnchor\":\n                    this.visitEndAnchor(node)\n                    break\n                case \"WordBoundary\":\n                    this.visitWordBoundary(node)\n                    break\n                case \"NonWordBoundary\":\n                    this.visitNonWordBoundary(node)\n                    break\n                case \"Lookahead\":\n                    this.visitLookahead(node)\n                    break\n                case \"NegativeLookahead\":\n                    this.visitNegativeLookahead(node)\n                    break\n                case \"Character\":\n                    this.visitCharacter(node)\n                    break\n                case \"Set\":\n                    this.visitSet(node)\n                    break\n                case \"Group\":\n                    this.visitGroup(node)\n                    break\n                case \"GroupBackReference\":\n                    this.visitGroupBackReference(node)\n                    break\n                case \"Quantifier\":\n                    this.visitQuantifier(node)\n                    break\n            }\n\n            this.visitChildren(node)\n        }\n\n        BaseRegExpVisitor.prototype.visitPattern = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitFlags = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitDisjunction = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitAlternative = function(node) {}\n\n        // Assertion\n        BaseRegExpVisitor.prototype.visitStartAnchor = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitEndAnchor = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitWordBoundary = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitNonWordBoundary = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitLookahead = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitNegativeLookahead = function(node) {}\n\n        // atoms\n        BaseRegExpVisitor.prototype.visitCharacter = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitSet = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitGroup = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitGroupBackReference = function(node) {}\n\n        BaseRegExpVisitor.prototype.visitQuantifier = function(node) {}\n\n        return {\n            RegExpParser: RegExpParser,\n            BaseRegExpVisitor: BaseRegExpVisitor,\n            VERSION: \"0.4.0\"\n        }\n    }\n)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexp-to-ast/lib/regexp-to-ast.js\n");

/***/ })

}]);