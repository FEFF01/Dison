(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/@babel/runtime/helpers/construct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ \"./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jb25zdHJ1Y3QuanM/YjE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxudmFyIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdFwiKTtcblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NvbnN0cnVjdDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/construct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeFunction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZUZ1bmN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXNOYXRpdmVGdW5jdGlvbi5qcz9jNWY3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2lzTmF0aXZlRnVuY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/isNativeFunction.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanM/NmY4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90YWdnZWRUZW1wbGF0ZUxpdGVyYWwuanM/NTY0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toArray.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toArray.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ \"./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray */ \"./node_modules/@babel/runtime/helpers/iterableToArray.js\");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ \"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ \"./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nmodule.exports = _toArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0FycmF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9BcnJheS5qcz80ODBmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQXJyYXk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/toArray.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n\nvar setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ \"./node_modules/@babel/runtime/helpers/setPrototypeOf.js\");\n\nvar isNativeFunction = __webpack_require__(/*! ./isNativeFunction */ \"./node_modules/@babel/runtime/helpers/isNativeFunction.js\");\n\nvar construct = __webpack_require__(/*! ./construct */ \"./node_modules/@babel/runtime/helpers/construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXIuanM/YTEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9nZXRQcm90b3R5cGVPZlwiKTtcblxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbnZhciBpc05hdGl2ZUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vaXNOYXRpdmVGdW5jdGlvblwiKTtcblxudmFyIGNvbnN0cnVjdCA9IHJlcXVpcmUoXCIuL2NvbnN0cnVjdFwiKTtcblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIWlzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfd3JhcE5hdGl2ZVN1cGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcz8xZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzPzkxNTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2UzZGIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/svelte/compiler.js":
/*!*****************************************!*\
  !*** ./node_modules/svelte/compiler.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _interopRequireDefault=__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");var _regenerator=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\"));var _asyncToGenerator2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));var _slicedToArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));var _get2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ \"./node_modules/@babel/runtime/helpers/get.js\"));var _assertThisInitialized2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/assertThisInitialized.js\"));var _taggedTemplateLiteral2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteral */ \"./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\"));var _inherits2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\"));var _possibleConstructorReturn2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"));var _getPrototypeOf2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"));var _wrapNativeSuper2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \"./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\"));var _toArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toArray */ \"./node_modules/@babel/runtime/helpers/toArray.js\"));var _defineProperty2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));var _toConsumableArray2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));var _classCallCheck2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));var _createClass2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));var _typeof2=_interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));function _templateObject710(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props\"]);_templateObject710=function _templateObject710(){return data;};return data;}function _templateObject709(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"]);_templateObject709=function _templateObject709(){return data;};return data;}function _templateObject708(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = @loop_guard(\",\")\"]);_templateObject708=function _templateObject708(){return data;};return data;}function _templateObject707(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"]);_templateObject707=function _templateObject707(){return data;};return data;}function _templateObject706(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject706=function _templateObject706(){return data;};return data;}function _templateObject705(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject705=function _templateObject705(){return data;};return data;}function _templateObject704(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject704=function _templateObject704(){return data;};return data;}function _templateObject703(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"]);_templateObject703=function _templateObject703(){return data;};return data;}function _templateObject702(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" !== undefined ? \",\".\",\" : \",\"\"]);_templateObject702=function _templateObject702(){return data;};return data;}function _templateObject701(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"]);_templateObject701=function _templateObject701(){return data;};return data;}function _templateObject700(){var data=(0,_taggedTemplateLiteral2.default)([\"@object_without_properties(\",\", [\",\"])\"]);_templateObject700=function _templateObject700(){return data;};return data;}function _templateObject699(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject699=function _templateObject699(){return data;};return data;}function _templateObject698(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"] !== undefined ? \",\"[\",\"] : \",\"\"]);_templateObject698=function _templateObject698(){return data;};return data;}function _templateObject697(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".slice(\",\")\"]);_templateObject697=function _templateObject697(){return data;};return data;}function _templateObject696(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t/* \",\" */\\n\\n\\t\\t\\\"use strict\\\";\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\texports.default = \",\";\\n\\t\\t\",\"\\n\\t\"]);_templateObject696=function _templateObject696(){return data;};return data;}function _templateObject695(){var data=(0,_taggedTemplateLiteral2.default)([\"exports.\",\" = \",\";\"]);_templateObject695=function _templateObject695(){return data;};return data;}function _templateObject694(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\";\"]);_templateObject694=function _templateObject694(){return data;};return data;}function _templateObject693(){var data=(0,_taggedTemplateLiteral2.default)([\"require(\\\"\",\"\\\")\"]);_templateObject693=function _templateObject693(){return data;};return data;}function _templateObject692(){var data=(0,_taggedTemplateLiteral2.default)([\"require(\\\"\",\"\\\")\"]);_templateObject692=function _templateObject692(){return data;};return data;}function _templateObject691(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t/* \",\" */\\n\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\texport default \",\";\\n\\t\\t\",\"\\n\\t\"]);_templateObject691=function _templateObject691(){return data;};return data;}function _templateObject690(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tconst #css = {\\n\\t\\t\\tcode: \\\"\",\"\\\",\\n\\t\\t\\tmap: \",\"\\n\\t\\t};\"]);_templateObject690=function _templateObject690(){return data;};return data;}function _templateObject689(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\n\\t\\tconst \",\" = @create_ssr_component(($$result, $$props, $$bindings, $$slots) => {\\n\\t\\t\\t\",\"\\n\\t\\t});\\n\\t\"]);_templateObject689=function _templateObject689(){return data;};return data;}function _templateObject688(){var data=(0,_taggedTemplateLiteral2.default)([\"$$result.css.add(#css);\"]);_templateObject688=function _templateObject688(){return data;};return data;}function _templateObject687(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"]);_templateObject687=function _templateObject687(){return data;};return data;}function _templateObject686(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = @get_store_value(\",\");\"]);_templateObject686=function _templateObject686(){return data;};return data;}function _templateObject685(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\treturn \",\";\"]);_templateObject685=function _templateObject685(){return data;};return data;}function _templateObject684(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet $$settled;\\n\\t\\t\\tlet $$rendered;\\n\\n\\t\\t\\tdo {\\n\\t\\t\\t\\t$$settled = true;\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t$$rendered = \",\";\\n\\t\\t\\t} while (!$$settled);\\n\\n\\t\\t\\treturn $$rendered;\\n\\t\\t\"]);_templateObject684=function _templateObject684(){return data;};return data;}function _templateObject683(){var data=(0,_taggedTemplateLiteral2.default)([\"$: { \",\" }\"]);_templateObject683=function _templateObject683(){return data;};return data;}function _templateObject682(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tlet \",\" = \",\"\"]);_templateObject682=function _templateObject682(){return data;};return data;}function _templateObject681(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"]);_templateObject681=function _templateObject681(){return data;};return data;}function _templateObject680(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\"]);_templateObject680=function _templateObject680(){return data;};return data;}function _templateObject679(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"\"]);_templateObject679=function _templateObject679(){return data;};return data;}function _templateObject678(){var data=(0,_taggedTemplateLiteral2.default)([\"if ($$props.\",\" === void 0 && $$bindings.\",\" && \",\" !== void 0) $$bindings.\",\"(\",\");\"]);_templateObject678=function _templateObject678(){return data;};return data;}function _templateObject677(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"'); \",\"\"]);_templateObject677=function _templateObject677(){return data;};return data;}function _templateObject676(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = @get_store_value(\",\")\"]);_templateObject676=function _templateObject676(){return data;};return data;}function _templateObject675(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"'); \",\"\"]);_templateObject675=function _templateObject675(){return data;};return data;}function _templateObject674(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = @get_store_value(\",\");\"]);_templateObject674=function _templateObject674(){return data;};return data;}function _templateObject673(){var data=(0,_taggedTemplateLiteral2.default)([\"let $$restProps = @compute_rest_props($$props, [\",\"]);\"]);_templateObject673=function _templateObject673(){return data;};return data;}function _templateObject672(){var data=(0,_taggedTemplateLiteral2.default)([\"$$result.title = \",\", \\\"\\\"\"]);_templateObject672=function _templateObject672(){return data;};return data;}function _templateObject671(){var data=(0,_taggedTemplateLiteral2.default)([\"@escape(\",\")\"]);_templateObject671=function _templateObject671(){return data;};return data;}function _templateObject670(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t$$slots.\",\"\\n\\t\\t\\t? $$slots.\",\"(\",\")\\n\\t\\t\\t: \",\"\\n\\t\"]);_templateObject670=function _templateObject670(){return data;};return data;}function _templateObject669(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_component(\",\", \\\"\",\"\\\").$$render($$result, \",\", \",\", \",\")\"]);_templateObject669=function _templateObject669(){return data;};return data;}function _templateObject668(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"]);_templateObject668=function _templateObject668(){return data;};return data;}function _templateObject667(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": (\",\") => \",\"\"]);_templateObject667=function _templateObject667(){return data;};return data;}function _templateObject666(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"]);_templateObject666=function _templateObject666(){return data;};return data;}function _templateObject665(){var data=(0,_taggedTemplateLiteral2.default)([\"(\",\") || @missing_component\"]);_templateObject665=function _templateObject665(){return data;};return data;}function _templateObject664(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"]);_templateObject664=function _templateObject664(){return data;};return data;}function _templateObject663(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject663=function _templateObject663(){return data;};return data;}function _templateObject662(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\",\",\\n\\t\\t\\t\",\"\\n\\t\\t}\"]);_templateObject662=function _templateObject662(){return data;};return data;}function _templateObject661(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"]);_templateObject661=function _templateObject661(){return data;};return data;}function _templateObject660(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"]);_templateObject660=function _templateObject660(){return data;};return data;}function _templateObject659(){var data=(0,_taggedTemplateLiteral2.default)([\"@_Object.assign(\",\")\"]);_templateObject659=function _templateObject659(){return data;};return data;}function _templateObject658(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": $$value => { \",\" = $$value; $$settled = false }\"]);_templateObject658=function _templateObject658(){return data;};return data;}function _templateObject657(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject657=function _templateObject657(){return data;};return data;}function _templateObject656(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject656=function _templateObject656(){return data;};return data;}function _templateObject655(){var data=(0,_taggedTemplateLiteral2.default)([\"''\"]);_templateObject655=function _templateObject655(){return data;};return data;}function _templateObject654(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject654=function _templateObject654(){return data;};return data;}function _templateObject653(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : \",\"\"]);_templateObject653=function _templateObject653(){return data;};return data;}function _templateObject652(){var data=(0,_taggedTemplateLiteral2.default)([\"$$result.head += \",\", \\\"\\\"\"]);_templateObject652=function _templateObject652(){return data;};return data;}function _templateObject651(){var data=(0,_taggedTemplateLiteral2.default)([\"($$value => $$value === void 0 ? \",\" : $$value)(\",\")\"]);_templateObject651=function _templateObject651(){return data;};return data;}function _templateObject650(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_attribute(\\\"\",\"\\\", \",\", 1)\"]);_templateObject650=function _templateObject650(){return data;};return data;}function _templateObject649(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" || \\\"\\\"\"]);_templateObject649=function _templateObject649(){return data;};return data;}function _templateObject648(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_classes([\",\"].join(' ').trim())\"]);_templateObject648=function _templateObject648(){return data;};return data;}function _templateObject647(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_attribute(\\\"\",\"\\\", \",\", \",\")\"]);_templateObject647=function _templateObject647(){return data;};return data;}function _templateObject646(){var data=(0,_taggedTemplateLiteral2.default)([\"[\",\", \",\"].join(' ').trim()\"]);_templateObject646=function _templateObject646(){return data;};return data;}function _templateObject645(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \\\"\",\"\\\" : \\\"\\\"\"]);_templateObject645=function _templateObject645(){return data;};return data;}function _templateObject644(){var data=(0,_taggedTemplateLiteral2.default)([\"@spread([\",\"], \",\")\"]);_templateObject644=function _templateObject644(){return data;};return data;}function _templateObject643(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"]);_templateObject643=function _templateObject643(){return data;};return data;}function _templateObject642(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" || null }\"]);_templateObject642=function _templateObject642(){return data;};return data;}function _templateObject641(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": true }\"]);_templateObject641=function _templateObject641(){return data;};return data;}function _templateObject640(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + ' ' + \",\"\"]);_templateObject640=function _templateObject640(){return data;};return data;}function _templateObject639(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"]);_templateObject639=function _templateObject639(){return data;};return data;}function _templateObject638(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \\\"\",\"\\\" : \\\"\\\"\"]);_templateObject638=function _templateObject638(){return data;};return data;}function _templateObject637(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx.\",\"\"]);_templateObject637=function _templateObject637(){return data;};return data;}function _templateObject636(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject636=function _templateObject636(){return data;};return data;}function _templateObject635(){var data=(0,_taggedTemplateLiteral2.default)([\"@escape(\",\")\"]);_templateObject635=function _templateObject635(){return data;};return data;}function _templateObject634(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject634=function _templateObject634(){return data;};return data;}function _templateObject633(){var data=(0,_taggedTemplateLiteral2.default)([\"@escape(@null_to_empty(\",\")) + \\\"\",\"\\\"\"]);_templateObject633=function _templateObject633(){return data;};return data;}function _templateObject632(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".length ? \",\" : \",\"\"]);_templateObject632=function _templateObject632(){return data;};return data;}function _templateObject631(){var data=(0,_taggedTemplateLiteral2.default)([\"@each(\",\", (\",\") => \",\")\"]);_templateObject631=function _templateObject631(){return data;};return data;}function _templateObject630(){var data=(0,_taggedTemplateLiteral2.default)([\"null\"]);_templateObject630=function _templateObject630(){return data;};return data;}function _templateObject629(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"]);_templateObject629=function _templateObject629(){return data;};return data;}function _templateObject628(){var data=(0,_taggedTemplateLiteral2.default)([\"@debug(\",\", \",\", \",\", \",\")\"]);_templateObject628=function _templateObject628(){return data;};return data;}function _templateObject627(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"\"]);_templateObject627=function _templateObject627(){return data;};return data;}function _templateObject626(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"]);_templateObject626=function _templateObject626(){return data;};return data;}function _templateObject625(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tfunction(__value) {\\n\\t\\t\\tif (@is_promise(__value)) return \",\";\\n\\t\\t\\treturn (function(\",\") { return \",\"; }(__value));\\n\\t\\t}(\",\")\\n\\t\"]);_templateObject625=function _templateObject625(){return data;};return data;}function _templateObject624(){var data=(0,_taggedTemplateLiteral2.default)([\"@dispatch_dev(\\\"SvelteRegisterComponent\\\", { component: this, tagName: \\\"\",\"\\\", options, id: create_fragment.name });\"]);_templateObject624=function _templateObject624(){return data;};return data;}function _templateObject623(){var data=(0,_taggedTemplateLiteral2.default)([\"if (!@_document.getElementById(\\\"\",\"-style\\\")) \",\"();\"]);_templateObject623=function _templateObject623(){return data;};return data;}function _templateObject622(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tclass \",\" extends \",\" {\\n\\t\\t\\t\\tconstructor(options) {\\n\\t\\t\\t\\t\\tsuper(\",\");\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t@init(this, options, \",\", \",\", \",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject622=function _templateObject622(){return data;};return data;}function _templateObject621(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@_customElements.define(\\\"\",\"\\\", \",\");\\n\\t\\t\\t\"]);_templateObject621=function _templateObject621(){return data;};return data;}function _templateObject620(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"]);_templateObject620=function _templateObject620(){return data;};return data;}function _templateObject619(){var data=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\treturn [\",\"];\\n\\t\\t\\t\\t}\"]);_templateObject619=function _templateObject619(){return data;};return data;}function _templateObject618(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (options.props) {\\n\\t\\t\\t\\t\\t\\t\\tthis.$set(options.props);\\n\\t\\t\\t\\t\\t\\t\\t@flush();\\n\\t\\t\\t\\t\\t\\t}\"]);_templateObject618=function _templateObject618(){return data;};return data;}function _templateObject617(){var data=(0,_taggedTemplateLiteral2.default)([\"this.shadowRoot.innerHTML = `<style>\",\"\",\"</style>`;\"],[\"this.shadowRoot.innerHTML = \\\\`<style>\",\"\",\"</style>\\\\`;\"]);_templateObject617=function _templateObject617(){return data;};return data;}function _templateObject616(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tclass \",\" extends @SvelteElement {\\n\\t\\t\\t\\tconstructor(options) {\\n\\t\\t\\t\\t\\tsuper();\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t@init(this, { target: this.shadowRoot }, \",\", \",\", \",\", \",\", \",\");\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\tif (options) {\\n\\t\\t\\t\\t\\t\\tif (options.target) {\\n\\t\\t\\t\\t\\t\\t\\t@insert(options.target, this, options.anchor);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject616=function _templateObject616(){return data;};return data;}function _templateObject615(){var data=(0,_taggedTemplateLiteral2.default)([\"-1\"]);_templateObject615=function _templateObject615(){return data;};return data;}function _templateObject614(){var data=(0,_taggedTemplateLiteral2.default)([\"[]\"]);_templateObject614=function _templateObject614(){return data;};return data;}function _templateObject613(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject613=function _templateObject613(){return data;};return data;}function _templateObject612(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\",\"\\n\\t}\"]);_templateObject612=function _templateObject612(){return data;};return data;}function _templateObject611(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props = @exclude_internal_props($$props);\"]);_templateObject611=function _templateObject611(){return data;};return data;}function _templateObject610(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t$$self.$$.update = () => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\t\"]);_templateObject610=function _templateObject610(){return data;};return data;}function _templateObject609(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"]);_templateObject609=function _templateObject609(){return data;};return data;}function _templateObject608(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self.$inject_state = \",\";\"]);_templateObject608=function _templateObject608(){return data;};return data;}function _templateObject607(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self.$capture_state = \",\";\"]);_templateObject607=function _templateObject607(){return data;};return data;}function _templateObject606(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self.$$set = \",\";\"]);_templateObject606=function _templateObject606(){return data;};return data;}function _templateObject605(){var data=(0,_taggedTemplateLiteral2.default)([\"[]\"]);_templateObject605=function _templateObject605(){return data;};return data;}function _templateObject604(){var data=(0,_taggedTemplateLiteral2.default)([\"const $$binding_groups = [\",\"];\"]);_templateObject604=function _templateObject604(){return data;};return data;}function _templateObject603(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_slots('\",\"', $$slots, [\",\"]);\"]);_templateObject603=function _templateObject603(){return data;};return data;}function _templateObject602(){var data=(0,_taggedTemplateLiteral2.default)([\"let { $$slots = {}, $$scope } = $$props;\"]);_templateObject602=function _templateObject602(){return data;};return data;}function _templateObject601(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\treturn \",\";\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject601=function _templateObject601(){return data;};return data;}function _templateObject600(){var data=(0,_taggedTemplateLiteral2.default)([\"'\",\"'\"]);_templateObject600=function _templateObject600(){return data;};return data;}function _templateObject599(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst writable_props = [\",\"];\\n\\t\\t\\t\\t@_Object.keys($$props).forEach(key => {\\n\\t\\t\\t\\t\\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$') @_console.warn(`<\",\"> was created with unknown prop '${key}'`);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"],[\"\\n\\t\\t\\t\\tconst writable_props = [\",\"];\\n\\t\\t\\t\\t@_Object.keys($$props).forEach(key => {\\n\\t\\t\\t\\t\\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$') @_console.warn(\\\\`<\",\"> was created with unknown prop '\\\\${key}'\\\\`);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"]);_templateObject599=function _templateObject599(){return data;};return data;}function _templateObject598(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\";\"]);_templateObject598=function _templateObject598(){return data;};return data;}function _templateObject597(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\", \",\" = @noop, \",\" = () => (\",\"(), \",\" = @subscribe(\",\", $$value => $$invalidate(\",\", \",\" = $$value)), \",\")\"]);_templateObject597=function _templateObject597(){return data;};return data;}function _templateObject596(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") { \",\" }\"]);_templateObject596=function _templateObject596(){return data;};return data;}function _templateObject595(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self.$$.on_destroy.push(() => \",\"());\"]);_templateObject595=function _templateObject595(){return data;};return data;}function _templateObject594(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"');\"]);_templateObject594=function _templateObject594(){return data;};return data;}function _templateObject593(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\t\\t\\t@component_subscribe($$self, \",\", $$value => $$invalidate(\",\", \",\" = $$value));\\n\\t\\t\"]);_templateObject593=function _templateObject593(){return data;};return data;}function _templateObject592(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\n\\t\\t\",\"\\n\\t\"]);_templateObject592=function _templateObject592(){return data;};return data;}function _templateObject591(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction create_fragment(#ctx) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject591=function _templateObject591(){return data;};return data;}function _templateObject590(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props\"]);_templateObject590=function _templateObject590(){return data;};return data;}function _templateObject589(){var data=(0,_taggedTemplateLiteral2.default)([\"$$invalidate\"]);_templateObject589=function _templateObject589(){return data;};return data;}function _templateObject588(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props\"]);_templateObject588=function _templateObject588(){return data;};return data;}function _templateObject587(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self\"]);_templateObject587=function _templateObject587(){return data;};return data;}function _templateObject586(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_store(\",\", '\",\"'); \",\"\"]);_templateObject586=function _templateObject586(){return data;};return data;}function _templateObject585(){var data=(0,_taggedTemplateLiteral2.default)([\"@component_subscribe($$self, \",\", #value => $$invalidate(\",\", \",\" = #value))\"]);_templateObject585=function _templateObject585(){return data;};return data;}function _templateObject584(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"()\"]);_templateObject584=function _templateObject584(){return data;};return data;}function _templateObject583(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif ($$props && \\\"$$inject\\\" in $$props) {\\n\\t\\t\\t\\t\\t$$self.$inject_state($$props.$$inject);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject583=function _templateObject583(){return data;};return data;}function _templateObject582(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\".\",\"\"]);_templateObject582=function _templateObject582(){return data;};return data;}function _templateObject581(){var data=(0,_taggedTemplateLiteral2.default)([\"if ('\",\"' in $$props) \",\";\"]);_templateObject581=function _templateObject581(){return data;};return data;}function _templateObject580(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), $$new_props)\"]);_templateObject580=function _templateObject580(){return data;};return data;}function _templateObject579(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject579=function _templateObject579(){return data;};return data;}function _templateObject578(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"\"]);_templateObject578=function _templateObject578(){return data;};return data;}function _templateObject577(){var data=(0,_taggedTemplateLiteral2.default)([\"() => ({ \",\" })\"]);_templateObject577=function _templateObject577(){return data;};return data;}function _templateObject576(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" === undefined && !('\",\"' in props)) {\\n\\t\\t\\t\\t\\t@_console.warn(\\\"<\",\"> was created without expected prop '\",\"'\\\");\\n\\t\\t\\t\\t}\"]);_templateObject576=function _templateObject576(){return data;};return data;}function _templateObject575(){var data=(0,_taggedTemplateLiteral2.default)([\"options.props || {}\"]);_templateObject575=function _templateObject575(){return data;};return data;}function _templateObject574(){var data=(0,_taggedTemplateLiteral2.default)([\"this.attributes\"]);_templateObject574=function _templateObject574(){return data;};return data;}function _templateObject573(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst { ctx: #ctx } = this.$$;\\n\\t\\t\\t\\tconst props = \",\";\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"]);_templateObject573=function _templateObject573(){return data;};return data;}function _templateObject572(){var data=(0,_taggedTemplateLiteral2.default)([\"function(value) {\\n\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\\\");\\n\\t\\t\\t\\t}\"]);_templateObject572=function _templateObject572(){return data;};return data;}function _templateObject571(){var data=(0,_taggedTemplateLiteral2.default)([\"function(value) {\\n\\t\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Cannot set read-only property '\",\"'\\\");\\n\\t\\t\\t\\t\\t}\"]);_templateObject571=function _templateObject571(){return data;};return data;}function _templateObject570(){var data=(0,_taggedTemplateLiteral2.default)([\"function(\",\") {\\n\\t\\t\\t\\t\\t\\tthis.$set({ \",\": \",\" });\\n\\t\\t\\t\\t\\t\\t@flush();\\n\\t\\t\\t\\t\\t}\"]);_templateObject570=function _templateObject570(){return data;};return data;}function _templateObject569(){var data=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\tthrow new @_Error(\\\"<\",\">: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\\\");\\n\\t\\t\\t\\t}\"]);_templateObject569=function _templateObject569(){return data;};return data;}function _templateObject568(){var data=(0,_taggedTemplateLiteral2.default)([\"this.$$.ctx[\",\"]\"]);_templateObject568=function _templateObject568(){return data;};return data;}function _templateObject567(){var data=(0,_taggedTemplateLiteral2.default)([\"function() {\\n\\t\\t\\t\\t\\treturn \",\"\\n\\t\\t\\t\\t}\"]);_templateObject567=function _templateObject567(){return data;};return data;}function _templateObject566(){var data=(0,_taggedTemplateLiteral2.default)([\"@safe_not_equal\"]);_templateObject566=function _templateObject566(){return data;};return data;}function _templateObject565(){var data=(0,_taggedTemplateLiteral2.default)([\"@not_equal\"]);_templateObject565=function _templateObject565(){return data;};return data;}function _templateObject564(){var data=(0,_taggedTemplateLiteral2.default)([\"$$scope = \",\".$$scope\"]);_templateObject564=function _templateObject564(){return data;};return data;}function _templateObject563(){var data=(0,_taggedTemplateLiteral2.default)([\"if ('$$scope' in \",\") \",\";\"]);_templateObject563=function _templateObject563(){return data;};return data;}function _templateObject562(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\".\",\"\"]);_templateObject562=function _templateObject562(){return data;};return data;}function _templateObject561(){var data=(0,_taggedTemplateLiteral2.default)([\"if ('\",\"' in \",\") \",\";\"]);_templateObject561=function _templateObject561(){return data;};return data;}function _templateObject560(){var data=(0,_taggedTemplateLiteral2.default)([\"$$restProps = \",\"\"]);_templateObject560=function _templateObject560(){return data;};return data;}function _templateObject559(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))\"]);_templateObject559=function _templateObject559(){return data;};return data;}function _templateObject558(){var data=(0,_taggedTemplateLiteral2.default)([\"$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))\"]);_templateObject558=function _templateObject558(){return data;};return data;}function _templateObject557(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\" => {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject557=function _templateObject557(){return data;};return data;}function _templateObject556(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tconst \",\" = [\",\"];\\n\\t\\tlet $$restProps = \",\";\\n\\t\"]);_templateObject556=function _templateObject556(){return data;};return data;}function _templateObject555(){var data=(0,_taggedTemplateLiteral2.default)([\"@compute_rest_props($$props, \",\")\"]);_templateObject555=function _templateObject555(){return data;};return data;}function _templateObject554(){var data=(0,_taggedTemplateLiteral2.default)([\"throw new @_Error(\\\"options.hydrate only works if the component was compiled with the `hydratable: true` option\\\");\"],[\"throw new @_Error(\\\"options.hydrate only works if the component was compiled with the \\\\`hydratable: true\\\\` option\\\");\"]);_templateObject554=function _templateObject554(){return data;};return data;}function _templateObject553(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\tvar style = @element(\\\"style\\\");\\n\\t\\t\\t\\tstyle.id = \\\"\",\"-style\\\";\\n\\t\\t\\t\\tstyle.textContent = \\\"\",\"\\\";\\n\\t\\t\\t\\t@append(@_document.head, style);\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject553=function _templateObject553(){return data;};return data;}function _templateObject552(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\";\"]);_templateObject552=function _templateObject552(){return data;};return data;}function _templateObject551(){var data=(0,_taggedTemplateLiteral2.default)([\"undefined\"]);_templateObject551=function _templateObject551(){return data;};return data;}function _templateObject550(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\"\"]);_templateObject550=function _templateObject550(){return data;};return data;}function _templateObject549(){var data=(0,_taggedTemplateLiteral2.default)([\"this.c = @noop;\"]);_templateObject549=function _templateObject549(){return data;};return data;}function _templateObject548(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"]);_templateObject548=function _templateObject548(){return data;};return data;}function _templateObject547(){var data=(0,_taggedTemplateLiteral2.default)([\"/*\",\"*/ #ctx[\",\"]\"]);_templateObject547=function _templateObject547(){return data;};return data;}function _templateObject546(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" & /*\",\"*/ \",\"\"]);_templateObject546=function _templateObject546(){return data;};return data;}function _templateObject545(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"]);_templateObject545=function _templateObject545(){return data;};return data;}function _templateObject544(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"] & /*\",\"*/ \",\"\"]);_templateObject544=function _templateObject544(){return data;};return data;}function _templateObject543(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" & /*\",\"*/ 0\"]);_templateObject543=function _templateObject543(){return data;};return data;}function _templateObject542(){var data=(0,_taggedTemplateLiteral2.default)([\"#dirty\"]);_templateObject542=function _templateObject542(){return data;};return data;}function _templateObject541(){var data=(0,_taggedTemplateLiteral2.default)([\"$$self.$$.dirty\"]);_templateObject541=function _templateObject541(){return data;};return data;}function _templateObject540(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\", \",\"\"]);_templateObject540=function _templateObject540(){return data;};return data;}function _templateObject539(){var data=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\")\"]);_templateObject539=function _templateObject539(){return data;};return data;}function _templateObject538(){var data=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\")\"]);_templateObject538=function _templateObject538(){return data;};return data;}function _templateObject537(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\")\"]);_templateObject537=function _templateObject537(){return data;};return data;}function _templateObject536(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"($$invalidate(\",\", \",\"))\"]);_templateObject536=function _templateObject536(){return data;};return data;}function _templateObject535(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject535=function _templateObject535(){return data;};return data;}function _templateObject534(){var data=(0,_taggedTemplateLiteral2.default)([\"@listen(@_window, \\\"offline\\\", \",\")\"]);_templateObject534=function _templateObject534(){return data;};return data;}function _templateObject533(){var data=(0,_taggedTemplateLiteral2.default)([\"@listen(@_window, \\\"online\\\", \",\")\"]);_templateObject533=function _templateObject533(){return data;};return data;}function _templateObject532(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(\",\");\\n\\t\\t\\t\"]);_templateObject532=function _templateObject532(){return data;};return data;}function _templateObject531(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = @_navigator.onLine\"]);_templateObject531=function _templateObject531(){return data;};return data;}function _templateObject530(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject530=function _templateObject530(){return data;};return data;}function _templateObject529(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" && !\",\") {\\n\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t@_clearTimeout(\",\");\\n\\t\\t\\t\\t\\t@_scrollTo(\",\", \",\");\\n\\t\\t\\t\\t\\t\",\" = @_setTimeout(\",\", 100);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject529=function _templateObject529(){return data;};return data;}function _templateObject528(){var data=(0,_taggedTemplateLiteral2.default)([\"@_window.pageYOffset\"]);_templateObject528=function _templateObject528(){return data;};return data;}function _templateObject527(){var data=(0,_taggedTemplateLiteral2.default)([\"@_window.pageXOffset\"]);_templateObject527=function _templateObject527(){return data;};return data;}function _templateObject526(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(\",\");\\n\\t\\t\\t\"]);_templateObject526=function _templateObject526(){return data;};return data;}function _templateObject525(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = @_window.\",\"\"]);_templateObject525=function _templateObject525(){return data;};return data;}function _templateObject524(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject524=function _templateObject524(){return data;};return data;}function _templateObject523(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@listen(@_window, \\\"\",\"\\\", \",\")\\n\\t\\t\\t\\t\"]);_templateObject523=function _templateObject523(){return data;};return data;}function _templateObject522(){var data=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\" = @_window.\",\";\"]);_templateObject522=function _templateObject522(){return data;};return data;}function _templateObject521(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@listen(@_window, \\\"\",\"\\\", () => {\\n\\t\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t\\t@_clearTimeout(\",\");\\n\\t\\t\\t\\t\\t\\t\",\" = @_setTimeout(\",\", 100);\\n\\t\\t\\t\\t\\t\\t\",\"();\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\"]);_templateObject521=function _templateObject521(){return data;};return data;}function _templateObject520(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t@_scrollTo(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"]);_templateObject520=function _templateObject520(){return data;};return data;}function _templateObject519(){var data=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\"\"]);_templateObject519=function _templateObject519(){return data;};return data;}function _templateObject518(){var data=(0,_taggedTemplateLiteral2.default)([\"this._state.\",\"\"]);_templateObject518=function _templateObject518(){return data;};return data;}function _templateObject517(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\" in this._state\"]);_templateObject517=function _templateObject517(){return data;};return data;}function _templateObject516(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\",\"\\\" in this._state || \\\"\",\"\\\" in this._state\"]);_templateObject516=function _templateObject516(){return data;};return data;}function _templateObject515(){var data=(0,_taggedTemplateLiteral2.default)([\"() => { \",\" = false }\"]);_templateObject515=function _templateObject515(){return data;};return data;}function _templateObject514(){var data=(0,_taggedTemplateLiteral2.default)([\"false\"]);_templateObject514=function _templateObject514(){return data;};return data;}function _templateObject513(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"]);_templateObject513=function _templateObject513(){return data;};return data;}function _templateObject512(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject512=function _templateObject512(){return data;};return data;}function _templateObject511(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\"]);_templateObject511=function _templateObject511(){return data;};return data;}function _templateObject510(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\" !== (\",\" = \",\"))\"]);_templateObject510=function _templateObject510(){return data;};return data;}function _templateObject509(){var data=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"]);_templateObject509=function _templateObject509(){return data;};return data;}function _templateObject508(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"]);_templateObject508=function _templateObject508(){return data;};return data;}function _templateObject507(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.title = \",\";\"]);_templateObject507=function _templateObject507(){return data;};return data;}function _templateObject506(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"]);_templateObject506=function _templateObject506(){return data;};return data;}function _templateObject505(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"]);_templateObject505=function _templateObject505(){return data;};return data;}function _templateObject504(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject504=function _templateObject504(){return data;};return data;}function _templateObject503(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".d(detaching);\"]);_templateObject503=function _templateObject503(){return data;};return data;}function _templateObject502(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject502=function _templateObject502(){return data;};return data;}function _templateObject501(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject501=function _templateObject501(){return data;};return data;}function _templateObject500(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\" && \",\".p && \",\") {\\n\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject500=function _templateObject500(){return data;};return data;}function _templateObject499(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\".p && \",\") {\\n\\t\\t\\t\\t@update_slot(\",\", \",\", #ctx, \",\", #dirty, \",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject499=function _templateObject499(){return data;};return data;}function _templateObject498(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\", #local);\"]);_templateObject498=function _templateObject498(){return data;};return data;}function _templateObject497(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", #local);\"]);_templateObject497=function _templateObject497(){return data;};return data;}function _templateObject496(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject496=function _templateObject496(){return data;};return data;}function _templateObject495(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".l(\",\");\"]);_templateObject495=function _templateObject495(){return data;};return data;}function _templateObject494(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".c();\"]);_templateObject494=function _templateObject494(){return data;};return data;}function _templateObject493(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\" || \",\"(#ctx);\"]);_templateObject493=function _templateObject493(){return data;};return data;}function _templateObject492(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = \",\".\",\";\\n\\t\\t\\tconst \",\" = @create_slot(\",\", #ctx, \",\", \",\");\\n\\t\\t\\t\",\"\\n\\t\\t\"]);_templateObject492=function _templateObject492(){return data;};return data;}function _templateObject491(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject491=function _templateObject491(){return data;};return data;}function _templateObject490(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst \",\" = #dirty => \",\";\\n\\t\\t\\t\\tconst \",\" = #ctx => \",\";\\n\\t\\t\\t\"]);_templateObject490=function _templateObject490(){return data;};return data;}function _templateObject489(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject489=function _templateObject489(){return data;};return data;}function _templateObject488(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject488=function _templateObject488(){return data;};return data;}function _templateObject487(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"]);_templateObject487=function _templateObject487(){return data;};return data;}function _templateObject486(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject486=function _templateObject486(){return data;};return data;}function _templateObject485(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject485=function _templateObject485(){return data;};return data;}function _templateObject484(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject484=function _templateObject484(){return data;};return data;}function _templateObject483(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject483=function _templateObject483(){return data;};return data;}function _templateObject482(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\".$$.fragment, #local);\"]);_templateObject482=function _templateObject482(){return data;};return data;}function _templateObject481(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@destroy_component(\",\", \",\");\\n\\t\\t\\t\"]);_templateObject481=function _templateObject481(){return data;};return data;}function _templateObject480(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".$set(\",\");\\n\\t\\t\\t\\t\"]);_templateObject480=function _templateObject480(){return data;};return data;}function _templateObject479(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@transition_in(\",\".$$.fragment, #local);\\n\\t\\t\\t\"]);_templateObject479=function _templateObject479(){return data;};return data;}function _templateObject478(){var data=(0,_taggedTemplateLiteral2.default)([\"@mount_component(\",\", \",\", \",\");\"]);_templateObject478=function _templateObject478(){return data;};return data;}function _templateObject477(){var data=(0,_taggedTemplateLiteral2.default)([\"@claim_component(\",\".$$.fragment, \",\");\"]);_templateObject477=function _templateObject477(){return data;};return data;}function _templateObject476(){var data=(0,_taggedTemplateLiteral2.default)([\"@create_component(\",\".$$.fragment);\"]);_templateObject476=function _templateObject476(){return data;};return data;}function _templateObject475(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"]);_templateObject475=function _templateObject475(){return data;};return data;}function _templateObject474(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\"]);_templateObject474=function _templateObject474(){return data;};return data;}function _templateObject473(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = new \",\"(\",\");\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"]);_templateObject473=function _templateObject473(){return data;};return data;}function _templateObject472(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @destroy_component(\",\", \",\");\"]);_templateObject472=function _templateObject472(){return data;};return data;}function _templateObject471(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @transition_out(\",\".$$.fragment, #local);\"]);_templateObject471=function _templateObject471(){return data;};return data;}function _templateObject470(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") @transition_in(\",\".$$.fragment, #local);\\n\\t\\t\\t\"]);_templateObject470=function _templateObject470(){return data;};return data;}function _templateObject469(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".$set(\",\");\"]);_templateObject469=function _templateObject469(){return data;};return data;}function _templateObject468(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" !== (\",\" = \",\")) {\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t\\tconst old_component = \",\";\\n\\t\\t\\t\\t\\t\\t@transition_out(old_component.$$.fragment, 1, 0, () => {\\n\\t\\t\\t\\t\\t\\t\\t@destroy_component(old_component, 1);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = new \",\"(\",\"(#ctx));\\n\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\\t@create_component(\",\".$$.fragment);\\n\\t\\t\\t\\t\\t\\t@transition_in(\",\".$$.fragment, 1);\\n\\t\\t\\t\\t\\t\\t@mount_component(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject468=function _templateObject468(){return data;};return data;}function _templateObject467(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"]);_templateObject467=function _templateObject467(){return data;};return data;}function _templateObject466(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t@mount_component(\",\", \",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject466=function _templateObject466(){return data;};return data;}function _templateObject465(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @claim_component(\",\".$$.fragment, \",\");\"]);_templateObject465=function _templateObject465(){return data;};return data;}function _templateObject464(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @create_component(\",\".$$.fragment);\"]);_templateObject464=function _templateObject464(){return data;};return data;}function _templateObject463(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"]);_templateObject463=function _templateObject463(){return data;};return data;}function _templateObject462(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\"]);_templateObject462=function _templateObject462(){return data;};return data;}function _templateObject461(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tvar \",\" = \",\";\\n\\n\\t\\t\\t\\tfunction \",\"(#ctx) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\treturn \",\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\" = new \",\"(\",\"(#ctx));\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject461=function _templateObject461(){return data;};return data;}function _templateObject460(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".$on(\\\"\",\"\\\", \",\");\"]);_templateObject460=function _templateObject460(){return data;};return data;}function _templateObject459(){var data=(0,_taggedTemplateLiteral2.default)([\"@once(\",\")\"]);_templateObject459=function _templateObject459(){return data;};return data;}function _templateObject458(){var data=(0,_taggedTemplateLiteral2.default)([\"@binding_callbacks.push(() => @bind(\",\", '\",\"', \",\"));\"]);_templateObject458=function _templateObject458(){return data;};return data;}function _templateObject457(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\\t\",\" = #value;\\n\\t\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject457=function _templateObject457(){return data;};return data;}function _templateObject456(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#value) {\\n\\t\\t\\t\\t\\t\\t\",\".call(null, #value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject456=function _templateObject456(){return data;};return data;}function _templateObject455(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#value) {\\n\\t\\t\\t\\t\\t\\t\",\".call(null, #value, \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject455=function _templateObject455(){return data;};return data;}function _templateObject454(){var data=(0,_taggedTemplateLiteral2.default)([\"#value\"]);_templateObject454=function _templateObject454(){return data;};return data;}function _templateObject453(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\" && \",\") {\\n\\t\\t\\t\\t\\t\",\" = true;\\n\\t\\t\\t\\t\\t\",\".\",\" = \",\";\\n\\t\\t\\t\\t\\t@add_flush_callback(() => \",\" = false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject453=function _templateObject453(){return data;};return data;}function _templateObject452(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" !== void 0) {\\n\\t\\t\\t\\t\\t\",\".\",\" = \",\";\\n\\t\\t\\t\\t}\"]);_templateObject452=function _templateObject452(){return data;};return data;}function _templateObject451(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".$$scope = { dirty: #dirty, ctx: #ctx };\\n\\t\\t\\t\\t}\"]);_templateObject451=function _templateObject451(){return data;};return data;}function _templateObject450(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\tif (\",\") \",\".\",\" = \",\";\\n\\t\\t\\t\\t\\t\\t\"]);_templateObject450=function _templateObject450(){return data;};return data;}function _templateObject449(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tconst \",\" = {};\\n\\t\\t\\t\\t\\t\"]);_templateObject449=function _templateObject449(){return data;};return data;}function _templateObject448(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tconst \",\" = \",\" ? @get_spread_update(\",\", [\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t]) : {}\\n\\t\\t\\t\\t\\t\"]);_templateObject448=function _templateObject448(){return data;};return data;}function _templateObject447(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfor (let #i = 0; #i < \",\".length; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\" = @assign(\",\", \",\"[#i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject447=function _templateObject447(){return data;};return data;}function _templateObject446(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = [\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t];\\n\\t\\t\\t\\t\"]);_templateObject446=function _templateObject446(){return data;};return data;}function _templateObject445(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject445=function _templateObject445(){return data;};return data;}function _templateObject444(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject444=function _templateObject444(){return data;};return data;}function _templateObject443(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"]);_templateObject443=function _templateObject443(){return data;};return data;}function _templateObject442(){var data=(0,_taggedTemplateLiteral2.default)([\"@get_spread_object(\",\")\"]);_templateObject442=function _templateObject442(){return data;};return data;}function _templateObject441(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = {};\"]);_templateObject441=function _templateObject441(){return data;};return data;}function _templateObject440(){var data=(0,_taggedTemplateLiteral2.default)([\"$$inline: true\"]);_templateObject440=function _templateObject440(){return data;};return data;}function _templateObject439(){var data=(0,_taggedTemplateLiteral2.default)([\"props: \",\"\"]);_templateObject439=function _templateObject439(){return data;};return data;}function _templateObject438(){var data=(0,_taggedTemplateLiteral2.default)([\"props: \",\"\"]);_templateObject438=function _templateObject438(){return data;};return data;}function _templateObject437(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject437=function _templateObject437(){return data;};return data;}function _templateObject436(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\\t\",\",\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject436=function _templateObject436(){return data;};return data;}function _templateObject435(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"]);_templateObject435=function _templateObject435(){return data;};return data;}function _templateObject434(){var data=(0,_taggedTemplateLiteral2.default)([\"$$scope: {\\n\\t\\t\\t\\t\\tctx: #ctx\\n\\t\\t\\t\\t}\"]);_templateObject434=function _templateObject434(){return data;};return data;}function _templateObject433(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": [\",\", \",\", \",\"]\"]);_templateObject433=function _templateObject433(){return data;};return data;}function _templateObject432(){var data=(0,_taggedTemplateLiteral2.default)([\"$$slots: {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject432=function _templateObject432(){return data;};return data;}function _templateObject431(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject431=function _templateObject431(){return data;};return data;}function _templateObject430(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject430=function _templateObject430(){return data;};return data;}function _templateObject429(){var data=(0,_taggedTemplateLiteral2.default)([\"-1\"]);_templateObject429=function _templateObject429(){return data;};return data;}function _templateObject428(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\"]);_templateObject428=function _templateObject428(){return data;};return data;}function _templateObject427(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".d(\",\");\\n\\t\\t\\t\"]);_templateObject427=function _templateObject427(){return data;};return data;}function _templateObject426(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".p(#ctx, #dirty);\\n\\t\\t\\t\"]);_templateObject426=function _templateObject426(){return data;};return data;}function _templateObject425(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\".d(1);\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject425=function _templateObject425(){return data;};return data;}function _templateObject424(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t\\t@transition_out(\",\", 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject424=function _templateObject424(){return data;};return data;}function _templateObject423(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\" = \",\"\"]);_templateObject423=function _templateObject423(){return data;};return data;}function _templateObject422(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"]);_templateObject422=function _templateObject422(){return data;};return data;}function _templateObject421(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\", 1);\\n\\t\\t\\t\\t\\t\\t}\"]);_templateObject421=function _templateObject421(){return data;};return data;}function _templateObject420(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"]);_templateObject420=function _templateObject420(){return data;};return data;}function _templateObject419(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject419=function _templateObject419(){return data;};return data;}function _templateObject418(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".m(\",\", \",\");\"]);_templateObject418=function _templateObject418(){return data;};return data;}function _templateObject417(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\" && \",\"(#ctx);\\n\\t\\t\"]);_templateObject417=function _templateObject417(){return data;};return data;}function _templateObject416(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].d(\",\");\"]);_templateObject416=function _templateObject416(){return data;};return data;}function _templateObject415(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"]);_templateObject415=function _templateObject415(){return data;};return data;}function _templateObject414(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".p(#ctx, #dirty);\"]);_templateObject414=function _templateObject414(){return data;};return data;}function _templateObject413(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx, #dirty);\\n\\t\\t\\t\\t\\tif (\",\" !== \",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject413=function _templateObject413(){return data;};return data;}function _templateObject412(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].p(#ctx, #dirty);\"]);_templateObject412=function _templateObject412(){return data;};return data;}function _templateObject411(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx, #dirty);\\n\\t\\t\\t\\t\\tif (\",\" === \",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject411=function _templateObject411(){return data;};return data;}function _templateObject410(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject410=function _templateObject410(){return data;};return data;}function _templateObject409(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"]);_templateObject409=function _templateObject409(){return data;};return data;}function _templateObject408(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"]);_templateObject408=function _templateObject408(){return data;};return data;}function _templateObject407(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\"[\",\"];\\n\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\"]);_templateObject407=function _templateObject407(){return data;};return data;}function _templateObject406(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t@transition_out(\",\"[\",\"], 1, 1, () => {\\n\\t\\t\\t\\t\\t\",\"[\",\"] = null;\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\"]);_templateObject406=function _templateObject406(){return data;};return data;}function _templateObject405(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"].m(\",\", \",\");\"]);_templateObject405=function _templateObject405(){return data;};return data;}function _templateObject404(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (~(\",\" = \",\"(#ctx, \",\"))) {\\n\\t\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject404=function _templateObject404(){return data;};return data;}function _templateObject403(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\"(#ctx, \",\");\\n\\t\\t\\t\\t\",\" = \",\"[\",\"] = \",\"[\",\"](#ctx);\\n\\t\\t\\t\"]);_templateObject403=function _templateObject403(){return data;};return data;}function _templateObject402(){var data=(0,_taggedTemplateLiteral2.default)([\"return -1;\"]);_templateObject402=function _templateObject402(){return data;};return data;}function _templateObject401(){var data=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"]);_templateObject401=function _templateObject401(){return data;};return data;}function _templateObject400(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") return \",\";\"]);_templateObject400=function _templateObject400(){return data;};return data;}function _templateObject399(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject399=function _templateObject399(){return data;};return data;}function _templateObject398(){var data=(0,_taggedTemplateLiteral2.default)([\"return -1;\"]);_templateObject398=function _templateObject398(){return data;};return data;}function _templateObject397(){var data=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"]);_templateObject397=function _templateObject397(){return data;};return data;}function _templateObject396(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\" == null) \",\" = !!\",\"\"]);_templateObject396=function _templateObject396(){return data;};return data;}function _templateObject395(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\" = !!\",\"\"]);_templateObject395=function _templateObject395(){return data;};return data;}function _templateObject394(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\tif (\",\") return \",\";\"]);_templateObject394=function _templateObject394(){return data;};return data;}function _templateObject393(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject393=function _templateObject393(){return data;};return data;}function _templateObject392(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = [\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t];\\n\\n\\t\\t\\tconst \",\" = [];\\n\\n\\t\\t\\t\",\"\\n\\t\\t\"]);_templateObject392=function _templateObject392(){return data;};return data;}function _templateObject391(){var data=(0,_taggedTemplateLiteral2.default)([\"if (~\",\") { \",\" }\"]);_templateObject391=function _templateObject391(){return data;};return data;}function _templateObject390(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\"]);_templateObject390=function _templateObject390(){return data;};return data;}function _templateObject389(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".d(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject389=function _templateObject389(){return data;};return data;}function _templateObject388(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".p(#ctx, #dirty);\"]);_templateObject388=function _templateObject388(){return data;};return data;}function _templateObject387(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".p(#ctx, #dirty);\"]);_templateObject387=function _templateObject387(){return data;};return data;}function _templateObject386(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" !== (\",\" = \",\"(#ctx, #dirty))) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject386=function _templateObject386(){return data;};return data;}function _templateObject385(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\" === (\",\" = \",\"(#ctx, #dirty)) && \",\") {\\n\\t\\t\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject385=function _templateObject385(){return data;};return data;}function _templateObject384(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"]);_templateObject384=function _templateObject384(){return data;};return data;}function _templateObject383(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".d(1)\"]);_templateObject383=function _templateObject383(){return data;};return data;}function _templateObject382(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".d(1)\"]);_templateObject382=function _templateObject382(){return data;};return data;}function _templateObject381(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject381=function _templateObject381(){return data;};return data;}function _templateObject380(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".m(\",\", \",\");\"]);_templateObject380=function _templateObject380(){return data;};return data;}function _templateObject379(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".m(\",\", \",\");\"]);_templateObject379=function _templateObject379(){return data;};return data;}function _templateObject378(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\"(#ctx, \",\");\\n\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\"]);_templateObject378=function _templateObject378(){return data;};return data;}function _templateObject377(){var data=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"]);_templateObject377=function _templateObject377(){return data;};return data;}function _templateObject376(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") return \",\";\"]);_templateObject376=function _templateObject376(){return data;};return data;}function _templateObject375(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject375=function _templateObject375(){return data;};return data;}function _templateObject374(){var data=(0,_taggedTemplateLiteral2.default)([\"return \",\";\"]);_templateObject374=function _templateObject374(){return data;};return data;}function _templateObject373(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\" == null) \",\" = !!\",\"\"]);_templateObject373=function _templateObject373(){return data;};return data;}function _templateObject372(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\" == null || \",\") \",\" = !!\",\"\"]);_templateObject372=function _templateObject372(){return data;};return data;}function _templateObject371(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\tif (\",\") return \",\";\"]);_templateObject371=function _templateObject371(){return data;};return data;}function _templateObject370(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(#ctx, #dirty) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject370=function _templateObject370(){return data;};return data;}function _templateObject369(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"(#ctx)\"]);_templateObject369=function _templateObject369(){return data;};return data;}function _templateObject368(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"]);_templateObject368=function _templateObject368(){return data;};return data;}function _templateObject367(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject367=function _templateObject367(){return data;};return data;}function _templateObject366(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject366=function _templateObject366(){return data;};return data;}function _templateObject365(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject365=function _templateObject365(){return data;};return data;}function _templateObject364(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\");\"]);_templateObject364=function _templateObject364(){return data;};return data;}function _templateObject363(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".l(\",\");\"]);_templateObject363=function _templateObject363(){return data;};return data;}function _templateObject362(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".l(\",\");\"]);_templateObject362=function _templateObject362(){return data;};return data;}function _templateObject361(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".c();\"]);_templateObject361=function _templateObject361(){return data;};return data;}function _templateObject360(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".c();\"]);_templateObject360=function _templateObject360(){return data;};return data;}function _templateObject359(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\");\"]);_templateObject359=function _templateObject359(){return data;};return data;}function _templateObject358(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_out(\",\");\"]);_templateObject358=function _templateObject358(){return data;};return data;}function _templateObject357(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".forEach(@detach);\"]);_templateObject357=function _templateObject357(){return data;};return data;}function _templateObject356(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.head\"]);_templateObject356=function _templateObject356(){return data;};return data;}function _templateObject355(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = @query_selector_all('[data-svelte=\\\"\",\"\\\"]', @_document.head);\"]);_templateObject355=function _templateObject355(){return data;};return data;}function _templateObject354(){var data=(0,_taggedTemplateLiteral2.default)([\"@toggle_class(\",\", \\\"\",\"\\\", true);\"]);_templateObject354=function _templateObject354(){return data;};return data;}function _templateObject353(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\"]);_templateObject353=function _templateObject353(){return data;};return data;}function _templateObject352(){var data=(0,_taggedTemplateLiteral2.default)([\"@toggle_class(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject352=function _templateObject352(){return data;};return data;}function _templateObject351(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"();\\n\\t\\t\\t\",\" = @create_animation(\",\", \",\", \",\", \",\");\\n\\t\\t\"]);_templateObject351=function _templateObject351(){return data;};return data;}function _templateObject350(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject350=function _templateObject350(){return data;};return data;}function _templateObject349(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_transform(\",\", \",\");\"]);_templateObject349=function _templateObject349(){return data;};return data;}function _templateObject348(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t@fix_position(\",\");\\n\\t\\t\\t\",\"();\\n\\t\\t\\t\",\"\\n\\t\\t\"]);_templateObject348=function _templateObject348(){return data;};return data;}function _templateObject347(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\" = \",\".getBoundingClientRect();\\n\\t\\t\"]);_templateObject347=function _templateObject347(){return data;};return data;}function _templateObject346(){var data=(0,_taggedTemplateLiteral2.default)([\"@noop\"]);_templateObject346=function _templateObject346(){return data;};return data;}function _templateObject345(){var data=(0,_taggedTemplateLiteral2.default)([\"if (detaching && \",\") \",\".end();\"]);_templateObject345=function _templateObject345(){return data;};return data;}function _templateObject344(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject344=function _templateObject344(){return data;};return data;}function _templateObject343(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\" = @create_out_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\"]);_templateObject343=function _templateObject343(){return data;};return data;}function _templateObject342(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") \",\".end(1);\\n\\t\\t\\t\\t\\t\"]);_templateObject342=function _templateObject342(){return data;};return data;}function _templateObject341(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject341=function _templateObject341(){return data;};return data;}function _templateObject340(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject340=function _templateObject340(){return data;};return data;}function _templateObject339(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\",\" = @create_in_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\",\".start();\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject339=function _templateObject339(){return data;};return data;}function _templateObject338(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".invalidate();\"]);_templateObject338=function _templateObject338(){return data;};return data;}function _templateObject337(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\t\\t\\tif (\",\") \",\".end(1);\\n\\t\\t\\t\\t\\t\\t\\tif (!\",\") \",\" = @create_in_transition(\",\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t\\t\",\".start();\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\"]);_templateObject337=function _templateObject337(){return data;};return data;}function _templateObject336(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject336=function _templateObject336(){return data;};return data;}function _templateObject335(){var data=(0,_taggedTemplateLiteral2.default)([\"if (detaching && \",\") \",\".end();\"]);_templateObject335=function _templateObject335(){return data;};return data;}function _templateObject334(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject334=function _templateObject334(){return data;};return data;}function _templateObject333(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (#local) {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject333=function _templateObject333(){return data;};return data;}function _templateObject332(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\") \",\" = @create_bidirectional_transition(\",\", \",\", \",\", false);\\n\\t\\t\\t\\t\",\".run(0);\\n\\t\\t\\t\"]);_templateObject332=function _templateObject332(){return data;};return data;}function _templateObject331(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t@add_render_callback(() => {\\n\\t\\t\\t\\t\\tif (!\",\") \",\" = @create_bidirectional_transition(\",\", \",\", \",\", true);\\n\\t\\t\\t\\t\\t\",\".run(1);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\"]);_templateObject331=function _templateObject331(){return data;};return data;}function _templateObject330(){var data=(0,_taggedTemplateLiteral2.default)([\"{}\"]);_templateObject330=function _templateObject330(){return data;};return data;}function _templateObject329(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\" && \",\".multiple) @select_options(\",\", \",\".value);\\n\\t\\t\\t\"]);_templateObject329=function _templateObject329(){return data;};return data;}function _templateObject328(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\".multiple) @select_options(\",\", \",\".value);\\n\\t\\t\\t\"]);_templateObject328=function _templateObject328(){return data;};return data;}function _templateObject327(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"(\",\", \",\" = @get_spread_update(\",\", [\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t]));\\n\\t\\t\"]);_templateObject327=function _templateObject327(){return data;};return data;}function _templateObject326(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \",\");\"]);_templateObject326=function _templateObject326(){return data;};return data;}function _templateObject325(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_attributes\"]);_templateObject325=function _templateObject325(){return data;};return data;}function _templateObject324(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_svg_attributes\"]);_templateObject324=function _templateObject324(){return data;};return data;}function _templateObject323(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = [\",\"];\\n\\n\\t\\t\\tlet \",\" = {};\\n\\t\\t\\tfor (let #i = 0; #i < \",\".length; #i += 1) {\\n\\t\\t\\t\\t\",\" = @assign(\",\", \",\"[#i]);\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject323=function _templateObject323(){return data;};return data;}function _templateObject322(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject322=function _templateObject322(){return data;};return data;}function _templateObject321(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"]);_templateObject321=function _templateObject321(){return data;};return data;}function _templateObject320(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\": \",\" }\"]);_templateObject320=function _templateObject320(){return data;};return data;}function _templateObject319(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject319=function _templateObject319(){return data;};return data;}function _templateObject318(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = false;\"]);_templateObject318=function _templateObject318(){return data;};return data;}function _templateObject317(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_render_callback(() => \",\".call(\",\"));\"]);_templateObject317=function _templateObject317(){return data;};return data;}function _templateObject316(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") @add_render_callback(\",\");\"]);_templateObject316=function _templateObject316(){return data;};return data;}function _templateObject315(){var data=(0,_taggedTemplateLiteral2.default)([\"() => \",\".call(\",\")\"]);_templateObject315=function _templateObject315(){return data;};return data;}function _templateObject314(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" || \",\"\"]);_templateObject314=function _templateObject314(){return data;};return data;}function _templateObject313(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" === void 0\"]);_templateObject313=function _templateObject313(){return data;};return data;}function _templateObject312(){var data=(0,_taggedTemplateLiteral2.default)([\"@listen(\",\", \\\"\",\"\\\", \",\")\"]);_templateObject312=function _templateObject312(){return data;};return data;}function _templateObject311(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"]);_templateObject311=function _templateObject311(){return data;};return data;}function _templateObject310(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = @add_resize_listener(\",\", \",\".bind(\",\"));\"]);_templateObject310=function _templateObject310(){return data;};return data;}function _templateObject309(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\";\"]);_templateObject309=function _templateObject309(){return data;};return data;}function _templateObject308(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(\",\") {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject308=function _templateObject308(){return data;};return data;}function _templateObject307(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = true;\"]);_templateObject307=function _templateObject307(){return data;};return data;}function _templateObject306(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".call(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject306=function _templateObject306(){return data;};return data;}function _templateObject305(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = true;\"]);_templateObject305=function _templateObject305(){return data;};return data;}function _templateObject304(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\\t@_cancelAnimationFrame(\",\");\\n\\t\\t\\t\\t\\t\\tif (!\",\".paused) {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = @raf(\",\");\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\",\".call(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject304=function _templateObject304(){return data;};return data;}function _templateObject303(){var data=(0,_taggedTemplateLiteral2.default)([\"false\"]);_templateObject303=function _templateObject303(){return data;};return data;}function _templateObject302(){var data=(0,_taggedTemplateLiteral2.default)([\"@claim_element(\",\", \\\"\",\"\\\", { \",\" }, \",\")\"]);_templateObject302=function _templateObject302(){return data;};return data;}function _templateObject301(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": true\"]);_templateObject301=function _templateObject301(){return data;};return data;}function _templateObject300(){var data=(0,_taggedTemplateLiteral2.default)([\"@element(\\\"\",\"\\\")\"]);_templateObject300=function _templateObject300(){return data;};return data;}function _templateObject299(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject299=function _templateObject299(){return data;};return data;}function _templateObject298(){var data=(0,_taggedTemplateLiteral2.default)([\"@element_is(\\\"\",\"\\\", \",\")\"]);_templateObject298=function _templateObject298(){return data;};return data;}function _templateObject297(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.createElementNS(\\\"\",\"\\\", \\\"\",\"\\\")\"]);_templateObject297=function _templateObject297(){return data;};return data;}function _templateObject296(){var data=(0,_taggedTemplateLiteral2.default)([\"@svg_element(\\\"\",\"\\\")\"]);_templateObject296=function _templateObject296(){return data;};return data;}function _templateObject295(){var data=(0,_taggedTemplateLiteral2.default)([\"@add_location(\",\", \",\", \",\", \",\", \",\");\"]);_templateObject295=function _templateObject295(){return data;};return data;}function _templateObject294(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".forEach(@detach);\"]);_templateObject294=function _templateObject294(){return data;};return data;}function _templateObject293(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".content\"]);_templateObject293=function _templateObject293(){return data;};return data;}function _templateObject292(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"]);_templateObject292=function _templateObject292(){return data;};return data;}function _templateObject291(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".textContent = \",\";\"]);_templateObject291=function _templateObject291(){return data;};return data;}function _templateObject290(){var data=(0,_taggedTemplateLiteral2.default)([\"if (detaching) @detach(\",\");\"]);_templateObject290=function _templateObject290(){return data;};return data;}function _templateObject289(){var data=(0,_taggedTemplateLiteral2.default)([\"@insert(#target, \",\", #anchor);\"]);_templateObject289=function _templateObject289(){return data;};return data;}function _templateObject288(){var data=(0,_taggedTemplateLiteral2.default)([\"@detach(\",\");\"]);_templateObject288=function _templateObject288(){return data;};return data;}function _templateObject287(){var data=(0,_taggedTemplateLiteral2.default)([\"@append(\",\", \",\");\"]);_templateObject287=function _templateObject287(){return data;};return data;}function _templateObject286(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"]);_templateObject286=function _templateObject286(){return data;};return data;}function _templateObject285(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tvar \",\" = \",\";\\n\\t\\t\\t\\t\\t\"]);_templateObject285=function _templateObject285(){return data;};return data;}function _templateObject284(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\"]);_templateObject284=function _templateObject284(){return data;};return data;}function _templateObject283(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"]);_templateObject283=function _templateObject283(){return data;};return data;}function _templateObject282(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".content\"]);_templateObject282=function _templateObject282(){return data;};return data;}function _templateObject281(){var data=(0,_taggedTemplateLiteral2.default)([\"@children(\",\")\"]);_templateObject281=function _templateObject281(){return data;};return data;}function _templateObject280(){var data=(0,_taggedTemplateLiteral2.default)([\"if (detaching) \",\".d();\"]);_templateObject280=function _templateObject280(){return data;};return data;}function _templateObject279(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject279=function _templateObject279(){return data;};return data;}function _templateObject278(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject278=function _templateObject278(){return data;};return data;}function _templateObject277(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".m(\",\", \",\", \",\");\"]);_templateObject277=function _templateObject277(){return data;};return data;}function _templateObject276(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = new @HtmlTag(\",\");\"]);_templateObject276=function _templateObject276(){return data;};return data;}function _templateObject275(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".p(\",\")\"]);_templateObject275=function _templateObject275(){return data;};return data;}function _templateObject274(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".innerHTML = \",\";\"]);_templateObject274=function _templateObject274(){return data;};return data;}function _templateObject273(){var data=(0,_taggedTemplateLiteral2.default)([\"@claim_text(\",\", \",\")\"]);_templateObject273=function _templateObject273(){return data;};return data;}function _templateObject272(){var data=(0,_taggedTemplateLiteral2.default)([\"@text(\",\")\"]);_templateObject272=function _templateObject272(){return data;};return data;}function _templateObject271(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_data(\",\", \",\")\"]);_templateObject271=function _templateObject271(){return data;};return data;}function _templateObject270(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\"\"]);_templateObject270=function _templateObject270(){return data;};return data;}function _templateObject269(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject269=function _templateObject269(){return data;};return data;}function _templateObject268(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== (\",\" = \",\")\"]);_templateObject268=function _templateObject268(){return data;};return data;}function _templateObject267(){var data=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"]);_templateObject267=function _templateObject267(){return data;};return data;}function _templateObject266(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \\\"\\\"\"]);_templateObject266=function _templateObject266(){return data;};return data;}function _templateObject265(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfunction \",\"() {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn \",\"(\",\");\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\"]);_templateObject265=function _templateObject265(){return data;};return data;}function _templateObject264(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfunction \",\"(...args) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn \",\"(\",\", ...args);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\"]);_templateObject264=function _templateObject264(){return data;};return data;}function _templateObject263(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\"\"]);_templateObject263=function _templateObject263(){return data;};return data;}function _templateObject262(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\")\"]);_templateObject262=function _templateObject262(){return data;};return data;}function _templateObject261(){var data=(0,_taggedTemplateLiteral2.default)([\"$$invalidate(\",\", \",\", \",\")\"]);_templateObject261=function _templateObject261(){return data;};return data;}function _templateObject260(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_store_value(\",\", \",\", \",\")\"]);_templateObject260=function _templateObject260(){return data;};return data;}function _templateObject259(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"\"]);_templateObject259=function _templateObject259(){return data;};return data;}function _templateObject258(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\");\"]);_templateObject258=function _templateObject258(){return data;};return data;}function _templateObject257(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(null);\"]);_templateObject257=function _templateObject257(){return data;};return data;}function _templateObject256(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\tfunction \",\"($$value) {\\n\\t\\t\\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\"]);_templateObject256=function _templateObject256(){return data;};return data;}function _templateObject255(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"]);_templateObject255=function _templateObject255(){return data;};return data;}function _templateObject254(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"]);_templateObject254=function _templateObject254(){return data;};return data;}function _templateObject253(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"]);_templateObject253=function _templateObject253(){return data;};return data;}function _templateObject252(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\",\"();\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\",\"();\\n\\t\\t\\t}\"]);_templateObject252=function _templateObject252(){return data;};return data;}function _templateObject251(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" || \",\"\"]);_templateObject251=function _templateObject251(){return data;};return data;}function _templateObject250(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\"\"]);_templateObject250=function _templateObject250(){return data;};return data;}function _templateObject249(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = () => \",\"(\",\", \",\");\\n\\t\\t\\tconst \",\" = () => \",\"(null, \",\");\\n\\t\\t\"]);_templateObject249=function _templateObject249(){return data;};return data;}function _templateObject248(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"($$value, \",\") {\\n\\t\\t\\t\\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject248=function _templateObject248(){return data;};return data;}function _templateObject247(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\";\"]);_templateObject247=function _templateObject247(){return data;};return data;}function _templateObject246(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\"\\n\\t\\t\",\"\\n\\t\"]);_templateObject246=function _templateObject246(){return data;};return data;}function _templateObject245(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" => \",\"\"]);_templateObject245=function _templateObject245(){return data;};return data;}function _templateObject244(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" => \",\"\"]);_templateObject244=function _templateObject244(){return data;};return data;}function _templateObject243(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"]);_templateObject243=function _templateObject243(){return data;};return data;}function _templateObject242(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : 0\"]);_templateObject242=function _templateObject242(){return data;};return data;}function _templateObject241(){var data=(0,_taggedTemplateLiteral2.default)([\"0\"]);_templateObject241=function _templateObject241(){return data;};return data;}function _templateObject240(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" | \",\"\"]);_templateObject240=function _templateObject240(){return data;};return data;}function _templateObject239(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" ? \",\" : 0\"]);_templateObject239=function _templateObject239(){return data;};return data;}function _templateObject238(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": \",\"\"]);_templateObject238=function _templateObject238(){return data;};return data;}function _templateObject237(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\") \",\".update.call(null, \",\");\"]);_templateObject237=function _templateObject237(){return data;};return data;}function _templateObject236(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject236=function _templateObject236(){return data;};return data;}function _templateObject235(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && @is_function(\",\".update)\"]);_templateObject235=function _templateObject235(){return data;};return data;}function _templateObject234(){var data=(0,_taggedTemplateLiteral2.default)([\"@action_destroyer(\",\" = \",\".call(null, \",\", \",\"))\"]);_templateObject234=function _templateObject234(){return data;};return data;}function _templateObject233(){var data=(0,_taggedTemplateLiteral2.default)([\"this.\",\"\"]);_templateObject233=function _templateObject233(){return data;};return data;}function _templateObject232(){var data=(0,_taggedTemplateLiteral2.default)([\"@time_ranges_to_array(this.\",\")\"]);_templateObject232=function _templateObject232(){return data;};return data;}function _templateObject231(){var data=(0,_taggedTemplateLiteral2.default)([\"@to_number(this.\",\")\"]);_templateObject231=function _templateObject231(){return data;};return data;}function _templateObject230(){var data=(0,_taggedTemplateLiteral2.default)([\"this.__value\"]);_templateObject230=function _templateObject230(){return data;};return data;}function _templateObject229(){var data=(0,_taggedTemplateLiteral2.default)([\"@get_binding_group_value(\",\", this.__value, this.checked)\"]);_templateObject229=function _templateObject229(){return data;};return data;}function _templateObject228(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_value(this)\"]);_templateObject228=function _templateObject228(){return data;};return data;}function _templateObject227(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_multiple_value(this)\"]);_templateObject227=function _templateObject227(){return data;};return data;}function _templateObject226(){var data=(0,_taggedTemplateLiteral2.default)([\"$$value\"]);_templateObject226=function _templateObject226(){return data;};return data;}function _templateObject225(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\",\" = \",\";\\n\\t\\t\",\"\\n\\t\"]);_templateObject225=function _templateObject225(){return data;};return data;}function _templateObject224(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\");\"]);_templateObject224=function _templateObject224(){return data;};return data;}function _templateObject223(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".set(\",\");\"]);_templateObject223=function _templateObject223(){return data;};return data;}function _templateObject222(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject222=function _templateObject222(){return data;};return data;}function _templateObject221(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject221=function _templateObject221(){return data;};return data;}function _templateObject220(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject220=function _templateObject220(){return data;};return data;}function _templateObject219(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"]);_templateObject219=function _templateObject219(){return data;};return data;}function _templateObject218(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_input_value(\",\", \",\");\"]);_templateObject218=function _templateObject218(){return data;};return data;}function _templateObject217(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".checked = \",\";\"]);_templateObject217=function _templateObject217(){return data;};return data;}function _templateObject216(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".__value === \",\"\"]);_templateObject216=function _templateObject216(){return data;};return data;}function _templateObject215(){var data=(0,_taggedTemplateLiteral2.default)([\"~\",\".indexOf(\",\".__value)\"]);_templateObject215=function _templateObject215(){return data;};return data;}function _templateObject214(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_option(\",\", \",\")\"]);_templateObject214=function _templateObject214(){return data;};return data;}function _templateObject213(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_options(\",\", \",\")\"]);_templateObject213=function _templateObject213(){return data;};return data;}function _templateObject212(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject212=function _templateObject212(){return data;};return data;}function _templateObject211(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject211=function _templateObject211(){return data;};return data;}function _templateObject210(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject210=function _templateObject210(){return data;};return data;}function _templateObject209(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\"\"]);_templateObject209=function _templateObject209(){return data;};return data;}function _templateObject208(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\" ? \\\"pause\\\" : \\\"play\\\"]();\"]);_templateObject208=function _templateObject208(){return data;};return data;}function _templateObject207(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== (\",\" = \",\")\"]);_templateObject207=function _templateObject207(){return data;};return data;}function _templateObject206(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject206=function _templateObject206(){return data;};return data;}function _templateObject205(){var data=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"]);_templateObject205=function _templateObject205(){return data;};return data;}function _templateObject204(){var data=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"]);_templateObject204=function _templateObject204(){return data;};return data;}function _templateObject203(){var data=(0,_taggedTemplateLiteral2.default)([\"!@_isNaN(\",\")\"]);_templateObject203=function _templateObject203(){return data;};return data;}function _templateObject202(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== void 0\"]);_templateObject202=function _templateObject202(){return data;};return data;}function _templateObject201(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\".innerHTML\"]);_templateObject201=function _templateObject201(){return data;};return data;}function _templateObject200(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== void 0\"]);_templateObject200=function _templateObject200(){return data;};return data;}function _templateObject199(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" !== \",\".textContent\"]);_templateObject199=function _templateObject199(){return data;};return data;}function _templateObject198(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".splice(\",\".indexOf(\",\"), 1);\"]);_templateObject198=function _templateObject198(){return data;};return data;}function _templateObject197(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".push(\",\");\"]);_templateObject197=function _templateObject197(){return data;};return data;}function _templateObject196(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = [];\"]);_templateObject196=function _templateObject196(){return data;};return data;}function _templateObject195(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\" || [];\"]);_templateObject195=function _templateObject195(){return data;};return data;}function _templateObject194(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject194=function _templateObject194(){return data;};return data;}function _templateObject193(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject193=function _templateObject193(){return data;};return data;}function _templateObject192(){var data=(0,_taggedTemplateLiteral2.default)([\"@to_number(\",\".\",\") !== \",\"\"]);_templateObject192=function _templateObject192(){return data;};return data;}function _templateObject191(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" !== \",\"\"]);_templateObject191=function _templateObject191(){return data;};return data;}function _templateObject190(){var data=(0,_taggedTemplateLiteral2.default)([\"!\",\"\"]);_templateObject190=function _templateObject190(){return data;};return data;}function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]();},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it.return!=null)it.return();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _templateObject189(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_style(\",\", \\\"\",\"\\\", \",\", \",\");\"]);_templateObject189=function _templateObject189(){return data;};return data;}function _templateObject188(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t@set_style(\",\", \\\"\",\"\\\", \",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\"]);_templateObject188=function _templateObject188(){return data;};return data;}function _templateObject187(){var data=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"]);_templateObject187=function _templateObject187(){return data;};return data;}function _templateObject186(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject186=function _templateObject186(){return data;};return data;}function _templateObject185(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject185=function _templateObject185(){return data;};return data;}function _templateObject184(){var data=(0,_taggedTemplateLiteral2.default)([\"@null_to_empty(\",\")\"]);_templateObject184=function _templateObject184(){return data;};return data;}function _templateObject183(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\" + \",\"\"]);_templateObject183=function _templateObject183(){return data;};return data;}function _templateObject182(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" + \",\"\"]);_templateObject182=function _templateObject182(){return data;};return data;}function _templateObject181(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject181=function _templateObject181(){return data;};return data;}function _templateObject180(){var data=(0,_taggedTemplateLiteral2.default)([\"\\\"\\\"\"]);_templateObject180=function _templateObject180(){return data;};return data;}function _templateObject179(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject179=function _templateObject179(){return data;};return data;}function _templateObject178(){var data=(0,_taggedTemplateLiteral2.default)([\"!#current || \",\"\"]);_templateObject178=function _templateObject178(){return data;};return data;}function _templateObject177(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && \",\".\",\" !== \",\"\"]);_templateObject177=function _templateObject177(){return data;};return data;}function _templateObject176(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\" !== (\",\" = \",\"))\"]);_templateObject176=function _templateObject176(){return data;};return data;}function _templateObject175(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" && (\",\".src !== (\",\" = \",\"))\"]);_templateObject175=function _templateObject175(){return data;};return data;}function _templateObject174(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\"\"]);_templateObject174=function _templateObject174(){return data;};return data;}function _templateObject173(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject173=function _templateObject173(){return data;};return data;}function _templateObject172(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\";\\n\\t\\t\\t\"]);_templateObject172=function _templateObject172(){return data;};return data;}function _templateObject171(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".value = \",\".__value;\"]);_templateObject171=function _templateObject171(){return data;};return data;}function _templateObject170(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject170=function _templateObject170(){return data;};return data;}function _templateObject169(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject169=function _templateObject169(){return data;};return data;}function _templateObject168(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"]);_templateObject168=function _templateObject168(){return data;};return data;}function _templateObject167(){var data=(0,_taggedTemplateLiteral2.default)([\"@prop_dev(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject167=function _templateObject167(){return data;};return data;}function _templateObject166(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\" = \",\";\"]);_templateObject166=function _templateObject166(){return data;};return data;}function _templateObject165(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject165=function _templateObject165(){return data;};return data;}function _templateObject164(){var data=(0,_taggedTemplateLiteral2.default)([\"if (\",\".src !== \",\") \",\"(\",\", \\\"\",\"\\\", \",\");\"]);_templateObject164=function _templateObject164(){return data;};return data;}function _templateObject163(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"]);_templateObject163=function _templateObject163(){return data;};return data;}function _templateObject162(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_option(\",\", \",\");\"]);_templateObject162=function _templateObject162(){return data;};return data;}function _templateObject161(){var data=(0,_taggedTemplateLiteral2.default)([\"@select_options(\",\", \",\");\"]);_templateObject161=function _templateObject161(){return data;};return data;}function _templateObject160(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_input_type(\",\", \",\");\"]);_templateObject160=function _templateObject160(){return data;};return data;}function _templateObject159(){var data=(0,_taggedTemplateLiteral2.default)([\"@set_input_type(\",\", \",\");\"]);_templateObject159=function _templateObject159(){return data;};return data;}function _templateObject158(){var data=(0,_taggedTemplateLiteral2.default)([\"@claim_text(\",\", \\\"\",\"\\\")\"]);_templateObject158=function _templateObject158(){return data;};return data;}function _templateObject157(){var data=(0,_taggedTemplateLiteral2.default)([\"@claim_space(\",\")\"]);_templateObject157=function _templateObject157(){return data;};return data;}function _templateObject156(){var data=(0,_taggedTemplateLiteral2.default)([\"@text(\\\"\",\"\\\")\"]);_templateObject156=function _templateObject156(){return data;};return data;}function _templateObject155(){var data=(0,_taggedTemplateLiteral2.default)([\"@space()\"]);_templateObject155=function _templateObject155(){return data;};return data;}function _templateObject154(){var data=(0,_taggedTemplateLiteral2.default)([\"t\"]);_templateObject154=function _templateObject154(){return data;};return data;}function _templateObject153(){var data=(0,_taggedTemplateLiteral2.default)([\"@destroy_each(\",\", detaching);\"]);_templateObject153=function _templateObject153(){return data;};return data;}function _templateObject152(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" = \",\".filter(@_Boolean);\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_out(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject152=function _templateObject152(){return data;};return data;}function _templateObject151(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"]);_templateObject151=function _templateObject151(){return data;};return data;}function _templateObject150(){var data=(0,_taggedTemplateLiteral2.default)([\"const #old_length = \",\".length;\"]);_templateObject150=function _templateObject150(){return data;};return data;}function _templateObject149(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\tlet #i;\\n\\t\\t\\t\\tfor (#i = \",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\tconst child_ctx = \",\"(#ctx, \",\", #i);\\n\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"]);_templateObject149=function _templateObject149(){return data;};return data;}function _templateObject148(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"]);_templateObject148=function _templateObject148(){return data;};return data;}function _templateObject147(){var data=(0,_taggedTemplateLiteral2.default)([\"#i = \",\"\"]);_templateObject147=function _templateObject147(){return data;};return data;}function _templateObject146(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tfor (\",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\"[#i].d(1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"]);_templateObject146=function _templateObject146(){return data;};return data;}function _templateObject145(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\tfor (#i = \",\"; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\\t\",\"(#i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t@check_outros();\\n\\t\\t\\t\\t\"]);_templateObject145=function _templateObject145(){return data;};return data;}function _templateObject144(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = i => @transition_out(\",\"[i], 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\",\"[i] = null;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\"]);_templateObject144=function _templateObject144(){return data;};return data;}function _templateObject143(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject143=function _templateObject143(){return data;};return data;}function _templateObject142(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\"[#i], 1);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\\t@transition_in(\",\"[#i], 1);\\n\\t\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject142=function _templateObject142(){return data;};return data;}function _templateObject141(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\"[#i], 1);\"]);_templateObject141=function _templateObject141(){return data;};return data;}function _templateObject140(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\"[#i], 1);\"]);_templateObject140=function _templateObject140(){return data;};return data;}function _templateObject139(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\"[#i]) {\\n\\t\\t\\t\\t\\t\\t\",\"[#i].p(child_ctx, #dirty);\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\",\"[#i] = \",\"(child_ctx);\\n\\t\\t\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject139=function _templateObject139(){return data;};return data;}function _templateObject138(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject138=function _templateObject138(){return data;};return data;}function _templateObject137(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\",\"[#i].l(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject137=function _templateObject137(){return data;};return data;}function _templateObject136(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject136=function _templateObject136(){return data;};return data;}function _templateObject135(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = [];\\n\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i] = \",\"(\",\"(#ctx, \",\", #i));\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject135=function _templateObject135(){return data;};return data;}function _templateObject134(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].d(\",\");\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject134=function _templateObject134(){return data;};return data;}function _templateObject133(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_out(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject133=function _templateObject133(){return data;};return data;}function _templateObject132(){var data=(0,_taggedTemplateLiteral2.default)([\"@check_outros();\"]);_templateObject132=function _templateObject132(){return data;};return data;}function _templateObject131(){var data=(0,_taggedTemplateLiteral2.default)([\"for (let #i = 0; #i < \",\"; #i += 1) \",\"[#i].a();\"]);_templateObject131=function _templateObject131(){return data;};return data;}function _templateObject130(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_each_keys(#ctx, \",\", \",\", \",\");\"]);_templateObject130=function _templateObject130(){return data;};return data;}function _templateObject129(){var data=(0,_taggedTemplateLiteral2.default)([\"for (let #i = 0; #i < \",\"; #i += 1) \",\"[#i].r();\"]);_templateObject129=function _templateObject129(){return data;};return data;}function _templateObject128(){var data=(0,_taggedTemplateLiteral2.default)([\"@group_outros();\"]);_templateObject128=function _templateObject128(){return data;};return data;}function _templateObject127(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"]);_templateObject127=function _templateObject127(){return data;};return data;}function _templateObject126(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tconst \",\" = \",\";\\n\\t\\t\\t\\t\",\"\\n\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\" = @update_keyed_each(\",\", #dirty, \",\", \",\", #ctx, \",\", \",\", \",\", \",\", \",\", \",\", \",\");\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\"]);_templateObject126=function _templateObject126(){return data;};return data;}function _templateObject125(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].m(\",\", \",\");\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject125=function _templateObject125(){return data;};return data;}function _templateObject124(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t\",\"[#i].l(\",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject124=function _templateObject124(){return data;};return data;}function _templateObject123(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\",\"[#i].c();\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject123=function _templateObject123(){return data;};return data;}function _templateObject122(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_each_keys(#ctx, \",\", \",\", \",\");\"]);_templateObject122=function _templateObject122(){return data;};return data;}function _templateObject121(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tconst \",\" = #ctx => \",\";\\n\\n\\t\\t\\t\",\"\\n\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\tlet child_ctx = \",\"(#ctx, \",\", #i);\\n\\t\\t\\t\\tlet key = \",\"(child_ctx);\\n\\t\\t\\t\\t\",\".set(key, \",\"[#i] = \",\"(key, child_ctx));\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject121=function _templateObject121(){return data;};return data;}function _templateObject120(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject120=function _templateObject120(){return data;};return data;}function _templateObject119(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject119=function _templateObject119(){return data;};return data;}function _templateObject118(){var data=(0,_taggedTemplateLiteral2.default)([\"new @_Map()\"]);_templateObject118=function _templateObject118(){return data;};return data;}function _templateObject117(){var data=(0,_taggedTemplateLiteral2.default)([\"[]\"]);_templateObject117=function _templateObject117(){return data;};return data;}function _templateObject116(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject116=function _templateObject116(){return data;};return data;}function _templateObject115(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject115=function _templateObject115(){return data;};return data;}function _templateObject114(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject114=function _templateObject114(){return data;};return data;}function _templateObject113(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") \",\".d(\",\");\\n\\t\\t\\t\"]);_templateObject113=function _templateObject113(){return data;};return data;}function _templateObject112(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"]);_templateObject112=function _templateObject112(){return data;};return data;}function _templateObject111(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else if (!\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject111=function _templateObject111(){return data;};return data;}function _templateObject110(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\", 1);\"]);_templateObject110=function _templateObject110(){return data;};return data;}function _templateObject109(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (!\",\" && \",\") {\\n\\t\\t\\t\\t\\t\\t\",\".p(#ctx, #dirty);\\n\\t\\t\\t\\t\\t} else if (!\",\") {\\n\\t\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t\\t} else if (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject109=function _templateObject109(){return data;};return data;}function _templateObject108(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\".d(1);\\n\\t\\t\\t\\t\\t\",\" = null;\"]);_templateObject108=function _templateObject108(){return data;};return data;}function _templateObject107(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t@group_outros();\\n\\t\\t\\t\\t\\t@transition_out(\",\", 1, 1, () => {\\n\\t\\t\\t\\t\\t\\t\",\" = null;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t@check_outros();\"]);_templateObject107=function _templateObject107(){return data;};return data;}function _templateObject106(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".m(\",\", \",\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject106=function _templateObject106(){return data;};return data;}function _templateObject105(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\".l(\",\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject105=function _templateObject105(){return data;};return data;}function _templateObject104(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\",\".c();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject104=function _templateObject104(){return data;};return data;}function _templateObject103(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tif (!\",\") {\\n\\t\\t\\t\\t\\t\",\" = \",\"(#ctx);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject103=function _templateObject103(){return data;};return data;}function _templateObject102(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = null;\"]);_templateObject102=function _templateObject102(){return data;};return data;}function _templateObject101(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject101=function _templateObject101(){return data;};return data;}function _templateObject100(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject100=function _templateObject100(){return data;};return data;}function _templateObject99(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < \",\"; #i += 1) {\\n\\t\\t\\t\\t\\t@transition_in(\",\"[#i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject99=function _templateObject99(){return data;};return data;}function _templateObject98(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(#ctx, list, i) {\\n\\t\\t\\t\\tconst child_ctx = #ctx.slice();\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\treturn child_ctx;\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject98=function _templateObject98(){return data;};return data;}function _templateObject97(){var data=(0,_taggedTemplateLiteral2.default)([\"@validate_each_argument(\",\");\"]);_templateObject97=function _templateObject97(){return data;};return data;}function _templateObject96(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\";\"]);_templateObject96=function _templateObject96(){return data;};return data;}function _templateObject95(){var data=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = i;\"]);_templateObject95=function _templateObject95(){return data;};return data;}function _templateObject94(){var data=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = list;\"]);_templateObject94=function _templateObject94(){return data;};return data;}function _templateObject93(){var data=(0,_taggedTemplateLiteral2.default)([\"list[i]\"]);_templateObject93=function _templateObject93(){return data;};return data;}function _templateObject92(){var data=(0,_taggedTemplateLiteral2.default)([\"child_ctx[\",\"] = \",\";\"]);_templateObject92=function _templateObject92(){return data;};return data;}function _templateObject91(){var data=(0,_taggedTemplateLiteral2.default)([\"[\",\"]\"]);_templateObject91=function _templateObject91(){return data;};return data;}function _templateObject90(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"[\",\"]\"]);_templateObject90=function _templateObject90(){return data;};return data;}function _templateObject89(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".length\"]);_templateObject89=function _templateObject89(){return data;};return data;}function _templateObject88(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".\",\"\"]);_templateObject88=function _templateObject88(){return data;};return data;}function _templateObject87(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject87=function _templateObject87(){return data;};return data;}function _templateObject86(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject86=function _templateObject86(){return data;};return data;}function _templateObject85(){var data=(0,_taggedTemplateLiteral2.default)([\"const \",\" = \",\";\"]);_templateObject85=function _templateObject85(){return data;};return data;}function _templateObject84(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t@_console.\",\"({ \",\" });\\n\\t\\t\\t\\tdebugger;\"]);_templateObject84=function _templateObject84(){return data;};return data;}function _templateObject83(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"\"]);_templateObject83=function _templateObject83(){return data;};return data;}function _templateObject82(){var data=(0,_taggedTemplateLiteral2.default)([\"@_document.body\"]);_templateObject82=function _templateObject82(){return data;};return data;}function _templateObject81(){var data=(0,_taggedTemplateLiteral2.default)([\"@listen(\",\", \\\"\",\"\\\", \",\", \",\")\"]);_templateObject81=function _templateObject81(){return data;};return data;}function _templateObject80(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\": true\"]);_templateObject80=function _templateObject80(){return data;};return data;}function _templateObject79(){var data=(0,_taggedTemplateLiteral2.default)([\"{ \",\" }\"]);_templateObject79=function _templateObject79(){return data;};return data;}function _templateObject78(){var data=(0,_taggedTemplateLiteral2.default)([\"@self(\",\")\"]);_templateObject78=function _templateObject78(){return data;};return data;}function _templateObject77(){var data=(0,_taggedTemplateLiteral2.default)([\"@stop_propagation(\",\")\"]);_templateObject77=function _templateObject77(){return data;};return data;}function _templateObject76(){var data=(0,_taggedTemplateLiteral2.default)([\"@prevent_default(\",\")\"]);_templateObject76=function _templateObject76(){return data;};return data;}function _templateObject75(){var data=(0,_taggedTemplateLiteral2.default)([\"function () { if (@is_function(\",\")) \",\".apply(this, arguments); }\"]);_templateObject75=function _templateObject75(){return data;};return data;}function _templateObject74(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfunction \",\"(event) {\\n\\t\\t\\t\\t\\t@bubble($$self, event);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject74=function _templateObject74(){return data;};return data;}function _templateObject73(){var data=(0,_taggedTemplateLiteral2.default)([\"false\"]);_templateObject73=function _templateObject73(){return data;};return data;}function _templateObject72(){var data=(0,_taggedTemplateLiteral2.default)([\"true\"]);_templateObject72=function _templateObject72(){return data;};return data;}function _templateObject71(){var data=(0,_taggedTemplateLiteral2.default)([\"#nodes\"]);_templateObject71=function _templateObject71(){return data;};return data;}function _templateObject70(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.d(\",\");\\n\\t\\t\\t\",\".token = null;\\n\\t\\t\\t\",\" = null;\\n\\t\\t\"]);_templateObject70=function _templateObject70(){return data;};return data;}function _templateObject69(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\tfor (let #i = 0; #i < 3; #i += 1) {\\n\\t\\t\\t\\t\\tconst block = \",\".blocks[#i];\\n\\t\\t\\t\\t\\t@transition_out(block);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"]);_templateObject69=function _templateObject69(){return data;};return data;}function _templateObject68(){var data=(0,_taggedTemplateLiteral2.default)([\"#child_ctx[\",\"] = \",\".resolved;\"]);_templateObject68=function _templateObject68(){return data;};return data;}function _templateObject67(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tconst #child_ctx = #ctx.slice();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".block.p(#child_ctx, #dirty);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject67=function _templateObject67(){return data;};return data;}function _templateObject66(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\"]);_templateObject66=function _templateObject66(){return data;};return data;}function _templateObject65(){var data=(0,_taggedTemplateLiteral2.default)([\"#child_ctx[\",\"] = \",\".resolved;\"]);_templateObject65=function _templateObject65(){return data;};return data;}function _templateObject64(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (\",\") {\\n\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tconst #child_ctx = #ctx.slice();\\n\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t\",\".block.p(#child_ctx, #dirty);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject64=function _templateObject64(){return data;};return data;}function _templateObject63(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".ctx = #ctx;\"]);_templateObject63=function _templateObject63(){return data;};return data;}function _templateObject62(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\" &&\\n\\t\\t\\t\\t\",\" !== (\",\" = \",\") &&\\n\\t\\t\\t\\t@handle_promise(\",\", \",\")\"]);_templateObject62=function _templateObject62(){return data;};return data;}function _templateObject61(){var data=(0,_taggedTemplateLiteral2.default)([\"@transition_in(\",\".block);\"]);_templateObject61=function _templateObject61(){return data;};return data;}function _templateObject60(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.m(\",\", \",\".anchor = \",\");\\n\\t\\t\\t\",\".mount = () => \",\";\\n\\t\\t\\t\",\".anchor = \",\";\\n\\t\\t\"]);_templateObject60=function _templateObject60(){return data;};return data;}function _templateObject59(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\",\".block.l(\",\");\\n\\t\\t\\t\"]);_templateObject59=function _templateObject59(){return data;};return data;}function _templateObject58(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\".block.c();\\n\\t\\t\"]);_templateObject58=function _templateObject58(){return data;};return data;}function _templateObject57(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t@handle_promise(\",\" = \",\", \",\");\\n\\t\\t\"]);_templateObject57=function _templateObject57(){return data;};return data;}function _templateObject56(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tlet \",\" = \",\";\\n\\t\\t\"]);_templateObject56=function _templateObject56(){return data;};return data;}function _templateObject55(){var data=(0,_taggedTemplateLiteral2.default)([\"[,,,]\"]);_templateObject55=function _templateObject55(){return data;};return data;}function _templateObject54(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\tctx: #ctx,\\n\\t\\t\\tcurrent: null,\\n\\t\\t\\ttoken: null,\\n\\t\\t\\tpending: \",\",\\n\\t\\t\\tthen: \",\",\\n\\t\\t\\tcatch: \",\",\\n\\t\\t\\tvalue: \",\",\\n\\t\\t\\terror: \",\",\\n\\t\\t\\tblocks: \",\"\\n\\t\\t}\"]);_templateObject54=function _templateObject54(){return data;};return data;}function _templateObject53(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"]);_templateObject53=function _templateObject53(){return data;};return data;}function _templateObject52(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"(#ctx)\"]);_templateObject52=function _templateObject52(){return data;};return data;}function _templateObject51(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\tfunction \",\"(#ctx) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\\n\\t\\t\"]);_templateObject51=function _templateObject51(){return data;};return data;}function _templateObject50(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx[\",\"]\"]);_templateObject50=function _templateObject50(){return data;};return data;}function _templateObject49(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx[\",\"] = \",\";\"]);_templateObject49=function _templateObject49(){return data;};return data;}function _templateObject48(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".parentNode\"]);_templateObject48=function _templateObject48(){return data;};return data;}function _templateObject47(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject47=function _templateObject47(){return data;};return data;}function _templateObject46(){var data=(0,_taggedTemplateLiteral2.default)([\"@empty()\"]);_templateObject46=function _templateObject46(){return data;};return data;}function _templateObject45(){var data=(0,_taggedTemplateLiteral2.default)([\"@run_all(\",\");\"]);_templateObject45=function _templateObject45(){return data;};return data;}function _templateObject44(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tif (!#mounted) {\\n\\t\\t\\t\\t\\t\\t\",\" = [\\n\\t\\t\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\\t];\\n\\t\\t\\t\\t\\t\\t#mounted = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"]);_templateObject44=function _templateObject44(){return data;};return data;}function _templateObject43(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\"();\"]);_templateObject43=function _templateObject43(){return data;};return data;}function _templateObject42(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\t\\tif (!#mounted) {\\n\\t\\t\\t\\t\\t\\t\\t\",\" = \",\";\\n\\t\\t\\t\\t\\t\\t\\t#mounted = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\"]);_templateObject42=function _templateObject42(){return data;};return data;}function _templateObject41(){var data=(0,_taggedTemplateLiteral2.default)([\"#mounted = false\"]);_templateObject41=function _templateObject41(){return data;};return data;}function _templateObject40(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t// \",\"\\n\\t\\t\\t\\t\",\"\"]);_templateObject40=function _templateObject40(){return data;};return data;}function _templateObject39(){var data=(0,_taggedTemplateLiteral2.default)([\"function \",\"(\",\") {\\n\\t\\t\\t\",\"\\n\\t\\t}\"]);_templateObject39=function _templateObject39(){return data;};return data;}function _templateObject38(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx\"]);_templateObject38=function _templateObject38(){return data;};return data;}function _templateObject37(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\treturn \",\";\"]);_templateObject37=function _templateObject37(){return data;};return data;}function _templateObject36(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\\t\\tconst \",\" = \",\";\\n\\t\\t\\t\\t\\t@dispatch_dev(\\\"SvelteRegisterBlock\\\", {\\n\\t\\t\\t\\t\\t\\tblock: \",\",\\n\\t\\t\\t\\t\\t\\tid: \",\".name,\\n\\t\\t\\t\\t\\t\\ttype: \\\"\",\"\\\",\\n\\t\\t\\t\\t\\t\\tsource: \\\"\",\"\\\",\\n\\t\\t\\t\\t\\t\\tctx: #ctx\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\treturn \",\";\"]);_templateObject36=function _templateObject36(){return data;};return data;}function _templateObject35(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\"\"]);_templateObject35=function _templateObject35(){return data;};return data;}function _templateObject34(){var data=(0,_taggedTemplateLiteral2.default)([\"let \",\" = \",\"\"]);_templateObject34=function _templateObject34(){return data;};return data;}function _templateObject33(){var data=(0,_taggedTemplateLiteral2.default)([\"\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\n\\t\\t\\t\",\"\\n\\t\\t\"]);_templateObject33=function _templateObject33(){return data;};return data;}function _templateObject32(){var data=(0,_taggedTemplateLiteral2.default)([\"{\\n\\t\\t\\tkey: \",\",\\n\\t\\t\\tfirst: \",\",\\n\\t\\t\\tc: \",\",\\n\\t\\t\\tl: \",\",\\n\\t\\t\\th: \",\",\\n\\t\\t\\tm: \",\",\\n\\t\\t\\tp: \",\",\\n\\t\\t\\tr: \",\",\\n\\t\\t\\tf: \",\",\\n\\t\\t\\ta: \",\",\\n\\t\\t\\ti: \",\",\\n\\t\\t\\to: \",\",\\n\\t\\t\\td: \",\"\\n\\t\\t}\"]);_templateObject32=function _templateObject32(){return data;};return data;}function _templateObject31(){var data=(0,_taggedTemplateLiteral2.default)([\"function #destroy(detaching) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject31=function _templateObject31(){return data;};return data;}function _templateObject30(){var data=(0,_taggedTemplateLiteral2.default)([\"function #outro(#local) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject30=function _templateObject30(){return data;};return data;}function _templateObject29(){var data=(0,_taggedTemplateLiteral2.default)([\"if (#current) return;\"]);_templateObject29=function _templateObject29(){return data;};return data;}function _templateObject28(){var data=(0,_taggedTemplateLiteral2.default)([\"function #intro(#local) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject28=function _templateObject28(){return data;};return data;}function _templateObject27(){var data=(0,_taggedTemplateLiteral2.default)([\"function #animate() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject27=function _templateObject27(){return data;};return data;}function _templateObject26(){var data=(0,_taggedTemplateLiteral2.default)([\"function #fix() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject26=function _templateObject26(){return data;};return data;}function _templateObject25(){var data=(0,_taggedTemplateLiteral2.default)([\"function #measure() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject25=function _templateObject25(){return data;};return data;}function _templateObject24(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx = \",\";\"]);_templateObject24=function _templateObject24(){return data;};return data;}function _templateObject23(){var data=(0,_taggedTemplateLiteral2.default)([\"function #update(\",\", \",\") {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject23=function _templateObject23(){return data;};return data;}function _templateObject22(){var data=(0,_taggedTemplateLiteral2.default)([\"#ctx\"]);_templateObject22=function _templateObject22(){return data;};return data;}function _templateObject21(){var data=(0,_taggedTemplateLiteral2.default)([\"#new_ctx\"]);_templateObject21=function _templateObject21(){return data;};return data;}function _templateObject20(){var data=(0,_taggedTemplateLiteral2.default)([\"function #mount(#target, #anchor) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject20=function _templateObject20(){return data;};return data;}function _templateObject19(){var data=(0,_taggedTemplateLiteral2.default)([\"function #mount(#target, #anchor) {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject19=function _templateObject19(){return data;};return data;}function _templateObject18(){var data=(0,_taggedTemplateLiteral2.default)([\"function #hydrate() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject18=function _templateObject18(){return data;};return data;}function _templateObject17(){var data=(0,_taggedTemplateLiteral2.default)([\"this.h();\"]);_templateObject17=function _templateObject17(){return data;};return data;}function _templateObject16(){var data=(0,_taggedTemplateLiteral2.default)([\"function #claim(#nodes) {\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t}\"]);_templateObject16=function _templateObject16(){return data;};return data;}function _templateObject15(){var data=(0,_taggedTemplateLiteral2.default)([\"function #create() {\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t\\t\",\"\\n\\t\\t\\t}\"]);_templateObject15=function _templateObject15(){return data;};return data;}function _templateObject14(){var data=(0,_taggedTemplateLiteral2.default)([\"this.h();\"]);_templateObject14=function _templateObject14(){return data;};return data;}function _templateObject13(){var data=(0,_taggedTemplateLiteral2.default)([\"this.first = \",\";\"]);_templateObject13=function _templateObject13(){return data;};return data;}function _templateObject12(){var data=(0,_taggedTemplateLiteral2.default)([\"null\"]);_templateObject12=function _templateObject12(){return data;};return data;}function _templateObject11(){var data=(0,_taggedTemplateLiteral2.default)([\"@noop\"]);_templateObject11=function _templateObject11(){return data;};return data;}function _templateObject10(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\".focus();\"]);_templateObject10=function _templateObject10(){return data;};return data;}function _templateObject9(){var data=(0,_taggedTemplateLiteral2.default)([\"#current = false;\"]);_templateObject9=function _templateObject9(){return data;};return data;}function _templateObject8(){var data=(0,_taggedTemplateLiteral2.default)([\"#current = true;\"]);_templateObject8=function _templateObject8(){return data;};return data;}function _templateObject7(){var data=(0,_taggedTemplateLiteral2.default)([\"#current = true;\"]);_templateObject7=function _templateObject7(){return data;};return data;}function _templateObject6(){var data=(0,_taggedTemplateLiteral2.default)([\"if (detaching) @detach(\",\");\"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=(0,_taggedTemplateLiteral2.default)([\"@insert(#target, \",\", #anchor);\"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=(0,_taggedTemplateLiteral2.default)([\"@detach(\",\");\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=(0,_taggedTemplateLiteral2.default)([\"@append(\",\", \",\");\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=(0,_taggedTemplateLiteral2.default)([\"\",\" = \",\";\"]);_templateObject=function _templateObject(){return data;};return data;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}(function(global,factory){( false?undefined:(0,_typeof2.default)(exports))==='object'&&typeof module!=='undefined'?factory(exports): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):(undefined);})(void 0,function(exports){'use strict';function assign(tar,src){// @ts-ignore\nfor(var k in src){tar[k]=src[k];}return tar;}var now=typeof process!=='undefined'&&process.hrtime?function(){var t=process.hrtime();return t[0]*1e3+t[1]/1e6;}:function(){return self.performance.now();};function collapse_timings(timings){var result={};timings.forEach(function(timing){result[timing.label]=Object.assign({total:timing.end-timing.start},timing.children&&collapse_timings(timing.children));});return result;}var Stats=/*#__PURE__*/function(){function Stats(){(0,_classCallCheck2.default)(this,Stats);this.start_time=now();this.stack=[];this.current_children=this.timings=[];}(0,_createClass2.default)(Stats,[{key:\"start\",value:function start(label){var timing={label:label,start:now(),end:null,children:[]};this.current_children.push(timing);this.stack.push(timing);this.current_timing=timing;this.current_children=timing.children;}},{key:\"stop\",value:function stop(label){if(label!==this.current_timing.label){throw new Error(\"Mismatched timing labels (expected \".concat(this.current_timing.label,\", got \").concat(label,\")\"));}this.current_timing.end=now();this.stack.pop();this.current_timing=this.stack[this.stack.length-1];this.current_children=this.current_timing?this.current_timing.children:this.timings;}},{key:\"render\",value:function render(){var timings=Object.assign({total:now()-this.start_time},collapse_timings(this.timings));return{timings:timings};}}]);return Stats;}();// Reserved word lists for various dialects of the language\nvar reservedWords={3:\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",5:\"class enum extends super const export import\",6:\"enum\",strict:\"implements interface let package private protected public static yield\",strictBind:\"eval arguments\"};// And the keywords\nvar ecma5AndLessKeywords=\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";var keywords={5:ecma5AndLessKeywords,\"5module\":ecma5AndLessKeywords+\" export import\",6:ecma5AndLessKeywords+\" const class extends export import super\"};var keywordRelationalOperator=/^in(stanceof)?$/;// ## Character categories\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars=\"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";var nonASCIIidentifierChars=\"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";var nonASCIIidentifierStart=new RegExp(\"[\"+nonASCIIidentifierStartChars+\"]\");var nonASCIIidentifier=new RegExp(\"[\"+nonASCIIidentifierStartChars+nonASCIIidentifierChars+\"]\");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code,set){var pos=0x10000;for(var i=0;i<set.length;i+=2){pos+=set[i];if(pos>code){return false;}pos+=set[i+1];if(pos>=code){return true;}}}// Test whether a given character code starts an identifier.\nfunction isIdentifierStart(code,astral){if(code<65){return code===36;}if(code<91){return true;}if(code<97){return code===95;}if(code<123){return true;}if(code<=0xffff){return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));}if(astral===false){return false;}return isInAstralSet(code,astralIdentifierStartCodes);}// Test whether a given character is part of an identifier.\nfunction isIdentifierChar(code,astral){if(code<48){return code===36;}if(code<58){return true;}if(code<65){return false;}if(code<91){return true;}if(code<97){return code===95;}if(code<123){return true;}if(code<=0xffff){return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));}if(astral===false){return false;}return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes);}// ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\nvar TokenType=function TokenType(label,conf){if(conf===void 0)conf={};this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop||null;this.updateContext=null;};function binop(name,prec){return new TokenType(name,{beforeExpr:true,binop:prec});}var beforeExpr={beforeExpr:true},startsExpr={startsExpr:true};// Map keyword names to token types.\nvar keywords$1={};// Succinct definitions of keyword token types\nfunction kw(name,options){if(options===void 0)options={};options.keyword=name;return keywords$1[name]=new TokenType(name,options);}var types={num:new TokenType(\"num\",startsExpr),regexp:new TokenType(\"regexp\",startsExpr),string:new TokenType(\"string\",startsExpr),name:new TokenType(\"name\",startsExpr),eof:new TokenType(\"eof\"),// Punctuation token types.\nbracketL:new TokenType(\"[\",{beforeExpr:true,startsExpr:true}),bracketR:new TokenType(\"]\"),braceL:new TokenType(\"{\",{beforeExpr:true,startsExpr:true}),braceR:new TokenType(\"}\"),parenL:new TokenType(\"(\",{beforeExpr:true,startsExpr:true}),parenR:new TokenType(\")\"),comma:new TokenType(\",\",beforeExpr),semi:new TokenType(\";\",beforeExpr),colon:new TokenType(\":\",beforeExpr),dot:new TokenType(\".\"),question:new TokenType(\"?\",beforeExpr),questionDot:new TokenType(\"?.\"),arrow:new TokenType(\"=>\",beforeExpr),template:new TokenType(\"template\"),invalidTemplate:new TokenType(\"invalidTemplate\"),ellipsis:new TokenType(\"...\",beforeExpr),backQuote:new TokenType(\"`\",startsExpr),dollarBraceL:new TokenType(\"${\",{beforeExpr:true,startsExpr:true}),// Operators. These carry several kinds of properties to help the\n// parser use them properly (the presence of these properties is\n// what categorizes them as operators).\n//\n// `binop`, when present, specifies that this operator is a binary\n// operator, and will refer to its precedence.\n//\n// `prefix` and `postfix` mark the operator as a prefix or postfix\n// unary operator.\n//\n// `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n// binary operators with a very low precedence, that should result\n// in AssignmentExpression nodes.\neq:new TokenType(\"=\",{beforeExpr:true,isAssign:true}),assign:new TokenType(\"_=\",{beforeExpr:true,isAssign:true}),incDec:new TokenType(\"++/--\",{prefix:true,postfix:true,startsExpr:true}),prefix:new TokenType(\"!/~\",{beforeExpr:true,prefix:true,startsExpr:true}),logicalOR:binop(\"||\",1),logicalAND:binop(\"&&\",2),bitwiseOR:binop(\"|\",3),bitwiseXOR:binop(\"^\",4),bitwiseAND:binop(\"&\",5),equality:binop(\"==/!=/===/!==\",6),relational:binop(\"</>/<=/>=\",7),bitShift:binop(\"<</>>/>>>\",8),plusMin:new TokenType(\"+/-\",{beforeExpr:true,binop:9,prefix:true,startsExpr:true}),modulo:binop(\"%\",10),star:binop(\"*\",10),slash:binop(\"/\",10),starstar:new TokenType(\"**\",{beforeExpr:true}),coalesce:binop(\"??\",1),// Keyword token types.\n_break:kw(\"break\"),_case:kw(\"case\",beforeExpr),_catch:kw(\"catch\"),_continue:kw(\"continue\"),_debugger:kw(\"debugger\"),_default:kw(\"default\",beforeExpr),_do:kw(\"do\",{isLoop:true,beforeExpr:true}),_else:kw(\"else\",beforeExpr),_finally:kw(\"finally\"),_for:kw(\"for\",{isLoop:true}),_function:kw(\"function\",startsExpr),_if:kw(\"if\"),_return:kw(\"return\",beforeExpr),_switch:kw(\"switch\"),_throw:kw(\"throw\",beforeExpr),_try:kw(\"try\"),_var:kw(\"var\"),_const:kw(\"const\"),_while:kw(\"while\",{isLoop:true}),_with:kw(\"with\"),_new:kw(\"new\",{beforeExpr:true,startsExpr:true}),_this:kw(\"this\",startsExpr),_super:kw(\"super\",startsExpr),_class:kw(\"class\",startsExpr),_extends:kw(\"extends\",beforeExpr),_export:kw(\"export\"),_import:kw(\"import\",startsExpr),_null:kw(\"null\",startsExpr),_true:kw(\"true\",startsExpr),_false:kw(\"false\",startsExpr),_in:kw(\"in\",{beforeExpr:true,binop:7}),_instanceof:kw(\"instanceof\",{beforeExpr:true,binop:7}),_typeof:kw(\"typeof\",{beforeExpr:true,prefix:true,startsExpr:true}),_void:kw(\"void\",{beforeExpr:true,prefix:true,startsExpr:true}),_delete:kw(\"delete\",{beforeExpr:true,prefix:true,startsExpr:true})};// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nvar lineBreak=/\\r\\n?|\\n|\\u2028|\\u2029/;var lineBreakG=new RegExp(lineBreak.source,\"g\");function isNewLine(code,ecma2019String){return code===10||code===13||!ecma2019String&&(code===0x2028||code===0x2029);}var nonASCIIwhitespace=/[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;var skipWhiteSpace=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;var ref=Object.prototype;var hasOwnProperty=ref.hasOwnProperty;var toString=ref.toString;// Checks if an object has a property.\nfunction has(obj,propName){return hasOwnProperty.call(obj,propName);}var isArray=Array.isArray||function(obj){return toString.call(obj)===\"[object Array]\";};function wordsRegexp(words){return new RegExp(\"^(?:\"+words.replace(/ /g,\"|\")+\")$\");}// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\nvar Position=function Position(line,col){this.line=line;this.column=col;};Position.prototype.offset=function offset(n){return new Position(this.line,this.column+n);};var SourceLocation=function SourceLocation(p,start,end){this.start=start;this.end=end;if(p.sourceFile!==null){this.source=p.sourceFile;}};// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\nfunction getLineInfo(input,offset){for(var line=1,cur=0;;){lineBreakG.lastIndex=cur;var match=lineBreakG.exec(input);if(match&&match.index<offset){++line;cur=match.index+match[0].length;}else{return new Position(line,offset-cur);}}}// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\nvar defaultOptions={// `ecmaVersion` indicates the ECMAScript version to parse. Must be\n// either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n// (2019). This influences support for strict mode, the set of\n// reserved words, and support for new syntax features. The default\n// is 10.\necmaVersion:10,// `sourceType` indicates the mode the code should be parsed in.\n// Can be either `\"script\"` or `\"module\"`. This influences global\n// strict mode and parsing of `import` and `export` declarations.\nsourceType:\"script\",// `onInsertedSemicolon` can be a callback that will be called\n// when a semicolon is automatically inserted. It will be passed\n// the position of the comma as an offset, and if `locations` is\n// enabled, it is given the location as a `{line, column}` object\n// as second argument.\nonInsertedSemicolon:null,// `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n// trailing commas.\nonTrailingComma:null,// By default, reserved words are only enforced if ecmaVersion >= 5.\n// Set `allowReserved` to a boolean value to explicitly turn this on\n// an off. When this option has the value \"never\", reserved words\n// and keywords can also not be used as property names.\nallowReserved:null,// When enabled, a return at the top level is not considered an\n// error.\nallowReturnOutsideFunction:false,// When enabled, import/export statements are not constrained to\n// appearing at the top of the program.\nallowImportExportEverywhere:false,// When enabled, await identifiers are allowed to appear at the top-level scope,\n// but they are still not allowed in non-async functions.\nallowAwaitOutsideFunction:false,// When enabled, hashbang directive in the beginning of file\n// is allowed and treated as a line comment.\nallowHashBang:false,// When `locations` is on, `loc` properties holding objects with\n// `start` and `end` properties in `{line, column}` form (with\n// line being 1-based and column 0-based) will be attached to the\n// nodes.\nlocations:false,// A function can be passed as `onToken` option, which will\n// cause Acorn to call that function with object in the same\n// format as tokens returned from `tokenizer().getToken()`. Note\n// that you are not allowed to call the parser from the\n// callback—that will corrupt its internal state.\nonToken:null,// A function can be passed as `onComment` option, which will\n// cause Acorn to call that function with `(block, text, start,\n// end)` parameters whenever a comment is skipped. `block` is a\n// boolean indicating whether this is a block (`/* */`) comment,\n// `text` is the content of the comment, and `start` and `end` are\n// character offsets that denote the start and end of the comment.\n// When the `locations` option is on, two more parameters are\n// passed, the full `{line, column}` locations of the start and\n// end of the comments. Note that you are not allowed to call the\n// parser from the callback—that will corrupt its internal state.\nonComment:null,// Nodes have their start and end characters offsets recorded in\n// `start` and `end` properties (directly on the node, rather than\n// the `loc` object, which holds line/column data. To also add a\n// [semi-standardized][range] `range` property holding a `[start,\n// end]` array with the same numbers, set the `ranges` option to\n// `true`.\n//\n// [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\nranges:false,// It is possible to parse multiple files into a single AST by\n// passing the tree produced by parsing the first file as\n// `program` option in subsequent parses. This will add the\n// toplevel forms of the parsed file to the `Program` (top) node\n// of an existing parse tree.\nprogram:null,// When `locations` is on, you can pass this to record the source\n// file in every node's `loc` object.\nsourceFile:null,// This value, if given, is stored in every node, whether\n// `locations` is on or off.\ndirectSourceFile:null,// When enabled, parenthesized expressions are represented by\n// (non-standard) ParenthesizedExpression nodes\npreserveParens:false};// Interpret and default an options object\nfunction getOptions(opts){var options={};for(var opt in defaultOptions){options[opt]=opts&&has(opts,opt)?opts[opt]:defaultOptions[opt];}if(options.ecmaVersion>=2015){options.ecmaVersion-=2009;}if(options.allowReserved==null){options.allowReserved=options.ecmaVersion<5;}if(isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token);};}if(isArray(options.onComment)){options.onComment=pushComment(options,options.onComment);}return options;}function pushComment(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?\"Block\":\"Line\",value:text,start:start,end:end};if(options.locations){comment.loc=new SourceLocation(this,startLoc,endLoc);}if(options.ranges){comment.range=[start,end];}array.push(comment);};}// Each scope gets a bitset that may contain these flags\nvar SCOPE_TOP=1,SCOPE_FUNCTION=2,SCOPE_VAR=SCOPE_TOP|SCOPE_FUNCTION,SCOPE_ASYNC=4,SCOPE_GENERATOR=8,SCOPE_ARROW=16,SCOPE_SIMPLE_CATCH=32,SCOPE_SUPER=64,SCOPE_DIRECT_SUPER=128;function functionFlags(async,generator){return SCOPE_FUNCTION|(async?SCOPE_ASYNC:0)|(generator?SCOPE_GENERATOR:0);}// Used in checkLVal and declareName to determine the type of a binding\nvar BIND_NONE=0,// Not a binding\nBIND_VAR=1,// Var-style binding\nBIND_LEXICAL=2,// Let- or const-style binding\nBIND_FUNCTION=3,// Function declaration\nBIND_SIMPLE_CATCH=4,// Simple (identifier pattern) catch binding\nBIND_OUTSIDE=5;// Special case for function names as bound inside the function\nvar Parser=function Parser(options,input,startPos){this.options=options=getOptions(options);this.sourceFile=options.sourceFile;this.keywords=wordsRegexp(keywords[options.ecmaVersion>=6?6:options.sourceType===\"module\"?\"5module\":5]);var reserved=\"\";if(options.allowReserved!==true){for(var v=options.ecmaVersion;;v--){if(reserved=reservedWords[v]){break;}}if(options.sourceType===\"module\"){reserved+=\" await\";}}this.reservedWords=wordsRegexp(reserved);var reservedStrict=(reserved?reserved+\" \":\"\")+reservedWords.strict;this.reservedWordsStrict=wordsRegexp(reservedStrict);this.reservedWordsStrictBind=wordsRegexp(reservedStrict+\" \"+reservedWords.strictBind);this.input=String(input);// Used to signal to callers of `readWord1` whether the word\n// contained any escape sequences. This is needed because words with\n// escape sequences must not be interpreted as keywords.\nthis.containsEsc=false;// Set up token state\n// The current position of the tokenizer in the input.\nif(startPos){this.pos=startPos;this.lineStart=this.input.lastIndexOf(\"\\n\",startPos-1)+1;this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length;}else{this.pos=this.lineStart=0;this.curLine=1;}// Properties of the current token:\n// Its type\nthis.type=types.eof;// For tokens that include more information than their type, the value\nthis.value=null;// Its start and end offset\nthis.start=this.end=this.pos;// And, if locations are used, the {line, column} object\n// corresponding to those offsets\nthis.startLoc=this.endLoc=this.curPosition();// Position information for the previous token\nthis.lastTokEndLoc=this.lastTokStartLoc=null;this.lastTokStart=this.lastTokEnd=this.pos;// The context stack is used to superficially track syntactic\n// context to predict whether a regular expression is allowed in a\n// given position.\nthis.context=this.initialContext();this.exprAllowed=true;// Figure out if it's a module code.\nthis.inModule=options.sourceType===\"module\";this.strict=this.inModule||this.strictDirective(this.pos);// Used to signify the start of a potential arrow function\nthis.potentialArrowAt=-1;// Positions to delayed-check that yield/await does not exist in default parameters.\nthis.yieldPos=this.awaitPos=this.awaitIdentPos=0;// Labels in scope.\nthis.labels=[];// Thus-far undefined exports.\nthis.undefinedExports={};// If enabled, skip leading hashbang line.\nif(this.pos===0&&options.allowHashBang&&this.input.slice(0,2)===\"#!\"){this.skipLineComment(2);}// Scope tracking for duplicate variable names (see scope.js)\nthis.scopeStack=[];this.enterScope(SCOPE_TOP);// For RegExp validation\nthis.regexpState=null;};var prototypeAccessors={inFunction:{configurable:true},inGenerator:{configurable:true},inAsync:{configurable:true},allowSuper:{configurable:true},allowDirectSuper:{configurable:true},treatFunctionsAsVar:{configurable:true}};Parser.prototype.parse=function parse(){var node=this.options.program||this.startNode();this.nextToken();return this.parseTopLevel(node);};prototypeAccessors.inFunction.get=function(){return(this.currentVarScope().flags&SCOPE_FUNCTION)>0;};prototypeAccessors.inGenerator.get=function(){return(this.currentVarScope().flags&SCOPE_GENERATOR)>0;};prototypeAccessors.inAsync.get=function(){return(this.currentVarScope().flags&SCOPE_ASYNC)>0;};prototypeAccessors.allowSuper.get=function(){return(this.currentThisScope().flags&SCOPE_SUPER)>0;};prototypeAccessors.allowDirectSuper.get=function(){return(this.currentThisScope().flags&SCOPE_DIRECT_SUPER)>0;};prototypeAccessors.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope());};// Switch to a getter for 7.0.0.\nParser.prototype.inNonArrowFunction=function inNonArrowFunction(){return(this.currentThisScope().flags&SCOPE_FUNCTION)>0;};Parser.extend=function extend(){var plugins=[],len=arguments.length;while(len--){plugins[len]=arguments[len];}var cls=this;for(var i=0;i<plugins.length;i++){cls=plugins[i](cls);}return cls;};Parser.parse=function parse(input,options){return new this(options,input).parse();};Parser.parseExpressionAt=function parseExpressionAt(input,pos,options){var parser=new this(options,input,pos);parser.nextToken();return parser.parseExpression();};Parser.tokenizer=function tokenizer(input,options){return new this(options,input);};Object.defineProperties(Parser.prototype,prototypeAccessors);var pp=Parser.prototype;// ## Parser utilities\nvar literal=/^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;pp.strictDirective=function(start){for(;;){// Try to find string literal.\nskipWhiteSpace.lastIndex=start;start+=skipWhiteSpace.exec(this.input)[0].length;var match=literal.exec(this.input.slice(start));if(!match){return false;}if((match[1]||match[2])===\"use strict\"){skipWhiteSpace.lastIndex=start+match[0].length;var spaceAfter=skipWhiteSpace.exec(this.input),end=spaceAfter.index+spaceAfter[0].length;var next=this.input.charAt(end);return next===\";\"||next===\"}\"||lineBreak.test(spaceAfter[0])&&!(/[(`.[+\\-/*%<>=,?^&]/.test(next)||next===\"!\"&&this.input.charAt(end+1)===\"=\");}start+=match[0].length;// Skip semicolon, if any.\nskipWhiteSpace.lastIndex=start;start+=skipWhiteSpace.exec(this.input)[0].length;if(this.input[start]===\";\"){start++;}}};// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\npp.eat=function(type){if(this.type===type){this.next();return true;}else{return false;}};// Tests whether parsed token is a contextual keyword.\npp.isContextual=function(name){return this.type===types.name&&this.value===name&&!this.containsEsc;};// Consumes contextual keyword if possible.\npp.eatContextual=function(name){if(!this.isContextual(name)){return false;}this.next();return true;};// Asserts that following token is given contextual keyword.\npp.expectContextual=function(name){if(!this.eatContextual(name)){this.unexpected();}};// Test whether a semicolon can be inserted at the current position.\npp.canInsertSemicolon=function(){return this.type===types.eof||this.type===types.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};pp.insertSemicolon=function(){if(this.canInsertSemicolon()){if(this.options.onInsertedSemicolon){this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc);}return true;}};// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\npp.semicolon=function(){if(!this.eat(types.semi)&&!this.insertSemicolon()){this.unexpected();}};pp.afterTrailingComma=function(tokType,notNext){if(this.type===tokType){if(this.options.onTrailingComma){this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc);}if(!notNext){this.next();}return true;}};// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\npp.expect=function(type){this.eat(type)||this.unexpected();};// Raise an unexpected token error.\npp.unexpected=function(pos){this.raise(pos!=null?pos:this.start,\"Unexpected token\");};function DestructuringErrors(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1;}pp.checkPatternErrors=function(refDestructuringErrors,isAssign){if(!refDestructuringErrors){return;}if(refDestructuringErrors.trailingComma>-1){this.raiseRecoverable(refDestructuringErrors.trailingComma,\"Comma is not permitted after the rest element\");}var parens=isAssign?refDestructuringErrors.parenthesizedAssign:refDestructuringErrors.parenthesizedBind;if(parens>-1){this.raiseRecoverable(parens,\"Parenthesized pattern\");}};pp.checkExpressionErrors=function(refDestructuringErrors,andThrow){if(!refDestructuringErrors){return false;}var shorthandAssign=refDestructuringErrors.shorthandAssign;var doubleProto=refDestructuringErrors.doubleProto;if(!andThrow){return shorthandAssign>=0||doubleProto>=0;}if(shorthandAssign>=0){this.raise(shorthandAssign,\"Shorthand property assignments are valid only in destructuring patterns\");}if(doubleProto>=0){this.raiseRecoverable(doubleProto,\"Redefinition of __proto__ property\");}};pp.checkYieldAwaitInDefaultParams=function(){if(this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)){this.raise(this.yieldPos,\"Yield expression cannot be a default value\");}if(this.awaitPos){this.raise(this.awaitPos,\"Await expression cannot be a default value\");}};pp.isSimpleAssignTarget=function(expr){if(expr.type===\"ParenthesizedExpression\"){return this.isSimpleAssignTarget(expr.expression);}return expr.type===\"Identifier\"||expr.type===\"MemberExpression\";};var pp$1=Parser.prototype;// ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\npp$1.parseTopLevel=function(node){var exports={};if(!node.body){node.body=[];}while(this.type!==types.eof){var stmt=this.parseStatement(null,true,exports);node.body.push(stmt);}if(this.inModule){for(var i=0,list=Object.keys(this.undefinedExports);i<list.length;i+=1){var name=list[i];this.raiseRecoverable(this.undefinedExports[name].start,\"Export '\"+name+\"' is not defined\");}}this.adaptDirectivePrologue(node.body);this.next();node.sourceType=this.options.sourceType;return this.finishNode(node,\"Program\");};var loopLabel={kind:\"loop\"},switchLabel={kind:\"switch\"};pp$1.isLet=function(context){if(this.options.ecmaVersion<6||!this.isContextual(\"let\")){return false;}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);// For ambiguous cases, determine if a LexicalDeclaration (or only a\n// Statement) is allowed here. If context is not empty then only a Statement\n// is allowed. However, `let [` is an explicit negative lookahead for\n// ExpressionStatement, so special-case it first.\nif(nextCh===91){return true;}// '['\nif(context){return false;}if(nextCh===123){return true;}// '{'\nif(isIdentifierStart(nextCh,true)){var pos=next+1;while(isIdentifierChar(this.input.charCodeAt(pos),true)){++pos;}var ident=this.input.slice(next,pos);if(!keywordRelationalOperator.test(ident)){return true;}}return false;};// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual(\"async\")){return false;}skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length;return!lineBreak.test(this.input.slice(this.pos,next))&&this.input.slice(next,next+8)===\"function\"&&(next+8===this.input.length||!isIdentifierChar(this.input.charAt(next+8)));};// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\npp$1.parseStatement=function(context,topLevel,exports){var starttype=this.type,node=this.startNode(),kind;if(this.isLet(context)){starttype=types._var;kind=\"let\";}// Most types of statements are recognized by the keyword they\n// start with. Many are trivial to parse, some require a bit of\n// complexity.\nswitch(starttype){case types._break:case types._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case types._debugger:return this.parseDebuggerStatement(node);case types._do:return this.parseDoStatement(node);case types._for:return this.parseForStatement(node);case types._function:// Function as sole body of either an if statement or a labeled statement\n// works, but not when it is part of a labeled statement that is the sole\n// body of an if statement.\nif(context&&(this.strict||context!==\"if\"&&context!==\"label\")&&this.options.ecmaVersion>=6){this.unexpected();}return this.parseFunctionStatement(node,false,!context);case types._class:if(context){this.unexpected();}return this.parseClass(node,true);case types._if:return this.parseIfStatement(node);case types._return:return this.parseReturnStatement(node);case types._switch:return this.parseSwitchStatement(node);case types._throw:return this.parseThrowStatement(node);case types._try:return this.parseTryStatement(node);case types._const:case types._var:kind=kind||this.value;if(context&&kind!==\"var\"){this.unexpected();}return this.parseVarStatement(node,kind);case types._while:return this.parseWhileStatement(node);case types._with:return this.parseWithStatement(node);case types.braceL:return this.parseBlock(true,node);case types.semi:return this.parseEmptyStatement(node);case types._export:case types._import:if(this.options.ecmaVersion>10&&starttype===types._import){skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input);var next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(nextCh===40||nextCh===46)// '(' or '.'\n{return this.parseExpressionStatement(node,this.parseExpression());}}if(!this.options.allowImportExportEverywhere){if(!topLevel){this.raise(this.start,\"'import' and 'export' may only appear at the top level\");}if(!this.inModule){this.raise(this.start,\"'import' and 'export' may appear only with 'sourceType: module'\");}}return starttype===types._import?this.parseImport(node):this.parseExport(node,exports);// If the statement does not start with a statement keyword or a\n// brace, it's an ExpressionStatement or LabeledStatement. We\n// simply start parsing an expression, and afterwards, if the\n// next token is a colon and the expression was a simple\n// Identifier node, we switch to interpreting it as a label.\ndefault:if(this.isAsyncFunction()){if(context){this.unexpected();}this.next();return this.parseFunctionStatement(node,true,!context);}var maybeName=this.value,expr=this.parseExpression();if(starttype===types.name&&expr.type===\"Identifier\"&&this.eat(types.colon)){return this.parseLabeledStatement(node,maybeName,expr,context);}else{return this.parseExpressionStatement(node,expr);}}};pp$1.parseBreakContinueStatement=function(node,keyword){var isBreak=keyword===\"break\";this.next();if(this.eat(types.semi)||this.insertSemicolon()){node.label=null;}else if(this.type!==types.name){this.unexpected();}else{node.label=this.parseIdent();this.semicolon();}// Verify that there is an actual destination to break or\n// continue to.\nvar i=0;for(;i<this.labels.length;++i){var lab=this.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind===\"loop\")){break;}if(node.label&&isBreak){break;}}}if(i===this.labels.length){this.raise(node.start,\"Unsyntactic \"+keyword);}return this.finishNode(node,isBreak?\"BreakStatement\":\"ContinueStatement\");};pp$1.parseDebuggerStatement=function(node){this.next();this.semicolon();return this.finishNode(node,\"DebuggerStatement\");};pp$1.parseDoStatement=function(node){this.next();this.labels.push(loopLabel);node.body=this.parseStatement(\"do\");this.labels.pop();this.expect(types._while);node.test=this.parseParenExpression();if(this.options.ecmaVersion>=6){this.eat(types.semi);}else{this.semicolon();}return this.finishNode(node,\"DoWhileStatement\");};// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\npp$1.parseForStatement=function(node){this.next();var awaitAt=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual(\"await\")?this.lastTokStart:-1;this.labels.push(loopLabel);this.enterScope(0);this.expect(types.parenL);if(this.type===types.semi){if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,null);}var isLet=this.isLet();if(this.type===types._var||this.type===types._const||isLet){var init$1=this.startNode(),kind=isLet?\"let\":this.value;this.next();this.parseVar(init$1,true,kind);this.finishNode(init$1,\"VariableDeclaration\");if((this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\"))&&init$1.declarations.length===1){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt);}}else{node.await=awaitAt>-1;}}return this.parseForIn(node,init$1);}if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,init$1);}var refDestructuringErrors=new DestructuringErrors();var init=this.parseExpression(true,refDestructuringErrors);if(this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\")){if(this.options.ecmaVersion>=9){if(this.type===types._in){if(awaitAt>-1){this.unexpected(awaitAt);}}else{node.await=awaitAt>-1;}}this.toAssignable(init,false,refDestructuringErrors);this.checkLVal(init);return this.parseForIn(node,init);}else{this.checkExpressionErrors(refDestructuringErrors,true);}if(awaitAt>-1){this.unexpected(awaitAt);}return this.parseFor(node,init);};pp$1.parseFunctionStatement=function(node,isAsync,declarationPosition){this.next();return this.parseFunction(node,FUNC_STATEMENT|(declarationPosition?0:FUNC_HANGING_STATEMENT),false,isAsync);};pp$1.parseIfStatement=function(node){this.next();node.test=this.parseParenExpression();// allow function declarations in branches, but only in non-strict mode\nnode.consequent=this.parseStatement(\"if\");node.alternate=this.eat(types._else)?this.parseStatement(\"if\"):null;return this.finishNode(node,\"IfStatement\");};pp$1.parseReturnStatement=function(node){if(!this.inFunction&&!this.options.allowReturnOutsideFunction){this.raise(this.start,\"'return' outside of function\");}this.next();// In `return` (and `break`/`continue`), the keywords with\n// optional arguments, we eagerly look for a semicolon or the\n// possibility to insert one.\nif(this.eat(types.semi)||this.insertSemicolon()){node.argument=null;}else{node.argument=this.parseExpression();this.semicolon();}return this.finishNode(node,\"ReturnStatement\");};pp$1.parseSwitchStatement=function(node){this.next();node.discriminant=this.parseParenExpression();node.cases=[];this.expect(types.braceL);this.labels.push(switchLabel);this.enterScope(0);// Statements under must be grouped (by label) in SwitchCase\n// nodes. `cur` is used to keep the node that we are currently\n// adding statements to.\nvar cur;for(var sawDefault=false;this.type!==types.braceR;){if(this.type===types._case||this.type===types._default){var isCase=this.type===types._case;if(cur){this.finishNode(cur,\"SwitchCase\");}node.cases.push(cur=this.startNode());cur.consequent=[];this.next();if(isCase){cur.test=this.parseExpression();}else{if(sawDefault){this.raiseRecoverable(this.lastTokStart,\"Multiple default clauses\");}sawDefault=true;cur.test=null;}this.expect(types.colon);}else{if(!cur){this.unexpected();}cur.consequent.push(this.parseStatement(null));}}this.exitScope();if(cur){this.finishNode(cur,\"SwitchCase\");}this.next();// Closing brace\nthis.labels.pop();return this.finishNode(node,\"SwitchStatement\");};pp$1.parseThrowStatement=function(node){this.next();if(lineBreak.test(this.input.slice(this.lastTokEnd,this.start))){this.raise(this.lastTokEnd,\"Illegal newline after throw\");}node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,\"ThrowStatement\");};// Reused empty array added for node fields that are always empty.\nvar empty=[];pp$1.parseTryStatement=function(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.type===types._catch){var clause=this.startNode();this.next();if(this.eat(types.parenL)){clause.param=this.parseBindingAtom();var simple=clause.param.type===\"Identifier\";this.enterScope(simple?SCOPE_SIMPLE_CATCH:0);this.checkLVal(clause.param,simple?BIND_SIMPLE_CATCH:BIND_LEXICAL);this.expect(types.parenR);}else{if(this.options.ecmaVersion<10){this.unexpected();}clause.param=null;this.enterScope(0);}clause.body=this.parseBlock(false);this.exitScope();node.handler=this.finishNode(clause,\"CatchClause\");}node.finalizer=this.eat(types._finally)?this.parseBlock():null;if(!node.handler&&!node.finalizer){this.raise(node.start,\"Missing catch or finally clause\");}return this.finishNode(node,\"TryStatement\");};pp$1.parseVarStatement=function(node,kind){this.next();this.parseVar(node,false,kind);this.semicolon();return this.finishNode(node,\"VariableDeclaration\");};pp$1.parseWhileStatement=function(node){this.next();node.test=this.parseParenExpression();this.labels.push(loopLabel);node.body=this.parseStatement(\"while\");this.labels.pop();return this.finishNode(node,\"WhileStatement\");};pp$1.parseWithStatement=function(node){if(this.strict){this.raise(this.start,\"'with' in strict mode\");}this.next();node.object=this.parseParenExpression();node.body=this.parseStatement(\"with\");return this.finishNode(node,\"WithStatement\");};pp$1.parseEmptyStatement=function(node){this.next();return this.finishNode(node,\"EmptyStatement\");};pp$1.parseLabeledStatement=function(node,maybeName,expr,context){for(var i$1=0,list=this.labels;i$1<list.length;i$1+=1){var label=list[i$1];if(label.name===maybeName){this.raise(expr.start,\"Label '\"+maybeName+\"' is already declared\");}}var kind=this.type.isLoop?\"loop\":this.type===types._switch?\"switch\":null;for(var i=this.labels.length-1;i>=0;i--){var label$1=this.labels[i];if(label$1.statementStart===node.start){// Update information about previous labels on this node\nlabel$1.statementStart=this.start;label$1.kind=kind;}else{break;}}this.labels.push({name:maybeName,kind:kind,statementStart:this.start});node.body=this.parseStatement(context?context.indexOf(\"label\")===-1?context+\"label\":context:\"label\");this.labels.pop();node.label=expr;return this.finishNode(node,\"LabeledStatement\");};pp$1.parseExpressionStatement=function(node,expr){node.expression=expr;this.semicolon();return this.finishNode(node,\"ExpressionStatement\");};// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\npp$1.parseBlock=function(createNewLexicalScope,node,exitStrict){if(createNewLexicalScope===void 0)createNewLexicalScope=true;if(node===void 0)node=this.startNode();node.body=[];this.expect(types.braceL);if(createNewLexicalScope){this.enterScope(0);}while(this.type!==types.braceR){var stmt=this.parseStatement(null);node.body.push(stmt);}if(exitStrict){this.strict=false;}this.next();if(createNewLexicalScope){this.exitScope();}return this.finishNode(node,\"BlockStatement\");};// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\npp$1.parseFor=function(node,init){node.init=init;this.expect(types.semi);node.test=this.type===types.semi?null:this.parseExpression();this.expect(types.semi);node.update=this.type===types.parenR?null:this.parseExpression();this.expect(types.parenR);node.body=this.parseStatement(\"for\");this.exitScope();this.labels.pop();return this.finishNode(node,\"ForStatement\");};// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\npp$1.parseForIn=function(node,init){var isForIn=this.type===types._in;this.next();if(init.type===\"VariableDeclaration\"&&init.declarations[0].init!=null&&(!isForIn||this.options.ecmaVersion<8||this.strict||init.kind!==\"var\"||init.declarations[0].id.type!==\"Identifier\")){this.raise(init.start,(isForIn?\"for-in\":\"for-of\")+\" loop variable declaration may not have an initializer\");}else if(init.type===\"AssignmentPattern\"){this.raise(init.start,\"Invalid left-hand side in for-loop\");}node.left=init;node.right=isForIn?this.parseExpression():this.parseMaybeAssign();this.expect(types.parenR);node.body=this.parseStatement(\"for\");this.exitScope();this.labels.pop();return this.finishNode(node,isForIn?\"ForInStatement\":\"ForOfStatement\");};// Parse a list of variable declarations.\npp$1.parseVar=function(node,isFor,kind){node.declarations=[];node.kind=kind;for(;;){var decl=this.startNode();this.parseVarId(decl,kind);if(this.eat(types.eq)){decl.init=this.parseMaybeAssign(isFor);}else if(kind===\"const\"&&!(this.type===types._in||this.options.ecmaVersion>=6&&this.isContextual(\"of\"))){this.unexpected();}else if(decl.id.type!==\"Identifier\"&&!(isFor&&(this.type===types._in||this.isContextual(\"of\")))){this.raise(this.lastTokEnd,\"Complex binding patterns require an initialization value\");}else{decl.init=null;}node.declarations.push(this.finishNode(decl,\"VariableDeclarator\"));if(!this.eat(types.comma)){break;}}return node;};pp$1.parseVarId=function(decl,kind){decl.id=this.parseBindingAtom();this.checkLVal(decl.id,kind===\"var\"?BIND_VAR:BIND_LEXICAL,false);};var FUNC_STATEMENT=1,FUNC_HANGING_STATEMENT=2,FUNC_NULLABLE_ID=4;// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction=function(node,statement,allowExpressionBody,isAsync){this.initFunction(node);if(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!isAsync){if(this.type===types.star&&statement&FUNC_HANGING_STATEMENT){this.unexpected();}node.generator=this.eat(types.star);}if(this.options.ecmaVersion>=8){node.async=!!isAsync;}if(statement&FUNC_STATEMENT){node.id=statement&FUNC_NULLABLE_ID&&this.type!==types.name?null:this.parseIdent();if(node.id&&!(statement&FUNC_HANGING_STATEMENT))// If it is a regular function declaration in sloppy mode, then it is\n// subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n// mode depends on properties of the current scope (see\n// treatFunctionsAsVar).\n{this.checkLVal(node.id,this.strict||node.generator||node.async?this.treatFunctionsAsVar?BIND_VAR:BIND_LEXICAL:BIND_FUNCTION);}}var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;this.enterScope(functionFlags(node.async,node.generator));if(!(statement&FUNC_STATEMENT)){node.id=this.type===types.name?this.parseIdent():null;}this.parseFunctionParams(node);this.parseFunctionBody(node,allowExpressionBody,false);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,statement&FUNC_STATEMENT?\"FunctionDeclaration\":\"FunctionExpression\");};pp$1.parseFunctionParams=function(node){this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams();};// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\npp$1.parseClass=function(node,isStatement){this.next();// ecma-262 14.6 Class Definitions\n// A class definition is always strict mode code.\nvar oldStrict=this.strict;this.strict=true;this.parseClassId(node,isStatement);this.parseClassSuper(node);var classBody=this.startNode();var hadConstructor=false;classBody.body=[];this.expect(types.braceL);while(this.type!==types.braceR){var element=this.parseClassElement(node.superClass!==null);if(element){classBody.body.push(element);if(element.type===\"MethodDefinition\"&&element.kind===\"constructor\"){if(hadConstructor){this.raise(element.start,\"Duplicate constructor in the same class\");}hadConstructor=true;}}}this.strict=oldStrict;this.next();node.body=this.finishNode(classBody,\"ClassBody\");return this.finishNode(node,isStatement?\"ClassDeclaration\":\"ClassExpression\");};pp$1.parseClassElement=function(constructorAllowsSuper){var this$1=this;if(this.eat(types.semi)){return null;}var method=this.startNode();var tryContextual=function tryContextual(k,noLineBreak){if(noLineBreak===void 0)noLineBreak=false;var start=this$1.start,startLoc=this$1.startLoc;if(!this$1.eatContextual(k)){return false;}if(this$1.type!==types.parenL&&(!noLineBreak||!this$1.canInsertSemicolon())){return true;}if(method.key){this$1.unexpected();}method.computed=false;method.key=this$1.startNodeAt(start,startLoc);method.key.name=k;this$1.finishNode(method.key,\"Identifier\");return false;};method.kind=\"method\";method.static=tryContextual(\"static\");var isGenerator=this.eat(types.star);var isAsync=false;if(!isGenerator){if(this.options.ecmaVersion>=8&&tryContextual(\"async\",true)){isAsync=true;isGenerator=this.options.ecmaVersion>=9&&this.eat(types.star);}else if(tryContextual(\"get\")){method.kind=\"get\";}else if(tryContextual(\"set\")){method.kind=\"set\";}}if(!method.key){this.parsePropertyName(method);}var key=method.key;var allowsDirectSuper=false;if(!method.computed&&!method.static&&(key.type===\"Identifier\"&&key.name===\"constructor\"||key.type===\"Literal\"&&key.value===\"constructor\")){if(method.kind!==\"method\"){this.raise(key.start,\"Constructor can't have get/set modifier\");}if(isGenerator){this.raise(key.start,\"Constructor can't be a generator\");}if(isAsync){this.raise(key.start,\"Constructor can't be an async method\");}method.kind=\"constructor\";allowsDirectSuper=constructorAllowsSuper;}else if(method.static&&key.type===\"Identifier\"&&key.name===\"prototype\"){this.raise(key.start,\"Classes may not have a static property named prototype\");}this.parseClassMethod(method,isGenerator,isAsync,allowsDirectSuper);if(method.kind===\"get\"&&method.value.params.length!==0){this.raiseRecoverable(method.value.start,\"getter should have no params\");}if(method.kind===\"set\"&&method.value.params.length!==1){this.raiseRecoverable(method.value.start,\"setter should have exactly one param\");}if(method.kind===\"set\"&&method.value.params[0].type===\"RestElement\"){this.raiseRecoverable(method.value.params[0].start,\"Setter cannot use rest params\");}return method;};pp$1.parseClassMethod=function(method,isGenerator,isAsync,allowsDirectSuper){method.value=this.parseMethod(isGenerator,isAsync,allowsDirectSuper);return this.finishNode(method,\"MethodDefinition\");};pp$1.parseClassId=function(node,isStatement){if(this.type===types.name){node.id=this.parseIdent();if(isStatement){this.checkLVal(node.id,BIND_LEXICAL,false);}}else{if(isStatement===true){this.unexpected();}node.id=null;}};pp$1.parseClassSuper=function(node){node.superClass=this.eat(types._extends)?this.parseExprSubscripts():null;};// Parses module export declaration.\npp$1.parseExport=function(node,exports){this.next();// export * from '...'\nif(this.eat(types.star)){if(this.options.ecmaVersion>=11){if(this.eatContextual(\"as\")){node.exported=this.parseIdent(true);this.checkExport(exports,node.exported.name,this.lastTokStart);}else{node.exported=null;}}this.expectContextual(\"from\");if(this.type!==types.string){this.unexpected();}node.source=this.parseExprAtom();this.semicolon();return this.finishNode(node,\"ExportAllDeclaration\");}if(this.eat(types._default)){// export default ...\nthis.checkExport(exports,\"default\",this.lastTokStart);var isAsync;if(this.type===types._function||(isAsync=this.isAsyncFunction())){var fNode=this.startNode();this.next();if(isAsync){this.next();}node.declaration=this.parseFunction(fNode,FUNC_STATEMENT|FUNC_NULLABLE_ID,false,isAsync);}else if(this.type===types._class){var cNode=this.startNode();node.declaration=this.parseClass(cNode,\"nullableID\");}else{node.declaration=this.parseMaybeAssign();this.semicolon();}return this.finishNode(node,\"ExportDefaultDeclaration\");}// export var|const|let|function|class ...\nif(this.shouldParseExportStatement()){node.declaration=this.parseStatement(null);if(node.declaration.type===\"VariableDeclaration\"){this.checkVariableExport(exports,node.declaration.declarations);}else{this.checkExport(exports,node.declaration.id.name,node.declaration.id.start);}node.specifiers=[];node.source=null;}else{// export { x, y as z } [from '...']\nnode.declaration=null;node.specifiers=this.parseExportSpecifiers(exports);if(this.eatContextual(\"from\")){if(this.type!==types.string){this.unexpected();}node.source=this.parseExprAtom();}else{for(var i=0,list=node.specifiers;i<list.length;i+=1){// check for keywords used as local names\nvar spec=list[i];this.checkUnreserved(spec.local);// check if export is defined\nthis.checkLocalExport(spec.local);}node.source=null;}this.semicolon();}return this.finishNode(node,\"ExportNamedDeclaration\");};pp$1.checkExport=function(exports,name,pos){if(!exports){return;}if(has(exports,name)){this.raiseRecoverable(pos,\"Duplicate export '\"+name+\"'\");}exports[name]=true;};pp$1.checkPatternExport=function(exports,pat){var type=pat.type;if(type===\"Identifier\"){this.checkExport(exports,pat.name,pat.start);}else if(type===\"ObjectPattern\"){for(var i=0,list=pat.properties;i<list.length;i+=1){var prop=list[i];this.checkPatternExport(exports,prop);}}else if(type===\"ArrayPattern\"){for(var i$1=0,list$1=pat.elements;i$1<list$1.length;i$1+=1){var elt=list$1[i$1];if(elt){this.checkPatternExport(exports,elt);}}}else if(type===\"Property\"){this.checkPatternExport(exports,pat.value);}else if(type===\"AssignmentPattern\"){this.checkPatternExport(exports,pat.left);}else if(type===\"RestElement\"){this.checkPatternExport(exports,pat.argument);}else if(type===\"ParenthesizedExpression\"){this.checkPatternExport(exports,pat.expression);}};pp$1.checkVariableExport=function(exports,decls){if(!exports){return;}for(var i=0,list=decls;i<list.length;i+=1){var decl=list[i];this.checkPatternExport(exports,decl.id);}};pp$1.shouldParseExportStatement=function(){return this.type.keyword===\"var\"||this.type.keyword===\"const\"||this.type.keyword===\"class\"||this.type.keyword===\"function\"||this.isLet()||this.isAsyncFunction();};// Parses a comma-separated list of module exports.\npp$1.parseExportSpecifiers=function(exports){var nodes=[],first=true;// export { x, y as z } [from '...']\nthis.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var node=this.startNode();node.local=this.parseIdent(true);node.exported=this.eatContextual(\"as\")?this.parseIdent(true):node.local;this.checkExport(exports,node.exported.name,node.exported.start);nodes.push(this.finishNode(node,\"ExportSpecifier\"));}return nodes;};// Parses import declaration.\npp$1.parseImport=function(node){this.next();// import '...'\nif(this.type===types.string){node.specifiers=empty;node.source=this.parseExprAtom();}else{node.specifiers=this.parseImportSpecifiers();this.expectContextual(\"from\");node.source=this.type===types.string?this.parseExprAtom():this.unexpected();}this.semicolon();return this.finishNode(node,\"ImportDeclaration\");};// Parses a comma-separated list of module imports.\npp$1.parseImportSpecifiers=function(){var nodes=[],first=true;if(this.type===types.name){// import defaultObj, { x, y as z } from '...'\nvar node=this.startNode();node.local=this.parseIdent();this.checkLVal(node.local,BIND_LEXICAL);nodes.push(this.finishNode(node,\"ImportDefaultSpecifier\"));if(!this.eat(types.comma)){return nodes;}}if(this.type===types.star){var node$1=this.startNode();this.next();this.expectContextual(\"as\");node$1.local=this.parseIdent();this.checkLVal(node$1.local,BIND_LEXICAL);nodes.push(this.finishNode(node$1,\"ImportNamespaceSpecifier\"));return nodes;}this.expect(types.braceL);while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var node$2=this.startNode();node$2.imported=this.parseIdent(true);if(this.eatContextual(\"as\")){node$2.local=this.parseIdent();}else{this.checkUnreserved(node$2.imported);node$2.local=node$2.imported;}this.checkLVal(node$2.local,BIND_LEXICAL);nodes.push(this.finishNode(node$2,\"ImportSpecifier\"));}return nodes;};// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue=function(statements){for(var i=0;i<statements.length&&this.isDirectiveCandidate(statements[i]);++i){statements[i].directive=statements[i].expression.raw.slice(1,-1);}};pp$1.isDirectiveCandidate=function(statement){return statement.type===\"ExpressionStatement\"&&statement.expression.type===\"Literal\"&&typeof statement.expression.value===\"string\"&&(// Reject parenthesized strings.\nthis.input[statement.start]===\"\\\"\"||this.input[statement.start]===\"'\");};var pp$2=Parser.prototype;// Convert existing expression atom to assignable pattern\n// if possible.\npp$2.toAssignable=function(node,isBinding,refDestructuringErrors){if(this.options.ecmaVersion>=6&&node){switch(node.type){case\"Identifier\":if(this.inAsync&&node.name===\"await\"){this.raise(node.start,\"Cannot use 'await' as identifier inside an async function\");}break;case\"ObjectPattern\":case\"ArrayPattern\":case\"RestElement\":break;case\"ObjectExpression\":node.type=\"ObjectPattern\";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}for(var i=0,list=node.properties;i<list.length;i+=1){var prop=list[i];this.toAssignable(prop,isBinding);// Early error:\n//   AssignmentRestProperty[Yield, Await] :\n//     `...` DestructuringAssignmentTarget[Yield, Await]\n//\n//   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\nif(prop.type===\"RestElement\"&&(prop.argument.type===\"ArrayPattern\"||prop.argument.type===\"ObjectPattern\")){this.raise(prop.argument.start,\"Unexpected token\");}}break;case\"Property\":// AssignmentProperty has type === \"Property\"\nif(node.kind!==\"init\"){this.raise(node.key.start,\"Object pattern can't contain getter or setter\");}this.toAssignable(node.value,isBinding);break;case\"ArrayExpression\":node.type=\"ArrayPattern\";if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}this.toAssignableList(node.elements,isBinding);break;case\"SpreadElement\":node.type=\"RestElement\";this.toAssignable(node.argument,isBinding);if(node.argument.type===\"AssignmentPattern\"){this.raise(node.argument.start,\"Rest elements cannot have a default value\");}break;case\"AssignmentExpression\":if(node.operator!==\"=\"){this.raise(node.left.end,\"Only '=' operator can be used for specifying default value.\");}node.type=\"AssignmentPattern\";delete node.operator;this.toAssignable(node.left,isBinding);// falls through to AssignmentPattern\ncase\"AssignmentPattern\":break;case\"ParenthesizedExpression\":this.toAssignable(node.expression,isBinding,refDestructuringErrors);break;case\"ChainExpression\":this.raiseRecoverable(node.start,\"Optional chaining cannot appear in left-hand side\");break;case\"MemberExpression\":if(!isBinding){break;}default:this.raise(node.start,\"Assigning to rvalue\");}}else if(refDestructuringErrors){this.checkPatternErrors(refDestructuringErrors,true);}return node;};// Convert list of expression atoms to binding list.\npp$2.toAssignableList=function(exprList,isBinding){var end=exprList.length;for(var i=0;i<end;i++){var elt=exprList[i];if(elt){this.toAssignable(elt,isBinding);}}if(end){var last=exprList[end-1];if(this.options.ecmaVersion===6&&isBinding&&last&&last.type===\"RestElement\"&&last.argument.type!==\"Identifier\"){this.unexpected(last.argument.start);}}return exprList;};// Parses spread element.\npp$2.parseSpread=function(refDestructuringErrors){var node=this.startNode();this.next();node.argument=this.parseMaybeAssign(false,refDestructuringErrors);return this.finishNode(node,\"SpreadElement\");};pp$2.parseRestBinding=function(){var node=this.startNode();this.next();// RestElement inside of a function parameter must be an identifier\nif(this.options.ecmaVersion===6&&this.type!==types.name){this.unexpected();}node.argument=this.parseBindingAtom();return this.finishNode(node,\"RestElement\");};// Parses lvalue (assignable) atom.\npp$2.parseBindingAtom=function(){if(this.options.ecmaVersion>=6){switch(this.type){case types.bracketL:var node=this.startNode();this.next();node.elements=this.parseBindingList(types.bracketR,true,true);return this.finishNode(node,\"ArrayPattern\");case types.braceL:return this.parseObj(true);}}return this.parseIdent();};pp$2.parseBindingList=function(close,allowEmpty,allowTrailingComma){var elts=[],first=true;while(!this.eat(close)){if(first){first=false;}else{this.expect(types.comma);}if(allowEmpty&&this.type===types.comma){elts.push(null);}else if(allowTrailingComma&&this.afterTrailingComma(close)){break;}else if(this.type===types.ellipsis){var rest=this.parseRestBinding();this.parseBindingListItem(rest);elts.push(rest);if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}this.expect(close);break;}else{var elem=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(elem);elts.push(elem);}}return elts;};pp$2.parseBindingListItem=function(param){return param;};// Parses assignment pattern around given atom if possible.\npp$2.parseMaybeDefault=function(startPos,startLoc,left){left=left||this.parseBindingAtom();if(this.options.ecmaVersion<6||!this.eat(types.eq)){return left;}var node=this.startNodeAt(startPos,startLoc);node.left=left;node.right=this.parseMaybeAssign();return this.finishNode(node,\"AssignmentPattern\");};// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\npp$2.checkLVal=function(expr,bindingType,checkClashes){if(bindingType===void 0)bindingType=BIND_NONE;switch(expr.type){case\"Identifier\":if(bindingType===BIND_LEXICAL&&expr.name===\"let\"){this.raiseRecoverable(expr.start,\"let is disallowed as a lexically bound name\");}if(this.strict&&this.reservedWordsStrictBind.test(expr.name)){this.raiseRecoverable(expr.start,(bindingType?\"Binding \":\"Assigning to \")+expr.name+\" in strict mode\");}if(checkClashes){if(has(checkClashes,expr.name)){this.raiseRecoverable(expr.start,\"Argument name clash\");}checkClashes[expr.name]=true;}if(bindingType!==BIND_NONE&&bindingType!==BIND_OUTSIDE){this.declareName(expr.name,bindingType,expr.start);}break;case\"ChainExpression\":this.raiseRecoverable(expr.start,\"Optional chaining cannot appear in left-hand side\");break;case\"MemberExpression\":if(bindingType){this.raiseRecoverable(expr.start,\"Binding member expression\");}break;case\"ObjectPattern\":for(var i=0,list=expr.properties;i<list.length;i+=1){var prop=list[i];this.checkLVal(prop,bindingType,checkClashes);}break;case\"Property\":// AssignmentProperty has type === \"Property\"\nthis.checkLVal(expr.value,bindingType,checkClashes);break;case\"ArrayPattern\":for(var i$1=0,list$1=expr.elements;i$1<list$1.length;i$1+=1){var elem=list$1[i$1];if(elem){this.checkLVal(elem,bindingType,checkClashes);}}break;case\"AssignmentPattern\":this.checkLVal(expr.left,bindingType,checkClashes);break;case\"RestElement\":this.checkLVal(expr.argument,bindingType,checkClashes);break;case\"ParenthesizedExpression\":this.checkLVal(expr.expression,bindingType,checkClashes);break;default:this.raise(expr.start,(bindingType?\"Binding\":\"Assigning to\")+\" rvalue\");}};// A recursive descent parser operates by defining functions for all\nvar pp$3=Parser.prototype;// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\npp$3.checkPropClash=function(prop,propHash,refDestructuringErrors){if(this.options.ecmaVersion>=9&&prop.type===\"SpreadElement\"){return;}if(this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand)){return;}var key=prop.key;var name;switch(key.type){case\"Identifier\":name=key.name;break;case\"Literal\":name=String(key.value);break;default:return;}var kind=prop.kind;if(this.options.ecmaVersion>=6){if(name===\"__proto__\"&&kind===\"init\"){if(propHash.proto){if(refDestructuringErrors){if(refDestructuringErrors.doubleProto<0){refDestructuringErrors.doubleProto=key.start;}// Backwards-compat kludge. Can be removed in version 6.0\n}else{this.raiseRecoverable(key.start,\"Redefinition of __proto__ property\");}}propHash.proto=true;}return;}name=\"$\"+name;var other=propHash[name];if(other){var redefinition;if(kind===\"init\"){redefinition=this.strict&&other.init||other.get||other.set;}else{redefinition=other.init||other[kind];}if(redefinition){this.raiseRecoverable(key.start,\"Redefinition of property\");}}else{other=propHash[name]={init:false,get:false,set:false};}other[kind]=true;};// ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\npp$3.parseExpression=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeAssign(noIn,refDestructuringErrors);if(this.type===types.comma){var node=this.startNodeAt(startPos,startLoc);node.expressions=[expr];while(this.eat(types.comma)){node.expressions.push(this.parseMaybeAssign(noIn,refDestructuringErrors));}return this.finishNode(node,\"SequenceExpression\");}return expr;};// Parse an assignment expression. This includes applications of\n// operators like `+=`.\npp$3.parseMaybeAssign=function(noIn,refDestructuringErrors,afterLeftParse){if(this.isContextual(\"yield\")){if(this.inGenerator){return this.parseYield(noIn);}// The tokenizer will assume an expression is allowed after\n// `yield`, but this isn't that kind of yield\nelse{this.exprAllowed=false;}}var ownDestructuringErrors=false,oldParenAssign=-1,oldTrailingComma=-1;if(refDestructuringErrors){oldParenAssign=refDestructuringErrors.parenthesizedAssign;oldTrailingComma=refDestructuringErrors.trailingComma;refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=-1;}else{refDestructuringErrors=new DestructuringErrors();ownDestructuringErrors=true;}var startPos=this.start,startLoc=this.startLoc;if(this.type===types.parenL||this.type===types.name){this.potentialArrowAt=this.start;}var left=this.parseMaybeConditional(noIn,refDestructuringErrors);if(afterLeftParse){left=afterLeftParse.call(this,left,startPos,startLoc);}if(this.type.isAssign){var node=this.startNodeAt(startPos,startLoc);node.operator=this.value;node.left=this.type===types.eq?this.toAssignable(left,false,refDestructuringErrors):left;if(!ownDestructuringErrors){refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=refDestructuringErrors.doubleProto=-1;}if(refDestructuringErrors.shorthandAssign>=node.left.start){refDestructuringErrors.shorthandAssign=-1;}// reset because shorthand default was used correctly\nthis.checkLVal(left);this.next();node.right=this.parseMaybeAssign(noIn);return this.finishNode(node,\"AssignmentExpression\");}else{if(ownDestructuringErrors){this.checkExpressionErrors(refDestructuringErrors,true);}}if(oldParenAssign>-1){refDestructuringErrors.parenthesizedAssign=oldParenAssign;}if(oldTrailingComma>-1){refDestructuringErrors.trailingComma=oldTrailingComma;}return left;};// Parse a ternary conditional (`?:`) operator.\npp$3.parseMaybeConditional=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprOps(noIn,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}if(this.eat(types.question)){var node=this.startNodeAt(startPos,startLoc);node.test=expr;node.consequent=this.parseMaybeAssign();this.expect(types.colon);node.alternate=this.parseMaybeAssign(noIn);return this.finishNode(node,\"ConditionalExpression\");}return expr;};// Start the precedence parser.\npp$3.parseExprOps=function(noIn,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseMaybeUnary(refDestructuringErrors,false);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}return expr.start===startPos&&expr.type===\"ArrowFunctionExpression\"?expr:this.parseExprOp(expr,startPos,startLoc,-1,noIn);};// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\npp$3.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,noIn){var prec=this.type.binop;if(prec!=null&&(!noIn||this.type!==types._in)){if(prec>minPrec){var logical=this.type===types.logicalOR||this.type===types.logicalAND;var coalesce=this.type===types.coalesce;if(coalesce){// Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n// In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\nprec=types.logicalAND.binop;}var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc;var right=this.parseExprOp(this.parseMaybeUnary(null,false),startPos,startLoc,prec,noIn);var node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical||coalesce);if(logical&&this.type===types.coalesce||coalesce&&(this.type===types.logicalOR||this.type===types.logicalAND)){this.raiseRecoverable(this.start,\"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");}return this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,noIn);}}return left;};pp$3.buildBinary=function(startPos,startLoc,left,right,op,logical){var node=this.startNodeAt(startPos,startLoc);node.left=left;node.operator=op;node.right=right;return this.finishNode(node,logical?\"LogicalExpression\":\"BinaryExpression\");};// Parse unary operators, both prefix and postfix.\npp$3.parseMaybeUnary=function(refDestructuringErrors,sawUnary){var startPos=this.start,startLoc=this.startLoc,expr;if(this.isContextual(\"await\")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)){expr=this.parseAwait();sawUnary=true;}else if(this.type.prefix){var node=this.startNode(),update=this.type===types.incDec;node.operator=this.value;node.prefix=true;this.next();node.argument=this.parseMaybeUnary(null,true);this.checkExpressionErrors(refDestructuringErrors,true);if(update){this.checkLVal(node.argument);}else if(this.strict&&node.operator===\"delete\"&&node.argument.type===\"Identifier\"){this.raiseRecoverable(node.start,\"Deleting local variable in strict mode\");}else{sawUnary=true;}expr=this.finishNode(node,update?\"UpdateExpression\":\"UnaryExpression\");}else{expr=this.parseExprSubscripts(refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors)){return expr;}while(this.type.postfix&&!this.canInsertSemicolon()){var node$1=this.startNodeAt(startPos,startLoc);node$1.operator=this.value;node$1.prefix=false;node$1.argument=expr;this.checkLVal(expr);this.next();expr=this.finishNode(node$1,\"UpdateExpression\");}}if(!sawUnary&&this.eat(types.starstar)){return this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,false),\"**\",false);}else{return expr;}};// Parse call, dot, and `[]`-subscript expressions.\npp$3.parseExprSubscripts=function(refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc;var expr=this.parseExprAtom(refDestructuringErrors);if(expr.type===\"ArrowFunctionExpression\"&&this.input.slice(this.lastTokStart,this.lastTokEnd)!==\")\"){return expr;}var result=this.parseSubscripts(expr,startPos,startLoc);if(refDestructuringErrors&&result.type===\"MemberExpression\"){if(refDestructuringErrors.parenthesizedAssign>=result.start){refDestructuringErrors.parenthesizedAssign=-1;}if(refDestructuringErrors.parenthesizedBind>=result.start){refDestructuringErrors.parenthesizedBind=-1;}}return result;};pp$3.parseSubscripts=function(base,startPos,startLoc,noCalls){var maybeAsyncArrow=this.options.ecmaVersion>=8&&base.type===\"Identifier\"&&base.name===\"async\"&&this.lastTokEnd===base.end&&!this.canInsertSemicolon()&&base.end-base.start===5&&this.potentialArrowAt===base.start;var optionalChained=false;while(true){var element=this.parseSubscript(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained);if(element.optional){optionalChained=true;}if(element===base||element.type===\"ArrowFunctionExpression\"){if(optionalChained){var chainNode=this.startNodeAt(startPos,startLoc);chainNode.expression=element;element=this.finishNode(chainNode,\"ChainExpression\");}return element;}base=element;}};pp$3.parseSubscript=function(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained){var optionalSupported=this.options.ecmaVersion>=11;var optional=optionalSupported&&this.eat(types.questionDot);if(noCalls&&optional){this.raise(this.lastTokStart,\"Optional chaining cannot appear in the callee of new expressions\");}var computed=this.eat(types.bracketL);if(computed||optional&&this.type!==types.parenL&&this.type!==types.backQuote||this.eat(types.dot)){var node=this.startNodeAt(startPos,startLoc);node.object=base;node.property=computed?this.parseExpression():this.parseIdent(this.options.allowReserved!==\"never\");node.computed=!!computed;if(computed){this.expect(types.bracketR);}if(optionalSupported){node.optional=optional;}base=this.finishNode(node,\"MemberExpression\");}else if(!noCalls&&this.eat(types.parenL)){var refDestructuringErrors=new DestructuringErrors(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;var exprList=this.parseExprList(types.parenR,this.options.ecmaVersion>=8,false,refDestructuringErrors);if(maybeAsyncArrow&&!optional&&!this.canInsertSemicolon()&&this.eat(types.arrow)){this.checkPatternErrors(refDestructuringErrors,false);this.checkYieldAwaitInDefaultParams();if(this.awaitIdentPos>0){this.raise(this.awaitIdentPos,\"Cannot use 'await' as identifier inside an async function\");}this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList,true);}this.checkExpressionErrors(refDestructuringErrors,true);this.yieldPos=oldYieldPos||this.yieldPos;this.awaitPos=oldAwaitPos||this.awaitPos;this.awaitIdentPos=oldAwaitIdentPos||this.awaitIdentPos;var node$1=this.startNodeAt(startPos,startLoc);node$1.callee=base;node$1.arguments=exprList;if(optionalSupported){node$1.optional=optional;}base=this.finishNode(node$1,\"CallExpression\");}else if(this.type===types.backQuote){if(optional||optionalChained){this.raise(this.start,\"Optional chaining cannot appear in the tag of tagged template expressions\");}var node$2=this.startNodeAt(startPos,startLoc);node$2.tag=base;node$2.quasi=this.parseTemplate({isTagged:true});base=this.finishNode(node$2,\"TaggedTemplateExpression\");}return base;};// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\npp$3.parseExprAtom=function(refDestructuringErrors){// If a division operator appears in an expression position, the\n// tokenizer got confused, and we force it to read a regexp instead.\nif(this.type===types.slash){this.readRegexp();}var node,canBeArrow=this.potentialArrowAt===this.start;switch(this.type){case types._super:if(!this.allowSuper){this.raise(this.start,\"'super' keyword outside a method\");}node=this.startNode();this.next();if(this.type===types.parenL&&!this.allowDirectSuper){this.raise(node.start,\"super() call outside constructor of a subclass\");}// The `super` keyword can appear at below:\n// SuperProperty:\n//     super [ Expression ]\n//     super . IdentifierName\n// SuperCall:\n//     super ( Arguments )\nif(this.type!==types.dot&&this.type!==types.bracketL&&this.type!==types.parenL){this.unexpected();}return this.finishNode(node,\"Super\");case types._this:node=this.startNode();this.next();return this.finishNode(node,\"ThisExpression\");case types.name:var startPos=this.start,startLoc=this.startLoc,containsEsc=this.containsEsc;var id=this.parseIdent(false);if(this.options.ecmaVersion>=8&&!containsEsc&&id.name===\"async\"&&!this.canInsertSemicolon()&&this.eat(types._function)){return this.parseFunction(this.startNodeAt(startPos,startLoc),0,false,true);}if(canBeArrow&&!this.canInsertSemicolon()){if(this.eat(types.arrow)){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],false);}if(this.options.ecmaVersion>=8&&id.name===\"async\"&&this.type===types.name&&!containsEsc){id=this.parseIdent(false);if(this.canInsertSemicolon()||!this.eat(types.arrow)){this.unexpected();}return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],true);}}return id;case types.regexp:var value=this.value;node=this.parseLiteral(value.value);node.regex={pattern:value.pattern,flags:value.flags};return node;case types.num:case types.string:return this.parseLiteral(this.value);case types._null:case types._true:case types._false:node=this.startNode();node.value=this.type===types._null?null:this.type===types._true;node.raw=this.type.keyword;this.next();return this.finishNode(node,\"Literal\");case types.parenL:var start=this.start,expr=this.parseParenAndDistinguishExpression(canBeArrow);if(refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0&&!this.isSimpleAssignTarget(expr)){refDestructuringErrors.parenthesizedAssign=start;}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=start;}}return expr;case types.bracketL:node=this.startNode();this.next();node.elements=this.parseExprList(types.bracketR,true,true,refDestructuringErrors);return this.finishNode(node,\"ArrayExpression\");case types.braceL:return this.parseObj(false,refDestructuringErrors);case types._function:node=this.startNode();this.next();return this.parseFunction(node,0);case types._class:return this.parseClass(this.startNode(),false);case types._new:return this.parseNew();case types.backQuote:return this.parseTemplate();case types._import:if(this.options.ecmaVersion>=11){return this.parseExprImport();}else{return this.unexpected();}default:this.unexpected();}};pp$3.parseExprImport=function(){var node=this.startNode();// Consume `import` as an identifier for `import.meta`.\n// Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\nif(this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword import\");}var meta=this.parseIdent(true);switch(this.type){case types.parenL:return this.parseDynamicImport(node);case types.dot:node.meta=meta;return this.parseImportMeta(node);default:this.unexpected();}};pp$3.parseDynamicImport=function(node){this.next();// skip `(`\n// Parse node.source.\nnode.source=this.parseMaybeAssign();// Verify ending.\nif(!this.eat(types.parenR)){var errorPos=this.start;if(this.eat(types.comma)&&this.eat(types.parenR)){this.raiseRecoverable(errorPos,\"Trailing comma is not allowed in import()\");}else{this.unexpected(errorPos);}}return this.finishNode(node,\"ImportExpression\");};pp$3.parseImportMeta=function(node){this.next();// skip `.`\nvar containsEsc=this.containsEsc;node.property=this.parseIdent(true);if(node.property.name!==\"meta\"){this.raiseRecoverable(node.property.start,\"The only valid meta property for import is 'import.meta'\");}if(containsEsc){this.raiseRecoverable(node.start,\"'import.meta' must not contain escaped characters\");}if(this.options.sourceType!==\"module\"){this.raiseRecoverable(node.start,\"Cannot use 'import.meta' outside a module\");}return this.finishNode(node,\"MetaProperty\");};pp$3.parseLiteral=function(value){var node=this.startNode();node.value=value;node.raw=this.input.slice(this.start,this.end);if(node.raw.charCodeAt(node.raw.length-1)===110){node.bigint=node.raw.slice(0,-1);}this.next();return this.finishNode(node,\"Literal\");};pp$3.parseParenExpression=function(){this.expect(types.parenL);var val=this.parseExpression();this.expect(types.parenR);return val;};pp$3.parseParenAndDistinguishExpression=function(canBeArrow){var startPos=this.start,startLoc=this.startLoc,val,allowTrailingComma=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var innerStartPos=this.start,innerStartLoc=this.startLoc;var exprList=[],first=true,lastIsComma=false;var refDestructuringErrors=new DestructuringErrors(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,spreadStart;this.yieldPos=0;this.awaitPos=0;// Do not save awaitIdentPos to allow checking awaits nested in parameters\nwhile(this.type!==types.parenR){first?first=false:this.expect(types.comma);if(allowTrailingComma&&this.afterTrailingComma(types.parenR,true)){lastIsComma=true;break;}else if(this.type===types.ellipsis){spreadStart=this.start;exprList.push(this.parseParenItem(this.parseRestBinding()));if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}break;}else{exprList.push(this.parseMaybeAssign(false,refDestructuringErrors,this.parseParenItem));}}var innerEndPos=this.start,innerEndLoc=this.startLoc;this.expect(types.parenR);if(canBeArrow&&!this.canInsertSemicolon()&&this.eat(types.arrow)){this.checkPatternErrors(refDestructuringErrors,false);this.checkYieldAwaitInDefaultParams();this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;return this.parseParenArrowList(startPos,startLoc,exprList);}if(!exprList.length||lastIsComma){this.unexpected(this.lastTokStart);}if(spreadStart){this.unexpected(spreadStart);}this.checkExpressionErrors(refDestructuringErrors,true);this.yieldPos=oldYieldPos||this.yieldPos;this.awaitPos=oldAwaitPos||this.awaitPos;if(exprList.length>1){val=this.startNodeAt(innerStartPos,innerStartLoc);val.expressions=exprList;this.finishNodeAt(val,\"SequenceExpression\",innerEndPos,innerEndLoc);}else{val=exprList[0];}}else{val=this.parseParenExpression();}if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);par.expression=val;return this.finishNode(par,\"ParenthesizedExpression\");}else{return val;}};pp$3.parseParenItem=function(item){return item;};pp$3.parseParenArrowList=function(startPos,startLoc,exprList){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList);};// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nvar empty$1=[];pp$3.parseNew=function(){if(this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword new\");}var node=this.startNode();var meta=this.parseIdent(true);if(this.options.ecmaVersion>=6&&this.eat(types.dot)){node.meta=meta;var containsEsc=this.containsEsc;node.property=this.parseIdent(true);if(node.property.name!==\"target\"){this.raiseRecoverable(node.property.start,\"The only valid meta property for new is 'new.target'\");}if(containsEsc){this.raiseRecoverable(node.start,\"'new.target' must not contain escaped characters\");}if(!this.inNonArrowFunction()){this.raiseRecoverable(node.start,\"'new.target' can only be used in functions\");}return this.finishNode(node,\"MetaProperty\");}var startPos=this.start,startLoc=this.startLoc,isImport=this.type===types._import;node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,true);if(isImport&&node.callee.type===\"ImportExpression\"){this.raise(startPos,\"Cannot use new with import()\");}if(this.eat(types.parenL)){node.arguments=this.parseExprList(types.parenR,this.options.ecmaVersion>=8,false);}else{node.arguments=empty$1;}return this.finishNode(node,\"NewExpression\");};// Parse template expression.\npp$3.parseTemplateElement=function(ref){var isTagged=ref.isTagged;var elem=this.startNode();if(this.type===types.invalidTemplate){if(!isTagged){this.raiseRecoverable(this.start,\"Bad escape sequence in untagged template literal\");}elem.value={raw:this.value,cooked:null};}else{elem.value={raw:this.input.slice(this.start,this.end).replace(/\\r\\n?/g,\"\\n\"),cooked:this.value};}this.next();elem.tail=this.type===types.backQuote;return this.finishNode(elem,\"TemplateElement\");};pp$3.parseTemplate=function(ref){if(ref===void 0)ref={};var isTagged=ref.isTagged;if(isTagged===void 0)isTagged=false;var node=this.startNode();this.next();node.expressions=[];var curElt=this.parseTemplateElement({isTagged:isTagged});node.quasis=[curElt];while(!curElt.tail){if(this.type===types.eof){this.raise(this.pos,\"Unterminated template literal\");}this.expect(types.dollarBraceL);node.expressions.push(this.parseExpression());this.expect(types.braceR);node.quasis.push(curElt=this.parseTemplateElement({isTagged:isTagged}));}this.next();return this.finishNode(node,\"TemplateLiteral\");};pp$3.isAsyncProp=function(prop){return!prop.computed&&prop.key.type===\"Identifier\"&&prop.key.name===\"async\"&&(this.type===types.name||this.type===types.num||this.type===types.string||this.type===types.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===types.star)&&!lineBreak.test(this.input.slice(this.lastTokEnd,this.start));};// Parse an object literal or binding pattern.\npp$3.parseObj=function(isPattern,refDestructuringErrors){var node=this.startNode(),first=true,propHash={};node.properties=[];this.next();while(!this.eat(types.braceR)){if(!first){this.expect(types.comma);if(this.options.ecmaVersion>=5&&this.afterTrailingComma(types.braceR)){break;}}else{first=false;}var prop=this.parseProperty(isPattern,refDestructuringErrors);if(!isPattern){this.checkPropClash(prop,propHash,refDestructuringErrors);}node.properties.push(prop);}return this.finishNode(node,isPattern?\"ObjectPattern\":\"ObjectExpression\");};pp$3.parseProperty=function(isPattern,refDestructuringErrors){var prop=this.startNode(),isGenerator,isAsync,startPos,startLoc;if(this.options.ecmaVersion>=9&&this.eat(types.ellipsis)){if(isPattern){prop.argument=this.parseIdent(false);if(this.type===types.comma){this.raise(this.start,\"Comma is not permitted after the rest element\");}return this.finishNode(prop,\"RestElement\");}// To disallow parenthesized identifier via `this.toAssignable()`.\nif(this.type===types.parenL&&refDestructuringErrors){if(refDestructuringErrors.parenthesizedAssign<0){refDestructuringErrors.parenthesizedAssign=this.start;}if(refDestructuringErrors.parenthesizedBind<0){refDestructuringErrors.parenthesizedBind=this.start;}}// Parse argument.\nprop.argument=this.parseMaybeAssign(false,refDestructuringErrors);// To disallow trailing comma via `this.toAssignable()`.\nif(this.type===types.comma&&refDestructuringErrors&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this.start;}// Finish\nreturn this.finishNode(prop,\"SpreadElement\");}if(this.options.ecmaVersion>=6){prop.method=false;prop.shorthand=false;if(isPattern||refDestructuringErrors){startPos=this.start;startLoc=this.startLoc;}if(!isPattern){isGenerator=this.eat(types.star);}}var containsEsc=this.containsEsc;this.parsePropertyName(prop);if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=8&&!isGenerator&&this.isAsyncProp(prop)){isAsync=true;isGenerator=this.options.ecmaVersion>=9&&this.eat(types.star);this.parsePropertyName(prop,refDestructuringErrors);}else{isAsync=false;}this.parsePropertyValue(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc);return this.finishNode(prop,\"Property\");};pp$3.parsePropertyValue=function(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc){if((isGenerator||isAsync)&&this.type===types.colon){this.unexpected();}if(this.eat(types.colon)){prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(false,refDestructuringErrors);prop.kind=\"init\";}else if(this.options.ecmaVersion>=6&&this.type===types.parenL){if(isPattern){this.unexpected();}prop.kind=\"init\";prop.method=true;prop.value=this.parseMethod(isGenerator,isAsync);}else if(!isPattern&&!containsEsc&&this.options.ecmaVersion>=5&&!prop.computed&&prop.key.type===\"Identifier\"&&(prop.key.name===\"get\"||prop.key.name===\"set\")&&this.type!==types.comma&&this.type!==types.braceR&&this.type!==types.eq){if(isGenerator||isAsync){this.unexpected();}prop.kind=prop.key.name;this.parsePropertyName(prop);prop.value=this.parseMethod(false);var paramCount=prop.kind===\"get\"?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;if(prop.kind===\"get\"){this.raiseRecoverable(start,\"getter should have no params\");}else{this.raiseRecoverable(start,\"setter should have exactly one param\");}}else{if(prop.kind===\"set\"&&prop.value.params[0].type===\"RestElement\"){this.raiseRecoverable(prop.value.params[0].start,\"Setter cannot use rest params\");}}}else if(this.options.ecmaVersion>=6&&!prop.computed&&prop.key.type===\"Identifier\"){if(isGenerator||isAsync){this.unexpected();}this.checkUnreserved(prop.key);if(prop.key.name===\"await\"&&!this.awaitIdentPos){this.awaitIdentPos=startPos;}prop.kind=\"init\";if(isPattern){prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else if(this.type===types.eq&&refDestructuringErrors){if(refDestructuringErrors.shorthandAssign<0){refDestructuringErrors.shorthandAssign=this.start;}prop.value=this.parseMaybeDefault(startPos,startLoc,prop.key);}else{prop.value=prop.key;}prop.shorthand=true;}else{this.unexpected();}};pp$3.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(types.bracketL)){prop.computed=true;prop.key=this.parseMaybeAssign();this.expect(types.bracketR);return prop.key;}else{prop.computed=false;}}return prop.key=this.type===types.num||this.type===types.string?this.parseExprAtom():this.parseIdent(this.options.allowReserved!==\"never\");};// Initialize empty function node.\npp$3.initFunction=function(node){node.id=null;if(this.options.ecmaVersion>=6){node.generator=node.expression=false;}if(this.options.ecmaVersion>=8){node.async=false;}};// Parse object or class method.\npp$3.parseMethod=function(isGenerator,isAsync,allowDirectSuper){var node=this.startNode(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.initFunction(node);if(this.options.ecmaVersion>=6){node.generator=isGenerator;}if(this.options.ecmaVersion>=8){node.async=!!isAsync;}this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;this.enterScope(functionFlags(isAsync,node.generator)|SCOPE_SUPER|(allowDirectSuper?SCOPE_DIRECT_SUPER:0));this.expect(types.parenL);node.params=this.parseBindingList(types.parenR,false,this.options.ecmaVersion>=8);this.checkYieldAwaitInDefaultParams();this.parseFunctionBody(node,false,true);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,\"FunctionExpression\");};// Parse arrow function expression with given parameters.\npp$3.parseArrowExpression=function(node,params,isAsync){var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.enterScope(functionFlags(isAsync,false)|SCOPE_ARROW);this.initFunction(node);if(this.options.ecmaVersion>=8){node.async=!!isAsync;}this.yieldPos=0;this.awaitPos=0;this.awaitIdentPos=0;node.params=this.toAssignableList(params,true);this.parseFunctionBody(node,true,false);this.yieldPos=oldYieldPos;this.awaitPos=oldAwaitPos;this.awaitIdentPos=oldAwaitIdentPos;return this.finishNode(node,\"ArrowFunctionExpression\");};// Parse function body and check parameters.\npp$3.parseFunctionBody=function(node,isArrowFunction,isMethod){var isExpression=isArrowFunction&&this.type!==types.braceL;var oldStrict=this.strict,useStrict=false;if(isExpression){node.body=this.parseMaybeAssign();node.expression=true;this.checkParams(node,false);}else{var nonSimple=this.options.ecmaVersion>=7&&!this.isSimpleParamList(node.params);if(!oldStrict||nonSimple){useStrict=this.strictDirective(this.end);// If this is a strict mode function, verify that argument names\n// are not repeated, and it does not try to bind the words `eval`\n// or `arguments`.\nif(useStrict&&nonSimple){this.raiseRecoverable(node.start,\"Illegal 'use strict' directive in function with non-simple parameter list\");}}// Start a new scope with regard to labels and the `inFunction`\n// flag (restore them to their old value afterwards).\nvar oldLabels=this.labels;this.labels=[];if(useStrict){this.strict=true;}// Add the params to varDeclaredNames to ensure that an error is thrown\n// if a let/const declaration in the function clashes with one of the params.\nthis.checkParams(node,!oldStrict&&!useStrict&&!isArrowFunction&&!isMethod&&this.isSimpleParamList(node.params));// Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\nif(this.strict&&node.id){this.checkLVal(node.id,BIND_OUTSIDE);}node.body=this.parseBlock(false,undefined,useStrict&&!oldStrict);node.expression=false;this.adaptDirectivePrologue(node.body.body);this.labels=oldLabels;}this.exitScope();};pp$3.isSimpleParamList=function(params){for(var i=0,list=params;i<list.length;i+=1){var param=list[i];if(param.type!==\"Identifier\"){return false;}}return true;};// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\npp$3.checkParams=function(node,allowDuplicates){var nameHash={};for(var i=0,list=node.params;i<list.length;i+=1){var param=list[i];this.checkLVal(param,BIND_VAR,allowDuplicates?null:nameHash);}};// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\npp$3.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){var elts=[],first=true;while(!this.eat(close)){if(!first){this.expect(types.comma);if(allowTrailingComma&&this.afterTrailingComma(close)){break;}}else{first=false;}var elt=void 0;if(allowEmpty&&this.type===types.comma){elt=null;}else if(this.type===types.ellipsis){elt=this.parseSpread(refDestructuringErrors);if(refDestructuringErrors&&this.type===types.comma&&refDestructuringErrors.trailingComma<0){refDestructuringErrors.trailingComma=this.start;}}else{elt=this.parseMaybeAssign(false,refDestructuringErrors);}elts.push(elt);}return elts;};pp$3.checkUnreserved=function(ref){var start=ref.start;var end=ref.end;var name=ref.name;if(this.inGenerator&&name===\"yield\"){this.raiseRecoverable(start,\"Cannot use 'yield' as identifier inside a generator\");}if(this.inAsync&&name===\"await\"){this.raiseRecoverable(start,\"Cannot use 'await' as identifier inside an async function\");}if(this.keywords.test(name)){this.raise(start,\"Unexpected keyword '\"+name+\"'\");}if(this.options.ecmaVersion<6&&this.input.slice(start,end).indexOf(\"\\\\\")!==-1){return;}var re=this.strict?this.reservedWordsStrict:this.reservedWords;if(re.test(name)){if(!this.inAsync&&name===\"await\"){this.raiseRecoverable(start,\"Cannot use keyword 'await' outside an async function\");}this.raiseRecoverable(start,\"The keyword '\"+name+\"' is reserved\");}};// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\npp$3.parseIdent=function(liberal,isBinding){var node=this.startNode();if(this.type===types.name){node.name=this.value;}else if(this.type.keyword){node.name=this.type.keyword;// To fix https://github.com/acornjs/acorn/issues/575\n// `class` and `function` keywords push new context into this.context.\n// But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n// If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\nif((node.name===\"class\"||node.name===\"function\")&&(this.lastTokEnd!==this.lastTokStart+1||this.input.charCodeAt(this.lastTokStart)!==46)){this.context.pop();}}else{this.unexpected();}this.next(!!liberal);this.finishNode(node,\"Identifier\");if(!liberal){this.checkUnreserved(node);if(node.name===\"await\"&&!this.awaitIdentPos){this.awaitIdentPos=node.start;}}return node;};// Parses yield expression inside generator.\npp$3.parseYield=function(noIn){if(!this.yieldPos){this.yieldPos=this.start;}var node=this.startNode();this.next();if(this.type===types.semi||this.canInsertSemicolon()||this.type!==types.star&&!this.type.startsExpr){node.delegate=false;node.argument=null;}else{node.delegate=this.eat(types.star);node.argument=this.parseMaybeAssign(noIn);}return this.finishNode(node,\"YieldExpression\");};pp$3.parseAwait=function(){if(!this.awaitPos){this.awaitPos=this.start;}var node=this.startNode();this.next();node.argument=this.parseMaybeUnary(null,false);return this.finishNode(node,\"AwaitExpression\");};var pp$4=Parser.prototype;// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\npp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=\" (\"+loc.line+\":\"+loc.column+\")\";var err=new SyntaxError(message);err.pos=pos;err.loc=loc;err.raisedAt=this.pos;throw err;};pp$4.raiseRecoverable=pp$4.raise;pp$4.curPosition=function(){if(this.options.locations){return new Position(this.curLine,this.pos-this.lineStart);}};var pp$5=Parser.prototype;var Scope=function Scope(flags){this.flags=flags;// A list of var-declared names in the current lexical scope\nthis.var=[];// A list of lexically-declared names in the current lexical scope\nthis.lexical=[];// A list of lexically-declared FunctionDeclaration names in the current lexical scope\nthis.functions=[];};// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\npp$5.enterScope=function(flags){this.scopeStack.push(new Scope(flags));};pp$5.exitScope=function(){this.scopeStack.pop();};// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope=function(scope){return scope.flags&SCOPE_FUNCTION||!this.inModule&&scope.flags&SCOPE_TOP;};pp$5.declareName=function(name,bindingType,pos){var redeclared=false;if(bindingType===BIND_LEXICAL){var scope=this.currentScope();redeclared=scope.lexical.indexOf(name)>-1||scope.functions.indexOf(name)>-1||scope.var.indexOf(name)>-1;scope.lexical.push(name);if(this.inModule&&scope.flags&SCOPE_TOP){delete this.undefinedExports[name];}}else if(bindingType===BIND_SIMPLE_CATCH){var scope$1=this.currentScope();scope$1.lexical.push(name);}else if(bindingType===BIND_FUNCTION){var scope$2=this.currentScope();if(this.treatFunctionsAsVar){redeclared=scope$2.lexical.indexOf(name)>-1;}else{redeclared=scope$2.lexical.indexOf(name)>-1||scope$2.var.indexOf(name)>-1;}scope$2.functions.push(name);}else{for(var i=this.scopeStack.length-1;i>=0;--i){var scope$3=this.scopeStack[i];if(scope$3.lexical.indexOf(name)>-1&&!(scope$3.flags&SCOPE_SIMPLE_CATCH&&scope$3.lexical[0]===name)||!this.treatFunctionsAsVarInScope(scope$3)&&scope$3.functions.indexOf(name)>-1){redeclared=true;break;}scope$3.var.push(name);if(this.inModule&&scope$3.flags&SCOPE_TOP){delete this.undefinedExports[name];}if(scope$3.flags&SCOPE_VAR){break;}}}if(redeclared){this.raiseRecoverable(pos,\"Identifier '\"+name+\"' has already been declared\");}};pp$5.checkLocalExport=function(id){// scope.functions must be empty as Module code is always strict.\nif(this.scopeStack[0].lexical.indexOf(id.name)===-1&&this.scopeStack[0].var.indexOf(id.name)===-1){this.undefinedExports[id.name]=id;}};pp$5.currentScope=function(){return this.scopeStack[this.scopeStack.length-1];};pp$5.currentVarScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR){return scope;}}};// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR&&!(scope.flags&SCOPE_ARROW)){return scope;}}};var Node=function Node(parser,pos,loc){this.type=\"\";this.start=pos;this.end=0;if(parser.options.locations){this.loc=new SourceLocation(parser,loc);}if(parser.options.directSourceFile){this.sourceFile=parser.options.directSourceFile;}if(parser.options.ranges){this.range=[pos,0];}};// Start an AST node, attaching a start offset.\nvar pp$6=Parser.prototype;pp$6.startNode=function(){return new Node(this,this.start,this.startLoc);};pp$6.startNodeAt=function(pos,loc){return new Node(this,pos,loc);};// Finish an AST node, adding `type` and `end` properties.\nfunction finishNodeAt(node,type,pos,loc){node.type=type;node.end=pos;if(this.options.locations){node.loc.end=loc;}if(this.options.ranges){node.range[1]=pos;}return node;}pp$6.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc);};// Finish node at given position\npp$6.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc);};// The algorithm used to determine whether a regexp can appear at a\nvar TokContext=function TokContext(token,isExpr,preserveSpace,override,generator){this.token=token;this.isExpr=!!isExpr;this.preserveSpace=!!preserveSpace;this.override=override;this.generator=!!generator;};var types$1={b_stat:new TokContext(\"{\",false),b_expr:new TokContext(\"{\",true),b_tmpl:new TokContext(\"${\",false),p_stat:new TokContext(\"(\",false),p_expr:new TokContext(\"(\",true),q_tmpl:new TokContext(\"`\",true,true,function(p){return p.tryReadTemplateToken();}),f_stat:new TokContext(\"function\",false),f_expr:new TokContext(\"function\",true),f_expr_gen:new TokContext(\"function\",true,false,null,true),f_gen:new TokContext(\"function\",false,false,null,true)};var pp$7=Parser.prototype;pp$7.initialContext=function(){return[types$1.b_stat];};pp$7.braceIsBlock=function(prevType){var parent=this.curContext();if(parent===types$1.f_expr||parent===types$1.f_stat){return true;}if(prevType===types.colon&&(parent===types$1.b_stat||parent===types$1.b_expr)){return!parent.isExpr;}// The check for `tt.name && exprAllowed` detects whether we are\n// after a `yield` or `of` construct. See the `updateContext` for\n// `tt.name`.\nif(prevType===types._return||prevType===types.name&&this.exprAllowed){return lineBreak.test(this.input.slice(this.lastTokEnd,this.start));}if(prevType===types._else||prevType===types.semi||prevType===types.eof||prevType===types.parenR||prevType===types.arrow){return true;}if(prevType===types.braceL){return parent===types$1.b_stat;}if(prevType===types._var||prevType===types._const||prevType===types.name){return false;}return!this.exprAllowed;};pp$7.inGeneratorContext=function(){for(var i=this.context.length-1;i>=1;i--){var context=this.context[i];if(context.token===\"function\"){return context.generator;}}return false;};pp$7.updateContext=function(prevType){var update,type=this.type;if(type.keyword&&prevType===types.dot){this.exprAllowed=false;}else if(update=type.updateContext){update.call(this,prevType);}else{this.exprAllowed=type.beforeExpr;}};// Token-specific context update code\ntypes.parenR.updateContext=types.braceR.updateContext=function(){if(this.context.length===1){this.exprAllowed=true;return;}var out=this.context.pop();if(out===types$1.b_stat&&this.curContext().token===\"function\"){out=this.context.pop();}this.exprAllowed=!out.isExpr;};types.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types$1.b_stat:types$1.b_expr);this.exprAllowed=true;};types.dollarBraceL.updateContext=function(){this.context.push(types$1.b_tmpl);this.exprAllowed=true;};types.parenL.updateContext=function(prevType){var statementParens=prevType===types._if||prevType===types._for||prevType===types._with||prevType===types._while;this.context.push(statementParens?types$1.p_stat:types$1.p_expr);this.exprAllowed=true;};types.incDec.updateContext=function(){// tokExprAllowed stays unchanged\n};types._function.updateContext=types._class.updateContext=function(prevType){if(prevType.beforeExpr&&prevType!==types.semi&&prevType!==types._else&&!(prevType===types._return&&lineBreak.test(this.input.slice(this.lastTokEnd,this.start)))&&!((prevType===types.colon||prevType===types.braceL)&&this.curContext()===types$1.b_stat)){this.context.push(types$1.f_expr);}else{this.context.push(types$1.f_stat);}this.exprAllowed=false;};types.backQuote.updateContext=function(){if(this.curContext()===types$1.q_tmpl){this.context.pop();}else{this.context.push(types$1.q_tmpl);}this.exprAllowed=false;};types.star.updateContext=function(prevType){if(prevType===types._function){var index=this.context.length-1;if(this.context[index]===types$1.f_expr){this.context[index]=types$1.f_expr_gen;}else{this.context[index]=types$1.f_gen;}}this.exprAllowed=true;};types.name.updateContext=function(prevType){var allowed=false;if(this.options.ecmaVersion>=6&&prevType!==types.dot){if(this.value===\"of\"&&!this.exprAllowed||this.value===\"yield\"&&this.inGeneratorContext()){allowed=true;}}this.exprAllowed=allowed;};// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties=\"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";var ecma10BinaryProperties=ecma9BinaryProperties+\" Extended_Pictographic\";var ecma11BinaryProperties=ecma10BinaryProperties;var unicodeBinaryProperties={9:ecma9BinaryProperties,10:ecma10BinaryProperties,11:ecma11BinaryProperties};// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues=\"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";// #table-unicode-script-values\nvar ecma9ScriptValues=\"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";var ecma10ScriptValues=ecma9ScriptValues+\" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";var ecma11ScriptValues=ecma10ScriptValues+\" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";var unicodeScriptValues={9:ecma9ScriptValues,10:ecma10ScriptValues,11:ecma11ScriptValues};var data={};function buildUnicodeData(ecmaVersion){var d=data[ecmaVersion]={binary:wordsRegexp(unicodeBinaryProperties[ecmaVersion]+\" \"+unicodeGeneralCategoryValues),nonBinary:{General_Category:wordsRegexp(unicodeGeneralCategoryValues),Script:wordsRegexp(unicodeScriptValues[ecmaVersion])}};d.nonBinary.Script_Extensions=d.nonBinary.Script;d.nonBinary.gc=d.nonBinary.General_Category;d.nonBinary.sc=d.nonBinary.Script;d.nonBinary.scx=d.nonBinary.Script_Extensions;}buildUnicodeData(9);buildUnicodeData(10);buildUnicodeData(11);var pp$8=Parser.prototype;var RegExpValidationState=function RegExpValidationState(parser){this.parser=parser;this.validFlags=\"gim\"+(parser.options.ecmaVersion>=6?\"uy\":\"\")+(parser.options.ecmaVersion>=9?\"s\":\"\");this.unicodeProperties=data[parser.options.ecmaVersion>=11?11:parser.options.ecmaVersion];this.source=\"\";this.flags=\"\";this.start=0;this.switchU=false;this.switchN=false;this.pos=0;this.lastIntValue=0;this.lastStringValue=\"\";this.lastAssertionIsQuantifiable=false;this.numCapturingParens=0;this.maxBackReference=0;this.groupNames=[];this.backReferenceNames=[];};RegExpValidationState.prototype.reset=function reset(start,pattern,flags){var unicode=flags.indexOf(\"u\")!==-1;this.start=start|0;this.source=pattern+\"\";this.flags=flags;this.switchU=unicode&&this.parser.options.ecmaVersion>=6;this.switchN=unicode&&this.parser.options.ecmaVersion>=9;};RegExpValidationState.prototype.raise=function raise(message){this.parser.raiseRecoverable(this.start,\"Invalid regular expression: /\"+this.source+\"/: \"+message);};// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at=function at(i,forceU){if(forceU===void 0)forceU=false;var s=this.source;var l=s.length;if(i>=l){return-1;}var c=s.charCodeAt(i);if(!(forceU||this.switchU)||c<=0xD7FF||c>=0xE000||i+1>=l){return c;}var next=s.charCodeAt(i+1);return next>=0xDC00&&next<=0xDFFF?(c<<10)+next-0x35FDC00:c;};RegExpValidationState.prototype.nextIndex=function nextIndex(i,forceU){if(forceU===void 0)forceU=false;var s=this.source;var l=s.length;if(i>=l){return l;}var c=s.charCodeAt(i),next;if(!(forceU||this.switchU)||c<=0xD7FF||c>=0xE000||i+1>=l||(next=s.charCodeAt(i+1))<0xDC00||next>0xDFFF){return i+1;}return i+2;};RegExpValidationState.prototype.current=function current(forceU){if(forceU===void 0)forceU=false;return this.at(this.pos,forceU);};RegExpValidationState.prototype.lookahead=function lookahead(forceU){if(forceU===void 0)forceU=false;return this.at(this.nextIndex(this.pos,forceU),forceU);};RegExpValidationState.prototype.advance=function advance(forceU){if(forceU===void 0)forceU=false;this.pos=this.nextIndex(this.pos,forceU);};RegExpValidationState.prototype.eat=function eat(ch,forceU){if(forceU===void 0)forceU=false;if(this.current(forceU)===ch){this.advance(forceU);return true;}return false;};function codePointToString(ch){if(ch<=0xFFFF){return String.fromCharCode(ch);}ch-=0x10000;return String.fromCharCode((ch>>10)+0xD800,(ch&0x03FF)+0xDC00);}/**\n\t * Validate the flags part of a given RegExpLiteral.\n\t *\n\t * @param {RegExpValidationState} state The state to validate RegExp.\n\t * @returns {void}\n\t */pp$8.validateRegExpFlags=function(state){var validFlags=state.validFlags;var flags=state.flags;for(var i=0;i<flags.length;i++){var flag=flags.charAt(i);if(validFlags.indexOf(flag)===-1){this.raise(state.start,\"Invalid regular expression flag\");}if(flags.indexOf(flag,i+1)>-1){this.raise(state.start,\"Duplicate regular expression flag\");}}};/**\n\t * Validate the pattern part of a given RegExpLiteral.\n\t *\n\t * @param {RegExpValidationState} state The state to validate RegExp.\n\t * @returns {void}\n\t */pp$8.validateRegExpPattern=function(state){this.regexp_pattern(state);// The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n// parsing contains a |GroupName|, reparse with the goal symbol\n// |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n// exception if _P_ did not conform to the grammar, if any elements of _P_\n// were not matched by the parse, or if any Early Error conditions exist.\nif(!state.switchN&&this.options.ecmaVersion>=9&&state.groupNames.length>0){state.switchN=true;this.regexp_pattern(state);}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern=function(state){state.pos=0;state.lastIntValue=0;state.lastStringValue=\"\";state.lastAssertionIsQuantifiable=false;state.numCapturingParens=0;state.maxBackReference=0;state.groupNames.length=0;state.backReferenceNames.length=0;this.regexp_disjunction(state);if(state.pos!==state.source.length){// Make the same messages as V8.\nif(state.eat(0x29/* ) */)){state.raise(\"Unmatched ')'\");}if(state.eat(0x5D/* ] */)||state.eat(0x7D/* } */)){state.raise(\"Lone quantifier brackets\");}}if(state.maxBackReference>state.numCapturingParens){state.raise(\"Invalid escape\");}for(var i=0,list=state.backReferenceNames;i<list.length;i+=1){var name=list[i];if(state.groupNames.indexOf(name)===-1){state.raise(\"Invalid named capture referenced\");}}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction=function(state){this.regexp_alternative(state);while(state.eat(0x7C/* | */)){this.regexp_alternative(state);}// Make the same message as V8.\nif(this.regexp_eatQuantifier(state,true)){state.raise(\"Nothing to repeat\");}if(state.eat(0x7B/* { */)){state.raise(\"Lone quantifier brackets\");}};// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative=function(state){while(state.pos<state.source.length&&this.regexp_eatTerm(state)){}};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm=function(state){if(this.regexp_eatAssertion(state)){// Handle `QuantifiableAssertion Quantifier` alternative.\n// `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n// is a QuantifiableAssertion.\nif(state.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(state)){// Make the same message as V8.\nif(state.switchU){state.raise(\"Invalid quantifier\");}}return true;}if(state.switchU?this.regexp_eatAtom(state):this.regexp_eatExtendedAtom(state)){this.regexp_eatQuantifier(state);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion=function(state){var start=state.pos;state.lastAssertionIsQuantifiable=false;// ^, $\nif(state.eat(0x5E/* ^ */)||state.eat(0x24/* $ */)){return true;}// \\b \\B\nif(state.eat(0x5C/* \\ */)){if(state.eat(0x42/* B */)||state.eat(0x62/* b */)){return true;}state.pos=start;}// Lookahead / Lookbehind\nif(state.eat(0x28/* ( */)&&state.eat(0x3F/* ? */)){var lookbehind=false;if(this.options.ecmaVersion>=9){lookbehind=state.eat(0x3C/* < */);}if(state.eat(0x3D/* = */)||state.eat(0x21/* ! */)){this.regexp_disjunction(state);if(!state.eat(0x29/* ) */)){state.raise(\"Unterminated group\");}state.lastAssertionIsQuantifiable=!lookbehind;return true;}}state.pos=start;return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier=function(state,noError){if(noError===void 0)noError=false;if(this.regexp_eatQuantifierPrefix(state,noError)){state.eat(0x3F/* ? */);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix=function(state,noError){return state.eat(0x2A/* * */)||state.eat(0x2B/* + */)||state.eat(0x3F/* ? */)||this.regexp_eatBracedQuantifier(state,noError);};pp$8.regexp_eatBracedQuantifier=function(state,noError){var start=state.pos;if(state.eat(0x7B/* { */)){var min=0,max=-1;if(this.regexp_eatDecimalDigits(state)){min=state.lastIntValue;if(state.eat(0x2C/* , */)&&this.regexp_eatDecimalDigits(state)){max=state.lastIntValue;}if(state.eat(0x7D/* } */)){// SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\nif(max!==-1&&max<min&&!noError){state.raise(\"numbers out of order in {} quantifier\");}return true;}}if(state.switchU&&!noError){state.raise(\"Incomplete quantifier\");}state.pos=start;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom=function(state){return this.regexp_eatPatternCharacters(state)||state.eat(0x2E/* . */)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state);};pp$8.regexp_eatReverseSolidusAtomEscape=function(state){var start=state.pos;if(state.eat(0x5C/* \\ */)){if(this.regexp_eatAtomEscape(state)){return true;}state.pos=start;}return false;};pp$8.regexp_eatUncapturingGroup=function(state){var start=state.pos;if(state.eat(0x28/* ( */)){if(state.eat(0x3F/* ? */)&&state.eat(0x3A/* : */)){this.regexp_disjunction(state);if(state.eat(0x29/* ) */)){return true;}state.raise(\"Unterminated group\");}state.pos=start;}return false;};pp$8.regexp_eatCapturingGroup=function(state){if(state.eat(0x28/* ( */)){if(this.options.ecmaVersion>=9){this.regexp_groupSpecifier(state);}else if(state.current()===0x3F/* ? */){state.raise(\"Invalid group\");}this.regexp_disjunction(state);if(state.eat(0x29/* ) */)){state.numCapturingParens+=1;return true;}state.raise(\"Unterminated group\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom=function(state){return state.eat(0x2E/* . */)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)||this.regexp_eatInvalidBracedQuantifier(state)||this.regexp_eatExtendedPatternCharacter(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier=function(state){if(this.regexp_eatBracedQuantifier(state,true)){state.raise(\"Nothing to repeat\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter=function(state){var ch=state.current();if(isSyntaxCharacter(ch)){state.lastIntValue=ch;state.advance();return true;}return false;};function isSyntaxCharacter(ch){return ch===0x24/* $ */||ch>=0x28/* ( */&&ch<=0x2B/* + */||ch===0x2E/* . */||ch===0x3F/* ? */||ch>=0x5B/* [ */&&ch<=0x5E/* ^ */||ch>=0x7B/* { */&&ch<=0x7D/* } */;}// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters=function(state){var start=state.pos;var ch=0;while((ch=state.current())!==-1&&!isSyntaxCharacter(ch)){state.advance();}return state.pos!==start;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter=function(state){var ch=state.current();if(ch!==-1&&ch!==0x24/* $ */&&!(ch>=0x28/* ( */&&ch<=0x2B/* + */)&&ch!==0x2E/* . */&&ch!==0x3F/* ? */&&ch!==0x5B/* [ */&&ch!==0x5E/* ^ */&&ch!==0x7C/* | */){state.advance();return true;}return false;};// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier=function(state){if(state.eat(0x3F/* ? */)){if(this.regexp_eatGroupName(state)){if(state.groupNames.indexOf(state.lastStringValue)!==-1){state.raise(\"Duplicate capture group name\");}state.groupNames.push(state.lastStringValue);return;}state.raise(\"Invalid group\");}};// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName=function(state){state.lastStringValue=\"\";if(state.eat(0x3C/* < */)){if(this.regexp_eatRegExpIdentifierName(state)&&state.eat(0x3E/* > */)){return true;}state.raise(\"Invalid capture group name\");}return false;};// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName=function(state){state.lastStringValue=\"\";if(this.regexp_eatRegExpIdentifierStart(state)){state.lastStringValue+=codePointToString(state.lastIntValue);while(this.regexp_eatRegExpIdentifierPart(state)){state.lastStringValue+=codePointToString(state.lastIntValue);}return true;}return false;};// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart=function(state){var start=state.pos;var forceU=this.options.ecmaVersion>=11;var ch=state.current(forceU);state.advance(forceU);if(ch===0x5C/* \\ */&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)){ch=state.lastIntValue;}if(isRegExpIdentifierStart(ch)){state.lastIntValue=ch;return true;}state.pos=start;return false;};function isRegExpIdentifierStart(ch){return isIdentifierStart(ch,true)||ch===0x24/* $ */||ch===0x5F;/* _ */}// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart=function(state){var start=state.pos;var forceU=this.options.ecmaVersion>=11;var ch=state.current(forceU);state.advance(forceU);if(ch===0x5C/* \\ */&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)){ch=state.lastIntValue;}if(isRegExpIdentifierPart(ch)){state.lastIntValue=ch;return true;}state.pos=start;return false;};function isRegExpIdentifierPart(ch){return isIdentifierChar(ch,true)||ch===0x24/* $ */||ch===0x5F/* _ */||ch===0x200C/* <ZWNJ> */||ch===0x200D;/* <ZWJ> */}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape=function(state){if(this.regexp_eatBackReference(state)||this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)||state.switchN&&this.regexp_eatKGroupName(state)){return true;}if(state.switchU){// Make the same message as V8.\nif(state.current()===0x63/* c */){state.raise(\"Invalid unicode escape\");}state.raise(\"Invalid escape\");}return false;};pp$8.regexp_eatBackReference=function(state){var start=state.pos;if(this.regexp_eatDecimalEscape(state)){var n=state.lastIntValue;if(state.switchU){// For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\nif(n>state.maxBackReference){state.maxBackReference=n;}return true;}if(n<=state.numCapturingParens){return true;}state.pos=start;}return false;};pp$8.regexp_eatKGroupName=function(state){if(state.eat(0x6B/* k */)){if(this.regexp_eatGroupName(state)){state.backReferenceNames.push(state.lastStringValue);return true;}state.raise(\"Invalid named reference\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape=function(state){return this.regexp_eatControlEscape(state)||this.regexp_eatCControlLetter(state)||this.regexp_eatZero(state)||this.regexp_eatHexEscapeSequence(state)||this.regexp_eatRegExpUnicodeEscapeSequence(state,false)||!state.switchU&&this.regexp_eatLegacyOctalEscapeSequence(state)||this.regexp_eatIdentityEscape(state);};pp$8.regexp_eatCControlLetter=function(state){var start=state.pos;if(state.eat(0x63/* c */)){if(this.regexp_eatControlLetter(state)){return true;}state.pos=start;}return false;};pp$8.regexp_eatZero=function(state){if(state.current()===0x30/* 0 */&&!isDecimalDigit(state.lookahead())){state.lastIntValue=0;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape=function(state){var ch=state.current();if(ch===0x74/* t */){state.lastIntValue=0x09;/* \\t */state.advance();return true;}if(ch===0x6E/* n */){state.lastIntValue=0x0A;/* \\n */state.advance();return true;}if(ch===0x76/* v */){state.lastIntValue=0x0B;/* \\v */state.advance();return true;}if(ch===0x66/* f */){state.lastIntValue=0x0C;/* \\f */state.advance();return true;}if(ch===0x72/* r */){state.lastIntValue=0x0D;/* \\r */state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter=function(state){var ch=state.current();if(isControlLetter(ch)){state.lastIntValue=ch%0x20;state.advance();return true;}return false;};function isControlLetter(ch){return ch>=0x41/* A */&&ch<=0x5A/* Z */||ch>=0x61/* a */&&ch<=0x7A/* z */;}// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence=function(state,forceU){if(forceU===void 0)forceU=false;var start=state.pos;var switchU=forceU||state.switchU;if(state.eat(0x75/* u */)){if(this.regexp_eatFixedHexDigits(state,4)){var lead=state.lastIntValue;if(switchU&&lead>=0xD800&&lead<=0xDBFF){var leadSurrogateEnd=state.pos;if(state.eat(0x5C/* \\ */)&&state.eat(0x75/* u */)&&this.regexp_eatFixedHexDigits(state,4)){var trail=state.lastIntValue;if(trail>=0xDC00&&trail<=0xDFFF){state.lastIntValue=(lead-0xD800)*0x400+(trail-0xDC00)+0x10000;return true;}}state.pos=leadSurrogateEnd;state.lastIntValue=lead;}return true;}if(switchU&&state.eat(0x7B/* { */)&&this.regexp_eatHexDigits(state)&&state.eat(0x7D/* } */)&&isValidUnicode(state.lastIntValue)){return true;}if(switchU){state.raise(\"Invalid unicode escape\");}state.pos=start;}return false;};function isValidUnicode(ch){return ch>=0&&ch<=0x10FFFF;}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape=function(state){if(state.switchU){if(this.regexp_eatSyntaxCharacter(state)){return true;}if(state.eat(0x2F/* / */)){state.lastIntValue=0x2F;/* / */return true;}return false;}var ch=state.current();if(ch!==0x63/* c */&&(!state.switchN||ch!==0x6B/* k */)){state.lastIntValue=ch;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape=function(state){state.lastIntValue=0;var ch=state.current();if(ch>=0x31/* 1 */&&ch<=0x39/* 9 */){do{state.lastIntValue=10*state.lastIntValue+(ch-0x30/* 0 */);state.advance();}while((ch=state.current())>=0x30/* 0 */&&ch<=0x39/* 9 */);return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape=function(state){var ch=state.current();if(isCharacterClassEscape(ch)){state.lastIntValue=-1;state.advance();return true;}if(state.switchU&&this.options.ecmaVersion>=9&&(ch===0x50/* P */||ch===0x70/* p */)){state.lastIntValue=-1;state.advance();if(state.eat(0x7B/* { */)&&this.regexp_eatUnicodePropertyValueExpression(state)&&state.eat(0x7D/* } */)){return true;}state.raise(\"Invalid property name\");}return false;};function isCharacterClassEscape(ch){return ch===0x64/* d */||ch===0x44/* D */||ch===0x73/* s */||ch===0x53/* S */||ch===0x77/* w */||ch===0x57/* W */;}// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression=function(state){var start=state.pos;// UnicodePropertyName `=` UnicodePropertyValue\nif(this.regexp_eatUnicodePropertyName(state)&&state.eat(0x3D/* = */)){var name=state.lastStringValue;if(this.regexp_eatUnicodePropertyValue(state)){var value=state.lastStringValue;this.regexp_validateUnicodePropertyNameAndValue(state,name,value);return true;}}state.pos=start;// LoneUnicodePropertyNameOrValue\nif(this.regexp_eatLoneUnicodePropertyNameOrValue(state)){var nameOrValue=state.lastStringValue;this.regexp_validateUnicodePropertyNameOrValue(state,nameOrValue);return true;}return false;};pp$8.regexp_validateUnicodePropertyNameAndValue=function(state,name,value){if(!has(state.unicodeProperties.nonBinary,name)){state.raise(\"Invalid property name\");}if(!state.unicodeProperties.nonBinary[name].test(value)){state.raise(\"Invalid property value\");}};pp$8.regexp_validateUnicodePropertyNameOrValue=function(state,nameOrValue){if(!state.unicodeProperties.binary.test(nameOrValue)){state.raise(\"Invalid property name\");}};// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName=function(state){var ch=0;state.lastStringValue=\"\";while(isUnicodePropertyNameCharacter(ch=state.current())){state.lastStringValue+=codePointToString(ch);state.advance();}return state.lastStringValue!==\"\";};function isUnicodePropertyNameCharacter(ch){return isControlLetter(ch)||ch===0x5F;/* _ */}// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue=function(state){var ch=0;state.lastStringValue=\"\";while(isUnicodePropertyValueCharacter(ch=state.current())){state.lastStringValue+=codePointToString(ch);state.advance();}return state.lastStringValue!==\"\";};function isUnicodePropertyValueCharacter(ch){return isUnicodePropertyNameCharacter(ch)||isDecimalDigit(ch);}// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue=function(state){return this.regexp_eatUnicodePropertyValue(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass=function(state){if(state.eat(0x5B/* [ */)){state.eat(0x5E/* ^ */);this.regexp_classRanges(state);if(state.eat(0x5D/* ] */)){return true;}// Unreachable since it threw \"unterminated regular expression\" error before.\nstate.raise(\"Unterminated character class\");}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges=function(state){while(this.regexp_eatClassAtom(state)){var left=state.lastIntValue;if(state.eat(0x2D/* - */)&&this.regexp_eatClassAtom(state)){var right=state.lastIntValue;if(state.switchU&&(left===-1||right===-1)){state.raise(\"Invalid character class\");}if(left!==-1&&right!==-1&&left>right){state.raise(\"Range out of order in character class\");}}}};// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom=function(state){var start=state.pos;if(state.eat(0x5C/* \\ */)){if(this.regexp_eatClassEscape(state)){return true;}if(state.switchU){// Make the same message as V8.\nvar ch$1=state.current();if(ch$1===0x63/* c */||isOctalDigit(ch$1)){state.raise(\"Invalid class escape\");}state.raise(\"Invalid escape\");}state.pos=start;}var ch=state.current();if(ch!==0x5D/* ] */){state.lastIntValue=ch;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape=function(state){var start=state.pos;if(state.eat(0x62/* b */)){state.lastIntValue=0x08;/* <BS> */return true;}if(state.switchU&&state.eat(0x2D/* - */)){state.lastIntValue=0x2D;/* - */return true;}if(!state.switchU&&state.eat(0x63/* c */)){if(this.regexp_eatClassControlLetter(state)){return true;}state.pos=start;}return this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state);};// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter=function(state){var ch=state.current();if(isDecimalDigit(ch)||ch===0x5F/* _ */){state.lastIntValue=ch%0x20;state.advance();return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence=function(state){var start=state.pos;if(state.eat(0x78/* x */)){if(this.regexp_eatFixedHexDigits(state,2)){return true;}if(state.switchU){state.raise(\"Invalid escape\");}state.pos=start;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isDecimalDigit(ch=state.current())){state.lastIntValue=10*state.lastIntValue+(ch-0x30/* 0 */);state.advance();}return state.pos!==start;};function isDecimalDigit(ch){return ch>=0x30/* 0 */&&ch<=0x39;/* 9 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits=function(state){var start=state.pos;var ch=0;state.lastIntValue=0;while(isHexDigit(ch=state.current())){state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance();}return state.pos!==start;};function isHexDigit(ch){return ch>=0x30/* 0 */&&ch<=0x39/* 9 */||ch>=0x41/* A */&&ch<=0x46/* F */||ch>=0x61/* a */&&ch<=0x66/* f */;}function hexToInt(ch){if(ch>=0x41/* A */&&ch<=0x46/* F */){return 10+(ch-0x41/* A */);}if(ch>=0x61/* a */&&ch<=0x66/* f */){return 10+(ch-0x61/* a */);}return ch-0x30;/* 0 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence=function(state){if(this.regexp_eatOctalDigit(state)){var n1=state.lastIntValue;if(this.regexp_eatOctalDigit(state)){var n2=state.lastIntValue;if(n1<=3&&this.regexp_eatOctalDigit(state)){state.lastIntValue=n1*64+n2*8+state.lastIntValue;}else{state.lastIntValue=n1*8+n2;}}else{state.lastIntValue=n1;}return true;}return false;};// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit=function(state){var ch=state.current();if(isOctalDigit(ch)){state.lastIntValue=ch-0x30;/* 0 */state.advance();return true;}state.lastIntValue=0;return false;};function isOctalDigit(ch){return ch>=0x30/* 0 */&&ch<=0x37;/* 7 */}// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits=function(state,length){var start=state.pos;state.lastIntValue=0;for(var i=0;i<length;++i){var ch=state.current();if(!isHexDigit(ch)){state.pos=start;return false;}state.lastIntValue=16*state.lastIntValue+hexToInt(ch);state.advance();}return true;};// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nvar Token=function Token(p){this.type=p.type;this.value=p.value;this.start=p.start;this.end=p.end;if(p.options.locations){this.loc=new SourceLocation(p,p.startLoc,p.endLoc);}if(p.options.ranges){this.range=[p.start,p.end];}};// ## Tokenizer\nvar pp$9=Parser.prototype;// Move to the next token\npp$9.next=function(ignoreEscapeSequenceInKeyword){if(!ignoreEscapeSequenceInKeyword&&this.type.keyword&&this.containsEsc){this.raiseRecoverable(this.start,\"Escape sequence in keyword \"+this.type.keyword);}if(this.options.onToken){this.options.onToken(new Token(this));}this.lastTokEnd=this.end;this.lastTokStart=this.start;this.lastTokEndLoc=this.endLoc;this.lastTokStartLoc=this.startLoc;this.nextToken();};pp$9.getToken=function(){this.next();return new Token(this);};// If we're in an ES6 environment, make parsers iterable\nif(typeof Symbol!==\"undefined\"){pp$9[Symbol.iterator]=function(){var this$1=this;return{next:function next(){var token=this$1.getToken();return{done:token.type===types.eof,value:token};}};};}// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\npp$9.curContext=function(){return this.context[this.context.length-1];};// Read a single token, updating the parser object's token-related\n// properties.\npp$9.nextToken=function(){var curContext=this.curContext();if(!curContext||!curContext.preserveSpace){this.skipSpace();}this.start=this.pos;if(this.options.locations){this.startLoc=this.curPosition();}if(this.pos>=this.input.length){return this.finishToken(types.eof);}if(curContext.override){return curContext.override(this);}else{this.readToken(this.fullCharCodeAtPos());}};pp$9.readToken=function(code){// Identifier or keyword. '\\uXXXX' sequences are allowed in\n// identifiers, so '\\' also dispatches to that.\nif(isIdentifierStart(code,this.options.ecmaVersion>=6)||code===92/* '\\' */){return this.readWord();}return this.getTokenFromCode(code);};pp$9.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=0xd7ff||code>=0xe000){return code;}var next=this.input.charCodeAt(this.pos+1);return(code<<10)+next-0x35fdc00;};pp$9.skipBlockComment=function(){var startLoc=this.options.onComment&&this.curPosition();var start=this.pos,end=this.input.indexOf(\"*/\",this.pos+=2);if(end===-1){this.raise(this.pos-2,\"Unterminated comment\");}this.pos=end+2;if(this.options.locations){lineBreakG.lastIndex=start;var match;while((match=lineBreakG.exec(this.input))&&match.index<this.pos){++this.curLine;this.lineStart=match.index+match[0].length;}}if(this.options.onComment){this.options.onComment(true,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition());}};pp$9.skipLineComment=function(startSkip){var start=this.pos;var startLoc=this.options.onComment&&this.curPosition();var ch=this.input.charCodeAt(this.pos+=startSkip);while(this.pos<this.input.length&&!isNewLine(ch)){ch=this.input.charCodeAt(++this.pos);}if(this.options.onComment){this.options.onComment(false,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition());}};// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\npp$9.skipSpace=function(){loop:while(this.pos<this.input.length){var ch=this.input.charCodeAt(this.pos);switch(ch){case 32:case 160:// ' '\n++this.pos;break;case 13:if(this.input.charCodeAt(this.pos+1)===10){++this.pos;}case 10:case 8232:case 8233:++this.pos;if(this.options.locations){++this.curLine;this.lineStart=this.pos;}break;case 47:// '/'\nswitch(this.input.charCodeAt(this.pos+1)){case 42:// '*'\nthis.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break loop;}break;default:if(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))){++this.pos;}else{break loop;}}}};// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\npp$9.finishToken=function(type,val){this.end=this.pos;if(this.options.locations){this.endLoc=this.curPosition();}var prevType=this.type;this.type=type;this.value=val;this.updateContext(prevType);};// ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57){return this.readNumber(true);}var next2=this.input.charCodeAt(this.pos+2);if(this.options.ecmaVersion>=6&&next===46&&next2===46){// 46 = dot '.'\nthis.pos+=3;return this.finishToken(types.ellipsis);}else{++this.pos;return this.finishToken(types.dot);}};pp$9.readToken_slash=function(){// '/'\nvar next=this.input.charCodeAt(this.pos+1);if(this.exprAllowed){++this.pos;return this.readRegexp();}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.slash,1);};pp$9.readToken_mult_modulo_exp=function(code){// '%*'\nvar next=this.input.charCodeAt(this.pos+1);var size=1;var tokentype=code===42?types.star:types.modulo;// exponentiation operator ** and **=\nif(this.options.ecmaVersion>=7&&code===42&&next===42){++size;tokentype=types.starstar;next=this.input.charCodeAt(this.pos+2);}if(next===61){return this.finishOp(types.assign,size+1);}return this.finishOp(tokentype,size);};pp$9.readToken_pipe_amp=function(code){// '|&'\nvar next=this.input.charCodeAt(this.pos+1);if(next===code){return this.finishOp(code===124?types.logicalOR:types.logicalAND,2);}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(code===124?types.bitwiseOR:types.bitwiseAND,1);};pp$9.readToken_caret=function(){// '^'\nvar next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.bitwiseXOR,1);};pp$9.readToken_plus_min=function(code){// '+-'\nvar next=this.input.charCodeAt(this.pos+1);if(next===code){if(next===45&&!this.inModule&&this.input.charCodeAt(this.pos+2)===62&&(this.lastTokEnd===0||lineBreak.test(this.input.slice(this.lastTokEnd,this.pos)))){// A `-->` line comment\nthis.skipLineComment(3);this.skipSpace();return this.nextToken();}return this.finishOp(types.incDec,2);}if(next===61){return this.finishOp(types.assign,2);}return this.finishOp(types.plusMin,1);};pp$9.readToken_lt_gt=function(code){// '<>'\nvar next=this.input.charCodeAt(this.pos+1);var size=1;if(next===code){size=code===62&&this.input.charCodeAt(this.pos+2)===62?3:2;if(this.input.charCodeAt(this.pos+size)===61){return this.finishOp(types.assign,size+1);}return this.finishOp(types.bitShift,size);}if(next===33&&code===60&&!this.inModule&&this.input.charCodeAt(this.pos+2)===45&&this.input.charCodeAt(this.pos+3)===45){// `<!--`, an XML-style comment that should be interpreted as a line comment\nthis.skipLineComment(4);this.skipSpace();return this.nextToken();}if(next===61){size=2;}return this.finishOp(types.relational,size);};pp$9.readToken_eq_excl=function(code){// '=!'\nvar next=this.input.charCodeAt(this.pos+1);if(next===61){return this.finishOp(types.equality,this.input.charCodeAt(this.pos+2)===61?3:2);}if(code===61&&next===62&&this.options.ecmaVersion>=6){// '=>'\nthis.pos+=2;return this.finishToken(types.arrow);}return this.finishOp(code===61?types.eq:types.prefix,1);};pp$9.readToken_question=function(){// '?'\nif(this.options.ecmaVersion>=11){var next=this.input.charCodeAt(this.pos+1);if(next===46){var next2=this.input.charCodeAt(this.pos+2);if(next2<48||next2>57){return this.finishOp(types.questionDot,2);}}if(next===63){return this.finishOp(types.coalesce,2);}}return this.finishOp(types.question,1);};pp$9.getTokenFromCode=function(code){switch(code){// The interpretation of a dot depends on whether it is followed\n// by a digit or another two dots.\ncase 46:// '.'\nreturn this.readToken_dot();// Punctuation tokens.\ncase 40:++this.pos;return this.finishToken(types.parenL);case 41:++this.pos;return this.finishToken(types.parenR);case 59:++this.pos;return this.finishToken(types.semi);case 44:++this.pos;return this.finishToken(types.comma);case 91:++this.pos;return this.finishToken(types.bracketL);case 93:++this.pos;return this.finishToken(types.bracketR);case 123:++this.pos;return this.finishToken(types.braceL);case 125:++this.pos;return this.finishToken(types.braceR);case 58:++this.pos;return this.finishToken(types.colon);case 96:// '`'\nif(this.options.ecmaVersion<6){break;}++this.pos;return this.finishToken(types.backQuote);case 48:// '0'\nvar next=this.input.charCodeAt(this.pos+1);if(next===120||next===88){return this.readRadixNumber(16);}// '0x', '0X' - hex number\nif(this.options.ecmaVersion>=6){if(next===111||next===79){return this.readRadixNumber(8);}// '0o', '0O' - octal number\nif(next===98||next===66){return this.readRadixNumber(2);}// '0b', '0B' - binary number\n}// Anything else beginning with a digit is an integer, octal\n// number, or float.\ncase 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:// 1-9\nreturn this.readNumber(false);// Quotes produce strings.\ncase 34:case 39:// '\"', \"'\"\nreturn this.readString(code);// Operators are parsed inline in tiny state machines. '=' (61) is\n// often referred to. `finishOp` simply skips the amount of\n// characters it is given as second argument, and returns a token\n// of the type given by its first argument.\ncase 47:// '/'\nreturn this.readToken_slash();case 37:case 42:// '%*'\nreturn this.readToken_mult_modulo_exp(code);case 124:case 38:// '|&'\nreturn this.readToken_pipe_amp(code);case 94:// '^'\nreturn this.readToken_caret();case 43:case 45:// '+-'\nreturn this.readToken_plus_min(code);case 60:case 62:// '<>'\nreturn this.readToken_lt_gt(code);case 61:case 33:// '=!'\nreturn this.readToken_eq_excl(code);case 63:// '?'\nreturn this.readToken_question();case 126:// '~'\nreturn this.finishOp(types.prefix,1);}this.raise(this.pos,\"Unexpected character '\"+codePointToString$1(code)+\"'\");};pp$9.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);this.pos+=size;return this.finishToken(type,str);};pp$9.readRegexp=function(){var escaped,inClass,start=this.pos;for(;;){if(this.pos>=this.input.length){this.raise(start,\"Unterminated regular expression\");}var ch=this.input.charAt(this.pos);if(lineBreak.test(ch)){this.raise(start,\"Unterminated regular expression\");}if(!escaped){if(ch===\"[\"){inClass=true;}else if(ch===\"]\"&&inClass){inClass=false;}else if(ch===\"/\"&&!inClass){break;}escaped=ch===\"\\\\\";}else{escaped=false;}++this.pos;}var pattern=this.input.slice(start,this.pos);++this.pos;var flagsStart=this.pos;var flags=this.readWord1();if(this.containsEsc){this.unexpected(flagsStart);}// Validate pattern\nvar state=this.regexpState||(this.regexpState=new RegExpValidationState(this));state.reset(start,pattern,flags);this.validateRegExpFlags(state);this.validateRegExpPattern(state);// Create Literal#value property value.\nvar value=null;try{value=new RegExp(pattern,flags);}catch(e){// ESTree requires null if it failed to instantiate RegExp object.\n// https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n}return this.finishToken(types.regexp,{pattern:pattern,flags:flags,value:value});};// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\npp$9.readInt=function(radix,len){var start=this.pos,total=0;for(var i=0,e=len==null?Infinity:len;i<e;++i){var code=this.input.charCodeAt(this.pos),val=void 0;if(code>=97){val=code-97+10;}// a\nelse if(code>=65){val=code-65+10;}// A\nelse if(code>=48&&code<=57){val=code-48;}// 0-9\nelse{val=Infinity;}if(val>=radix){break;}++this.pos;total=total*radix+val;}if(this.pos===start||len!=null&&this.pos-start!==len){return null;}return total;};pp$9.readRadixNumber=function(radix){var start=this.pos;this.pos+=2;// 0x\nvar val=this.readInt(radix);if(val==null){this.raise(this.start+2,\"Expected number in radix \"+radix);}if(this.options.ecmaVersion>=11&&this.input.charCodeAt(this.pos)===110){val=typeof BigInt!==\"undefined\"?BigInt(this.input.slice(start,this.pos)):null;++this.pos;}else if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}return this.finishToken(types.num,val);};// Read an integer, octal integer, or floating-point number.\npp$9.readNumber=function(startsWithDot){var start=this.pos;if(!startsWithDot&&this.readInt(10)===null){this.raise(start,\"Invalid number\");}var octal=this.pos-start>=2&&this.input.charCodeAt(start)===48;if(octal&&this.strict){this.raise(start,\"Invalid number\");}var next=this.input.charCodeAt(this.pos);if(!octal&&!startsWithDot&&this.options.ecmaVersion>=11&&next===110){var str$1=this.input.slice(start,this.pos);var val$1=typeof BigInt!==\"undefined\"?BigInt(str$1):null;++this.pos;if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}return this.finishToken(types.num,val$1);}if(octal&&/[89]/.test(this.input.slice(start,this.pos))){octal=false;}if(next===46&&!octal){// '.'\n++this.pos;this.readInt(10);next=this.input.charCodeAt(this.pos);}if((next===69||next===101)&&!octal){// 'eE'\nnext=this.input.charCodeAt(++this.pos);if(next===43||next===45){++this.pos;}// '+-'\nif(this.readInt(10)===null){this.raise(start,\"Invalid number\");}}if(isIdentifierStart(this.fullCharCodeAtPos())){this.raise(this.pos,\"Identifier directly after number\");}var str=this.input.slice(start,this.pos);var val=octal?parseInt(str,8):parseFloat(str);return this.finishToken(types.num,val);};// Read a string value, interpreting backslash-escapes.\npp$9.readCodePoint=function(){var ch=this.input.charCodeAt(this.pos),code;if(ch===123){// '{'\nif(this.options.ecmaVersion<6){this.unexpected();}var codePos=++this.pos;code=this.readHexChar(this.input.indexOf(\"}\",this.pos)-this.pos);++this.pos;if(code>0x10FFFF){this.invalidStringToken(codePos,\"Code point out of bounds\");}}else{code=this.readHexChar(4);}return code;};function codePointToString$1(code){// UTF-16 Decoding\nif(code<=0xFFFF){return String.fromCharCode(code);}code-=0x10000;return String.fromCharCode((code>>10)+0xD800,(code&1023)+0xDC00);}pp$9.readString=function(quote){var out=\"\",chunkStart=++this.pos;for(;;){if(this.pos>=this.input.length){this.raise(this.start,\"Unterminated string constant\");}var ch=this.input.charCodeAt(this.pos);if(ch===quote){break;}if(ch===92){// '\\'\nout+=this.input.slice(chunkStart,this.pos);out+=this.readEscapedChar(false);chunkStart=this.pos;}else{if(isNewLine(ch,this.options.ecmaVersion>=10)){this.raise(this.start,\"Unterminated string constant\");}++this.pos;}}out+=this.input.slice(chunkStart,this.pos++);return this.finishToken(types.string,out);};// Reads template string tokens.\nvar INVALID_TEMPLATE_ESCAPE_ERROR={};pp$9.tryReadTemplateToken=function(){this.inTemplateElement=true;try{this.readTmplToken();}catch(err){if(err===INVALID_TEMPLATE_ESCAPE_ERROR){this.readInvalidTemplateToken();}else{throw err;}}this.inTemplateElement=false;};pp$9.invalidStringToken=function(position,message){if(this.inTemplateElement&&this.options.ecmaVersion>=9){throw INVALID_TEMPLATE_ESCAPE_ERROR;}else{this.raise(position,message);}};pp$9.readTmplToken=function(){var out=\"\",chunkStart=this.pos;for(;;){if(this.pos>=this.input.length){this.raise(this.start,\"Unterminated template\");}var ch=this.input.charCodeAt(this.pos);if(ch===96||ch===36&&this.input.charCodeAt(this.pos+1)===123){// '`', '${'\nif(this.pos===this.start&&(this.type===types.template||this.type===types.invalidTemplate)){if(ch===36){this.pos+=2;return this.finishToken(types.dollarBraceL);}else{++this.pos;return this.finishToken(types.backQuote);}}out+=this.input.slice(chunkStart,this.pos);return this.finishToken(types.template,out);}if(ch===92){// '\\'\nout+=this.input.slice(chunkStart,this.pos);out+=this.readEscapedChar(true);chunkStart=this.pos;}else if(isNewLine(ch)){out+=this.input.slice(chunkStart,this.pos);++this.pos;switch(ch){case 13:if(this.input.charCodeAt(this.pos)===10){++this.pos;}case 10:out+=\"\\n\";break;default:out+=String.fromCharCode(ch);break;}if(this.options.locations){++this.curLine;this.lineStart=this.pos;}chunkStart=this.pos;}else{++this.pos;}}};// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++){switch(this.input[this.pos]){case\"\\\\\":++this.pos;break;case\"$\":if(this.input[this.pos+1]!==\"{\"){break;}// falls through\ncase\"`\":return this.finishToken(types.invalidTemplate,this.input.slice(this.start,this.pos));// no default\n}}this.raise(this.start,\"Unterminated template\");};// Used to read escaped characters\npp$9.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);++this.pos;switch(ch){case 110:return\"\\n\";// 'n' -> '\\n'\ncase 114:return\"\\r\";// 'r' -> '\\r'\ncase 120:return String.fromCharCode(this.readHexChar(2));// 'x'\ncase 117:return codePointToString$1(this.readCodePoint());// 'u'\ncase 116:return\"\\t\";// 't' -> '\\t'\ncase 98:return\"\\b\";// 'b' -> '\\b'\ncase 118:return\"\\x0B\";// 'v' -> '\\u000b'\ncase 102:return\"\\f\";// 'f' -> '\\f'\ncase 13:if(this.input.charCodeAt(this.pos)===10){++this.pos;}// '\\r\\n'\ncase 10:// ' \\n'\nif(this.options.locations){this.lineStart=this.pos;++this.curLine;}return\"\";case 56:case 57:if(inTemplate){var codePos=this.pos-1;this.invalidStringToken(codePos,\"Invalid escape sequence in template string\");return null;}default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0];var octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8);}this.pos+=octalStr.length-1;ch=this.input.charCodeAt(this.pos);if((octalStr!==\"0\"||ch===56||ch===57)&&(this.strict||inTemplate)){this.invalidStringToken(this.pos-1-octalStr.length,inTemplate?\"Octal literal in template string\":\"Octal literal in strict mode\");}return String.fromCharCode(octal);}if(isNewLine(ch)){// Unicode new line characters after \\ get removed from output in both\n// template literals and strings\nreturn\"\";}return String.fromCharCode(ch);}};// Used to read character escape sequences ('\\x', '\\u', '\\U').\npp$9.readHexChar=function(len){var codePos=this.pos;var n=this.readInt(16,len);if(n===null){this.invalidStringToken(codePos,\"Bad character escape sequence\");}return n;};// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\npp$9.readWord1=function(){this.containsEsc=false;var word=\"\",first=true,chunkStart=this.pos;var astral=this.options.ecmaVersion>=6;while(this.pos<this.input.length){var ch=this.fullCharCodeAtPos();if(isIdentifierChar(ch,astral)){this.pos+=ch<=0xffff?1:2;}else if(ch===92){// \"\\\"\nthis.containsEsc=true;word+=this.input.slice(chunkStart,this.pos);var escStart=this.pos;if(this.input.charCodeAt(++this.pos)!==117)// \"u\"\n{this.invalidStringToken(this.pos,\"Expecting Unicode escape sequence \\\\uXXXX\");}++this.pos;var esc=this.readCodePoint();if(!(first?isIdentifierStart:isIdentifierChar)(esc,astral)){this.invalidStringToken(escStart,\"Invalid Unicode escape\");}word+=codePointToString$1(esc);chunkStart=this.pos;}else{break;}first=false;}return word+this.input.slice(chunkStart,this.pos);};// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\npp$9.readWord=function(){var word=this.readWord1();var type=types.name;if(this.keywords.test(word)){type=keywords$1[word];}return this.finishToken(type,word);};// Acorn is a tiny, fast JavaScript parser written in JavaScript.\nvar version=\"7.3.1\";Parser.acorn={Parser:Parser,version:version,defaultOptions:defaultOptions,Position:Position,SourceLocation:SourceLocation,getLineInfo:getLineInfo,Node:Node,TokenType:TokenType,tokTypes:types,keywordTypes:keywords$1,TokContext:TokContext,tokContexts:types$1,isIdentifierChar:isIdentifierChar,isIdentifierStart:isIdentifierStart,Token:Token,isNewLine:isNewLine,lineBreak:lineBreak,lineBreakG:lineBreakG,nonASCIIwhitespace:nonASCIIwhitespace};// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\nfunction parse(input,options){return Parser.parse(input,options);}// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\nfunction parseExpressionAt(input,pos,options){return Parser.parseExpressionAt(input,pos,options);}function walk(ast,_ref){var enter=_ref.enter,leave=_ref.leave;return visit(ast,null,enter,leave);}var should_skip=false;var should_remove=false;var replacement=null;var context={skip:function skip(){return should_skip=true;},remove:function remove(){return should_remove=true;},replace:function replace(node){return replacement=node;}};function replace(parent,prop,index,node){if(parent){if(index!==null){parent[prop][index]=node;}else{parent[prop]=node;}}}function remove(parent,prop,index){if(parent){if(index!==null){parent[prop].splice(index,1);}else{delete parent[prop];}}}function visit(node,parent,enter,leave,prop,index){if(node){if(enter){var _should_skip=should_skip;var _should_remove=should_remove;var _replacement=replacement;should_skip=false;should_remove=false;replacement=null;enter.call(context,node,parent,prop,index);if(replacement){node=replacement;replace(parent,prop,index,node);}if(should_remove){remove(parent,prop,index);}var skipped=should_skip;var removed=should_remove;should_skip=_should_skip;should_remove=_should_remove;replacement=_replacement;if(skipped)return node;if(removed)return null;}for(var key in node){var _value2=node[key];if((0,_typeof2.default)(_value2)!=='object'){continue;}else if(Array.isArray(_value2)){for(var j=0,k=0;j<_value2.length;j+=1,k+=1){if(_value2[j]!==null&&typeof _value2[j].type==='string'){if(!visit(_value2[j],node,enter,leave,key,k)){// removed\nj--;}}}}else if(_value2!==null&&typeof _value2.type==='string'){visit(_value2,node,enter,leave,key,null);}}if(leave){var _replacement2=replacement;var _should_remove2=should_remove;replacement=null;should_remove=false;leave.call(context,node,parent,prop,index);if(replacement){node=replacement;replace(parent,prop,index,node);}if(should_remove){remove(parent,prop,index);}var _removed=should_remove;replacement=_replacement2;should_remove=_should_remove2;if(_removed)return null;}}return node;}function isReference(node,parent){if(node.type==='MemberExpression'){return!node.computed&&isReference(node.object,node);}if(node.type==='Identifier'){if(!parent)return true;switch(parent.type){// disregard `bar` in `foo.bar`\ncase'MemberExpression':return parent.computed||node===parent.object;// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\ncase'MethodDefinition':return parent.computed;// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\ncase'FieldDefinition':return parent.computed||node===parent.value;// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\ncase'Property':return parent.computed||node===parent.value;// disregard the `bar` in `export { foo as bar }` or\n// the foo in `import { foo as bar }`\ncase'ExportSpecifier':case'ImportSpecifier':return node===parent.local;// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\ncase'LabeledStatement':case'BreakStatement':case'ContinueStatement':return false;default:return true;}}return false;}function analyze(expression){var map=new WeakMap();var scope=new Scope$1(null,false);walk(expression,{enter:function enter(node,parent){if(node.type==='ImportDeclaration'){node.specifiers.forEach(function(specifier){scope.declarations.set(specifier.local.name,specifier);});}else if(/(Function(Declaration|Expression)|ArrowFunctionExpression)/.test(node.type)){if(node.type==='FunctionDeclaration'){scope.declarations.set(node.id.name,node);map.set(node,scope=new Scope$1(scope,false));}else{map.set(node,scope=new Scope$1(scope,false));if(node.type==='FunctionExpression'&&node.id)scope.declarations.set(node.id.name,node);}node.params.forEach(function(param){extract_names(param).forEach(function(name){scope.declarations.set(name,node);});});}else if(/For(?:In|Of)?Statement/.test(node.type)){map.set(node,scope=new Scope$1(scope,true));}else if(node.type==='BlockStatement'){map.set(node,scope=new Scope$1(scope,true));}else if(/(Class|Variable)Declaration/.test(node.type)){scope.add_declaration(node);}else if(node.type==='CatchClause'){map.set(node,scope=new Scope$1(scope,true));if(node.param){extract_names(node.param).forEach(function(name){scope.declarations.set(name,node.param);});}}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});var globals=new Map();walk(expression,{enter:function enter(node,parent){if(map.has(node))scope=map.get(node);if(node.type==='Identifier'&&isReference(node,parent)){var owner=scope.find_owner(node.name);if(!owner)globals.set(node.name,node);add_reference(scope,node.name);}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});return{map:map,scope:scope,globals:globals};}function add_reference(scope,name){scope.references.add(name);if(scope.parent)add_reference(scope.parent,name);}var Scope$1=/*#__PURE__*/function(){(0,_createClass2.default)(Scope$1,[{key:\"__init\",value:function __init(){this.declarations=new Map();}},{key:\"__init2\",value:function __init2(){this.initialised_declarations=new Set();}},{key:\"__init3\",value:function __init3(){this.references=new Set();}}]);function Scope$1(parent,block){(0,_classCallCheck2.default)(this,Scope$1);Scope$1.prototype.__init.call(this);Scope$1.prototype.__init2.call(this);Scope$1.prototype.__init3.call(this);this.parent=parent;this.block=block;}(0,_createClass2.default)(Scope$1,[{key:\"add_declaration\",value:function add_declaration(node){var _this2=this;if(node.type==='VariableDeclaration'){if(node.kind==='var'&&this.block&&this.parent){this.parent.add_declaration(node);}else if(node.type==='VariableDeclaration'){node.declarations.forEach(function(declarator){extract_names(declarator.id).forEach(function(name){_this2.declarations.set(name,node);if(declarator.init)_this2.initialised_declarations.add(name);});});}}else{this.declarations.set(node.id.name,node);}}},{key:\"find_owner\",value:function find_owner(name){if(this.declarations.has(name))return this;return this.parent&&this.parent.find_owner(name);}},{key:\"has\",value:function has(name){return this.declarations.has(name)||this.parent&&this.parent.has(name);}}]);return Scope$1;}();function extract_names(param){return extract_identifiers(param).map(function(node){return node.name;});}function extract_identifiers(param){var nodes=[];extractors[param.type]&&extractors[param.type](nodes,param);return nodes;}var extractors={Identifier:function Identifier(nodes,param){nodes.push(param);},MemberExpression:function MemberExpression(nodes,param){var object=param;while(object.type==='MemberExpression'){object=object.object;}nodes.push(object);},ObjectPattern:function ObjectPattern(nodes,param){param.properties.forEach(function(prop){if(prop.type==='RestElement'){nodes.push(prop.argument);}else{extractors[prop.value.type](nodes,prop.value);}});},ArrayPattern:function ArrayPattern(nodes,param){param.elements.forEach(function(element){if(element)extractors[element.type](nodes,element);});},RestElement:function RestElement(nodes,param){extractors[param.argument.type](nodes,param.argument);},AssignmentPattern:function AssignmentPattern(nodes,param){extractors[param.left.type](nodes,param.left);}};var chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';function encode(decoded){var sourceFileIndex=0;// second field\nvar sourceCodeLine=0;// third field\nvar sourceCodeColumn=0;// fourth field\nvar nameIndex=0;// fifth field\nvar mappings='';for(var i=0;i<decoded.length;i++){var line=decoded[i];if(i>0)mappings+=';';if(line.length===0)continue;var generatedCodeColumn=0;// first field\nvar lineMappings=[];for(var _i=0,line_1=line;_i<line_1.length;_i++){var segment=line_1[_i];var segmentMappings=encodeInteger(segment[0]-generatedCodeColumn);generatedCodeColumn=segment[0];if(segment.length>1){segmentMappings+=encodeInteger(segment[1]-sourceFileIndex)+encodeInteger(segment[2]-sourceCodeLine)+encodeInteger(segment[3]-sourceCodeColumn);sourceFileIndex=segment[1];sourceCodeLine=segment[2];sourceCodeColumn=segment[3];}if(segment.length===5){segmentMappings+=encodeInteger(segment[4]-nameIndex);nameIndex=segment[4];}lineMappings.push(segmentMappings);}mappings+=lineMappings.join(',');}return mappings;}function encodeInteger(num){var result='';num=num<0?-num<<1|1:num<<1;do{var clamped=num&31;num>>>=5;if(num>0){clamped|=32;}result+=chars[clamped];}while(num>0);return result;}// generate an ID that is, to all intents and purposes, unique\nvar id=Math.round(Math.random()*1e20).toString(36);var re=new RegExp(\"_\".concat(id,\"_(?:(\\\\d+)|(AT)|(HASH))_(\\\\w+)?\"),'g');var get_comment_handlers=function get_comment_handlers(comments,raw){return{// pass to acorn options\nonComment:function onComment(block,value,start,end){if(block&&/\\n/.test(value)){var a=start;while(a>0&&raw[a-1]!=='\\n'){a-=1;}var _b=a;while(/[ \\t]/.test(raw[_b])){_b+=1;}var indentation=raw.slice(a,_b);value=value.replace(new RegExp(\"^\".concat(indentation),'gm'),'');}comments.push({type:block?'Block':'Line',value:value,start:start,end:end});},// pass to estree-walker options\nenter:function enter(node){var comment;while(comments[0]&&comments[0].start<node.start){comment=comments.shift();comment.value=comment.value.replace(re,function(match,id,at,hash,value){if(hash)return\"#\".concat(value);if(at)return\"@\".concat(value);return match;});var next=comments[0]||node;comment.has_trailing_newline=comment.type==='Line'||/\\n/.test(raw.slice(comment.end,next.start));(node.leadingComments||(node.leadingComments=[])).push(comment);}},leave:function leave(node){if(comments[0]){var slice=raw.slice(node.end,comments[0].start);if(/^[,) \\t]*$/.test(slice)){node.trailingComments=[comments.shift()];}}}};};function handle(node,state){var handler=handlers[node.type];if(!handler){throw new Error(\"Not implemented \".concat(node.type));}var result=handler(node,state);if(node.leadingComments){result.unshift(c(node.leadingComments.map(function(comment){return comment.type==='Block'?\"/*\".concat(comment.value,\"*/\").concat(comment.has_trailing_newline?\"\\n\".concat(state.indent):\" \"):\"//\".concat(comment.value).concat(comment.has_trailing_newline?\"\\n\".concat(state.indent):\" \");}).join(\"\")));}if(node.trailingComments){state.comments.push(node.trailingComments[0]);// there is only ever one\n}return result;}function c(content,node){return{content:content,loc:node&&node.loc,has_newline:/\\n/.test(content)};}var OPERATOR_PRECEDENCE={'||':2,'&&':3,'??':4,'|':5,'^':6,'&':7,'==':8,'!=':8,'===':8,'!==':8,'<':9,'>':9,'<=':9,'>=':9,in:9,instanceof:9,'<<':10,'>>':10,'>>>':10,'+':11,'-':11,'*':12,'%':12,'/':12,'**':13};var EXPRESSIONS_PRECEDENCE={ArrayExpression:20,TaggedTemplateExpression:20,ThisExpression:20,Identifier:20,Literal:18,TemplateLiteral:20,Super:20,SequenceExpression:20,MemberExpression:19,CallExpression:19,NewExpression:19,AwaitExpression:17,ClassExpression:17,FunctionExpression:17,ObjectExpression:17,UpdateExpression:16,UnaryExpression:15,BinaryExpression:14,LogicalExpression:13,ConditionalExpression:4,ArrowFunctionExpression:3,AssignmentExpression:3,YieldExpression:2,RestElement:1};function needs_parens(node,parent,is_right){var precedence=EXPRESSIONS_PRECEDENCE[node.type];var parent_precedence=EXPRESSIONS_PRECEDENCE[parent.type];if(precedence!==parent_precedence){// Different node types\nreturn!is_right&&precedence===15&&parent_precedence===14&&parent.operator==='**'||precedence<parent_precedence;}if(precedence!==13&&precedence!==14){// Not a `LogicalExpression` or `BinaryExpression`\nreturn false;}if(node.operator==='**'&&parent.operator==='**'){// Exponentiation operator has right-to-left associativity\nreturn!is_right;}if(is_right){// Parenthesis are used if both operators have the same precedence\nreturn OPERATOR_PRECEDENCE[node.operator]<=OPERATOR_PRECEDENCE[parent.operator];}return OPERATOR_PRECEDENCE[node.operator]<OPERATOR_PRECEDENCE[parent.operator];}function has_call_expression(node){while(node){if(node.type[0]==='CallExpression'){return true;}else if(node.type==='MemberExpression'){node=node.object;}else{return false;}}}var has_newline=function has_newline(chunks){for(var _i2=0;_i2<chunks.length;_i2+=1){if(chunks[_i2].has_newline)return true;}return false;};var get_length=function get_length(chunks){var total=0;for(var _i3=0;_i3<chunks.length;_i3+=1){total+=chunks[_i3].content.length;}return total;};var sum=function sum(a,b){return a+b;};var join=function join(nodes,separator){if(nodes.length===0)return[];var joined=(0,_toConsumableArray2.default)(nodes[0]);for(var _i4=1;_i4<nodes.length;_i4+=1){joined.push.apply(joined,[separator].concat((0,_toConsumableArray2.default)(nodes[_i4])));}return joined;};var scoped=function scoped(fn){return function(node,state){return fn(node,_objectSpread(_objectSpread({},state),{},{scope:state.scope_map.get(node)}));};};var deconflict=function deconflict(name,names){var original=name;var i=1;while(names.has(name)){name=\"\".concat(original,\"$\").concat(i++);}return name;};var handle_body=function handle_body(nodes,state){var chunks=[];var body=nodes.map(function(statement){var chunks=handle(statement,_objectSpread(_objectSpread({},state),{},{indent:state.indent}));var add_newline=false;while(state.comments.length){var comment=state.comments.shift();var prefix=add_newline?\"\\n\".concat(state.indent):\" \";chunks.push(c(comment.type==='Block'?\"\".concat(prefix,\"/*\").concat(comment.value,\"*/\"):\"\".concat(prefix,\"//\").concat(comment.value)));add_newline=comment.type==='Line';}return chunks;});var needed_padding=false;for(var _i5=0;_i5<body.length;_i5+=1){var needs_padding=has_newline(body[_i5]);if(_i5>0){chunks.push(c(needs_padding||needed_padding?\"\\n\\n\".concat(state.indent):\"\\n\".concat(state.indent)));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(body[_i5]));needed_padding=needs_padding;}return chunks;};var handle_var_declaration=function handle_var_declaration(node,state){var chunks=[c(\"\".concat(node.kind,\" \"))];var declarators=node.declarations.map(function(d){return handle(d,_objectSpread(_objectSpread({},state),{},{indent:state.indent+(node.declarations.length===1?'':'\\t')}));});var multiple_lines=declarators.some(has_newline)||declarators.map(get_length).reduce(sum,0)+(state.indent.length+declarators.length-1)*2>80;var separator=c(multiple_lines?\",\\n\".concat(state.indent,\"\\t\"):', ');if(multiple_lines){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(declarators,separator)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(declarators,separator)));}return chunks;};var handlers={Program:function Program(node,state){return handle_body(node.body,state);},BlockStatement:scoped(function(node,state){return[c(\"{\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(handle_body(node.body,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}))),[c(\"\\n\".concat(state.indent,\"}\"))]);}),EmptyStatement:function EmptyStatement(node,state){return[];},ParenthesizedExpression:function ParenthesizedExpression(node,state){return handle(node.expression,state);},ExpressionStatement:function ExpressionStatement(node,state){if(node.expression.type==='AssignmentExpression'&&node.expression.left.type==='ObjectPattern'){// is an AssignmentExpression to an ObjectPattern\nreturn[c('(')].concat((0,_toConsumableArray2.default)(handle(node.expression,state)),[c(');')]);}return[].concat((0,_toConsumableArray2.default)(handle(node.expression,state)),[c(';')]);},IfStatement:function IfStatement(node,state){var chunks=[c('if (')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.consequent,state)));if(node.alternate){chunks.push.apply(chunks,[c(' else ')].concat((0,_toConsumableArray2.default)(handle(node.alternate,state))));}return chunks;},LabeledStatement:function LabeledStatement(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(': ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},BreakStatement:function BreakStatement(node,state){return node.label?[c('break ')].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(';')]):[c('break;')];},ContinueStatement:function ContinueStatement(node,state){return node.label?[c('continue ')].concat((0,_toConsumableArray2.default)(handle(node.label,state)),[c(';')]):[c('continue;')];},WithStatement:function WithStatement(node,state){return[c('with (')].concat((0,_toConsumableArray2.default)(handle(node.object,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},SwitchStatement:function SwitchStatement(node,state){var chunks=[c('switch (')].concat((0,_toConsumableArray2.default)(handle(node.discriminant,state)),[c(') {')]);node.cases.forEach(function(block){if(block.test){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\tcase \"))].concat((0,_toConsumableArray2.default)(handle(block.test,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\")}))),[c(':')]));}else{chunks.push(c(\"\\n\".concat(state.indent,\"\\tdefault:\")));}block.consequent.forEach(function(statement){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\\t\"))].concat((0,_toConsumableArray2.default)(handle(statement,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\\t\")})))));});});chunks.push(c(\"\\n\".concat(state.indent,\"}\")));return chunks;},ReturnStatement:function ReturnStatement(node,state){if(node.argument){return[c('return ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(';')]);}else{return[c('return;')];}},ThrowStatement:function ThrowStatement(node,state){return[c('throw ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(';')]);},TryStatement:function TryStatement(node,state){var chunks=[c('try ')].concat((0,_toConsumableArray2.default)(handle(node.block,state)));if(node.handler){if(node.handler.param){chunks.push.apply(chunks,[c(' catch(')].concat((0,_toConsumableArray2.default)(handle(node.handler.param,state)),[c(') ')]));}else{chunks.push(c(' catch '));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.handler.body,state)));}if(node.finalizer){chunks.push.apply(chunks,[c(' finally ')].concat((0,_toConsumableArray2.default)(handle(node.finalizer,state))));}return chunks;},WhileStatement:function WhileStatement(node,state){return[c('while (')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state)));},DoWhileStatement:function DoWhileStatement(node,state){return[c('do ')].concat((0,_toConsumableArray2.default)(handle(node.body,state)),[c(' while (')],(0,_toConsumableArray2.default)(handle(node.test,state)),[c(');')]);},ForStatement:scoped(function(node,state){var chunks=[c('for (')];if(node.init){if(node.init.type==='VariableDeclaration'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle_var_declaration(node.init,state)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.init,state)));}}chunks.push(c('; '));if(node.test)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.test,state)));chunks.push(c('; '));if(node.update)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.update,state)));chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),ForInStatement:scoped(function(node,state){var chunks=[c(\"for \".concat(node.await?'await ':'',\"(\"))];if(node.left.type==='VariableDeclaration'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle_var_declaration(node.left,state)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.left,state)));}chunks.push.apply(chunks,[c(node.type==='ForInStatement'?\" in \":\" of \")].concat((0,_toConsumableArray2.default)(handle(node.right,state)),[c(') ')],(0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),DebuggerStatement:function DebuggerStatement(node,state){return[c('debugger',node),c(';')];},FunctionDeclaration:scoped(function(node,state){var chunks=[];if(node.async)chunks.push(c('async '));chunks.push(c(node.generator?'function* ':'function '));if(node.id)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.id,state)));chunks.push(c('('));var params=node.params.map(function(p){return handle(p,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});var multiple_lines=params.some(has_newline)||params.map(get_length).reduce(sum,0)+(state.indent.length+params.length-1)*2>80;var separator=c(multiple_lines?\",\\n\".concat(state.indent):', ');if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(params,separator)),[c(\"\\n\".concat(state.indent))]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(params,separator)));}chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.body,state))));return chunks;}),VariableDeclaration:function VariableDeclaration(node,state){return handle_var_declaration(node,state).concat(c(';'));},VariableDeclarator:function VariableDeclarator(node,state){if(node.init){return[].concat((0,_toConsumableArray2.default)(handle(node.id,state)),[c(' = ')],(0,_toConsumableArray2.default)(handle(node.init,state)));}else{return handle(node.id,state);}},ClassDeclaration:function ClassDeclaration(node,state){var chunks=[c('class ')];if(node.id)chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.id,state)).concat([c(' ')]));if(node.superClass){chunks.push.apply(chunks,[c('extends ')].concat((0,_toConsumableArray2.default)(handle(node.superClass,state)),[c(' ')]));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.body,state)));return chunks;},ImportDeclaration:function ImportDeclaration(node,state){var chunks=[c('import ')];var length=node.specifiers.length;var source=handle(node.source,state);if(length>0){var _i6=0;while(_i6<length){if(_i6>0){chunks.push(c(', '));}var specifier=node.specifiers[_i6];if(specifier.type==='ImportDefaultSpecifier'){chunks.push(c(specifier.local.name,specifier));_i6+=1;}else if(specifier.type==='ImportNamespaceSpecifier'){chunks.push(c('* as '+specifier.local.name,specifier));_i6+=1;}else{break;}}if(_i6<length){// we have named specifiers\nvar specifiers=node.specifiers.slice(_i6).map(function(specifier){var name=handle(specifier.imported,state)[0];var as=handle(specifier.local,state)[0];if(name.content===as.content){return[as];}return[name,c(' as '),as];});var width=get_length(chunks)+specifiers.map(get_length).reduce(sum,0)+2*specifiers.length+6+get_length(source);if(width>80){chunks.push.apply(chunks,[c(\"{\\n\\t\")].concat((0,_toConsumableArray2.default)(join(specifiers,c(',\\n\\t'))),[c('\\n}')]));}else{chunks.push.apply(chunks,[c(\"{ \")].concat((0,_toConsumableArray2.default)(join(specifiers,c(', '))),[c(' }')]));}}chunks.push(c(' from '));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(source).concat([c(';')]));return chunks;},ImportExpression:function ImportExpression(node,state){return[c('import(')].concat((0,_toConsumableArray2.default)(handle(node.source,state)),[c(')')]);},ExportDefaultDeclaration:function ExportDefaultDeclaration(node,state){var chunks=[c(\"export default \")].concat((0,_toConsumableArray2.default)(handle(node.declaration,state)));if(node.declaration.type!=='FunctionDeclaration'){chunks.push(c(';'));}return chunks;},ExportNamedDeclaration:function ExportNamedDeclaration(node,state){var chunks=[c('export ')];if(node.declaration){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.declaration,state)));}else{var specifiers=node.specifiers.map(function(specifier){var name=handle(specifier.local,state)[0];var as=handle(specifier.exported,state)[0];if(name.content===as.content){return[name];}return[name,c(' as '),as];});var width=7+specifiers.map(get_length).reduce(sum,0)+2*specifiers.length;if(width>80){chunks.push.apply(chunks,[c('{\\n\\t')].concat((0,_toConsumableArray2.default)(join(specifiers,c(',\\n\\t'))),[c('\\n}')]));}else{chunks.push.apply(chunks,[c('{ ')].concat((0,_toConsumableArray2.default)(join(specifiers,c(', '))),[c(' }')]));}if(node.source){chunks.push.apply(chunks,[c(' from ')].concat((0,_toConsumableArray2.default)(handle(node.source,state))));}}chunks.push(c(';'));return chunks;},ExportAllDeclaration:function ExportAllDeclaration(node,state){return[c(\"export * from \")].concat((0,_toConsumableArray2.default)(handle(node.source,state)),[c(\";\")]);},MethodDefinition:function MethodDefinition(node,state){var chunks=[];if(node.static){chunks.push(c('static '));}if(node.kind==='get'||node.kind==='set'){// Getter or setter\nchunks.push(c(node.kind+' '));}if(node.value.async){chunks.push(c('async '));}if(node.value.generator){chunks.push(c('*'));}if(node.computed){chunks.push.apply(chunks,[c('[')].concat((0,_toConsumableArray2.default)(handle(node.key,state)),[c(']')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.key,state)));}chunks.push(c('('));var params=node.value.params;for(var _i7=0;_i7<params.length;_i7+=1){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(params[_i7],state)));if(_i7<params.length-1)chunks.push(c(', '));}chunks.push.apply(chunks,[c(') ')].concat((0,_toConsumableArray2.default)(handle(node.value.body,state))));return chunks;},ArrowFunctionExpression:scoped(function(node,state){var chunks=[];if(node.async)chunks.push(c('async '));if(node.params.length===1&&node.params[0].type==='Identifier'){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.params[0],state)));}else{var params=node.params.map(function(param){return handle(param,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(params,c(', '))),[c(')')]));}chunks.push(c(' => '));if(node.body.type==='ObjectExpression'){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.body,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.body,state)));}return chunks;}),ThisExpression:function ThisExpression(node,state){return[c('this',node)];},Super:function Super(node,state){return[c('super',node)];},RestElement:function RestElement(node,state){return[c('...')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));},YieldExpression:function YieldExpression(node,state){if(node.argument){return[c(node.delegate?\"yield* \":\"yield \")].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));}return[c(node.delegate?\"yield*\":\"yield\")];},AwaitExpression:function AwaitExpression(node,state){if(node.argument){var precedence=EXPRESSIONS_PRECEDENCE[node.argument.type];if(precedence&&precedence<EXPRESSIONS_PRECEDENCE.AwaitExpression){return[c('await (')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(')')]);}else{return[c('await ')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)));}}return[c('await')];},TemplateLiteral:function TemplateLiteral(node,state){var chunks=[c('`')];var quasis=node.quasis,expressions=node.expressions;for(var _i8=0;_i8<expressions.length;_i8++){chunks.push.apply(chunks,[c(quasis[_i8].value.raw),c('${')].concat((0,_toConsumableArray2.default)(handle(expressions[_i8],state)),[c('}')]));}chunks.push(c(quasis[quasis.length-1].value.raw),c('`'));return chunks;},TaggedTemplateExpression:function TaggedTemplateExpression(node,state){return handle(node.tag,state).concat(handle(node.quasi,state));},ArrayExpression:function ArrayExpression(node,state){var chunks=[c('[')];var elements=[];var sparse_commas=[];for(var _i9=0;_i9<node.elements.length;_i9+=1){// can't use map/forEach because of sparse arrays\nvar _element=node.elements[_i9];if(_element){elements.push([].concat((0,_toConsumableArray2.default)(sparse_commas),(0,_toConsumableArray2.default)(handle(_element,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'})))));sparse_commas=[];}else{sparse_commas.push(c(','));}}var multiple_lines=elements.some(has_newline)||elements.map(get_length).reduce(sum,0)+(state.indent.length+elements.length-1)*2>80;if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(elements,c(\",\\n\".concat(state.indent,\"\\t\")))),[c(\"\\n\".concat(state.indent))],(0,_toConsumableArray2.default)(sparse_commas)));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(join(elements,c(', '))).concat((0,_toConsumableArray2.default)(sparse_commas)));}chunks.push(c(']'));return chunks;},ObjectExpression:function ObjectExpression(node,state){if(node.properties.length===0){return[c('{}')];}var has_inline_comment=false;var chunks=[];var separator=c(', ');node.properties.forEach(function(p,i){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(p,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}))));if(state.comments.length){// TODO generalise this, so it works with ArrayExpressions and other things.\n// At present, stuff will just get appended to the closest statement/declaration\nchunks.push(c(', '));while(state.comments.length){var comment=state.comments.shift();chunks.push(c(comment.type==='Block'?\"/*\".concat(comment.value,\"*/\\n\").concat(state.indent,\"\\t\"):\"//\".concat(comment.value,\"\\n\").concat(state.indent,\"\\t\")));if(comment.type==='Line'){has_inline_comment=true;}}}else{if(i<node.properties.length-1){chunks.push(separator);}}});var multiple_lines=has_inline_comment||has_newline(chunks)||get_length(chunks)>40;if(multiple_lines){separator.content=\",\\n\".concat(state.indent,\"\\t\");}return[c(multiple_lines?\"{\\n\".concat(state.indent,\"\\t\"):\"{ \")].concat(chunks,[c(multiple_lines?\"\\n\".concat(state.indent,\"}\"):\" }\")]);},Property:function Property(node,state){var value=handle(node.value,state);if(node.key===node.value){return value;}// special case\nif(!node.computed&&node.value.type==='AssignmentPattern'&&node.value.left.type==='Identifier'&&node.value.left.name===node.key.name){return value;}if(node.value.type==='Identifier'&&(node.key.type==='Identifier'&&node.key.name===value[0].content||node.key.type==='Literal'&&node.key.value===value[0].content)){return value;}var key=handle(node.key,state);if(node.value.type==='FunctionExpression'&&!node.value.id){state=_objectSpread(_objectSpread({},state),{},{scope:state.scope_map.get(node.value)});var chunks=node.kind!=='init'?[c(\"\".concat(node.kind,\" \"))]:[];if(node.value.async){chunks.push(c('async '));}if(node.value.generator){chunks.push(c('*'));}chunks.push.apply(chunks,(0,_toConsumableArray2.default)(node.computed?[c('[')].concat((0,_toConsumableArray2.default)(key),[c(']')]):key).concat([c('(')],(0,_toConsumableArray2.default)(join(node.value.params.map(function(param){return handle(param,state);}),c(', '))),[c(') ')],(0,_toConsumableArray2.default)(handle(node.value.body,state))));return chunks;}if(node.computed){return[c('[')].concat((0,_toConsumableArray2.default)(key),[c(']: ')],(0,_toConsumableArray2.default)(value));}return[].concat((0,_toConsumableArray2.default)(key),[c(': ')],(0,_toConsumableArray2.default)(value));},ObjectPattern:function ObjectPattern(node,state){var chunks=[c('{ ')];for(var _i10=0;_i10<node.properties.length;_i10+=1){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.properties[_i10],state)));if(_i10<node.properties.length-1)chunks.push(c(', '));}chunks.push(c(' }'));return chunks;},SequenceExpression:function SequenceExpression(node,state){var expressions=node.expressions.map(function(e){return handle(e,state);});return[c('(')].concat((0,_toConsumableArray2.default)(join(expressions,c(', '))),[c(')')]);},UnaryExpression:function UnaryExpression(node,state){var chunks=[c(node.operator)];if(node.operator.length>1){chunks.push(c(' '));}if(EXPRESSIONS_PRECEDENCE[node.argument.type]<EXPRESSIONS_PRECEDENCE.UnaryExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.argument,state)));}return chunks;},UpdateExpression:function UpdateExpression(node,state){return node.prefix?[c(node.operator)].concat((0,_toConsumableArray2.default)(handle(node.argument,state))):[].concat((0,_toConsumableArray2.default)(handle(node.argument,state)),[c(node.operator)]);},AssignmentExpression:function AssignmentExpression(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.left,state)),[c(\" \".concat(node.operator||'=',\" \"))],(0,_toConsumableArray2.default)(handle(node.right,state)));},BinaryExpression:function BinaryExpression(node,state){var chunks=[];// TODO\n// const is_in = node.operator === 'in';\n// if (is_in) {\n// \t// Avoids confusion in `for` loops initializers\n// \tchunks.push(c('('));\n// }\nif(needs_parens(node.left,node,false)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.left,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.left,state)));}chunks.push(c(\" \".concat(node.operator,\" \")));if(needs_parens(node.right,node,true)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.right,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.right,state)));}return chunks;},ConditionalExpression:function ConditionalExpression(node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.test.type]>EXPRESSIONS_PRECEDENCE.ConditionalExpression){chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.test,state)));}else{chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.test,state)),[c(')')]));}var child_state=_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'});var consequent=handle(node.consequent,child_state);var alternate=handle(node.alternate,child_state);var multiple_lines=has_newline(consequent)||has_newline(alternate)||get_length(chunks)+get_length(consequent)+get_length(alternate)>50;if(multiple_lines){chunks.push.apply(chunks,[c(\"\\n\".concat(state.indent,\"? \"))].concat((0,_toConsumableArray2.default)(consequent),[c(\"\\n\".concat(state.indent,\": \"))],(0,_toConsumableArray2.default)(alternate)));}else{chunks.push.apply(chunks,[c(\" ? \")].concat((0,_toConsumableArray2.default)(consequent),[c(\" : \")],(0,_toConsumableArray2.default)(alternate)));}return chunks;},NewExpression:function NewExpression(node,state){var chunks=[c('new ')];if(EXPRESSIONS_PRECEDENCE[node.callee.type]<EXPRESSIONS_PRECEDENCE.CallExpression||has_call_expression(node.callee)){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.callee,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.callee,state)));}// TODO this is copied from CallExpression — DRY it out\nvar args=node.arguments.map(function(arg){return handle(arg,_objectSpread(_objectSpread({},state),{},{indent:state.indent+'\\t'}));});var separator=args.some(has_newline)// TODO or length exceeds 80\n?c(',\\n'+state.indent):c(', ');chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(args,separator)),[c(')')]));return chunks;},ChainExpression:function ChainExpression(node,state){return handle(node.expression,state);},CallExpression:function CallExpression(node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.callee.type]<EXPRESSIONS_PRECEDENCE.CallExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.callee,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.callee,state)));}if(node.optional){chunks.push(c('?.'));}var args=node.arguments.map(function(arg){return handle(arg,state);});var multiple_lines=args.slice(0,-1).some(has_newline);// TODO or length exceeds 80\nif(multiple_lines){// need to handle args again. TODO find alternative approach?\nvar _args=node.arguments.map(function(arg){return handle(arg,_objectSpread(_objectSpread({},state),{},{indent:\"\".concat(state.indent,\"\\t\")}));});chunks.push.apply(chunks,[c(\"(\\n\".concat(state.indent,\"\\t\"))].concat((0,_toConsumableArray2.default)(join(_args,c(\",\\n\".concat(state.indent,\"\\t\")))),[c(\"\\n\".concat(state.indent,\")\"))]));}else{chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(join(args,c(', '))),[c(')')]));}return chunks;},MemberExpression:function MemberExpression(node,state){var chunks=[];if(EXPRESSIONS_PRECEDENCE[node.object.type]<EXPRESSIONS_PRECEDENCE.MemberExpression){chunks.push.apply(chunks,[c('(')].concat((0,_toConsumableArray2.default)(handle(node.object,state)),[c(')')]));}else{chunks.push.apply(chunks,(0,_toConsumableArray2.default)(handle(node.object,state)));}if(node.computed){if(node.optional){chunks.push(c('?.'));}chunks.push.apply(chunks,[c('[')].concat((0,_toConsumableArray2.default)(handle(node.property,state)),[c(']')]));}else{chunks.push.apply(chunks,[c(node.optional?'?.':'.')].concat((0,_toConsumableArray2.default)(handle(node.property,state))));}return chunks;},MetaProperty:function MetaProperty(node,state){return[].concat((0,_toConsumableArray2.default)(handle(node.meta,state)),[c('.')],(0,_toConsumableArray2.default)(handle(node.property,state)));},Identifier:function Identifier(node,state){var name=node.name;if(name[0]==='@'){name=state.getName(name.slice(1));}else if(node.name[0]==='#'){var owner=state.scope.find_owner(node.name);if(!owner){throw new Error(\"Could not find owner for node\");}if(!state.deconflicted.has(owner)){state.deconflicted.set(owner,new Map());}var deconflict_map=state.deconflicted.get(owner);if(!deconflict_map.has(node.name)){deconflict_map.set(node.name,deconflict(node.name.slice(1),owner.references));}name=deconflict_map.get(node.name);}return[c(name,node)];},Literal:function Literal(node,state){if(typeof node.value==='string'){return[// TODO do we need to handle weird unicode characters somehow?\n// str.replace(/\\\\u(\\d{4})/g, (m, n) => String.fromCharCode(+n))\nc(JSON.stringify(node.value).replace(re,function(_m,_i,at,hash,name){if(at)return'@'+name;if(hash)return'#'+name;throw new Error(\"this shouldn't happen\");}),node)];}var regex=node.regex;// TODO is this right?\nif(regex){return[c(\"/\".concat(regex.pattern,\"/\").concat(regex.flags),node)];}return[c(String(node.value),node)];}};handlers.ForOfStatement=handlers.ForInStatement;handlers.FunctionExpression=handlers.FunctionDeclaration;handlers.ClassExpression=handlers.ClassDeclaration;handlers.ClassBody=handlers.BlockStatement;handlers.SpreadElement=handlers.RestElement;handlers.ArrayPattern=handlers.ArrayExpression;handlers.LogicalExpression=handlers.BinaryExpression;handlers.AssignmentPattern=handlers.AssignmentExpression;var btoa=function btoa(){throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');};if(typeof window!=='undefined'&&typeof window.btoa==='function'){btoa=function btoa(str){return window.btoa(unescape(encodeURIComponent(str)));};}else if(typeof Buffer==='function'){btoa=function btoa(str){return Buffer.from(str,'utf-8').toString('base64');};}function print(node){var opts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(Array.isArray(node)){return print({type:'Program',body:node},opts);}var _opts$getName=opts.getName,getName=_opts$getName===void 0?function(x){throw new Error(\"Unhandled sigil @\".concat(x));}:_opts$getName;var _analyze=analyze(node),scope_map=_analyze.map,scope=_analyze.scope;var deconflicted=new WeakMap();var chunks=handle(node,{indent:'',getName:getName,scope:scope,scope_map:scope_map,deconflicted:deconflicted,comments:[]});var code='';var mappings=[];var current_line=[];var current_column=0;for(var _i11=0;_i11<chunks.length;_i11+=1){var chunk=chunks[_i11];code+=chunk.content;if(chunk.loc){current_line.push([current_column,0,// source index is always zero\nchunk.loc.start.line-1,chunk.loc.start.column]);}for(var _i12=0;_i12<chunk.content.length;_i12+=1){if(chunk.content[_i12]==='\\n'){mappings.push(current_line);current_line=[];current_column=0;}else{current_column+=1;}}if(chunk.loc){current_line.push([current_column,0,// source index is always zero\nchunk.loc.end.line-1,chunk.loc.end.column]);}}mappings.push(current_line);var map={version:3,names:[],sources:[opts.sourceMapSource||null],sourcesContent:[opts.sourceMapContent||null],mappings:encode(mappings)};Object.defineProperties(map,{toString:{enumerable:false,value:function toString(){return JSON.stringify(this);}},toUrl:{enumerable:false,value:function toUrl(){return'data:application/json;charset=utf-8;base64,'+btoa(this.toString());}}});return{code:code,map:map};}var sigils={'@':'AT','#':'HASH'};var join$1=function join$1(strings){var str=strings[0];for(var _i13=1;_i13<strings.length;_i13+=1){str+=\"_\".concat(id,\"_\").concat(_i13-1,\"_\").concat(strings[_i13]);}return str.replace(/([@#])(\\w+)/g,function(_m,sigil,name){return\"_\".concat(id,\"_\").concat(sigils[sigil],\"_\").concat(name);});};var flatten_body=function flatten_body(array,target){for(var _i14=0;_i14<array.length;_i14+=1){var statement=array[_i14];if(Array.isArray(statement)){flatten_body(statement,target);continue;}if(statement.type==='ExpressionStatement'){if(statement.expression===EMPTY)continue;if(Array.isArray(statement.expression)){// TODO this is hacktacular\nvar _node2=statement.expression[0];while(Array.isArray(_node2)){_node2=_node2[0];}if(_node2)_node2.leadingComments=statement.leadingComments;flatten_body(statement.expression,target);continue;}if(/(Expression|Literal)$/.test(statement.expression.type)){target.push(statement);continue;}if(statement.leadingComments)statement.expression.leadingComments=statement.leadingComments;if(statement.trailingComments)statement.expression.trailingComments=statement.trailingComments;target.push(statement.expression);continue;}target.push(statement);}return target;};var flatten_properties=function flatten_properties(array,target){for(var _i15=0;_i15<array.length;_i15+=1){var property=array[_i15];if(property.value===EMPTY)continue;if(property.key===property.value&&Array.isArray(property.key)){flatten_properties(property.key,target);continue;}target.push(property);}return target;};var flatten=function flatten(nodes,target){for(var _i16=0;_i16<nodes.length;_i16+=1){var _node3=nodes[_i16];if(_node3===EMPTY)continue;if(Array.isArray(_node3)){flatten(_node3,target);continue;}target.push(_node3);}return target;};var EMPTY={type:'Empty'};var acorn_opts=function acorn_opts(comments,raw){var _get_comment_handlers=get_comment_handlers(comments,raw),onComment=_get_comment_handlers.onComment;return{ecmaVersion:2020,sourceType:'module',allowAwaitOutsideFunction:true,allowImportExportEverywhere:true,allowReturnOutsideFunction:true,onComment:onComment};};var inject=function inject(raw,node,values,comments){comments.forEach(function(comment){comment.value=comment.value.replace(re,function(m,i){return+i in values?values[+i]:m;});});var _get_comment_handlers2=get_comment_handlers(comments,raw),enter=_get_comment_handlers2.enter,_leave=_get_comment_handlers2.leave;walk(node,{enter:enter,leave:function leave(node,parent,key,index){if(node.type==='Identifier'){re.lastIndex=0;var match=re.exec(node.name);if(match){if(match[1]){if(+match[1]in values){var _value3=values[+match[1]];if(typeof _value3==='string'){_value3={type:'Identifier',name:_value3,leadingComments:node.leadingComments,trailingComments:node.trailingComments};}else if(typeof _value3==='number'){_value3={type:'Literal',value:_value3,leadingComments:node.leadingComments,trailingComments:node.trailingComments};}this.replace(_value3||EMPTY);}}else{node.name=\"\".concat(match[2]?\"@\":\"#\").concat(match[4]);}}}if(node.type==='Literal'){if(typeof node.value==='string'){re.lastIndex=0;node.value=node.value.replace(re,function(m,i){return+i in values?values[+i]:m;});}}if(node.type==='TemplateElement'){re.lastIndex=0;node.value.raw=node.value.raw.replace(re,function(m,i){return+i in values?values[+i]:m;});}if(node.type==='Program'||node.type==='BlockStatement'){node.body=flatten_body(node.body,[]);}if(node.type==='ObjectExpression'||node.type==='ObjectPattern'){node.properties=flatten_properties(node.properties,[]);}if(node.type==='ArrayExpression'||node.type==='ArrayPattern'){node.elements=flatten(node.elements,[]);}if(node.type==='FunctionExpression'||node.type==='FunctionDeclaration'||node.type==='ArrowFunctionExpression'){node.params=flatten(node.params,[]);}if(node.type==='CallExpression'||node.type==='NewExpression'){node.arguments=flatten(node.arguments,[]);}if(node.type==='ImportDeclaration'||node.type==='ExportNamedDeclaration'){node.specifiers=flatten(node.specifiers,[]);}if(node.type==='ForStatement'){node.init=node.init===EMPTY?null:node.init;node.test=node.test===EMPTY?null:node.test;node.update=node.update===EMPTY?null:node.update;}_leave(node);}});};function b(strings){var str=join$1(strings);var comments=[];try{var ast=parse(str,acorn_opts(comments,str));for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key2=1;_key2<_len;_key2++){values[_key2-1]=arguments[_key2];}inject(str,ast,values,comments);return ast.body;}catch(err){handle_error(str,err);}}function x(strings){var str=join$1(strings);var comments=[];try{var _expression=parseExpressionAt(str,0,acorn_opts(comments,str));var match=/\\S+/.exec(str.slice(_expression.end));if(match){throw new Error(\"Unexpected token '\".concat(match[0],\"'\"));}for(var _len2=arguments.length,values=new Array(_len2>1?_len2-1:0),_key3=1;_key3<_len2;_key3++){values[_key3-1]=arguments[_key3];}inject(str,_expression,values,comments);return _expression;}catch(err){handle_error(str,err);}}function p(strings){var str=\"{\".concat(join$1(strings),\"}\");var comments=[];try{var _expression2=parseExpressionAt(str,0,acorn_opts(comments,str));for(var _len3=arguments.length,values=new Array(_len3>1?_len3-1:0),_key4=1;_key4<_len3;_key4++){values[_key4-1]=arguments[_key4];}inject(str,_expression2,values,comments);return _expression2.properties[0];}catch(err){handle_error(str,err);}}function handle_error(str,err){// TODO location/code frame\nre.lastIndex=0;str=str.replace(re,function(m,i,at,hash,name){if(at)return\"@\".concat(name);if(hash)return\"#\".concat(name);return'${...}';});console.log(\"failed to parse:\\n\".concat(str));throw err;}var parse$1=function parse$1(source,opts){var comments=[];var _get_comment_handlers3=get_comment_handlers(comments,source),onComment=_get_comment_handlers3.onComment,enter=_get_comment_handlers3.enter,leave=_get_comment_handlers3.leave;var ast=parse(source,_objectSpread({onComment:onComment},opts));walk(ast,{enter:enter,leave:leave});return ast;};var parseExpressionAt$1=function parseExpressionAt$1(source,index,opts){var comments=[];var _get_comment_handlers4=get_comment_handlers(comments,source),onComment=_get_comment_handlers4.onComment,enter=_get_comment_handlers4.enter,leave=_get_comment_handlers4.leave;var ast=parseExpressionAt(source,index,_objectSpread({onComment:onComment},opts));walk(ast,{enter:enter,leave:leave});return ast;};var parse$2=function parse$2(source){return parse$1(source,{sourceType:'module',ecmaVersion:11,locations:true});};var parse_expression_at=function parse_expression_at(source,index){return parseExpressionAt$1(source,index,{ecmaVersion:11,locations:true});};var whitespace=/[ \\t\\r\\n]/;var dimensions=/^(?:offset|client)(?:Width|Height)$/;function read_expression(parser){try{var _node4=parse_expression_at(parser.template,parser.index);var num_parens=0;for(var _i17=parser.index;_i17<_node4.start;_i17+=1){if(parser.template[_i17]==='(')num_parens+=1;}var index=_node4.end;while(num_parens>0){var char=parser.template[index];if(char===')'){num_parens-=1;}else if(!whitespace.test(char)){parser.error({code:'unexpected-token',message:'Expected )'},index);}index+=1;}parser.index=index;return _node4;}catch(err){parser.acorn_error(err);}}var script_closing_tag='</script>';function get_context(parser,attributes,start){var context=attributes.find(function(attribute){return attribute.name==='context';});if(!context)return'default';if(context.value.length!==1||context.value[0].type!=='Text'){parser.error({code:'invalid-script',message:\"context attribute must be static\"},start);}var value=context.value[0].data;if(value!=='module'){parser.error({code:\"invalid-script\",message:\"If the context attribute is supplied, its value must be \\\"module\\\"\"},context.start);}return value;}function read_script(parser,start,attributes){var script_start=parser.index;var script_end=parser.template.indexOf(script_closing_tag,script_start);if(script_end===-1)parser.error({code:\"unclosed-script\",message:\"<script> must have a closing tag\"});var source=parser.template.slice(0,script_start).replace(/[^\\n]/g,' ')+parser.template.slice(script_start,script_end);parser.index=script_end+script_closing_tag.length;var ast;try{ast=parse$2(source);}catch(err){parser.acorn_error(err);}// TODO is this necessary?\nast.start=script_start;return{type:'Script',start:start,end:parser.index,context:get_context(parser,attributes,start),content:ast};}var MAX_LINE_LENGTH=100;var OFFSET_CORRECTION=60;var TAB_REPLACEMENT='    ';function sourceFragment(error,extraLines){function processLines(start,end){return lines.slice(start,end).map(function(line,idx){var num=String(start+idx+1);while(num.length<maxNumLength){num=' '+num;}return num+' |'+line;}).join('\\n');}var lines=error.source.split(/\\n|\\r\\n?|\\f/);var line=error.line;var column=error.column;var startLine=Math.max(1,line-extraLines)-1;var endLine=Math.min(line+extraLines,lines.length+1);var maxNumLength=Math.max(4,String(endLine).length)+1;var cutLeft=0;// correct column according to replaced tab before column\ncolumn+=(TAB_REPLACEMENT.length-1)*(lines[line-1].substr(0,column-1).match(/\\t/g)||[]).length;if(column>MAX_LINE_LENGTH){cutLeft=column-OFFSET_CORRECTION+3;column=OFFSET_CORRECTION-2;}for(var i=startLine;i<=endLine;i++){if(i>=0&&i<lines.length){lines[i]=lines[i].replace(/\\t/g,TAB_REPLACEMENT);lines[i]=(cutLeft>0&&lines[i].length>cutLeft?\"\\u2026\":'')+lines[i].substr(cutLeft,MAX_LINE_LENGTH-2)+(lines[i].length>cutLeft+MAX_LINE_LENGTH-1?\"\\u2026\":'');}}return[processLines(startLine,line),new Array(column+maxNumLength+2).join('-')+'^',processLines(line,endLine)].join('\\n');}var CssSyntaxError=function CssSyntaxError(message,source,offset,line,column){// some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)\nvar error=Object.create(SyntaxError.prototype);error.name='CssSyntaxError';error.message=message;error.stack=(new Error().stack||'').replace(/^.+\\n/,error.name+': '+error.message+'\\n');error.source=source;error.offset=offset;error.line=line;error.column=column;error.sourceFragment=function(extraLines){return sourceFragment(error,isNaN(extraLines)?0:extraLines);};Object.defineProperty(error,'formattedMessage',{get:function get(){return'Parse error: '+error.message+'\\n'+sourceFragment(error,2);}});// for backward capability\nerror.parseError={offset:offset,line:line,column:column};return error;};var _error=CssSyntaxError;// token types (note: value shouldn't intersect with used char codes)\nvar WHITESPACE=1;var IDENTIFIER=2;var NUMBER=3;var STRING=4;var COMMENT=5;var PUNCTUATOR=6;var CDO=7;var CDC=8;var ATRULE=14;var FUNCTION=15;var URL=16;var RAW=17;var TAB=9;var N=10;var F=12;var R=13;var SPACE=32;var TYPE={WhiteSpace:WHITESPACE,Identifier:IDENTIFIER,Number:NUMBER,String:STRING,Comment:COMMENT,Punctuator:PUNCTUATOR,CDO:CDO,CDC:CDC,Atrule:ATRULE,Function:FUNCTION,Url:URL,Raw:RAW,ExclamationMark:33,// !\nQuotationMark:34,// \"\nNumberSign:35,// #\nDollarSign:36,// $\nPercentSign:37,// %\nAmpersand:38,// &\nApostrophe:39,// '\nLeftParenthesis:40,// (\nRightParenthesis:41,// )\nAsterisk:42,// *\nPlusSign:43,// +\nComma:44,// ,\nHyphenMinus:45,// -\nFullStop:46,// .\nSolidus:47,// /\nColon:58,// :\nSemicolon:59,// ;\nLessThanSign:60,// <\nEqualsSign:61,// =\nGreaterThanSign:62,// >\nQuestionMark:63,// ?\nCommercialAt:64,// @\nLeftSquareBracket:91,// [\nBackslash:92,// \\\nRightSquareBracket:93,// ]\nCircumflexAccent:94,// ^\nLowLine:95,// _\nGraveAccent:96,// `\nLeftCurlyBracket:123,// {\nVerticalLine:124,// |\nRightCurlyBracket:125,// }\nTilde:126// ~\n};var NAME=Object.keys(TYPE).reduce(function(result,key){result[TYPE[key]]=key;return result;},{});// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only\nvar SafeUint32Array=typeof Uint32Array!=='undefined'?Uint32Array:Array;// fallback on Array when TypedArray is not supported\nvar SYMBOL_TYPE=new SafeUint32Array(0x80);var PUNCTUATION=new SafeUint32Array(0x80);var STOP_URL_RAW=new SafeUint32Array(0x80);for(var i=0;i<SYMBOL_TYPE.length;i++){SYMBOL_TYPE[i]=IDENTIFIER;}// fill categories\n[TYPE.ExclamationMark,// !\nTYPE.QuotationMark,// \"\nTYPE.NumberSign,// #\nTYPE.DollarSign,// $\nTYPE.PercentSign,// %\nTYPE.Ampersand,// &\nTYPE.Apostrophe,// '\nTYPE.LeftParenthesis,// (\nTYPE.RightParenthesis,// )\nTYPE.Asterisk,// *\nTYPE.PlusSign,// +\nTYPE.Comma,// ,\nTYPE.HyphenMinus,// -\nTYPE.FullStop,// .\nTYPE.Solidus,// /\nTYPE.Colon,// :\nTYPE.Semicolon,// ;\nTYPE.LessThanSign,// <\nTYPE.EqualsSign,// =\nTYPE.GreaterThanSign,// >\nTYPE.QuestionMark,// ?\nTYPE.CommercialAt,// @\nTYPE.LeftSquareBracket,// [\n// TYPE.Backslash,          // \\\nTYPE.RightSquareBracket,// ]\nTYPE.CircumflexAccent,// ^\n// TYPE.LowLine,            // _\nTYPE.GraveAccent,// `\nTYPE.LeftCurlyBracket,// {\nTYPE.VerticalLine,// |\nTYPE.RightCurlyBracket,// }\nTYPE.Tilde// ~\n].forEach(function(key){SYMBOL_TYPE[Number(key)]=PUNCTUATOR;PUNCTUATION[Number(key)]=PUNCTUATOR;});for(var i=48;i<=57;i++){SYMBOL_TYPE[i]=NUMBER;}SYMBOL_TYPE[SPACE]=WHITESPACE;SYMBOL_TYPE[TAB]=WHITESPACE;SYMBOL_TYPE[N]=WHITESPACE;SYMBOL_TYPE[R]=WHITESPACE;SYMBOL_TYPE[F]=WHITESPACE;SYMBOL_TYPE[TYPE.Apostrophe]=STRING;SYMBOL_TYPE[TYPE.QuotationMark]=STRING;STOP_URL_RAW[SPACE]=1;STOP_URL_RAW[TAB]=1;STOP_URL_RAW[N]=1;STOP_URL_RAW[R]=1;STOP_URL_RAW[F]=1;STOP_URL_RAW[TYPE.Apostrophe]=1;STOP_URL_RAW[TYPE.QuotationMark]=1;STOP_URL_RAW[TYPE.LeftParenthesis]=1;STOP_URL_RAW[TYPE.RightParenthesis]=1;// whitespace is punctuation ...\nPUNCTUATION[SPACE]=PUNCTUATOR;PUNCTUATION[TAB]=PUNCTUATOR;PUNCTUATION[N]=PUNCTUATOR;PUNCTUATION[R]=PUNCTUATOR;PUNCTUATION[F]=PUNCTUATOR;// ... hyper minus is not\nPUNCTUATION[TYPE.HyphenMinus]=0;var _const={TYPE:TYPE,NAME:NAME,SYMBOL_TYPE:SYMBOL_TYPE,PUNCTUATION:PUNCTUATION,STOP_URL_RAW:STOP_URL_RAW};var PUNCTUATION$1=_const.PUNCTUATION;var STOP_URL_RAW$1=_const.STOP_URL_RAW;var TYPE$1=_const.TYPE;var FULLSTOP=TYPE$1.FullStop;var PLUSSIGN=TYPE$1.PlusSign;var HYPHENMINUS=TYPE$1.HyphenMinus;var PUNCTUATOR$1=TYPE$1.Punctuator;var TAB$1=9;var N$1=10;var F$1=12;var R$1=13;var SPACE$1=32;var BACK_SLASH=92;var E=101;// 'e'.charCodeAt(0)\nfunction firstCharOffset(source){// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nif(source.charCodeAt(0)===0xFEFF||// UTF-16BE\nsource.charCodeAt(0)===0xFFFE){// UTF-16LE\nreturn 1;}return 0;}function isHex(code){return code>=48&&code<=57||// 0 .. 9\ncode>=65&&code<=70||// A .. F\ncode>=97&&code<=102;// a .. f\n}function isNumber(code){return code>=48&&code<=57;}function isNewline(source,offset,code){if(code===N$1||code===F$1||code===R$1){if(code===R$1&&offset+1<source.length&&source.charCodeAt(offset+1)===N$1){return 2;}return 1;}return 0;}function cmpChar(testStr,offset,referenceCode){var code=testStr.charCodeAt(offset);// code.toLowerCase()\nif(code>=65&&code<=90){code=code|32;}return code===referenceCode;}function cmpStr(testStr,start,end,referenceStr){if(end-start!==referenceStr.length){return false;}if(start<0||end>testStr.length){return false;}for(var i=start;i<end;i++){var testCode=testStr.charCodeAt(i);var refCode=referenceStr.charCodeAt(i-start);// testStr[i].toLowerCase()\nif(testCode>=65&&testCode<=90){testCode=testCode|32;}if(testCode!==refCode){return false;}}return true;}function endsWith(testStr,referenceStr){return cmpStr(testStr,testStr.length-referenceStr.length,testStr.length,referenceStr);}function findLastNonSpaceLocation(scanner){for(var i=scanner.source.length-1;i>=0;i--){var code=scanner.source.charCodeAt(i);if(code!==SPACE$1&&code!==TAB$1&&code!==R$1&&code!==N$1&&code!==F$1){break;}}return scanner.getLocation(i+1);}function findWhiteSpaceEnd(source,offset){for(;offset<source.length;offset++){var code=source.charCodeAt(offset);if(code!==SPACE$1&&code!==TAB$1&&code!==R$1&&code!==N$1&&code!==F$1){break;}}return offset;}function findCommentEnd(source,offset){var commentEnd=source.indexOf('*/',offset);if(commentEnd===-1){return source.length;}return commentEnd+2;}function findStringEnd(source,offset,quote){for(;offset<source.length;offset++){var code=source.charCodeAt(offset);// TODO: bad string\nif(code===BACK_SLASH){offset++;}else if(code===quote){offset++;break;}}return offset;}function findDecimalNumberEnd(source,offset){for(;offset<source.length;offset++){var code=source.charCodeAt(offset);if(code<48||code>57){// not a 0 .. 9\nbreak;}}return offset;}function findNumberEnd(source,offset,allowFraction){var code;offset=findDecimalNumberEnd(source,offset);// fraction: .\\d+\nif(allowFraction&&offset+1<source.length&&source.charCodeAt(offset)===FULLSTOP){code=source.charCodeAt(offset+1);if(isNumber(code)){offset=findDecimalNumberEnd(source,offset+1);}}// exponent: e[+-]\\d+\nif(offset+1<source.length){if((source.charCodeAt(offset)|32)===E){// case insensitive check for `e`\ncode=source.charCodeAt(offset+1);if(code===PLUSSIGN||code===HYPHENMINUS){if(offset+2<source.length){code=source.charCodeAt(offset+2);}}if(isNumber(code)){offset=findDecimalNumberEnd(source,offset+2);}}}return offset;}// skip escaped unicode sequence that can ends with space\n// [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\nfunction findEscaseEnd(source,offset){for(var i=0;i<7&&offset+i<source.length;i++){var code=source.charCodeAt(offset+i);if(i!==6&&isHex(code)){continue;}if(i>0){offset+=i-1+isNewline(source,offset+i,code);if(code===SPACE$1||code===TAB$1){offset++;}}break;}return offset;}function findIdentifierEnd(source,offset){for(;offset<source.length;offset++){var code=source.charCodeAt(offset);if(code===BACK_SLASH){offset=findEscaseEnd(source,offset+1);}else if(code<0x80&&PUNCTUATION$1[code]===PUNCTUATOR$1){break;}}return offset;}function findUrlRawEnd(source,offset){for(;offset<source.length;offset++){var code=source.charCodeAt(offset);if(code===BACK_SLASH){offset=findEscaseEnd(source,offset+1);}else if(code<0x80&&STOP_URL_RAW$1[code]===1){break;}}return offset;}var utils={firstCharOffset:firstCharOffset,isHex:isHex,isNumber:isNumber,isNewline:isNewline,cmpChar:cmpChar,cmpStr:cmpStr,endsWith:endsWith,findLastNonSpaceLocation:findLastNonSpaceLocation,findWhiteSpaceEnd:findWhiteSpaceEnd,findCommentEnd:findCommentEnd,findStringEnd:findStringEnd,findDecimalNumberEnd:findDecimalNumberEnd,findNumberEnd:findNumberEnd,findEscaseEnd:findEscaseEnd,findIdentifierEnd:findIdentifierEnd,findUrlRawEnd:findUrlRawEnd};var TYPE$2=_const.TYPE;var NAME$1=_const.NAME;var SYMBOL_TYPE$1=_const.SYMBOL_TYPE;var firstCharOffset$1=utils.firstCharOffset;var cmpStr$1=utils.cmpStr;var isNumber$1=utils.isNumber;var findLastNonSpaceLocation$1=utils.findLastNonSpaceLocation;var findWhiteSpaceEnd$1=utils.findWhiteSpaceEnd;var findCommentEnd$1=utils.findCommentEnd;var findStringEnd$1=utils.findStringEnd;var findNumberEnd$1=utils.findNumberEnd;var findIdentifierEnd$1=utils.findIdentifierEnd;var findUrlRawEnd$1=utils.findUrlRawEnd;var NULL=0;var WHITESPACE$1=TYPE$2.WhiteSpace;var IDENTIFIER$1=TYPE$2.Identifier;var NUMBER$1=TYPE$2.Number;var STRING$1=TYPE$2.String;var COMMENT$1=TYPE$2.Comment;var PUNCTUATOR$2=TYPE$2.Punctuator;var CDO$1=TYPE$2.CDO;var CDC$1=TYPE$2.CDC;var ATRULE$1=TYPE$2.Atrule;var FUNCTION$1=TYPE$2.Function;var URL$1=TYPE$2.Url;var RAW$1=TYPE$2.Raw;var N$2=10;var F$2=12;var R$2=13;var STAR=TYPE$2.Asterisk;var SLASH=TYPE$2.Solidus;var FULLSTOP$1=TYPE$2.FullStop;var PLUSSIGN$1=TYPE$2.PlusSign;var HYPHENMINUS$1=TYPE$2.HyphenMinus;var GREATERTHANSIGN=TYPE$2.GreaterThanSign;var LESSTHANSIGN=TYPE$2.LessThanSign;var EXCLAMATIONMARK=TYPE$2.ExclamationMark;var COMMERCIALAT=TYPE$2.CommercialAt;var QUOTATIONMARK=TYPE$2.QuotationMark;var APOSTROPHE=TYPE$2.Apostrophe;var LEFTPARENTHESIS=TYPE$2.LeftParenthesis;var RIGHTPARENTHESIS=TYPE$2.RightParenthesis;var LEFTCURLYBRACKET=TYPE$2.LeftCurlyBracket;var RIGHTCURLYBRACKET=TYPE$2.RightCurlyBracket;var LEFTSQUAREBRACKET=TYPE$2.LeftSquareBracket;var RIGHTSQUAREBRACKET=TYPE$2.RightSquareBracket;var MIN_BUFFER_SIZE=16*1024;var OFFSET_MASK=0x00FFFFFF;var TYPE_SHIFT=24;var SafeUint32Array$1=typeof Uint32Array!=='undefined'?Uint32Array:Array;// fallback on Array when TypedArray is not supported\nfunction computeLinesAndColumns(tokenizer,source){var sourceLength=source.length;var start=firstCharOffset$1(source);var lines=tokenizer.lines;var line=tokenizer.startLine;var columns=tokenizer.columns;var column=tokenizer.startColumn;if(lines===null||lines.length<sourceLength+1){lines=new SafeUint32Array$1(Math.max(sourceLength+1024,MIN_BUFFER_SIZE));columns=new SafeUint32Array$1(lines.length);}for(var i=start;i<sourceLength;i++){var code=source.charCodeAt(i);lines[i]=line;columns[i]=column++;if(code===N$2||code===R$2||code===F$2){if(code===R$2&&i+1<sourceLength&&source.charCodeAt(i+1)===N$2){i++;lines[i]=line;columns[i]=column;}line++;column=1;}}lines[i]=line;columns[i]=column;tokenizer.linesAnsColumnsComputed=true;tokenizer.lines=lines;tokenizer.columns=columns;}function tokenLayout(tokenizer,source,startPos){var sourceLength=source.length;var offsetAndType=tokenizer.offsetAndType;var balance=tokenizer.balance;var tokenCount=0;var prevType=0;var offset=startPos;var anchor=0;var balanceCloseCode=0;var balanceStart=0;var balancePrev=0;if(offsetAndType===null||offsetAndType.length<sourceLength+1){offsetAndType=new SafeUint32Array$1(sourceLength+1024);balance=new SafeUint32Array$1(sourceLength+1024);}while(offset<sourceLength){var code=source.charCodeAt(offset);var type=code<0x80?SYMBOL_TYPE$1[code]:IDENTIFIER$1;balance[tokenCount]=sourceLength;switch(type){case WHITESPACE$1:offset=findWhiteSpaceEnd$1(source,offset+1);break;case PUNCTUATOR$2:switch(code){case balanceCloseCode:balancePrev=balanceStart&OFFSET_MASK;balanceStart=balance[balancePrev];balanceCloseCode=balanceStart>>TYPE_SHIFT;balance[tokenCount]=balancePrev;balance[balancePrev++]=tokenCount;for(;balancePrev<tokenCount;balancePrev++){if(balance[balancePrev]===sourceLength){balance[balancePrev]=tokenCount;}}break;case LEFTSQUAREBRACKET:balance[tokenCount]=balanceStart;balanceCloseCode=RIGHTSQUAREBRACKET;balanceStart=balanceCloseCode<<TYPE_SHIFT|tokenCount;break;case LEFTCURLYBRACKET:balance[tokenCount]=balanceStart;balanceCloseCode=RIGHTCURLYBRACKET;balanceStart=balanceCloseCode<<TYPE_SHIFT|tokenCount;break;case LEFTPARENTHESIS:balance[tokenCount]=balanceStart;balanceCloseCode=RIGHTPARENTHESIS;balanceStart=balanceCloseCode<<TYPE_SHIFT|tokenCount;break;}// /*\nif(code===STAR&&prevType===SLASH){type=COMMENT$1;offset=findCommentEnd$1(source,offset+1);tokenCount--;// rewrite prev token\nbreak;}// edge case for -.123 and +.123\nif(code===FULLSTOP$1&&(prevType===PLUSSIGN$1||prevType===HYPHENMINUS$1)){if(offset+1<sourceLength&&isNumber$1(source.charCodeAt(offset+1))){type=NUMBER$1;offset=findNumberEnd$1(source,offset+2,false);tokenCount--;// rewrite prev token\nbreak;}}// <!--\nif(code===EXCLAMATIONMARK&&prevType===LESSTHANSIGN){if(offset+2<sourceLength&&source.charCodeAt(offset+1)===HYPHENMINUS$1&&source.charCodeAt(offset+2)===HYPHENMINUS$1){type=CDO$1;offset=offset+3;tokenCount--;// rewrite prev token\nbreak;}}// -->\nif(code===HYPHENMINUS$1&&prevType===HYPHENMINUS$1){if(offset+1<sourceLength&&source.charCodeAt(offset+1)===GREATERTHANSIGN){type=CDC$1;offset=offset+2;tokenCount--;// rewrite prev token\nbreak;}}// ident(\nif(code===LEFTPARENTHESIS&&prevType===IDENTIFIER$1){offset=offset+1;tokenCount--;// rewrite prev token\nbalance[tokenCount]=balance[tokenCount+1];balanceStart--;// 4 char length identifier and equal to `url(` (case insensitive)\nif(offset-anchor===4&&cmpStr$1(source,anchor,offset,'url(')){// special case for url() because it can contain any symbols sequence with few exceptions\nanchor=findWhiteSpaceEnd$1(source,offset);code=source.charCodeAt(anchor);if(code!==LEFTPARENTHESIS&&code!==RIGHTPARENTHESIS&&code!==QUOTATIONMARK&&code!==APOSTROPHE){// url(\noffsetAndType[tokenCount++]=URL$1<<TYPE_SHIFT|offset;balance[tokenCount]=sourceLength;// ws*\nif(anchor!==offset){offsetAndType[tokenCount++]=WHITESPACE$1<<TYPE_SHIFT|anchor;balance[tokenCount]=sourceLength;}// raw\ntype=RAW$1;offset=findUrlRawEnd$1(source,anchor);}else{type=URL$1;}}else{type=FUNCTION$1;}break;}type=code;offset=offset+1;break;case NUMBER$1:offset=findNumberEnd$1(source,offset+1,prevType!==FULLSTOP$1);// merge number with a preceding dot, dash or plus\nif(prevType===FULLSTOP$1||prevType===HYPHENMINUS$1||prevType===PLUSSIGN$1){tokenCount--;// rewrite prev token\n}break;case STRING$1:offset=findStringEnd$1(source,offset+1,code);break;default:anchor=offset;offset=findIdentifierEnd$1(source,offset);// merge identifier with a preceding dash\nif(prevType===HYPHENMINUS$1){// rewrite prev token\ntokenCount--;// restore prev prev token type\n// for case @-prefix-ident\nprevType=tokenCount===0?0:offsetAndType[tokenCount-1]>>TYPE_SHIFT;}if(prevType===COMMERCIALAT){// rewrite prev token and change type to <at-keyword-token>\ntokenCount--;type=ATRULE$1;}}offsetAndType[tokenCount++]=type<<TYPE_SHIFT|offset;prevType=type;}// finalize arrays\noffsetAndType[tokenCount]=offset;balance[tokenCount]=sourceLength;while(balanceStart!==0){balancePrev=balanceStart&OFFSET_MASK;balanceStart=balance[balancePrev];balance[balancePrev]=sourceLength;}tokenizer.offsetAndType=offsetAndType;tokenizer.tokenCount=tokenCount;tokenizer.balance=balance;}//\n// tokenizer\n//\nvar Tokenizer=function Tokenizer(source,startOffset,startLine,startColumn){this.offsetAndType=null;this.balance=null;this.lines=null;this.columns=null;this.setSource(source,startOffset,startLine,startColumn);};Tokenizer.prototype={setSource:function setSource(source,startOffset,startLine,startColumn){var safeSource=String(source||'');var start=firstCharOffset$1(safeSource);this.source=safeSource;this.firstCharOffset=start;this.startOffset=typeof startOffset==='undefined'?0:startOffset;this.startLine=typeof startLine==='undefined'?1:startLine;this.startColumn=typeof startColumn==='undefined'?1:startColumn;this.linesAnsColumnsComputed=false;this.eof=false;this.currentToken=-1;this.tokenType=0;this.tokenStart=start;this.tokenEnd=start;tokenLayout(this,safeSource,start);this.next();},lookupType:function lookupType(offset){offset+=this.currentToken;if(offset<this.tokenCount){return this.offsetAndType[offset]>>TYPE_SHIFT;}return NULL;},lookupNonWSType:function lookupNonWSType(offset){offset+=this.currentToken;for(var type;offset<this.tokenCount;offset++){type=this.offsetAndType[offset]>>TYPE_SHIFT;if(type!==WHITESPACE$1){return type;}}return NULL;},lookupValue:function lookupValue(offset,referenceStr){offset+=this.currentToken;if(offset<this.tokenCount){return cmpStr$1(this.source,this.offsetAndType[offset-1]&OFFSET_MASK,this.offsetAndType[offset]&OFFSET_MASK,referenceStr);}return false;},getTokenStart:function getTokenStart(tokenNum){if(tokenNum===this.currentToken){return this.tokenStart;}if(tokenNum>0){return tokenNum<this.tokenCount?this.offsetAndType[tokenNum-1]&OFFSET_MASK:this.offsetAndType[this.tokenCount]&OFFSET_MASK;}return this.firstCharOffset;},getOffsetExcludeWS:function getOffsetExcludeWS(){if(this.currentToken>0){if(this.offsetAndType[this.currentToken-1]>>TYPE_SHIFT===WHITESPACE$1){return this.currentToken>1?this.offsetAndType[this.currentToken-2]&OFFSET_MASK:this.firstCharOffset;}}return this.tokenStart;},getRawLength:function getRawLength(startToken,endTokenType1,endTokenType2,includeTokenType2){var cursor=startToken;var balanceEnd;loop:for(;cursor<this.tokenCount;cursor++){balanceEnd=this.balance[cursor];// belance end points to offset before start\nif(balanceEnd<startToken){break loop;}// check token is stop type\nswitch(this.offsetAndType[cursor]>>TYPE_SHIFT){case endTokenType1:break loop;case endTokenType2:if(includeTokenType2){cursor++;}break loop;default:// fast forward to the end of balanced block\nif(this.balance[balanceEnd]===cursor){cursor=balanceEnd;}}}return cursor-this.currentToken;},getTokenValue:function getTokenValue(){return this.source.substring(this.tokenStart,this.tokenEnd);},substrToCursor:function substrToCursor(start){return this.source.substring(start,this.tokenStart);},skipWS:function skipWS(){for(var i=this.currentToken,skipTokenCount=0;i<this.tokenCount;i++,skipTokenCount++){if(this.offsetAndType[i]>>TYPE_SHIFT!==WHITESPACE$1){break;}}if(skipTokenCount>0){this.skip(skipTokenCount);}},skipSC:function skipSC(){while(this.tokenType===WHITESPACE$1||this.tokenType===COMMENT$1){this.next();}},skip:function skip(tokenCount){var next=this.currentToken+tokenCount;if(next<this.tokenCount){this.currentToken=next;this.tokenStart=this.offsetAndType[next-1]&OFFSET_MASK;next=this.offsetAndType[next];this.tokenType=next>>TYPE_SHIFT;this.tokenEnd=next&OFFSET_MASK;}else{this.currentToken=this.tokenCount;this.next();}},next:function next(){var next=this.currentToken+1;if(next<this.tokenCount){this.currentToken=next;this.tokenStart=this.tokenEnd;next=this.offsetAndType[next];this.tokenType=next>>TYPE_SHIFT;this.tokenEnd=next&OFFSET_MASK;}else{this.currentToken=this.tokenCount;this.eof=true;this.tokenType=NULL;this.tokenStart=this.tokenEnd=this.source.length;}},eat:function eat(tokenType){if(this.tokenType!==tokenType){var offset=this.tokenStart;var message=NAME$1[tokenType]+' is expected';// tweak message and offset\nif(tokenType===IDENTIFIER$1){// when identifier is expected but there is a function or url\nif(this.tokenType===FUNCTION$1||this.tokenType===URL$1){offset=this.tokenEnd-1;message+=' but function found';}}else{// when test type is part of another token show error for current position + 1\n// e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\nif(this.source.charCodeAt(this.tokenStart)===tokenType){offset=offset+1;}}this.error(message,offset);}this.next();},eatNonWS:function eatNonWS(tokenType){this.skipWS();this.eat(tokenType);},consume:function consume(tokenType){var value=this.getTokenValue();this.eat(tokenType);return value;},consumeFunctionName:function consumeFunctionName(){var name=this.source.substring(this.tokenStart,this.tokenEnd-1);this.eat(FUNCTION$1);return name;},consumeNonWS:function consumeNonWS(tokenType){this.skipWS();return this.consume(tokenType);},expectIdentifier:function expectIdentifier(name){if(this.tokenType!==IDENTIFIER$1||cmpStr$1(this.source,this.tokenStart,this.tokenEnd,name)===false){this.error('Identifier `'+name+'` is expected');}this.next();},getLocation:function getLocation(offset,filename){if(!this.linesAnsColumnsComputed){computeLinesAndColumns(this,this.source);}return{source:filename,offset:this.startOffset+offset,line:this.lines[offset],column:this.columns[offset]};},getLocationRange:function getLocationRange(start,end,filename){if(!this.linesAnsColumnsComputed){computeLinesAndColumns(this,this.source);}return{source:filename,start:{offset:this.startOffset+start,line:this.lines[start],column:this.columns[start]},end:{offset:this.startOffset+end,line:this.lines[end],column:this.columns[end]}};},error:function error(message,offset){var location=typeof offset!=='undefined'&&offset<this.source.length?this.getLocation(offset):this.eof?findLastNonSpaceLocation$1(this):this.getLocation(this.tokenStart);throw new _error(message||'Unexpected input',this.source,location.offset,location.line,location.column);},dump:function dump(){var offset=0;return Array.prototype.slice.call(this.offsetAndType,0,this.tokenCount).map(function(item,idx){var start=offset;var end=item&OFFSET_MASK;offset=end;return{idx:idx,type:NAME$1[item>>TYPE_SHIFT],chunk:this.source.substring(start,end),balance:this.balance[idx]};},this);}};// extend with error class\nTokenizer.CssSyntaxError=_error;// extend tokenizer with constants\nObject.keys(_const).forEach(function(key){Tokenizer[key]=_const[key];});// extend tokenizer with static methods from utils\nObject.keys(utils).forEach(function(key){Tokenizer[key]=utils[key];});// warm up tokenizer to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nnew Tokenizer('\\n\\r\\r\\n\\f<!---->//\"\"\\'\\'/*\\r\\n\\f*/1a;.\\\\31\\t\\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();var Tokenizer_1=Tokenizer;var tokenizer=Tokenizer_1;//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+--->| next-+--->| next-+--->| next-+--> null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\nfunction createItem(data){return{prev:null,next:null,data:data};}var cursors=null;var List=function List(){this.cursor=null;this.head=null;this.tail=null;};List.createItem=createItem;List.prototype.createItem=createItem;List.prototype.getSize=function(){var size=0;var cursor=this.head;while(cursor){size++;cursor=cursor.next;}return size;};List.prototype.fromArray=function(array){var cursor=null;this.head=null;for(var i=0;i<array.length;i++){var item=createItem(array[i]);if(cursor!==null){cursor.next=item;}else{this.head=item;}item.prev=cursor;cursor=item;}this.tail=cursor;return this;};List.prototype.toArray=function(){var cursor=this.head;var result=[];while(cursor){result.push(cursor.data);cursor=cursor.next;}return result;};List.prototype.toJSON=List.prototype.toArray;List.prototype.isEmpty=function(){return this.head===null;};List.prototype.first=function(){return this.head&&this.head.data;};List.prototype.last=function(){return this.tail&&this.tail.data;};function allocateCursor(node,prev,next){var cursor;if(cursors!==null){cursor=cursors;cursors=cursors.cursor;cursor.prev=prev;cursor.next=next;cursor.cursor=node.cursor;}else{cursor={prev:prev,next:next,cursor:node.cursor};}node.cursor=cursor;return cursor;}function releaseCursor(node){var cursor=node.cursor;node.cursor=cursor.cursor;cursor.prev=null;cursor.next=null;cursor.cursor=cursors;cursors=cursor;}List.prototype.each=function(fn,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,null,this.head);while(cursor.next!==null){item=cursor.next;cursor.next=item.next;fn.call(context,item.data,item,this);}// pop cursor\nreleaseCursor(this);};List.prototype.eachRight=function(fn,context){var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,this.tail,null);while(cursor.prev!==null){item=cursor.prev;cursor.prev=item.prev;fn.call(context,item.data,item,this);}// pop cursor\nreleaseCursor(this);};List.prototype.nextUntil=function(start,fn,context){if(start===null){return;}var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,null,start);while(cursor.next!==null){item=cursor.next;cursor.next=item.next;if(fn.call(context,item.data,item,this)){break;}}// pop cursor\nreleaseCursor(this);};List.prototype.prevUntil=function(start,fn,context){if(start===null){return;}var item;if(context===undefined){context=this;}// push cursor\nvar cursor=allocateCursor(this,start,null);while(cursor.prev!==null){item=cursor.prev;cursor.prev=item.prev;if(fn.call(context,item.data,item,this)){break;}}// pop cursor\nreleaseCursor(this);};List.prototype.some=function(fn,context){var cursor=this.head;if(context===undefined){context=this;}while(cursor!==null){if(fn.call(context,cursor.data,cursor,this)){return true;}cursor=cursor.next;}return false;};List.prototype.map=function(fn,context){var result=[];var cursor=this.head;if(context===undefined){context=this;}while(cursor!==null){result.push(fn.call(context,cursor.data,cursor,this));cursor=cursor.next;}return result;};List.prototype.clear=function(){this.head=null;this.tail=null;};List.prototype.copy=function(){var result=new List();var cursor=this.head;while(cursor!==null){result.insert(createItem(cursor.data));cursor=cursor.next;}return result;};List.prototype.updateCursors=function(prevOld,prevNew,nextOld,nextNew){var cursor=this.cursor;while(cursor!==null){if(cursor.prev===prevOld){cursor.prev=prevNew;}if(cursor.next===nextOld){cursor.next=nextNew;}cursor=cursor.cursor;}};List.prototype.prepend=function(item){//      head\n//    ^\n// item\nthis.updateCursors(null,item,this.head,item);// insert to the beginning of the list\nif(this.head!==null){// new item <- first item\nthis.head.prev=item;// new item -> first item\nitem.next=this.head;}else{// if list has no head, then it also has no tail\n// in this case tail points to the new item\nthis.tail=item;}// head always points to new item\nthis.head=item;return this;};List.prototype.prependData=function(data){return this.prepend(createItem(data));};List.prototype.append=function(item){// tail\n//      ^\n//      item\nthis.updateCursors(this.tail,item,null,item);// insert to the ending of the list\nif(this.tail!==null){// last item -> new item\nthis.tail.next=item;// last item <- new item\nitem.prev=this.tail;}else{// if list has no tail, then it also has no head\n// in this case head points to new item\nthis.head=item;}// tail always points to new item\nthis.tail=item;return this;};List.prototype.appendData=function(data){return this.append(createItem(data));};List.prototype.insert=function(item,before){if(before!==undefined&&before!==null){// prev   before\n//      ^\n//     item\nthis.updateCursors(before.prev,item,before,item);if(before.prev===null){// insert to the beginning of list\nif(this.head!==before){throw new Error('before doesn\\'t belong to list');}// since head points to before therefore list doesn't empty\n// no need to check tail\nthis.head=item;before.prev=item;item.next=before;this.updateCursors(null,item);}else{// insert between two items\nbefore.prev.next=item;item.prev=before.prev;before.prev=item;item.next=before;}}else{this.append(item);}};List.prototype.insertData=function(data,before){this.insert(createItem(data),before);};List.prototype.remove=function(item){//      item\n//       ^\n// prev     next\nthis.updateCursors(item,item.prev,item,item.next);if(item.prev!==null){item.prev.next=item.next;}else{if(this.head!==item){throw new Error('item doesn\\'t belong to list');}this.head=item.next;}if(item.next!==null){item.next.prev=item.prev;}else{if(this.tail!==item){throw new Error('item doesn\\'t belong to list');}this.tail=item.prev;}item.prev=null;item.next=null;return item;};List.prototype.appendList=function(list){// ignore empty lists\nif(list.head===null){return;}this.updateCursors(this.tail,list.tail,null,list.head);// insert to end of the list\nif(this.tail!==null){// if destination list has a tail, then it also has a head,\n// but head doesn't change\n// dest tail -> source head\nthis.tail.next=list.head;// dest tail <- source head\nlist.head.prev=this.tail;}else{// if list has no a tail, then it also has no a head\n// in this case points head to new item\nthis.head=list.head;}// tail always start point to new item\nthis.tail=list.tail;list.head=null;list.tail=null;};List.prototype.insertList=function(list,before){if(before!==undefined&&before!==null){// ignore empty lists\nif(list.head===null){return;}this.updateCursors(before.prev,list.tail,before,list.head);// insert in the middle of dist list\nif(before.prev!==null){// before.prev <-> list.head\nbefore.prev.next=list.head;list.head.prev=before.prev;}else{this.head=list.head;}before.prev=list.tail;list.tail.next=before;list.head=null;list.tail=null;}else{this.appendList(list);}};List.prototype.replace=function(oldItem,newItemOrList){if('head'in newItemOrList){this.insertList(newItemOrList,oldItem);}else{this.insert(newItemOrList,oldItem);}this.remove(oldItem);};var list=List;var TYPE$3=tokenizer.TYPE;var WHITESPACE$2=TYPE$3.WhiteSpace;var COMMENT$2=TYPE$3.Comment;var sequence=function readSequence(recognizer){var children=new list();var child=null;var context={recognizer:recognizer,space:null,ignoreWS:false,ignoreWSAfter:false};this.scanner.skipSC();while(!this.scanner.eof){switch(this.scanner.tokenType){case COMMENT$2:this.scanner.next();continue;case WHITESPACE$2:if(context.ignoreWS){this.scanner.next();}else{context.space=this.WhiteSpace();}continue;}child=recognizer.getNode.call(this,context);if(child===undefined){break;}if(context.space!==null){children.appendData(context.space);context.space=null;}children.appendData(child);if(context.ignoreWSAfter){context.ignoreWSAfter=false;context.ignoreWS=true;}else{context.ignoreWS=false;}}return children;};var noop=function noop(){};function createParseContext(name){return function(){return this[name]();};}function processConfig(config){var parserConfig={context:{},scope:{},atrule:{},pseudo:{}};if(config.parseContext){for(var name in config.parseContext){switch((0,_typeof2.default)(config.parseContext[name])){case'function':parserConfig.context[name]=config.parseContext[name];break;case'string':parserConfig.context[name]=createParseContext(config.parseContext[name]);break;}}}if(config.scope){for(var name in config.scope){parserConfig.scope[name]=config.scope[name];}}if(config.atrule){for(var name in config.atrule){var atrule=config.atrule[name];if(atrule.parse){parserConfig.atrule[name]=atrule.parse;}}}if(config.pseudo){for(var name in config.pseudo){var pseudo=config.pseudo[name];if(pseudo.parse){parserConfig.pseudo[name]=pseudo.parse;}}}if(config.node){for(var name in config.node){parserConfig[name]=config.node[name].parse;}}return parserConfig;}var create=function createParser(config){var parser={scanner:new tokenizer(),filename:'<unknown>',needPositions:false,tolerant:false,onParseError:noop,parseAtruleExpression:true,parseSelector:true,parseValue:true,parseCustomProperty:false,readSequence:sequence,tolerantParse:function tolerantParse(consumer,fallback){if(this.tolerant){var start=this.scanner.currentToken;try{return consumer.call(this);}catch(e){this.onParseError(e);return fallback.call(this,start);}}else{return consumer.call(this);}},getLocation:function getLocation(start,end){if(this.needPositions){return this.scanner.getLocationRange(start,end,this.filename);}return null;},getLocationFromList:function getLocationFromList(list){if(this.needPositions){return this.scanner.getLocationRange(list.head!==null?list.first().loc.start.offset-this.scanner.startOffset:this.scanner.tokenStart,list.head!==null?list.last().loc.end.offset-this.scanner.startOffset:this.scanner.tokenStart,this.filename);}return null;}};config=processConfig(config||{});for(var key in config){parser[key]=config[key];}return function(source,options){options=options||{};var context=options.context||'default';var ast;parser.scanner.setSource(source,options.offset,options.line,options.column);parser.filename=options.filename||'<unknown>';parser.needPositions=Boolean(options.positions);parser.tolerant=Boolean(options.tolerant);parser.onParseError=typeof options.onParseError==='function'?options.onParseError:noop;parser.parseAtruleExpression='parseAtruleExpression'in options?Boolean(options.parseAtruleExpression):true;parser.parseSelector='parseSelector'in options?Boolean(options.parseSelector):true;parser.parseValue='parseValue'in options?Boolean(options.parseValue):true;parser.parseCustomProperty='parseCustomProperty'in options?Boolean(options.parseCustomProperty):false;if(!parser.context.hasOwnProperty(context)){throw new Error('Unknown context `'+context+'`');}ast=parser.context[context].call(parser,options);if(!parser.scanner.eof){parser.scanner.error();}// console.log(JSON.stringify(ast, null, 4));\nreturn ast;};};var cmpChar$1=tokenizer.cmpChar;var TYPE$4=tokenizer.TYPE;var IDENTIFIER$2=TYPE$4.Identifier;var STRING$2=TYPE$4.String;var NUMBER$2=TYPE$4.Number;var FUNCTION$2=TYPE$4.Function;var URL$2=TYPE$4.Url;var NUMBERSIGN=TYPE$4.NumberSign;var LEFTPARENTHESIS$1=TYPE$4.LeftParenthesis;var LEFTSQUAREBRACKET$1=TYPE$4.LeftSquareBracket;var PLUSSIGN$2=TYPE$4.PlusSign;var HYPHENMINUS$2=TYPE$4.HyphenMinus;var COMMA=TYPE$4.Comma;var SOLIDUS=TYPE$4.Solidus;var ASTERISK=TYPE$4.Asterisk;var PERCENTSIGN=TYPE$4.PercentSign;var BACKSLASH=TYPE$4.Backslash;var U=117;// 'u'.charCodeAt(0)\nvar _default=function defaultRecognizer(context){switch(this.scanner.tokenType){case NUMBERSIGN:return this.HexColor();case COMMA:context.space=null;context.ignoreWSAfter=true;return this.Operator();case SOLIDUS:case ASTERISK:case PLUSSIGN$2:case HYPHENMINUS$2:return this.Operator();case LEFTPARENTHESIS$1:return this.Parentheses(this.readSequence,context.recognizer);case LEFTSQUAREBRACKET$1:return this.Brackets(this.readSequence,context.recognizer);case STRING$2:return this.String();case NUMBER$2:switch(this.scanner.lookupType(1)){case PERCENTSIGN:return this.Percentage();case IDENTIFIER$2:// edge case: number with folowing \\0 and \\9 hack shouldn't to be a Dimension\nif(cmpChar$1(this.scanner.source,this.scanner.tokenEnd,BACKSLASH)){return this.Number();}else{return this.Dimension();}default:return this.Number();}case FUNCTION$2:return this.Function(this.readSequence,context.recognizer);case URL$2:return this.Url();case IDENTIFIER$2:// check for unicode range, it should start with u+ or U+\nif(cmpChar$1(this.scanner.source,this.scanner.tokenStart,U)&&cmpChar$1(this.scanner.source,this.scanner.tokenStart+1,PLUSSIGN$2)){return this.UnicodeRange();}else{return this.Identifier();}}};var atruleExpression={getNode:_default};var TYPE$5=tokenizer.TYPE;var IDENTIFIER$3=TYPE$5.Identifier;var NUMBER$3=TYPE$5.Number;var NUMBERSIGN$1=TYPE$5.NumberSign;var LEFTSQUAREBRACKET$2=TYPE$5.LeftSquareBracket;var PLUSSIGN$3=TYPE$5.PlusSign;var SOLIDUS$1=TYPE$5.Solidus;var ASTERISK$1=TYPE$5.Asterisk;var FULLSTOP$2=TYPE$5.FullStop;var COLON=TYPE$5.Colon;var GREATERTHANSIGN$1=TYPE$5.GreaterThanSign;var VERTICALLINE=TYPE$5.VerticalLine;var TILDE=TYPE$5.Tilde;function getNode(context){switch(this.scanner.tokenType){case PLUSSIGN$3:case GREATERTHANSIGN$1:case TILDE:context.space=null;context.ignoreWSAfter=true;return this.Combinator();case SOLIDUS$1:// /deep/\nreturn this.Combinator();case FULLSTOP$2:return this.ClassSelector();case LEFTSQUAREBRACKET$2:return this.AttributeSelector();case NUMBERSIGN$1:return this.IdSelector();case COLON:if(this.scanner.lookupType(1)===COLON){return this.PseudoElementSelector();}else{return this.PseudoClassSelector();}case IDENTIFIER$3:case ASTERISK$1:case VERTICALLINE:return this.TypeSelector();case NUMBER$3:return this.Percentage();}}var selector={getNode:getNode};// https://drafts.csswg.org/css-images-4/#element-notation\n// https://developer.mozilla.org/en-US/docs/Web/CSS/element\nvar element=function element(){this.scanner.skipSC();var id=this.IdSelector();this.scanner.skipSC();return new list().appendData(id);};// legacy IE function\n// expression '(' raw ')'\nvar expression=function expression(){return new list().appendData(this.Raw(this.scanner.currentToken,0,0,false,false));};var TYPE$6=tokenizer.TYPE;var IDENTIFIER$4=TYPE$6.Identifier;var COMMA$1=TYPE$6.Comma;var SEMICOLON=TYPE$6.Semicolon;var HYPHENMINUS$3=TYPE$6.HyphenMinus;var EXCLAMATIONMARK$1=TYPE$6.ExclamationMark;// var '(' ident (',' <value>? )? ')'\nvar _var=function _var(){var children=new list();this.scanner.skipSC();var identStart=this.scanner.tokenStart;this.scanner.eat(HYPHENMINUS$3);if(this.scanner.source.charCodeAt(this.scanner.tokenStart)!==HYPHENMINUS$3){this.scanner.error('HyphenMinus is expected');}this.scanner.eat(IDENTIFIER$4);children.appendData({type:'Identifier',loc:this.getLocation(identStart,this.scanner.tokenStart),name:this.scanner.substrToCursor(identStart)});this.scanner.skipSC();if(this.scanner.tokenType===COMMA$1){children.appendData(this.Operator());children.appendData(this.parseCustomProperty?this.Value(null):this.Raw(this.scanner.currentToken,EXCLAMATIONMARK$1,SEMICOLON,false,false));}return children;};var value={getNode:_default,'-moz-element':element,'element':element,'expression':expression,'var':_var};var scope={AtruleExpression:atruleExpression,Selector:selector,Value:value};var fontFace={parse:{expression:null,block:function block(){return this.Block(this.Declaration);}}};var TYPE$7=tokenizer.TYPE;var STRING$3=TYPE$7.String;var IDENTIFIER$5=TYPE$7.Identifier;var URL$3=TYPE$7.Url;var LEFTPARENTHESIS$2=TYPE$7.LeftParenthesis;var _import={parse:{expression:function expression(){var children=new list();this.scanner.skipSC();switch(this.scanner.tokenType){case STRING$3:children.appendData(this.String());break;case URL$3:children.appendData(this.Url());break;default:this.scanner.error('String or url() is expected');}if(this.scanner.lookupNonWSType(0)===IDENTIFIER$5||this.scanner.lookupNonWSType(0)===LEFTPARENTHESIS$2){children.appendData(this.WhiteSpace());children.appendData(this.MediaQueryList());}return children;},block:null}};var media={parse:{expression:function expression(){return new list().appendData(this.MediaQueryList());},block:function block(){return this.Block(this.Rule);}}};var TYPE$8=tokenizer.TYPE;var LEFTCURLYBRACKET$1=TYPE$8.LeftCurlyBracket;var page={parse:{expression:function expression(){if(this.scanner.lookupNonWSType(0)===LEFTCURLYBRACKET$1){return null;}return new list().appendData(this.SelectorList());},block:function block(){return this.Block(this.Declaration);}}};var TYPE$9=tokenizer.TYPE;var WHITESPACE$3=TYPE$9.WhiteSpace;var COMMENT$3=TYPE$9.Comment;var IDENTIFIER$6=TYPE$9.Identifier;var FUNCTION$3=TYPE$9.Function;var LEFTPARENTHESIS$3=TYPE$9.LeftParenthesis;var HYPHENMINUS$4=TYPE$9.HyphenMinus;var COLON$1=TYPE$9.Colon;function consumeRaw(){return new list().appendData(this.Raw(this.scanner.currentToken,0,0,false,false));}function parentheses(){var index=0;this.scanner.skipSC();// TODO: make it simplier\nif(this.scanner.tokenType===IDENTIFIER$6){index=1;}else if(this.scanner.tokenType===HYPHENMINUS$4&&this.scanner.lookupType(1)===IDENTIFIER$6){index=2;}if(index!==0&&this.scanner.lookupNonWSType(index)===COLON$1){return new list().appendData(this.Declaration());}return readSequence.call(this);}function readSequence(){var children=new list();var space=null;var child;this.scanner.skipSC();scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$3:space=this.WhiteSpace();continue;case COMMENT$3:this.scanner.next();continue;case FUNCTION$3:child=this.Function(consumeRaw,this.scope.AtruleExpression);break;case IDENTIFIER$6:child=this.Identifier();break;case LEFTPARENTHESIS$3:child=this.Parentheses(parentheses,this.scope.AtruleExpression);break;default:break scan;}if(space!==null){children.appendData(space);space=null;}children.appendData(child);}return children;}var supports={parse:{expression:function expression(){var children=readSequence.call(this);if(children.isEmpty()){this.scanner.error('Condition is expected');}return children;},block:function block(){return this.Block(this.Rule);}}};var atrule={'font-face':fontFace,'import':_import,'media':media,'page':page,'supports':supports};var dir={parse:function parse(){return new list().appendData(this.Identifier());}};var has$1={parse:function parse(){return new list().appendData(this.SelectorList());}};var lang={parse:function parse(){return new list().appendData(this.Identifier());}};var selectorList={parse:function selectorList(){return new list().appendData(this.SelectorList());}};var matches=selectorList;var not=selectorList;var ALLOW_OF_CLAUSE=true;var nthWithOfClause={parse:function parse(){return new list().appendData(this.Nth(ALLOW_OF_CLAUSE));}};var nthChild=nthWithOfClause;var nthLastChild=nthWithOfClause;var DISALLOW_OF_CLAUSE=false;var nth={parse:function nth(){return new list().appendData(this.Nth(DISALLOW_OF_CLAUSE));}};var nthLastOfType=nth;var nthOfType=nth;var slotted={parse:function compoundSelector(){return new list().appendData(this.Selector());}};var pseudo={'dir':dir,'has':has$1,'lang':lang,'matches':matches,'not':not,'nth-child':nthChild,'nth-last-child':nthLastChild,'nth-last-of-type':nthLastOfType,'nth-of-type':nthOfType,'slotted':slotted};var cmpChar$2=tokenizer.cmpChar;var isNumber$2=tokenizer.isNumber;var TYPE$a=tokenizer.TYPE;var IDENTIFIER$7=TYPE$a.Identifier;var NUMBER$4=TYPE$a.Number;var PLUSSIGN$4=TYPE$a.PlusSign;var HYPHENMINUS$5=TYPE$a.HyphenMinus;var N$3=110;// 'n'.charCodeAt(0)\nvar DISALLOW_SIGN=true;var ALLOW_SIGN=false;function checkTokenIsInteger(scanner,disallowSign){var pos=scanner.tokenStart;if(scanner.source.charCodeAt(pos)===PLUSSIGN$4||scanner.source.charCodeAt(pos)===HYPHENMINUS$5){if(disallowSign){scanner.error();}pos++;}for(;pos<scanner.tokenEnd;pos++){if(!isNumber$2(scanner.source.charCodeAt(pos))){scanner.error('Unexpected input',pos);}}}// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nvar AnPlusB={name:'AnPlusB',structure:{a:[String,null],b:[String,null]},parse:function parse(){var start=this.scanner.tokenStart;var end=start;var prefix='';var a=null;var b=null;if(this.scanner.tokenType===NUMBER$4||this.scanner.tokenType===PLUSSIGN$4){checkTokenIsInteger(this.scanner,ALLOW_SIGN);prefix=this.scanner.getTokenValue();this.scanner.next();end=this.scanner.tokenStart;}if(this.scanner.tokenType===IDENTIFIER$7){var bStart=this.scanner.tokenStart;if(cmpChar$2(this.scanner.source,bStart,HYPHENMINUS$5)){if(prefix===''){prefix='-';bStart++;}else{this.scanner.error('Unexpected hyphen minus');}}if(!cmpChar$2(this.scanner.source,bStart,N$3)){this.scanner.error();}a=prefix===''?'1':prefix==='+'?'+1':prefix==='-'?'-1':prefix;var len=this.scanner.tokenEnd-bStart;if(len>1){// ..n-..\nif(this.scanner.source.charCodeAt(bStart+1)!==HYPHENMINUS$5){this.scanner.error('Unexpected input',bStart+1);}if(len>2){// ..n-{number}..\nthis.scanner.tokenStart=bStart+2;}else{// ..n- {number}\nthis.scanner.next();this.scanner.skipSC();}checkTokenIsInteger(this.scanner,DISALLOW_SIGN);b='-'+this.scanner.getTokenValue();this.scanner.next();end=this.scanner.tokenStart;}else{prefix='';this.scanner.next();end=this.scanner.tokenStart;this.scanner.skipSC();if(this.scanner.tokenType===HYPHENMINUS$5||this.scanner.tokenType===PLUSSIGN$4){prefix=this.scanner.getTokenValue();this.scanner.next();this.scanner.skipSC();}if(this.scanner.tokenType===NUMBER$4){checkTokenIsInteger(this.scanner,prefix!=='');if(!isNumber$2(this.scanner.source.charCodeAt(this.scanner.tokenStart))){prefix=this.scanner.source.charAt(this.scanner.tokenStart);this.scanner.tokenStart++;}if(prefix===''){// should be an operator before number\nthis.scanner.error();}else if(prefix==='+'){// plus is using by default\nprefix='';}b=prefix+this.scanner.getTokenValue();this.scanner.next();end=this.scanner.tokenStart;}else{if(prefix){this.scanner.eat(NUMBER$4);}}}}else{if(prefix===''||prefix==='+'){// no number\nthis.scanner.error('Number or identifier is expected',this.scanner.tokenStart+(this.scanner.tokenType===PLUSSIGN$4||this.scanner.tokenType===HYPHENMINUS$5));}b=prefix;}return{type:'AnPlusB',loc:this.getLocation(start,end),a:a,b:b};},generate:function generate(processChunk,node){var a=node.a!==null&&node.a!==undefined;var b=node.b!==null&&node.b!==undefined;if(a){processChunk(node.a==='+1'?'+n':node.a==='1'?'n':node.a==='-1'?'-n':node.a+'n');if(b){b=String(node.b);if(b.charAt(0)==='-'||b.charAt(0)==='+'){processChunk(b.charAt(0));processChunk(b.substr(1));}else{processChunk('+');processChunk(b);}}}else{processChunk(String(node.b));}}};var TYPE$b=tokenizer.TYPE;var ATRULE$2=TYPE$b.Atrule;var SEMICOLON$1=TYPE$b.Semicolon;var LEFTCURLYBRACKET$2=TYPE$b.LeftCurlyBracket;var RIGHTCURLYBRACKET$1=TYPE$b.RightCurlyBracket;function isBlockAtrule(){for(var offset=1,type;type=this.scanner.lookupType(offset);offset++){if(type===RIGHTCURLYBRACKET$1){return true;}if(type===LEFTCURLYBRACKET$2||type===ATRULE$2){return false;}}this.scanner.skip(offset);this.scanner.eat(RIGHTCURLYBRACKET$1);}var Atrule={name:'Atrule',structure:{name:String,expression:['AtruleExpression',null],block:['Block',null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var nameLowerCase;var expression=null;var block=null;this.scanner.eat(ATRULE$2);name=this.scanner.substrToCursor(start+1);nameLowerCase=name.toLowerCase();this.scanner.skipSC();expression=this.AtruleExpression(name);// turn empty AtruleExpression into null\nif(expression.children.head===null){expression=null;}this.scanner.skipSC();if(this.atrule.hasOwnProperty(nameLowerCase)){if(typeof this.atrule[nameLowerCase].block==='function'){if(this.scanner.tokenType!==LEFTCURLYBRACKET$2){// FIXME: make tolerant\nthis.scanner.error('Curly bracket is expected');}block=this.atrule[nameLowerCase].block.call(this);}else{if(!this.tolerant||!this.scanner.eof){this.scanner.eat(SEMICOLON$1);}}}else{switch(this.scanner.tokenType){case SEMICOLON$1:this.scanner.next();break;case LEFTCURLYBRACKET$2:// TODO: should consume block content as Raw?\nblock=this.Block(isBlockAtrule.call(this)?this.Declaration:this.Rule);break;default:if(!this.tolerant){this.scanner.error('Semicolon or block is expected');}}}return{type:'Atrule',loc:this.getLocation(start,this.scanner.tokenStart),name:name,expression:expression,block:block};},generate:function generate(processChunk,node){processChunk('@');processChunk(node.name);if(node.expression!==null){processChunk(' ');this.generate(processChunk,node.expression);}if(node.block){this.generate(processChunk,node.block);}else{processChunk(';');}},walkContext:'atrule'};var TYPE$c=tokenizer.TYPE;var SEMICOLON$2=TYPE$c.Semicolon;var LEFTCURLYBRACKET$3=TYPE$c.LeftCurlyBracket;function consumeRaw$1(startToken){return new list().appendData(this.Raw(startToken,SEMICOLON$2,LEFTCURLYBRACKET$3,false,true));}function consumeDefaultSequence(){return this.readSequence(this.scope.AtruleExpression);}var AtruleExpression={name:'AtruleExpression',structure:{children:[[]]},parse:function parse(name){var children=null;var startToken=this.scanner.currentToken;if(name!==null){name=name.toLowerCase();}if(this.parseAtruleExpression){// custom consumer\nif(this.atrule.hasOwnProperty(name)){if(typeof this.atrule[name].expression==='function'){children=this.tolerantParse(this.atrule[name].expression,consumeRaw$1);}}else{// default consumer\nthis.scanner.skipSC();children=this.tolerantParse(consumeDefaultSequence,consumeRaw$1);}if(this.tolerant){if(this.scanner.eof||this.scanner.tokenType!==SEMICOLON$2&&this.scanner.tokenType!==LEFTCURLYBRACKET$3){children=consumeRaw$1.call(this,startToken);}}}else{children=consumeRaw$1.call(this,startToken);}if(children===null){children=new list();}return{type:'AtruleExpression',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);},walkContext:'atruleExpression'};var TYPE$d=tokenizer.TYPE;var IDENTIFIER$8=TYPE$d.Identifier;var STRING$4=TYPE$d.String;var DOLLARSIGN=TYPE$d.DollarSign;var ASTERISK$2=TYPE$d.Asterisk;var COLON$2=TYPE$d.Colon;var EQUALSSIGN=TYPE$d.EqualsSign;var LEFTSQUAREBRACKET$3=TYPE$d.LeftSquareBracket;var RIGHTSQUAREBRACKET$1=TYPE$d.RightSquareBracket;var CIRCUMFLEXACCENT=TYPE$d.CircumflexAccent;var VERTICALLINE$1=TYPE$d.VerticalLine;var TILDE$1=TYPE$d.Tilde;function getAttributeName(){if(this.scanner.eof){this.scanner.error('Unexpected end of input');}var start=this.scanner.tokenStart;var expectIdentifier=false;var checkColon=true;if(this.scanner.tokenType===ASTERISK$2){expectIdentifier=true;checkColon=false;this.scanner.next();}else if(this.scanner.tokenType!==VERTICALLINE$1){this.scanner.eat(IDENTIFIER$8);}if(this.scanner.tokenType===VERTICALLINE$1){if(this.scanner.lookupType(1)!==EQUALSSIGN){this.scanner.next();this.scanner.eat(IDENTIFIER$8);}else if(expectIdentifier){this.scanner.error('Identifier is expected',this.scanner.tokenEnd);}}else if(expectIdentifier){this.scanner.error('Vertical line is expected');}if(checkColon&&this.scanner.tokenType===COLON$2){this.scanner.next();this.scanner.eat(IDENTIFIER$8);}return{type:'Identifier',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};}function getOperator(){var start=this.scanner.tokenStart;var tokenType=this.scanner.tokenType;if(tokenType!==EQUALSSIGN&&// =\ntokenType!==TILDE$1&&// ~=\ntokenType!==CIRCUMFLEXACCENT&&// ^=\ntokenType!==DOLLARSIGN&&// $=\ntokenType!==ASTERISK$2&&// *=\ntokenType!==VERTICALLINE$1// |=\n){this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');}if(tokenType===EQUALSSIGN){this.scanner.next();}else{this.scanner.next();this.scanner.eat(EQUALSSIGN);}return this.scanner.substrToCursor(start);}// '[' S* attrib_name ']'\n// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'\nvar AttributeSelector={name:'AttributeSelector',structure:{name:'Identifier',matcher:[String,null],value:['String','Identifier',null],flags:[String,null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var matcher=null;var value=null;var flags=null;this.scanner.eat(LEFTSQUAREBRACKET$3);this.scanner.skipSC();name=getAttributeName.call(this);this.scanner.skipSC();if(this.scanner.tokenType!==RIGHTSQUAREBRACKET$1){// avoid case `[name i]`\nif(this.scanner.tokenType!==IDENTIFIER$8){matcher=getOperator.call(this);this.scanner.skipSC();value=this.scanner.tokenType===STRING$4?this.String():this.Identifier();this.scanner.skipSC();}// attribute flags\nif(this.scanner.tokenType===IDENTIFIER$8){flags=this.scanner.getTokenValue();this.scanner.next();this.scanner.skipSC();}}this.scanner.eat(RIGHTSQUAREBRACKET$1);return{type:'AttributeSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,matcher:matcher,value:value,flags:flags};},generate:function generate(processChunk,node){var flagsPrefix=' ';processChunk('[');this.generate(processChunk,node.name);if(node.matcher!==null){processChunk(node.matcher);if(node.value!==null){this.generate(processChunk,node.value);// space between string and flags is not required\nif(node.value.type==='String'){flagsPrefix='';}}}if(node.flags!==null){processChunk(flagsPrefix);processChunk(node.flags);}processChunk(']');}};var TYPE$e=tokenizer.TYPE;var WHITESPACE$4=TYPE$e.WhiteSpace;var COMMENT$4=TYPE$e.Comment;var SEMICOLON$3=TYPE$e.Semicolon;var ATRULE$3=TYPE$e.Atrule;var LEFTCURLYBRACKET$4=TYPE$e.LeftCurlyBracket;var RIGHTCURLYBRACKET$2=TYPE$e.RightCurlyBracket;function consumeRaw$2(startToken){return this.Raw(startToken,0,SEMICOLON$3,true,true);}var Block={name:'Block',structure:{children:[['Atrule','Rule','Declaration']]},parse:function parse(defaultConsumer){if(!defaultConsumer){defaultConsumer=this.Declaration;}var start=this.scanner.tokenStart;var children=new list();this.scanner.eat(LEFTCURLYBRACKET$4);scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case RIGHTCURLYBRACKET$2:break scan;case WHITESPACE$4:case COMMENT$4:case SEMICOLON$3:this.scanner.next();break;case ATRULE$3:children.appendData(this.tolerantParse(this.Atrule,consumeRaw$2));break;default:children.appendData(this.tolerantParse(defaultConsumer,consumeRaw$2));}}if(!this.tolerant||!this.scanner.eof){this.scanner.eat(RIGHTCURLYBRACKET$2);}return{type:'Block',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(processChunk,node){processChunk('{');this.each(processChunk,node);processChunk('}');},walkContext:'block'};var TYPE$f=tokenizer.TYPE;var LEFTSQUAREBRACKET$4=TYPE$f.LeftSquareBracket;var RIGHTSQUAREBRACKET$2=TYPE$f.RightSquareBracket;// currently only Grid Layout uses square brackets, but left it universal\n// https://drafts.csswg.org/css-grid/#track-sizing\n// [ ident* ]\nvar Brackets={name:'Brackets',structure:{children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var children=null;this.scanner.eat(LEFTSQUAREBRACKET$4);children=readSequence.call(this,recognizer);this.scanner.eat(RIGHTSQUAREBRACKET$2);return{type:'Brackets',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(processChunk,node){processChunk('[');this.each(processChunk,node);processChunk(']');}};var CDC$2=tokenizer.TYPE.CDC;var CDC_1={name:'CDC',structure:[],parse:function parse(){var start=this.scanner.tokenStart;this.scanner.eat(CDC$2);// -->\nreturn{type:'CDC',loc:this.getLocation(start,this.scanner.tokenStart)};},generate:function generate(processChunk){processChunk('-->');}};var CDO$2=tokenizer.TYPE.CDO;var CDO_1={name:'CDO',structure:[],parse:function parse(){var start=this.scanner.tokenStart;this.scanner.eat(CDO$2);// <!--\nreturn{type:'CDO',loc:this.getLocation(start,this.scanner.tokenStart)};},generate:function generate(processChunk){processChunk('<!--');}};var TYPE$g=tokenizer.TYPE;var IDENTIFIER$9=TYPE$g.Identifier;var FULLSTOP$3=TYPE$g.FullStop;// '.' ident\nvar ClassSelector={name:'ClassSelector',structure:{name:String},parse:function parse(){this.scanner.eat(FULLSTOP$3);return{type:'ClassSelector',loc:this.getLocation(this.scanner.tokenStart-1,this.scanner.tokenEnd),name:this.scanner.consume(IDENTIFIER$9)};},generate:function generate(processChunk,node){processChunk('.');processChunk(node.name);}};var TYPE$h=tokenizer.TYPE;var PLUSSIGN$5=TYPE$h.PlusSign;var SOLIDUS$2=TYPE$h.Solidus;var GREATERTHANSIGN$2=TYPE$h.GreaterThanSign;var TILDE$2=TYPE$h.Tilde;// + | > | ~ | /deep/\nvar Combinator={name:'Combinator',structure:{name:String},parse:function parse(){var start=this.scanner.tokenStart;switch(this.scanner.tokenType){case GREATERTHANSIGN$2:case PLUSSIGN$5:case TILDE$2:this.scanner.next();break;case SOLIDUS$2:this.scanner.next();this.scanner.expectIdentifier('deep');this.scanner.eat(SOLIDUS$2);break;default:this.scanner.error('Combinator is expected');}return{type:'Combinator',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};},generate:function generate(processChunk,node){processChunk(node.name);}};var TYPE$i=tokenizer.TYPE;var ASTERISK$3=TYPE$i.Asterisk;var SOLIDUS$3=TYPE$i.Solidus;// '/*' .* '*/'\nvar Comment={name:'Comment',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;var end=this.scanner.tokenEnd;if(end-start+2>=2&&this.scanner.source.charCodeAt(end-2)===ASTERISK$3&&this.scanner.source.charCodeAt(end-1)===SOLIDUS$3){end-=2;}this.scanner.next();return{type:'Comment',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.source.substring(start+2,end)};},generate:function generate(processChunk,node){processChunk('/*');processChunk(node.value);processChunk('*/');}};var TYPE$j=tokenizer.TYPE;var IDENTIFIER$a=TYPE$j.Identifier;var COLON$3=TYPE$j.Colon;var EXCLAMATIONMARK$2=TYPE$j.ExclamationMark;var SOLIDUS$4=TYPE$j.Solidus;var ASTERISK$4=TYPE$j.Asterisk;var DOLLARSIGN$1=TYPE$j.DollarSign;var HYPHENMINUS$6=TYPE$j.HyphenMinus;var SEMICOLON$4=TYPE$j.Semicolon;var RIGHTCURLYBRACKET$3=TYPE$j.RightCurlyBracket;var RIGHTPARENTHESIS$1=TYPE$j.RightParenthesis;var PLUSSIGN$6=TYPE$j.PlusSign;var NUMBERSIGN$2=TYPE$j.NumberSign;var Declaration={name:'Declaration',structure:{important:[Boolean,String],property:String,value:['Value','Raw']},parse:function parse(){var start=this.scanner.tokenStart;var property=readProperty.call(this);var important=false;var value;this.scanner.skipSC();this.scanner.eat(COLON$3);if(isCustomProperty(property)?this.parseCustomProperty:this.parseValue){value=this.Value(property);}else{value=this.Raw(this.scanner.currentToken,EXCLAMATIONMARK$2,SEMICOLON$4,false,false);}if(this.scanner.tokenType===EXCLAMATIONMARK$2){important=getImportant(this.scanner);this.scanner.skipSC();}// TODO: include or not to include semicolon to range?\n// if (this.scanner.tokenType === SEMICOLON) {\n//     this.scanner.next();\n// }\nif(!this.scanner.eof&&this.scanner.tokenType!==SEMICOLON$4&&this.scanner.tokenType!==RIGHTPARENTHESIS$1&&this.scanner.tokenType!==RIGHTCURLYBRACKET$3){this.scanner.error();}return{type:'Declaration',loc:this.getLocation(start,this.scanner.tokenStart),important:important,property:property,value:value};},generate:function generate(processChunk,node,item){processChunk(node.property);processChunk(':');this.generate(processChunk,node.value);if(node.important){processChunk(node.important===true?'!important':'!'+node.important);}if(item&&item.next){processChunk(';');}},walkContext:'declaration'};function isCustomProperty(name){return name.length>=2&&name.charCodeAt(0)===HYPHENMINUS$6&&name.charCodeAt(1)===HYPHENMINUS$6;}function readProperty(){var start=this.scanner.tokenStart;var prefix=0;// hacks\nswitch(this.scanner.tokenType){case ASTERISK$4:case DOLLARSIGN$1:case PLUSSIGN$6:case NUMBERSIGN$2:prefix=1;break;// TODO: not sure we should support this hack\ncase SOLIDUS$4:prefix=this.scanner.lookupType(1)===SOLIDUS$4?2:1;break;}if(this.scanner.lookupType(prefix)===HYPHENMINUS$6){prefix++;}if(prefix){this.scanner.skip(prefix);}this.scanner.eat(IDENTIFIER$a);return this.scanner.substrToCursor(start);}// ! ws* important\nfunction getImportant(scanner){scanner.eat(EXCLAMATIONMARK$2);scanner.skipSC();var important=scanner.consume(IDENTIFIER$a);// store original value in case it differ from `important`\n// for better original source restoring and hacks like `!ie` support\nreturn important==='important'?true:important;}var TYPE$k=tokenizer.TYPE;var WHITESPACE$5=TYPE$k.WhiteSpace;var COMMENT$5=TYPE$k.Comment;var SEMICOLON$5=TYPE$k.Semicolon;function consumeRaw$3(startToken){return this.Raw(startToken,0,SEMICOLON$5,true,true);}var DeclarationList={name:'DeclarationList',structure:{children:[['Declaration']]},parse:function parse(){var children=new list();while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$5:case COMMENT$5:case SEMICOLON$5:this.scanner.next();break;default:children.appendData(this.tolerantParse(this.Declaration,consumeRaw$3));}}return{type:'DeclarationList',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);}};var NUMBER$5=tokenizer.TYPE.Number;// special reader for units to avoid adjoined IE hacks (i.e. '1px\\9')\nfunction readUnit(scanner){var unit=scanner.getTokenValue();var backSlashPos=unit.indexOf('\\\\');if(backSlashPos>0){// patch token offset\nscanner.tokenStart+=backSlashPos;// return part before backslash\nreturn unit.substring(0,backSlashPos);}// no backslash in unit name\nscanner.next();return unit;}// number ident\nvar Dimension={name:'Dimension',structure:{value:String,unit:String},parse:function parse(){var start=this.scanner.tokenStart;var value=this.scanner.consume(NUMBER$5);var unit=readUnit(this.scanner);return{type:'Dimension',loc:this.getLocation(start,this.scanner.tokenStart),value:value,unit:unit};},generate:function generate(processChunk,node){processChunk(node.value);processChunk(node.unit);}};var TYPE$l=tokenizer.TYPE;var RIGHTPARENTHESIS$2=TYPE$l.RightParenthesis;// <function-token> <sequence> ')'\nvar _Function={name:'Function',structure:{name:String,children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var name=this.scanner.consumeFunctionName();var nameLowerCase=name.toLowerCase();var children;children=recognizer.hasOwnProperty(nameLowerCase)?recognizer[nameLowerCase].call(this,recognizer):readSequence.call(this,recognizer);this.scanner.eat(RIGHTPARENTHESIS$2);return{type:'Function',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(processChunk,node){processChunk(node.name);processChunk('(');this.each(processChunk,node);processChunk(')');},walkContext:'function'};var isHex$1=tokenizer.isHex;var TYPE$m=tokenizer.TYPE;var IDENTIFIER$b=TYPE$m.Identifier;var NUMBER$6=TYPE$m.Number;var NUMBERSIGN$3=TYPE$m.NumberSign;function consumeHexSequence(scanner,required){if(!isHex$1(scanner.source.charCodeAt(scanner.tokenStart))){if(required){scanner.error('Unexpected input',scanner.tokenStart);}else{return;}}for(var pos=scanner.tokenStart+1;pos<scanner.tokenEnd;pos++){var code=scanner.source.charCodeAt(pos);// break on non-hex char\nif(!isHex$1(code)){// break token, exclude symbol\nscanner.tokenStart=pos;return;}}// token is full hex sequence, go to next token\nscanner.next();}// # ident\nvar HexColor={name:'HexColor',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;this.scanner.eat(NUMBERSIGN$3);switch(this.scanner.tokenType){case NUMBER$6:consumeHexSequence(this.scanner,true);// if token is identifier then number consists of hex only,\n// try to add identifier to result\nif(this.scanner.tokenType===IDENTIFIER$b){consumeHexSequence(this.scanner,false);}break;case IDENTIFIER$b:consumeHexSequence(this.scanner,true);break;default:this.scanner.error('Number or identifier is expected');}return{type:'HexColor',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start+1)// skip #\n};},generate:function generate(processChunk,node){processChunk('#');processChunk(node.value);}};var TYPE$n=tokenizer.TYPE;var IDENTIFIER$c=TYPE$n.Identifier;var Identifier={name:'Identifier',structure:{name:String},parse:function parse(){return{type:'Identifier',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),name:this.scanner.consume(IDENTIFIER$c)};},generate:function generate(processChunk,node){processChunk(node.name);}};var TYPE$o=tokenizer.TYPE;var IDENTIFIER$d=TYPE$o.Identifier;var NUMBERSIGN$4=TYPE$o.NumberSign;// '#' ident\nvar IdSelector={name:'IdSelector',structure:{name:String},parse:function parse(){this.scanner.eat(NUMBERSIGN$4);return{type:'IdSelector',loc:this.getLocation(this.scanner.tokenStart-1,this.scanner.tokenEnd),name:this.scanner.consume(IDENTIFIER$d)};},generate:function generate(processChunk,node){processChunk('#');processChunk(node.name);}};var TYPE$p=tokenizer.TYPE;var IDENTIFIER$e=TYPE$p.Identifier;var NUMBER$7=TYPE$p.Number;var LEFTPARENTHESIS$4=TYPE$p.LeftParenthesis;var RIGHTPARENTHESIS$3=TYPE$p.RightParenthesis;var COLON$4=TYPE$p.Colon;var SOLIDUS$5=TYPE$p.Solidus;var MediaFeature={name:'MediaFeature',structure:{name:String,value:['Identifier','Number','Dimension','Ratio',null]},parse:function parse(){var start=this.scanner.tokenStart;var name;var value=null;this.scanner.eat(LEFTPARENTHESIS$4);this.scanner.skipSC();name=this.scanner.consume(IDENTIFIER$e);this.scanner.skipSC();if(this.scanner.tokenType!==RIGHTPARENTHESIS$3){this.scanner.eat(COLON$4);this.scanner.skipSC();switch(this.scanner.tokenType){case NUMBER$7:if(this.scanner.lookupType(1)===IDENTIFIER$e){value=this.Dimension();}else if(this.scanner.lookupNonWSType(1)===SOLIDUS$5){value=this.Ratio();}else{value=this.Number();}break;case IDENTIFIER$e:value=this.Identifier();break;default:this.scanner.error('Number, dimension, ratio or identifier is expected');}this.scanner.skipSC();}this.scanner.eat(RIGHTPARENTHESIS$3);return{type:'MediaFeature',loc:this.getLocation(start,this.scanner.tokenStart),name:name,value:value};},generate:function generate(processChunk,node){processChunk('(');processChunk(node.name);if(node.value!==null){processChunk(':');this.generate(processChunk,node.value);}processChunk(')');}};var TYPE$q=tokenizer.TYPE;var WHITESPACE$6=TYPE$q.WhiteSpace;var COMMENT$6=TYPE$q.Comment;var IDENTIFIER$f=TYPE$q.Identifier;var LEFTPARENTHESIS$5=TYPE$q.LeftParenthesis;var MediaQuery={name:'MediaQuery',structure:{children:[['Identifier','MediaFeature','WhiteSpace']]},parse:function parse(){this.scanner.skipSC();var children=new list();var child=null;var space=null;scan:while(!this.scanner.eof){switch(this.scanner.tokenType){case COMMENT$6:this.scanner.next();continue;case WHITESPACE$6:space=this.WhiteSpace();continue;case IDENTIFIER$f:child=this.Identifier();break;case LEFTPARENTHESIS$5:child=this.MediaFeature();break;default:break scan;}if(space!==null){children.appendData(space);space=null;}children.appendData(child);}if(child===null){this.scanner.error('Identifier or parenthesis is expected');}return{type:'MediaQuery',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);}};var COMMA$2=tokenizer.TYPE.Comma;var MediaQueryList={name:'MediaQueryList',structure:{children:[['MediaQuery']]},parse:function parse(relative){var children=new list();this.scanner.skipSC();while(!this.scanner.eof){children.appendData(this.MediaQuery(relative));if(this.scanner.tokenType!==COMMA$2){break;}this.scanner.next();}return{type:'MediaQueryList',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.eachComma(processChunk,node);}};// https://drafts.csswg.org/css-syntax-3/#the-anb-type\nvar Nth={name:'Nth',structure:{nth:['AnPlusB','Identifier'],selector:['SelectorList',null]},parse:function parse(allowOfClause){this.scanner.skipSC();var start=this.scanner.tokenStart;var end=start;var selector=null;var query;if(this.scanner.lookupValue(0,'odd')||this.scanner.lookupValue(0,'even')){query=this.Identifier();}else{query=this.AnPlusB();}this.scanner.skipSC();if(allowOfClause&&this.scanner.lookupValue(0,'of')){this.scanner.next();selector=this.SelectorList();if(this.needPositions){end=selector.children.last().loc.end.offset;}}else{if(this.needPositions){end=query.loc.end.offset;}}return{type:'Nth',loc:this.getLocation(start,end),nth:query,selector:selector};},generate:function generate(processChunk,node){this.generate(processChunk,node.nth);if(node.selector!==null){processChunk(' of ');this.generate(processChunk,node.selector);}}};var NUMBER$8=tokenizer.TYPE.Number;var _Number={name:'Number',structure:{value:String},parse:function parse(){return{type:'Number',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),value:this.scanner.consume(NUMBER$8)};},generate:function generate(processChunk,node){processChunk(node.value);}};// '/' | '*' | ',' | ':' | '+' | '-'\nvar Operator={name:'Operator',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;this.scanner.next();return{type:'Operator',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start)};},generate:function generate(processChunk,node){processChunk(node.value);}};var TYPE$r=tokenizer.TYPE;var LEFTPARENTHESIS$6=TYPE$r.LeftParenthesis;var RIGHTPARENTHESIS$4=TYPE$r.RightParenthesis;var Parentheses={name:'Parentheses',structure:{children:[[]]},parse:function parse(readSequence,recognizer){var start=this.scanner.tokenStart;var children=null;this.scanner.eat(LEFTPARENTHESIS$6);children=readSequence.call(this,recognizer);this.scanner.eat(RIGHTPARENTHESIS$4);return{type:'Parentheses',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(processChunk,node){processChunk('(');this.each(processChunk,node);processChunk(')');}};var TYPE$s=tokenizer.TYPE;var NUMBER$9=TYPE$s.Number;var PERCENTSIGN$1=TYPE$s.PercentSign;var Percentage={name:'Percentage',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;var number=this.scanner.consume(NUMBER$9);this.scanner.eat(PERCENTSIGN$1);return{type:'Percentage',loc:this.getLocation(start,this.scanner.tokenStart),value:number};},generate:function generate(processChunk,node){processChunk(node.value);processChunk('%');}};var TYPE$t=tokenizer.TYPE;var IDENTIFIER$g=TYPE$t.Identifier;var FUNCTION$4=TYPE$t.Function;var COLON$5=TYPE$t.Colon;var RIGHTPARENTHESIS$5=TYPE$t.RightParenthesis;// : ident [ '(' .. ')' ]?\nvar PseudoClassSelector={name:'PseudoClassSelector',structure:{name:String,children:[['Raw'],null]},parse:function parse(){var start=this.scanner.tokenStart;var children=null;var name;var nameLowerCase;this.scanner.eat(COLON$5);if(this.scanner.tokenType===FUNCTION$4){name=this.scanner.consumeFunctionName();nameLowerCase=name.toLowerCase();if(this.pseudo.hasOwnProperty(nameLowerCase)){this.scanner.skipSC();children=this.pseudo[nameLowerCase].call(this);this.scanner.skipSC();}else{children=new list().appendData(this.Raw(this.scanner.currentToken,0,0,false,false));}this.scanner.eat(RIGHTPARENTHESIS$5);}else{name=this.scanner.consume(IDENTIFIER$g);}return{type:'PseudoClassSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(processChunk,node){processChunk(':');processChunk(node.name);if(node.children!==null){processChunk('(');this.each(processChunk,node);processChunk(')');}},walkContext:'function'};var TYPE$u=tokenizer.TYPE;var IDENTIFIER$h=TYPE$u.Identifier;var FUNCTION$5=TYPE$u.Function;var COLON$6=TYPE$u.Colon;var RIGHTPARENTHESIS$6=TYPE$u.RightParenthesis;// :: ident [ '(' .. ')' ]?\nvar PseudoElementSelector={name:'PseudoElementSelector',structure:{name:String,children:[['Raw'],null]},parse:function parse(){var start=this.scanner.tokenStart;var children=null;var name;var nameLowerCase;this.scanner.eat(COLON$6);this.scanner.eat(COLON$6);if(this.scanner.tokenType===FUNCTION$5){name=this.scanner.consumeFunctionName();nameLowerCase=name.toLowerCase();if(this.pseudo.hasOwnProperty(nameLowerCase)){this.scanner.skipSC();children=this.pseudo[nameLowerCase].call(this);this.scanner.skipSC();}else{children=new list().appendData(this.Raw(this.scanner.currentToken,0,0,false,false));}this.scanner.eat(RIGHTPARENTHESIS$6);}else{name=this.scanner.consume(IDENTIFIER$h);}return{type:'PseudoElementSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:name,children:children};},generate:function generate(processChunk,node){processChunk('::');processChunk(node.name);if(node.children!==null){processChunk('(');this.each(processChunk,node);processChunk(')');}},walkContext:'function'};var isNumber$3=tokenizer.isNumber;var TYPE$v=tokenizer.TYPE;var NUMBER$a=TYPE$v.Number;var SOLIDUS$6=TYPE$v.Solidus;var FULLSTOP$4=TYPE$v.FullStop;// Terms of <ratio> should to be a positive number (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without exponent part.\n// Additional checks may to be applied on lexer validation.\nfunction consumeNumber(scanner){var value=scanner.consumeNonWS(NUMBER$a);for(var i=0;i<value.length;i++){var code=value.charCodeAt(i);if(!isNumber$3(code)&&code!==FULLSTOP$4){scanner.error('Unsigned number is expected',scanner.tokenStart-value.length+i);}}if(Number(value)===0){scanner.error('Zero number is not allowed',scanner.tokenStart-value.length);}return value;}// <positive-integer> S* '/' S* <positive-integer>\nvar Ratio={name:'Ratio',structure:{left:String,right:String},parse:function parse(){var start=this.scanner.tokenStart;var left=consumeNumber(this.scanner);var right;this.scanner.eatNonWS(SOLIDUS$6);right=consumeNumber(this.scanner);return{type:'Ratio',loc:this.getLocation(start,this.scanner.tokenStart),left:left,right:right};},generate:function generate(processChunk,node){processChunk(node.left);processChunk('/');processChunk(node.right);}};var Raw={name:'Raw',structure:{value:String},parse:function parse(startToken,endTokenType1,endTokenType2,includeTokenType2,excludeWhiteSpace){var startOffset=this.scanner.getTokenStart(startToken);var endOffset;this.scanner.skip(this.scanner.getRawLength(startToken,endTokenType1,endTokenType2,includeTokenType2));if(excludeWhiteSpace&&this.scanner.tokenStart>startOffset){endOffset=this.scanner.getOffsetExcludeWS();}else{endOffset=this.scanner.tokenStart;}return{type:'Raw',loc:this.getLocation(startOffset,endOffset),value:this.scanner.source.substring(startOffset,endOffset)};},generate:function generate(processChunk,node){processChunk(node.value);}};var TYPE$w=tokenizer.TYPE;var LEFTCURLYBRACKET$5=TYPE$w.LeftCurlyBracket;function consumeRaw$4(startToken){return this.Raw(startToken,LEFTCURLYBRACKET$5,0,false,true);}var Rule={name:'Rule',structure:{selector:['SelectorList','Raw'],block:['Block']},parse:function parse(){var startToken=this.scanner.currentToken;var startOffset=this.scanner.tokenStart;var selector=this.parseSelector?this.tolerantParse(this.SelectorList,consumeRaw$4):consumeRaw$4.call(this,startToken);var block=this.Block(this.Declaration);return{type:'Rule',loc:this.getLocation(startOffset,this.scanner.tokenStart),selector:selector,block:block};},generate:function generate(processChunk,node){this.generate(processChunk,node.selector);this.generate(processChunk,node.block);},walkContext:'rule'};var Selector={name:'Selector',structure:{children:[['TypeSelector','IdSelector','ClassSelector','AttributeSelector','PseudoClassSelector','PseudoElementSelector','Combinator','WhiteSpace']]},parse:function parse(){var children=this.readSequence(this.scope.Selector);// nothing were consumed\nif(children.isEmpty()){this.scanner.error('Selector is expected');}return{type:'Selector',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);}};var TYPE$x=tokenizer.TYPE;var COMMA$3=TYPE$x.Comma;var LEFTCURLYBRACKET$6=TYPE$x.LeftCurlyBracket;var SelectorList={name:'SelectorList',structure:{children:[['Selector','Raw']]},parse:function parse(){var children=new list();while(!this.scanner.eof){children.appendData(this.parseSelector?this.Selector():this.Raw(this.scanner.currentToken,COMMA$3,LEFTCURLYBRACKET$6,false,false));if(this.scanner.tokenType===COMMA$3){this.scanner.next();continue;}break;}return{type:'SelectorList',loc:this.getLocationFromList(children),children:children};},generate:function generate(processChunk,node){this.eachComma(processChunk,node);},walkContext:'selector'};var STRING$5=tokenizer.TYPE.String;var _String={name:'String',structure:{value:String},parse:function parse(){return{type:'String',loc:this.getLocation(this.scanner.tokenStart,this.scanner.tokenEnd),value:this.scanner.consume(STRING$5)};},generate:function generate(processChunk,node){processChunk(node.value);}};var TYPE$y=tokenizer.TYPE;var WHITESPACE$7=TYPE$y.WhiteSpace;var COMMENT$7=TYPE$y.Comment;var EXCLAMATIONMARK$3=TYPE$y.ExclamationMark;var ATRULE$4=TYPE$y.Atrule;var CDO$3=TYPE$y.CDO;var CDC$3=TYPE$y.CDC;function consumeRaw$5(startToken){return this.Raw(startToken,0,0,false,false);}var StyleSheet={name:'StyleSheet',structure:{children:[['Comment','Atrule','Rule','Raw']]},parse:function parse(){var start=this.scanner.tokenStart;var children=new list();var child;while(!this.scanner.eof){switch(this.scanner.tokenType){case WHITESPACE$7:this.scanner.next();continue;case COMMENT$7:// ignore comments except exclamation comments (i.e. /*! .. */) on top level\nif(this.scanner.source.charCodeAt(this.scanner.tokenStart+2)!==EXCLAMATIONMARK$3){this.scanner.next();continue;}child=this.Comment();break;case CDO$3:// <!--\nchild=this.CDO();break;case CDC$3:// -->\nchild=this.CDC();break;// CSS Syntax Module Level 3\n// §2.2 Error handling\n// At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\ncase ATRULE$4:child=this.Atrule();break;// Anything else starts a qualified rule ...\ndefault:child=this.tolerantParse(this.Rule,consumeRaw$5);}children.appendData(child);}return{type:'StyleSheet',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);},walkContext:'stylesheet'};var TYPE$z=tokenizer.TYPE;var IDENTIFIER$i=TYPE$z.Identifier;var ASTERISK$5=TYPE$z.Asterisk;var VERTICALLINE$2=TYPE$z.VerticalLine;function eatIdentifierOrAsterisk(){if(this.scanner.tokenType!==IDENTIFIER$i&&this.scanner.tokenType!==ASTERISK$5){this.scanner.error('Identifier or asterisk is expected');}this.scanner.next();}// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nvar TypeSelector={name:'TypeSelector',structure:{name:String},parse:function parse(){var start=this.scanner.tokenStart;if(this.scanner.tokenType===VERTICALLINE$2){this.scanner.next();eatIdentifierOrAsterisk.call(this);}else{eatIdentifierOrAsterisk.call(this);if(this.scanner.tokenType===VERTICALLINE$2){this.scanner.next();eatIdentifierOrAsterisk.call(this);}}return{type:'TypeSelector',loc:this.getLocation(start,this.scanner.tokenStart),name:this.scanner.substrToCursor(start)};},generate:function generate(processChunk,node){processChunk(node.name);}};var isHex$2=tokenizer.isHex;var TYPE$A=tokenizer.TYPE;var IDENTIFIER$j=TYPE$A.Identifier;var NUMBER$b=TYPE$A.Number;var PLUSSIGN$7=TYPE$A.PlusSign;var HYPHENMINUS$7=TYPE$A.HyphenMinus;var FULLSTOP$5=TYPE$A.FullStop;var QUESTIONMARK=TYPE$A.QuestionMark;function scanUnicodeNumber(scanner){for(var pos=scanner.tokenStart+1;pos<scanner.tokenEnd;pos++){var code=scanner.source.charCodeAt(pos);// break on fullstop or hyperminus/plussign after exponent\nif(code===FULLSTOP$5||code===PLUSSIGN$7){// break token, exclude symbol\nscanner.tokenStart=pos;return false;}}return true;}// https://drafts.csswg.org/css-syntax-3/#urange\nfunction scanUnicodeRange(scanner){var hexStart=scanner.tokenStart+1;// skip +\nvar hexLength=0;scan:{if(scanner.tokenType===NUMBER$b){if(scanner.source.charCodeAt(scanner.tokenStart)!==FULLSTOP$5&&scanUnicodeNumber(scanner)){scanner.next();}else if(scanner.source.charCodeAt(scanner.tokenStart)!==HYPHENMINUS$7){break scan;}}else{scanner.next();// PLUSSIGN\n}if(scanner.tokenType===HYPHENMINUS$7){scanner.next();}if(scanner.tokenType===NUMBER$b){scanner.next();}if(scanner.tokenType===IDENTIFIER$j){scanner.next();}if(scanner.tokenStart===hexStart){scanner.error('Unexpected input',hexStart);}}// validate for U+x{1,6} or U+x{1,6}-x{1,6}\n// where x is [0-9a-fA-F]\nfor(var i=hexStart,wasHyphenMinus=false;i<scanner.tokenStart;i++){var code=scanner.source.charCodeAt(i);if(isHex$2(code)===false&&(code!==HYPHENMINUS$7||wasHyphenMinus)){scanner.error('Unexpected input',i);}if(code===HYPHENMINUS$7){// hex sequence shouldn't be an empty\nif(hexLength===0){scanner.error('Unexpected input',i);}wasHyphenMinus=true;hexLength=0;}else{hexLength++;// too long hex sequence\nif(hexLength>6){scanner.error('Too long hex sequence',i);}}}// check we have a non-zero sequence\nif(hexLength===0){scanner.error('Unexpected input',i-1);}// U+abc???\nif(!wasHyphenMinus){// consume as many U+003F QUESTION MARK (?) code points as possible\nfor(;hexLength<6&&!scanner.eof;scanner.next()){if(scanner.tokenType!==QUESTIONMARK){break;}hexLength++;}}}var UnicodeRange={name:'UnicodeRange',structure:{value:String},parse:function parse(){var start=this.scanner.tokenStart;this.scanner.next();// U or u\nscanUnicodeRange(this.scanner);return{type:'UnicodeRange',loc:this.getLocation(start,this.scanner.tokenStart),value:this.scanner.substrToCursor(start)};},generate:function generate(processChunk,node){processChunk(node.value);}};var TYPE$B=tokenizer.TYPE;var STRING$6=TYPE$B.String;var URL$4=TYPE$B.Url;var RAW$2=TYPE$B.Raw;var RIGHTPARENTHESIS$7=TYPE$B.RightParenthesis;// url '(' S* (string | raw) S* ')'\nvar Url={name:'Url',structure:{value:['String','Raw']},parse:function parse(){var start=this.scanner.tokenStart;var value;this.scanner.eat(URL$4);this.scanner.skipSC();switch(this.scanner.tokenType){case STRING$6:value=this.String();break;case RAW$2:value=this.Raw(this.scanner.currentToken,0,RAW$2,true,false);break;default:this.scanner.error('String or Raw is expected');}this.scanner.skipSC();this.scanner.eat(RIGHTPARENTHESIS$7);return{type:'Url',loc:this.getLocation(start,this.scanner.tokenStart),value:value};},generate:function generate(processChunk,node){processChunk('url');processChunk('(');this.generate(processChunk,node.value);processChunk(')');}};var endsWith$1=tokenizer.endsWith;var TYPE$C=tokenizer.TYPE;var WHITESPACE$8=TYPE$C.WhiteSpace;var COMMENT$8=TYPE$C.Comment;var FUNCTION$6=TYPE$C.Function;var COLON$7=TYPE$C.Colon;var SEMICOLON$6=TYPE$C.Semicolon;var EXCLAMATIONMARK$4=TYPE$C.ExclamationMark;// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'\nfunction checkProgid(scanner){var offset=0;for(var type;type=scanner.lookupType(offset);offset++){if(type!==WHITESPACE$8&&type!==COMMENT$8){break;}}if(scanner.lookupValue(offset,'alpha(')||scanner.lookupValue(offset,'chroma(')||scanner.lookupValue(offset,'dropshadow(')){if(scanner.lookupType(offset)!==FUNCTION$6){return false;}}else{if(scanner.lookupValue(offset,'progid')===false||scanner.lookupType(offset+1)!==COLON$7){return false;}}return true;}var Value={name:'Value',structure:{children:[[]]},parse:function parse(property){// special parser for filter property since it can contains non-standart syntax for old IE\nif(property!==null&&endsWith$1(property,'filter')&&checkProgid(this.scanner)){this.scanner.skipSC();return this.Raw(this.scanner.currentToken,EXCLAMATIONMARK$4,SEMICOLON$6,false,false);}var start=this.scanner.tokenStart;var children=this.readSequence(this.scope.Value);return{type:'Value',loc:this.getLocation(start,this.scanner.tokenStart),children:children};},generate:function generate(processChunk,node){this.each(processChunk,node);}};var WHITESPACE$9=tokenizer.TYPE.WhiteSpace;var SPACE$2=Object.freeze({type:'WhiteSpace',loc:null,value:' '});var WhiteSpace={name:'WhiteSpace',structure:{value:String},parse:function parse(){this.scanner.eat(WHITESPACE$9);return SPACE$2;// return {\n//     type: 'WhiteSpace',\n//     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n//     value: this.scanner.consume(WHITESPACE)\n// };\n},generate:function generate(processChunk,node){processChunk(node.value);}};var node={AnPlusB:AnPlusB,Atrule:Atrule,AtruleExpression:AtruleExpression,AttributeSelector:AttributeSelector,Block:Block,Brackets:Brackets,CDC:CDC_1,CDO:CDO_1,ClassSelector:ClassSelector,Combinator:Combinator,Comment:Comment,Declaration:Declaration,DeclarationList:DeclarationList,Dimension:Dimension,Function:_Function,HexColor:HexColor,Identifier:Identifier,IdSelector:IdSelector,MediaFeature:MediaFeature,MediaQuery:MediaQuery,MediaQueryList:MediaQueryList,Nth:Nth,Number:_Number,Operator:Operator,Parentheses:Parentheses,Percentage:Percentage,PseudoClassSelector:PseudoClassSelector,PseudoElementSelector:PseudoElementSelector,Ratio:Ratio,Raw:Raw,Rule:Rule,Selector:Selector,SelectorList:SelectorList,String:_String,StyleSheet:StyleSheet,TypeSelector:TypeSelector,UnicodeRange:UnicodeRange,Url:Url,Value:Value,WhiteSpace:WhiteSpace};var parser={parseContext:{default:'StyleSheet',stylesheet:'StyleSheet',atrule:'Atrule',atruleExpression:function atruleExpression(options){return this.AtruleExpression(options.atrule?String(options.atrule):null);},mediaQueryList:'MediaQueryList',mediaQuery:'MediaQuery',rule:'Rule',selectorList:'SelectorList',selector:'Selector',block:function block(){return this.Block(this.Declaration);},declarationList:'DeclarationList',declaration:'Declaration',value:function value(options){return this.Value(options.property?String(options.property):null);}},scope:scope,atrule:atrule,pseudo:pseudo,node:node};var parser$1=create(parser);function read_style(parser,start,attributes){var content_start=parser.index;var styles=parser.read_until(/<\\/style>/);var content_end=parser.index;var ast;try{ast=parser$1(styles,{positions:true,offset:content_start});}catch(err){if(err.name==='CssSyntaxError'){parser.error({code:\"css-syntax-error\",message:err.message},err.offset);}else{throw err;}}ast=JSON.parse(JSON.stringify(ast));// tidy up AST\nwalk(ast,{enter:function enter(node){// replace `ref:a` nodes\nif(node.type==='Selector'){for(var _i18=0;_i18<node.children.length;_i18+=1){var a=node.children[_i18];var _b2=node.children[_i18+1];if(is_ref_selector(a,_b2)){parser.error({code:\"invalid-ref-selector\",message:'ref selectors are no longer supported'},a.loc.start.offset);}}}if(node.type==='Declaration'&&node.value.type==='Value'&&node.value.children.length===0){parser.error({code:\"invalid-declaration\",message:\"Declaration cannot be empty\"},node.start);}if(node.type==='PseudoClassSelector'&&node.name==='global'&&node.children===null){parser.error({code:\"css-syntax-error\",message:\":global() must contain a selector\"},node.loc.start.offset);}if(node.loc){node.start=node.loc.start.offset;node.end=node.loc.end.offset;delete node.loc;}}});parser.eat('</style>',true);var end=parser.index;return{type:'Style',start:start,end:end,attributes:attributes,children:ast.children,content:{start:content_start,end:content_end,styles:styles}};}function is_ref_selector(a,b){if(!b)return false;return a.type==='TypeSelector'&&a.name==='ref'&&b.type==='PseudoClassSelector';}// https://dev.w3.org/html5/html-author/charref\nvar entities={CounterClockwiseContourIntegral:8755,ClockwiseContourIntegral:8754,DoubleLongLeftRightArrow:10234,DiacriticalDoubleAcute:733,NotSquareSupersetEqual:8931,CloseCurlyDoubleQuote:8221,DoubleContourIntegral:8751,FilledVerySmallSquare:9642,NegativeVeryThinSpace:8203,NotPrecedesSlantEqual:8928,NotRightTriangleEqual:8941,NotSucceedsSlantEqual:8929,CapitalDifferentialD:8517,DoubleLeftRightArrow:8660,DoubleLongRightArrow:10233,EmptyVerySmallSquare:9643,NestedGreaterGreater:8811,NotDoubleVerticalBar:8742,NotLeftTriangleEqual:8940,NotSquareSubsetEqual:8930,OpenCurlyDoubleQuote:8220,ReverseUpEquilibrium:10607,DoubleLongLeftArrow:10232,DownLeftRightVector:10576,LeftArrowRightArrow:8646,NegativeMediumSpace:8203,RightArrowLeftArrow:8644,SquareSupersetEqual:8850,leftrightsquigarrow:8621,DownRightTeeVector:10591,DownRightVectorBar:10583,LongLeftRightArrow:10231,Longleftrightarrow:10234,NegativeThickSpace:8203,PrecedesSlantEqual:8828,ReverseEquilibrium:8651,RightDoubleBracket:10215,RightDownTeeVector:10589,RightDownVectorBar:10581,RightTriangleEqual:8885,SquareIntersection:8851,SucceedsSlantEqual:8829,blacktriangleright:9656,longleftrightarrow:10231,DoubleUpDownArrow:8661,DoubleVerticalBar:8741,DownLeftTeeVector:10590,DownLeftVectorBar:10582,FilledSmallSquare:9724,GreaterSlantEqual:10878,LeftDoubleBracket:10214,LeftDownTeeVector:10593,LeftDownVectorBar:10585,LeftTriangleEqual:8884,NegativeThinSpace:8203,NotReverseElement:8716,NotTildeFullEqual:8775,RightAngleBracket:10217,RightUpDownVector:10575,SquareSubsetEqual:8849,VerticalSeparator:10072,blacktriangledown:9662,blacktriangleleft:9666,leftrightharpoons:8651,rightleftharpoons:8652,twoheadrightarrow:8608,DiacriticalAcute:180,DiacriticalGrave:96,DiacriticalTilde:732,DoubleRightArrow:8658,DownArrowUpArrow:8693,EmptySmallSquare:9723,GreaterEqualLess:8923,GreaterFullEqual:8807,LeftAngleBracket:10216,LeftUpDownVector:10577,LessEqualGreater:8922,NonBreakingSpace:160,NotRightTriangle:8939,NotSupersetEqual:8841,RightTriangleBar:10704,RightUpTeeVector:10588,RightUpVectorBar:10580,UnderParenthesis:9181,UpArrowDownArrow:8645,circlearrowright:8635,downharpoonright:8642,ntrianglerighteq:8941,rightharpoondown:8641,rightrightarrows:8649,twoheadleftarrow:8606,vartriangleright:8883,CloseCurlyQuote:8217,ContourIntegral:8750,DoubleDownArrow:8659,DoubleLeftArrow:8656,DownRightVector:8641,LeftRightVector:10574,LeftTriangleBar:10703,LeftUpTeeVector:10592,LeftUpVectorBar:10584,LowerRightArrow:8600,NotGreaterEqual:8817,NotGreaterTilde:8821,NotLeftTriangle:8938,OverParenthesis:9180,RightDownVector:8642,ShortRightArrow:8594,UpperRightArrow:8599,bigtriangledown:9661,circlearrowleft:8634,curvearrowright:8631,downharpoonleft:8643,leftharpoondown:8637,leftrightarrows:8646,nLeftrightarrow:8654,nleftrightarrow:8622,ntrianglelefteq:8940,rightleftarrows:8644,rightsquigarrow:8605,rightthreetimes:8908,straightepsilon:1013,trianglerighteq:8885,vartriangleleft:8882,DiacriticalDot:729,DoubleRightTee:8872,DownLeftVector:8637,GreaterGreater:10914,HorizontalLine:9472,InvisibleComma:8291,InvisibleTimes:8290,LeftDownVector:8643,LeftRightArrow:8596,Leftrightarrow:8660,LessSlantEqual:10877,LongRightArrow:10230,Longrightarrow:10233,LowerLeftArrow:8601,NestedLessLess:8810,NotGreaterLess:8825,NotLessGreater:8824,NotSubsetEqual:8840,NotVerticalBar:8740,OpenCurlyQuote:8216,ReverseElement:8715,RightTeeVector:10587,RightVectorBar:10579,ShortDownArrow:8595,ShortLeftArrow:8592,SquareSuperset:8848,TildeFullEqual:8773,UpperLeftArrow:8598,ZeroWidthSpace:8203,curvearrowleft:8630,doublebarwedge:8966,downdownarrows:8650,hookrightarrow:8618,leftleftarrows:8647,leftrightarrow:8596,leftthreetimes:8907,longrightarrow:10230,looparrowright:8620,nshortparallel:8742,ntriangleright:8939,rightarrowtail:8611,rightharpoonup:8640,trianglelefteq:8884,upharpoonright:8638,ApplyFunction:8289,DifferentialD:8518,DoubleLeftTee:10980,DoubleUpArrow:8657,LeftTeeVector:10586,LeftVectorBar:10578,LessFullEqual:8806,LongLeftArrow:10229,Longleftarrow:10232,NotTildeEqual:8772,NotTildeTilde:8777,Poincareplane:8460,PrecedesEqual:10927,PrecedesTilde:8830,RightArrowBar:8677,RightTeeArrow:8614,RightTriangle:8883,RightUpVector:8638,SucceedsEqual:10928,SucceedsTilde:8831,SupersetEqual:8839,UpEquilibrium:10606,VerticalTilde:8768,VeryThinSpace:8202,bigtriangleup:9651,blacktriangle:9652,divideontimes:8903,fallingdotseq:8786,hookleftarrow:8617,leftarrowtail:8610,leftharpoonup:8636,longleftarrow:10229,looparrowleft:8619,measuredangle:8737,ntriangleleft:8938,shortparallel:8741,smallsetminus:8726,triangleright:9657,upharpoonleft:8639,DownArrowBar:10515,DownTeeArrow:8615,ExponentialE:8519,GreaterEqual:8805,GreaterTilde:8819,HilbertSpace:8459,HumpDownHump:8782,Intersection:8898,LeftArrowBar:8676,LeftTeeArrow:8612,LeftTriangle:8882,LeftUpVector:8639,NotCongruent:8802,NotLessEqual:8816,NotLessTilde:8820,Proportional:8733,RightCeiling:8969,RoundImplies:10608,ShortUpArrow:8593,SquareSubset:8847,UnderBracket:9141,VerticalLine:124,blacklozenge:10731,exponentiale:8519,risingdotseq:8787,triangledown:9663,triangleleft:9667,CircleMinus:8854,CircleTimes:8855,Equilibrium:8652,GreaterLess:8823,LeftCeiling:8968,LessGreater:8822,MediumSpace:8287,NotPrecedes:8832,NotSucceeds:8833,OverBracket:9140,RightVector:8640,Rrightarrow:8667,RuleDelayed:10740,SmallCircle:8728,SquareUnion:8852,SubsetEqual:8838,UpDownArrow:8597,Updownarrow:8661,VerticalBar:8739,backepsilon:1014,blacksquare:9642,circledcirc:8858,circleddash:8861,curlyeqprec:8926,curlyeqsucc:8927,diamondsuit:9830,eqslantless:10901,expectation:8496,nRightarrow:8655,nrightarrow:8603,preccurlyeq:8828,precnapprox:10937,quaternions:8461,straightphi:981,succcurlyeq:8829,succnapprox:10938,thickapprox:8776,updownarrow:8597,Bernoullis:8492,CirclePlus:8853,EqualTilde:8770,Fouriertrf:8497,ImaginaryI:8520,Laplacetrf:8466,LeftVector:8636,Lleftarrow:8666,NotElement:8713,NotGreater:8815,Proportion:8759,RightArrow:8594,RightFloor:8971,Rightarrow:8658,TildeEqual:8771,TildeTilde:8776,UnderBrace:9183,UpArrowBar:10514,UpTeeArrow:8613,circledast:8859,complement:8705,curlywedge:8911,eqslantgtr:10902,gtreqqless:10892,lessapprox:10885,lesseqqgtr:10891,lmoustache:9136,longmapsto:10236,mapstodown:8615,mapstoleft:8612,nLeftarrow:8653,nleftarrow:8602,precapprox:10935,rightarrow:8594,rmoustache:9137,sqsubseteq:8849,sqsupseteq:8850,subsetneqq:10955,succapprox:10936,supsetneqq:10956,upuparrows:8648,varepsilon:949,varnothing:8709,Backslash:8726,CenterDot:183,CircleDot:8857,Congruent:8801,Coproduct:8720,DoubleDot:168,DownArrow:8595,DownBreve:785,Downarrow:8659,HumpEqual:8783,LeftArrow:8592,LeftFloor:8970,Leftarrow:8656,LessTilde:8818,Mellintrf:8499,MinusPlus:8723,NotCupCap:8813,NotExists:8708,OverBrace:9182,PlusMinus:177,Therefore:8756,ThinSpace:8201,TripleDot:8411,UnionPlus:8846,backprime:8245,backsimeq:8909,bigotimes:10754,centerdot:183,checkmark:10003,complexes:8450,dotsquare:8865,downarrow:8595,gtrapprox:10886,gtreqless:8923,heartsuit:9829,leftarrow:8592,lesseqgtr:8922,nparallel:8742,nshortmid:8740,nsubseteq:8840,nsupseteq:8841,pitchfork:8916,rationals:8474,spadesuit:9824,subseteqq:10949,subsetneq:8842,supseteqq:10950,supsetneq:8843,therefore:8756,triangleq:8796,varpropto:8733,DDotrahd:10513,DotEqual:8784,Integral:8747,LessLess:10913,NotEqual:8800,NotTilde:8769,PartialD:8706,Precedes:8826,RightTee:8866,Succeeds:8827,SuchThat:8715,Superset:8835,Uarrocir:10569,UnderBar:818,andslope:10840,angmsdaa:10664,angmsdab:10665,angmsdac:10666,angmsdad:10667,angmsdae:10668,angmsdaf:10669,angmsdag:10670,angmsdah:10671,angrtvbd:10653,approxeq:8778,awconint:8755,backcong:8780,barwedge:8965,bbrktbrk:9142,bigoplus:10753,bigsqcup:10758,biguplus:10756,bigwedge:8896,boxminus:8863,boxtimes:8864,capbrcup:10825,circledR:174,circledS:9416,cirfnint:10768,clubsuit:9827,cupbrcap:10824,curlyvee:8910,cwconint:8754,doteqdot:8785,dotminus:8760,drbkarow:10512,dzigrarr:10239,elinters:9191,emptyset:8709,eqvparsl:10725,fpartint:10765,geqslant:10878,gesdotol:10884,gnapprox:10890,hksearow:10533,hkswarow:10534,imagline:8464,imagpart:8465,infintie:10717,integers:8484,intercal:8890,intlarhk:10775,laemptyv:10676,ldrushar:10571,leqslant:10877,lesdotor:10883,llcorner:8990,lnapprox:10889,lrcorner:8991,lurdshar:10570,mapstoup:8613,multimap:8888,naturals:8469,otimesas:10806,parallel:8741,plusacir:10787,pointint:10773,precneqq:10933,precnsim:8936,profalar:9006,profline:8978,profsurf:8979,raemptyv:10675,realpart:8476,rppolint:10770,rtriltri:10702,scpolint:10771,setminus:8726,shortmid:8739,smeparsl:10724,sqsubset:8847,sqsupset:8848,subseteq:8838,succneqq:10934,succnsim:8937,supseteq:8839,thetasym:977,thicksim:8764,timesbar:10801,triangle:9653,triminus:10810,trpezium:9186,ulcorner:8988,urcorner:8989,varkappa:1008,varsigma:962,vartheta:977,Because:8757,Cayleys:8493,Cconint:8752,Cedilla:184,Diamond:8900,DownTee:8868,Element:8712,Epsilon:917,Implies:8658,LeftTee:8867,NewLine:10,NoBreak:8288,NotLess:8814,Omicron:927,OverBar:175,Product:8719,UpArrow:8593,Uparrow:8657,Upsilon:933,alefsym:8501,angrtvb:8894,angzarr:9084,asympeq:8781,backsim:8765,because:8757,bemptyv:10672,between:8812,bigcirc:9711,bigodot:10752,bigstar:9733,boxplus:8862,ccupssm:10832,cemptyv:10674,cirscir:10690,coloneq:8788,congdot:10861,cudarrl:10552,cudarrr:10549,cularrp:10557,curarrm:10556,dbkarow:10511,ddagger:8225,ddotseq:10871,demptyv:10673,diamond:8900,digamma:989,dotplus:8724,dwangle:10662,epsilon:949,eqcolon:8789,equivDD:10872,gesdoto:10882,gtquest:10876,gtrless:8823,harrcir:10568,intprod:10812,isindot:8949,larrbfs:10527,larrsim:10611,lbrksld:10639,lbrkslu:10637,ldrdhar:10599,lesdoto:10881,lessdot:8918,lessgtr:8822,lesssim:8818,lotimes:10804,lozenge:9674,ltquest:10875,luruhar:10598,maltese:10016,minusdu:10794,napprox:8777,natural:9838,nearrow:8599,nexists:8708,notinva:8713,notinvb:8951,notinvc:8950,notniva:8716,notnivb:8958,notnivc:8957,npolint:10772,nsqsube:8930,nsqsupe:8931,nvinfin:10718,nwarrow:8598,olcross:10683,omicron:959,orderof:8500,orslope:10839,pertenk:8241,planckh:8462,pluscir:10786,plussim:10790,plustwo:10791,precsim:8830,quatint:10774,questeq:8799,rarrbfs:10528,rarrsim:10612,rbrksld:10638,rbrkslu:10640,rdldhar:10601,realine:8475,rotimes:10805,ruluhar:10600,searrow:8600,simplus:10788,simrarr:10610,subedot:10947,submult:10945,subplus:10943,subrarr:10617,succsim:8831,supdsub:10968,supedot:10948,suphsub:10967,suplarr:10619,supmult:10946,supplus:10944,swarrow:8601,topfork:10970,triplus:10809,tritime:10811,uparrow:8593,upsilon:965,uwangle:10663,vzigzag:10650,zigrarr:8669,Aacute:193,Abreve:258,Agrave:192,Assign:8788,Atilde:195,Barwed:8966,Bumpeq:8782,Cacute:262,Ccaron:268,Ccedil:199,Colone:10868,Conint:8751,CupCap:8781,Dagger:8225,Dcaron:270,DotDot:8412,Dstrok:272,Eacute:201,Ecaron:282,Egrave:200,Exists:8707,ForAll:8704,Gammad:988,Gbreve:286,Gcedil:290,HARDcy:1066,Hstrok:294,Iacute:205,Igrave:204,Itilde:296,Jsercy:1032,Kcedil:310,Lacute:313,Lambda:923,Lcaron:317,Lcedil:315,Lmidot:319,Lstrok:321,Nacute:323,Ncaron:327,Ncedil:325,Ntilde:209,Oacute:211,Odblac:336,Ograve:210,Oslash:216,Otilde:213,Otimes:10807,Racute:340,Rarrtl:10518,Rcaron:344,Rcedil:342,SHCHcy:1065,SOFTcy:1068,Sacute:346,Scaron:352,Scedil:350,Square:9633,Subset:8912,Supset:8913,Tcaron:356,Tcedil:354,Tstrok:358,Uacute:218,Ubreve:364,Udblac:368,Ugrave:217,Utilde:360,Vdashl:10982,Verbar:8214,Vvdash:8874,Yacute:221,Zacute:377,Zcaron:381,aacute:225,abreve:259,agrave:224,andand:10837,angmsd:8737,angsph:8738,apacir:10863,approx:8776,atilde:227,barvee:8893,barwed:8965,becaus:8757,bernou:8492,bigcap:8898,bigcup:8899,bigvee:8897,bkarow:10509,bottom:8869,bowtie:8904,boxbox:10697,bprime:8245,brvbar:166,bullet:8226,bumpeq:8783,cacute:263,capand:10820,capcap:10827,capcup:10823,capdot:10816,ccaron:269,ccedil:231,circeq:8791,cirmid:10991,colone:8788,commat:64,compfn:8728,conint:8750,coprod:8720,copysr:8471,cularr:8630,cupcap:10822,cupcup:10826,cupdot:8845,curarr:8631,curren:164,cylcty:9005,dagger:8224,daleth:8504,dcaron:271,dfisht:10623,divide:247,divonx:8903,dlcorn:8990,dlcrop:8973,dollar:36,drcorn:8991,drcrop:8972,dstrok:273,eacute:233,easter:10862,ecaron:283,ecolon:8789,egrave:232,egsdot:10904,elsdot:10903,emptyv:8709,emsp13:8196,emsp14:8197,eparsl:10723,eqcirc:8790,equals:61,equest:8799,female:9792,ffilig:64259,ffllig:64260,forall:8704,frac12:189,frac13:8531,frac14:188,frac15:8533,frac16:8537,frac18:8539,frac23:8532,frac25:8534,frac34:190,frac35:8535,frac38:8540,frac45:8536,frac56:8538,frac58:8541,frac78:8542,gacute:501,gammad:989,gbreve:287,gesdot:10880,gesles:10900,gtlPar:10645,gtrarr:10616,gtrdot:8919,gtrsim:8819,hairsp:8202,hamilt:8459,hardcy:1098,hearts:9829,hellip:8230,hercon:8889,homtht:8763,horbar:8213,hslash:8463,hstrok:295,hybull:8259,hyphen:8208,iacute:237,igrave:236,iiiint:10764,iinfin:10716,incare:8453,inodot:305,intcal:8890,iquest:191,isinsv:8947,itilde:297,jsercy:1112,kappav:1008,kcedil:311,kgreen:312,lAtail:10523,lacute:314,lagran:8466,lambda:955,langle:10216,larrfs:10525,larrhk:8617,larrlp:8619,larrpl:10553,larrtl:8610,latail:10521,lbrace:123,lbrack:91,lcaron:318,lcedil:316,ldquor:8222,lesdot:10879,lesges:10899,lfisht:10620,lfloor:8970,lharul:10602,llhard:10603,lmidot:320,lmoust:9136,loplus:10797,lowast:8727,lowbar:95,lparlt:10643,lrhard:10605,lsaquo:8249,lsquor:8218,lstrok:322,lthree:8907,ltimes:8905,ltlarr:10614,ltrPar:10646,mapsto:8614,marker:9646,mcomma:10793,midast:42,midcir:10992,middot:183,minusb:8863,minusd:8760,mnplus:8723,models:8871,mstpos:8766,nVDash:8879,nVdash:8878,nacute:324,ncaron:328,ncedil:326,nearhk:10532,nequiv:8802,nesear:10536,nexist:8708,nltrie:8940,nprcue:8928,nrtrie:8941,nsccue:8929,nsimeq:8772,ntilde:241,numero:8470,nvDash:8877,nvHarr:10500,nvdash:8876,nvlArr:10498,nvrArr:10499,nwarhk:10531,nwnear:10535,oacute:243,odblac:337,odsold:10684,ograve:242,ominus:8854,origof:8886,oslash:248,otilde:245,otimes:8855,parsim:10995,percnt:37,period:46,permil:8240,phmmat:8499,planck:8463,plankv:8463,plusdo:8724,plusdu:10789,plusmn:177,preceq:10927,primes:8473,prnsim:8936,propto:8733,prurel:8880,puncsp:8200,qprime:8279,rAtail:10524,racute:341,rangle:10217,rarrap:10613,rarrfs:10526,rarrhk:8618,rarrlp:8620,rarrpl:10565,rarrtl:8611,ratail:10522,rbrace:125,rbrack:93,rcaron:345,rcedil:343,rdquor:8221,rfisht:10621,rfloor:8971,rharul:10604,rmoust:9137,roplus:10798,rpargt:10644,rsaquo:8250,rsquor:8217,rthree:8908,rtimes:8906,sacute:347,scaron:353,scedil:351,scnsim:8937,searhk:10533,seswar:10537,sfrown:8994,shchcy:1097,sigmaf:962,sigmav:962,simdot:10858,smashp:10803,softcy:1100,solbar:9023,spades:9824,sqsube:8849,sqsupe:8850,square:9633,squarf:9642,ssetmn:8726,ssmile:8995,sstarf:8902,subdot:10941,subset:8834,subsim:10951,subsub:10965,subsup:10963,succeq:10928,supdot:10942,supset:8835,supsim:10952,supsub:10964,supsup:10966,swarhk:10534,swnwar:10538,target:8982,tcaron:357,tcedil:355,telrec:8981,there4:8756,thetav:977,thinsp:8201,thksim:8764,timesb:8864,timesd:10800,topbot:9014,topcir:10993,tprime:8244,tridot:9708,tstrok:359,uacute:250,ubreve:365,udblac:369,ufisht:10622,ugrave:249,ulcorn:8988,ulcrop:8975,urcorn:8989,urcrop:8974,utilde:361,vangrt:10652,varphi:966,varrho:1009,veebar:8891,vellip:8942,verbar:124,wedbar:10847,wedgeq:8793,weierp:8472,wreath:8768,xoplus:10753,xotime:10754,xsqcup:10758,xuplus:10756,xwedge:8896,yacute:253,zacute:378,zcaron:382,zeetrf:8488,AElig:198,Acirc:194,Alpha:913,Amacr:256,Aogon:260,Aring:197,Breve:728,Ccirc:264,Colon:8759,Cross:10799,Dashv:10980,Delta:916,Ecirc:202,Emacr:274,Eogon:280,Equal:10869,Gamma:915,Gcirc:284,Hacek:711,Hcirc:292,IJlig:306,Icirc:206,Imacr:298,Iogon:302,Iukcy:1030,Jcirc:308,Jukcy:1028,Kappa:922,OElig:338,Ocirc:212,Omacr:332,Omega:937,Prime:8243,RBarr:10512,Scirc:348,Sigma:931,THORN:222,TRADE:8482,TSHcy:1035,Theta:920,Tilde:8764,Ubrcy:1038,Ucirc:219,Umacr:362,Union:8899,Uogon:370,UpTee:8869,Uring:366,VDash:8875,Vdash:8873,Wcirc:372,Wedge:8896,Ycirc:374,acirc:226,acute:180,aelig:230,aleph:8501,alpha:945,amacr:257,amalg:10815,angle:8736,angrt:8735,angst:8491,aogon:261,aring:229,asymp:8776,awint:10769,bcong:8780,bdquo:8222,bepsi:1014,blank:9251,blk12:9618,blk14:9617,blk34:9619,block:9608,boxDL:9559,boxDR:9556,boxDl:9558,boxDr:9555,boxHD:9574,boxHU:9577,boxHd:9572,boxHu:9575,boxUL:9565,boxUR:9562,boxUl:9564,boxUr:9561,boxVH:9580,boxVL:9571,boxVR:9568,boxVh:9579,boxVl:9570,boxVr:9567,boxdL:9557,boxdR:9554,boxdl:9488,boxdr:9484,boxhD:9573,boxhU:9576,boxhd:9516,boxhu:9524,boxuL:9563,boxuR:9560,boxul:9496,boxur:9492,boxvH:9578,boxvL:9569,boxvR:9566,boxvh:9532,boxvl:9508,boxvr:9500,breve:728,bsemi:8271,bsime:8909,bsolb:10693,bumpE:10926,bumpe:8783,caret:8257,caron:711,ccaps:10829,ccirc:265,ccups:10828,cedil:184,check:10003,clubs:9827,colon:58,comma:44,crarr:8629,cross:10007,csube:10961,csupe:10962,ctdot:8943,cuepr:8926,cuesc:8927,cupor:10821,cuvee:8910,cuwed:8911,cwint:8753,dashv:8867,dblac:733,ddarr:8650,delta:948,dharl:8643,dharr:8642,diams:9830,disin:8946,doteq:8784,dtdot:8945,dtrif:9662,duarr:8693,duhar:10607,eDDot:10871,ecirc:234,efDot:8786,emacr:275,empty:8709,eogon:281,eplus:10865,epsiv:949,eqsim:8770,equiv:8801,erDot:8787,erarr:10609,esdot:8784,exist:8707,fflig:64256,filig:64257,fllig:64258,fltns:9649,forkv:10969,frasl:8260,frown:8994,gamma:947,gcirc:285,gescc:10921,gimel:8503,gneqq:8809,gnsim:8935,grave:96,gsime:10894,gsiml:10896,gtcir:10874,gtdot:8919,harrw:8621,hcirc:293,hoarr:8703,icirc:238,iexcl:161,iiint:8749,iiota:8489,ijlig:307,imacr:299,image:8465,imath:305,imped:437,infin:8734,iogon:303,iprod:10812,isinE:8953,isins:8948,isinv:8712,iukcy:1110,jcirc:309,jmath:567,jukcy:1108,kappa:954,lAarr:8666,lBarr:10510,langd:10641,laquo:171,larrb:8676,lbarr:10508,lbbrk:10098,lbrke:10635,lceil:8968,ldquo:8220,lescc:10920,lhard:8637,lharu:8636,lhblk:9604,llarr:8647,lltri:9722,lneqq:8808,lnsim:8934,loang:10220,loarr:8701,lobrk:10214,lopar:10629,lrarr:8646,lrhar:8651,lrtri:8895,lsime:10893,lsimg:10895,lsquo:8216,ltcir:10873,ltdot:8918,ltrie:8884,ltrif:9666,mDDot:8762,mdash:8212,micro:181,minus:8722,mumap:8888,nabla:8711,napos:329,natur:9838,ncong:8775,ndash:8211,neArr:8663,nearr:8599,ngsim:8821,nhArr:8654,nharr:8622,nhpar:10994,nlArr:8653,nlarr:8602,nless:8814,nlsim:8820,nltri:8938,notin:8713,notni:8716,nprec:8832,nrArr:8655,nrarr:8603,nrtri:8939,nsime:8772,nsmid:8740,nspar:8742,nsube:8840,nsucc:8833,nsupe:8841,numsp:8199,nwArr:8662,nwarr:8598,ocirc:244,odash:8861,oelig:339,ofcir:10687,ohbar:10677,olarr:8634,olcir:10686,oline:8254,omacr:333,omega:969,operp:10681,oplus:8853,orarr:8635,order:8500,ovbar:9021,parsl:11005,phone:9742,plusb:8862,pluse:10866,pound:163,prcue:8828,prime:8242,prnap:10937,prsim:8830,quest:63,rAarr:8667,rBarr:10511,radic:8730,rangd:10642,range:10661,raquo:187,rarrb:8677,rarrc:10547,rarrw:8605,ratio:8758,rbarr:10509,rbbrk:10099,rbrke:10636,rceil:8969,rdquo:8221,reals:8477,rhard:8641,rharu:8640,rlarr:8644,rlhar:8652,rnmid:10990,roang:10221,roarr:8702,robrk:10215,ropar:10630,rrarr:8649,rsquo:8217,rtrie:8885,rtrif:9656,sbquo:8218,sccue:8829,scirc:349,scnap:10938,scsim:8831,sdotb:8865,sdote:10854,seArr:8664,searr:8600,setmn:8726,sharp:9839,sigma:963,simeq:8771,simgE:10912,simlE:10911,simne:8774,slarr:8592,smile:8995,sqcap:8851,sqcup:8852,sqsub:8847,sqsup:8848,srarr:8594,starf:9733,strns:175,subnE:10955,subne:8842,supnE:10956,supne:8843,swArr:8665,swarr:8601,szlig:223,theta:952,thkap:8776,thorn:254,tilde:732,times:215,trade:8482,trisb:10701,tshcy:1115,twixt:8812,ubrcy:1118,ucirc:251,udarr:8645,udhar:10606,uharl:8639,uharr:8638,uhblk:9600,ultri:9720,umacr:363,uogon:371,uplus:8846,upsih:978,uring:367,urtri:9721,utdot:8944,utrif:9652,uuarr:8648,vBarv:10985,vDash:8872,varpi:982,vdash:8866,veeeq:8794,vltri:8882,vprop:8733,vrtri:8883,wcirc:373,wedge:8743,xcirc:9711,xdtri:9661,xhArr:10234,xharr:10231,xlArr:10232,xlarr:10229,xodot:10752,xrArr:10233,xrarr:10230,xutri:9651,ycirc:375,Aopf:120120,Ascr:119964,Auml:196,Barv:10983,Beta:914,Bopf:120121,Bscr:8492,CHcy:1063,COPY:169,Cdot:266,Copf:8450,Cscr:119966,DJcy:1026,DScy:1029,DZcy:1039,Darr:8609,Dopf:120123,Dscr:119967,Edot:278,Eopf:120124,Escr:8496,Esim:10867,Euml:203,Fopf:120125,Fscr:8497,GJcy:1027,Gdot:288,Gopf:120126,Gscr:119970,Hopf:8461,Hscr:8459,IEcy:1045,IOcy:1025,Idot:304,Iopf:120128,Iota:921,Iscr:8464,Iuml:207,Jopf:120129,Jscr:119973,KHcy:1061,KJcy:1036,Kopf:120130,Kscr:119974,LJcy:1033,Lang:10218,Larr:8606,Lopf:120131,Lscr:8466,Mopf:120132,Mscr:8499,NJcy:1034,Nopf:8469,Nscr:119977,Oopf:120134,Oscr:119978,Ouml:214,Popf:8473,Pscr:119979,QUOT:34,Qopf:8474,Qscr:119980,Rang:10219,Rarr:8608,Ropf:8477,Rscr:8475,SHcy:1064,Sopf:120138,Sqrt:8730,Sscr:119982,Star:8902,TScy:1062,Topf:120139,Tscr:119983,Uarr:8607,Uopf:120140,Upsi:978,Uscr:119984,Uuml:220,Vbar:10987,Vert:8214,Vopf:120141,Vscr:119985,Wopf:120142,Wscr:119986,Xopf:120143,Xscr:119987,YAcy:1071,YIcy:1031,YUcy:1070,Yopf:120144,Yscr:119988,Yuml:376,ZHcy:1046,Zdot:379,Zeta:918,Zopf:8484,Zscr:119989,andd:10844,andv:10842,ange:10660,aopf:120146,apid:8779,apos:39,ascr:119990,auml:228,bNot:10989,bbrk:9141,beta:946,beth:8502,bnot:8976,bopf:120147,boxH:9552,boxV:9553,boxh:9472,boxv:9474,bscr:119991,bsim:8765,bsol:92,bull:8226,bump:8782,cdot:267,cent:162,chcy:1095,cirE:10691,circ:710,cire:8791,comp:8705,cong:8773,copf:120148,copy:169,cscr:119992,csub:10959,csup:10960,dArr:8659,dHar:10597,darr:8595,dash:8208,diam:8900,djcy:1106,dopf:120149,dscr:119993,dscy:1109,dsol:10742,dtri:9663,dzcy:1119,eDot:8785,ecir:8790,edot:279,emsp:8195,ensp:8194,eopf:120150,epar:8917,epsi:1013,escr:8495,esim:8770,euml:235,euro:8364,excl:33,flat:9837,fnof:402,fopf:120151,fork:8916,fscr:119995,gdot:289,geqq:8807,gjcy:1107,gnap:10890,gneq:10888,gopf:120152,gscr:8458,gsim:8819,gtcc:10919,hArr:8660,half:189,harr:8596,hbar:8463,hopf:120153,hscr:119997,iecy:1077,imof:8887,iocy:1105,iopf:120154,iota:953,iscr:119998,isin:8712,iuml:239,jopf:120155,jscr:119999,khcy:1093,kjcy:1116,kopf:120156,kscr:120000,lArr:8656,lHar:10594,lang:10216,larr:8592,late:10925,lcub:123,ldca:10550,ldsh:8626,leqq:8806,ljcy:1113,lnap:10889,lneq:10887,lopf:120157,lozf:10731,lpar:40,lscr:120001,lsim:8818,lsqb:91,ltcc:10918,ltri:9667,macr:175,male:9794,malt:10016,mlcp:10971,mldr:8230,mopf:120158,mscr:120002,nbsp:160,ncap:10819,ncup:10818,ngeq:8817,ngtr:8815,nisd:8954,njcy:1114,nldr:8229,nleq:8816,nmid:8740,nopf:120159,npar:8742,nscr:120003,nsim:8769,nsub:8836,nsup:8837,ntgl:8825,ntlg:8824,oast:8859,ocir:8858,odiv:10808,odot:8857,ogon:731,oint:8750,omid:10678,oopf:120160,opar:10679,ordf:170,ordm:186,oror:10838,oscr:8500,osol:8856,ouml:246,para:182,part:8706,perp:8869,phiv:966,plus:43,popf:120161,prap:10935,prec:8826,prnE:10933,prod:8719,prop:8733,pscr:120005,qint:10764,qopf:120162,qscr:120006,quot:34,rArr:8658,rHar:10596,race:10714,rang:10217,rarr:8594,rcub:125,rdca:10551,rdsh:8627,real:8476,rect:9645,rhov:1009,ring:730,ropf:120163,rpar:41,rscr:120007,rsqb:93,rtri:9657,scap:10936,scnE:10934,sdot:8901,sect:167,semi:59,sext:10038,shcy:1096,sime:8771,simg:10910,siml:10909,smid:8739,smte:10924,solb:10692,sopf:120164,spar:8741,squf:9642,sscr:120008,star:9734,subE:10949,sube:8838,succ:8827,sung:9834,sup1:185,sup2:178,sup3:179,supE:10950,supe:8839,tbrk:9140,tdot:8411,tint:8749,toea:10536,topf:120165,tosa:10537,trie:8796,tscr:120009,tscy:1094,uArr:8657,uHar:10595,uarr:8593,uopf:120166,upsi:965,uscr:120010,utri:9653,uuml:252,vArr:8661,vBar:10984,varr:8597,vert:124,vopf:120167,vscr:120011,wopf:120168,wscr:120012,xcap:8898,xcup:8899,xmap:10236,xnis:8955,xopf:120169,xscr:120013,xvee:8897,yacy:1103,yicy:1111,yopf:120170,yscr:120014,yucy:1102,yuml:255,zdot:380,zeta:950,zhcy:1078,zopf:120171,zscr:120015,zwnj:8204,AMP:38,Acy:1040,Afr:120068,And:10835,Bcy:1041,Bfr:120069,Cap:8914,Cfr:8493,Chi:935,Cup:8915,Dcy:1044,Del:8711,Dfr:120071,Dot:168,ENG:330,ETH:208,Ecy:1069,Efr:120072,Eta:919,Fcy:1060,Ffr:120073,Gcy:1043,Gfr:120074,Hat:94,Hfr:8460,Icy:1048,Ifr:8465,Int:8748,Jcy:1049,Jfr:120077,Kcy:1050,Kfr:120078,Lcy:1051,Lfr:120079,Lsh:8624,Map:10501,Mcy:1052,Mfr:120080,Ncy:1053,Nfr:120081,Not:10988,Ocy:1054,Ofr:120082,Pcy:1055,Pfr:120083,Phi:934,Psi:936,Qfr:120084,REG:174,Rcy:1056,Rfr:8476,Rho:929,Rsh:8625,Scy:1057,Sfr:120086,Sub:8912,Sum:8721,Sup:8913,Tab:9,Tau:932,Tcy:1058,Tfr:120087,Ucy:1059,Ufr:120088,Vcy:1042,Vee:8897,Vfr:120089,Wfr:120090,Xfr:120091,Ycy:1067,Yfr:120092,Zcy:1047,Zfr:8488,acd:8767,acy:1072,afr:120094,amp:38,and:8743,ang:8736,apE:10864,ape:8778,ast:42,bcy:1073,bfr:120095,bot:8869,cap:8745,cfr:120096,chi:967,cir:9675,cup:8746,dcy:1076,deg:176,dfr:120097,die:168,div:247,dot:729,ecy:1101,efr:120098,egs:10902,ell:8467,els:10901,eng:331,eta:951,eth:240,fcy:1092,ffr:120099,gEl:10892,gap:10886,gcy:1075,gel:8923,geq:8805,ges:10878,gfr:120100,ggg:8921,glE:10898,gla:10917,glj:10916,gnE:8809,gne:10888,hfr:120101,icy:1080,iff:8660,ifr:120102,int:8747,jcy:1081,jfr:120103,kcy:1082,kfr:120104,lEg:10891,lap:10885,lat:10923,lcy:1083,leg:8922,leq:8804,les:10877,lfr:120105,lgE:10897,lnE:8808,lne:10887,loz:9674,lrm:8206,lsh:8624,map:8614,mcy:1084,mfr:120106,mho:8487,mid:8739,nap:8777,ncy:1085,nfr:120107,nge:8817,ngt:8815,nis:8956,niv:8715,nle:8816,nlt:8814,not:172,npr:8832,nsc:8833,num:35,ocy:1086,ofr:120108,ogt:10689,ohm:8486,olt:10688,ord:10845,orv:10843,par:8741,pcy:1087,pfr:120109,phi:966,piv:982,prE:10931,pre:10927,psi:968,qfr:120110,rcy:1088,reg:174,rfr:120111,rho:961,rlm:8207,rsh:8625,scE:10932,sce:10928,scy:1089,sfr:120112,shy:173,sim:8764,smt:10922,sol:47,squ:9633,sub:8834,sum:8721,sup:8835,tau:964,tcy:1090,tfr:120113,top:8868,ucy:1091,ufr:120114,uml:168,vcy:1074,vee:8744,vfr:120115,wfr:120116,xfr:120117,ycy:1099,yen:165,yfr:120118,zcy:1079,zfr:120119,zwj:8205,DD:8517,GT:62,Gg:8921,Gt:8811,Im:8465,LT:60,Ll:8920,Lt:8810,Mu:924,Nu:925,Or:10836,Pi:928,Pr:10939,Re:8476,Sc:10940,Xi:926,ac:8766,af:8289,ap:8776,dd:8518,ee:8519,eg:10906,el:10905,gE:8807,ge:8805,gg:8811,gl:8823,gt:62,ic:8291,ii:8520,in:8712,it:8290,lE:8806,le:8804,lg:8822,ll:8810,lt:60,mp:8723,mu:956,ne:8800,ni:8715,nu:957,oS:9416,or:8744,pi:960,pm:177,pr:8826,rx:8478,sc:8827,wp:8472,wr:8768,xi:958};var windows_1252=[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376];var entity_pattern=new RegExp(\"&(#?(?:x[\\\\w\\\\d]+|\\\\d+|\".concat(Object.keys(entities).join('|'),\"))(?:;|\\\\b)\"),'g');function decode_character_references(html){return html.replace(entity_pattern,function(match,entity){var code;// Handle named entities\nif(entity[0]!=='#'){code=entities[entity];}else if(entity[1]==='x'){code=parseInt(entity.substring(2),16);}else{code=parseInt(entity.substring(1),10);}if(!code){return match;}return String.fromCodePoint(validate_code(code));});}var NUL=0;// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\n// to replace them ourselves\n//\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\nfunction validate_code(code){// line feed becomes generic whitespace\nif(code===10){return 32;}// ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\nif(code<128){return code;}// code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\n// to correct the mistake or we'll end up with missing € signs and so on\nif(code<=159){return windows_1252[code-128];}// basic multilingual plane\nif(code<55296){return code;}// UTF-16 surrogate halves\nif(code<=57343){return NUL;}// rest of the basic multilingual plane\nif(code<=65535){return code;}// supplementary multilingual plane 0x10000 - 0x1ffff\nif(code>=65536&&code<=131071){return code;}// supplementary ideographic plane 0x20000 - 0x2ffff\nif(code>=131072&&code<=196607){return code;}return NUL;}// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\nvar disallowed_contents=new Map([['li',new Set(['li'])],['dt',new Set(['dt','dd'])],['dd',new Set(['dt','dd'])],['p',new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' '))],['rt',new Set(['rt','rp'])],['rp',new Set(['rt','rp'])],['optgroup',new Set(['optgroup'])],['option',new Set(['option','optgroup'])],['thead',new Set(['tbody','tfoot'])],['tbody',new Set(['tbody','tfoot'])],['tfoot',new Set(['tbody'])],['tr',new Set(['tr','tbody'])],['td',new Set(['td','th','tr'])],['th',new Set(['td','th','tr'])]]);// can this be a child of the parent element, or does it implicitly\n// close it, like `<li>one<li>two`?\nfunction closing_tag_omitted(current,next){if(disallowed_contents.has(current)){if(!next||disallowed_contents.get(current).has(next)){return true;}}return false;}// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\nfunction full_char_code_at(str,i){var code=str.charCodeAt(i);if(code<=0xd7ff||code>=0xe000)return code;var next=str.charCodeAt(i+1);return(code<<10)+next-0x35fdc00;}var globals=new Set(['alert','Array','Boolean','clearInterval','clearTimeout','confirm','console','Date','decodeURI','decodeURIComponent','document','encodeURI','encodeURIComponent','Error','EvalError','Event','fetch','global','globalThis','history','Infinity','InternalError','Intl','isFinite','isNaN','JSON','localStorage','location','Map','Math','NaN','navigator','Number','Object','parseFloat','parseInt','process','Promise','prompt','RangeError','ReferenceError','RegExp','sessionStorage','Set','setInterval','setTimeout','String','SyntaxError','TypeError','undefined','URIError','URL','window']);var reserved=new Set(['arguments','await','break','case','catch','class','const','continue','debugger','default','delete','do','else','enum','eval','export','extends','false','finally','for','function','if','implements','import','in','instanceof','interface','let','new','null','package','private','protected','public','return','static','super','switch','this','throw','true','try','typeof','var','void','while','with','yield']);var void_element_names=/^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;function is_void(name){return void_element_names.test(name)||name.toLowerCase()==='!doctype';}function is_valid(str){var i=0;while(i<str.length){var code=full_char_code_at(str,i);if(!(i===0?isIdentifierStart:isIdentifierChar)(code,true))return false;i+=code<=0xffff?1:2;}return true;}function sanitize(name){return name.replace(/[^a-zA-Z0-9_]+/g,'_').replace(/^_/,'').replace(/_$/,'').replace(/^[0-9]/,'_$&');}function fuzzymatch(name,names){var set=new FuzzySet(names);var matches=set.get(name);return matches&&matches[0]&&matches[0][0]>0.7?matches[0][1]:null;}// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\n// BSD Licensed\nvar GRAM_SIZE_LOWER=2;var GRAM_SIZE_UPPER=3;// return an edit distance from 0 to 1\nfunction _distance(str1,str2){if(str1===null&&str2===null)throw'Trying to compare two null values';if(str1===null||str2===null)return 0;str1=String(str1);str2=String(str2);var distance=levenshtein(str1,str2);if(str1.length>str2.length){return 1-distance/str1.length;}else{return 1-distance/str2.length;}}// helper functions\nfunction levenshtein(str1,str2){var current=[];var prev;var value;for(var _i19=0;_i19<=str2.length;_i19++){for(var j=0;j<=str1.length;j++){if(_i19&&j){if(str1.charAt(j-1)===str2.charAt(_i19-1)){value=prev;}else{value=Math.min(current[j],current[j-1],prev)+1;}}else{value=_i19+j;}prev=current[j];current[j]=value;}}return current.pop();}var non_word_regex=/[^\\w, ]+/;function iterate_grams(value){var gram_size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var simplified='-'+value.toLowerCase().replace(non_word_regex,'')+'-';var len_diff=gram_size-simplified.length;var results=[];if(len_diff>0){for(var _i20=0;_i20<len_diff;++_i20){value+='-';}}for(var _i21=0;_i21<simplified.length-gram_size+1;++_i21){results.push(simplified.slice(_i21,_i21+gram_size));}return results;}function gram_counter(value){var gram_size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;// return an object where key=gram, value=number of occurrences\nvar result={};var grams=iterate_grams(value,gram_size);var i=0;for(i;i<grams.length;++i){if(grams[i]in result){result[grams[i]]+=1;}else{result[grams[i]]=1;}}return result;}function sort_descending(a,b){return b[0]-a[0];}var FuzzySet=/*#__PURE__*/function(){function FuzzySet(arr){(0,_classCallCheck2.default)(this,FuzzySet);this.exact_set={};this.match_dict={};this.items={};// initialization\nfor(var _i22=GRAM_SIZE_LOWER;_i22<GRAM_SIZE_UPPER+1;++_i22){this.items[_i22]=[];}// add all the items to the set\nfor(var _i23=0;_i23<arr.length;++_i23){this.add(arr[_i23]);}}(0,_createClass2.default)(FuzzySet,[{key:\"add\",value:function add(value){var normalized_value=value.toLowerCase();if(normalized_value in this.exact_set){return false;}var i=GRAM_SIZE_LOWER;for(i;i<GRAM_SIZE_UPPER+1;++i){this._add(value,i);}}},{key:\"_add\",value:function _add(value,gram_size){var normalized_value=value.toLowerCase();var items=this.items[gram_size]||[];var index=items.length;items.push(0);var gram_counts=gram_counter(normalized_value,gram_size);var sum_of_square_gram_counts=0;var gram;var gram_count;for(gram in gram_counts){gram_count=gram_counts[gram];sum_of_square_gram_counts+=Math.pow(gram_count,2);if(gram in this.match_dict){this.match_dict[gram].push([index,gram_count]);}else{this.match_dict[gram]=[[index,gram_count]];}}var vector_normal=Math.sqrt(sum_of_square_gram_counts);items[index]=[vector_normal,normalized_value];this.items[gram_size]=items;this.exact_set[normalized_value]=value;}},{key:\"get\",value:function get(value){var normalized_value=value.toLowerCase();var result=this.exact_set[normalized_value];if(result){return[[1,result]];}var results=[];// start with high gram size and if there are no results, go to lower gram sizes\nfor(var gram_size=GRAM_SIZE_UPPER;gram_size>=GRAM_SIZE_LOWER;--gram_size){results=this.__get(value,gram_size);if(results){return results;}}return null;}},{key:\"__get\",value:function __get(value,gram_size){var normalized_value=value.toLowerCase();var matches={};var gram_counts=gram_counter(normalized_value,gram_size);var items=this.items[gram_size];var sum_of_square_gram_counts=0;var gram;var gram_count;var i;var index;var other_gram_count;for(gram in gram_counts){gram_count=gram_counts[gram];sum_of_square_gram_counts+=Math.pow(gram_count,2);if(gram in this.match_dict){for(i=0;i<this.match_dict[gram].length;++i){index=this.match_dict[gram][i][0];other_gram_count=this.match_dict[gram][i][1];if(index in matches){matches[index]+=gram_count*other_gram_count;}else{matches[index]=gram_count*other_gram_count;}}}}var vector_normal=Math.sqrt(sum_of_square_gram_counts);var results=[];var match_score;// build a results list of [score, str]\nfor(var match_index in matches){match_score=matches[match_index];results.push([match_score/(vector_normal*items[match_index][0]),items[match_index][1]]);}results.sort(sort_descending);var new_results=[];var end_index=Math.min(50,results.length);// truncate somewhat arbitrarily to 50\nfor(var _i24=0;_i24<end_index;++_i24){new_results.push([_distance(results[_i24][1],normalized_value),results[_i24][1]]);}results=new_results;results.sort(sort_descending);new_results=[];for(var _i25=0;_i25<results.length;++_i25){if(results[_i25][0]==results[0][0]){new_results.push([results[_i25][0],this.exact_set[results[_i25][1]]]);}}return new_results;}}]);return FuzzySet;}();function list$1(items){var conjunction=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'or';if(items.length===1)return items[0];return\"\".concat(items.slice(0,-1).join(', '),\" \").concat(conjunction,\" \").concat(items[items.length-1]);}// eslint-disable-next-line no-useless-escape\nvar valid_tag_name=/^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;var meta_tags=new Map([['svelte:head','Head'],['svelte:options','Options'],['svelte:window','Window'],['svelte:body','Body']]);var valid_meta_tags=Array.from(meta_tags.keys()).concat('svelte:self','svelte:component');var specials=new Map([['script',{read:read_script,property:'js'}],['style',{read:read_style,property:'css'}]]);var SELF=/^svelte:self(?=[\\s/>])/;var COMPONENT=/^svelte:component(?=[\\s/>])/;function parent_is_head(stack){var i=stack.length;while(i--){var type=stack[i].type;if(type==='Head')return true;if(type==='Element'||type==='InlineComponent')return false;}return false;}function tag(parser){var start=parser.index++;var parent=parser.current();if(parser.eat('!--')){var _data=parser.read_until(/-->/);parser.eat('-->',true,'comment was left open, expected -->');parser.current().children.push({start:start,end:parser.index,type:'Comment',data:_data});return;}var is_closing_tag=parser.eat('/');var name=read_tag_name(parser);if(meta_tags.has(name)){var slug=meta_tags.get(name).toLowerCase();if(is_closing_tag){if((name==='svelte:window'||name==='svelte:body')&&parser.current().children.length){parser.error({code:\"invalid-\".concat(slug,\"-content\"),message:\"<\".concat(name,\"> cannot have children\")},parser.current().children[0].start);}}else{if(name in parser.meta_tags){parser.error({code:\"duplicate-\".concat(slug),message:\"A component can only have one <\".concat(name,\"> tag\")},start);}if(parser.stack.length>1){parser.error({code:\"invalid-\".concat(slug,\"-placement\"),message:\"<\".concat(name,\"> tags cannot be inside elements or blocks\")},start);}parser.meta_tags[name]=true;}}var type=meta_tags.has(name)?meta_tags.get(name):/[A-Z]/.test(name[0])||name==='svelte:self'||name==='svelte:component'?'InlineComponent':name==='title'&&parent_is_head(parser.stack)?'Title':name==='slot'&&!parser.customElement?'Slot':'Element';var element={start:start,end:null,type:type,name:name,attributes:[],children:[]};parser.allow_whitespace();if(is_closing_tag){if(is_void(name)){parser.error({code:\"invalid-void-content\",message:\"<\".concat(name,\"> is a void element and cannot have children, or a closing tag\")},start);}parser.eat('>',true);// close any elements that don't have their own closing tags, e.g. <div><p></div>\nwhile(parent.name!==name){if(parent.type!=='Element'){var message=parser.last_auto_closed_tag&&parser.last_auto_closed_tag.tag===name?\"</\".concat(name,\"> attempted to close <\").concat(name,\"> that was already automatically closed by <\").concat(parser.last_auto_closed_tag.reason,\">\"):\"</\".concat(name,\"> attempted to close an element that was not open\");parser.error({code:\"invalid-closing-tag\",message:message},start);}parent.end=start;parser.stack.pop();parent=parser.current();}parent.end=parser.index;parser.stack.pop();if(parser.last_auto_closed_tag&&parser.stack.length<parser.last_auto_closed_tag.depth){parser.last_auto_closed_tag=null;}return;}else if(closing_tag_omitted(parent.name,name)){parent.end=start;parser.stack.pop();parser.last_auto_closed_tag={tag:parent.name,reason:name,depth:parser.stack.length};}var unique_names=new Set();var attribute;while(attribute=read_attribute(parser,unique_names)){element.attributes.push(attribute);parser.allow_whitespace();}if(name==='svelte:component'){var index=element.attributes.findIndex(function(attr){return attr.type==='Attribute'&&attr.name==='this';});if(!~index){parser.error({code:\"missing-component-definition\",message:\"<svelte:component> must have a 'this' attribute\"},start);}var definition=element.attributes.splice(index,1)[0];if(definition.value===true||definition.value.length!==1||definition.value[0].type==='Text'){parser.error({code:\"invalid-component-definition\",message:\"invalid component definition\"},definition.start);}element.expression=definition.value[0].expression;}// special cases – top-level <script> and <style>\nif(specials.has(name)&&parser.stack.length===1){var special=specials.get(name);parser.eat('>',true);var content=special.read(parser,start,element.attributes);if(content)parser[special.property].push(content);return;}parser.current().children.push(element);var self_closing=parser.eat('/')||is_void(name);parser.eat('>',true);if(self_closing){// don't push self-closing elements onto the stack\nelement.end=parser.index;}else if(name==='textarea'){// special case\nelement.children=read_sequence(parser,function(){return parser.template.slice(parser.index,parser.index+11)==='</textarea>';});parser.read(/<\\/textarea>/);element.end=parser.index;}else if(name==='script'){// special case\nvar _start=parser.index;var _data2=parser.read_until(/<\\/script>/);var end=parser.index;element.children.push({start:_start,end:end,type:'Text',data:_data2});parser.eat('</script>',true);element.end=parser.index;}else if(name==='style'){// special case\nvar _start2=parser.index;var _data3=parser.read_until(/<\\/style>/);var _end=parser.index;element.children.push({start:_start2,end:_end,type:'Text',data:_data3});parser.eat('</style>',true);}else{parser.stack.push(element);}}function read_tag_name(parser){var start=parser.index;if(parser.read(SELF)){// check we're inside a block, otherwise this\n// will cause infinite recursion\nvar _i26=parser.stack.length;var legal=false;while(_i26--){var _fragment=parser.stack[_i26];if(_fragment.type==='IfBlock'||_fragment.type==='EachBlock'||_fragment.type==='InlineComponent'){legal=true;break;}}if(!legal){parser.error({code:\"invalid-self-placement\",message:\"<svelte:self> components can only exist inside {#if} blocks, {#each} blocks, or slots passed to components\"},start);}return'svelte:self';}if(parser.read(COMPONENT))return'svelte:component';var name=parser.read_until(/(\\s|\\/|>)/);if(meta_tags.has(name))return name;if(name.startsWith('svelte:')){var match=fuzzymatch(name.slice(7),valid_meta_tags);var message=\"Valid <svelte:...> tag names are \".concat(list$1(valid_meta_tags));if(match)message+=\" (did you mean '\".concat(match,\"'?)\");parser.error({code:'invalid-tag-name',message:message},start);}if(!valid_tag_name.test(name)){parser.error({code:\"invalid-tag-name\",message:\"Expected valid tag name\"},start);}return name;}function read_attribute(parser,unique_names){var start=parser.index;function check_unique(name){if(unique_names.has(name)){parser.error({code:\"duplicate-attribute\",message:'Attributes need to be unique'},start);}unique_names.add(name);}if(parser.eat('{')){parser.allow_whitespace();if(parser.eat('...')){var _expression3=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);return{start:start,end:parser.index,type:'Spread',expression:_expression3};}else{var value_start=parser.index;var _name2=parser.read_identifier();parser.allow_whitespace();parser.eat('}',true);check_unique(_name2);return{start:start,end:parser.index,type:'Attribute',name:_name2,value:[{start:value_start,end:value_start+_name2.length,type:'AttributeShorthand',expression:{start:value_start,end:value_start+_name2.length,type:'Identifier',name:_name2}}]};}}// eslint-disable-next-line no-useless-escape\nvar name=parser.read_until(/[\\s=\\/>\"']/);if(!name)return null;var end=parser.index;parser.allow_whitespace();var colon_index=name.indexOf(':');var type=colon_index!==-1&&get_directive_type(name.slice(0,colon_index));var value=true;if(parser.eat('=')){parser.allow_whitespace();value=read_attribute_value(parser);end=parser.index;}else if(parser.match_regex(/[\"']/)){parser.error({code:\"unexpected-token\",message:\"Expected =\"},parser.index);}if(type){var _name$slice$split=name.slice(colon_index+1).split('|'),_name$slice$split2=(0,_toArray2.default)(_name$slice$split),directive_name=_name$slice$split2[0],modifiers=_name$slice$split2.slice(1);if(type==='Binding'&&directive_name!=='this'){check_unique(directive_name);}else if(type!=='EventHandler'){check_unique(name);}if(type==='Ref'){parser.error({code:\"invalid-ref-directive\",message:\"The ref directive is no longer supported \\u2014 use `bind:this={\".concat(directive_name,\"}` instead\")},start);}if(value[0]){if(value.length>1||value[0].type==='Text'){parser.error({code:\"invalid-directive-value\",message:\"Directive value must be a JavaScript expression enclosed in curly braces\"},value[0].start);}}var directive={start:start,end:end,type:type,name:directive_name,modifiers:modifiers,expression:value[0]&&value[0].expression||null};if(type==='Transition'){var direction=name.slice(0,colon_index);directive.intro=direction==='in'||direction==='transition';directive.outro=direction==='out'||direction==='transition';}if(!directive.expression&&(type==='Binding'||type==='Class')){directive.expression={start:directive.start+colon_index+1,end:directive.end,type:'Identifier',name:directive.name};}return directive;}check_unique(name);return{start:start,end:end,type:'Attribute',name:name,value:value};}function get_directive_type(name){if(name==='use')return'Action';if(name==='animate')return'Animation';if(name==='bind')return'Binding';if(name==='class')return'Class';if(name==='on')return'EventHandler';if(name==='let')return'Let';if(name==='ref')return'Ref';if(name==='in'||name==='out'||name==='transition')return'Transition';}function read_attribute_value(parser){var quote_mark=parser.eat(\"'\")?\"'\":parser.eat(\"\\\"\")?\"\\\"\":null;var regex=quote_mark===\"'\"?/'/:quote_mark===\"\\\"\"?/\"/:/(\\/>|[\\s\"'=<>`])/;var value=read_sequence(parser,function(){return!!parser.match_regex(regex);});if(quote_mark)parser.index+=1;return value;}function read_sequence(parser,done){var current_chunk={start:parser.index,end:null,type:'Text',raw:'',data:null};function flush(){if(current_chunk.raw){current_chunk.data=decode_character_references(current_chunk.raw);current_chunk.end=parser.index;chunks.push(current_chunk);}}var chunks=[];while(parser.index<parser.template.length){var index=parser.index;if(done()){flush();return chunks;}else if(parser.eat('{')){flush();parser.allow_whitespace();var _expression4=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);chunks.push({start:index,end:parser.index,type:'MustacheTag',expression:_expression4});current_chunk={start:parser.index,end:null,type:'Text',raw:'',data:null};}else{current_chunk.raw+=parser.template[parser.index++];}}parser.error({code:\"unexpected-eof\",message:\"Unexpected end of input\"});}var SQUARE_BRACKET_OPEN=\"[\".charCodeAt(0);var SQUARE_BRACKET_CLOSE=\"]\".charCodeAt(0);var CURLY_BRACKET_OPEN=\"{\".charCodeAt(0);var CURLY_BRACKET_CLOSE=\"}\".charCodeAt(0);function is_bracket_open(code){return code===SQUARE_BRACKET_OPEN||code===CURLY_BRACKET_OPEN;}function is_bracket_close(code){return code===SQUARE_BRACKET_CLOSE||code===CURLY_BRACKET_CLOSE;}function is_bracket_pair(open,close){return open===SQUARE_BRACKET_OPEN&&close===SQUARE_BRACKET_CLOSE||open===CURLY_BRACKET_OPEN&&close===CURLY_BRACKET_CLOSE;}function get_bracket_close(open){if(open===SQUARE_BRACKET_OPEN){return SQUARE_BRACKET_CLOSE;}if(open===CURLY_BRACKET_OPEN){return CURLY_BRACKET_CLOSE;}}function read_context(parser){var start=parser.index;var i=parser.index;var code=full_char_code_at(parser.template,i);if(isIdentifierStart(code,true)){return{type:\"Identifier\",name:parser.read_identifier(),start:start,end:parser.index};}if(!is_bracket_open(code)){parser.error({code:\"unexpected-token\",message:\"Expected identifier or destructure pattern\"});}var bracket_stack=[code];i+=code<=0xffff?1:2;while(i<parser.template.length){var _code=full_char_code_at(parser.template,i);if(is_bracket_open(_code)){bracket_stack.push(_code);}else if(is_bracket_close(_code)){if(!is_bracket_pair(bracket_stack[bracket_stack.length-1],_code)){parser.error({code:\"unexpected-token\",message:\"Expected \".concat(String.fromCharCode(get_bracket_close(bracket_stack[bracket_stack.length-1])))});}bracket_stack.pop();if(bracket_stack.length===0){i+=_code<=0xffff?1:2;break;}}i+=_code<=0xffff?1:2;}parser.index=i;var pattern_string=parser.template.slice(start,i);try{// the length of the `space_with_newline` has to be start - 1\n// because we added a `(` in front of the pattern_string,\n// which shifted the entire string to right by 1\n// so we offset it by removing 1 character in the `space_with_newline`\n// to achieve that, we remove the 1st space encountered,\n// so it will not affect the `column` of the node\nvar space_with_newline=parser.template.slice(0,start).replace(/[^\\n]/g,' ');var first_space=space_with_newline.indexOf(' ');space_with_newline=space_with_newline.slice(0,first_space)+space_with_newline.slice(first_space+1);return parse_expression_at(\"\".concat(space_with_newline,\"(\").concat(pattern_string,\" = 1)\"),start-1).left;}catch(error){parser.acorn_error(error);}}function trim_start(str){var i=0;while(whitespace.test(str[i])){i+=1;}return str.slice(i);}function trim_end(str){var i=str.length;while(whitespace.test(str[i-1])){i-=1;}return str.slice(0,i);}function to_string(node){switch(node.type){case'IfBlock':return'{#if} block';case'ThenBlock':return'{:then} block';case'ElseBlock':return'{:else} block';case'PendingBlock':case'AwaitBlock':return'{#await} block';case'CatchBlock':return'{:catch} block';case'EachBlock':return'{#each} block';case'RawMustacheTag':return'{@html} block';case'DebugTag':return'{@debug} block';case'Element':case'InlineComponent':case'Slot':case'Title':return\"<\".concat(node.name,\"> tag\");default:return node.type;}}function trim_whitespace(block,trim_before,trim_after){if(!block.children||block.children.length===0)return;// AwaitBlock\nvar first_child=block.children[0];var last_child=block.children[block.children.length-1];if(first_child.type==='Text'&&trim_before){first_child.data=trim_start(first_child.data);if(!first_child.data)block.children.shift();}if(last_child.type==='Text'&&trim_after){last_child.data=trim_end(last_child.data);if(!last_child.data)block.children.pop();}if(block.else){trim_whitespace(block.else,trim_before,trim_after);}if(first_child.elseif){trim_whitespace(first_child,trim_before,trim_after);}}function mustache(parser){var start=parser.index;parser.index+=1;parser.allow_whitespace();// {/if}, {/each} or {/await}\nif(parser.eat('/')){var block=parser.current();var expected;if(closing_tag_omitted(block.name)){block.end=start;parser.stack.pop();block=parser.current();}if(block.type==='ElseBlock'||block.type==='PendingBlock'||block.type==='ThenBlock'||block.type==='CatchBlock'){block.end=start;parser.stack.pop();block=parser.current();expected='await';}if(block.type==='IfBlock'){expected='if';}else if(block.type==='EachBlock'){expected='each';}else if(block.type==='AwaitBlock'){expected='await';}else{parser.error({code:\"unexpected-block-close\",message:\"Unexpected block closing tag\"});}parser.eat(expected,true);parser.allow_whitespace();parser.eat('}',true);while(block.elseif){block.end=parser.index;parser.stack.pop();block=parser.current();if(block.else){block.else.end=start;}}// strip leading/trailing whitespace as necessary\nvar char_before=parser.template[block.start-1];var char_after=parser.template[parser.index];var trim_before=!char_before||whitespace.test(char_before);var trim_after=!char_after||whitespace.test(char_after);trim_whitespace(block,trim_before,trim_after);block.end=parser.index;parser.stack.pop();}else if(parser.eat(':else')){if(parser.eat('if')){parser.error({code:'invalid-elseif',message:\"'elseif' should be 'else if'\"});}parser.allow_whitespace();// :else if\nif(parser.eat('if')){var _block2=parser.current();if(_block2.type!=='IfBlock'){parser.error({code:\"invalid-elseif-placement\",message:parser.stack.some(function(block){return block.type==='IfBlock';})?\"Expected to close \".concat(to_string(_block2),\" before seeing {:else if ...} block\"):\"Cannot have an {:else if ...} block outside an {#if ...} block\"});}parser.require_whitespace();var _expression5=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);_block2.else={start:parser.index,end:null,type:'ElseBlock',children:[{start:parser.index,end:null,type:'IfBlock',elseif:true,expression:_expression5,children:[]}]};parser.stack.push(_block2.else.children[0]);}// :else\nelse{var _block3=parser.current();if(_block3.type!=='IfBlock'&&_block3.type!=='EachBlock'){parser.error({code:\"invalid-else-placement\",message:parser.stack.some(function(block){return block.type==='IfBlock'||block.type==='EachBlock';})?\"Expected to close \".concat(to_string(_block3),\" before seeing {:else} block\"):\"Cannot have an {:else} block outside an {#if ...} or {#each ...} block\"});}parser.allow_whitespace();parser.eat('}',true);_block3.else={start:parser.index,end:null,type:'ElseBlock',children:[]};parser.stack.push(_block3.else);}}else if(parser.match(':then')||parser.match(':catch')){var _block4=parser.current();var is_then=parser.eat(':then')||!parser.eat(':catch');if(is_then){if(_block4.type!=='PendingBlock'){parser.error({code:\"invalid-then-placement\",message:parser.stack.some(function(block){return block.type==='PendingBlock';})?\"Expected to close \".concat(to_string(_block4),\" before seeing {:then} block\"):\"Cannot have an {:then} block outside an {#await ...} block\"});}}else{if(_block4.type!=='ThenBlock'&&_block4.type!=='PendingBlock'){parser.error({code:\"invalid-catch-placement\",message:parser.stack.some(function(block){return block.type==='ThenBlock'||block.type==='PendingBlock';})?\"Expected to close \".concat(to_string(_block4),\" before seeing {:catch} block\"):\"Cannot have an {:catch} block outside an {#await ...} block\"});}}_block4.end=start;parser.stack.pop();var await_block=parser.current();if(!parser.eat('}')){parser.require_whitespace();await_block[is_then?'value':'error']=read_context(parser);parser.allow_whitespace();parser.eat('}',true);}var new_block={start:start,end:null,type:is_then?'ThenBlock':'CatchBlock',children:[],skip:false};await_block[is_then?'then':'catch']=new_block;parser.stack.push(new_block);}else if(parser.eat('#')){// {#if foo}, {#each foo} or {#await foo}\nvar type;if(parser.eat('if')){type='IfBlock';}else if(parser.eat('each')){type='EachBlock';}else if(parser.eat('await')){type='AwaitBlock';}else{parser.error({code:\"expected-block-type\",message:\"Expected if, each or await\"});}parser.require_whitespace();var _expression6=read_expression(parser);var _block5=type==='AwaitBlock'?{start:start,end:null,type:type,expression:_expression6,value:null,error:null,pending:{start:null,end:null,type:'PendingBlock',children:[],skip:true},then:{start:null,end:null,type:'ThenBlock',children:[],skip:true},catch:{start:null,end:null,type:'CatchBlock',children:[],skip:true}}:{start:start,end:null,type:type,expression:_expression6,children:[]};parser.allow_whitespace();// {#each} blocks must declare a context – {#each list as item}\nif(type==='EachBlock'){parser.eat('as',true);parser.require_whitespace();_block5.context=read_context(parser);parser.allow_whitespace();if(parser.eat(',')){parser.allow_whitespace();_block5.index=parser.read_identifier();if(!_block5.index)parser.error({code:\"expected-name\",message:\"Expected name\"});parser.allow_whitespace();}if(parser.eat('(')){parser.allow_whitespace();_block5.key=read_expression(parser);parser.allow_whitespace();parser.eat(')',true);parser.allow_whitespace();}}var await_block_shorthand=type==='AwaitBlock'&&parser.eat('then');if(await_block_shorthand){parser.require_whitespace();_block5.value=read_context(parser);parser.allow_whitespace();}var await_block_catch_shorthand=!await_block_shorthand&&type==='AwaitBlock'&&parser.eat('catch');if(await_block_catch_shorthand){parser.require_whitespace();_block5.error=read_context(parser);parser.allow_whitespace();}parser.eat('}',true);parser.current().children.push(_block5);parser.stack.push(_block5);if(type==='AwaitBlock'){var child_block;if(await_block_shorthand){_block5.then.skip=false;child_block=_block5.then;}else if(await_block_catch_shorthand){_block5.catch.skip=false;child_block=_block5.catch;}else{_block5.pending.skip=false;child_block=_block5.pending;}child_block.start=parser.index;parser.stack.push(child_block);}}else if(parser.eat('@html')){// {@html content} tag\nparser.require_whitespace();var _expression7=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);parser.current().children.push({start:start,end:parser.index,type:'RawMustacheTag',expression:_expression7});}else if(parser.eat('@debug')){var identifiers;// Implies {@debug} which indicates \"debug all\"\nif(parser.read(/\\s*}/)){identifiers=[];}else{var _expression8=read_expression(parser);identifiers=_expression8.type==='SequenceExpression'?_expression8.expressions:[_expression8];identifiers.forEach(function(node){if(node.type!=='Identifier'){parser.error({code:'invalid-debug-args',message:'{@debug ...} arguments must be identifiers, not arbitrary expressions'},node.start);}});parser.allow_whitespace();parser.eat('}',true);}parser.current().children.push({start:start,end:parser.index,type:'DebugTag',identifiers:identifiers});}else{var _expression9=read_expression(parser);parser.allow_whitespace();parser.eat('}',true);parser.current().children.push({start:start,end:parser.index,type:'MustacheTag',expression:_expression9});}}function text(parser){var start=parser.index;var data='';while(parser.index<parser.template.length&&!parser.match('<')&&!parser.match('{')){data+=parser.template[parser.index++];}var node={start:start,end:parser.index,type:'Text',raw:data,data:decode_character_references(data)};parser.current().children.push(node);}function fragment(parser){if(parser.match('<')){return tag;}if(parser.match('{')){return mustache;}return text;}function getLocator(source,options){if(options===void 0){options={};}var offsetLine=options.offsetLine||0;var offsetColumn=options.offsetColumn||0;var originalLines=source.split('\\n');var start=0;var lineRanges=originalLines.map(function(line,i){var end=start+line.length+1;var range={start:start,end:end,line:i};start=end;return range;});var i=0;function rangeContains(range,index){return range.start<=index&&index<range.end;}function getLocation(range,index){return{line:offsetLine+range.line,column:offsetColumn+index-range.start,character:index};}function locate(search,startIndex){if(typeof search==='string'){search=source.indexOf(search,startIndex||0);}var range=lineRanges[i];var d=search>=range.end?1:-1;while(range){if(rangeContains(range,search))return getLocation(range,search);i+=d;range=lineRanges[i];}}return locate;}function locate(source,search,options){if(typeof options==='number'){throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');}return getLocator(source,options)(search,options&&options.startIndex);}function tabs_to_spaces(str){return str.replace(/^\\t+/,function(match){return match.split('\\t').join('  ');});}function get_code_frame(source,line,column){var lines=source.split('\\n');var frame_start=Math.max(0,line-2);var frame_end=Math.min(line+3,lines.length);var digits=String(frame_end+1).length;return lines.slice(frame_start,frame_end).map(function(str,i){var isErrorLine=frame_start+i===line;var line_num=String(i+frame_start+1).padStart(digits,' ');if(isErrorLine){var indicator=' '.repeat(digits+2+tabs_to_spaces(str.slice(0,column)).length)+'^';return\"\".concat(line_num,\": \").concat(tabs_to_spaces(str),\"\\n\").concat(indicator);}return\"\".concat(line_num,\": \").concat(tabs_to_spaces(str));}).join('\\n');}var CompileError=/*#__PURE__*/function(_Error){(0,_inherits2.default)(CompileError,_Error);var _super=_createSuper(CompileError);function CompileError(){(0,_classCallCheck2.default)(this,CompileError);return _super.apply(this,arguments);}(0,_createClass2.default)(CompileError,[{key:\"toString\",value:function toString(){return\"\".concat(this.message,\" (\").concat(this.start.line,\":\").concat(this.start.column,\")\\n\").concat(this.frame);}}]);return CompileError;}(/*#__PURE__*/(0,_wrapNativeSuper2.default)(Error));function error$1(message,props){var error=new CompileError(message);error.name=props.name;var start=locate(props.source,props.start,{offsetLine:1});var end=locate(props.source,props.end||props.start,{offsetLine:1});error.code=props.code;error.start=start;error.end=end;error.pos=props.start;error.filename=props.filename;error.frame=get_code_frame(props.source,start.line-1,start.column);throw error;}var Parser$1=/*#__PURE__*/function(){function Parser$1(template,options){(0,_classCallCheck2.default)(this,Parser$1);this.index=0;this.stack=[];this.css=[];this.js=[];this.meta_tags={};if(typeof template!=='string'){throw new TypeError('Template must be a string');}this.template=template.replace(/\\s+$/,'');this.filename=options.filename;this.customElement=options.customElement;this.html={start:null,end:null,type:'Fragment',children:[]};this.stack.push(this.html);var state=fragment;while(this.index<this.template.length){state=state(this)||fragment;}if(this.stack.length>1){var current=this.current();var type=current.type==='Element'?\"<\".concat(current.name,\">\"):'Block';var slug=current.type==='Element'?'element':'block';this.error({code:\"unclosed-\".concat(slug),message:\"\".concat(type,\" was left open\")},current.start);}if(state!==fragment){this.error({code:\"unexpected-eof\",message:'Unexpected end of input'});}if(this.html.children.length){var start=this.html.children[0].start;while(whitespace.test(template[start])){start+=1;}var end=this.html.children[this.html.children.length-1].end;while(whitespace.test(template[end-1])){end-=1;}this.html.start=start;this.html.end=end;}else{this.html.start=this.html.end=null;}}(0,_createClass2.default)(Parser$1,[{key:\"current\",value:function current(){return this.stack[this.stack.length-1];}},{key:\"acorn_error\",value:function acorn_error(err){this.error({code:\"parse-error\",message:err.message.replace(/ \\(\\d+:\\d+\\)$/,'')},err.pos);}},{key:\"error\",value:function error(_ref2){var code=_ref2.code,message=_ref2.message;var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.index;error$1(message,{name:'ParseError',code:code,source:this.template,start:index,filename:this.filename});}},{key:\"eat\",value:function eat(str,required,message){if(this.match(str)){this.index+=str.length;return true;}if(required){this.error({code:\"unexpected-\".concat(this.index===this.template.length?'eof':'token'),message:message||\"Expected \".concat(str)});}return false;}},{key:\"match\",value:function match(str){return this.template.slice(this.index,this.index+str.length)===str;}},{key:\"match_regex\",value:function match_regex(pattern){var match=pattern.exec(this.template.slice(this.index));if(!match||match.index!==0)return null;return match[0];}},{key:\"allow_whitespace\",value:function allow_whitespace(){while(this.index<this.template.length&&whitespace.test(this.template[this.index])){this.index++;}}},{key:\"read\",value:function read(pattern){var result=this.match_regex(pattern);if(result)this.index+=result.length;return result;}},{key:\"read_identifier\",value:function read_identifier(){var allow_reserved=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var start=this.index;var i=this.index;var code=full_char_code_at(this.template,i);if(!isIdentifierStart(code,true))return null;i+=code<=0xffff?1:2;while(i<this.template.length){var _code2=full_char_code_at(this.template,i);if(!isIdentifierChar(_code2,true))break;i+=_code2<=0xffff?1:2;}var identifier=this.template.slice(this.index,this.index=i);if(!allow_reserved&&reserved.has(identifier)){this.error({code:\"unexpected-reserved-word\",message:\"'\".concat(identifier,\"' is a reserved word in JavaScript and cannot be used here\")},start);}return identifier;}},{key:\"read_until\",value:function read_until(pattern){if(this.index>=this.template.length)this.error({code:\"unexpected-eof\",message:'Unexpected end of input'});var start=this.index;var match=pattern.exec(this.template.slice(start));if(match){this.index=start+match.index;return this.template.slice(start,this.index);}this.index=this.template.length;return this.template.slice(start);}},{key:\"require_whitespace\",value:function require_whitespace(){if(!whitespace.test(this.template[this.index])){this.error({code:\"missing-whitespace\",message:\"Expected whitespace\"});}this.allow_whitespace();}}]);return Parser$1;}();function parse$3(template){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var parser=new Parser$1(template,options);// TODO we may want to allow multiple <style> tags —\n// one scoped, one global. for now, only allow one\nif(parser.css.length>1){parser.error({code:'duplicate-style',message:'You can only have one top-level <style> tag per component'},parser.css[1].start);}var instance_scripts=parser.js.filter(function(script){return script.context==='default';});var module_scripts=parser.js.filter(function(script){return script.context==='module';});if(instance_scripts.length>1){parser.error({code:\"invalid-script\",message:\"A component can only have one instance-level <script> element\"},instance_scripts[1].start);}if(module_scripts.length>1){parser.error({code:\"invalid-script\",message:\"A component can only have one <script context=\\\"module\\\"> element\"},module_scripts[1].start);}return{html:parser.html,css:parser.css[0],instance:instance_scripts[0],module:module_scripts[0]};}function is_head(node){return node&&node.type==='MemberExpression'&&node.object.name==='@_document'&&node.property.name==='head';}var Block$1=/*#__PURE__*/function(){function Block$1(options){(0,_classCallCheck2.default)(this,Block$1);this.dependencies=new Set();this.event_listeners=[];this.variables=new Map();this.has_update_method=false;this.parent=options.parent;this.renderer=options.renderer;this.name=options.name;this.type=options.type;this.comment=options.comment;this.wrappers=[];// for keyed each blocks\nthis.key=options.key;this.first=null;this.bindings=options.bindings;this.chunks={declarations:[],init:[],create:[],claim:[],hydrate:[],mount:[],measure:[],fix:[],animate:[],intro:[],update:[],outro:[],destroy:[]};this.has_animation=false;this.has_intro_method=false;// a block could have an intro method but not intro transitions, e.g. if a sibling block has intros\nthis.has_outro_method=false;this.outros=0;this.get_unique_name=this.renderer.component.get_unique_name_maker();this.aliases=new Map();if(this.key)this.aliases.set('key',this.get_unique_name('key'));}(0,_createClass2.default)(Block$1,[{key:\"assign_variable_names\",value:function assign_variable_names(){var seen=new Set();var dupes=new Set();var i=this.wrappers.length;while(i--){var wrapper=this.wrappers[i];if(!wrapper.var)continue;if(seen.has(wrapper.var.name)){dupes.add(wrapper.var.name);}seen.add(wrapper.var.name);}var counts=new Map();i=this.wrappers.length;while(i--){var _wrapper=this.wrappers[i];if(!_wrapper.var)continue;var suffix='';if(dupes.has(_wrapper.var.name)){var _i27=counts.get(_wrapper.var.name)||0;counts.set(_wrapper.var.name,_i27+1);suffix=_i27;}_wrapper.var.name=this.get_unique_name(_wrapper.var.name+suffix).name;}}},{key:\"add_dependencies\",value:function add_dependencies(dependencies){var _this3=this;dependencies.forEach(function(dependency){_this3.dependencies.add(dependency);});this.has_update_method=true;if(this.parent){this.parent.add_dependencies(dependencies);}}},{key:\"add_element\",value:function add_element(id,render_statement,claim_statement,parent_node,no_detach){this.add_variable(id);this.chunks.create.push(b(_templateObject(),id,render_statement));if(this.renderer.options.hydratable){this.chunks.claim.push(b(_templateObject2(),id,claim_statement||render_statement));}if(parent_node){this.chunks.mount.push(b(_templateObject3(),parent_node,id));if(is_head(parent_node)&&!no_detach)this.chunks.destroy.push(b(_templateObject4(),id));}else{this.chunks.mount.push(b(_templateObject5(),id));if(!no_detach)this.chunks.destroy.push(b(_templateObject6(),id));}}},{key:\"add_intro\",value:function add_intro(local){this.has_intros=this.has_intro_method=true;if(!local&&this.parent)this.parent.add_intro();}},{key:\"add_outro\",value:function add_outro(local){this.has_outros=this.has_outro_method=true;this.outros+=1;if(!local&&this.parent)this.parent.add_outro();}},{key:\"add_animation\",value:function add_animation(){this.has_animation=true;}},{key:\"add_variable\",value:function add_variable(id,init){if(this.variables.has(id.name)){throw new Error(\"Variable '\".concat(id.name,\"' already initialised with a different value\"));}this.variables.set(id.name,{id:id,init:init});}},{key:\"alias\",value:function alias(name){if(!this.aliases.has(name)){this.aliases.set(name,this.get_unique_name(name));}return this.aliases.get(name);}},{key:\"child\",value:function child(options){return new Block$1(Object.assign({},this,{key:null},options,{parent:this}));}},{key:\"get_contents\",value:function get_contents(key){var dev=this.renderer.options.dev;if(this.has_outros){this.add_variable({type:'Identifier',name:'#current'});if(this.chunks.intro.length>0){this.chunks.intro.push(b(_templateObject7()));this.chunks.mount.push(b(_templateObject8()));}if(this.chunks.outro.length>0){this.chunks.outro.push(b(_templateObject9()));}}if(this.autofocus){this.chunks.mount.push(b(_templateObject10(),this.autofocus));}this.render_listeners();var properties={};var noop=x(_templateObject11());properties.key=key;if(this.first){properties.first=x(_templateObject12());this.chunks.hydrate.push(b(_templateObject13(),this.first));}if(this.chunks.create.length===0&&this.chunks.hydrate.length===0){properties.create=noop;}else{var hydrate=this.chunks.hydrate.length>0&&(this.renderer.options.hydratable?b(_templateObject14()):this.chunks.hydrate);properties.create=x(_templateObject15(),this.chunks.create,hydrate);}if(this.renderer.options.hydratable||this.chunks.claim.length>0){if(this.chunks.claim.length===0&&this.chunks.hydrate.length===0){properties.claim=noop;}else{properties.claim=x(_templateObject16(),this.chunks.claim,this.renderer.options.hydratable&&this.chunks.hydrate.length>0&&b(_templateObject17()));}}if(this.renderer.options.hydratable&&this.chunks.hydrate.length>0){properties.hydrate=x(_templateObject18(),this.chunks.hydrate);}if(this.chunks.mount.length===0){properties.mount=noop;}else if(this.event_listeners.length===0){properties.mount=x(_templateObject19(),this.chunks.mount);}else{properties.mount=x(_templateObject20(),this.chunks.mount);}if(this.has_update_method||this.maintain_context){if(this.chunks.update.length===0&&!this.maintain_context){properties.update=noop;}else{var ctx=this.maintain_context?x(_templateObject21()):x(_templateObject22());var dirty={type:'Identifier',name:'#dirty'};if(!this.renderer.context_overflow&&!this.parent){dirty={type:'ArrayPattern',elements:[dirty]};}properties.update=x(_templateObject23(),ctx,dirty,this.maintain_context&&b(_templateObject24(),ctx),this.chunks.update);}}if(this.has_animation){properties.measure=x(_templateObject25(),this.chunks.measure);properties.fix=x(_templateObject26(),this.chunks.fix);properties.animate=x(_templateObject27(),this.chunks.animate);}if(this.has_intro_method||this.has_outro_method){if(this.chunks.intro.length===0){properties.intro=noop;}else{properties.intro=x(_templateObject28(),this.has_outros&&b(_templateObject29()),this.chunks.intro);}if(this.chunks.outro.length===0){properties.outro=noop;}else{properties.outro=x(_templateObject30(),this.chunks.outro);}}if(this.chunks.destroy.length===0){properties.destroy=noop;}else{properties.destroy=x(_templateObject31(),this.chunks.destroy);}if(!this.renderer.component.compile_options.dev){// allow shorthand names\nfor(var name in properties){var property=properties[name];if(property)property.id=null;}}var return_value=x(_templateObject32(),properties.key,properties.first,properties.create,properties.claim,properties.hydrate,properties.mount,properties.update,properties.measure,properties.fix,properties.animate,properties.intro,properties.outro,properties.destroy);var block=dev&&this.get_unique_name('block');var body=b(_templateObject33(),this.chunks.declarations,Array.from(this.variables.values()).map(function(_ref3){var id=_ref3.id,init=_ref3.init;return init?b(_templateObject34(),id,init):b(_templateObject35(),id);}),this.chunks.init,dev?b(_templateObject36(),block,return_value,block,this.name||'create_fragment',this.type,this.comment?this.comment.replace(/\"/g,'\\\\\"'):'',block):b(_templateObject37(),return_value));return body;}},{key:\"has_content\",value:function has_content(){return!!this.first||this.event_listeners.length>0||this.chunks.intro.length>0||this.chunks.outro.length>0||this.chunks.create.length>0||this.chunks.hydrate.length>0||this.chunks.claim.length>0||this.chunks.mount.length>0||this.chunks.update.length>0||this.chunks.destroy.length>0||this.has_animation;}},{key:\"render\",value:function render(){var key=this.key&&this.get_unique_name('key');var args=[x(_templateObject38())];if(key)args.unshift(key);var fn=b(_templateObject39(),this.name,args,this.get_contents(key));return this.comment?b(_templateObject40(),this.comment,fn):fn;}},{key:\"render_listeners\",value:function render_listeners(){var chunk=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';if(this.event_listeners.length>0){this.add_variable({type:'Identifier',name:'#mounted'});this.chunks.destroy.push(b(_templateObject41()));var dispose={type:'Identifier',name:\"#dispose\".concat(chunk)};this.add_variable(dispose);if(this.event_listeners.length===1){this.chunks.mount.push(b(_templateObject42(),dispose,this.event_listeners[0]));this.chunks.destroy.push(b(_templateObject43(),dispose));}else{this.chunks.mount.push(b(_templateObject44(),dispose,this.event_listeners));this.chunks.destroy.push(b(_templateObject45(),dispose));}}}}]);return Block$1;}();var Wrapper=/*#__PURE__*/function(){function Wrapper(renderer,block,parent,node){(0,_classCallCheck2.default)(this,Wrapper);this.node=node;// make these non-enumerable so that they can be logged sensibly\n// (TODO in dev only?)\nObject.defineProperties(this,{renderer:{value:renderer},parent:{value:parent}});this.can_use_innerhtml=!renderer.options.hydratable;this.is_static_content=!renderer.options.hydratable;block.wrappers.push(this);}(0,_createClass2.default)(Wrapper,[{key:\"cannot_use_innerhtml\",value:function cannot_use_innerhtml(){this.can_use_innerhtml=false;if(this.parent)this.parent.cannot_use_innerhtml();}},{key:\"not_static_content\",value:function not_static_content(){this.is_static_content=false;if(this.parent)this.parent.not_static_content();}},{key:\"get_or_create_anchor\",value:function get_or_create_anchor(block,parent_node,parent_nodes){// TODO use this in EachBlock and IfBlock — tricky because\n// children need to be created first\nvar needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();var anchor=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||{type:'Identifier',name:'null'};if(needs_anchor){block.add_element(anchor,x(_templateObject46()),parent_nodes&&x(_templateObject47()),parent_node);}return anchor;}},{key:\"get_update_mount_node\",value:function get_update_mount_node(anchor){return this.parent&&this.parent.is_dom_node()?this.parent.var:x(_templateObject48(),anchor);}},{key:\"is_dom_node\",value:function is_dom_node(){return this.node.type==='Element'||this.node.type==='Text'||this.node.type==='MustacheTag';}},{key:\"render\",value:function render(_block,_parent_node,_parent_nodes){throw Error('Wrapper class is not renderable');}}]);return Wrapper;}();function create_debugging_comment(node,component){var locate=component.locate,source=component.source;var c=node.start;if(node.type==='ElseBlock'){while(source[c-1]!=='{'){c-=1;}while(source[c-1]==='{'){c-=1;}}var d;if(node.type==='InlineComponent'||node.type==='Element'){if(node.children.length){d=node.children[0].start;while(source[d-1]!=='>'){d-=1;}}else{d=node.start;while(source[d]!=='>'){d+=1;}d+=1;}}else if(node.type==='Text'||node.type==='Comment'){d=node.end;}else{// @ts-ignore\nd=node.expression?node.expression.node.end:c;while(source[d]!=='}'){d+=1;}while(source[d]==='}'){d+=1;}}var start=locate(c);var loc=\"(\".concat(start.line,\":\").concat(start.column,\")\");return\"\".concat(loc,\" \").concat(source.slice(c,d)).replace(/\\s/g,' ');}var AwaitBlockBranch=/*#__PURE__*/function(_Wrapper){(0,_inherits2.default)(AwaitBlockBranch,_Wrapper);var _super2=_createSuper(AwaitBlockBranch);function AwaitBlockBranch(status,renderer,block,parent,node,strip_whitespace,next_sibling){var _this4;(0,_classCallCheck2.default)(this,AwaitBlockBranch);_this4=_super2.call(this,renderer,block,parent,node);_this4.var=null;_this4.status=status;_this4.block=block.child({comment:create_debugging_comment(node,_this4.renderer.component),name:_this4.renderer.component.get_unique_name(\"create_\".concat(status,\"_block\")),type:status});_this4.add_context(parent.node[status+'_node'],parent.node[status+'_contexts']);_this4.fragment=new FragmentWrapper(renderer,_this4.block,_this4.node.children,parent,strip_whitespace,next_sibling);_this4.is_dynamic=_this4.block.dependencies.size>0;return _this4;}(0,_createClass2.default)(AwaitBlockBranch,[{key:\"add_context\",value:function add_context(node,contexts){var _this5=this;if(!node)return;if(node.type==='Identifier'){this.value=node.name;this.renderer.add_to_context(this.value,true);}else{contexts.forEach(function(context){_this5.renderer.add_to_context(context.key.name,true);});this.value=this.block.parent.get_unique_name('value').name;this.value_contexts=contexts;this.renderer.add_to_context(this.value,true);this.is_destructured=true;}this.value_index=this.renderer.context_lookup.get(this.value).index;}},{key:\"render\",value:function render(block,parent_node,parent_nodes){this.fragment.render(block,parent_node,parent_nodes);if(this.is_destructured){this.render_destructure();}}},{key:\"render_destructure\",value:function render_destructure(){var _this6=this;var props=this.value_contexts.map(function(prop){return b(_templateObject49(),_this6.block.renderer.context_lookup.get(prop.key.name).index,prop.modifier(x(_templateObject50(),_this6.value_index)));});var get_context=this.block.renderer.component.get_unique_name(\"get_\".concat(this.status,\"_context\"));this.block.renderer.blocks.push(b(_templateObject51(),get_context,props));this.block.chunks.declarations.push(b(_templateObject52(),get_context));if(this.block.has_update_method){this.block.chunks.update.push(b(_templateObject53(),get_context));}}}]);return AwaitBlockBranch;}(Wrapper);var AwaitBlockWrapper=/*#__PURE__*/function(_Wrapper2){(0,_inherits2.default)(AwaitBlockWrapper,_Wrapper2);var _super3=_createSuper(AwaitBlockWrapper);function AwaitBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this7;(0,_classCallCheck2.default)(this,AwaitBlockWrapper);_this7=_super3.call(this,renderer,block,parent,node);_this7.var={type:'Identifier',name:'await_block'};_this7.cannot_use_innerhtml();_this7.not_static_content();block.add_dependencies(_this7.node.expression.dependencies);var is_dynamic=false;var has_intros=false;var has_outros=false;['pending','then','catch'].forEach(function(status){var child=_this7.node[status];var branch=new AwaitBlockBranch(status,renderer,block,(0,_assertThisInitialized2.default)(_this7),child,strip_whitespace,next_sibling);renderer.blocks.push(branch.block);if(branch.is_dynamic){is_dynamic=true;// TODO should blocks update their own parents?\nblock.add_dependencies(branch.block.dependencies);}if(branch.block.has_intros)has_intros=true;if(branch.block.has_outros)has_outros=true;_this7[status]=branch;});['pending','then','catch'].forEach(function(status){_this7[status].block.has_update_method=is_dynamic;_this7[status].block.has_intro_method=has_intros;_this7[status].block.has_outro_method=has_outros;});if(has_outros){block.add_outro();}return _this7;}(0,_createClass2.default)(AwaitBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var anchor=this.get_or_create_anchor(block,parent_node,parent_nodes);var update_mount_node=this.get_update_mount_node(anchor);var snippet=this.node.expression.manipulate(block);var info=block.get_unique_name(\"info\");var promise=block.get_unique_name(\"promise\");block.add_variable(promise);block.maintain_context=true;var info_props=x(_templateObject54(),this.pending.block.name,this.then.block.name,this.catch.block.name,this.then.value_index,this.catch.value_index,this.pending.block.has_outro_method&&x(_templateObject55()));block.chunks.init.push(b(_templateObject56(),info,info_props));block.chunks.init.push(b(_templateObject57(),promise,snippet,info));block.chunks.create.push(b(_templateObject58(),info));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject59(),info,parent_nodes));}var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';var has_transitions=this.pending.block.has_intro_method||this.pending.block.has_outro_method;block.chunks.mount.push(b(_templateObject60(),info,initial_mount_node,info,anchor_node,info,update_mount_node,info,anchor));if(has_transitions){block.chunks.intro.push(b(_templateObject61(),info));}var dependencies=this.node.expression.dynamic_dependencies();if(dependencies.length>0){var condition=x(_templateObject62(),block.renderer.dirty(dependencies),promise,promise,snippet,promise,info);block.chunks.update.push(b(_templateObject63(),info));if(this.pending.block.has_update_method){block.chunks.update.push(b(_templateObject64(),condition,this.then.value&&b(_templateObject65(),this.then.value_index,info),info));}else{block.chunks.update.push(b(_templateObject66(),condition));}}else{if(this.pending.block.has_update_method){block.chunks.update.push(b(_templateObject67(),this.then.value&&b(_templateObject68(),this.then.value_index,info),info));}}if(this.pending.block.has_outro_method){block.chunks.outro.push(b(_templateObject69(),info));}block.chunks.destroy.push(b(_templateObject70(),info,parent_node?null:'detaching',info,info));[this.pending,this.then,this.catch].forEach(function(branch){branch.render(branch.block,null,x(_templateObject71()));});}}]);return AwaitBlockWrapper;}(Wrapper);var TRUE=x(_templateObject72());var FALSE=x(_templateObject73());var EventHandlerWrapper=/*#__PURE__*/function(){function EventHandlerWrapper(node,parent){(0,_classCallCheck2.default)(this,EventHandlerWrapper);this.node=node;this.parent=parent;if(!node.expression){this.parent.renderer.add_to_context(node.handler_name.name);this.parent.renderer.component.partly_hoisted.push(b(_templateObject74(),node.handler_name.name));}}(0,_createClass2.default)(EventHandlerWrapper,[{key:\"get_snippet\",value:function get_snippet(block){var snippet=this.node.expression?this.node.expression.manipulate(block):block.renderer.reference(this.node.handler_name);if(this.node.reassigned){block.maintain_context=true;return x(_templateObject75(),snippet,snippet);}return snippet;}},{key:\"render\",value:function render(block,target){var _this8=this;var snippet=this.get_snippet(block);if(this.node.modifiers.has('preventDefault'))snippet=x(_templateObject76(),snippet);if(this.node.modifiers.has('stopPropagation'))snippet=x(_templateObject77(),snippet);if(this.node.modifiers.has('self'))snippet=x(_templateObject78(),snippet);var args=[];var opts=['passive','once','capture'].filter(function(mod){return _this8.node.modifiers.has(mod);});if(opts.length){args.push(opts.length===1&&opts[0]==='capture'?TRUE:x(_templateObject79(),opts.map(function(opt){return p(_templateObject80(),opt);})));}else if(block.renderer.options.dev){args.push(FALSE);}if(block.renderer.options.dev){args.push(this.node.modifiers.has('preventDefault')?TRUE:FALSE);args.push(this.node.modifiers.has('stopPropagation')?TRUE:FALSE);}block.event_listeners.push(x(_templateObject81(),target,this.node.name,snippet,args));}}]);return EventHandlerWrapper;}();function add_event_handlers(block,target,handlers){handlers.forEach(function(handler){return add_event_handler(block,target,handler);});}function add_event_handler(block,target,handler){handler.render(block,target);}var BodyWrapper=/*#__PURE__*/function(_Wrapper3){(0,_inherits2.default)(BodyWrapper,_Wrapper3);var _super4=_createSuper(BodyWrapper);function BodyWrapper(renderer,block,parent,node){var _this9;(0,_classCallCheck2.default)(this,BodyWrapper);_this9=_super4.call(this,renderer,block,parent,node);_this9.handlers=_this9.node.handlers.map(function(handler){return new EventHandlerWrapper(handler,(0,_assertThisInitialized2.default)(_this9));});return _this9;}(0,_createClass2.default)(BodyWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){add_event_handlers(block,x(_templateObject82()),this.handlers);}}]);return BodyWrapper;}(Wrapper);function add_to_set(a,b){// @ts-ignore\nb.forEach(function(item){a.add(item);});}var DebugTagWrapper=/*#__PURE__*/function(_Wrapper4){(0,_inherits2.default)(DebugTagWrapper,_Wrapper4);var _super5=_createSuper(DebugTagWrapper);function DebugTagWrapper(renderer,block,parent,node,_strip_whitespace,_next_sibling){(0,_classCallCheck2.default)(this,DebugTagWrapper);return _super5.call(this,renderer,block,parent,node);}(0,_createClass2.default)(DebugTagWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var renderer=this.renderer;var component=renderer.component;if(!renderer.options.dev)return;var var_lookup=component.var_lookup;var start=component.locate(this.node.start+1);var end={line:start.line,column:start.column+6};var loc={start:start,end:end};var debug={type:'DebuggerStatement',loc:loc};if(this.node.expressions.length===0){// Debug all\nblock.chunks.create.push(debug);block.chunks.update.push(debug);}else{var log={type:'Identifier',name:'log',loc:loc};var dependencies=new Set();this.node.expressions.forEach(function(expression){add_to_set(dependencies,expression.dependencies);});var contextual_identifiers=this.node.expressions.filter(function(e){var variable=var_lookup.get(e.node.name);return!(variable&&variable.hoistable);}).map(function(e){return e.node.name;});var logged_identifiers=this.node.expressions.map(function(e){return p(_templateObject83(),e.node.name);});var debug_statements=b(_templateObject84(),contextual_identifiers.map(function(name){return b(_templateObject85(),name,renderer.reference(name));}),log,logged_identifiers);if(dependencies.size){var condition=renderer.dirty(Array.from(dependencies));block.chunks.update.push(b(_templateObject86(),condition,debug_statements));}block.chunks.create.push(b(_templateObject87(),debug_statements));}}}]);return DebugTagWrapper;}(Wrapper);var ElseBlockWrapper=/*#__PURE__*/function(_Wrapper5){(0,_inherits2.default)(ElseBlockWrapper,_Wrapper5);var _super6=_createSuper(ElseBlockWrapper);function ElseBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this10;(0,_classCallCheck2.default)(this,ElseBlockWrapper);_this10=_super6.call(this,renderer,block,parent,node);_this10.var=null;_this10.block=block.child({comment:create_debugging_comment(node,_this10.renderer.component),name:_this10.renderer.component.get_unique_name(\"create_else_block\"),type:'else'});_this10.fragment=new FragmentWrapper(renderer,_this10.block,_this10.node.children,parent,strip_whitespace,next_sibling);_this10.is_dynamic=_this10.block.dependencies.size>0;return _this10;}return ElseBlockWrapper;}(Wrapper);var EachBlockWrapper=/*#__PURE__*/function(_Wrapper6){(0,_inherits2.default)(EachBlockWrapper,_Wrapper6);var _super7=_createSuper(EachBlockWrapper);function EachBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this11;(0,_classCallCheck2.default)(this,EachBlockWrapper);_this11=_super7.call(this,renderer,block,parent,node);_this11.updates=[];_this11.var={type:'Identifier',name:'each'};_this11.cannot_use_innerhtml();_this11.not_static_content();var dependencies=node.expression.dependencies;block.add_dependencies(dependencies);_this11.node.contexts.forEach(function(context){renderer.add_to_context(context.key.name,true);});_this11.block=block.child({comment:create_debugging_comment(_this11.node,_this11.renderer.component),name:renderer.component.get_unique_name('create_each_block'),type:'each',// @ts-ignore todo: probably error\nkey:node.key,bindings:new Map(block.bindings)});// TODO this seems messy\n_this11.block.has_animation=_this11.node.has_animation;_this11.index_name=_this11.node.index?{type:'Identifier',name:_this11.node.index}:renderer.component.get_unique_name(\"\".concat(_this11.node.context,\"_index\"));var fixed_length=node.expression.node.type==='ArrayExpression'&&node.expression.node.elements.every(function(element){return element.type!=='SpreadElement';})?node.expression.node.elements.length:null;// hack the sourcemap, so that if data is missing the bug\n// is easy to find\nvar c=_this11.node.start+2;while(renderer.component.source[c]!=='e'){c+=1;}var start=renderer.component.locate(c);var end={line:start.line,column:start.column+4};var length={type:'Identifier',name:'length',loc:{start:start,end:end}};var each_block_value=renderer.component.get_unique_name(\"\".concat(_this11.var.name,\"_value\"));var iterations=block.get_unique_name(\"\".concat(_this11.var.name,\"_blocks\"));renderer.add_to_context(each_block_value.name,true);renderer.add_to_context(_this11.index_name.name,true);_this11.vars={create_each_block:_this11.block.name,each_block_value:each_block_value,get_each_context:renderer.component.get_unique_name(\"get_\".concat(_this11.var.name,\"_context\")),iterations:iterations,// optimisation for array literal\nfixed_length:fixed_length,data_length:fixed_length===null?x(_templateObject88(),each_block_value,length):fixed_length,view_length:fixed_length===null?x(_templateObject89(),iterations):fixed_length};var store=node.expression.node.type==='Identifier'&&node.expression.node.name[0]==='$'?node.expression.node.name.slice(1):null;node.contexts.forEach(function(prop){_this11.block.bindings.set(prop.key.name,{object:_this11.vars.each_block_value,property:_this11.index_name,modifier:prop.modifier,snippet:prop.modifier(x(_templateObject90(),_this11.vars.each_block_value,_this11.index_name)),store:store,tail:prop.modifier(x(_templateObject91(),_this11.index_name))});});if(_this11.node.index){_this11.block.get_unique_name(_this11.node.index);// this prevents name collisions (#1254)\n}renderer.blocks.push(_this11.block);_this11.fragment=new FragmentWrapper(renderer,_this11.block,node.children,(0,_assertThisInitialized2.default)(_this11),strip_whitespace,next_sibling);if(_this11.node.else){_this11.else=new ElseBlockWrapper(renderer,block,(0,_assertThisInitialized2.default)(_this11),_this11.node.else,strip_whitespace,next_sibling);renderer.blocks.push(_this11.else.block);if(_this11.else.is_dynamic){_this11.block.add_dependencies(_this11.else.block.dependencies);}}block.add_dependencies(_this11.block.dependencies);if(_this11.block.has_outros||_this11.else&&_this11.else.block.has_outros){block.add_outro();}return _this11;}(0,_createClass2.default)(EachBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){if(this.fragment.nodes.length===0)return;var renderer=this.renderer;var component=renderer.component;var needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();this.context_props=this.node.contexts.map(function(prop){return b(_templateObject92(),renderer.context_lookup.get(prop.key.name).index,prop.modifier(x(_templateObject93())));});if(this.node.has_binding)this.context_props.push(b(_templateObject94(),renderer.context_lookup.get(this.vars.each_block_value.name).index));if(this.node.has_binding||this.node.has_index_binding||this.node.index)this.context_props.push(b(_templateObject95(),renderer.context_lookup.get(this.index_name.name).index));var snippet=this.node.expression.manipulate(block);block.chunks.init.push(b(_templateObject96(),this.vars.each_block_value,snippet));if(this.renderer.options.dev){block.chunks.init.push(b(_templateObject97(),this.vars.each_block_value));}// TODO which is better — Object.create(array) or array.slice()?\nrenderer.blocks.push(b(_templateObject98(),this.vars.get_each_context,this.context_props));var initial_anchor_node={type:'Identifier',name:parent_node?'null':'#anchor'};var initial_mount_node=parent_node||{type:'Identifier',name:'#target'};var update_anchor_node=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||{type:'Identifier',name:'null'};var update_mount_node=this.get_update_mount_node(update_anchor_node);var args={block:block,parent_node:parent_node,parent_nodes:parent_nodes,snippet:snippet,initial_anchor_node:initial_anchor_node,initial_mount_node:initial_mount_node,update_anchor_node:update_anchor_node,update_mount_node:update_mount_node};var all_dependencies=new Set(this.block.dependencies);// TODO should be dynamic deps only\nthis.node.expression.dynamic_dependencies().forEach(function(dependency){all_dependencies.add(dependency);});this.dependencies=all_dependencies;if(this.node.key){this.render_keyed(args);}else{this.render_unkeyed(args);}if(this.block.has_intro_method||this.block.has_outro_method){block.chunks.intro.push(b(_templateObject99(),this.vars.data_length,this.vars.iterations));}if(needs_anchor){block.add_element(update_anchor_node,x(_templateObject100()),parent_nodes&&x(_templateObject101()),parent_node);}if(this.else){var each_block_else=component.get_unique_name(\"\".concat(this.var.name,\"_else\"));block.chunks.init.push(b(_templateObject102(),each_block_else));// TODO neaten this up... will end up with an empty line in the block\nblock.chunks.init.push(b(_templateObject103(),this.vars.data_length,each_block_else,this.else.block.name));block.chunks.create.push(b(_templateObject104(),each_block_else,each_block_else));if(this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject105(),each_block_else,each_block_else,parent_nodes));}block.chunks.mount.push(b(_templateObject106(),each_block_else,each_block_else,initial_mount_node,initial_anchor_node));var has_transitions=!!(this.else.block.has_intro_method||this.else.block.has_outro_method);var destroy_block_else=this.else.block.has_outro_method?b(_templateObject107(),each_block_else,each_block_else):b(_templateObject108(),each_block_else,each_block_else);if(this.else.block.has_update_method){this.updates.push(b(_templateObject109(),this.vars.data_length,each_block_else,each_block_else,this.vars.data_length,each_block_else,this.else.block.name,each_block_else,has_transitions&&b(_templateObject110(),each_block_else),each_block_else,update_mount_node,update_anchor_node,each_block_else,destroy_block_else));}else{this.updates.push(b(_templateObject111(),this.vars.data_length,each_block_else,destroy_block_else,each_block_else,each_block_else,this.else.block.name,each_block_else,has_transitions&&b(_templateObject112(),each_block_else),each_block_else,update_mount_node,update_anchor_node));}block.chunks.destroy.push(b(_templateObject113(),each_block_else,each_block_else,parent_node?'':'detaching'));}if(this.updates.length){block.chunks.update.push(b(_templateObject114(),block.renderer.dirty(Array.from(all_dependencies)),this.updates));}this.fragment.render(this.block,null,x(_templateObject115()));if(this.else){this.else.fragment.render(this.else.block,null,x(_templateObject116()));}}},{key:\"render_keyed\",value:function render_keyed(_ref4){var block=_ref4.block,parent_node=_ref4.parent_node,parent_nodes=_ref4.parent_nodes,snippet=_ref4.snippet,initial_anchor_node=_ref4.initial_anchor_node,initial_mount_node=_ref4.initial_mount_node,update_anchor_node=_ref4.update_anchor_node,update_mount_node=_ref4.update_mount_node;var _this$vars=this.vars,create_each_block=_this$vars.create_each_block,iterations=_this$vars.iterations,data_length=_this$vars.data_length,view_length=_this$vars.view_length;var get_key=block.get_unique_name('get_key');var lookup=block.get_unique_name(\"\".concat(this.var.name,\"_lookup\"));block.add_variable(iterations,x(_templateObject117()));block.add_variable(lookup,x(_templateObject118()));if(this.fragment.nodes[0].is_dom_node()){this.block.first=this.fragment.nodes[0].var;}else{this.block.first=this.block.get_unique_name('first');this.block.add_element(this.block.first,x(_templateObject119()),parent_nodes&&x(_templateObject120()),null);}block.chunks.init.push(b(_templateObject121(),get_key,this.node.key.manipulate(block),this.renderer.options.dev&&b(_templateObject122(),this.vars.each_block_value,this.vars.get_each_context,get_key),data_length,this.vars.get_each_context,this.vars.each_block_value,get_key,lookup,iterations,create_each_block));block.chunks.create.push(b(_templateObject123(),view_length,iterations));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject124(),view_length,iterations,parent_nodes));}block.chunks.mount.push(b(_templateObject125(),view_length,iterations,initial_mount_node,initial_anchor_node));var dynamic=this.block.has_update_method;var destroy=this.node.has_animation?this.block.has_outros?\"@fix_and_outro_and_destroy_block\":\"@fix_and_destroy_block\":this.block.has_outros?\"@outro_and_destroy_block\":\"@destroy_block\";if(this.dependencies.size){this.updates.push(b(_templateObject126(),this.vars.each_block_value,snippet,this.renderer.options.dev&&b(_templateObject127(),this.vars.each_block_value),this.block.has_outros&&b(_templateObject128()),this.node.has_animation&&b(_templateObject129(),view_length,iterations),this.renderer.options.dev&&b(_templateObject130(),this.vars.each_block_value,this.vars.get_each_context,get_key),iterations,iterations,get_key,dynamic?1:0,this.vars.each_block_value,lookup,update_mount_node,destroy,create_each_block,update_anchor_node,this.vars.get_each_context,this.node.has_animation&&b(_templateObject131(),view_length,iterations),this.block.has_outros&&b(_templateObject132())));}if(this.block.has_outros){block.chunks.outro.push(b(_templateObject133(),view_length,iterations));}block.chunks.destroy.push(b(_templateObject134(),view_length,iterations,parent_node?null:'detaching'));}},{key:\"render_unkeyed\",value:function render_unkeyed(_ref5){var block=_ref5.block,parent_nodes=_ref5.parent_nodes,snippet=_ref5.snippet,initial_anchor_node=_ref5.initial_anchor_node,initial_mount_node=_ref5.initial_mount_node,update_anchor_node=_ref5.update_anchor_node,update_mount_node=_ref5.update_mount_node;var _this$vars2=this.vars,create_each_block=_this$vars2.create_each_block,iterations=_this$vars2.iterations,fixed_length=_this$vars2.fixed_length,data_length=_this$vars2.data_length,view_length=_this$vars2.view_length;block.chunks.init.push(b(_templateObject135(),iterations,data_length,iterations,create_each_block,this.vars.get_each_context,this.vars.each_block_value));block.chunks.create.push(b(_templateObject136(),view_length,iterations));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject137(),view_length,iterations,parent_nodes));}block.chunks.mount.push(b(_templateObject138(),view_length,iterations,initial_mount_node,initial_anchor_node));if(this.dependencies.size){var has_transitions=!!(this.block.has_intro_method||this.block.has_outro_method);var for_loop_body=this.block.has_update_method?b(_templateObject139(),iterations,iterations,has_transitions&&b(_templateObject140(),this.vars.iterations),iterations,create_each_block,iterations,has_transitions&&b(_templateObject141(),this.vars.iterations),iterations,update_mount_node,update_anchor_node):has_transitions?b(_templateObject142(),iterations,this.vars.iterations,iterations,create_each_block,iterations,this.vars.iterations,iterations,update_mount_node,update_anchor_node):b(_templateObject143(),iterations,iterations,create_each_block,iterations,iterations,update_mount_node,update_anchor_node);var start=this.block.has_update_method?0:\"#old_length\";var remove_old_blocks;if(this.block.has_outros){var out=block.get_unique_name('out');block.chunks.init.push(b(_templateObject144(),out,iterations,iterations));remove_old_blocks=b(_templateObject145(),data_length,view_length,out);}else{remove_old_blocks=b(_templateObject146(),this.block.has_update_method?null:x(_templateObject147(),data_length),this.block.has_update_method?view_length:'#old_length',iterations,!fixed_length&&b(_templateObject148(),view_length,data_length));}// We declare `i` as block scoped here, as the `remove_old_blocks` code\n// may rely on continuing where this iteration stopped.\nvar update=b(_templateObject149(),!this.block.has_update_method&&b(_templateObject150(),this.vars.each_block_value),this.vars.each_block_value,snippet,this.renderer.options.dev&&b(_templateObject151(),this.vars.each_block_value),start,data_length,this.vars.get_each_context,this.vars.each_block_value,for_loop_body,remove_old_blocks);this.updates.push(update);}if(this.block.has_outros){block.chunks.outro.push(b(_templateObject152(),iterations,iterations,view_length,iterations));}block.chunks.destroy.push(b(_templateObject153(),iterations));}}]);return EachBlockWrapper;}(Wrapper);function string_literal(data){return{type:'Literal',value:data};}var escaped={'\"':'&quot;',\"'\":'&#39;','&':'&amp;','<':'&lt;','>':'&gt;'};function escape_html(html){return String(html).replace(/[\"'&<>]/g,function(match){return escaped[match];});}function escape_template(str){return str.replace(/(\\${|`|\\\\)/g,'\\\\$1');}var TextWrapper=/*#__PURE__*/function(_Wrapper7){(0,_inherits2.default)(TextWrapper,_Wrapper7);var _super8=_createSuper(TextWrapper);function TextWrapper(renderer,block,parent,node,data){var _this12;(0,_classCallCheck2.default)(this,TextWrapper);_this12=_super8.call(this,renderer,block,parent,node);_this12.skip=_this12.node.should_skip();_this12.data=data;_this12.var=_this12.skip?null:x(_templateObject154());return _this12;}(0,_createClass2.default)(TextWrapper,[{key:\"use_space\",value:function use_space(){if(this.renderer.component.component_options.preserveWhitespace)return false;if(/[\\S\\u00A0]/.test(this.data))return false;var node=this.parent&&this.parent.node;while(node){if(node.type==='Element'&&node.name==='pre'){return false;}node=node.parent;}return true;}},{key:\"render\",value:function render(block,parent_node,parent_nodes){if(this.skip)return;var use_space=this.use_space();block.add_element(this.var,use_space?x(_templateObject155()):x(_templateObject156(),this.data),parent_nodes&&(use_space?x(_templateObject157(),parent_nodes):x(_templateObject158(),parent_nodes,this.data)),parent_node);}}]);return TextWrapper;}(Wrapper);var svg_attributes='accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');var svg_attribute_lookup=new Map();svg_attributes.forEach(function(name){svg_attribute_lookup.set(name.toLowerCase(),name);});function fix_attribute_casing(name){name=name.toLowerCase();return svg_attribute_lookup.get(name)||name;}var html='http://www.w3.org/1999/xhtml';var mathml='http://www.w3.org/1998/Math/MathML';var svg='http://www.w3.org/2000/svg';var xlink='http://www.w3.org/1999/xlink';var xml='http://www.w3.org/XML/1998/namespace';var xmlns='http://www.w3.org/2000/xmlns';var valid_namespaces=['html','mathml','svg','xlink','xml','xmlns',html,mathml,svg,xlink,xml,xmlns];var namespaces={html:html,mathml:mathml,svg:svg,xlink:xlink,xml:xml,xmlns:xmlns};function handle_select_value_binding(attr,dependencies){var parent=attr.parent;if(parent.node.name===\"select\"){parent.select_binding_dependencies=dependencies;dependencies.forEach(function(prop){parent.renderer.component.indirect_dependencies.set(prop,new Set());});}}var BaseAttributeWrapper=/*#__PURE__*/function(){function BaseAttributeWrapper(parent,block,node){(0,_classCallCheck2.default)(this,BaseAttributeWrapper);this.node=node;this.parent=parent;if(node.dependencies.size>0){parent.cannot_use_innerhtml();parent.not_static_content();block.add_dependencies(node.dependencies);}}(0,_createClass2.default)(BaseAttributeWrapper,[{key:\"render\",value:function render(_block){}}]);return BaseAttributeWrapper;}();var AttributeWrapper=/*#__PURE__*/function(_BaseAttributeWrapper){(0,_inherits2.default)(AttributeWrapper,_BaseAttributeWrapper);var _super9=_createSuper(AttributeWrapper);function AttributeWrapper(parent,block,node){var _this13;(0,_classCallCheck2.default)(this,AttributeWrapper);_this13=_super9.call(this,parent,block,node);if(node.dependencies.size>0){// special case — <option value={foo}> — see below\nif(_this13.parent.node.name==='option'&&node.name==='value'){var select=_this13.parent;while(select&&(select.node.type!=='Element'||select.node.name!=='select')){// @ts-ignore todo: doublecheck this, but looks to be correct\nselect=select.parent;}if(select&&select.select_binding_dependencies){select.select_binding_dependencies.forEach(function(prop){_this13.node.dependencies.forEach(function(dependency){_this13.parent.renderer.component.indirect_dependencies.get(prop).add(dependency);});});}}if(node.name==='value'){handle_select_value_binding((0,_assertThisInitialized2.default)(_this13),node.dependencies);}}_this13.name=fix_attribute_casing(_this13.node.name);_this13.metadata=_this13.get_metadata();_this13.is_indirectly_bound_value=is_indirectly_bound_value((0,_assertThisInitialized2.default)(_this13));_this13.property_name=_this13.is_indirectly_bound_value?'__value':_this13.metadata&&_this13.metadata.property_name;_this13.is_src=_this13.name==='src';// TODO retire this exception in favour of https://github.com/sveltejs/svelte/issues/3750\n_this13.is_select_value_attribute=_this13.name==='value'&&_this13.parent.node.name==='select';_this13.is_input_value=_this13.name==='value'&&_this13.parent.node.name==='input';_this13.should_cache=should_cache((0,_assertThisInitialized2.default)(_this13));return _this13;}(0,_createClass2.default)(AttributeWrapper,[{key:\"render\",value:function render(block){var element=this.parent;var name=this.name,property_name=this.property_name,should_cache=this.should_cache,is_indirectly_bound_value=this.is_indirectly_bound_value;// xlink is a special case... we could maybe extend this to generic\n// namespaced attributes but I'm not sure that's applicable in\n// HTML5?\nvar method=/-/.test(element.node.name)?'@set_custom_element_data':name.slice(0,6)==='xlink:'?'@xlink_attr':'@attr';var is_legacy_input_type=element.renderer.component.compile_options.legacy&&name==='type'&&this.parent.node.name==='input';var dependencies=this.get_dependencies();var value=this.get_value(block);var updater;var init=this.get_init(block,value);if(is_legacy_input_type){block.chunks.hydrate.push(b(_templateObject159(),element.var,init));updater=b(_templateObject160(),element.var,should_cache?this.last:value);}else if(this.is_select_value_attribute){// annoying special case\nvar is_multiple_select=element.node.get_static_attribute_value('multiple');if(is_multiple_select){updater=b(_templateObject161(),element.var,value);}else{updater=b(_templateObject162(),element.var,value);}block.chunks.mount.push(b(_templateObject163(),updater));}else if(this.is_src){block.chunks.hydrate.push(b(_templateObject164(),element.var,init,method,element.var,name,this.last));updater=b(_templateObject165(),method,element.var,name,should_cache?this.last:value);}else if(property_name){block.chunks.hydrate.push(b(_templateObject166(),element.var,property_name,init));updater=block.renderer.options.dev?b(_templateObject167(),element.var,property_name,should_cache?this.last:value):b(_templateObject168(),element.var,property_name,should_cache?this.last:value);}else{block.chunks.hydrate.push(b(_templateObject169(),method,element.var,name,init));updater=b(_templateObject170(),method,element.var,name,should_cache?this.last:value);}if(is_indirectly_bound_value){var update_value=b(_templateObject171(),element.var,element.var);block.chunks.hydrate.push(update_value);updater=b(_templateObject172(),updater,update_value);}if(dependencies.length>0){var condition=this.get_dom_update_conditions(block,block.renderer.dirty(dependencies));block.chunks.update.push(b(_templateObject173(),condition,updater));}// special case – autofocus. has to be handled in a bit of a weird way\nif(this.node.is_true&&name==='autofocus'){block.autofocus=element.var;}}},{key:\"get_init\",value:function get_init(block,value){this.last=this.should_cache&&block.get_unique_name(\"\".concat(this.parent.var.name,\"_\").concat(this.name.replace(/[^a-zA-Z_$]/g,'_'),\"_value\"));if(this.should_cache)block.add_variable(this.last);return this.should_cache?x(_templateObject174(),this.last,value):value;}},{key:\"get_dom_update_conditions\",value:function get_dom_update_conditions(block,dependency_condition){var property_name=this.property_name,should_cache=this.should_cache,last=this.last;var element=this.parent;var value=this.get_value(block);var condition=dependency_condition;if(should_cache){condition=this.is_src?x(_templateObject175(),condition,element.var,last,value):x(_templateObject176(),condition,last,last,value);}if(this.is_input_value){var type=element.node.get_static_attribute_value('type');if(type===null||type===\"\"||type===\"text\"||type===\"email\"||type===\"password\"){condition=x(_templateObject177(),condition,element.var,property_name,should_cache?last:value);}}if(block.has_outros){condition=x(_templateObject178(),condition);}return condition;}},{key:\"get_dependencies\",value:function get_dependencies(){var _this14=this;var node_dependencies=this.node.get_dependencies();var dependencies=new Set(node_dependencies);node_dependencies.forEach(function(prop){var indirect_dependencies=_this14.parent.renderer.component.indirect_dependencies.get(prop);if(indirect_dependencies){indirect_dependencies.forEach(function(indirect_dependency){dependencies.add(indirect_dependency);});}});return Array.from(dependencies);}},{key:\"get_metadata\",value:function get_metadata(){if(this.parent.node.namespace)return null;var metadata=attribute_lookup[this.name];if(metadata&&metadata.applies_to&&!metadata.applies_to.includes(this.parent.node.name))return null;return metadata;}},{key:\"get_value\",value:function get_value(block){if(this.node.is_true){if(this.metadata&&boolean_attribute.has(this.metadata.property_name.toLowerCase())){return x(_templateObject179());}return x(_templateObject180());}if(this.node.chunks.length===0)return x(_templateObject181());// TODO some of this code is repeated in Tag.ts — would be good to\n// DRY it out if that's possible without introducing crazy indirection\nif(this.node.chunks.length===1){return this.node.chunks[0].type==='Text'?string_literal(this.node.chunks[0].data):this.node.chunks[0].manipulate(block);}var value=this.node.name==='class'?this.get_class_name_text(block):this.render_chunks(block).reduce(function(lhs,rhs){return x(_templateObject182(),lhs,rhs);});// '{foo} {bar}' — treat as string concatenation\nif(this.node.chunks[0].type!=='Text'){value=x(_templateObject183(),value);}return value;}},{key:\"get_class_name_text\",value:function get_class_name_text(block){var scoped_css=this.node.chunks.some(function(chunk){return chunk.synthetic;});var rendered=this.render_chunks(block);if(scoped_css&&rendered.length===2){// we have a situation like class={possiblyUndefined}\nrendered[0]=x(_templateObject184(),rendered[0]);}return rendered.reduce(function(lhs,rhs){return x(_templateObject185(),lhs,rhs);});}},{key:\"render_chunks\",value:function render_chunks(block){return this.node.chunks.map(function(chunk){if(chunk.type==='Text'){return string_literal(chunk.data);}return chunk.manipulate(block);});}},{key:\"stringify\",value:function stringify(){if(this.node.is_true)return'';var value=this.node.chunks;if(value.length===0)return\"=\\\"\\\"\";return\"=\\\"\".concat(value.map(function(chunk){return chunk.type==='Text'?chunk.data.replace(/\"/g,'\\\\\"'):\"${\".concat(chunk.manipulate(),\"}\");}).join(''),\"\\\"\");}}]);return AttributeWrapper;}(BaseAttributeWrapper);// source: https://html.spec.whatwg.org/multipage/indices.html\nvar attribute_lookup={allowfullscreen:{property_name:'allowFullscreen',applies_to:['iframe']},allowpaymentrequest:{property_name:'allowPaymentRequest',applies_to:['iframe']},async:{applies_to:['script']},autofocus:{applies_to:['button','input','keygen','select','textarea']},autoplay:{applies_to:['audio','video']},checked:{applies_to:['input']},controls:{applies_to:['audio','video']},default:{applies_to:['track']},defer:{applies_to:['script']},disabled:{applies_to:['button','fieldset','input','keygen','optgroup','option','select','textarea']},formnovalidate:{property_name:'formNoValidate',applies_to:['button','input']},hidden:{},indeterminate:{applies_to:['input']},ismap:{property_name:'isMap',applies_to:['img']},loop:{applies_to:['audio','bgsound','video']},multiple:{applies_to:['input','select']},muted:{applies_to:['audio','video']},nomodule:{property_name:'noModule',applies_to:['script']},novalidate:{property_name:'noValidate',applies_to:['form']},open:{applies_to:['details','dialog']},playsinline:{property_name:'playsInline',applies_to:['video']},readonly:{property_name:'readOnly',applies_to:['input','textarea']},required:{applies_to:['input','select','textarea']},reversed:{applies_to:['ol']},selected:{applies_to:['option']},value:{applies_to:['button','option','input','li','meter','progress','param','select','textarea']}};Object.keys(attribute_lookup).forEach(function(name){var metadata=attribute_lookup[name];if(!metadata.property_name)metadata.property_name=name;});// source: https://html.spec.whatwg.org/multipage/indices.html\nvar boolean_attribute=new Set(['allowfullscreen','allowpaymentrequest','async','autofocus','autoplay','checked','controls','default','defer','disabled','formnovalidate','hidden','ismap','itemscope','loop','multiple','muted','nomodule','novalidate','open','playsinline','readonly','required','reversed','selected']);function should_cache(attribute){return attribute.is_src||attribute.node.should_cache();}function is_indirectly_bound_value(attribute){var element=attribute.parent;return attribute.name==='value'&&(element.node.name==='option'||// TODO check it's actually bound\nelement.node.name==='input'&&element.node.bindings.some(function(binding){return /checked|group/.test(binding.name);}));}var StyleAttributeWrapper=/*#__PURE__*/function(_AttributeWrapper){(0,_inherits2.default)(StyleAttributeWrapper,_AttributeWrapper);var _super10=_createSuper(StyleAttributeWrapper);function StyleAttributeWrapper(){(0,_classCallCheck2.default)(this,StyleAttributeWrapper);return _super10.apply(this,arguments);}(0,_createClass2.default)(StyleAttributeWrapper,[{key:\"render\",value:function render(block){var _this15=this;var style_props=optimize_style(this.node.chunks);if(!style_props)return(0,_get2.default)((0,_getPrototypeOf2.default)(StyleAttributeWrapper.prototype),\"render\",this).call(this,block);style_props.forEach(function(prop){var value;if(is_dynamic(prop.value)){var prop_dependencies=new Set();value=prop.value.map(function(chunk){if(chunk.type==='Text'){return string_literal(chunk.data);}else{add_to_set(prop_dependencies,chunk.dynamic_dependencies());return chunk.manipulate(block);}}).reduce(function(lhs,rhs){return x(_templateObject186(),lhs,rhs);});// TODO is this necessary? style.setProperty always treats value as string, no?\n// if (prop.value.length === 1 || prop.value[0].type !== 'Text') {\n// \tvalue = x`\"\" + ${value}`;\n// }\nif(prop_dependencies.size){var condition=block.renderer.dirty(Array.from(prop_dependencies));if(block.has_outros){condition=x(_templateObject187(),condition);}var update=b(_templateObject188(),condition,_this15.parent.var,prop.key,value,prop.important?1:null);block.chunks.update.push(update);}}else{value=string_literal(prop.value[0].data);}block.chunks.hydrate.push(b(_templateObject189(),_this15.parent.var,prop.key,value,prop.important?1:null));});}}]);return StyleAttributeWrapper;}(AttributeWrapper);function optimize_style(value){var props=[];var chunks=value.slice();while(chunks.length){var chunk=chunks[0];if(chunk.type!=='Text')return null;var key_match=/^\\s*([\\w-]+):\\s*/.exec(chunk.data);if(!key_match)return null;var key=key_match[1];var offset=key_match.index+key_match[0].length;var remaining_data=chunk.data.slice(offset);if(remaining_data){chunks[0]={start:chunk.start+offset,end:chunk.end,type:'Text',data:remaining_data};}else{chunks.shift();}var result=get_style_value(chunks);props.push({key:key,value:result.value,important:result.important});chunks=result.chunks;}return props;}function get_style_value(chunks){var value=[];var in_url=false;var quote_mark=null;var escaped=false;var closed=false;while(chunks.length&&!closed){var chunk=chunks.shift();if(chunk.type==='Text'){var _c=0;while(_c<chunk.data.length){var char=chunk.data[_c];if(escaped){escaped=false;}else if(char==='\\\\'){escaped=true;}else if(char===quote_mark){quote_mark=null;}else if(char==='\"'||char===\"'\"){quote_mark=char;}else if(char===')'&&in_url){in_url=false;}else if(char==='u'&&chunk.data.slice(_c,_c+4)==='url('){in_url=true;}else if(char===';'&&!in_url&&!quote_mark){closed=true;break;}_c+=1;}if(_c>0){value.push({type:'Text',start:chunk.start,end:chunk.start+_c,data:chunk.data.slice(0,_c)});}while(/[;\\s]/.test(chunk.data[_c])){_c+=1;}var remaining_data=chunk.data.slice(_c);if(remaining_data){chunks.unshift({start:chunk.start+_c,end:chunk.end,type:'Text',data:remaining_data});break;}}else{value.push(chunk);}}var important=false;var last_chunk=value[value.length-1];if(last_chunk&&last_chunk.type==='Text'&&/\\s*!important\\s*$/.test(last_chunk.data)){important=true;last_chunk.data=last_chunk.data.replace(/\\s*!important\\s*$/,'');if(!last_chunk.data)value.pop();}return{chunks:chunks,value:value,important:important};}function is_dynamic(value){return value.length>1||value[0].type!=='Text';}var SpreadAttributeWrapper=/*#__PURE__*/function(_BaseAttributeWrapper2){(0,_inherits2.default)(SpreadAttributeWrapper,_BaseAttributeWrapper2);var _super11=_createSuper(SpreadAttributeWrapper);function SpreadAttributeWrapper(){(0,_classCallCheck2.default)(this,SpreadAttributeWrapper);return _super11.apply(this,arguments);}return SpreadAttributeWrapper;}(BaseAttributeWrapper);function get_object(node){while(node.type==='MemberExpression'){node=node.object;}return node;}function replace_object(node,replacement){if(node.type==='Identifier')return replacement;var ancestor=node;var parent;while(node.type==='MemberExpression'){parent=node;node=node.object;}parent.object=replacement;return ancestor;}function flatten_reference(node){var nodes=[];var parts=[];while(node.type==='MemberExpression'){nodes.unshift(node.property);if(!node.computed){parts.unshift(node.property.name);}else{var computed_property=to_string$1(node.property);if(computed_property){parts.unshift(\"[\".concat(computed_property,\"]\"));}}node=node.object;}var name=node.type==='Identifier'?node.name:node.type==='ThisExpression'?'this':null;nodes.unshift(node);parts.unshift(name);return{name:name,nodes:nodes,parts:parts};}function to_string$1(node){switch(node.type){case'Literal':return String(node.value);case'Identifier':return node.name;}}function mark_each_block_bindings(parent,binding){// we need to ensure that the each block creates a context including\n// the list and the index, if they're not otherwise referenced\nbinding.expression.references.forEach(function(name){var each_block=parent.node.scope.get_owner(name);if(each_block){each_block.has_binding=true;}});if(binding.name===\"group\"){// for `<input bind:group={} >`, we make sure that all the each blocks creates context with `index`\nvar _iterator=_createForOfIteratorHelper(binding.expression.contextual_dependencies),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var name=_step.value;var each_block=parent.node.scope.get_owner(name);each_block.has_index_binding=true;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}var BindingWrapper=/*#__PURE__*/function(){function BindingWrapper(block,node,parent){(0,_classCallCheck2.default)(this,BindingWrapper);this.node=node;this.parent=parent;var dependencies=this.node.expression.dependencies;block.add_dependencies(dependencies);// TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?\nhandle_select_value_binding(this,dependencies);if(node.is_contextual){mark_each_block_bindings(this.parent,this.node);}this.object=get_object(this.node.expression.node).name;// view to model\nthis.handler=get_event_handler(this,parent.renderer,block,this.object,this.node.raw_expression);this.snippet=this.node.expression.manipulate(block);this.is_readonly=this.node.is_readonly;this.needs_lock=this.node.name==='currentTime';// TODO others?\n}(0,_createClass2.default)(BindingWrapper,[{key:\"get_dependencies\",value:function get_dependencies(){var _this16=this;var dependencies=new Set(this.node.expression.dependencies);this.node.expression.dependencies.forEach(function(prop){var indirect_dependencies=_this16.parent.renderer.component.indirect_dependencies.get(prop);if(indirect_dependencies){indirect_dependencies.forEach(function(indirect_dependency){dependencies.add(indirect_dependency);});}});return dependencies;}},{key:\"is_readonly_media_attribute\",value:function is_readonly_media_attribute(){return this.node.is_readonly_media_attribute();}},{key:\"render\",value:function render(block,lock){if(this.is_readonly)return;var parent=this.parent;var update_conditions=this.needs_lock?[x(_templateObject190(),lock)]:[];var mount_conditions=[];var dependency_array=Array.from(this.get_dependencies());if(dependency_array.length>0){update_conditions.push(block.renderer.dirty(dependency_array));}if(parent.node.name===\"input\"){var type=parent.node.get_static_attribute_value(\"type\");if(type===null||type===\"\"||type===\"text\"||type===\"email\"||type===\"password\"){update_conditions.push(x(_templateObject191(),parent.var,this.node.name,this.snippet));}else if(type===\"number\"){update_conditions.push(x(_templateObject192(),parent.var,this.node.name,this.snippet));}}// model to view\nvar update_dom=get_dom_updater(parent,this);var mount_dom=update_dom;// special cases\nswitch(this.node.name){case'group':{var _get_binding_group=get_binding_group(parent.renderer,this.node,block),binding_group=_get_binding_group.binding_group,is_context=_get_binding_group.is_context,contexts=_get_binding_group.contexts,index=_get_binding_group.index;block.renderer.add_to_context(\"$$binding_groups\");if(is_context){if(contexts.length>1){var _binding_group=x(_templateObject193(),block.renderer.reference('$$binding_groups'),index);var _iterator2=_createForOfIteratorHelper(contexts.slice(0,-1)),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var name=_step2.value;_binding_group=x(_templateObject194(),_binding_group,block.renderer.reference(name));block.chunks.init.push(b(_templateObject195(),_binding_group,_binding_group));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}block.chunks.init.push(b(_templateObject196(),binding_group(true)));}block.chunks.hydrate.push(b(_templateObject197(),binding_group(true),parent.var));block.chunks.destroy.push(b(_templateObject198(),binding_group(true),binding_group(true),parent.var));break;}case'textContent':update_conditions.push(x(_templateObject199(),this.snippet,parent.var));mount_conditions.push(x(_templateObject200(),this.snippet));break;case'innerHTML':update_conditions.push(x(_templateObject201(),this.snippet,parent.var));mount_conditions.push(x(_templateObject202(),this.snippet));break;case'currentTime':update_conditions.push(x(_templateObject203(),this.snippet));mount_dom=null;break;case'playbackRate':case'volume':update_conditions.push(x(_templateObject204(),this.snippet));mount_conditions.push(x(_templateObject205(),this.snippet));break;case'paused':{// this is necessary to prevent audio restarting by itself\nvar last=block.get_unique_name(\"\".concat(parent.var.name,\"_is_paused\"));block.add_variable(last,x(_templateObject206()));update_conditions.push(x(_templateObject207(),last,last,this.snippet));update_dom=b(_templateObject208(),parent.var,last);mount_dom=null;break;}case'value':if(parent.node.get_static_attribute_value('type')==='file'){update_dom=null;mount_dom=null;}}if(update_dom){if(update_conditions.length>0){var condition=update_conditions.reduce(function(lhs,rhs){return x(_templateObject209(),lhs,rhs);});block.chunks.update.push(b(_templateObject210(),condition,update_dom));}else{block.chunks.update.push(update_dom);}}if(mount_dom){if(mount_conditions.length>0){var _condition=mount_conditions.reduce(function(lhs,rhs){return x(_templateObject211(),lhs,rhs);});block.chunks.mount.push(b(_templateObject212(),_condition,mount_dom));}else{block.chunks.mount.push(mount_dom);}}}}]);return BindingWrapper;}();function get_dom_updater(element,binding){var node=element.node;if(binding.is_readonly_media_attribute()){return null;}if(binding.node.name==='this'){return null;}if(node.name==='select'){return node.get_static_attribute_value('multiple')===true?b(_templateObject213(),element.var,binding.snippet):b(_templateObject214(),element.var,binding.snippet);}if(binding.node.name==='group'){var type=node.get_static_attribute_value('type');var condition=type==='checkbox'?x(_templateObject215(),binding.snippet,element.var):x(_templateObject216(),element.var,binding.snippet);return b(_templateObject217(),element.var,condition);}if(binding.node.name==='value'){return b(_templateObject218(),element.var,binding.snippet);}return b(_templateObject219(),element.var,binding.node.name,binding.snippet);}function get_binding_group(renderer,value,block){var _flatten_reference=flatten_reference(value.raw_expression),parts=_flatten_reference.parts;var keypath=parts.join('.');var contexts=[];var _iterator3=_createForOfIteratorHelper(value.expression.contextual_dependencies),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var dep=_step3.value;var _context=block.bindings.get(dep);var key=void 0;var name=void 0;if(_context){key=_context.object.name;name=_context.property.name;}else{key=dep;name=dep;}keypath=\"\".concat(key,\"@\").concat(keypath);contexts.push(name);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}if(!renderer.binding_groups.has(keypath)){var index=renderer.binding_groups.size;contexts.forEach(function(context){renderer.add_to_context(context,true);});renderer.binding_groups.set(keypath,{binding_group:function binding_group(){var to_reference=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var binding_group='$$binding_groups';var _secondary_indexes=contexts;if(to_reference){binding_group=block.renderer.reference(binding_group);_secondary_indexes=_secondary_indexes.map(function(name){return block.renderer.reference(name);});}if(_secondary_indexes.length>0){var obj=x(_templateObject220(),binding_group,index);_secondary_indexes.forEach(function(secondary_index){obj=x(_templateObject221(),obj,secondary_index);});return obj;}else{return x(_templateObject222(),binding_group,index);}},is_context:contexts.length>0,contexts:contexts,index:index});}return renderer.binding_groups.get(keypath);}function get_event_handler(binding,renderer,block,name,lhs){var contextual_dependencies=new Set(binding.node.expression.contextual_dependencies);var context=block.bindings.get(name);var set_store;if(context){var object=context.object,property=context.property,store=context.store,snippet=context.snippet;lhs=replace_object(lhs,snippet);contextual_dependencies.add(object.name);contextual_dependencies.add(property.name);contextual_dependencies.delete(name);if(store){set_store=b(_templateObject223(),store,\"$\".concat(store));}}else{var _object=get_object(lhs);if(_object.name[0]==='$'){var _store=_object.name.slice(1);set_store=b(_templateObject224(),_store,_object.name);}}var value=get_value_from_dom(renderer,binding.parent,binding,block,contextual_dependencies);var mutation=b(_templateObject225(),lhs,value,set_store);return{uses_context:binding.node.is_contextual||binding.node.expression.uses_context,mutation:mutation,contextual_dependencies:contextual_dependencies,lhs:lhs};}function get_value_from_dom(renderer,element,binding,block,contextual_dependencies){var node=element.node;var name=binding.node.name;if(name==='this'){return x(_templateObject226());}// <select bind:value='selected>\nif(node.name==='select'){return node.get_static_attribute_value('multiple')===true?x(_templateObject227()):x(_templateObject228());}var type=node.get_static_attribute_value('type');// <input type='checkbox' bind:group='foo'>\nif(name==='group'){if(type==='checkbox'){var _get_binding_group2=get_binding_group(renderer,binding.node,block),binding_group=_get_binding_group2.binding_group,contexts=_get_binding_group2.contexts;add_to_set(contextual_dependencies,contexts);return x(_templateObject229(),binding_group());}return x(_templateObject230());}// <input type='range|number' bind:value>\nif(type==='range'||type==='number'){return x(_templateObject231(),name);}if(name==='buffered'||name==='seekable'||name==='played'){return x(_templateObject232(),name);}// everything else\nreturn x(_templateObject233(),name);}function add_actions(block,target,actions){actions.forEach(function(action){return add_action(block,target,action);});}function add_action(block,target,action){var expression=action.expression;var snippet;var dependencies;if(expression){snippet=expression.manipulate(block);dependencies=expression.dynamic_dependencies();}var id=block.get_unique_name(\"\".concat(action.name.replace(/[^a-zA-Z0-9_$]/g,'_'),\"_action\"));block.add_variable(id);var fn=block.renderer.reference(action.name);block.event_listeners.push(x(_templateObject234(),id,fn,target,snippet));if(dependencies&&dependencies.length>0){var condition=x(_templateObject235(),id,id);if(dependencies.length>0){condition=x(_templateObject236(),condition,block.renderer.dirty(dependencies));}block.chunks.update.push(b(_templateObject237(),condition,id,snippet));}}function get_slot_definition(block,scope,lets){if(lets.length===0)return{block:block,scope:scope};var context_input={type:'ObjectPattern',properties:lets.map(function(l){return{type:'Property',kind:'init',key:l.name,value:l.value||l.name};})};var properties=[];var value_map=new Map();lets.forEach(function(l){var value;if(l.names.length>1){// more than one, probably destructuring\nvar unique_name=block.get_unique_name(l.names.join('_')).name;value_map.set(l.value,unique_name);value={type:'Identifier',name:unique_name};}else{value=l.value||l.name;}properties.push({type:'Property',kind:'init',key:l.name,value:value});});var changes_input={type:'ObjectPattern',properties:properties};var names=new Set();var names_lookup=new Map();lets.forEach(function(l){l.names.forEach(function(name){names.add(name);if(value_map.has(l.value)){names_lookup.set(name,value_map.get(l.value));}});});var context={type:'ObjectExpression',properties:Array.from(names).map(function(name){return p(_templateObject238(),block.renderer.context_lookup.get(name).index,name);})};var context_lookup=block.renderer.context_lookup;// i am well aware that this code is gross\n// TODO: context-overflow make it less gross\nvar changes={type:'ParenthesizedExpression',get expression(){if(block.renderer.context_overflow){var grouped=[];Array.from(names).forEach(function(name){var i=context_lookup.get(name).index.value;var g=Math.floor(i/31);var lookup_name=names_lookup.has(name)?names_lookup.get(name):name;if(!grouped[g])grouped[g]=[];grouped[g].push({name:lookup_name,n:i%31});});var elements=[];for(var g=0;g<grouped.length;g+=1){elements[g]=grouped[g]?grouped[g].map(function(_ref6){var name=_ref6.name,n=_ref6.n;return x(_templateObject239(),name,1<<n);}).reduce(function(lhs,rhs){return x(_templateObject240(),lhs,rhs);}):x(_templateObject241());}return{type:'ArrayExpression',elements:elements};}return Array.from(names).map(function(name){var lookup_name=names_lookup.has(name)?names_lookup.get(name):name;var i=context_lookup.get(name).index.value;return x(_templateObject242(),lookup_name,1<<i);}).reduce(function(lhs,rhs){return x(_templateObject243(),lhs,rhs);});}};return{block:block,scope:scope,get_context:x(_templateObject244(),context_input,context),get_changes:x(_templateObject245(),changes_input,changes)};}function compare_node(a,b){if(a===b)return true;if(!a||!b)return false;if(a.type!==b.type)return false;switch(a.type){case\"Identifier\":return a.name===b.name;case\"MemberExpression\":return compare_node(a.object,b.object)&&compare_node(a.property,b.property)&&a.computed===b.computed;case'Literal':return a.value===b.value;}}function bind_this(component,block,binding,variable){var fn=component.get_unique_name(\"\".concat(variable.name,\"_binding\"));block.renderer.add_to_context(fn.name);var callee=block.renderer.reference(fn.name);var _binding$handler=binding.handler,contextual_dependencies=_binding$handler.contextual_dependencies,mutation=_binding$handler.mutation;var dependencies=binding.get_dependencies();var body=b(_templateObject246(),mutation,Array.from(dependencies).filter(function(dep){return dep[0]!=='$';}).filter(function(dep){return!contextual_dependencies.has(dep);}).map(function(dep){return b(_templateObject247(),block.renderer.invalidate(dep));}));if(contextual_dependencies.size){var params=Array.from(contextual_dependencies).map(function(name){return{type:'Identifier',name:name};});component.partly_hoisted.push(b(_templateObject248(),fn,params,body));var alias_map=new Map();var args=[];var _iterator4=_createForOfIteratorHelper(params),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _id=_step4.value;var _value4=block.renderer.reference(_id.name);var found=false;if(block.variables.has(_id.name)){var alias=_id.name;for(var _i28=1;block.variables.has(alias)&&!compare_node(block.variables.get(alias).init,_value4);alias=\"\".concat(_id.name,\"_\").concat(_i28++)){;}alias_map.set(alias,_id.name);_id={type:'Identifier',name:alias};found=block.variables.has(alias);}args.push(_id);if(!found){block.add_variable(_id,_value4);}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var _assign=block.get_unique_name(\"assign_\".concat(variable.name));var unassign=block.get_unique_name(\"unassign_\".concat(variable.name));block.chunks.init.push(b(_templateObject249(),_assign,callee,variable,args,unassign,callee,args));var condition=Array.from(args).map(function(name){return x(_templateObject250(),name,block.renderer.reference(alias_map.get(name.name)||name.name));}).reduce(function(lhs,rhs){return x(_templateObject251(),lhs,rhs);});// we push unassign and unshift assign so that references are\n// nulled out before they're created, to avoid glitches\n// with shifting indices\nblock.chunks.update.push(b(_templateObject252(),condition,unassign,args.map(function(a){return b(_templateObject253(),a,block.renderer.reference(alias_map.get(a.name)||a.name));}),_assign));block.chunks.destroy.push(b(_templateObject254(),unassign));return b(_templateObject255(),_assign);}component.partly_hoisted.push(b(_templateObject256(),fn,body));block.chunks.destroy.push(b(_templateObject257(),callee));return b(_templateObject258(),callee,variable);}var Node$1=/*#__PURE__*/function(){function Node$1(component,parent,_scope,info){(0,_classCallCheck2.default)(this,Node$1);this.start=info.start;this.end=info.end;this.type=info.type;// this makes properties non-enumerable, which makes logging\n// bearable. might have a performance cost. TODO remove in prod?\nObject.defineProperties(this,{component:{value:component},parent:{value:parent}});}(0,_createClass2.default)(Node$1,[{key:\"cannot_use_innerhtml\",value:function cannot_use_innerhtml(){if(this.can_use_innerhtml!==false){this.can_use_innerhtml=false;if(this.parent)this.parent.cannot_use_innerhtml();}}},{key:\"find_nearest\",value:function find_nearest(selector){if(selector.test(this.type))return this;if(this.parent)return this.parent.find_nearest(selector);}},{key:\"get_static_attribute_value\",value:function get_static_attribute_value(name){var attribute=this.attributes&&this.attributes.find(function(attr){return attr.type==='Attribute'&&attr.name.toLowerCase()===name;});if(!attribute)return null;if(attribute.is_true)return true;if(attribute.chunks.length===0)return'';if(attribute.chunks.length===1&&attribute.chunks[0].type==='Text'){return attribute.chunks[0].data;}return null;}},{key:\"has_ancestor\",value:function has_ancestor(type){return this.parent?this.parent.type===type||this.parent.has_ancestor(type):false;}}]);return Node$1;}();function create_scopes(expression){return analyze(expression);}function is_dynamic$1(variable){if(variable){if(variable.mutated||variable.reassigned)return true;// dynamic internal state\nif(!variable.module&&variable.writable&&variable.export_name)return true;// writable props\n}return false;}function nodes_match(a,b){if(!!a!==!!b)return false;if(Array.isArray(a)!==Array.isArray(b))return false;if(a&&(0,_typeof2.default)(a)==='object'){if(Array.isArray(a)){if(a.length!==b.length)return false;return a.every(function(child,i){return nodes_match(child,b[i]);});}var a_keys=Object.keys(a).sort();var b_keys=Object.keys(b).sort();if(a_keys.length!==b_keys.length)return false;var _i29=a_keys.length;while(_i29--){var key=a_keys[_i29];if(b_keys[_i29]!==key)return false;if(key==='start'||key==='end')continue;if(!nodes_match(a[key],b[key])){return false;}}return true;}return a===b;}function invalidate(renderer,scope,node,names){var main_execution_context=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var component=renderer.component;var _Array$from$filter$ma=Array.from(names).filter(function(name){var owner=scope.find_owner(name);return!owner||owner===component.instance_scope;}).map(function(name){return component.var_lookup.get(name);}).filter(function(variable){return variable&&!variable.hoistable&&!variable.global&&!variable.module&&(variable.referenced||variable.subscribable||variable.is_reactive_dependency||variable.export_name||variable.name[0]==='$');}),_Array$from$filter$ma2=(0,_toArray2.default)(_Array$from$filter$ma),head=_Array$from$filter$ma2[0],tail=_Array$from$filter$ma2.slice(1);function get_invalidated(variable,node){if(main_execution_context&&!variable.subscribable&&variable.name[0]!=='$'){return node||x(_templateObject259(),variable.name);}return renderer.invalidate(variable.name);}if(head){component.has_reactive_assignments=true;if(node.type==='AssignmentExpression'&&node.operator==='='&&nodes_match(node.left,node.right)&&tail.length===0){return get_invalidated(head,node);}else{var is_store_value=head.name[0]==='$'&&head.name[1]!=='$';var extra_args=tail.map(function(variable){return get_invalidated(variable);});var pass_value=extra_args.length>0||node.type==='AssignmentExpression'&&node.left.type!=='Identifier'||node.type==='UpdateExpression'&&(!node.prefix||node.argument.type!=='Identifier');if(pass_value){extra_args.unshift({type:'Identifier',name:head.name});}var _invalidate=is_store_value?x(_templateObject260(),head.name.slice(1),node,extra_args):!main_execution_context?x(_templateObject261(),renderer.context_lookup.get(head.name).index,node,extra_args):node;if(head.subscribable&&head.reassigned){var subscribe=\"$$subscribe_\".concat(head.name);_invalidate=x(_templateObject262(),subscribe,_invalidate);}return _invalidate;}}return node;}var reserved_keywords=new Set([\"$$props\",\"$$restProps\"]);function is_reserved_keyword(name){return reserved_keywords.has(name);}var Expression=/*#__PURE__*/function(){// todo: owner type\nfunction Expression(component,owner,template_scope,info,lazy){(0,_classCallCheck2.default)(this,Expression);this.type='Expression';this.references=new Set();this.dependencies=new Set();this.contextual_dependencies=new Set();this.declarations=[];this.uses_context=false;// TODO revert to direct property access in prod?\nObject.defineProperties(this,{component:{value:component}});this.node=info;this.template_scope=template_scope;this.owner=owner;var dependencies=this.dependencies,contextual_dependencies=this.contextual_dependencies,references=this.references;var _create_scopes=create_scopes(info),map=_create_scopes.map,scope=_create_scopes.scope;this.scope=scope;this.scope_map=map;var expression=this;var function_expression;// discover dependencies, but don't change the code yet\nwalk(info,{enter:function enter(node,parent,key){// don't manipulate shorthand props twice\nif(key==='value'&&parent.shorthand)return;if(map.has(node)){scope=map.get(node);}if(!function_expression&&/FunctionExpression/.test(node.type)){function_expression=node;}if(isReference(node,parent)){var _flatten_reference2=flatten_reference(node),name=_flatten_reference2.name,nodes=_flatten_reference2.nodes;references.add(name);if(scope.has(name))return;if(name[0]==='$'){var store_name=name.slice(1);if(template_scope.names.has(store_name)||scope.has(store_name)){component.error(node,{code:\"contextual-store\",message:\"Stores must be declared at the top level of the component (this may change in a future version of Svelte)\"});}}if(template_scope.is_let(name)){if(!function_expression){// TODO should this be `!lazy` ?\ncontextual_dependencies.add(name);dependencies.add(name);}}else if(template_scope.names.has(name)){expression.uses_context=true;contextual_dependencies.add(name);var _owner=template_scope.get_owner(name);var is_index=_owner.type==='EachBlock'&&_owner.key&&name===_owner.index;if(!lazy||is_index){template_scope.dependencies_for_name.get(name).forEach(function(name){return dependencies.add(name);});}}else{if(!lazy){dependencies.add(name);}component.add_reference(name);component.warn_if_undefined(name,nodes[0],template_scope);}this.skip();}// track any assignments from template expressions as mutable\nvar names;var deep=false;if(function_expression){if(node.type==='AssignmentExpression'){deep=node.left.type==='MemberExpression';names=extract_names(deep?get_object(node.left):node.left);}else if(node.type==='UpdateExpression'){names=extract_names(get_object(node.argument));}}if(names){names.forEach(function(name){if(template_scope.names.has(name)){template_scope.dependencies_for_name.get(name).forEach(function(name){var variable=component.var_lookup.get(name);if(variable)variable[deep?'mutated':'reassigned']=true;});var each_block=template_scope.get_owner(name);each_block.has_binding=true;}else{component.add_reference(name);var variable=component.var_lookup.get(name);if(variable)variable[deep?'mutated':'reassigned']=true;}});}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}if(node===function_expression){function_expression=null;}}});}(0,_createClass2.default)(Expression,[{key:\"dynamic_dependencies\",value:function dynamic_dependencies(){var _this17=this;return Array.from(this.dependencies).filter(function(name){if(_this17.template_scope.is_let(name))return true;if(is_reserved_keyword(name))return true;var variable=_this17.component.var_lookup.get(name);return is_dynamic$1(variable);});}// TODO move this into a render-dom wrapper?\n},{key:\"manipulate\",value:function manipulate(block){// TODO ideally we wouldn't end up calling this method\n// multiple times\nif(this.manipulated)return this.manipulated;var component=this.component,declarations=this.declarations,map=this.scope_map,template_scope=this.template_scope,owner=this.owner;var scope=this.scope;var function_expression;var dependencies;var contextual_dependencies;var node=walk(this.node,{enter:function enter(node,parent){if(node.type==='Property'&&node.shorthand){node.value=JSON.parse(JSON.stringify(node.value));node.shorthand=false;}if(map.has(node)){scope=map.get(node);}if(node.type==='Identifier'&&isReference(node,parent)){var _flatten_reference3=flatten_reference(node),name=_flatten_reference3.name;if(scope.has(name))return;if(function_expression){if(template_scope.names.has(name)){contextual_dependencies.add(name);template_scope.dependencies_for_name.get(name).forEach(function(dependency){dependencies.add(dependency);});}else{dependencies.add(name);component.add_reference(name);// TODO is this redundant/misplaced?\n}}else if(is_contextual(component,template_scope,name)){var reference=block.renderer.reference(node);this.replace(reference);}this.skip();}if(!function_expression){if(node.type==='AssignmentExpression');if(node.type==='FunctionExpression'||node.type==='ArrowFunctionExpression'){function_expression=node;dependencies=new Set();contextual_dependencies=new Set();}}},leave:function leave(node,parent){if(map.has(node))scope=scope.parent;if(node===function_expression){var _id2=component.get_unique_name(sanitize(get_function_name(node,owner)));var declaration=b(_templateObject263(),_id2,node);if(dependencies.size===0&&contextual_dependencies.size===0){// we can hoist this out of the component completely\ncomponent.fully_hoisted.push(declaration);this.replace(_id2);component.add_var({name:_id2.name,internal:true,hoistable:true,referenced:true});}else if(contextual_dependencies.size===0){// function can be hoisted inside the component init\ncomponent.partly_hoisted.push(declaration);block.renderer.add_to_context(_id2.name);this.replace(block.renderer.reference(_id2));}else{// we need a combo block/init recipe\nvar deps=Array.from(contextual_dependencies);node.params=[].concat((0,_toConsumableArray2.default)(deps.map(function(name){return{type:'Identifier',name:name};})),(0,_toConsumableArray2.default)(node.params));var context_args=deps.map(function(name){return block.renderer.reference(name);});component.partly_hoisted.push(declaration);block.renderer.add_to_context(_id2.name);var callee=block.renderer.reference(_id2);this.replace(_id2);if(node.params.length>0){declarations.push(b(_templateObject264(),_id2,callee,context_args));}else{declarations.push(b(_templateObject265(),_id2,callee,context_args));}}function_expression=null;dependencies=null;contextual_dependencies=null;if(parent&&parent.type==='Property'){parent.method=false;}}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;var object_name=get_object(assignee).name;if(scope.has(object_name))return;// normally (`a = 1`, `b.c = 2`), there'll be a single name\n// (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n// may be more, in which case we need to tack the extra ones\n// onto the initial function call\nvar names=new Set(extract_names(assignee));var traced=new Set();names.forEach(function(name){var dependencies=template_scope.dependencies_for_name.get(name);if(dependencies){dependencies.forEach(function(name){return traced.add(name);});}else{traced.add(name);}});var _context2=block.bindings.get(object_name);if(_context2){// for `{#each array as item}`\n// replace `item = 1` to `each_array[each_index] = 1`, this allow us to mutate the array\n// rather than mutating the local `item` variable\nvar snippet=_context2.snippet,object=_context2.object,property=_context2.property;var replaced=replace_object(assignee,snippet);if(node.type==='AssignmentExpression'){node.left=replaced;}else{node.argument=replaced;}contextual_dependencies.add(object.name);contextual_dependencies.add(property.name);}this.replace(invalidate(block.renderer,scope,node,traced));}}});if(declarations.length>0){block.maintain_context=true;declarations.forEach(function(declaration){block.chunks.init.push(declaration);});}return this.manipulated=node;}}]);return Expression;}();function get_function_name(_node,parent){if(parent.type==='EventHandler'){return\"\".concat(parent.name,\"_handler\");}if(parent.type==='Action'){return\"\".concat(parent.name,\"_function\");}return'func';}function is_contextual(component,scope,name){if(is_reserved_keyword(name))return true;// if it's a name below root scope, it's contextual\nif(!scope.is_top_level(name))return true;var variable=component.var_lookup.get(name);// hoistables, module declarations, and imports are non-contextual\nif(!variable||variable.hoistable)return false;// assume contextual\nreturn true;}var Action=/*#__PURE__*/function(_Node$){(0,_inherits2.default)(Action,_Node$);var _super12=_createSuper(Action);function Action(component,parent,scope,info){var _this18;(0,_classCallCheck2.default)(this,Action);_this18=_super12.call(this,component,parent,scope,info);component.warn_if_undefined(info.name,info,scope);_this18.name=info.name;component.add_reference(info.name.split('.')[0]);_this18.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this18),scope,info.expression):null;_this18.uses_context=_this18.expression&&_this18.expression.uses_context;return _this18;}return Action;}(Node$1);var Tag=/*#__PURE__*/function(_Wrapper8){(0,_inherits2.default)(Tag,_Wrapper8);var _super13=_createSuper(Tag);function Tag(renderer,block,parent,node){var _this19;(0,_classCallCheck2.default)(this,Tag);_this19=_super13.call(this,renderer,block,parent,node);_this19.cannot_use_innerhtml();if(!_this19.is_dependencies_static()){_this19.not_static_content();}block.add_dependencies(node.expression.dependencies);return _this19;}(0,_createClass2.default)(Tag,[{key:\"is_dependencies_static\",value:function is_dependencies_static(){return this.node.expression.contextual_dependencies.size===0&&this.node.expression.dynamic_dependencies().length===0;}},{key:\"rename_this_method\",value:function rename_this_method(block,update){var dependencies=this.node.expression.dynamic_dependencies();var snippet=this.node.expression.manipulate(block);var value=this.node.should_cache&&block.get_unique_name(\"\".concat(this.var.name,\"_value\"));var content=this.node.should_cache?value:snippet;snippet=x(_templateObject266(),snippet);if(this.node.should_cache)block.add_variable(value,snippet);// TODO may need to coerce snippet to string\nif(dependencies.length>0){var condition=block.renderer.dirty(dependencies);if(block.has_outros){condition=x(_templateObject267(),condition);}var update_cached_value=x(_templateObject268(),value,value,snippet);if(this.node.should_cache){condition=x(_templateObject269(),condition,update_cached_value);}block.chunks.update.push(b(_templateObject270(),condition,update(content)));}return{init:content};}}]);return Tag;}(Wrapper);var MustacheTagWrapper=/*#__PURE__*/function(_Tag){(0,_inherits2.default)(MustacheTagWrapper,_Tag);var _super14=_createSuper(MustacheTagWrapper);function MustacheTagWrapper(renderer,block,parent,node){var _this20;(0,_classCallCheck2.default)(this,MustacheTagWrapper);_this20=_super14.call(this,renderer,block,parent,node);_this20.var={type:'Identifier',name:'t'};return _this20;}(0,_createClass2.default)(MustacheTagWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this21=this;var _this$rename_this_met=this.rename_this_method(block,function(value){return x(_templateObject271(),_this21.var,value);}),init=_this$rename_this_met.init;block.add_element(this.var,x(_templateObject272(),init),parent_nodes&&x(_templateObject273(),parent_nodes,init),parent_node);}}]);return MustacheTagWrapper;}(Tag);var RawMustacheTagWrapper=/*#__PURE__*/function(_Tag2){(0,_inherits2.default)(RawMustacheTagWrapper,_Tag2);var _super15=_createSuper(RawMustacheTagWrapper);function RawMustacheTagWrapper(renderer,block,parent,node){var _this22;(0,_classCallCheck2.default)(this,RawMustacheTagWrapper);_this22=_super15.call(this,renderer,block,parent,node);_this22.var={type:'Identifier',name:'raw'};_this22.cannot_use_innerhtml();_this22.not_static_content();return _this22;}(0,_createClass2.default)(RawMustacheTagWrapper,[{key:\"render\",value:function render(block,parent_node,_parent_nodes){var in_head=is_head(parent_node);var can_use_innerhtml=!in_head&&parent_node&&!this.prev&&!this.next;if(can_use_innerhtml){var insert=function insert(content){return b(_templateObject274(),parent_node,content)[0];};var _this$rename_this_met2=this.rename_this_method(block,function(content){return insert(content);}),init=_this$rename_this_met2.init;block.chunks.mount.push(insert(init));}else{var needs_anchor=in_head||(this.next?!this.next.is_dom_node():!this.parent||!this.parent.is_dom_node());var html_tag=block.get_unique_name('html_tag');var html_anchor=needs_anchor&&block.get_unique_name('html_anchor');block.add_variable(html_tag);var _this$rename_this_met3=this.rename_this_method(block,function(content){return x(_templateObject275(),html_tag,content);}),_init=_this$rename_this_met3.init;var update_anchor=needs_anchor?html_anchor:this.next?this.next.var:'null';block.chunks.hydrate.push(b(_templateObject276(),html_tag,update_anchor));block.chunks.mount.push(b(_templateObject277(),html_tag,_init,parent_node||'#target',parent_node?null:'#anchor'));if(needs_anchor){block.add_element(html_anchor,x(_templateObject278()),x(_templateObject279()),parent_node);}if(!parent_node||in_head){block.chunks.destroy.push(b(_templateObject280(),html_tag));}}}}]);return RawMustacheTagWrapper;}(Tag);var events=[{event_names:['input'],filter:function filter(node,_name){return node.name==='textarea'||node.name==='input'&&!/radio|checkbox|range|file/.test(node.get_static_attribute_value('type'));}},{event_names:['input'],filter:function filter(node,name){return(name==='textContent'||name==='innerHTML')&&node.attributes.some(function(attribute){return attribute.name==='contenteditable';});}},{event_names:['change'],filter:function filter(node,_name){return node.name==='select'||node.name==='input'&&/radio|checkbox|file/.test(node.get_static_attribute_value('type'));}},{event_names:['change','input'],filter:function filter(node,_name){return node.name==='input'&&node.get_static_attribute_value('type')==='range';}},{event_names:['elementresize'],filter:function filter(_node,name){return dimensions.test(name);}},// media events\n{event_names:['timeupdate'],filter:function filter(node,name){return node.is_media_node()&&(name==='currentTime'||name==='played'||name==='ended');}},{event_names:['durationchange'],filter:function filter(node,name){return node.is_media_node()&&name==='duration';}},{event_names:['play','pause'],filter:function filter(node,name){return node.is_media_node()&&name==='paused';}},{event_names:['progress'],filter:function filter(node,name){return node.is_media_node()&&name==='buffered';}},{event_names:['loadedmetadata'],filter:function filter(node,name){return node.is_media_node()&&(name==='buffered'||name==='seekable');}},{event_names:['volumechange'],filter:function filter(node,name){return node.is_media_node()&&(name==='volume'||name==='muted');}},{event_names:['ratechange'],filter:function filter(node,name){return node.is_media_node()&&name==='playbackRate';}},{event_names:['seeking','seeked'],filter:function filter(node,name){return node.is_media_node()&&name==='seeking';}},{event_names:['ended'],filter:function filter(node,name){return node.is_media_node()&&name==='ended';}},{event_names:['resize'],filter:function filter(node,name){return node.is_media_node()&&(name==='videoHeight'||name==='videoWidth');}},// details event\n{event_names:['toggle'],filter:function filter(node,_name){return node.name==='details';}}];var ElementWrapper=/*#__PURE__*/function(_Wrapper9){(0,_inherits2.default)(ElementWrapper,_Wrapper9);var _super16=_createSuper(ElementWrapper);function ElementWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this23;(0,_classCallCheck2.default)(this,ElementWrapper);_this23=_super16.call(this,renderer,block,parent,node);_this23.var={type:'Identifier',name:node.name.replace(/[^a-zA-Z0-9_$]/g,'_')};_this23.void=is_void(node.name);_this23.class_dependencies=[];if(_this23.node.children.length){_this23.node.lets.forEach(function(l){extract_names(l.value||l.name).forEach(function(name){renderer.add_to_context(name,true);});});}_this23.attributes=_this23.node.attributes.map(function(attribute){if(attribute.name==='slot'){// TODO make separate subclass for this?\nvar owner=_this23.parent;while(owner){if(owner.node.type==='InlineComponent'){break;}if(owner.node.type==='Element'&&/-/.test(owner.node.name)){break;}owner=owner.parent;}if(owner&&owner.node.type==='InlineComponent'){var name=attribute.get_static_value();if(!owner.slots.has(name)){var child_block=block.child({comment:create_debugging_comment(node,_this23.renderer.component),name:_this23.renderer.component.get_unique_name(\"create_\".concat(sanitize(name),\"_slot\")),type:'slot'});var _this23$node=_this23.node,_scope2=_this23$node.scope,lets=_this23$node.lets;var seen=new Set(lets.map(function(l){return l.name.name;}));owner.node.lets.forEach(function(l){if(!seen.has(l.name.name))lets.push(l);});owner.slots.set(name,get_slot_definition(child_block,_scope2,lets));_this23.renderer.blocks.push(child_block);}_this23.slot_block=owner.slots.get(name).block;block=_this23.slot_block;}}if(attribute.name==='style'){return new StyleAttributeWrapper((0,_assertThisInitialized2.default)(_this23),block,attribute);}if(attribute.type==='Spread'){return new SpreadAttributeWrapper((0,_assertThisInitialized2.default)(_this23),block,attribute);}return new AttributeWrapper((0,_assertThisInitialized2.default)(_this23),block,attribute);});// ordinarily, there'll only be one... but we need to handle\n// the rare case where an element can have multiple bindings,\n// e.g. <audio bind:paused bind:currentTime>\n_this23.bindings=_this23.node.bindings.map(function(binding){return new BindingWrapper(block,binding,(0,_assertThisInitialized2.default)(_this23));});_this23.event_handlers=_this23.node.handlers.map(function(event_handler){return new EventHandlerWrapper(event_handler,(0,_assertThisInitialized2.default)(_this23));});if(node.intro||node.outro){if(node.intro)block.add_intro(node.intro.is_local);if(node.outro)block.add_outro(node.outro.is_local);}if(node.animation){block.add_animation();}// add directive and handler dependencies\n[node.animation,node.outro].concat((0,_toConsumableArray2.default)(node.actions),(0,_toConsumableArray2.default)(node.classes)).forEach(function(directive){if(directive&&directive.expression){block.add_dependencies(directive.expression.dependencies);}});node.handlers.forEach(function(handler){if(handler.expression){block.add_dependencies(handler.expression.dependencies);}});if(_this23.parent){if(node.actions.length>0||node.animation||node.bindings.length>0||node.classes.length>0||node.intro||node.outro||node.handlers.length>0||_this23.node.name==='option'||renderer.options.dev){_this23.parent.cannot_use_innerhtml();// need to use add_location\n_this23.parent.not_static_content();}}_this23.fragment=new FragmentWrapper(renderer,block,node.children,(0,_assertThisInitialized2.default)(_this23),strip_whitespace,next_sibling);if(_this23.slot_block){block.parent.add_dependencies(block.dependencies);// appalling hack\nvar index=block.parent.wrappers.indexOf((0,_assertThisInitialized2.default)(_this23));block.parent.wrappers.splice(index,1);block.wrappers.push((0,_assertThisInitialized2.default)(_this23));}return _this23;}(0,_createClass2.default)(ElementWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this24=this;var renderer=this.renderer;if(this.node.name==='noscript')return;if(this.slot_block){block=this.slot_block;}var node=this.var;var nodes=parent_nodes&&block.get_unique_name(\"\".concat(this.var.name,\"_nodes\"));// if we're in unclaimable territory, i.e. <head>, parent_nodes is null\nvar children=x(_templateObject281(),this.node.name==='template'?x(_templateObject282(),node):node);block.add_variable(node);var render_statement=this.get_render_statement(block);block.chunks.create.push(b(_templateObject283(),node,render_statement));if(renderer.options.hydratable){if(parent_nodes){block.chunks.claim.push(b(_templateObject284(),node,this.get_claim_statement(parent_nodes)));if(!this.void&&this.node.children.length>0){block.chunks.claim.push(b(_templateObject285(),nodes,children));}}else{block.chunks.claim.push(b(_templateObject286(),node,render_statement));}}if(parent_node){block.chunks.mount.push(b(_templateObject287(),parent_node,node));if(is_head(parent_node)){block.chunks.destroy.push(b(_templateObject288(),node));}}else{block.chunks.mount.push(b(_templateObject289(),node));// TODO we eventually need to consider what happens to elements\n// that belong to the same outgroup as an outroing element...\nblock.chunks.destroy.push(b(_templateObject290(),node));}// insert static children with textContent or innerHTML\nvar can_use_textcontent=this.can_use_textcontent();if(!this.node.namespace&&(this.can_use_innerhtml||can_use_textcontent)&&this.fragment.nodes.length>0){if(this.fragment.nodes.length===1&&this.fragment.nodes[0].node.type==='Text'){block.chunks.create.push(b(_templateObject291(),node,string_literal(this.fragment.nodes[0].data)));}else{var _state={quasi:{type:'TemplateElement',value:{raw:''}}};var _literal={type:'TemplateLiteral',expressions:[],quasis:[]};var can_use_raw_text=!this.can_use_innerhtml&&can_use_textcontent;to_html(this.fragment.nodes,block,_literal,_state,can_use_raw_text);_literal.quasis.push(_state.quasi);block.chunks.create.push(b(_templateObject292(),node,this.can_use_innerhtml?'innerHTML':'textContent',_literal));}}else{this.fragment.nodes.forEach(function(child){child.render(block,_this24.node.name==='template'?x(_templateObject293(),node):node,nodes);});}var event_handler_or_binding_uses_context=this.bindings.some(function(binding){return binding.handler.uses_context;})||this.node.handlers.some(function(handler){return handler.uses_context;})||this.node.actions.some(function(action){return action.uses_context;});if(event_handler_or_binding_uses_context){block.maintain_context=true;}this.add_attributes(block);this.add_directives_in_order(block);this.add_transitions(block);this.add_animation(block);this.add_classes(block);this.add_manual_style_scoping(block);if(nodes&&this.renderer.options.hydratable&&!this.void){block.chunks.claim.push(b(_templateObject294(),this.node.children.length>0?nodes:children));}if(renderer.options.dev){var loc=renderer.locate(this.node.start);block.chunks.hydrate.push(b(_templateObject295(),this.var,renderer.file_var,loc.line-1,loc.column,this.node.start));}}},{key:\"can_use_textcontent\",value:function can_use_textcontent(){return this.is_static_content&&this.fragment.nodes.every(function(node){return node.node.type==='Text'||node.node.type==='MustacheTag';});}},{key:\"get_render_statement\",value:function get_render_statement(block){var _this$node=this.node,name=_this$node.name,namespace=_this$node.namespace;if(namespace===namespaces.svg){return x(_templateObject296(),name);}if(namespace){return x(_templateObject297(),namespace,name);}var is=this.attributes.find(function(attr){return attr.node.name==='is';});if(is){return x(_templateObject298(),name,is.render_chunks(block).reduce(function(lhs,rhs){return x(_templateObject299(),lhs,rhs);}));}return x(_templateObject300(),name);}},{key:\"get_claim_statement\",value:function get_claim_statement(nodes){var attributes=this.node.attributes.filter(function(attr){return attr.type==='Attribute';}).map(function(attr){return p(_templateObject301(),attr.name);});var name=this.node.namespace?this.node.name:this.node.name.toUpperCase();var svg=this.node.namespace===namespaces.svg?1:null;return x(_templateObject302(),nodes,name,attributes,svg);}},{key:\"add_directives_in_order\",value:function add_directives_in_order(block){var _this25=this;var binding_groups=events.map(function(event){return{events:event.event_names,bindings:_this25.bindings.filter(function(binding){return binding.node.name!=='this';}).filter(function(binding){return event.filter(_this25.node,binding.node.name);})};}).filter(function(group){return group.bindings.length;});var this_binding=this.bindings.find(function(b){return b.node.name==='this';});function getOrder(item){if(item instanceof EventHandlerWrapper){return item.node.start;}else if(item instanceof BindingWrapper){return item.node.start;}else if(item instanceof Action){return item.start;}else{return item.bindings[0].node.start;}}[].concat((0,_toConsumableArray2.default)(binding_groups),(0,_toConsumableArray2.default)(this.event_handlers),[this_binding],(0,_toConsumableArray2.default)(this.node.actions)).filter(Boolean).sort(function(a,b){return getOrder(a)-getOrder(b);}).forEach(function(item){if(item instanceof EventHandlerWrapper){add_event_handler(block,_this25.var,item);}else if(item instanceof BindingWrapper){_this25.add_this_binding(block,item);}else if(item instanceof Action){add_action(block,_this25.var,item);}else{_this25.add_bindings(block,item);}});}},{key:\"add_bindings\",value:function add_bindings(block,binding_group){var _this26=this;var renderer=this.renderer;if(binding_group.bindings.length===0)return;renderer.component.has_reactive_assignments=true;var lock=binding_group.bindings.some(function(binding){return binding.needs_lock;})?block.get_unique_name(\"\".concat(this.var.name,\"_updating\")):null;if(lock)block.add_variable(lock,x(_templateObject303()));var handler=renderer.component.get_unique_name(\"\".concat(this.var.name,\"_\").concat(binding_group.events.join('_'),\"_handler\"));renderer.add_to_context(handler.name);// TODO figure out how to handle locks\nvar needs_lock=binding_group.bindings.some(function(binding){return binding.needs_lock;});var dependencies=new Set();var contextual_dependencies=new Set();binding_group.bindings.forEach(function(binding){// TODO this is a mess\nadd_to_set(dependencies,binding.get_dependencies());add_to_set(contextual_dependencies,binding.handler.contextual_dependencies);binding.render(block,lock);});// media bindings — awkward special case. The native timeupdate events\n// fire too infrequently, so we need to take matters into our\n// own hands\nvar animation_frame;if(binding_group.events[0]==='timeupdate'){animation_frame=block.get_unique_name(\"\".concat(this.var.name,\"_animationframe\"));block.add_variable(animation_frame);}var has_local_function=contextual_dependencies.size>0||needs_lock||animation_frame;var callee=renderer.reference(handler);// TODO dry this out — similar code for event handlers and component bindings\nif(has_local_function){var args=Array.from(contextual_dependencies).map(function(name){return renderer.reference(name);});// need to create a block-local function that calls an instance-level function\nif(animation_frame){block.chunks.init.push(b(_templateObject304(),handler,animation_frame,this.var,animation_frame,handler,needs_lock&&b(_templateObject305(),lock),callee,this.var,args));}else{block.chunks.init.push(b(_templateObject306(),handler,needs_lock&&b(_templateObject307(),lock),callee,this.var,args));}callee=handler;}var params=Array.from(contextual_dependencies).map(function(name){return{type:'Identifier',name:name};});this.renderer.component.partly_hoisted.push(b(_templateObject308(),handler,params,binding_group.bindings.map(function(b){return b.handler.mutation;}),Array.from(dependencies).filter(function(dep){return dep[0]!=='$';}).filter(function(dep){return!contextual_dependencies.has(dep);}).map(function(dep){return b(_templateObject309(),_this26.renderer.invalidate(dep));})));binding_group.events.forEach(function(name){if(name==='elementresize'){// special case\nvar resize_listener=block.get_unique_name(\"\".concat(_this26.var.name,\"_resize_listener\"));block.add_variable(resize_listener);block.chunks.mount.push(b(_templateObject310(),resize_listener,_this26.var,callee,_this26.var));block.chunks.destroy.push(b(_templateObject311(),resize_listener));}else{block.event_listeners.push(x(_templateObject312(),_this26.var,name,callee));}});var some_initial_state_is_undefined=binding_group.bindings.map(function(binding){return x(_templateObject313(),binding.snippet);}).reduce(function(lhs,rhs){return x(_templateObject314(),lhs,rhs);});var should_initialise=this.node.name==='select'||binding_group.bindings.find(function(binding){return binding.node.name==='indeterminate'||binding.node.name==='textContent'||binding.node.name==='innerHTML'||binding.is_readonly_media_attribute();});if(should_initialise){var callback=has_local_function?handler:x(_templateObject315(),callee,this.var);block.chunks.hydrate.push(b(_templateObject316(),some_initial_state_is_undefined,callback));}if(binding_group.events[0]==='elementresize'){block.chunks.hydrate.push(b(_templateObject317(),callee,this.var));}if(lock){block.chunks.update.push(b(_templateObject318(),lock));}}},{key:\"add_this_binding\",value:function add_this_binding(block,this_binding){var renderer=this.renderer;renderer.component.has_reactive_assignments=true;var binding_callback=bind_this(renderer.component,block,this_binding,this.var);block.chunks.mount.push(binding_callback);}},{key:\"add_attributes\",value:function add_attributes(block){var _this27=this;// Get all the class dependencies first\nthis.attributes.forEach(function(attribute){if(attribute.node.name==='class'){var _this27$class_depende;var dependencies=attribute.node.get_dependencies();(_this27$class_depende=_this27.class_dependencies).push.apply(_this27$class_depende,(0,_toConsumableArray2.default)(dependencies));}});if(this.node.attributes.some(function(attr){return attr.is_spread;})){this.add_spread_attributes(block);return;}this.attributes.forEach(function(attribute){attribute.render(block);});}},{key:\"add_spread_attributes\",value:function add_spread_attributes(block){var levels=block.get_unique_name(\"\".concat(this.var.name,\"_levels\"));var data=block.get_unique_name(\"\".concat(this.var.name,\"_data\"));var initial_props=[];var updates=[];this.attributes.forEach(function(attr){var dependencies=attr.node.get_dependencies();var condition=dependencies.length>0?block.renderer.dirty(dependencies):null;if(attr instanceof SpreadAttributeWrapper){var snippet=attr.node.expression.manipulate(block);initial_props.push(snippet);updates.push(condition?x(_templateObject319(),condition,snippet):snippet);}else{var name=attr.property_name||attr.name;initial_props.push(x(_templateObject320(),name,attr.get_init(block,attr.get_value(block))));var _snippet=x(_templateObject321(),name,attr.should_cache?attr.last:attr.get_value(block));updates.push(condition?x(_templateObject322(),attr.get_dom_update_conditions(block,condition),_snippet):_snippet);}});block.chunks.init.push(b(_templateObject323(),levels,initial_props,data,levels,data,data,levels));var fn=this.node.namespace===namespaces.svg?x(_templateObject324()):x(_templateObject325());block.chunks.hydrate.push(b(_templateObject326(),fn,this.var,data));block.chunks.update.push(b(_templateObject327(),fn,this.var,data,levels,updates));// handle edge cases for elements\nif(this.node.name==='select'){var dependencies=new Set();var _iterator5=_createForOfIteratorHelper(this.attributes),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var attr=_step5.value;var _iterator6=_createForOfIteratorHelper(attr.node.dependencies),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var dep=_step6.value;dependencies.add(dep);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}block.chunks.mount.push(b(_templateObject328(),data,this.var,data));block.chunks.update.push(b(_templateObject329(),block.renderer.dirty(Array.from(dependencies)),data,this.var,data));}}},{key:\"add_transitions\",value:function add_transitions(block){var _this$node2=this.node,intro=_this$node2.intro,outro=_this$node2.outro;if(!intro&&!outro)return;if(intro===outro){// bidirectional transition\nvar name=block.get_unique_name(\"\".concat(this.var.name,\"_transition\"));var snippet=intro.expression?intro.expression.manipulate(block):x(_templateObject330());block.add_variable(name);var fn=this.renderer.reference(intro.name);var intro_block=b(_templateObject331(),name,name,this.var,fn,snippet,name);var outro_block=b(_templateObject332(),name,name,this.var,fn,snippet,name);if(intro.is_local){block.chunks.intro.push(b(_templateObject333(),intro_block));block.chunks.outro.push(b(_templateObject334(),outro_block));}else{block.chunks.intro.push(intro_block);block.chunks.outro.push(outro_block);}block.chunks.destroy.push(b(_templateObject335(),name,name));}else{var intro_name=intro&&block.get_unique_name(\"\".concat(this.var.name,\"_intro\"));var outro_name=outro&&block.get_unique_name(\"\".concat(this.var.name,\"_outro\"));if(intro){block.add_variable(intro_name);var _snippet2=intro.expression?intro.expression.manipulate(block):x(_templateObject336());var _fn=this.renderer.reference(intro.name);var _intro_block;if(outro){_intro_block=b(_templateObject337(),outro_name,outro_name,intro_name,intro_name,this.var,_fn,_snippet2,intro_name);block.chunks.outro.push(b(_templateObject338(),intro_name,intro_name));}else{_intro_block=b(_templateObject339(),intro_name,intro_name,this.var,_fn,_snippet2,intro_name);}if(intro.is_local){_intro_block=b(_templateObject340(),_intro_block);}block.chunks.intro.push(_intro_block);}if(outro){block.add_variable(outro_name);var _snippet3=outro.expression?outro.expression.manipulate(block):x(_templateObject341());var _fn2=this.renderer.reference(outro.name);if(!intro){block.chunks.intro.push(b(_templateObject342(),outro_name,outro_name));}// TODO hide elements that have outro'd (unless they belong to a still-outroing\n// group) prior to their removal from the DOM\nvar _outro_block=b(_templateObject343(),outro_name,this.var,_fn2,_snippet3);if(outro.is_local){_outro_block=b(_templateObject344(),_outro_block);}block.chunks.outro.push(_outro_block);block.chunks.destroy.push(b(_templateObject345(),outro_name,outro_name));}}}},{key:\"add_animation\",value:function add_animation(block){if(!this.node.animation)return;var outro=this.node.outro;var rect=block.get_unique_name('rect');var stop_animation=block.get_unique_name('stop_animation');block.add_variable(rect);block.add_variable(stop_animation,x(_templateObject346()));block.chunks.measure.push(b(_templateObject347(),rect,this.var));block.chunks.fix.push(b(_templateObject348(),this.var,stop_animation,outro&&b(_templateObject349(),this.var,rect)));var params=this.node.animation.expression?this.node.animation.expression.manipulate(block):x(_templateObject350());var name=this.renderer.reference(this.node.animation.name);block.chunks.animate.push(b(_templateObject351(),stop_animation,stop_animation,this.var,rect,name,params));}},{key:\"add_classes\",value:function add_classes(block){var _this28=this;var has_spread=this.node.attributes.some(function(attr){return attr.is_spread;});this.node.classes.forEach(function(class_directive){var expression=class_directive.expression,name=class_directive.name;var snippet;var dependencies;if(expression){snippet=expression.manipulate(block);dependencies=expression.dependencies;}else{snippet=name;dependencies=new Set([name]);}var updater=b(_templateObject352(),_this28.var,name,snippet);block.chunks.hydrate.push(updater);if(has_spread){block.chunks.update.push(updater);}else if(dependencies&&dependencies.size>0||_this28.class_dependencies.length){var _this28$class_depende;var all_dependencies=(_this28$class_depende=_this28.class_dependencies).concat.apply(_this28$class_depende,(0,_toConsumableArray2.default)(dependencies));var condition=block.renderer.dirty(all_dependencies);block.chunks.update.push(b(_templateObject353(),condition,updater));}});}},{key:\"add_manual_style_scoping\",value:function add_manual_style_scoping(block){if(this.node.needs_manual_style_scoping){var updater=b(_templateObject354(),this.var,this.node.component.stylesheet.id);block.chunks.hydrate.push(updater);block.chunks.update.push(updater);}}}]);return ElementWrapper;}(Wrapper);function to_html(wrappers,block,literal,state,can_use_raw_text){wrappers.forEach(function(wrapper){if(wrapper instanceof TextWrapper){if(wrapper.use_space())state.quasi.value.raw+=' ';var parent=wrapper.node.parent;var raw=parent&&(parent.name==='script'||parent.name==='style'||can_use_raw_text);state.quasi.value.raw+=(raw?wrapper.data:escape_html(wrapper.data)).replace(/\\\\/g,'\\\\\\\\').replace(/`/g,'\\\\`').replace(/\\$/g,'\\\\$');}else if(wrapper instanceof MustacheTagWrapper||wrapper instanceof RawMustacheTagWrapper){literal.quasis.push(state.quasi);literal.expressions.push(wrapper.node.expression.manipulate(block));state.quasi={type:'TemplateElement',value:{raw:''}};}else if(wrapper.node.name==='noscript');else{// element\nstate.quasi.value.raw+=\"<\".concat(wrapper.node.name);wrapper.attributes.forEach(function(attr){state.quasi.value.raw+=\" \".concat(fix_attribute_casing(attr.node.name),\"=\\\"\");attr.node.chunks.forEach(function(chunk){if(chunk.type==='Text'){state.quasi.value.raw+=escape_html(chunk.data);}else{literal.quasis.push(state.quasi);literal.expressions.push(chunk.manipulate(block));state.quasi={type:'TemplateElement',value:{raw:''}};}});state.quasi.value.raw+=\"\\\"\";});state.quasi.value.raw+='>';if(!wrapper.void){to_html(wrapper.fragment.nodes,block,literal,state);state.quasi.value.raw+=\"</\".concat(wrapper.node.name,\">\");}}});}var HeadWrapper=/*#__PURE__*/function(_Wrapper10){(0,_inherits2.default)(HeadWrapper,_Wrapper10);var _super17=_createSuper(HeadWrapper);function HeadWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this29;(0,_classCallCheck2.default)(this,HeadWrapper);_this29=_super17.call(this,renderer,block,parent,node);_this29.can_use_innerhtml=false;_this29.fragment=new FragmentWrapper(renderer,block,node.children,(0,_assertThisInitialized2.default)(_this29),strip_whitespace,next_sibling);return _this29;}(0,_createClass2.default)(HeadWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var nodes;if(this.renderer.options.hydratable&&this.fragment.nodes.length){nodes=block.get_unique_name('head_nodes');block.chunks.claim.push(b(_templateObject355(),nodes,this.node.id));}this.fragment.render(block,x(_templateObject356()),nodes);if(nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject357(),nodes));}}}]);return HeadWrapper;}(Wrapper);function is_else_if(node){return node&&node.children.length===1&&node.children[0].type==='IfBlock';}var IfBlockBranch=/*#__PURE__*/function(_Wrapper11){(0,_inherits2.default)(IfBlockBranch,_Wrapper11);var _super18=_createSuper(IfBlockBranch);function IfBlockBranch(renderer,block,parent,node,strip_whitespace,next_sibling){var _this30;(0,_classCallCheck2.default)(this,IfBlockBranch);_this30=_super18.call(this,renderer,block,parent,node);_this30.var=null;var expression=node.expression;var is_else=!expression;if(expression){_this30.dependencies=expression.dynamic_dependencies();// TODO is this the right rule? or should any non-reference count?\n// const should_cache = !is_reference(expression.node, null) && dependencies.length > 0;\nvar _should_cache=false;walk(expression.node,{enter:function enter(node){if(node.type==='CallExpression'||node.type==='NewExpression'){_should_cache=true;}}});if(_should_cache){_this30.condition=block.get_unique_name(\"show_if\");_this30.snippet=expression.manipulate(block);}else{_this30.condition=expression.manipulate(block);}}_this30.block=block.child({comment:create_debugging_comment(node,parent.renderer.component),name:parent.renderer.component.get_unique_name(is_else?\"create_else_block\":\"create_if_block\"),type:node.expression?'if':'else'});_this30.fragment=new FragmentWrapper(renderer,_this30.block,node.children,parent,strip_whitespace,next_sibling);_this30.is_dynamic=_this30.block.dependencies.size>0;return _this30;}return IfBlockBranch;}(Wrapper);var IfBlockWrapper=/*#__PURE__*/function(_Wrapper12){(0,_inherits2.default)(IfBlockWrapper,_Wrapper12);var _super19=_createSuper(IfBlockWrapper);function IfBlockWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _renderer$blocks;var _this31;(0,_classCallCheck2.default)(this,IfBlockWrapper);_this31=_super19.call(this,renderer,block,parent,node);_this31.needs_update=false;_this31.var={type:'Identifier',name:'if_block'};_this31.cannot_use_innerhtml();_this31.not_static_content();_this31.branches=[];var blocks=[];var is_dynamic=false;var has_intros=false;var has_outros=false;var create_branches=function create_branches(node){var branch=new IfBlockBranch(renderer,block,(0,_assertThisInitialized2.default)(_this31),node,strip_whitespace,next_sibling);_this31.branches.push(branch);blocks.push(branch.block);block.add_dependencies(node.expression.dependencies);if(branch.block.dependencies.size>0){// the condition, or its contents, is dynamic\nis_dynamic=true;block.add_dependencies(branch.block.dependencies);}if(branch.dependencies&&branch.dependencies.length>0){// the condition itself is dynamic\n_this31.needs_update=true;}if(branch.block.has_intros)has_intros=true;if(branch.block.has_outros)has_outros=true;if(is_else_if(node.else)){create_branches(node.else.children[0]);}else if(node.else){var _branch=new IfBlockBranch(renderer,block,(0,_assertThisInitialized2.default)(_this31),node.else,strip_whitespace,next_sibling);_this31.branches.push(_branch);blocks.push(_branch.block);if(_branch.block.dependencies.size>0){is_dynamic=true;block.add_dependencies(_branch.block.dependencies);}if(_branch.block.has_intros)has_intros=true;if(_branch.block.has_outros)has_outros=true;}};create_branches(_this31.node);blocks.forEach(function(block){block.has_update_method=is_dynamic;block.has_intro_method=has_intros;block.has_outro_method=has_outros;});(_renderer$blocks=renderer.blocks).push.apply(_renderer$blocks,blocks);return _this31;}(0,_createClass2.default)(IfBlockWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var name=this.var;var needs_anchor=this.next?!this.next.is_dom_node():!parent_node||!this.parent.is_dom_node();var anchor=needs_anchor?block.get_unique_name(\"\".concat(this.var.name,\"_anchor\")):this.next&&this.next.var||'null';var has_else=!this.branches[this.branches.length-1].condition;var if_exists_condition=has_else?null:name;var dynamic=this.branches[0].block.has_update_method;// can use [0] as proxy for all, since they necessarily have the same value\nvar has_intros=this.branches[0].block.has_intro_method;var has_outros=this.branches[0].block.has_outro_method;var has_transitions=has_intros||has_outros;var vars={name:name,anchor:anchor,if_exists_condition:if_exists_condition,has_else:has_else,has_transitions:has_transitions};var detaching=parent_node&&!is_head(parent_node)?null:'detaching';if(this.node.else){this.branches.forEach(function(branch){if(branch.snippet)block.add_variable(branch.condition);});if(has_outros){this.render_compound_with_outros(block,parent_node,parent_nodes,dynamic,vars,detaching);block.chunks.outro.push(b(_templateObject358(),name));}else{this.render_compound(block,parent_node,parent_nodes,dynamic,vars,detaching);}}else{this.render_simple(block,parent_node,parent_nodes,dynamic,vars,detaching);if(has_outros){block.chunks.outro.push(b(_templateObject359(),name));}}if(if_exists_condition){block.chunks.create.push(b(_templateObject360(),if_exists_condition,name));}else{block.chunks.create.push(b(_templateObject361(),name));}if(parent_nodes&&this.renderer.options.hydratable){if(if_exists_condition){block.chunks.claim.push(b(_templateObject362(),if_exists_condition,name,parent_nodes));}else{block.chunks.claim.push(b(_templateObject363(),name,parent_nodes));}}if(has_intros||has_outros){block.chunks.intro.push(b(_templateObject364(),name));}if(needs_anchor){block.add_element(anchor,x(_templateObject365()),parent_nodes&&x(_templateObject366()),parent_node);}this.branches.forEach(function(branch){branch.fragment.render(branch.block,null,x(_templateObject367()));});}},{key:\"render_compound\",value:function render_compound(block,parent_node,_parent_nodes,dynamic,_ref7,detaching){var name=_ref7.name,anchor=_ref7.anchor,has_else=_ref7.has_else,if_exists_condition=_ref7.if_exists_condition,has_transitions=_ref7.has_transitions;var select_block_type=this.renderer.component.get_unique_name(\"select_block_type\");var current_block_type=block.get_unique_name(\"current_block_type\");var get_block=has_else?x(_templateObject368(),current_block_type):x(_templateObject369(),current_block_type,current_block_type);if(this.needs_update){block.chunks.init.push(b(_templateObject370(),select_block_type,this.branches.map(function(_ref8){var dependencies=_ref8.dependencies,condition=_ref8.condition,snippet=_ref8.snippet,block=_ref8.block;return condition?b(_templateObject371(),snippet&&(dependencies.length>0?b(_templateObject372(),condition,block.renderer.dirty(dependencies),condition,snippet):b(_templateObject373(),condition,condition,snippet)),condition,block.name):b(_templateObject374(),block.name);})));}else{block.chunks.init.push(b(_templateObject375(),select_block_type,this.branches.map(function(_ref9){var condition=_ref9.condition,snippet=_ref9.snippet,block=_ref9.block;return condition?b(_templateObject376(),snippet||condition,block.name):b(_templateObject377(),block.name);})));}block.chunks.init.push(b(_templateObject378(),current_block_type,select_block_type,this.get_initial_dirty_bit(),name,get_block));var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';if(if_exists_condition){block.chunks.mount.push(b(_templateObject379(),if_exists_condition,name,initial_mount_node,anchor_node));}else{block.chunks.mount.push(b(_templateObject380(),name,initial_mount_node,anchor_node));}if(this.needs_update){var update_mount_node=this.get_update_mount_node(anchor);var change_block=b(_templateObject381(),if_exists_condition?b(_templateObject382(),if_exists_condition,name):b(_templateObject383(),name),name,get_block,name,name,has_transitions&&b(_templateObject384(),name),name,update_mount_node,anchor);if(dynamic){block.chunks.update.push(b(_templateObject385(),current_block_type,current_block_type,select_block_type,name,name,change_block));}else{block.chunks.update.push(b(_templateObject386(),current_block_type,current_block_type,select_block_type,change_block));}}else if(dynamic){if(if_exists_condition){block.chunks.update.push(b(_templateObject387(),if_exists_condition,name));}else{block.chunks.update.push(b(_templateObject388(),name));}}if(if_exists_condition){block.chunks.destroy.push(b(_templateObject389(),if_exists_condition,name,detaching));}else{block.chunks.destroy.push(b(_templateObject390(),name,detaching));}}// if any of the siblings have outros, we need to keep references to the blocks\n// (TODO does this only apply to bidi transitions?)\n},{key:\"render_compound_with_outros\",value:function render_compound_with_outros(block,parent_node,_parent_nodes,dynamic,_ref10,detaching){var name=_ref10.name,anchor=_ref10.anchor,has_else=_ref10.has_else,has_transitions=_ref10.has_transitions,if_exists_condition=_ref10.if_exists_condition;var select_block_type=this.renderer.component.get_unique_name(\"select_block_type\");var current_block_type_index=block.get_unique_name(\"current_block_type_index\");var previous_block_index=block.get_unique_name(\"previous_block_index\");var if_block_creators=block.get_unique_name(\"if_block_creators\");var if_blocks=block.get_unique_name(\"if_blocks\");var if_current_block_type_index=has_else?function(nodes){return nodes;}:function(nodes){return b(_templateObject391(),current_block_type_index,nodes);};block.add_variable(current_block_type_index);block.add_variable(name);block.chunks.init.push(b(_templateObject392(),if_block_creators,this.branches.map(function(branch){return branch.block.name;}),if_blocks,this.needs_update?b(_templateObject393(),select_block_type,this.branches.map(function(_ref11,i){var dependencies=_ref11.dependencies,condition=_ref11.condition,snippet=_ref11.snippet;return condition?b(_templateObject394(),snippet&&(dependencies.length>0?b(_templateObject395(),block.renderer.dirty(dependencies),condition,snippet):b(_templateObject396(),condition,condition,snippet)),condition,i):b(_templateObject397(),i);}),!has_else&&b(_templateObject398())):b(_templateObject399(),select_block_type,this.branches.map(function(_ref12,i){var condition=_ref12.condition,snippet=_ref12.snippet;return condition?b(_templateObject400(),snippet||condition,i):b(_templateObject401(),i);}),!has_else&&b(_templateObject402()))));if(has_else){block.chunks.init.push(b(_templateObject403(),current_block_type_index,select_block_type,this.get_initial_dirty_bit(),name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index));}else{block.chunks.init.push(b(_templateObject404(),current_block_type_index,select_block_type,this.get_initial_dirty_bit(),name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index));}var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';block.chunks.mount.push(if_current_block_type_index(b(_templateObject405(),if_blocks,current_block_type_index,initial_mount_node,anchor_node)));if(this.needs_update){var update_mount_node=this.get_update_mount_node(anchor);var destroy_old_block=b(_templateObject406(),if_blocks,previous_block_index,if_blocks,previous_block_index);var create_new_block=b(_templateObject407(),name,if_blocks,current_block_type_index,name,name,if_blocks,current_block_type_index,if_block_creators,current_block_type_index,name,has_transitions&&b(_templateObject408(),name),name,update_mount_node,anchor);var change_block=has_else?b(_templateObject409(),destroy_old_block,create_new_block):b(_templateObject410(),name,destroy_old_block,current_block_type_index,create_new_block,name);if(dynamic){block.chunks.update.push(b(_templateObject411(),previous_block_index,current_block_type_index,current_block_type_index,select_block_type,current_block_type_index,previous_block_index,if_current_block_type_index(b(_templateObject412(),if_blocks,current_block_type_index)),change_block));}else{block.chunks.update.push(b(_templateObject413(),previous_block_index,current_block_type_index,current_block_type_index,select_block_type,current_block_type_index,previous_block_index,change_block));}}else if(dynamic){if(if_exists_condition){block.chunks.update.push(b(_templateObject414(),if_exists_condition,name));}else{block.chunks.update.push(b(_templateObject415(),name));}}block.chunks.destroy.push(if_current_block_type_index(b(_templateObject416(),if_blocks,current_block_type_index,detaching)));}},{key:\"render_simple\",value:function render_simple(block,parent_node,_parent_nodes,dynamic,_ref13,detaching){var name=_ref13.name,anchor=_ref13.anchor,if_exists_condition=_ref13.if_exists_condition,has_transitions=_ref13.has_transitions;var branch=this.branches[0];if(branch.snippet)block.add_variable(branch.condition,branch.snippet);block.chunks.init.push(b(_templateObject417(),name,branch.condition,branch.block.name));var initial_mount_node=parent_node||'#target';var anchor_node=parent_node?'null':'#anchor';block.chunks.mount.push(b(_templateObject418(),name,name,initial_mount_node,anchor_node));if(branch.dependencies.length>0){var update_mount_node=this.get_update_mount_node(anchor);var enter=b(_templateObject419(),name,dynamic&&b(_templateObject420(),name),has_transitions&&b(_templateObject421(),block.renderer.dirty(branch.dependencies),name),name,branch.block.name,name,has_transitions&&b(_templateObject422(),name),name,update_mount_node,anchor);if(branch.snippet){block.chunks.update.push(b(_templateObject423(),block.renderer.dirty(branch.dependencies),branch.condition,branch.snippet));}// no `p()` here — we don't want to update outroing nodes,\n// as that will typically result in glitching\nif(branch.block.has_outro_method){block.chunks.update.push(b(_templateObject424(),branch.condition,enter,name,name,name));}else{block.chunks.update.push(b(_templateObject425(),branch.condition,enter,name,name,name));}}else if(dynamic){block.chunks.update.push(b(_templateObject426(),branch.condition,name));}if(if_exists_condition){block.chunks.destroy.push(b(_templateObject427(),if_exists_condition,name,detaching));}else{block.chunks.destroy.push(b(_templateObject428(),name,detaching));}}},{key:\"get_initial_dirty_bit\",value:function get_initial_dirty_bit(){var _this=this;// TODO: context-overflow make it less gross\nvar val=x(_templateObject429());return{get type(){return _this.renderer.context_overflow?'ArrayExpression':'UnaryExpression';},// as [-1]\nelements:[val],// as -1\noperator:val.operator,prefix:val.prefix,argument:val.argument};}}]);return IfBlockWrapper;}(Wrapper);var InlineComponentWrapper=/*#__PURE__*/function(_Wrapper13){(0,_inherits2.default)(InlineComponentWrapper,_Wrapper13);var _super20=_createSuper(InlineComponentWrapper);function InlineComponentWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this32;(0,_classCallCheck2.default)(this,InlineComponentWrapper);_this32=_super20.call(this,renderer,block,parent,node);_this32.slots=new Map();_this32.cannot_use_innerhtml();_this32.not_static_content();if(_this32.node.expression){block.add_dependencies(_this32.node.expression.dependencies);}_this32.node.attributes.forEach(function(attr){block.add_dependencies(attr.dependencies);});_this32.node.bindings.forEach(function(binding){if(binding.is_contextual){mark_each_block_bindings((0,_assertThisInitialized2.default)(_this32),binding);}block.add_dependencies(binding.expression.dependencies);});_this32.node.handlers.forEach(function(handler){if(handler.expression){block.add_dependencies(handler.expression.dependencies);}});_this32.var={type:'Identifier',name:(_this32.node.name==='svelte:self'?renderer.component.name.name:_this32.node.name==='svelte:component'?'switch_instance':sanitize(_this32.node.name)).toLowerCase()};if(_this32.node.children.length){_this32.node.lets.forEach(function(l){extract_names(l.value||l.name).forEach(function(name){renderer.add_to_context(name,true);});});var default_slot=block.child({comment:create_debugging_comment(node,renderer.component),name:renderer.component.get_unique_name(\"create_default_slot\"),type:'slot'});_this32.renderer.blocks.push(default_slot);_this32.slots.set('default',get_slot_definition(default_slot,_this32.node.scope,_this32.node.lets));_this32.fragment=new FragmentWrapper(renderer,default_slot,node.children,(0,_assertThisInitialized2.default)(_this32),strip_whitespace,next_sibling);var dependencies=new Set();// TODO is this filtering necessary? (I *think* so)\ndefault_slot.dependencies.forEach(function(name){if(!_this32.node.scope.is_let(name)){dependencies.add(name);}});block.add_dependencies(dependencies);}block.add_outro();return _this32;}(0,_createClass2.default)(InlineComponentWrapper,[{key:\"warn_if_reactive\",value:function warn_if_reactive(){var name=this.node.name;var variable=this.renderer.component.var_lookup.get(name);if(!variable){return;}if(variable.reassigned||variable.export_name||variable.is_reactive_dependency){this.renderer.component.warn(this.node,{code:'reactive-component',message:\"<\".concat(name,\"/> will not be reactive if \").concat(name,\" changes. Use <svelte:component this={\").concat(name,\"}/> if you want this reactivity.\")});}}},{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this33=this;this.warn_if_reactive();var renderer=this.renderer;var component=renderer.component;var name=this.var;block.add_variable(name);var component_opts=x(_templateObject430());var statements=[];var updates=[];if(this.fragment){this.renderer.add_to_context('$$scope',true);var default_slot=this.slots.get('default');this.fragment.nodes.forEach(function(child){child.render(default_slot.block,null,x(_templateObject431()));});}var props;var name_changes=block.get_unique_name(\"\".concat(name.name,\"_changes\"));var uses_spread=!!this.node.attributes.find(function(a){return a.is_spread;});// removing empty slot\nvar _iterator7=_createForOfIteratorHelper(this.slots.keys()),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var slot=_step7.value;if(!this.slots.get(slot).block.has_content()){this.renderer.remove_block(this.slots.get(slot).block);this.slots.delete(slot);}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}var initial_props=this.slots.size>0?[p(_templateObject432(),Array.from(this.slots).map(function(_ref14){var _ref15=(0,_slicedToArray2.default)(_ref14,2),name=_ref15[0],slot=_ref15[1];return p(_templateObject433(),name,slot.block.name,slot.get_context||null,slot.get_changes||null);})),p(_templateObject434())]:[];var attribute_object=uses_spread?x(_templateObject435(),initial_props):x(_templateObject436(),this.node.attributes.map(function(attr){return p(_templateObject437(),attr.name,attr.get_value(block));}),initial_props);if(this.node.attributes.length||this.node.bindings.length||initial_props.length){if(!uses_spread&&this.node.bindings.length===0){component_opts.properties.push(p(_templateObject438(),attribute_object));}else{props=block.get_unique_name(\"\".concat(name.name,\"_props\"));component_opts.properties.push(p(_templateObject439(),props));}}if(component.compile_options.dev){// TODO this is a terrible hack, but without it the component\n// will complain that options.target is missing. This would\n// work better if components had separate public and private\n// APIs\ncomponent_opts.properties.push(p(_templateObject440()));}var fragment_dependencies=new Set(this.fragment?['$$scope']:[]);this.slots.forEach(function(slot){slot.block.dependencies.forEach(function(name){var is_let=slot.scope.is_let(name);var variable=renderer.component.var_lookup.get(name);if(is_let||is_dynamic$1(variable))fragment_dependencies.add(name);});});var dynamic_attributes=this.node.attributes.filter(function(a){return a.get_dependencies().length>0;});if(!uses_spread&&(dynamic_attributes.length>0||this.node.bindings.length>0||fragment_dependencies.size>0)){updates.push(b(_templateObject441(),name_changes));}if(this.node.attributes.length){if(uses_spread){var levels=block.get_unique_name(\"\".concat(this.var.name,\"_spread_levels\"));var _initial_props=[];var changes=[];var all_dependencies=new Set();this.node.attributes.forEach(function(attr){add_to_set(all_dependencies,attr.dependencies);});this.node.attributes.forEach(function(attr,i){var name=attr.name,dependencies=attr.dependencies;var condition=dependencies.size>0&&dependencies.size!==all_dependencies.size?renderer.dirty(Array.from(dependencies)):null;var unchanged=dependencies.size===0;var change_object;if(attr.is_spread){var _value5=attr.expression.manipulate(block);_initial_props.push(_value5);var value_object=_value5;if(attr.expression.node.type!=='ObjectExpression'){value_object=x(_templateObject442(),_value5);}change_object=value_object;}else{var obj=x(_templateObject443(),name,attr.get_value(block));_initial_props.push(obj);change_object=obj;}changes.push(unchanged?x(_templateObject444(),levels,i):condition?x(_templateObject445(),condition,change_object):change_object);});block.chunks.init.push(b(_templateObject446(),levels,_initial_props));statements.push(b(_templateObject447(),levels,props,props,levels));if(all_dependencies.size){var condition=renderer.dirty(Array.from(all_dependencies));updates.push(b(_templateObject448(),name_changes,condition,levels,changes));}else{updates.push(b(_templateObject449(),name_changes));}}else{dynamic_attributes.forEach(function(attribute){var dependencies=attribute.get_dependencies();if(dependencies.length>0){var _condition2=renderer.dirty(dependencies);updates.push(b(_templateObject450(),_condition2,name_changes,attribute.name,attribute.get_value(block)));}});}}if(fragment_dependencies.size>0){updates.push(b(_templateObject451(),renderer.dirty(Array.from(fragment_dependencies)),name_changes));}var munged_bindings=this.node.bindings.map(function(binding){component.has_reactive_assignments=true;if(binding.name==='this'){return bind_this(component,block,new BindingWrapper(block,binding,_this33),_this33.var);}var id=component.get_unique_name(\"\".concat(_this33.var.name,\"_\").concat(binding.name,\"_binding\"));renderer.add_to_context(id.name);var callee=renderer.reference(id);var updating=block.get_unique_name(\"updating_\".concat(binding.name));block.add_variable(updating);var snippet=binding.expression.manipulate(block);statements.push(b(_templateObject452(),snippet,props,binding.name,snippet));updates.push(b(_templateObject453(),updating,renderer.dirty(Array.from(binding.expression.dependencies)),updating,name_changes,binding.name,snippet,updating));var contextual_dependencies=Array.from(binding.expression.contextual_dependencies);var dependencies=Array.from(binding.expression.dependencies);var lhs=binding.raw_expression;if(binding.is_contextual&&binding.expression.node.type==='Identifier'){// bind:x={y} — we can't just do `y = x`, we need to\n// to `array[index] = x;\nvar _name3=binding.expression.node.name;var _block$bindings$get=block.bindings.get(_name3),object=_block$bindings$get.object,property=_block$bindings$get.property,_snippet4=_block$bindings$get.snippet;lhs=_snippet4;contextual_dependencies.push(object.name,property.name);}var params=[x(_templateObject454())];if(contextual_dependencies.length>0){var args=[];contextual_dependencies.forEach(function(name){params.push({type:'Identifier',name:name});renderer.add_to_context(name,true);args.push(renderer.reference(name));});block.chunks.init.push(b(_templateObject455(),id,callee,args));block.maintain_context=true;// TODO put this somewhere more logical\n}else{block.chunks.init.push(b(_templateObject456(),id,callee));}var body=b(_templateObject457(),id,params,lhs,renderer.invalidate(dependencies[0]));component.partly_hoisted.push(body);return b(_templateObject458(),_this33.var,binding.name,id);});var munged_handlers=this.node.handlers.map(function(handler){var event_handler=new EventHandlerWrapper(handler,_this33);var snippet=event_handler.get_snippet(block);if(handler.modifiers.has('once'))snippet=x(_templateObject459(),snippet);return b(_templateObject460(),name,handler.name,snippet);});if(this.node.name==='svelte:component'){var switch_value=block.get_unique_name('switch_value');var switch_props=block.get_unique_name('switch_props');var snippet=this.node.expression.manipulate(block);block.chunks.init.push(b(_templateObject461(),switch_value,snippet,switch_props,(this.node.attributes.length>0||this.node.bindings.length>0)&&b(_templateObject462(),props&&b(_templateObject463(),props,attribute_object)),statements,component_opts,switch_value,name,switch_value,switch_props,munged_bindings,munged_handlers));block.chunks.create.push(b(_templateObject464(),name,name));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject465(),name,name,parent_nodes));}block.chunks.mount.push(b(_templateObject466(),name,name,parent_node||'#target',parent_node?'null':'#anchor'));var anchor=this.get_or_create_anchor(block,parent_node,parent_nodes);var update_mount_node=this.get_update_mount_node(anchor);if(updates.length){block.chunks.update.push(b(_templateObject467(),updates));}block.chunks.update.push(b(_templateObject468(),switch_value,switch_value,snippet,name,name,switch_value,name,switch_value,switch_props,munged_bindings,munged_handlers,name,name,name,update_mount_node,anchor,name,switch_value,updates.length>0&&b(_templateObject469(),name,name_changes)));block.chunks.intro.push(b(_templateObject470(),name,name));block.chunks.outro.push(b(_templateObject471(),name,name));block.chunks.destroy.push(b(_templateObject472(),name,name,parent_node?null:'detaching'));}else{var _expression10=this.node.name==='svelte:self'?component.name:this.renderer.reference(this.node.name);block.chunks.init.push(b(_templateObject473(),(this.node.attributes.length>0||this.node.bindings.length>0)&&b(_templateObject474(),props&&b(_templateObject475(),props,attribute_object)),statements,name,_expression10,component_opts,munged_bindings,munged_handlers));block.chunks.create.push(b(_templateObject476(),name));if(parent_nodes&&this.renderer.options.hydratable){block.chunks.claim.push(b(_templateObject477(),name,parent_nodes));}block.chunks.mount.push(b(_templateObject478(),name,parent_node||'#target',parent_node?'null':'#anchor'));block.chunks.intro.push(b(_templateObject479(),name));if(updates.length){block.chunks.update.push(b(_templateObject480(),updates,name,name_changes));}block.chunks.destroy.push(b(_templateObject481(),name,parent_node?null:'detaching'));block.chunks.outro.push(b(_templateObject482(),name));}}}]);return InlineComponentWrapper;}(Wrapper);function get_slot_data(values){var block=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return{type:'ObjectExpression',properties:Array.from(values.values()).filter(function(attribute){return attribute.name!=='name';}).map(function(attribute){var value=get_value(block,attribute);return p(_templateObject483(),attribute.name,value);})};}function get_value(block,attribute){if(attribute.is_true)return x(_templateObject484());if(attribute.chunks.length===0)return x(_templateObject485());var value=attribute.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data):block?chunk.manipulate(block):chunk.node;}).reduce(function(lhs,rhs){return x(_templateObject486(),lhs,rhs);});if(attribute.chunks.length>1&&attribute.chunks[0].type!=='Text'){value=x(_templateObject487(),value);}return value;}var SlotWrapper=/*#__PURE__*/function(_Wrapper14){(0,_inherits2.default)(SlotWrapper,_Wrapper14);var _super21=_createSuper(SlotWrapper);function SlotWrapper(renderer,block,parent,node,strip_whitespace,next_sibling){var _this34;(0,_classCallCheck2.default)(this,SlotWrapper);_this34=_super21.call(this,renderer,block,parent,node);_this34.fallback=null;_this34.var={type:'Identifier',name:'slot'};_this34.dependencies=new Set(['$$scope']);_this34.cannot_use_innerhtml();_this34.not_static_content();if(_this34.node.children.length){_this34.fallback=block.child({comment:create_debugging_comment(_this34.node.children[0],_this34.renderer.component),name:_this34.renderer.component.get_unique_name(\"fallback_block\"),type:'fallback'});renderer.blocks.push(_this34.fallback);}_this34.fragment=new FragmentWrapper(renderer,_this34.fallback,node.children,(0,_assertThisInitialized2.default)(_this34),strip_whitespace,next_sibling);_this34.node.values.forEach(function(attribute){add_to_set(_this34.dependencies,attribute.dependencies);});block.add_dependencies(_this34.dependencies);// we have to do this, just in case\nblock.add_intro();block.add_outro();return _this34;}(0,_createClass2.default)(SlotWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){var _this35=this;var renderer=this.renderer;var slot_name=this.node.slot_name;var get_slot_changes_fn;var get_slot_context_fn;if(this.node.values.size>0){get_slot_changes_fn=renderer.component.get_unique_name(\"get_\".concat(sanitize(slot_name),\"_slot_changes\"));get_slot_context_fn=renderer.component.get_unique_name(\"get_\".concat(sanitize(slot_name),\"_slot_context\"));var changes=x(_templateObject488());var dependencies=new Set();this.node.values.forEach(function(attribute){attribute.chunks.forEach(function(chunk){if(chunk.dependencies){add_to_set(dependencies,chunk.contextual_dependencies);// add_to_set(dependencies, (chunk as Expression).dependencies);\nchunk.dependencies.forEach(function(name){var variable=renderer.component.var_lookup.get(name);if(variable&&!variable.hoistable)dependencies.add(name);});}});var dynamic_dependencies=Array.from(attribute.dependencies).filter(function(name){return _this35.is_dependency_dynamic(name);});if(dynamic_dependencies.length>0){changes.properties.push(p(_templateObject489(),attribute.name,renderer.dirty(dynamic_dependencies)));}});renderer.blocks.push(b(_templateObject490(),get_slot_changes_fn,changes,get_slot_context_fn,get_slot_data(this.node.values,block)));}else{get_slot_changes_fn='null';get_slot_context_fn='null';}var has_fallback=!!this.fallback;if(this.fallback){this.fragment.render(this.fallback,null,x(_templateObject491()));has_fallback=this.fallback.has_content();if(!has_fallback){renderer.remove_block(this.fallback);}}var slot=block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot\"));var slot_definition=block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot_template\"));var slot_or_fallback=has_fallback?block.get_unique_name(\"\".concat(sanitize(slot_name),\"_slot_or_fallback\")):slot;block.chunks.init.push(b(_templateObject492(),slot_definition,renderer.reference('$$slots'),slot_name,slot,slot_definition,renderer.reference('$$scope'),get_slot_context_fn,has_fallback?b(_templateObject493(),slot_or_fallback,slot,this.fallback.name):null));block.chunks.create.push(b(_templateObject494(),slot_or_fallback,slot_or_fallback));if(renderer.options.hydratable){block.chunks.claim.push(b(_templateObject495(),slot_or_fallback,slot_or_fallback,parent_nodes));}block.chunks.mount.push(b(_templateObject496(),slot_or_fallback,slot_or_fallback,parent_node||'#target',parent_node?'null':'#anchor'));block.chunks.intro.push(b(_templateObject497(),slot_or_fallback));block.chunks.outro.push(b(_templateObject498(),slot_or_fallback));var dynamic_dependencies=Array.from(this.dependencies).filter(function(name){return _this35.is_dependency_dynamic(name);});var fallback_dynamic_dependencies=has_fallback?Array.from(this.fallback.dependencies).filter(function(name){return _this35.is_dependency_dynamic(name);}):[];var slot_update=b(_templateObject499(),slot,renderer.dirty(dynamic_dependencies),slot,slot_definition,renderer.reference('$$scope'),get_slot_changes_fn,get_slot_context_fn);var fallback_update=has_fallback&&fallback_dynamic_dependencies.length>0&&b(_templateObject500(),slot_or_fallback,slot_or_fallback,renderer.dirty(fallback_dynamic_dependencies),slot_or_fallback);if(fallback_update){block.chunks.update.push(b(_templateObject501(),slot,slot_update,fallback_update));}else{block.chunks.update.push(b(_templateObject502(),slot,slot_update));}block.chunks.destroy.push(b(_templateObject503(),slot_or_fallback,slot_or_fallback));}},{key:\"is_dependency_dynamic\",value:function is_dependency_dynamic(name){if(name==='$$scope')return true;if(this.node.scope.is_let(name))return true;if(is_reserved_keyword(name))return true;var variable=this.renderer.component.var_lookup.get(name);return is_dynamic$1(variable);}}]);return SlotWrapper;}(Wrapper);var TitleWrapper=/*#__PURE__*/function(_Wrapper15){(0,_inherits2.default)(TitleWrapper,_Wrapper15);var _super22=_createSuper(TitleWrapper);function TitleWrapper(renderer,block,parent,node,_strip_whitespace,_next_sibling){(0,_classCallCheck2.default)(this,TitleWrapper);return _super22.call(this,renderer,block,parent,node);}(0,_createClass2.default)(TitleWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var is_dynamic=!!this.node.children.find(function(node){return node.type!=='Text';});if(is_dynamic){var _value6;var all_dependencies=new Set();// TODO some of this code is repeated in Tag.ts — would be good to\n// DRY it out if that's possible without introducing crazy indirection\nif(this.node.children.length===1){// single {tag} — may be a non-string\n// @ts-ignore todo: check this\nvar _expression11=this.node.children[0].expression;_value6=_expression11.manipulate(block);add_to_set(all_dependencies,_expression11.dependencies);}else{// '{foo} {bar}' — treat as string concatenation\n_value6=this.node.children.map(function(chunk){if(chunk.type==='Text')return string_literal(chunk.data);chunk.expression.dependencies.forEach(function(d){all_dependencies.add(d);});return chunk.expression.manipulate(block);}).reduce(function(lhs,rhs){return x(_templateObject504(),lhs,rhs);});if(this.node.children[0].type!=='Text'){_value6=x(_templateObject505(),_value6);}}var last=this.node.should_cache&&block.get_unique_name(\"title_value\");if(this.node.should_cache)block.add_variable(last);var init=this.node.should_cache?x(_templateObject506(),last,_value6):_value6;block.chunks.init.push(b(_templateObject507(),init));var updater=b(_templateObject508(),this.node.should_cache?last:_value6);if(all_dependencies.size){var dependencies=Array.from(all_dependencies);var condition=block.renderer.dirty(dependencies);if(block.has_outros){condition=x(_templateObject509(),condition);}if(this.node.should_cache){condition=x(_templateObject510(),condition,last,last,_value6);}block.chunks.update.push(b(_templateObject511(),condition,updater));}}else{var _value7=this.node.children.length>0?string_literal(this.node.children[0].data):x(_templateObject512());block.chunks.hydrate.push(b(_templateObject513(),_value7));}}}]);return TitleWrapper;}(Wrapper);var associated_events={innerWidth:'resize',innerHeight:'resize',outerWidth:'resize',outerHeight:'resize',scrollX:'scroll',scrollY:'scroll'};var properties={scrollX:'pageXOffset',scrollY:'pageYOffset'};var readonly=new Set(['innerWidth','innerHeight','outerWidth','outerHeight','online']);var WindowWrapper=/*#__PURE__*/function(_Wrapper16){(0,_inherits2.default)(WindowWrapper,_Wrapper16);var _super23=_createSuper(WindowWrapper);function WindowWrapper(renderer,block,parent,node){var _this36;(0,_classCallCheck2.default)(this,WindowWrapper);_this36=_super23.call(this,renderer,block,parent,node);_this36.handlers=_this36.node.handlers.map(function(handler){return new EventHandlerWrapper(handler,(0,_assertThisInitialized2.default)(_this36));});return _this36;}(0,_createClass2.default)(WindowWrapper,[{key:\"render\",value:function render(block,_parent_node,_parent_nodes){var renderer=this.renderer;var component=renderer.component;var events={};var bindings={};add_actions(block,'@_window',this.node.actions);add_event_handlers(block,'@_window',this.handlers);this.node.bindings.forEach(function(binding){// in dev mode, throw if read-only values are written to\nif(readonly.has(binding.name)){renderer.readonly.add(binding.expression.node.name);}bindings[binding.name]=binding.expression.node.name;// bind:online is a special case, we need to listen for two separate events\nif(binding.name==='online')return;var associated_event=associated_events[binding.name];var property=properties[binding.name]||binding.name;if(!events[associated_event])events[associated_event]=[];events[associated_event].push({name:binding.expression.node.name,value:property});});var scrolling=block.get_unique_name(\"scrolling\");var clear_scrolling=block.get_unique_name(\"clear_scrolling\");var scrolling_timeout=block.get_unique_name(\"scrolling_timeout\");Object.keys(events).forEach(function(event){var id=block.get_unique_name(\"onwindow\".concat(event));var props=events[event];renderer.add_to_context(id.name);var fn=renderer.reference(id.name);if(event==='scroll'){// TODO other bidirectional bindings...\nblock.add_variable(scrolling,x(_templateObject514()));block.add_variable(clear_scrolling,x(_templateObject515(),scrolling));block.add_variable(scrolling_timeout);var condition=bindings.scrollX&&bindings.scrollY?x(_templateObject516(),bindings.scrollX,bindings.scrollY):x(_templateObject517(),bindings.scrollX||bindings.scrollY);var scrollX=bindings.scrollX&&x(_templateObject518(),bindings.scrollX);var scrollY=bindings.scrollY&&x(_templateObject519(),bindings.scrollY);renderer.meta_bindings.push(b(_templateObject520(),condition,scrollX||'@_window.pageXOffset',scrollY||'@_window.pageYOffset',scrollX&&\"\".concat(scrollX,\" = @_window.pageXOffset;\"),scrollY&&\"\".concat(scrollY,\" = @_window.pageYOffset;\")));block.event_listeners.push(x(_templateObject521(),event,scrolling,scrolling_timeout,scrolling_timeout,clear_scrolling,fn));}else{props.forEach(function(prop){renderer.meta_bindings.push(b(_templateObject522(),prop.name,prop.value));});block.event_listeners.push(x(_templateObject523(),event,fn));}component.partly_hoisted.push(b(_templateObject524(),id,props.map(function(prop){return renderer.invalidate(prop.name,x(_templateObject525(),prop.name,prop.value));})));block.chunks.init.push(b(_templateObject526(),fn));component.has_reactive_assignments=true;});// special case... might need to abstract this out if we add more special cases\nif(bindings.scrollX||bindings.scrollY){var condition=renderer.dirty([bindings.scrollX,bindings.scrollY].filter(Boolean));var scrollX=bindings.scrollX?renderer.reference(bindings.scrollX):x(_templateObject527());var scrollY=bindings.scrollY?renderer.reference(bindings.scrollY):x(_templateObject528());block.chunks.update.push(b(_templateObject529(),condition,scrolling,scrolling,scrolling_timeout,scrollX,scrollY,scrolling_timeout,clear_scrolling));}// another special case. (I'm starting to think these are all special cases.)\nif(bindings.online){var _id3=block.get_unique_name(\"onlinestatuschanged\");var name=bindings.online;renderer.add_to_context(_id3.name);var reference=renderer.reference(_id3.name);component.partly_hoisted.push(b(_templateObject530(),_id3,renderer.invalidate(name,x(_templateObject531(),name))));block.chunks.init.push(b(_templateObject532(),reference));block.event_listeners.push(x(_templateObject533(),reference),x(_templateObject534(),reference));component.has_reactive_assignments=true;}}}]);return WindowWrapper;}(Wrapper);function link(next,prev){prev.next=next;if(next)next.prev=prev;}var wrappers={AwaitBlock:AwaitBlockWrapper,Body:BodyWrapper,Comment:null,DebugTag:DebugTagWrapper,EachBlock:EachBlockWrapper,Element:ElementWrapper,Head:HeadWrapper,IfBlock:IfBlockWrapper,InlineComponent:InlineComponentWrapper,MustacheTag:MustacheTagWrapper,Options:null,RawMustacheTag:RawMustacheTagWrapper,Slot:SlotWrapper,Text:TextWrapper,Title:TitleWrapper,Window:WindowWrapper};function trimmable_at(child,next_sibling){// Whitespace is trimmable if one of the following is true:\n// The child and its sibling share a common nearest each block (not at an each block boundary)\n// The next sibling's previous node is an each block\nreturn next_sibling.node.find_nearest(/EachBlock/)===child.find_nearest(/EachBlock/)||next_sibling.node.prev.type==='EachBlock';}var FragmentWrapper=/*#__PURE__*/function(){function FragmentWrapper(renderer,block,nodes,parent,strip_whitespace,next_sibling){(0,_classCallCheck2.default)(this,FragmentWrapper);this.nodes=[];var last_child;var window_wrapper;var i=nodes.length;while(i--){var child=nodes[i];if(!child.type){throw new Error(\"missing type\");}if(!(child.type in wrappers)){throw new Error(\"TODO implement \".concat(child.type));}// special case — this is an easy way to remove whitespace surrounding\n// <svelte:window/>. lil hacky but it works\nif(child.type==='Window'){window_wrapper=new WindowWrapper(renderer,block,parent,child);continue;}if(child.type==='Text'){var _data4=child.data;// We want to remove trailing whitespace inside an element/component/block,\n// *unless* there is no whitespace between this node and its next sibling\nif(this.nodes.length===0){var should_trim=next_sibling?next_sibling.node.type==='Text'&&/^\\s/.test(next_sibling.node.data)&&trimmable_at(child,next_sibling):!child.has_ancestor('EachBlock');if(should_trim){_data4=trim_end(_data4);if(!_data4)continue;}}// glue text nodes (which could e.g. be separated by comments) together\nif(last_child&&last_child.node.type==='Text'){last_child.data=_data4+last_child.data;continue;}var wrapper=new TextWrapper(renderer,block,parent,child,_data4);if(wrapper.skip)continue;this.nodes.unshift(wrapper);link(last_child,last_child=wrapper);}else{var _Wrapper17=wrappers[child.type];if(!_Wrapper17)continue;var _wrapper2=new _Wrapper17(renderer,block,parent,child,strip_whitespace,last_child||next_sibling);this.nodes.unshift(_wrapper2);link(last_child,last_child=_wrapper2);}}if(strip_whitespace){var first=this.nodes[0];if(first&&first.node.type==='Text'){first.data=trim_start(first.data);if(!first.data){first.var=null;this.nodes.shift();if(this.nodes[0]){this.nodes[0].prev=null;}}}}if(window_wrapper){this.nodes.unshift(window_wrapper);link(last_child,window_wrapper);}}(0,_createClass2.default)(FragmentWrapper,[{key:\"render\",value:function render(block,parent_node,parent_nodes){for(var _i30=0;_i30<this.nodes.length;_i30+=1){this.nodes[_i30].render(block,parent_node,parent_nodes);}}}]);return FragmentWrapper;}();var Renderer=/*#__PURE__*/function(){function Renderer(component,options){var _this37=this;(0,_classCallCheck2.default)(this,Renderer);this.context=[];this.initial_context=[];this.context_lookup=new Map();this.blocks=[];this.readonly=new Set();this.meta_bindings=[];// initial values for e.g. window.innerWidth, if there's a <svelte:window> meta tag\nthis.binding_groups=new Map();this.component=component;this.options=options;this.locate=component.locate;// TODO messy\nthis.file_var=options.dev&&this.component.get_unique_name('file');component.vars.filter(function(v){return!v.hoistable||v.export_name&&!v.module;}).forEach(function(v){return _this37.add_to_context(v.name);});// ensure store values are included in context\ncomponent.vars.filter(function(v){return v.subscribable;}).forEach(function(v){return _this37.add_to_context(\"$\".concat(v.name));});reserved_keywords.forEach(function(keyword){if(component.var_lookup.has(keyword)){_this37.add_to_context(keyword);}});if(component.slots.size>0){this.add_to_context('$$scope');this.add_to_context('$$slots');}if(this.binding_groups.size>0){this.add_to_context('$$binding_groups');}// main block\nthis.block=new Block$1({renderer:this,name:null,type:'component',key:null,bindings:new Map(),dependencies:new Set()});this.block.has_update_method=true;this.fragment=new FragmentWrapper(this,this.block,component.fragment.children,null,true,null);// TODO messy\nthis.blocks.forEach(function(block){if(block instanceof Block$1){block.assign_variable_names();}});this.block.assign_variable_names();this.fragment.render(this.block,null,x(_templateObject535()));this.context_overflow=this.context.length>31;this.context.forEach(function(member){var variable=member.variable;if(variable){member.priority+=2;if(variable.mutated||variable.reassigned)member.priority+=4;// these determine whether variable is included in initial context\n// array, so must have the highest priority\nif(variable.export_name)member.priority+=16;if(variable.referenced)member.priority+=32;}else if(member.is_non_contextual){// determine whether variable is included in initial context\n// array, so must have the highest priority\nmember.priority+=8;}if(!member.is_contextual){member.priority+=1;}});this.context.sort(function(a,b){return b.priority-a.priority||a.index.value-b.index.value;});this.context.forEach(function(member,i){return member.index.value=i;});var i=this.context.length;while(i--){var member=this.context[i];if(member.variable){if(member.variable.referenced||member.variable.export_name)break;}else if(member.is_non_contextual){break;}}this.initial_context=this.context.slice(0,i+1);}(0,_createClass2.default)(Renderer,[{key:\"add_to_context\",value:function add_to_context(name){var contextual=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!this.context_lookup.has(name)){var _member={name:name,index:{type:'Literal',value:this.context.length},is_contextual:false,is_non_contextual:false,variable:null,priority:0};this.context_lookup.set(name,_member);this.context.push(_member);}var member=this.context_lookup.get(name);if(contextual){member.is_contextual=true;}else{member.is_non_contextual=true;var variable=this.component.var_lookup.get(name);member.variable=variable;}return member;}},{key:\"invalidate\",value:function invalidate(name,value){var _this38=this;var variable=this.component.var_lookup.get(name);var member=this.context_lookup.get(name);if(variable&&variable.subscribable&&(variable.reassigned||variable.export_name)){return x(_templateObject536(),\"$$subscribe_\".concat(name),member.index,value||name);}if(name[0]==='$'&&name[1]!=='$'){return x(_templateObject537(),name.slice(1),value||name);}if(variable&&(variable.module||!variable.referenced&&!variable.is_reactive_dependency&&!variable.export_name&&!name.startsWith('$$'))){return value||name;}if(value){return x(_templateObject538(),member.index,value);}// if this is a reactive declaration, invalidate dependencies recursively\nvar deps=new Set([name]);deps.forEach(function(name){var reactive_declarations=_this38.component.reactive_declarations.filter(function(x){return x.assignees.has(name);});reactive_declarations.forEach(function(declaration){declaration.dependencies.forEach(function(name){deps.add(name);});});});// TODO ideally globals etc wouldn't be here in the first place\nvar filtered=Array.from(deps).filter(function(n){return _this38.context_lookup.has(n);});if(!filtered.length)return null;return filtered.map(function(n){return x(_templateObject539(),_this38.context_lookup.get(n).index,n);}).reduce(function(lhs,rhs){return x(_templateObject540(),lhs,rhs);});}},{key:\"dirty\",value:function dirty(names){var is_reactive_declaration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var renderer=this;var dirty=is_reactive_declaration?x(_templateObject541()):x(_templateObject542());var get_bitmask=function get_bitmask(){var bitmask=[];names.forEach(function(name){var member=renderer.context_lookup.get(name);if(!member)return;if(member.index.value===-1){throw new Error(\"unset index\");}var value=member.index.value;var i=value/31|0;var n=1<<value%31;if(!bitmask[i])bitmask[i]={n:0,names:[]};bitmask[i].n|=n;bitmask[i].names.push(name);});return bitmask;};// TODO: context-overflow make it less gross\nreturn{// Using a ParenthesizedExpression allows us to create\n// the expression lazily. TODO would be better if\n// context was determined before rendering, so that\n// this indirection was unnecessary\ntype:'ParenthesizedExpression',get expression(){var bitmask=get_bitmask();if(!bitmask.length){return x(_templateObject543(),dirty,names.join(', '));}if(renderer.context_overflow){return bitmask.map(function(b,i){return{b:b,i:i};}).filter(function(_ref16){var b=_ref16.b;return b;}).map(function(_ref17){var b=_ref17.b,i=_ref17.i;return x(_templateObject544(),dirty,i,b.names.join(', '),b.n);}).reduce(function(lhs,rhs){return x(_templateObject545(),lhs,rhs);});}return x(_templateObject546(),dirty,names.join(', '),bitmask[0].n);}};}},{key:\"reference\",value:function reference(node){if(typeof node==='string'){node={type:'Identifier',name:node};}var _flatten_reference4=flatten_reference(node),name=_flatten_reference4.name,nodes=_flatten_reference4.nodes;var member=this.context_lookup.get(name);// TODO is this correct?\nif(this.component.var_lookup.get(name)){this.component.add_reference(name);}if(member!==undefined){var _replacement3=x(_templateObject547(),member.name,member.index);if(nodes[0].loc)_replacement3.object.loc=nodes[0].loc;nodes[0]=_replacement3;return nodes.reduce(function(lhs,rhs){return x(_templateObject548(),lhs,rhs);});}return node;}},{key:\"remove_block\",value:function remove_block(block){this.blocks.splice(this.blocks.indexOf(block),1);}}]);return Renderer;}();function dom(component,options){var name=component.name;var renderer=new Renderer(component,options);var block=renderer.block;block.has_outro_method=true;// prevent fragment being created twice (#1063)\nif(options.customElement)block.chunks.create.push(b(_templateObject549()));var body=[];if(renderer.file_var){var file=component.file?x(_templateObject550(),component.file):x(_templateObject551());body.push(b(_templateObject552(),renderer.file_var,file));}var css=component.stylesheet.render(options.filename,!options.customElement);var styles=component.stylesheet.has_styles&&options.dev?\"\".concat(css.code,\"\\n/*# sourceMappingURL=\").concat(css.map.toUrl(),\" */\"):css.code;var add_css=component.get_unique_name('add_css');var should_add_css=!options.customElement&&!!styles&&options.css!==false;if(should_add_css){body.push(b(_templateObject553(),add_css,component.stylesheet.id,styles));}// fix order\n// TODO the deconflicted names of blocks are reversed... should set them here\nvar blocks=renderer.blocks.slice().reverse();body.push.apply(body,(0,_toConsumableArray2.default)(blocks.map(function(block){// TODO this is a horrible mess — renderer.blocks\n// contains a mixture of Blocks and Nodes\nif(block.render)return block.render();return block;})));if(options.dev&&!options.hydratable){block.chunks.claim.push(b(_templateObject554()));}var uses_props=component.var_lookup.has('$$props');var uses_rest=component.var_lookup.has('$$restProps');var $$props=uses_props||uses_rest?\"$$new_props\":\"$$props\";var props=component.vars.filter(function(variable){return!variable.module&&variable.export_name;});var writable_props=props.filter(function(variable){return variable.writable;});var omit_props_names=component.get_unique_name('omit_props_names');var compute_rest=x(_templateObject555(),omit_props_names.name);var rest=uses_rest?b(_templateObject556(),omit_props_names.name,props.map(function(prop){return\"\\\"\".concat(prop.export_name,\"\\\"\");}).join(','),compute_rest):null;var set=uses_props||uses_rest||writable_props.length>0||component.slots.size>0?x(_templateObject557(),$$props,uses_props&&renderer.invalidate('$$props',x(_templateObject558())),uses_rest&&!uses_props&&x(_templateObject559()),uses_rest&&renderer.invalidate('$$restProps',x(_templateObject560(),compute_rest)),writable_props.map(function(prop){return b(_templateObject561(),prop.export_name,$$props,renderer.invalidate(prop.name,x(_templateObject562(),prop.name,$$props,prop.export_name)));}),component.slots.size>0&&b(_templateObject563(),$$props,renderer.invalidate('$$scope',x(_templateObject564(),$$props)))):null;var accessors=[];var not_equal=component.component_options.immutable?x(_templateObject565()):x(_templateObject566());var dev_props_check;var inject_state;var capture_state;var props_inject;props.forEach(function(prop){var variable=component.var_lookup.get(prop.name);if(!variable.writable||component.component_options.accessors){accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject567(),prop.hoistable?prop.name:x(_templateObject568(),renderer.context_lookup.get(prop.name).index))});}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'get',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject569(),component.tag)});}if(component.component_options.accessors){if(variable.writable&&!renderer.readonly.has(prop.name)){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject570(),prop.name,prop.export_name,prop.name)});}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject571(),component.tag,prop.export_name)});}}else if(component.compile_options.dev){accessors.push({type:'MethodDefinition',kind:'set',key:{type:'Identifier',name:prop.export_name},value:x(_templateObject572(),component.tag)});}});if(component.compile_options.dev){// checking that expected ones were passed\nvar expected=props.filter(function(prop){return prop.writable&&!prop.initialised;});if(expected.length){dev_props_check=b(_templateObject573(),options.customElement?x(_templateObject574()):x(_templateObject575()),expected.map(function(prop){return b(_templateObject576(),renderer.reference(prop.name),prop.export_name,component.tag,prop.export_name);}));}var capturable_vars=component.vars.filter(function(v){return!v.internal&&!v.global&&!v.name.startsWith('$$');});if(capturable_vars.length>0){capture_state=x(_templateObject577(),capturable_vars.map(function(prop){return p(_templateObject578(),prop.name);}));}var injectable_vars=capturable_vars.filter(function(v){return!v.module&&v.writable&&v.name[0]!=='$';});if(uses_props||injectable_vars.length>0){inject_state=x(_templateObject579(),$$props,uses_props&&renderer.invalidate('$$props',x(_templateObject580())),injectable_vars.map(function(v){return b(_templateObject581(),v.name,renderer.invalidate(v.name,x(_templateObject582(),v.name,$$props,v.name)));}));props_inject=b(_templateObject583());}}// instrument assignments\nif(component.ast.instance){var _scope3=component.instance_scope;var map=component.instance_scope_map;var execution_context=null;walk(component.ast.instance.content,{enter:function enter(node){if(map.has(node)){_scope3=map.get(node);if(!execution_context&&!_scope3.block){execution_context=node;}}else if(!execution_context&&node.type==='LabeledStatement'&&node.label.name==='$'){execution_context=node;}},leave:function leave(node){if(map.has(node)){_scope3=_scope3.parent;}if(execution_context===node){execution_context=null;}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;// normally (`a = 1`, `b.c = 2`), there'll be a single name\n// (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n// may be more, in which case we need to tack the extra ones\n// onto the initial function call\nvar names=new Set(extract_names(assignee));this.replace(invalidate(renderer,_scope3,node,names,execution_context===null));}}});component.rewrite_props(function(_ref18){var name=_ref18.name,reassigned=_ref18.reassigned,export_name=_ref18.export_name;var value=\"$\".concat(name);var i=renderer.context_lookup.get(\"$\".concat(name)).index;var insert=reassigned||export_name?b(_templateObject584(),\"$$subscribe_\".concat(name)):b(_templateObject585(),name,i,value);if(component.compile_options.dev){return b(_templateObject586(),name,name,insert);}return insert;});}var args=[x(_templateObject587())];var has_invalidate=props.length>0||component.has_reactive_assignments||component.slots.size>0||capture_state||inject_state;if(has_invalidate){args.push(x(_templateObject588()),x(_templateObject589()));}else if(component.compile_options.dev){// $$props arg is still needed for unknown prop check\nargs.push(x(_templateObject590()));}var has_create_fragment=component.compile_options.dev||block.has_content();if(has_create_fragment){body.push(b(_templateObject591(),block.get_contents()));}body.push(b(_templateObject592(),component.extract_javascript(component.ast.module),component.fully_hoisted));var filtered_props=props.filter(function(prop){var variable=component.var_lookup.get(prop.name);if(variable.hoistable)return false;if(prop.name[0]==='$')return false;return true;});var reactive_stores=component.vars.filter(function(variable){return variable.name[0]==='$'&&variable.name[1]!=='$';});var instance_javascript=component.extract_javascript(component.ast.instance);var has_definition=component.compile_options.dev||instance_javascript&&instance_javascript.length>0||filtered_props.length>0||uses_props||component.partly_hoisted.length>0||renderer.initial_context.length>0||component.reactive_declarations.length>0||capture_state||inject_state;var definition=has_definition?component.alias('instance'):{type:'Literal',value:null};var reactive_store_subscriptions=reactive_stores.filter(function(store){var variable=component.var_lookup.get(store.name.slice(1));return!variable||variable.hoistable;}).map(function(_ref19){var name=_ref19.name;return b(_templateObject593(),component.compile_options.dev&&b(_templateObject594(),name.slice(1),name.slice(1)),name.slice(1),renderer.context_lookup.get(name).index,name);});var resubscribable_reactive_store_unsubscribers=reactive_stores.filter(function(store){var variable=component.var_lookup.get(store.name.slice(1));return variable&&(variable.reassigned||variable.export_name);}).map(function(_ref20){var name=_ref20.name;return b(_templateObject595(),\"$$unsubscribe_\".concat(name.slice(1)));});if(has_definition){var reactive_declarations=[];var fixed_reactive_declarations=[];// not really 'reactive' but whatever\ncomponent.reactive_declarations.forEach(function(d){var dependencies=Array.from(d.dependencies);var uses_rest_or_props=!!dependencies.find(function(n){return n==='$$props'||n==='$$restProps';});var writable=dependencies.filter(function(n){var variable=component.var_lookup.get(n);return variable&&(variable.export_name||variable.mutated||variable.reassigned);});var condition=!uses_rest_or_props&&writable.length>0&&renderer.dirty(writable,true);var statement=d.node;// TODO remove label (use d.node.body) if it's not referenced\nif(condition)statement=b(_templateObject596(),condition,statement)[0];if(condition||uses_rest_or_props){reactive_declarations.push(statement);}else{fixed_reactive_declarations.push(statement);}});var injected=Array.from(component.injected_reactive_declaration_vars).filter(function(name){var variable=component.var_lookup.get(name);return variable.injected&&variable.name[0]!=='$';});var reactive_store_declarations=reactive_stores.map(function(variable){var $name=variable.name;var name=$name.slice(1);var store=component.var_lookup.get(name);if(store&&(store.reassigned||store.export_name)){var unsubscribe=\"$$unsubscribe_\".concat(name);var subscribe=\"$$subscribe_\".concat(name);var _i31=renderer.context_lookup.get($name).index;return b(_templateObject597(),$name,unsubscribe,subscribe,unsubscribe,unsubscribe,name,_i31,$name,name);}return b(_templateObject598(),$name);});var unknown_props_check;if(component.compile_options.dev&&!(uses_props||uses_rest)){unknown_props_check=b(_templateObject599(),writable_props.map(function(prop){return x(_templateObject600(),prop.export_name);}),component.tag);}var return_value={type:'ArrayExpression',elements:renderer.initial_context.map(function(member){return{type:'Identifier',name:member.name};})};body.push(b(_templateObject601(),definition,args,rest,reactive_store_declarations,reactive_store_subscriptions,resubscribable_reactive_store_unsubscribers,instance_javascript,unknown_props_check,component.slots.size||component.compile_options.dev?b(_templateObject602()):null,component.compile_options.dev&&b(_templateObject603(),component.tag,(0,_toConsumableArray2.default)(component.slots.keys()).map(function(key){return\"'\".concat(key,\"'\");}).join(',')),renderer.binding_groups.size>0&&b(_templateObject604(),(0,_toConsumableArray2.default)(renderer.binding_groups.keys()).map(function(_){return x(_templateObject605());})),component.partly_hoisted,set&&b(_templateObject606(),set),capture_state&&b(_templateObject607(),capture_state),inject_state&&b(_templateObject608(),inject_state),injected.map(function(name){return b(_templateObject609(),name);}),/* before reactive declarations */props_inject,reactive_declarations.length>0&&b(_templateObject610(),reactive_declarations),fixed_reactive_declarations,uses_props&&b(_templateObject611()),return_value));}var prop_indexes=x(_templateObject612(),props.filter(function(v){return v.export_name&&!v.module;}).map(function(v){return p(_templateObject613(),v.export_name,renderer.context_lookup.get(v.name).index);}));var dirty;if(renderer.context_overflow){dirty=x(_templateObject614());for(var _i32=0;_i32<renderer.context.length;_i32+=31){dirty.elements.push(x(_templateObject615()));}}if(options.customElement){var _declaration$body$bod;var declaration=b(_templateObject616(),name,css.code&&b(_templateObject617(),css.code.replace(/\\\\/g,'\\\\\\\\'),options.dev?\"\\n/*# sourceMappingURL=\".concat(css.map.toUrl(),\" */\"):''),definition,has_create_fragment?'create_fragment':'null',not_equal,prop_indexes,dirty,dev_props_check,(props.length>0||uses_props||uses_rest)&&b(_templateObject618()))[0];if(props.length>0){declaration.body.body.push({type:'MethodDefinition',kind:'get',static:true,computed:false,key:{type:'Identifier',name:'observedAttributes'},value:x(_templateObject619(),props.map(function(prop){return x(_templateObject620(),prop.export_name);}))});}(_declaration$body$bod=declaration.body.body).push.apply(_declaration$body$bod,accessors);body.push(declaration);if(component.tag!=null){body.push(b(_templateObject621(),component.tag,name));}}else{var _declaration$body$bod2;var superclass={type:'Identifier',name:options.dev?'@SvelteComponentDev':'@SvelteComponent'};var _declaration=b(_templateObject622(),name,superclass,options.dev&&\"options\",should_add_css&&b(_templateObject623(),component.stylesheet.id,add_css),definition,has_create_fragment?'create_fragment':'null',not_equal,prop_indexes,dirty,options.dev&&b(_templateObject624(),name.name),dev_props_check)[0];(_declaration$body$bod2=_declaration.body.body).push.apply(_declaration$body$bod2,accessors);body.push(_declaration);}return{js:flatten$1(body,[]),css:css};}function flatten$1(nodes,target){for(var _i33=0;_i33<nodes.length;_i33+=1){var _node5=nodes[_i33];if(Array.isArray(_node5)){flatten$1(_node5,target);}else{target.push(_node5);}}return target;}function AwaitBlock(node,renderer,options){renderer.push();renderer.render(node.pending.children,options);var pending=renderer.pop();renderer.push();renderer.render(node.then.children,options);var then=renderer.pop();renderer.add_expression(x(_templateObject625(),pending,node.then_node?node.then_node:'',then,node.expression.node));}function Comment$1(_node,_renderer,_options){// TODO preserve comments\n// if (options.preserveComments) {\n// \trenderer.append(`<!--${node.data}-->`);\n// }\n}function DebugTag(node,renderer,options){if(!options.dev)return;var filename=options.filename||null;var _options$locate=options.locate(node.start+1),line=_options$locate.line,column=_options$locate.column;var obj=x(_templateObject626(),node.expressions.map(function(e){return p(_templateObject627(),e.node.name);}));renderer.add_expression(x(_templateObject628(),filename?x(_templateObject629(),filename):x(_templateObject630()),line-1,column,obj));}function EachBlock(node,renderer,options){var args=[node.context_node];if(node.index)args.push({type:'Identifier',name:node.index});renderer.push();renderer.render(node.children,options);var result=renderer.pop();var consequent=x(_templateObject631(),node.expression.node,args,result);if(node.else){renderer.push();renderer.render(node.else.children,options);var alternate=renderer.pop();renderer.add_expression(x(_templateObject632(),node.expression.node,consequent,alternate));}else{renderer.add_expression(consequent);}}function get_class_attribute_value(attribute){// handle special case — `class={possiblyUndefined}` with scoped CSS\nif(attribute.chunks.length===2&&attribute.chunks[1].synthetic){var _value8=attribute.chunks[0].node;return x(_templateObject633(),_value8,attribute.chunks[1].data);}return get_attribute_value(attribute);}function get_attribute_value(attribute){if(attribute.chunks.length===0)return x(_templateObject634());return attribute.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data.replace(/\"/g,'&quot;')):x(_templateObject635(),chunk.node);}).reduce(function(lhs,rhs){return x(_templateObject636(),lhs,rhs);});}function get_slot_scope(lets){if(lets.length===0)return null;return{type:'ObjectPattern',properties:lets.map(function(l){return{type:'Property',kind:'init',method:false,shorthand:false,computed:false,key:l.name,value:l.value||l.name};})};}// source: https://html.spec.whatwg.org/multipage/indices.html\nvar boolean_attributes=new Set(['allowfullscreen','allowpaymentrequest','async','autofocus','autoplay','checked','controls','default','defer','disabled','formnovalidate','hidden','ismap','loop','multiple','muted','nomodule','novalidate','open','playsinline','readonly','required','reversed','selected']);// similar logic from `compile/render_dom/wrappers/Fragment`\n// We want to remove trailing whitespace inside an element/component/block,\n// *unless* there is no whitespace between this node and its next sibling\nfunction remove_whitespace_children(children,next){var nodes=[];var last_child;var i=children.length;while(i--){var child=children[i];if(child.type==='Text'){if(child.should_skip()){continue;}var _data5=child.data;if(nodes.length===0){var should_trim=next?next.type==='Text'&&/^\\s/.test(next.data)&&trimmable_at$1(child,next):!child.has_ancestor('EachBlock');if(should_trim){_data5=trim_end(_data5);if(!_data5)continue;}}// glue text nodes (which could e.g. be separated by comments) together\nif(last_child&&last_child.type==='Text'){last_child.data=_data5+last_child.data;continue;}nodes.unshift(child);link(last_child,last_child=child);}else{nodes.unshift(child);link(last_child,last_child=child);}}var first=nodes[0];if(first&&first.type==='Text'){first.data=trim_start(first.data);if(!first.data){first.var=null;nodes.shift();if(nodes[0]){nodes[0].prev=null;}}}return nodes;}function trimmable_at$1(child,next_sibling){// Whitespace is trimmable if one of the following is true:\n// The child and its sibling share a common nearest each block (not at an each block boundary)\n// The next sibling's previous node is an each block\nreturn next_sibling.find_nearest(/EachBlock/)===child.find_nearest(/EachBlock/)||next_sibling.prev.type==='EachBlock';}function Element(node,renderer,options){var children=remove_whitespace_children(node.children,node.next);// awkward special case\nvar node_contents;var contenteditable=node.name!=='textarea'&&node.name!=='input'&&node.attributes.some(function(attribute){return attribute.name==='contenteditable';});var slot=node.get_static_attribute_value('slot');var nearest_inline_component=node.find_nearest(/InlineComponent/);if(slot&&nearest_inline_component){renderer.push();}renderer.add_string(\"<\".concat(node.name));var class_expression_list=node.classes.map(function(class_directive){var expression=class_directive.expression,name=class_directive.name;var snippet=expression?expression.node:x(_templateObject637(),name);// TODO is this right?\nreturn x(_templateObject638(),snippet,name);});if(node.needs_manual_style_scoping){class_expression_list.push(x(_templateObject639(),node.component.stylesheet.id));}var class_expression=class_expression_list.length>0&&class_expression_list.reduce(function(lhs,rhs){return x(_templateObject640(),lhs,rhs);});if(node.attributes.some(function(attr){return attr.is_spread;})){// TODO dry this out\nvar args=[];node.attributes.forEach(function(attribute){if(attribute.is_spread){args.push(attribute.expression.node);}else{var name=attribute.name.toLowerCase();if(name==='value'&&node.name.toLowerCase()==='textarea'){node_contents=get_attribute_value(attribute);}else if(attribute.is_true){args.push(x(_templateObject641(),attribute.name));}else if(boolean_attributes.has(name)&&attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){// a boolean attribute with one non-Text chunk\nargs.push(x(_templateObject642(),attribute.name,attribute.chunks[0].node));}else{args.push(x(_templateObject643(),attribute.name,get_attribute_value(attribute)));}}});renderer.add_expression(x(_templateObject644(),args,class_expression));}else{var add_class_attribute=!!class_expression;node.attributes.forEach(function(attribute){var name=attribute.name.toLowerCase();if(name==='value'&&node.name.toLowerCase()==='textarea'){node_contents=get_attribute_value(attribute);}else if(attribute.is_true){renderer.add_string(\" \".concat(attribute.name));}else if(boolean_attributes.has(name)&&attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){// a boolean attribute with one non-Text chunk\nrenderer.add_string(\" \");renderer.add_expression(x(_templateObject645(),attribute.chunks[0].node,attribute.name));}else if(name==='class'&&class_expression){add_class_attribute=false;renderer.add_string(\" \".concat(attribute.name,\"=\\\"\"));renderer.add_expression(x(_templateObject646(),get_class_attribute_value(attribute),class_expression));renderer.add_string(\"\\\"\");}else if(attribute.chunks.length===1&&attribute.chunks[0].type!=='Text'){var snippet=attribute.chunks[0].node;renderer.add_expression(x(_templateObject647(),attribute.name,snippet,boolean_attributes.has(name)?1:0));}else{renderer.add_string(\" \".concat(attribute.name,\"=\\\"\"));renderer.add_expression((name==='class'?get_class_attribute_value:get_attribute_value)(attribute));renderer.add_string(\"\\\"\");}});if(add_class_attribute){renderer.add_expression(x(_templateObject648(),class_expression));}}node.bindings.forEach(function(binding){var name=binding.name,expression=binding.expression;if(binding.is_readonly){return;}if(name==='group');else if(contenteditable&&(name==='textContent'||name==='innerHTML')){node_contents=expression.node;// TODO where was this used?\n// value = name === 'textContent' ? x`@escape($$value)` : x`$$value`;\n}else if(binding.name==='value'&&node.name==='textarea'){var snippet=expression.node;node_contents=x(_templateObject649(),snippet);}else{var _snippet5=expression.node;renderer.add_expression(x(_templateObject650(),name,_snippet5));}});if(options.hydratable&&options.head_id){renderer.add_string(\" data-svelte=\\\"\".concat(options.head_id,\"\\\"\"));}renderer.add_string('>');if(node_contents!==undefined){if(contenteditable){renderer.push();renderer.render(children,options);var result=renderer.pop();renderer.add_expression(x(_templateObject651(),result,node_contents));}else{renderer.add_expression(node_contents);}if(!is_void(node.name)){renderer.add_string(\"</\".concat(node.name,\">\"));}}else if(slot&&nearest_inline_component){renderer.render(children,options);if(!is_void(node.name)){renderer.add_string(\"</\".concat(node.name,\">\"));}var lets=node.lets;var seen=new Set(lets.map(function(l){return l.name.name;}));nearest_inline_component.lets.forEach(function(l){if(!seen.has(l.name.name))lets.push(l);});options.slot_scopes.set(slot,{input:get_slot_scope(node.lets),output:renderer.pop()});}else{renderer.render(children,options);if(!is_void(node.name)){renderer.add_string(\"</\".concat(node.name,\">\"));}}}function Head(node,renderer,options){var head_options=Object.assign({},options,{head_id:node.id});renderer.push();renderer.render(node.children,head_options);var result=renderer.pop();renderer.add_expression(x(_templateObject652(),result));}function HtmlTag(node,renderer,_options){renderer.add_expression(node.expression.node);}function IfBlock(node,renderer,options){var condition=node.expression.node;renderer.push();renderer.render(node.children,options);var consequent=renderer.pop();renderer.push();if(node.else)renderer.render(node.else.children,options);var alternate=renderer.pop();renderer.add_expression(x(_templateObject653(),condition,consequent,alternate));}function get_prop_value(attribute){if(attribute.is_true)return x(_templateObject654());if(attribute.chunks.length===0)return x(_templateObject655());return attribute.chunks.map(function(chunk){if(chunk.type==='Text')return string_literal(chunk.data);return chunk.node;}).reduce(function(lhs,rhs){return x(_templateObject656(),lhs,rhs);});}function InlineComponent(node,renderer,options){var binding_props=[];var binding_fns=[];node.bindings.forEach(function(binding){renderer.has_bindings=true;// TODO this probably won't work for contextual bindings\nvar snippet=binding.expression.node;binding_props.push(p(_templateObject657(),binding.name,snippet));binding_fns.push(p(_templateObject658(),binding.name,snippet));});var uses_spread=node.attributes.find(function(attr){return attr.is_spread;});var props;if(uses_spread){props=x(_templateObject659(),node.attributes.map(function(attribute){if(attribute.is_spread){return attribute.expression.node;}else{return x(_templateObject660(),attribute.name,get_prop_value(attribute));}}).concat(binding_props.map(function(p){return x(_templateObject661(),p);})));}else{props=x(_templateObject662(),node.attributes.map(function(attribute){return p(_templateObject663(),attribute.name,get_prop_value(attribute));}),binding_props);}var bindings=x(_templateObject664(),binding_fns);var expression=node.name==='svelte:self'?renderer.name:node.name==='svelte:component'?x(_templateObject665(),node.expression.node):node.name.split('.').reduce(function(lhs,rhs){return x(_templateObject666(),lhs,rhs);});var slot_fns=[];var children=remove_whitespace_children(node.children,node.next);if(children.length){var slot_scopes=new Map();renderer.push();renderer.render(children,Object.assign({},options,{slot_scopes:slot_scopes}));slot_scopes.set('default',{input:get_slot_scope(node.lets),output:renderer.pop()});slot_scopes.forEach(function(_ref21,name){var input=_ref21.input,output=_ref21.output;if(!is_empty_template_literal(output)){slot_fns.push(p(_templateObject667(),name,input,output));}});}var slots=x(_templateObject668(),slot_fns);renderer.add_expression(x(_templateObject669(),expression,node.name,props,bindings,slots));}function is_empty_template_literal(template_literal){return template_literal.expressions.length===0&&template_literal.quasis.length===1&&template_literal.quasis[0].value.raw===\"\";}function Slot(node,renderer,options){var slot_data=get_slot_data(node.values);renderer.push();renderer.render(node.children,options);var result=renderer.pop();renderer.add_expression(x(_templateObject670(),node.slot_name,node.slot_name,slot_data,result));}function Tag$1(node,renderer,_options){var snippet=node.expression.node;renderer.add_expression(node.parent&&node.parent.type==='Element'&&node.parent.name==='style'?snippet:x(_templateObject671(),snippet));}function Text(node,renderer,_options){var text=node.data;if(!node.parent||node.parent.type!=='Element'||node.parent.name!=='script'&&node.parent.name!=='style'){// unless this Text node is inside a <script> or <style> element, escape &,<,>\ntext=escape_html(text);}renderer.add_string(text);}function Title(node,renderer,options){renderer.push();renderer.add_string(\"<title>\");renderer.render(node.children,options);renderer.add_string(\"</title>\");var result=renderer.pop();renderer.add_expression(x(_templateObject672(),result));}function noop$1(){}var handlers$1={AwaitBlock:AwaitBlock,Body:noop$1,Comment:Comment$1,DebugTag:DebugTag,EachBlock:EachBlock,Element:Element,Head:Head,IfBlock:IfBlock,InlineComponent:InlineComponent,MustacheTag:Tag$1,Options:noop$1,RawMustacheTag:HtmlTag,Slot:Slot,Text:Text,Title:Title,Window:noop$1};var Renderer$1=/*#__PURE__*/function(){function Renderer$1(_ref22){var name=_ref22.name;(0,_classCallCheck2.default)(this,Renderer$1);this.has_bindings=false;this.stack=[];this.targets=[];this.name=name;this.push();}(0,_createClass2.default)(Renderer$1,[{key:\"add_string\",value:function add_string(str){this.current.value+=escape_template(str);}},{key:\"add_expression\",value:function add_expression(node){this.literal.quasis.push({type:'TemplateElement',value:{raw:this.current.value,cooked:null},tail:false});this.literal.expressions.push(node);this.current.value='';}},{key:\"push\",value:function push(){var current=this.current={value:''};var literal=this.literal={type:'TemplateLiteral',expressions:[],quasis:[]};this.stack.push({current:current,literal:literal});}},{key:\"pop\",value:function pop(){this.literal.quasis.push({type:'TemplateElement',value:{raw:this.current.value,cooked:null},tail:true});var popped=this.stack.pop();var last=this.stack[this.stack.length-1];if(last){this.literal=last.literal;this.current=last.current;}return popped.literal;}},{key:\"render\",value:function render(nodes,options){var _this39=this;nodes.forEach(function(node){var handler=handlers$1[node.type];if(!handler){throw new Error(\"No handler for '\".concat(node.type,\"' nodes\"));}handler(node,_this39,options);});}}]);return Renderer$1;}();function ssr(component,options){var renderer=new Renderer$1({name:component.name});var name=component.name;// create $$render function\nrenderer.render(trim(component.fragment.children),Object.assign({locate:component.locate},options));// TODO put this inside the Renderer class\nvar literal=renderer.pop();// TODO concatenate CSS maps\nvar css=options.customElement?{code:null,map:null}:component.stylesheet.render(options.filename,true);var uses_rest=component.var_lookup.has('$$restProps');var props=component.vars.filter(function(variable){return!variable.module&&variable.export_name;});var rest=uses_rest?b(_templateObject673(),props.map(function(prop){return\"\\\"\".concat(prop.export_name,\"\\\"\");}).join(',')):null;var reactive_stores=component.vars.filter(function(variable){return variable.name[0]==='$'&&variable.name[1]!=='$';});var reactive_store_values=reactive_stores.map(function(_ref23){var name=_ref23.name;var store_name=name.slice(1);var store=component.var_lookup.get(store_name);if(store&&store.hoistable)return null;var assignment=b(_templateObject674(),name,store_name);return component.compile_options.dev?b(_templateObject675(),store_name,store_name,assignment):assignment;}).filter(Boolean);component.rewrite_props(function(_ref24){var name=_ref24.name;var value=\"$\".concat(name);var insert=b(_templateObject676(),value,name);if(component.compile_options.dev){insert=b(_templateObject677(),name,name,insert);}return insert;});var instance_javascript=component.extract_javascript(component.ast.instance);// TODO only do this for props with a default value\nvar parent_bindings=instance_javascript?component.vars.filter(function(variable){return!variable.module&&variable.export_name;}).map(function(prop){return b(_templateObject678(),prop.export_name,prop.export_name,prop.name,prop.export_name,prop.name);}):[];var reactive_declarations=component.reactive_declarations.map(function(d){var body=d.node.body;var statement=b(_templateObject679(),body);if(d.declaration){var declared=extract_names(d.declaration);var injected=declared.filter(function(name){return name[0]!=='$'&&component.var_lookup.get(name).injected;});var self_dependencies=injected.filter(function(name){return d.dependencies.has(name);});if(injected.length){// in some cases we need to do `let foo; [expression]`, in\n// others we can do `let [expression]`\nvar separate=self_dependencies.length>0||declared.length>injected.length;var _body$expression=body.expression,left=_body$expression.left,right=_body$expression.right;statement=separate?b(_templateObject680(),injected.map(function(name){return b(_templateObject681(),name);}),statement):b(_templateObject682(),left,right);}}else{// TODO do not add label if it's not referenced\nstatement=b(_templateObject683(),statement);}return statement;});var main=renderer.has_bindings?b(_templateObject684(),reactive_store_values,reactive_declarations,literal):b(_templateObject685(),reactive_store_values,reactive_declarations,literal);var blocks=[rest].concat((0,_toConsumableArray2.default)(reactive_stores.map(function(_ref25){var name=_ref25.name;var store_name=name.slice(1);var store=component.var_lookup.get(store_name);if(store&&store.hoistable){return b(_templateObject686(),name,store_name);}return b(_templateObject687(),name);})),[instance_javascript],(0,_toConsumableArray2.default)(parent_bindings),[css.code&&b(_templateObject688()),main]).filter(Boolean);var js=b(_templateObject689(),css.code?b(_templateObject690(),css.code,css.map?string_literal(css.map.toString()):'null'):null,component.extract_javascript(component.ast.module),component.fully_hoisted,name,blocks);return{js:js,css:css};}function trim(nodes){var start=0;for(;start<nodes.length;start+=1){var _node6=nodes[start];if(_node6.type!=='Text')break;_node6.data=_node6.data.replace(/^\\s+/,'');if(_node6.data)break;}var end=nodes.length;for(;end>start;end-=1){var _node7=nodes[end-1];if(_node7.type!=='Text')break;_node7.data=_node7.data.replace(/\\s+$/,'');if(_node7.data)break;}return nodes.slice(start,end);}var wrappers$1={esm:esm,cjs:cjs};function create_module(program,format,name,banner){var sveltePath=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'svelte';var helpers=arguments.length>5?arguments[5]:undefined;var globals=arguments.length>6?arguments[6]:undefined;var imports=arguments.length>7?arguments[7]:undefined;var module_exports=arguments.length>8?arguments[8]:undefined;var internal_path=\"\".concat(sveltePath,\"/internal\");helpers.sort(function(a,b){return a.name<b.name?-1:1;});globals.sort(function(a,b){return a.name<b.name?-1:1;});if(format==='esm'){return esm(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports);}if(format==='cjs')return cjs(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports);throw new Error(\"options.format is invalid (must be \".concat(list$1(Object.keys(wrappers$1)),\")\"));}function edit_source(source,sveltePath){return source==='svelte'||source.startsWith('svelte/')?source.replace('svelte',sveltePath):source;}function get_internal_globals(globals,helpers){return globals.length>0&&{type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:{type:'ObjectPattern',properties:globals.map(function(g){return{type:'Property',method:false,shorthand:false,computed:false,key:{type:'Identifier',name:g.name},value:g.alias,kind:'init'};})},init:helpers.find(function(_ref26){var name=_ref26.name;return name==='globals';}).alias}]};}function esm(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports){var import_declaration={type:'ImportDeclaration',specifiers:helpers.map(function(h){return{type:'ImportSpecifier',local:h.alias,imported:{type:'Identifier',name:h.name}};}),source:{type:'Literal',value:internal_path}};var internal_globals=get_internal_globals(globals,helpers);// edit user imports\nimports.forEach(function(node){node.source.value=edit_source(node.source.value,sveltePath);});var exports=module_exports.length>0&&{type:'ExportNamedDeclaration',specifiers:module_exports.map(function(x){return{type:'Specifier',local:{type:'Identifier',name:x.name},exported:{type:'Identifier',name:x.as}};})};program.body=b(_templateObject691(),banner,import_declaration,internal_globals,imports,program.body,name,exports);}function cjs(program,name,banner,sveltePath,internal_path,helpers,globals,imports,module_exports){var internal_requires={type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:{type:'ObjectPattern',properties:helpers.map(function(h){return{type:'Property',method:false,shorthand:false,computed:false,key:{type:'Identifier',name:h.name},value:h.alias,kind:'init'};})},init:x(_templateObject692(),internal_path)}]};var internal_globals=get_internal_globals(globals,helpers);var user_requires=imports.map(function(node){var init=x(_templateObject693(),edit_source(node.source.value,sveltePath));if(node.specifiers.length===0){return b(_templateObject694(),init);}return{type:'VariableDeclaration',kind:'const',declarations:[{type:'VariableDeclarator',id:node.specifiers[0].type==='ImportNamespaceSpecifier'?{type:'Identifier',name:node.specifiers[0].local.name}:{type:'ObjectPattern',properties:node.specifiers.map(function(s){return{type:'Property',method:false,shorthand:false,computed:false,key:s.type==='ImportSpecifier'?s.imported:{type:'Identifier',name:'default'},value:s.local,kind:'init'};})},init:init}]};});var exports=module_exports.map(function(x){return b(_templateObject695(),{type:'Identifier',name:x.as},{type:'Identifier',name:x.name});});program.body=b(_templateObject696(),banner,internal_requires,internal_globals,user_requires,program.body,name,exports);}var Chunk=function Chunk(start,end,content){this.start=start;this.end=end;this.original=content;this.intro='';this.outro='';this.content=content;this.storeName=false;this.edited=false;// we make these non-enumerable, for sanity while debugging\nObject.defineProperties(this,{previous:{writable:true,value:null},next:{writable:true,value:null}});};Chunk.prototype.appendLeft=function appendLeft(content){this.outro+=content;};Chunk.prototype.appendRight=function appendRight(content){this.intro=this.intro+content;};Chunk.prototype.clone=function clone(){var chunk=new Chunk(this.start,this.end,this.original);chunk.intro=this.intro;chunk.outro=this.outro;chunk.content=this.content;chunk.storeName=this.storeName;chunk.edited=this.edited;return chunk;};Chunk.prototype.contains=function contains(index){return this.start<index&&index<this.end;};Chunk.prototype.eachNext=function eachNext(fn){var chunk=this;while(chunk){fn(chunk);chunk=chunk.next;}};Chunk.prototype.eachPrevious=function eachPrevious(fn){var chunk=this;while(chunk){fn(chunk);chunk=chunk.previous;}};Chunk.prototype.edit=function edit(content,storeName,contentOnly){this.content=content;if(!contentOnly){this.intro='';this.outro='';}this.storeName=storeName;this.edited=true;return this;};Chunk.prototype.prependLeft=function prependLeft(content){this.outro=content+this.outro;};Chunk.prototype.prependRight=function prependRight(content){this.intro=content+this.intro;};Chunk.prototype.split=function split(index){var sliceIndex=index-this.start;var originalBefore=this.original.slice(0,sliceIndex);var originalAfter=this.original.slice(sliceIndex);this.original=originalBefore;var newChunk=new Chunk(index,this.end,originalAfter);newChunk.outro=this.outro;this.outro='';this.end=index;if(this.edited){// TODO is this block necessary?...\nnewChunk.edit('',false);this.content='';}else{this.content=originalBefore;}newChunk.next=this.next;if(newChunk.next){newChunk.next.previous=newChunk;}newChunk.previous=this;this.next=newChunk;return newChunk;};Chunk.prototype.toString=function toString(){return this.intro+this.content+this.outro;};Chunk.prototype.trimEnd=function trimEnd(rx){this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}var trimmed=this.content.replace(rx,'');if(trimmed.length){if(trimmed!==this.content){this.split(this.start+trimmed.length).edit('',undefined,true);}return true;}else{this.edit('',undefined,true);this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}}};Chunk.prototype.trimStart=function trimStart(rx){this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}var trimmed=this.content.replace(rx,'');if(trimmed.length){if(trimmed!==this.content){this.split(this.end-trimmed.length);this.edit('',undefined,true);}return true;}else{this.edit('',undefined,true);this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}}};var btoa$1=function btoa$1(){throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');};if(typeof window!=='undefined'&&typeof window.btoa==='function'){btoa$1=function btoa$1(str){return window.btoa(unescape(encodeURIComponent(str)));};}else if(typeof Buffer==='function'){btoa$1=function btoa$1(str){return Buffer.from(str,'utf-8').toString('base64');};}var SourceMap=function SourceMap(properties){this.version=3;this.file=properties.file;this.sources=properties.sources;this.sourcesContent=properties.sourcesContent;this.names=properties.names;this.mappings=encode(properties.mappings);};SourceMap.prototype.toString=function toString(){return JSON.stringify(this);};SourceMap.prototype.toUrl=function toUrl(){return'data:application/json;charset=utf-8;base64,'+btoa$1(this.toString());};function guessIndent(code){var lines=code.split('\\n');var tabbed=lines.filter(function(line){return /^\\t+/.test(line);});var spaced=lines.filter(function(line){return /^ {2,}/.test(line);});if(tabbed.length===0&&spaced.length===0){return null;}// More lines tabbed than spaced? Assume tabs, and\n// default to tabs in the case of a tie (or nothing\n// to go on)\nif(tabbed.length>=spaced.length){return'\\t';}// Otherwise, we need to guess the multiple\nvar min=spaced.reduce(function(previous,current){var numSpaces=/^ +/.exec(current)[0].length;return Math.min(numSpaces,previous);},Infinity);return new Array(min+1).join(' ');}function getRelativePath(from,to){var fromParts=from.split(/[/\\\\]/);var toParts=to.split(/[/\\\\]/);fromParts.pop();// get dirname\nwhile(fromParts[0]===toParts[0]){fromParts.shift();toParts.shift();}if(fromParts.length){var i=fromParts.length;while(i--){fromParts[i]='..';}}return fromParts.concat(toParts).join('/');}var toString$1=Object.prototype.toString;function isObject(thing){return toString$1.call(thing)==='[object Object]';}function getLocator$1(source){var originalLines=source.split('\\n');var lineOffsets=[];for(var i=0,pos=0;i<originalLines.length;i++){lineOffsets.push(pos);pos+=originalLines[i].length+1;}return function locate(index){var i=0;var j=lineOffsets.length;while(i<j){var m=i+j>>1;if(index<lineOffsets[m]){j=m;}else{i=m+1;}}var line=i-1;var column=index-lineOffsets[line];return{line:line,column:column};};}var Mappings=function Mappings(hires){this.hires=hires;this.generatedCodeLine=0;this.generatedCodeColumn=0;this.raw=[];this.rawSegments=this.raw[this.generatedCodeLine]=[];this.pending=null;};Mappings.prototype.addEdit=function addEdit(sourceIndex,content,loc,nameIndex){if(content.length){var segment=[this.generatedCodeColumn,sourceIndex,loc.line,loc.column];if(nameIndex>=0){segment.push(nameIndex);}this.rawSegments.push(segment);}else if(this.pending){this.rawSegments.push(this.pending);}this.advance(content);this.pending=null;};Mappings.prototype.addUneditedChunk=function addUneditedChunk(sourceIndex,chunk,original,loc,sourcemapLocations){var originalCharIndex=chunk.start;var first=true;while(originalCharIndex<chunk.end){if(this.hires||first||sourcemapLocations[originalCharIndex]){this.rawSegments.push([this.generatedCodeColumn,sourceIndex,loc.line,loc.column]);}if(original[originalCharIndex]==='\\n'){loc.line+=1;loc.column=0;this.generatedCodeLine+=1;this.raw[this.generatedCodeLine]=this.rawSegments=[];this.generatedCodeColumn=0;}else{loc.column+=1;this.generatedCodeColumn+=1;}originalCharIndex+=1;first=false;}this.pending=[this.generatedCodeColumn,sourceIndex,loc.line,loc.column];};Mappings.prototype.advance=function advance(str){if(!str){return;}var lines=str.split('\\n');if(lines.length>1){for(var i=0;i<lines.length-1;i++){this.generatedCodeLine++;this.raw[this.generatedCodeLine]=this.rawSegments=[];}this.generatedCodeColumn=0;}this.generatedCodeColumn+=lines[lines.length-1].length;};var n='\\n';var warned={insertLeft:false,insertRight:false,storeName:false};var MagicString=function MagicString(string,options){if(options===void 0)options={};var chunk=new Chunk(0,string.length,string);Object.defineProperties(this,{original:{writable:true,value:string},outro:{writable:true,value:''},intro:{writable:true,value:''},firstChunk:{writable:true,value:chunk},lastChunk:{writable:true,value:chunk},lastSearchedChunk:{writable:true,value:chunk},byStart:{writable:true,value:{}},byEnd:{writable:true,value:{}},filename:{writable:true,value:options.filename},indentExclusionRanges:{writable:true,value:options.indentExclusionRanges},sourcemapLocations:{writable:true,value:{}},storedNames:{writable:true,value:{}},indentStr:{writable:true,value:guessIndent(string)}});this.byStart[0]=chunk;this.byEnd[string.length]=chunk;};MagicString.prototype.addSourcemapLocation=function addSourcemapLocation(char){this.sourcemapLocations[char]=true;};MagicString.prototype.append=function append(content){if(typeof content!=='string'){throw new TypeError('outro content must be a string');}this.outro+=content;return this;};MagicString.prototype.appendLeft=function appendLeft(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byEnd[index];if(chunk){chunk.appendLeft(content);}else{this.intro+=content;}return this;};MagicString.prototype.appendRight=function appendRight(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byStart[index];if(chunk){chunk.appendRight(content);}else{this.outro+=content;}return this;};MagicString.prototype.clone=function clone(){var cloned=new MagicString(this.original,{filename:this.filename});var originalChunk=this.firstChunk;var clonedChunk=cloned.firstChunk=cloned.lastSearchedChunk=originalChunk.clone();while(originalChunk){cloned.byStart[clonedChunk.start]=clonedChunk;cloned.byEnd[clonedChunk.end]=clonedChunk;var nextOriginalChunk=originalChunk.next;var nextClonedChunk=nextOriginalChunk&&nextOriginalChunk.clone();if(nextClonedChunk){clonedChunk.next=nextClonedChunk;nextClonedChunk.previous=clonedChunk;clonedChunk=nextClonedChunk;}originalChunk=nextOriginalChunk;}cloned.lastChunk=clonedChunk;if(this.indentExclusionRanges){cloned.indentExclusionRanges=this.indentExclusionRanges.slice();}Object.keys(this.sourcemapLocations).forEach(function(loc){cloned.sourcemapLocations[loc]=true;});return cloned;};MagicString.prototype.generateDecodedMap=function generateDecodedMap(options){var this$1=this;options=options||{};var sourceIndex=0;var names=Object.keys(this.storedNames);var mappings=new Mappings(options.hires);var locate=getLocator$1(this.original);if(this.intro){mappings.advance(this.intro);}this.firstChunk.eachNext(function(chunk){var loc=locate(chunk.start);if(chunk.intro.length){mappings.advance(chunk.intro);}if(chunk.edited){mappings.addEdit(sourceIndex,chunk.content,loc,chunk.storeName?names.indexOf(chunk.original):-1);}else{mappings.addUneditedChunk(sourceIndex,chunk,this$1.original,loc,this$1.sourcemapLocations);}if(chunk.outro.length){mappings.advance(chunk.outro);}});return{file:options.file?options.file.split(/[/\\\\]/).pop():null,sources:[options.source?getRelativePath(options.file||'',options.source):null],sourcesContent:options.includeContent?[this.original]:[null],names:names,mappings:mappings.raw};};MagicString.prototype.generateMap=function generateMap(options){return new SourceMap(this.generateDecodedMap(options));};MagicString.prototype.getIndentString=function getIndentString(){return this.indentStr===null?'\\t':this.indentStr;};MagicString.prototype.indent=function indent(indentStr,options){var pattern=/^[^\\r\\n]/gm;if(isObject(indentStr)){options=indentStr;indentStr=undefined;}indentStr=indentStr!==undefined?indentStr:this.indentStr||'\\t';if(indentStr===''){return this;}// noop\noptions=options||{};// Process exclusion ranges\nvar isExcluded={};if(options.exclude){var exclusions=typeof options.exclude[0]==='number'?[options.exclude]:options.exclude;exclusions.forEach(function(exclusion){for(var i=exclusion[0];i<exclusion[1];i+=1){isExcluded[i]=true;}});}var shouldIndentNextCharacter=options.indentStart!==false;var replacer=function replacer(match){if(shouldIndentNextCharacter){return\"\"+indentStr+match;}shouldIndentNextCharacter=true;return match;};this.intro=this.intro.replace(pattern,replacer);var charIndex=0;var chunk=this.firstChunk;while(chunk){var end=chunk.end;if(chunk.edited){if(!isExcluded[charIndex]){chunk.content=chunk.content.replace(pattern,replacer);if(chunk.content.length){shouldIndentNextCharacter=chunk.content[chunk.content.length-1]==='\\n';}}}else{charIndex=chunk.start;while(charIndex<end){if(!isExcluded[charIndex]){var char=this.original[charIndex];if(char==='\\n'){shouldIndentNextCharacter=true;}else if(char!=='\\r'&&shouldIndentNextCharacter){shouldIndentNextCharacter=false;if(charIndex===chunk.start){chunk.prependRight(indentStr);}else{this._splitChunk(chunk,charIndex);chunk=chunk.next;chunk.prependRight(indentStr);}}}charIndex+=1;}}charIndex=chunk.end;chunk=chunk.next;}this.outro=this.outro.replace(pattern,replacer);return this;};MagicString.prototype.insert=function insert(){throw new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');};MagicString.prototype.insertLeft=function insertLeft(index,content){if(!warned.insertLeft){console.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead');// eslint-disable-line no-console\nwarned.insertLeft=true;}return this.appendLeft(index,content);};MagicString.prototype.insertRight=function insertRight(index,content){if(!warned.insertRight){console.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead');// eslint-disable-line no-console\nwarned.insertRight=true;}return this.prependRight(index,content);};MagicString.prototype.move=function move(start,end,index){if(index>=start&&index<=end){throw new Error('Cannot move a selection inside itself');}this._split(start);this._split(end);this._split(index);var first=this.byStart[start];var last=this.byEnd[end];var oldLeft=first.previous;var oldRight=last.next;var newRight=this.byStart[index];if(!newRight&&last===this.lastChunk){return this;}var newLeft=newRight?newRight.previous:this.lastChunk;if(oldLeft){oldLeft.next=oldRight;}if(oldRight){oldRight.previous=oldLeft;}if(newLeft){newLeft.next=first;}if(newRight){newRight.previous=last;}if(!first.previous){this.firstChunk=last.next;}if(!last.next){this.lastChunk=first.previous;this.lastChunk.next=null;}first.previous=newLeft;last.next=newRight||null;if(!newLeft){this.firstChunk=first;}if(!newRight){this.lastChunk=last;}return this;};MagicString.prototype.overwrite=function overwrite(start,end,content,options){if(typeof content!=='string'){throw new TypeError('replacement content must be a string');}while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}if(end>this.original.length){throw new Error('end is out of bounds');}if(start===end){throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead');}this._split(start);this._split(end);if(options===true){if(!warned.storeName){console.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string');// eslint-disable-line no-console\nwarned.storeName=true;}options={storeName:true};}var storeName=options!==undefined?options.storeName:false;var contentOnly=options!==undefined?options.contentOnly:false;if(storeName){var original=this.original.slice(start,end);this.storedNames[original]=true;}var first=this.byStart[start];var last=this.byEnd[end];if(first){if(end>first.end&&first.next!==this.byStart[first.end]){throw new Error('Cannot overwrite across a split point');}first.edit(content,storeName,contentOnly);if(first!==last){var chunk=first.next;while(chunk!==last){chunk.edit('',false);chunk=chunk.next;}chunk.edit('',false);}}else{// must be inserting at the end\nvar newChunk=new Chunk(start,end,'').edit(content,storeName);// TODO last chunk in the array may not be the last chunk, if it's moved...\nlast.next=newChunk;newChunk.previous=last;}return this;};MagicString.prototype.prepend=function prepend(content){if(typeof content!=='string'){throw new TypeError('outro content must be a string');}this.intro=content+this.intro;return this;};MagicString.prototype.prependLeft=function prependLeft(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byEnd[index];if(chunk){chunk.prependLeft(content);}else{this.intro=content+this.intro;}return this;};MagicString.prototype.prependRight=function prependRight(index,content){if(typeof content!=='string'){throw new TypeError('inserted content must be a string');}this._split(index);var chunk=this.byStart[index];if(chunk){chunk.prependRight(content);}else{this.outro=content+this.outro;}return this;};MagicString.prototype.remove=function remove(start,end){while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}if(start===end){return this;}if(start<0||end>this.original.length){throw new Error('Character is out of bounds');}if(start>end){throw new Error('end must be greater than start');}this._split(start);this._split(end);var chunk=this.byStart[start];while(chunk){chunk.intro='';chunk.outro='';chunk.edit('');chunk=end>chunk.end?this.byStart[chunk.end]:null;}return this;};MagicString.prototype.lastChar=function lastChar(){if(this.outro.length){return this.outro[this.outro.length-1];}var chunk=this.lastChunk;do{if(chunk.outro.length){return chunk.outro[chunk.outro.length-1];}if(chunk.content.length){return chunk.content[chunk.content.length-1];}if(chunk.intro.length){return chunk.intro[chunk.intro.length-1];}}while(chunk=chunk.previous);if(this.intro.length){return this.intro[this.intro.length-1];}return'';};MagicString.prototype.lastLine=function lastLine(){var lineIndex=this.outro.lastIndexOf(n);if(lineIndex!==-1){return this.outro.substr(lineIndex+1);}var lineStr=this.outro;var chunk=this.lastChunk;do{if(chunk.outro.length>0){lineIndex=chunk.outro.lastIndexOf(n);if(lineIndex!==-1){return chunk.outro.substr(lineIndex+1)+lineStr;}lineStr=chunk.outro+lineStr;}if(chunk.content.length>0){lineIndex=chunk.content.lastIndexOf(n);if(lineIndex!==-1){return chunk.content.substr(lineIndex+1)+lineStr;}lineStr=chunk.content+lineStr;}if(chunk.intro.length>0){lineIndex=chunk.intro.lastIndexOf(n);if(lineIndex!==-1){return chunk.intro.substr(lineIndex+1)+lineStr;}lineStr=chunk.intro+lineStr;}}while(chunk=chunk.previous);lineIndex=this.intro.lastIndexOf(n);if(lineIndex!==-1){return this.intro.substr(lineIndex+1)+lineStr;}return this.intro+lineStr;};MagicString.prototype.slice=function slice(start,end){if(start===void 0)start=0;if(end===void 0)end=this.original.length;while(start<0){start+=this.original.length;}while(end<0){end+=this.original.length;}var result='';// find start chunk\nvar chunk=this.firstChunk;while(chunk&&(chunk.start>start||chunk.end<=start)){// found end chunk before start\nif(chunk.start<end&&chunk.end>=end){return result;}chunk=chunk.next;}if(chunk&&chunk.edited&&chunk.start!==start){throw new Error(\"Cannot use replaced character \"+start+\" as slice start anchor.\");}var startChunk=chunk;while(chunk){if(chunk.intro&&(startChunk!==chunk||chunk.start===start)){result+=chunk.intro;}var containsEnd=chunk.start<end&&chunk.end>=end;if(containsEnd&&chunk.edited&&chunk.end!==end){throw new Error(\"Cannot use replaced character \"+end+\" as slice end anchor.\");}var sliceStart=startChunk===chunk?start-chunk.start:0;var sliceEnd=containsEnd?chunk.content.length+end-chunk.end:chunk.content.length;result+=chunk.content.slice(sliceStart,sliceEnd);if(chunk.outro&&(!containsEnd||chunk.end===end)){result+=chunk.outro;}if(containsEnd){break;}chunk=chunk.next;}return result;};// TODO deprecate this? not really very useful\nMagicString.prototype.snip=function snip(start,end){var clone=this.clone();clone.remove(0,start);clone.remove(end,clone.original.length);return clone;};MagicString.prototype._split=function _split(index){if(this.byStart[index]||this.byEnd[index]){return;}var chunk=this.lastSearchedChunk;var searchForward=index>chunk.end;while(chunk){if(chunk.contains(index)){return this._splitChunk(chunk,index);}chunk=searchForward?this.byStart[chunk.end]:this.byEnd[chunk.start];}};MagicString.prototype._splitChunk=function _splitChunk(chunk,index){if(chunk.edited&&chunk.content.length){// zero-length edited chunks are a special case (overlapping replacements)\nvar loc=getLocator$1(this.original)(index);throw new Error(\"Cannot split a chunk that has already been edited (\"+loc.line+\":\"+loc.column+\" – \\\"\"+chunk.original+\"\\\")\");}var newChunk=chunk.split(index);this.byEnd[index]=chunk;this.byStart[index]=newChunk;this.byEnd[newChunk.end]=newChunk;if(chunk===this.lastChunk){this.lastChunk=newChunk;}this.lastSearchedChunk=chunk;return true;};MagicString.prototype.toString=function toString(){var str=this.intro;var chunk=this.firstChunk;while(chunk){str+=chunk.toString();chunk=chunk.next;}return str+this.outro;};MagicString.prototype.isEmpty=function isEmpty(){var chunk=this.firstChunk;do{if(chunk.intro.length&&chunk.intro.trim()||chunk.content.length&&chunk.content.trim()||chunk.outro.length&&chunk.outro.trim()){return false;}}while(chunk=chunk.next);return true;};MagicString.prototype.length=function length(){var chunk=this.firstChunk;var length=0;do{length+=chunk.intro.length+chunk.content.length+chunk.outro.length;}while(chunk=chunk.next);return length;};MagicString.prototype.trimLines=function trimLines(){return this.trim('[\\\\r\\\\n]');};MagicString.prototype.trim=function trim(charType){return this.trimStart(charType).trimEnd(charType);};MagicString.prototype.trimEndAborted=function trimEndAborted(charType){var rx=new RegExp((charType||'\\\\s')+'+$');this.outro=this.outro.replace(rx,'');if(this.outro.length){return true;}var chunk=this.lastChunk;do{var end=chunk.end;var aborted=chunk.trimEnd(rx);// if chunk was trimmed, we have a new lastChunk\nif(chunk.end!==end){if(this.lastChunk===chunk){this.lastChunk=chunk.next;}this.byEnd[chunk.end]=chunk;this.byStart[chunk.next.start]=chunk.next;this.byEnd[chunk.next.end]=chunk.next;}if(aborted){return true;}chunk=chunk.previous;}while(chunk);return false;};MagicString.prototype.trimEnd=function trimEnd(charType){this.trimEndAborted(charType);return this;};MagicString.prototype.trimStartAborted=function trimStartAborted(charType){var rx=new RegExp('^'+(charType||'\\\\s')+'+');this.intro=this.intro.replace(rx,'');if(this.intro.length){return true;}var chunk=this.firstChunk;do{var end=chunk.end;var aborted=chunk.trimStart(rx);if(chunk.end!==end){// special case...\nif(chunk===this.lastChunk){this.lastChunk=chunk.next;}this.byEnd[chunk.end]=chunk;this.byStart[chunk.next.start]=chunk.next;this.byEnd[chunk.next.end]=chunk.next;}if(aborted){return true;}chunk=chunk.next;}while(chunk);return false;};MagicString.prototype.trimStart=function trimStart(charType){this.trimStartAborted(charType);return this;};var UNKNOWN={};function gather_possible_values(node,set){if(node.type==='Literal'){set.add(node.value);}else if(node.type==='ConditionalExpression'){gather_possible_values(node.consequent,set);gather_possible_values(node.alternate,set);}else{set.add(UNKNOWN);}}var BlockAppliesToNode;(function(BlockAppliesToNode){BlockAppliesToNode[BlockAppliesToNode[\"NotPossible\"]=0]=\"NotPossible\";BlockAppliesToNode[BlockAppliesToNode[\"Possible\"]=1]=\"Possible\";BlockAppliesToNode[BlockAppliesToNode[\"UnknownSelectorType\"]=2]=\"UnknownSelectorType\";})(BlockAppliesToNode||(BlockAppliesToNode={}));var Selector$1=/*#__PURE__*/function(){function Selector$1(node,stylesheet){(0,_classCallCheck2.default)(this,Selector$1);this.node=node;this.stylesheet=stylesheet;this.blocks=group_selectors(node);// take trailing :global(...) selectors out of consideration\nvar i=this.blocks.length;while(i>0){if(!this.blocks[i-1].global)break;i-=1;}this.local_blocks=this.blocks.slice(0,i);this.used=this.local_blocks.length===0;}(0,_createClass2.default)(Selector$1,[{key:\"apply\",value:function apply(node,stack){var _this40=this;var to_encapsulate=[];apply_selector(this.local_blocks.slice(),node,stack.slice(),to_encapsulate);if(to_encapsulate.length>0){to_encapsulate.forEach(function(_ref27){var node=_ref27.node,block=_ref27.block;_this40.stylesheet.nodes_with_css_class.add(node);block.should_encapsulate=true;});this.used=true;}}},{key:\"minify\",value:function minify(code){var c=null;this.blocks.forEach(function(block,i){if(i>0){if(block.start-c>1){code.overwrite(c,block.start,block.combinator.name||' ');}}c=block.end;});}},{key:\"transform\",value:function transform(code,attr,max_amount_class_specificity_increased){var amount_class_specificity_to_increase=max_amount_class_specificity_increased-this.blocks.filter(function(block){return block.should_encapsulate;}).length;attr=attr.repeat(amount_class_specificity_to_increase+1);function encapsulate_block(block){var i=block.selectors.length;while(i--){var _selector=block.selectors[i];if(_selector.type==='PseudoElementSelector'||_selector.type==='PseudoClassSelector'){if(_selector.name!=='root'){if(i===0)code.prependRight(_selector.start,attr);}continue;}if(_selector.type==='TypeSelector'&&_selector.name==='*'){code.overwrite(_selector.start,_selector.end,attr);}else{code.appendLeft(_selector.end,attr);}break;}}this.blocks.forEach(function(block){if(block.global){var _selector2=block.selectors[0];var first=_selector2.children[0];var last=_selector2.children[_selector2.children.length-1];code.remove(_selector2.start,first.start).remove(last.end,_selector2.end);}if(block.should_encapsulate)encapsulate_block(block);});}},{key:\"validate\",value:function validate(component){this.blocks.forEach(function(block){var i=block.selectors.length;while(i-->1){var _selector3=block.selectors[i];if(_selector3.type==='PseudoClassSelector'&&_selector3.name==='global'){component.error(_selector3,{code:\"css-invalid-global\",message:\":global(...) must be the first element in a compound selector\"});}}});var start=0;var end=this.blocks.length;for(;start<end;start+=1){if(!this.blocks[start].global)break;}for(;end>start;end-=1){if(!this.blocks[end-1].global)break;}for(var _i34=start;_i34<end;_i34+=1){if(this.blocks[_i34].global){component.error(this.blocks[_i34].selectors[0],{code:\"css-invalid-global\",message:\":global(...) can be at the start or end of a selector sequence, but not in the middle\"});}}}},{key:\"get_amount_class_specificity_increased\",value:function get_amount_class_specificity_increased(){var count=0;var _iterator8=_createForOfIteratorHelper(this.blocks),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var block=_step8.value;if(block.should_encapsulate){count++;}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}return count;}}]);return Selector$1;}();function apply_selector(blocks,node,stack,to_encapsulate){var block=blocks.pop();if(!block)return false;if(!node){return blocks.every(function(block){return block.global;});}switch(block_might_apply_to_node(block,node)){case BlockAppliesToNode.NotPossible:return false;case BlockAppliesToNode.UnknownSelectorType:// bail. TODO figure out what these could be\nto_encapsulate.push({node:node,block:block});return true;}if(block.combinator){if(block.combinator.type==='WhiteSpace'){var _iterator9=_createForOfIteratorHelper(blocks),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var ancestor_block=_step9.value;if(ancestor_block.global){continue;}var _iterator10=_createForOfIteratorHelper(stack),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var stack_node=_step10.value;if(block_might_apply_to_node(ancestor_block,stack_node)!==BlockAppliesToNode.NotPossible){to_encapsulate.push({node:stack_node,block:ancestor_block});}}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}if(to_encapsulate.length){to_encapsulate.push({node:node,block:block});return true;}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}if(blocks.every(function(block){return block.global;})){to_encapsulate.push({node:node,block:block});return true;}return false;}else if(block.combinator.name==='>'){if(apply_selector(blocks,stack.pop(),stack,to_encapsulate)){to_encapsulate.push({node:node,block:block});return true;}return false;}// TODO other combinators\nto_encapsulate.push({node:node,block:block});return true;}to_encapsulate.push({node:node,block:block});return true;}function block_might_apply_to_node(block,node){var i=block.selectors.length;var _loop=function _loop(){var selector=block.selectors[i];var name=typeof selector.name==='string'&&selector.name.replace(/\\\\(.)/g,'$1');if(selector.type==='PseudoClassSelector'||selector.type==='PseudoElementSelector'){return\"continue\";}if(selector.type==='PseudoClassSelector'&&name==='global'){// TODO shouldn't see this here... maybe we should enforce that :global(...)\n// cannot be sandwiched between non-global selectors?\nreturn{v:BlockAppliesToNode.NotPossible};}if(selector.type==='ClassSelector'){if(!attribute_matches(node,'class',name,'~=',false)&&!node.classes.some(function(c){return c.name===name;}))return{v:BlockAppliesToNode.NotPossible};}else if(selector.type==='IdSelector'){if(!attribute_matches(node,'id',name,'=',false))return{v:BlockAppliesToNode.NotPossible};}else if(selector.type==='AttributeSelector'){if(!attribute_matches(node,selector.name.name,selector.value&&unquote(selector.value),selector.matcher,selector.flags))return{v:BlockAppliesToNode.NotPossible};}else if(selector.type==='TypeSelector'){if(node.name.toLowerCase()!==name.toLowerCase()&&name!=='*')return{v:BlockAppliesToNode.NotPossible};}else{return{v:BlockAppliesToNode.UnknownSelectorType};}};while(i--){var _ret=_loop();if(_ret===\"continue\")continue;if((0,_typeof2.default)(_ret)===\"object\")return _ret.v;}return BlockAppliesToNode.Possible;}function test_attribute(operator,expected_value,case_insensitive,value){if(case_insensitive){expected_value=expected_value.toLowerCase();value=value.toLowerCase();}switch(operator){case'=':return value===expected_value;case'~=':return value.split(/\\s/).includes(expected_value);case'|=':return\"\".concat(value,\"-\").startsWith(\"\".concat(expected_value,\"-\"));case'^=':return value.startsWith(expected_value);case'$=':return value.endsWith(expected_value);case'*=':return value.includes(expected_value);default:throw new Error(\"this shouldn't happen\");}}function attribute_matches(node,name,expected_value,operator,case_insensitive){var spread=node.attributes.find(function(attr){return attr.type==='Spread';});if(spread)return true;if(node.bindings.some(function(binding){return binding.name===name;}))return true;var attr=node.attributes.find(function(attr){return attr.name===name;});if(!attr)return false;if(attr.is_true)return operator===null;if(!expected_value)return true;if(attr.chunks.length===1){var _value9=attr.chunks[0];if(!_value9)return false;if(_value9.type==='Text')return test_attribute(operator,expected_value,case_insensitive,_value9.data);}var possible_values=new Set();var prev_values=[];var _iterator11=_createForOfIteratorHelper(attr.chunks),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var chunk=_step11.value;var current_possible_values=new Set();if(chunk.type==='Text'){current_possible_values.add(chunk.data);}else{gather_possible_values(chunk.node,current_possible_values);}// impossible to find out all combinations\nif(current_possible_values.has(UNKNOWN))return true;if(prev_values.length>0){var _ret2=function(){var start_with_space=[];var remaining=[];current_possible_values.forEach(function(current_possible_value){if(/^\\s/.test(current_possible_value)){start_with_space.push(current_possible_value);}else{remaining.push(current_possible_value);}});if(remaining.length>0){if(start_with_space.length>0){prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});}var combined=[];prev_values.forEach(function(prev_value){remaining.forEach(function(value){combined.push(prev_value+value);});});prev_values=combined;start_with_space.forEach(function(value){if(/\\s$/.test(value)){possible_values.add(value);}else{prev_values.push(value);}});return\"continue\";}else{prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});prev_values=[];}}();if(_ret2===\"continue\")continue;}current_possible_values.forEach(function(current_possible_value){if(/\\s$/.test(current_possible_value)){possible_values.add(current_possible_value);}else{prev_values.push(current_possible_value);}});if(prev_values.length<current_possible_values.size){prev_values.push(' ');}if(prev_values.length>20){// might grow exponentially, bail out\nreturn true;}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}prev_values.forEach(function(prev_value){return possible_values.add(prev_value);});if(possible_values.has(UNKNOWN))return true;var _iterator12=_createForOfIteratorHelper(possible_values),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var _value10=_step12.value;if(test_attribute(operator,expected_value,case_insensitive,_value10))return true;}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}return false;}function unquote(value){if(value.type==='Identifier')return value.name;var str=value.value;if(str[0]===str[str.length-1]&&str[0]===\"'\"||str[0]==='\"'){return str.slice(1,str.length-1);}return str;}var Block$2=/*#__PURE__*/function(){function Block$2(combinator){(0,_classCallCheck2.default)(this,Block$2);this.combinator=combinator;this.global=false;this.selectors=[];this.start=null;this.end=null;this.should_encapsulate=false;}(0,_createClass2.default)(Block$2,[{key:\"add\",value:function add(selector){if(this.selectors.length===0){this.start=selector.start;this.global=selector.type==='PseudoClassSelector'&&selector.name==='global';}this.selectors.push(selector);this.end=selector.end;}}]);return Block$2;}();function group_selectors(selector){var block=new Block$2(null);var blocks=[block];selector.children.forEach(function(child){if(child.type==='WhiteSpace'||child.type==='Combinator'){block=new Block$2(child);blocks.push(block);}else{block.add(child);}});return blocks;}// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str){str=str.replace(/\\r/g,\"\");var hash=5381;var i=str.length;while(i--){hash=(hash<<5)-hash^str.charCodeAt(i);}return(hash>>>0).toString(36);}function remove_css_prefix(name){return name.replace(/^-((webkit)|(moz)|(o)|(ms))-/,'');}var is_keyframes_node=function is_keyframes_node(node){return remove_css_prefix(node.name)==='keyframes';};var at_rule_has_declaration=function at_rule_has_declaration(_ref28){var block=_ref28.block;return block&&block.children&&block.children.find(function(node){return node.type==='Declaration';});};function minify_declarations(code,start,declarations){var c=start;declarations.forEach(function(declaration,i){var separator=i>0?';':'';if(declaration.node.start-c>separator.length){code.overwrite(c,declaration.node.start,separator);}declaration.minify(code);c=declaration.node.end;});return c;}var Rule$1=/*#__PURE__*/function(){function Rule$1(node,stylesheet,parent){(0,_classCallCheck2.default)(this,Rule$1);this.node=node;this.parent=parent;this.selectors=node.selector.children.map(function(node){return new Selector$1(node,stylesheet);});this.declarations=node.block.children.map(function(node){return new Declaration$1(node);});}(0,_createClass2.default)(Rule$1,[{key:\"apply\",value:function apply(node,stack){this.selectors.forEach(function(selector){return selector.apply(node,stack);});// TODO move the logic in here?\n}},{key:\"is_used\",value:function is_used(dev){if(this.parent&&this.parent.node.type==='Atrule'&&is_keyframes_node(this.parent.node))return true;if(this.declarations.length===0)return dev;return this.selectors.some(function(s){return s.used;});}},{key:\"minify\",value:function minify(code,_dev){var c=this.node.start;var started=false;this.selectors.forEach(function(selector){if(selector.used){var separator=started?',':'';if(selector.node.start-c>separator.length){code.overwrite(c,selector.node.start,separator);}selector.minify(code);c=selector.node.end;started=true;}});code.remove(c,this.node.block.start);c=this.node.block.start+1;c=minify_declarations(code,c,this.declarations);code.remove(c,this.node.block.end-1);}},{key:\"transform\",value:function transform(code,id,keyframes,max_amount_class_specificity_increased){if(this.parent&&this.parent.node.type==='Atrule'&&is_keyframes_node(this.parent.node))return true;var attr=\".\".concat(id);this.selectors.forEach(function(selector){return selector.transform(code,attr,max_amount_class_specificity_increased);});this.declarations.forEach(function(declaration){return declaration.transform(code,keyframes);});}},{key:\"validate\",value:function validate(component){this.selectors.forEach(function(selector){selector.validate(component);});}},{key:\"warn_on_unused_selector\",value:function warn_on_unused_selector(handler){this.selectors.forEach(function(selector){if(!selector.used)handler(selector);});}},{key:\"get_max_amount_class_specificity_increased\",value:function get_max_amount_class_specificity_increased(){return Math.max.apply(Math,(0,_toConsumableArray2.default)(this.selectors.map(function(selector){return selector.get_amount_class_specificity_increased();})));}}]);return Rule$1;}();var Declaration$1=/*#__PURE__*/function(){function Declaration$1(node){(0,_classCallCheck2.default)(this,Declaration$1);this.node=node;}(0,_createClass2.default)(Declaration$1,[{key:\"transform\",value:function transform(code,keyframes){var property=this.node.property&&remove_css_prefix(this.node.property.toLowerCase());if(property==='animation'||property==='animation-name'){this.node.value.children.forEach(function(block){if(block.type==='Identifier'){var name=block.name;if(keyframes.has(name)){code.overwrite(block.start,block.end,keyframes.get(name));}}});}}},{key:\"minify\",value:function minify(code){if(!this.node.property)return;// @apply, and possibly other weird cases?\nvar c=this.node.start+this.node.property.length;var first=this.node.value.children?this.node.value.children[0]:this.node.value;var start=first.start;while(/\\s/.test(code.original[start])){start+=1;}if(start-c>1){code.overwrite(c,start,':');}}}]);return Declaration$1;}();var Atrule$1=/*#__PURE__*/function(){function Atrule$1(node){(0,_classCallCheck2.default)(this,Atrule$1);this.node=node;this.children=[];this.declarations=[];}(0,_createClass2.default)(Atrule$1,[{key:\"apply\",value:function apply(node,stack){if(this.node.name==='media'||this.node.name==='supports'){this.children.forEach(function(child){child.apply(node,stack);});}else if(is_keyframes_node(this.node)){this.children.forEach(function(rule){rule.selectors.forEach(function(selector){selector.used=true;});});}}},{key:\"is_used\",value:function is_used(_dev){return true;// TODO\n}},{key:\"minify\",value:function minify(code,dev){if(this.node.name==='media'){var expression_char=code.original[this.node.expression.start];var _c2=this.node.start+(expression_char==='('?6:7);if(this.node.expression.start>_c2)code.remove(_c2,this.node.expression.start);this.node.expression.children.forEach(function(query){// TODO minify queries\n_c2=query.end;});code.remove(_c2,this.node.block.start);}else if(this.node.name==='supports'){var _c3=this.node.start+9;if(this.node.expression.start-_c3>1)code.overwrite(_c3,this.node.expression.start,' ');this.node.expression.children.forEach(function(query){// TODO minify queries\n_c3=query.end;});code.remove(_c3,this.node.block.start);}else{var _c4=this.node.start+this.node.name.length+1;if(this.node.expression){if(this.node.expression.start-_c4>1)code.overwrite(_c4,this.node.expression.start,' ');_c4=this.node.expression.end;}if(this.node.block&&this.node.block.start-_c4>0){code.remove(_c4,this.node.block.start);}}// TODO other atrules\nif(this.node.block){var _c5=this.node.block.start+1;if(this.declarations.length){_c5=minify_declarations(code,_c5,this.declarations);// if the atrule has children, leave the last declaration semicolon alone\nif(this.children.length)_c5++;}this.children.forEach(function(child){if(child.is_used(dev)){code.remove(_c5,child.node.start);child.minify(code,dev);_c5=child.node.end;}});code.remove(_c5,this.node.block.end-1);}}},{key:\"transform\",value:function transform(code,id,keyframes,max_amount_class_specificity_increased){var _this41=this;if(is_keyframes_node(this.node)){this.node.expression.children.forEach(function(_ref29){var type=_ref29.type,name=_ref29.name,start=_ref29.start,end=_ref29.end;if(type==='Identifier'){if(name.startsWith('-global-')){code.remove(start,start+8);_this41.children.forEach(function(rule){rule.selectors.forEach(function(selector){selector.used=true;});});}else{code.overwrite(start,end,keyframes.get(name));}}});}this.children.forEach(function(child){child.transform(code,id,keyframes,max_amount_class_specificity_increased);});}},{key:\"validate\",value:function validate(component){this.children.forEach(function(child){child.validate(component);});}},{key:\"warn_on_unused_selector\",value:function warn_on_unused_selector(handler){if(this.node.name!=='media')return;this.children.forEach(function(child){child.warn_on_unused_selector(handler);});}},{key:\"get_max_amount_class_specificity_increased\",value:function get_max_amount_class_specificity_increased(){return Math.max.apply(Math,(0,_toConsumableArray2.default)(this.children.map(function(rule){return rule.get_max_amount_class_specificity_increased();})));}}]);return Atrule$1;}();var Stylesheet=/*#__PURE__*/function(){function Stylesheet(source,ast,filename,dev){var _this42=this;(0,_classCallCheck2.default)(this,Stylesheet);this.children=[];this.keyframes=new Map();this.nodes_with_css_class=new Set();this.source=source;this.ast=ast;this.filename=filename;this.dev=dev;if(ast.css&&ast.css.children.length){this.id=\"svelte-\".concat(hash(ast.css.content.styles));this.has_styles=true;var stack=[];var depth=0;var current_atrule=null;walk(ast.css,{enter:function enter(node){if(node.type==='Atrule'){var _atrule=new Atrule$1(node);stack.push(_atrule);if(current_atrule){current_atrule.children.push(_atrule);}else if(depth<=1){_this42.children.push(_atrule);}if(is_keyframes_node(node)){node.expression.children.forEach(function(expression){if(expression.type==='Identifier'&&!expression.name.startsWith('-global-')){_this42.keyframes.set(expression.name,\"\".concat(_this42.id,\"-\").concat(expression.name));}});}else if(at_rule_has_declaration(node)){var _atrule$declarations;var at_rule_declarations=node.block.children.filter(function(node){return node.type==='Declaration';}).map(function(node){return new Declaration$1(node);});(_atrule$declarations=_atrule.declarations).push.apply(_atrule$declarations,(0,_toConsumableArray2.default)(at_rule_declarations));}current_atrule=_atrule;}if(node.type==='Rule'){var rule=new Rule$1(node,_this42,current_atrule);if(current_atrule){current_atrule.children.push(rule);}else if(depth<=1){_this42.children.push(rule);}}depth+=1;},leave:function leave(node){if(node.type==='Atrule'){stack.pop();current_atrule=stack[stack.length-1];}depth-=1;}});}else{this.has_styles=false;}}(0,_createClass2.default)(Stylesheet,[{key:\"apply\",value:function apply(node){if(!this.has_styles)return;var stack=[];var parent=node;while(parent=parent.parent){if(parent.type==='Element')stack.unshift(parent);}for(var _i35=0;_i35<this.children.length;_i35+=1){var child=this.children[_i35];child.apply(node,stack);}}},{key:\"reify\",value:function reify(){this.nodes_with_css_class.forEach(function(node){node.add_css_class();});}},{key:\"render\",value:function render(file,should_transform_selectors){var _this43=this;if(!this.has_styles){return{code:null,map:null};}var code=new MagicString(this.source);walk(this.ast.css,{enter:function enter(node){code.addSourcemapLocation(node.start);code.addSourcemapLocation(node.end);}});if(should_transform_selectors){var max=Math.max.apply(Math,(0,_toConsumableArray2.default)(this.children.map(function(rule){return rule.get_max_amount_class_specificity_increased();})));this.children.forEach(function(child){child.transform(code,_this43.id,_this43.keyframes,max);});}var c=0;this.children.forEach(function(child){if(child.is_used(_this43.dev)){code.remove(c,child.node.start);child.minify(code,_this43.dev);c=child.node.end;}});code.remove(c,this.source.length);return{code:code.toString(),map:code.generateMap({includeContent:true,source:this.filename,file:file})};}},{key:\"validate\",value:function validate(component){this.children.forEach(function(child){child.validate(component);});}},{key:\"warn_on_unused_selectors\",value:function warn_on_unused_selectors(component){this.children.forEach(function(child){child.warn_on_unused_selector(function(selector){component.warn(selector.node,{code:\"css-unused-selector\",message:\"Unused CSS selector\"});});});}}]);return Stylesheet;}();var test=typeof process!=='undefined'&&process.env.TEST;var AbstractBlock=/*#__PURE__*/function(_Node$2){(0,_inherits2.default)(AbstractBlock,_Node$2);var _super24=_createSuper(AbstractBlock);function AbstractBlock(component,parent,scope,info){(0,_classCallCheck2.default)(this,AbstractBlock);return _super24.call(this,component,parent,scope,info);}(0,_createClass2.default)(AbstractBlock,[{key:\"warn_if_empty_block\",value:function warn_if_empty_block(){if(!this.children||this.children.length>1)return;var child=this.children[0];if(!child||child.type==='Text'&&!/[^ \\r\\n\\f\\v\\t]/.test(child.data)){this.component.warn(this,{code:'empty-block',message:'Empty block'});}}}]);return AbstractBlock;}(Node$1);var PendingBlock=/*#__PURE__*/function(_AbstractBlock){(0,_inherits2.default)(PendingBlock,_AbstractBlock);var _super25=_createSuper(PendingBlock);function PendingBlock(component,parent,scope,info){var _this44;(0,_classCallCheck2.default)(this,PendingBlock);_this44=_super25.call(this,component,parent,scope,info);_this44.children=map_children(component,parent,scope,info.children);if(!info.skip){_this44.warn_if_empty_block();}return _this44;}return PendingBlock;}(AbstractBlock);var ThenBlock=/*#__PURE__*/function(_AbstractBlock2){(0,_inherits2.default)(ThenBlock,_AbstractBlock2);var _super26=_createSuper(ThenBlock);function ThenBlock(component,parent,scope,info){var _this45;(0,_classCallCheck2.default)(this,ThenBlock);_this45=_super26.call(this,component,parent,scope,info);_this45.scope=scope.child();if(parent.then_node){parent.then_contexts.forEach(function(context){_this45.scope.add(context.key.name,parent.expression.dependencies,(0,_assertThisInitialized2.default)(_this45));});}_this45.children=map_children(component,parent,_this45.scope,info.children);if(!info.skip){_this45.warn_if_empty_block();}return _this45;}return ThenBlock;}(AbstractBlock);var CatchBlock=/*#__PURE__*/function(_AbstractBlock3){(0,_inherits2.default)(CatchBlock,_AbstractBlock3);var _super27=_createSuper(CatchBlock);function CatchBlock(component,parent,scope,info){var _this46;(0,_classCallCheck2.default)(this,CatchBlock);_this46=_super27.call(this,component,parent,scope,info);_this46.scope=scope.child();if(parent.catch_node){parent.catch_contexts.forEach(function(context){_this46.scope.add(context.key.name,parent.expression.dependencies,(0,_assertThisInitialized2.default)(_this46));});}_this46.children=map_children(component,parent,_this46.scope,info.children);if(!info.skip){_this46.warn_if_empty_block();}return _this46;}return CatchBlock;}(AbstractBlock);function unpack_destructuring(contexts,node,modifier){if(!node)return;if(node.type==='Identifier'){contexts.push({key:node,modifier:modifier});}else if(node.type==='RestElement'){contexts.push({key:node.argument,modifier:modifier});}else if(node.type==='ArrayPattern'){node.elements.forEach(function(element,i){if(element&&element.type==='RestElement'){unpack_destructuring(contexts,element,function(node){return x(_templateObject697(),modifier(node),i);});}else if(element&&element.type==='AssignmentPattern'){unpack_destructuring(contexts,element.left,function(node){return x(_templateObject698(),modifier(node),i,modifier(node),i,element.right);});}else{unpack_destructuring(contexts,element,function(node){return x(_templateObject699(),modifier(node),i);});}});}else if(node.type==='ObjectPattern'){var used_properties=[];node.properties.forEach(function(property){if(property.type==='RestElement'){unpack_destructuring(contexts,property.argument,function(node){return x(_templateObject700(),modifier(node),used_properties);});}else{var key=property.key;var _value11=property.value;used_properties.push(x(_templateObject701(),key.name));if(_value11.type==='AssignmentPattern'){unpack_destructuring(contexts,_value11.left,function(node){return x(_templateObject702(),modifier(node),key.name,modifier(node),key.name,_value11.right);});}else{unpack_destructuring(contexts,_value11,function(node){return x(_templateObject703(),modifier(node),key.name);});}}});}}var AwaitBlock$1=/*#__PURE__*/function(_Node$3){(0,_inherits2.default)(AwaitBlock$1,_Node$3);var _super28=_createSuper(AwaitBlock$1);function AwaitBlock$1(component,parent,scope,info){var _this47;(0,_classCallCheck2.default)(this,AwaitBlock$1);_this47=_super28.call(this,component,parent,scope,info);_this47.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this47),scope,info.expression);_this47.then_node=info.value;_this47.catch_node=info.error;if(_this47.then_node){_this47.then_contexts=[];unpack_destructuring(_this47.then_contexts,info.value,function(node){return node;});}if(_this47.catch_node){_this47.catch_contexts=[];unpack_destructuring(_this47.catch_contexts,info.error,function(node){return node;});}_this47.pending=new PendingBlock(component,(0,_assertThisInitialized2.default)(_this47),scope,info.pending);_this47.then=new ThenBlock(component,(0,_assertThisInitialized2.default)(_this47),scope,info.then);_this47.catch=new CatchBlock(component,(0,_assertThisInitialized2.default)(_this47),scope,info.catch);return _this47;}return AwaitBlock$1;}(Node$1);var EventHandler=/*#__PURE__*/function(_Node$4){(0,_inherits2.default)(EventHandler,_Node$4);var _super29=_createSuper(EventHandler);function EventHandler(component,parent,template_scope,info){var _this48;(0,_classCallCheck2.default)(this,EventHandler);_this48=_super29.call(this,component,parent,template_scope,info);_this48.uses_context=false;_this48.can_make_passive=false;_this48.name=info.name;_this48.modifiers=new Set(info.modifiers);if(info.expression){_this48.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this48),template_scope,info.expression);_this48.uses_context=_this48.expression.uses_context;if(/FunctionExpression/.test(info.expression.type)&&info.expression.params.length===0){// TODO make this detection more accurate — if `event.preventDefault` isn't called, and\n// `event` is passed to another function, we can make it passive\n_this48.can_make_passive=true;}else if(info.expression.type==='Identifier'){var _node8=component.node_for_declaration.get(info.expression.name);if(_node8){if(_node8.type==='VariableDeclaration'){// for `const handleClick = () => {...}`, we want the [arrow] function expression node\nvar declarator=_node8.declarations.find(function(d){return d.id.name===info.expression.name;});_node8=declarator&&declarator.init;}if(_node8&&(_node8.type==='FunctionExpression'||_node8.type==='FunctionDeclaration'||_node8.type==='ArrowFunctionExpression')&&_node8.params.length===0){_this48.can_make_passive=true;}}}}else{_this48.handler_name=component.get_unique_name(\"\".concat(sanitize(_this48.name),\"_handler\"));}return _this48;}(0,_createClass2.default)(EventHandler,[{key:\"reassigned\",get:function get(){if(!this.expression){return false;}var node=this.expression.node;if(/FunctionExpression/.test(node.type)){return false;}return this.expression.dynamic_dependencies().length>0;}}]);return EventHandler;}(Node$1);var Body=/*#__PURE__*/function(_Node$5){(0,_inherits2.default)(Body,_Node$5);var _super30=_createSuper(Body);function Body(component,parent,scope,info){var _this49;(0,_classCallCheck2.default)(this,Body);_this49=_super30.call(this,component,parent,scope,info);_this49.handlers=[];info.attributes.forEach(function(node){if(node.type==='EventHandler'){_this49.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this49),scope,node));}});return _this49;}return Body;}(Node$1);var pattern=/^\\s*svelte-ignore\\s+([\\s\\S]+)\\s*$/m;var Comment$2=/*#__PURE__*/function(_Node$6){(0,_inherits2.default)(Comment$2,_Node$6);var _super31=_createSuper(Comment$2);function Comment$2(component,parent,scope,info){var _this50;(0,_classCallCheck2.default)(this,Comment$2);_this50=_super31.call(this,component,parent,scope,info);_this50.data=info.data;var match=pattern.exec(_this50.data);_this50.ignores=match?match[1].split(/[^\\S]/).map(function(x){return x.trim();}).filter(Boolean):[];return _this50;}return Comment$2;}(Node$1);var ElseBlock=/*#__PURE__*/function(_AbstractBlock4){(0,_inherits2.default)(ElseBlock,_AbstractBlock4);var _super32=_createSuper(ElseBlock);function ElseBlock(component,parent,scope,info){var _this51;(0,_classCallCheck2.default)(this,ElseBlock);_this51=_super32.call(this,component,parent,scope,info);_this51.children=map_children(component,(0,_assertThisInitialized2.default)(_this51),scope,info.children);_this51.warn_if_empty_block();return _this51;}return ElseBlock;}(AbstractBlock);var EachBlock$1=/*#__PURE__*/function(_AbstractBlock5){(0,_inherits2.default)(EachBlock$1,_AbstractBlock5);var _super33=_createSuper(EachBlock$1);function EachBlock$1(component,parent,scope,info){var _this52;(0,_classCallCheck2.default)(this,EachBlock$1);_this52=_super33.call(this,component,parent,scope,info);_this52.has_binding=false;_this52.has_index_binding=false;_this52.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this52),scope,info.expression);_this52.context=info.context.name||'each';// TODO this is used to facilitate binding; currently fails with destructuring\n_this52.context_node=info.context;_this52.index=info.index;_this52.scope=scope.child();_this52.contexts=[];unpack_destructuring(_this52.contexts,info.context,function(node){return node;});_this52.contexts.forEach(function(context){_this52.scope.add(context.key.name,_this52.expression.dependencies,(0,_assertThisInitialized2.default)(_this52));});if(_this52.index){// index can only change if this is a keyed each block\nvar dependencies=info.key?_this52.expression.dependencies:new Set([]);_this52.scope.add(_this52.index,dependencies,(0,_assertThisInitialized2.default)(_this52));}_this52.key=info.key?new Expression(component,(0,_assertThisInitialized2.default)(_this52),_this52.scope,info.key):null;_this52.has_animation=false;_this52.children=map_children(component,(0,_assertThisInitialized2.default)(_this52),_this52.scope,info.children);if(_this52.has_animation){if(_this52.children.length!==1){var child=_this52.children.find(function(child){return!!child.animation;});component.error(child.animation,{code:\"invalid-animation\",message:\"An element that use the animate directive must be the sole child of a keyed each block\"});}}_this52.warn_if_empty_block();_this52.else=info.else?new ElseBlock(component,(0,_assertThisInitialized2.default)(_this52),_this52.scope,info.else):null;return _this52;}return EachBlock$1;}(AbstractBlock);var Attribute=/*#__PURE__*/function(_Node$7){(0,_inherits2.default)(Attribute,_Node$7);var _super34=_createSuper(Attribute);function Attribute(component,parent,scope,info){var _this53;(0,_classCallCheck2.default)(this,Attribute);_this53=_super34.call(this,component,parent,scope,info);_this53.scope=scope;if(info.type==='Spread'){_this53.name=null;_this53.is_spread=true;_this53.is_true=false;_this53.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this53),scope,info.expression);_this53.dependencies=_this53.expression.dependencies;_this53.chunks=null;_this53.is_static=false;}else{_this53.name=info.name;_this53.is_true=info.value===true;_this53.is_static=true;_this53.dependencies=new Set();_this53.chunks=_this53.is_true?[]:info.value.map(function(node){if(node.type==='Text')return node;_this53.is_static=false;var expression=new Expression(component,(0,_assertThisInitialized2.default)(_this53),scope,node.expression);add_to_set(_this53.dependencies,expression.dependencies);return expression;});}return _this53;}(0,_createClass2.default)(Attribute,[{key:\"get_dependencies\",value:function get_dependencies(){if(this.is_spread)return this.expression.dynamic_dependencies();var dependencies=new Set();this.chunks.forEach(function(chunk){if(chunk.type==='Expression'){add_to_set(dependencies,chunk.dynamic_dependencies());}});return Array.from(dependencies);}},{key:\"get_value\",value:function get_value(block){if(this.is_true)return x(_templateObject704());if(this.chunks.length===0)return x(_templateObject705());if(this.chunks.length===1){return this.chunks[0].type==='Text'?string_literal(this.chunks[0].data):this.chunks[0].manipulate(block);}var expression=this.chunks.map(function(chunk){return chunk.type==='Text'?string_literal(chunk.data):chunk.manipulate(block);}).reduce(function(lhs,rhs){return x(_templateObject706(),lhs,rhs);});if(this.chunks[0].type!=='Text'){expression=x(_templateObject707(),expression);}return expression;}},{key:\"get_static_value\",value:function get_static_value(){if(this.is_spread||this.dependencies.size>0)return null;return this.is_true?true:this.chunks[0]// method should be called only when `is_static = true`\n?this.chunks[0].data:'';}},{key:\"should_cache\",value:function should_cache(){return this.is_static?false:this.chunks.length===1// @ts-ignore todo: probably error\n?this.chunks[0].node.type!=='Identifier'||this.scope.names.has(this.chunks[0].node.name):true;}}]);return Attribute;}(Node$1);// TODO this should live in a specific binding\nvar read_only_media_attributes=new Set(['duration','buffered','seekable','played','seeking','ended','videoHeight','videoWidth']);var Binding=/*#__PURE__*/function(_Node$8){(0,_inherits2.default)(Binding,_Node$8);var _super35=_createSuper(Binding);function Binding(component,parent,scope,info){var _this54;(0,_classCallCheck2.default)(this,Binding);_this54=_super35.call(this,component,parent,scope,info);if(info.expression.type!=='Identifier'&&info.expression.type!=='MemberExpression'){component.error(info,{code:'invalid-directive-value',message:'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'});}_this54.name=info.name;_this54.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this54),scope,info.expression);_this54.raw_expression=JSON.parse(JSON.stringify(info.expression));var _get_object=get_object(_this54.expression.node),name=_get_object.name;_this54.is_contextual=Array.from(_this54.expression.references).some(function(name){return scope.names.has(name);});// make sure we track this as a mutable ref\nif(scope.is_let(name)){component.error((0,_assertThisInitialized2.default)(_this54),{code:'invalid-binding',message:'Cannot bind to a variable declared with the let: directive'});}else if(scope.names.has(name)){if(scope.is_await(name)){component.error((0,_assertThisInitialized2.default)(_this54),{code:'invalid-binding',message:'Cannot bind to a variable declared with {#await ... then} or {:catch} blocks'});}scope.dependencies_for_name.get(name).forEach(function(name){var variable=component.var_lookup.get(name);if(variable){variable.mutated=true;}});}else{var variable=component.var_lookup.get(name);if(!variable||variable.global)component.error(_this54.expression.node,{code:'binding-undeclared',message:\"\".concat(name,\" is not declared\")});variable[_this54.expression.node.type==='MemberExpression'?'mutated':'reassigned']=true;if(info.expression.type==='Identifier'&&!variable.writable)component.error(_this54.expression.node,{code:'invalid-binding',message:'Cannot bind to a variable which is not writable'});}var type=parent.get_static_attribute_value('type');_this54.is_readonly=dimensions.test(_this54.name)||parent.is_media_node&&parent.is_media_node()&&read_only_media_attributes.has(_this54.name)||parent.name==='input'&&type==='file'// TODO others?\n;return _this54;}(0,_createClass2.default)(Binding,[{key:\"is_readonly_media_attribute\",value:function is_readonly_media_attribute(){return read_only_media_attributes.has(this.name);}}]);return Binding;}(Node$1);var Transition=/*#__PURE__*/function(_Node$9){(0,_inherits2.default)(Transition,_Node$9);var _super36=_createSuper(Transition);function Transition(component,parent,scope,info){var _this55;(0,_classCallCheck2.default)(this,Transition);_this55=_super36.call(this,component,parent,scope,info);component.warn_if_undefined(info.name,info,scope);_this55.name=info.name;component.add_reference(info.name.split('.')[0]);_this55.directive=info.intro&&info.outro?'transition':info.intro?'in':'out';_this55.is_local=info.modifiers.includes('local');if(info.intro&&parent.intro||info.outro&&parent.outro){var parent_transition=parent.intro||parent.outro;var message=_this55.directive===parent_transition.directive?\"An element can only have one '\".concat(_this55.directive,\"' directive\"):\"An element cannot have both \".concat(describe(parent_transition),\" directive and \").concat(describe((0,_assertThisInitialized2.default)(_this55)),\" directive\");component.error(info,{code:\"duplicate-transition\",message:message});}_this55.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this55),scope,info.expression,true):null;return _this55;}return Transition;}(Node$1);function describe(transition){return transition.directive==='transition'?\"a 'transition'\":\"an '\".concat(transition.directive,\"'\");}var Animation=/*#__PURE__*/function(_Node$10){(0,_inherits2.default)(Animation,_Node$10);var _super37=_createSuper(Animation);function Animation(component,parent,scope,info){var _this56;(0,_classCallCheck2.default)(this,Animation);_this56=_super37.call(this,component,parent,scope,info);component.warn_if_undefined(info.name,info,scope);_this56.name=info.name;component.add_reference(info.name.split('.')[0]);if(parent.animation){component.error((0,_assertThisInitialized2.default)(_this56),{code:\"duplicate-animation\",message:\"An element can only have one 'animate' directive\"});}var block=parent.parent;if(!block||block.type!=='EachBlock'||!block.key){// TODO can we relax the 'immediate child' rule?\ncomponent.error((0,_assertThisInitialized2.default)(_this56),{code:\"invalid-animation\",message:\"An element that use the animate directive must be the immediate child of a keyed each block\"});}block.has_animation=true;_this56.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this56),scope,info.expression,true):null;return _this56;}return Animation;}(Node$1);var Class=/*#__PURE__*/function(_Node$11){(0,_inherits2.default)(Class,_Node$11);var _super38=_createSuper(Class);function Class(component,parent,scope,info){var _this57;(0,_classCallCheck2.default)(this,Class);_this57=_super38.call(this,component,parent,scope,info);_this57.name=info.name;_this57.expression=info.expression?new Expression(component,(0,_assertThisInitialized2.default)(_this57),scope,info.expression):null;return _this57;}return Class;}(Node$1);// Whitespace inside one of these elements will not result in\n// a whitespace node being created in any circumstances. (This\n// list is almost certainly very incomplete)\nvar elements_without_text=new Set(['audio','datalist','dl','optgroup','select','video']);var Text$1=/*#__PURE__*/function(_Node$12){(0,_inherits2.default)(Text$1,_Node$12);var _super39=_createSuper(Text$1);function Text$1(component,parent,scope,info){var _this58;(0,_classCallCheck2.default)(this,Text$1);_this58=_super39.call(this,component,parent,scope,info);_this58.data=info.data;_this58.synthetic=info.synthetic||false;return _this58;}(0,_createClass2.default)(Text$1,[{key:\"should_skip\",value:function should_skip(){if(/\\S/.test(this.data))return false;var parent_element=this.find_nearest(/(?:Element|InlineComponent|Head)/);if(!parent_element)return false;if(parent_element.type==='Head')return true;if(parent_element.type==='InlineComponent')return parent_element.children.length===1&&this===parent_element.children[0];// svg namespace exclusions\nif(/svg$/.test(parent_element.namespace)){if(this.prev&&this.prev.type===\"Element\"&&this.prev.name===\"tspan\")return false;}return parent_element.namespace||elements_without_text.has(parent_element.name);}}]);return Text$1;}(Node$1);var applicable=new Set(['Identifier','ObjectExpression','ArrayExpression','Property']);var Let=/*#__PURE__*/function(_Node$13){(0,_inherits2.default)(Let,_Node$13);var _super40=_createSuper(Let);function Let(component,parent,scope,info){var _this59;(0,_classCallCheck2.default)(this,Let);_this59=_super40.call(this,component,parent,scope,info);_this59.names=[];_this59.name={type:'Identifier',name:info.name};var _assertThisInitialize=(0,_assertThisInitialized2.default)(_this59),names=_assertThisInitialize.names;if(info.expression){_this59.value=info.expression;walk(info.expression,{enter:function enter(node){if(!applicable.has(node.type)){component.error(node,{code:'invalid-let',message:\"let directive value must be an identifier or an object/array pattern\"});}if(node.type==='Identifier'){names.push(node.name);}// slightly unfortunate hack\nif(node.type==='ArrayExpression'){node.type='ArrayPattern';}if(node.type==='ObjectExpression'){node.type='ObjectPattern';}}});}else{names.push(_this59.name.name);}return _this59;}return Let;}(Node$1);var svg$1=/^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|svg|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;var aria_attributes='activedescendant atomic autocomplete busy checked colcount colindex colspan controls current describedby details disabled dropeffect errormessage expanded flowto grabbed haspopup hidden invalid keyshortcuts label labelledby level live modal multiline multiselectable orientation owns placeholder posinset pressed readonly relevant required roledescription rowcount rowindex rowspan selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');var aria_attribute_set=new Set(aria_attributes);var aria_roles='alert alertdialog application article banner blockquote button caption cell checkbox code columnheader combobox complementary contentinfo definition deletion dialog directory document emphasis feed figure form generic grid gridcell group heading img link list listbox listitem log main marquee math meter menu menubar menuitem menuitemcheckbox menuitemradio navigation none note option paragraph presentation progressbar radio radiogroup region row rowgroup rowheader scrollbar search searchbox separator slider spinbutton status strong subscript superscript switch tab table tablist tabpanel term textbox time timer toolbar tooltip tree treegrid treeitem'.split(' ');var aria_role_set=new Set(aria_roles);var a11y_required_attributes={a:['href'],area:['alt','aria-label','aria-labelledby'],// html-has-lang\nhtml:['lang'],// iframe-has-title\niframe:['title'],img:['alt'],object:['title','aria-label','aria-labelledby']};var a11y_distracting_elements=new Set(['blink','marquee']);var a11y_required_content=new Set([// anchor-has-content\n'a',// heading-has-content\n'h1','h2','h3','h4','h5','h6']);var a11y_no_onchange=new Set(['select','option']);var a11y_labelable=new Set([\"button\",\"input\",\"keygen\",\"meter\",\"output\",\"progress\",\"select\",\"textarea\"]);var invisible_elements=new Set(['meta','html','script','style']);var valid_modifiers=new Set(['preventDefault','stopPropagation','capture','once','passive','self']);var passive_events=new Set(['wheel','touchstart','touchmove','touchend','touchcancel']);function get_namespace(parent,element,explicit_namespace){var parent_element=parent.find_nearest(/^Element/);if(!parent_element){return explicit_namespace||(svg$1.test(element.name)?namespaces.svg:null);}if(svg$1.test(element.name.toLowerCase()))return namespaces.svg;if(parent_element.name.toLowerCase()==='foreignobject')return null;return parent_element.namespace;}var Element$1=/*#__PURE__*/function(_Node$14){(0,_inherits2.default)(Element$1,_Node$14);var _super41=_createSuper(Element$1);function Element$1(component,parent,scope,info){var _this60;(0,_classCallCheck2.default)(this,Element$1);_this60=_super41.call(this,component,parent,scope,info);_this60.attributes=[];_this60.actions=[];_this60.bindings=[];_this60.classes=[];_this60.handlers=[];_this60.lets=[];_this60.intro=null;_this60.outro=null;_this60.animation=null;_this60.name=info.name;_this60.namespace=get_namespace(parent,(0,_assertThisInitialized2.default)(_this60),component.namespace);if(_this60.name==='textarea'){if(info.children.length>0){var value_attribute=info.attributes.find(function(node){return node.name==='value';});if(value_attribute){component.error(value_attribute,{code:\"textarea-duplicate-value\",message:\"A <textarea> can have either a value attribute or (equivalently) child content, but not both\"});}// this is an egregious hack, but it's the easiest way to get <textarea>\n// children treated the same way as a value attribute\ninfo.attributes.push({type:'Attribute',name:'value',value:info.children});info.children=[];}}if(_this60.name==='option'){// Special case — treat these the same way:\n//   <option>{foo}</option>\n//   <option value={foo}>{foo}</option>\nvar _value_attribute=info.attributes.find(function(attribute){return attribute.name==='value';});if(!_value_attribute){info.attributes.push({type:'Attribute',name:'value',value:info.children,synthetic:true});}}var has_let=info.attributes.some(function(node){return node.type==='Let';});if(has_let){scope=scope.child();}// Binding relies on Attribute, defer its evaluation\nvar order=['Binding'];// everything else is -1\ninfo.attributes.sort(function(a,b){return order.indexOf(a.type)-order.indexOf(b.type);});info.attributes.forEach(function(node){switch(node.type){case'Action':_this60.actions.push(new Action(component,(0,_assertThisInitialized2.default)(_this60),scope,node));break;case'Attribute':case'Spread':// special case\nif(node.name==='xmlns')_this60.namespace=node.value[0].data;_this60.attributes.push(new Attribute(component,(0,_assertThisInitialized2.default)(_this60),scope,node));break;case'Binding':_this60.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this60),scope,node));break;case'Class':_this60.classes.push(new Class(component,(0,_assertThisInitialized2.default)(_this60),scope,node));break;case'EventHandler':_this60.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this60),scope,node));break;case'Let':{var l=new Let(component,(0,_assertThisInitialized2.default)(_this60),scope,node);_this60.lets.push(l);var dependencies=new Set([l.name.name]);l.names.forEach(function(name){scope.add(name,dependencies,(0,_assertThisInitialized2.default)(_this60));});break;}case'Transition':{var transition=new Transition(component,(0,_assertThisInitialized2.default)(_this60),scope,node);if(node.intro)_this60.intro=transition;if(node.outro)_this60.outro=transition;break;}case'Animation':_this60.animation=new Animation(component,(0,_assertThisInitialized2.default)(_this60),scope,node);break;default:throw new Error(\"Not implemented: \".concat(node.type));}});_this60.scope=scope;_this60.children=map_children(component,(0,_assertThisInitialized2.default)(_this60),_this60.scope,info.children);_this60.validate();component.stylesheet.apply((0,_assertThisInitialized2.default)(_this60));return _this60;}(0,_createClass2.default)(Element$1,[{key:\"validate\",value:function validate(){if(a11y_distracting_elements.has(this.name)){// no-distracting-elements\nthis.component.warn(this,{code:\"a11y-distracting-elements\",message:\"A11y: Avoid <\".concat(this.name,\"> elements\")});}if(this.name==='figcaption'){var parent=this.parent;var is_figure_parent=false;while(parent){if(parent.name==='figure'){is_figure_parent=true;break;}if(parent.type==='Element'){break;}parent=parent.parent;}if(!is_figure_parent){this.component.warn(this,{code:\"a11y-structure\",message:\"A11y: <figcaption> must be an immediate child of <figure>\"});}}if(this.name==='figure'){var children=this.children.filter(function(node){if(node.type==='Comment')return false;if(node.type==='Text')return /\\S/.test(node.data);return true;});var index=children.findIndex(function(child){return child.name==='figcaption';});if(index!==-1&&index!==0&&index!==children.length-1){this.component.warn(children[index],{code:\"a11y-structure\",message:\"A11y: <figcaption> must be first or last child of <figure>\"});}}this.validate_attributes();this.validate_special_cases();this.validate_bindings();this.validate_content();this.validate_event_handlers();}},{key:\"validate_attributes\",value:function validate_attributes(){var _this61=this;var component=this.component,parent=this.parent;var attribute_map=new Map();this.attributes.forEach(function(attribute){if(attribute.is_spread)return;var name=attribute.name.toLowerCase();// aria-props\nif(name.startsWith('aria-')){if(invisible_elements.has(_this61.name)){// aria-unsupported-elements\ncomponent.warn(attribute,{code:\"a11y-aria-attributes\",message:\"A11y: <\".concat(_this61.name,\"> should not have aria-* attributes\")});}var type=name.slice(5);if(!aria_attribute_set.has(type)){var match=fuzzymatch(type,aria_attributes);var message=\"A11y: Unknown aria attribute 'aria-\".concat(type,\"'\");if(match)message+=\" (did you mean '\".concat(match,\"'?)\");component.warn(attribute,{code:\"a11y-unknown-aria-attribute\",message:message});}if(name==='aria-hidden'&&/^h[1-6]$/.test(_this61.name)){component.warn(attribute,{code:\"a11y-hidden\",message:\"A11y: <\".concat(_this61.name,\"> element should not be hidden\")});}}// aria-role\nif(name==='role'){if(invisible_elements.has(_this61.name)){// aria-unsupported-elements\ncomponent.warn(attribute,{code:\"a11y-misplaced-role\",message:\"A11y: <\".concat(_this61.name,\"> should not have role attribute\")});}var _value12=attribute.get_static_value();// @ts-ignore\nif(_value12&&!aria_role_set.has(_value12)){// @ts-ignore\nvar _match=fuzzymatch(_value12,aria_roles);var _message=\"A11y: Unknown role '\".concat(_value12,\"'\");if(_match)_message+=\" (did you mean '\".concat(_match,\"'?)\");component.warn(attribute,{code:\"a11y-unknown-role\",message:_message});}}// no-access-key\nif(name==='accesskey'){component.warn(attribute,{code:\"a11y-accesskey\",message:\"A11y: Avoid using accesskey\"});}// no-autofocus\nif(name==='autofocus'){component.warn(attribute,{code:\"a11y-autofocus\",message:\"A11y: Avoid using autofocus\"});}// scope\nif(name==='scope'&&_this61.name!=='th'){component.warn(attribute,{code:\"a11y-misplaced-scope\",message:\"A11y: The scope attribute should only be used with <th> elements\"});}// tabindex-no-positive\nif(name==='tabindex'){var _value13=attribute.get_static_value();// @ts-ignore todo is tabindex=true correct case?\nif(!isNaN(_value13)&&+_value13>0){component.warn(attribute,{code:\"a11y-positive-tabindex\",message:\"A11y: avoid tabindex values above zero\"});}}if(/(^[0-9-.])|[\\^$@%&#?!|()[\\]{}^*+~;]/.test(name)){component.error(attribute,{code:\"illegal-attribute\",message:\"'\".concat(name,\"' is not a valid attribute name\")});}if(name==='slot'){if(!attribute.is_static){component.error(attribute,{code:\"invalid-slot-attribute\",message:\"slot attribute cannot have a dynamic value\"});}if(component.slot_outlets.has(name)){component.error(attribute,{code:\"duplicate-slot-attribute\",message:\"Duplicate '\".concat(name,\"' slot\")});component.slot_outlets.add(name);}if(!(parent.type==='InlineComponent'||within_custom_element(parent))){component.error(attribute,{code:\"invalid-slotted-content\",message:\"Element with a slot='...' attribute must be a child of a component or a descendant of a custom element\"});}}if(name==='is'){component.warn(attribute,{code:'avoid-is',message:\"The 'is' attribute is not supported cross-browser and should be avoided\"});}attribute_map.set(attribute.name,attribute);});}},{key:\"validate_special_cases\",value:function validate_special_cases(){var component=this.component,attributes=this.attributes,handlers=this.handlers;var attribute_map=new Map();var handlers_map=new Map();attributes.forEach(function(attribute){return attribute_map.set(attribute.name,attribute);});handlers.forEach(function(handler){return handlers_map.set(handler.name,handler);});if(this.name==='a'){var href_attribute=attribute_map.get('href')||attribute_map.get('xlink:href');var id_attribute=attribute_map.get('id');var name_attribute=attribute_map.get('name');if(href_attribute){var href_value=href_attribute.get_static_value();if(href_value===''||href_value==='#'||/^\\W*javascript:/i.test(href_value)){component.warn(href_attribute,{code:\"a11y-invalid-attribute\",message:\"A11y: '\".concat(href_value,\"' is not a valid \").concat(href_attribute.name,\" attribute\")});}}else{var id_attribute_valid=id_attribute&&id_attribute.get_static_value()!=='';var name_attribute_valid=name_attribute&&name_attribute.get_static_value()!=='';if(!id_attribute_valid&&!name_attribute_valid){component.warn(this,{code:\"a11y-missing-attribute\",message:\"A11y: <a> element should have an href attribute\"});}}}else{var required_attributes=a11y_required_attributes[this.name];if(required_attributes){var has_attribute=required_attributes.some(function(name){return attribute_map.has(name);});if(!has_attribute){should_have_attribute(this,required_attributes);}}}if(this.name==='input'){var type=attribute_map.get('type');if(type&&type.get_static_value()==='image'){var _required_attributes=['alt','aria-label','aria-labelledby'];var _has_attribute=_required_attributes.some(function(name){return attribute_map.has(name);});if(!_has_attribute){should_have_attribute(this,_required_attributes,'input type=\"image\"');}}}if(this.name==='img'){var alt_attribute=attribute_map.get('alt');var aria_hidden_attribute=attribute_map.get('aria-hidden');var aria_hidden_exist=aria_hidden_attribute&&aria_hidden_attribute.get_static_value();if(alt_attribute&&!aria_hidden_exist){var alt_value=alt_attribute.get_static_value();if(/\\b(image|picture|photo)\\b/i.test(alt_value)){component.warn(this,{code:\"a11y-img-redundant-alt\",message:\"A11y: Screenreaders already announce <img> elements as an image.\"});}}}if(this.name==='label'){var has_input_child=this.children.some(function(i){return i instanceof Element$1&&a11y_labelable.has(i.name);});if(!attribute_map.has('for')&&!has_input_child){component.warn(this,{code:\"a11y-label-has-associated-control\",message:\"A11y: A form label must be associated with a control.\"});}}if(this.is_media_node()){if(attribute_map.has('muted')){return;}var has_caption;var track=this.children.find(function(i){return i.name==='track';});if(track){has_caption=track.attributes.find(function(a){return a.name==='kind'&&a.get_static_value()==='captions';});}if(!has_caption){component.warn(this,{code:\"a11y-media-has-caption\",message:\"A11y: Media elements must have a <track kind=\\\"captions\\\">\"});}}if(a11y_no_onchange.has(this.name)){if(handlers_map.has('change')&&!handlers_map.has('blur')){component.warn(this,{code:\"a11y-no-onchange\",message:\"A11y: on:blur must be used instead of on:change, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users.\"});}}}},{key:\"validate_bindings\",value:function validate_bindings(){var _this62=this;var component=this.component;var check_type_attribute=function check_type_attribute(){var attribute=_this62.attributes.find(function(attribute){return attribute.name==='type';});if(!attribute)return null;if(!attribute.is_static){component.error(attribute,{code:\"invalid-type\",message:\"'type' attribute cannot be dynamic if input uses two-way binding\"});}var value=attribute.get_static_value();if(value===true){component.error(attribute,{code:\"missing-type\",message:\"'type' attribute must be specified\"});}return value;};this.bindings.forEach(function(binding){var name=binding.name;if(name==='value'){if(_this62.name!=='input'&&_this62.name!=='textarea'&&_this62.name!=='select'){component.error(binding,{code:\"invalid-binding\",message:\"'value' is not a valid binding on <\".concat(_this62.name,\"> elements\")});}if(_this62.name==='select'){var attribute=_this62.attributes.find(function(attribute){return attribute.name==='multiple';});if(attribute&&!attribute.is_static){component.error(attribute,{code:\"dynamic-multiple-attribute\",message:\"'multiple' attribute cannot be dynamic if select uses two-way binding\"});}}else{check_type_attribute();}}else if(name==='checked'||name==='indeterminate'){if(_this62.name!=='input'){component.error(binding,{code:\"invalid-binding\",message:\"'\".concat(name,\"' is not a valid binding on <\").concat(_this62.name,\"> elements\")});}var type=check_type_attribute();if(type!=='checkbox'){var message=\"'\".concat(name,\"' binding can only be used with <input type=\\\"checkbox\\\">\");if(type==='radio')message+=\" \\u2014 for <input type=\\\"radio\\\">, use 'group' binding\";component.error(binding,{code:\"invalid-binding\",message:message});}}else if(name==='group'){if(_this62.name!=='input'){component.error(binding,{code:\"invalid-binding\",message:\"'group' is not a valid binding on <\".concat(_this62.name,\"> elements\")});}var _type=check_type_attribute();if(_type!=='checkbox'&&_type!=='radio'){component.error(binding,{code:\"invalid-binding\",message:\"'group' binding can only be used with <input type=\\\"checkbox\\\"> or <input type=\\\"radio\\\">\"});}}else if(name==='files'){if(_this62.name!=='input'){component.error(binding,{code:\"invalid-binding\",message:\"'files' is not a valid binding on <\".concat(_this62.name,\"> elements\")});}var _type2=check_type_attribute();if(_type2!=='file'){component.error(binding,{code:\"invalid-binding\",message:\"'files' binding can only be used with <input type=\\\"file\\\">\"});}}else if(name==='open'){if(_this62.name!=='details'){component.error(binding,{code:\"invalid-binding\",message:\"'\".concat(name,\"' binding can only be used with <details>\")});}}else if(name==='currentTime'||name==='duration'||name==='paused'||name==='buffered'||name==='seekable'||name==='played'||name==='volume'||name==='muted'||name==='playbackRate'||name==='seeking'||name==='ended'){if(_this62.name!=='audio'&&_this62.name!=='video'){component.error(binding,{code:\"invalid-binding\",message:\"'\".concat(name,\"' binding can only be used with <audio> or <video>\")});}}else if(name==='videoHeight'||name==='videoWidth'){if(_this62.name!=='video'){component.error(binding,{code:\"invalid-binding\",message:\"'\".concat(name,\"' binding can only be used with <video>\")});}}else if(dimensions.test(name)){if(_this62.name==='svg'&&(name==='offsetWidth'||name==='offsetHeight')){component.error(binding,{code:'invalid-binding',message:\"'\".concat(binding.name,\"' is not a valid binding on <svg>. Use '\").concat(name.replace('offset','client'),\"' instead\")});}else if(svg$1.test(_this62.name)){component.error(binding,{code:'invalid-binding',message:\"'\".concat(binding.name,\"' is not a valid binding on SVG elements\")});}else if(is_void(_this62.name)){component.error(binding,{code:'invalid-binding',message:\"'\".concat(binding.name,\"' is not a valid binding on void elements like <\").concat(_this62.name,\">. Use a wrapper element instead\")});}}else if(name==='textContent'||name==='innerHTML'){var contenteditable=_this62.attributes.find(function(attribute){return attribute.name==='contenteditable';});if(!contenteditable){component.error(binding,{code:\"missing-contenteditable-attribute\",message:\"'contenteditable' attribute is required for textContent and innerHTML two-way bindings\"});}else if(contenteditable&&!contenteditable.is_static){component.error(contenteditable,{code:\"dynamic-contenteditable-attribute\",message:\"'contenteditable' attribute cannot be dynamic if element uses two-way binding\"});}}else if(name!=='this'){component.error(binding,{code:\"invalid-binding\",message:\"'\".concat(binding.name,\"' is not a valid binding\")});}});}},{key:\"validate_content\",value:function validate_content(){if(!a11y_required_content.has(this.name))return;if(this.bindings.some(function(binding){return['textContent','innerHTML'].includes(binding.name);}))return;if(this.children.length===0){this.component.warn(this,{code:\"a11y-missing-content\",message:\"A11y: <\".concat(this.name,\"> element should have child content\")});}}},{key:\"validate_event_handlers\",value:function validate_event_handlers(){var component=this.component;this.handlers.forEach(function(handler){if(handler.modifiers.has('passive')&&handler.modifiers.has('preventDefault')){component.error(handler,{code:'invalid-event-modifier',message:\"The 'passive' and 'preventDefault' modifiers cannot be used together\"});}handler.modifiers.forEach(function(modifier){if(!valid_modifiers.has(modifier)){component.error(handler,{code:'invalid-event-modifier',message:\"Valid event modifiers are \".concat(list$1(Array.from(valid_modifiers)))});}if(modifier==='passive'){if(passive_events.has(handler.name)){if(handler.can_make_passive){component.warn(handler,{code:'redundant-event-modifier',message:\"Touch event handlers that don't use the 'event' object are passive by default\"});}}else{component.warn(handler,{code:'redundant-event-modifier',message:\"The passive modifier only works with wheel and touch events\"});}}if(component.compile_options.legacy&&(modifier==='once'||modifier==='passive')){// TODO this could be supported, but it would need a few changes to\n// how event listeners work\ncomponent.error(handler,{code:'invalid-event-modifier',message:\"The '\".concat(modifier,\"' modifier cannot be used in legacy mode\")});}});if(passive_events.has(handler.name)&&handler.can_make_passive&&!handler.modifiers.has('preventDefault')){// touch/wheel events should be passive by default\nhandler.modifiers.add('passive');}});}},{key:\"is_media_node\",value:function is_media_node(){return this.name==='audio'||this.name==='video';}},{key:\"add_css_class\",value:function add_css_class(){if(this.attributes.some(function(attr){return attr.is_spread;})){this.needs_manual_style_scoping=true;return;}var id=this.component.stylesheet.id;var class_attribute=this.attributes.find(function(a){return a.name==='class';});if(class_attribute&&!class_attribute.is_true){if(class_attribute.chunks.length===1&&class_attribute.chunks[0].type==='Text'){class_attribute.chunks[0].data+=\" \".concat(id);}else{class_attribute.chunks.push(new Text$1(this.component,this,this.scope,{type:'Text',data:\" \".concat(id),synthetic:true}));}}else{this.attributes.push(new Attribute(this.component,this,this.scope,{type:'Attribute',name:'class',value:[{type:'Text',data:id,synthetic:true}]}));}}}]);return Element$1;}(Node$1);function should_have_attribute(node,attributes){var name=arguments.length>2&&arguments[2]!==undefined?arguments[2]:node.name;var article=/^[aeiou]/.test(attributes[0])?'an':'a';var sequence=attributes.length>1?attributes.slice(0,-1).join(', ')+\" or \".concat(attributes[attributes.length-1]):attributes[0];node.component.warn(node,{code:\"a11y-missing-attribute\",message:\"A11y: <\".concat(name,\"> element should have \").concat(article,\" \").concat(sequence,\" attribute\")});}function within_custom_element(parent){while(parent){if(parent.type==='InlineComponent')return false;if(parent.type==='Element'&&/-/.test(parent.name))return true;parent=parent.parent;}return false;}var Head$1=/*#__PURE__*/function(_Node$15){(0,_inherits2.default)(Head$1,_Node$15);var _super42=_createSuper(Head$1);function Head$1(component,parent,scope,info){var _this63;(0,_classCallCheck2.default)(this,Head$1);_this63=_super42.call(this,component,parent,scope,info);if(info.attributes.length){component.error(info.attributes[0],{code:\"invalid-attribute\",message:\"<svelte:head> should not have any attributes or directives\"});}_this63.children=map_children(component,parent,scope,info.children.filter(function(child){return child.type!=='Text'||/\\S/.test(child.data);}));if(_this63.children.length>0){_this63.id=\"svelte-\".concat(hash(_this63.component.source.slice(_this63.start,_this63.end)));}return _this63;}return Head$1;}(Node$1);var IfBlock$1=/*#__PURE__*/function(_AbstractBlock6){(0,_inherits2.default)(IfBlock$1,_AbstractBlock6);var _super43=_createSuper(IfBlock$1);function IfBlock$1(component,parent,scope,info){var _this64;(0,_classCallCheck2.default)(this,IfBlock$1);_this64=_super43.call(this,component,parent,scope,info);_this64.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this64),scope,info.expression);_this64.children=map_children(component,(0,_assertThisInitialized2.default)(_this64),scope,info.children);_this64.else=info.else?new ElseBlock(component,(0,_assertThisInitialized2.default)(_this64),scope,info.else):null;_this64.warn_if_empty_block();return _this64;}return IfBlock$1;}(AbstractBlock);var InlineComponent$1=/*#__PURE__*/function(_Node$16){(0,_inherits2.default)(InlineComponent$1,_Node$16);var _super44=_createSuper(InlineComponent$1);function InlineComponent$1(component,parent,scope,info){var _this65;(0,_classCallCheck2.default)(this,InlineComponent$1);_this65=_super44.call(this,component,parent,scope,info);_this65.attributes=[];_this65.bindings=[];_this65.handlers=[];_this65.lets=[];if(info.name!=='svelte:component'&&info.name!=='svelte:self'){var name=info.name.split('.')[0];// accommodate namespaces\ncomponent.warn_if_undefined(name,info,scope);component.add_reference(name);}_this65.name=info.name;_this65.expression=_this65.name==='svelte:component'?new Expression(component,(0,_assertThisInitialized2.default)(_this65),scope,info.expression):null;info.attributes.forEach(function(node){/* eslint-disable no-fallthrough */switch(node.type){case'Action':component.error(node,{code:\"invalid-action\",message:\"Actions can only be applied to DOM elements, not components\"});case'Attribute':if(node.name==='slot'){component.error(node,{code:\"invalid-prop\",message:\"'slot' is reserved for future use in named slots\"});}// fallthrough\ncase'Spread':_this65.attributes.push(new Attribute(component,(0,_assertThisInitialized2.default)(_this65),scope,node));break;case'Binding':_this65.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this65),scope,node));break;case'Class':component.error(node,{code:\"invalid-class\",message:\"Classes can only be applied to DOM elements, not components\"});case'EventHandler':_this65.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this65),scope,node));break;case'Let':_this65.lets.push(new Let(component,(0,_assertThisInitialized2.default)(_this65),scope,node));break;case'Transition':component.error(node,{code:\"invalid-transition\",message:\"Transitions can only be applied to DOM elements, not components\"});default:throw new Error(\"Not implemented: \".concat(node.type));}/* eslint-enable no-fallthrough */});if(_this65.lets.length>0){_this65.scope=scope.child();_this65.lets.forEach(function(l){var dependencies=new Set([l.name.name]);l.names.forEach(function(name){_this65.scope.add(name,dependencies,(0,_assertThisInitialized2.default)(_this65));});});}else{_this65.scope=scope;}_this65.handlers.forEach(function(handler){handler.modifiers.forEach(function(modifier){if(modifier!=='once'){component.error(handler,{code:'invalid-event-modifier',message:\"Event modifiers other than 'once' can only be used on DOM elements\"});}});});_this65.children=map_children(component,(0,_assertThisInitialized2.default)(_this65),_this65.scope,info.children);return _this65;}return InlineComponent$1;}(Node$1);var Tag$2=/*#__PURE__*/function(_Node$17){(0,_inherits2.default)(Tag$2,_Node$17);var _super45=_createSuper(Tag$2);function Tag$2(component,parent,scope,info){var _this66;(0,_classCallCheck2.default)(this,Tag$2);_this66=_super45.call(this,component,parent,scope,info);_this66.expression=new Expression(component,(0,_assertThisInitialized2.default)(_this66),scope,info.expression);_this66.should_cache=info.expression.type!=='Identifier'||_this66.expression.dependencies.size&&scope.names.has(info.expression.name);return _this66;}return Tag$2;}(Node$1);var MustacheTag=/*#__PURE__*/function(_Tag$){(0,_inherits2.default)(MustacheTag,_Tag$);var _super46=_createSuper(MustacheTag);function MustacheTag(){(0,_classCallCheck2.default)(this,MustacheTag);return _super46.apply(this,arguments);}return MustacheTag;}(Tag$2);var Options=/*#__PURE__*/function(_Node$18){(0,_inherits2.default)(Options,_Node$18);var _super47=_createSuper(Options);function Options(){(0,_classCallCheck2.default)(this,Options);return _super47.apply(this,arguments);}return Options;}(Node$1);var RawMustacheTag=/*#__PURE__*/function(_Tag$2){(0,_inherits2.default)(RawMustacheTag,_Tag$2);var _super48=_createSuper(RawMustacheTag);function RawMustacheTag(){(0,_classCallCheck2.default)(this,RawMustacheTag);return _super48.apply(this,arguments);}return RawMustacheTag;}(Tag$2);var DebugTag$1=/*#__PURE__*/function(_Node$19){(0,_inherits2.default)(DebugTag$1,_Node$19);var _super49=_createSuper(DebugTag$1);function DebugTag$1(component,parent,scope,info){var _this67;(0,_classCallCheck2.default)(this,DebugTag$1);_this67=_super49.call(this,component,parent,scope,info);_this67.expressions=info.identifiers.map(function(node){return new Expression(component,parent,scope,node);});return _this67;}return DebugTag$1;}(Node$1);var Slot$1=/*#__PURE__*/function(_Element$){(0,_inherits2.default)(Slot$1,_Element$);var _super50=_createSuper(Slot$1);function Slot$1(component,parent,scope,info){var _this68;(0,_classCallCheck2.default)(this,Slot$1);_this68=_super50.call(this,component,parent,scope,info);_this68.values=new Map();info.attributes.forEach(function(attr){if(attr.type!=='Attribute'){component.error(attr,{code:\"invalid-slot-directive\",message:\"<slot> cannot have directives\"});}if(attr.name==='name'){if(attr.value.length!==1||attr.value[0].type!=='Text'){component.error(attr,{code:\"dynamic-slot-name\",message:\"<slot> name cannot be dynamic\"});}_this68.slot_name=attr.value[0].data;if(_this68.slot_name==='default'){component.error(attr,{code:\"invalid-slot-name\",message:\"default is a reserved word \\u2014 it cannot be used as a slot name\"});}}_this68.values.set(attr.name,new Attribute(component,(0,_assertThisInitialized2.default)(_this68),scope,attr));});if(!_this68.slot_name)_this68.slot_name='default';if(_this68.slot_name==='default'){// if this is the default slot, add our dependencies to any\n// other slots (which inherit our slot values) that were\n// previously encountered\ncomponent.slots.forEach(function(slot){_this68.values.forEach(function(attribute,name){if(!slot.values.has(name)){slot.values.set(name,attribute);}});});}else if(component.slots.has('default')){// otherwise, go the other way — inherit values from\n// a previously encountered default slot\nvar default_slot=component.slots.get('default');default_slot.values.forEach(function(attribute,name){if(!_this68.values.has(name)){_this68.values.set(name,attribute);}});}component.slots.set(_this68.slot_name,(0,_assertThisInitialized2.default)(_this68));return _this68;}return Slot$1;}(Element$1);var Title$1=/*#__PURE__*/function(_Node$20){(0,_inherits2.default)(Title$1,_Node$20);var _super51=_createSuper(Title$1);function Title$1(component,parent,scope,info){var _this69;(0,_classCallCheck2.default)(this,Title$1);_this69=_super51.call(this,component,parent,scope,info);_this69.children=map_children(component,parent,scope,info.children);if(info.attributes.length>0){component.error(info.attributes[0],{code:\"illegal-attribute\",message:\"<title> cannot have attributes\"});}info.children.forEach(function(child){if(child.type!=='Text'&&child.type!=='MustacheTag'){component.error(child,{code:'illegal-structure',message:\"<title> can only contain text and {tags}\"});}});_this69.should_cache=info.children.length===1?info.children[0].type!=='Identifier'||scope.names.has(info.children[0].name):true;return _this69;}return Title$1;}(Node$1);var valid_bindings=['innerWidth','innerHeight','outerWidth','outerHeight','scrollX','scrollY','online'];var Window=/*#__PURE__*/function(_Node$21){(0,_inherits2.default)(Window,_Node$21);var _super52=_createSuper(Window);function Window(component,parent,scope,info){var _this70;(0,_classCallCheck2.default)(this,Window);_this70=_super52.call(this,component,parent,scope,info);_this70.handlers=[];_this70.bindings=[];_this70.actions=[];info.attributes.forEach(function(node){if(node.type==='EventHandler'){_this70.handlers.push(new EventHandler(component,(0,_assertThisInitialized2.default)(_this70),scope,node));}else if(node.type==='Binding'){if(node.expression.type!=='Identifier'){var _flatten_reference5=flatten_reference(node.expression),parts=_flatten_reference5.parts;// TODO is this constraint necessary?\ncomponent.error(node.expression,{code:\"invalid-binding\",message:\"Bindings on <svelte:window> must be to top-level properties, e.g. '\".concat(parts[parts.length-1],\"' rather than '\").concat(parts.join('.'),\"'\")});}if(!~valid_bindings.indexOf(node.name)){var match=node.name==='width'?'innerWidth':node.name==='height'?'innerHeight':fuzzymatch(node.name,valid_bindings);var message=\"'\".concat(node.name,\"' is not a valid binding on <svelte:window>\");if(match){component.error(node,{code:\"invalid-binding\",message:\"\".concat(message,\" (did you mean '\").concat(match,\"'?)\")});}else{component.error(node,{code:\"invalid-binding\",message:\"\".concat(message,\" \\u2014 valid bindings are \").concat(list$1(valid_bindings))});}}_this70.bindings.push(new Binding(component,(0,_assertThisInitialized2.default)(_this70),scope,node));}else if(node.type==='Action'){_this70.actions.push(new Action(component,(0,_assertThisInitialized2.default)(_this70),scope,node));}});return _this70;}return Window;}(Node$1);function get_constructor(type){switch(type){case'AwaitBlock':return AwaitBlock$1;case'Body':return Body;case'Comment':return Comment$2;case'EachBlock':return EachBlock$1;case'Element':return Element$1;case'Head':return Head$1;case'IfBlock':return IfBlock$1;case'InlineComponent':return InlineComponent$1;case'MustacheTag':return MustacheTag;case'Options':return Options;case'RawMustacheTag':return RawMustacheTag;case'DebugTag':return DebugTag$1;case'Slot':return Slot$1;case'Text':return Text$1;case'Title':return Title$1;case'Window':return Window;default:throw new Error(\"Not implemented: \".concat(type));}}function map_children(component,parent,scope,children){var last=null;var ignores=[];return children.map(function(child){var constructor=get_constructor(child.type);var use_ignores=child.type!=='Text'&&child.type!=='Comment'&&ignores.length;if(use_ignores)component.push_ignores(ignores);var node=new constructor(component,parent,scope,child);if(use_ignores)component.pop_ignores(),ignores=[];if(node.type==='Comment'&&node.ignores.length){var _ignores;(_ignores=ignores).push.apply(_ignores,(0,_toConsumableArray2.default)(node.ignores));}if(last)last.next=node;node.prev=last;last=node;return node;});}var TemplateScope=/*#__PURE__*/function(){function TemplateScope(parent){(0,_classCallCheck2.default)(this,TemplateScope);this.owners=new Map();this.parent=parent;this.names=new Set(parent?parent.names:[]);this.dependencies_for_name=new Map(parent?parent.dependencies_for_name:[]);}(0,_createClass2.default)(TemplateScope,[{key:\"add\",value:function add(name,dependencies,owner){this.names.add(name);this.dependencies_for_name.set(name,dependencies);this.owners.set(name,owner);return this;}},{key:\"child\",value:function child(){var child=new TemplateScope(this);return child;}},{key:\"is_top_level\",value:function is_top_level(name){return!this.parent||!this.names.has(name)&&this.parent.is_top_level(name);}},{key:\"get_owner\",value:function get_owner(name){return this.owners.get(name)||this.parent&&this.parent.get_owner(name);}},{key:\"is_let\",value:function is_let(name){var owner=this.get_owner(name);return owner&&(owner.type==='Element'||owner.type==='InlineComponent');}},{key:\"is_await\",value:function is_await(name){var owner=this.get_owner(name);return owner&&(owner.type==='ThenBlock'||owner.type==='CatchBlock');}}]);return TemplateScope;}();var Fragment=/*#__PURE__*/function(_Node$22){(0,_inherits2.default)(Fragment,_Node$22);var _super53=_createSuper(Fragment);function Fragment(component,info){var _this71;(0,_classCallCheck2.default)(this,Fragment);var scope=new TemplateScope();_this71=_super53.call(this,component,null,scope,info);_this71.scope=scope;_this71.children=map_children(component,(0,_assertThisInitialized2.default)(_this71),scope,info.children);return _this71;}return Fragment;}(Node$1);// This file is automatically generated\nvar internal_exports=new Set([\"HtmlTag\",\"SvelteComponent\",\"SvelteComponentDev\",\"SvelteElement\",\"action_destroyer\",\"add_attribute\",\"add_classes\",\"add_flush_callback\",\"add_location\",\"add_render_callback\",\"add_resize_listener\",\"add_transform\",\"afterUpdate\",\"append\",\"append_dev\",\"assign\",\"attr\",\"attr_dev\",\"beforeUpdate\",\"bind\",\"binding_callbacks\",\"blank_object\",\"bubble\",\"check_outros\",\"children\",\"claim_component\",\"claim_element\",\"claim_space\",\"claim_text\",\"clear_loops\",\"component_subscribe\",\"compute_rest_props\",\"createEventDispatcher\",\"create_animation\",\"create_bidirectional_transition\",\"create_component\",\"create_in_transition\",\"create_out_transition\",\"create_slot\",\"create_ssr_component\",\"current_component\",\"custom_event\",\"dataset_dev\",\"debug\",\"destroy_block\",\"destroy_component\",\"destroy_each\",\"detach\",\"detach_after_dev\",\"detach_before_dev\",\"detach_between_dev\",\"detach_dev\",\"dirty_components\",\"dispatch_dev\",\"each\",\"element\",\"element_is\",\"empty\",\"escape\",\"escaped\",\"exclude_internal_props\",\"fix_and_destroy_block\",\"fix_and_outro_and_destroy_block\",\"fix_position\",\"flush\",\"getContext\",\"get_binding_group_value\",\"get_current_component\",\"get_slot_changes\",\"get_slot_context\",\"get_spread_object\",\"get_spread_update\",\"get_store_value\",\"globals\",\"group_outros\",\"handle_promise\",\"has_prop\",\"identity\",\"init\",\"insert\",\"insert_dev\",\"intros\",\"invalid_attribute_name_character\",\"is_client\",\"is_crossorigin\",\"is_empty\",\"is_function\",\"is_promise\",\"listen\",\"listen_dev\",\"loop\",\"loop_guard\",\"missing_component\",\"mount_component\",\"noop\",\"not_equal\",\"now\",\"null_to_empty\",\"object_without_properties\",\"onDestroy\",\"onMount\",\"once\",\"outro_and_destroy_block\",\"prevent_default\",\"prop_dev\",\"query_selector_all\",\"raf\",\"run\",\"run_all\",\"safe_not_equal\",\"schedule_update\",\"select_multiple_value\",\"select_option\",\"select_options\",\"select_value\",\"self\",\"setContext\",\"set_attributes\",\"set_current_component\",\"set_custom_element_data\",\"set_data\",\"set_data_dev\",\"set_input_type\",\"set_input_value\",\"set_now\",\"set_raf\",\"set_store_value\",\"set_style\",\"set_svg_attributes\",\"space\",\"spread\",\"stop_propagation\",\"subscribe\",\"svg_element\",\"text\",\"tick\",\"time_ranges_to_array\",\"to_number\",\"toggle_class\",\"transition_in\",\"transition_out\",\"update_keyed_each\",\"update_slot\",\"validate_component\",\"validate_each_argument\",\"validate_each_keys\",\"validate_slots\",\"validate_store\",\"xlink_attr\"]);function is_used_as_reference(node,parent){if(!isReference(node,parent)){return false;}if(!parent){return true;}/* eslint-disable no-fallthrough */switch(parent.type){// disregard the `foo` in `const foo = bar`\ncase'VariableDeclarator':return node!==parent.id;// disregard the `foo`, `bar` in `function foo(bar){}`\ncase'FunctionDeclaration':// disregard the `foo` in `import { foo } from 'foo'`\ncase'ImportSpecifier':// disregard the `foo` in `import foo from 'foo'`\ncase'ImportDefaultSpecifier':// disregard the `foo` in `import * as foo from 'foo'`\ncase'ImportNamespaceSpecifier':// disregard the `foo` in `export { foo }`\ncase'ExportSpecifier':return false;default:return true;}}function check_graph_for_cycles(edges){var graph=edges.reduce(function(g,edge){var _edge=(0,_slicedToArray2.default)(edge,2),u=_edge[0],v=_edge[1];if(!g.has(u))g.set(u,[]);if(!g.has(v))g.set(v,[]);g.get(u).push(v);return g;},new Map());var visited=new Set();var on_stack=new Set();var cycles=[];function visit(v){visited.add(v);on_stack.add(v);graph.get(v).forEach(function(w){if(!visited.has(w)){visit(w);}else if(on_stack.has(w)){cycles.push([].concat((0,_toConsumableArray2.default)(on_stack),[w]));}});on_stack.delete(v);}graph.forEach(function(_,v){if(!visited.has(v)){visit(v);}});return cycles[0];}var Component=/*#__PURE__*/function(){function Component(ast,source,name,compile_options,stats,warnings){(0,_classCallCheck2.default)(this,Component);this.ignore_stack=[];this.vars=[];this.var_lookup=new Map();this.imports=[];this.hoistable_nodes=new Set();this.node_for_declaration=new Map();this.partly_hoisted=[];this.fully_hoisted=[];this.reactive_declarations=[];this.reactive_declaration_nodes=new Set();this.has_reactive_assignments=false;this.injected_reactive_declaration_vars=new Set();this.helpers=new Map();this.globals=new Map();this.indirect_dependencies=new Map();this.aliases=new Map();this.used_names=new Set();this.globally_used_names=new Set();this.slots=new Map();this.slot_outlets=new Set();this.name={type:'Identifier',name:name};this.stats=stats;this.warnings=warnings;this.ast=ast;this.source=source;this.compile_options=compile_options;// the instance JS gets mutated, so we park\n// a copy here for later. TODO this feels gross\nthis.original_ast={html:ast.html,css:ast.css,instance:ast.instance&&JSON.parse(JSON.stringify(ast.instance)),module:ast.module};this.file=compile_options.filename&&(typeof process!=='undefined'?compile_options.filename.replace(process.cwd(),'').replace(/^[/\\\\]/,''):compile_options.filename);this.locate=getLocator(this.source,{offsetLine:1});// styles\nthis.stylesheet=new Stylesheet(source,ast,compile_options.filename,compile_options.dev);this.stylesheet.validate(this);this.component_options=process_component_options(this,this.ast.html.children);this.namespace=namespaces[this.component_options.namespace]||this.component_options.namespace;if(compile_options.customElement){if(this.component_options.tag===undefined&&compile_options.tag===undefined){var svelteOptions=ast.html.children.find(function(child){return child.name==='svelte:options';})||{start:0,end:0};this.warn(svelteOptions,{code:'custom-element-no-tag',message:\"No custom element 'tag' option was specified. To automatically register a custom element, specify a name with a hyphen in it, e.g. <svelte:options tag=\\\"my-thing\\\"/>. To hide this warning, use <svelte:options tag={null}/>\"});}this.tag=this.component_options.tag||compile_options.tag;}else{this.tag=this.name.name;}this.walk_module_js();this.walk_instance_js_pre_template();this.fragment=new Fragment(this,ast.html);this.name=this.get_unique_name(name);this.walk_instance_js_post_template();if(!compile_options.customElement)this.stylesheet.reify();this.stylesheet.warn_on_unused_selectors(this);}(0,_createClass2.default)(Component,[{key:\"add_var\",value:function add_var(variable){this.vars.push(variable);this.var_lookup.set(variable.name,variable);}},{key:\"add_reference\",value:function add_reference(name){var variable=this.var_lookup.get(name);if(variable){variable.referenced=true;}else if(is_reserved_keyword(name)){this.add_var({name:name,injected:true,referenced:true});}else if(name[0]==='$'){this.add_var({name:name,injected:true,referenced:true,mutated:true,writable:true});var subscribable_name=name.slice(1);var _variable=this.var_lookup.get(subscribable_name);if(_variable){_variable.referenced=true;_variable.subscribable=true;}}else{this.used_names.add(name);}}},{key:\"alias\",value:function alias(name){if(!this.aliases.has(name)){this.aliases.set(name,this.get_unique_name(name));}return this.aliases.get(name);}},{key:\"global\",value:function global(name){var alias=this.alias(name);this.globals.set(name,alias);return alias;}},{key:\"generate\",value:function generate(result){var _this72=this;var js=null;var css=null;if(result){var compile_options=this.compile_options,name=this.name;var _compile_options$form=compile_options.format,format=_compile_options$form===void 0?'esm':_compile_options$form;var banner=\"\".concat(this.file?\"\".concat(this.file,\" \"):\"\",\"generated by Svelte v\",'3.24.1');var program={type:'Program',body:result.js};walk(program,{enter:function enter(node,parent,key){if(node.type==='Identifier'){if(node.name[0]==='@'){if(node.name[1]==='_'){var alias=_this72.global(node.name.slice(2));node.name=alias.name;}else{var _name4=node.name.slice(1);if(compile_options.dev){if(internal_exports.has(\"\".concat(_name4,\"_dev\"))){_name4+='_dev';}else if(internal_exports.has(\"\".concat(_name4,\"Dev\"))){_name4+='Dev';}}var _alias=_this72.alias(_name4);_this72.helpers.set(_name4,_alias);node.name=_alias.name;}}else if(node.name[0]!=='#'&&!is_valid(node.name)){// this hack allows x`foo.${bar}` where bar could be invalid\nvar _literal2={type:'Literal',value:node.name};if(parent.type==='Property'&&key==='key'){parent.key=_literal2;}else if(parent.type==='MemberExpression'&&key==='property'){parent.property=_literal2;parent.computed=true;}}}}});var referenced_globals=Array.from(this.globals,function(_ref30){var _ref31=(0,_slicedToArray2.default)(_ref30,2),name=_ref31[0],alias=_ref31[1];return name!==alias.name&&{name:name,alias:alias};}).filter(Boolean);if(referenced_globals.length){this.helpers.set('globals',this.alias('globals'));}var imported_helpers=Array.from(this.helpers,function(_ref32){var _ref33=(0,_slicedToArray2.default)(_ref32,2),name=_ref33[0],alias=_ref33[1];return{name:name,alias:alias};});create_module(program,format,name,banner,compile_options.sveltePath,imported_helpers,referenced_globals,this.imports,this.vars.filter(function(variable){return variable.module&&variable.export_name;}).map(function(variable){return{name:variable.name,as:variable.export_name};}));css=compile_options.customElement?{code:null,map:null}:result.css;js=print(program,{sourceMapSource:compile_options.filename});js.map.sources=[compile_options.filename?get_relative_path(compile_options.outputFilename||'',compile_options.filename):null];js.map.sourcesContent=[this.source];}return{js:js,css:css,ast:this.original_ast,warnings:this.warnings,vars:this.vars.filter(function(v){return!v.global&&!v.internal;}).map(function(v){return{name:v.name,export_name:v.export_name||null,injected:v.injected||false,module:v.module||false,mutated:v.mutated||false,reassigned:v.reassigned||false,referenced:v.referenced||false,writable:v.writable||false,referenced_from_script:v.referenced_from_script||false};}),stats:this.stats.render()};}},{key:\"get_unique_name\",value:function get_unique_name(name,scope){if(test)name=\"\".concat(name,\"$\");var alias=name;for(var _i36=1;reserved.has(alias)||this.var_lookup.has(alias)||this.used_names.has(alias)||this.globally_used_names.has(alias)||scope&&scope.has(alias);alias=\"\".concat(name,\"_\").concat(_i36++)){;}this.used_names.add(alias);return{type:'Identifier',name:alias};}},{key:\"get_unique_name_maker\",value:function get_unique_name_maker(){var _this73=this;var local_used_names=new Set();function add(name){local_used_names.add(name);}reserved.forEach(add);internal_exports.forEach(add);this.var_lookup.forEach(function(_value,key){return add(key);});return function(name){if(test)name=\"\".concat(name,\"$\");var alias=name;for(var _i37=1;_this73.used_names.has(alias)||local_used_names.has(alias);alias=\"\".concat(name,\"_\").concat(_i37++)){;}local_used_names.add(alias);_this73.globally_used_names.add(alias);return{type:'Identifier',name:alias};};}},{key:\"error\",value:function error(pos,e){error$1(e.message,{name:'ValidationError',code:e.code,source:this.source,start:pos.start,end:pos.end,filename:this.compile_options.filename});}},{key:\"warn\",value:function warn(pos,warning){if(this.ignores&&this.ignores.has(warning.code)){return;}var start=this.locate(pos.start);var end=this.locate(pos.end);var frame=get_code_frame(this.source,start.line-1,start.column);this.warnings.push({code:warning.code,message:warning.message,frame:frame,start:start,end:end,pos:pos.start,filename:this.compile_options.filename,toString:function toString(){return\"\".concat(warning.message,\" (\").concat(start.line,\":\").concat(start.column,\")\\n\").concat(frame);}});}},{key:\"extract_imports\",value:function extract_imports(node){this.imports.push(node);}},{key:\"extract_exports\",value:function extract_exports(node){var _this74=this;if(node.type==='ExportDefaultDeclaration'){this.error(node,{code:\"default-export\",message:\"A component cannot have a default export\"});}if(node.type==='ExportNamedDeclaration'){if(node.source){this.error(node,{code:\"not-implemented\",message:\"A component currently cannot have an export ... from\"});}if(node.declaration){if(node.declaration.type==='VariableDeclaration'){node.declaration.declarations.forEach(function(declarator){extract_names(declarator.id).forEach(function(name){var variable=_this74.var_lookup.get(name);variable.export_name=name;if(variable.writable&&!(variable.referenced||variable.referenced_from_script||variable.subscribable)){_this74.warn(declarator,{code:\"unused-export-let\",message:\"\".concat(_this74.name.name,\" has unused export property '\").concat(name,\"'. If it is for external reference only, please consider using `export const \").concat(name,\"`\")});}});});}else{var name=node.declaration.id.name;var variable=this.var_lookup.get(name);variable.export_name=name;}return node.declaration;}else{node.specifiers.forEach(function(specifier){var variable=_this74.var_lookup.get(specifier.local.name);if(variable){variable.export_name=specifier.exported.name;if(variable.writable&&!(variable.referenced||variable.referenced_from_script||variable.subscribable)){_this74.warn(specifier,{code:\"unused-export-let\",message:\"\".concat(_this74.name.name,\" has unused export property '\").concat(specifier.exported.name,\"'. If it is for external reference only, please consider using `export const \").concat(specifier.exported.name,\"`\")});}}});return null;}}}},{key:\"extract_javascript\",value:function extract_javascript(script){var _this75=this;if(!script)return null;return script.content.body.filter(function(node){if(!node)return false;if(_this75.hoistable_nodes.has(node))return false;if(_this75.reactive_declaration_nodes.has(node))return false;if(node.type==='ImportDeclaration')return false;if(node.type==='ExportDeclaration'&&node.specifiers.length>0)return false;return true;});}},{key:\"walk_module_js\",value:function walk_module_js(){var _this76=this;var component=this;var script=this.ast.module;if(!script)return;walk(script.content,{enter:function enter(node){if(node.type==='LabeledStatement'&&node.label.name==='$'){component.warn(node,{code:'module-script-reactive-declaration',message:'$: has no effect in a module script'});}}});var _create_scopes2=create_scopes(script.content),scope=_create_scopes2.scope,globals=_create_scopes2.globals;this.module_scope=scope;scope.declarations.forEach(function(node,name){if(name[0]==='$'){_this76.error(node,{code:'illegal-declaration',message:\"The $ prefix is reserved, and cannot be used for variable and import names\"});}var writable=node.type==='VariableDeclaration'&&(node.kind==='var'||node.kind==='let');_this76.add_var({name:name,module:true,hoistable:true,writable:writable});});globals.forEach(function(node,name){if(name[0]==='$'){_this76.error(node,{code:'illegal-subscription',message:\"Cannot reference store value inside <script context=\\\"module\\\">\"});}else{_this76.add_var({name:name,global:true,hoistable:true});}});var body=script.content.body;var i=body.length;while(--i>=0){var _node9=body[i];if(_node9.type==='ImportDeclaration'){this.extract_imports(_node9);body.splice(i,1);}if(/^Export/.test(_node9.type)){var _replacement4=this.extract_exports(_node9);if(_replacement4){body[i]=_replacement4;}else{body.splice(i,1);}}}}},{key:\"walk_instance_js_pre_template\",value:function walk_instance_js_pre_template(){var _this77=this;var script=this.ast.instance;if(!script)return;// inject vars for reactive declarations\nscript.content.body.forEach(function(node){if(node.type!=='LabeledStatement')return;if(node.body.type!=='ExpressionStatement')return;var expression=node.body.expression;if(expression.type!=='AssignmentExpression')return;if(expression.left.type==='MemberExpression')return;extract_names(expression.left).forEach(function(name){if(!_this77.var_lookup.has(name)&&name[0]!=='$'){_this77.injected_reactive_declaration_vars.add(name);}});});var _create_scopes3=create_scopes(script.content),instance_scope=_create_scopes3.scope,map=_create_scopes3.map,globals=_create_scopes3.globals;this.instance_scope=instance_scope;this.instance_scope_map=map;instance_scope.declarations.forEach(function(node,name){if(name[0]==='$'){_this77.error(node,{code:'illegal-declaration',message:\"The $ prefix is reserved, and cannot be used for variable and import names\"});}var writable=node.type==='VariableDeclaration'&&(node.kind==='var'||node.kind==='let');_this77.add_var({name:name,initialised:instance_scope.initialised_declarations.has(name),writable:writable});_this77.node_for_declaration.set(name,node);});globals.forEach(function(node,name){if(_this77.var_lookup.has(name))return;if(_this77.injected_reactive_declaration_vars.has(name)){_this77.add_var({name:name,injected:true,writable:true,reassigned:true,initialised:true});}else if(is_reserved_keyword(name)){_this77.add_var({name:name,injected:true});}else if(name[0]==='$'){if(name==='$'||name[1]==='$'){_this77.error(node,{code:'illegal-global',message:\"\".concat(name,\" is an illegal variable name\")});}_this77.add_var({name:name,injected:true,mutated:true,writable:true});_this77.add_reference(name.slice(1));var variable=_this77.var_lookup.get(name.slice(1));if(variable){variable.subscribable=true;variable.referenced_from_script=true;}}else{_this77.add_var({name:name,global:true,hoistable:true});}});this.track_references_and_mutations();}},{key:\"walk_instance_js_post_template\",value:function walk_instance_js_post_template(){var script=this.ast.instance;if(!script)return;this.post_template_walk();this.hoist_instance_declarations();this.extract_reactive_declarations();}},{key:\"post_template_walk\",value:function post_template_walk(){var script=this.ast.instance;if(!script)return;var component=this;var content=script.content;var instance_scope=this.instance_scope,map=this.instance_scope_map;var scope=instance_scope;var to_remove=[];var remove=function remove(parent,prop,index){to_remove.unshift([parent,prop,index]);};var scope_updated=false;var generator_count=0;walk(content,{enter:function enter(node,parent,prop,index){if((node.type==='FunctionDeclaration'||node.type==='FunctionExpression')&&node.generator===true){generator_count++;}if(map.has(node)){scope=map.get(node);}if(node.type==='ImportDeclaration'){component.extract_imports(node);// TODO: to use actual remove\nremove(parent,prop,index);return this.skip();}if(/^Export/.test(node.type)){var _replacement5=component.extract_exports(node);if(_replacement5){this.replace(_replacement5);}else{// TODO: to use actual remove\nremove(parent,prop,index);}return this.skip();}component.warn_on_undefined_store_value_references(node,parent,scope);},leave:function leave(node){if((node.type==='FunctionDeclaration'||node.type==='FunctionExpression')&&node.generator===true){generator_count--;}// do it on leave, to prevent infinite loop\nif(component.compile_options.dev&&component.compile_options.loopGuardTimeout>0&&generator_count<=0){var to_replace_for_loop_protect=component.loop_protect(node,scope,component.compile_options.loopGuardTimeout);if(to_replace_for_loop_protect){this.replace(to_replace_for_loop_protect);scope_updated=true;}}if(map.has(node)){scope=scope.parent;}}});for(var _i38=0,_to_remove=to_remove;_i38<_to_remove.length;_i38++){var _to_remove$_i=(0,_slicedToArray2.default)(_to_remove[_i38],3),parent=_to_remove$_i[0],prop=_to_remove$_i[1],index=_to_remove$_i[2];if(parent){if(index!==null){parent[prop].splice(index,1);}else{delete parent[prop];}}}if(scope_updated){var _create_scopes4=create_scopes(script.content),_scope4=_create_scopes4.scope,_map=_create_scopes4.map;this.instance_scope=_scope4;this.instance_scope_map=_map;}}},{key:\"track_references_and_mutations\",value:function track_references_and_mutations(){var script=this.ast.instance;if(!script)return;var component=this;var content=script.content;var instance_scope=this.instance_scope,module_scope=this.module_scope,map=this.instance_scope_map;var scope=instance_scope;walk(content,{enter:function enter(node,parent){if(map.has(node)){scope=map.get(node);}if(node.type==='AssignmentExpression'||node.type==='UpdateExpression'){var assignee=node.type==='AssignmentExpression'?node.left:node.argument;var names=extract_names(assignee);var deep=assignee.type==='MemberExpression';names.forEach(function(name){var scope_owner=scope.find_owner(name);if(scope_owner!==null?scope_owner===instance_scope:module_scope&&module_scope.has(name)){var variable=component.var_lookup.get(name);variable[deep?'mutated':'reassigned']=true;}});}if(is_used_as_reference(node,parent)){var object=get_object(node);if(scope.find_owner(object.name)===instance_scope){var variable=component.var_lookup.get(object.name);variable.referenced_from_script=true;}}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});}},{key:\"warn_on_undefined_store_value_references\",value:function warn_on_undefined_store_value_references(node,parent,scope){if(node.type==='LabeledStatement'&&node.label.name==='$'&&parent.type!=='Program'){this.warn(node,{code:'non-top-level-reactive-declaration',message:'$: has no effect outside of the top-level'});}if(isReference(node,parent)){var object=get_object(node);var name=object.name;if(name[0]==='$'){if(!scope.has(name)){this.warn_if_undefined(name,object,null);}if(name[1]!=='$'&&scope.has(name.slice(1))&&scope.find_owner(name.slice(1))!==this.instance_scope){this.error(node,{code:\"contextual-store\",message:\"Stores must be declared at the top level of the component (this may change in a future version of Svelte)\"});}}}}},{key:\"loop_protect\",value:function loop_protect(node,scope,timeout){if(node.type==='WhileStatement'||node.type==='ForStatement'||node.type==='DoWhileStatement'){var guard=this.get_unique_name('guard',scope);this.used_names.add(guard.name);var before=b(_templateObject708(),guard,timeout);var inside=b(_templateObject709(),guard);// wrap expression statement with BlockStatement\nif(node.body.type!=='BlockStatement'){node.body={type:'BlockStatement',body:[node.body]};}node.body.body.push(inside[0]);return{type:'BlockStatement',body:[before[0],node]};}return null;}},{key:\"rewrite_props\",value:function rewrite_props(get_insert){if(!this.ast.instance)return;var component=this;var instance_scope=this.instance_scope,map=this.instance_scope_map;var scope=instance_scope;walk(this.ast.instance.content,{enter:function enter(node,parent,key,index){if(/Function/.test(node.type)){return this.skip();}if(map.has(node)){scope=map.get(node);}if(node.type==='VariableDeclaration'){if(node.kind==='var'||scope===instance_scope){node.declarations.forEach(function(declarator){if(declarator.id.type!=='Identifier'){var inserts=[];extract_names(declarator.id).forEach(function(name){var variable=component.var_lookup.get(name);if(variable.export_name){// TODO is this still true post-#3539?\ncomponent.error(declarator,{code:'destructured-prop',message:\"Cannot declare props in destructured declaration\"});}if(variable.subscribable){inserts.push(get_insert(variable));}});if(inserts.length){var _parent$key;(_parent$key=parent[key]).splice.apply(_parent$key,[index+1,0].concat(inserts));}return;}var name=declarator.id.name;var variable=component.var_lookup.get(name);if(variable.export_name&&variable.writable){var insert=variable.subscribable?get_insert(variable):null;parent[key].splice(index+1,0,insert);declarator.id={type:'ObjectPattern',properties:[{type:'Property',method:false,shorthand:false,computed:false,kind:'init',key:{type:'Identifier',name:variable.export_name},value:declarator.init?{type:'AssignmentPattern',left:declarator.id,right:declarator.init}:declarator.id}]};declarator.init=x(_templateObject710());}else if(variable.subscribable){var _parent$key2;var _insert=get_insert(variable);(_parent$key2=parent[key]).splice.apply(_parent$key2,[index+1,0].concat((0,_toConsumableArray2.default)(_insert)));}});}}},leave:function leave(node,parent,_key,index){if(map.has(node)){scope=scope.parent;}if(node.type==='ExportNamedDeclaration'&&node.declaration){parent.body[index]=node.declaration;}}});}},{key:\"hoist_instance_declarations\",value:function hoist_instance_declarations(){var _this78=this;// we can safely hoist variable declarations that are\n// initialised to literals, and functions that don't\n// reference instance variables other than other\n// hoistable functions. TODO others?\nvar hoistable_nodes=this.hoistable_nodes,var_lookup=this.var_lookup,injected_reactive_declaration_vars=this.injected_reactive_declaration_vars,imports=this.imports;var top_level_function_declarations=new Map();var body=this.ast.instance.content.body;var _loop2=function _loop2(_i40){var node=body[_i40];if(node.type==='VariableDeclaration'){var all_hoistable=node.declarations.every(function(d){if(!d.init){_i39=_i40;return false;}if(d.init.type!=='Literal'){_i39=_i40;return false;}// everything except const values can be changed by e.g. svelte devtools\n// which means we can't hoist it\nif(node.kind!=='const'&&_this78.compile_options.dev){_i39=_i40;return false;}var name=d.id.name;var v=_this78.var_lookup.get(name);if(v.reassigned){_i39=_i40;return false;}if(v.export_name){_i39=_i40;return false;}if(_this78.var_lookup.get(name).reassigned){_i39=_i40;return false;}if(_this78.vars.find(function(variable){return variable.name===name&&variable.module;})){_i39=_i40;return false;}_i39=_i40;return true;});if(all_hoistable){node.declarations.forEach(function(d){var variable=_this78.var_lookup.get(d.id.name);variable.hoistable=true;});hoistable_nodes.add(node);body.splice(_i40--,1);_this78.fully_hoisted.push(node);}}if(node.type==='ExportNamedDeclaration'&&node.declaration&&node.declaration.type==='FunctionDeclaration'){top_level_function_declarations.set(node.declaration.id.name,node);}if(node.type==='FunctionDeclaration'){top_level_function_declarations.set(node.id.name,node);}_i39=_i40;};for(var _i39=0;_i39<body.length;_i39+=1){_loop2(_i39);}var checked=new Set();var walking=new Set();var is_hoistable=function is_hoistable(fn_declaration){if(fn_declaration.type==='ExportNamedDeclaration'){fn_declaration=fn_declaration.declaration;}var instance_scope=_this78.instance_scope;var scope=_this78.instance_scope;var map=_this78.instance_scope_map;var hoistable=true;// handle cycles\nwalking.add(fn_declaration);walk(fn_declaration,{enter:function enter(node,parent){if(!hoistable)return this.skip();if(map.has(node)){scope=map.get(node);}if(isReference(node,parent)){var _flatten_reference6=flatten_reference(node),name=_flatten_reference6.name;var owner=scope.find_owner(name);if(injected_reactive_declaration_vars.has(name)){hoistable=false;}else if(name[0]==='$'&&!owner){hoistable=false;}else if(owner===instance_scope){var variable=var_lookup.get(name);if(variable.reassigned||variable.mutated)hoistable=false;if(name===fn_declaration.id.name)return;if(variable.hoistable)return;if(top_level_function_declarations.has(name)){var other_declaration=top_level_function_declarations.get(name);if(walking.has(other_declaration)){hoistable=false;}else if(other_declaration.type==='ExportNamedDeclaration'&&walking.has(other_declaration.declaration)){hoistable=false;}else if(!is_hoistable(other_declaration)){hoistable=false;}}else{hoistable=false;}}this.skip();}},leave:function leave(node){if(map.has(node)){scope=scope.parent;}}});checked.add(fn_declaration);walking.delete(fn_declaration);return hoistable;};var _iterator13=_createForOfIteratorHelper(top_level_function_declarations),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var _step13$value=(0,_slicedToArray2.default)(_step13.value,2),name=_step13$value[0],_node10=_step13$value[1];if(is_hoistable(_node10)){var variable=this.var_lookup.get(name);variable.hoistable=true;hoistable_nodes.add(_node10);var _i41=body.indexOf(_node10);body.splice(_i41,1);this.fully_hoisted.push(_node10);}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}var _iterator14=_createForOfIteratorHelper(imports),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var specifiers=_step14.value.specifiers;var _iterator15=_createForOfIteratorHelper(specifiers),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var specifier=_step15.value;var _variable2=var_lookup.get(specifier.local.name);if(!_variable2.mutated||_variable2.subscribable){_variable2.hoistable=true;}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}}},{key:\"extract_reactive_declarations\",value:function extract_reactive_declarations(){var _this79=this;var component=this;var unsorted_reactive_declarations=[];this.ast.instance.content.body.forEach(function(node){if(node.type==='LabeledStatement'&&node.label.name==='$'){_this79.reactive_declaration_nodes.add(node);var assignees=new Set();var assignee_nodes=new Set();var dependencies=new Set();var _scope5=_this79.instance_scope;var map=_this79.instance_scope_map;walk(node.body,{enter:function enter(node,parent){if(map.has(node)){_scope5=map.get(node);}if(node.type==='AssignmentExpression'){var left=get_object(node.left);extract_identifiers(left).forEach(function(node){assignee_nodes.add(node);assignees.add(node.name);});if(node.operator!=='='){dependencies.add(left.name);}}else if(node.type==='UpdateExpression'){var identifier=get_object(node.argument);assignees.add(identifier.name);}else if(isReference(node,parent)){var _identifier=get_object(node);if(!assignee_nodes.has(_identifier)){var name=_identifier.name;var owner=_scope5.find_owner(name);var variable=component.var_lookup.get(name);if(variable)variable.is_reactive_dependency=true;var is_writable_or_mutated=variable&&(variable.writable||variable.mutated);if((!owner||owner===component.instance_scope)&&(name[0]==='$'||is_writable_or_mutated)){dependencies.add(name);}}this.skip();}},leave:function leave(node){if(map.has(node)){_scope5=_scope5.parent;}}});var _expression12=node.body.expression;var declaration=_expression12&&_expression12.left;unsorted_reactive_declarations.push({assignees:assignees,dependencies:dependencies,node:node,declaration:declaration});}});var lookup=new Map();unsorted_reactive_declarations.forEach(function(declaration){declaration.assignees.forEach(function(name){if(!lookup.has(name)){lookup.set(name,[]);}// TODO warn or error if a name is assigned to in\n// multiple reactive declarations?\nlookup.get(name).push(declaration);});});var cycle=check_graph_for_cycles(unsorted_reactive_declarations.reduce(function(acc,declaration){declaration.assignees.forEach(function(v){declaration.dependencies.forEach(function(w){if(!declaration.assignees.has(w)){acc.push([v,w]);}});});return acc;},[]));if(cycle&&cycle.length){var declarationList=lookup.get(cycle[0]);var declaration=declarationList[0];this.error(declaration.node,{code:'cyclical-reactive-declaration',message:\"Cyclical dependency detected: \".concat(cycle.join(' → '))});}var add_declaration=function add_declaration(declaration){if(_this79.reactive_declarations.includes(declaration))return;declaration.dependencies.forEach(function(name){if(declaration.assignees.has(name))return;var earlier_declarations=lookup.get(name);if(earlier_declarations)earlier_declarations.forEach(add_declaration);});_this79.reactive_declarations.push(declaration);};unsorted_reactive_declarations.forEach(add_declaration);}},{key:\"warn_if_undefined\",value:function warn_if_undefined(name,node,template_scope){if(name[0]==='$'){if(name==='$'||name[1]==='$'&&!is_reserved_keyword(name)){this.error(node,{code:'illegal-global',message:\"\".concat(name,\" is an illegal variable name\")});}this.has_reactive_assignments=true;// TODO does this belong here?\nif(is_reserved_keyword(name))return;name=name.slice(1);}if(this.var_lookup.has(name)&&!this.var_lookup.get(name).global)return;if(template_scope&&template_scope.names.has(name))return;if(globals.has(name)&&node.type!=='InlineComponent')return;var message=\"'\".concat(name,\"' is not defined\");if(!this.ast.instance)message+=\". Consider adding a <script> block with 'export let \".concat(name,\"' to declare a prop\");this.warn(node,{code:'missing-declaration',message:message});}},{key:\"push_ignores\",value:function push_ignores(ignores){this.ignores=new Set(this.ignores||[]);add_to_set(this.ignores,ignores);this.ignore_stack.push(this.ignores);}},{key:\"pop_ignores\",value:function pop_ignores(){this.ignore_stack.pop();this.ignores=this.ignore_stack[this.ignore_stack.length-1];}}]);return Component;}();function process_component_options(component,nodes){var component_options={immutable:component.compile_options.immutable||false,accessors:'accessors'in component.compile_options?component.compile_options.accessors:!!component.compile_options.customElement,preserveWhitespace:!!component.compile_options.preserveWhitespace};var node=nodes.find(function(node){return node.name==='svelte:options';});function get_value(attribute,code,message){var value=attribute.value;var chunk=value[0];if(!chunk)return true;if(value.length>1){component.error(attribute,{code:code,message:message});}if(chunk.type==='Text')return chunk.data;if(chunk.expression.type!=='Literal'){component.error(attribute,{code:code,message:message});}return chunk.expression.value;}if(node){node.attributes.forEach(function(attribute){if(attribute.type==='Attribute'){var name=attribute.name;switch(name){case'tag':{var code='invalid-tag-attribute';var message=\"'tag' must be a string literal\";var _tag=get_value(attribute,code,message);if(typeof _tag!=='string'&&_tag!==null)component.error(attribute,{code:code,message:message});if(_tag&&!/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(_tag)){component.error(attribute,{code:\"invalid-tag-property\",message:\"tag name must be two or more words joined by the '-' character\"});}if(_tag&&!component.compile_options.customElement){component.warn(attribute,{code:'missing-custom-element-compile-options',message:\"The 'tag' option is used when generating a custom element. Did you forget the 'customElement: true' compile option?\"});}component_options.tag=_tag;break;}case'namespace':{var _code3='invalid-namespace-attribute';var _message2=\"The 'namespace' attribute must be a string literal representing a valid namespace\";var ns=get_value(attribute,_code3,_message2);if(typeof ns!=='string')component.error(attribute,{code:_code3,message:_message2});if(valid_namespaces.indexOf(ns)===-1){var match=fuzzymatch(ns,valid_namespaces);if(match){component.error(attribute,{code:\"invalid-namespace-property\",message:\"Invalid namespace '\".concat(ns,\"' (did you mean '\").concat(match,\"'?)\")});}else{component.error(attribute,{code:\"invalid-namespace-property\",message:\"Invalid namespace '\".concat(ns,\"'\")});}}component_options.namespace=ns;break;}case'accessors':case'immutable':case'preserveWhitespace':{var _code4=\"invalid-\".concat(name,\"-value\");var _message3=\"\".concat(name,\" attribute must be true or false\");var _value14=get_value(attribute,_code4,_message3);if(typeof _value14!=='boolean')component.error(attribute,{code:_code4,message:_message3});component_options[name]=_value14;break;}default:component.error(attribute,{code:\"invalid-options-attribute\",message:\"<svelte:options> unknown attribute\"});}}else{component.error(attribute,{code:\"invalid-options-attribute\",message:\"<svelte:options> can only have static 'tag', 'namespace', 'accessors', 'immutable' and 'preserveWhitespace' attributes\"});}});}return component_options;}function get_relative_path(from,to){var from_parts=from.split(/[/\\\\]/);var to_parts=to.split(/[/\\\\]/);from_parts.pop();// get dirname\nwhile(from_parts[0]===to_parts[0]){from_parts.shift();to_parts.shift();}if(from_parts.length){var _i42=from_parts.length;while(_i42--){from_parts[_i42]='..';}}return from_parts.concat(to_parts).join('/');}function get_name_from_filename(filename){if(!filename)return null;var parts=filename.split(/[/\\\\]/).map(encodeURI);if(parts.length>1){var index_match=parts[parts.length-1].match(/^index(\\.\\w+)/);if(index_match){parts.pop();parts[parts.length-1]+=index_match[1];}}var base=parts.pop().replace(/%/g,'u').replace(/\\.[^.]+$/,\"\").replace(/[^a-zA-Z_$0-9]+/g,'_').replace(/^_/,'').replace(/_$/,'').replace(/^(\\d)/,'_$1');if(!base){throw new Error(\"Could not derive component name from file \".concat(filename));}return base[0].toUpperCase()+base.slice(1);}var valid_options=['format','name','filename','generate','outputFilename','cssOutputFilename','sveltePath','dev','accessors','immutable','hydratable','legacy','customElement','tag','css','loopGuardTimeout','preserveComments','preserveWhitespace'];function validate_options(options,warnings){var name=options.name,filename=options.filename,loopGuardTimeout=options.loopGuardTimeout,dev=options.dev;Object.keys(options).forEach(function(key){if(!valid_options.includes(key)){var match=fuzzymatch(key,valid_options);var message=\"Unrecognized option '\".concat(key,\"'\");if(match)message+=\" (did you mean '\".concat(match,\"'?)\");throw new Error(message);}});if(name&&!/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)){throw new Error(\"options.name must be a valid identifier (got '\".concat(name,\"')\"));}if(name&&/^[a-z]/.test(name)){var message=\"options.name should be capitalised\";warnings.push({code:\"options-lowercase-name\",message:message,filename:filename,toString:function toString(){return message;}});}if(loopGuardTimeout&&!dev){var _message4='options.loopGuardTimeout is for options.dev = true only';warnings.push({code:\"options-loop-guard-timeout\",message:_message4,filename:filename,toString:function toString(){return _message4;}});}}function compile(source){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};options=assign({generate:'dom',dev:false},options);var stats=new Stats();var warnings=[];validate_options(options,warnings);stats.start('parse');var ast=parse$3(source,options);stats.stop('parse');stats.start('create component');var component=new Component(ast,source,options.name||get_name_from_filename(options.filename)||'Component',options,stats,warnings);stats.stop('create component');var result=options.generate===false?null:options.generate==='ssr'?ssr(component,options):dom(component,options);return component.generate(result);}function parse_attributes(str){var attrs={};str.split(/\\s+/).filter(Boolean).forEach(function(attr){var p=attr.indexOf('=');if(p===-1){attrs[attr]=true;}else{attrs[attr.slice(0,p)]=\"'\\\"\".includes(attr[p+1])?attr.slice(p+2,-1):attr.slice(p+1);}});return attrs;}function replace_async(_x,_x2,_x3){return _replace_async.apply(this,arguments);}function _replace_async(){_replace_async=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee(str,re,func){var replacements,out,last_end,_iterator16,_step16,_step16$value,offset,length,_replacement6;return _regenerator.default.wrap(function _callee$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:replacements=[];str.replace(re,function(){for(var _len4=arguments.length,args=new Array(_len4),_key5=0;_key5<_len4;_key5++){args[_key5]=arguments[_key5];}replacements.push(func.apply(void 0,args).then(function(res){return{offset:args[args.length-2],length:args[0].length,replacement:res};}));return'';});out='';last_end=0;_context3.t0=_createForOfIteratorHelper;_context3.next=7;return Promise.all(replacements);case 7:_context3.t1=_context3.sent;_iterator16=(0,_context3.t0)(_context3.t1);try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){_step16$value=_step16.value,offset=_step16$value.offset,length=_step16$value.length,_replacement6=_step16$value.replacement;out+=str.slice(last_end,offset)+_replacement6;last_end=offset+length;}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}out+=str.slice(last_end);return _context3.abrupt(\"return\",out);case 12:case\"end\":return _context3.stop();}}},_callee);}));return _replace_async.apply(this,arguments);}function preprocess(_x4,_x5,_x6){return _preprocess.apply(this,arguments);}function _preprocess(){_preprocess=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee4(source,preprocessor,options){var filename,dependencies,preprocessors,markup,script,style,_iterator17,_step17,fn,processed,_iterator18,_step18,_loop3,_iterator19,_step19,_loop4;return _regenerator.default.wrap(function _callee4$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:// @ts-ignore todo: doublecheck\nfilename=options&&options.filename||preprocessor.filename;// legacy\ndependencies=[];preprocessors=Array.isArray(preprocessor)?preprocessor:[preprocessor];markup=preprocessors.map(function(p){return p.markup;}).filter(Boolean);script=preprocessors.map(function(p){return p.script;}).filter(Boolean);style=preprocessors.map(function(p){return p.style;}).filter(Boolean);_iterator17=_createForOfIteratorHelper(markup);_context8.prev=7;_iterator17.s();case 9:if((_step17=_iterator17.n()).done){_context8.next=18;break;}fn=_step17.value;_context8.next=13;return fn({content:source,filename:filename});case 13:processed=_context8.sent;if(processed&&processed.dependencies)dependencies.push.apply(dependencies,(0,_toConsumableArray2.default)(processed.dependencies));source=processed?processed.code:source;case 16:_context8.next=9;break;case 18:_context8.next=23;break;case 20:_context8.prev=20;_context8.t0=_context8[\"catch\"](7);_iterator17.e(_context8.t0);case 23:_context8.prev=23;_iterator17.f();return _context8.finish(23);case 26:_iterator18=_createForOfIteratorHelper(script);_context8.prev=27;_loop3=/*#__PURE__*/_regenerator.default.mark(function _loop3(){var fn;return _regenerator.default.wrap(function _loop3$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:fn=_step18.value;_context5.next=3;return replace_async(source,/<!--[^]*?-->|<script(\\s[^]*?)?(?:>([^]*?)<\\/script>|\\/>)/gi,/*#__PURE__*/function(){var _ref34=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee2(match){var attributes,content,processed,_args3=arguments;return _regenerator.default.wrap(function _callee2$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:attributes=_args3.length>1&&_args3[1]!==undefined?_args3[1]:'';content=_args3.length>2&&_args3[2]!==undefined?_args3[2]:'';if(!(!attributes&&!content)){_context4.next=4;break;}return _context4.abrupt(\"return\",match);case 4:attributes=attributes||'';_context4.next=7;return fn({content:content,attributes:parse_attributes(attributes),filename:filename});case 7:processed=_context4.sent;if(processed&&processed.dependencies)dependencies.push.apply(dependencies,(0,_toConsumableArray2.default)(processed.dependencies));return _context4.abrupt(\"return\",processed?\"<script\".concat(attributes,\">\").concat(processed.code,\"</script>\"):match);case 10:case\"end\":return _context4.stop();}}},_callee2);}));return function(_x7){return _ref34.apply(this,arguments);};}());case 3:source=_context5.sent;case 4:case\"end\":return _context5.stop();}}},_loop3);});_iterator18.s();case 30:if((_step18=_iterator18.n()).done){_context8.next=34;break;}return _context8.delegateYield(_loop3(),\"t1\",32);case 32:_context8.next=30;break;case 34:_context8.next=39;break;case 36:_context8.prev=36;_context8.t2=_context8[\"catch\"](27);_iterator18.e(_context8.t2);case 39:_context8.prev=39;_iterator18.f();return _context8.finish(39);case 42:_iterator19=_createForOfIteratorHelper(style);_context8.prev=43;_loop4=/*#__PURE__*/_regenerator.default.mark(function _loop4(){var fn;return _regenerator.default.wrap(function _loop4$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:fn=_step19.value;_context7.next=3;return replace_async(source,/<!--[^]*?-->|<style(\\s[^]*?)?(?:>([^]*?)<\\/style>|\\/>)/gi,/*#__PURE__*/function(){var _ref35=(0,_asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee3(match){var attributes,content,processed,_args5=arguments;return _regenerator.default.wrap(function _callee3$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:attributes=_args5.length>1&&_args5[1]!==undefined?_args5[1]:'';content=_args5.length>2&&_args5[2]!==undefined?_args5[2]:'';if(!(!attributes&&!content)){_context6.next=4;break;}return _context6.abrupt(\"return\",match);case 4:_context6.next=6;return fn({content:content,attributes:parse_attributes(attributes),filename:filename});case 6:processed=_context6.sent;if(processed&&processed.dependencies)dependencies.push.apply(dependencies,(0,_toConsumableArray2.default)(processed.dependencies));return _context6.abrupt(\"return\",processed?\"<style\".concat(attributes,\">\").concat(processed.code,\"</style>\"):match);case 9:case\"end\":return _context6.stop();}}},_callee3);}));return function(_x8){return _ref35.apply(this,arguments);};}());case 3:source=_context7.sent;case 4:case\"end\":return _context7.stop();}}},_loop4);});_iterator19.s();case 46:if((_step19=_iterator19.n()).done){_context8.next=50;break;}return _context8.delegateYield(_loop4(),\"t3\",48);case 48:_context8.next=46;break;case 50:_context8.next=55;break;case 52:_context8.prev=52;_context8.t4=_context8[\"catch\"](43);_iterator19.e(_context8.t4);case 55:_context8.prev=55;_iterator19.f();return _context8.finish(55);case 58:return _context8.abrupt(\"return\",{// TODO return separated output, in future version where svelte.compile supports it:\n// style: { code: styleCode, map: styleMap },\n// script { code: scriptCode, map: scriptMap },\n// markup { code: markupCode, map: markupMap },\ncode:source,dependencies:(0,_toConsumableArray2.default)(new Set(dependencies)),toString:function toString(){return source;}});case 59:case\"end\":return _context8.stop();}}},_callee4,null,[[7,20,23,26],[27,36,39,42],[43,52,55,58]]);}));return _preprocess.apply(this,arguments);}var VERSION='3.24.1';exports.VERSION=VERSION;exports.compile=compile;exports.parse=parse$3;exports.preprocess=preprocess;exports.walk=walk;Object.defineProperty(exports,'__esModule',{value:true});});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3ZlbHRlL2NvbXBpbGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9jb21waWxlci5qcz9hYjJjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5zdmVsdGUgPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cdGZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuXHQgICAgLy8gQHRzLWlnbm9yZVxuXHQgICAgZm9yIChjb25zdCBrIGluIHNyYylcblx0ICAgICAgICB0YXJba10gPSBzcmNba107XG5cdCAgICByZXR1cm4gdGFyO1xuXHR9XG5cblx0Y29uc3Qgbm93ID0gKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmhydGltZSlcblx0ICAgID8gKCkgPT4ge1xuXHQgICAgICAgIGNvbnN0IHQgPSBwcm9jZXNzLmhydGltZSgpO1xuXHQgICAgICAgIHJldHVybiB0WzBdICogMWUzICsgdFsxXSAvIDFlNjtcblx0ICAgIH1cblx0ICAgIDogKCkgPT4gc2VsZi5wZXJmb3JtYW5jZS5ub3coKTtcblx0ZnVuY3Rpb24gY29sbGFwc2VfdGltaW5ncyh0aW1pbmdzKSB7XG5cdCAgICBjb25zdCByZXN1bHQgPSB7fTtcblx0ICAgIHRpbWluZ3MuZm9yRWFjaCh0aW1pbmcgPT4ge1xuXHQgICAgICAgIHJlc3VsdFt0aW1pbmcubGFiZWxdID0gT2JqZWN0LmFzc2lnbih7XG5cdCAgICAgICAgICAgIHRvdGFsOiB0aW1pbmcuZW5kIC0gdGltaW5nLnN0YXJ0XG5cdCAgICAgICAgfSwgdGltaW5nLmNoaWxkcmVuICYmIGNvbGxhcHNlX3RpbWluZ3ModGltaW5nLmNoaWxkcmVuKSk7XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0Y2xhc3MgU3RhdHMge1xuXHQgICAgY29uc3RydWN0b3IoKSB7XG5cdCAgICAgICAgdGhpcy5zdGFydF90aW1lID0gbm93KCk7XG5cdCAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuXHQgICAgICAgIHRoaXMuY3VycmVudF9jaGlsZHJlbiA9IHRoaXMudGltaW5ncyA9IFtdO1xuXHQgICAgfVxuXHQgICAgc3RhcnQobGFiZWwpIHtcblx0ICAgICAgICBjb25zdCB0aW1pbmcgPSB7XG5cdCAgICAgICAgICAgIGxhYmVsLFxuXHQgICAgICAgICAgICBzdGFydDogbm93KCksXG5cdCAgICAgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IFtdXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRfY2hpbGRyZW4ucHVzaCh0aW1pbmcpO1xuXHQgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aW1pbmcpO1xuXHQgICAgICAgIHRoaXMuY3VycmVudF90aW1pbmcgPSB0aW1pbmc7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50X2NoaWxkcmVuID0gdGltaW5nLmNoaWxkcmVuO1xuXHQgICAgfVxuXHQgICAgc3RvcChsYWJlbCkge1xuXHQgICAgICAgIGlmIChsYWJlbCAhPT0gdGhpcy5jdXJyZW50X3RpbWluZy5sYWJlbCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc21hdGNoZWQgdGltaW5nIGxhYmVscyAoZXhwZWN0ZWQgJHt0aGlzLmN1cnJlbnRfdGltaW5nLmxhYmVsfSwgZ290ICR7bGFiZWx9KWApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmN1cnJlbnRfdGltaW5nLmVuZCA9IG5vdygpO1xuXHQgICAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50X3RpbWluZyA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRfY2hpbGRyZW4gPSB0aGlzLmN1cnJlbnRfdGltaW5nID8gdGhpcy5jdXJyZW50X3RpbWluZy5jaGlsZHJlbiA6IHRoaXMudGltaW5ncztcblx0ICAgIH1cblx0ICAgIHJlbmRlcigpIHtcblx0ICAgICAgICBjb25zdCB0aW1pbmdzID0gT2JqZWN0LmFzc2lnbih7XG5cdCAgICAgICAgICAgIHRvdGFsOiBub3coKSAtIHRoaXMuc3RhcnRfdGltZVxuXHQgICAgICAgIH0sIGNvbGxhcHNlX3RpbWluZ3ModGhpcy50aW1pbmdzKSk7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdGltaW5nc1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdH1cblxuXHQvLyBSZXNlcnZlZCB3b3JkIGxpc3RzIGZvciB2YXJpb3VzIGRpYWxlY3RzIG9mIHRoZSBsYW5ndWFnZVxuXG5cdHZhciByZXNlcnZlZFdvcmRzID0ge1xuXHQgIDM6IFwiYWJzdHJhY3QgYm9vbGVhbiBieXRlIGNoYXIgY2xhc3MgZG91YmxlIGVudW0gZXhwb3J0IGV4dGVuZHMgZmluYWwgZmxvYXQgZ290byBpbXBsZW1lbnRzIGltcG9ydCBpbnQgaW50ZXJmYWNlIGxvbmcgbmF0aXZlIHBhY2thZ2UgcHJpdmF0ZSBwcm90ZWN0ZWQgcHVibGljIHNob3J0IHN0YXRpYyBzdXBlciBzeW5jaHJvbml6ZWQgdGhyb3dzIHRyYW5zaWVudCB2b2xhdGlsZVwiLFxuXHQgIDU6IFwiY2xhc3MgZW51bSBleHRlbmRzIHN1cGVyIGNvbnN0IGV4cG9ydCBpbXBvcnRcIixcblx0ICA2OiBcImVudW1cIixcblx0ICBzdHJpY3Q6IFwiaW1wbGVtZW50cyBpbnRlcmZhY2UgbGV0IHBhY2thZ2UgcHJpdmF0ZSBwcm90ZWN0ZWQgcHVibGljIHN0YXRpYyB5aWVsZFwiLFxuXHQgIHN0cmljdEJpbmQ6IFwiZXZhbCBhcmd1bWVudHNcIlxuXHR9O1xuXG5cdC8vIEFuZCB0aGUga2V5d29yZHNcblxuXHR2YXIgZWNtYTVBbmRMZXNzS2V5d29yZHMgPSBcImJyZWFrIGNhc2UgY2F0Y2ggY29udGludWUgZGVidWdnZXIgZGVmYXVsdCBkbyBlbHNlIGZpbmFsbHkgZm9yIGZ1bmN0aW9uIGlmIHJldHVybiBzd2l0Y2ggdGhyb3cgdHJ5IHZhciB3aGlsZSB3aXRoIG51bGwgdHJ1ZSBmYWxzZSBpbnN0YW5jZW9mIHR5cGVvZiB2b2lkIGRlbGV0ZSBuZXcgaW4gdGhpc1wiO1xuXG5cdHZhciBrZXl3b3JkcyA9IHtcblx0ICA1OiBlY21hNUFuZExlc3NLZXl3b3Jkcyxcblx0ICBcIjVtb2R1bGVcIjogZWNtYTVBbmRMZXNzS2V5d29yZHMgKyBcIiBleHBvcnQgaW1wb3J0XCIsXG5cdCAgNjogZWNtYTVBbmRMZXNzS2V5d29yZHMgKyBcIiBjb25zdCBjbGFzcyBleHRlbmRzIGV4cG9ydCBpbXBvcnQgc3VwZXJcIlxuXHR9O1xuXG5cdHZhciBrZXl3b3JkUmVsYXRpb25hbE9wZXJhdG9yID0gL15pbihzdGFuY2VvZik/JC87XG5cblx0Ly8gIyMgQ2hhcmFjdGVyIGNhdGVnb3JpZXNcblxuXHQvLyBCaWcgdWdseSByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbWF0Y2ggY2hhcmFjdGVycyBpbiB0aGVcblx0Ly8gd2hpdGVzcGFjZSwgaWRlbnRpZmllciwgYW5kIGlkZW50aWZpZXItc3RhcnQgY2F0ZWdvcmllcy4gVGhlc2Vcblx0Ly8gYXJlIG9ubHkgYXBwbGllZCB3aGVuIGEgY2hhcmFjdGVyIGlzIGZvdW5kIHRvIGFjdHVhbGx5IGhhdmUgYVxuXHQvLyBjb2RlIHBvaW50IGFib3ZlIDEyOC5cblx0Ly8gR2VuZXJhdGVkIGJ5IGBiaW4vZ2VuZXJhdGUtaWRlbnRpZmllci1yZWdleC5qc2AuXG5cdHZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gXCJcXHhhYVxceGI1XFx4YmFcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJjMVxcdTAyYzYtXFx1MDJkMVxcdTAyZTAtXFx1MDJlNFxcdTAyZWNcXHUwMmVlXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdhLVxcdTAzN2RcXHUwMzdmXFx1MDM4NlxcdTAzODgtXFx1MDM4YVxcdTAzOGNcXHUwMzhlLVxcdTAzYTFcXHUwM2EzLVxcdTAzZjVcXHUwM2Y3LVxcdTA0ODFcXHUwNDhhLVxcdTA1MmZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MC1cXHUwNTg4XFx1MDVkMC1cXHUwNWVhXFx1MDVlZi1cXHUwNWYyXFx1MDYyMC1cXHUwNjRhXFx1MDY2ZVxcdTA2NmZcXHUwNjcxLVxcdTA2ZDNcXHUwNmQ1XFx1MDZlNVxcdTA2ZTZcXHUwNmVlXFx1MDZlZlxcdTA2ZmEtXFx1MDZmY1xcdTA2ZmZcXHUwNzEwXFx1MDcxMi1cXHUwNzJmXFx1MDc0ZC1cXHUwN2E1XFx1MDdiMVxcdTA3Y2EtXFx1MDdlYVxcdTA3ZjRcXHUwN2Y1XFx1MDdmYVxcdTA4MDAtXFx1MDgxNVxcdTA4MWFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2YVxcdTA4YTAtXFx1MDhiNFxcdTA4YjYtXFx1MDhjN1xcdTA5MDQtXFx1MDkzOVxcdTA5M2RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThjXFx1MDk4ZlxcdTA5OTBcXHUwOTkzLVxcdTA5YThcXHUwOWFhLVxcdTA5YjBcXHUwOWIyXFx1MDliNi1cXHUwOWI5XFx1MDliZFxcdTA5Y2VcXHUwOWRjXFx1MDlkZFxcdTA5ZGYtXFx1MDllMVxcdTA5ZjBcXHUwOWYxXFx1MDlmY1xcdTBhMDUtXFx1MGEwYVxcdTBhMGZcXHUwYTEwXFx1MGExMy1cXHUwYTI4XFx1MGEyYS1cXHUwYTMwXFx1MGEzMlxcdTBhMzNcXHUwYTM1XFx1MGEzNlxcdTBhMzhcXHUwYTM5XFx1MGE1OS1cXHUwYTVjXFx1MGE1ZVxcdTBhNzItXFx1MGE3NFxcdTBhODUtXFx1MGE4ZFxcdTBhOGYtXFx1MGE5MVxcdTBhOTMtXFx1MGFhOFxcdTBhYWEtXFx1MGFiMFxcdTBhYjJcXHUwYWIzXFx1MGFiNS1cXHUwYWI5XFx1MGFiZFxcdTBhZDBcXHUwYWUwXFx1MGFlMVxcdTBhZjlcXHUwYjA1LVxcdTBiMGNcXHUwYjBmXFx1MGIxMFxcdTBiMTMtXFx1MGIyOFxcdTBiMmEtXFx1MGIzMFxcdTBiMzJcXHUwYjMzXFx1MGIzNS1cXHUwYjM5XFx1MGIzZFxcdTBiNWNcXHUwYjVkXFx1MGI1Zi1cXHUwYjYxXFx1MGI3MVxcdTBiODNcXHUwYjg1LVxcdTBiOGFcXHUwYjhlLVxcdTBiOTBcXHUwYjkyLVxcdTBiOTVcXHUwYjk5XFx1MGI5YVxcdTBiOWNcXHUwYjllXFx1MGI5ZlxcdTBiYTNcXHUwYmE0XFx1MGJhOC1cXHUwYmFhXFx1MGJhZS1cXHUwYmI5XFx1MGJkMFxcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzOVxcdTBjM2RcXHUwYzU4LVxcdTBjNWFcXHUwYzYwXFx1MGM2MVxcdTBjODBcXHUwYzg1LVxcdTBjOGNcXHUwYzhlLVxcdTBjOTBcXHUwYzkyLVxcdTBjYThcXHUwY2FhLVxcdTBjYjNcXHUwY2I1LVxcdTBjYjlcXHUwY2JkXFx1MGNkZVxcdTBjZTBcXHUwY2UxXFx1MGNmMVxcdTBjZjJcXHUwZDA0LVxcdTBkMGNcXHUwZDBlLVxcdTBkMTBcXHUwZDEyLVxcdTBkM2FcXHUwZDNkXFx1MGQ0ZVxcdTBkNTQtXFx1MGQ1NlxcdTBkNWYtXFx1MGQ2MVxcdTBkN2EtXFx1MGQ3ZlxcdTBkODUtXFx1MGQ5NlxcdTBkOWEtXFx1MGRiMVxcdTBkYjMtXFx1MGRiYlxcdTBkYmRcXHUwZGMwLVxcdTBkYzZcXHUwZTAxLVxcdTBlMzBcXHUwZTMyXFx1MGUzM1xcdTBlNDAtXFx1MGU0NlxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODYtXFx1MGU4YVxcdTBlOGMtXFx1MGVhM1xcdTBlYTVcXHUwZWE3LVxcdTBlYjBcXHUwZWIyXFx1MGViM1xcdTBlYmRcXHUwZWMwLVxcdTBlYzRcXHUwZWM2XFx1MGVkYy1cXHUwZWRmXFx1MGYwMFxcdTBmNDAtXFx1MGY0N1xcdTBmNDktXFx1MGY2Y1xcdTBmODgtXFx1MGY4Y1xcdTEwMDAtXFx1MTAyYVxcdTEwM2ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVhLVxcdTEwNWRcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZlLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhlXFx1MTBhMC1cXHUxMGM1XFx1MTBjN1xcdTEwY2RcXHUxMGQwLVxcdTEwZmFcXHUxMGZjLVxcdTEyNDhcXHUxMjRhLVxcdTEyNGRcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1YS1cXHUxMjVkXFx1MTI2MC1cXHUxMjg4XFx1MTI4YS1cXHUxMjhkXFx1MTI5MC1cXHUxMmIwXFx1MTJiMi1cXHUxMmI1XFx1MTJiOC1cXHUxMmJlXFx1MTJjMFxcdTEyYzItXFx1MTJjNVxcdTEyYzgtXFx1MTJkNlxcdTEyZDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1YVxcdTEzODAtXFx1MTM4ZlxcdTEzYTAtXFx1MTNmNVxcdTEzZjgtXFx1MTNmZFxcdTE0MDEtXFx1MTY2Y1xcdTE2NmYtXFx1MTY3ZlxcdTE2ODEtXFx1MTY5YVxcdTE2YTAtXFx1MTZlYVxcdTE2ZWUtXFx1MTZmOFxcdTE3MDAtXFx1MTcwY1xcdTE3MGUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Y1xcdTE3NmUtXFx1MTc3MFxcdTE3ODAtXFx1MTdiM1xcdTE3ZDdcXHUxN2RjXFx1MTgyMC1cXHUxODc4XFx1MTg4MC1cXHUxOGE4XFx1MThhYVxcdTE4YjAtXFx1MThmNVxcdTE5MDAtXFx1MTkxZVxcdTE5NTAtXFx1MTk2ZFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlhYlxcdTE5YjAtXFx1MTljOVxcdTFhMDAtXFx1MWExNlxcdTFhMjAtXFx1MWE1NFxcdTFhYTdcXHUxYjA1LVxcdTFiMzNcXHUxYjQ1LVxcdTFiNGJcXHUxYjgzLVxcdTFiYTBcXHUxYmFlXFx1MWJhZlxcdTFiYmEtXFx1MWJlNVxcdTFjMDAtXFx1MWMyM1xcdTFjNGQtXFx1MWM0ZlxcdTFjNWEtXFx1MWM3ZFxcdTFjODAtXFx1MWM4OFxcdTFjOTAtXFx1MWNiYVxcdTFjYmQtXFx1MWNiZlxcdTFjZTktXFx1MWNlY1xcdTFjZWUtXFx1MWNmM1xcdTFjZjVcXHUxY2Y2XFx1MWNmYVxcdTFkMDAtXFx1MWRiZlxcdTFlMDAtXFx1MWYxNVxcdTFmMTgtXFx1MWYxZFxcdTFmMjAtXFx1MWY0NVxcdTFmNDgtXFx1MWY0ZFxcdTFmNTAtXFx1MWY1N1xcdTFmNTlcXHUxZjViXFx1MWY1ZFxcdTFmNWYtXFx1MWY3ZFxcdTFmODAtXFx1MWZiNFxcdTFmYjYtXFx1MWZiY1xcdTFmYmVcXHUxZmMyLVxcdTFmYzRcXHUxZmM2LVxcdTFmY2NcXHUxZmQwLVxcdTFmZDNcXHUxZmQ2LVxcdTFmZGJcXHUxZmUwLVxcdTFmZWNcXHUxZmYyLVxcdTFmZjRcXHUxZmY2LVxcdTFmZmNcXHUyMDcxXFx1MjA3ZlxcdTIwOTAtXFx1MjA5Y1xcdTIxMDJcXHUyMTA3XFx1MjEwYS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExZFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMmEtXFx1MjEzOVxcdTIxM2MtXFx1MjEzZlxcdTIxNDUtXFx1MjE0OVxcdTIxNGVcXHUyMTYwLVxcdTIxODhcXHUyYzAwLVxcdTJjMmVcXHUyYzMwLVxcdTJjNWVcXHUyYzYwLVxcdTJjZTRcXHUyY2ViLVxcdTJjZWVcXHUyY2YyXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkODAtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzY1xcdTMwNDEtXFx1MzA5NlxcdTMwOWItXFx1MzA5ZlxcdTMwYTEtXFx1MzBmYVxcdTMwZmMtXFx1MzBmZlxcdTMxMDUtXFx1MzEyZlxcdTMxMzEtXFx1MzE4ZVxcdTMxYTAtXFx1MzFiZlxcdTMxZjAtXFx1MzFmZlxcdTM0MDAtXFx1NGRiZlxcdTRlMDAtXFx1OWZmY1xcdWEwMDAtXFx1YTQ4Y1xcdWE0ZDAtXFx1YTRmZFxcdWE1MDAtXFx1YTYwY1xcdWE2MTAtXFx1YTYxZlxcdWE2MmFcXHVhNjJiXFx1YTY0MC1cXHVhNjZlXFx1YTY3Zi1cXHVhNjlkXFx1YTZhMC1cXHVhNmVmXFx1YTcxNy1cXHVhNzFmXFx1YTcyMi1cXHVhNzg4XFx1YTc4Yi1cXHVhN2JmXFx1YTdjMi1cXHVhN2NhXFx1YTdmNS1cXHVhODAxXFx1YTgwMy1cXHVhODA1XFx1YTgwNy1cXHVhODBhXFx1YTgwYy1cXHVhODIyXFx1YTg0MC1cXHVhODczXFx1YTg4Mi1cXHVhOGIzXFx1YThmMi1cXHVhOGY3XFx1YThmYlxcdWE4ZmRcXHVhOGZlXFx1YTkwYS1cXHVhOTI1XFx1YTkzMC1cXHVhOTQ2XFx1YTk2MC1cXHVhOTdjXFx1YTk4NC1cXHVhOWIyXFx1YTljZlxcdWE5ZTAtXFx1YTllNFxcdWE5ZTYtXFx1YTllZlxcdWE5ZmEtXFx1YTlmZVxcdWFhMDAtXFx1YWEyOFxcdWFhNDAtXFx1YWE0MlxcdWFhNDQtXFx1YWE0YlxcdWFhNjAtXFx1YWE3NlxcdWFhN2FcXHVhYTdlLVxcdWFhYWZcXHVhYWIxXFx1YWFiNVxcdWFhYjZcXHVhYWI5LVxcdWFhYmRcXHVhYWMwXFx1YWFjMlxcdWFhZGItXFx1YWFkZFxcdWFhZTAtXFx1YWFlYVxcdWFhZjItXFx1YWFmNFxcdWFiMDEtXFx1YWIwNlxcdWFiMDktXFx1YWIwZVxcdWFiMTEtXFx1YWIxNlxcdWFiMjAtXFx1YWIyNlxcdWFiMjgtXFx1YWIyZVxcdWFiMzAtXFx1YWI1YVxcdWFiNWMtXFx1YWI2OVxcdWFiNzAtXFx1YWJlMlxcdWFjMDAtXFx1ZDdhM1xcdWQ3YjAtXFx1ZDdjNlxcdWQ3Y2ItXFx1ZDdmYlxcdWY5MDAtXFx1ZmE2ZFxcdWZhNzAtXFx1ZmFkOVxcdWZiMDAtXFx1ZmIwNlxcdWZiMTMtXFx1ZmIxN1xcdWZiMWRcXHVmYjFmLVxcdWZiMjhcXHVmYjJhLVxcdWZiMzZcXHVmYjM4LVxcdWZiM2NcXHVmYjNlXFx1ZmI0MFxcdWZiNDFcXHVmYjQzXFx1ZmI0NFxcdWZiNDYtXFx1ZmJiMVxcdWZiZDMtXFx1ZmQzZFxcdWZkNTAtXFx1ZmQ4ZlxcdWZkOTItXFx1ZmRjN1xcdWZkZjAtXFx1ZmRmYlxcdWZlNzAtXFx1ZmU3NFxcdWZlNzYtXFx1ZmVmY1xcdWZmMjEtXFx1ZmYzYVxcdWZmNDEtXFx1ZmY1YVxcdWZmNjYtXFx1ZmZiZVxcdWZmYzItXFx1ZmZjN1xcdWZmY2EtXFx1ZmZjZlxcdWZmZDItXFx1ZmZkN1xcdWZmZGEtXFx1ZmZkY1wiO1xuXHR2YXIgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBcIlxcdTIwMGNcXHUyMDBkXFx4YjdcXHUwMzAwLVxcdTAzNmZcXHUwMzg3XFx1MDQ4My1cXHUwNDg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDYxMC1cXHUwNjFhXFx1MDY0Yi1cXHUwNjY5XFx1MDY3MFxcdTA2ZDYtXFx1MDZkY1xcdTA2ZGYtXFx1MDZlNFxcdTA2ZTdcXHUwNmU4XFx1MDZlYS1cXHUwNmVkXFx1MDZmMC1cXHUwNmY5XFx1MDcxMVxcdTA3MzAtXFx1MDc0YVxcdTA3YTYtXFx1MDdiMFxcdTA3YzAtXFx1MDdjOVxcdTA3ZWItXFx1MDdmM1xcdTA3ZmRcXHUwODE2LVxcdTA4MTlcXHUwODFiLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MmRcXHUwODU5LVxcdTA4NWJcXHUwOGQzLVxcdTA4ZTFcXHUwOGUzLVxcdTA5MDNcXHUwOTNhLVxcdTA5M2NcXHUwOTNlLVxcdTA5NGZcXHUwOTUxLVxcdTA5NTdcXHUwOTYyXFx1MDk2M1xcdTA5NjYtXFx1MDk2ZlxcdTA5ODEtXFx1MDk4M1xcdTA5YmNcXHUwOWJlLVxcdTA5YzRcXHUwOWM3XFx1MDljOFxcdTA5Y2ItXFx1MDljZFxcdTA5ZDdcXHUwOWUyXFx1MDllM1xcdTA5ZTYtXFx1MDllZlxcdTA5ZmVcXHUwYTAxLVxcdTBhMDNcXHUwYTNjXFx1MGEzZS1cXHUwYTQyXFx1MGE0N1xcdTBhNDhcXHUwYTRiLVxcdTBhNGRcXHUwYTUxXFx1MGE2Ni1cXHUwYTcxXFx1MGE3NVxcdTBhODEtXFx1MGE4M1xcdTBhYmNcXHUwYWJlLVxcdTBhYzVcXHUwYWM3LVxcdTBhYzlcXHUwYWNiLVxcdTBhY2RcXHUwYWUyXFx1MGFlM1xcdTBhZTYtXFx1MGFlZlxcdTBhZmEtXFx1MGFmZlxcdTBiMDEtXFx1MGIwM1xcdTBiM2NcXHUwYjNlLVxcdTBiNDRcXHUwYjQ3XFx1MGI0OFxcdTBiNGItXFx1MGI0ZFxcdTBiNTUtXFx1MGI1N1xcdTBiNjJcXHUwYjYzXFx1MGI2Ni1cXHUwYjZmXFx1MGI4MlxcdTBiYmUtXFx1MGJjMlxcdTBiYzYtXFx1MGJjOFxcdTBiY2EtXFx1MGJjZFxcdTBiZDdcXHUwYmU2LVxcdTBiZWZcXHUwYzAwLVxcdTBjMDRcXHUwYzNlLVxcdTBjNDRcXHUwYzQ2LVxcdTBjNDhcXHUwYzRhLVxcdTBjNGRcXHUwYzU1XFx1MGM1NlxcdTBjNjJcXHUwYzYzXFx1MGM2Ni1cXHUwYzZmXFx1MGM4MS1cXHUwYzgzXFx1MGNiY1xcdTBjYmUtXFx1MGNjNFxcdTBjYzYtXFx1MGNjOFxcdTBjY2EtXFx1MGNjZFxcdTBjZDVcXHUwY2Q2XFx1MGNlMlxcdTBjZTNcXHUwY2U2LVxcdTBjZWZcXHUwZDAwLVxcdTBkMDNcXHUwZDNiXFx1MGQzY1xcdTBkM2UtXFx1MGQ0NFxcdTBkNDYtXFx1MGQ0OFxcdTBkNGEtXFx1MGQ0ZFxcdTBkNTdcXHUwZDYyXFx1MGQ2M1xcdTBkNjYtXFx1MGQ2ZlxcdTBkODEtXFx1MGQ4M1xcdTBkY2FcXHUwZGNmLVxcdTBkZDRcXHUwZGQ2XFx1MGRkOC1cXHUwZGRmXFx1MGRlNi1cXHUwZGVmXFx1MGRmMlxcdTBkZjNcXHUwZTMxXFx1MGUzNC1cXHUwZTNhXFx1MGU0Ny1cXHUwZTRlXFx1MGU1MC1cXHUwZTU5XFx1MGViMVxcdTBlYjQtXFx1MGViY1xcdTBlYzgtXFx1MGVjZFxcdTBlZDAtXFx1MGVkOVxcdTBmMThcXHUwZjE5XFx1MGYyMC1cXHUwZjI5XFx1MGYzNVxcdTBmMzdcXHUwZjM5XFx1MGYzZVxcdTBmM2ZcXHUwZjcxLVxcdTBmODRcXHUwZjg2XFx1MGY4N1xcdTBmOGQtXFx1MGY5N1xcdTBmOTktXFx1MGZiY1xcdTBmYzZcXHUxMDJiLVxcdTEwM2VcXHUxMDQwLVxcdTEwNDlcXHUxMDU2LVxcdTEwNTlcXHUxMDVlLVxcdTEwNjBcXHUxMDYyLVxcdTEwNjRcXHUxMDY3LVxcdTEwNmRcXHUxMDcxLVxcdTEwNzRcXHUxMDgyLVxcdTEwOGRcXHUxMDhmLVxcdTEwOWRcXHUxMzVkLVxcdTEzNWZcXHUxMzY5LVxcdTEzNzFcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdiNC1cXHUxN2QzXFx1MTdkZFxcdTE3ZTAtXFx1MTdlOVxcdTE4MGItXFx1MTgwZFxcdTE4MTAtXFx1MTgxOVxcdTE4YTlcXHUxOTIwLVxcdTE5MmJcXHUxOTMwLVxcdTE5M2JcXHUxOTQ2LVxcdTE5NGZcXHUxOWQwLVxcdTE5ZGFcXHUxYTE3LVxcdTFhMWJcXHUxYTU1LVxcdTFhNWVcXHUxYTYwLVxcdTFhN2NcXHUxYTdmLVxcdTFhODlcXHUxYTkwLVxcdTFhOTlcXHUxYWIwLVxcdTFhYmRcXHUxYWJmXFx1MWFjMFxcdTFiMDAtXFx1MWIwNFxcdTFiMzQtXFx1MWI0NFxcdTFiNTAtXFx1MWI1OVxcdTFiNmItXFx1MWI3M1xcdTFiODAtXFx1MWI4MlxcdTFiYTEtXFx1MWJhZFxcdTFiYjAtXFx1MWJiOVxcdTFiZTYtXFx1MWJmM1xcdTFjMjQtXFx1MWMzN1xcdTFjNDAtXFx1MWM0OVxcdTFjNTAtXFx1MWM1OVxcdTFjZDAtXFx1MWNkMlxcdTFjZDQtXFx1MWNlOFxcdTFjZWRcXHUxY2Y0XFx1MWNmNy1cXHUxY2Y5XFx1MWRjMC1cXHUxZGY5XFx1MWRmYi1cXHUxZGZmXFx1MjAzZlxcdTIwNDBcXHUyMDU0XFx1MjBkMC1cXHUyMGRjXFx1MjBlMVxcdTIwZTUtXFx1MjBmMFxcdTJjZWYtXFx1MmNmMVxcdTJkN2ZcXHUyZGUwLVxcdTJkZmZcXHUzMDJhLVxcdTMwMmZcXHUzMDk5XFx1MzA5YVxcdWE2MjAtXFx1YTYyOVxcdWE2NmZcXHVhNjc0LVxcdWE2N2RcXHVhNjllXFx1YTY5ZlxcdWE2ZjBcXHVhNmYxXFx1YTgwMlxcdWE4MDZcXHVhODBiXFx1YTgyMy1cXHVhODI3XFx1YTgyY1xcdWE4ODBcXHVhODgxXFx1YThiNC1cXHVhOGM1XFx1YThkMC1cXHVhOGQ5XFx1YThlMC1cXHVhOGYxXFx1YThmZi1cXHVhOTA5XFx1YTkyNi1cXHVhOTJkXFx1YTk0Ny1cXHVhOTUzXFx1YTk4MC1cXHVhOTgzXFx1YTliMy1cXHVhOWMwXFx1YTlkMC1cXHVhOWQ5XFx1YTllNVxcdWE5ZjAtXFx1YTlmOVxcdWFhMjktXFx1YWEzNlxcdWFhNDNcXHVhYTRjXFx1YWE0ZFxcdWFhNTAtXFx1YWE1OVxcdWFhN2ItXFx1YWE3ZFxcdWFhYjBcXHVhYWIyLVxcdWFhYjRcXHVhYWI3XFx1YWFiOFxcdWFhYmVcXHVhYWJmXFx1YWFjMVxcdWFhZWItXFx1YWFlZlxcdWFhZjVcXHVhYWY2XFx1YWJlMy1cXHVhYmVhXFx1YWJlY1xcdWFiZWRcXHVhYmYwLVxcdWFiZjlcXHVmYjFlXFx1ZmUwMC1cXHVmZTBmXFx1ZmUyMC1cXHVmZTJmXFx1ZmUzM1xcdWZlMzRcXHVmZTRkLVxcdWZlNGZcXHVmZjEwLVxcdWZmMTlcXHVmZjNmXCI7XG5cblx0dmFyIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0ID0gbmV3IFJlZ0V4cChcIltcIiArIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgKyBcIl1cIik7XG5cdHZhciBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpO1xuXG5cdG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgPSBub25BU0NJSWlkZW50aWZpZXJDaGFycyA9IG51bGw7XG5cblx0Ly8gVGhlc2UgYXJlIGEgcnVuLWxlbmd0aCBhbmQgb2Zmc2V0IGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlXG5cdC8vID4weGZmZmYgY29kZSBwb2ludHMgdGhhdCBhcmUgYSB2YWxpZCBwYXJ0IG9mIGlkZW50aWZpZXJzLiBUaGVcblx0Ly8gb2Zmc2V0IHN0YXJ0cyBhdCAweDEwMDAwLCBhbmQgZWFjaCBwYWlyIG9mIG51bWJlcnMgcmVwcmVzZW50cyBhblxuXHQvLyBvZmZzZXQgdG8gdGhlIG5leHQgcmFuZ2UsIGFuZCB0aGVuIGEgc2l6ZSBvZiB0aGUgcmFuZ2UuIFRoZXkgd2VyZVxuXHQvLyBnZW5lcmF0ZWQgYnkgYmluL2dlbmVyYXRlLWlkZW50aWZpZXItcmVnZXguanNcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tbWEtc3BhY2luZ1xuXHR2YXIgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMgPSBbMCwxMSwyLDI1LDIsMTgsMiwxLDIsMTQsMywxMywzNSwxMjIsNzAsNTIsMjY4LDI4LDQsNDgsNDgsMzEsMTQsMjksNiwzNywxMSwyOSwzLDM1LDUsNywyLDQsNDMsMTU3LDE5LDM1LDUsMzUsNSwzOSw5LDUxLDE1NywzMTAsMTAsMjEsMTEsNywxNTMsNSwzLDAsMiw0MywyLDEsNCwwLDMsMjIsMTEsMjIsMTAsMzAsNjYsMTgsMiwxLDExLDIxLDExLDI1LDcxLDU1LDcsMSw2NSwwLDE2LDMsMiwyLDIsMjgsNDMsMjgsNCwyOCwzNiw3LDIsMjcsMjgsNTMsMTEsMjEsMTEsMTgsMTQsMTcsMTExLDcyLDU2LDUwLDE0LDUwLDE0LDM1LDM0OSw0MSw3LDEsNzksMjgsMTEsMCw5LDIxLDEwNywyMCwyOCwyMiwxMyw1Miw3Niw0NCwzMywyNCwyNywzNSwzMCwwLDMsMCw5LDM0LDQsMCwxMyw0NywxNSwzLDIyLDAsMiwwLDM2LDE3LDIsMjQsODUsNiwyLDAsMiwzLDIsMTQsMiw5LDgsNDYsMzksNywzLDEsMywyMSwyLDYsMiwxLDIsNCw0LDAsMTksMCwxMyw0LDE1OSw1MiwxOSwzLDIxLDIsMzEsNDcsMjEsMSwyLDAsMTg1LDQ2LDQyLDMsMzcsNDcsMjEsMCw2MCw0MiwxNCwwLDcyLDI2LDIzMCw0MywxMTcsNjMsMzIsNywzLDAsMyw3LDIsMSwyLDIzLDE2LDAsMiwwLDk1LDcsMywzOCwxNywwLDIsMCwyOSwwLDExLDM5LDgsMCwyMiwwLDEyLDQ1LDIwLDAsMzUsNTYsMjY0LDgsMiwzNiwxOCwwLDUwLDI5LDExMyw2LDIsMSwyLDM3LDIyLDAsMjYsNSwyLDEsMiwzMSwxNSwwLDMyOCwxOCwxOTAsMCw4MCw5MjEsMTAzLDExMCwxOCwxOTUsMjc0OSwxMDcwLDQwNTAsNTgyLDg2MzQsNTY4LDgsMzAsMTE0LDI5LDE5LDQ3LDE3LDMsMzIsMjAsNiwxOCw2ODksNjMsMTI5LDc0LDYsMCw2NywxMiw2NSwxLDIsMCwyOSw2MTM1LDksMTIzNyw0Myw4LDg5NTIsMjg2LDUwLDIsMTgsMyw5LDM5NSwyMzA5LDEwNiw2LDEyLDQsOCw4LDksNTk5MSw4NCwyLDcwLDIsMSwzLDAsMywxLDMsMywyLDExLDIsMCwyLDYsMiw2NCwyLDMsMyw3LDIsNiwyLDI3LDIsMywyLDQsMiwwLDQsNiwyLDMzOSwzLDI0LDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsNywyMzU3LDQ0LDExLDYsMTcsMCwzNzAsNDMsMTMwMSwxOTYsNjAsNjcsOCwwLDEyMDUsMywyLDI2LDIsMSwyLDAsMywwLDIsOSwyLDMsMiwwLDIsMCw3LDAsNSwwLDIsMCwyLDAsMiwyLDIsMSwyLDAsMywwLDIsMCwyLDAsMiwwLDIsMCwyLDEsMiwwLDMsMywyLDYsMiwzLDIsMywyLDAsMiw5LDIsMTYsNiwyLDIsNCwyLDE2LDQ0MjEsNDI3MTcsMzUsNDE0OCwxMiwyMjEsMyw1NzYxLDE1LDc0NzIsMzEwNCw1NDEsMTUwNyw0OTM4XTtcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tbWEtc3BhY2luZ1xuXHR2YXIgYXN0cmFsSWRlbnRpZmllckNvZGVzID0gWzUwOSwwLDIyNywwLDE1MCw0LDI5NCw5LDEzNjgsMiwyLDEsNiwzLDQxLDIsNSwwLDE2NiwxLDU3NCwzLDksOSwzNzAsMSwxNTQsMTAsMTc2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw2LDEsNDUsMCwxMywyLDQ5LDEzLDksMywyLDExLDgzLDExLDcsMCwxNjEsMTEsNiw5LDcsMyw1NiwxLDIsNiwzLDEsMywyLDEwLDAsMTEsMSwzLDYsNCw0LDE5MywxNywxMCw5LDUsMCw4MiwxOSwxMyw5LDIxNCw2LDMsOCwyOCwxLDgzLDE2LDE2LDksODIsMTIsOSw5LDg0LDE0LDUsOSwyNDMsMTQsMTY2LDksNzEsNSwyLDEsMywzLDIsMCwyLDEsMTMsOSwxMjAsNiwzLDYsNCwwLDI5LDksNDEsNiwyLDMsOSwwLDEwLDEwLDQ3LDE1LDQwNiw3LDIsNywxNyw5LDU3LDIxLDIsMTMsMTIzLDUsNCwwLDIsMSwyLDYsMiwwLDksOSw0OSw0LDIsMSwyLDQsOSw5LDMzMCwzLDE5MzA2LDksMTM1LDQsNjAsNiwyNiw5LDEwMTQsMCwyLDU0LDgsMyw4MiwwLDEyLDEsMTk2MjgsMSw1MzE5LDQsNCw1LDksNywzLDYsMzEsMywxNDksMiwxNDE4LDQ5LDUxMyw1NCw1LDQ5LDksMCwxNSwwLDIzLDQsMiwxNCwxMzYxLDYsMiwxNiwzLDYsMiwxLDIsNCwyNjIsNiwxMCw5LDQxOSwxMywxNDk1LDYsMTEwLDYsNiw5LDQ3NTksOSw3ODc3MTksMjM5XTtcblxuXHQvLyBUaGlzIGhhcyBhIGNvbXBsZXhpdHkgbGluZWFyIHRvIHRoZSB2YWx1ZSBvZiB0aGUgY29kZS4gVGhlXG5cdC8vIGFzc3VtcHRpb24gaXMgdGhhdCBsb29raW5nIHVwIGFzdHJhbCBpZGVudGlmaWVyIGNoYXJhY3RlcnMgaXNcblx0Ly8gcmFyZS5cblx0ZnVuY3Rpb24gaXNJbkFzdHJhbFNldChjb2RlLCBzZXQpIHtcblx0ICB2YXIgcG9zID0gMHgxMDAwMDtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkgKz0gMikge1xuXHQgICAgcG9zICs9IHNldFtpXTtcblx0ICAgIGlmIChwb3MgPiBjb2RlKSB7IHJldHVybiBmYWxzZSB9XG5cdCAgICBwb3MgKz0gc2V0W2kgKyAxXTtcblx0ICAgIGlmIChwb3MgPj0gY29kZSkgeyByZXR1cm4gdHJ1ZSB9XG5cdCAgfVxuXHR9XG5cblx0Ly8gVGVzdCB3aGV0aGVyIGEgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUgc3RhcnRzIGFuIGlkZW50aWZpZXIuXG5cblx0ZnVuY3Rpb24gaXNJZGVudGlmaWVyU3RhcnQoY29kZSwgYXN0cmFsKSB7XG5cdCAgaWYgKGNvZGUgPCA2NSkgeyByZXR1cm4gY29kZSA9PT0gMzYgfVxuXHQgIGlmIChjb2RlIDwgOTEpIHsgcmV0dXJuIHRydWUgfVxuXHQgIGlmIChjb2RlIDwgOTcpIHsgcmV0dXJuIGNvZGUgPT09IDk1IH1cblx0ICBpZiAoY29kZSA8IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG5cdCAgaWYgKGNvZGUgPD0gMHhmZmZmKSB7IHJldHVybiBjb2RlID49IDB4YWEgJiYgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKSB9XG5cdCAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHsgcmV0dXJuIGZhbHNlIH1cblx0ICByZXR1cm4gaXNJbkFzdHJhbFNldChjb2RlLCBhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2Rlcylcblx0fVxuXG5cdC8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBpcyBwYXJ0IG9mIGFuIGlkZW50aWZpZXIuXG5cblx0ZnVuY3Rpb24gaXNJZGVudGlmaWVyQ2hhcihjb2RlLCBhc3RyYWwpIHtcblx0ICBpZiAoY29kZSA8IDQ4KSB7IHJldHVybiBjb2RlID09PSAzNiB9XG5cdCAgaWYgKGNvZGUgPCA1OCkgeyByZXR1cm4gdHJ1ZSB9XG5cdCAgaWYgKGNvZGUgPCA2NSkgeyByZXR1cm4gZmFsc2UgfVxuXHQgIGlmIChjb2RlIDwgOTEpIHsgcmV0dXJuIHRydWUgfVxuXHQgIGlmIChjb2RlIDwgOTcpIHsgcmV0dXJuIGNvZGUgPT09IDk1IH1cblx0ICBpZiAoY29kZSA8IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG5cdCAgaWYgKGNvZGUgPD0gMHhmZmZmKSB7IHJldHVybiBjb2RlID49IDB4YWEgJiYgbm9uQVNDSUlpZGVudGlmaWVyLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSkgfVxuXHQgIGlmIChhc3RyYWwgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZSB9XG5cdCAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpIHx8IGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllckNvZGVzKVxuXHR9XG5cblx0Ly8gIyMgVG9rZW4gdHlwZXNcblxuXHQvLyBUaGUgYXNzaWdubWVudCBvZiBmaW5lLWdyYWluZWQsIGluZm9ybWF0aW9uLWNhcnJ5aW5nIHR5cGUgb2JqZWN0c1xuXHQvLyBhbGxvd3MgdGhlIHRva2VuaXplciB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gaXQgaGFzIGFib3V0IGFcblx0Ly8gdG9rZW4gaW4gYSB3YXkgdGhhdCBpcyB2ZXJ5IGNoZWFwIGZvciB0aGUgcGFyc2VyIHRvIGxvb2sgdXAuXG5cblx0Ly8gQWxsIHRva2VuIHR5cGUgdmFyaWFibGVzIHN0YXJ0IHdpdGggYW4gdW5kZXJzY29yZSwgdG8gbWFrZSB0aGVtXG5cdC8vIGVhc3kgdG8gcmVjb2duaXplLlxuXG5cdC8vIFRoZSBgYmVmb3JlRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBkaXNhbWJpZ3VhdGUgYmV0d2VlbiByZWd1bGFyXG5cdC8vIGV4cHJlc3Npb25zIGFuZCBkaXZpc2lvbnMuIEl0IGlzIHNldCBvbiBhbGwgdG9rZW4gdHlwZXMgdGhhdCBjYW5cblx0Ly8gYmUgZm9sbG93ZWQgYnkgYW4gZXhwcmVzc2lvbiAodGh1cywgYSBzbGFzaCBhZnRlciB0aGVtIHdvdWxkIGJlIGFcblx0Ly8gcmVndWxhciBleHByZXNzaW9uKS5cblx0Ly9cblx0Ly8gVGhlIGBzdGFydHNFeHByYCBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNoZWNrIGlmIHRoZSB0b2tlbiBlbmRzIGFcblx0Ly8gYHlpZWxkYCBleHByZXNzaW9uLiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgZWl0aGVyIGNhblxuXHQvLyBkaXJlY3RseSBzdGFydCBhbiBleHByZXNzaW9uIChsaWtlIGEgcXVvdGF0aW9uIG1hcmspIG9yIGNhblxuXHQvLyBjb250aW51ZSBhbiBleHByZXNzaW9uIChsaWtlIHRoZSBib2R5IG9mIGEgc3RyaW5nKS5cblx0Ly9cblx0Ly8gYGlzTG9vcGAgbWFya3MgYSBrZXl3b3JkIGFzIHN0YXJ0aW5nIGEgbG9vcCwgd2hpY2ggaXMgaW1wb3J0YW50XG5cdC8vIHRvIGtub3cgd2hlbiBwYXJzaW5nIGEgbGFiZWwsIGluIG9yZGVyIHRvIGFsbG93IG9yIGRpc2FsbG93XG5cdC8vIGNvbnRpbnVlIGp1bXBzIHRvIHRoYXQgbGFiZWwuXG5cblx0dmFyIFRva2VuVHlwZSA9IGZ1bmN0aW9uIFRva2VuVHlwZShsYWJlbCwgY29uZikge1xuXHQgIGlmICggY29uZiA9PT0gdm9pZCAwICkgY29uZiA9IHt9O1xuXG5cdCAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuXHQgIHRoaXMua2V5d29yZCA9IGNvbmYua2V5d29yZDtcblx0ICB0aGlzLmJlZm9yZUV4cHIgPSAhIWNvbmYuYmVmb3JlRXhwcjtcblx0ICB0aGlzLnN0YXJ0c0V4cHIgPSAhIWNvbmYuc3RhcnRzRXhwcjtcblx0ICB0aGlzLmlzTG9vcCA9ICEhY29uZi5pc0xvb3A7XG5cdCAgdGhpcy5pc0Fzc2lnbiA9ICEhY29uZi5pc0Fzc2lnbjtcblx0ICB0aGlzLnByZWZpeCA9ICEhY29uZi5wcmVmaXg7XG5cdCAgdGhpcy5wb3N0Zml4ID0gISFjb25mLnBvc3RmaXg7XG5cdCAgdGhpcy5iaW5vcCA9IGNvbmYuYmlub3AgfHwgbnVsbDtcblx0ICB0aGlzLnVwZGF0ZUNvbnRleHQgPSBudWxsO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGJpbm9wKG5hbWUsIHByZWMpIHtcblx0ICByZXR1cm4gbmV3IFRva2VuVHlwZShuYW1lLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IHByZWN9KVxuXHR9XG5cdHZhciBiZWZvcmVFeHByID0ge2JlZm9yZUV4cHI6IHRydWV9LCBzdGFydHNFeHByID0ge3N0YXJ0c0V4cHI6IHRydWV9O1xuXG5cdC8vIE1hcCBrZXl3b3JkIG5hbWVzIHRvIHRva2VuIHR5cGVzLlxuXG5cdHZhciBrZXl3b3JkcyQxID0ge307XG5cblx0Ly8gU3VjY2luY3QgZGVmaW5pdGlvbnMgb2Yga2V5d29yZCB0b2tlbiB0eXBlc1xuXHRmdW5jdGlvbiBrdyhuYW1lLCBvcHRpb25zKSB7XG5cdCAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cblx0ICBvcHRpb25zLmtleXdvcmQgPSBuYW1lO1xuXHQgIHJldHVybiBrZXl3b3JkcyQxW25hbWVdID0gbmV3IFRva2VuVHlwZShuYW1lLCBvcHRpb25zKVxuXHR9XG5cblx0dmFyIHR5cGVzID0ge1xuXHQgIG51bTogbmV3IFRva2VuVHlwZShcIm51bVwiLCBzdGFydHNFeHByKSxcblx0ICByZWdleHA6IG5ldyBUb2tlblR5cGUoXCJyZWdleHBcIiwgc3RhcnRzRXhwciksXG5cdCAgc3RyaW5nOiBuZXcgVG9rZW5UeXBlKFwic3RyaW5nXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIG5hbWU6IG5ldyBUb2tlblR5cGUoXCJuYW1lXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIGVvZjogbmV3IFRva2VuVHlwZShcImVvZlwiKSxcblxuXHQgIC8vIFB1bmN0dWF0aW9uIHRva2VuIHR5cGVzLlxuXHQgIGJyYWNrZXRMOiBuZXcgVG9rZW5UeXBlKFwiW1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuXHQgIGJyYWNrZXRSOiBuZXcgVG9rZW5UeXBlKFwiXVwiKSxcblx0ICBicmFjZUw6IG5ldyBUb2tlblR5cGUoXCJ7XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG5cdCAgYnJhY2VSOiBuZXcgVG9rZW5UeXBlKFwifVwiKSxcblx0ICBwYXJlbkw6IG5ldyBUb2tlblR5cGUoXCIoXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG5cdCAgcGFyZW5SOiBuZXcgVG9rZW5UeXBlKFwiKVwiKSxcblx0ICBjb21tYTogbmV3IFRva2VuVHlwZShcIixcIiwgYmVmb3JlRXhwciksXG5cdCAgc2VtaTogbmV3IFRva2VuVHlwZShcIjtcIiwgYmVmb3JlRXhwciksXG5cdCAgY29sb246IG5ldyBUb2tlblR5cGUoXCI6XCIsIGJlZm9yZUV4cHIpLFxuXHQgIGRvdDogbmV3IFRva2VuVHlwZShcIi5cIiksXG5cdCAgcXVlc3Rpb246IG5ldyBUb2tlblR5cGUoXCI/XCIsIGJlZm9yZUV4cHIpLFxuXHQgIHF1ZXN0aW9uRG90OiBuZXcgVG9rZW5UeXBlKFwiPy5cIiksXG5cdCAgYXJyb3c6IG5ldyBUb2tlblR5cGUoXCI9PlwiLCBiZWZvcmVFeHByKSxcblx0ICB0ZW1wbGF0ZTogbmV3IFRva2VuVHlwZShcInRlbXBsYXRlXCIpLFxuXHQgIGludmFsaWRUZW1wbGF0ZTogbmV3IFRva2VuVHlwZShcImludmFsaWRUZW1wbGF0ZVwiKSxcblx0ICBlbGxpcHNpczogbmV3IFRva2VuVHlwZShcIi4uLlwiLCBiZWZvcmVFeHByKSxcblx0ICBiYWNrUXVvdGU6IG5ldyBUb2tlblR5cGUoXCJgXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIGRvbGxhckJyYWNlTDogbmV3IFRva2VuVHlwZShcIiR7XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG5cblx0ICAvLyBPcGVyYXRvcnMuIFRoZXNlIGNhcnJ5IHNldmVyYWwga2luZHMgb2YgcHJvcGVydGllcyB0byBoZWxwIHRoZVxuXHQgIC8vIHBhcnNlciB1c2UgdGhlbSBwcm9wZXJseSAodGhlIHByZXNlbmNlIG9mIHRoZXNlIHByb3BlcnRpZXMgaXNcblx0ICAvLyB3aGF0IGNhdGVnb3JpemVzIHRoZW0gYXMgb3BlcmF0b3JzKS5cblx0ICAvL1xuXHQgIC8vIGBiaW5vcGAsIHdoZW4gcHJlc2VudCwgc3BlY2lmaWVzIHRoYXQgdGhpcyBvcGVyYXRvciBpcyBhIGJpbmFyeVxuXHQgIC8vIG9wZXJhdG9yLCBhbmQgd2lsbCByZWZlciB0byBpdHMgcHJlY2VkZW5jZS5cblx0ICAvL1xuXHQgIC8vIGBwcmVmaXhgIGFuZCBgcG9zdGZpeGAgbWFyayB0aGUgb3BlcmF0b3IgYXMgYSBwcmVmaXggb3IgcG9zdGZpeFxuXHQgIC8vIHVuYXJ5IG9wZXJhdG9yLlxuXHQgIC8vXG5cdCAgLy8gYGlzQXNzaWduYCBtYXJrcyBhbGwgb2YgYD1gLCBgKz1gLCBgLT1gIGV0Y2V0ZXJhLCB3aGljaCBhY3QgYXNcblx0ICAvLyBiaW5hcnkgb3BlcmF0b3JzIHdpdGggYSB2ZXJ5IGxvdyBwcmVjZWRlbmNlLCB0aGF0IHNob3VsZCByZXN1bHRcblx0ICAvLyBpbiBBc3NpZ25tZW50RXhwcmVzc2lvbiBub2Rlcy5cblxuXHQgIGVxOiBuZXcgVG9rZW5UeXBlKFwiPVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgaXNBc3NpZ246IHRydWV9KSxcblx0ICBhc3NpZ246IG5ldyBUb2tlblR5cGUoXCJfPVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgaXNBc3NpZ246IHRydWV9KSxcblx0ICBpbmNEZWM6IG5ldyBUb2tlblR5cGUoXCIrKy8tLVwiLCB7cHJlZml4OiB0cnVlLCBwb3N0Zml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG5cdCAgcHJlZml4OiBuZXcgVG9rZW5UeXBlKFwiIS9+XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblx0ICBsb2dpY2FsT1I6IGJpbm9wKFwifHxcIiwgMSksXG5cdCAgbG9naWNhbEFORDogYmlub3AoXCImJlwiLCAyKSxcblx0ICBiaXR3aXNlT1I6IGJpbm9wKFwifFwiLCAzKSxcblx0ICBiaXR3aXNlWE9SOiBiaW5vcChcIl5cIiwgNCksXG5cdCAgYml0d2lzZUFORDogYmlub3AoXCImXCIsIDUpLFxuXHQgIGVxdWFsaXR5OiBiaW5vcChcIj09LyE9Lz09PS8hPT1cIiwgNiksXG5cdCAgcmVsYXRpb25hbDogYmlub3AoXCI8Lz4vPD0vPj1cIiwgNyksXG5cdCAgYml0U2hpZnQ6IGJpbm9wKFwiPDwvPj4vPj4+XCIsIDgpLFxuXHQgIHBsdXNNaW46IG5ldyBUb2tlblR5cGUoXCIrLy1cIiwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiA5LCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblx0ICBtb2R1bG86IGJpbm9wKFwiJVwiLCAxMCksXG5cdCAgc3RhcjogYmlub3AoXCIqXCIsIDEwKSxcblx0ICBzbGFzaDogYmlub3AoXCIvXCIsIDEwKSxcblx0ICBzdGFyc3RhcjogbmV3IFRva2VuVHlwZShcIioqXCIsIHtiZWZvcmVFeHByOiB0cnVlfSksXG5cdCAgY29hbGVzY2U6IGJpbm9wKFwiPz9cIiwgMSksXG5cblx0ICAvLyBLZXl3b3JkIHRva2VuIHR5cGVzLlxuXHQgIF9icmVhazoga3coXCJicmVha1wiKSxcblx0ICBfY2FzZToga3coXCJjYXNlXCIsIGJlZm9yZUV4cHIpLFxuXHQgIF9jYXRjaDoga3coXCJjYXRjaFwiKSxcblx0ICBfY29udGludWU6IGt3KFwiY29udGludWVcIiksXG5cdCAgX2RlYnVnZ2VyOiBrdyhcImRlYnVnZ2VyXCIpLFxuXHQgIF9kZWZhdWx0OiBrdyhcImRlZmF1bHRcIiwgYmVmb3JlRXhwciksXG5cdCAgX2RvOiBrdyhcImRvXCIsIHtpc0xvb3A6IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9KSxcblx0ICBfZWxzZToga3coXCJlbHNlXCIsIGJlZm9yZUV4cHIpLFxuXHQgIF9maW5hbGx5OiBrdyhcImZpbmFsbHlcIiksXG5cdCAgX2Zvcjoga3coXCJmb3JcIiwge2lzTG9vcDogdHJ1ZX0pLFxuXHQgIF9mdW5jdGlvbjoga3coXCJmdW5jdGlvblwiLCBzdGFydHNFeHByKSxcblx0ICBfaWY6IGt3KFwiaWZcIiksXG5cdCAgX3JldHVybjoga3coXCJyZXR1cm5cIiwgYmVmb3JlRXhwciksXG5cdCAgX3N3aXRjaDoga3coXCJzd2l0Y2hcIiksXG5cdCAgX3Rocm93OiBrdyhcInRocm93XCIsIGJlZm9yZUV4cHIpLFxuXHQgIF90cnk6IGt3KFwidHJ5XCIpLFxuXHQgIF92YXI6IGt3KFwidmFyXCIpLFxuXHQgIF9jb25zdDoga3coXCJjb25zdFwiKSxcblx0ICBfd2hpbGU6IGt3KFwid2hpbGVcIiwge2lzTG9vcDogdHJ1ZX0pLFxuXHQgIF93aXRoOiBrdyhcIndpdGhcIiksXG5cdCAgX25ldzoga3coXCJuZXdcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblx0ICBfdGhpczoga3coXCJ0aGlzXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIF9zdXBlcjoga3coXCJzdXBlclwiLCBzdGFydHNFeHByKSxcblx0ICBfY2xhc3M6IGt3KFwiY2xhc3NcIiwgc3RhcnRzRXhwciksXG5cdCAgX2V4dGVuZHM6IGt3KFwiZXh0ZW5kc1wiLCBiZWZvcmVFeHByKSxcblx0ICBfZXhwb3J0OiBrdyhcImV4cG9ydFwiKSxcblx0ICBfaW1wb3J0OiBrdyhcImltcG9ydFwiLCBzdGFydHNFeHByKSxcblx0ICBfbnVsbDoga3coXCJudWxsXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIF90cnVlOiBrdyhcInRydWVcIiwgc3RhcnRzRXhwciksXG5cdCAgX2ZhbHNlOiBrdyhcImZhbHNlXCIsIHN0YXJ0c0V4cHIpLFxuXHQgIF9pbjoga3coXCJpblwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDd9KSxcblx0ICBfaW5zdGFuY2VvZjoga3coXCJpbnN0YW5jZW9mXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuXHQgIF90eXBlb2Y6IGt3KFwidHlwZW9mXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblx0ICBfdm9pZDoga3coXCJ2b2lkXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblx0ICBfZGVsZXRlOiBrdyhcImRlbGV0ZVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSlcblx0fTtcblxuXHQvLyBNYXRjaGVzIGEgd2hvbGUgbGluZSBicmVhayAod2hlcmUgQ1JMRiBpcyBjb25zaWRlcmVkIGEgc2luZ2xlXG5cdC8vIGxpbmUgYnJlYWspLiBVc2VkIHRvIGNvdW50IGxpbmVzLlxuXG5cdHZhciBsaW5lQnJlYWsgPSAvXFxyXFxuP3xcXG58XFx1MjAyOHxcXHUyMDI5Lztcblx0dmFyIGxpbmVCcmVha0cgPSBuZXcgUmVnRXhwKGxpbmVCcmVhay5zb3VyY2UsIFwiZ1wiKTtcblxuXHRmdW5jdGlvbiBpc05ld0xpbmUoY29kZSwgZWNtYTIwMTlTdHJpbmcpIHtcblx0ICByZXR1cm4gY29kZSA9PT0gMTAgfHwgY29kZSA9PT0gMTMgfHwgKCFlY21hMjAxOVN0cmluZyAmJiAoY29kZSA9PT0gMHgyMDI4IHx8IGNvZGUgPT09IDB4MjAyOSkpXG5cdH1cblxuXHR2YXIgbm9uQVNDSUl3aGl0ZXNwYWNlID0gL1tcXHUxNjgwXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0vO1xuXG5cdHZhciBza2lwV2hpdGVTcGFjZSA9IC8oPzpcXHN8XFwvXFwvLip8XFwvXFwqW15dKj9cXCpcXC8pKi9nO1xuXG5cdHZhciByZWYgPSBPYmplY3QucHJvdG90eXBlO1xuXHR2YXIgaGFzT3duUHJvcGVydHkgPSByZWYuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0cmluZyA9IHJlZi50b1N0cmluZztcblxuXHQvLyBDaGVja3MgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LlxuXG5cdGZ1bmN0aW9uIGhhcyhvYmosIHByb3BOYW1lKSB7XG5cdCAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wTmFtZSlcblx0fVxuXG5cdHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gKFxuXHQgIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiXG5cdCk7IH0pO1xuXG5cdGZ1bmN0aW9uIHdvcmRzUmVnZXhwKHdvcmRzKSB7XG5cdCAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyB3b3Jkcy5yZXBsYWNlKC8gL2csIFwifFwiKSArIFwiKSRcIilcblx0fVxuXG5cdC8vIFRoZXNlIGFyZSB1c2VkIHdoZW4gYG9wdGlvbnMubG9jYXRpb25zYCBpcyBvbiwgZm9yIHRoZVxuXHQvLyBgc3RhcnRMb2NgIGFuZCBgZW5kTG9jYCBwcm9wZXJ0aWVzLlxuXG5cdHZhciBQb3NpdGlvbiA9IGZ1bmN0aW9uIFBvc2l0aW9uKGxpbmUsIGNvbCkge1xuXHQgIHRoaXMubGluZSA9IGxpbmU7XG5cdCAgdGhpcy5jb2x1bW4gPSBjb2w7XG5cdH07XG5cblx0UG9zaXRpb24ucHJvdG90eXBlLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCAobikge1xuXHQgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5saW5lLCB0aGlzLmNvbHVtbiArIG4pXG5cdH07XG5cblx0dmFyIFNvdXJjZUxvY2F0aW9uID0gZnVuY3Rpb24gU291cmNlTG9jYXRpb24ocCwgc3RhcnQsIGVuZCkge1xuXHQgIHRoaXMuc3RhcnQgPSBzdGFydDtcblx0ICB0aGlzLmVuZCA9IGVuZDtcblx0ICBpZiAocC5zb3VyY2VGaWxlICE9PSBudWxsKSB7IHRoaXMuc291cmNlID0gcC5zb3VyY2VGaWxlOyB9XG5cdH07XG5cblx0Ly8gVGhlIGBnZXRMaW5lSW5mb2AgZnVuY3Rpb24gaXMgbW9zdGx5IHVzZWZ1bCB3aGVuIHRoZVxuXHQvLyBgbG9jYXRpb25zYCBvcHRpb24gaXMgb2ZmIChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucykgYW5kIHlvdVxuXHQvLyB3YW50IHRvIGZpbmQgdGhlIGxpbmUvY29sdW1uIHBvc2l0aW9uIGZvciBhIGdpdmVuIGNoYXJhY3RlclxuXHQvLyBvZmZzZXQuIGBpbnB1dGAgc2hvdWxkIGJlIHRoZSBjb2RlIHN0cmluZyB0aGF0IHRoZSBvZmZzZXQgcmVmZXJzXG5cdC8vIGludG8uXG5cblx0ZnVuY3Rpb24gZ2V0TGluZUluZm8oaW5wdXQsIG9mZnNldCkge1xuXHQgIGZvciAodmFyIGxpbmUgPSAxLCBjdXIgPSAwOzspIHtcblx0ICAgIGxpbmVCcmVha0cubGFzdEluZGV4ID0gY3VyO1xuXHQgICAgdmFyIG1hdGNoID0gbGluZUJyZWFrRy5leGVjKGlucHV0KTtcblx0ICAgIGlmIChtYXRjaCAmJiBtYXRjaC5pbmRleCA8IG9mZnNldCkge1xuXHQgICAgICArK2xpbmU7XG5cdCAgICAgIGN1ciA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihsaW5lLCBvZmZzZXQgLSBjdXIpXG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cblx0Ly8gQSBzZWNvbmQgb3B0aW9uYWwgYXJndW1lbnQgY2FuIGJlIGdpdmVuIHRvIGZ1cnRoZXIgY29uZmlndXJlXG5cdC8vIHRoZSBwYXJzZXIgcHJvY2Vzcy4gVGhlc2Ugb3B0aW9ucyBhcmUgcmVjb2duaXplZDpcblxuXHR2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG5cdCAgLy8gYGVjbWFWZXJzaW9uYCBpbmRpY2F0ZXMgdGhlIEVDTUFTY3JpcHQgdmVyc2lvbiB0byBwYXJzZS4gTXVzdCBiZVxuXHQgIC8vIGVpdGhlciAzLCA1LCA2ICgyMDE1KSwgNyAoMjAxNiksIDggKDIwMTcpLCA5ICgyMDE4KSwgb3IgMTBcblx0ICAvLyAoMjAxOSkuIFRoaXMgaW5mbHVlbmNlcyBzdXBwb3J0IGZvciBzdHJpY3QgbW9kZSwgdGhlIHNldCBvZlxuXHQgIC8vIHJlc2VydmVkIHdvcmRzLCBhbmQgc3VwcG9ydCBmb3IgbmV3IHN5bnRheCBmZWF0dXJlcy4gVGhlIGRlZmF1bHRcblx0ICAvLyBpcyAxMC5cblx0ICBlY21hVmVyc2lvbjogMTAsXG5cdCAgLy8gYHNvdXJjZVR5cGVgIGluZGljYXRlcyB0aGUgbW9kZSB0aGUgY29kZSBzaG91bGQgYmUgcGFyc2VkIGluLlxuXHQgIC8vIENhbiBiZSBlaXRoZXIgYFwic2NyaXB0XCJgIG9yIGBcIm1vZHVsZVwiYC4gVGhpcyBpbmZsdWVuY2VzIGdsb2JhbFxuXHQgIC8vIHN0cmljdCBtb2RlIGFuZCBwYXJzaW5nIG9mIGBpbXBvcnRgIGFuZCBgZXhwb3J0YCBkZWNsYXJhdGlvbnMuXG5cdCAgc291cmNlVHlwZTogXCJzY3JpcHRcIixcblx0ICAvLyBgb25JbnNlcnRlZFNlbWljb2xvbmAgY2FuIGJlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZFxuXHQgIC8vIHdoZW4gYSBzZW1pY29sb24gaXMgYXV0b21hdGljYWxseSBpbnNlcnRlZC4gSXQgd2lsbCBiZSBwYXNzZWRcblx0ICAvLyB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbW1hIGFzIGFuIG9mZnNldCwgYW5kIGlmIGBsb2NhdGlvbnNgIGlzXG5cdCAgLy8gZW5hYmxlZCwgaXQgaXMgZ2l2ZW4gdGhlIGxvY2F0aW9uIGFzIGEgYHtsaW5lLCBjb2x1bW59YCBvYmplY3Rcblx0ICAvLyBhcyBzZWNvbmQgYXJndW1lbnQuXG5cdCAgb25JbnNlcnRlZFNlbWljb2xvbjogbnVsbCxcblx0ICAvLyBgb25UcmFpbGluZ0NvbW1hYCBpcyBzaW1pbGFyIHRvIGBvbkluc2VydGVkU2VtaWNvbG9uYCwgYnV0IGZvclxuXHQgIC8vIHRyYWlsaW5nIGNvbW1hcy5cblx0ICBvblRyYWlsaW5nQ29tbWE6IG51bGwsXG5cdCAgLy8gQnkgZGVmYXVsdCwgcmVzZXJ2ZWQgd29yZHMgYXJlIG9ubHkgZW5mb3JjZWQgaWYgZWNtYVZlcnNpb24gPj0gNS5cblx0ICAvLyBTZXQgYGFsbG93UmVzZXJ2ZWRgIHRvIGEgYm9vbGVhbiB2YWx1ZSB0byBleHBsaWNpdGx5IHR1cm4gdGhpcyBvblxuXHQgIC8vIGFuIG9mZi4gV2hlbiB0aGlzIG9wdGlvbiBoYXMgdGhlIHZhbHVlIFwibmV2ZXJcIiwgcmVzZXJ2ZWQgd29yZHNcblx0ICAvLyBhbmQga2V5d29yZHMgY2FuIGFsc28gbm90IGJlIHVzZWQgYXMgcHJvcGVydHkgbmFtZXMuXG5cdCAgYWxsb3dSZXNlcnZlZDogbnVsbCxcblx0ICAvLyBXaGVuIGVuYWJsZWQsIGEgcmV0dXJuIGF0IHRoZSB0b3AgbGV2ZWwgaXMgbm90IGNvbnNpZGVyZWQgYW5cblx0ICAvLyBlcnJvci5cblx0ICBhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbjogZmFsc2UsXG5cdCAgLy8gV2hlbiBlbmFibGVkLCBpbXBvcnQvZXhwb3J0IHN0YXRlbWVudHMgYXJlIG5vdCBjb25zdHJhaW5lZCB0b1xuXHQgIC8vIGFwcGVhcmluZyBhdCB0aGUgdG9wIG9mIHRoZSBwcm9ncmFtLlxuXHQgIGFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZTogZmFsc2UsXG5cdCAgLy8gV2hlbiBlbmFibGVkLCBhd2FpdCBpZGVudGlmaWVycyBhcmUgYWxsb3dlZCB0byBhcHBlYXIgYXQgdGhlIHRvcC1sZXZlbCBzY29wZSxcblx0ICAvLyBidXQgdGhleSBhcmUgc3RpbGwgbm90IGFsbG93ZWQgaW4gbm9uLWFzeW5jIGZ1bmN0aW9ucy5cblx0ICBhbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcblx0ICAvLyBXaGVuIGVuYWJsZWQsIGhhc2hiYW5nIGRpcmVjdGl2ZSBpbiB0aGUgYmVnaW5uaW5nIG9mIGZpbGVcblx0ICAvLyBpcyBhbGxvd2VkIGFuZCB0cmVhdGVkIGFzIGEgbGluZSBjb21tZW50LlxuXHQgIGFsbG93SGFzaEJhbmc6IGZhbHNlLFxuXHQgIC8vIFdoZW4gYGxvY2F0aW9uc2AgaXMgb24sIGBsb2NgIHByb3BlcnRpZXMgaG9sZGluZyBvYmplY3RzIHdpdGhcblx0ICAvLyBgc3RhcnRgIGFuZCBgZW5kYCBwcm9wZXJ0aWVzIGluIGB7bGluZSwgY29sdW1ufWAgZm9ybSAod2l0aFxuXHQgIC8vIGxpbmUgYmVpbmcgMS1iYXNlZCBhbmQgY29sdW1uIDAtYmFzZWQpIHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlXG5cdCAgLy8gbm9kZXMuXG5cdCAgbG9jYXRpb25zOiBmYWxzZSxcblx0ICAvLyBBIGZ1bmN0aW9uIGNhbiBiZSBwYXNzZWQgYXMgYG9uVG9rZW5gIG9wdGlvbiwgd2hpY2ggd2lsbFxuXHQgIC8vIGNhdXNlIEFjb3JuIHRvIGNhbGwgdGhhdCBmdW5jdGlvbiB3aXRoIG9iamVjdCBpbiB0aGUgc2FtZVxuXHQgIC8vIGZvcm1hdCBhcyB0b2tlbnMgcmV0dXJuZWQgZnJvbSBgdG9rZW5pemVyKCkuZ2V0VG9rZW4oKWAuIE5vdGVcblx0ICAvLyB0aGF0IHlvdSBhcmUgbm90IGFsbG93ZWQgdG8gY2FsbCB0aGUgcGFyc2VyIGZyb20gdGhlXG5cdCAgLy8gY2FsbGJhY2vigJR0aGF0IHdpbGwgY29ycnVwdCBpdHMgaW50ZXJuYWwgc3RhdGUuXG5cdCAgb25Ub2tlbjogbnVsbCxcblx0ICAvLyBBIGZ1bmN0aW9uIGNhbiBiZSBwYXNzZWQgYXMgYG9uQ29tbWVudGAgb3B0aW9uLCB3aGljaCB3aWxsXG5cdCAgLy8gY2F1c2UgQWNvcm4gdG8gY2FsbCB0aGF0IGZ1bmN0aW9uIHdpdGggYChibG9jaywgdGV4dCwgc3RhcnQsXG5cdCAgLy8gZW5kKWAgcGFyYW1ldGVycyB3aGVuZXZlciBhIGNvbW1lbnQgaXMgc2tpcHBlZC4gYGJsb2NrYCBpcyBhXG5cdCAgLy8gYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBpcyBhIGJsb2NrIChgLyogKi9gKSBjb21tZW50LFxuXHQgIC8vIGB0ZXh0YCBpcyB0aGUgY29udGVudCBvZiB0aGUgY29tbWVudCwgYW5kIGBzdGFydGAgYW5kIGBlbmRgIGFyZVxuXHQgIC8vIGNoYXJhY3RlciBvZmZzZXRzIHRoYXQgZGVub3RlIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBjb21tZW50LlxuXHQgIC8vIFdoZW4gdGhlIGBsb2NhdGlvbnNgIG9wdGlvbiBpcyBvbiwgdHdvIG1vcmUgcGFyYW1ldGVycyBhcmVcblx0ICAvLyBwYXNzZWQsIHRoZSBmdWxsIGB7bGluZSwgY29sdW1ufWAgbG9jYXRpb25zIG9mIHRoZSBzdGFydCBhbmRcblx0ICAvLyBlbmQgb2YgdGhlIGNvbW1lbnRzLiBOb3RlIHRoYXQgeW91IGFyZSBub3QgYWxsb3dlZCB0byBjYWxsIHRoZVxuXHQgIC8vIHBhcnNlciBmcm9tIHRoZSBjYWxsYmFja+KAlHRoYXQgd2lsbCBjb3JydXB0IGl0cyBpbnRlcm5hbCBzdGF0ZS5cblx0ICBvbkNvbW1lbnQ6IG51bGwsXG5cdCAgLy8gTm9kZXMgaGF2ZSB0aGVpciBzdGFydCBhbmQgZW5kIGNoYXJhY3RlcnMgb2Zmc2V0cyByZWNvcmRlZCBpblxuXHQgIC8vIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXMgKGRpcmVjdGx5IG9uIHRoZSBub2RlLCByYXRoZXIgdGhhblxuXHQgIC8vIHRoZSBgbG9jYCBvYmplY3QsIHdoaWNoIGhvbGRzIGxpbmUvY29sdW1uIGRhdGEuIFRvIGFsc28gYWRkIGFcblx0ICAvLyBbc2VtaS1zdGFuZGFyZGl6ZWRdW3JhbmdlXSBgcmFuZ2VgIHByb3BlcnR5IGhvbGRpbmcgYSBgW3N0YXJ0LFxuXHQgIC8vIGVuZF1gIGFycmF5IHdpdGggdGhlIHNhbWUgbnVtYmVycywgc2V0IHRoZSBgcmFuZ2VzYCBvcHRpb24gdG9cblx0ICAvLyBgdHJ1ZWAuXG5cdCAgLy9cblx0ICAvLyBbcmFuZ2VdOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NDU2Nzhcblx0ICByYW5nZXM6IGZhbHNlLFxuXHQgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHBhcnNlIG11bHRpcGxlIGZpbGVzIGludG8gYSBzaW5nbGUgQVNUIGJ5XG5cdCAgLy8gcGFzc2luZyB0aGUgdHJlZSBwcm9kdWNlZCBieSBwYXJzaW5nIHRoZSBmaXJzdCBmaWxlIGFzXG5cdCAgLy8gYHByb2dyYW1gIG9wdGlvbiBpbiBzdWJzZXF1ZW50IHBhcnNlcy4gVGhpcyB3aWxsIGFkZCB0aGVcblx0ICAvLyB0b3BsZXZlbCBmb3JtcyBvZiB0aGUgcGFyc2VkIGZpbGUgdG8gdGhlIGBQcm9ncmFtYCAodG9wKSBub2RlXG5cdCAgLy8gb2YgYW4gZXhpc3RpbmcgcGFyc2UgdHJlZS5cblx0ICBwcm9ncmFtOiBudWxsLFxuXHQgIC8vIFdoZW4gYGxvY2F0aW9uc2AgaXMgb24sIHlvdSBjYW4gcGFzcyB0aGlzIHRvIHJlY29yZCB0aGUgc291cmNlXG5cdCAgLy8gZmlsZSBpbiBldmVyeSBub2RlJ3MgYGxvY2Agb2JqZWN0LlxuXHQgIHNvdXJjZUZpbGU6IG51bGwsXG5cdCAgLy8gVGhpcyB2YWx1ZSwgaWYgZ2l2ZW4sIGlzIHN0b3JlZCBpbiBldmVyeSBub2RlLCB3aGV0aGVyXG5cdCAgLy8gYGxvY2F0aW9uc2AgaXMgb24gb3Igb2ZmLlxuXHQgIGRpcmVjdFNvdXJjZUZpbGU6IG51bGwsXG5cdCAgLy8gV2hlbiBlbmFibGVkLCBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb25zIGFyZSByZXByZXNlbnRlZCBieVxuXHQgIC8vIChub24tc3RhbmRhcmQpIFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uIG5vZGVzXG5cdCAgcHJlc2VydmVQYXJlbnM6IGZhbHNlXG5cdH07XG5cblx0Ly8gSW50ZXJwcmV0IGFuZCBkZWZhdWx0IGFuIG9wdGlvbnMgb2JqZWN0XG5cblx0ZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRzKSB7XG5cdCAgdmFyIG9wdGlvbnMgPSB7fTtcblxuXHQgIGZvciAodmFyIG9wdCBpbiBkZWZhdWx0T3B0aW9ucylcblx0ICAgIHsgb3B0aW9uc1tvcHRdID0gb3B0cyAmJiBoYXMob3B0cywgb3B0KSA/IG9wdHNbb3B0XSA6IGRlZmF1bHRPcHRpb25zW29wdF07IH1cblxuXHQgIGlmIChvcHRpb25zLmVjbWFWZXJzaW9uID49IDIwMTUpXG5cdCAgICB7IG9wdGlvbnMuZWNtYVZlcnNpb24gLT0gMjAwOTsgfVxuXG5cdCAgaWYgKG9wdGlvbnMuYWxsb3dSZXNlcnZlZCA9PSBudWxsKVxuXHQgICAgeyBvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPSBvcHRpb25zLmVjbWFWZXJzaW9uIDwgNTsgfVxuXG5cdCAgaWYgKGlzQXJyYXkob3B0aW9ucy5vblRva2VuKSkge1xuXHQgICAgdmFyIHRva2VucyA9IG9wdGlvbnMub25Ub2tlbjtcblx0ICAgIG9wdGlvbnMub25Ub2tlbiA9IGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW5zLnB1c2godG9rZW4pOyB9O1xuXHQgIH1cblx0ICBpZiAoaXNBcnJheShvcHRpb25zLm9uQ29tbWVudCkpXG5cdCAgICB7IG9wdGlvbnMub25Db21tZW50ID0gcHVzaENvbW1lbnQob3B0aW9ucywgb3B0aW9ucy5vbkNvbW1lbnQpOyB9XG5cblx0ICByZXR1cm4gb3B0aW9uc1xuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaENvbW1lbnQob3B0aW9ucywgYXJyYXkpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24oYmxvY2ssIHRleHQsIHN0YXJ0LCBlbmQsIHN0YXJ0TG9jLCBlbmRMb2MpIHtcblx0ICAgIHZhciBjb21tZW50ID0ge1xuXHQgICAgICB0eXBlOiBibG9jayA/IFwiQmxvY2tcIiA6IFwiTGluZVwiLFxuXHQgICAgICB2YWx1ZTogdGV4dCxcblx0ICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICBlbmQ6IGVuZFxuXHQgICAgfTtcblx0ICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucylcblx0ICAgICAgeyBjb21tZW50LmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBzdGFydExvYywgZW5kTG9jKTsgfVxuXHQgICAgaWYgKG9wdGlvbnMucmFuZ2VzKVxuXHQgICAgICB7IGNvbW1lbnQucmFuZ2UgPSBbc3RhcnQsIGVuZF07IH1cblx0ICAgIGFycmF5LnB1c2goY29tbWVudCk7XG5cdCAgfVxuXHR9XG5cblx0Ly8gRWFjaCBzY29wZSBnZXRzIGEgYml0c2V0IHRoYXQgbWF5IGNvbnRhaW4gdGhlc2UgZmxhZ3Ncblx0dmFyXG5cdCAgICBTQ09QRV9UT1AgPSAxLFxuXHQgICAgU0NPUEVfRlVOQ1RJT04gPSAyLFxuXHQgICAgU0NPUEVfVkFSID0gU0NPUEVfVE9QIHwgU0NPUEVfRlVOQ1RJT04sXG5cdCAgICBTQ09QRV9BU1lOQyA9IDQsXG5cdCAgICBTQ09QRV9HRU5FUkFUT1IgPSA4LFxuXHQgICAgU0NPUEVfQVJST1cgPSAxNixcblx0ICAgIFNDT1BFX1NJTVBMRV9DQVRDSCA9IDMyLFxuXHQgICAgU0NPUEVfU1VQRVIgPSA2NCxcblx0ICAgIFNDT1BFX0RJUkVDVF9TVVBFUiA9IDEyODtcblxuXHRmdW5jdGlvbiBmdW5jdGlvbkZsYWdzKGFzeW5jLCBnZW5lcmF0b3IpIHtcblx0ICByZXR1cm4gU0NPUEVfRlVOQ1RJT04gfCAoYXN5bmMgPyBTQ09QRV9BU1lOQyA6IDApIHwgKGdlbmVyYXRvciA/IFNDT1BFX0dFTkVSQVRPUiA6IDApXG5cdH1cblxuXHQvLyBVc2VkIGluIGNoZWNrTFZhbCBhbmQgZGVjbGFyZU5hbWUgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGEgYmluZGluZ1xuXHR2YXJcblx0ICAgIEJJTkRfTk9ORSA9IDAsIC8vIE5vdCBhIGJpbmRpbmdcblx0ICAgIEJJTkRfVkFSID0gMSwgLy8gVmFyLXN0eWxlIGJpbmRpbmdcblx0ICAgIEJJTkRfTEVYSUNBTCA9IDIsIC8vIExldC0gb3IgY29uc3Qtc3R5bGUgYmluZGluZ1xuXHQgICAgQklORF9GVU5DVElPTiA9IDMsIC8vIEZ1bmN0aW9uIGRlY2xhcmF0aW9uXG5cdCAgICBCSU5EX1NJTVBMRV9DQVRDSCA9IDQsIC8vIFNpbXBsZSAoaWRlbnRpZmllciBwYXR0ZXJuKSBjYXRjaCBiaW5kaW5nXG5cdCAgICBCSU5EX09VVFNJREUgPSA1OyAvLyBTcGVjaWFsIGNhc2UgZm9yIGZ1bmN0aW9uIG5hbWVzIGFzIGJvdW5kIGluc2lkZSB0aGUgZnVuY3Rpb25cblxuXHR2YXIgUGFyc2VyID0gZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMsIGlucHV0LCBzdGFydFBvcykge1xuXHQgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMpO1xuXHQgIHRoaXMuc291cmNlRmlsZSA9IG9wdGlvbnMuc291cmNlRmlsZTtcblx0ICB0aGlzLmtleXdvcmRzID0gd29yZHNSZWdleHAoa2V5d29yZHNbb3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ID8gNiA6IG9wdGlvbnMuc291cmNlVHlwZSA9PT0gXCJtb2R1bGVcIiA/IFwiNW1vZHVsZVwiIDogNV0pO1xuXHQgIHZhciByZXNlcnZlZCA9IFwiXCI7XG5cdCAgaWYgKG9wdGlvbnMuYWxsb3dSZXNlcnZlZCAhPT0gdHJ1ZSkge1xuXHQgICAgZm9yICh2YXIgdiA9IG9wdGlvbnMuZWNtYVZlcnNpb247OyB2LS0pXG5cdCAgICAgIHsgaWYgKHJlc2VydmVkID0gcmVzZXJ2ZWRXb3Jkc1t2XSkgeyBicmVhayB9IH1cblx0ICAgIGlmIChvcHRpb25zLnNvdXJjZVR5cGUgPT09IFwibW9kdWxlXCIpIHsgcmVzZXJ2ZWQgKz0gXCIgYXdhaXRcIjsgfVxuXHQgIH1cblx0ICB0aGlzLnJlc2VydmVkV29yZHMgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZCk7XG5cdCAgdmFyIHJlc2VydmVkU3RyaWN0ID0gKHJlc2VydmVkID8gcmVzZXJ2ZWQgKyBcIiBcIiA6IFwiXCIpICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3Q7XG5cdCAgdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0ID0gd29yZHNSZWdleHAocmVzZXJ2ZWRTdHJpY3QpO1xuXHQgIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZFN0cmljdCArIFwiIFwiICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcblx0ICB0aGlzLmlucHV0ID0gU3RyaW5nKGlucHV0KTtcblxuXHQgIC8vIFVzZWQgdG8gc2lnbmFsIHRvIGNhbGxlcnMgb2YgYHJlYWRXb3JkMWAgd2hldGhlciB0aGUgd29yZFxuXHQgIC8vIGNvbnRhaW5lZCBhbnkgZXNjYXBlIHNlcXVlbmNlcy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB3b3JkcyB3aXRoXG5cdCAgLy8gZXNjYXBlIHNlcXVlbmNlcyBtdXN0IG5vdCBiZSBpbnRlcnByZXRlZCBhcyBrZXl3b3Jkcy5cblx0ICB0aGlzLmNvbnRhaW5zRXNjID0gZmFsc2U7XG5cblx0ICAvLyBTZXQgdXAgdG9rZW4gc3RhdGVcblxuXHQgIC8vIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSB0b2tlbml6ZXIgaW4gdGhlIGlucHV0LlxuXHQgIGlmIChzdGFydFBvcykge1xuXHQgICAgdGhpcy5wb3MgPSBzdGFydFBvcztcblx0ICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLCBzdGFydFBvcyAtIDEpICsgMTtcblx0ICAgIHRoaXMuY3VyTGluZSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5saW5lU3RhcnQpLnNwbGl0KGxpbmVCcmVhaykubGVuZ3RoO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aGlzLnBvcyA9IHRoaXMubGluZVN0YXJ0ID0gMDtcblx0ICAgIHRoaXMuY3VyTGluZSA9IDE7XG5cdCAgfVxuXG5cdCAgLy8gUHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0b2tlbjpcblx0ICAvLyBJdHMgdHlwZVxuXHQgIHRoaXMudHlwZSA9IHR5cGVzLmVvZjtcblx0ICAvLyBGb3IgdG9rZW5zIHRoYXQgaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIHRoYW4gdGhlaXIgdHlwZSwgdGhlIHZhbHVlXG5cdCAgdGhpcy52YWx1ZSA9IG51bGw7XG5cdCAgLy8gSXRzIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0XG5cdCAgdGhpcy5zdGFydCA9IHRoaXMuZW5kID0gdGhpcy5wb3M7XG5cdCAgLy8gQW5kLCBpZiBsb2NhdGlvbnMgYXJlIHVzZWQsIHRoZSB7bGluZSwgY29sdW1ufSBvYmplY3Rcblx0ICAvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcblx0ICB0aGlzLnN0YXJ0TG9jID0gdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKCk7XG5cblx0ICAvLyBQb3NpdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIHByZXZpb3VzIHRva2VuXG5cdCAgdGhpcy5sYXN0VG9rRW5kTG9jID0gdGhpcy5sYXN0VG9rU3RhcnRMb2MgPSBudWxsO1xuXHQgIHRoaXMubGFzdFRva1N0YXJ0ID0gdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5wb3M7XG5cblx0ICAvLyBUaGUgY29udGV4dCBzdGFjayBpcyB1c2VkIHRvIHN1cGVyZmljaWFsbHkgdHJhY2sgc3ludGFjdGljXG5cdCAgLy8gY29udGV4dCB0byBwcmVkaWN0IHdoZXRoZXIgYSByZWd1bGFyIGV4cHJlc3Npb24gaXMgYWxsb3dlZCBpbiBhXG5cdCAgLy8gZ2l2ZW4gcG9zaXRpb24uXG5cdCAgdGhpcy5jb250ZXh0ID0gdGhpcy5pbml0aWFsQ29udGV4dCgpO1xuXHQgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXG5cdCAgLy8gRmlndXJlIG91dCBpZiBpdCdzIGEgbW9kdWxlIGNvZGUuXG5cdCAgdGhpcy5pbk1vZHVsZSA9IG9wdGlvbnMuc291cmNlVHlwZSA9PT0gXCJtb2R1bGVcIjtcblx0ICB0aGlzLnN0cmljdCA9IHRoaXMuaW5Nb2R1bGUgfHwgdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5wb3MpO1xuXG5cdCAgLy8gVXNlZCB0byBzaWduaWZ5IHRoZSBzdGFydCBvZiBhIHBvdGVudGlhbCBhcnJvdyBmdW5jdGlvblxuXHQgIHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IC0xO1xuXG5cdCAgLy8gUG9zaXRpb25zIHRvIGRlbGF5ZWQtY2hlY2sgdGhhdCB5aWVsZC9hd2FpdCBkb2VzIG5vdCBleGlzdCBpbiBkZWZhdWx0IHBhcmFtZXRlcnMuXG5cdCAgdGhpcy55aWVsZFBvcyA9IHRoaXMuYXdhaXRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3MgPSAwO1xuXHQgIC8vIExhYmVscyBpbiBzY29wZS5cblx0ICB0aGlzLmxhYmVscyA9IFtdO1xuXHQgIC8vIFRodXMtZmFyIHVuZGVmaW5lZCBleHBvcnRzLlxuXHQgIHRoaXMudW5kZWZpbmVkRXhwb3J0cyA9IHt9O1xuXG5cdCAgLy8gSWYgZW5hYmxlZCwgc2tpcCBsZWFkaW5nIGhhc2hiYW5nIGxpbmUuXG5cdCAgaWYgKHRoaXMucG9zID09PSAwICYmIG9wdGlvbnMuYWxsb3dIYXNoQmFuZyAmJiB0aGlzLmlucHV0LnNsaWNlKDAsIDIpID09PSBcIiMhXCIpXG5cdCAgICB7IHRoaXMuc2tpcExpbmVDb21tZW50KDIpOyB9XG5cblx0ICAvLyBTY29wZSB0cmFja2luZyBmb3IgZHVwbGljYXRlIHZhcmlhYmxlIG5hbWVzIChzZWUgc2NvcGUuanMpXG5cdCAgdGhpcy5zY29wZVN0YWNrID0gW107XG5cdCAgdGhpcy5lbnRlclNjb3BlKFNDT1BFX1RPUCk7XG5cblx0ICAvLyBGb3IgUmVnRXhwIHZhbGlkYXRpb25cblx0ICB0aGlzLnJlZ2V4cFN0YXRlID0gbnVsbDtcblx0fTtcblxuXHR2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpbkZ1bmN0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluR2VuZXJhdG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluQXN5bmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYWxsb3dTdXBlcjogeyBjb25maWd1cmFibGU6IHRydWUgfSxhbGxvd0RpcmVjdFN1cGVyOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHRyZWF0RnVuY3Rpb25zQXNWYXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuXHRQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKCkge1xuXHQgIHZhciBub2RlID0gdGhpcy5vcHRpb25zLnByb2dyYW0gfHwgdGhpcy5zdGFydE5vZGUoKTtcblx0ICB0aGlzLm5leHRUb2tlbigpO1xuXHQgIHJldHVybiB0aGlzLnBhcnNlVG9wTGV2ZWwobm9kZSlcblx0fTtcblxuXHRwcm90b3R5cGVBY2Nlc3NvcnMuaW5GdW5jdGlvbi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VmFyU2NvcGUoKS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSA+IDAgfTtcblx0cHJvdG90eXBlQWNjZXNzb3JzLmluR2VuZXJhdG9yLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmN1cnJlbnRWYXJTY29wZSgpLmZsYWdzICYgU0NPUEVfR0VORVJBVE9SKSA+IDAgfTtcblx0cHJvdG90eXBlQWNjZXNzb3JzLmluQXN5bmMuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuY3VycmVudFZhclNjb3BlKCkuZmxhZ3MgJiBTQ09QRV9BU1lOQykgPiAwIH07XG5cdHByb3RvdHlwZUFjY2Vzc29ycy5hbGxvd1N1cGVyLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKS5mbGFncyAmIFNDT1BFX1NVUEVSKSA+IDAgfTtcblx0cHJvdG90eXBlQWNjZXNzb3JzLmFsbG93RGlyZWN0U3VwZXIuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuY3VycmVudFRoaXNTY29wZSgpLmZsYWdzICYgU0NPUEVfRElSRUNUX1NVUEVSKSA+IDAgfTtcblx0cHJvdG90eXBlQWNjZXNzb3JzLnRyZWF0RnVuY3Rpb25zQXNWYXIuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZSh0aGlzLmN1cnJlbnRTY29wZSgpKSB9O1xuXG5cdC8vIFN3aXRjaCB0byBhIGdldHRlciBmb3IgNy4wLjAuXG5cdFBhcnNlci5wcm90b3R5cGUuaW5Ob25BcnJvd0Z1bmN0aW9uID0gZnVuY3Rpb24gaW5Ob25BcnJvd0Z1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSA+IDAgfTtcblxuXHRQYXJzZXIuZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kICgpIHtcblx0ICAgIHZhciBwbHVnaW5zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICB3aGlsZSAoIGxlbi0tICkgcGx1Z2luc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cdCAgdmFyIGNscyA9IHRoaXM7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7IGNscyA9IHBsdWdpbnNbaV0oY2xzKTsgfVxuXHQgIHJldHVybiBjbHNcblx0fTtcblxuXHRQYXJzZXIucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICByZXR1cm4gbmV3IHRoaXMob3B0aW9ucywgaW5wdXQpLnBhcnNlKClcblx0fTtcblxuXHRQYXJzZXIucGFyc2VFeHByZXNzaW9uQXQgPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb25BdCAoaW5wdXQsIHBvcywgb3B0aW9ucykge1xuXHQgIHZhciBwYXJzZXIgPSBuZXcgdGhpcyhvcHRpb25zLCBpbnB1dCwgcG9zKTtcblx0ICBwYXJzZXIubmV4dFRva2VuKCk7XG5cdCAgcmV0dXJuIHBhcnNlci5wYXJzZUV4cHJlc3Npb24oKVxuXHR9O1xuXG5cdFBhcnNlci50b2tlbml6ZXIgPSBmdW5jdGlvbiB0b2tlbml6ZXIgKGlucHV0LCBvcHRpb25zKSB7XG5cdCAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbnMsIGlucHV0KVxuXHR9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBQYXJzZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuXHR2YXIgcHAgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cdC8vICMjIFBhcnNlciB1dGlsaXRpZXNcblxuXHR2YXIgbGl0ZXJhbCA9IC9eKD86JygoPzpcXFxcLnxbXiddKSo/KSd8XCIoKD86XFxcXC58W15cIl0pKj8pXCIpLztcblx0cHAuc3RyaWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oc3RhcnQpIHtcblx0ICBmb3IgKDs7KSB7XG5cdCAgICAvLyBUcnkgdG8gZmluZCBzdHJpbmcgbGl0ZXJhbC5cblx0ICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHN0YXJ0O1xuXHQgICAgc3RhcnQgKz0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KVswXS5sZW5ndGg7XG5cdCAgICB2YXIgbWF0Y2ggPSBsaXRlcmFsLmV4ZWModGhpcy5pbnB1dC5zbGljZShzdGFydCkpO1xuXHQgICAgaWYgKCFtYXRjaCkgeyByZXR1cm4gZmFsc2UgfVxuXHQgICAgaWYgKChtYXRjaFsxXSB8fCBtYXRjaFsyXSkgPT09IFwidXNlIHN0cmljdFwiKSB7XG5cdCAgICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHQgICAgICB2YXIgc3BhY2VBZnRlciA9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dCksIGVuZCA9IHNwYWNlQWZ0ZXIuaW5kZXggKyBzcGFjZUFmdGVyWzBdLmxlbmd0aDtcblx0ICAgICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJBdChlbmQpO1xuXHQgICAgICByZXR1cm4gbmV4dCA9PT0gXCI7XCIgfHwgbmV4dCA9PT0gXCJ9XCIgfHxcblx0ICAgICAgICAobGluZUJyZWFrLnRlc3Qoc3BhY2VBZnRlclswXSkgJiZcblx0ICAgICAgICAgISgvWyhgLlsrXFwtLyolPD49LD9eJl0vLnRlc3QobmV4dCkgfHwgbmV4dCA9PT0gXCIhXCIgJiYgdGhpcy5pbnB1dC5jaGFyQXQoZW5kICsgMSkgPT09IFwiPVwiKSlcblx0ICAgIH1cblx0ICAgIHN0YXJ0ICs9IG1hdGNoWzBdLmxlbmd0aDtcblxuXHQgICAgLy8gU2tpcCBzZW1pY29sb24sIGlmIGFueS5cblx0ICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHN0YXJ0O1xuXHQgICAgc3RhcnQgKz0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KVswXS5sZW5ndGg7XG5cdCAgICBpZiAodGhpcy5pbnB1dFtzdGFydF0gPT09IFwiO1wiKVxuXHQgICAgICB7IHN0YXJ0Kys7IH1cblx0ICB9XG5cdH07XG5cblx0Ly8gUHJlZGljYXRlIHRoYXQgdGVzdHMgd2hldGhlciB0aGUgbmV4dCB0b2tlbiBpcyBvZiB0aGUgZ2l2ZW5cblx0Ly8gdHlwZSwgYW5kIGlmIHllcywgY29uc3VtZXMgaXQgYXMgYSBzaWRlIGVmZmVjdC5cblxuXHRwcC5lYXQgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZSkge1xuXHQgICAgdGhpcy5uZXh0KCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cdH07XG5cblx0Ly8gVGVzdHMgd2hldGhlciBwYXJzZWQgdG9rZW4gaXMgYSBjb250ZXh0dWFsIGtleXdvcmQuXG5cblx0cHAuaXNDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xuXHQgIHJldHVybiB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgJiYgdGhpcy52YWx1ZSA9PT0gbmFtZSAmJiAhdGhpcy5jb250YWluc0VzY1xuXHR9O1xuXG5cdC8vIENvbnN1bWVzIGNvbnRleHR1YWwga2V5d29yZCBpZiBwb3NzaWJsZS5cblxuXHRwcC5lYXRDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xuXHQgIGlmICghdGhpcy5pc0NvbnRleHR1YWwobmFtZSkpIHsgcmV0dXJuIGZhbHNlIH1cblx0ICB0aGlzLm5leHQoKTtcblx0ICByZXR1cm4gdHJ1ZVxuXHR9O1xuXG5cdC8vIEFzc2VydHMgdGhhdCBmb2xsb3dpbmcgdG9rZW4gaXMgZ2l2ZW4gY29udGV4dHVhbCBrZXl3b3JkLlxuXG5cdHBwLmV4cGVjdENvbnRleHR1YWwgPSBmdW5jdGlvbihuYW1lKSB7XG5cdCAgaWYgKCF0aGlzLmVhdENvbnRleHR1YWwobmFtZSkpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0fTtcblxuXHQvLyBUZXN0IHdoZXRoZXIgYSBzZW1pY29sb24gY2FuIGJlIGluc2VydGVkIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuXG5cdHBwLmNhbkluc2VydFNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB0aGlzLnR5cGUgPT09IHR5cGVzLmVvZiB8fFxuXHQgICAgdGhpcy50eXBlID09PSB0eXBlcy5icmFjZVIgfHxcblx0ICAgIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcblx0fTtcblxuXHRwcC5pbnNlcnRTZW1pY29sb24gPSBmdW5jdGlvbigpIHtcblx0ICBpZiAodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5vbkluc2VydGVkU2VtaWNvbG9uKVxuXHQgICAgICB7IHRoaXMub3B0aW9ucy5vbkluc2VydGVkU2VtaWNvbG9uKHRoaXMubGFzdFRva0VuZCwgdGhpcy5sYXN0VG9rRW5kTG9jKTsgfVxuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdH07XG5cblx0Ly8gQ29uc3VtZSBhIHNlbWljb2xvbiwgb3IsIGZhaWxpbmcgdGhhdCwgc2VlIGlmIHdlIGFyZSBhbGxvd2VkIHRvXG5cdC8vIHByZXRlbmQgdGhhdCB0aGVyZSBpcyBhIHNlbWljb2xvbiBhdCB0aGlzIHBvc2l0aW9uLlxuXG5cdHBwLnNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuXHQgIGlmICghdGhpcy5lYXQodHlwZXMuc2VtaSkgJiYgIXRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0fTtcblxuXHRwcC5hZnRlclRyYWlsaW5nQ29tbWEgPSBmdW5jdGlvbih0b2tUeXBlLCBub3ROZXh0KSB7XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdG9rVHlwZSkge1xuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5vblRyYWlsaW5nQ29tbWEpXG5cdCAgICAgIHsgdGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSh0aGlzLmxhc3RUb2tTdGFydCwgdGhpcy5sYXN0VG9rU3RhcnRMb2MpOyB9XG5cdCAgICBpZiAoIW5vdE5leHQpXG5cdCAgICAgIHsgdGhpcy5uZXh0KCk7IH1cblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXHR9O1xuXG5cdC8vIEV4cGVjdCBhIHRva2VuIG9mIGEgZ2l2ZW4gdHlwZS4gSWYgZm91bmQsIGNvbnN1bWUgaXQsIG90aGVyd2lzZSxcblx0Ly8gcmFpc2UgYW4gdW5leHBlY3RlZCB0b2tlbiBlcnJvci5cblxuXHRwcC5leHBlY3QgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgdGhpcy5lYXQodHlwZSkgfHwgdGhpcy51bmV4cGVjdGVkKCk7XG5cdH07XG5cblx0Ly8gUmFpc2UgYW4gdW5leHBlY3RlZCB0b2tlbiBlcnJvci5cblxuXHRwcC51bmV4cGVjdGVkID0gZnVuY3Rpb24ocG9zKSB7XG5cdCAgdGhpcy5yYWlzZShwb3MgIT0gbnVsbCA/IHBvcyA6IHRoaXMuc3RhcnQsIFwiVW5leHBlY3RlZCB0b2tlblwiKTtcblx0fTtcblxuXHRmdW5jdGlvbiBEZXN0cnVjdHVyaW5nRXJyb3JzKCkge1xuXHQgIHRoaXMuc2hvcnRoYW5kQXNzaWduID1cblx0ICB0aGlzLnRyYWlsaW5nQ29tbWEgPVxuXHQgIHRoaXMucGFyZW50aGVzaXplZEFzc2lnbiA9XG5cdCAgdGhpcy5wYXJlbnRoZXNpemVkQmluZCA9XG5cdCAgdGhpcy5kb3VibGVQcm90byA9XG5cdCAgICAtMTtcblx0fVxuXG5cdHBwLmNoZWNrUGF0dGVybkVycm9ycyA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGlzQXNzaWduKSB7XG5cdCAgaWYgKCFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHJldHVybiB9XG5cdCAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA+IC0xKVxuXHQgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hLCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuXHQgIHZhciBwYXJlbnMgPSBpc0Fzc2lnbiA/IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA6IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQ7XG5cdCAgaWYgKHBhcmVucyA+IC0xKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShwYXJlbnMsIFwiUGFyZW50aGVzaXplZCBwYXR0ZXJuXCIpOyB9XG5cdH07XG5cblx0cHAuY2hlY2tFeHByZXNzaW9uRXJyb3JzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgYW5kVGhyb3cpIHtcblx0ICBpZiAoIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgcmV0dXJuIGZhbHNlIH1cblx0ICB2YXIgc2hvcnRoYW5kQXNzaWduID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ247XG5cdCAgdmFyIGRvdWJsZVByb3RvID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90bztcblx0ICBpZiAoIWFuZFRocm93KSB7IHJldHVybiBzaG9ydGhhbmRBc3NpZ24gPj0gMCB8fCBkb3VibGVQcm90byA+PSAwIH1cblx0ICBpZiAoc2hvcnRoYW5kQXNzaWduID49IDApXG5cdCAgICB7IHRoaXMucmFpc2Uoc2hvcnRoYW5kQXNzaWduLCBcIlNob3J0aGFuZCBwcm9wZXJ0eSBhc3NpZ25tZW50cyBhcmUgdmFsaWQgb25seSBpbiBkZXN0cnVjdHVyaW5nIHBhdHRlcm5zXCIpOyB9XG5cdCAgaWYgKGRvdWJsZVByb3RvID49IDApXG5cdCAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShkb3VibGVQcm90bywgXCJSZWRlZmluaXRpb24gb2YgX19wcm90b19fIHByb3BlcnR5XCIpOyB9XG5cdH07XG5cblx0cHAuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMueWllbGRQb3MgJiYgKCF0aGlzLmF3YWl0UG9zIHx8IHRoaXMueWllbGRQb3MgPCB0aGlzLmF3YWl0UG9zKSlcblx0ICAgIHsgdGhpcy5yYWlzZSh0aGlzLnlpZWxkUG9zLCBcIllpZWxkIGV4cHJlc3Npb24gY2Fubm90IGJlIGEgZGVmYXVsdCB2YWx1ZVwiKTsgfVxuXHQgIGlmICh0aGlzLmF3YWl0UG9zKVxuXHQgICAgeyB0aGlzLnJhaXNlKHRoaXMuYXdhaXRQb3MsIFwiQXdhaXQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgYSBkZWZhdWx0IHZhbHVlXCIpOyB9XG5cdH07XG5cblx0cHAuaXNTaW1wbGVBc3NpZ25UYXJnZXQgPSBmdW5jdGlvbihleHByKSB7XG5cdCAgaWYgKGV4cHIudHlwZSA9PT0gXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiKVxuXHQgICAgeyByZXR1cm4gdGhpcy5pc1NpbXBsZUFzc2lnblRhcmdldChleHByLmV4cHJlc3Npb24pIH1cblx0ICByZXR1cm4gZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiB8fCBleHByLnR5cGUgPT09IFwiTWVtYmVyRXhwcmVzc2lvblwiXG5cdH07XG5cblx0dmFyIHBwJDEgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cdC8vICMjIyBTdGF0ZW1lbnQgcGFyc2luZ1xuXG5cdC8vIFBhcnNlIGEgcHJvZ3JhbS4gSW5pdGlhbGl6ZXMgdGhlIHBhcnNlciwgcmVhZHMgYW55IG51bWJlciBvZlxuXHQvLyBzdGF0ZW1lbnRzLCBhbmQgd3JhcHMgdGhlbSBpbiBhIFByb2dyYW0gbm9kZS4gIE9wdGlvbmFsbHkgdGFrZXMgYVxuXHQvLyBgcHJvZ3JhbWAgYXJndW1lbnQuICBJZiBwcmVzZW50LCB0aGUgc3RhdGVtZW50cyB3aWxsIGJlIGFwcGVuZGVkXG5cdC8vIHRvIGl0cyBib2R5IGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgbm9kZS5cblxuXHRwcCQxLnBhcnNlVG9wTGV2ZWwgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgdmFyIGV4cG9ydHMgPSB7fTtcblx0ICBpZiAoIW5vZGUuYm9keSkgeyBub2RlLmJvZHkgPSBbXTsgfVxuXHQgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmVvZikge1xuXHQgICAgdmFyIHN0bXQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwsIHRydWUsIGV4cG9ydHMpO1xuXHQgICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG5cdCAgfVxuXHQgIGlmICh0aGlzLmluTW9kdWxlKVxuXHQgICAgeyBmb3IgKHZhciBpID0gMCwgbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMudW5kZWZpbmVkRXhwb3J0cyk7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuXHQgICAgICB7XG5cdCAgICAgICAgdmFyIG5hbWUgPSBsaXN0W2ldO1xuXG5cdCAgICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMudW5kZWZpbmVkRXhwb3J0c1tuYW1lXS5zdGFydCwgKFwiRXhwb3J0ICdcIiArIG5hbWUgKyBcIicgaXMgbm90IGRlZmluZWRcIikpO1xuXHQgICAgICB9IH1cblx0ICB0aGlzLmFkYXB0RGlyZWN0aXZlUHJvbG9ndWUobm9kZS5ib2R5KTtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBub2RlLnNvdXJjZVR5cGUgPSB0aGlzLm9wdGlvbnMuc291cmNlVHlwZTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUHJvZ3JhbVwiKVxuXHR9O1xuXG5cdHZhciBsb29wTGFiZWwgPSB7a2luZDogXCJsb29wXCJ9LCBzd2l0Y2hMYWJlbCA9IHtraW5kOiBcInN3aXRjaFwifTtcblxuXHRwcCQxLmlzTGV0ID0gZnVuY3Rpb24oY29udGV4dCkge1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2IHx8ICF0aGlzLmlzQ29udGV4dHVhbChcImxldFwiKSkgeyByZXR1cm4gZmFsc2UgfVxuXHQgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuXHQgIHZhciBza2lwID0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KTtcblx0ICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGgsIG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcblx0ICAvLyBGb3IgYW1iaWd1b3VzIGNhc2VzLCBkZXRlcm1pbmUgaWYgYSBMZXhpY2FsRGVjbGFyYXRpb24gKG9yIG9ubHkgYVxuXHQgIC8vIFN0YXRlbWVudCkgaXMgYWxsb3dlZCBoZXJlLiBJZiBjb250ZXh0IGlzIG5vdCBlbXB0eSB0aGVuIG9ubHkgYSBTdGF0ZW1lbnRcblx0ICAvLyBpcyBhbGxvd2VkLiBIb3dldmVyLCBgbGV0IFtgIGlzIGFuIGV4cGxpY2l0IG5lZ2F0aXZlIGxvb2thaGVhZCBmb3Jcblx0ICAvLyBFeHByZXNzaW9uU3RhdGVtZW50LCBzbyBzcGVjaWFsLWNhc2UgaXQgZmlyc3QuXG5cdCAgaWYgKG5leHRDaCA9PT0gOTEpIHsgcmV0dXJuIHRydWUgfSAvLyAnWydcblx0ICBpZiAoY29udGV4dCkgeyByZXR1cm4gZmFsc2UgfVxuXG5cdCAgaWYgKG5leHRDaCA9PT0gMTIzKSB7IHJldHVybiB0cnVlIH0gLy8gJ3snXG5cdCAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KG5leHRDaCwgdHJ1ZSkpIHtcblx0ICAgIHZhciBwb3MgPSBuZXh0ICsgMTtcblx0ICAgIHdoaWxlIChpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckNvZGVBdChwb3MpLCB0cnVlKSkgeyArK3BvczsgfVxuXHQgICAgdmFyIGlkZW50ID0gdGhpcy5pbnB1dC5zbGljZShuZXh0LCBwb3MpO1xuXHQgICAgaWYgKCFrZXl3b3JkUmVsYXRpb25hbE9wZXJhdG9yLnRlc3QoaWRlbnQpKSB7IHJldHVybiB0cnVlIH1cblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gY2hlY2sgJ2FzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBmdW5jdGlvbidcblx0Ly8gLSAnYXN5bmMgLypmb28qLyBmdW5jdGlvbicgaXMgT0suXG5cdC8vIC0gJ2FzeW5jIC8qXFxuKi8gZnVuY3Rpb24nIGlzIGludmFsaWQuXG5cdHBwJDEuaXNBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDggfHwgIXRoaXMuaXNDb250ZXh0dWFsKFwiYXN5bmNcIikpXG5cdCAgICB7IHJldHVybiBmYWxzZSB9XG5cblx0ICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvcztcblx0ICB2YXIgc2tpcCA9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dCk7XG5cdCAgdmFyIG5leHQgPSB0aGlzLnBvcyArIHNraXBbMF0ubGVuZ3RoO1xuXHQgIHJldHVybiAhbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLnBvcywgbmV4dCkpICYmXG5cdCAgICB0aGlzLmlucHV0LnNsaWNlKG5leHQsIG5leHQgKyA4KSA9PT0gXCJmdW5jdGlvblwiICYmXG5cdCAgICAobmV4dCArIDggPT09IHRoaXMuaW5wdXQubGVuZ3RoIHx8ICFpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckF0KG5leHQgKyA4KSkpXG5cdH07XG5cblx0Ly8gUGFyc2UgYSBzaW5nbGUgc3RhdGVtZW50LlxuXHQvL1xuXHQvLyBJZiBleHBlY3RpbmcgYSBzdGF0ZW1lbnQgYW5kIGZpbmRpbmcgYSBzbGFzaCBvcGVyYXRvciwgcGFyc2UgYVxuXHQvLyByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbC4gVGhpcyBpcyB0byBoYW5kbGUgY2FzZXMgbGlrZVxuXHQvLyBgaWYgKGZvbykgL2JsYWgvLmV4ZWMoZm9vKWAsIHdoZXJlIGxvb2tpbmcgYXQgdGhlIHByZXZpb3VzIHRva2VuXG5cdC8vIGRvZXMgbm90IGhlbHAuXG5cblx0cHAkMS5wYXJzZVN0YXRlbWVudCA9IGZ1bmN0aW9uKGNvbnRleHQsIHRvcExldmVsLCBleHBvcnRzKSB7XG5cdCAgdmFyIHN0YXJ0dHlwZSA9IHRoaXMudHlwZSwgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGtpbmQ7XG5cblx0ICBpZiAodGhpcy5pc0xldChjb250ZXh0KSkge1xuXHQgICAgc3RhcnR0eXBlID0gdHlwZXMuX3Zhcjtcblx0ICAgIGtpbmQgPSBcImxldFwiO1xuXHQgIH1cblxuXHQgIC8vIE1vc3QgdHlwZXMgb2Ygc3RhdGVtZW50cyBhcmUgcmVjb2duaXplZCBieSB0aGUga2V5d29yZCB0aGV5XG5cdCAgLy8gc3RhcnQgd2l0aC4gTWFueSBhcmUgdHJpdmlhbCB0byBwYXJzZSwgc29tZSByZXF1aXJlIGEgYml0IG9mXG5cdCAgLy8gY29tcGxleGl0eS5cblxuXHQgIHN3aXRjaCAoc3RhcnR0eXBlKSB7XG5cdCAgY2FzZSB0eXBlcy5fYnJlYWs6IGNhc2UgdHlwZXMuX2NvbnRpbnVlOiByZXR1cm4gdGhpcy5wYXJzZUJyZWFrQ29udGludWVTdGF0ZW1lbnQobm9kZSwgc3RhcnR0eXBlLmtleXdvcmQpXG5cdCAgY2FzZSB0eXBlcy5fZGVidWdnZXI6IHJldHVybiB0aGlzLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLl9kbzogcmV0dXJuIHRoaXMucGFyc2VEb1N0YXRlbWVudChub2RlKVxuXHQgIGNhc2UgdHlwZXMuX2ZvcjogcmV0dXJuIHRoaXMucGFyc2VGb3JTdGF0ZW1lbnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLl9mdW5jdGlvbjpcblx0ICAgIC8vIEZ1bmN0aW9uIGFzIHNvbGUgYm9keSBvZiBlaXRoZXIgYW4gaWYgc3RhdGVtZW50IG9yIGEgbGFiZWxlZCBzdGF0ZW1lbnRcblx0ICAgIC8vIHdvcmtzLCBidXQgbm90IHdoZW4gaXQgaXMgcGFydCBvZiBhIGxhYmVsZWQgc3RhdGVtZW50IHRoYXQgaXMgdGhlIHNvbGVcblx0ICAgIC8vIGJvZHkgb2YgYW4gaWYgc3RhdGVtZW50LlxuXHQgICAgaWYgKChjb250ZXh0ICYmICh0aGlzLnN0cmljdCB8fCBjb250ZXh0ICE9PSBcImlmXCIgJiYgY29udGV4dCAhPT0gXCJsYWJlbFwiKSkgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQobm9kZSwgZmFsc2UsICFjb250ZXh0KVxuXHQgIGNhc2UgdHlwZXMuX2NsYXNzOlxuXHQgICAgaWYgKGNvbnRleHQpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgIHJldHVybiB0aGlzLnBhcnNlQ2xhc3Mobm9kZSwgdHJ1ZSlcblx0ICBjYXNlIHR5cGVzLl9pZjogcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKVxuXHQgIGNhc2UgdHlwZXMuX3JldHVybjogcmV0dXJuIHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLl9zd2l0Y2g6IHJldHVybiB0aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KG5vZGUpXG5cdCAgY2FzZSB0eXBlcy5fdGhyb3c6IHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLl90cnk6IHJldHVybiB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KG5vZGUpXG5cdCAgY2FzZSB0eXBlcy5fY29uc3Q6IGNhc2UgdHlwZXMuX3Zhcjpcblx0ICAgIGtpbmQgPSBraW5kIHx8IHRoaXMudmFsdWU7XG5cdCAgICBpZiAoY29udGV4dCAmJiBraW5kICE9PSBcInZhclwiKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICByZXR1cm4gdGhpcy5wYXJzZVZhclN0YXRlbWVudChub2RlLCBraW5kKVxuXHQgIGNhc2UgdHlwZXMuX3doaWxlOiByZXR1cm4gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KG5vZGUpXG5cdCAgY2FzZSB0eXBlcy5fd2l0aDogcmV0dXJuIHRoaXMucGFyc2VXaXRoU3RhdGVtZW50KG5vZGUpXG5cdCAgY2FzZSB0eXBlcy5icmFjZUw6IHJldHVybiB0aGlzLnBhcnNlQmxvY2sodHJ1ZSwgbm9kZSlcblx0ICBjYXNlIHR5cGVzLnNlbWk6IHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLl9leHBvcnQ6XG5cdCAgY2FzZSB0eXBlcy5faW1wb3J0OlxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+IDEwICYmIHN0YXJ0dHlwZSA9PT0gdHlwZXMuX2ltcG9ydCkge1xuXHQgICAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvcztcblx0ICAgICAgdmFyIHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuXHQgICAgICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGgsIG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcblx0ICAgICAgaWYgKG5leHRDaCA9PT0gNDAgfHwgbmV4dENoID09PSA0NikgLy8gJygnIG9yICcuJ1xuXHQgICAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUsIHRoaXMucGFyc2VFeHByZXNzaW9uKCkpIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKSB7XG5cdCAgICAgIGlmICghdG9wTGV2ZWwpXG5cdCAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsXCIpOyB9XG5cdCAgICAgIGlmICghdGhpcy5pbk1vZHVsZSlcblx0ICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInaW1wb3J0JyBhbmQgJ2V4cG9ydCcgbWF5IGFwcGVhciBvbmx5IHdpdGggJ3NvdXJjZVR5cGU6IG1vZHVsZSdcIik7IH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBzdGFydHR5cGUgPT09IHR5cGVzLl9pbXBvcnQgPyB0aGlzLnBhcnNlSW1wb3J0KG5vZGUpIDogdGhpcy5wYXJzZUV4cG9ydChub2RlLCBleHBvcnRzKVxuXG5cdCAgICAvLyBJZiB0aGUgc3RhdGVtZW50IGRvZXMgbm90IHN0YXJ0IHdpdGggYSBzdGF0ZW1lbnQga2V5d29yZCBvciBhXG5cdCAgICAvLyBicmFjZSwgaXQncyBhbiBFeHByZXNzaW9uU3RhdGVtZW50IG9yIExhYmVsZWRTdGF0ZW1lbnQuIFdlXG5cdCAgICAvLyBzaW1wbHkgc3RhcnQgcGFyc2luZyBhbiBleHByZXNzaW9uLCBhbmQgYWZ0ZXJ3YXJkcywgaWYgdGhlXG5cdCAgICAvLyBuZXh0IHRva2VuIGlzIGEgY29sb24gYW5kIHRoZSBleHByZXNzaW9uIHdhcyBhIHNpbXBsZVxuXHQgICAgLy8gSWRlbnRpZmllciBub2RlLCB3ZSBzd2l0Y2ggdG8gaW50ZXJwcmV0aW5nIGl0IGFzIGEgbGFiZWwuXG5cdCAgZGVmYXVsdDpcblx0ICAgIGlmICh0aGlzLmlzQXN5bmNGdW5jdGlvbigpKSB7XG5cdCAgICAgIGlmIChjb250ZXh0KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICAgIHRoaXMubmV4dCgpO1xuXHQgICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50KG5vZGUsIHRydWUsICFjb250ZXh0KVxuXHQgICAgfVxuXG5cdCAgICB2YXIgbWF5YmVOYW1lID0gdGhpcy52YWx1ZSwgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICBpZiAoc3RhcnR0eXBlID09PSB0eXBlcy5uYW1lICYmIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgdGhpcy5lYXQodHlwZXMuY29sb24pKVxuXHQgICAgICB7IHJldHVybiB0aGlzLnBhcnNlTGFiZWxlZFN0YXRlbWVudChub2RlLCBtYXliZU5hbWUsIGV4cHIsIGNvbnRleHQpIH1cblx0ICAgIGVsc2UgeyByZXR1cm4gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSwgZXhwcikgfVxuXHQgIH1cblx0fTtcblxuXHRwcCQxLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGtleXdvcmQpIHtcblx0ICB2YXIgaXNCcmVhayA9IGtleXdvcmQgPT09IFwiYnJlYWtcIjtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmxhYmVsID0gbnVsbDsgfVxuXHQgIGVsc2UgaWYgKHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSkgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuXHQgIGVsc2Uge1xuXHQgICAgbm9kZS5sYWJlbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuXHQgICAgdGhpcy5zZW1pY29sb24oKTtcblx0ICB9XG5cblx0ICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBpcyBhbiBhY3R1YWwgZGVzdGluYXRpb24gdG8gYnJlYWsgb3Jcblx0ICAvLyBjb250aW51ZSB0by5cblx0ICB2YXIgaSA9IDA7XG5cdCAgZm9yICg7IGkgPCB0aGlzLmxhYmVscy5sZW5ndGg7ICsraSkge1xuXHQgICAgdmFyIGxhYiA9IHRoaXMubGFiZWxzW2ldO1xuXHQgICAgaWYgKG5vZGUubGFiZWwgPT0gbnVsbCB8fCBsYWIubmFtZSA9PT0gbm9kZS5sYWJlbC5uYW1lKSB7XG5cdCAgICAgIGlmIChsYWIua2luZCAhPSBudWxsICYmIChpc0JyZWFrIHx8IGxhYi5raW5kID09PSBcImxvb3BcIikpIHsgYnJlYWsgfVxuXHQgICAgICBpZiAobm9kZS5sYWJlbCAmJiBpc0JyZWFrKSB7IGJyZWFrIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKGkgPT09IHRoaXMubGFiZWxzLmxlbmd0aCkgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiVW5zeW50YWN0aWMgXCIgKyBrZXl3b3JkKTsgfVxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNCcmVhayA/IFwiQnJlYWtTdGF0ZW1lbnRcIiA6IFwiQ29udGludWVTdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgdGhpcy5zZW1pY29sb24oKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRGVidWdnZXJTdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlRG9TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuXHQgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJkb1wiKTtcblx0ICB0aGlzLmxhYmVscy5wb3AoKTtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5fd2hpbGUpO1xuXHQgIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpXG5cdCAgICB7IHRoaXMuZWF0KHR5cGVzLnNlbWkpOyB9XG5cdCAgZWxzZVxuXHQgICAgeyB0aGlzLnNlbWljb2xvbigpOyB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRvV2hpbGVTdGF0ZW1lbnRcIilcblx0fTtcblxuXHQvLyBEaXNhbWJpZ3VhdGluZyBiZXR3ZWVuIGEgYGZvcmAgYW5kIGEgYGZvcmAvYGluYCBvciBgZm9yYC9gb2ZgXG5cdC8vIGxvb3AgaXMgbm9uLXRyaXZpYWwuIEJhc2ljYWxseSwgd2UgaGF2ZSB0byBwYXJzZSB0aGUgaW5pdCBgdmFyYFxuXHQvLyBzdGF0ZW1lbnQgb3IgZXhwcmVzc2lvbiwgZGlzYWxsb3dpbmcgdGhlIGBpbmAgb3BlcmF0b3IgKHNlZVxuXHQvLyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBgcGFyc2VFeHByZXNzaW9uYCksIGFuZCB0aGVuIGNoZWNrXG5cdC8vIHdoZXRoZXIgdGhlIG5leHQgdG9rZW4gaXMgYGluYCBvciBgb2ZgLiBXaGVuIHRoZXJlIGlzIG5vIGluaXRcblx0Ly8gcGFydCAoc2VtaWNvbG9uIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzKSwgaXRcblx0Ly8gaXMgYSByZWd1bGFyIGBmb3JgIGxvb3AuXG5cblx0cHAkMS5wYXJzZUZvclN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICB0aGlzLm5leHQoKTtcblx0ICB2YXIgYXdhaXRBdCA9ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiAodGhpcy5pbkFzeW5jIHx8ICghdGhpcy5pbkZ1bmN0aW9uICYmIHRoaXMub3B0aW9ucy5hbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uKSkgJiYgdGhpcy5lYXRDb250ZXh0dWFsKFwiYXdhaXRcIikpID8gdGhpcy5sYXN0VG9rU3RhcnQgOiAtMTtcblx0ICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG5cdCAgdGhpcy5lbnRlclNjb3BlKDApO1xuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSkge1xuXHQgICAgaWYgKGF3YWl0QXQgPiAtMSkgeyB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7IH1cblx0ICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIG51bGwpXG5cdCAgfVxuXHQgIHZhciBpc0xldCA9IHRoaXMuaXNMZXQoKTtcblx0ICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fdmFyIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuX2NvbnN0IHx8IGlzTGV0KSB7XG5cdCAgICB2YXIgaW5pdCQxID0gdGhpcy5zdGFydE5vZGUoKSwga2luZCA9IGlzTGV0ID8gXCJsZXRcIiA6IHRoaXMudmFsdWU7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIHRoaXMucGFyc2VWYXIoaW5pdCQxLCB0cnVlLCBraW5kKTtcblx0ICAgIHRoaXMuZmluaXNoTm9kZShpbml0JDEsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtcblx0ICAgIGlmICgodGhpcy50eXBlID09PSB0eXBlcy5faW4gfHwgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpKSAmJiBpbml0JDEuZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcblx0ICAgICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5faW4pIHtcblx0ICAgICAgICAgIGlmIChhd2FpdEF0ID4gLTEpIHsgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpOyB9XG5cdCAgICAgICAgfSBlbHNlIHsgbm9kZS5hd2FpdCA9IGF3YWl0QXQgPiAtMTsgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdCQxKVxuXHQgICAgfVxuXHQgICAgaWYgKGF3YWl0QXQgPiAtMSkgeyB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7IH1cblx0ICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIGluaXQkMSlcblx0ICB9XG5cdCAgdmFyIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycztcblx0ICB2YXIgaW5pdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHRydWUsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpIHtcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSkge1xuXHQgICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5faW4pIHtcblx0ICAgICAgICBpZiAoYXdhaXRBdCA+IC0xKSB7IHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTsgfVxuXHQgICAgICB9IGVsc2UgeyBub2RlLmF3YWl0ID0gYXdhaXRBdCA+IC0xOyB9XG5cdCAgICB9XG5cdCAgICB0aGlzLnRvQXNzaWduYWJsZShpbml0LCBmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG5cdCAgICB0aGlzLmNoZWNrTFZhbChpbml0KTtcblx0ICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdClcblx0ICB9IGVsc2Uge1xuXHQgICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG5cdCAgfVxuXHQgIGlmIChhd2FpdEF0ID4gLTEpIHsgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpOyB9XG5cdCAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdClcblx0fTtcblxuXHRwcCQxLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBpc0FzeW5jLCBkZWNsYXJhdGlvblBvc2l0aW9uKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLCBGVU5DX1NUQVRFTUVOVCB8IChkZWNsYXJhdGlvblBvc2l0aW9uID8gMCA6IEZVTkNfSEFOR0lOR19TVEFURU1FTlQpLCBmYWxzZSwgaXNBc3luYylcblx0fTtcblxuXHRwcCQxLnBhcnNlSWZTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuXHQgIC8vIGFsbG93IGZ1bmN0aW9uIGRlY2xhcmF0aW9ucyBpbiBicmFuY2hlcywgYnV0IG9ubHkgaW4gbm9uLXN0cmljdCBtb2RlXG5cdCAgbm9kZS5jb25zZXF1ZW50ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcImlmXCIpO1xuXHQgIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5lYXQodHlwZXMuX2Vsc2UpID8gdGhpcy5wYXJzZVN0YXRlbWVudChcImlmXCIpIDogbnVsbDtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSWZTdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlUmV0dXJuU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgIGlmICghdGhpcy5pbkZ1bmN0aW9uICYmICF0aGlzLm9wdGlvbnMuYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb24pXG5cdCAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCIncmV0dXJuJyBvdXRzaWRlIG9mIGZ1bmN0aW9uXCIpOyB9XG5cdCAgdGhpcy5uZXh0KCk7XG5cblx0ICAvLyBJbiBgcmV0dXJuYCAoYW5kIGBicmVha2AvYGNvbnRpbnVlYCksIHRoZSBrZXl3b3JkcyB3aXRoXG5cdCAgLy8gb3B0aW9uYWwgYXJndW1lbnRzLCB3ZSBlYWdlcmx5IGxvb2sgZm9yIGEgc2VtaWNvbG9uIG9yIHRoZVxuXHQgIC8vIHBvc3NpYmlsaXR5IHRvIGluc2VydCBvbmUuXG5cblx0ICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmFyZ3VtZW50ID0gbnVsbDsgfVxuXHQgIGVsc2UgeyBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTsgdGhpcy5zZW1pY29sb24oKTsgfVxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXR1cm5TdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlU3dpdGNoU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgIHRoaXMubmV4dCgpO1xuXHQgIG5vZGUuZGlzY3JpbWluYW50ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuXHQgIG5vZGUuY2FzZXMgPSBbXTtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuXHQgIHRoaXMubGFiZWxzLnB1c2goc3dpdGNoTGFiZWwpO1xuXHQgIHRoaXMuZW50ZXJTY29wZSgwKTtcblxuXHQgIC8vIFN0YXRlbWVudHMgdW5kZXIgbXVzdCBiZSBncm91cGVkIChieSBsYWJlbCkgaW4gU3dpdGNoQ2FzZVxuXHQgIC8vIG5vZGVzLiBgY3VyYCBpcyB1c2VkIHRvIGtlZXAgdGhlIG5vZGUgdGhhdCB3ZSBhcmUgY3VycmVudGx5XG5cdCAgLy8gYWRkaW5nIHN0YXRlbWVudHMgdG8uXG5cblx0ICB2YXIgY3VyO1xuXHQgIGZvciAodmFyIHNhd0RlZmF1bHQgPSBmYWxzZTsgdGhpcy50eXBlICE9PSB0eXBlcy5icmFjZVI7KSB7XG5cdCAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fY2FzZSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLl9kZWZhdWx0KSB7XG5cdCAgICAgIHZhciBpc0Nhc2UgPSB0aGlzLnR5cGUgPT09IHR5cGVzLl9jYXNlO1xuXHQgICAgICBpZiAoY3VyKSB7IHRoaXMuZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTsgfVxuXHQgICAgICBub2RlLmNhc2VzLnB1c2goY3VyID0gdGhpcy5zdGFydE5vZGUoKSk7XG5cdCAgICAgIGN1ci5jb25zZXF1ZW50ID0gW107XG5cdCAgICAgIHRoaXMubmV4dCgpO1xuXHQgICAgICBpZiAoaXNDYXNlKSB7XG5cdCAgICAgICAgY3VyLnRlc3QgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChzYXdEZWZhdWx0KSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLmxhc3RUb2tTdGFydCwgXCJNdWx0aXBsZSBkZWZhdWx0IGNsYXVzZXNcIik7IH1cblx0ICAgICAgICBzYXdEZWZhdWx0ID0gdHJ1ZTtcblx0ICAgICAgICBjdXIudGVzdCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5leHBlY3QodHlwZXMuY29sb24pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKCFjdXIpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgICAgY3VyLmNvbnNlcXVlbnQucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwpKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgdGhpcy5leGl0U2NvcGUoKTtcblx0ICBpZiAoY3VyKSB7IHRoaXMuZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTsgfVxuXHQgIHRoaXMubmV4dCgpOyAvLyBDbG9zaW5nIGJyYWNlXG5cdCAgdGhpcy5sYWJlbHMucG9wKCk7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlN3aXRjaFN0YXRlbWVudFwiKVxuXHR9O1xuXG5cdHBwJDEucGFyc2VUaHJvd1N0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBpZiAobGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKSlcblx0ICAgIHsgdGhpcy5yYWlzZSh0aGlzLmxhc3RUb2tFbmQsIFwiSWxsZWdhbCBuZXdsaW5lIGFmdGVyIHRocm93XCIpOyB9XG5cdCAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgdGhpcy5zZW1pY29sb24oKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVGhyb3dTdGF0ZW1lbnRcIilcblx0fTtcblxuXHQvLyBSZXVzZWQgZW1wdHkgYXJyYXkgYWRkZWQgZm9yIG5vZGUgZmllbGRzIHRoYXQgYXJlIGFsd2F5cyBlbXB0eS5cblxuXHR2YXIgZW1wdHkgPSBbXTtcblxuXHRwcCQxLnBhcnNlVHJ5U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgIHRoaXMubmV4dCgpO1xuXHQgIG5vZGUuYmxvY2sgPSB0aGlzLnBhcnNlQmxvY2soKTtcblx0ICBub2RlLmhhbmRsZXIgPSBudWxsO1xuXHQgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9jYXRjaCkge1xuXHQgICAgdmFyIGNsYXVzZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIGlmICh0aGlzLmVhdCh0eXBlcy5wYXJlbkwpKSB7XG5cdCAgICAgIGNsYXVzZS5wYXJhbSA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuXHQgICAgICB2YXIgc2ltcGxlID0gY2xhdXNlLnBhcmFtLnR5cGUgPT09IFwiSWRlbnRpZmllclwiO1xuXHQgICAgICB0aGlzLmVudGVyU2NvcGUoc2ltcGxlID8gU0NPUEVfU0lNUExFX0NBVENIIDogMCk7XG5cdCAgICAgIHRoaXMuY2hlY2tMVmFsKGNsYXVzZS5wYXJhbSwgc2ltcGxlID8gQklORF9TSU1QTEVfQ0FUQ0ggOiBCSU5EX0xFWElDQUwpO1xuXHQgICAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlblIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDEwKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICAgIGNsYXVzZS5wYXJhbSA9IG51bGw7XG5cdCAgICAgIHRoaXMuZW50ZXJTY29wZSgwKTtcblx0ICAgIH1cblx0ICAgIGNsYXVzZS5ib2R5ID0gdGhpcy5wYXJzZUJsb2NrKGZhbHNlKTtcblx0ICAgIHRoaXMuZXhpdFNjb3BlKCk7XG5cdCAgICBub2RlLmhhbmRsZXIgPSB0aGlzLmZpbmlzaE5vZGUoY2xhdXNlLCBcIkNhdGNoQ2xhdXNlXCIpO1xuXHQgIH1cblx0ICBub2RlLmZpbmFsaXplciA9IHRoaXMuZWF0KHR5cGVzLl9maW5hbGx5KSA/IHRoaXMucGFyc2VCbG9jaygpIDogbnVsbDtcblx0ICBpZiAoIW5vZGUuaGFuZGxlciAmJiAhbm9kZS5maW5hbGl6ZXIpXG5cdCAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJNaXNzaW5nIGNhdGNoIG9yIGZpbmFsbHkgY2xhdXNlXCIpOyB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRyeVN0YXRlbWVudFwiKVxuXHR9O1xuXG5cdHBwJDEucGFyc2VWYXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBraW5kKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgdGhpcy5wYXJzZVZhcihub2RlLCBmYWxzZSwga2luZCk7XG5cdCAgdGhpcy5zZW1pY29sb24oKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKVxuXHR9O1xuXG5cdHBwJDEucGFyc2VXaGlsZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG5cdCAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuXHQgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJ3aGlsZVwiKTtcblx0ICB0aGlzLmxhYmVscy5wb3AoKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiV2hpbGVTdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlV2l0aFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICBpZiAodGhpcy5zdHJpY3QpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIid3aXRoJyBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuXHQgIHRoaXMubmV4dCgpO1xuXHQgIG5vZGUub2JqZWN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuXHQgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJ3aXRoXCIpO1xuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaXRoU3RhdGVtZW50XCIpXG5cdH07XG5cblx0cHAkMS5wYXJzZUVtcHR5U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgIHRoaXMubmV4dCgpO1xuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFbXB0eVN0YXRlbWVudFwiKVxuXHR9O1xuXG5cdHBwJDEucGFyc2VMYWJlbGVkU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgbWF5YmVOYW1lLCBleHByLCBjb250ZXh0KSB7XG5cdCAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCA9IHRoaXMubGFiZWxzOyBpJDEgPCBsaXN0Lmxlbmd0aDsgaSQxICs9IDEpXG5cdCAgICB7XG5cdCAgICB2YXIgbGFiZWwgPSBsaXN0W2kkMV07XG5cblx0ICAgIGlmIChsYWJlbC5uYW1lID09PSBtYXliZU5hbWUpXG5cdCAgICAgIHsgdGhpcy5yYWlzZShleHByLnN0YXJ0LCBcIkxhYmVsICdcIiArIG1heWJlTmFtZSArIFwiJyBpcyBhbHJlYWR5IGRlY2xhcmVkXCIpO1xuXHQgIH0gfVxuXHQgIHZhciBraW5kID0gdGhpcy50eXBlLmlzTG9vcCA/IFwibG9vcFwiIDogdGhpcy50eXBlID09PSB0eXBlcy5fc3dpdGNoID8gXCJzd2l0Y2hcIiA6IG51bGw7XG5cdCAgZm9yICh2YXIgaSA9IHRoaXMubGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICB2YXIgbGFiZWwkMSA9IHRoaXMubGFiZWxzW2ldO1xuXHQgICAgaWYgKGxhYmVsJDEuc3RhdGVtZW50U3RhcnQgPT09IG5vZGUuc3RhcnQpIHtcblx0ICAgICAgLy8gVXBkYXRlIGluZm9ybWF0aW9uIGFib3V0IHByZXZpb3VzIGxhYmVscyBvbiB0aGlzIG5vZGVcblx0ICAgICAgbGFiZWwkMS5zdGF0ZW1lbnRTdGFydCA9IHRoaXMuc3RhcnQ7XG5cdCAgICAgIGxhYmVsJDEua2luZCA9IGtpbmQ7XG5cdCAgICB9IGVsc2UgeyBicmVhayB9XG5cdCAgfVxuXHQgIHRoaXMubGFiZWxzLnB1c2goe25hbWU6IG1heWJlTmFtZSwga2luZDoga2luZCwgc3RhdGVtZW50U3RhcnQ6IHRoaXMuc3RhcnR9KTtcblx0ICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGNvbnRleHQgPyBjb250ZXh0LmluZGV4T2YoXCJsYWJlbFwiKSA9PT0gLTEgPyBjb250ZXh0ICsgXCJsYWJlbFwiIDogY29udGV4dCA6IFwibGFiZWxcIik7XG5cdCAgdGhpcy5sYWJlbHMucG9wKCk7XG5cdCAgbm9kZS5sYWJlbCA9IGV4cHI7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkxhYmVsZWRTdGF0ZW1lbnRcIilcblx0fTtcblxuXHRwcCQxLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGV4cHIpIHtcblx0ICBub2RlLmV4cHJlc3Npb24gPSBleHByO1xuXHQgIHRoaXMuc2VtaWNvbG9uKCk7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIilcblx0fTtcblxuXHQvLyBQYXJzZSBhIHNlbWljb2xvbi1lbmNsb3NlZCBibG9jayBvZiBzdGF0ZW1lbnRzLCBoYW5kbGluZyBgXCJ1c2Vcblx0Ly8gc3RyaWN0XCJgIGRlY2xhcmF0aW9ucyB3aGVuIGBhbGxvd1N0cmljdGAgaXMgdHJ1ZSAodXNlZCBmb3Jcblx0Ly8gZnVuY3Rpb24gYm9kaWVzKS5cblxuXHRwcCQxLnBhcnNlQmxvY2sgPSBmdW5jdGlvbihjcmVhdGVOZXdMZXhpY2FsU2NvcGUsIG5vZGUsIGV4aXRTdHJpY3QpIHtcblx0ICBpZiAoIGNyZWF0ZU5ld0xleGljYWxTY29wZSA9PT0gdm9pZCAwICkgY3JlYXRlTmV3TGV4aWNhbFNjb3BlID0gdHJ1ZTtcblx0ICBpZiAoIG5vZGUgPT09IHZvaWQgMCApIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXG5cdCAgbm9kZS5ib2R5ID0gW107XG5cdCAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcblx0ICBpZiAoY3JlYXRlTmV3TGV4aWNhbFNjb3BlKSB7IHRoaXMuZW50ZXJTY29wZSgwKTsgfVxuXHQgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNlUikge1xuXHQgICAgdmFyIHN0bXQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwpO1xuXHQgICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG5cdCAgfVxuXHQgIGlmIChleGl0U3RyaWN0KSB7IHRoaXMuc3RyaWN0ID0gZmFsc2U7IH1cblx0ICB0aGlzLm5leHQoKTtcblx0ICBpZiAoY3JlYXRlTmV3TGV4aWNhbFNjb3BlKSB7IHRoaXMuZXhpdFNjb3BlKCk7IH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQmxvY2tTdGF0ZW1lbnRcIilcblx0fTtcblxuXHQvLyBQYXJzZSBhIHJlZ3VsYXIgYGZvcmAgbG9vcC4gVGhlIGRpc2FtYmlndWF0aW9uIGNvZGUgaW5cblx0Ly8gYHBhcnNlU3RhdGVtZW50YCB3aWxsIGFscmVhZHkgaGF2ZSBwYXJzZWQgdGhlIGluaXQgc3RhdGVtZW50IG9yXG5cdC8vIGV4cHJlc3Npb24uXG5cblx0cHAkMS5wYXJzZUZvciA9IGZ1bmN0aW9uKG5vZGUsIGluaXQpIHtcblx0ICBub2RlLmluaXQgPSBpbml0O1xuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLnNlbWkpO1xuXHQgIG5vZGUudGVzdCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSA/IG51bGwgOiB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLnNlbWkpO1xuXHQgIG5vZGUudXBkYXRlID0gdGhpcy50eXBlID09PSB0eXBlcy5wYXJlblIgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlblIpO1xuXHQgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJmb3JcIik7XG5cdCAgdGhpcy5leGl0U2NvcGUoKTtcblx0ICB0aGlzLmxhYmVscy5wb3AoKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRm9yU3RhdGVtZW50XCIpXG5cdH07XG5cblx0Ly8gUGFyc2UgYSBgZm9yYC9gaW5gIGFuZCBgZm9yYC9gb2ZgIGxvb3AsIHdoaWNoIGFyZSBhbG1vc3Rcblx0Ly8gc2FtZSBmcm9tIHBhcnNlcidzIHBlcnNwZWN0aXZlLlxuXG5cdHBwJDEucGFyc2VGb3JJbiA9IGZ1bmN0aW9uKG5vZGUsIGluaXQpIHtcblx0ICB2YXIgaXNGb3JJbiA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX2luO1xuXHQgIHRoaXMubmV4dCgpO1xuXG5cdCAgaWYgKFxuXHQgICAgaW5pdC50eXBlID09PSBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIiAmJlxuXHQgICAgaW5pdC5kZWNsYXJhdGlvbnNbMF0uaW5pdCAhPSBudWxsICYmXG5cdCAgICAoXG5cdCAgICAgICFpc0ZvckluIHx8XG5cdCAgICAgIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDggfHxcblx0ICAgICAgdGhpcy5zdHJpY3QgfHxcblx0ICAgICAgaW5pdC5raW5kICE9PSBcInZhclwiIHx8XG5cdCAgICAgIGluaXQuZGVjbGFyYXRpb25zWzBdLmlkLnR5cGUgIT09IFwiSWRlbnRpZmllclwiXG5cdCAgICApXG5cdCAgKSB7XG5cdCAgICB0aGlzLnJhaXNlKFxuXHQgICAgICBpbml0LnN0YXJ0LFxuXHQgICAgICAoKGlzRm9ySW4gPyBcImZvci1pblwiIDogXCJmb3Itb2ZcIikgKyBcIiBsb29wIHZhcmlhYmxlIGRlY2xhcmF0aW9uIG1heSBub3QgaGF2ZSBhbiBpbml0aWFsaXplclwiKVxuXHQgICAgKTtcblx0ICB9IGVsc2UgaWYgKGluaXQudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKSB7XG5cdCAgICB0aGlzLnJhaXNlKGluaXQuc3RhcnQsIFwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItbG9vcFwiKTtcblx0ICB9XG5cdCAgbm9kZS5sZWZ0ID0gaW5pdDtcblx0ICBub2RlLnJpZ2h0ID0gaXNGb3JJbiA/IHRoaXMucGFyc2VFeHByZXNzaW9uKCkgOiB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlblIpO1xuXHQgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJmb3JcIik7XG5cdCAgdGhpcy5leGl0U2NvcGUoKTtcblx0ICB0aGlzLmxhYmVscy5wb3AoKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzRm9ySW4gPyBcIkZvckluU3RhdGVtZW50XCIgOiBcIkZvck9mU3RhdGVtZW50XCIpXG5cdH07XG5cblx0Ly8gUGFyc2UgYSBsaXN0IG9mIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cblxuXHRwcCQxLnBhcnNlVmFyID0gZnVuY3Rpb24obm9kZSwgaXNGb3IsIGtpbmQpIHtcblx0ICBub2RlLmRlY2xhcmF0aW9ucyA9IFtdO1xuXHQgIG5vZGUua2luZCA9IGtpbmQ7XG5cdCAgZm9yICg7Oykge1xuXHQgICAgdmFyIGRlY2wgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgICAgdGhpcy5wYXJzZVZhcklkKGRlY2wsIGtpbmQpO1xuXHQgICAgaWYgKHRoaXMuZWF0KHR5cGVzLmVxKSkge1xuXHQgICAgICBkZWNsLmluaXQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oaXNGb3IpO1xuXHQgICAgfSBlbHNlIGlmIChraW5kID09PSBcImNvbnN0XCIgJiYgISh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpKSB7XG5cdCAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuXHQgICAgfSBlbHNlIGlmIChkZWNsLmlkLnR5cGUgIT09IFwiSWRlbnRpZmllclwiICYmICEoaXNGb3IgJiYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2luIHx8IHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpKSkge1xuXHQgICAgICB0aGlzLnJhaXNlKHRoaXMubGFzdFRva0VuZCwgXCJDb21wbGV4IGJpbmRpbmcgcGF0dGVybnMgcmVxdWlyZSBhbiBpbml0aWFsaXphdGlvbiB2YWx1ZVwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRlY2wuaW5pdCA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBub2RlLmRlY2xhcmF0aW9ucy5wdXNoKHRoaXMuZmluaXNoTm9kZShkZWNsLCBcIlZhcmlhYmxlRGVjbGFyYXRvclwiKSk7XG5cdCAgICBpZiAoIXRoaXMuZWF0KHR5cGVzLmNvbW1hKSkgeyBicmVhayB9XG5cdCAgfVxuXHQgIHJldHVybiBub2RlXG5cdH07XG5cblx0cHAkMS5wYXJzZVZhcklkID0gZnVuY3Rpb24oZGVjbCwga2luZCkge1xuXHQgIGRlY2wuaWQgPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcblx0ICB0aGlzLmNoZWNrTFZhbChkZWNsLmlkLCBraW5kID09PSBcInZhclwiID8gQklORF9WQVIgOiBCSU5EX0xFWElDQUwsIGZhbHNlKTtcblx0fTtcblxuXHR2YXIgRlVOQ19TVEFURU1FTlQgPSAxLCBGVU5DX0hBTkdJTkdfU1RBVEVNRU5UID0gMiwgRlVOQ19OVUxMQUJMRV9JRCA9IDQ7XG5cblx0Ly8gUGFyc2UgYSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBvciBsaXRlcmFsIChkZXBlbmRpbmcgb24gdGhlXG5cdC8vIGBzdGF0ZW1lbnQgJiBGVU5DX1NUQVRFTUVOVGApLlxuXG5cdC8vIFJlbW92ZSBgYWxsb3dFeHByZXNzaW9uQm9keWAgZm9yIDcuMC4wLCBhcyBpdCBpcyBvbmx5IGNhbGxlZCB3aXRoIGZhbHNlXG5cdHBwJDEucGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIHN0YXRlbWVudCwgYWxsb3dFeHByZXNzaW9uQm9keSwgaXNBc3luYykge1xuXHQgIHRoaXMuaW5pdEZ1bmN0aW9uKG5vZGUpO1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSB8fCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiAhaXNBc3luYykge1xuXHQgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3RhciAmJiAoc3RhdGVtZW50ICYgRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCkpXG5cdCAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgIG5vZGUuZ2VuZXJhdG9yID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7XG5cdCAgfVxuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOClcblx0ICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG5cdCAgaWYgKHN0YXRlbWVudCAmIEZVTkNfU1RBVEVNRU5UKSB7XG5cdCAgICBub2RlLmlkID0gKHN0YXRlbWVudCAmIEZVTkNfTlVMTEFCTEVfSUQpICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSA/IG51bGwgOiB0aGlzLnBhcnNlSWRlbnQoKTtcblx0ICAgIGlmIChub2RlLmlkICYmICEoc3RhdGVtZW50ICYgRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCkpXG5cdCAgICAgIC8vIElmIGl0IGlzIGEgcmVndWxhciBmdW5jdGlvbiBkZWNsYXJhdGlvbiBpbiBzbG9wcHkgbW9kZSwgdGhlbiBpdCBpc1xuXHQgICAgICAvLyBzdWJqZWN0IHRvIEFubmV4IEIgc2VtYW50aWNzIChCSU5EX0ZVTkNUSU9OKS4gT3RoZXJ3aXNlLCB0aGUgYmluZGluZ1xuXHQgICAgICAvLyBtb2RlIGRlcGVuZHMgb24gcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBzY29wZSAoc2VlXG5cdCAgICAgIC8vIHRyZWF0RnVuY3Rpb25zQXNWYXIpLlxuXHQgICAgICB7IHRoaXMuY2hlY2tMVmFsKG5vZGUuaWQsICh0aGlzLnN0cmljdCB8fCBub2RlLmdlbmVyYXRvciB8fCBub2RlLmFzeW5jKSA/IHRoaXMudHJlYXRGdW5jdGlvbnNBc1ZhciA/IEJJTkRfVkFSIDogQklORF9MRVhJQ0FMIDogQklORF9GVU5DVElPTik7IH1cblx0ICB9XG5cblx0ICB2YXIgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG5cdCAgdGhpcy55aWVsZFBvcyA9IDA7XG5cdCAgdGhpcy5hd2FpdFBvcyA9IDA7XG5cdCAgdGhpcy5hd2FpdElkZW50UG9zID0gMDtcblx0ICB0aGlzLmVudGVyU2NvcGUoZnVuY3Rpb25GbGFncyhub2RlLmFzeW5jLCBub2RlLmdlbmVyYXRvcikpO1xuXG5cdCAgaWYgKCEoc3RhdGVtZW50ICYgRlVOQ19TVEFURU1FTlQpKVxuXHQgICAgeyBub2RlLmlkID0gdGhpcy50eXBlID09PSB0eXBlcy5uYW1lID8gdGhpcy5wYXJzZUlkZW50KCkgOiBudWxsOyB9XG5cblx0ICB0aGlzLnBhcnNlRnVuY3Rpb25QYXJhbXMobm9kZSk7XG5cdCAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCBhbGxvd0V4cHJlc3Npb25Cb2R5LCBmYWxzZSk7XG5cblx0ICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG5cdCAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuXHQgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAoc3RhdGVtZW50ICYgRlVOQ19TVEFURU1FTlQpID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKVxuXHR9O1xuXG5cdHBwJDEucGFyc2VGdW5jdGlvblBhcmFtcyA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuXHQgIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcblx0ICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuXHR9O1xuXG5cdC8vIFBhcnNlIGEgY2xhc3MgZGVjbGFyYXRpb24gb3IgbGl0ZXJhbCAoZGVwZW5kaW5nIG9uIHRoZVxuXHQvLyBgaXNTdGF0ZW1lbnRgIHBhcmFtZXRlcikuXG5cblx0cHAkMS5wYXJzZUNsYXNzID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcblx0ICB0aGlzLm5leHQoKTtcblxuXHQgIC8vIGVjbWEtMjYyIDE0LjYgQ2xhc3MgRGVmaW5pdGlvbnNcblx0ICAvLyBBIGNsYXNzIGRlZmluaXRpb24gaXMgYWx3YXlzIHN0cmljdCBtb2RlIGNvZGUuXG5cdCAgdmFyIG9sZFN0cmljdCA9IHRoaXMuc3RyaWN0O1xuXHQgIHRoaXMuc3RyaWN0ID0gdHJ1ZTtcblxuXHQgIHRoaXMucGFyc2VDbGFzc0lkKG5vZGUsIGlzU3RhdGVtZW50KTtcblx0ICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcblx0ICB2YXIgY2xhc3NCb2R5ID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICB2YXIgaGFkQ29uc3RydWN0b3IgPSBmYWxzZTtcblx0ICBjbGFzc0JvZHkuYm9keSA9IFtdO1xuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG5cdCAgd2hpbGUgKHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSKSB7XG5cdCAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VDbGFzc0VsZW1lbnQobm9kZS5zdXBlckNsYXNzICE9PSBudWxsKTtcblx0ICAgIGlmIChlbGVtZW50KSB7XG5cdCAgICAgIGNsYXNzQm9keS5ib2R5LnB1c2goZWxlbWVudCk7XG5cdCAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFwiTWV0aG9kRGVmaW5pdGlvblwiICYmIGVsZW1lbnQua2luZCA9PT0gXCJjb25zdHJ1Y3RvclwiKSB7XG5cdCAgICAgICAgaWYgKGhhZENvbnN0cnVjdG9yKSB7IHRoaXMucmFpc2UoZWxlbWVudC5zdGFydCwgXCJEdXBsaWNhdGUgY29uc3RydWN0b3IgaW4gdGhlIHNhbWUgY2xhc3NcIik7IH1cblx0ICAgICAgICBoYWRDb25zdHJ1Y3RvciA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCAgdGhpcy5zdHJpY3QgPSBvbGRTdHJpY3Q7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgbm9kZS5ib2R5ID0gdGhpcy5maW5pc2hOb2RlKGNsYXNzQm9keSwgXCJDbGFzc0JvZHlcIik7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1N0YXRlbWVudCA/IFwiQ2xhc3NEZWNsYXJhdGlvblwiIDogXCJDbGFzc0V4cHJlc3Npb25cIilcblx0fTtcblxuXHRwcCQxLnBhcnNlQ2xhc3NFbGVtZW50ID0gZnVuY3Rpb24oY29uc3RydWN0b3JBbGxvd3NTdXBlcikge1xuXHQgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdCAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpKSB7IHJldHVybiBudWxsIH1cblxuXHQgIHZhciBtZXRob2QgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgIHZhciB0cnlDb250ZXh0dWFsID0gZnVuY3Rpb24gKGssIG5vTGluZUJyZWFrKSB7XG5cdCAgICBpZiAoIG5vTGluZUJyZWFrID09PSB2b2lkIDAgKSBub0xpbmVCcmVhayA9IGZhbHNlO1xuXG5cdCAgICB2YXIgc3RhcnQgPSB0aGlzJDEuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcyQxLnN0YXJ0TG9jO1xuXHQgICAgaWYgKCF0aGlzJDEuZWF0Q29udGV4dHVhbChrKSkgeyByZXR1cm4gZmFsc2UgfVxuXHQgICAgaWYgKHRoaXMkMS50eXBlICE9PSB0eXBlcy5wYXJlbkwgJiYgKCFub0xpbmVCcmVhayB8fCAhdGhpcyQxLmNhbkluc2VydFNlbWljb2xvbigpKSkgeyByZXR1cm4gdHJ1ZSB9XG5cdCAgICBpZiAobWV0aG9kLmtleSkgeyB0aGlzJDEudW5leHBlY3RlZCgpOyB9XG5cdCAgICBtZXRob2QuY29tcHV0ZWQgPSBmYWxzZTtcblx0ICAgIG1ldGhvZC5rZXkgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnQsIHN0YXJ0TG9jKTtcblx0ICAgIG1ldGhvZC5rZXkubmFtZSA9IGs7XG5cdCAgICB0aGlzJDEuZmluaXNoTm9kZShtZXRob2Qua2V5LCBcIklkZW50aWZpZXJcIik7XG5cdCAgICByZXR1cm4gZmFsc2Vcblx0ICB9O1xuXG5cdCAgbWV0aG9kLmtpbmQgPSBcIm1ldGhvZFwiO1xuXHQgIG1ldGhvZC5zdGF0aWMgPSB0cnlDb250ZXh0dWFsKFwic3RhdGljXCIpO1xuXHQgIHZhciBpc0dlbmVyYXRvciA9IHRoaXMuZWF0KHR5cGVzLnN0YXIpO1xuXHQgIHZhciBpc0FzeW5jID0gZmFsc2U7XG5cdCAgaWYgKCFpc0dlbmVyYXRvcikge1xuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIHRyeUNvbnRleHR1YWwoXCJhc3luY1wiLCB0cnVlKSkge1xuXHQgICAgICBpc0FzeW5jID0gdHJ1ZTtcblx0ICAgICAgaXNHZW5lcmF0b3IgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiB0aGlzLmVhdCh0eXBlcy5zdGFyKTtcblx0ICAgIH0gZWxzZSBpZiAodHJ5Q29udGV4dHVhbChcImdldFwiKSkge1xuXHQgICAgICBtZXRob2Qua2luZCA9IFwiZ2V0XCI7XG5cdCAgICB9IGVsc2UgaWYgKHRyeUNvbnRleHR1YWwoXCJzZXRcIikpIHtcblx0ICAgICAgbWV0aG9kLmtpbmQgPSBcInNldFwiO1xuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAoIW1ldGhvZC5rZXkpIHsgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShtZXRob2QpOyB9XG5cdCAgdmFyIGtleSA9IG1ldGhvZC5rZXk7XG5cdCAgdmFyIGFsbG93c0RpcmVjdFN1cGVyID0gZmFsc2U7XG5cdCAgaWYgKCFtZXRob2QuY29tcHV0ZWQgJiYgIW1ldGhvZC5zdGF0aWMgJiYgKGtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBrZXkubmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8XG5cdCAgICAgIGtleS50eXBlID09PSBcIkxpdGVyYWxcIiAmJiBrZXkudmFsdWUgPT09IFwiY29uc3RydWN0b3JcIikpIHtcblx0ICAgIGlmIChtZXRob2Qua2luZCAhPT0gXCJtZXRob2RcIikgeyB0aGlzLnJhaXNlKGtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBoYXZlIGdldC9zZXQgbW9kaWZpZXJcIik7IH1cblx0ICAgIGlmIChpc0dlbmVyYXRvcikgeyB0aGlzLnJhaXNlKGtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBiZSBhIGdlbmVyYXRvclwiKTsgfVxuXHQgICAgaWYgKGlzQXN5bmMpIHsgdGhpcy5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgYmUgYW4gYXN5bmMgbWV0aG9kXCIpOyB9XG5cdCAgICBtZXRob2Qua2luZCA9IFwiY29uc3RydWN0b3JcIjtcblx0ICAgIGFsbG93c0RpcmVjdFN1cGVyID0gY29uc3RydWN0b3JBbGxvd3NTdXBlcjtcblx0ICB9IGVsc2UgaWYgKG1ldGhvZC5zdGF0aWMgJiYga2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGtleS5uYW1lID09PSBcInByb3RvdHlwZVwiKSB7XG5cdCAgICB0aGlzLnJhaXNlKGtleS5zdGFydCwgXCJDbGFzc2VzIG1heSBub3QgaGF2ZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBwcm90b3R5cGVcIik7XG5cdCAgfVxuXHQgIHRoaXMucGFyc2VDbGFzc01ldGhvZChtZXRob2QsIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcik7XG5cdCAgaWYgKG1ldGhvZC5raW5kID09PSBcImdldFwiICYmIG1ldGhvZC52YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSAwKVxuXHQgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobWV0aG9kLnZhbHVlLnN0YXJ0LCBcImdldHRlciBzaG91bGQgaGF2ZSBubyBwYXJhbXNcIik7IH1cblx0ICBpZiAobWV0aG9kLmtpbmQgPT09IFwic2V0XCIgJiYgbWV0aG9kLnZhbHVlLnBhcmFtcy5sZW5ndGggIT09IDEpXG5cdCAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShtZXRob2QudmFsdWUuc3RhcnQsIFwic2V0dGVyIHNob3VsZCBoYXZlIGV4YWN0bHkgb25lIHBhcmFtXCIpOyB9XG5cdCAgaWYgKG1ldGhvZC5raW5kID09PSBcInNldFwiICYmIG1ldGhvZC52YWx1ZS5wYXJhbXNbMF0udHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiKVxuXHQgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobWV0aG9kLnZhbHVlLnBhcmFtc1swXS5zdGFydCwgXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTsgfVxuXHQgIHJldHVybiBtZXRob2Rcblx0fTtcblxuXHRwcCQxLnBhcnNlQ2xhc3NNZXRob2QgPSBmdW5jdGlvbihtZXRob2QsIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcikge1xuXHQgIG1ldGhvZC52YWx1ZSA9IHRoaXMucGFyc2VNZXRob2QoaXNHZW5lcmF0b3IsIGlzQXN5bmMsIGFsbG93c0RpcmVjdFN1cGVyKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG1ldGhvZCwgXCJNZXRob2REZWZpbml0aW9uXCIpXG5cdH07XG5cblx0cHAkMS5wYXJzZUNsYXNzSWQgPSBmdW5jdGlvbihub2RlLCBpc1N0YXRlbWVudCkge1xuXHQgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcblx0ICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlSWRlbnQoKTtcblx0ICAgIGlmIChpc1N0YXRlbWVudClcblx0ICAgICAgeyB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBCSU5EX0xFWElDQUwsIGZhbHNlKTsgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICBpZiAoaXNTdGF0ZW1lbnQgPT09IHRydWUpXG5cdCAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgIG5vZGUuaWQgPSBudWxsO1xuXHQgIH1cblx0fTtcblxuXHRwcCQxLnBhcnNlQ2xhc3NTdXBlciA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICBub2RlLnN1cGVyQ2xhc3MgPSB0aGlzLmVhdCh0eXBlcy5fZXh0ZW5kcykgPyB0aGlzLnBhcnNlRXhwclN1YnNjcmlwdHMoKSA6IG51bGw7XG5cdH07XG5cblx0Ly8gUGFyc2VzIG1vZHVsZSBleHBvcnQgZGVjbGFyYXRpb24uXG5cblx0cHAkMS5wYXJzZUV4cG9ydCA9IGZ1bmN0aW9uKG5vZGUsIGV4cG9ydHMpIHtcblx0ICB0aGlzLm5leHQoKTtcblx0ICAvLyBleHBvcnQgKiBmcm9tICcuLi4nXG5cdCAgaWYgKHRoaXMuZWF0KHR5cGVzLnN0YXIpKSB7XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDExKSB7XG5cdCAgICAgIGlmICh0aGlzLmVhdENvbnRleHR1YWwoXCJhc1wiKSkge1xuXHQgICAgICAgIG5vZGUuZXhwb3J0ZWQgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cdCAgICAgICAgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBub2RlLmV4cG9ydGVkLm5hbWUsIHRoaXMubGFzdFRva1N0YXJ0KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBub2RlLmV4cG9ydGVkID0gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiZnJvbVwiKTtcblx0ICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLnN0cmluZykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuXHQgICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcblx0ICAgIHRoaXMuc2VtaWNvbG9uKCk7XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0QWxsRGVjbGFyYXRpb25cIilcblx0ICB9XG5cdCAgaWYgKHRoaXMuZWF0KHR5cGVzLl9kZWZhdWx0KSkgeyAvLyBleHBvcnQgZGVmYXVsdCAuLi5cblx0ICAgIHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHRoaXMubGFzdFRva1N0YXJ0KTtcblx0ICAgIHZhciBpc0FzeW5jO1xuXHQgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2Z1bmN0aW9uIHx8IChpc0FzeW5jID0gdGhpcy5pc0FzeW5jRnVuY3Rpb24oKSkpIHtcblx0ICAgICAgdmFyIGZOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgICAgdGhpcy5uZXh0KCk7XG5cdCAgICAgIGlmIChpc0FzeW5jKSB7IHRoaXMubmV4dCgpOyB9XG5cdCAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlRnVuY3Rpb24oZk5vZGUsIEZVTkNfU1RBVEVNRU5UIHwgRlVOQ19OVUxMQUJMRV9JRCwgZmFsc2UsIGlzQXN5bmMpO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9jbGFzcykge1xuXHQgICAgICB2YXIgY05vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUNsYXNzKGNOb2RlLCBcIm51bGxhYmxlSURcIik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG5cdCAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIpXG5cdCAgfVxuXHQgIC8vIGV4cG9ydCB2YXJ8Y29uc3R8bGV0fGZ1bmN0aW9ufGNsYXNzIC4uLlxuXHQgIGlmICh0aGlzLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50KCkpIHtcblx0ICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwpO1xuXHQgICAgaWYgKG5vZGUuZGVjbGFyYXRpb24udHlwZSA9PT0gXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG5cdCAgICAgIHsgdGhpcy5jaGVja1ZhcmlhYmxlRXhwb3J0KGV4cG9ydHMsIG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zKTsgfVxuXHQgICAgZWxzZVxuXHQgICAgICB7IHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5kZWNsYXJhdGlvbi5pZC5uYW1lLCBub2RlLmRlY2xhcmF0aW9uLmlkLnN0YXJ0KTsgfVxuXHQgICAgbm9kZS5zcGVjaWZpZXJzID0gW107XG5cdCAgICBub2RlLnNvdXJjZSA9IG51bGw7XG5cdCAgfSBlbHNlIHsgLy8gZXhwb3J0IHsgeCwgeSBhcyB6IH0gW2Zyb20gJy4uLiddXG5cdCAgICBub2RlLmRlY2xhcmF0aW9uID0gbnVsbDtcblx0ICAgIG5vZGUuc3BlY2lmaWVycyA9IHRoaXMucGFyc2VFeHBvcnRTcGVjaWZpZXJzKGV4cG9ydHMpO1xuXHQgICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImZyb21cIikpIHtcblx0ICAgICAgaWYgKHRoaXMudHlwZSAhPT0gdHlwZXMuc3RyaW5nKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IG5vZGUuc3BlY2lmaWVyczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICAvLyBjaGVjayBmb3Iga2V5d29yZHMgdXNlZCBhcyBsb2NhbCBuYW1lc1xuXHQgICAgICAgIHZhciBzcGVjID0gbGlzdFtpXTtcblxuXHQgICAgICAgIHRoaXMuY2hlY2tVbnJlc2VydmVkKHNwZWMubG9jYWwpO1xuXHQgICAgICAgIC8vIGNoZWNrIGlmIGV4cG9ydCBpcyBkZWZpbmVkXG5cdCAgICAgICAgdGhpcy5jaGVja0xvY2FsRXhwb3J0KHNwZWMubG9jYWwpO1xuXHQgICAgICB9XG5cblx0ICAgICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuXHQgICAgfVxuXHQgICAgdGhpcy5zZW1pY29sb24oKTtcblx0ICB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIilcblx0fTtcblxuXHRwcCQxLmNoZWNrRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgcG9zKSB7XG5cdCAgaWYgKCFleHBvcnRzKSB7IHJldHVybiB9XG5cdCAgaWYgKGhhcyhleHBvcnRzLCBuYW1lKSlcblx0ICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHBvcywgXCJEdXBsaWNhdGUgZXhwb3J0ICdcIiArIG5hbWUgKyBcIidcIik7IH1cblx0ICBleHBvcnRzW25hbWVdID0gdHJ1ZTtcblx0fTtcblxuXHRwcCQxLmNoZWNrUGF0dGVybkV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIHBhdCkge1xuXHQgIHZhciB0eXBlID0gcGF0LnR5cGU7XG5cdCAgaWYgKHR5cGUgPT09IFwiSWRlbnRpZmllclwiKVxuXHQgICAgeyB0aGlzLmNoZWNrRXhwb3J0KGV4cG9ydHMsIHBhdC5uYW1lLCBwYXQuc3RhcnQpOyB9XG5cdCAgZWxzZSBpZiAodHlwZSA9PT0gXCJPYmplY3RQYXR0ZXJuXCIpXG5cdCAgICB7IGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcGF0LnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuXHQgICAgICB7XG5cdCAgICAgICAgdmFyIHByb3AgPSBsaXN0W2ldO1xuXG5cdCAgICAgICAgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgcHJvcCk7XG5cdCAgICAgIH0gfVxuXHQgIGVsc2UgaWYgKHR5cGUgPT09IFwiQXJyYXlQYXR0ZXJuXCIpXG5cdCAgICB7IGZvciAodmFyIGkkMSA9IDAsIGxpc3QkMSA9IHBhdC5lbGVtZW50czsgaSQxIDwgbGlzdCQxLmxlbmd0aDsgaSQxICs9IDEpIHtcblx0ICAgICAgdmFyIGVsdCA9IGxpc3QkMVtpJDFdO1xuXG5cdCAgICAgICAgaWYgKGVsdCkgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBlbHQpOyB9XG5cdCAgICB9IH1cblx0ICBlbHNlIGlmICh0eXBlID09PSBcIlByb3BlcnR5XCIpXG5cdCAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC52YWx1ZSk7IH1cblx0ICBlbHNlIGlmICh0eXBlID09PSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG5cdCAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC5sZWZ0KTsgfVxuXHQgIGVsc2UgaWYgKHR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIilcblx0ICAgIHsgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgcGF0LmFyZ3VtZW50KTsgfVxuXHQgIGVsc2UgaWYgKHR5cGUgPT09IFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcblx0ICAgIHsgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgcGF0LmV4cHJlc3Npb24pOyB9XG5cdH07XG5cblx0cHAkMS5jaGVja1ZhcmlhYmxlRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgZGVjbHMpIHtcblx0ICBpZiAoIWV4cG9ydHMpIHsgcmV0dXJuIH1cblx0ICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IGRlY2xzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcblx0ICAgIHtcblx0ICAgIHZhciBkZWNsID0gbGlzdFtpXTtcblxuXHQgICAgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgZGVjbC5pZCk7XG5cdCAgfVxuXHR9O1xuXG5cdHBwJDEuc2hvdWxkUGFyc2VFeHBvcnRTdGF0ZW1lbnQgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gdGhpcy50eXBlLmtleXdvcmQgPT09IFwidmFyXCIgfHxcblx0ICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImNvbnN0XCIgfHxcblx0ICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImNsYXNzXCIgfHxcblx0ICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImZ1bmN0aW9uXCIgfHxcblx0ICAgIHRoaXMuaXNMZXQoKSB8fFxuXHQgICAgdGhpcy5pc0FzeW5jRnVuY3Rpb24oKVxuXHR9O1xuXG5cdC8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1vZHVsZSBleHBvcnRzLlxuXG5cdHBwJDEucGFyc2VFeHBvcnRTcGVjaWZpZXJzID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHQgIHZhciBub2RlcyA9IFtdLCBmaXJzdCA9IHRydWU7XG5cdCAgLy8gZXhwb3J0IHsgeCwgeSBhcyB6IH0gW2Zyb20gJy4uLiddXG5cdCAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcblx0ICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcblx0ICAgIGlmICghZmlyc3QpIHtcblx0ICAgICAgdGhpcy5leHBlY3QodHlwZXMuY29tbWEpO1xuXHQgICAgICBpZiAodGhpcy5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMuYnJhY2VSKSkgeyBicmVhayB9XG5cdCAgICB9IGVsc2UgeyBmaXJzdCA9IGZhbHNlOyB9XG5cblx0ICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgIG5vZGUubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cdCAgICBub2RlLmV4cG9ydGVkID0gdGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikgPyB0aGlzLnBhcnNlSWRlbnQodHJ1ZSkgOiBub2RlLmxvY2FsO1xuXHQgICAgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBub2RlLmV4cG9ydGVkLm5hbWUsIG5vZGUuZXhwb3J0ZWQuc3RhcnQpO1xuXHQgICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnRTcGVjaWZpZXJcIikpO1xuXHQgIH1cblx0ICByZXR1cm4gbm9kZXNcblx0fTtcblxuXHQvLyBQYXJzZXMgaW1wb3J0IGRlY2xhcmF0aW9uLlxuXG5cdHBwJDEucGFyc2VJbXBvcnQgPSBmdW5jdGlvbihub2RlKSB7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgLy8gaW1wb3J0ICcuLi4nXG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nKSB7XG5cdCAgICBub2RlLnNwZWNpZmllcnMgPSBlbXB0eTtcblx0ICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG5vZGUuc3BlY2lmaWVycyA9IHRoaXMucGFyc2VJbXBvcnRTcGVjaWZpZXJzKCk7XG5cdCAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpO1xuXHQgICAgbm9kZS5zb3VyY2UgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy51bmV4cGVjdGVkKCk7XG5cdCAgfVxuXHQgIHRoaXMuc2VtaWNvbG9uKCk7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpXG5cdH07XG5cblx0Ly8gUGFyc2VzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgbW9kdWxlIGltcG9ydHMuXG5cblx0cHAkMS5wYXJzZUltcG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgbm9kZXMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuXHQgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcblx0ICAgIC8vIGltcG9ydCBkZWZhdWx0T2JqLCB7IHgsIHkgYXMgeiB9IGZyb20gJy4uLidcblx0ICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgIG5vZGUubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnQoKTtcblx0ICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUubG9jYWwsIEJJTkRfTEVYSUNBTCk7XG5cdCAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIikpO1xuXHQgICAgaWYgKCF0aGlzLmVhdCh0eXBlcy5jb21tYSkpIHsgcmV0dXJuIG5vZGVzIH1cblx0ICB9XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3Rhcikge1xuXHQgICAgdmFyIG5vZGUkMSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImFzXCIpO1xuXHQgICAgbm9kZSQxLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50KCk7XG5cdCAgICB0aGlzLmNoZWNrTFZhbChub2RlJDEubG9jYWwsIEJJTkRfTEVYSUNBTCk7XG5cdCAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlJDEsIFwiSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIpKTtcblx0ICAgIHJldHVybiBub2Rlc1xuXHQgIH1cblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuXHQgIHdoaWxlICghdGhpcy5lYXQodHlwZXMuYnJhY2VSKSkge1xuXHQgICAgaWYgKCFmaXJzdCkge1xuXHQgICAgICB0aGlzLmV4cGVjdCh0eXBlcy5jb21tYSk7XG5cdCAgICAgIGlmICh0aGlzLmFmdGVyVHJhaWxpbmdDb21tYSh0eXBlcy5icmFjZVIpKSB7IGJyZWFrIH1cblx0ICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuXHQgICAgdmFyIG5vZGUkMiA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgICBub2RlJDIuaW1wb3J0ZWQgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cdCAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcblx0ICAgICAgbm9kZSQyLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50KCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLmNoZWNrVW5yZXNlcnZlZChub2RlJDIuaW1wb3J0ZWQpO1xuXHQgICAgICBub2RlJDIubG9jYWwgPSBub2RlJDIuaW1wb3J0ZWQ7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNoZWNrTFZhbChub2RlJDIubG9jYWwsIEJJTkRfTEVYSUNBTCk7XG5cdCAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlJDIsIFwiSW1wb3J0U3BlY2lmaWVyXCIpKTtcblx0ICB9XG5cdCAgcmV0dXJuIG5vZGVzXG5cdH07XG5cblx0Ly8gU2V0IGBFeHByZXNzaW9uU3RhdGVtZW50I2RpcmVjdGl2ZWAgcHJvcGVydHkgZm9yIGRpcmVjdGl2ZSBwcm9sb2d1ZXMuXG5cdHBwJDEuYWRhcHREaXJlY3RpdmVQcm9sb2d1ZSA9IGZ1bmN0aW9uKHN0YXRlbWVudHMpIHtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoICYmIHRoaXMuaXNEaXJlY3RpdmVDYW5kaWRhdGUoc3RhdGVtZW50c1tpXSk7ICsraSkge1xuXHQgICAgc3RhdGVtZW50c1tpXS5kaXJlY3RpdmUgPSBzdGF0ZW1lbnRzW2ldLmV4cHJlc3Npb24ucmF3LnNsaWNlKDEsIC0xKTtcblx0ICB9XG5cdH07XG5cdHBwJDEuaXNEaXJlY3RpdmVDYW5kaWRhdGUgPSBmdW5jdGlvbihzdGF0ZW1lbnQpIHtcblx0ICByZXR1cm4gKFxuXHQgICAgc3RhdGVtZW50LnR5cGUgPT09IFwiRXhwcmVzc2lvblN0YXRlbWVudFwiICYmXG5cdCAgICBzdGF0ZW1lbnQuZXhwcmVzc2lvbi50eXBlID09PSBcIkxpdGVyYWxcIiAmJlxuXHQgICAgdHlwZW9mIHN0YXRlbWVudC5leHByZXNzaW9uLnZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdCAgICAvLyBSZWplY3QgcGFyZW50aGVzaXplZCBzdHJpbmdzLlxuXHQgICAgKHRoaXMuaW5wdXRbc3RhdGVtZW50LnN0YXJ0XSA9PT0gXCJcXFwiXCIgfHwgdGhpcy5pbnB1dFtzdGF0ZW1lbnQuc3RhcnRdID09PSBcIidcIilcblx0ICApXG5cdH07XG5cblx0dmFyIHBwJDIgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cdC8vIENvbnZlcnQgZXhpc3RpbmcgZXhwcmVzc2lvbiBhdG9tIHRvIGFzc2lnbmFibGUgcGF0dGVyblxuXHQvLyBpZiBwb3NzaWJsZS5cblxuXHRwcCQyLnRvQXNzaWduYWJsZSA9IGZ1bmN0aW9uKG5vZGUsIGlzQmluZGluZywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBub2RlKSB7XG5cdCAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuXHQgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcblx0ICAgICAgaWYgKHRoaXMuaW5Bc3luYyAmJiBub2RlLm5hbWUgPT09IFwiYXdhaXRcIilcblx0ICAgICAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJDYW5ub3QgdXNlICdhd2FpdCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIik7IH1cblx0ICAgICAgYnJlYWtcblxuXHQgICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcblx0ICAgIGNhc2UgXCJBcnJheVBhdHRlcm5cIjpcblx0ICAgIGNhc2UgXCJSZXN0RWxlbWVudFwiOlxuXHQgICAgICBicmVha1xuXG5cdCAgICBjYXNlIFwiT2JqZWN0RXhwcmVzc2lvblwiOlxuXHQgICAgICBub2RlLnR5cGUgPSBcIk9iamVjdFBhdHRlcm5cIjtcblx0ICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cblx0ICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgdmFyIHByb3AgPSBsaXN0W2ldO1xuXG5cdCAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKHByb3AsIGlzQmluZGluZyk7XG5cdCAgICAgICAgLy8gRWFybHkgZXJyb3I6XG5cdCAgICAgICAgLy8gICBBc3NpZ25tZW50UmVzdFByb3BlcnR5W1lpZWxkLCBBd2FpdF0gOlxuXHQgICAgICAgIC8vICAgICBgLi4uYCBEZXN0cnVjdHVyaW5nQXNzaWdubWVudFRhcmdldFtZaWVsZCwgQXdhaXRdXG5cdCAgICAgICAgLy9cblx0ICAgICAgICAvLyAgIEl0IGlzIGEgU3ludGF4IEVycm9yIGlmIHxEZXN0cnVjdHVyaW5nQXNzaWdubWVudFRhcmdldHwgaXMgYW4gfEFycmF5TGl0ZXJhbHwgb3IgYW4gfE9iamVjdExpdGVyYWx8LlxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgIHByb3AudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmXG5cdCAgICAgICAgICAocHJvcC5hcmd1bWVudC50eXBlID09PSBcIkFycmF5UGF0dGVyblwiIHx8IHByb3AuYXJndW1lbnQudHlwZSA9PT0gXCJPYmplY3RQYXR0ZXJuXCIpXG5cdCAgICAgICAgKSB7XG5cdCAgICAgICAgICB0aGlzLnJhaXNlKHByb3AuYXJndW1lbnQuc3RhcnQsIFwiVW5leHBlY3RlZCB0b2tlblwiKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgYnJlYWtcblxuXHQgICAgY2FzZSBcIlByb3BlcnR5XCI6XG5cdCAgICAgIC8vIEFzc2lnbm1lbnRQcm9wZXJ0eSBoYXMgdHlwZSA9PT0gXCJQcm9wZXJ0eVwiXG5cdCAgICAgIGlmIChub2RlLmtpbmQgIT09IFwiaW5pdFwiKSB7IHRoaXMucmFpc2Uobm9kZS5rZXkuc3RhcnQsIFwiT2JqZWN0IHBhdHRlcm4gY2FuJ3QgY29udGFpbiBnZXR0ZXIgb3Igc2V0dGVyXCIpOyB9XG5cdCAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUudmFsdWUsIGlzQmluZGluZyk7XG5cdCAgICAgIGJyZWFrXG5cblx0ICAgIGNhc2UgXCJBcnJheUV4cHJlc3Npb25cIjpcblx0ICAgICAgbm9kZS50eXBlID0gXCJBcnJheVBhdHRlcm5cIjtcblx0ICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cblx0ICAgICAgdGhpcy50b0Fzc2lnbmFibGVMaXN0KG5vZGUuZWxlbWVudHMsIGlzQmluZGluZyk7XG5cdCAgICAgIGJyZWFrXG5cblx0ICAgIGNhc2UgXCJTcHJlYWRFbGVtZW50XCI6XG5cdCAgICAgIG5vZGUudHlwZSA9IFwiUmVzdEVsZW1lbnRcIjtcblx0ICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5hcmd1bWVudCwgaXNCaW5kaW5nKTtcblx0ICAgICAgaWYgKG5vZGUuYXJndW1lbnQudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKVxuXHQgICAgICAgIHsgdGhpcy5yYWlzZShub2RlLmFyZ3VtZW50LnN0YXJ0LCBcIlJlc3QgZWxlbWVudHMgY2Fubm90IGhhdmUgYSBkZWZhdWx0IHZhbHVlXCIpOyB9XG5cdCAgICAgIGJyZWFrXG5cblx0ICAgIGNhc2UgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiOlxuXHQgICAgICBpZiAobm9kZS5vcGVyYXRvciAhPT0gXCI9XCIpIHsgdGhpcy5yYWlzZShub2RlLmxlZnQuZW5kLCBcIk9ubHkgJz0nIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGZvciBzcGVjaWZ5aW5nIGRlZmF1bHQgdmFsdWUuXCIpOyB9XG5cdCAgICAgIG5vZGUudHlwZSA9IFwiQXNzaWdubWVudFBhdHRlcm5cIjtcblx0ICAgICAgZGVsZXRlIG5vZGUub3BlcmF0b3I7XG5cdCAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUubGVmdCwgaXNCaW5kaW5nKTtcblx0ICAgICAgLy8gZmFsbHMgdGhyb3VnaCB0byBBc3NpZ25tZW50UGF0dGVyblxuXG5cdCAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcblx0ICAgICAgYnJlYWtcblxuXHQgICAgY2FzZSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCI6XG5cdCAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUuZXhwcmVzc2lvbiwgaXNCaW5kaW5nLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICAgICAgYnJlYWtcblxuXHQgICAgY2FzZSBcIkNoYWluRXhwcmVzc2lvblwiOlxuXHQgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJPcHRpb25hbCBjaGFpbmluZyBjYW5ub3QgYXBwZWFyIGluIGxlZnQtaGFuZCBzaWRlXCIpO1xuXHQgICAgICBicmVha1xuXG5cdCAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuXHQgICAgICBpZiAoIWlzQmluZGluZykgeyBicmVhayB9XG5cblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJBc3NpZ25pbmcgdG8gcnZhbHVlXCIpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyB0aGlzLmNoZWNrUGF0dGVybkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTsgfVxuXHQgIHJldHVybiBub2RlXG5cdH07XG5cblx0Ly8gQ29udmVydCBsaXN0IG9mIGV4cHJlc3Npb24gYXRvbXMgdG8gYmluZGluZyBsaXN0LlxuXG5cdHBwJDIudG9Bc3NpZ25hYmxlTGlzdCA9IGZ1bmN0aW9uKGV4cHJMaXN0LCBpc0JpbmRpbmcpIHtcblx0ICB2YXIgZW5kID0gZXhwckxpc3QubGVuZ3RoO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcblx0ICAgIHZhciBlbHQgPSBleHByTGlzdFtpXTtcblx0ICAgIGlmIChlbHQpIHsgdGhpcy50b0Fzc2lnbmFibGUoZWx0LCBpc0JpbmRpbmcpOyB9XG5cdCAgfVxuXHQgIGlmIChlbmQpIHtcblx0ICAgIHZhciBsYXN0ID0gZXhwckxpc3RbZW5kIC0gMV07XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIGlzQmluZGluZyAmJiBsYXN0ICYmIGxhc3QudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmIGxhc3QuYXJndW1lbnQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpXG5cdCAgICAgIHsgdGhpcy51bmV4cGVjdGVkKGxhc3QuYXJndW1lbnQuc3RhcnQpOyB9XG5cdCAgfVxuXHQgIHJldHVybiBleHByTGlzdFxuXHR9O1xuXG5cdC8vIFBhcnNlcyBzcHJlYWQgZWxlbWVudC5cblxuXHRwcCQyLnBhcnNlU3ByZWFkID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3ByZWFkRWxlbWVudFwiKVxuXHR9O1xuXG5cdHBwJDIucGFyc2VSZXN0QmluZGluZyA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICB0aGlzLm5leHQoKTtcblxuXHQgIC8vIFJlc3RFbGVtZW50IGluc2lkZSBvZiBhIGZ1bmN0aW9uIHBhcmFtZXRlciBtdXN0IGJlIGFuIGlkZW50aWZpZXJcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSlcblx0ICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblxuXHQgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcblxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKVxuXHR9O1xuXG5cdC8vIFBhcnNlcyBsdmFsdWUgKGFzc2lnbmFibGUpIGF0b20uXG5cblx0cHAkMi5wYXJzZUJpbmRpbmdBdG9tID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG5cdCAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuXHQgICAgY2FzZSB0eXBlcy5icmFja2V0TDpcblx0ICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgICAgICB0aGlzLm5leHQoKTtcblx0ICAgICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSk7XG5cdCAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheVBhdHRlcm5cIilcblxuXHQgICAgY2FzZSB0eXBlcy5icmFjZUw6XG5cdCAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKHRydWUpXG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiB0aGlzLnBhcnNlSWRlbnQoKVxuXHR9O1xuXG5cdHBwJDIucGFyc2VCaW5kaW5nTGlzdCA9IGZ1bmN0aW9uKGNsb3NlLCBhbGxvd0VtcHR5LCBhbGxvd1RyYWlsaW5nQ29tbWEpIHtcblx0ICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG5cdCAgd2hpbGUgKCF0aGlzLmVhdChjbG9zZSkpIHtcblx0ICAgIGlmIChmaXJzdCkgeyBmaXJzdCA9IGZhbHNlOyB9XG5cdCAgICBlbHNlIHsgdGhpcy5leHBlY3QodHlwZXMuY29tbWEpOyB9XG5cdCAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7XG5cdCAgICAgIGVsdHMucHVzaChudWxsKTtcblx0ICAgIH0gZWxzZSBpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIHRoaXMuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkge1xuXHQgICAgICBicmVha1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmVsbGlwc2lzKSB7XG5cdCAgICAgIHZhciByZXN0ID0gdGhpcy5wYXJzZVJlc3RCaW5kaW5nKCk7XG5cdCAgICAgIHRoaXMucGFyc2VCaW5kaW5nTGlzdEl0ZW0ocmVzdCk7XG5cdCAgICAgIGVsdHMucHVzaChyZXN0KTtcblx0ICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuXHQgICAgICB0aGlzLmV4cGVjdChjbG9zZSk7XG5cdCAgICAgIGJyZWFrXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgZWxlbSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQodGhpcy5zdGFydCwgdGhpcy5zdGFydExvYyk7XG5cdCAgICAgIHRoaXMucGFyc2VCaW5kaW5nTGlzdEl0ZW0oZWxlbSk7XG5cdCAgICAgIGVsdHMucHVzaChlbGVtKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGVsdHNcblx0fTtcblxuXHRwcCQyLnBhcnNlQmluZGluZ0xpc3RJdGVtID0gZnVuY3Rpb24ocGFyYW0pIHtcblx0ICByZXR1cm4gcGFyYW1cblx0fTtcblxuXHQvLyBQYXJzZXMgYXNzaWdubWVudCBwYXR0ZXJuIGFyb3VuZCBnaXZlbiBhdG9tIGlmIHBvc3NpYmxlLlxuXG5cdHBwJDIucGFyc2VNYXliZURlZmF1bHQgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQpIHtcblx0ICBsZWZ0ID0gbGVmdCB8fCB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNiB8fCAhdGhpcy5lYXQodHlwZXMuZXEpKSB7IHJldHVybiBsZWZ0IH1cblx0ICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcblx0ICBub2RlLmxlZnQgPSBsZWZ0O1xuXHQgIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudFBhdHRlcm5cIilcblx0fTtcblxuXHQvLyBWZXJpZnkgdGhhdCBhIG5vZGUgaXMgYW4gbHZhbCDigJQgc29tZXRoaW5nIHRoYXQgY2FuIGJlIGFzc2lnbmVkXG5cdC8vIHRvLlxuXHQvLyBiaW5kaW5nVHlwZSBjYW4gYmUgZWl0aGVyOlxuXHQvLyAndmFyJyBpbmRpY2F0aW5nIHRoYXQgdGhlIGx2YWwgY3JlYXRlcyBhICd2YXInIGJpbmRpbmdcblx0Ly8gJ2xldCcgaW5kaWNhdGluZyB0aGF0IHRoZSBsdmFsIGNyZWF0ZXMgYSBsZXhpY2FsICgnbGV0JyBvciAnY29uc3QnKSBiaW5kaW5nXG5cdC8vICdub25lJyBpbmRpY2F0aW5nIHRoYXQgdGhlIGJpbmRpbmcgc2hvdWxkIGJlIGNoZWNrZWQgZm9yIGlsbGVnYWwgaWRlbnRpZmllcnMsIGJ1dCBub3QgZm9yIGR1cGxpY2F0ZSByZWZlcmVuY2VzXG5cblx0cHAkMi5jaGVja0xWYWwgPSBmdW5jdGlvbihleHByLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKSB7XG5cdCAgaWYgKCBiaW5kaW5nVHlwZSA9PT0gdm9pZCAwICkgYmluZGluZ1R5cGUgPSBCSU5EX05PTkU7XG5cblx0ICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuXHQgIGNhc2UgXCJJZGVudGlmaWVyXCI6XG5cdCAgICBpZiAoYmluZGluZ1R5cGUgPT09IEJJTkRfTEVYSUNBTCAmJiBleHByLm5hbWUgPT09IFwibGV0XCIpXG5cdCAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIFwibGV0IGlzIGRpc2FsbG93ZWQgYXMgYSBsZXhpY2FsbHkgYm91bmQgbmFtZVwiKTsgfVxuXHQgICAgaWYgKHRoaXMuc3RyaWN0ICYmIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQudGVzdChleHByLm5hbWUpKVxuXHQgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCAoYmluZGluZ1R5cGUgPyBcIkJpbmRpbmcgXCIgOiBcIkFzc2lnbmluZyB0byBcIikgKyBleHByLm5hbWUgKyBcIiBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuXHQgICAgaWYgKGNoZWNrQ2xhc2hlcykge1xuXHQgICAgICBpZiAoaGFzKGNoZWNrQ2xhc2hlcywgZXhwci5uYW1lKSlcblx0ICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcIkFyZ3VtZW50IG5hbWUgY2xhc2hcIik7IH1cblx0ICAgICAgY2hlY2tDbGFzaGVzW2V4cHIubmFtZV0gPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgaWYgKGJpbmRpbmdUeXBlICE9PSBCSU5EX05PTkUgJiYgYmluZGluZ1R5cGUgIT09IEJJTkRfT1VUU0lERSkgeyB0aGlzLmRlY2xhcmVOYW1lKGV4cHIubmFtZSwgYmluZGluZ1R5cGUsIGV4cHIuc3RhcnQpOyB9XG5cdCAgICBicmVha1xuXG5cdCAgY2FzZSBcIkNoYWluRXhwcmVzc2lvblwiOlxuXHQgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIFwiT3B0aW9uYWwgY2hhaW5pbmcgY2Fubm90IGFwcGVhciBpbiBsZWZ0LWhhbmQgc2lkZVwiKTtcblx0ICAgIGJyZWFrXG5cblx0ICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuXHQgICAgaWYgKGJpbmRpbmdUeXBlKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcIkJpbmRpbmcgbWVtYmVyIGV4cHJlc3Npb25cIik7IH1cblx0ICAgIGJyZWFrXG5cblx0ICBjYXNlIFwiT2JqZWN0UGF0dGVyblwiOlxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBleHByLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuXHQgICAgICB7XG5cdCAgICB2YXIgcHJvcCA9IGxpc3RbaV07XG5cblx0ICAgIHRoaXMuY2hlY2tMVmFsKHByb3AsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuXHQgIH1cblx0ICAgIGJyZWFrXG5cblx0ICBjYXNlIFwiUHJvcGVydHlcIjpcblx0ICAgIC8vIEFzc2lnbm1lbnRQcm9wZXJ0eSBoYXMgdHlwZSA9PT0gXCJQcm9wZXJ0eVwiXG5cdCAgICB0aGlzLmNoZWNrTFZhbChleHByLnZhbHVlLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcblx0ICAgIGJyZWFrXG5cblx0ICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG5cdCAgICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBleHByLmVsZW1lbnRzOyBpJDEgPCBsaXN0JDEubGVuZ3RoOyBpJDEgKz0gMSkge1xuXHQgICAgICB2YXIgZWxlbSA9IGxpc3QkMVtpJDFdO1xuXG5cdCAgICBpZiAoZWxlbSkgeyB0aGlzLmNoZWNrTFZhbChlbGVtLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTsgfVxuXHQgICAgfVxuXHQgICAgYnJlYWtcblxuXHQgIGNhc2UgXCJBc3NpZ25tZW50UGF0dGVyblwiOlxuXHQgICAgdGhpcy5jaGVja0xWYWwoZXhwci5sZWZ0LCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcblx0ICAgIGJyZWFrXG5cblx0ICBjYXNlIFwiUmVzdEVsZW1lbnRcIjpcblx0ICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIuYXJndW1lbnQsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuXHQgICAgYnJlYWtcblxuXHQgIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuXHQgICAgdGhpcy5jaGVja0xWYWwoZXhwci5leHByZXNzaW9uLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcblx0ICAgIGJyZWFrXG5cblx0ICBkZWZhdWx0OlxuXHQgICAgdGhpcy5yYWlzZShleHByLnN0YXJ0LCAoYmluZGluZ1R5cGUgPyBcIkJpbmRpbmdcIiA6IFwiQXNzaWduaW5nIHRvXCIpICsgXCIgcnZhbHVlXCIpO1xuXHQgIH1cblx0fTtcblxuXHQvLyBBIHJlY3Vyc2l2ZSBkZXNjZW50IHBhcnNlciBvcGVyYXRlcyBieSBkZWZpbmluZyBmdW5jdGlvbnMgZm9yIGFsbFxuXG5cdHZhciBwcCQzID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXHQvLyBDaGVjayBpZiBwcm9wZXJ0eSBuYW1lIGNsYXNoZXMgd2l0aCBhbHJlYWR5IGFkZGVkLlxuXHQvLyBPYmplY3QvY2xhc3MgZ2V0dGVycyBhbmQgc2V0dGVycyBhcmUgbm90IGFsbG93ZWQgdG8gY2xhc2gg4oCUXG5cdC8vIGVpdGhlciB3aXRoIGVhY2ggb3RoZXIgb3Igd2l0aCBhbiBpbml0IHByb3BlcnR5IOKAlCBhbmQgaW5cblx0Ly8gc3RyaWN0IG1vZGUsIGluaXQgcHJvcGVydGllcyBhcmUgYWxzbyBub3QgYWxsb3dlZCB0byBiZSByZXBlYXRlZC5cblxuXHRwcCQzLmNoZWNrUHJvcENsYXNoID0gZnVuY3Rpb24ocHJvcCwgcHJvcEhhc2gsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgcHJvcC50eXBlID09PSBcIlNwcmVhZEVsZW1lbnRcIilcblx0ICAgIHsgcmV0dXJuIH1cblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgKHByb3AuY29tcHV0ZWQgfHwgcHJvcC5tZXRob2QgfHwgcHJvcC5zaG9ydGhhbmQpKVxuXHQgICAgeyByZXR1cm4gfVxuXHQgIHZhciBrZXkgPSBwcm9wLmtleTtcblx0ICB2YXIgbmFtZTtcblx0ICBzd2l0Y2ggKGtleS50eXBlKSB7XG5cdCAgY2FzZSBcIklkZW50aWZpZXJcIjogbmFtZSA9IGtleS5uYW1lOyBicmVha1xuXHQgIGNhc2UgXCJMaXRlcmFsXCI6IG5hbWUgPSBTdHJpbmcoa2V5LnZhbHVlKTsgYnJlYWtcblx0ICBkZWZhdWx0OiByZXR1cm5cblx0ICB9XG5cdCAgdmFyIGtpbmQgPSBwcm9wLmtpbmQ7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG5cdCAgICBpZiAobmFtZSA9PT0gXCJfX3Byb3RvX19cIiAmJiBraW5kID09PSBcImluaXRcIikge1xuXHQgICAgICBpZiAocHJvcEhhc2gucHJvdG8pIHtcblx0ICAgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgICAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuZG91YmxlUHJvdG8gPCAwKVxuXHQgICAgICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuZG91YmxlUHJvdG8gPSBrZXkuc3RhcnQ7IH1cblx0ICAgICAgICAgIC8vIEJhY2t3YXJkcy1jb21wYXQga2x1ZGdlLiBDYW4gYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDYuMFxuXHQgICAgICAgIH0gZWxzZSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShrZXkuc3RhcnQsIFwiUmVkZWZpbml0aW9uIG9mIF9fcHJvdG9fXyBwcm9wZXJ0eVwiKTsgfVxuXHQgICAgICB9XG5cdCAgICAgIHByb3BIYXNoLnByb3RvID0gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVyblxuXHQgIH1cblx0ICBuYW1lID0gXCIkXCIgKyBuYW1lO1xuXHQgIHZhciBvdGhlciA9IHByb3BIYXNoW25hbWVdO1xuXHQgIGlmIChvdGhlcikge1xuXHQgICAgdmFyIHJlZGVmaW5pdGlvbjtcblx0ICAgIGlmIChraW5kID09PSBcImluaXRcIikge1xuXHQgICAgICByZWRlZmluaXRpb24gPSB0aGlzLnN0cmljdCAmJiBvdGhlci5pbml0IHx8IG90aGVyLmdldCB8fCBvdGhlci5zZXQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZWRlZmluaXRpb24gPSBvdGhlci5pbml0IHx8IG90aGVyW2tpbmRdO1xuXHQgICAgfVxuXHQgICAgaWYgKHJlZGVmaW5pdGlvbilcblx0ICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoa2V5LnN0YXJ0LCBcIlJlZGVmaW5pdGlvbiBvZiBwcm9wZXJ0eVwiKTsgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvdGhlciA9IHByb3BIYXNoW25hbWVdID0ge1xuXHQgICAgICBpbml0OiBmYWxzZSxcblx0ICAgICAgZ2V0OiBmYWxzZSxcblx0ICAgICAgc2V0OiBmYWxzZVxuXHQgICAgfTtcblx0ICB9XG5cdCAgb3RoZXJba2luZF0gPSB0cnVlO1xuXHR9O1xuXG5cdC8vICMjIyBFeHByZXNzaW9uIHBhcnNpbmdcblxuXHQvLyBUaGVzZSBuZXN0LCBmcm9tIHRoZSBtb3N0IGdlbmVyYWwgZXhwcmVzc2lvbiB0eXBlIGF0IHRoZSB0b3AgdG9cblx0Ly8gJ2F0b21pYycsIG5vbmRpdmlzaWJsZSBleHByZXNzaW9uIHR5cGVzIGF0IHRoZSBib3R0b20uIE1vc3Qgb2Zcblx0Ly8gdGhlIGZ1bmN0aW9ucyB3aWxsIHNpbXBseSBsZXQgdGhlIGZ1bmN0aW9uKHMpIGJlbG93IHRoZW0gcGFyc2UsXG5cdC8vIGFuZCwgKmlmKiB0aGUgc3ludGFjdGljIGNvbnN0cnVjdCB0aGV5IGhhbmRsZSBpcyBwcmVzZW50LCB3cmFwXG5cdC8vIHRoZSBBU1Qgbm9kZSB0aGF0IHRoZSBpbm5lciBwYXJzZXIgZ2F2ZSB0aGVtIGluIGFub3RoZXIgbm9kZS5cblxuXHQvLyBQYXJzZSBhIGZ1bGwgZXhwcmVzc2lvbi4gVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyBhcmUgdXNlZCB0b1xuXHQvLyBmb3JiaWQgdGhlIGBpbmAgb3BlcmF0b3IgKGluIGZvciBsb29wcyBpbml0YWxpemF0aW9uIGV4cHJlc3Npb25zKVxuXHQvLyBhbmQgcHJvdmlkZSByZWZlcmVuY2UgZm9yIHN0b3JpbmcgJz0nIG9wZXJhdG9yIGluc2lkZSBzaG9ydGhhbmRcblx0Ly8gcHJvcGVydHkgYXNzaWdubWVudCBpbiBjb250ZXh0cyB3aGVyZSBib3RoIG9iamVjdCBleHByZXNzaW9uXG5cdC8vIGFuZCBvYmplY3QgcGF0dGVybiBtaWdodCBhcHBlYXIgKHNvIGl0J3MgcG9zc2libGUgdG8gcmFpc2Vcblx0Ly8gZGVsYXllZCBzeW50YXggZXJyb3IgYXQgY29ycmVjdCBwb3NpdGlvbikuXG5cblx0cHAkMy5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuXHQgIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7XG5cdCAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcblx0ICAgIG5vZGUuZXhwcmVzc2lvbnMgPSBbZXhwcl07XG5cdCAgICB3aGlsZSAodGhpcy5lYXQodHlwZXMuY29tbWEpKSB7IG5vZGUuZXhwcmVzc2lvbnMucHVzaCh0aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpOyB9XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU2VxdWVuY2VFeHByZXNzaW9uXCIpXG5cdCAgfVxuXHQgIHJldHVybiBleHByXG5cdH07XG5cblx0Ly8gUGFyc2UgYW4gYXNzaWdubWVudCBleHByZXNzaW9uLiBUaGlzIGluY2x1ZGVzIGFwcGxpY2F0aW9ucyBvZlxuXHQvLyBvcGVyYXRvcnMgbGlrZSBgKz1gLlxuXG5cdHBwJDMucGFyc2VNYXliZUFzc2lnbiA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGFmdGVyTGVmdFBhcnNlKSB7XG5cdCAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwieWllbGRcIikpIHtcblx0ICAgIGlmICh0aGlzLmluR2VuZXJhdG9yKSB7IHJldHVybiB0aGlzLnBhcnNlWWllbGQobm9JbikgfVxuXHQgICAgLy8gVGhlIHRva2VuaXplciB3aWxsIGFzc3VtZSBhbiBleHByZXNzaW9uIGlzIGFsbG93ZWQgYWZ0ZXJcblx0ICAgIC8vIGB5aWVsZGAsIGJ1dCB0aGlzIGlzbid0IHRoYXQga2luZCBvZiB5aWVsZFxuXHQgICAgZWxzZSB7IHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTsgfVxuXHQgIH1cblxuXHQgIHZhciBvd25EZXN0cnVjdHVyaW5nRXJyb3JzID0gZmFsc2UsIG9sZFBhcmVuQXNzaWduID0gLTEsIG9sZFRyYWlsaW5nQ29tbWEgPSAtMTtcblx0ICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgICAgb2xkUGFyZW5Bc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ247XG5cdCAgICBvbGRUcmFpbGluZ0NvbW1hID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hO1xuXHQgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gLTE7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycztcblx0ICAgIG93bkRlc3RydWN0dXJpbmdFcnJvcnMgPSB0cnVlO1xuXHQgIH1cblxuXHQgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcblx0ICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5wYXJlbkwgfHwgdGhpcy50eXBlID09PSB0eXBlcy5uYW1lKVxuXHQgICAgeyB0aGlzLnBvdGVudGlhbEFycm93QXQgPSB0aGlzLnN0YXJ0OyB9XG5cdCAgdmFyIGxlZnQgPSB0aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICBpZiAoYWZ0ZXJMZWZ0UGFyc2UpIHsgbGVmdCA9IGFmdGVyTGVmdFBhcnNlLmNhbGwodGhpcywgbGVmdCwgc3RhcnRQb3MsIHN0YXJ0TG9jKTsgfVxuXHQgIGlmICh0aGlzLnR5cGUuaXNBc3NpZ24pIHtcblx0ICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG5cdCAgICBub2RlLmxlZnQgPSB0aGlzLnR5cGUgPT09IHR5cGVzLmVxID8gdGhpcy50b0Fzc2lnbmFibGUobGVmdCwgZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIDogbGVmdDtcblx0ICAgIGlmICghb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLmRvdWJsZVByb3RvID0gLTE7XG5cdCAgICB9XG5cdCAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPj0gbm9kZS5sZWZ0LnN0YXJ0KVxuXHQgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gLTE7IH0gLy8gcmVzZXQgYmVjYXVzZSBzaG9ydGhhbmQgZGVmYXVsdCB3YXMgdXNlZCBjb3JyZWN0bHlcblx0ICAgIHRoaXMuY2hlY2tMVmFsKGxlZnQpO1xuXHQgICAgdGhpcy5uZXh0KCk7XG5cdCAgICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKG5vSW4pO1xuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRFeHByZXNzaW9uXCIpXG5cdCAgfSBlbHNlIHtcblx0ICAgIGlmIChvd25EZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpOyB9XG5cdCAgfVxuXHQgIGlmIChvbGRQYXJlbkFzc2lnbiA+IC0xKSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA9IG9sZFBhcmVuQXNzaWduOyB9XG5cdCAgaWYgKG9sZFRyYWlsaW5nQ29tbWEgPiAtMSkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSBvbGRUcmFpbGluZ0NvbW1hOyB9XG5cdCAgcmV0dXJuIGxlZnRcblx0fTtcblxuXHQvLyBQYXJzZSBhIHRlcm5hcnkgY29uZGl0aW9uYWwgKGA/OmApIG9wZXJhdG9yLlxuXG5cdHBwJDMucGFyc2VNYXliZUNvbmRpdGlvbmFsID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcblx0ICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByT3BzKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG5cdCAgaWYgKHRoaXMuZWF0KHR5cGVzLnF1ZXN0aW9uKSkge1xuXHQgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG5cdCAgICBub2RlLnRlc3QgPSBleHByO1xuXHQgICAgbm9kZS5jb25zZXF1ZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG5cdCAgICB0aGlzLmV4cGVjdCh0eXBlcy5jb2xvbik7XG5cdCAgICBub2RlLmFsdGVybmF0ZSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKTtcblx0ICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJDb25kaXRpb25hbEV4cHJlc3Npb25cIilcblx0ICB9XG5cdCAgcmV0dXJuIGV4cHJcblx0fTtcblxuXHQvLyBTdGFydCB0aGUgcHJlY2VkZW5jZSBwYXJzZXIuXG5cblx0cHAkMy5wYXJzZUV4cHJPcHMgPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuXHQgIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlVW5hcnkocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgZmFsc2UpO1xuXHQgIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG5cdCAgcmV0dXJuIGV4cHIuc3RhcnQgPT09IHN0YXJ0UG9zICYmIGV4cHIudHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiID8gZXhwciA6IHRoaXMucGFyc2VFeHByT3AoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jLCAtMSwgbm9Jbilcblx0fTtcblxuXHQvLyBQYXJzZSBiaW5hcnkgb3BlcmF0b3JzIHdpdGggdGhlIG9wZXJhdG9yIHByZWNlZGVuY2UgcGFyc2luZ1xuXHQvLyBhbGdvcml0aG0uIGBsZWZ0YCBpcyB0aGUgbGVmdC1oYW5kIHNpZGUgb2YgdGhlIG9wZXJhdG9yLlxuXHQvLyBgbWluUHJlY2AgcHJvdmlkZXMgY29udGV4dCB0aGF0IGFsbG93cyB0aGUgZnVuY3Rpb24gdG8gc3RvcCBhbmRcblx0Ly8gZGVmZXIgZnVydGhlciBwYXJzZXIgdG8gb25lIG9mIGl0cyBjYWxsZXJzIHdoZW4gaXQgZW5jb3VudGVycyBhblxuXHQvLyBvcGVyYXRvciB0aGF0IGhhcyBhIGxvd2VyIHByZWNlZGVuY2UgdGhhbiB0aGUgc2V0IGl0IGlzIHBhcnNpbmcuXG5cblx0cHAkMy5wYXJzZUV4cHJPcCA9IGZ1bmN0aW9uKGxlZnQsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjLCBub0luKSB7XG5cdCAgdmFyIHByZWMgPSB0aGlzLnR5cGUuYmlub3A7XG5cdCAgaWYgKHByZWMgIT0gbnVsbCAmJiAoIW5vSW4gfHwgdGhpcy50eXBlICE9PSB0eXBlcy5faW4pKSB7XG5cdCAgICBpZiAocHJlYyA+IG1pblByZWMpIHtcblx0ICAgICAgdmFyIGxvZ2ljYWwgPSB0aGlzLnR5cGUgPT09IHR5cGVzLmxvZ2ljYWxPUiB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLmxvZ2ljYWxBTkQ7XG5cdCAgICAgIHZhciBjb2FsZXNjZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuY29hbGVzY2U7XG5cdCAgICAgIGlmIChjb2FsZXNjZSkge1xuXHQgICAgICAgIC8vIEhhbmRsZSB0aGUgcHJlY2VkZW5jZSBvZiBgdHQuY29hbGVzY2VgIGFzIGVxdWFsIHRvIHRoZSByYW5nZSBvZiBsb2dpY2FsIGV4cHJlc3Npb25zLlxuXHQgICAgICAgIC8vIEluIG90aGVyIHdvcmRzLCBgbm9kZS5yaWdodGAgc2hvdWxkbid0IGNvbnRhaW4gbG9naWNhbCBleHByZXNzaW9ucyBpbiBvcmRlciB0byBjaGVjayB0aGUgbWl4ZWQgZXJyb3IuXG5cdCAgICAgICAgcHJlYyA9IHR5cGVzLmxvZ2ljYWxBTkQuYmlub3A7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG9wID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdGhpcy5uZXh0KCk7XG5cdCAgICAgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcblx0ICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJPcCh0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSksIHN0YXJ0UG9zLCBzdGFydExvYywgcHJlYywgbm9Jbik7XG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5idWlsZEJpbmFyeShsZWZ0U3RhcnRQb3MsIGxlZnRTdGFydExvYywgbGVmdCwgcmlnaHQsIG9wLCBsb2dpY2FsIHx8IGNvYWxlc2NlKTtcblx0ICAgICAgaWYgKChsb2dpY2FsICYmIHRoaXMudHlwZSA9PT0gdHlwZXMuY29hbGVzY2UpIHx8IChjb2FsZXNjZSAmJiAodGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsT1IgfHwgdGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsQU5EKSkpIHtcblx0ICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJMb2dpY2FsIGV4cHJlc3Npb25zIGFuZCBjb2FsZXNjZSBleHByZXNzaW9ucyBjYW5ub3QgYmUgbWl4ZWQuIFdyYXAgZWl0aGVyIGJ5IHBhcmVudGhlc2VzXCIpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwck9wKG5vZGUsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjLCBub0luKVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gbGVmdFxuXHR9O1xuXG5cdHBwJDMuYnVpbGRCaW5hcnkgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCkge1xuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgIG5vZGUubGVmdCA9IGxlZnQ7XG5cdCAgbm9kZS5vcGVyYXRvciA9IG9wO1xuXHQgIG5vZGUucmlnaHQgPSByaWdodDtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGxvZ2ljYWwgPyBcIkxvZ2ljYWxFeHByZXNzaW9uXCIgOiBcIkJpbmFyeUV4cHJlc3Npb25cIilcblx0fTtcblxuXHQvLyBQYXJzZSB1bmFyeSBvcGVyYXRvcnMsIGJvdGggcHJlZml4IGFuZCBwb3N0Zml4LlxuXG5cdHBwJDMucGFyc2VNYXliZVVuYXJ5ID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgc2F3VW5hcnkpIHtcblx0ICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGV4cHI7XG5cdCAgaWYgKHRoaXMuaXNDb250ZXh0dWFsKFwiYXdhaXRcIikgJiYgKHRoaXMuaW5Bc3luYyB8fCAoIXRoaXMuaW5GdW5jdGlvbiAmJiB0aGlzLm9wdGlvbnMuYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbikpKSB7XG5cdCAgICBleHByID0gdGhpcy5wYXJzZUF3YWl0KCk7XG5cdCAgICBzYXdVbmFyeSA9IHRydWU7XG5cdCAgfSBlbHNlIGlmICh0aGlzLnR5cGUucHJlZml4KSB7XG5cdCAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIHVwZGF0ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuaW5jRGVjO1xuXHQgICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG5cdCAgICBub2RlLnByZWZpeCA9IHRydWU7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCB0cnVlKTtcblx0ICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuXHQgICAgaWYgKHVwZGF0ZSkgeyB0aGlzLmNoZWNrTFZhbChub2RlLmFyZ3VtZW50KTsgfVxuXHQgICAgZWxzZSBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJlxuXHQgICAgICAgICAgICAgbm9kZS5hcmd1bWVudC50eXBlID09PSBcIklkZW50aWZpZXJcIilcblx0ICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJEZWxldGluZyBsb2NhbCB2YXJpYWJsZSBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuXHQgICAgZWxzZSB7IHNhd1VuYXJ5ID0gdHJ1ZTsgfVxuXHQgICAgZXhwciA9IHRoaXMuZmluaXNoTm9kZShub2RlLCB1cGRhdGUgPyBcIlVwZGF0ZUV4cHJlc3Npb25cIiA6IFwiVW5hcnlFeHByZXNzaW9uXCIpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBleHByID0gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgICAgaWYgKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKSB7IHJldHVybiBleHByIH1cblx0ICAgIHdoaWxlICh0aGlzLnR5cGUucG9zdGZpeCAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuXHQgICAgICB2YXIgbm9kZSQxID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgICAgICBub2RlJDEub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuXHQgICAgICBub2RlJDEucHJlZml4ID0gZmFsc2U7XG5cdCAgICAgIG5vZGUkMS5hcmd1bWVudCA9IGV4cHI7XG5cdCAgICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIpO1xuXHQgICAgICB0aGlzLm5leHQoKTtcblx0ICAgICAgZXhwciA9IHRoaXMuZmluaXNoTm9kZShub2RlJDEsIFwiVXBkYXRlRXhwcmVzc2lvblwiKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBpZiAoIXNhd1VuYXJ5ICYmIHRoaXMuZWF0KHR5cGVzLnN0YXJzdGFyKSlcblx0ICAgIHsgcmV0dXJuIHRoaXMuYnVpbGRCaW5hcnkoc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByLCB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSksIFwiKipcIiwgZmFsc2UpIH1cblx0ICBlbHNlXG5cdCAgICB7IHJldHVybiBleHByIH1cblx0fTtcblxuXHQvLyBQYXJzZSBjYWxsLCBkb3QsIGFuZCBgW11gLXN1YnNjcmlwdCBleHByZXNzaW9ucy5cblxuXHRwcCQzLnBhcnNlRXhwclN1YnNjcmlwdHMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuXHQgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJBdG9tKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgIGlmIChleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiAmJiB0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva1N0YXJ0LCB0aGlzLmxhc3RUb2tFbmQpICE9PSBcIilcIilcblx0ICAgIHsgcmV0dXJuIGV4cHIgfVxuXHQgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlU3Vic2NyaXB0cyhleHByLCBzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHJlc3VsdC50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIikge1xuXHQgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA+PSByZXN1bHQuc3RhcnQpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gLTE7IH1cblx0ICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID49IHJlc3VsdC5zdGFydCkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gLTE7IH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc3VsdFxuXHR9O1xuXG5cdHBwJDMucGFyc2VTdWJzY3JpcHRzID0gZnVuY3Rpb24oYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzKSB7XG5cdCAgdmFyIG1heWJlQXN5bmNBcnJvdyA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGJhc2UudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgYmFzZS5uYW1lID09PSBcImFzeW5jXCIgJiZcblx0ICAgICAgdGhpcy5sYXN0VG9rRW5kID09PSBiYXNlLmVuZCAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiBiYXNlLmVuZCAtIGJhc2Uuc3RhcnQgPT09IDUgJiZcblx0ICAgICAgdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID09PSBiYXNlLnN0YXJ0O1xuXHQgIHZhciBvcHRpb25hbENoYWluZWQgPSBmYWxzZTtcblxuXHQgIHdoaWxlICh0cnVlKSB7XG5cdCAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VTdWJzY3JpcHQoYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzLCBtYXliZUFzeW5jQXJyb3csIG9wdGlvbmFsQ2hhaW5lZCk7XG5cblx0ICAgIGlmIChlbGVtZW50Lm9wdGlvbmFsKSB7IG9wdGlvbmFsQ2hhaW5lZCA9IHRydWU7IH1cblx0ICAgIGlmIChlbGVtZW50ID09PSBiYXNlIHx8IGVsZW1lbnQudHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKSB7XG5cdCAgICAgIGlmIChvcHRpb25hbENoYWluZWQpIHtcblx0ICAgICAgICB2YXIgY2hhaW5Ob2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgICAgICAgIGNoYWluTm9kZS5leHByZXNzaW9uID0gZWxlbWVudDtcblx0ICAgICAgICBlbGVtZW50ID0gdGhpcy5maW5pc2hOb2RlKGNoYWluTm9kZSwgXCJDaGFpbkV4cHJlc3Npb25cIik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVsZW1lbnRcblx0ICAgIH1cblxuXHQgICAgYmFzZSA9IGVsZW1lbnQ7XG5cdCAgfVxuXHR9O1xuXG5cdHBwJDMucGFyc2VTdWJzY3JpcHQgPSBmdW5jdGlvbihiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMsIG1heWJlQXN5bmNBcnJvdywgb3B0aW9uYWxDaGFpbmVkKSB7XG5cdCAgdmFyIG9wdGlvbmFsU3VwcG9ydGVkID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDExO1xuXHQgIHZhciBvcHRpb25hbCA9IG9wdGlvbmFsU3VwcG9ydGVkICYmIHRoaXMuZWF0KHR5cGVzLnF1ZXN0aW9uRG90KTtcblx0ICBpZiAobm9DYWxscyAmJiBvcHRpb25hbCkgeyB0aGlzLnJhaXNlKHRoaXMubGFzdFRva1N0YXJ0LCBcIk9wdGlvbmFsIGNoYWluaW5nIGNhbm5vdCBhcHBlYXIgaW4gdGhlIGNhbGxlZSBvZiBuZXcgZXhwcmVzc2lvbnNcIik7IH1cblxuXHQgIHZhciBjb21wdXRlZCA9IHRoaXMuZWF0KHR5cGVzLmJyYWNrZXRMKTtcblx0ICBpZiAoY29tcHV0ZWQgfHwgKG9wdGlvbmFsICYmIHRoaXMudHlwZSAhPT0gdHlwZXMucGFyZW5MICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuYmFja1F1b3RlKSB8fCB0aGlzLmVhdCh0eXBlcy5kb3QpKSB7XG5cdCAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcblx0ICAgIG5vZGUub2JqZWN0ID0gYmFzZTtcblx0ICAgIG5vZGUucHJvcGVydHkgPSBjb21wdXRlZCA/IHRoaXMucGFyc2VFeHByZXNzaW9uKCkgOiB0aGlzLnBhcnNlSWRlbnQodGhpcy5vcHRpb25zLmFsbG93UmVzZXJ2ZWQgIT09IFwibmV2ZXJcIik7XG5cdCAgICBub2RlLmNvbXB1dGVkID0gISFjb21wdXRlZDtcblx0ICAgIGlmIChjb21wdXRlZCkgeyB0aGlzLmV4cGVjdCh0eXBlcy5icmFja2V0Uik7IH1cblx0ICAgIGlmIChvcHRpb25hbFN1cHBvcnRlZCkge1xuXHQgICAgICBub2RlLm9wdGlvbmFsID0gb3B0aW9uYWw7XG5cdCAgICB9XG5cdCAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWVtYmVyRXhwcmVzc2lvblwiKTtcblx0ICB9IGVsc2UgaWYgKCFub0NhbGxzICYmIHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHtcblx0ICAgIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnMsIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRBd2FpdElkZW50UG9zID0gdGhpcy5hd2FpdElkZW50UG9zO1xuXHQgICAgdGhpcy55aWVsZFBvcyA9IDA7XG5cdCAgICB0aGlzLmF3YWl0UG9zID0gMDtcblx0ICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG5cdCAgICB2YXIgZXhwckxpc3QgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMucGFyZW5SLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCwgZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgICAgaWYgKG1heWJlQXN5bmNBcnJvdyAmJiAhb3B0aW9uYWwgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgdGhpcy5lYXQodHlwZXMuYXJyb3cpKSB7XG5cdCAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcblx0ICAgICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcblx0ICAgICAgaWYgKHRoaXMuYXdhaXRJZGVudFBvcyA+IDApXG5cdCAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuYXdhaXRJZGVudFBvcywgXCJDYW5ub3QgdXNlICdhd2FpdCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIik7IH1cblx0ICAgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuXHQgICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG5cdCAgICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG5cdCAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QsIHRydWUpXG5cdCAgICB9XG5cdCAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcblx0ICAgIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcyB8fCB0aGlzLnlpZWxkUG9zO1xuXHQgICAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zIHx8IHRoaXMuYXdhaXRQb3M7XG5cdCAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zIHx8IHRoaXMuYXdhaXRJZGVudFBvcztcblx0ICAgIHZhciBub2RlJDEgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG5cdCAgICBub2RlJDEuY2FsbGVlID0gYmFzZTtcblx0ICAgIG5vZGUkMS5hcmd1bWVudHMgPSBleHByTGlzdDtcblx0ICAgIGlmIChvcHRpb25hbFN1cHBvcnRlZCkge1xuXHQgICAgICBub2RlJDEub3B0aW9uYWwgPSBvcHRpb25hbDtcblx0ICAgIH1cblx0ICAgIGJhc2UgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkNhbGxFeHByZXNzaW9uXCIpO1xuXHQgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5iYWNrUXVvdGUpIHtcblx0ICAgIGlmIChvcHRpb25hbCB8fCBvcHRpb25hbENoYWluZWQpIHtcblx0ICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIk9wdGlvbmFsIGNoYWluaW5nIGNhbm5vdCBhcHBlYXIgaW4gdGhlIHRhZyBvZiB0YWdnZWQgdGVtcGxhdGUgZXhwcmVzc2lvbnNcIik7XG5cdCAgICB9XG5cdCAgICB2YXIgbm9kZSQyID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuXHQgICAgbm9kZSQyLnRhZyA9IGJhc2U7XG5cdCAgICBub2RlJDIucXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGUoe2lzVGFnZ2VkOiB0cnVlfSk7XG5cdCAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUkMiwgXCJUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb25cIik7XG5cdCAgfVxuXHQgIHJldHVybiBiYXNlXG5cdH07XG5cblx0Ly8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXG5cdC8vIGV4cHJlc3Npb24sIGFuIGV4cHJlc3Npb24gc3RhcnRlZCBieSBhIGtleXdvcmQgbGlrZSBgZnVuY3Rpb25gIG9yXG5cdC8vIGBuZXdgLCBvciBhbiBleHByZXNzaW9uIHdyYXBwZWQgaW4gcHVuY3R1YXRpb24gbGlrZSBgKClgLCBgW11gLFxuXHQvLyBvciBge31gLlxuXG5cdHBwJDMucGFyc2VFeHByQXRvbSA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcblx0ICAvLyBJZiBhIGRpdmlzaW9uIG9wZXJhdG9yIGFwcGVhcnMgaW4gYW4gZXhwcmVzc2lvbiBwb3NpdGlvbiwgdGhlXG5cdCAgLy8gdG9rZW5pemVyIGdvdCBjb25mdXNlZCwgYW5kIHdlIGZvcmNlIGl0IHRvIHJlYWQgYSByZWdleHAgaW5zdGVhZC5cblx0ICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5zbGFzaCkgeyB0aGlzLnJlYWRSZWdleHAoKTsgfVxuXG5cdCAgdmFyIG5vZGUsIGNhbkJlQXJyb3cgPSB0aGlzLnBvdGVudGlhbEFycm93QXQgPT09IHRoaXMuc3RhcnQ7XG5cdCAgc3dpdGNoICh0aGlzLnR5cGUpIHtcblx0ICBjYXNlIHR5cGVzLl9zdXBlcjpcblx0ICAgIGlmICghdGhpcy5hbGxvd1N1cGVyKVxuXHQgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInc3VwZXInIGtleXdvcmQgb3V0c2lkZSBhIG1ldGhvZFwiKTsgfVxuXHQgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCAmJiAhdGhpcy5hbGxvd0RpcmVjdFN1cGVyKVxuXHQgICAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJzdXBlcigpIGNhbGwgb3V0c2lkZSBjb25zdHJ1Y3RvciBvZiBhIHN1YmNsYXNzXCIpOyB9XG5cdCAgICAvLyBUaGUgYHN1cGVyYCBrZXl3b3JkIGNhbiBhcHBlYXIgYXQgYmVsb3c6XG5cdCAgICAvLyBTdXBlclByb3BlcnR5OlxuXHQgICAgLy8gICAgIHN1cGVyIFsgRXhwcmVzc2lvbiBdXG5cdCAgICAvLyAgICAgc3VwZXIgLiBJZGVudGlmaWVyTmFtZVxuXHQgICAgLy8gU3VwZXJDYWxsOlxuXHQgICAgLy8gICAgIHN1cGVyICggQXJndW1lbnRzIClcblx0ICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLmRvdCAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNrZXRMICYmIHRoaXMudHlwZSAhPT0gdHlwZXMucGFyZW5MKVxuXHQgICAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3VwZXJcIilcblxuXHQgIGNhc2UgdHlwZXMuX3RoaXM6XG5cdCAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgIHRoaXMubmV4dCgpO1xuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRoaXNFeHByZXNzaW9uXCIpXG5cblx0ICBjYXNlIHR5cGVzLm5hbWU6XG5cdCAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcblx0ICAgIHZhciBpZCA9IHRoaXMucGFyc2VJZGVudChmYWxzZSk7XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDggJiYgIWNvbnRhaW5zRXNjICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5fZnVuY3Rpb24pKVxuXHQgICAgICB7IHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCAwLCBmYWxzZSwgdHJ1ZSkgfVxuXHQgICAgaWYgKGNhbkJlQXJyb3cgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcblx0ICAgICAgaWYgKHRoaXMuZWF0KHR5cGVzLmFycm93KSlcblx0ICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgZmFsc2UpIH1cblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgJiYgIWNvbnRhaW5zRXNjKSB7XG5cdCAgICAgICAgaWQgPSB0aGlzLnBhcnNlSWRlbnQoZmFsc2UpO1xuXHQgICAgICAgIGlmICh0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICF0aGlzLmVhdCh0eXBlcy5hcnJvdykpXG5cdCAgICAgICAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCBbaWRdLCB0cnVlKVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaWRcblxuXHQgIGNhc2UgdHlwZXMucmVnZXhwOlxuXHQgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcblx0ICAgIG5vZGUgPSB0aGlzLnBhcnNlTGl0ZXJhbCh2YWx1ZS52YWx1ZSk7XG5cdCAgICBub2RlLnJlZ2V4ID0ge3BhdHRlcm46IHZhbHVlLnBhdHRlcm4sIGZsYWdzOiB2YWx1ZS5mbGFnc307XG5cdCAgICByZXR1cm4gbm9kZVxuXG5cdCAgY2FzZSB0eXBlcy5udW06IGNhc2UgdHlwZXMuc3RyaW5nOlxuXHQgICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMudmFsdWUpXG5cblx0ICBjYXNlIHR5cGVzLl9udWxsOiBjYXNlIHR5cGVzLl90cnVlOiBjYXNlIHR5cGVzLl9mYWxzZTpcblx0ICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgICAgbm9kZS52YWx1ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX251bGwgPyBudWxsIDogdGhpcy50eXBlID09PSB0eXBlcy5fdHJ1ZTtcblx0ICAgIG5vZGUucmF3ID0gdGhpcy50eXBlLmtleXdvcmQ7XG5cdCAgICB0aGlzLm5leHQoKTtcblx0ICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpXG5cblx0ICBjYXNlIHR5cGVzLnBhcmVuTDpcblx0ICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQsIGV4cHIgPSB0aGlzLnBhcnNlUGFyZW5BbmREaXN0aW5ndWlzaEV4cHJlc3Npb24oY2FuQmVBcnJvdyk7XG5cdCAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuXHQgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduIDwgMCAmJiAhdGhpcy5pc1NpbXBsZUFzc2lnblRhcmdldChleHByKSlcblx0ICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA9IHN0YXJ0OyB9XG5cdCAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kIDwgMClcblx0ICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPSBzdGFydDsgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGV4cHJcblxuXHQgIGNhc2UgdHlwZXMuYnJhY2tldEw6XG5cdCAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgIHRoaXMubmV4dCgpO1xuXHQgICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VFeHByTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXJyYXlFeHByZXNzaW9uXCIpXG5cblx0ICBjYXNlIHR5cGVzLmJyYWNlTDpcblx0ICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxuXG5cdCAgY2FzZSB0eXBlcy5fZnVuY3Rpb246XG5cdCAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICAgIHRoaXMubmV4dCgpO1xuXHQgICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLCAwKVxuXG5cdCAgY2FzZSB0eXBlcy5fY2xhc3M6XG5cdCAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKHRoaXMuc3RhcnROb2RlKCksIGZhbHNlKVxuXG5cdCAgY2FzZSB0eXBlcy5fbmV3OlxuXHQgICAgcmV0dXJuIHRoaXMucGFyc2VOZXcoKVxuXG5cdCAgY2FzZSB0eXBlcy5iYWNrUXVvdGU6XG5cdCAgICByZXR1cm4gdGhpcy5wYXJzZVRlbXBsYXRlKClcblxuXHQgIGNhc2UgdHlwZXMuX2ltcG9ydDpcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTEpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHBySW1wb3J0KClcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnVuZXhwZWN0ZWQoKVxuXHQgICAgfVxuXG5cdCAgZGVmYXVsdDpcblx0ICAgIHRoaXMudW5leHBlY3RlZCgpO1xuXHQgIH1cblx0fTtcblxuXHRwcCQzLnBhcnNlRXhwckltcG9ydCA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblxuXHQgIC8vIENvbnN1bWUgYGltcG9ydGAgYXMgYW4gaWRlbnRpZmllciBmb3IgYGltcG9ydC5tZXRhYC5cblx0ICAvLyBCZWNhdXNlIGB0aGlzLnBhcnNlSWRlbnQodHJ1ZSlgIGRvZXNuJ3QgY2hlY2sgZXNjYXBlIHNlcXVlbmNlcywgaXQgbmVlZHMgdGhlIGNoZWNrIG9mIGB0aGlzLmNvbnRhaW5zRXNjYC5cblx0ICBpZiAodGhpcy5jb250YWluc0VzYykgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJFc2NhcGUgc2VxdWVuY2UgaW4ga2V5d29yZCBpbXBvcnRcIik7IH1cblx0ICB2YXIgbWV0YSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcblxuXHQgIHN3aXRjaCAodGhpcy50eXBlKSB7XG5cdCAgY2FzZSB0eXBlcy5wYXJlbkw6XG5cdCAgICByZXR1cm4gdGhpcy5wYXJzZUR5bmFtaWNJbXBvcnQobm9kZSlcblx0ICBjYXNlIHR5cGVzLmRvdDpcblx0ICAgIG5vZGUubWV0YSA9IG1ldGE7XG5cdCAgICByZXR1cm4gdGhpcy5wYXJzZUltcG9ydE1ldGEobm9kZSlcblx0ICBkZWZhdWx0OlxuXHQgICAgdGhpcy51bmV4cGVjdGVkKCk7XG5cdCAgfVxuXHR9O1xuXG5cdHBwJDMucGFyc2VEeW5hbWljSW1wb3J0ID0gZnVuY3Rpb24obm9kZSkge1xuXHQgIHRoaXMubmV4dCgpOyAvLyBza2lwIGAoYFxuXG5cdCAgLy8gUGFyc2Ugbm9kZS5zb3VyY2UuXG5cdCAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcblxuXHQgIC8vIFZlcmlmeSBlbmRpbmcuXG5cdCAgaWYgKCF0aGlzLmVhdCh0eXBlcy5wYXJlblIpKSB7XG5cdCAgICB2YXIgZXJyb3JQb3MgPSB0aGlzLnN0YXJ0O1xuXHQgICAgaWYgKHRoaXMuZWF0KHR5cGVzLmNvbW1hKSAmJiB0aGlzLmVhdCh0eXBlcy5wYXJlblIpKSB7XG5cdCAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShlcnJvclBvcywgXCJUcmFpbGluZyBjb21tYSBpcyBub3QgYWxsb3dlZCBpbiBpbXBvcnQoKVwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMudW5leHBlY3RlZChlcnJvclBvcyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydEV4cHJlc3Npb25cIilcblx0fTtcblxuXHRwcCQzLnBhcnNlSW1wb3J0TWV0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICB0aGlzLm5leHQoKTsgLy8gc2tpcCBgLmBcblxuXHQgIHZhciBjb250YWluc0VzYyA9IHRoaXMuY29udGFpbnNFc2M7XG5cdCAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcblxuXHQgIGlmIChub2RlLnByb3BlcnR5Lm5hbWUgIT09IFwibWV0YVwiKVxuXHQgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5wcm9wZXJ0eS5zdGFydCwgXCJUaGUgb25seSB2YWxpZCBtZXRhIHByb3BlcnR5IGZvciBpbXBvcnQgaXMgJ2ltcG9ydC5tZXRhJ1wiKTsgfVxuXHQgIGlmIChjb250YWluc0VzYylcblx0ICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiJ2ltcG9ydC5tZXRhJyBtdXN0IG5vdCBjb250YWluIGVzY2FwZWQgY2hhcmFjdGVyc1wiKTsgfVxuXHQgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlVHlwZSAhPT0gXCJtb2R1bGVcIilcblx0ICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiQ2Fubm90IHVzZSAnaW1wb3J0Lm1ldGEnIG91dHNpZGUgYSBtb2R1bGVcIik7IH1cblxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJNZXRhUHJvcGVydHlcIilcblx0fTtcblxuXHRwcCQzLnBhcnNlTGl0ZXJhbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgIG5vZGUudmFsdWUgPSB2YWx1ZTtcblx0ICBub2RlLnJhdyA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5lbmQpO1xuXHQgIGlmIChub2RlLnJhdy5jaGFyQ29kZUF0KG5vZGUucmF3Lmxlbmd0aCAtIDEpID09PSAxMTApIHsgbm9kZS5iaWdpbnQgPSBub2RlLnJhdy5zbGljZSgwLCAtMSk7IH1cblx0ICB0aGlzLm5leHQoKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGl0ZXJhbFwiKVxuXHR9O1xuXG5cdHBwJDMucGFyc2VQYXJlbkV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcblx0ICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuXHQgIHZhciB2YWwgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG5cdCAgcmV0dXJuIHZhbFxuXHR9O1xuXG5cdHBwJDMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGNhbkJlQXJyb3cpIHtcblx0ICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIHZhbCwgYWxsb3dUcmFpbGluZ0NvbW1hID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDg7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG5cdCAgICB0aGlzLm5leHQoKTtcblxuXHQgICAgdmFyIGlubmVyU3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBpbm5lclN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcblx0ICAgIHZhciBleHByTGlzdCA9IFtdLCBmaXJzdCA9IHRydWUsIGxhc3RJc0NvbW1hID0gZmFsc2U7XG5cdCAgICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzLCBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgc3ByZWFkU3RhcnQ7XG5cdCAgICB0aGlzLnlpZWxkUG9zID0gMDtcblx0ICAgIHRoaXMuYXdhaXRQb3MgPSAwO1xuXHQgICAgLy8gRG8gbm90IHNhdmUgYXdhaXRJZGVudFBvcyB0byBhbGxvdyBjaGVja2luZyBhd2FpdHMgbmVzdGVkIGluIHBhcmFtZXRlcnNcblx0ICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuUikge1xuXHQgICAgICBmaXJzdCA/IGZpcnN0ID0gZmFsc2UgOiB0aGlzLmV4cGVjdCh0eXBlcy5jb21tYSk7XG5cdCAgICAgIGlmIChhbGxvd1RyYWlsaW5nQ29tbWEgJiYgdGhpcy5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMucGFyZW5SLCB0cnVlKSkge1xuXHQgICAgICAgIGxhc3RJc0NvbW1hID0gdHJ1ZTtcblx0ICAgICAgICBicmVha1xuXHQgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcblx0ICAgICAgICBzcHJlYWRTdGFydCA9IHRoaXMuc3RhcnQ7XG5cdCAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzLnBhcnNlUGFyZW5JdGVtKHRoaXMucGFyc2VSZXN0QmluZGluZygpKSk7XG5cdCAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuXHQgICAgICAgIGJyZWFrXG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRoaXMucGFyc2VQYXJlbkl0ZW0pKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFyIGlubmVyRW5kUG9zID0gdGhpcy5zdGFydCwgaW5uZXJFbmRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuXHQgICAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcblxuXHQgICAgaWYgKGNhbkJlQXJyb3cgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgdGhpcy5lYXQodHlwZXMuYXJyb3cpKSB7XG5cdCAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcblx0ICAgICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcblx0ICAgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuXHQgICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG5cdCAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFyZW5BcnJvd0xpc3Qoc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByTGlzdClcblx0ICAgIH1cblxuXHQgICAgaWYgKCFleHByTGlzdC5sZW5ndGggfHwgbGFzdElzQ29tbWEpIHsgdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTsgfVxuXHQgICAgaWYgKHNwcmVhZFN0YXJ0KSB7IHRoaXMudW5leHBlY3RlZChzcHJlYWRTdGFydCk7IH1cblx0ICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuXHQgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zIHx8IHRoaXMueWllbGRQb3M7XG5cdCAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3MgfHwgdGhpcy5hd2FpdFBvcztcblxuXHQgICAgaWYgKGV4cHJMaXN0Lmxlbmd0aCA+IDEpIHtcblx0ICAgICAgdmFsID0gdGhpcy5zdGFydE5vZGVBdChpbm5lclN0YXJ0UG9zLCBpbm5lclN0YXJ0TG9jKTtcblx0ICAgICAgdmFsLmV4cHJlc3Npb25zID0gZXhwckxpc3Q7XG5cdCAgICAgIHRoaXMuZmluaXNoTm9kZUF0KHZhbCwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgaW5uZXJFbmRQb3MsIGlubmVyRW5kTG9jKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhbCA9IGV4cHJMaXN0WzBdO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YWwgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG5cdCAgfVxuXG5cdCAgaWYgKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZVBhcmVucykge1xuXHQgICAgdmFyIHBhciA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcblx0ICAgIHBhci5leHByZXNzaW9uID0gdmFsO1xuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIHZhbFxuXHQgIH1cblx0fTtcblxuXHRwcCQzLnBhcnNlUGFyZW5JdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXHQgIHJldHVybiBpdGVtXG5cdH07XG5cblx0cHAkMy5wYXJzZVBhcmVuQXJyb3dMaXN0ID0gZnVuY3Rpb24oc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByTGlzdCkge1xuXHQgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QpXG5cdH07XG5cblx0Ly8gTmV3J3MgcHJlY2VkZW5jZSBpcyBzbGlnaHRseSB0cmlja3kuIEl0IG11c3QgYWxsb3cgaXRzIGFyZ3VtZW50IHRvXG5cdC8vIGJlIGEgYFtdYCBvciBkb3Qgc3Vic2NyaXB0IGV4cHJlc3Npb24sIGJ1dCBub3QgYSBjYWxsIOKAlCBhdCBsZWFzdCxcblx0Ly8gbm90IHdpdGhvdXQgd3JhcHBpbmcgaXQgaW4gcGFyZW50aGVzZXMuIFRodXMsIGl0IHVzZXMgdGhlIG5vQ2FsbHNcblx0Ly8gYXJndW1lbnQgdG8gcGFyc2VTdWJzY3JpcHRzIHRvIHByZXZlbnQgaXQgZnJvbSBjb25zdW1pbmcgdGhlXG5cdC8vIGFyZ3VtZW50IGxpc3QuXG5cblx0dmFyIGVtcHR5JDEgPSBbXTtcblxuXHRwcCQzLnBhcnNlTmV3ID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMuY29udGFpbnNFc2MpIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIFwiRXNjYXBlIHNlcXVlbmNlIGluIGtleXdvcmQgbmV3XCIpOyB9XG5cdCAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgIHZhciBtZXRhID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLmVhdCh0eXBlcy5kb3QpKSB7XG5cdCAgICBub2RlLm1ldGEgPSBtZXRhO1xuXHQgICAgdmFyIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcblx0ICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cdCAgICBpZiAobm9kZS5wcm9wZXJ0eS5uYW1lICE9PSBcInRhcmdldFwiKVxuXHQgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnByb3BlcnR5LnN0YXJ0LCBcIlRoZSBvbmx5IHZhbGlkIG1ldGEgcHJvcGVydHkgZm9yIG5ldyBpcyAnbmV3LnRhcmdldCdcIik7IH1cblx0ICAgIGlmIChjb250YWluc0VzYylcblx0ICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCInbmV3LnRhcmdldCcgbXVzdCBub3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnNcIik7IH1cblx0ICAgIGlmICghdGhpcy5pbk5vbkFycm93RnVuY3Rpb24oKSlcblx0ICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCInbmV3LnRhcmdldCcgY2FuIG9ubHkgYmUgdXNlZCBpbiBmdW5jdGlvbnNcIik7IH1cblx0ICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJNZXRhUHJvcGVydHlcIilcblx0ICB9XG5cdCAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jLCBpc0ltcG9ydCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX2ltcG9ydDtcblx0ICBub2RlLmNhbGxlZSA9IHRoaXMucGFyc2VTdWJzY3JpcHRzKHRoaXMucGFyc2VFeHByQXRvbSgpLCBzdGFydFBvcywgc3RhcnRMb2MsIHRydWUpO1xuXHQgIGlmIChpc0ltcG9ydCAmJiBub2RlLmNhbGxlZS50eXBlID09PSBcIkltcG9ydEV4cHJlc3Npb25cIikge1xuXHQgICAgdGhpcy5yYWlzZShzdGFydFBvcywgXCJDYW5ub3QgdXNlIG5ldyB3aXRoIGltcG9ydCgpXCIpO1xuXHQgIH1cblx0ICBpZiAodGhpcy5lYXQodHlwZXMucGFyZW5MKSkgeyBub2RlLmFyZ3VtZW50cyA9IHRoaXMucGFyc2VFeHByTGlzdCh0eXBlcy5wYXJlblIsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4LCBmYWxzZSk7IH1cblx0ICBlbHNlIHsgbm9kZS5hcmd1bWVudHMgPSBlbXB0eSQxOyB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk5ld0V4cHJlc3Npb25cIilcblx0fTtcblxuXHQvLyBQYXJzZSB0ZW1wbGF0ZSBleHByZXNzaW9uLlxuXG5cdHBwJDMucGFyc2VUZW1wbGF0ZUVsZW1lbnQgPSBmdW5jdGlvbihyZWYpIHtcblx0ICB2YXIgaXNUYWdnZWQgPSByZWYuaXNUYWdnZWQ7XG5cblx0ICB2YXIgZWxlbSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuaW52YWxpZFRlbXBsYXRlKSB7XG5cdCAgICBpZiAoIWlzVGFnZ2VkKSB7XG5cdCAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIkJhZCBlc2NhcGUgc2VxdWVuY2UgaW4gdW50YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFwiKTtcblx0ICAgIH1cblx0ICAgIGVsZW0udmFsdWUgPSB7XG5cdCAgICAgIHJhdzogdGhpcy52YWx1ZSxcblx0ICAgICAgY29va2VkOiBudWxsXG5cdCAgICB9O1xuXHQgIH0gZWxzZSB7XG5cdCAgICBlbGVtLnZhbHVlID0ge1xuXHQgICAgICByYXc6IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5lbmQpLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIiksXG5cdCAgICAgIGNvb2tlZDogdGhpcy52YWx1ZVxuXHQgICAgfTtcblx0ICB9XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgZWxlbS50YWlsID0gdGhpcy50eXBlID09PSB0eXBlcy5iYWNrUXVvdGU7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShlbGVtLCBcIlRlbXBsYXRlRWxlbWVudFwiKVxuXHR9O1xuXG5cdHBwJDMucGFyc2VUZW1wbGF0ZSA9IGZ1bmN0aW9uKHJlZikge1xuXHQgIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcblx0ICB2YXIgaXNUYWdnZWQgPSByZWYuaXNUYWdnZWQ7IGlmICggaXNUYWdnZWQgPT09IHZvaWQgMCApIGlzVGFnZ2VkID0gZmFsc2U7XG5cblx0ICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgbm9kZS5leHByZXNzaW9ucyA9IFtdO1xuXHQgIHZhciBjdXJFbHQgPSB0aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KHtpc1RhZ2dlZDogaXNUYWdnZWR9KTtcblx0ICBub2RlLnF1YXNpcyA9IFtjdXJFbHRdO1xuXHQgIHdoaWxlICghY3VyRWx0LnRhaWwpIHtcblx0ICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmVvZikgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIlVudGVybWluYXRlZCB0ZW1wbGF0ZSBsaXRlcmFsXCIpOyB9XG5cdCAgICB0aGlzLmV4cGVjdCh0eXBlcy5kb2xsYXJCcmFjZUwpO1xuXHQgICAgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuXHQgICAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VSKTtcblx0ICAgIG5vZGUucXVhc2lzLnB1c2goY3VyRWx0ID0gdGhpcy5wYXJzZVRlbXBsYXRlRWxlbWVudCh7aXNUYWdnZWQ6IGlzVGFnZ2VkfSkpO1xuXHQgIH1cblx0ICB0aGlzLm5leHQoKTtcblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVGVtcGxhdGVMaXRlcmFsXCIpXG5cdH07XG5cblx0cHAkMy5pc0FzeW5jUHJvcCA9IGZ1bmN0aW9uKHByb3ApIHtcblx0ICByZXR1cm4gIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgcHJvcC5rZXkubmFtZSA9PT0gXCJhc3luY1wiICYmXG5cdCAgICAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMubnVtIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuYnJhY2tldEwgfHwgdGhpcy50eXBlLmtleXdvcmQgfHwgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHRoaXMudHlwZSA9PT0gdHlwZXMuc3RhcikpICYmXG5cdCAgICAhbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKVxuXHR9O1xuXG5cdC8vIFBhcnNlIGFuIG9iamVjdCBsaXRlcmFsIG9yIGJpbmRpbmcgcGF0dGVybi5cblxuXHRwcCQzLnBhcnNlT2JqID0gZnVuY3Rpb24oaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpLCBmaXJzdCA9IHRydWUsIHByb3BIYXNoID0ge307XG5cdCAgbm9kZS5wcm9wZXJ0aWVzID0gW107XG5cdCAgdGhpcy5uZXh0KCk7XG5cdCAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG5cdCAgICBpZiAoIWZpcnN0KSB7XG5cdCAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbW1hKTtcblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmIHRoaXMuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuXHQgICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG5cdCAgICB2YXIgcHJvcCA9IHRoaXMucGFyc2VQcm9wZXJ0eShpc1BhdHRlcm4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgICAgaWYgKCFpc1BhdHRlcm4pIHsgdGhpcy5jaGVja1Byb3BDbGFzaChwcm9wLCBwcm9wSGFzaCwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7IH1cblx0ICAgIG5vZGUucHJvcGVydGllcy5wdXNoKHByb3ApO1xuXHQgIH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzUGF0dGVybiA/IFwiT2JqZWN0UGF0dGVyblwiIDogXCJPYmplY3RFeHByZXNzaW9uXCIpXG5cdH07XG5cblx0cHAkMy5wYXJzZVByb3BlcnR5ID0gZnVuY3Rpb24oaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIHByb3AgPSB0aGlzLnN0YXJ0Tm9kZSgpLCBpc0dlbmVyYXRvciwgaXNBc3luYywgc3RhcnRQb3MsIHN0YXJ0TG9jO1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiB0aGlzLmVhdCh0eXBlcy5lbGxpcHNpcykpIHtcblx0ICAgIGlmIChpc1BhdHRlcm4pIHtcblx0ICAgICAgcHJvcC5hcmd1bWVudCA9IHRoaXMucGFyc2VJZGVudChmYWxzZSk7XG5cdCAgICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7XG5cdCAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiUmVzdEVsZW1lbnRcIilcblx0ICAgIH1cblx0ICAgIC8vIFRvIGRpc2FsbG93IHBhcmVudGhlc2l6ZWQgaWRlbnRpZmllciB2aWEgYHRoaXMudG9Bc3NpZ25hYmxlKClgLlxuXHQgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMucGFyZW5MICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcblx0ICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA8IDApIHtcblx0ICAgICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSB0aGlzLnN0YXJ0O1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kIDwgMCkge1xuXHQgICAgICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPSB0aGlzLnN0YXJ0O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvLyBQYXJzZSBhcmd1bWVudC5cblx0ICAgIHByb3AuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgICAgLy8gVG8gZGlzYWxsb3cgdHJhaWxpbmcgY29tbWEgdmlhIGB0aGlzLnRvQXNzaWduYWJsZSgpYC5cblx0ICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hIDwgMCkge1xuXHQgICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSB0aGlzLnN0YXJ0O1xuXHQgICAgfVxuXHQgICAgLy8gRmluaXNoXG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiU3ByZWFkRWxlbWVudFwiKVxuXHQgIH1cblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcblx0ICAgIHByb3AubWV0aG9kID0gZmFsc2U7XG5cdCAgICBwcm9wLnNob3J0aGFuZCA9IGZhbHNlO1xuXHQgICAgaWYgKGlzUGF0dGVybiB8fCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgICAgIHN0YXJ0UG9zID0gdGhpcy5zdGFydDtcblx0ICAgICAgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuXHQgICAgfVxuXHQgICAgaWYgKCFpc1BhdHRlcm4pXG5cdCAgICAgIHsgaXNHZW5lcmF0b3IgPSB0aGlzLmVhdCh0eXBlcy5zdGFyKTsgfVxuXHQgIH1cblx0ICB2YXIgY29udGFpbnNFc2MgPSB0aGlzLmNvbnRhaW5zRXNjO1xuXHQgIHRoaXMucGFyc2VQcm9wZXJ0eU5hbWUocHJvcCk7XG5cdCAgaWYgKCFpc1BhdHRlcm4gJiYgIWNvbnRhaW5zRXNjICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmICFpc0dlbmVyYXRvciAmJiB0aGlzLmlzQXN5bmNQcm9wKHByb3ApKSB7XG5cdCAgICBpc0FzeW5jID0gdHJ1ZTtcblx0ICAgIGlzR2VuZXJhdG9yID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgdGhpcy5lYXQodHlwZXMuc3Rhcik7XG5cdCAgICB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKHByb3AsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBpc0FzeW5jID0gZmFsc2U7XG5cdCAgfVxuXHQgIHRoaXMucGFyc2VQcm9wZXJ0eVZhbHVlKHByb3AsIGlzUGF0dGVybiwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgY29udGFpbnNFc2MpO1xuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUocHJvcCwgXCJQcm9wZXJ0eVwiKVxuXHR9O1xuXG5cdHBwJDMucGFyc2VQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24ocHJvcCwgaXNQYXR0ZXJuLCBpc0dlbmVyYXRvciwgaXNBc3luYywgc3RhcnRQb3MsIHN0YXJ0TG9jLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBjb250YWluc0VzYykge1xuXHQgIGlmICgoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb2xvbilcblx0ICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblxuXHQgIGlmICh0aGlzLmVhdCh0eXBlcy5jb2xvbikpIHtcblx0ICAgIHByb3AudmFsdWUgPSBpc1BhdHRlcm4gPyB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHRoaXMuc3RhcnQsIHRoaXMuc3RhcnRMb2MpIDogdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICAgIHByb3Aua2luZCA9IFwiaW5pdFwiO1xuXHQgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy50eXBlID09PSB0eXBlcy5wYXJlbkwpIHtcblx0ICAgIGlmIChpc1BhdHRlcm4pIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0ICAgIHByb3Aua2luZCA9IFwiaW5pdFwiO1xuXHQgICAgcHJvcC5tZXRob2QgPSB0cnVlO1xuXHQgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNZXRob2QoaXNHZW5lcmF0b3IsIGlzQXN5bmMpO1xuXHQgIH0gZWxzZSBpZiAoIWlzUGF0dGVybiAmJiAhY29udGFpbnNFc2MgJiZcblx0ICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG5cdCAgICAgICAgICAgICAocHJvcC5rZXkubmFtZSA9PT0gXCJnZXRcIiB8fCBwcm9wLmtleS5uYW1lID09PSBcInNldFwiKSAmJlxuXHQgICAgICAgICAgICAgKHRoaXMudHlwZSAhPT0gdHlwZXMuY29tbWEgJiYgdGhpcy50eXBlICE9PSB0eXBlcy5icmFjZVIgJiYgdGhpcy50eXBlICE9PSB0eXBlcy5lcSkpIHtcblx0ICAgIGlmIChpc0dlbmVyYXRvciB8fCBpc0FzeW5jKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICBwcm9wLmtpbmQgPSBwcm9wLmtleS5uYW1lO1xuXHQgICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wKTtcblx0ICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGZhbHNlKTtcblx0ICAgIHZhciBwYXJhbUNvdW50ID0gcHJvcC5raW5kID09PSBcImdldFwiID8gMCA6IDE7XG5cdCAgICBpZiAocHJvcC52YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSBwYXJhbUNvdW50KSB7XG5cdCAgICAgIHZhciBzdGFydCA9IHByb3AudmFsdWUuc3RhcnQ7XG5cdCAgICAgIGlmIChwcm9wLmtpbmQgPT09IFwiZ2V0XCIpXG5cdCAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTsgfVxuXHQgICAgICBlbHNlXG5cdCAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwic2V0dGVyIHNob3VsZCBoYXZlIGV4YWN0bHkgb25lIHBhcmFtXCIpOyB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAocHJvcC5raW5kID09PSBcInNldFwiICYmIHByb3AudmFsdWUucGFyYW1zWzBdLnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIilcblx0ICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShwcm9wLnZhbHVlLnBhcmFtc1swXS5zdGFydCwgXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTsgfVxuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpIHtcblx0ICAgIGlmIChpc0dlbmVyYXRvciB8fCBpc0FzeW5jKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cdCAgICB0aGlzLmNoZWNrVW5yZXNlcnZlZChwcm9wLmtleSk7XG5cdCAgICBpZiAocHJvcC5rZXkubmFtZSA9PT0gXCJhd2FpdFwiICYmICF0aGlzLmF3YWl0SWRlbnRQb3MpXG5cdCAgICAgIHsgdGhpcy5hd2FpdElkZW50UG9zID0gc3RhcnRQb3M7IH1cblx0ICAgIHByb3Aua2luZCA9IFwiaW5pdFwiO1xuXHQgICAgaWYgKGlzUGF0dGVybikge1xuXHQgICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdChzdGFydFBvcywgc3RhcnRMb2MsIHByb3Aua2V5KTtcblx0ICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5lcSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA8IDApXG5cdCAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA9IHRoaXMuc3RhcnQ7IH1cblx0ICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcm9wLmtleSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBwcm9wLnZhbHVlID0gcHJvcC5rZXk7XG5cdCAgICB9XG5cdCAgICBwcm9wLnNob3J0aGFuZCA9IHRydWU7XG5cdCAgfSBlbHNlIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblx0fTtcblxuXHRwcCQzLnBhcnNlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24ocHJvcCkge1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuXHQgICAgaWYgKHRoaXMuZWF0KHR5cGVzLmJyYWNrZXRMKSkge1xuXHQgICAgICBwcm9wLmNvbXB1dGVkID0gdHJ1ZTtcblx0ICAgICAgcHJvcC5rZXkgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcblx0ICAgICAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2tldFIpO1xuXHQgICAgICByZXR1cm4gcHJvcC5rZXlcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHByb3AuY29tcHV0ZWQgPSBmYWxzZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHByb3Aua2V5ID0gdGhpcy50eXBlID09PSB0eXBlcy5udW0gfHwgdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgPyB0aGlzLnBhcnNlRXhwckF0b20oKSA6IHRoaXMucGFyc2VJZGVudCh0aGlzLm9wdGlvbnMuYWxsb3dSZXNlcnZlZCAhPT0gXCJuZXZlclwiKVxuXHR9O1xuXG5cdC8vIEluaXRpYWxpemUgZW1wdHkgZnVuY3Rpb24gbm9kZS5cblxuXHRwcCQzLmluaXRGdW5jdGlvbiA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICBub2RlLmlkID0gbnVsbDtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgbm9kZS5nZW5lcmF0b3IgPSBub2RlLmV4cHJlc3Npb24gPSBmYWxzZTsgfVxuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCkgeyBub2RlLmFzeW5jID0gZmFsc2U7IH1cblx0fTtcblxuXHQvLyBQYXJzZSBvYmplY3Qgb3IgY2xhc3MgbWV0aG9kLlxuXG5cdHBwJDMucGFyc2VNZXRob2QgPSBmdW5jdGlvbihpc0dlbmVyYXRvciwgaXNBc3luYywgYWxsb3dEaXJlY3RTdXBlcikge1xuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG5cblx0ICB0aGlzLmluaXRGdW5jdGlvbihub2RlKTtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpXG5cdCAgICB7IG5vZGUuZ2VuZXJhdG9yID0gaXNHZW5lcmF0b3I7IH1cblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpXG5cdCAgICB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuXHQgIHRoaXMueWllbGRQb3MgPSAwO1xuXHQgIHRoaXMuYXdhaXRQb3MgPSAwO1xuXHQgIHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG5cdCAgdGhpcy5lbnRlclNjb3BlKGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgbm9kZS5nZW5lcmF0b3IpIHwgU0NPUEVfU1VQRVIgfCAoYWxsb3dEaXJlY3RTdXBlciA/IFNDT1BFX0RJUkVDVF9TVVBFUiA6IDApKTtcblxuXHQgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG5cdCAgbm9kZS5wYXJhbXMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QodHlwZXMucGFyZW5SLCBmYWxzZSwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpO1xuXHQgIHRoaXMuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG5cdCAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCBmYWxzZSwgdHJ1ZSk7XG5cblx0ICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG5cdCAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuXHQgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKVxuXHR9O1xuXG5cdC8vIFBhcnNlIGFycm93IGZ1bmN0aW9uIGV4cHJlc3Npb24gd2l0aCBnaXZlbiBwYXJhbWV0ZXJzLlxuXG5cdHBwJDMucGFyc2VBcnJvd0V4cHJlc3Npb24gPSBmdW5jdGlvbihub2RlLCBwYXJhbXMsIGlzQXN5bmMpIHtcblx0ICB2YXIgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG5cblx0ICB0aGlzLmVudGVyU2NvcGUoZnVuY3Rpb25GbGFncyhpc0FzeW5jLCBmYWxzZSkgfCBTQ09QRV9BUlJPVyk7XG5cdCAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KSB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuXHQgIHRoaXMueWllbGRQb3MgPSAwO1xuXHQgIHRoaXMuYXdhaXRQb3MgPSAwO1xuXHQgIHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG5cblx0ICBub2RlLnBhcmFtcyA9IHRoaXMudG9Bc3NpZ25hYmxlTGlzdChwYXJhbXMsIHRydWUpO1xuXHQgIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgdHJ1ZSwgZmFsc2UpO1xuXG5cdCAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuXHQgIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcblx0ICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zO1xuXHQgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiKVxuXHR9O1xuXG5cdC8vIFBhcnNlIGZ1bmN0aW9uIGJvZHkgYW5kIGNoZWNrIHBhcmFtZXRlcnMuXG5cblx0cHAkMy5wYXJzZUZ1bmN0aW9uQm9keSA9IGZ1bmN0aW9uKG5vZGUsIGlzQXJyb3dGdW5jdGlvbiwgaXNNZXRob2QpIHtcblx0ICB2YXIgaXNFeHByZXNzaW9uID0gaXNBcnJvd0Z1bmN0aW9uICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VMO1xuXHQgIHZhciBvbGRTdHJpY3QgPSB0aGlzLnN0cmljdCwgdXNlU3RyaWN0ID0gZmFsc2U7XG5cblx0ICBpZiAoaXNFeHByZXNzaW9uKSB7XG5cdCAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcblx0ICAgIG5vZGUuZXhwcmVzc2lvbiA9IHRydWU7XG5cdCAgICB0aGlzLmNoZWNrUGFyYW1zKG5vZGUsIGZhbHNlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIG5vblNpbXBsZSA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA3ICYmICF0aGlzLmlzU2ltcGxlUGFyYW1MaXN0KG5vZGUucGFyYW1zKTtcblx0ICAgIGlmICghb2xkU3RyaWN0IHx8IG5vblNpbXBsZSkge1xuXHQgICAgICB1c2VTdHJpY3QgPSB0aGlzLnN0cmljdERpcmVjdGl2ZSh0aGlzLmVuZCk7XG5cdCAgICAgIC8vIElmIHRoaXMgaXMgYSBzdHJpY3QgbW9kZSBmdW5jdGlvbiwgdmVyaWZ5IHRoYXQgYXJndW1lbnQgbmFtZXNcblx0ICAgICAgLy8gYXJlIG5vdCByZXBlYXRlZCwgYW5kIGl0IGRvZXMgbm90IHRyeSB0byBiaW5kIHRoZSB3b3JkcyBgZXZhbGBcblx0ICAgICAgLy8gb3IgYGFyZ3VtZW50c2AuXG5cdCAgICAgIGlmICh1c2VTdHJpY3QgJiYgbm9uU2ltcGxlKVxuXHQgICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiKTsgfVxuXHQgICAgfVxuXHQgICAgLy8gU3RhcnQgYSBuZXcgc2NvcGUgd2l0aCByZWdhcmQgdG8gbGFiZWxzIGFuZCB0aGUgYGluRnVuY3Rpb25gXG5cdCAgICAvLyBmbGFnIChyZXN0b3JlIHRoZW0gdG8gdGhlaXIgb2xkIHZhbHVlIGFmdGVyd2FyZHMpLlxuXHQgICAgdmFyIG9sZExhYmVscyA9IHRoaXMubGFiZWxzO1xuXHQgICAgdGhpcy5sYWJlbHMgPSBbXTtcblx0ICAgIGlmICh1c2VTdHJpY3QpIHsgdGhpcy5zdHJpY3QgPSB0cnVlOyB9XG5cblx0ICAgIC8vIEFkZCB0aGUgcGFyYW1zIHRvIHZhckRlY2xhcmVkTmFtZXMgdG8gZW5zdXJlIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duXG5cdCAgICAvLyBpZiBhIGxldC9jb25zdCBkZWNsYXJhdGlvbiBpbiB0aGUgZnVuY3Rpb24gY2xhc2hlcyB3aXRoIG9uZSBvZiB0aGUgcGFyYW1zLlxuXHQgICAgdGhpcy5jaGVja1BhcmFtcyhub2RlLCAhb2xkU3RyaWN0ICYmICF1c2VTdHJpY3QgJiYgIWlzQXJyb3dGdW5jdGlvbiAmJiAhaXNNZXRob2QgJiYgdGhpcy5pc1NpbXBsZVBhcmFtTGlzdChub2RlLnBhcmFtcykpO1xuXHQgICAgLy8gRW5zdXJlIHRoZSBmdW5jdGlvbiBuYW1lIGlzbid0IGEgZm9yYmlkZGVuIGlkZW50aWZpZXIgaW4gc3RyaWN0IG1vZGUsIGUuZy4gJ2V2YWwnXG5cdCAgICBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5pZCkgeyB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBCSU5EX09VVFNJREUpOyB9XG5cdCAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlQmxvY2soZmFsc2UsIHVuZGVmaW5lZCwgdXNlU3RyaWN0ICYmICFvbGRTdHJpY3QpO1xuXHQgICAgbm9kZS5leHByZXNzaW9uID0gZmFsc2U7XG5cdCAgICB0aGlzLmFkYXB0RGlyZWN0aXZlUHJvbG9ndWUobm9kZS5ib2R5LmJvZHkpO1xuXHQgICAgdGhpcy5sYWJlbHMgPSBvbGRMYWJlbHM7XG5cdCAgfVxuXHQgIHRoaXMuZXhpdFNjb3BlKCk7XG5cdH07XG5cblx0cHAkMy5pc1NpbXBsZVBhcmFtTGlzdCA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHQgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcGFyYW1zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcblx0ICAgIHtcblx0ICAgIHZhciBwYXJhbSA9IGxpc3RbaV07XG5cblx0ICAgIGlmIChwYXJhbS50eXBlICE9PSBcIklkZW50aWZpZXJcIikgeyByZXR1cm4gZmFsc2Vcblx0ICB9IH1cblx0ICByZXR1cm4gdHJ1ZVxuXHR9O1xuXG5cdC8vIENoZWNrcyBmdW5jdGlvbiBwYXJhbXMgZm9yIHZhcmlvdXMgZGlzYWxsb3dlZCBwYXR0ZXJucyBzdWNoIGFzIHVzaW5nIFwiZXZhbFwiXG5cdC8vIG9yIFwiYXJndW1lbnRzXCIgYW5kIGR1cGxpY2F0ZSBwYXJhbWV0ZXJzLlxuXG5cdHBwJDMuY2hlY2tQYXJhbXMgPSBmdW5jdGlvbihub2RlLCBhbGxvd0R1cGxpY2F0ZXMpIHtcblx0ICB2YXIgbmFtZUhhc2ggPSB7fTtcblx0ICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IG5vZGUucGFyYW1zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcblx0ICAgIHtcblx0ICAgIHZhciBwYXJhbSA9IGxpc3RbaV07XG5cblx0ICAgIHRoaXMuY2hlY2tMVmFsKHBhcmFtLCBCSU5EX1ZBUiwgYWxsb3dEdXBsaWNhdGVzID8gbnVsbCA6IG5hbWVIYXNoKTtcblx0ICB9XG5cdH07XG5cblx0Ly8gUGFyc2VzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZXhwcmVzc2lvbnMsIGFuZCByZXR1cm5zIHRoZW0gYXNcblx0Ly8gYW4gYXJyYXkuIGBjbG9zZWAgaXMgdGhlIHRva2VuIHR5cGUgdGhhdCBlbmRzIHRoZSBsaXN0LCBhbmRcblx0Ly8gYGFsbG93RW1wdHlgIGNhbiBiZSB0dXJuZWQgb24gdG8gYWxsb3cgc3Vic2VxdWVudCBjb21tYXMgd2l0aFxuXHQvLyBub3RoaW5nIGluIGJldHdlZW4gdGhlbSB0byBiZSBwYXJzZWQgYXMgYG51bGxgICh3aGljaCBpcyBuZWVkZWRcblx0Ly8gZm9yIGFycmF5IGxpdGVyYWxzKS5cblxuXHRwcCQzLnBhcnNlRXhwckxpc3QgPSBmdW5jdGlvbihjbG9zZSwgYWxsb3dUcmFpbGluZ0NvbW1hLCBhbGxvd0VtcHR5LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG5cdCAgdmFyIGVsdHMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuXHQgIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG5cdCAgICBpZiAoIWZpcnN0KSB7XG5cdCAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbW1hKTtcblx0ICAgICAgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzLmFmdGVyVHJhaWxpbmdDb21tYShjbG9zZSkpIHsgYnJlYWsgfVxuXHQgICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG5cdCAgICB2YXIgZWx0ID0gKHZvaWQgMCk7XG5cdCAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKVxuXHQgICAgICB7IGVsdCA9IG51bGw7IH1cblx0ICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcblx0ICAgICAgZWx0ID0gdGhpcy5wYXJzZVNwcmVhZChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb21tYSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPCAwKVxuXHQgICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gdGhpcy5zdGFydDsgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZWx0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcblx0ICAgIH1cblx0ICAgIGVsdHMucHVzaChlbHQpO1xuXHQgIH1cblx0ICByZXR1cm4gZWx0c1xuXHR9O1xuXG5cdHBwJDMuY2hlY2tVbnJlc2VydmVkID0gZnVuY3Rpb24ocmVmKSB7XG5cdCAgdmFyIHN0YXJ0ID0gcmVmLnN0YXJ0O1xuXHQgIHZhciBlbmQgPSByZWYuZW5kO1xuXHQgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cblx0ICBpZiAodGhpcy5pbkdlbmVyYXRvciAmJiBuYW1lID09PSBcInlpZWxkXCIpXG5cdCAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJDYW5ub3QgdXNlICd5aWVsZCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYSBnZW5lcmF0b3JcIik7IH1cblx0ICBpZiAodGhpcy5pbkFzeW5jICYmIG5hbWUgPT09IFwiYXdhaXRcIilcblx0ICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcIkNhbm5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuXHQgIGlmICh0aGlzLmtleXdvcmRzLnRlc3QobmFtZSkpXG5cdCAgICB7IHRoaXMucmFpc2Uoc3RhcnQsIChcIlVuZXhwZWN0ZWQga2V5d29yZCAnXCIgKyBuYW1lICsgXCInXCIpKTsgfVxuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2ICYmXG5cdCAgICB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpLmluZGV4T2YoXCJcXFxcXCIpICE9PSAtMSkgeyByZXR1cm4gfVxuXHQgIHZhciByZSA9IHRoaXMuc3RyaWN0ID8gdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0IDogdGhpcy5yZXNlcnZlZFdvcmRzO1xuXHQgIGlmIChyZS50ZXN0KG5hbWUpKSB7XG5cdCAgICBpZiAoIXRoaXMuaW5Bc3luYyAmJiBuYW1lID09PSBcImF3YWl0XCIpXG5cdCAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcIkNhbm5vdCB1c2Uga2V5d29yZCAnYXdhaXQnIG91dHNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIik7IH1cblx0ICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgKFwiVGhlIGtleXdvcmQgJ1wiICsgbmFtZSArIFwiJyBpcyByZXNlcnZlZFwiKSk7XG5cdCAgfVxuXHR9O1xuXG5cdC8vIFBhcnNlIHRoZSBuZXh0IHRva2VuIGFzIGFuIGlkZW50aWZpZXIuIElmIGBsaWJlcmFsYCBpcyB0cnVlICh1c2VkXG5cdC8vIHdoZW4gcGFyc2luZyBwcm9wZXJ0aWVzKSwgaXQgd2lsbCBhbHNvIGNvbnZlcnQga2V5d29yZHMgaW50b1xuXHQvLyBpZGVudGlmaWVycy5cblxuXHRwcCQzLnBhcnNlSWRlbnQgPSBmdW5jdGlvbihsaWJlcmFsLCBpc0JpbmRpbmcpIHtcblx0ICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cdCAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSkge1xuXHQgICAgbm9kZS5uYW1lID0gdGhpcy52YWx1ZTtcblx0ICB9IGVsc2UgaWYgKHRoaXMudHlwZS5rZXl3b3JkKSB7XG5cdCAgICBub2RlLm5hbWUgPSB0aGlzLnR5cGUua2V5d29yZDtcblxuXHQgICAgLy8gVG8gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hY29ybmpzL2Fjb3JuL2lzc3Vlcy81NzVcblx0ICAgIC8vIGBjbGFzc2AgYW5kIGBmdW5jdGlvbmAga2V5d29yZHMgcHVzaCBuZXcgY29udGV4dCBpbnRvIHRoaXMuY29udGV4dC5cblx0ICAgIC8vIEJ1dCB0aGVyZSBpcyBubyBjaGFuY2UgdG8gcG9wIHRoZSBjb250ZXh0IGlmIHRoZSBrZXl3b3JkIGlzIGNvbnN1bWVkIGFzIGFuIGlkZW50aWZpZXIgc3VjaCBhcyBhIHByb3BlcnR5IG5hbWUuXG5cdCAgICAvLyBJZiB0aGUgcHJldmlvdXMgdG9rZW4gaXMgYSBkb3QsIHRoaXMgZG9lcyBub3QgYXBwbHkgYmVjYXVzZSB0aGUgY29udGV4dC1tYW5hZ2luZyBjb2RlIGFscmVhZHkgaWdub3JlZCB0aGUga2V5d29yZFxuXHQgICAgaWYgKChub2RlLm5hbWUgPT09IFwiY2xhc3NcIiB8fCBub2RlLm5hbWUgPT09IFwiZnVuY3Rpb25cIikgJiZcblx0ICAgICAgICAodGhpcy5sYXN0VG9rRW5kICE9PSB0aGlzLmxhc3RUb2tTdGFydCArIDEgfHwgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMubGFzdFRva1N0YXJ0KSAhPT0gNDYpKSB7XG5cdCAgICAgIHRoaXMuY29udGV4dC5wb3AoKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdGhpcy51bmV4cGVjdGVkKCk7XG5cdCAgfVxuXHQgIHRoaXMubmV4dCghIWxpYmVyYWwpO1xuXHQgIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklkZW50aWZpZXJcIik7XG5cdCAgaWYgKCFsaWJlcmFsKSB7XG5cdCAgICB0aGlzLmNoZWNrVW5yZXNlcnZlZChub2RlKTtcblx0ICAgIGlmIChub2RlLm5hbWUgPT09IFwiYXdhaXRcIiAmJiAhdGhpcy5hd2FpdElkZW50UG9zKVxuXHQgICAgICB7IHRoaXMuYXdhaXRJZGVudFBvcyA9IG5vZGUuc3RhcnQ7IH1cblx0ICB9XG5cdCAgcmV0dXJuIG5vZGVcblx0fTtcblxuXHQvLyBQYXJzZXMgeWllbGQgZXhwcmVzc2lvbiBpbnNpZGUgZ2VuZXJhdG9yLlxuXG5cdHBwJDMucGFyc2VZaWVsZCA9IGZ1bmN0aW9uKG5vSW4pIHtcblx0ICBpZiAoIXRoaXMueWllbGRQb3MpIHsgdGhpcy55aWVsZFBvcyA9IHRoaXMuc3RhcnQ7IH1cblxuXHQgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcblx0ICB0aGlzLm5leHQoKTtcblx0ICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5zZW1pIHx8IHRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgfHwgKHRoaXMudHlwZSAhPT0gdHlwZXMuc3RhciAmJiAhdGhpcy50eXBlLnN0YXJ0c0V4cHIpKSB7XG5cdCAgICBub2RlLmRlbGVnYXRlID0gZmFsc2U7XG5cdCAgICBub2RlLmFyZ3VtZW50ID0gbnVsbDtcblx0ICB9IGVsc2Uge1xuXHQgICAgbm9kZS5kZWxlZ2F0ZSA9IHRoaXMuZWF0KHR5cGVzLnN0YXIpO1xuXHQgICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKTtcblx0ICB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIllpZWxkRXhwcmVzc2lvblwiKVxuXHR9O1xuXG5cdHBwJDMucGFyc2VBd2FpdCA9IGZ1bmN0aW9uKCkge1xuXHQgIGlmICghdGhpcy5hd2FpdFBvcykgeyB0aGlzLmF3YWl0UG9zID0gdGhpcy5zdGFydDsgfVxuXG5cdCAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuXHQgIHRoaXMubmV4dCgpO1xuXHQgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSk7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkF3YWl0RXhwcmVzc2lvblwiKVxuXHR9O1xuXG5cdHZhciBwcCQ0ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXHQvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmFpc2UgZXhjZXB0aW9ucyBvbiBwYXJzZSBlcnJvcnMuIEl0XG5cdC8vIHRha2VzIGFuIG9mZnNldCBpbnRlZ2VyIChpbnRvIHRoZSBjdXJyZW50IGBpbnB1dGApIHRvIGluZGljYXRlXG5cdC8vIHRoZSBsb2NhdGlvbiBvZiB0aGUgZXJyb3IsIGF0dGFjaGVzIHRoZSBwb3NpdGlvbiB0byB0aGUgZW5kXG5cdC8vIG9mIHRoZSBlcnJvciBtZXNzYWdlLCBhbmQgdGhlbiByYWlzZXMgYSBgU3ludGF4RXJyb3JgIHdpdGggdGhhdFxuXHQvLyBtZXNzYWdlLlxuXG5cdHBwJDQucmFpc2UgPSBmdW5jdGlvbihwb3MsIG1lc3NhZ2UpIHtcblx0ICB2YXIgbG9jID0gZ2V0TGluZUluZm8odGhpcy5pbnB1dCwgcG9zKTtcblx0ICBtZXNzYWdlICs9IFwiIChcIiArIGxvYy5saW5lICsgXCI6XCIgKyBsb2MuY29sdW1uICsgXCIpXCI7XG5cdCAgdmFyIGVyciA9IG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKTtcblx0ICBlcnIucG9zID0gcG9zOyBlcnIubG9jID0gbG9jOyBlcnIucmFpc2VkQXQgPSB0aGlzLnBvcztcblx0ICB0aHJvdyBlcnJcblx0fTtcblxuXHRwcCQ0LnJhaXNlUmVjb3ZlcmFibGUgPSBwcCQ0LnJhaXNlO1xuXG5cdHBwJDQuY3VyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblx0ICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuXHQgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmN1ckxpbmUsIHRoaXMucG9zIC0gdGhpcy5saW5lU3RhcnQpXG5cdCAgfVxuXHR9O1xuXG5cdHZhciBwcCQ1ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXHR2YXIgU2NvcGUgPSBmdW5jdGlvbiBTY29wZShmbGFncykge1xuXHQgIHRoaXMuZmxhZ3MgPSBmbGFncztcblx0ICAvLyBBIGxpc3Qgb2YgdmFyLWRlY2xhcmVkIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcblx0ICB0aGlzLnZhciA9IFtdO1xuXHQgIC8vIEEgbGlzdCBvZiBsZXhpY2FsbHktZGVjbGFyZWQgbmFtZXMgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZVxuXHQgIHRoaXMubGV4aWNhbCA9IFtdO1xuXHQgIC8vIEEgbGlzdCBvZiBsZXhpY2FsbHktZGVjbGFyZWQgRnVuY3Rpb25EZWNsYXJhdGlvbiBuYW1lcyBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlXG5cdCAgdGhpcy5mdW5jdGlvbnMgPSBbXTtcblx0fTtcblxuXHQvLyBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIGtlZXAgdHJhY2sgb2YgZGVjbGFyZWQgdmFyaWFibGVzIGluIHRoZSBjdXJyZW50IHNjb3BlIGluIG9yZGVyIHRvIGRldGVjdCBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZXMuXG5cblx0cHAkNS5lbnRlclNjb3BlID0gZnVuY3Rpb24oZmxhZ3MpIHtcblx0ICB0aGlzLnNjb3BlU3RhY2sucHVzaChuZXcgU2NvcGUoZmxhZ3MpKTtcblx0fTtcblxuXHRwcCQ1LmV4aXRTY29wZSA9IGZ1bmN0aW9uKCkge1xuXHQgIHRoaXMuc2NvcGVTdGFjay5wb3AoKTtcblx0fTtcblxuXHQvLyBUaGUgc3BlYyBzYXlzOlxuXHQvLyA+IEF0IHRoZSB0b3AgbGV2ZWwgb2YgYSBmdW5jdGlvbiwgb3Igc2NyaXB0LCBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgYXJlXG5cdC8vID4gdHJlYXRlZCBsaWtlIHZhciBkZWNsYXJhdGlvbnMgcmF0aGVyIHRoYW4gbGlrZSBsZXhpY2FsIGRlY2xhcmF0aW9ucy5cblx0cHAkNS50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZSA9IGZ1bmN0aW9uKHNjb3BlKSB7XG5cdCAgcmV0dXJuIChzY29wZS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSB8fCAhdGhpcy5pbk1vZHVsZSAmJiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9UT1ApXG5cdH07XG5cblx0cHAkNS5kZWNsYXJlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIGJpbmRpbmdUeXBlLCBwb3MpIHtcblx0ICB2YXIgcmVkZWNsYXJlZCA9IGZhbHNlO1xuXHQgIGlmIChiaW5kaW5nVHlwZSA9PT0gQklORF9MRVhJQ0FMKSB7XG5cdCAgICB2YXIgc2NvcGUgPSB0aGlzLmN1cnJlbnRTY29wZSgpO1xuXHQgICAgcmVkZWNsYXJlZCA9IHNjb3BlLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xIHx8IHNjb3BlLmZ1bmN0aW9ucy5pbmRleE9mKG5hbWUpID4gLTEgfHwgc2NvcGUudmFyLmluZGV4T2YobmFtZSkgPiAtMTtcblx0ICAgIHNjb3BlLmxleGljYWwucHVzaChuYW1lKTtcblx0ICAgIGlmICh0aGlzLmluTW9kdWxlICYmIChzY29wZS5mbGFncyAmIFNDT1BFX1RPUCkpXG5cdCAgICAgIHsgZGVsZXRlIHRoaXMudW5kZWZpbmVkRXhwb3J0c1tuYW1lXTsgfVxuXHQgIH0gZWxzZSBpZiAoYmluZGluZ1R5cGUgPT09IEJJTkRfU0lNUExFX0NBVENIKSB7XG5cdCAgICB2YXIgc2NvcGUkMSA9IHRoaXMuY3VycmVudFNjb3BlKCk7XG5cdCAgICBzY29wZSQxLmxleGljYWwucHVzaChuYW1lKTtcblx0ICB9IGVsc2UgaWYgKGJpbmRpbmdUeXBlID09PSBCSU5EX0ZVTkNUSU9OKSB7XG5cdCAgICB2YXIgc2NvcGUkMiA9IHRoaXMuY3VycmVudFNjb3BlKCk7XG5cdCAgICBpZiAodGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFyKVxuXHQgICAgICB7IHJlZGVjbGFyZWQgPSBzY29wZSQyLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xOyB9XG5cdCAgICBlbHNlXG5cdCAgICAgIHsgcmVkZWNsYXJlZCA9IHNjb3BlJDIubGV4aWNhbC5pbmRleE9mKG5hbWUpID4gLTEgfHwgc2NvcGUkMi52YXIuaW5kZXhPZihuYW1lKSA+IC0xOyB9XG5cdCAgICBzY29wZSQyLmZ1bmN0aW9ucy5wdXNoKG5hbWUpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBmb3IgKHZhciBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdCAgICAgIHZhciBzY29wZSQzID0gdGhpcy5zY29wZVN0YWNrW2ldO1xuXHQgICAgICBpZiAoc2NvcGUkMy5sZXhpY2FsLmluZGV4T2YobmFtZSkgPiAtMSAmJiAhKChzY29wZSQzLmZsYWdzICYgU0NPUEVfU0lNUExFX0NBVENIKSAmJiBzY29wZSQzLmxleGljYWxbMF0gPT09IG5hbWUpIHx8XG5cdCAgICAgICAgICAhdGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZShzY29wZSQzKSAmJiBzY29wZSQzLmZ1bmN0aW9ucy5pbmRleE9mKG5hbWUpID4gLTEpIHtcblx0ICAgICAgICByZWRlY2xhcmVkID0gdHJ1ZTtcblx0ICAgICAgICBicmVha1xuXHQgICAgICB9XG5cdCAgICAgIHNjb3BlJDMudmFyLnB1c2gobmFtZSk7XG5cdCAgICAgIGlmICh0aGlzLmluTW9kdWxlICYmIChzY29wZSQzLmZsYWdzICYgU0NPUEVfVE9QKSlcblx0ICAgICAgICB7IGRlbGV0ZSB0aGlzLnVuZGVmaW5lZEV4cG9ydHNbbmFtZV07IH1cblx0ICAgICAgaWYgKHNjb3BlJDMuZmxhZ3MgJiBTQ09QRV9WQVIpIHsgYnJlYWsgfVxuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAocmVkZWNsYXJlZCkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocG9zLCAoXCJJZGVudGlmaWVyICdcIiArIG5hbWUgKyBcIicgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZFwiKSk7IH1cblx0fTtcblxuXHRwcCQ1LmNoZWNrTG9jYWxFeHBvcnQgPSBmdW5jdGlvbihpZCkge1xuXHQgIC8vIHNjb3BlLmZ1bmN0aW9ucyBtdXN0IGJlIGVtcHR5IGFzIE1vZHVsZSBjb2RlIGlzIGFsd2F5cyBzdHJpY3QuXG5cdCAgaWYgKHRoaXMuc2NvcGVTdGFja1swXS5sZXhpY2FsLmluZGV4T2YoaWQubmFtZSkgPT09IC0xICYmXG5cdCAgICAgIHRoaXMuc2NvcGVTdGFja1swXS52YXIuaW5kZXhPZihpZC5uYW1lKSA9PT0gLTEpIHtcblx0ICAgIHRoaXMudW5kZWZpbmVkRXhwb3J0c1tpZC5uYW1lXSA9IGlkO1xuXHQgIH1cblx0fTtcblxuXHRwcCQ1LmN1cnJlbnRTY29wZSA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdXG5cdH07XG5cblx0cHAkNS5jdXJyZW50VmFyU2NvcGUgPSBmdW5jdGlvbigpIHtcblx0ICBmb3IgKHZhciBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7OyBpLS0pIHtcblx0ICAgIHZhciBzY29wZSA9IHRoaXMuc2NvcGVTdGFja1tpXTtcblx0ICAgIGlmIChzY29wZS5mbGFncyAmIFNDT1BFX1ZBUikgeyByZXR1cm4gc2NvcGUgfVxuXHQgIH1cblx0fTtcblxuXHQvLyBDb3VsZCBiZSB1c2VmdWwgZm9yIGB0aGlzYCwgYG5ldy50YXJnZXRgLCBgc3VwZXIoKWAsIGBzdXBlci5wcm9wZXJ0eWAsIGFuZCBgc3VwZXJbcHJvcGVydHldYC5cblx0cHAkNS5jdXJyZW50VGhpc1Njb3BlID0gZnVuY3Rpb24oKSB7XG5cdCAgZm9yICh2YXIgaSA9IHRoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxOzsgaS0tKSB7XG5cdCAgICB2YXIgc2NvcGUgPSB0aGlzLnNjb3BlU3RhY2tbaV07XG5cdCAgICBpZiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9WQVIgJiYgIShzY29wZS5mbGFncyAmIFNDT1BFX0FSUk9XKSkgeyByZXR1cm4gc2NvcGUgfVxuXHQgIH1cblx0fTtcblxuXHR2YXIgTm9kZSA9IGZ1bmN0aW9uIE5vZGUocGFyc2VyLCBwb3MsIGxvYykge1xuXHQgIHRoaXMudHlwZSA9IFwiXCI7XG5cdCAgdGhpcy5zdGFydCA9IHBvcztcblx0ICB0aGlzLmVuZCA9IDA7XG5cdCAgaWYgKHBhcnNlci5vcHRpb25zLmxvY2F0aW9ucylcblx0ICAgIHsgdGhpcy5sb2MgPSBuZXcgU291cmNlTG9jYXRpb24ocGFyc2VyLCBsb2MpOyB9XG5cdCAgaWYgKHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGUpXG5cdCAgICB7IHRoaXMuc291cmNlRmlsZSA9IHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGU7IH1cblx0ICBpZiAocGFyc2VyLm9wdGlvbnMucmFuZ2VzKVxuXHQgICAgeyB0aGlzLnJhbmdlID0gW3BvcywgMF07IH1cblx0fTtcblxuXHQvLyBTdGFydCBhbiBBU1Qgbm9kZSwgYXR0YWNoaW5nIGEgc3RhcnQgb2Zmc2V0LlxuXG5cdHZhciBwcCQ2ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXHRwcCQ2LnN0YXJ0Tm9kZSA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKVxuXHR9O1xuXG5cdHBwJDYuc3RhcnROb2RlQXQgPSBmdW5jdGlvbihwb3MsIGxvYykge1xuXHQgIHJldHVybiBuZXcgTm9kZSh0aGlzLCBwb3MsIGxvYylcblx0fTtcblxuXHQvLyBGaW5pc2ggYW4gQVNUIG5vZGUsIGFkZGluZyBgdHlwZWAgYW5kIGBlbmRgIHByb3BlcnRpZXMuXG5cblx0ZnVuY3Rpb24gZmluaXNoTm9kZUF0KG5vZGUsIHR5cGUsIHBvcywgbG9jKSB7XG5cdCAgbm9kZS50eXBlID0gdHlwZTtcblx0ICBub2RlLmVuZCA9IHBvcztcblx0ICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucylcblx0ICAgIHsgbm9kZS5sb2MuZW5kID0gbG9jOyB9XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpXG5cdCAgICB7IG5vZGUucmFuZ2VbMV0gPSBwb3M7IH1cblx0ICByZXR1cm4gbm9kZVxuXHR9XG5cblx0cHAkNi5maW5pc2hOb2RlID0gZnVuY3Rpb24obm9kZSwgdHlwZSkge1xuXHQgIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCB0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYylcblx0fTtcblxuXHQvLyBGaW5pc2ggbm9kZSBhdCBnaXZlbiBwb3NpdGlvblxuXG5cdHBwJDYuZmluaXNoTm9kZUF0ID0gZnVuY3Rpb24obm9kZSwgdHlwZSwgcG9zLCBsb2MpIHtcblx0ICByZXR1cm4gZmluaXNoTm9kZUF0LmNhbGwodGhpcywgbm9kZSwgdHlwZSwgcG9zLCBsb2MpXG5cdH07XG5cblx0Ly8gVGhlIGFsZ29yaXRobSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcmVnZXhwIGNhbiBhcHBlYXIgYXQgYVxuXG5cdHZhciBUb2tDb250ZXh0ID0gZnVuY3Rpb24gVG9rQ29udGV4dCh0b2tlbiwgaXNFeHByLCBwcmVzZXJ2ZVNwYWNlLCBvdmVycmlkZSwgZ2VuZXJhdG9yKSB7XG5cdCAgdGhpcy50b2tlbiA9IHRva2VuO1xuXHQgIHRoaXMuaXNFeHByID0gISFpc0V4cHI7XG5cdCAgdGhpcy5wcmVzZXJ2ZVNwYWNlID0gISFwcmVzZXJ2ZVNwYWNlO1xuXHQgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcblx0ICB0aGlzLmdlbmVyYXRvciA9ICEhZ2VuZXJhdG9yO1xuXHR9O1xuXG5cdHZhciB0eXBlcyQxID0ge1xuXHQgIGJfc3RhdDogbmV3IFRva0NvbnRleHQoXCJ7XCIsIGZhbHNlKSxcblx0ICBiX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwie1wiLCB0cnVlKSxcblx0ICBiX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiJHtcIiwgZmFsc2UpLFxuXHQgIHBfc3RhdDogbmV3IFRva0NvbnRleHQoXCIoXCIsIGZhbHNlKSxcblx0ICBwX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCB0cnVlKSxcblx0ICBxX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiYFwiLCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50cnlSZWFkVGVtcGxhdGVUb2tlbigpOyB9KSxcblx0ICBmX3N0YXQ6IG5ldyBUb2tDb250ZXh0KFwiZnVuY3Rpb25cIiwgZmFsc2UpLFxuXHQgIGZfZXhwcjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKSxcblx0ICBmX2V4cHJfZ2VuOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIHRydWUsIGZhbHNlLCBudWxsLCB0cnVlKSxcblx0ICBmX2dlbjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCBmYWxzZSwgZmFsc2UsIG51bGwsIHRydWUpXG5cdH07XG5cblx0dmFyIHBwJDcgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cdHBwJDcuaW5pdGlhbENvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gW3R5cGVzJDEuYl9zdGF0XVxuXHR9O1xuXG5cdHBwJDcuYnJhY2VJc0Jsb2NrID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcblx0ICB2YXIgcGFyZW50ID0gdGhpcy5jdXJDb250ZXh0KCk7XG5cdCAgaWYgKHBhcmVudCA9PT0gdHlwZXMkMS5mX2V4cHIgfHwgcGFyZW50ID09PSB0eXBlcyQxLmZfc3RhdClcblx0ICAgIHsgcmV0dXJuIHRydWUgfVxuXHQgIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gJiYgKHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfHwgcGFyZW50ID09PSB0eXBlcyQxLmJfZXhwcikpXG5cdCAgICB7IHJldHVybiAhcGFyZW50LmlzRXhwciB9XG5cblx0ICAvLyBUaGUgY2hlY2sgZm9yIGB0dC5uYW1lICYmIGV4cHJBbGxvd2VkYCBkZXRlY3RzIHdoZXRoZXIgd2UgYXJlXG5cdCAgLy8gYWZ0ZXIgYSBgeWllbGRgIG9yIGBvZmAgY29uc3RydWN0LiBTZWUgdGhlIGB1cGRhdGVDb250ZXh0YCBmb3Jcblx0ICAvLyBgdHQubmFtZWAuXG5cdCAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fcmV0dXJuIHx8IHByZXZUeXBlID09PSB0eXBlcy5uYW1lICYmIHRoaXMuZXhwckFsbG93ZWQpXG5cdCAgICB7IHJldHVybiBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpIH1cblx0ICBpZiAocHJldlR5cGUgPT09IHR5cGVzLl9lbHNlIHx8IHByZXZUeXBlID09PSB0eXBlcy5zZW1pIHx8IHByZXZUeXBlID09PSB0eXBlcy5lb2YgfHwgcHJldlR5cGUgPT09IHR5cGVzLnBhcmVuUiB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuYXJyb3cpXG5cdCAgICB7IHJldHVybiB0cnVlIH1cblx0ICBpZiAocHJldlR5cGUgPT09IHR5cGVzLmJyYWNlTClcblx0ICAgIHsgcmV0dXJuIHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfVxuXHQgIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuX3ZhciB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX2NvbnN0IHx8IHByZXZUeXBlID09PSB0eXBlcy5uYW1lKVxuXHQgICAgeyByZXR1cm4gZmFsc2UgfVxuXHQgIHJldHVybiAhdGhpcy5leHByQWxsb3dlZFxuXHR9O1xuXG5cdHBwJDcuaW5HZW5lcmF0b3JDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG5cdCAgZm9yICh2YXIgaSA9IHRoaXMuY29udGV4dC5sZW5ndGggLSAxOyBpID49IDE7IGktLSkge1xuXHQgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHRbaV07XG5cdCAgICBpZiAoY29udGV4dC50b2tlbiA9PT0gXCJmdW5jdGlvblwiKVxuXHQgICAgICB7IHJldHVybiBjb250ZXh0LmdlbmVyYXRvciB9XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdHBwJDcudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG5cdCAgdmFyIHVwZGF0ZSwgdHlwZSA9IHRoaXMudHlwZTtcblx0ICBpZiAodHlwZS5rZXl3b3JkICYmIHByZXZUeXBlID09PSB0eXBlcy5kb3QpXG5cdCAgICB7IHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTsgfVxuXHQgIGVsc2UgaWYgKHVwZGF0ZSA9IHR5cGUudXBkYXRlQ29udGV4dClcblx0ICAgIHsgdXBkYXRlLmNhbGwodGhpcywgcHJldlR5cGUpOyB9XG5cdCAgZWxzZVxuXHQgICAgeyB0aGlzLmV4cHJBbGxvd2VkID0gdHlwZS5iZWZvcmVFeHByOyB9XG5cdH07XG5cblx0Ly8gVG9rZW4tc3BlY2lmaWMgY29udGV4dCB1cGRhdGUgY29kZVxuXG5cdHR5cGVzLnBhcmVuUi51cGRhdGVDb250ZXh0ID0gdHlwZXMuYnJhY2VSLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xuXHQgICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG5cdCAgICByZXR1cm5cblx0ICB9XG5cdCAgdmFyIG91dCA9IHRoaXMuY29udGV4dC5wb3AoKTtcblx0ICBpZiAob3V0ID09PSB0eXBlcyQxLmJfc3RhdCAmJiB0aGlzLmN1ckNvbnRleHQoKS50b2tlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdCAgICBvdXQgPSB0aGlzLmNvbnRleHQucG9wKCk7XG5cdCAgfVxuXHQgIHRoaXMuZXhwckFsbG93ZWQgPSAhb3V0LmlzRXhwcjtcblx0fTtcblxuXHR0eXBlcy5icmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG5cdCAgdGhpcy5jb250ZXh0LnB1c2godGhpcy5icmFjZUlzQmxvY2socHJldlR5cGUpID8gdHlwZXMkMS5iX3N0YXQgOiB0eXBlcyQxLmJfZXhwcik7XG5cdCAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG5cdH07XG5cblx0dHlwZXMuZG9sbGFyQnJhY2VMLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmJfdG1wbCk7XG5cdCAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG5cdH07XG5cblx0dHlwZXMucGFyZW5MLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuXHQgIHZhciBzdGF0ZW1lbnRQYXJlbnMgPSBwcmV2VHlwZSA9PT0gdHlwZXMuX2lmIHx8IHByZXZUeXBlID09PSB0eXBlcy5fZm9yIHx8IHByZXZUeXBlID09PSB0eXBlcy5fd2l0aCB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX3doaWxlO1xuXHQgIHRoaXMuY29udGV4dC5wdXNoKHN0YXRlbWVudFBhcmVucyA/IHR5cGVzJDEucF9zdGF0IDogdHlwZXMkMS5wX2V4cHIpO1xuXHQgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXHR9O1xuXG5cdHR5cGVzLmluY0RlYy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG5cdCAgLy8gdG9rRXhwckFsbG93ZWQgc3RheXMgdW5jaGFuZ2VkXG5cdH07XG5cblx0dHlwZXMuX2Z1bmN0aW9uLnVwZGF0ZUNvbnRleHQgPSB0eXBlcy5fY2xhc3MudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG5cdCAgaWYgKHByZXZUeXBlLmJlZm9yZUV4cHIgJiYgcHJldlR5cGUgIT09IHR5cGVzLnNlbWkgJiYgcHJldlR5cGUgIT09IHR5cGVzLl9lbHNlICYmXG5cdCAgICAgICEocHJldlR5cGUgPT09IHR5cGVzLl9yZXR1cm4gJiYgbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKSkgJiZcblx0ICAgICAgISgocHJldlR5cGUgPT09IHR5cGVzLmNvbG9uIHx8IHByZXZUeXBlID09PSB0eXBlcy5icmFjZUwpICYmIHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcyQxLmJfc3RhdCkpXG5cdCAgICB7IHRoaXMuY29udGV4dC5wdXNoKHR5cGVzJDEuZl9leHByKTsgfVxuXHQgIGVsc2Vcblx0ICAgIHsgdGhpcy5jb250ZXh0LnB1c2godHlwZXMkMS5mX3N0YXQpOyB9XG5cdCAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xuXHR9O1xuXG5cdHR5cGVzLmJhY2tRdW90ZS51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG5cdCAgaWYgKHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcyQxLnFfdG1wbClcblx0ICAgIHsgdGhpcy5jb250ZXh0LnBvcCgpOyB9XG5cdCAgZWxzZVxuXHQgICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLnFfdG1wbCk7IH1cblx0ICB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7XG5cdH07XG5cblx0dHlwZXMuc3Rhci51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcblx0ICBpZiAocHJldlR5cGUgPT09IHR5cGVzLl9mdW5jdGlvbikge1xuXHQgICAgdmFyIGluZGV4ID0gdGhpcy5jb250ZXh0Lmxlbmd0aCAtIDE7XG5cdCAgICBpZiAodGhpcy5jb250ZXh0W2luZGV4XSA9PT0gdHlwZXMkMS5mX2V4cHIpXG5cdCAgICAgIHsgdGhpcy5jb250ZXh0W2luZGV4XSA9IHR5cGVzJDEuZl9leHByX2dlbjsgfVxuXHQgICAgZWxzZVxuXHQgICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZ2VuOyB9XG5cdCAgfVxuXHQgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXHR9O1xuXG5cdHR5cGVzLm5hbWUudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG5cdCAgdmFyIGFsbG93ZWQgPSBmYWxzZTtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgcHJldlR5cGUgIT09IHR5cGVzLmRvdCkge1xuXHQgICAgaWYgKHRoaXMudmFsdWUgPT09IFwib2ZcIiAmJiAhdGhpcy5leHByQWxsb3dlZCB8fFxuXHQgICAgICAgIHRoaXMudmFsdWUgPT09IFwieWllbGRcIiAmJiB0aGlzLmluR2VuZXJhdG9yQ29udGV4dCgpKVxuXHQgICAgICB7IGFsbG93ZWQgPSB0cnVlOyB9XG5cdCAgfVxuXHQgIHRoaXMuZXhwckFsbG93ZWQgPSBhbGxvd2VkO1xuXHR9O1xuXG5cdC8vIFRoaXMgZmlsZSBjb250YWlucyBVbmljb2RlIHByb3BlcnRpZXMgZXh0cmFjdGVkIGZyb20gdGhlIEVDTUFTY3JpcHRcblx0Ly8gc3BlY2lmaWNhdGlvbi4gVGhlIGxpc3RzIGFyZSBleHRyYWN0ZWQgbGlrZSBzbzpcblx0Ly8gJCQoJyN0YWJsZS1iaW5hcnktdW5pY29kZS1wcm9wZXJ0aWVzID4gZmlndXJlID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpIGNvZGUnKS5tYXAoZWwgPT4gZWwuaW5uZXJUZXh0KVxuXG5cdC8vICN0YWJsZS1iaW5hcnktdW5pY29kZS1wcm9wZXJ0aWVzXG5cdHZhciBlY21hOUJpbmFyeVByb3BlcnRpZXMgPSBcIkFTQ0lJIEFTQ0lJX0hleF9EaWdpdCBBSGV4IEFscGhhYmV0aWMgQWxwaGEgQW55IEFzc2lnbmVkIEJpZGlfQ29udHJvbCBCaWRpX0MgQmlkaV9NaXJyb3JlZCBCaWRpX00gQ2FzZV9JZ25vcmFibGUgQ0kgQ2FzZWQgQ2hhbmdlc19XaGVuX0Nhc2Vmb2xkZWQgQ1dDRiBDaGFuZ2VzX1doZW5fQ2FzZW1hcHBlZCBDV0NNIENoYW5nZXNfV2hlbl9Mb3dlcmNhc2VkIENXTCBDaGFuZ2VzX1doZW5fTkZLQ19DYXNlZm9sZGVkIENXS0NGIENoYW5nZXNfV2hlbl9UaXRsZWNhc2VkIENXVCBDaGFuZ2VzX1doZW5fVXBwZXJjYXNlZCBDV1UgRGFzaCBEZWZhdWx0X0lnbm9yYWJsZV9Db2RlX1BvaW50IERJIERlcHJlY2F0ZWQgRGVwIERpYWNyaXRpYyBEaWEgRW1vamkgRW1vamlfQ29tcG9uZW50IEVtb2ppX01vZGlmaWVyIEVtb2ppX01vZGlmaWVyX0Jhc2UgRW1vamlfUHJlc2VudGF0aW9uIEV4dGVuZGVyIEV4dCBHcmFwaGVtZV9CYXNlIEdyX0Jhc2UgR3JhcGhlbWVfRXh0ZW5kIEdyX0V4dCBIZXhfRGlnaXQgSGV4IElEU19CaW5hcnlfT3BlcmF0b3IgSURTQiBJRFNfVHJpbmFyeV9PcGVyYXRvciBJRFNUIElEX0NvbnRpbnVlIElEQyBJRF9TdGFydCBJRFMgSWRlb2dyYXBoaWMgSWRlbyBKb2luX0NvbnRyb2wgSm9pbl9DIExvZ2ljYWxfT3JkZXJfRXhjZXB0aW9uIExPRSBMb3dlcmNhc2UgTG93ZXIgTWF0aCBOb25jaGFyYWN0ZXJfQ29kZV9Qb2ludCBOQ2hhciBQYXR0ZXJuX1N5bnRheCBQYXRfU3luIFBhdHRlcm5fV2hpdGVfU3BhY2UgUGF0X1dTIFF1b3RhdGlvbl9NYXJrIFFNYXJrIFJhZGljYWwgUmVnaW9uYWxfSW5kaWNhdG9yIFJJIFNlbnRlbmNlX1Rlcm1pbmFsIFNUZXJtIFNvZnRfRG90dGVkIFNEIFRlcm1pbmFsX1B1bmN0dWF0aW9uIFRlcm0gVW5pZmllZF9JZGVvZ3JhcGggVUlkZW8gVXBwZXJjYXNlIFVwcGVyIFZhcmlhdGlvbl9TZWxlY3RvciBWUyBXaGl0ZV9TcGFjZSBzcGFjZSBYSURfQ29udGludWUgWElEQyBYSURfU3RhcnQgWElEU1wiO1xuXHR2YXIgZWNtYTEwQmluYXJ5UHJvcGVydGllcyA9IGVjbWE5QmluYXJ5UHJvcGVydGllcyArIFwiIEV4dGVuZGVkX1BpY3RvZ3JhcGhpY1wiO1xuXHR2YXIgZWNtYTExQmluYXJ5UHJvcGVydGllcyA9IGVjbWExMEJpbmFyeVByb3BlcnRpZXM7XG5cdHZhciB1bmljb2RlQmluYXJ5UHJvcGVydGllcyA9IHtcblx0ICA5OiBlY21hOUJpbmFyeVByb3BlcnRpZXMsXG5cdCAgMTA6IGVjbWExMEJpbmFyeVByb3BlcnRpZXMsXG5cdCAgMTE6IGVjbWExMUJpbmFyeVByb3BlcnRpZXNcblx0fTtcblxuXHQvLyAjdGFibGUtdW5pY29kZS1nZW5lcmFsLWNhdGVnb3J5LXZhbHVlc1xuXHR2YXIgdW5pY29kZUdlbmVyYWxDYXRlZ29yeVZhbHVlcyA9IFwiQ2FzZWRfTGV0dGVyIExDIENsb3NlX1B1bmN0dWF0aW9uIFBlIENvbm5lY3Rvcl9QdW5jdHVhdGlvbiBQYyBDb250cm9sIENjIGNudHJsIEN1cnJlbmN5X1N5bWJvbCBTYyBEYXNoX1B1bmN0dWF0aW9uIFBkIERlY2ltYWxfTnVtYmVyIE5kIGRpZ2l0IEVuY2xvc2luZ19NYXJrIE1lIEZpbmFsX1B1bmN0dWF0aW9uIFBmIEZvcm1hdCBDZiBJbml0aWFsX1B1bmN0dWF0aW9uIFBpIExldHRlciBMIExldHRlcl9OdW1iZXIgTmwgTGluZV9TZXBhcmF0b3IgWmwgTG93ZXJjYXNlX0xldHRlciBMbCBNYXJrIE0gQ29tYmluaW5nX01hcmsgTWF0aF9TeW1ib2wgU20gTW9kaWZpZXJfTGV0dGVyIExtIE1vZGlmaWVyX1N5bWJvbCBTayBOb25zcGFjaW5nX01hcmsgTW4gTnVtYmVyIE4gT3Blbl9QdW5jdHVhdGlvbiBQcyBPdGhlciBDIE90aGVyX0xldHRlciBMbyBPdGhlcl9OdW1iZXIgTm8gT3RoZXJfUHVuY3R1YXRpb24gUG8gT3RoZXJfU3ltYm9sIFNvIFBhcmFncmFwaF9TZXBhcmF0b3IgWnAgUHJpdmF0ZV9Vc2UgQ28gUHVuY3R1YXRpb24gUCBwdW5jdCBTZXBhcmF0b3IgWiBTcGFjZV9TZXBhcmF0b3IgWnMgU3BhY2luZ19NYXJrIE1jIFN1cnJvZ2F0ZSBDcyBTeW1ib2wgUyBUaXRsZWNhc2VfTGV0dGVyIEx0IFVuYXNzaWduZWQgQ24gVXBwZXJjYXNlX0xldHRlciBMdVwiO1xuXG5cdC8vICN0YWJsZS11bmljb2RlLXNjcmlwdC12YWx1ZXNcblx0dmFyIGVjbWE5U2NyaXB0VmFsdWVzID0gXCJBZGxhbSBBZGxtIEFob20gQWhvbSBBbmF0b2xpYW5fSGllcm9nbHlwaHMgSGx1dyBBcmFiaWMgQXJhYiBBcm1lbmlhbiBBcm1uIEF2ZXN0YW4gQXZzdCBCYWxpbmVzZSBCYWxpIEJhbXVtIEJhbXUgQmFzc2FfVmFoIEJhc3MgQmF0YWsgQmF0ayBCZW5nYWxpIEJlbmcgQmhhaWtzdWtpIEJoa3MgQm9wb21vZm8gQm9wbyBCcmFobWkgQnJhaCBCcmFpbGxlIEJyYWkgQnVnaW5lc2UgQnVnaSBCdWhpZCBCdWhkIENhbmFkaWFuX0Fib3JpZ2luYWwgQ2FucyBDYXJpYW4gQ2FyaSBDYXVjYXNpYW5fQWxiYW5pYW4gQWdoYiBDaGFrbWEgQ2FrbSBDaGFtIENoYW0gQ2hlcm9rZWUgQ2hlciBDb21tb24gWnl5eSBDb3B0aWMgQ29wdCBRYWFjIEN1bmVpZm9ybSBYc3V4IEN5cHJpb3QgQ3BydCBDeXJpbGxpYyBDeXJsIERlc2VyZXQgRHNydCBEZXZhbmFnYXJpIERldmEgRHVwbG95YW4gRHVwbCBFZ3lwdGlhbl9IaWVyb2dseXBocyBFZ3lwIEVsYmFzYW4gRWxiYSBFdGhpb3BpYyBFdGhpIEdlb3JnaWFuIEdlb3IgR2xhZ29saXRpYyBHbGFnIEdvdGhpYyBHb3RoIEdyYW50aGEgR3JhbiBHcmVlayBHcmVrIEd1amFyYXRpIEd1anIgR3VybXVraGkgR3VydSBIYW4gSGFuaSBIYW5ndWwgSGFuZyBIYW51bm9vIEhhbm8gSGF0cmFuIEhhdHIgSGVicmV3IEhlYnIgSGlyYWdhbmEgSGlyYSBJbXBlcmlhbF9BcmFtYWljIEFybWkgSW5oZXJpdGVkIFppbmggUWFhaSBJbnNjcmlwdGlvbmFsX1BhaGxhdmkgUGhsaSBJbnNjcmlwdGlvbmFsX1BhcnRoaWFuIFBydGkgSmF2YW5lc2UgSmF2YSBLYWl0aGkgS3RoaSBLYW5uYWRhIEtuZGEgS2F0YWthbmEgS2FuYSBLYXlhaF9MaSBLYWxpIEtoYXJvc2h0aGkgS2hhciBLaG1lciBLaG1yIEtob2praSBLaG9qIEtodWRhd2FkaSBTaW5kIExhbyBMYW9vIExhdGluIExhdG4gTGVwY2hhIExlcGMgTGltYnUgTGltYiBMaW5lYXJfQSBMaW5hIExpbmVhcl9CIExpbmIgTGlzdSBMaXN1IEx5Y2lhbiBMeWNpIEx5ZGlhbiBMeWRpIE1haGFqYW5pIE1haGogTWFsYXlhbGFtIE1seW0gTWFuZGFpYyBNYW5kIE1hbmljaGFlYW4gTWFuaSBNYXJjaGVuIE1hcmMgTWFzYXJhbV9Hb25kaSBHb25tIE1lZXRlaV9NYXllayBNdGVpIE1lbmRlX0tpa2FrdWkgTWVuZCBNZXJvaXRpY19DdXJzaXZlIE1lcmMgTWVyb2l0aWNfSGllcm9nbHlwaHMgTWVybyBNaWFvIFBscmQgTW9kaSBNb2RpIE1vbmdvbGlhbiBNb25nIE1ybyBNcm9vIE11bHRhbmkgTXVsdCBNeWFubWFyIE15bXIgTmFiYXRhZWFuIE5iYXQgTmV3X1RhaV9MdWUgVGFsdSBOZXdhIE5ld2EgTmtvIE5rb28gTnVzaHUgTnNodSBPZ2hhbSBPZ2FtIE9sX0NoaWtpIE9sY2sgT2xkX0h1bmdhcmlhbiBIdW5nIE9sZF9JdGFsaWMgSXRhbCBPbGRfTm9ydGhfQXJhYmlhbiBOYXJiIE9sZF9QZXJtaWMgUGVybSBPbGRfUGVyc2lhbiBYcGVvIE9sZF9Tb3V0aF9BcmFiaWFuIFNhcmIgT2xkX1R1cmtpYyBPcmtoIE9yaXlhIE9yeWEgT3NhZ2UgT3NnZSBPc21hbnlhIE9zbWEgUGFoYXdoX0htb25nIEhtbmcgUGFsbXlyZW5lIFBhbG0gUGF1X0Npbl9IYXUgUGF1YyBQaGFnc19QYSBQaGFnIFBob2VuaWNpYW4gUGhueCBQc2FsdGVyX1BhaGxhdmkgUGhscCBSZWphbmcgUmpuZyBSdW5pYyBSdW5yIFNhbWFyaXRhbiBTYW1yIFNhdXJhc2h0cmEgU2F1ciBTaGFyYWRhIFNocmQgU2hhdmlhbiBTaGF3IFNpZGRoYW0gU2lkZCBTaWduV3JpdGluZyBTZ253IFNpbmhhbGEgU2luaCBTb3JhX1NvbXBlbmcgU29yYSBTb3lvbWJvIFNveW8gU3VuZGFuZXNlIFN1bmQgU3lsb3RpX05hZ3JpIFN5bG8gU3lyaWFjIFN5cmMgVGFnYWxvZyBUZ2xnIFRhZ2JhbndhIFRhZ2IgVGFpX0xlIFRhbGUgVGFpX1RoYW0gTGFuYSBUYWlfVmlldCBUYXZ0IFRha3JpIFRha3IgVGFtaWwgVGFtbCBUYW5ndXQgVGFuZyBUZWx1Z3UgVGVsdSBUaGFhbmEgVGhhYSBUaGFpIFRoYWkgVGliZXRhbiBUaWJ0IFRpZmluYWdoIFRmbmcgVGlyaHV0YSBUaXJoIFVnYXJpdGljIFVnYXIgVmFpIFZhaWkgV2FyYW5nX0NpdGkgV2FyYSBZaSBZaWlpIFphbmFiYXphcl9TcXVhcmUgWmFuYlwiO1xuXHR2YXIgZWNtYTEwU2NyaXB0VmFsdWVzID0gZWNtYTlTY3JpcHRWYWx1ZXMgKyBcIiBEb2dyYSBEb2dyIEd1bmphbGFfR29uZGkgR29uZyBIYW5pZmlfUm9oaW5neWEgUm9oZyBNYWthc2FyIE1ha2EgTWVkZWZhaWRyaW4gTWVkZiBPbGRfU29nZGlhbiBTb2dvIFNvZ2RpYW4gU29nZFwiO1xuXHR2YXIgZWNtYTExU2NyaXB0VmFsdWVzID0gZWNtYTEwU2NyaXB0VmFsdWVzICsgXCIgRWx5bWFpYyBFbHltIE5hbmRpbmFnYXJpIE5hbmQgTnlpYWtlbmdfUHVhY2h1ZV9IbW9uZyBIbW5wIFdhbmNobyBXY2hvXCI7XG5cdHZhciB1bmljb2RlU2NyaXB0VmFsdWVzID0ge1xuXHQgIDk6IGVjbWE5U2NyaXB0VmFsdWVzLFxuXHQgIDEwOiBlY21hMTBTY3JpcHRWYWx1ZXMsXG5cdCAgMTE6IGVjbWExMVNjcmlwdFZhbHVlc1xuXHR9O1xuXG5cdHZhciBkYXRhID0ge307XG5cdGZ1bmN0aW9uIGJ1aWxkVW5pY29kZURhdGEoZWNtYVZlcnNpb24pIHtcblx0ICB2YXIgZCA9IGRhdGFbZWNtYVZlcnNpb25dID0ge1xuXHQgICAgYmluYXJ5OiB3b3Jkc1JlZ2V4cCh1bmljb2RlQmluYXJ5UHJvcGVydGllc1tlY21hVmVyc2lvbl0gKyBcIiBcIiArIHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMpLFxuXHQgICAgbm9uQmluYXJ5OiB7XG5cdCAgICAgIEdlbmVyYWxfQ2F0ZWdvcnk6IHdvcmRzUmVnZXhwKHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMpLFxuXHQgICAgICBTY3JpcHQ6IHdvcmRzUmVnZXhwKHVuaWNvZGVTY3JpcHRWYWx1ZXNbZWNtYVZlcnNpb25dKVxuXHQgICAgfVxuXHQgIH07XG5cdCAgZC5ub25CaW5hcnkuU2NyaXB0X0V4dGVuc2lvbnMgPSBkLm5vbkJpbmFyeS5TY3JpcHQ7XG5cblx0ICBkLm5vbkJpbmFyeS5nYyA9IGQubm9uQmluYXJ5LkdlbmVyYWxfQ2F0ZWdvcnk7XG5cdCAgZC5ub25CaW5hcnkuc2MgPSBkLm5vbkJpbmFyeS5TY3JpcHQ7XG5cdCAgZC5ub25CaW5hcnkuc2N4ID0gZC5ub25CaW5hcnkuU2NyaXB0X0V4dGVuc2lvbnM7XG5cdH1cblx0YnVpbGRVbmljb2RlRGF0YSg5KTtcblx0YnVpbGRVbmljb2RlRGF0YSgxMCk7XG5cdGJ1aWxkVW5pY29kZURhdGEoMTEpO1xuXG5cdHZhciBwcCQ4ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXHR2YXIgUmVnRXhwVmFsaWRhdGlvblN0YXRlID0gZnVuY3Rpb24gUmVnRXhwVmFsaWRhdGlvblN0YXRlKHBhcnNlcikge1xuXHQgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuXHQgIHRoaXMudmFsaWRGbGFncyA9IFwiZ2ltXCIgKyAocGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiA/IFwidXlcIiA6IFwiXCIpICsgKHBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgPyBcInNcIiA6IFwiXCIpO1xuXHQgIHRoaXMudW5pY29kZVByb3BlcnRpZXMgPSBkYXRhW3BhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDExID8gMTEgOiBwYXJzZXIub3B0aW9ucy5lY21hVmVyc2lvbl07XG5cdCAgdGhpcy5zb3VyY2UgPSBcIlwiO1xuXHQgIHRoaXMuZmxhZ3MgPSBcIlwiO1xuXHQgIHRoaXMuc3RhcnQgPSAwO1xuXHQgIHRoaXMuc3dpdGNoVSA9IGZhbHNlO1xuXHQgIHRoaXMuc3dpdGNoTiA9IGZhbHNlO1xuXHQgIHRoaXMucG9zID0gMDtcblx0ICB0aGlzLmxhc3RJbnRWYWx1ZSA9IDA7XG5cdCAgdGhpcy5sYXN0U3RyaW5nVmFsdWUgPSBcIlwiO1xuXHQgIHRoaXMubGFzdEFzc2VydGlvbklzUXVhbnRpZmlhYmxlID0gZmFsc2U7XG5cdCAgdGhpcy5udW1DYXB0dXJpbmdQYXJlbnMgPSAwO1xuXHQgIHRoaXMubWF4QmFja1JlZmVyZW5jZSA9IDA7XG5cdCAgdGhpcy5ncm91cE5hbWVzID0gW107XG5cdCAgdGhpcy5iYWNrUmVmZXJlbmNlTmFtZXMgPSBbXTtcblx0fTtcblxuXHRSZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQgKHN0YXJ0LCBwYXR0ZXJuLCBmbGFncykge1xuXHQgIHZhciB1bmljb2RlID0gZmxhZ3MuaW5kZXhPZihcInVcIikgIT09IC0xO1xuXHQgIHRoaXMuc3RhcnQgPSBzdGFydCB8IDA7XG5cdCAgdGhpcy5zb3VyY2UgPSBwYXR0ZXJuICsgXCJcIjtcblx0ICB0aGlzLmZsYWdzID0gZmxhZ3M7XG5cdCAgdGhpcy5zd2l0Y2hVID0gdW5pY29kZSAmJiB0aGlzLnBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDY7XG5cdCAgdGhpcy5zd2l0Y2hOID0gdW5pY29kZSAmJiB0aGlzLnBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDk7XG5cdH07XG5cblx0UmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5yYWlzZSA9IGZ1bmN0aW9uIHJhaXNlIChtZXNzYWdlKSB7XG5cdCAgdGhpcy5wYXJzZXIucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCAoXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogL1wiICsgKHRoaXMuc291cmNlKSArIFwiLzogXCIgKyBtZXNzYWdlKSk7XG5cdH07XG5cblx0Ly8gSWYgdSBmbGFnIGlzIGdpdmVuLCB0aGlzIHJldHVybnMgdGhlIGNvZGUgcG9pbnQgYXQgdGhlIGluZGV4IChpdCBjb21iaW5lcyBhIHN1cnJvZ2F0ZSBwYWlyKS5cblx0Ly8gT3RoZXJ3aXNlLCB0aGlzIHJldHVybnMgdGhlIGNvZGUgdW5pdCBvZiB0aGUgaW5kZXggKGNhbiBiZSBhIHBhcnQgb2YgYSBzdXJyb2dhdGUgcGFpcikuXG5cdFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBhdCAoaSwgZm9yY2VVKSB7XG5cdCAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cblx0ICB2YXIgcyA9IHRoaXMuc291cmNlO1xuXHQgIHZhciBsID0gcy5sZW5ndGg7XG5cdCAgaWYgKGkgPj0gbCkge1xuXHQgICAgcmV0dXJuIC0xXG5cdCAgfVxuXHQgIHZhciBjID0gcy5jaGFyQ29kZUF0KGkpO1xuXHQgIGlmICghKGZvcmNlVSB8fCB0aGlzLnN3aXRjaFUpIHx8IGMgPD0gMHhEN0ZGIHx8IGMgPj0gMHhFMDAwIHx8IGkgKyAxID49IGwpIHtcblx0ICAgIHJldHVybiBjXG5cdCAgfVxuXHQgIHZhciBuZXh0ID0gcy5jaGFyQ29kZUF0KGkgKyAxKTtcblx0ICByZXR1cm4gbmV4dCA+PSAweERDMDAgJiYgbmV4dCA8PSAweERGRkYgPyAoYyA8PCAxMCkgKyBuZXh0IC0gMHgzNUZEQzAwIDogY1xuXHR9O1xuXG5cdFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUubmV4dEluZGV4ID0gZnVuY3Rpb24gbmV4dEluZGV4IChpLCBmb3JjZVUpIHtcblx0ICAgIGlmICggZm9yY2VVID09PSB2b2lkIDAgKSBmb3JjZVUgPSBmYWxzZTtcblxuXHQgIHZhciBzID0gdGhpcy5zb3VyY2U7XG5cdCAgdmFyIGwgPSBzLmxlbmd0aDtcblx0ICBpZiAoaSA+PSBsKSB7XG5cdCAgICByZXR1cm4gbFxuXHQgIH1cblx0ICB2YXIgYyA9IHMuY2hhckNvZGVBdChpKSwgbmV4dDtcblx0ICBpZiAoIShmb3JjZVUgfHwgdGhpcy5zd2l0Y2hVKSB8fCBjIDw9IDB4RDdGRiB8fCBjID49IDB4RTAwMCB8fCBpICsgMSA+PSBsIHx8XG5cdCAgICAgIChuZXh0ID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweERDMDAgfHwgbmV4dCA+IDB4REZGRikge1xuXHQgICAgcmV0dXJuIGkgKyAxXG5cdCAgfVxuXHQgIHJldHVybiBpICsgMlxuXHR9O1xuXG5cdFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uIGN1cnJlbnQgKGZvcmNlVSkge1xuXHQgICAgaWYgKCBmb3JjZVUgPT09IHZvaWQgMCApIGZvcmNlVSA9IGZhbHNlO1xuXG5cdCAgcmV0dXJuIHRoaXMuYXQodGhpcy5wb3MsIGZvcmNlVSlcblx0fTtcblxuXHRSZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLmxvb2thaGVhZCA9IGZ1bmN0aW9uIGxvb2thaGVhZCAoZm9yY2VVKSB7XG5cdCAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cblx0ICByZXR1cm4gdGhpcy5hdCh0aGlzLm5leHRJbmRleCh0aGlzLnBvcywgZm9yY2VVKSwgZm9yY2VVKVxuXHR9O1xuXG5cdFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUuYWR2YW5jZSA9IGZ1bmN0aW9uIGFkdmFuY2UgKGZvcmNlVSkge1xuXHQgICAgaWYgKCBmb3JjZVUgPT09IHZvaWQgMCApIGZvcmNlVSA9IGZhbHNlO1xuXG5cdCAgdGhpcy5wb3MgPSB0aGlzLm5leHRJbmRleCh0aGlzLnBvcywgZm9yY2VVKTtcblx0fTtcblxuXHRSZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLmVhdCA9IGZ1bmN0aW9uIGVhdCAoY2gsIGZvcmNlVSkge1xuXHQgICAgaWYgKCBmb3JjZVUgPT09IHZvaWQgMCApIGZvcmNlVSA9IGZhbHNlO1xuXG5cdCAgaWYgKHRoaXMuY3VycmVudChmb3JjZVUpID09PSBjaCkge1xuXHQgICAgdGhpcy5hZHZhbmNlKGZvcmNlVSk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHRmdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyhjaCkge1xuXHQgIGlmIChjaCA8PSAweEZGRkYpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpIH1cblx0ICBjaCAtPSAweDEwMDAwO1xuXHQgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKChjaCA+PiAxMCkgKyAweEQ4MDAsIChjaCAmIDB4MDNGRikgKyAweERDMDApXG5cdH1cblxuXHQvKipcblx0ICogVmFsaWRhdGUgdGhlIGZsYWdzIHBhcnQgb2YgYSBnaXZlbiBSZWdFeHBMaXRlcmFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlZ0V4cFZhbGlkYXRpb25TdGF0ZX0gc3RhdGUgVGhlIHN0YXRlIHRvIHZhbGlkYXRlIFJlZ0V4cC5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRwcCQ4LnZhbGlkYXRlUmVnRXhwRmxhZ3MgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciB2YWxpZEZsYWdzID0gc3RhdGUudmFsaWRGbGFncztcblx0ICB2YXIgZmxhZ3MgPSBzdGF0ZS5mbGFncztcblxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgZmxhZ3MubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBmbGFnID0gZmxhZ3MuY2hhckF0KGkpO1xuXHQgICAgaWYgKHZhbGlkRmxhZ3MuaW5kZXhPZihmbGFnKSA9PT0gLTEpIHtcblx0ICAgICAgdGhpcy5yYWlzZShzdGF0ZS5zdGFydCwgXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiBmbGFnXCIpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZsYWdzLmluZGV4T2YoZmxhZywgaSArIDEpID4gLTEpIHtcblx0ICAgICAgdGhpcy5yYWlzZShzdGF0ZS5zdGFydCwgXCJEdXBsaWNhdGUgcmVndWxhciBleHByZXNzaW9uIGZsYWdcIik7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZSB0aGUgcGF0dGVybiBwYXJ0IG9mIGEgZ2l2ZW4gUmVnRXhwTGl0ZXJhbC5cblx0ICpcblx0ICogQHBhcmFtIHtSZWdFeHBWYWxpZGF0aW9uU3RhdGV9IHN0YXRlIFRoZSBzdGF0ZSB0byB2YWxpZGF0ZSBSZWdFeHAuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0cHAkOC52YWxpZGF0ZVJlZ0V4cFBhdHRlcm4gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHRoaXMucmVnZXhwX3BhdHRlcm4oc3RhdGUpO1xuXG5cdCAgLy8gVGhlIGdvYWwgc3ltYm9sIGZvciB0aGUgcGFyc2UgaXMgfFBhdHRlcm5bflUsIH5OXXwuIElmIHRoZSByZXN1bHQgb2Zcblx0ICAvLyBwYXJzaW5nIGNvbnRhaW5zIGEgfEdyb3VwTmFtZXwsIHJlcGFyc2Ugd2l0aCB0aGUgZ29hbCBzeW1ib2xcblx0ICAvLyB8UGF0dGVyblt+VSwgK05dfCBhbmQgdXNlIHRoaXMgcmVzdWx0IGluc3RlYWQuIFRocm93IGEgKlN5bnRheEVycm9yKlxuXHQgIC8vIGV4Y2VwdGlvbiBpZiBfUF8gZGlkIG5vdCBjb25mb3JtIHRvIHRoZSBncmFtbWFyLCBpZiBhbnkgZWxlbWVudHMgb2YgX1BfXG5cdCAgLy8gd2VyZSBub3QgbWF0Y2hlZCBieSB0aGUgcGFyc2UsIG9yIGlmIGFueSBFYXJseSBFcnJvciBjb25kaXRpb25zIGV4aXN0LlxuXHQgIGlmICghc3RhdGUuc3dpdGNoTiAmJiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiBzdGF0ZS5ncm91cE5hbWVzLmxlbmd0aCA+IDApIHtcblx0ICAgIHN0YXRlLnN3aXRjaE4gPSB0cnVlO1xuXHQgICAgdGhpcy5yZWdleHBfcGF0dGVybihzdGF0ZSk7XG5cdCAgfVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVBhdHRlcm5cblx0cHAkOC5yZWdleHBfcGF0dGVybiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgc3RhdGUucG9zID0gMDtcblx0ICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuXHQgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG5cdCAgc3RhdGUubGFzdEFzc2VydGlvbklzUXVhbnRpZmlhYmxlID0gZmFsc2U7XG5cdCAgc3RhdGUubnVtQ2FwdHVyaW5nUGFyZW5zID0gMDtcblx0ICBzdGF0ZS5tYXhCYWNrUmVmZXJlbmNlID0gMDtcblx0ICBzdGF0ZS5ncm91cE5hbWVzLmxlbmd0aCA9IDA7XG5cdCAgc3RhdGUuYmFja1JlZmVyZW5jZU5hbWVzLmxlbmd0aCA9IDA7XG5cblx0ICB0aGlzLnJlZ2V4cF9kaXNqdW5jdGlvbihzdGF0ZSk7XG5cblx0ICBpZiAoc3RhdGUucG9zICE9PSBzdGF0ZS5zb3VyY2UubGVuZ3RoKSB7XG5cdCAgICAvLyBNYWtlIHRoZSBzYW1lIG1lc3NhZ2VzIGFzIFY4LlxuXHQgICAgaWYgKHN0YXRlLmVhdCgweDI5IC8qICkgKi8pKSB7XG5cdCAgICAgIHN0YXRlLnJhaXNlKFwiVW5tYXRjaGVkICcpJ1wiKTtcblx0ICAgIH1cblx0ICAgIGlmIChzdGF0ZS5lYXQoMHg1RCAvKiBdICovKSB8fCBzdGF0ZS5lYXQoMHg3RCAvKiB9ICovKSkge1xuXHQgICAgICBzdGF0ZS5yYWlzZShcIkxvbmUgcXVhbnRpZmllciBicmFja2V0c1wiKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKHN0YXRlLm1heEJhY2tSZWZlcmVuY2UgPiBzdGF0ZS5udW1DYXB0dXJpbmdQYXJlbnMpIHtcblx0ICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBlc2NhcGVcIik7XG5cdCAgfVxuXHQgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gc3RhdGUuYmFja1JlZmVyZW5jZU5hbWVzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgdmFyIG5hbWUgPSBsaXN0W2ldO1xuXG5cdCAgICBpZiAoc3RhdGUuZ3JvdXBOYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuXHQgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgbmFtZWQgY2FwdHVyZSByZWZlcmVuY2VkXCIpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1EaXNqdW5jdGlvblxuXHRwcCQ4LnJlZ2V4cF9kaXNqdW5jdGlvbiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdGhpcy5yZWdleHBfYWx0ZXJuYXRpdmUoc3RhdGUpO1xuXHQgIHdoaWxlIChzdGF0ZS5lYXQoMHg3QyAvKiB8ICovKSkge1xuXHQgICAgdGhpcy5yZWdleHBfYWx0ZXJuYXRpdmUoc3RhdGUpO1xuXHQgIH1cblxuXHQgIC8vIE1ha2UgdGhlIHNhbWUgbWVzc2FnZSBhcyBWOC5cblx0ICBpZiAodGhpcy5yZWdleHBfZWF0UXVhbnRpZmllcihzdGF0ZSwgdHJ1ZSkpIHtcblx0ICAgIHN0YXRlLnJhaXNlKFwiTm90aGluZyB0byByZXBlYXRcIik7XG5cdCAgfVxuXHQgIGlmIChzdGF0ZS5lYXQoMHg3QiAvKiB7ICovKSkge1xuXHQgICAgc3RhdGUucmFpc2UoXCJMb25lIHF1YW50aWZpZXIgYnJhY2tldHNcIik7XG5cdCAgfVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUFsdGVybmF0aXZlXG5cdHBwJDgucmVnZXhwX2FsdGVybmF0aXZlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB3aGlsZSAoc3RhdGUucG9zIDwgc3RhdGUuc291cmNlLmxlbmd0aCAmJiB0aGlzLnJlZ2V4cF9lYXRUZXJtKHN0YXRlKSlcblx0ICAgIHsgfVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1UZXJtXG5cdHBwJDgucmVnZXhwX2VhdFRlcm0gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIGlmICh0aGlzLnJlZ2V4cF9lYXRBc3NlcnRpb24oc3RhdGUpKSB7XG5cdCAgICAvLyBIYW5kbGUgYFF1YW50aWZpYWJsZUFzc2VydGlvbiBRdWFudGlmaWVyYCBhbHRlcm5hdGl2ZS5cblx0ICAgIC8vIGBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGVgIGlzIHRydWUgaWYgdGhlIGxhc3QgZWF0ZW4gQXNzZXJ0aW9uXG5cdCAgICAvLyBpcyBhIFF1YW50aWZpYWJsZUFzc2VydGlvbi5cblx0ICAgIGlmIChzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgJiYgdGhpcy5yZWdleHBfZWF0UXVhbnRpZmllcihzdGF0ZSkpIHtcblx0ICAgICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuXHQgICAgICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuXHQgICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBxdWFudGlmaWVyXCIpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblxuXHQgIGlmIChzdGF0ZS5zd2l0Y2hVID8gdGhpcy5yZWdleHBfZWF0QXRvbShzdGF0ZSkgOiB0aGlzLnJlZ2V4cF9lYXRFeHRlbmRlZEF0b20oc3RhdGUpKSB7XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRRdWFudGlmaWVyKHN0YXRlKTtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUFzc2VydGlvblxuXHRwcCQ4LnJlZ2V4cF9lYXRBc3NlcnRpb24gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblx0ICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcblxuXHQgIC8vIF4sICRcblx0ICBpZiAoc3RhdGUuZWF0KDB4NUUgLyogXiAqLykgfHwgc3RhdGUuZWF0KDB4MjQgLyogJCAqLykpIHtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgLy8gXFxiIFxcQlxuXHQgIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykpIHtcblx0ICAgIGlmIChzdGF0ZS5lYXQoMHg0MiAvKiBCICovKSB8fCBzdGF0ZS5lYXQoMHg2MiAvKiBiICovKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXG5cdCAgLy8gTG9va2FoZWFkIC8gTG9va2JlaGluZFxuXHQgIGlmIChzdGF0ZS5lYXQoMHgyOCAvKiAoICovKSAmJiBzdGF0ZS5lYXQoMHgzRiAvKiA/ICovKSkge1xuXHQgICAgdmFyIGxvb2tiZWhpbmQgPSBmYWxzZTtcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSkge1xuXHQgICAgICBsb29rYmVoaW5kID0gc3RhdGUuZWF0KDB4M0MgLyogPCAqLyk7XG5cdCAgICB9XG5cdCAgICBpZiAoc3RhdGUuZWF0KDB4M0QgLyogPSAqLykgfHwgc3RhdGUuZWF0KDB4MjEgLyogISAqLykpIHtcblx0ICAgICAgdGhpcy5yZWdleHBfZGlzanVuY3Rpb24oc3RhdGUpO1xuXHQgICAgICBpZiAoIXN0YXRlLmVhdCgweDI5IC8qICkgKi8pKSB7XG5cdCAgICAgICAgc3RhdGUucmFpc2UoXCJVbnRlcm1pbmF0ZWQgZ3JvdXBcIik7XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUubGFzdEFzc2VydGlvbklzUXVhbnRpZmlhYmxlID0gIWxvb2tiZWhpbmQ7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUXVhbnRpZmllclxuXHRwcCQ4LnJlZ2V4cF9lYXRRdWFudGlmaWVyID0gZnVuY3Rpb24oc3RhdGUsIG5vRXJyb3IpIHtcblx0ICBpZiAoIG5vRXJyb3IgPT09IHZvaWQgMCApIG5vRXJyb3IgPSBmYWxzZTtcblxuXHQgIGlmICh0aGlzLnJlZ2V4cF9lYXRRdWFudGlmaWVyUHJlZml4KHN0YXRlLCBub0Vycm9yKSkge1xuXHQgICAgc3RhdGUuZWF0KDB4M0YgLyogPyAqLyk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1RdWFudGlmaWVyUHJlZml4XG5cdHBwJDgucmVnZXhwX2VhdFF1YW50aWZpZXJQcmVmaXggPSBmdW5jdGlvbihzdGF0ZSwgbm9FcnJvcikge1xuXHQgIHJldHVybiAoXG5cdCAgICBzdGF0ZS5lYXQoMHgyQSAvKiAqICovKSB8fFxuXHQgICAgc3RhdGUuZWF0KDB4MkIgLyogKyAqLykgfHxcblx0ICAgIHN0YXRlLmVhdCgweDNGIC8qID8gKi8pIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyKHN0YXRlLCBub0Vycm9yKVxuXHQgIClcblx0fTtcblx0cHAkOC5yZWdleHBfZWF0QnJhY2VkUXVhbnRpZmllciA9IGZ1bmN0aW9uKHN0YXRlLCBub0Vycm9yKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIGlmIChzdGF0ZS5lYXQoMHg3QiAvKiB7ICovKSkge1xuXHQgICAgdmFyIG1pbiA9IDAsIG1heCA9IC0xO1xuXHQgICAgaWYgKHRoaXMucmVnZXhwX2VhdERlY2ltYWxEaWdpdHMoc3RhdGUpKSB7XG5cdCAgICAgIG1pbiA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcblx0ICAgICAgaWYgKHN0YXRlLmVhdCgweDJDIC8qICwgKi8pICYmIHRoaXMucmVnZXhwX2VhdERlY2ltYWxEaWdpdHMoc3RhdGUpKSB7XG5cdCAgICAgICAgbWF4ID0gc3RhdGUubGFzdEludFZhbHVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzdGF0ZS5lYXQoMHg3RCAvKiB9ICovKSkge1xuXHQgICAgICAgIC8vIFN5bnRheEVycm9yIGluIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNzZWMtdGVybVxuXHQgICAgICAgIGlmIChtYXggIT09IC0xICYmIG1heCA8IG1pbiAmJiAhbm9FcnJvcikge1xuXHQgICAgICAgICAgc3RhdGUucmFpc2UoXCJudW1iZXJzIG91dCBvZiBvcmRlciBpbiB7fSBxdWFudGlmaWVyXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoc3RhdGUuc3dpdGNoVSAmJiAhbm9FcnJvcikge1xuXHQgICAgICBzdGF0ZS5yYWlzZShcIkluY29tcGxldGUgcXVhbnRpZmllclwiKTtcblx0ICAgIH1cblx0ICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1BdG9tXG5cdHBwJDgucmVnZXhwX2VhdEF0b20gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHJldHVybiAoXG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRQYXR0ZXJuQ2hhcmFjdGVycyhzdGF0ZSkgfHxcblx0ICAgIHN0YXRlLmVhdCgweDJFIC8qIC4gKi8pIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRSZXZlcnNlU29saWR1c0F0b21Fc2NhcGUoc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzcyhzdGF0ZSkgfHxcblx0ICAgIHRoaXMucmVnZXhwX2VhdFVuY2FwdHVyaW5nR3JvdXAoc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRDYXB0dXJpbmdHcm91cChzdGF0ZSlcblx0ICApXG5cdH07XG5cdHBwJDgucmVnZXhwX2VhdFJldmVyc2VTb2xpZHVzQXRvbUVzY2FwZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykpIHtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRBdG9tRXNjYXBlKHN0YXRlKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRwcCQ4LnJlZ2V4cF9lYXRVbmNhcHR1cmluZ0dyb3VwID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cdCAgaWYgKHN0YXRlLmVhdCgweDI4IC8qICggKi8pKSB7XG5cdCAgICBpZiAoc3RhdGUuZWF0KDB4M0YgLyogPyAqLykgJiYgc3RhdGUuZWF0KDB4M0EgLyogOiAqLykpIHtcblx0ICAgICAgdGhpcy5yZWdleHBfZGlzanVuY3Rpb24oc3RhdGUpO1xuXHQgICAgICBpZiAoc3RhdGUuZWF0KDB4MjkgLyogKSAqLykpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLnJhaXNlKFwiVW50ZXJtaW5hdGVkIGdyb3VwXCIpO1xuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRwcCQ4LnJlZ2V4cF9lYXRDYXB0dXJpbmdHcm91cCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgaWYgKHN0YXRlLmVhdCgweDI4IC8qICggKi8pKSB7XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcblx0ICAgICAgdGhpcy5yZWdleHBfZ3JvdXBTcGVjaWZpZXIoc3RhdGUpO1xuXHQgICAgfSBlbHNlIGlmIChzdGF0ZS5jdXJyZW50KCkgPT09IDB4M0YgLyogPyAqLykge1xuXHQgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgZ3JvdXBcIik7XG5cdCAgICB9XG5cdCAgICB0aGlzLnJlZ2V4cF9kaXNqdW5jdGlvbihzdGF0ZSk7XG5cdCAgICBpZiAoc3RhdGUuZWF0KDB4MjkgLyogKSAqLykpIHtcblx0ICAgICAgc3RhdGUubnVtQ2FwdHVyaW5nUGFyZW5zICs9IDE7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICBzdGF0ZS5yYWlzZShcIlVudGVybWluYXRlZCBncm91cFwiKTtcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUV4dGVuZGVkQXRvbVxuXHRwcCQ4LnJlZ2V4cF9lYXRFeHRlbmRlZEF0b20gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHJldHVybiAoXG5cdCAgICBzdGF0ZS5lYXQoMHgyRSAvKiAuICovKSB8fFxuXHQgICAgdGhpcy5yZWdleHBfZWF0UmV2ZXJzZVNvbGlkdXNBdG9tRXNjYXBlKHN0YXRlKSB8fFxuXHQgICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3Moc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRVbmNhcHR1cmluZ0dyb3VwKHN0YXRlKSB8fFxuXHQgICAgdGhpcy5yZWdleHBfZWF0Q2FwdHVyaW5nR3JvdXAoc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRJbnZhbGlkQnJhY2VkUXVhbnRpZmllcihzdGF0ZSkgfHxcblx0ICAgIHRoaXMucmVnZXhwX2VhdEV4dGVuZGVkUGF0dGVybkNoYXJhY3RlcihzdGF0ZSlcblx0ICApXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUludmFsaWRCcmFjZWRRdWFudGlmaWVyXG5cdHBwJDgucmVnZXhwX2VhdEludmFsaWRCcmFjZWRRdWFudGlmaWVyID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBpZiAodGhpcy5yZWdleHBfZWF0QnJhY2VkUXVhbnRpZmllcihzdGF0ZSwgdHJ1ZSkpIHtcblx0ICAgIHN0YXRlLnJhaXNlKFwiTm90aGluZyB0byByZXBlYXRcIik7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVN5bnRheENoYXJhY3RlclxuXHRwcCQ4LnJlZ2V4cF9lYXRTeW50YXhDaGFyYWN0ZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblx0ICBpZiAoaXNTeW50YXhDaGFyYWN0ZXIoY2gpKSB7XG5cdCAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaDtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRmdW5jdGlvbiBpc1N5bnRheENoYXJhY3RlcihjaCkge1xuXHQgIHJldHVybiAoXG5cdCAgICBjaCA9PT0gMHgyNCAvKiAkICovIHx8XG5cdCAgICBjaCA+PSAweDI4IC8qICggKi8gJiYgY2ggPD0gMHgyQiAvKiArICovIHx8XG5cdCAgICBjaCA9PT0gMHgyRSAvKiAuICovIHx8XG5cdCAgICBjaCA9PT0gMHgzRiAvKiA/ICovIHx8XG5cdCAgICBjaCA+PSAweDVCIC8qIFsgKi8gJiYgY2ggPD0gMHg1RSAvKiBeICovIHx8XG5cdCAgICBjaCA+PSAweDdCIC8qIHsgKi8gJiYgY2ggPD0gMHg3RCAvKiB9ICovXG5cdCAgKVxuXHR9XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUGF0dGVybkNoYXJhY3RlclxuXHQvLyBCdXQgZWF0IGVhZ2VyLlxuXHRwcCQ4LnJlZ2V4cF9lYXRQYXR0ZXJuQ2hhcmFjdGVycyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHZhciBjaCA9IDA7XG5cdCAgd2hpbGUgKChjaCA9IHN0YXRlLmN1cnJlbnQoKSkgIT09IC0xICYmICFpc1N5bnRheENoYXJhY3RlcihjaCkpIHtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICB9XG5cdCAgcmV0dXJuIHN0YXRlLnBvcyAhPT0gc3RhcnRcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItRXh0ZW5kZWRQYXR0ZXJuQ2hhcmFjdGVyXG5cdHBwJDgucmVnZXhwX2VhdEV4dGVuZGVkUGF0dGVybkNoYXJhY3RlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuXHQgIGlmIChcblx0ICAgIGNoICE9PSAtMSAmJlxuXHQgICAgY2ggIT09IDB4MjQgLyogJCAqLyAmJlxuXHQgICAgIShjaCA+PSAweDI4IC8qICggKi8gJiYgY2ggPD0gMHgyQiAvKiArICovKSAmJlxuXHQgICAgY2ggIT09IDB4MkUgLyogLiAqLyAmJlxuXHQgICAgY2ggIT09IDB4M0YgLyogPyAqLyAmJlxuXHQgICAgY2ggIT09IDB4NUIgLyogWyAqLyAmJlxuXHQgICAgY2ggIT09IDB4NUUgLyogXiAqLyAmJlxuXHQgICAgY2ggIT09IDB4N0MgLyogfCAqL1xuXHQgICkge1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gR3JvdXBTcGVjaWZpZXIgOjpcblx0Ly8gICBbZW1wdHldXG5cdC8vICAgYD9gIEdyb3VwTmFtZVxuXHRwcCQ4LnJlZ2V4cF9ncm91cFNwZWNpZmllciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgaWYgKHN0YXRlLmVhdCgweDNGIC8qID8gKi8pKSB7XG5cdCAgICBpZiAodGhpcy5yZWdleHBfZWF0R3JvdXBOYW1lKHN0YXRlKSkge1xuXHQgICAgICBpZiAoc3RhdGUuZ3JvdXBOYW1lcy5pbmRleE9mKHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSkgIT09IC0xKSB7XG5cdCAgICAgICAgc3RhdGUucmFpc2UoXCJEdXBsaWNhdGUgY2FwdHVyZSBncm91cCBuYW1lXCIpO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLmdyb3VwTmFtZXMucHVzaChzdGF0ZS5sYXN0U3RyaW5nVmFsdWUpO1xuXHQgICAgICByZXR1cm5cblx0ICAgIH1cblx0ICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBncm91cFwiKTtcblx0ICB9XG5cdH07XG5cblx0Ly8gR3JvdXBOYW1lIDo6XG5cdC8vICAgYDxgIFJlZ0V4cElkZW50aWZpZXJOYW1lIGA+YFxuXHQvLyBOb3RlOiB0aGlzIHVwZGF0ZXMgYHN0YXRlLmxhc3RTdHJpbmdWYWx1ZWAgcHJvcGVydHkgd2l0aCB0aGUgZWF0ZW4gbmFtZS5cblx0cHAkOC5yZWdleHBfZWF0R3JvdXBOYW1lID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgPSBcIlwiO1xuXHQgIGlmIChzdGF0ZS5lYXQoMHgzQyAvKiA8ICovKSkge1xuXHQgICAgaWYgKHRoaXMucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJOYW1lKHN0YXRlKSAmJiBzdGF0ZS5lYXQoMHgzRSAvKiA+ICovKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGNhcHR1cmUgZ3JvdXAgbmFtZVwiKTtcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gUmVnRXhwSWRlbnRpZmllck5hbWUgOjpcblx0Ly8gICBSZWdFeHBJZGVudGlmaWVyU3RhcnRcblx0Ly8gICBSZWdFeHBJZGVudGlmaWVyTmFtZSBSZWdFeHBJZGVudGlmaWVyUGFydFxuXHQvLyBOb3RlOiB0aGlzIHVwZGF0ZXMgYHN0YXRlLmxhc3RTdHJpbmdWYWx1ZWAgcHJvcGVydHkgd2l0aCB0aGUgZWF0ZW4gbmFtZS5cblx0cHAkOC5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllck5hbWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG5cdCAgaWYgKHRoaXMucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJTdGFydChzdGF0ZSkpIHtcblx0ICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSArPSBjb2RlUG9pbnRUb1N0cmluZyhzdGF0ZS5sYXN0SW50VmFsdWUpO1xuXHQgICAgd2hpbGUgKHRoaXMucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJQYXJ0KHN0YXRlKSkge1xuXHQgICAgICBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgKz0gY29kZVBvaW50VG9TdHJpbmcoc3RhdGUubGFzdEludFZhbHVlKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdC8vIFJlZ0V4cElkZW50aWZpZXJTdGFydCA6OlxuXHQvLyAgIFVuaWNvZGVJRFN0YXJ0XG5cdC8vICAgYCRgXG5cdC8vICAgYF9gXG5cdC8vICAgYFxcYCBSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2VbK1VdXG5cdHBwJDgucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJTdGFydCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHZhciBmb3JjZVUgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTE7XG5cdCAgdmFyIGNoID0gc3RhdGUuY3VycmVudChmb3JjZVUpO1xuXHQgIHN0YXRlLmFkdmFuY2UoZm9yY2VVKTtcblxuXHQgIGlmIChjaCA9PT0gMHg1QyAvKiBcXCAqLyAmJiB0aGlzLnJlZ2V4cF9lYXRSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2Uoc3RhdGUsIGZvcmNlVSkpIHtcblx0ICAgIGNoID0gc3RhdGUubGFzdEludFZhbHVlO1xuXHQgIH1cblx0ICBpZiAoaXNSZWdFeHBJZGVudGlmaWVyU3RhcnQoY2gpKSB7XG5cdCAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaDtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cdGZ1bmN0aW9uIGlzUmVnRXhwSWRlbnRpZmllclN0YXJ0KGNoKSB7XG5cdCAgcmV0dXJuIGlzSWRlbnRpZmllclN0YXJ0KGNoLCB0cnVlKSB8fCBjaCA9PT0gMHgyNCAvKiAkICovIHx8IGNoID09PSAweDVGIC8qIF8gKi9cblx0fVxuXG5cdC8vIFJlZ0V4cElkZW50aWZpZXJQYXJ0IDo6XG5cdC8vICAgVW5pY29kZUlEQ29udGludWVcblx0Ly8gICBgJGBcblx0Ly8gICBgX2Bcblx0Ly8gICBgXFxgIFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZVsrVV1cblx0Ly8gICA8WldOSj5cblx0Ly8gICA8WldKPlxuXHRwcCQ4LnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyUGFydCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHZhciBmb3JjZVUgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTE7XG5cdCAgdmFyIGNoID0gc3RhdGUuY3VycmVudChmb3JjZVUpO1xuXHQgIHN0YXRlLmFkdmFuY2UoZm9yY2VVKTtcblxuXHQgIGlmIChjaCA9PT0gMHg1QyAvKiBcXCAqLyAmJiB0aGlzLnJlZ2V4cF9lYXRSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2Uoc3RhdGUsIGZvcmNlVSkpIHtcblx0ICAgIGNoID0gc3RhdGUubGFzdEludFZhbHVlO1xuXHQgIH1cblx0ICBpZiAoaXNSZWdFeHBJZGVudGlmaWVyUGFydChjaCkpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cblx0ICBzdGF0ZS5wb3MgPSBzdGFydDtcblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblx0ZnVuY3Rpb24gaXNSZWdFeHBJZGVudGlmaWVyUGFydChjaCkge1xuXHQgIHJldHVybiBpc0lkZW50aWZpZXJDaGFyKGNoLCB0cnVlKSB8fCBjaCA9PT0gMHgyNCAvKiAkICovIHx8IGNoID09PSAweDVGIC8qIF8gKi8gfHwgY2ggPT09IDB4MjAwQyAvKiA8WldOSj4gKi8gfHwgY2ggPT09IDB4MjAwRCAvKiA8WldKPiAqL1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUF0b21Fc2NhcGVcblx0cHAkOC5yZWdleHBfZWF0QXRvbUVzY2FwZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgaWYgKFxuXHQgICAgdGhpcy5yZWdleHBfZWF0QmFja1JlZmVyZW5jZShzdGF0ZSkgfHxcblx0ICAgIHRoaXMucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzRXNjYXBlKHN0YXRlKSB8fFxuXHQgICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlKHN0YXRlKSB8fFxuXHQgICAgKHN0YXRlLnN3aXRjaE4gJiYgdGhpcy5yZWdleHBfZWF0S0dyb3VwTmFtZShzdGF0ZSkpXG5cdCAgKSB7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuXHQgICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuXHQgICAgaWYgKHN0YXRlLmN1cnJlbnQoKSA9PT0gMHg2MyAvKiBjICovKSB7XG5cdCAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCB1bmljb2RlIGVzY2FwZVwiKTtcblx0ICAgIH1cblx0ICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBlc2NhcGVcIik7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRwcCQ4LnJlZ2V4cF9lYXRCYWNrUmVmZXJlbmNlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cdCAgaWYgKHRoaXMucmVnZXhwX2VhdERlY2ltYWxFc2NhcGUoc3RhdGUpKSB7XG5cdCAgICB2YXIgbiA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcblx0ICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG5cdCAgICAgIC8vIEZvciBTeW50YXhFcnJvciBpbiBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jc2VjLWF0b21lc2NhcGVcblx0ICAgICAgaWYgKG4gPiBzdGF0ZS5tYXhCYWNrUmVmZXJlbmNlKSB7XG5cdCAgICAgICAgc3RhdGUubWF4QmFja1JlZmVyZW5jZSA9IG47XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIGlmIChuIDw9IHN0YXRlLm51bUNhcHR1cmluZ1BhcmVucykge1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRwcCQ4LnJlZ2V4cF9lYXRLR3JvdXBOYW1lID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBpZiAoc3RhdGUuZWF0KDB4NkIgLyogayAqLykpIHtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRHcm91cE5hbWUoc3RhdGUpKSB7XG5cdCAgICAgIHN0YXRlLmJhY2tSZWZlcmVuY2VOYW1lcy5wdXNoKHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSk7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgbmFtZWQgcmVmZXJlbmNlXCIpO1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQ2hhcmFjdGVyRXNjYXBlXG5cdHBwJDgucmVnZXhwX2VhdENoYXJhY3RlckVzY2FwZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgcmV0dXJuIChcblx0ICAgIHRoaXMucmVnZXhwX2VhdENvbnRyb2xFc2NhcGUoc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRDQ29udHJvbExldHRlcihzdGF0ZSkgfHxcblx0ICAgIHRoaXMucmVnZXhwX2VhdFplcm8oc3RhdGUpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRIZXhFc2NhcGVTZXF1ZW5jZShzdGF0ZSkgfHxcblx0ICAgIHRoaXMucmVnZXhwX2VhdFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZShzdGF0ZSwgZmFsc2UpIHx8XG5cdCAgICAoIXN0YXRlLnN3aXRjaFUgJiYgdGhpcy5yZWdleHBfZWF0TGVnYWN5T2N0YWxFc2NhcGVTZXF1ZW5jZShzdGF0ZSkpIHx8XG5cdCAgICB0aGlzLnJlZ2V4cF9lYXRJZGVudGl0eUVzY2FwZShzdGF0ZSlcblx0ICApXG5cdH07XG5cdHBwJDgucmVnZXhwX2VhdENDb250cm9sTGV0dGVyID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cdCAgaWYgKHN0YXRlLmVhdCgweDYzIC8qIGMgKi8pKSB7XG5cdCAgICBpZiAodGhpcy5yZWdleHBfZWF0Q29udHJvbExldHRlcihzdGF0ZSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblx0cHAkOC5yZWdleHBfZWF0WmVybyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgaWYgKHN0YXRlLmN1cnJlbnQoKSA9PT0gMHgzMCAvKiAwICovICYmICFpc0RlY2ltYWxEaWdpdChzdGF0ZS5sb29rYWhlYWQoKSkpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1Db250cm9sRXNjYXBlXG5cdHBwJDgucmVnZXhwX2VhdENvbnRyb2xFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblx0ICBpZiAoY2ggPT09IDB4NzQgLyogdCAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwOTsgLyogXFx0ICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBpZiAoY2ggPT09IDB4NkUgLyogbiAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwQTsgLyogXFxuICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBpZiAoY2ggPT09IDB4NzYgLyogdiAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwQjsgLyogXFx2ICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBpZiAoY2ggPT09IDB4NjYgLyogZiAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwQzsgLyogXFxmICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBpZiAoY2ggPT09IDB4NzIgLyogciAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwRDsgLyogXFxyICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1Db250cm9sTGV0dGVyXG5cdHBwJDgucmVnZXhwX2VhdENvbnRyb2xMZXR0ZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblx0ICBpZiAoaXNDb250cm9sTGV0dGVyKGNoKSkge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggJSAweDIwO1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cdGZ1bmN0aW9uIGlzQ29udHJvbExldHRlcihjaCkge1xuXHQgIHJldHVybiAoXG5cdCAgICAoY2ggPj0gMHg0MSAvKiBBICovICYmIGNoIDw9IDB4NUEgLyogWiAqLykgfHxcblx0ICAgIChjaCA+PSAweDYxIC8qIGEgKi8gJiYgY2ggPD0gMHg3QSAvKiB6ICovKVxuXHQgIClcblx0fVxuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZVxuXHRwcCQ4LnJlZ2V4cF9lYXRSZWdFeHBVbmljb2RlRXNjYXBlU2VxdWVuY2UgPSBmdW5jdGlvbihzdGF0ZSwgZm9yY2VVKSB7XG5cdCAgaWYgKCBmb3JjZVUgPT09IHZvaWQgMCApIGZvcmNlVSA9IGZhbHNlO1xuXG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHZhciBzd2l0Y2hVID0gZm9yY2VVIHx8IHN0YXRlLnN3aXRjaFU7XG5cblx0ICBpZiAoc3RhdGUuZWF0KDB4NzUgLyogdSAqLykpIHtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRGaXhlZEhleERpZ2l0cyhzdGF0ZSwgNCkpIHtcblx0ICAgICAgdmFyIGxlYWQgPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG5cdCAgICAgIGlmIChzd2l0Y2hVICYmIGxlYWQgPj0gMHhEODAwICYmIGxlYWQgPD0gMHhEQkZGKSB7XG5cdCAgICAgICAgdmFyIGxlYWRTdXJyb2dhdGVFbmQgPSBzdGF0ZS5wb3M7XG5cdCAgICAgICAgaWYgKHN0YXRlLmVhdCgweDVDIC8qIFxcICovKSAmJiBzdGF0ZS5lYXQoMHg3NSAvKiB1ICovKSAmJiB0aGlzLnJlZ2V4cF9lYXRGaXhlZEhleERpZ2l0cyhzdGF0ZSwgNCkpIHtcblx0ICAgICAgICAgIHZhciB0cmFpbCA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcblx0ICAgICAgICAgIGlmICh0cmFpbCA+PSAweERDMDAgJiYgdHJhaWwgPD0gMHhERkZGKSB7XG5cdCAgICAgICAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IChsZWFkIC0gMHhEODAwKSAqIDB4NDAwICsgKHRyYWlsIC0gMHhEQzAwKSArIDB4MTAwMDA7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YXRlLnBvcyA9IGxlYWRTdXJyb2dhdGVFbmQ7XG5cdCAgICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gbGVhZDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgaWYgKFxuXHQgICAgICBzd2l0Y2hVICYmXG5cdCAgICAgIHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pICYmXG5cdCAgICAgIHRoaXMucmVnZXhwX2VhdEhleERpZ2l0cyhzdGF0ZSkgJiZcblx0ICAgICAgc3RhdGUuZWF0KDB4N0QgLyogfSAqLykgJiZcblx0ICAgICAgaXNWYWxpZFVuaWNvZGUoc3RhdGUubGFzdEludFZhbHVlKVxuXHQgICAgKSB7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICBpZiAoc3dpdGNoVSkge1xuXHQgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgdW5pY29kZSBlc2NhcGVcIik7XG5cdCAgICB9XG5cdCAgICBzdGF0ZS5wb3MgPSBzdGFydDtcblx0ICB9XG5cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblx0ZnVuY3Rpb24gaXNWYWxpZFVuaWNvZGUoY2gpIHtcblx0ICByZXR1cm4gY2ggPj0gMCAmJiBjaCA8PSAweDEwRkZGRlxuXHR9XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUlkZW50aXR5RXNjYXBlXG5cdHBwJDgucmVnZXhwX2VhdElkZW50aXR5RXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBpZiAoc3RhdGUuc3dpdGNoVSkge1xuXHQgICAgaWYgKHRoaXMucmVnZXhwX2VhdFN5bnRheENoYXJhY3RlcihzdGF0ZSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIGlmIChzdGF0ZS5lYXQoMHgyRiAvKiAvICovKSkge1xuXHQgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDJGOyAvKiAvICovXG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cblx0ICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG5cdCAgaWYgKGNoICE9PSAweDYzIC8qIGMgKi8gJiYgKCFzdGF0ZS5zd2l0Y2hOIHx8IGNoICE9PSAweDZCIC8qIGsgKi8pKSB7XG5cdCAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaDtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtRGVjaW1hbEVzY2FwZVxuXHRwcCQ4LnJlZ2V4cF9lYXREZWNpbWFsRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuXHQgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblx0ICBpZiAoY2ggPj0gMHgzMSAvKiAxICovICYmIGNoIDw9IDB4MzkgLyogOSAqLykge1xuXHQgICAgZG8ge1xuXHQgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAxMCAqIHN0YXRlLmxhc3RJbnRWYWx1ZSArIChjaCAtIDB4MzAgLyogMCAqLyk7XG5cdCAgICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICAgIH0gd2hpbGUgKChjaCA9IHN0YXRlLmN1cnJlbnQoKSkgPj0gMHgzMCAvKiAwICovICYmIGNoIDw9IDB4MzkgLyogOSAqLylcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNoYXJhY3RlckNsYXNzRXNjYXBlXG5cdHBwJDgucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG5cblx0ICBpZiAoaXNDaGFyYWN0ZXJDbGFzc0VzY2FwZShjaCkpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IC0xO1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cblx0ICBpZiAoXG5cdCAgICBzdGF0ZS5zd2l0Y2hVICYmXG5cdCAgICB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJlxuXHQgICAgKGNoID09PSAweDUwIC8qIFAgKi8gfHwgY2ggPT09IDB4NzAgLyogcCAqLylcblx0ICApIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IC0xO1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgICAgaWYgKFxuXHQgICAgICBzdGF0ZS5lYXQoMHg3QiAvKiB7ICovKSAmJlxuXHQgICAgICB0aGlzLnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZUV4cHJlc3Npb24oc3RhdGUpICYmXG5cdCAgICAgIHN0YXRlLmVhdCgweDdEIC8qIH0gKi8pXG5cdCAgICApIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSBuYW1lXCIpO1xuXHQgIH1cblxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRmdW5jdGlvbiBpc0NoYXJhY3RlckNsYXNzRXNjYXBlKGNoKSB7XG5cdCAgcmV0dXJuIChcblx0ICAgIGNoID09PSAweDY0IC8qIGQgKi8gfHxcblx0ICAgIGNoID09PSAweDQ0IC8qIEQgKi8gfHxcblx0ICAgIGNoID09PSAweDczIC8qIHMgKi8gfHxcblx0ICAgIGNoID09PSAweDUzIC8qIFMgKi8gfHxcblx0ICAgIGNoID09PSAweDc3IC8qIHcgKi8gfHxcblx0ICAgIGNoID09PSAweDU3IC8qIFcgKi9cblx0ICApXG5cdH1cblxuXHQvLyBVbmljb2RlUHJvcGVydHlWYWx1ZUV4cHJlc3Npb24gOjpcblx0Ly8gICBVbmljb2RlUHJvcGVydHlOYW1lIGA9YCBVbmljb2RlUHJvcGVydHlWYWx1ZVxuXHQvLyAgIExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZVxuXHRwcCQ4LnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZUV4cHJlc3Npb24gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblxuXHQgIC8vIFVuaWNvZGVQcm9wZXJ0eU5hbWUgYD1gIFVuaWNvZGVQcm9wZXJ0eVZhbHVlXG5cdCAgaWYgKHRoaXMucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eU5hbWUoc3RhdGUpICYmIHN0YXRlLmVhdCgweDNEIC8qID0gKi8pKSB7XG5cdCAgICB2YXIgbmFtZSA9IHN0YXRlLmxhc3RTdHJpbmdWYWx1ZTtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZShzdGF0ZSkpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gc3RhdGUubGFzdFN0cmluZ1ZhbHVlO1xuXHQgICAgICB0aGlzLnJlZ2V4cF92YWxpZGF0ZVVuaWNvZGVQcm9wZXJ0eU5hbWVBbmRWYWx1ZShzdGF0ZSwgbmFtZSwgdmFsdWUpO1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0ICBzdGF0ZS5wb3MgPSBzdGFydDtcblxuXHQgIC8vIExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZVxuXHQgIGlmICh0aGlzLnJlZ2V4cF9lYXRMb25lVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUoc3RhdGUpKSB7XG5cdCAgICB2YXIgbmFtZU9yVmFsdWUgPSBzdGF0ZS5sYXN0U3RyaW5nVmFsdWU7XG5cdCAgICB0aGlzLnJlZ2V4cF92YWxpZGF0ZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlKHN0YXRlLCBuYW1lT3JWYWx1ZSk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblx0cHAkOC5yZWdleHBfdmFsaWRhdGVVbmljb2RlUHJvcGVydHlOYW1lQW5kVmFsdWUgPSBmdW5jdGlvbihzdGF0ZSwgbmFtZSwgdmFsdWUpIHtcblx0ICBpZiAoIWhhcyhzdGF0ZS51bmljb2RlUHJvcGVydGllcy5ub25CaW5hcnksIG5hbWUpKVxuXHQgICAgeyBzdGF0ZS5yYWlzZShcIkludmFsaWQgcHJvcGVydHkgbmFtZVwiKTsgfVxuXHQgIGlmICghc3RhdGUudW5pY29kZVByb3BlcnRpZXMubm9uQmluYXJ5W25hbWVdLnRlc3QodmFsdWUpKVxuXHQgICAgeyBzdGF0ZS5yYWlzZShcIkludmFsaWQgcHJvcGVydHkgdmFsdWVcIik7IH1cblx0fTtcblx0cHAkOC5yZWdleHBfdmFsaWRhdGVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlLCBuYW1lT3JWYWx1ZSkge1xuXHQgIGlmICghc3RhdGUudW5pY29kZVByb3BlcnRpZXMuYmluYXJ5LnRlc3QobmFtZU9yVmFsdWUpKVxuXHQgICAgeyBzdGF0ZS5yYWlzZShcIkludmFsaWQgcHJvcGVydHkgbmFtZVwiKTsgfVxuXHR9O1xuXG5cdC8vIFVuaWNvZGVQcm9wZXJ0eU5hbWUgOjpcblx0Ly8gICBVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyc1xuXHRwcCQ4LnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgY2ggPSAwO1xuXHQgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG5cdCAgd2hpbGUgKGlzVW5pY29kZVByb3BlcnR5TmFtZUNoYXJhY3RlcihjaCA9IHN0YXRlLmN1cnJlbnQoKSkpIHtcblx0ICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSArPSBjb2RlUG9pbnRUb1N0cmluZyhjaCk7XG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgfVxuXHQgIHJldHVybiBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgIT09IFwiXCJcblx0fTtcblx0ZnVuY3Rpb24gaXNVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyKGNoKSB7XG5cdCAgcmV0dXJuIGlzQ29udHJvbExldHRlcihjaCkgfHwgY2ggPT09IDB4NUYgLyogXyAqL1xuXHR9XG5cblx0Ly8gVW5pY29kZVByb3BlcnR5VmFsdWUgOjpcblx0Ly8gICBVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlcnNcblx0cHAkOC5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBjaCA9IDA7XG5cdCAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcblx0ICB3aGlsZSAoaXNVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlcihjaCA9IHN0YXRlLmN1cnJlbnQoKSkpIHtcblx0ICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSArPSBjb2RlUG9pbnRUb1N0cmluZyhjaCk7XG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgfVxuXHQgIHJldHVybiBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgIT09IFwiXCJcblx0fTtcblx0ZnVuY3Rpb24gaXNVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlcihjaCkge1xuXHQgIHJldHVybiBpc1VuaWNvZGVQcm9wZXJ0eU5hbWVDaGFyYWN0ZXIoY2gpIHx8IGlzRGVjaW1hbERpZ2l0KGNoKVxuXHR9XG5cblx0Ly8gTG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlIDo6XG5cdC8vICAgVW5pY29kZVByb3BlcnR5VmFsdWVDaGFyYWN0ZXJzXG5cdHBwJDgucmVnZXhwX2VhdExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgcmV0dXJuIHRoaXMucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlKHN0YXRlKVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNoYXJhY3RlckNsYXNzXG5cdHBwJDgucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBpZiAoc3RhdGUuZWF0KDB4NUIgLyogWyAqLykpIHtcblx0ICAgIHN0YXRlLmVhdCgweDVFIC8qIF4gKi8pO1xuXHQgICAgdGhpcy5yZWdleHBfY2xhc3NSYW5nZXMoc3RhdGUpO1xuXHQgICAgaWYgKHN0YXRlLmVhdCgweDVEIC8qIF0gKi8pKSB7XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICB9XG5cdCAgICAvLyBVbnJlYWNoYWJsZSBzaW5jZSBpdCB0aHJldyBcInVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIiBlcnJvciBiZWZvcmUuXG5cdCAgICBzdGF0ZS5yYWlzZShcIlVudGVybWluYXRlZCBjaGFyYWN0ZXIgY2xhc3NcIik7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNsYXNzUmFuZ2VzXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLU5vbmVtcHR5Q2xhc3NSYW5nZXNcblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtTm9uZW1wdHlDbGFzc1Jhbmdlc05vRGFzaFxuXHRwcCQ4LnJlZ2V4cF9jbGFzc1JhbmdlcyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgd2hpbGUgKHRoaXMucmVnZXhwX2VhdENsYXNzQXRvbShzdGF0ZSkpIHtcblx0ICAgIHZhciBsZWZ0ID0gc3RhdGUubGFzdEludFZhbHVlO1xuXHQgICAgaWYgKHN0YXRlLmVhdCgweDJEIC8qIC0gKi8pICYmIHRoaXMucmVnZXhwX2VhdENsYXNzQXRvbShzdGF0ZSkpIHtcblx0ICAgICAgdmFyIHJpZ2h0ID0gc3RhdGUubGFzdEludFZhbHVlO1xuXHQgICAgICBpZiAoc3RhdGUuc3dpdGNoVSAmJiAobGVmdCA9PT0gLTEgfHwgcmlnaHQgPT09IC0xKSkge1xuXHQgICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBjaGFyYWN0ZXIgY2xhc3NcIik7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGxlZnQgIT09IC0xICYmIHJpZ2h0ICE9PSAtMSAmJiBsZWZ0ID4gcmlnaHQpIHtcblx0ICAgICAgICBzdGF0ZS5yYWlzZShcIlJhbmdlIG91dCBvZiBvcmRlciBpbiBjaGFyYWN0ZXIgY2xhc3NcIik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2xhc3NBdG9tXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNsYXNzQXRvbU5vRGFzaFxuXHRwcCQ4LnJlZ2V4cF9lYXRDbGFzc0F0b20gPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblxuXHQgIGlmIChzdGF0ZS5lYXQoMHg1QyAvKiBcXCAqLykpIHtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRDbGFzc0VzY2FwZShzdGF0ZSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG5cdCAgICAgIC8vIE1ha2UgdGhlIHNhbWUgbWVzc2FnZSBhcyBWOC5cblx0ICAgICAgdmFyIGNoJDEgPSBzdGF0ZS5jdXJyZW50KCk7XG5cdCAgICAgIGlmIChjaCQxID09PSAweDYzIC8qIGMgKi8gfHwgaXNPY3RhbERpZ2l0KGNoJDEpKSB7XG5cdCAgICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGNsYXNzIGVzY2FwZVwiKTtcblx0ICAgICAgfVxuXHQgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgZXNjYXBlXCIpO1xuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXG5cdCAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuXHQgIGlmIChjaCAhPT0gMHg1RCAvKiBdICovKSB7XG5cdCAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaDtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUNsYXNzRXNjYXBlXG5cdHBwJDgucmVnZXhwX2VhdENsYXNzRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cblx0ICBpZiAoc3RhdGUuZWF0KDB4NjIgLyogYiAqLykpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDB4MDg7IC8qIDxCUz4gKi9cblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgaWYgKHN0YXRlLnN3aXRjaFUgJiYgc3RhdGUuZWF0KDB4MkQgLyogLSAqLykpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDB4MkQ7IC8qIC0gKi9cblx0ICAgIHJldHVybiB0cnVlXG5cdCAgfVxuXG5cdCAgaWYgKCFzdGF0ZS5zd2l0Y2hVICYmIHN0YXRlLmVhdCgweDYzIC8qIGMgKi8pKSB7XG5cdCAgICBpZiAodGhpcy5yZWdleHBfZWF0Q2xhc3NDb250cm9sTGV0dGVyKHN0YXRlKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZVxuXHQgICAgfVxuXHQgICAgc3RhdGUucG9zID0gc3RhcnQ7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIChcblx0ICAgIHRoaXMucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzRXNjYXBlKHN0YXRlKSB8fFxuXHQgICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlKHN0YXRlKVxuXHQgIClcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQ2xhc3NDb250cm9sTGV0dGVyXG5cdHBwJDgucmVnZXhwX2VhdENsYXNzQ29udHJvbExldHRlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuXHQgIGlmIChpc0RlY2ltYWxEaWdpdChjaCkgfHwgY2ggPT09IDB4NUYgLyogXyAqLykge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggJSAweDIwO1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgICAgcmV0dXJuIHRydWVcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4RXNjYXBlU2VxdWVuY2Vcblx0cHAkOC5yZWdleHBfZWF0SGV4RXNjYXBlU2VxdWVuY2UgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblx0ICBpZiAoc3RhdGUuZWF0KDB4NzggLyogeCAqLykpIHtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRGaXhlZEhleERpZ2l0cyhzdGF0ZSwgMikpIHtcblx0ICAgICAgcmV0dXJuIHRydWVcblx0ICAgIH1cblx0ICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG5cdCAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBlc2NhcGVcIik7XG5cdCAgICB9XG5cdCAgICBzdGF0ZS5wb3MgPSBzdGFydDtcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtRGVjaW1hbERpZ2l0c1xuXHRwcCQ4LnJlZ2V4cF9lYXREZWNpbWFsRGlnaXRzID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG5cdCAgdmFyIGNoID0gMDtcblx0ICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuXHQgIHdoaWxlIChpc0RlY2ltYWxEaWdpdChjaCA9IHN0YXRlLmN1cnJlbnQoKSkpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDEwICogc3RhdGUubGFzdEludFZhbHVlICsgKGNoIC0gMHgzMCAvKiAwICovKTtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICB9XG5cdCAgcmV0dXJuIHN0YXRlLnBvcyAhPT0gc3RhcnRcblx0fTtcblx0ZnVuY3Rpb24gaXNEZWNpbWFsRGlnaXQoY2gpIHtcblx0ICByZXR1cm4gY2ggPj0gMHgzMCAvKiAwICovICYmIGNoIDw9IDB4MzkgLyogOSAqL1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4RGlnaXRzXG5cdHBwJDgucmVnZXhwX2VhdEhleERpZ2l0cyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHZhciBjaCA9IDA7XG5cdCAgc3RhdGUubGFzdEludFZhbHVlID0gMDtcblx0ICB3aGlsZSAoaXNIZXhEaWdpdChjaCA9IHN0YXRlLmN1cnJlbnQoKSkpIHtcblx0ICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDE2ICogc3RhdGUubGFzdEludFZhbHVlICsgaGV4VG9JbnQoY2gpO1xuXHQgICAgc3RhdGUuYWR2YW5jZSgpO1xuXHQgIH1cblx0ICByZXR1cm4gc3RhdGUucG9zICE9PSBzdGFydFxuXHR9O1xuXHRmdW5jdGlvbiBpc0hleERpZ2l0KGNoKSB7XG5cdCAgcmV0dXJuIChcblx0ICAgIChjaCA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovKSB8fFxuXHQgICAgKGNoID49IDB4NDEgLyogQSAqLyAmJiBjaCA8PSAweDQ2IC8qIEYgKi8pIHx8XG5cdCAgICAoY2ggPj0gMHg2MSAvKiBhICovICYmIGNoIDw9IDB4NjYgLyogZiAqLylcblx0ICApXG5cdH1cblx0ZnVuY3Rpb24gaGV4VG9JbnQoY2gpIHtcblx0ICBpZiAoY2ggPj0gMHg0MSAvKiBBICovICYmIGNoIDw9IDB4NDYgLyogRiAqLykge1xuXHQgICAgcmV0dXJuIDEwICsgKGNoIC0gMHg0MSAvKiBBICovKVxuXHQgIH1cblx0ICBpZiAoY2ggPj0gMHg2MSAvKiBhICovICYmIGNoIDw9IDB4NjYgLyogZiAqLykge1xuXHQgICAgcmV0dXJuIDEwICsgKGNoIC0gMHg2MSAvKiBhICovKVxuXHQgIH1cblx0ICByZXR1cm4gY2ggLSAweDMwIC8qIDAgKi9cblx0fVxuXG5cdC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1MZWdhY3lPY3RhbEVzY2FwZVNlcXVlbmNlXG5cdC8vIEFsbG93cyBvbmx5IDAtMzc3KG9jdGFsKSBpLmUuIDAtMjU1KGRlY2ltYWwpLlxuXHRwcCQ4LnJlZ2V4cF9lYXRMZWdhY3lPY3RhbEVzY2FwZVNlcXVlbmNlID0gZnVuY3Rpb24oc3RhdGUpIHtcblx0ICBpZiAodGhpcy5yZWdleHBfZWF0T2N0YWxEaWdpdChzdGF0ZSkpIHtcblx0ICAgIHZhciBuMSA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcblx0ICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRPY3RhbERpZ2l0KHN0YXRlKSkge1xuXHQgICAgICB2YXIgbjIgPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG5cdCAgICAgIGlmIChuMSA8PSAzICYmIHRoaXMucmVnZXhwX2VhdE9jdGFsRGlnaXQoc3RhdGUpKSB7XG5cdCAgICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gbjEgKiA2NCArIG4yICogOCArIHN0YXRlLmxhc3RJbnRWYWx1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBuMSAqIDggKyBuMjtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gbjE7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICByZXR1cm4gZmFsc2Vcblx0fTtcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1PY3RhbERpZ2l0XG5cdHBwJDgucmVnZXhwX2VhdE9jdGFsRGlnaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHQgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblx0ICBpZiAoaXNPY3RhbERpZ2l0KGNoKSkge1xuXHQgICAgc3RhdGUubGFzdEludFZhbHVlID0gY2ggLSAweDMwOyAvKiAwICovXG5cdCAgICBzdGF0ZS5hZHZhbmNlKCk7XG5cdCAgICByZXR1cm4gdHJ1ZVxuXHQgIH1cblx0ICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuXHQgIHJldHVybiBmYWxzZVxuXHR9O1xuXHRmdW5jdGlvbiBpc09jdGFsRGlnaXQoY2gpIHtcblx0ICByZXR1cm4gY2ggPj0gMHgzMCAvKiAwICovICYmIGNoIDw9IDB4MzcgLyogNyAqL1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4NERpZ2l0c1xuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1IZXhEaWdpdFxuXHQvLyBBbmQgSGV4RGlnaXQgSGV4RGlnaXQgaW4gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtSGV4RXNjYXBlU2VxdWVuY2Vcblx0cHAkOC5yZWdleHBfZWF0Rml4ZWRIZXhEaWdpdHMgPSBmdW5jdGlvbihzdGF0ZSwgbGVuZ3RoKSB7XG5cdCAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXHQgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHQgICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuXHQgICAgaWYgKCFpc0hleERpZ2l0KGNoKSkge1xuXHQgICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcblx0ICAgICAgcmV0dXJuIGZhbHNlXG5cdCAgICB9XG5cdCAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAxNiAqIHN0YXRlLmxhc3RJbnRWYWx1ZSArIGhleFRvSW50KGNoKTtcblx0ICAgIHN0YXRlLmFkdmFuY2UoKTtcblx0ICB9XG5cdCAgcmV0dXJuIHRydWVcblx0fTtcblxuXHQvLyBPYmplY3QgdHlwZSB1c2VkIHRvIHJlcHJlc2VudCB0b2tlbnMuIE5vdGUgdGhhdCBub3JtYWxseSwgdG9rZW5zXG5cdC8vIHNpbXBseSBleGlzdCBhcyBwcm9wZXJ0aWVzIG9uIHRoZSBwYXJzZXIgb2JqZWN0LiBUaGlzIGlzIG9ubHlcblx0Ly8gdXNlZCBmb3IgdGhlIG9uVG9rZW4gY2FsbGJhY2sgYW5kIHRoZSBleHRlcm5hbCB0b2tlbml6ZXIuXG5cblx0dmFyIFRva2VuID0gZnVuY3Rpb24gVG9rZW4ocCkge1xuXHQgIHRoaXMudHlwZSA9IHAudHlwZTtcblx0ICB0aGlzLnZhbHVlID0gcC52YWx1ZTtcblx0ICB0aGlzLnN0YXJ0ID0gcC5zdGFydDtcblx0ICB0aGlzLmVuZCA9IHAuZW5kO1xuXHQgIGlmIChwLm9wdGlvbnMubG9jYXRpb25zKVxuXHQgICAgeyB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwLCBwLnN0YXJ0TG9jLCBwLmVuZExvYyk7IH1cblx0ICBpZiAocC5vcHRpb25zLnJhbmdlcylcblx0ICAgIHsgdGhpcy5yYW5nZSA9IFtwLnN0YXJ0LCBwLmVuZF07IH1cblx0fTtcblxuXHQvLyAjIyBUb2tlbml6ZXJcblxuXHR2YXIgcHAkOSA9IFBhcnNlci5wcm90b3R5cGU7XG5cblx0Ly8gTW92ZSB0byB0aGUgbmV4dCB0b2tlblxuXG5cdHBwJDkubmV4dCA9IGZ1bmN0aW9uKGlnbm9yZUVzY2FwZVNlcXVlbmNlSW5LZXl3b3JkKSB7XG5cdCAgaWYgKCFpZ25vcmVFc2NhcGVTZXF1ZW5jZUluS2V5d29yZCAmJiB0aGlzLnR5cGUua2V5d29yZCAmJiB0aGlzLmNvbnRhaW5zRXNjKVxuXHQgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJFc2NhcGUgc2VxdWVuY2UgaW4ga2V5d29yZCBcIiArIHRoaXMudHlwZS5rZXl3b3JkKTsgfVxuXHQgIGlmICh0aGlzLm9wdGlvbnMub25Ub2tlbilcblx0ICAgIHsgdGhpcy5vcHRpb25zLm9uVG9rZW4obmV3IFRva2VuKHRoaXMpKTsgfVxuXG5cdCAgdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5lbmQ7XG5cdCAgdGhpcy5sYXN0VG9rU3RhcnQgPSB0aGlzLnN0YXJ0O1xuXHQgIHRoaXMubGFzdFRva0VuZExvYyA9IHRoaXMuZW5kTG9jO1xuXHQgIHRoaXMubGFzdFRva1N0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcblx0ICB0aGlzLm5leHRUb2tlbigpO1xuXHR9O1xuXG5cdHBwJDkuZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcblx0ICB0aGlzLm5leHQoKTtcblx0ICByZXR1cm4gbmV3IFRva2VuKHRoaXMpXG5cdH07XG5cblx0Ly8gSWYgd2UncmUgaW4gYW4gRVM2IGVudmlyb25tZW50LCBtYWtlIHBhcnNlcnMgaXRlcmFibGVcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIpXG5cdCAgeyBwcCQ5W1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcyQxLmdldFRva2VuKCk7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgIGRvbmU6IHRva2VuLnR5cGUgPT09IHR5cGVzLmVvZixcblx0ICAgICAgICAgIHZhbHVlOiB0b2tlblxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07IH1cblxuXHQvLyBUb2dnbGUgc3RyaWN0IG1vZGUuIFJlLXJlYWRzIHRoZSBuZXh0IG51bWJlciBvciBzdHJpbmcgdG8gcGxlYXNlXG5cdC8vIHBlZGFudGljIHRlc3RzIChgXCJ1c2Ugc3RyaWN0XCI7IDAxMDtgIHNob3VsZCBmYWlsKS5cblxuXHRwcCQ5LmN1ckNvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gdGhpcy5jb250ZXh0W3RoaXMuY29udGV4dC5sZW5ndGggLSAxXVxuXHR9O1xuXG5cdC8vIFJlYWQgYSBzaW5nbGUgdG9rZW4sIHVwZGF0aW5nIHRoZSBwYXJzZXIgb2JqZWN0J3MgdG9rZW4tcmVsYXRlZFxuXHQvLyBwcm9wZXJ0aWVzLlxuXG5cdHBwJDkubmV4dFRva2VuID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcblx0ICBpZiAoIWN1ckNvbnRleHQgfHwgIWN1ckNvbnRleHQucHJlc2VydmVTcGFjZSkgeyB0aGlzLnNraXBTcGFjZSgpOyB9XG5cblx0ICB0aGlzLnN0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5zdGFydExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTsgfVxuXHQgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgeyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5lb2YpIH1cblxuXHQgIGlmIChjdXJDb250ZXh0Lm92ZXJyaWRlKSB7IHJldHVybiBjdXJDb250ZXh0Lm92ZXJyaWRlKHRoaXMpIH1cblx0ICBlbHNlIHsgdGhpcy5yZWFkVG9rZW4odGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKTsgfVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuID0gZnVuY3Rpb24oY29kZSkge1xuXHQgIC8vIElkZW50aWZpZXIgb3Iga2V5d29yZC4gJ1xcdVhYWFgnIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCBpblxuXHQgIC8vIGlkZW50aWZpZXJzLCBzbyAnXFwnIGFsc28gZGlzcGF0Y2hlcyB0byB0aGF0LlxuXHQgIGlmIChpc0lkZW50aWZpZXJTdGFydChjb2RlLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikgfHwgY29kZSA9PT0gOTIgLyogJ1xcJyAqLylcblx0ICAgIHsgcmV0dXJuIHRoaXMucmVhZFdvcmQoKSB9XG5cblx0ICByZXR1cm4gdGhpcy5nZXRUb2tlbkZyb21Db2RlKGNvZGUpXG5cdH07XG5cblx0cHAkOS5mdWxsQ2hhckNvZGVBdFBvcyA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBjb2RlID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcblx0ICBpZiAoY29kZSA8PSAweGQ3ZmYgfHwgY29kZSA+PSAweGUwMDApIHsgcmV0dXJuIGNvZGUgfVxuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgcmV0dXJuIChjb2RlIDw8IDEwKSArIG5leHQgLSAweDM1ZmRjMDBcblx0fTtcblxuXHRwcCQ5LnNraXBCbG9ja0NvbW1lbnQgPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKTtcblx0ICB2YXIgc3RhcnQgPSB0aGlzLnBvcywgZW5kID0gdGhpcy5pbnB1dC5pbmRleE9mKFwiKi9cIiwgdGhpcy5wb3MgKz0gMik7XG5cdCAgaWYgKGVuZCA9PT0gLTEpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcyAtIDIsIFwiVW50ZXJtaW5hdGVkIGNvbW1lbnRcIik7IH1cblx0ICB0aGlzLnBvcyA9IGVuZCArIDI7XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcblx0ICAgIGxpbmVCcmVha0cubGFzdEluZGV4ID0gc3RhcnQ7XG5cdCAgICB2YXIgbWF0Y2g7XG5cdCAgICB3aGlsZSAoKG1hdGNoID0gbGluZUJyZWFrRy5leGVjKHRoaXMuaW5wdXQpKSAmJiBtYXRjaC5pbmRleCA8IHRoaXMucG9zKSB7XG5cdCAgICAgICsrdGhpcy5jdXJMaW5lO1xuXHQgICAgICB0aGlzLmxpbmVTdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAodGhpcy5vcHRpb25zLm9uQ29tbWVudClcblx0ICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudCh0cnVlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgZW5kKSwgc3RhcnQsIHRoaXMucG9zLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExvYywgdGhpcy5jdXJQb3NpdGlvbigpKTsgfVxuXHR9O1xuXG5cdHBwJDkuc2tpcExpbmVDb21tZW50ID0gZnVuY3Rpb24oc3RhcnRTa2lwKSB7XG5cdCAgdmFyIHN0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgdmFyIHN0YXJ0TG9jID0gdGhpcy5vcHRpb25zLm9uQ29tbWVudCAmJiB0aGlzLmN1clBvc2l0aW9uKCk7XG5cdCAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICs9IHN0YXJ0U2tpcCk7XG5cdCAgd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGggJiYgIWlzTmV3TGluZShjaCkpIHtcblx0ICAgIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpO1xuXHQgIH1cblx0ICBpZiAodGhpcy5vcHRpb25zLm9uQ29tbWVudClcblx0ICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudChmYWxzZSwgdGhpcy5pbnB1dC5zbGljZShzdGFydCArIHN0YXJ0U2tpcCwgdGhpcy5wb3MpLCBzdGFydCwgdGhpcy5wb3MsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCB0aGlzLmN1clBvc2l0aW9uKCkpOyB9XG5cdH07XG5cblx0Ly8gQ2FsbGVkIGF0IHRoZSBzdGFydCBvZiB0aGUgcGFyc2UgYW5kIGFmdGVyIGV2ZXJ5IHRva2VuLiBTa2lwc1xuXHQvLyB3aGl0ZXNwYWNlIGFuZCBjb21tZW50cywgYW5kLlxuXG5cdHBwJDkuc2tpcFNwYWNlID0gZnVuY3Rpb24oKSB7XG5cdCAgbG9vcDogd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGgpIHtcblx0ICAgIHZhciBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG5cdCAgICBzd2l0Y2ggKGNoKSB7XG5cdCAgICBjYXNlIDMyOiBjYXNlIDE2MDogLy8gJyAnXG5cdCAgICAgICsrdGhpcy5wb3M7XG5cdCAgICAgIGJyZWFrXG5cdCAgICBjYXNlIDEzOlxuXHQgICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSkgPT09IDEwKSB7XG5cdCAgICAgICAgKyt0aGlzLnBvcztcblx0ICAgICAgfVxuXHQgICAgY2FzZSAxMDogY2FzZSA4MjMyOiBjYXNlIDgyMzM6XG5cdCAgICAgICsrdGhpcy5wb3M7XG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKSB7XG5cdCAgICAgICAgKyt0aGlzLmN1ckxpbmU7XG5cdCAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLnBvcztcblx0ICAgICAgfVxuXHQgICAgICBicmVha1xuXHQgICAgY2FzZSA0NzogLy8gJy8nXG5cdCAgICAgIHN3aXRjaCAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSkpIHtcblx0ICAgICAgY2FzZSA0MjogLy8gJyonXG5cdCAgICAgICAgdGhpcy5za2lwQmxvY2tDb21tZW50KCk7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgY2FzZSA0Nzpcblx0ICAgICAgICB0aGlzLnNraXBMaW5lQ29tbWVudCgyKTtcblx0ICAgICAgICBicmVha1xuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIGJyZWFrIGxvb3Bcblx0ICAgICAgfVxuXHQgICAgICBicmVha1xuXHQgICAgZGVmYXVsdDpcblx0ICAgICAgaWYgKGNoID4gOCAmJiBjaCA8IDE0IHx8IGNoID49IDU3NjAgJiYgbm9uQVNDSUl3aGl0ZXNwYWNlLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpKSB7XG5cdCAgICAgICAgKyt0aGlzLnBvcztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBicmVhayBsb29wXG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblx0Ly8gQ2FsbGVkIGF0IHRoZSBlbmQgb2YgZXZlcnkgdG9rZW4uIFNldHMgYGVuZGAsIGB2YWxgLCBhbmRcblx0Ly8gbWFpbnRhaW5zIGBjb250ZXh0YCBhbmQgYGV4cHJBbGxvd2VkYCwgYW5kIHNraXBzIHRoZSBzcGFjZSBhZnRlclxuXHQvLyB0aGUgdG9rZW4sIHNvIHRoYXQgdGhlIG5leHQgb25lJ3MgYHN0YXJ0YCB3aWxsIHBvaW50IGF0IHRoZVxuXHQvLyByaWdodCBwb3NpdGlvbi5cblxuXHRwcCQ5LmZpbmlzaFRva2VuID0gZnVuY3Rpb24odHlwZSwgdmFsKSB7XG5cdCAgdGhpcy5lbmQgPSB0aGlzLnBvcztcblx0ICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLmVuZExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTsgfVxuXHQgIHZhciBwcmV2VHlwZSA9IHRoaXMudHlwZTtcblx0ICB0aGlzLnR5cGUgPSB0eXBlO1xuXHQgIHRoaXMudmFsdWUgPSB2YWw7XG5cblx0ICB0aGlzLnVwZGF0ZUNvbnRleHQocHJldlR5cGUpO1xuXHR9O1xuXG5cdC8vICMjIyBUb2tlbiByZWFkaW5nXG5cblx0Ly8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgdG8gZmV0Y2ggdGhlIG5leHQgdG9rZW4uIEl0XG5cdC8vIGlzIHNvbWV3aGF0IG9ic2N1cmUsIGJlY2F1c2UgaXQgd29ya3MgaW4gY2hhcmFjdGVyIGNvZGVzIHJhdGhlclxuXHQvLyB0aGFuIGNoYXJhY3RlcnMsIGFuZCBiZWNhdXNlIG9wZXJhdG9yIHBhcnNpbmcgaGFzIGJlZW4gaW5saW5lZFxuXHQvLyBpbnRvIGl0LlxuXHQvL1xuXHQvLyBBbGwgaW4gdGhlIG5hbWUgb2Ygc3BlZWQuXG5cdC8vXG5cdHBwJDkucmVhZFRva2VuX2RvdCA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgaWYgKG5leHQgPj0gNDggJiYgbmV4dCA8PSA1NykgeyByZXR1cm4gdGhpcy5yZWFkTnVtYmVyKHRydWUpIH1cblx0ICB2YXIgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgbmV4dCA9PT0gNDYgJiYgbmV4dDIgPT09IDQ2KSB7IC8vIDQ2ID0gZG90ICcuJ1xuXHQgICAgdGhpcy5wb3MgKz0gMztcblx0ICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmVsbGlwc2lzKVxuXHQgIH0gZWxzZSB7XG5cdCAgICArK3RoaXMucG9zO1xuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZG90KVxuXHQgIH1cblx0fTtcblxuXHRwcCQ5LnJlYWRUb2tlbl9zbGFzaCA9IGZ1bmN0aW9uKCkgeyAvLyAnLydcblx0ICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuXHQgIGlmICh0aGlzLmV4cHJBbGxvd2VkKSB7ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLnJlYWRSZWdleHAoKSB9XG5cdCAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnNsYXNoLCAxKVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuX211bHRfbW9kdWxvX2V4cCA9IGZ1bmN0aW9uKGNvZGUpIHsgLy8gJyUqJ1xuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgdmFyIHNpemUgPSAxO1xuXHQgIHZhciB0b2tlbnR5cGUgPSBjb2RlID09PSA0MiA/IHR5cGVzLnN0YXIgOiB0eXBlcy5tb2R1bG87XG5cblx0ICAvLyBleHBvbmVudGlhdGlvbiBvcGVyYXRvciAqKiBhbmQgKio9XG5cdCAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA3ICYmIGNvZGUgPT09IDQyICYmIG5leHQgPT09IDQyKSB7XG5cdCAgICArK3NpemU7XG5cdCAgICB0b2tlbnR5cGUgPSB0eXBlcy5zdGFyc3Rhcjtcblx0ICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcblx0ICB9XG5cblx0ICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCBzaXplICsgMSkgfVxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE9wKHRva2VudHlwZSwgc2l6ZSlcblx0fTtcblxuXHRwcCQ5LnJlYWRUb2tlbl9waXBlX2FtcCA9IGZ1bmN0aW9uKGNvZGUpIHsgLy8gJ3wmJ1xuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgaWYgKG5leHQgPT09IGNvZGUpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gdHlwZXMubG9naWNhbE9SIDogdHlwZXMubG9naWNhbEFORCwgMikgfVxuXHQgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSAxMjQgPyB0eXBlcy5iaXR3aXNlT1IgOiB0eXBlcy5iaXR3aXNlQU5ELCAxKVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuX2NhcmV0ID0gZnVuY3Rpb24oKSB7IC8vICdeJ1xuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuXHQgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmJpdHdpc2VYT1IsIDEpXG5cdH07XG5cblx0cHAkOS5yZWFkVG9rZW5fcGx1c19taW4gPSBmdW5jdGlvbihjb2RlKSB7IC8vICcrLSdcblx0ICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuXHQgIGlmIChuZXh0ID09PSBjb2RlKSB7XG5cdCAgICBpZiAobmV4dCA9PT0gNDUgJiYgIXRoaXMuaW5Nb2R1bGUgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyICYmXG5cdCAgICAgICAgKHRoaXMubGFzdFRva0VuZCA9PT0gMCB8fCBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5wb3MpKSkpIHtcblx0ICAgICAgLy8gQSBgLS0+YCBsaW5lIGNvbW1lbnRcblx0ICAgICAgdGhpcy5za2lwTGluZUNvbW1lbnQoMyk7XG5cdCAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG5cdCAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpXG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5pbmNEZWMsIDIpXG5cdCAgfVxuXHQgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5wbHVzTWluLCAxKVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuX2x0X2d0ID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnPD4nXG5cdCAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcblx0ICB2YXIgc2l6ZSA9IDE7XG5cdCAgaWYgKG5leHQgPT09IGNvZGUpIHtcblx0ICAgIHNpemUgPSBjb2RlID09PSA2MiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNjIgPyAzIDogMjtcblx0ICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyBzaXplKSA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCBzaXplICsgMSkgfVxuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYml0U2hpZnQsIHNpemUpXG5cdCAgfVxuXHQgIGlmIChuZXh0ID09PSAzMyAmJiBjb2RlID09PSA2MCAmJiAhdGhpcy5pbk1vZHVsZSAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNDUgJiZcblx0ICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMykgPT09IDQ1KSB7XG5cdCAgICAvLyBgPCEtLWAsIGFuIFhNTC1zdHlsZSBjb21tZW50IHRoYXQgc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGEgbGluZSBjb21tZW50XG5cdCAgICB0aGlzLnNraXBMaW5lQ29tbWVudCg0KTtcblx0ICAgIHRoaXMuc2tpcFNwYWNlKCk7XG5cdCAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW4oKVxuXHQgIH1cblx0ICBpZiAobmV4dCA9PT0gNjEpIHsgc2l6ZSA9IDI7IH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5yZWxhdGlvbmFsLCBzaXplKVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuX2VxX2V4Y2wgPSBmdW5jdGlvbihjb2RlKSB7IC8vICc9ISdcblx0ICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuXHQgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5lcXVhbGl0eSwgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYxID8gMyA6IDIpIH1cblx0ICBpZiAoY29kZSA9PT0gNjEgJiYgbmV4dCA9PT0gNjIgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgLy8gJz0+J1xuXHQgICAgdGhpcy5wb3MgKz0gMjtcblx0ICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmFycm93KVxuXHQgIH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSA2MSA/IHR5cGVzLmVxIDogdHlwZXMucHJlZml4LCAxKVxuXHR9O1xuXG5cdHBwJDkucmVhZFRva2VuX3F1ZXN0aW9uID0gZnVuY3Rpb24oKSB7IC8vICc/J1xuXHQgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTEpIHtcblx0ICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgICBpZiAobmV4dCA9PT0gNDYpIHtcblx0ICAgICAgdmFyIG5leHQyID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMik7XG5cdCAgICAgIGlmIChuZXh0MiA8IDQ4IHx8IG5leHQyID4gNTcpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucXVlc3Rpb25Eb3QsIDIpIH1cblx0ICAgIH1cblx0ICAgIGlmIChuZXh0ID09PSA2MykgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5jb2FsZXNjZSwgMikgfVxuXHQgIH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5xdWVzdGlvbiwgMSlcblx0fTtcblxuXHRwcCQ5LmdldFRva2VuRnJvbUNvZGUgPSBmdW5jdGlvbihjb2RlKSB7XG5cdCAgc3dpdGNoIChjb2RlKSB7XG5cdCAgLy8gVGhlIGludGVycHJldGF0aW9uIG9mIGEgZG90IGRlcGVuZHMgb24gd2hldGhlciBpdCBpcyBmb2xsb3dlZFxuXHQgIC8vIGJ5IGEgZGlnaXQgb3IgYW5vdGhlciB0d28gZG90cy5cblx0ICBjYXNlIDQ2OiAvLyAnLidcblx0ICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9kb3QoKVxuXG5cdCAgLy8gUHVuY3R1YXRpb24gdG9rZW5zLlxuXHQgIGNhc2UgNDA6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnBhcmVuTClcblx0ICBjYXNlIDQxOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5wYXJlblIpXG5cdCAgY2FzZSA1OTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuc2VtaSlcblx0ICBjYXNlIDQ0OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5jb21tYSlcblx0ICBjYXNlIDkxOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFja2V0TClcblx0ICBjYXNlIDkzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFja2V0Uilcblx0ICBjYXNlIDEyMzogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2VMKVxuXHQgIGNhc2UgMTI1OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFjZVIpXG5cdCAgY2FzZSA1ODogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuY29sb24pXG5cblx0ICBjYXNlIDk2OiAvLyAnYCdcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2KSB7IGJyZWFrIH1cblx0ICAgICsrdGhpcy5wb3M7XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5iYWNrUXVvdGUpXG5cblx0ICBjYXNlIDQ4OiAvLyAnMCdcblx0ICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG5cdCAgICBpZiAobmV4dCA9PT0gMTIwIHx8IG5leHQgPT09IDg4KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigxNikgfSAvLyAnMHgnLCAnMFgnIC0gaGV4IG51bWJlclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG5cdCAgICAgIGlmIChuZXh0ID09PSAxMTEgfHwgbmV4dCA9PT0gNzkpIHsgcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDgpIH0gLy8gJzBvJywgJzBPJyAtIG9jdGFsIG51bWJlclxuXHQgICAgICBpZiAobmV4dCA9PT0gOTggfHwgbmV4dCA9PT0gNjYpIHsgcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDIpIH0gLy8gJzBiJywgJzBCJyAtIGJpbmFyeSBudW1iZXJcblx0ICAgIH1cblxuXHQgIC8vIEFueXRoaW5nIGVsc2UgYmVnaW5uaW5nIHdpdGggYSBkaWdpdCBpcyBhbiBpbnRlZ2VyLCBvY3RhbFxuXHQgIC8vIG51bWJlciwgb3IgZmxvYXQuXG5cdCAgY2FzZSA0OTogY2FzZSA1MDogY2FzZSA1MTogY2FzZSA1MjogY2FzZSA1MzogY2FzZSA1NDogY2FzZSA1NTogY2FzZSA1NjogY2FzZSA1NzogLy8gMS05XG5cdCAgICByZXR1cm4gdGhpcy5yZWFkTnVtYmVyKGZhbHNlKVxuXG5cdCAgLy8gUXVvdGVzIHByb2R1Y2Ugc3RyaW5ncy5cblx0ICBjYXNlIDM0OiBjYXNlIDM5OiAvLyAnXCInLCBcIidcIlxuXHQgICAgcmV0dXJuIHRoaXMucmVhZFN0cmluZyhjb2RlKVxuXG5cdCAgLy8gT3BlcmF0b3JzIGFyZSBwYXJzZWQgaW5saW5lIGluIHRpbnkgc3RhdGUgbWFjaGluZXMuICc9JyAoNjEpIGlzXG5cdCAgLy8gb2Z0ZW4gcmVmZXJyZWQgdG8uIGBmaW5pc2hPcGAgc2ltcGx5IHNraXBzIHRoZSBhbW91bnQgb2Zcblx0ICAvLyBjaGFyYWN0ZXJzIGl0IGlzIGdpdmVuIGFzIHNlY29uZCBhcmd1bWVudCwgYW5kIHJldHVybnMgYSB0b2tlblxuXHQgIC8vIG9mIHRoZSB0eXBlIGdpdmVuIGJ5IGl0cyBmaXJzdCBhcmd1bWVudC5cblxuXHQgIGNhc2UgNDc6IC8vICcvJ1xuXHQgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3NsYXNoKClcblxuXHQgIGNhc2UgMzc6IGNhc2UgNDI6IC8vICclKidcblx0ICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9tdWx0X21vZHVsb19leHAoY29kZSlcblxuXHQgIGNhc2UgMTI0OiBjYXNlIDM4OiAvLyAnfCYnXG5cdCAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fcGlwZV9hbXAoY29kZSlcblxuXHQgIGNhc2UgOTQ6IC8vICdeJ1xuXHQgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2NhcmV0KClcblxuXHQgIGNhc2UgNDM6IGNhc2UgNDU6IC8vICcrLSdcblx0ICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9wbHVzX21pbihjb2RlKVxuXG5cdCAgY2FzZSA2MDogY2FzZSA2MjogLy8gJzw+J1xuXHQgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2x0X2d0KGNvZGUpXG5cblx0ICBjYXNlIDYxOiBjYXNlIDMzOiAvLyAnPSEnXG5cdCAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZXFfZXhjbChjb2RlKVxuXG5cdCAgY2FzZSA2MzogLy8gJz8nXG5cdCAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fcXVlc3Rpb24oKVxuXG5cdCAgY2FzZSAxMjY6IC8vICd+J1xuXHQgICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucHJlZml4LCAxKVxuXHQgIH1cblxuXHQgIHRoaXMucmFpc2UodGhpcy5wb3MsIFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJ1wiICsgY29kZVBvaW50VG9TdHJpbmckMShjb2RlKSArIFwiJ1wiKTtcblx0fTtcblxuXHRwcCQ5LmZpbmlzaE9wID0gZnVuY3Rpb24odHlwZSwgc2l6ZSkge1xuXHQgIHZhciBzdHIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyArIHNpemUpO1xuXHQgIHRoaXMucG9zICs9IHNpemU7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgc3RyKVxuXHR9O1xuXG5cdHBwJDkucmVhZFJlZ2V4cCA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBlc2NhcGVkLCBpbkNsYXNzLCBzdGFydCA9IHRoaXMucG9zO1xuXHQgIGZvciAoOzspIHtcblx0ICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgeyB0aGlzLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cblx0ICAgIHZhciBjaCA9IHRoaXMuaW5wdXQuY2hhckF0KHRoaXMucG9zKTtcblx0ICAgIGlmIChsaW5lQnJlYWsudGVzdChjaCkpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpOyB9XG5cdCAgICBpZiAoIWVzY2FwZWQpIHtcblx0ICAgICAgaWYgKGNoID09PSBcIltcIikgeyBpbkNsYXNzID0gdHJ1ZTsgfVxuXHQgICAgICBlbHNlIGlmIChjaCA9PT0gXCJdXCIgJiYgaW5DbGFzcykgeyBpbkNsYXNzID0gZmFsc2U7IH1cblx0ICAgICAgZWxzZSBpZiAoY2ggPT09IFwiL1wiICYmICFpbkNsYXNzKSB7IGJyZWFrIH1cblx0ICAgICAgZXNjYXBlZCA9IGNoID09PSBcIlxcXFxcIjtcblx0ICAgIH0gZWxzZSB7IGVzY2FwZWQgPSBmYWxzZTsgfVxuXHQgICAgKyt0aGlzLnBvcztcblx0ICB9XG5cdCAgdmFyIHBhdHRlcm4gPSB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLnBvcyk7XG5cdCAgKyt0aGlzLnBvcztcblx0ICB2YXIgZmxhZ3NTdGFydCA9IHRoaXMucG9zO1xuXHQgIHZhciBmbGFncyA9IHRoaXMucmVhZFdvcmQxKCk7XG5cdCAgaWYgKHRoaXMuY29udGFpbnNFc2MpIHsgdGhpcy51bmV4cGVjdGVkKGZsYWdzU3RhcnQpOyB9XG5cblx0ICAvLyBWYWxpZGF0ZSBwYXR0ZXJuXG5cdCAgdmFyIHN0YXRlID0gdGhpcy5yZWdleHBTdGF0ZSB8fCAodGhpcy5yZWdleHBTdGF0ZSA9IG5ldyBSZWdFeHBWYWxpZGF0aW9uU3RhdGUodGhpcykpO1xuXHQgIHN0YXRlLnJlc2V0KHN0YXJ0LCBwYXR0ZXJuLCBmbGFncyk7XG5cdCAgdGhpcy52YWxpZGF0ZVJlZ0V4cEZsYWdzKHN0YXRlKTtcblx0ICB0aGlzLnZhbGlkYXRlUmVnRXhwUGF0dGVybihzdGF0ZSk7XG5cblx0ICAvLyBDcmVhdGUgTGl0ZXJhbCN2YWx1ZSBwcm9wZXJ0eSB2YWx1ZS5cblx0ICB2YXIgdmFsdWUgPSBudWxsO1xuXHQgIHRyeSB7XG5cdCAgICB2YWx1ZSA9IG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIC8vIEVTVHJlZSByZXF1aXJlcyBudWxsIGlmIGl0IGZhaWxlZCB0byBpbnN0YW50aWF0ZSBSZWdFeHAgb2JqZWN0LlxuXHQgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VzdHJlZS9lc3RyZWUvYmxvYi9hMjcwMDNhZGY0ZmQ3YmZhZDQ0ZGU5Y2VmMzcyYTJlYWNkNTI3YjFjL2VzNS5tZCNyZWdleHBsaXRlcmFsXG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucmVnZXhwLCB7cGF0dGVybjogcGF0dGVybiwgZmxhZ3M6IGZsYWdzLCB2YWx1ZTogdmFsdWV9KVxuXHR9O1xuXG5cdC8vIFJlYWQgYW4gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFkaXguIFJldHVybiBudWxsIGlmIHplcm8gZGlnaXRzXG5cdC8vIHdlcmUgcmVhZCwgdGhlIGludGVnZXIgdmFsdWUgb3RoZXJ3aXNlLiBXaGVuIGBsZW5gIGlzIGdpdmVuLCB0aGlzXG5cdC8vIHdpbGwgcmV0dXJuIGBudWxsYCB1bmxlc3MgdGhlIGludGVnZXIgaGFzIGV4YWN0bHkgYGxlbmAgZGlnaXRzLlxuXG5cdHBwJDkucmVhZEludCA9IGZ1bmN0aW9uKHJhZGl4LCBsZW4pIHtcblx0ICB2YXIgc3RhcnQgPSB0aGlzLnBvcywgdG90YWwgPSAwO1xuXHQgIGZvciAodmFyIGkgPSAwLCBlID0gbGVuID09IG51bGwgPyBJbmZpbml0eSA6IGxlbjsgaSA8IGU7ICsraSkge1xuXHQgICAgdmFyIGNvZGUgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLCB2YWwgPSAodm9pZCAwKTtcblx0ICAgIGlmIChjb2RlID49IDk3KSB7IHZhbCA9IGNvZGUgLSA5NyArIDEwOyB9IC8vIGFcblx0ICAgIGVsc2UgaWYgKGNvZGUgPj0gNjUpIHsgdmFsID0gY29kZSAtIDY1ICsgMTA7IH0gLy8gQVxuXHQgICAgZWxzZSBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7IHZhbCA9IGNvZGUgLSA0ODsgfSAvLyAwLTlcblx0ICAgIGVsc2UgeyB2YWwgPSBJbmZpbml0eTsgfVxuXHQgICAgaWYgKHZhbCA+PSByYWRpeCkgeyBicmVhayB9XG5cdCAgICArK3RoaXMucG9zO1xuXHQgICAgdG90YWwgPSB0b3RhbCAqIHJhZGl4ICsgdmFsO1xuXHQgIH1cblx0ICBpZiAodGhpcy5wb3MgPT09IHN0YXJ0IHx8IGxlbiAhPSBudWxsICYmIHRoaXMucG9zIC0gc3RhcnQgIT09IGxlbikgeyByZXR1cm4gbnVsbCB9XG5cblx0ICByZXR1cm4gdG90YWxcblx0fTtcblxuXHRwcCQ5LnJlYWRSYWRpeE51bWJlciA9IGZ1bmN0aW9uKHJhZGl4KSB7XG5cdCAgdmFyIHN0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgdGhpcy5wb3MgKz0gMjsgLy8gMHhcblx0ICB2YXIgdmFsID0gdGhpcy5yZWFkSW50KHJhZGl4KTtcblx0ICBpZiAodmFsID09IG51bGwpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0ICsgMiwgXCJFeHBlY3RlZCBudW1iZXIgaW4gcmFkaXggXCIgKyByYWRpeCk7IH1cblx0ICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDExICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcykgPT09IDExMCkge1xuXHQgICAgdmFsID0gdHlwZW9mIEJpZ0ludCAhPT0gXCJ1bmRlZmluZWRcIiA/IEJpZ0ludCh0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLnBvcykpIDogbnVsbDtcblx0ICAgICsrdGhpcy5wb3M7XG5cdCAgfSBlbHNlIGlmIChpc0lkZW50aWZpZXJTdGFydCh0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpKSB7IHRoaXMucmFpc2UodGhpcy5wb3MsIFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7IH1cblx0ICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5udW0sIHZhbClcblx0fTtcblxuXHQvLyBSZWFkIGFuIGludGVnZXIsIG9jdGFsIGludGVnZXIsIG9yIGZsb2F0aW5nLXBvaW50IG51bWJlci5cblxuXHRwcCQ5LnJlYWROdW1iZXIgPSBmdW5jdGlvbihzdGFydHNXaXRoRG90KSB7XG5cdCAgdmFyIHN0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgaWYgKCFzdGFydHNXaXRoRG90ICYmIHRoaXMucmVhZEludCgxMCkgPT09IG51bGwpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuXHQgIHZhciBvY3RhbCA9IHRoaXMucG9zIC0gc3RhcnQgPj0gMiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQoc3RhcnQpID09PSA0ODtcblx0ICBpZiAob2N0YWwgJiYgdGhpcy5zdHJpY3QpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuXHQgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcblx0ICBpZiAoIW9jdGFsICYmICFzdGFydHNXaXRoRG90ICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMSAmJiBuZXh0ID09PSAxMTApIHtcblx0ICAgIHZhciBzdHIkMSA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKTtcblx0ICAgIHZhciB2YWwkMSA9IHR5cGVvZiBCaWdJbnQgIT09IFwidW5kZWZpbmVkXCIgPyBCaWdJbnQoc3RyJDEpIDogbnVsbDtcblx0ICAgICsrdGhpcy5wb3M7XG5cdCAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpOyB9XG5cdCAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5udW0sIHZhbCQxKVxuXHQgIH1cblx0ICBpZiAob2N0YWwgJiYgL1s4OV0vLnRlc3QodGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpKSkgeyBvY3RhbCA9IGZhbHNlOyB9XG5cdCAgaWYgKG5leHQgPT09IDQ2ICYmICFvY3RhbCkgeyAvLyAnLidcblx0ICAgICsrdGhpcy5wb3M7XG5cdCAgICB0aGlzLnJlYWRJbnQoMTApO1xuXHQgICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG5cdCAgfVxuXHQgIGlmICgobmV4dCA9PT0gNjkgfHwgbmV4dCA9PT0gMTAxKSAmJiAhb2N0YWwpIHsgLy8gJ2VFJ1xuXHQgICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTtcblx0ICAgIGlmIChuZXh0ID09PSA0MyB8fCBuZXh0ID09PSA0NSkgeyArK3RoaXMucG9zOyB9IC8vICcrLSdcblx0ICAgIGlmICh0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7IH1cblx0ICB9XG5cdCAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKSkpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKTsgfVxuXG5cdCAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKTtcblx0ICB2YXIgdmFsID0gb2N0YWwgPyBwYXJzZUludChzdHIsIDgpIDogcGFyc2VGbG9hdChzdHIpO1xuXHQgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLm51bSwgdmFsKVxuXHR9O1xuXG5cdC8vIFJlYWQgYSBzdHJpbmcgdmFsdWUsIGludGVycHJldGluZyBiYWNrc2xhc2gtZXNjYXBlcy5cblxuXHRwcCQ5LnJlYWRDb2RlUG9pbnQgPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLCBjb2RlO1xuXG5cdCAgaWYgKGNoID09PSAxMjMpIHsgLy8gJ3snXG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNikgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuXHQgICAgdmFyIGNvZGVQb3MgPSArK3RoaXMucG9zO1xuXHQgICAgY29kZSA9IHRoaXMucmVhZEhleENoYXIodGhpcy5pbnB1dC5pbmRleE9mKFwifVwiLCB0aGlzLnBvcykgLSB0aGlzLnBvcyk7XG5cdCAgICArK3RoaXMucG9zO1xuXHQgICAgaWYgKGNvZGUgPiAweDEwRkZGRikgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihjb2RlUG9zLCBcIkNvZGUgcG9pbnQgb3V0IG9mIGJvdW5kc1wiKTsgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICBjb2RlID0gdGhpcy5yZWFkSGV4Q2hhcig0KTtcblx0ICB9XG5cdCAgcmV0dXJuIGNvZGVcblx0fTtcblxuXHRmdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyQxKGNvZGUpIHtcblx0ICAvLyBVVEYtMTYgRGVjb2Rpbmdcblx0ICBpZiAoY29kZSA8PSAweEZGRkYpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkgfVxuXHQgIGNvZGUgLT0gMHgxMDAwMDtcblx0ICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgoY29kZSA+PiAxMCkgKyAweEQ4MDAsIChjb2RlICYgMTAyMykgKyAweERDMDApXG5cdH1cblxuXHRwcCQ5LnJlYWRTdHJpbmcgPSBmdW5jdGlvbihxdW90ZSkge1xuXHQgIHZhciBvdXQgPSBcIlwiLCBjaHVua1N0YXJ0ID0gKyt0aGlzLnBvcztcblx0ICBmb3IgKDs7KSB7XG5cdCAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5pbnB1dC5sZW5ndGgpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7IH1cblx0ICAgIHZhciBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG5cdCAgICBpZiAoY2ggPT09IHF1b3RlKSB7IGJyZWFrIH1cblx0ICAgIGlmIChjaCA9PT0gOTIpIHsgLy8gJ1xcJ1xuXHQgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG5cdCAgICAgIG91dCArPSB0aGlzLnJlYWRFc2NhcGVkQ2hhcihmYWxzZSk7XG5cdCAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChpc05ld0xpbmUoY2gsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMCkpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7IH1cblx0ICAgICAgKyt0aGlzLnBvcztcblx0ICAgIH1cblx0ICB9XG5cdCAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MrKyk7XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuc3RyaW5nLCBvdXQpXG5cdH07XG5cblx0Ly8gUmVhZHMgdGVtcGxhdGUgc3RyaW5nIHRva2Vucy5cblxuXHR2YXIgSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IgPSB7fTtcblxuXHRwcCQ5LnRyeVJlYWRUZW1wbGF0ZVRva2VuID0gZnVuY3Rpb24oKSB7XG5cdCAgdGhpcy5pblRlbXBsYXRlRWxlbWVudCA9IHRydWU7XG5cdCAgdHJ5IHtcblx0ICAgIHRoaXMucmVhZFRtcGxUb2tlbigpO1xuXHQgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgaWYgKGVyciA9PT0gSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IpIHtcblx0ICAgICAgdGhpcy5yZWFkSW52YWxpZFRlbXBsYXRlVG9rZW4oKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRocm93IGVyclxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgPSBmYWxzZTtcblx0fTtcblxuXHRwcCQ5LmludmFsaWRTdHJpbmdUb2tlbiA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBtZXNzYWdlKSB7XG5cdCAgaWYgKHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcblx0ICAgIHRocm93IElOVkFMSURfVEVNUExBVEVfRVNDQVBFX0VSUk9SXG5cdCAgfSBlbHNlIHtcblx0ICAgIHRoaXMucmFpc2UocG9zaXRpb24sIG1lc3NhZ2UpO1xuXHQgIH1cblx0fTtcblxuXHRwcCQ5LnJlYWRUbXBsVG9rZW4gPSBmdW5jdGlvbigpIHtcblx0ICB2YXIgb3V0ID0gXCJcIiwgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuXHQgIGZvciAoOzspIHtcblx0ICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHRlbXBsYXRlXCIpOyB9XG5cdCAgICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuXHQgICAgaWYgKGNoID09PSA5NiB8fCBjaCA9PT0gMzYgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSkgPT09IDEyMykgeyAvLyAnYCcsICckeydcblx0ICAgICAgaWYgKHRoaXMucG9zID09PSB0aGlzLnN0YXJ0ICYmICh0aGlzLnR5cGUgPT09IHR5cGVzLnRlbXBsYXRlIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuaW52YWxpZFRlbXBsYXRlKSkge1xuXHQgICAgICAgIGlmIChjaCA9PT0gMzYpIHtcblx0ICAgICAgICAgIHRoaXMucG9zICs9IDI7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5kb2xsYXJCcmFjZUwpXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICsrdGhpcy5wb3M7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5iYWNrUXVvdGUpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKTtcblx0ICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMudGVtcGxhdGUsIG91dClcblx0ICAgIH1cblx0ICAgIGlmIChjaCA9PT0gOTIpIHsgLy8gJ1xcJ1xuXHQgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG5cdCAgICAgIG91dCArPSB0aGlzLnJlYWRFc2NhcGVkQ2hhcih0cnVlKTtcblx0ICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuXHQgICAgfSBlbHNlIGlmIChpc05ld0xpbmUoY2gpKSB7XG5cdCAgICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKTtcblx0ICAgICAgKyt0aGlzLnBvcztcblx0ICAgICAgc3dpdGNoIChjaCkge1xuXHQgICAgICBjYXNlIDEzOlxuXHQgICAgICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSAxMCkgeyArK3RoaXMucG9zOyB9XG5cdCAgICAgIGNhc2UgMTA6XG5cdCAgICAgICAgb3V0ICs9IFwiXFxuXCI7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgZGVmYXVsdDpcblx0ICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG5cdCAgICAgICAgYnJlYWtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuXHQgICAgICAgICsrdGhpcy5jdXJMaW5lO1xuXHQgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgICAgIH1cblx0ICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgKyt0aGlzLnBvcztcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblx0Ly8gUmVhZHMgYSB0ZW1wbGF0ZSB0b2tlbiB0byBzZWFyY2ggZm9yIHRoZSBlbmQsIHdpdGhvdXQgdmFsaWRhdGluZyBhbnkgZXNjYXBlIHNlcXVlbmNlc1xuXHRwcCQ5LnJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuXHQgIGZvciAoOyB0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoOyB0aGlzLnBvcysrKSB7XG5cdCAgICBzd2l0Y2ggKHRoaXMuaW5wdXRbdGhpcy5wb3NdKSB7XG5cdCAgICBjYXNlIFwiXFxcXFwiOlxuXHQgICAgICArK3RoaXMucG9zO1xuXHQgICAgICBicmVha1xuXG5cdCAgICBjYXNlIFwiJFwiOlxuXHQgICAgICBpZiAodGhpcy5pbnB1dFt0aGlzLnBvcyArIDFdICE9PSBcIntcIikge1xuXHQgICAgICAgIGJyZWFrXG5cdCAgICAgIH1cblx0ICAgIC8vIGZhbGxzIHRocm91Z2hcblxuXHQgICAgY2FzZSBcImBcIjpcblx0ICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuaW52YWxpZFRlbXBsYXRlLCB0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMucG9zKSlcblxuXHQgICAgLy8gbm8gZGVmYXVsdFxuXHQgICAgfVxuXHQgIH1cblx0ICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHRlbXBsYXRlXCIpO1xuXHR9O1xuXG5cdC8vIFVzZWQgdG8gcmVhZCBlc2NhcGVkIGNoYXJhY3RlcnNcblxuXHRwcCQ5LnJlYWRFc2NhcGVkQ2hhciA9IGZ1bmN0aW9uKGluVGVtcGxhdGUpIHtcblx0ICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcyk7XG5cdCAgKyt0aGlzLnBvcztcblx0ICBzd2l0Y2ggKGNoKSB7XG5cdCAgY2FzZSAxMTA6IHJldHVybiBcIlxcblwiIC8vICduJyAtPiAnXFxuJ1xuXHQgIGNhc2UgMTE0OiByZXR1cm4gXCJcXHJcIiAvLyAncicgLT4gJ1xccidcblx0ICBjYXNlIDEyMDogcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkSGV4Q2hhcigyKSkgLy8gJ3gnXG5cdCAgY2FzZSAxMTc6IHJldHVybiBjb2RlUG9pbnRUb1N0cmluZyQxKHRoaXMucmVhZENvZGVQb2ludCgpKSAvLyAndSdcblx0ICBjYXNlIDExNjogcmV0dXJuIFwiXFx0XCIgLy8gJ3QnIC0+ICdcXHQnXG5cdCAgY2FzZSA5ODogcmV0dXJuIFwiXFxiXCIgLy8gJ2InIC0+ICdcXGInXG5cdCAgY2FzZSAxMTg6IHJldHVybiBcIlxcdTAwMGJcIiAvLyAndicgLT4gJ1xcdTAwMGInXG5cdCAgY2FzZSAxMDI6IHJldHVybiBcIlxcZlwiIC8vICdmJyAtPiAnXFxmJ1xuXHQgIGNhc2UgMTM6IGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSAxMCkgeyArK3RoaXMucG9zOyB9IC8vICdcXHJcXG4nXG5cdCAgY2FzZSAxMDogLy8gJyBcXG4nXG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zOyArK3RoaXMuY3VyTGluZTsgfVxuXHQgICAgcmV0dXJuIFwiXCJcblx0ICBjYXNlIDU2OlxuXHQgIGNhc2UgNTc6XG5cdCAgICBpZiAoaW5UZW1wbGF0ZSkge1xuXHQgICAgICB2YXIgY29kZVBvcyA9IHRoaXMucG9zIC0gMTtcblxuXHQgICAgICB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihcblx0ICAgICAgICBjb2RlUG9zLFxuXHQgICAgICAgIFwiSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgaW4gdGVtcGxhdGUgc3RyaW5nXCJcblx0ICAgICAgKTtcblxuXHQgICAgICByZXR1cm4gbnVsbFxuXHQgICAgfVxuXHQgIGRlZmF1bHQ6XG5cdCAgICBpZiAoY2ggPj0gNDggJiYgY2ggPD0gNTUpIHtcblx0ICAgICAgdmFyIG9jdGFsU3RyID0gdGhpcy5pbnB1dC5zdWJzdHIodGhpcy5wb3MgLSAxLCAzKS5tYXRjaCgvXlswLTddKy8pWzBdO1xuXHQgICAgICB2YXIgb2N0YWwgPSBwYXJzZUludChvY3RhbFN0ciwgOCk7XG5cdCAgICAgIGlmIChvY3RhbCA+IDI1NSkge1xuXHQgICAgICAgIG9jdGFsU3RyID0gb2N0YWxTdHIuc2xpY2UoMCwgLTEpO1xuXHQgICAgICAgIG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMucG9zICs9IG9jdGFsU3RyLmxlbmd0aCAtIDE7XG5cdCAgICAgIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcblx0ICAgICAgaWYgKChvY3RhbFN0ciAhPT0gXCIwXCIgfHwgY2ggPT09IDU2IHx8IGNoID09PSA1NykgJiYgKHRoaXMuc3RyaWN0IHx8IGluVGVtcGxhdGUpKSB7XG5cdCAgICAgICAgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4oXG5cdCAgICAgICAgICB0aGlzLnBvcyAtIDEgLSBvY3RhbFN0ci5sZW5ndGgsXG5cdCAgICAgICAgICBpblRlbXBsYXRlXG5cdCAgICAgICAgICAgID8gXCJPY3RhbCBsaXRlcmFsIGluIHRlbXBsYXRlIHN0cmluZ1wiXG5cdCAgICAgICAgICAgIDogXCJPY3RhbCBsaXRlcmFsIGluIHN0cmljdCBtb2RlXCJcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG9jdGFsKVxuXHQgICAgfVxuXHQgICAgaWYgKGlzTmV3TGluZShjaCkpIHtcblx0ICAgICAgLy8gVW5pY29kZSBuZXcgbGluZSBjaGFyYWN0ZXJzIGFmdGVyIFxcIGdldCByZW1vdmVkIGZyb20gb3V0cHV0IGluIGJvdGhcblx0ICAgICAgLy8gdGVtcGxhdGUgbGl0ZXJhbHMgYW5kIHN0cmluZ3Ncblx0ICAgICAgcmV0dXJuIFwiXCJcblx0ICAgIH1cblx0ICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKVxuXHQgIH1cblx0fTtcblxuXHQvLyBVc2VkIHRvIHJlYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZXMgKCdcXHgnLCAnXFx1JywgJ1xcVScpLlxuXG5cdHBwJDkucmVhZEhleENoYXIgPSBmdW5jdGlvbihsZW4pIHtcblx0ICB2YXIgY29kZVBvcyA9IHRoaXMucG9zO1xuXHQgIHZhciBuID0gdGhpcy5yZWFkSW50KDE2LCBsZW4pO1xuXHQgIGlmIChuID09PSBudWxsKSB7IHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKGNvZGVQb3MsIFwiQmFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VcIik7IH1cblx0ICByZXR1cm4gblxuXHR9O1xuXG5cdC8vIFJlYWQgYW4gaWRlbnRpZmllciwgYW5kIHJldHVybiBpdCBhcyBhIHN0cmluZy4gU2V0cyBgdGhpcy5jb250YWluc0VzY2Bcblx0Ly8gdG8gd2hldGhlciB0aGUgd29yZCBjb250YWluZWQgYSAnXFx1JyBlc2NhcGUuXG5cdC8vXG5cdC8vIEluY3JlbWVudGFsbHkgYWRkcyBvbmx5IGVzY2FwZWQgY2hhcnMsIGFkZGluZyBvdGhlciBjaHVua3MgYXMtaXNcblx0Ly8gYXMgYSBtaWNyby1vcHRpbWl6YXRpb24uXG5cblx0cHAkOS5yZWFkV29yZDEgPSBmdW5jdGlvbigpIHtcblx0ICB0aGlzLmNvbnRhaW5zRXNjID0gZmFsc2U7XG5cdCAgdmFyIHdvcmQgPSBcIlwiLCBmaXJzdCA9IHRydWUsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcblx0ICB2YXIgYXN0cmFsID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDY7XG5cdCAgd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGgpIHtcblx0ICAgIHZhciBjaCA9IHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKTtcblx0ICAgIGlmIChpc0lkZW50aWZpZXJDaGFyKGNoLCBhc3RyYWwpKSB7XG5cdCAgICAgIHRoaXMucG9zICs9IGNoIDw9IDB4ZmZmZiA/IDEgOiAyO1xuXHQgICAgfSBlbHNlIGlmIChjaCA9PT0gOTIpIHsgLy8gXCJcXFwiXG5cdCAgICAgIHRoaXMuY29udGFpbnNFc2MgPSB0cnVlO1xuXHQgICAgICB3b3JkICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuXHQgICAgICB2YXIgZXNjU3RhcnQgPSB0aGlzLnBvcztcblx0ICAgICAgaWYgKHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKSAhPT0gMTE3KSAvLyBcInVcIlxuXHQgICAgICAgIHsgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4odGhpcy5wb3MsIFwiRXhwZWN0aW5nIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlIFxcXFx1WFhYWFwiKTsgfVxuXHQgICAgICArK3RoaXMucG9zO1xuXHQgICAgICB2YXIgZXNjID0gdGhpcy5yZWFkQ29kZVBvaW50KCk7XG5cdCAgICAgIGlmICghKGZpcnN0ID8gaXNJZGVudGlmaWVyU3RhcnQgOiBpc0lkZW50aWZpZXJDaGFyKShlc2MsIGFzdHJhbCkpXG5cdCAgICAgICAgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihlc2NTdGFydCwgXCJJbnZhbGlkIFVuaWNvZGUgZXNjYXBlXCIpOyB9XG5cdCAgICAgIHdvcmQgKz0gY29kZVBvaW50VG9TdHJpbmckMShlc2MpO1xuXHQgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5wb3M7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBicmVha1xuXHQgICAgfVxuXHQgICAgZmlyc3QgPSBmYWxzZTtcblx0ICB9XG5cdCAgcmV0dXJuIHdvcmQgKyB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKVxuXHR9O1xuXG5cdC8vIFJlYWQgYW4gaWRlbnRpZmllciBvciBrZXl3b3JkIHRva2VuLiBXaWxsIGNoZWNrIGZvciByZXNlcnZlZFxuXHQvLyB3b3JkcyB3aGVuIG5lY2Vzc2FyeS5cblxuXHRwcCQ5LnJlYWRXb3JkID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIHdvcmQgPSB0aGlzLnJlYWRXb3JkMSgpO1xuXHQgIHZhciB0eXBlID0gdHlwZXMubmFtZTtcblx0ICBpZiAodGhpcy5rZXl3b3Jkcy50ZXN0KHdvcmQpKSB7XG5cdCAgICB0eXBlID0ga2V5d29yZHMkMVt3b3JkXTtcblx0ICB9XG5cdCAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgd29yZClcblx0fTtcblxuXHQvLyBBY29ybiBpcyBhIHRpbnksIGZhc3QgSmF2YVNjcmlwdCBwYXJzZXIgd3JpdHRlbiBpbiBKYXZhU2NyaXB0LlxuXG5cdHZhciB2ZXJzaW9uID0gXCI3LjMuMVwiO1xuXG5cdFBhcnNlci5hY29ybiA9IHtcblx0ICBQYXJzZXI6IFBhcnNlcixcblx0ICB2ZXJzaW9uOiB2ZXJzaW9uLFxuXHQgIGRlZmF1bHRPcHRpb25zOiBkZWZhdWx0T3B0aW9ucyxcblx0ICBQb3NpdGlvbjogUG9zaXRpb24sXG5cdCAgU291cmNlTG9jYXRpb246IFNvdXJjZUxvY2F0aW9uLFxuXHQgIGdldExpbmVJbmZvOiBnZXRMaW5lSW5mbyxcblx0ICBOb2RlOiBOb2RlLFxuXHQgIFRva2VuVHlwZTogVG9rZW5UeXBlLFxuXHQgIHRva1R5cGVzOiB0eXBlcyxcblx0ICBrZXl3b3JkVHlwZXM6IGtleXdvcmRzJDEsXG5cdCAgVG9rQ29udGV4dDogVG9rQ29udGV4dCxcblx0ICB0b2tDb250ZXh0czogdHlwZXMkMSxcblx0ICBpc0lkZW50aWZpZXJDaGFyOiBpc0lkZW50aWZpZXJDaGFyLFxuXHQgIGlzSWRlbnRpZmllclN0YXJ0OiBpc0lkZW50aWZpZXJTdGFydCxcblx0ICBUb2tlbjogVG9rZW4sXG5cdCAgaXNOZXdMaW5lOiBpc05ld0xpbmUsXG5cdCAgbGluZUJyZWFrOiBsaW5lQnJlYWssXG5cdCAgbGluZUJyZWFrRzogbGluZUJyZWFrRyxcblx0ICBub25BU0NJSXdoaXRlc3BhY2U6IG5vbkFTQ0lJd2hpdGVzcGFjZVxuXHR9O1xuXG5cdC8vIFRoZSBtYWluIGV4cG9ydGVkIGludGVyZmFjZSAodW5kZXIgYHNlbGYuYWNvcm5gIHdoZW4gaW4gdGhlXG5cdC8vIGJyb3dzZXIpIGlzIGEgYHBhcnNlYCBmdW5jdGlvbiB0aGF0IHRha2VzIGEgY29kZSBzdHJpbmcgYW5kXG5cdC8vIHJldHVybnMgYW4gYWJzdHJhY3Qgc3ludGF4IHRyZWUgYXMgc3BlY2lmaWVkIGJ5IFtNb3ppbGxhIHBhcnNlclxuXHQvLyBBUEldW2FwaV0uXG5cdC8vXG5cdC8vIFthcGldOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1NwaWRlck1vbmtleS9QYXJzZXJfQVBJXG5cblx0ZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICByZXR1cm4gUGFyc2VyLnBhcnNlKGlucHV0LCBvcHRpb25zKVxuXHR9XG5cblx0Ly8gVGhpcyBmdW5jdGlvbiB0cmllcyB0byBwYXJzZSBhIHNpbmdsZSBleHByZXNzaW9uIGF0IGEgZ2l2ZW5cblx0Ly8gb2Zmc2V0IGluIGEgc3RyaW5nLiBVc2VmdWwgZm9yIHBhcnNpbmcgbWl4ZWQtbGFuZ3VhZ2UgZm9ybWF0c1xuXHQvLyB0aGF0IGVtYmVkIEphdmFTY3JpcHQgZXhwcmVzc2lvbnMuXG5cblx0ZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uQXQoaW5wdXQsIHBvcywgb3B0aW9ucykge1xuXHQgIHJldHVybiBQYXJzZXIucGFyc2VFeHByZXNzaW9uQXQoaW5wdXQsIHBvcywgb3B0aW9ucylcblx0fVxuXG5cdGZ1bmN0aW9uIHdhbGsoYXN0LCB7IGVudGVyLCBsZWF2ZSB9KSB7XG5cdFx0cmV0dXJuIHZpc2l0KGFzdCwgbnVsbCwgZW50ZXIsIGxlYXZlKTtcblx0fVxuXG5cdGxldCBzaG91bGRfc2tpcCA9IGZhbHNlO1xuXHRsZXQgc2hvdWxkX3JlbW92ZSA9IGZhbHNlO1xuXHRsZXQgcmVwbGFjZW1lbnQgPSBudWxsO1xuXHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdHNraXA6ICgpID0+IHNob3VsZF9za2lwID0gdHJ1ZSxcblx0XHRyZW1vdmU6ICgpID0+IHNob3VsZF9yZW1vdmUgPSB0cnVlLFxuXHRcdHJlcGxhY2U6IChub2RlKSA9PiByZXBsYWNlbWVudCA9IG5vZGVcblx0fTtcblxuXHRmdW5jdGlvbiByZXBsYWNlKHBhcmVudCwgcHJvcCwgaW5kZXgsIG5vZGUpIHtcblx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcblx0XHRcdFx0cGFyZW50W3Byb3BdW2luZGV4XSA9IG5vZGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwYXJlbnRbcHJvcF0gPSBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZShwYXJlbnQsIHByb3AsIGluZGV4KSB7XG5cdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0aWYgKGluZGV4ICE9PSBudWxsKSB7XG5cdFx0XHRcdHBhcmVudFtwcm9wXS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHBhcmVudFtwcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB2aXNpdChcblx0XHRub2RlLFxuXHRcdHBhcmVudCxcblx0XHRlbnRlcixcblx0XHRsZWF2ZSxcblx0XHRwcm9wLFxuXHRcdGluZGV4XG5cdCkge1xuXHRcdGlmIChub2RlKSB7XG5cdFx0XHRpZiAoZW50ZXIpIHtcblx0XHRcdFx0Y29uc3QgX3Nob3VsZF9za2lwID0gc2hvdWxkX3NraXA7XG5cdFx0XHRcdGNvbnN0IF9zaG91bGRfcmVtb3ZlID0gc2hvdWxkX3JlbW92ZTtcblx0XHRcdFx0Y29uc3QgX3JlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdHNob3VsZF9za2lwID0gZmFsc2U7XG5cdFx0XHRcdHNob3VsZF9yZW1vdmUgPSBmYWxzZTtcblx0XHRcdFx0cmVwbGFjZW1lbnQgPSBudWxsO1xuXG5cdFx0XHRcdGVudGVyLmNhbGwoY29udGV4dCwgbm9kZSwgcGFyZW50LCBwcm9wLCBpbmRleCk7XG5cblx0XHRcdFx0aWYgKHJlcGxhY2VtZW50KSB7XG5cdFx0XHRcdFx0bm9kZSA9IHJlcGxhY2VtZW50O1xuXHRcdFx0XHRcdHJlcGxhY2UocGFyZW50LCBwcm9wLCBpbmRleCwgbm9kZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc2hvdWxkX3JlbW92ZSkge1xuXHRcdFx0XHRcdHJlbW92ZShwYXJlbnQsIHByb3AsIGluZGV4KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHNraXBwZWQgPSBzaG91bGRfc2tpcDtcblx0XHRcdFx0Y29uc3QgcmVtb3ZlZCA9IHNob3VsZF9yZW1vdmU7XG5cblx0XHRcdFx0c2hvdWxkX3NraXAgPSBfc2hvdWxkX3NraXA7XG5cdFx0XHRcdHNob3VsZF9yZW1vdmUgPSBfc2hvdWxkX3JlbW92ZTtcblx0XHRcdFx0cmVwbGFjZW1lbnQgPSBfcmVwbGFjZW1lbnQ7XG5cblx0XHRcdFx0aWYgKHNraXBwZWQpIHJldHVybiBub2RlO1xuXHRcdFx0XHRpZiAocmVtb3ZlZCkgcmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3Qga2V5IGluIG5vZGUpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSAobm9kZSApW2tleV07XG5cblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDAsIGsgPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqICs9IDEsIGsgKz0gMSkge1xuXHRcdFx0XHRcdFx0aWYgKHZhbHVlW2pdICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZVtqXS50eXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXZpc2l0KHZhbHVlW2pdLCBub2RlLCBlbnRlciwgbGVhdmUsIGtleSwgaykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyByZW1vdmVkXG5cdFx0XHRcdFx0XHRcdFx0ai0tO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxzZSBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0dmlzaXQodmFsdWUsIG5vZGUsIGVudGVyLCBsZWF2ZSwga2V5LCBudWxsKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGVhdmUpIHtcblx0XHRcdFx0Y29uc3QgX3JlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdGNvbnN0IF9zaG91bGRfcmVtb3ZlID0gc2hvdWxkX3JlbW92ZTtcblx0XHRcdFx0cmVwbGFjZW1lbnQgPSBudWxsO1xuXHRcdFx0XHRzaG91bGRfcmVtb3ZlID0gZmFsc2U7XG5cblx0XHRcdFx0bGVhdmUuY2FsbChjb250ZXh0LCBub2RlLCBwYXJlbnQsIHByb3AsIGluZGV4KTtcblxuXHRcdFx0XHRpZiAocmVwbGFjZW1lbnQpIHtcblx0XHRcdFx0XHRub2RlID0gcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdFx0cmVwbGFjZShwYXJlbnQsIHByb3AsIGluZGV4LCBub2RlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzaG91bGRfcmVtb3ZlKSB7XG5cdFx0XHRcdFx0cmVtb3ZlKHBhcmVudCwgcHJvcCwgaW5kZXgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcmVtb3ZlZCA9IHNob3VsZF9yZW1vdmU7XG5cblx0XHRcdFx0cmVwbGFjZW1lbnQgPSBfcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdHNob3VsZF9yZW1vdmUgPSBfc2hvdWxkX3JlbW92ZTtcblxuXHRcdFx0XHRpZiAocmVtb3ZlZCkgcmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cblxuXHRmdW5jdGlvbiBpc1JlZmVyZW5jZShub2RlLCBwYXJlbnQpIHtcblx0ICAgIGlmIChub2RlLnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJykge1xuXHQgICAgICAgIHJldHVybiAhbm9kZS5jb21wdXRlZCAmJiBpc1JlZmVyZW5jZShub2RlLm9iamVjdCwgbm9kZSk7XG5cdCAgICB9XG5cdCAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0ICAgICAgICBpZiAoIXBhcmVudClcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuXHQgICAgICAgICAgICAvLyBkaXNyZWdhcmQgYGJhcmAgaW4gYGZvby5iYXJgXG5cdCAgICAgICAgICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOiByZXR1cm4gcGFyZW50LmNvbXB1dGVkIHx8IG5vZGUgPT09IHBhcmVudC5vYmplY3Q7XG5cdCAgICAgICAgICAgIC8vIGRpc3JlZ2FyZCB0aGUgYGZvb2AgaW4gYGNsYXNzIHtmb28oKXt9fWAgYnV0IGtlZXAgaXQgaW4gYGNsYXNzIHtbZm9vXSgpe319YFxuXHQgICAgICAgICAgICBjYXNlICdNZXRob2REZWZpbml0aW9uJzogcmV0dXJuIHBhcmVudC5jb21wdXRlZDtcblx0ICAgICAgICAgICAgLy8gZGlzcmVnYXJkIHRoZSBgZm9vYCBpbiBgY2xhc3Mge2Zvbz1iYXJ9YCBidXQga2VlcCBpdCBpbiBgY2xhc3Mge1tmb29dPWJhcn1gIGFuZCBgY2xhc3Mge2Jhcj1mb299YFxuXHQgICAgICAgICAgICBjYXNlICdGaWVsZERlZmluaXRpb24nOiByZXR1cm4gcGFyZW50LmNvbXB1dGVkIHx8IG5vZGUgPT09IHBhcmVudC52YWx1ZTtcblx0ICAgICAgICAgICAgLy8gZGlzcmVnYXJkIHRoZSBgYmFyYCBpbiBgeyBiYXI6IGZvbyB9YCwgYnV0IGtlZXAgaXQgaW4gYHsgW2Jhcl06IGZvbyB9YFxuXHQgICAgICAgICAgICBjYXNlICdQcm9wZXJ0eSc6IHJldHVybiBwYXJlbnQuY29tcHV0ZWQgfHwgbm9kZSA9PT0gcGFyZW50LnZhbHVlO1xuXHQgICAgICAgICAgICAvLyBkaXNyZWdhcmQgdGhlIGBiYXJgIGluIGBleHBvcnQgeyBmb28gYXMgYmFyIH1gIG9yXG5cdCAgICAgICAgICAgIC8vIHRoZSBmb28gaW4gYGltcG9ydCB7IGZvbyBhcyBiYXIgfWBcblx0ICAgICAgICAgICAgY2FzZSAnRXhwb3J0U3BlY2lmaWVyJzpcblx0ICAgICAgICAgICAgY2FzZSAnSW1wb3J0U3BlY2lmaWVyJzogcmV0dXJuIG5vZGUgPT09IHBhcmVudC5sb2NhbDtcblx0ICAgICAgICAgICAgLy8gZGlzcmVnYXJkIHRoZSBgZm9vYCBpbiBgZm9vOiB3aGlsZSAoLi4uKSB7IC4uLiBicmVhayBmb287IC4uLiBjb250aW51ZSBmb287fWBcblx0ICAgICAgICAgICAgY2FzZSAnTGFiZWxlZFN0YXRlbWVudCc6XG5cdCAgICAgICAgICAgIGNhc2UgJ0JyZWFrU3RhdGVtZW50Jzpcblx0ICAgICAgICAgICAgY2FzZSAnQ29udGludWVTdGF0ZW1lbnQnOiByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFuYWx5emUoZXhwcmVzc2lvbikge1xuXHRcdGNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0XHRsZXQgc2NvcGUgPSBuZXcgU2NvcGUkMShudWxsLCBmYWxzZSk7XG5cblx0XHR3YWxrKGV4cHJlc3Npb24sIHtcblx0XHRcdGVudGVyKG5vZGUsIHBhcmVudCkge1xuXHRcdFx0XHRpZiAobm9kZS50eXBlID09PSAnSW1wb3J0RGVjbGFyYXRpb24nKSB7XG5cdFx0XHRcdFx0bm9kZS5zcGVjaWZpZXJzLmZvckVhY2goKHNwZWNpZmllcikgPT4ge1xuXHRcdFx0XHRcdFx0c2NvcGUuZGVjbGFyYXRpb25zLnNldChzcGVjaWZpZXIubG9jYWwubmFtZSwgc3BlY2lmaWVyKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIGlmICgvKEZ1bmN0aW9uKERlY2xhcmF0aW9ufEV4cHJlc3Npb24pfEFycm93RnVuY3Rpb25FeHByZXNzaW9uKS8udGVzdChub2RlLnR5cGUpKSB7XG5cdFx0XHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKSB7XG5cdFx0XHRcdFx0XHRzY29wZS5kZWNsYXJhdGlvbnMuc2V0KG5vZGUuaWQubmFtZSwgbm9kZSk7XG5cdFx0XHRcdFx0XHRtYXAuc2V0KG5vZGUsIHNjb3BlID0gbmV3IFNjb3BlJDEoc2NvcGUsIGZhbHNlKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG1hcC5zZXQobm9kZSwgc2NvcGUgPSBuZXcgU2NvcGUkMShzY29wZSwgZmFsc2UpKTtcblx0XHRcdFx0XHRcdGlmIChub2RlLnR5cGUgPT09ICdGdW5jdGlvbkV4cHJlc3Npb24nICYmIG5vZGUuaWQpIHNjb3BlLmRlY2xhcmF0aW9ucy5zZXQobm9kZS5pZC5uYW1lLCBub2RlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRub2RlLnBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuXHRcdFx0XHRcdFx0ZXh0cmFjdF9uYW1lcyhwYXJhbSkuZm9yRWFjaChuYW1lID0+IHtcblx0XHRcdFx0XHRcdFx0c2NvcGUuZGVjbGFyYXRpb25zLnNldChuYW1lLCBub2RlKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKC9Gb3IoPzpJbnxPZik/U3RhdGVtZW50Ly50ZXN0KG5vZGUudHlwZSkpIHtcblx0XHRcdFx0XHRtYXAuc2V0KG5vZGUsIHNjb3BlID0gbmV3IFNjb3BlJDEoc2NvcGUsIHRydWUpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0XHRtYXAuc2V0KG5vZGUsIHNjb3BlID0gbmV3IFNjb3BlJDEoc2NvcGUsIHRydWUpKTtcblx0XHRcdFx0fSBlbHNlIGlmICgvKENsYXNzfFZhcmlhYmxlKURlY2xhcmF0aW9uLy50ZXN0KG5vZGUudHlwZSkpIHtcblx0XHRcdFx0XHRzY29wZS5hZGRfZGVjbGFyYXRpb24obm9kZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnQ2F0Y2hDbGF1c2UnKSB7XG5cdFx0XHRcdFx0bWFwLnNldChub2RlLCBzY29wZSA9IG5ldyBTY29wZSQxKHNjb3BlLCB0cnVlKSk7XG5cblx0XHRcdFx0XHRpZiAobm9kZS5wYXJhbSkge1xuXHRcdFx0XHRcdFx0ZXh0cmFjdF9uYW1lcyhub2RlLnBhcmFtKS5mb3JFYWNoKG5hbWUgPT4ge1xuXHRcdFx0XHRcdFx0XHRzY29wZS5kZWNsYXJhdGlvbnMuc2V0KG5hbWUsIG5vZGUucGFyYW0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRsZWF2ZShub2RlKSB7XG5cdFx0XHRcdGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdFx0XHRcdFx0c2NvcGUgPSBzY29wZS5wYXJlbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbnN0IGdsb2JhbHMgPSBuZXcgTWFwKCk7XG5cblx0XHR3YWxrKGV4cHJlc3Npb24sIHtcblx0XHRcdGVudGVyKG5vZGUsIHBhcmVudCkge1xuXHRcdFx0XHRpZiAobWFwLmhhcyhub2RlKSkgc2NvcGUgPSBtYXAuZ2V0KG5vZGUpO1xuXG5cdFx0XHRcdGlmIChub2RlLnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJiBpc1JlZmVyZW5jZShub2RlLCBwYXJlbnQpKSB7XG5cdFx0XHRcdFx0Y29uc3Qgb3duZXIgPSBzY29wZS5maW5kX293bmVyKG5vZGUubmFtZSk7XG5cdFx0XHRcdFx0aWYgKCFvd25lcikgZ2xvYmFscy5zZXQobm9kZS5uYW1lLCBub2RlKTtcblxuXHRcdFx0XHRcdGFkZF9yZWZlcmVuY2Uoc2NvcGUsIG5vZGUubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRsZWF2ZShub2RlKSB7XG5cdFx0XHRcdGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdFx0XHRcdFx0c2NvcGUgPSBzY29wZS5wYXJlbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiB7IG1hcCwgc2NvcGUsIGdsb2JhbHMgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZF9yZWZlcmVuY2Uoc2NvcGUsIG5hbWUpIHtcblx0XHRzY29wZS5yZWZlcmVuY2VzLmFkZChuYW1lKTtcblx0XHRpZiAoc2NvcGUucGFyZW50KSBhZGRfcmVmZXJlbmNlKHNjb3BlLnBhcmVudCwgbmFtZSk7XG5cdH1cblxuXHRjbGFzcyBTY29wZSQxIHtcblx0XHRcblx0XHRcblx0XHRfX2luaXQoKSB7dGhpcy5kZWNsYXJhdGlvbnMgPSBuZXcgTWFwKCk7fVxuXHRcdF9faW5pdDIoKSB7dGhpcy5pbml0aWFsaXNlZF9kZWNsYXJhdGlvbnMgPSBuZXcgU2V0KCk7fVxuXHRcdF9faW5pdDMoKSB7dGhpcy5yZWZlcmVuY2VzID0gbmV3IFNldCgpO31cblxuXHRcdGNvbnN0cnVjdG9yKHBhcmVudCwgYmxvY2spIHtTY29wZSQxLnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKTtTY29wZSQxLnByb3RvdHlwZS5fX2luaXQyLmNhbGwodGhpcyk7U2NvcGUkMS5wcm90b3R5cGUuX19pbml0My5jYWxsKHRoaXMpO1xuXHRcdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0XHR0aGlzLmJsb2NrID0gYmxvY2s7XG5cdFx0fVxuXG5cblx0XHRhZGRfZGVjbGFyYXRpb24obm9kZSkge1xuXHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nKSB7XG5cdFx0XHRcdGlmIChub2RlLmtpbmQgPT09ICd2YXInICYmIHRoaXMuYmxvY2sgJiYgdGhpcy5wYXJlbnQpIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudC5hZGRfZGVjbGFyYXRpb24obm9kZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0XHRcdFx0XHRub2RlLmRlY2xhcmF0aW9ucy5mb3JFYWNoKChkZWNsYXJhdG9yKSA9PiB7XG5cdFx0XHRcdFx0XHRleHRyYWN0X25hbWVzKGRlY2xhcmF0b3IuaWQpLmZvckVhY2gobmFtZSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjbGFyYXRpb25zLnNldChuYW1lLCBub2RlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGRlY2xhcmF0b3IuaW5pdCkgdGhpcy5pbml0aWFsaXNlZF9kZWNsYXJhdGlvbnMuYWRkKG5hbWUpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGVjbGFyYXRpb25zLnNldChub2RlLmlkLm5hbWUsIG5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZpbmRfb3duZXIobmFtZSkge1xuXHRcdFx0aWYgKHRoaXMuZGVjbGFyYXRpb25zLmhhcyhuYW1lKSkgcmV0dXJuIHRoaXM7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuZmluZF9vd25lcihuYW1lKTtcblx0XHR9XG5cblx0XHRoYXMobmFtZSkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0dGhpcy5kZWNsYXJhdGlvbnMuaGFzKG5hbWUpIHx8ICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5oYXMobmFtZSkpXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGV4dHJhY3RfbmFtZXMocGFyYW0pIHtcblx0XHRyZXR1cm4gZXh0cmFjdF9pZGVudGlmaWVycyhwYXJhbSkubWFwKG5vZGUgPT4gbm9kZS5uYW1lKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dHJhY3RfaWRlbnRpZmllcnMocGFyYW0pIHtcblx0XHRjb25zdCBub2RlcyA9IFtdO1xuXHRcdGV4dHJhY3RvcnNbcGFyYW0udHlwZV0gJiYgZXh0cmFjdG9yc1twYXJhbS50eXBlXShub2RlcywgcGFyYW0pO1xuXHRcdHJldHVybiBub2Rlcztcblx0fVxuXG5cdGNvbnN0IGV4dHJhY3RvcnMgPSB7XG5cdFx0SWRlbnRpZmllcihub2RlcywgcGFyYW0pIHtcblx0XHRcdG5vZGVzLnB1c2gocGFyYW0pO1xuXHRcdH0sXG5cblx0XHRNZW1iZXJFeHByZXNzaW9uKG5vZGVzLCBwYXJhbSkge1xuXHRcdFx0bGV0IG9iamVjdCA9IHBhcmFtO1xuXHRcdFx0d2hpbGUgKG9iamVjdC50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIG9iamVjdCA9IG9iamVjdC5vYmplY3Q7XG5cdFx0XHRub2Rlcy5wdXNoKG9iamVjdCk7XG5cdFx0fSxcblxuXHRcdE9iamVjdFBhdHRlcm4obm9kZXMsIHBhcmFtKSB7XG5cdFx0XHRwYXJhbS5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3ApID0+IHtcblx0XHRcdFx0aWYgKHByb3AudHlwZSA9PT0gJ1Jlc3RFbGVtZW50Jykge1xuXHRcdFx0XHRcdG5vZGVzLnB1c2gocHJvcC5hcmd1bWVudCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZXh0cmFjdG9yc1twcm9wLnZhbHVlLnR5cGVdKG5vZGVzLCBwcm9wLnZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdEFycmF5UGF0dGVybihub2RlcywgcGFyYW0pIHtcblx0XHRcdHBhcmFtLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0aWYgKGVsZW1lbnQpIGV4dHJhY3RvcnNbZWxlbWVudC50eXBlXShub2RlcywgZWxlbWVudCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0UmVzdEVsZW1lbnQobm9kZXMsIHBhcmFtKSB7XG5cdFx0XHRleHRyYWN0b3JzW3BhcmFtLmFyZ3VtZW50LnR5cGVdKG5vZGVzLCBwYXJhbS5hcmd1bWVudCk7XG5cdFx0fSxcblxuXHRcdEFzc2lnbm1lbnRQYXR0ZXJuKG5vZGVzLCBwYXJhbSkge1xuXHRcdFx0ZXh0cmFjdG9yc1twYXJhbS5sZWZ0LnR5cGVdKG5vZGVzLCBwYXJhbS5sZWZ0KTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89Jztcblx0ZnVuY3Rpb24gZW5jb2RlKGRlY29kZWQpIHtcblx0ICAgIHZhciBzb3VyY2VGaWxlSW5kZXggPSAwOyAvLyBzZWNvbmQgZmllbGRcblx0ICAgIHZhciBzb3VyY2VDb2RlTGluZSA9IDA7IC8vIHRoaXJkIGZpZWxkXG5cdCAgICB2YXIgc291cmNlQ29kZUNvbHVtbiA9IDA7IC8vIGZvdXJ0aCBmaWVsZFxuXHQgICAgdmFyIG5hbWVJbmRleCA9IDA7IC8vIGZpZnRoIGZpZWxkXG5cdCAgICB2YXIgbWFwcGluZ3MgPSAnJztcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBsaW5lID0gZGVjb2RlZFtpXTtcblx0ICAgICAgICBpZiAoaSA+IDApXG5cdCAgICAgICAgICAgIG1hcHBpbmdzICs9ICc7Jztcblx0ICAgICAgICBpZiAobGluZS5sZW5ndGggPT09IDApXG5cdCAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIHZhciBnZW5lcmF0ZWRDb2RlQ29sdW1uID0gMDsgLy8gZmlyc3QgZmllbGRcblx0ICAgICAgICB2YXIgbGluZU1hcHBpbmdzID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsaW5lXzEgPSBsaW5lOyBfaSA8IGxpbmVfMS5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgdmFyIHNlZ21lbnQgPSBsaW5lXzFbX2ldO1xuXHQgICAgICAgICAgICB2YXIgc2VnbWVudE1hcHBpbmdzID0gZW5jb2RlSW50ZWdlcihzZWdtZW50WzBdIC0gZ2VuZXJhdGVkQ29kZUNvbHVtbik7XG5cdCAgICAgICAgICAgIGdlbmVyYXRlZENvZGVDb2x1bW4gPSBzZWdtZW50WzBdO1xuXHQgICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgICAgICAgICBzZWdtZW50TWFwcGluZ3MgKz1cblx0ICAgICAgICAgICAgICAgICAgICBlbmNvZGVJbnRlZ2VyKHNlZ21lbnRbMV0gLSBzb3VyY2VGaWxlSW5kZXgpICtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlSW50ZWdlcihzZWdtZW50WzJdIC0gc291cmNlQ29kZUxpbmUpICtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlSW50ZWdlcihzZWdtZW50WzNdIC0gc291cmNlQ29kZUNvbHVtbik7XG5cdCAgICAgICAgICAgICAgICBzb3VyY2VGaWxlSW5kZXggPSBzZWdtZW50WzFdO1xuXHQgICAgICAgICAgICAgICAgc291cmNlQ29kZUxpbmUgPSBzZWdtZW50WzJdO1xuXHQgICAgICAgICAgICAgICAgc291cmNlQ29kZUNvbHVtbiA9IHNlZ21lbnRbM107XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSA1KSB7XG5cdCAgICAgICAgICAgICAgICBzZWdtZW50TWFwcGluZ3MgKz0gZW5jb2RlSW50ZWdlcihzZWdtZW50WzRdIC0gbmFtZUluZGV4KTtcblx0ICAgICAgICAgICAgICAgIG5hbWVJbmRleCA9IHNlZ21lbnRbNF07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbGluZU1hcHBpbmdzLnB1c2goc2VnbWVudE1hcHBpbmdzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbWFwcGluZ3MgKz0gbGluZU1hcHBpbmdzLmpvaW4oJywnKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtYXBwaW5ncztcblx0fVxuXHRmdW5jdGlvbiBlbmNvZGVJbnRlZ2VyKG51bSkge1xuXHQgICAgdmFyIHJlc3VsdCA9ICcnO1xuXHQgICAgbnVtID0gbnVtIDwgMCA/ICgtbnVtIDw8IDEpIHwgMSA6IG51bSA8PCAxO1xuXHQgICAgZG8ge1xuXHQgICAgICAgIHZhciBjbGFtcGVkID0gbnVtICYgMzE7XG5cdCAgICAgICAgbnVtID4+Pj0gNTtcblx0ICAgICAgICBpZiAobnVtID4gMCkge1xuXHQgICAgICAgICAgICBjbGFtcGVkIHw9IDMyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXN1bHQgKz0gY2hhcnNbY2xhbXBlZF07XG5cdCAgICB9IHdoaWxlIChudW0gPiAwKTtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBhbiBJRCB0aGF0IGlzLCB0byBhbGwgaW50ZW50cyBhbmQgcHVycG9zZXMsIHVuaXF1ZVxuXHRjb25zdCBpZCA9IChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTIwKSkudG9TdHJpbmcoMzYpO1xuXHRjb25zdCByZSA9IG5ldyBSZWdFeHAoYF8ke2lkfV8oPzooXFxcXGQrKXwoQVQpfChIQVNIKSlfKFxcXFx3Kyk/YCwgJ2cnKTtcblxuXHRjb25zdCBnZXRfY29tbWVudF9oYW5kbGVycyA9IChjb21tZW50cywgcmF3KSA9PiAoe1xuXG5cdFx0Ly8gcGFzcyB0byBhY29ybiBvcHRpb25zXG5cdFx0b25Db21tZW50OiAoYmxvY2ssIHZhbHVlLCBzdGFydCwgZW5kKSA9PiB7XG5cdFx0XHRpZiAoYmxvY2sgJiYgL1xcbi8udGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0bGV0IGEgPSBzdGFydDtcblx0XHRcdFx0d2hpbGUgKGEgPiAwICYmIHJhd1thIC0gMV0gIT09ICdcXG4nKSBhIC09IDE7XG5cblx0XHRcdFx0bGV0IGIgPSBhO1xuXHRcdFx0XHR3aGlsZSAoL1sgXFx0XS8udGVzdChyYXdbYl0pKSBiICs9IDE7XG5cblx0XHRcdFx0Y29uc3QgaW5kZW50YXRpb24gPSByYXcuc2xpY2UoYSwgYik7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKGBeJHtpbmRlbnRhdGlvbn1gLCAnZ20nKSwgJycpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21tZW50cy5wdXNoKHsgdHlwZTogYmxvY2sgPyAnQmxvY2snIDogJ0xpbmUnLCB2YWx1ZSwgc3RhcnQsIGVuZCB9KTtcblx0XHR9LFxuXG5cdFx0Ly8gcGFzcyB0byBlc3RyZWUtd2Fsa2VyIG9wdGlvbnNcblx0XHRlbnRlcihub2RlKSB7XG5cdFx0XHRsZXQgY29tbWVudDtcblxuXHRcdFx0d2hpbGUgKGNvbW1lbnRzWzBdICYmIGNvbW1lbnRzWzBdLnN0YXJ0IDwgKG5vZGUgKS5zdGFydCkge1xuXHRcdFx0XHRjb21tZW50ID0gY29tbWVudHMuc2hpZnQoKTtcblxuXHRcdFx0XHRjb21tZW50LnZhbHVlID0gY29tbWVudC52YWx1ZS5yZXBsYWNlKHJlLCAobWF0Y2gsIGlkLCBhdCwgaGFzaCwgdmFsdWUpID0+IHtcblx0XHRcdFx0XHRpZiAoaGFzaCkgcmV0dXJuIGAjJHt2YWx1ZX1gO1xuXHRcdFx0XHRcdGlmIChhdCkgcmV0dXJuIGBAJHt2YWx1ZX1gO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRjb25zdCBuZXh0ID0gY29tbWVudHNbMF0gfHwgbm9kZTtcblx0XHRcdFx0KGNvbW1lbnQgKS5oYXNfdHJhaWxpbmdfbmV3bGluZSA9IChcblx0XHRcdFx0XHRjb21tZW50LnR5cGUgPT09ICdMaW5lJyB8fFxuXHRcdFx0XHRcdC9cXG4vLnRlc3QocmF3LnNsaWNlKGNvbW1lbnQuZW5kLCAobmV4dCApLnN0YXJ0KSlcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQobm9kZS5sZWFkaW5nQ29tbWVudHMgfHwgKG5vZGUubGVhZGluZ0NvbW1lbnRzID0gW10pKS5wdXNoKGNvbW1lbnQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bGVhdmUobm9kZSkge1xuXHRcdFx0aWYgKGNvbW1lbnRzWzBdKSB7XG5cdFx0XHRcdGNvbnN0IHNsaWNlID0gcmF3LnNsaWNlKChub2RlICkuZW5kLCBjb21tZW50c1swXS5zdGFydCk7XG5cblx0XHRcdFx0aWYgKC9eWywpIFxcdF0qJC8udGVzdChzbGljZSkpIHtcblx0XHRcdFx0XHRub2RlLnRyYWlsaW5nQ29tbWVudHMgPSBbY29tbWVudHMuc2hpZnQoKV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0fSk7XG5cblx0ZnVuY3Rpb24gaGFuZGxlKG5vZGUsIHN0YXRlKSB7XG5cdFx0Y29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW25vZGUudHlwZV07XG5cblx0XHRpZiAoIWhhbmRsZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgTm90IGltcGxlbWVudGVkICR7bm9kZS50eXBlfWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3VsdCA9IGhhbmRsZXIobm9kZSwgc3RhdGUpO1xuXG5cdFx0aWYgKG5vZGUubGVhZGluZ0NvbW1lbnRzKSB7XG5cdFx0XHRyZXN1bHQudW5zaGlmdChjKG5vZGUubGVhZGluZ0NvbW1lbnRzLm1hcChjb21tZW50ID0+IGNvbW1lbnQudHlwZSA9PT0gJ0Jsb2NrJ1xuXHRcdFx0XHQ/IGAvKiR7Y29tbWVudC52YWx1ZX0qLyR7KGNvbW1lbnQgKS5oYXNfdHJhaWxpbmdfbmV3bGluZSA/IGBcXG4ke3N0YXRlLmluZGVudH1gIDogYCBgfWBcblx0XHRcdFx0OiBgLy8ke2NvbW1lbnQudmFsdWV9JHsoY29tbWVudCApLmhhc190cmFpbGluZ19uZXdsaW5lID8gYFxcbiR7c3RhdGUuaW5kZW50fWAgOiBgIGB9YCkuam9pbihgYCkpKTtcblx0XHR9XG5cblx0XHRpZiAobm9kZS50cmFpbGluZ0NvbW1lbnRzKSB7XG5cdFx0XHRzdGF0ZS5jb21tZW50cy5wdXNoKG5vZGUudHJhaWxpbmdDb21tZW50c1swXSk7IC8vIHRoZXJlIGlzIG9ubHkgZXZlciBvbmVcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gYyhjb250ZW50LCBub2RlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbnRlbnQsXG5cdFx0XHRsb2M6IG5vZGUgJiYgbm9kZS5sb2MsXG5cdFx0XHRoYXNfbmV3bGluZTogL1xcbi8udGVzdChjb250ZW50KVxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBPUEVSQVRPUl9QUkVDRURFTkNFID0ge1xuXHRcdCd8fCc6IDIsXG5cdFx0JyYmJzogMyxcblx0XHQnPz8nOiA0LFxuXHRcdCd8JzogNSxcblx0XHQnXic6IDYsXG5cdFx0JyYnOiA3LFxuXHRcdCc9PSc6IDgsXG5cdFx0JyE9JzogOCxcblx0XHQnPT09JzogOCxcblx0XHQnIT09JzogOCxcblx0XHQnPCc6IDksXG5cdFx0Jz4nOiA5LFxuXHRcdCc8PSc6IDksXG5cdFx0Jz49JzogOSxcblx0XHRpbjogOSxcblx0XHRpbnN0YW5jZW9mOiA5LFxuXHRcdCc8PCc6IDEwLFxuXHRcdCc+Pic6IDEwLFxuXHRcdCc+Pj4nOiAxMCxcblx0XHQnKyc6IDExLFxuXHRcdCctJzogMTEsXG5cdFx0JyonOiAxMixcblx0XHQnJSc6IDEyLFxuXHRcdCcvJzogMTIsXG5cdFx0JyoqJzogMTMsXG5cdH07XG5cblx0Y29uc3QgRVhQUkVTU0lPTlNfUFJFQ0VERU5DRSA9IHtcblx0XHRBcnJheUV4cHJlc3Npb246IDIwLFxuXHRcdFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjogMjAsXG5cdFx0VGhpc0V4cHJlc3Npb246IDIwLFxuXHRcdElkZW50aWZpZXI6IDIwLFxuXHRcdExpdGVyYWw6IDE4LFxuXHRcdFRlbXBsYXRlTGl0ZXJhbDogMjAsXG5cdFx0U3VwZXI6IDIwLFxuXHRcdFNlcXVlbmNlRXhwcmVzc2lvbjogMjAsXG5cdFx0TWVtYmVyRXhwcmVzc2lvbjogMTksXG5cdFx0Q2FsbEV4cHJlc3Npb246IDE5LFxuXHRcdE5ld0V4cHJlc3Npb246IDE5LFxuXHRcdEF3YWl0RXhwcmVzc2lvbjogMTcsXG5cdFx0Q2xhc3NFeHByZXNzaW9uOiAxNyxcblx0XHRGdW5jdGlvbkV4cHJlc3Npb246IDE3LFxuXHRcdE9iamVjdEV4cHJlc3Npb246IDE3LFxuXHRcdFVwZGF0ZUV4cHJlc3Npb246IDE2LFxuXHRcdFVuYXJ5RXhwcmVzc2lvbjogMTUsXG5cdFx0QmluYXJ5RXhwcmVzc2lvbjogMTQsXG5cdFx0TG9naWNhbEV4cHJlc3Npb246IDEzLFxuXHRcdENvbmRpdGlvbmFsRXhwcmVzc2lvbjogNCxcblx0XHRBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogMyxcblx0XHRBc3NpZ25tZW50RXhwcmVzc2lvbjogMyxcblx0XHRZaWVsZEV4cHJlc3Npb246IDIsXG5cdFx0UmVzdEVsZW1lbnQ6IDFcblx0fTtcblxuXHRmdW5jdGlvbiBuZWVkc19wYXJlbnMobm9kZSwgcGFyZW50LCBpc19yaWdodCkge1xuXHRcdGNvbnN0IHByZWNlZGVuY2UgPSBFWFBSRVNTSU9OU19QUkVDRURFTkNFW25vZGUudHlwZV07XG5cdFx0Y29uc3QgcGFyZW50X3ByZWNlZGVuY2UgPSBFWFBSRVNTSU9OU19QUkVDRURFTkNFW3BhcmVudC50eXBlXTtcblxuXHRcdGlmIChwcmVjZWRlbmNlICE9PSBwYXJlbnRfcHJlY2VkZW5jZSkge1xuXHRcdFx0Ly8gRGlmZmVyZW50IG5vZGUgdHlwZXNcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdCghaXNfcmlnaHQgJiZcblx0XHRcdFx0XHRwcmVjZWRlbmNlID09PSAxNSAmJlxuXHRcdFx0XHRcdHBhcmVudF9wcmVjZWRlbmNlID09PSAxNCAmJlxuXHRcdFx0XHRcdHBhcmVudC5vcGVyYXRvciA9PT0gJyoqJykgfHxcblx0XHRcdFx0cHJlY2VkZW5jZSA8IHBhcmVudF9wcmVjZWRlbmNlXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGlmIChwcmVjZWRlbmNlICE9PSAxMyAmJiBwcmVjZWRlbmNlICE9PSAxNCkge1xuXHRcdFx0Ly8gTm90IGEgYExvZ2ljYWxFeHByZXNzaW9uYCBvciBgQmluYXJ5RXhwcmVzc2lvbmBcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoKG5vZGUgKS5vcGVyYXRvciA9PT0gJyoqJyAmJiBwYXJlbnQub3BlcmF0b3IgPT09ICcqKicpIHtcblx0XHRcdC8vIEV4cG9uZW50aWF0aW9uIG9wZXJhdG9yIGhhcyByaWdodC10by1sZWZ0IGFzc29jaWF0aXZpdHlcblx0XHRcdHJldHVybiAhaXNfcmlnaHQ7XG5cdFx0fVxuXG5cdFx0aWYgKGlzX3JpZ2h0KSB7XG5cdFx0XHQvLyBQYXJlbnRoZXNpcyBhcmUgdXNlZCBpZiBib3RoIG9wZXJhdG9ycyBoYXZlIHRoZSBzYW1lIHByZWNlZGVuY2Vcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdE9QRVJBVE9SX1BSRUNFREVOQ0VbKG5vZGUgKS5vcGVyYXRvcl0gPD1cblx0XHRcdFx0T1BFUkFUT1JfUFJFQ0VERU5DRVtwYXJlbnQub3BlcmF0b3JdXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiAoXG5cdFx0XHRPUEVSQVRPUl9QUkVDRURFTkNFWyhub2RlICkub3BlcmF0b3JdIDxcblx0XHRcdE9QRVJBVE9SX1BSRUNFREVOQ0VbcGFyZW50Lm9wZXJhdG9yXVxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYXNfY2FsbF9leHByZXNzaW9uKG5vZGUpIHtcblx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0aWYgKG5vZGUudHlwZVswXSA9PT0gJ0NhbGxFeHByZXNzaW9uJykge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0bm9kZSA9IG5vZGUub2JqZWN0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGhhc19uZXdsaW5lID0gKGNodW5rcykgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRpZiAoY2h1bmtzW2ldLmhhc19uZXdsaW5lKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdGNvbnN0IGdldF9sZW5ndGggPSAoY2h1bmtzKSA9PiB7XG5cdFx0bGV0IHRvdGFsID0gMDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0dG90YWwgKz0gY2h1bmtzW2ldLmNvbnRlbnQubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gdG90YWw7XG5cdH07XG5cblx0Y29uc3Qgc3VtID0gKGEsIGIpID0+IGEgKyBiO1xuXG5cdGNvbnN0IGpvaW4gPSAobm9kZXMsIHNlcGFyYXRvcikgPT4ge1xuXHRcdGlmIChub2Rlcy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblx0XHRjb25zdCBqb2luZWQgPSBbLi4ubm9kZXNbMF1dO1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGpvaW5lZC5wdXNoKHNlcGFyYXRvciwgLi4ubm9kZXNbaV0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIGpvaW5lZDtcblx0fTtcblxuXHRjb25zdCBzY29wZWQgPSAoZm4pID0+IHtcblx0XHRyZXR1cm4gKG5vZGUsIHN0YXRlKSA9PiB7XG5cdFx0XHRyZXR1cm4gZm4obm9kZSwge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0c2NvcGU6IHN0YXRlLnNjb3BlX21hcC5nZXQobm9kZSlcblx0XHRcdH0pO1xuXHRcdH07XG5cdH07XG5cblx0Y29uc3QgZGVjb25mbGljdCA9IChuYW1lLCBuYW1lcykgPT4ge1xuXHRcdGNvbnN0IG9yaWdpbmFsID0gbmFtZTtcblx0XHRsZXQgaSA9IDE7XG5cblx0XHR3aGlsZSAobmFtZXMuaGFzKG5hbWUpKSB7XG5cdFx0XHRuYW1lID0gYCR7b3JpZ2luYWx9JCR7aSsrfWA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5hbWU7XG5cdH07XG5cblx0Y29uc3QgaGFuZGxlX2JvZHkgPSAobm9kZXMsIHN0YXRlKSA9PiB7XG5cdFx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0XHRjb25zdCBib2R5ID0gbm9kZXMubWFwKHN0YXRlbWVudCA9PiB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBoYW5kbGUoc3RhdGVtZW50LCB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRpbmRlbnQ6IHN0YXRlLmluZGVudFxuXHRcdFx0fSk7XG5cblx0XHRcdGxldCBhZGRfbmV3bGluZSA9IGZhbHNlO1xuXG5cdFx0XHR3aGlsZSAoc3RhdGUuY29tbWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnN0IGNvbW1lbnQgPSBzdGF0ZS5jb21tZW50cy5zaGlmdCgpO1xuXHRcdFx0XHRjb25zdCBwcmVmaXggPSBhZGRfbmV3bGluZSA/IGBcXG4ke3N0YXRlLmluZGVudH1gIDogYCBgO1xuXG5cdFx0XHRcdGNodW5rcy5wdXNoKGMoY29tbWVudC50eXBlID09PSAnQmxvY2snXG5cdFx0XHRcdFx0PyBgJHtwcmVmaXh9Lyoke2NvbW1lbnQudmFsdWV9Ki9gXG5cdFx0XHRcdFx0OiBgJHtwcmVmaXh9Ly8ke2NvbW1lbnQudmFsdWV9YCkpO1xuXG5cdFx0XHRcdGFkZF9uZXdsaW5lID0gKGNvbW1lbnQudHlwZSA9PT0gJ0xpbmUnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9KTtcblxuXHRcdGxldCBuZWVkZWRfcGFkZGluZyA9IGZhbHNlO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBib2R5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRjb25zdCBuZWVkc19wYWRkaW5nID0gaGFzX25ld2xpbmUoYm9keVtpXSk7XG5cblx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKG5lZWRzX3BhZGRpbmcgfHwgbmVlZGVkX3BhZGRpbmcgPyBgXFxuXFxuJHtzdGF0ZS5pbmRlbnR9YCA6IGBcXG4ke3N0YXRlLmluZGVudH1gKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0Li4uYm9keVtpXVxuXHRcdFx0KTtcblxuXHRcdFx0bmVlZGVkX3BhZGRpbmcgPSBuZWVkc19wYWRkaW5nO1xuXHRcdH1cblxuXHRcdHJldHVybiBjaHVua3M7XG5cdH07XG5cblx0Y29uc3QgaGFuZGxlX3Zhcl9kZWNsYXJhdGlvbiA9IChub2RlLCBzdGF0ZSkgPT4ge1xuXHRcdGNvbnN0IGNodW5rcyA9IFtjKGAke25vZGUua2luZH0gYCldO1xuXG5cdFx0Y29uc3QgZGVjbGFyYXRvcnMgPSBub2RlLmRlY2xhcmF0aW9ucy5tYXAoZCA9PiBoYW5kbGUoZCwge1xuXHRcdFx0Li4uc3RhdGUsXG5cdFx0XHRpbmRlbnQ6IHN0YXRlLmluZGVudCArIChub2RlLmRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgPyAnJyA6ICdcXHQnKVxuXHRcdH0pKTtcblxuXHRcdGNvbnN0IG11bHRpcGxlX2xpbmVzID0gKFxuXHRcdFx0ZGVjbGFyYXRvcnMuc29tZShoYXNfbmV3bGluZSkgfHxcblx0XHRcdChkZWNsYXJhdG9ycy5tYXAoZ2V0X2xlbmd0aCkucmVkdWNlKHN1bSwgMCkgKyAoc3RhdGUuaW5kZW50Lmxlbmd0aCArIGRlY2xhcmF0b3JzLmxlbmd0aCAtIDEpICogMikgPiA4MFxuXHRcdCk7XG5cblx0XHRjb25zdCBzZXBhcmF0b3IgPSBjKG11bHRpcGxlX2xpbmVzID8gYCxcXG4ke3N0YXRlLmluZGVudH1cXHRgIDogJywgJyk7XG5cblx0XHRpZiAobXVsdGlwbGVfbGluZXMpIHtcblx0XHRcdGNodW5rcy5wdXNoKC4uLmpvaW4oZGVjbGFyYXRvcnMsIHNlcGFyYXRvcikpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0Li4uam9pbihkZWNsYXJhdG9ycywgc2VwYXJhdG9yKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2h1bmtzO1xuXHR9O1xuXG5cdGNvbnN0IGhhbmRsZXJzID0ge1xuXHRcdFByb2dyYW0obm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBoYW5kbGVfYm9keShub2RlLmJvZHksIHN0YXRlKTtcblx0XHR9LFxuXG5cdFx0QmxvY2tTdGF0ZW1lbnQ6IHNjb3BlZCgobm9kZSwgc3RhdGUpID0+IHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdGMoYHtcXG4ke3N0YXRlLmluZGVudH1cXHRgKSxcblx0XHRcdFx0Li4uaGFuZGxlX2JvZHkobm9kZS5ib2R5LCB7IC4uLnN0YXRlLCBpbmRlbnQ6IHN0YXRlLmluZGVudCArICdcXHQnIH0pLFxuXHRcdFx0XHRjKGBcXG4ke3N0YXRlLmluZGVudH19YClcblx0XHRcdF07XG5cdFx0fSksXG5cblx0XHRFbXB0eVN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH0sXG5cblx0XHRQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIGhhbmRsZShub2RlLmV4cHJlc3Npb24sIHN0YXRlKTtcblx0XHR9LFxuXG5cdFx0RXhwcmVzc2lvblN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRub2RlLmV4cHJlc3Npb24udHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyAmJlxuXHRcdFx0XHRub2RlLmV4cHJlc3Npb24ubGVmdC50eXBlID09PSAnT2JqZWN0UGF0dGVybidcblx0XHRcdCkge1xuXHRcdFx0XHQvLyBpcyBhbiBBc3NpZ25tZW50RXhwcmVzc2lvbiB0byBhbiBPYmplY3RQYXR0ZXJuXG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLmV4cHJlc3Npb24sIHN0YXRlKSxcblx0XHRcdFx0XHRjKCcpOycpXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmV4cHJlc3Npb24sIHN0YXRlKSxcblx0XHRcdFx0YygnOycpXG5cdFx0XHRdO1xuXHRcdH0sXG5cblx0XHRJZlN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW1xuXHRcdFx0XHRjKCdpZiAoJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLnRlc3QsIHN0YXRlKSxcblx0XHRcdFx0YygnKSAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuY29uc2VxdWVudCwgc3RhdGUpXG5cdFx0XHRdO1xuXG5cdFx0XHRpZiAobm9kZS5hbHRlcm5hdGUpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YygnIGVsc2UgJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYWx0ZXJuYXRlLCBzdGF0ZSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0TGFiZWxlZFN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUubGFiZWwsIHN0YXRlKSxcblx0XHRcdFx0YygnOiAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYm9keSwgc3RhdGUpXG5cdFx0XHRdO1xuXHRcdH0sXG5cblx0XHRCcmVha1N0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIG5vZGUubGFiZWxcblx0XHRcdFx0PyBbYygnYnJlYWsgJyksIC4uLmhhbmRsZShub2RlLmxhYmVsLCBzdGF0ZSksIGMoJzsnKV1cblx0XHRcdFx0OiBbYygnYnJlYWs7JyldO1xuXHRcdH0sXG5cblx0XHRDb250aW51ZVN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIG5vZGUubGFiZWxcblx0XHRcdFx0PyBbYygnY29udGludWUgJyksIC4uLmhhbmRsZShub2RlLmxhYmVsLCBzdGF0ZSksIGMoJzsnKV1cblx0XHRcdFx0OiBbYygnY29udGludWU7JyldO1xuXHRcdH0sXG5cblx0XHRXaXRoU3RhdGVtZW50KG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRjKCd3aXRoICgnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUub2JqZWN0LCBzdGF0ZSksXG5cdFx0XHRcdGMoJykgJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmJvZHksIHN0YXRlKVxuXHRcdFx0XTtcblx0XHR9LFxuXG5cdFx0U3dpdGNoU3RhdGVtZW50KG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbXG5cdFx0XHRcdGMoJ3N3aXRjaCAoJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmRpc2NyaW1pbmFudCwgc3RhdGUpLFxuXHRcdFx0XHRjKCcpIHsnKVxuXHRcdFx0XTtcblxuXHRcdFx0bm9kZS5jYXNlcy5mb3JFYWNoKGJsb2NrID0+IHtcblx0XHRcdFx0aWYgKGJsb2NrLnRlc3QpIHtcblx0XHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRcdGMoYFxcbiR7c3RhdGUuaW5kZW50fVxcdGNhc2UgYCksXG5cdFx0XHRcdFx0XHQuLi5oYW5kbGUoYmxvY2sudGVzdCwgeyAuLi5zdGF0ZSwgaW5kZW50OiBgJHtzdGF0ZS5pbmRlbnR9XFx0YCB9KSxcblx0XHRcdFx0XHRcdGMoJzonKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2h1bmtzLnB1c2goYyhgXFxuJHtzdGF0ZS5pbmRlbnR9XFx0ZGVmYXVsdDpgKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRibG9jay5jb25zZXF1ZW50LmZvckVhY2goc3RhdGVtZW50ID0+IHtcblx0XHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRcdGMoYFxcbiR7c3RhdGUuaW5kZW50fVxcdFxcdGApLFxuXHRcdFx0XHRcdFx0Li4uaGFuZGxlKHN0YXRlbWVudCwgeyAuLi5zdGF0ZSwgaW5kZW50OiBgJHtzdGF0ZS5pbmRlbnR9XFx0XFx0YCB9KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdGNodW5rcy5wdXNoKGMoYFxcbiR7c3RhdGUuaW5kZW50fX1gKSk7XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdFJldHVyblN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0aWYgKG5vZGUuYXJndW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRjKCdyZXR1cm4gJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYXJndW1lbnQsIHN0YXRlKSxcblx0XHRcdFx0XHRjKCc7Jylcblx0XHRcdFx0XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBbYygncmV0dXJuOycpXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0VGhyb3dTdGF0ZW1lbnQobm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdGMoJ3Rocm93ICcpLFxuXHRcdFx0XHQuLi5oYW5kbGUobm9kZS5hcmd1bWVudCwgc3RhdGUpLFxuXHRcdFx0XHRjKCc7Jylcblx0XHRcdF07XG5cdFx0fSxcblxuXHRcdFRyeVN0YXRlbWVudChub2RlLCBzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW1xuXHRcdFx0XHRjKCd0cnkgJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmJsb2NrLCBzdGF0ZSlcblx0XHRcdF07XG5cblx0XHRcdGlmIChub2RlLmhhbmRsZXIpIHtcblx0XHRcdFx0aWYgKG5vZGUuaGFuZGxlci5wYXJhbSkge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdFx0YygnIGNhdGNoKCcpLFxuXHRcdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuaGFuZGxlci5wYXJhbSwgc3RhdGUpLFxuXHRcdFx0XHRcdFx0YygnKSAnKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2h1bmtzLnB1c2goYygnIGNhdGNoICcpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLmhhbmRsZXIuYm9keSwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUuZmluYWxpemVyKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKGMoJyBmaW5hbGx5ICcpLCAuLi5oYW5kbGUobm9kZS5maW5hbGl6ZXIsIHN0YXRlKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdFdoaWxlU3RhdGVtZW50KG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRjKCd3aGlsZSAoJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLnRlc3QsIHN0YXRlKSxcblx0XHRcdFx0YygnKSAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYm9keSwgc3RhdGUpXG5cdFx0XHRdO1xuXHRcdH0sXG5cblx0XHREb1doaWxlU3RhdGVtZW50KG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRjKCdkbyAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYm9keSwgc3RhdGUpLFxuXHRcdFx0XHRjKCcgd2hpbGUgKCcpLFxuXHRcdFx0XHQuLi5oYW5kbGUobm9kZS50ZXN0LCBzdGF0ZSksXG5cdFx0XHRcdGMoJyk7Jylcblx0XHRcdF07XG5cdFx0fSxcblxuXHRcdEZvclN0YXRlbWVudDogc2NvcGVkKChub2RlLCBzdGF0ZSkgPT4ge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW2MoJ2ZvciAoJyldO1xuXG5cdFx0XHRpZiAobm9kZS5pbml0KSB7XG5cdFx0XHRcdGlmICgobm9kZS5pbml0ICkudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nKSB7XG5cdFx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlX3Zhcl9kZWNsYXJhdGlvbihub2RlLmluaXQgLCBzdGF0ZSkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLmluaXQsIHN0YXRlKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYygnOyAnKSk7XG5cdFx0XHRpZiAobm9kZS50ZXN0KSBjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS50ZXN0LCBzdGF0ZSkpO1xuXHRcdFx0Y2h1bmtzLnB1c2goYygnOyAnKSk7XG5cdFx0XHRpZiAobm9kZS51cGRhdGUpIGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLnVwZGF0ZSwgc3RhdGUpKTtcblxuXHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdGMoJykgJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmJvZHksIHN0YXRlKVxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9KSxcblxuXHRcdEZvckluU3RhdGVtZW50OiBzY29wZWQoKG5vZGUsIHN0YXRlKSA9PiB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbXG5cdFx0XHRcdGMoYGZvciAkeyhub2RlICkuYXdhaXQgPyAnYXdhaXQgJyA6ICcnfShgKVxuXHRcdFx0XTtcblxuXHRcdFx0aWYgKChub2RlLmxlZnQgKS50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlX3Zhcl9kZWNsYXJhdGlvbihub2RlLmxlZnQgLCBzdGF0ZSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUubGVmdCwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdGMobm9kZS50eXBlID09PSAnRm9ySW5TdGF0ZW1lbnQnID8gYCBpbiBgIDogYCBvZiBgKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUucmlnaHQsIHN0YXRlKSxcblx0XHRcdFx0YygnKSAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYm9keSwgc3RhdGUpXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0pLFxuXG5cdFx0RGVidWdnZXJTdGF0ZW1lbnQobm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBbYygnZGVidWdnZXInLCBub2RlKSwgYygnOycpXTtcblx0XHR9LFxuXG5cdFx0RnVuY3Rpb25EZWNsYXJhdGlvbjogc2NvcGVkKChub2RlLCBzdGF0ZSkgPT4ge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0XHRcdGlmIChub2RlLmFzeW5jKSBjaHVua3MucHVzaChjKCdhc3luYyAnKSk7XG5cdFx0XHRjaHVua3MucHVzaChjKG5vZGUuZ2VuZXJhdG9yID8gJ2Z1bmN0aW9uKiAnIDogJ2Z1bmN0aW9uICcpKTtcblx0XHRcdGlmIChub2RlLmlkKSBjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS5pZCwgc3RhdGUpKTtcblx0XHRcdGNodW5rcy5wdXNoKGMoJygnKSk7XG5cblx0XHRcdGNvbnN0IHBhcmFtcyA9IG5vZGUucGFyYW1zLm1hcChwID0+IGhhbmRsZShwLCB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRpbmRlbnQ6IHN0YXRlLmluZGVudCArICdcXHQnXG5cdFx0XHR9KSk7XG5cblx0XHRcdGNvbnN0IG11bHRpcGxlX2xpbmVzID0gKFxuXHRcdFx0XHRwYXJhbXMuc29tZShoYXNfbmV3bGluZSkgfHxcblx0XHRcdFx0KHBhcmFtcy5tYXAoZ2V0X2xlbmd0aCkucmVkdWNlKHN1bSwgMCkgKyAoc3RhdGUuaW5kZW50Lmxlbmd0aCArIHBhcmFtcy5sZW5ndGggLSAxKSAqIDIpID4gODBcblx0XHRcdCk7XG5cblx0XHRcdGNvbnN0IHNlcGFyYXRvciA9IGMobXVsdGlwbGVfbGluZXMgPyBgLFxcbiR7c3RhdGUuaW5kZW50fWAgOiAnLCAnKTtcblxuXHRcdFx0aWYgKG11bHRpcGxlX2xpbmVzKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoYFxcbiR7c3RhdGUuaW5kZW50fVxcdGApLFxuXHRcdFx0XHRcdC4uLmpvaW4ocGFyYW1zLCBzZXBhcmF0b3IpLFxuXHRcdFx0XHRcdGMoYFxcbiR7c3RhdGUuaW5kZW50fWApXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHQuLi5qb2luKHBhcmFtcywgc2VwYXJhdG9yKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0YygnKSAnKSxcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuYm9keSwgc3RhdGUpXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0pLFxuXG5cdFx0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIGhhbmRsZV92YXJfZGVjbGFyYXRpb24obm9kZSwgc3RhdGUpLmNvbmNhdChjKCc7JykpO1xuXHRcdH0sXG5cblx0XHRWYXJpYWJsZURlY2xhcmF0b3Iobm9kZSwgc3RhdGUpIHtcblx0XHRcdGlmIChub2RlLmluaXQpIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5pZCwgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyA9ICcpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLmluaXQsIHN0YXRlKVxuXHRcdFx0XHRdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGhhbmRsZShub2RlLmlkLCBzdGF0ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdENsYXNzRGVjbGFyYXRpb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtjKCdjbGFzcyAnKV07XG5cblx0XHRcdGlmIChub2RlLmlkKSBjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS5pZCwgc3RhdGUpLCBjKCcgJykpO1xuXG5cdFx0XHRpZiAobm9kZS5zdXBlckNsYXNzKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoJ2V4dGVuZHMgJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUuc3VwZXJDbGFzcywgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyAnKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS5ib2R5LCBzdGF0ZSkpO1xuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0sXG5cblx0XHRJbXBvcnREZWNsYXJhdGlvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW2MoJ2ltcG9ydCAnKV07XG5cblx0XHRcdGNvbnN0IHsgbGVuZ3RoIH0gPSBub2RlLnNwZWNpZmllcnM7XG5cdFx0XHRjb25zdCBzb3VyY2UgPSBoYW5kbGUobm9kZS5zb3VyY2UsIHN0YXRlKTtcblxuXHRcdFx0aWYgKGxlbmd0aCA+IDApIHtcblx0XHRcdFx0bGV0IGkgPSAwO1xuXG5cdFx0XHRcdHdoaWxlIChpIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRjaHVua3MucHVzaChjKCcsICcpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBzcGVjaWZpZXIgPSBub2RlLnNwZWNpZmllcnNbaV07XG5cblx0XHRcdFx0XHRpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnREZWZhdWx0U3BlY2lmaWVyJykge1xuXHRcdFx0XHRcdFx0Y2h1bmtzLnB1c2goYyhzcGVjaWZpZXIubG9jYWwubmFtZSwgc3BlY2lmaWVyKSk7XG5cdFx0XHRcdFx0XHRpICs9IDE7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicpIHtcblx0XHRcdFx0XHRcdGNodW5rcy5wdXNoKGMoJyogYXMgJyArIHNwZWNpZmllci5sb2NhbC5uYW1lLCBzcGVjaWZpZXIpKTtcblx0XHRcdFx0XHRcdGkgKz0gMTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGkgPCBsZW5ndGgpIHtcblx0XHRcdFx0XHQvLyB3ZSBoYXZlIG5hbWVkIHNwZWNpZmllcnNcblx0XHRcdFx0XHRjb25zdCBzcGVjaWZpZXJzID0gbm9kZS5zcGVjaWZpZXJzLnNsaWNlKGkpLm1hcCgoc3BlY2lmaWVyKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBuYW1lID0gaGFuZGxlKHNwZWNpZmllci5pbXBvcnRlZCwgc3RhdGUpWzBdO1xuXHRcdFx0XHRcdFx0Y29uc3QgYXMgPSBoYW5kbGUoc3BlY2lmaWVyLmxvY2FsLCBzdGF0ZSlbMF07XG5cblx0XHRcdFx0XHRcdGlmIChuYW1lLmNvbnRlbnQgPT09IGFzLmNvbnRlbnQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFthc107XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiBbbmFtZSwgYygnIGFzICcpLCBhc107XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRjb25zdCB3aWR0aCA9IGdldF9sZW5ndGgoY2h1bmtzKSArIHNwZWNpZmllcnMubWFwKGdldF9sZW5ndGgpLnJlZHVjZShzdW0sIDApICsgKDIgKiBzcGVjaWZpZXJzLmxlbmd0aCkgKyA2ICsgZ2V0X2xlbmd0aChzb3VyY2UpO1xuXG5cdFx0XHRcdFx0aWYgKHdpZHRoID4gODApIHtcblx0XHRcdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdFx0XHRjKGB7XFxuXFx0YCksXG5cdFx0XHRcdFx0XHRcdC4uLmpvaW4oc3BlY2lmaWVycywgYygnLFxcblxcdCcpKSxcblx0XHRcdFx0XHRcdFx0YygnXFxufScpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRcdFx0YyhgeyBgKSxcblx0XHRcdFx0XHRcdFx0Li4uam9pbihzcGVjaWZpZXJzLCBjKCcsICcpKSxcblx0XHRcdFx0XHRcdFx0YygnIH0nKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjaHVua3MucHVzaChjKCcgZnJvbSAnKSk7XG5cdFx0XHR9XG5cblx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHQuLi5zb3VyY2UsXG5cdFx0XHRcdGMoJzsnKVxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0SW1wb3J0RXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtjKCdpbXBvcnQoJyksIC4uLmhhbmRsZShub2RlLnNvdXJjZSwgc3RhdGUpLCBjKCcpJyldO1xuXHRcdH0sXG5cblx0XHRFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtcblx0XHRcdFx0YyhgZXhwb3J0IGRlZmF1bHQgYCksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLmRlY2xhcmF0aW9uLCBzdGF0ZSlcblx0XHRcdF07XG5cblx0XHRcdGlmIChub2RlLmRlY2xhcmF0aW9uLnR5cGUgIT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJykge1xuXHRcdFx0XHRjaHVua3MucHVzaChjKCc7JykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0sXG5cblx0XHRFeHBvcnROYW1lZERlY2xhcmF0aW9uKG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbYygnZXhwb3J0ICcpXTtcblxuXHRcdFx0aWYgKG5vZGUuZGVjbGFyYXRpb24pIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUuZGVjbGFyYXRpb24sIHN0YXRlKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBzcGVjaWZpZXJzID0gbm9kZS5zcGVjaWZpZXJzLm1hcChzcGVjaWZpZXIgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBoYW5kbGUoc3BlY2lmaWVyLmxvY2FsLCBzdGF0ZSlbMF07XG5cdFx0XHRcdFx0Y29uc3QgYXMgPSBoYW5kbGUoc3BlY2lmaWVyLmV4cG9ydGVkLCBzdGF0ZSlbMF07XG5cblx0XHRcdFx0XHRpZiAobmFtZS5jb250ZW50ID09PSBhcy5jb250ZW50KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gW25hbWVdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBbbmFtZSwgYygnIGFzICcpLCBhc107XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gNyArIHNwZWNpZmllcnMubWFwKGdldF9sZW5ndGgpLnJlZHVjZShzdW0sIDApICsgMiAqIHNwZWNpZmllcnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICh3aWR0aCA+IDgwKSB7XG5cdFx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0XHRjKCd7XFxuXFx0JyksXG5cdFx0XHRcdFx0XHQuLi5qb2luKHNwZWNpZmllcnMsIGMoJyxcXG5cXHQnKSksXG5cdFx0XHRcdFx0XHRjKCdcXG59Jylcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdFx0YygneyAnKSxcblx0XHRcdFx0XHRcdC4uLmpvaW4oc3BlY2lmaWVycywgYygnLCAnKSksXG5cdFx0XHRcdFx0XHRjKCcgfScpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChub2RlLnNvdXJjZSkge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdFx0YygnIGZyb20gJyksXG5cdFx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5zb3VyY2UsIHN0YXRlKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYygnOycpKTtcblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0RXhwb3J0QWxsRGVjbGFyYXRpb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdGMoYGV4cG9ydCAqIGZyb20gYCksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLnNvdXJjZSwgc3RhdGUpLFxuXHRcdFx0XHRjKGA7YClcblx0XHRcdF07XG5cdFx0fSxcblxuXHRcdE1ldGhvZERlZmluaXRpb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtdO1xuXG5cdFx0XHRpZiAobm9kZS5zdGF0aWMpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goYygnc3RhdGljICcpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUua2luZCA9PT0gJ2dldCcgfHwgbm9kZS5raW5kID09PSAnc2V0Jykge1xuXHRcdFx0XHQvLyBHZXR0ZXIgb3Igc2V0dGVyXG5cdFx0XHRcdGNodW5rcy5wdXNoKGMobm9kZS5raW5kICsgJyAnKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChub2RlLnZhbHVlLmFzeW5jKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKGMoJ2FzeW5jICcpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUudmFsdWUuZ2VuZXJhdG9yKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKGMoJyonKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChub2RlLmNvbXB1dGVkKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoJ1snKSxcblx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5rZXksIHN0YXRlKSxcblx0XHRcdFx0XHRjKCddJylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLmtleSwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYygnKCcpKTtcblxuXHRcdFx0Y29uc3QgeyBwYXJhbXMgfSA9IG5vZGUudmFsdWU7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0XHRjaHVua3MucHVzaCguLi5oYW5kbGUocGFyYW1zW2ldLCBzdGF0ZSkpO1xuXHRcdFx0XHRpZiAoaSA8IHBhcmFtcy5sZW5ndGggLSAxKSBjaHVua3MucHVzaChjKCcsICcpKTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdGMoJykgJyksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLnZhbHVlLmJvZHksIHN0YXRlKVxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0QXJyb3dGdW5jdGlvbkV4cHJlc3Npb246IHNjb3BlZCgobm9kZSwgc3RhdGUpID0+IHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtdO1xuXG5cdFx0XHRpZiAobm9kZS5hc3luYykgY2h1bmtzLnB1c2goYygnYXN5bmMgJykpO1xuXG5cdFx0XHRpZiAobm9kZS5wYXJhbXMubGVuZ3RoID09PSAxICYmIG5vZGUucGFyYW1zWzBdLnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHRjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS5wYXJhbXNbMF0sIHN0YXRlKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBub2RlLnBhcmFtcy5tYXAocGFyYW0gPT4gaGFuZGxlKHBhcmFtLCB7XG5cdFx0XHRcdFx0Li4uc3RhdGUsXG5cdFx0XHRcdFx0aW5kZW50OiBzdGF0ZS5pbmRlbnQgKyAnXFx0J1xuXHRcdFx0XHR9KSk7XG5cblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHRcdC4uLmpvaW4ocGFyYW1zLCBjKCcsICcpKSxcblx0XHRcdFx0XHRjKCcpJylcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYygnID0+ICcpKTtcblxuXHRcdFx0aWYgKG5vZGUuYm9keS50eXBlID09PSAnT2JqZWN0RXhwcmVzc2lvbicpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLmJvZHksIHN0YXRlKSxcblx0XHRcdFx0XHRjKCcpJylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLmJvZHksIHN0YXRlKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSksXG5cblx0XHRUaGlzRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtjKCd0aGlzJywgbm9kZSldO1xuXHRcdH0sXG5cblx0XHRTdXBlcihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtjKCdzdXBlcicsIG5vZGUpXTtcblx0XHR9LFxuXG5cdFx0UmVzdEVsZW1lbnQobm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBbYygnLi4uJyksIC4uLmhhbmRsZShub2RlLmFyZ3VtZW50LCBzdGF0ZSldO1xuXHRcdH0sXG5cblx0XHRZaWVsZEV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGlmIChub2RlLmFyZ3VtZW50KSB7XG5cdFx0XHRcdHJldHVybiBbYyhub2RlLmRlbGVnYXRlID8gYHlpZWxkKiBgIDogYHlpZWxkIGApLCAuLi5oYW5kbGUobm9kZS5hcmd1bWVudCwgc3RhdGUpXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFtjKG5vZGUuZGVsZWdhdGUgPyBgeWllbGQqYCA6IGB5aWVsZGApXTtcblx0XHR9LFxuXG5cdFx0QXdhaXRFeHByZXNzaW9uKG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRpZiAobm9kZS5hcmd1bWVudCkge1xuXHRcdFx0XHRjb25zdCBwcmVjZWRlbmNlID0gRVhQUkVTU0lPTlNfUFJFQ0VERU5DRVtub2RlLmFyZ3VtZW50LnR5cGVdO1xuXG5cdFx0XHRcdGlmIChwcmVjZWRlbmNlICYmIChwcmVjZWRlbmNlIDwgRVhQUkVTU0lPTlNfUFJFQ0VERU5DRS5Bd2FpdEV4cHJlc3Npb24pKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtjKCdhd2FpdCAoJyksIC4uLmhhbmRsZShub2RlLmFyZ3VtZW50LCBzdGF0ZSksIGMoJyknKV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtjKCdhd2FpdCAnKSwgLi4uaGFuZGxlKG5vZGUuYXJndW1lbnQsIHN0YXRlKV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFtjKCdhd2FpdCcpXTtcblx0XHR9LFxuXG5cdFx0VGVtcGxhdGVMaXRlcmFsKG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbYygnYCcpXTtcblxuXHRcdFx0Y29uc3QgeyBxdWFzaXMsIGV4cHJlc3Npb25zIH0gPSBub2RlO1xuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMocXVhc2lzW2ldLnZhbHVlLnJhdyksXG5cdFx0XHRcdFx0YygnJHsnKSxcblx0XHRcdFx0XHQuLi5oYW5kbGUoZXhwcmVzc2lvbnNbaV0sIHN0YXRlKSxcblx0XHRcdFx0XHRjKCd9Jylcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdGMocXVhc2lzW3F1YXNpcy5sZW5ndGggLSAxXS52YWx1ZS5yYXcpLFxuXHRcdFx0XHRjKCdgJylcblx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIGhhbmRsZShub2RlLnRhZywgc3RhdGUpLmNvbmNhdChoYW5kbGUobm9kZS5xdWFzaSwgc3RhdGUpKTtcblx0XHR9LFxuXG5cdFx0QXJyYXlFeHByZXNzaW9uKG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbYygnWycpXTtcblxuXHRcdFx0Y29uc3QgZWxlbWVudHMgPSBbXTtcblx0XHRcdGxldCBzcGFyc2VfY29tbWFzID0gW107XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0XHQvLyBjYW4ndCB1c2UgbWFwL2ZvckVhY2ggYmVjYXVzZSBvZiBzcGFyc2UgYXJyYXlzXG5cdFx0XHRcdGNvbnN0IGVsZW1lbnQgPSBub2RlLmVsZW1lbnRzW2ldO1xuXHRcdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goWy4uLnNwYXJzZV9jb21tYXMsIC4uLmhhbmRsZShlbGVtZW50LCB7XG5cdFx0XHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0XHRcdGluZGVudDogc3RhdGUuaW5kZW50ICsgJ1xcdCdcblx0XHRcdFx0XHR9KV0pO1xuXHRcdFx0XHRcdHNwYXJzZV9jb21tYXMgPSBbXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzcGFyc2VfY29tbWFzLnB1c2goYygnLCcpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtdWx0aXBsZV9saW5lcyA9IChcblx0XHRcdFx0ZWxlbWVudHMuc29tZShoYXNfbmV3bGluZSkgfHxcblx0XHRcdFx0KGVsZW1lbnRzLm1hcChnZXRfbGVuZ3RoKS5yZWR1Y2Uoc3VtLCAwKSArIChzdGF0ZS5pbmRlbnQubGVuZ3RoICsgZWxlbWVudHMubGVuZ3RoIC0gMSkgKiAyKSA+IDgwXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAobXVsdGlwbGVfbGluZXMpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YyhgXFxuJHtzdGF0ZS5pbmRlbnR9XFx0YCksXG5cdFx0XHRcdFx0Li4uam9pbihlbGVtZW50cywgYyhgLFxcbiR7c3RhdGUuaW5kZW50fVxcdGApKSxcblx0XHRcdFx0XHRjKGBcXG4ke3N0YXRlLmluZGVudH1gKSxcblx0XHRcdFx0XHQuLi5zcGFyc2VfY29tbWFzXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaHVua3MucHVzaCguLi5qb2luKGVsZW1lbnRzLCBjKCcsICcpKSwgLi4uc3BhcnNlX2NvbW1hcyk7XG5cdFx0XHR9XG5cblx0XHRcdGNodW5rcy5wdXNoKGMoJ10nKSk7XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdE9iamVjdEV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGlmIChub2RlLnByb3BlcnRpZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiBbYygne30nKV07XG5cdFx0XHR9XG5cblx0XHRcdGxldCBoYXNfaW5saW5lX2NvbW1lbnQgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgY2h1bmtzID0gW107XG5cdFx0XHRjb25zdCBzZXBhcmF0b3IgPSBjKCcsICcpO1xuXG5cdFx0XHRub2RlLnByb3BlcnRpZXMuZm9yRWFjaCgocCwgaSkgPT4ge1xuXHRcdFx0XHRjaHVua3MucHVzaCguLi5oYW5kbGUocCwge1xuXHRcdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRcdGluZGVudDogc3RhdGUuaW5kZW50ICsgJ1xcdCdcblx0XHRcdFx0fSkpO1xuXG5cdFx0XHRcdGlmIChzdGF0ZS5jb21tZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHQvLyBUT0RPIGdlbmVyYWxpc2UgdGhpcywgc28gaXQgd29ya3Mgd2l0aCBBcnJheUV4cHJlc3Npb25zIGFuZCBvdGhlciB0aGluZ3MuXG5cdFx0XHRcdFx0Ly8gQXQgcHJlc2VudCwgc3R1ZmYgd2lsbCBqdXN0IGdldCBhcHBlbmRlZCB0byB0aGUgY2xvc2VzdCBzdGF0ZW1lbnQvZGVjbGFyYXRpb25cblx0XHRcdFx0XHRjaHVua3MucHVzaChjKCcsICcpKTtcblxuXHRcdFx0XHRcdHdoaWxlIChzdGF0ZS5jb21tZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGNvbW1lbnQgPSBzdGF0ZS5jb21tZW50cy5zaGlmdCgpO1xuXG5cdFx0XHRcdFx0XHRjaHVua3MucHVzaChjKGNvbW1lbnQudHlwZSA9PT0gJ0Jsb2NrJ1xuXHRcdFx0XHRcdFx0XHQ/IGAvKiR7Y29tbWVudC52YWx1ZX0qL1xcbiR7c3RhdGUuaW5kZW50fVxcdGBcblx0XHRcdFx0XHRcdFx0OiBgLy8ke2NvbW1lbnQudmFsdWV9XFxuJHtzdGF0ZS5pbmRlbnR9XFx0YCkpO1xuXG5cdFx0XHRcdFx0XHRpZiAoY29tbWVudC50eXBlID09PSAnTGluZScpIHtcblx0XHRcdFx0XHRcdFx0aGFzX2lubGluZV9jb21tZW50ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0Y2h1bmtzLnB1c2goc2VwYXJhdG9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRjb25zdCBtdWx0aXBsZV9saW5lcyA9IChcblx0XHRcdFx0aGFzX2lubGluZV9jb21tZW50IHx8XG5cdFx0XHRcdGhhc19uZXdsaW5lKGNodW5rcykgfHxcblx0XHRcdFx0Z2V0X2xlbmd0aChjaHVua3MpID4gNDBcblx0XHRcdCk7XG5cblx0XHRcdGlmIChtdWx0aXBsZV9saW5lcykge1xuXHRcdFx0XHRzZXBhcmF0b3IuY29udGVudCA9IGAsXFxuJHtzdGF0ZS5pbmRlbnR9XFx0YDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0YyhtdWx0aXBsZV9saW5lcyA/IGB7XFxuJHtzdGF0ZS5pbmRlbnR9XFx0YCA6IGB7IGApLFxuXHRcdFx0XHQuLi5jaHVua3MsXG5cdFx0XHRcdGMobXVsdGlwbGVfbGluZXMgPyBgXFxuJHtzdGF0ZS5pbmRlbnR9fWAgOiBgIH1gKVxuXHRcdFx0XTtcblx0XHR9LFxuXG5cdFx0UHJvcGVydHkobm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gaGFuZGxlKG5vZGUudmFsdWUsIHN0YXRlKTtcblxuXHRcdFx0aWYgKG5vZGUua2V5ID09PSBub2RlLnZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlXG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFub2RlLmNvbXB1dGVkICYmXG5cdFx0XHRcdG5vZGUudmFsdWUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRQYXR0ZXJuJyAmJlxuXHRcdFx0XHRub2RlLnZhbHVlLmxlZnQudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmXG5cdFx0XHRcdG5vZGUudmFsdWUubGVmdC5uYW1lID09PSAobm9kZS5rZXkgKS5uYW1lXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobm9kZS52YWx1ZS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgKFxuXHRcdFx0XHQobm9kZS5rZXkudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmIG5vZGUua2V5Lm5hbWUgPT09IHZhbHVlWzBdLmNvbnRlbnQpIHx8XG5cdFx0XHRcdChub2RlLmtleS50eXBlID09PSAnTGl0ZXJhbCcgJiYgbm9kZS5rZXkudmFsdWUgPT09IHZhbHVlWzBdLmNvbnRlbnQpXG5cdFx0XHQpKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qga2V5ID0gaGFuZGxlKG5vZGUua2V5LCBzdGF0ZSk7XG5cblx0XHRcdGlmIChub2RlLnZhbHVlLnR5cGUgPT09ICdGdW5jdGlvbkV4cHJlc3Npb24nICYmICFub2RlLnZhbHVlLmlkKSB7XG5cdFx0XHRcdHN0YXRlID0ge1xuXHRcdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRcdHNjb3BlOiBzdGF0ZS5zY29wZV9tYXAuZ2V0KG5vZGUudmFsdWUpXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29uc3QgY2h1bmtzID0gbm9kZS5raW5kICE9PSAnaW5pdCdcblx0XHRcdFx0XHQ/IFtjKGAke25vZGUua2luZH0gYCldXG5cdFx0XHRcdFx0OiBbXTtcblxuXHRcdFx0XHRpZiAobm9kZS52YWx1ZS5hc3luYykge1xuXHRcdFx0XHRcdGNodW5rcy5wdXNoKGMoJ2FzeW5jICcpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobm9kZS52YWx1ZS5nZW5lcmF0b3IpIHtcblx0XHRcdFx0XHRjaHVua3MucHVzaChjKCcqJykpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0Li4uKG5vZGUuY29tcHV0ZWQgPyBbYygnWycpLCAuLi5rZXksIGMoJ10nKV0gOiBrZXkpLFxuXHRcdFx0XHRcdGMoJygnKSxcblx0XHRcdFx0XHQuLi5qb2luKChub2RlLnZhbHVlICkucGFyYW1zLm1hcChwYXJhbSA9PiBoYW5kbGUocGFyYW0sIHN0YXRlKSksIGMoJywgJykpLFxuXHRcdFx0XHRcdGMoJykgJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKChub2RlLnZhbHVlICkuYm9keSwgc3RhdGUpXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUuY29tcHV0ZWQpIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRjKCdbJyksXG5cdFx0XHRcdFx0Li4ua2V5LFxuXHRcdFx0XHRcdGMoJ106ICcpLFxuXHRcdFx0XHRcdC4uLnZhbHVlXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdC4uLmtleSxcblx0XHRcdFx0YygnOiAnKSxcblx0XHRcdFx0Li4udmFsdWVcblx0XHRcdF07XG5cdFx0fSxcblxuXHRcdE9iamVjdFBhdHRlcm4obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtjKCd7ICcpXTtcblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUucHJvcGVydGllc1tpXSwgc3RhdGUpKTtcblx0XHRcdFx0aWYgKGkgPCBub2RlLnByb3BlcnRpZXMubGVuZ3RoIC0gMSkgY2h1bmtzLnB1c2goYygnLCAnKSk7XG5cdFx0XHR9XG5cblx0XHRcdGNodW5rcy5wdXNoKGMoJyB9JykpO1xuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0sXG5cblx0XHRTZXF1ZW5jZUV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGV4cHJlc3Npb25zID0gbm9kZS5leHByZXNzaW9ucy5tYXAoZSA9PiBoYW5kbGUoZSwgc3RhdGUpKTtcblxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHQuLi5qb2luKGV4cHJlc3Npb25zLCBjKCcsICcpKSxcblx0XHRcdFx0YygnKScpXG5cdFx0XHRdO1xuXHRcdH0sXG5cblx0XHRVbmFyeUV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtjKG5vZGUub3BlcmF0b3IpXTtcblxuXHRcdFx0aWYgKG5vZGUub3BlcmF0b3IubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRjaHVua3MucHVzaChjKCcgJykpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdEVYUFJFU1NJT05TX1BSRUNFREVOQ0Vbbm9kZS5hcmd1bWVudC50eXBlXSA8XG5cdFx0XHRcdEVYUFJFU1NJT05TX1BSRUNFREVOQ0UuVW5hcnlFeHByZXNzaW9uXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLmFyZ3VtZW50LCBzdGF0ZSksXG5cdFx0XHRcdFx0YygnKScpXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaHVua3MucHVzaCguLi5oYW5kbGUobm9kZS5hcmd1bWVudCwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0VXBkYXRlRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIG5vZGUucHJlZml4XG5cdFx0XHRcdD8gW2Mobm9kZS5vcGVyYXRvciksIC4uLmhhbmRsZShub2RlLmFyZ3VtZW50LCBzdGF0ZSldXG5cdFx0XHRcdDogWy4uLmhhbmRsZShub2RlLmFyZ3VtZW50LCBzdGF0ZSksIGMobm9kZS5vcGVyYXRvcildO1xuXHRcdH0sXG5cblx0XHRBc3NpZ25tZW50RXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0Li4uaGFuZGxlKG5vZGUubGVmdCwgc3RhdGUpLFxuXHRcdFx0XHRjKGAgJHtub2RlLm9wZXJhdG9yIHx8ICc9J30gYCksXG5cdFx0XHRcdC4uLmhhbmRsZShub2RlLnJpZ2h0LCBzdGF0ZSlcblx0XHRcdF07XG5cdFx0fSxcblxuXHRcdEJpbmFyeUV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtdO1xuXG5cdFx0XHQvLyBUT0RPXG5cdFx0XHQvLyBjb25zdCBpc19pbiA9IG5vZGUub3BlcmF0b3IgPT09ICdpbic7XG5cdFx0XHQvLyBpZiAoaXNfaW4pIHtcblx0XHRcdC8vIFx0Ly8gQXZvaWRzIGNvbmZ1c2lvbiBpbiBgZm9yYCBsb29wcyBpbml0aWFsaXplcnNcblx0XHRcdC8vIFx0Y2h1bmtzLnB1c2goYygnKCcpKTtcblx0XHRcdC8vIH1cblxuXHRcdFx0aWYgKG5lZWRzX3BhcmVucyhub2RlLmxlZnQsIG5vZGUsIGZhbHNlKSkge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKCcoJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUubGVmdCwgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyknKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUubGVmdCwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmtzLnB1c2goYyhgICR7bm9kZS5vcGVyYXRvcn0gYCkpO1xuXG5cdFx0XHRpZiAobmVlZHNfcGFyZW5zKG5vZGUucmlnaHQsIG5vZGUsIHRydWUpKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoJygnKSxcblx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5yaWdodCwgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyknKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUucmlnaHQsIHN0YXRlKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdENvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0XHRcdGlmIChcblx0XHRcdFx0RVhQUkVTU0lPTlNfUFJFQ0VERU5DRVtub2RlLnRlc3QudHlwZV0gPlxuXHRcdFx0XHRFWFBSRVNTSU9OU19QUkVDRURFTkNFLkNvbmRpdGlvbmFsRXhwcmVzc2lvblxuXHRcdFx0KSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLnRlc3QsIHN0YXRlKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKCcoJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUudGVzdCwgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyknKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjaGlsZF9zdGF0ZSA9IHsgLi4uc3RhdGUsIGluZGVudDogc3RhdGUuaW5kZW50ICsgJ1xcdCcgfTtcblxuXHRcdFx0Y29uc3QgY29uc2VxdWVudCA9IGhhbmRsZShub2RlLmNvbnNlcXVlbnQsIGNoaWxkX3N0YXRlKTtcblx0XHRcdGNvbnN0IGFsdGVybmF0ZSA9IGhhbmRsZShub2RlLmFsdGVybmF0ZSwgY2hpbGRfc3RhdGUpO1xuXG5cdFx0XHRjb25zdCBtdWx0aXBsZV9saW5lcyA9IChcblx0XHRcdFx0aGFzX25ld2xpbmUoY29uc2VxdWVudCkgfHwgaGFzX25ld2xpbmUoYWx0ZXJuYXRlKSB8fFxuXHRcdFx0XHRnZXRfbGVuZ3RoKGNodW5rcykgKyBnZXRfbGVuZ3RoKGNvbnNlcXVlbnQpICsgZ2V0X2xlbmd0aChhbHRlcm5hdGUpID4gNTBcblx0XHRcdCk7XG5cblx0XHRcdGlmIChtdWx0aXBsZV9saW5lcykge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKGBcXG4ke3N0YXRlLmluZGVudH0/IGApLFxuXHRcdFx0XHRcdC4uLmNvbnNlcXVlbnQsXG5cdFx0XHRcdFx0YyhgXFxuJHtzdGF0ZS5pbmRlbnR9OiBgKSxcblx0XHRcdFx0XHQuLi5hbHRlcm5hdGVcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoYCA/IGApLFxuXHRcdFx0XHRcdC4uLmNvbnNlcXVlbnQsXG5cdFx0XHRcdFx0YyhgIDogYCksXG5cdFx0XHRcdFx0Li4uYWx0ZXJuYXRlXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fSxcblxuXHRcdE5ld0V4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdGNvbnN0IGNodW5rcyA9IFtjKCduZXcgJyldO1xuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdEVYUFJFU1NJT05TX1BSRUNFREVOQ0Vbbm9kZS5jYWxsZWUudHlwZV0gPFxuXHRcdFx0XHRFWFBSRVNTSU9OU19QUkVDRURFTkNFLkNhbGxFeHByZXNzaW9uIHx8IGhhc19jYWxsX2V4cHJlc3Npb24obm9kZS5jYWxsZWUpXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdFx0YygnKCcpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLmNhbGxlZSwgc3RhdGUpLFxuXHRcdFx0XHRcdGMoJyknKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goLi4uaGFuZGxlKG5vZGUuY2FsbGVlLCBzdGF0ZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUT0RPIHRoaXMgaXMgY29waWVkIGZyb20gQ2FsbEV4cHJlc3Npb24g4oCUIERSWSBpdCBvdXRcblx0XHRcdGNvbnN0IGFyZ3MgPSBub2RlLmFyZ3VtZW50cy5tYXAoYXJnID0+IGhhbmRsZShhcmcsIHtcblx0XHRcdFx0Li4uc3RhdGUsXG5cdFx0XHRcdGluZGVudDogc3RhdGUuaW5kZW50ICsgJ1xcdCdcblx0XHRcdH0pKTtcblxuXHRcdFx0Y29uc3Qgc2VwYXJhdG9yID0gYXJncy5zb21lKGhhc19uZXdsaW5lKSAvLyBUT0RPIG9yIGxlbmd0aCBleGNlZWRzIDgwXG5cdFx0XHRcdD8gYygnLFxcbicgKyBzdGF0ZS5pbmRlbnQpXG5cdFx0XHRcdDogYygnLCAnKTtcblxuXHRcdFx0Y2h1bmtzLnB1c2goXG5cdFx0XHRcdGMoJygnKSxcblx0XHRcdFx0Li4uam9pbihhcmdzLCBzZXBhcmF0b3IpICxcblx0XHRcdFx0YygnKScpXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gY2h1bmtzO1xuXHRcdH0sXG5cblx0XHRDaGFpbkV4cHJlc3Npb24obm9kZSwgc3RhdGUpIHtcblx0XHRcdHJldHVybiBoYW5kbGUobm9kZS5leHByZXNzaW9uLCBzdGF0ZSk7XG5cdFx0fSxcblxuXHRcdENhbGxFeHByZXNzaW9uKG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRjb25zdCBjaHVua3MgPSBbXTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRFWFBSRVNTSU9OU19QUkVDRURFTkNFW25vZGUuY2FsbGVlLnR5cGVdIDxcblx0XHRcdFx0RVhQUkVTU0lPTlNfUFJFQ0VERU5DRS5DYWxsRXhwcmVzc2lvblxuXHRcdFx0KSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoJygnKSxcblx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5jYWxsZWUsIHN0YXRlKSxcblx0XHRcdFx0XHRjKCcpJylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLmNhbGxlZSwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKChub2RlICkub3B0aW9uYWwpIHtcblx0XHRcdFx0Y2h1bmtzLnB1c2goYygnPy4nKSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGFyZ3MgPSBub2RlLmFyZ3VtZW50cy5tYXAoYXJnID0+IGhhbmRsZShhcmcsIHN0YXRlKSk7XG5cblx0XHRcdGNvbnN0IG11bHRpcGxlX2xpbmVzID0gYXJncy5zbGljZSgwLCAtMSkuc29tZShoYXNfbmV3bGluZSk7IC8vIFRPRE8gb3IgbGVuZ3RoIGV4Y2VlZHMgODBcblxuXHRcdFx0aWYgKG11bHRpcGxlX2xpbmVzKSB7XG5cdFx0XHRcdC8vIG5lZWQgdG8gaGFuZGxlIGFyZ3MgYWdhaW4uIFRPRE8gZmluZCBhbHRlcm5hdGl2ZSBhcHByb2FjaD9cblx0XHRcdFx0Y29uc3QgYXJncyA9IG5vZGUuYXJndW1lbnRzLm1hcChhcmcgPT4gaGFuZGxlKGFyZywge1xuXHRcdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRcdGluZGVudDogYCR7c3RhdGUuaW5kZW50fVxcdGBcblx0XHRcdFx0fSkpO1xuXG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoYChcXG4ke3N0YXRlLmluZGVudH1cXHRgKSxcblx0XHRcdFx0XHQuLi5qb2luKGFyZ3MsIGMoYCxcXG4ke3N0YXRlLmluZGVudH1cXHRgKSksXG5cdFx0XHRcdFx0YyhgXFxuJHtzdGF0ZS5pbmRlbnR9KWApXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKCcoJyksXG5cdFx0XHRcdFx0Li4uam9pbihhcmdzLCBjKCcsICcpKSxcblx0XHRcdFx0XHRjKCcpJylcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0TWVtYmVyRXhwcmVzc2lvbihub2RlLCBzdGF0ZSkge1xuXHRcdFx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0XHRcdGlmIChFWFBSRVNTSU9OU19QUkVDRURFTkNFW25vZGUub2JqZWN0LnR5cGVdIDwgRVhQUkVTU0lPTlNfUFJFQ0VERU5DRS5NZW1iZXJFeHByZXNzaW9uKSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMoJygnKSxcblx0XHRcdFx0XHQuLi5oYW5kbGUobm9kZS5vYmplY3QsIHN0YXRlKSxcblx0XHRcdFx0XHRjKCcpJylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKC4uLmhhbmRsZShub2RlLm9iamVjdCwgc3RhdGUpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vZGUuY29tcHV0ZWQpIHtcblx0XHRcdFx0aWYgKG5vZGUub3B0aW9uYWwpIHtcblx0XHRcdFx0XHRjaHVua3MucHVzaChjKCc/LicpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjaHVua3MucHVzaChcblx0XHRcdFx0XHRjKCdbJyksXG5cdFx0XHRcdFx0Li4uaGFuZGxlKG5vZGUucHJvcGVydHksIHN0YXRlKSxcblx0XHRcdFx0XHRjKCddJylcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rcy5wdXNoKFxuXHRcdFx0XHRcdGMobm9kZS5vcHRpb25hbCA/ICc/LicgOiAnLicpLFxuXHRcdFx0XHRcdC4uLmhhbmRsZShub2RlLnByb3BlcnR5LCBzdGF0ZSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9LFxuXG5cdFx0TWV0YVByb3BlcnR5KG5vZGUsIHN0YXRlKSB7XG5cdFx0XHRyZXR1cm4gWy4uLmhhbmRsZShub2RlLm1ldGEsIHN0YXRlKSwgYygnLicpLCAuLi5oYW5kbGUobm9kZS5wcm9wZXJ0eSwgc3RhdGUpXTtcblx0XHR9LFxuXG5cdFx0SWRlbnRpZmllcihub2RlLCBzdGF0ZSkge1xuXHRcdFx0bGV0IG5hbWUgPSBub2RlLm5hbWU7XG5cblx0XHRcdGlmIChuYW1lWzBdID09PSAnQCcpIHtcblx0XHRcdFx0bmFtZSA9IHN0YXRlLmdldE5hbWUobmFtZS5zbGljZSgxKSk7XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUubmFtZVswXSA9PT0gJyMnKSB7XG5cdFx0XHRcdGNvbnN0IG93bmVyID0gc3RhdGUuc2NvcGUuZmluZF9vd25lcihub2RlLm5hbWUpO1xuXG5cdFx0XHRcdGlmICghb3duZXIpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIG93bmVyIGZvciBub2RlYCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXN0YXRlLmRlY29uZmxpY3RlZC5oYXMob3duZXIpKSB7XG5cdFx0XHRcdFx0c3RhdGUuZGVjb25mbGljdGVkLnNldChvd25lciwgbmV3IE1hcCgpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGRlY29uZmxpY3RfbWFwID0gc3RhdGUuZGVjb25mbGljdGVkLmdldChvd25lcik7XG5cblx0XHRcdFx0aWYgKCFkZWNvbmZsaWN0X21hcC5oYXMobm9kZS5uYW1lKSkge1xuXHRcdFx0XHRcdGRlY29uZmxpY3RfbWFwLnNldChub2RlLm5hbWUsIGRlY29uZmxpY3Qobm9kZS5uYW1lLnNsaWNlKDEpLCBvd25lci5yZWZlcmVuY2VzKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRuYW1lID0gZGVjb25mbGljdF9tYXAuZ2V0KG5vZGUubmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBbYyhuYW1lLCBub2RlKV07XG5cdFx0fSxcblxuXHRcdExpdGVyYWwobm9kZSwgc3RhdGUpIHtcblx0XHRcdGlmICh0eXBlb2Ygbm9kZS52YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHQvLyBUT0RPIGRvIHdlIG5lZWQgdG8gaGFuZGxlIHdlaXJkIHVuaWNvZGUgY2hhcmFjdGVycyBzb21laG93P1xuXHRcdFx0XHRcdC8vIHN0ci5yZXBsYWNlKC9cXFxcdShcXGR7NH0pL2csIChtLCBuKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuKSlcblx0XHRcdFx0XHRjKEpTT04uc3RyaW5naWZ5KG5vZGUudmFsdWUpLnJlcGxhY2UocmUsIChfbSwgX2ksIGF0LCBoYXNoLCBuYW1lKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoYXQpXHRyZXR1cm4gJ0AnICsgbmFtZTtcblx0XHRcdFx0XHRcdGlmIChoYXNoKSByZXR1cm4gJyMnICsgbmFtZTtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgdGhpcyBzaG91bGRuJ3QgaGFwcGVuYCk7XG5cdFx0XHRcdFx0fSksIG5vZGUpXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHsgcmVnZXggfSA9IG5vZGUgOyAvLyBUT0RPIGlzIHRoaXMgcmlnaHQ/XG5cdFx0XHRpZiAocmVnZXgpIHtcblx0XHRcdFx0cmV0dXJuIFtjKGAvJHtyZWdleC5wYXR0ZXJufS8ke3JlZ2V4LmZsYWdzfWAsIG5vZGUpXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFtjKFN0cmluZyhub2RlLnZhbHVlKSwgbm9kZSldO1xuXHRcdH1cblx0fTtcblxuXHRoYW5kbGVycy5Gb3JPZlN0YXRlbWVudCA9IGhhbmRsZXJzLkZvckluU3RhdGVtZW50O1xuXHRoYW5kbGVycy5GdW5jdGlvbkV4cHJlc3Npb24gPSBoYW5kbGVycy5GdW5jdGlvbkRlY2xhcmF0aW9uO1xuXHRoYW5kbGVycy5DbGFzc0V4cHJlc3Npb24gPSBoYW5kbGVycy5DbGFzc0RlY2xhcmF0aW9uO1xuXHRoYW5kbGVycy5DbGFzc0JvZHkgPSBoYW5kbGVycy5CbG9ja1N0YXRlbWVudDtcblx0aGFuZGxlcnMuU3ByZWFkRWxlbWVudCA9IGhhbmRsZXJzLlJlc3RFbGVtZW50O1xuXHRoYW5kbGVycy5BcnJheVBhdHRlcm4gPSBoYW5kbGVycy5BcnJheUV4cHJlc3Npb247XG5cdGhhbmRsZXJzLkxvZ2ljYWxFeHByZXNzaW9uID0gaGFuZGxlcnMuQmluYXJ5RXhwcmVzc2lvbjtcblx0aGFuZGxlcnMuQXNzaWdubWVudFBhdHRlcm4gPSBoYW5kbGVycy5Bc3NpZ25tZW50RXhwcmVzc2lvbjtcblxuXHRsZXQgYnRvYSA9ICgpID0+IHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGVudmlyb25tZW50OiBgd2luZG93LmJ0b2FgIG9yIGBCdWZmZXJgIHNob3VsZCBiZSBzdXBwb3J0ZWQuJyk7XG5cdH07XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHRidG9hID0gKHN0cikgPT4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0YnRvYSA9IChzdHIpID0+IEJ1ZmZlci5mcm9tKHN0ciwgJ3V0Zi04JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHR9XG5cblxuXG5cblxuXG5cblxuXHRmdW5jdGlvbiBwcmludChub2RlLCBvcHRzID0ge30pIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuXHRcdFx0cmV0dXJuIHByaW50KHtcblx0XHRcdFx0dHlwZTogJ1Byb2dyYW0nLFxuXHRcdFx0XHRib2R5OiBub2RlXG5cdFx0XHR9ICwgb3B0cyk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qge1xuXHRcdFx0Z2V0TmFtZSA9ICh4KSA9PiB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5oYW5kbGVkIHNpZ2lsIEAke3h9YCk7XG5cdFx0XHR9XG5cdFx0fSA9IG9wdHM7XG5cblx0XHRsZXQgeyBtYXA6IHNjb3BlX21hcCwgc2NvcGUgfSA9IGFuYWx5emUobm9kZSk7XG5cdFx0Y29uc3QgZGVjb25mbGljdGVkID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGNvbnN0IGNodW5rcyA9IGhhbmRsZShub2RlLCB7XG5cdFx0XHRpbmRlbnQ6ICcnLFxuXHRcdFx0Z2V0TmFtZSxcblx0XHRcdHNjb3BlLFxuXHRcdFx0c2NvcGVfbWFwLFxuXHRcdFx0ZGVjb25mbGljdGVkLFxuXHRcdFx0Y29tbWVudHM6IFtdXG5cdFx0fSk7XG5cblx0XHRcblxuXHRcdGxldCBjb2RlID0gJyc7XG5cdFx0bGV0IG1hcHBpbmdzID0gW107XG5cdFx0bGV0IGN1cnJlbnRfbGluZSA9IFtdO1xuXHRcdGxldCBjdXJyZW50X2NvbHVtbiA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0Y29uc3QgY2h1bmsgPSBjaHVua3NbaV07XG5cblx0XHRcdGNvZGUgKz0gY2h1bmsuY29udGVudDtcblxuXHRcdFx0aWYgKGNodW5rLmxvYykge1xuXHRcdFx0XHRjdXJyZW50X2xpbmUucHVzaChbXG5cdFx0XHRcdFx0Y3VycmVudF9jb2x1bW4sXG5cdFx0XHRcdFx0MCwgLy8gc291cmNlIGluZGV4IGlzIGFsd2F5cyB6ZXJvXG5cdFx0XHRcdFx0Y2h1bmsubG9jLnN0YXJ0LmxpbmUgLSAxLFxuXHRcdFx0XHRcdGNodW5rLmxvYy5zdGFydC5jb2x1bW4sXG5cdFx0XHRcdF0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rLmNvbnRlbnQubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdFx0aWYgKGNodW5rLmNvbnRlbnRbaV0gPT09ICdcXG4nKSB7XG5cdFx0XHRcdFx0bWFwcGluZ3MucHVzaChjdXJyZW50X2xpbmUpO1xuXHRcdFx0XHRcdGN1cnJlbnRfbGluZSA9IFtdO1xuXHRcdFx0XHRcdGN1cnJlbnRfY29sdW1uID0gMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50X2NvbHVtbiArPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjaHVuay5sb2MpIHtcblx0XHRcdFx0Y3VycmVudF9saW5lLnB1c2goW1xuXHRcdFx0XHRcdGN1cnJlbnRfY29sdW1uLFxuXHRcdFx0XHRcdDAsIC8vIHNvdXJjZSBpbmRleCBpcyBhbHdheXMgemVyb1xuXHRcdFx0XHRcdGNodW5rLmxvYy5lbmQubGluZSAtIDEsXG5cdFx0XHRcdFx0Y2h1bmsubG9jLmVuZC5jb2x1bW4sXG5cdFx0XHRcdF0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hcHBpbmdzLnB1c2goY3VycmVudF9saW5lKTtcblxuXHRcdGNvbnN0IG1hcCA9IHtcblx0XHRcdHZlcnNpb246IDMsXG5cdFx0XHRuYW1lczogW10gLFxuXHRcdFx0c291cmNlczogW29wdHMuc291cmNlTWFwU291cmNlIHx8IG51bGxdLFxuXHRcdFx0c291cmNlc0NvbnRlbnQ6IFtvcHRzLnNvdXJjZU1hcENvbnRlbnQgfHwgbnVsbF0sXG5cdFx0XHRtYXBwaW5nczogZW5jb2RlKG1hcHBpbmdzKVxuXHRcdH07XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhtYXAsIHtcblx0XHRcdHRvU3RyaW5nOiB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHR2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0dG9Vcmw6IHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiBmdW5jdGlvbiB0b1VybCgpIHtcblx0XHRcdFx0XHRyZXR1cm4gJ2RhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYnRvYSh0aGlzLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29kZSxcblx0XHRcdG1hcFxuXHRcdH07XG5cdH1cblxuXHRjb25zdCBzaWdpbHMgPSB7XG5cdFx0J0AnOiAnQVQnLFxuXHRcdCcjJzogJ0hBU0gnXG5cdH07XG5cblx0Y29uc3Qgam9pbiQxID0gKHN0cmluZ3MpID0+IHtcblx0XHRsZXQgc3RyID0gc3RyaW5nc1swXTtcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdHN0ciArPSBgXyR7aWR9XyR7aSAtIDF9XyR7c3RyaW5nc1tpXX1gO1xuXHRcdH1cblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoLyhbQCNdKShcXHcrKS9nLCAoX20sIHNpZ2lsLCBuYW1lKSA9PiBgXyR7aWR9XyR7c2lnaWxzW3NpZ2lsXX1fJHtuYW1lfWApO1xuXHR9O1xuXG5cdGNvbnN0IGZsYXR0ZW5fYm9keSA9IChhcnJheSwgdGFyZ2V0KSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0Y29uc3Qgc3RhdGVtZW50ID0gYXJyYXlbaV07XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShzdGF0ZW1lbnQpKSB7XG5cdFx0XHRcdGZsYXR0ZW5fYm9keShzdGF0ZW1lbnQsIHRhcmdldCk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc3RhdGVtZW50LnR5cGUgPT09ICdFeHByZXNzaW9uU3RhdGVtZW50Jykge1xuXHRcdFx0XHRpZiAoc3RhdGVtZW50LmV4cHJlc3Npb24gPT09IEVNUFRZKSBjb250aW51ZTtcblxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShzdGF0ZW1lbnQuZXhwcmVzc2lvbikpIHtcblx0XHRcdFx0XHQvLyBUT0RPIHRoaXMgaXMgaGFja3RhY3VsYXJcblx0XHRcdFx0XHRsZXQgbm9kZSA9IHN0YXRlbWVudC5leHByZXNzaW9uWzBdO1xuXHRcdFx0XHRcdHdoaWxlIChBcnJheS5pc0FycmF5KG5vZGUpKSBub2RlID0gbm9kZVswXTtcblx0XHRcdFx0XHRpZiAobm9kZSkgbm9kZS5sZWFkaW5nQ29tbWVudHMgPSBzdGF0ZW1lbnQubGVhZGluZ0NvbW1lbnRzO1xuXG5cdFx0XHRcdFx0ZmxhdHRlbl9ib2R5KHN0YXRlbWVudC5leHByZXNzaW9uLCB0YXJnZXQpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKC8oRXhwcmVzc2lvbnxMaXRlcmFsKSQvLnRlc3Qoc3RhdGVtZW50LmV4cHJlc3Npb24udHlwZSkpIHtcblx0XHRcdFx0XHR0YXJnZXQucHVzaChzdGF0ZW1lbnQpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHN0YXRlbWVudC5sZWFkaW5nQ29tbWVudHMpIHN0YXRlbWVudC5leHByZXNzaW9uLmxlYWRpbmdDb21tZW50cyA9IHN0YXRlbWVudC5sZWFkaW5nQ29tbWVudHM7XG5cdFx0XHRcdGlmIChzdGF0ZW1lbnQudHJhaWxpbmdDb21tZW50cykgc3RhdGVtZW50LmV4cHJlc3Npb24udHJhaWxpbmdDb21tZW50cyA9IHN0YXRlbWVudC50cmFpbGluZ0NvbW1lbnRzO1xuXG5cdFx0XHRcdHRhcmdldC5wdXNoKHN0YXRlbWVudC5leHByZXNzaW9uKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5wdXNoKHN0YXRlbWVudCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fTtcblxuXHRjb25zdCBmbGF0dGVuX3Byb3BlcnRpZXMgPSAoYXJyYXksIHRhcmdldCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gYXJyYXlbaV07XG5cblx0XHRcdGlmIChwcm9wZXJ0eS52YWx1ZSA9PT0gRU1QVFkpIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiAocHJvcGVydHkua2V5ID09PSBwcm9wZXJ0eS52YWx1ZSAmJiBBcnJheS5pc0FycmF5KHByb3BlcnR5LmtleSkpIHtcblx0XHRcdFx0ZmxhdHRlbl9wcm9wZXJ0aWVzKHByb3BlcnR5LmtleSwgdGFyZ2V0KTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5wdXNoKHByb3BlcnR5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9O1xuXG5cdGNvbnN0IGZsYXR0ZW4gPSAobm9kZXMsIHRhcmdldCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblxuXHRcdFx0aWYgKG5vZGUgPT09IEVNUFRZKSBjb250aW51ZTtcblxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcblx0XHRcdFx0ZmxhdHRlbihub2RlLCB0YXJnZXQpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dGFyZ2V0LnB1c2gobm9kZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fTtcblxuXHRjb25zdCBFTVBUWSA9IHsgdHlwZTogJ0VtcHR5JyB9O1xuXG5cdGNvbnN0IGFjb3JuX29wdHMgPSAoY29tbWVudHMsIHJhdykgPT4ge1xuXHRcdGNvbnN0IHsgb25Db21tZW50IH0gPSBnZXRfY29tbWVudF9oYW5kbGVycyhjb21tZW50cywgcmF3KTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZWNtYVZlcnNpb246IDIwMjAsXG5cdFx0XHRzb3VyY2VUeXBlOiAnbW9kdWxlJyxcblx0XHRcdGFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb246IHRydWUsXG5cdFx0XHRhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IHRydWUsXG5cdFx0XHRhbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbjogdHJ1ZSxcblx0XHRcdG9uQ29tbWVudFxuXHRcdH0gO1xuXHR9O1xuXG5cdGNvbnN0IGluamVjdCA9IChyYXcsIG5vZGUsIHZhbHVlcywgY29tbWVudHMpID0+IHtcblx0XHRjb21tZW50cy5mb3JFYWNoKGNvbW1lbnQgPT4ge1xuXHRcdFx0Y29tbWVudC52YWx1ZSA9IGNvbW1lbnQudmFsdWUucmVwbGFjZShyZSwgKG0sIGkpID0+ICtpIGluIHZhbHVlcyA/IHZhbHVlc1sraV0gOiBtKTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IHsgZW50ZXIsIGxlYXZlIH0gPSBnZXRfY29tbWVudF9oYW5kbGVycyhjb21tZW50cywgcmF3KTtcblxuXHRcdHdhbGsobm9kZSwge1xuXHRcdFx0ZW50ZXIsXG5cblx0XHRcdGxlYXZlKG5vZGUsIHBhcmVudCwga2V5LCBpbmRleCkge1xuXHRcdFx0XHRpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0XHRcdFx0XHRyZS5sYXN0SW5kZXggPSAwO1xuXHRcdFx0XHRcdGNvbnN0IG1hdGNoID0gcmUuZXhlYyhub2RlLm5hbWUpO1xuXG5cdFx0XHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdFx0XHRpZiAobWF0Y2hbMV0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCttYXRjaFsxXSBpbiB2YWx1ZXMpIHtcblx0XHRcdFx0XHRcdFx0XHRsZXQgdmFsdWUgPSB2YWx1ZXNbK21hdGNoWzFdXTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiB2YWx1ZSwgbGVhZGluZ0NvbW1lbnRzOiBub2RlLmxlYWRpbmdDb21tZW50cywgdHJhaWxpbmdDb21tZW50czogbm9kZS50cmFpbGluZ0NvbW1lbnRzIH07XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHsgdHlwZTogJ0xpdGVyYWwnLCB2YWx1ZSwgbGVhZGluZ0NvbW1lbnRzOiBub2RlLmxlYWRpbmdDb21tZW50cywgdHJhaWxpbmdDb21tZW50czogbm9kZS50cmFpbGluZ0NvbW1lbnRzIH07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5yZXBsYWNlKHZhbHVlIHx8IEVNUFRZKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0bm9kZS5uYW1lID0gYCR7bWF0Y2hbMl0gPyBgQGAgOiBgI2B9JHttYXRjaFs0XX1gO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChub2RlLnR5cGUgPT09ICdMaXRlcmFsJykge1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygbm9kZS52YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdHJlLmxhc3RJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRub2RlLnZhbHVlID0gbm9kZS52YWx1ZS5yZXBsYWNlKHJlLCAobSwgaSkgPT4gK2kgaW4gdmFsdWVzID8gdmFsdWVzWytpXSA6IG0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChub2RlLnR5cGUgPT09ICdUZW1wbGF0ZUVsZW1lbnQnKSB7XG5cdFx0XHRcdFx0cmUubGFzdEluZGV4ID0gMDtcblx0XHRcdFx0XHRub2RlLnZhbHVlLnJhdyA9IChub2RlLnZhbHVlLnJhdyApLnJlcGxhY2UocmUsIChtLCBpKSA9PiAraSBpbiB2YWx1ZXMgPyB2YWx1ZXNbK2ldIDogbSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobm9kZS50eXBlID09PSAnUHJvZ3JhbScgfHwgbm9kZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdFx0bm9kZS5ib2R5ID0gZmxhdHRlbl9ib2R5KG5vZGUuYm9keSwgW10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ09iamVjdEV4cHJlc3Npb24nIHx8IG5vZGUudHlwZSA9PT0gJ09iamVjdFBhdHRlcm4nKSB7XG5cdFx0XHRcdFx0bm9kZS5wcm9wZXJ0aWVzID0gZmxhdHRlbl9wcm9wZXJ0aWVzKG5vZGUucHJvcGVydGllcywgW10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ0FycmF5RXhwcmVzc2lvbicgfHwgbm9kZS50eXBlID09PSAnQXJyYXlQYXR0ZXJuJykge1xuXHRcdFx0XHRcdG5vZGUuZWxlbWVudHMgPSBmbGF0dGVuKG5vZGUuZWxlbWVudHMsIFtdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChub2RlLnR5cGUgPT09ICdGdW5jdGlvbkV4cHJlc3Npb24nIHx8IG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nIHx8IG5vZGUudHlwZSA9PT0gJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJykge1xuXHRcdFx0XHRcdG5vZGUucGFyYW1zID0gZmxhdHRlbihub2RlLnBhcmFtcywgW10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ0NhbGxFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdOZXdFeHByZXNzaW9uJykge1xuXHRcdFx0XHRcdG5vZGUuYXJndW1lbnRzID0gZmxhdHRlbihub2RlLmFyZ3VtZW50cywgW10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5vZGUudHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJyB8fCBub2RlLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJykge1xuXHRcdFx0XHRcdG5vZGUuc3BlY2lmaWVycyA9IGZsYXR0ZW4obm9kZS5zcGVjaWZpZXJzLCBbXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobm9kZS50eXBlID09PSAnRm9yU3RhdGVtZW50Jykge1xuXHRcdFx0XHRcdG5vZGUuaW5pdCA9IG5vZGUuaW5pdCA9PT0gRU1QVFkgPyBudWxsIDogbm9kZS5pbml0O1xuXHRcdFx0XHRcdG5vZGUudGVzdCA9IG5vZGUudGVzdCA9PT0gRU1QVFkgPyBudWxsIDogbm9kZS50ZXN0O1xuXHRcdFx0XHRcdG5vZGUudXBkYXRlID0gbm9kZS51cGRhdGUgPT09IEVNUFRZID8gbnVsbCA6IG5vZGUudXBkYXRlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGVhdmUobm9kZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gYihzdHJpbmdzLCAuLi52YWx1ZXMpIHtcblx0XHRjb25zdCBzdHIgPSBqb2luJDEoc3RyaW5ncyk7XG5cdFx0Y29uc3QgY29tbWVudHMgPSBbXTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBhc3QgPSBwYXJzZShzdHIsICBhY29ybl9vcHRzKGNvbW1lbnRzLCBzdHIpKTtcblxuXHRcdFx0aW5qZWN0KHN0ciwgYXN0LCB2YWx1ZXMsIGNvbW1lbnRzKTtcblxuXHRcdFx0cmV0dXJuIGFzdC5ib2R5O1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0aGFuZGxlX2Vycm9yKHN0ciwgZXJyKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB4KHN0cmluZ3MsIC4uLnZhbHVlcykge1xuXHRcdGNvbnN0IHN0ciA9IGpvaW4kMShzdHJpbmdzKTtcblx0XHRjb25zdCBjb21tZW50cyA9IFtdO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGV4cHJlc3Npb24gPSBwYXJzZUV4cHJlc3Npb25BdChzdHIsIDAsIGFjb3JuX29wdHMoY29tbWVudHMsIHN0cikpIDtcblx0XHRcdGNvbnN0IG1hdGNoID0gL1xcUysvLmV4ZWMoc3RyLnNsaWNlKChleHByZXNzaW9uICkuZW5kKSk7XG5cdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHRva2VuICcke21hdGNoWzBdfSdgKTtcblx0XHRcdH1cblxuXHRcdFx0aW5qZWN0KHN0ciwgZXhwcmVzc2lvbiwgdmFsdWVzLCBjb21tZW50cyk7XG5cblx0XHRcdHJldHVybiBleHByZXNzaW9uO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0aGFuZGxlX2Vycm9yKHN0ciwgZXJyKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBwKHN0cmluZ3MsIC4uLnZhbHVlcykge1xuXHRcdGNvbnN0IHN0ciA9IGB7JHtqb2luJDEoc3RyaW5ncyl9fWA7XG5cdFx0Y29uc3QgY29tbWVudHMgPSBbXTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBleHByZXNzaW9uID0gcGFyc2VFeHByZXNzaW9uQXQoc3RyLCAwLCBhY29ybl9vcHRzKGNvbW1lbnRzLCBzdHIpKSA7XG5cblx0XHRcdGluamVjdChzdHIsIGV4cHJlc3Npb24sIHZhbHVlcywgY29tbWVudHMpO1xuXG5cdFx0XHRyZXR1cm4gZXhwcmVzc2lvbi5wcm9wZXJ0aWVzWzBdO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0aGFuZGxlX2Vycm9yKHN0ciwgZXJyKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVfZXJyb3Ioc3RyLCBlcnIpIHtcblx0XHQvLyBUT0RPIGxvY2F0aW9uL2NvZGUgZnJhbWVcblxuXHRcdHJlLmxhc3RJbmRleCA9IDA7XG5cblx0XHRzdHIgPSBzdHIucmVwbGFjZShyZSwgKG0sIGksIGF0LCBoYXNoLCBuYW1lKSA9PiB7XG5cdFx0XHRpZiAoYXQpIHJldHVybiBgQCR7bmFtZX1gO1xuXHRcdFx0aWYgKGhhc2gpIHJldHVybiBgIyR7bmFtZX1gO1xuXG5cdFx0XHRyZXR1cm4gJyR7Li4ufSc7XG5cdFx0fSk7XG5cblx0XHRjb25zb2xlLmxvZyhgZmFpbGVkIHRvIHBhcnNlOlxcbiR7c3RyfWApO1xuXHRcdHRocm93IGVycjtcblx0fVxuXG5cdGNvbnN0IHBhcnNlJDEgPSAoc291cmNlLCBvcHRzKSA9PiB7XG5cdFx0Y29uc3QgY29tbWVudHMgPSBbXTtcblx0XHRjb25zdCB7IG9uQ29tbWVudCwgZW50ZXIsIGxlYXZlIH0gPSBnZXRfY29tbWVudF9oYW5kbGVycyhjb21tZW50cywgc291cmNlKTtcblx0XHRjb25zdCBhc3QgPSBwYXJzZShzb3VyY2UsIHsgb25Db21tZW50LCAuLi5vcHRzIH0pO1xuXHRcdHdhbGsoYXN0ICwgeyBlbnRlciwgbGVhdmUgfSk7XG5cdFx0cmV0dXJuIGFzdDtcblx0fTtcblxuXHRjb25zdCBwYXJzZUV4cHJlc3Npb25BdCQxID0gKHNvdXJjZSwgaW5kZXgsIG9wdHMpID0+IHtcblx0XHRjb25zdCBjb21tZW50cyA9IFtdO1xuXHRcdGNvbnN0IHsgb25Db21tZW50LCBlbnRlciwgbGVhdmUgfSA9IGdldF9jb21tZW50X2hhbmRsZXJzKGNvbW1lbnRzLCBzb3VyY2UpO1xuXHRcdGNvbnN0IGFzdCA9IHBhcnNlRXhwcmVzc2lvbkF0KHNvdXJjZSwgaW5kZXgsIHsgb25Db21tZW50LCAuLi5vcHRzIH0pO1xuXHRcdHdhbGsoYXN0ICwgeyBlbnRlciwgbGVhdmUgfSk7XG5cdFx0cmV0dXJuIGFzdDtcblx0fTtcblxuXHRjb25zdCBwYXJzZSQyID0gKHNvdXJjZSkgPT4gcGFyc2UkMShzb3VyY2UsIHtcblx0ICAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnLFxuXHQgICAgZWNtYVZlcnNpb246IDExLFxuXHQgICAgbG9jYXRpb25zOiB0cnVlXG5cdH0pO1xuXHRjb25zdCBwYXJzZV9leHByZXNzaW9uX2F0ID0gKHNvdXJjZSwgaW5kZXgpID0+IHBhcnNlRXhwcmVzc2lvbkF0JDEoc291cmNlLCBpbmRleCwge1xuXHQgICAgZWNtYVZlcnNpb246IDExLFxuXHQgICAgbG9jYXRpb25zOiB0cnVlXG5cdH0pO1xuXG5cdGNvbnN0IHdoaXRlc3BhY2UgPSAvWyBcXHRcXHJcXG5dLztcblx0Y29uc3QgZGltZW5zaW9ucyA9IC9eKD86b2Zmc2V0fGNsaWVudCkoPzpXaWR0aHxIZWlnaHQpJC87XG5cblx0ZnVuY3Rpb24gcmVhZF9leHByZXNzaW9uKHBhcnNlcikge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICBjb25zdCBub2RlID0gcGFyc2VfZXhwcmVzc2lvbl9hdChwYXJzZXIudGVtcGxhdGUsIHBhcnNlci5pbmRleCk7XG5cdCAgICAgICAgbGV0IG51bV9wYXJlbnMgPSAwO1xuXHQgICAgICAgIGZvciAobGV0IGkgPSBwYXJzZXIuaW5kZXg7IGkgPCBub2RlLnN0YXJ0OyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgaWYgKHBhcnNlci50ZW1wbGF0ZVtpXSA9PT0gJygnKVxuXHQgICAgICAgICAgICAgICAgbnVtX3BhcmVucyArPSAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBsZXQgaW5kZXggPSBub2RlLmVuZDtcblx0ICAgICAgICB3aGlsZSAobnVtX3BhcmVucyA+IDApIHtcblx0ICAgICAgICAgICAgY29uc3QgY2hhciA9IHBhcnNlci50ZW1wbGF0ZVtpbmRleF07XG5cdCAgICAgICAgICAgIGlmIChjaGFyID09PSAnKScpIHtcblx0ICAgICAgICAgICAgICAgIG51bV9wYXJlbnMgLT0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZS50ZXN0KGNoYXIpKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6ICd1bmV4cGVjdGVkLXRva2VuJyxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXhwZWN0ZWQgKSdcblx0ICAgICAgICAgICAgICAgIH0sIGluZGV4KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpbmRleCArPSAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJzZXIuaW5kZXggPSBpbmRleDtcblx0ICAgICAgICByZXR1cm4gbm9kZTtcblx0ICAgIH1cblx0ICAgIGNhdGNoIChlcnIpIHtcblx0ICAgICAgICBwYXJzZXIuYWNvcm5fZXJyb3IoZXJyKTtcblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IHNjcmlwdF9jbG9zaW5nX3RhZyA9ICc8L3NjcmlwdD4nO1xuXHRmdW5jdGlvbiBnZXRfY29udGV4dChwYXJzZXIsIGF0dHJpYnV0ZXMsIHN0YXJ0KSB7XG5cdCAgICBjb25zdCBjb250ZXh0ID0gYXR0cmlidXRlcy5maW5kKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUubmFtZSA9PT0gJ2NvbnRleHQnKTtcblx0ICAgIGlmICghY29udGV4dClcblx0ICAgICAgICByZXR1cm4gJ2RlZmF1bHQnO1xuXHQgICAgaWYgKGNvbnRleHQudmFsdWUubGVuZ3RoICE9PSAxIHx8IGNvbnRleHQudmFsdWVbMF0udHlwZSAhPT0gJ1RleHQnKSB7XG5cdCAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgY29kZTogJ2ludmFsaWQtc2NyaXB0Jyxcblx0ICAgICAgICAgICAgbWVzc2FnZTogYGNvbnRleHQgYXR0cmlidXRlIG11c3QgYmUgc3RhdGljYFxuXHQgICAgICAgIH0sIHN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIGNvbnN0IHZhbHVlID0gY29udGV4dC52YWx1ZVswXS5kYXRhO1xuXHQgICAgaWYgKHZhbHVlICE9PSAnbW9kdWxlJykge1xuXHQgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXNjcmlwdGAsXG5cdCAgICAgICAgICAgIG1lc3NhZ2U6IGBJZiB0aGUgY29udGV4dCBhdHRyaWJ1dGUgaXMgc3VwcGxpZWQsIGl0cyB2YWx1ZSBtdXN0IGJlIFwibW9kdWxlXCJgXG5cdCAgICAgICAgfSwgY29udGV4dC5zdGFydCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdmFsdWU7XG5cdH1cblx0ZnVuY3Rpb24gcmVhZF9zY3JpcHQocGFyc2VyLCBzdGFydCwgYXR0cmlidXRlcykge1xuXHQgICAgY29uc3Qgc2NyaXB0X3N0YXJ0ID0gcGFyc2VyLmluZGV4O1xuXHQgICAgY29uc3Qgc2NyaXB0X2VuZCA9IHBhcnNlci50ZW1wbGF0ZS5pbmRleE9mKHNjcmlwdF9jbG9zaW5nX3RhZywgc2NyaXB0X3N0YXJ0KTtcblx0ICAgIGlmIChzY3JpcHRfZW5kID09PSAtMSlcblx0ICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICBjb2RlOiBgdW5jbG9zZWQtc2NyaXB0YCxcblx0ICAgICAgICAgICAgbWVzc2FnZTogYDxzY3JpcHQ+IG11c3QgaGF2ZSBhIGNsb3NpbmcgdGFnYFxuXHQgICAgICAgIH0pO1xuXHQgICAgY29uc3Qgc291cmNlID0gcGFyc2VyLnRlbXBsYXRlLnNsaWNlKDAsIHNjcmlwdF9zdGFydCkucmVwbGFjZSgvW15cXG5dL2csICcgJykgK1xuXHQgICAgICAgIHBhcnNlci50ZW1wbGF0ZS5zbGljZShzY3JpcHRfc3RhcnQsIHNjcmlwdF9lbmQpO1xuXHQgICAgcGFyc2VyLmluZGV4ID0gc2NyaXB0X2VuZCArIHNjcmlwdF9jbG9zaW5nX3RhZy5sZW5ndGg7XG5cdCAgICBsZXQgYXN0O1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICBhc3QgPSBwYXJzZSQyKHNvdXJjZSk7XG5cdCAgICB9XG5cdCAgICBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgcGFyc2VyLmFjb3JuX2Vycm9yKGVycik7XG5cdCAgICB9XG5cdCAgICAvLyBUT0RPIGlzIHRoaXMgbmVjZXNzYXJ5P1xuXHQgICAgYXN0LnN0YXJ0ID0gc2NyaXB0X3N0YXJ0O1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICB0eXBlOiAnU2NyaXB0Jyxcblx0ICAgICAgICBzdGFydCxcblx0ICAgICAgICBlbmQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICBjb250ZXh0OiBnZXRfY29udGV4dChwYXJzZXIsIGF0dHJpYnV0ZXMsIHN0YXJ0KSxcblx0ICAgICAgICBjb250ZW50OiBhc3QsXG5cdCAgICB9O1xuXHR9XG5cblx0dmFyIE1BWF9MSU5FX0xFTkdUSCA9IDEwMDtcblx0dmFyIE9GRlNFVF9DT1JSRUNUSU9OID0gNjA7XG5cdHZhciBUQUJfUkVQTEFDRU1FTlQgPSAnICAgICc7XG5cblx0ZnVuY3Rpb24gc291cmNlRnJhZ21lbnQoZXJyb3IsIGV4dHJhTGluZXMpIHtcblx0ICAgIGZ1bmN0aW9uIHByb2Nlc3NMaW5lcyhzdGFydCwgZW5kKSB7XG5cdCAgICAgICAgcmV0dXJuIGxpbmVzLnNsaWNlKHN0YXJ0LCBlbmQpLm1hcChmdW5jdGlvbihsaW5lLCBpZHgpIHtcblx0ICAgICAgICAgICAgdmFyIG51bSA9IFN0cmluZyhzdGFydCArIGlkeCArIDEpO1xuXG5cdCAgICAgICAgICAgIHdoaWxlIChudW0ubGVuZ3RoIDwgbWF4TnVtTGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICBudW0gPSAnICcgKyBudW07XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbnVtICsgJyB8JyArIGxpbmU7XG5cdCAgICAgICAgfSkuam9pbignXFxuJyk7XG5cdCAgICB9XG5cblx0ICAgIHZhciBsaW5lcyA9IGVycm9yLnNvdXJjZS5zcGxpdCgvXFxufFxcclxcbj98XFxmLyk7XG5cdCAgICB2YXIgbGluZSA9IGVycm9yLmxpbmU7XG5cdCAgICB2YXIgY29sdW1uID0gZXJyb3IuY29sdW1uO1xuXHQgICAgdmFyIHN0YXJ0TGluZSA9IE1hdGgubWF4KDEsIGxpbmUgLSBleHRyYUxpbmVzKSAtIDE7XG5cdCAgICB2YXIgZW5kTGluZSA9IE1hdGgubWluKGxpbmUgKyBleHRyYUxpbmVzLCBsaW5lcy5sZW5ndGggKyAxKTtcblx0ICAgIHZhciBtYXhOdW1MZW5ndGggPSBNYXRoLm1heCg0LCBTdHJpbmcoZW5kTGluZSkubGVuZ3RoKSArIDE7XG5cdCAgICB2YXIgY3V0TGVmdCA9IDA7XG5cblx0ICAgIC8vIGNvcnJlY3QgY29sdW1uIGFjY29yZGluZyB0byByZXBsYWNlZCB0YWIgYmVmb3JlIGNvbHVtblxuXHQgICAgY29sdW1uICs9IChUQUJfUkVQTEFDRU1FTlQubGVuZ3RoIC0gMSkgKiAobGluZXNbbGluZSAtIDFdLnN1YnN0cigwLCBjb2x1bW4gLSAxKS5tYXRjaCgvXFx0L2cpIHx8IFtdKS5sZW5ndGg7XG5cblx0ICAgIGlmIChjb2x1bW4gPiBNQVhfTElORV9MRU5HVEgpIHtcblx0ICAgICAgICBjdXRMZWZ0ID0gY29sdW1uIC0gT0ZGU0VUX0NPUlJFQ1RJT04gKyAzO1xuXHQgICAgICAgIGNvbHVtbiA9IE9GRlNFVF9DT1JSRUNUSU9OIC0gMjtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgaSA9IHN0YXJ0TGluZTsgaSA8PSBlbmRMaW5lOyBpKyspIHtcblx0ICAgICAgICBpZiAoaSA+PSAwICYmIGkgPCBsaW5lcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgbGluZXNbaV0gPSBsaW5lc1tpXS5yZXBsYWNlKC9cXHQvZywgVEFCX1JFUExBQ0VNRU5UKTtcblx0ICAgICAgICAgICAgbGluZXNbaV0gPVxuXHQgICAgICAgICAgICAgICAgKGN1dExlZnQgPiAwICYmIGxpbmVzW2ldLmxlbmd0aCA+IGN1dExlZnQgPyAnXFx1MjAyNicgOiAnJykgK1xuXHQgICAgICAgICAgICAgICAgbGluZXNbaV0uc3Vic3RyKGN1dExlZnQsIE1BWF9MSU5FX0xFTkdUSCAtIDIpICtcblx0ICAgICAgICAgICAgICAgIChsaW5lc1tpXS5sZW5ndGggPiBjdXRMZWZ0ICsgTUFYX0xJTkVfTEVOR1RIIC0gMSA/ICdcXHUyMDI2JyA6ICcnKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBbXG5cdCAgICAgICAgcHJvY2Vzc0xpbmVzKHN0YXJ0TGluZSwgbGluZSksXG5cdCAgICAgICAgbmV3IEFycmF5KGNvbHVtbiArIG1heE51bUxlbmd0aCArIDIpLmpvaW4oJy0nKSArICdeJyxcblx0ICAgICAgICBwcm9jZXNzTGluZXMobGluZSwgZW5kTGluZSlcblx0ICAgIF0uam9pbignXFxuJyk7XG5cdH1cblxuXHR2YXIgQ3NzU3ludGF4RXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlLCBzb3VyY2UsIG9mZnNldCwgbGluZSwgY29sdW1uKSB7XG5cdCAgICAvLyBzb21lIFZNcyBwcmV2ZW50IHNldHRpbmcgbGluZS9jb2x1bW4gb3RoZXJ3aXNlIChpT1MgU2FmYXJpIDEwIGV2ZW4gdGhyb3cgYW4gZXhjZXB0aW9uKVxuXHQgICAgdmFyIGVycm9yID0gT2JqZWN0LmNyZWF0ZShTeW50YXhFcnJvci5wcm90b3R5cGUpO1xuXG5cdCAgICBlcnJvci5uYW1lID0gJ0Nzc1N5bnRheEVycm9yJztcblx0ICAgIGVycm9yLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHQgICAgZXJyb3Iuc3RhY2sgPSAobmV3IEVycm9yKCkuc3RhY2sgfHwgJycpLnJlcGxhY2UoL14uK1xcbi8sIGVycm9yLm5hbWUgKyAnOiAnICsgZXJyb3IubWVzc2FnZSArICdcXG4nKTtcblx0ICAgIGVycm9yLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIGVycm9yLm9mZnNldCA9IG9mZnNldDtcblx0ICAgIGVycm9yLmxpbmUgPSBsaW5lO1xuXHQgICAgZXJyb3IuY29sdW1uID0gY29sdW1uO1xuXG5cdCAgICBlcnJvci5zb3VyY2VGcmFnbWVudCA9IGZ1bmN0aW9uKGV4dHJhTGluZXMpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlRnJhZ21lbnQoZXJyb3IsIGlzTmFOKGV4dHJhTGluZXMpID8gMCA6IGV4dHJhTGluZXMpO1xuXHQgICAgfTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ2Zvcm1hdHRlZE1lc3NhZ2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIChcblx0ICAgICAgICAgICAgICAgICdQYXJzZSBlcnJvcjogJyArIGVycm9yLm1lc3NhZ2UgKyAnXFxuJyArXG5cdCAgICAgICAgICAgICAgICBzb3VyY2VGcmFnbWVudChlcnJvciwgMilcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLy8gZm9yIGJhY2t3YXJkIGNhcGFiaWxpdHlcblx0ICAgIGVycm9yLnBhcnNlRXJyb3IgPSB7XG5cdCAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG5cdCAgICAgICAgbGluZTogbGluZSxcblx0ICAgICAgICBjb2x1bW46IGNvbHVtblxuXHQgICAgfTtcblxuXHQgICAgcmV0dXJuIGVycm9yO1xuXHR9O1xuXG5cdHZhciBlcnJvciA9IENzc1N5bnRheEVycm9yO1xuXG5cdC8vIHRva2VuIHR5cGVzIChub3RlOiB2YWx1ZSBzaG91bGRuJ3QgaW50ZXJzZWN0IHdpdGggdXNlZCBjaGFyIGNvZGVzKVxuXHR2YXIgV0hJVEVTUEFDRSA9IDE7XG5cdHZhciBJREVOVElGSUVSID0gMjtcblx0dmFyIE5VTUJFUiA9IDM7XG5cdHZhciBTVFJJTkcgPSA0O1xuXHR2YXIgQ09NTUVOVCA9IDU7XG5cdHZhciBQVU5DVFVBVE9SID0gNjtcblx0dmFyIENETyA9IDc7XG5cdHZhciBDREMgPSA4O1xuXHR2YXIgQVRSVUxFID0gMTQ7XG5cdHZhciBGVU5DVElPTiA9IDE1O1xuXHR2YXIgVVJMID0gMTY7XG5cdHZhciBSQVcgPSAxNztcblxuXHR2YXIgVEFCID0gOTtcblx0dmFyIE4gPSAxMDtcblx0dmFyIEYgPSAxMjtcblx0dmFyIFIgPSAxMztcblx0dmFyIFNQQUNFID0gMzI7XG5cblx0dmFyIFRZUEUgPSB7XG5cdCAgICBXaGl0ZVNwYWNlOiAgIFdISVRFU1BBQ0UsXG5cdCAgICBJZGVudGlmaWVyOiAgIElERU5USUZJRVIsXG5cdCAgICBOdW1iZXI6ICAgICAgICAgICBOVU1CRVIsXG5cdCAgICBTdHJpbmc6ICAgICAgICAgICBTVFJJTkcsXG5cdCAgICBDb21tZW50OiAgICAgICAgIENPTU1FTlQsXG5cdCAgICBQdW5jdHVhdG9yOiAgIFBVTkNUVUFUT1IsXG5cdCAgICBDRE86ICAgICAgICAgICAgICAgICBDRE8sXG5cdCAgICBDREM6ICAgICAgICAgICAgICAgICBDREMsXG5cdCAgICBBdHJ1bGU6ICAgICAgICAgICBBVFJVTEUsXG5cdCAgICBGdW5jdGlvbjogICAgICAgRlVOQ1RJT04sXG5cdCAgICBVcmw6ICAgICAgICAgICAgICAgICBVUkwsXG5cdCAgICBSYXc6ICAgICAgICAgICAgICAgICBSQVcsXG5cblx0ICAgIEV4Y2xhbWF0aW9uTWFyazogICAgICAzMywgIC8vICFcblx0ICAgIFF1b3RhdGlvbk1hcms6ICAgICAgICAzNCwgIC8vIFwiXG5cdCAgICBOdW1iZXJTaWduOiAgICAgICAgICAgMzUsICAvLyAjXG5cdCAgICBEb2xsYXJTaWduOiAgICAgICAgICAgMzYsICAvLyAkXG5cdCAgICBQZXJjZW50U2lnbjogICAgICAgICAgMzcsICAvLyAlXG5cdCAgICBBbXBlcnNhbmQ6ICAgICAgICAgICAgMzgsICAvLyAmXG5cdCAgICBBcG9zdHJvcGhlOiAgICAgICAgICAgMzksICAvLyAnXG5cdCAgICBMZWZ0UGFyZW50aGVzaXM6ICAgICAgNDAsICAvLyAoXG5cdCAgICBSaWdodFBhcmVudGhlc2lzOiAgICAgNDEsICAvLyApXG5cdCAgICBBc3RlcmlzazogICAgICAgICAgICAgNDIsICAvLyAqXG5cdCAgICBQbHVzU2lnbjogICAgICAgICAgICAgNDMsICAvLyArXG5cdCAgICBDb21tYTogICAgICAgICAgICAgICAgNDQsICAvLyAsXG5cdCAgICBIeXBoZW5NaW51czogICAgICAgICAgNDUsICAvLyAtXG5cdCAgICBGdWxsU3RvcDogICAgICAgICAgICAgNDYsICAvLyAuXG5cdCAgICBTb2xpZHVzOiAgICAgICAgICAgICAgNDcsICAvLyAvXG5cdCAgICBDb2xvbjogICAgICAgICAgICAgICAgNTgsICAvLyA6XG5cdCAgICBTZW1pY29sb246ICAgICAgICAgICAgNTksICAvLyA7XG5cdCAgICBMZXNzVGhhblNpZ246ICAgICAgICAgNjAsICAvLyA8XG5cdCAgICBFcXVhbHNTaWduOiAgICAgICAgICAgNjEsICAvLyA9XG5cdCAgICBHcmVhdGVyVGhhblNpZ246ICAgICAgNjIsICAvLyA+XG5cdCAgICBRdWVzdGlvbk1hcms6ICAgICAgICAgNjMsICAvLyA/XG5cdCAgICBDb21tZXJjaWFsQXQ6ICAgICAgICAgNjQsICAvLyBAXG5cdCAgICBMZWZ0U3F1YXJlQnJhY2tldDogICAgOTEsICAvLyBbXG5cdCAgICBCYWNrc2xhc2g6ICAgICAgICAgICAgOTIsICAvLyBcXFxuXHQgICAgUmlnaHRTcXVhcmVCcmFja2V0OiAgIDkzLCAgLy8gXVxuXHQgICAgQ2lyY3VtZmxleEFjY2VudDogICAgIDk0LCAgLy8gXlxuXHQgICAgTG93TGluZTogICAgICAgICAgICAgIDk1LCAgLy8gX1xuXHQgICAgR3JhdmVBY2NlbnQ6ICAgICAgICAgIDk2LCAgLy8gYFxuXHQgICAgTGVmdEN1cmx5QnJhY2tldDogICAgMTIzLCAgLy8ge1xuXHQgICAgVmVydGljYWxMaW5lOiAgICAgICAgMTI0LCAgLy8gfFxuXHQgICAgUmlnaHRDdXJseUJyYWNrZXQ6ICAgMTI1LCAgLy8gfVxuXHQgICAgVGlsZGU6ICAgICAgICAgICAgICAgMTI2ICAgLy8gflxuXHR9O1xuXG5cdHZhciBOQU1FID0gT2JqZWN0LmtleXMoVFlQRSkucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7XG5cdCAgICByZXN1bHRbVFlQRVtrZXldXSA9IGtleTtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH0sIHt9KTtcblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jdG9rZW5pemVyLWRlZmluaXRpb25zXG5cdC8vID4gbm9uLUFTQ0lJIGNvZGUgcG9pbnRcblx0Ly8gPiAgIEEgY29kZSBwb2ludCB3aXRoIGEgdmFsdWUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIFUrMDA4MCA8Y29udHJvbD5cblx0Ly8gPiBuYW1lLXN0YXJ0IGNvZGUgcG9pbnRcblx0Ly8gPiAgIEEgbGV0dGVyLCBhIG5vbi1BU0NJSSBjb2RlIHBvaW50LCBvciBVKzAwNUYgTE9XIExJTkUgKF8pLlxuXHQvLyA+IG5hbWUgY29kZSBwb2ludFxuXHQvLyA+ICAgQSBuYW1lLXN0YXJ0IGNvZGUgcG9pbnQsIGEgZGlnaXQsIG9yIFUrMDAyRCBIWVBIRU4tTUlOVVMgKC0pXG5cdC8vIFRoYXQgbWVhbnMgb25seSBBU0NJSSBjb2RlIHBvaW50cyBoYXMgYSBzcGVjaWFsIG1lYW5pbmcgYW5kIHdlIGEgbWFwcyBmb3IgMC4uMTI3IGNvZGVzIG9ubHlcblx0dmFyIFNhZmVVaW50MzJBcnJheSA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50MzJBcnJheSA6IEFycmF5OyAvLyBmYWxsYmFjayBvbiBBcnJheSB3aGVuIFR5cGVkQXJyYXkgaXMgbm90IHN1cHBvcnRlZFxuXHR2YXIgU1lNQk9MX1RZUEUgPSBuZXcgU2FmZVVpbnQzMkFycmF5KDB4ODApO1xuXHR2YXIgUFVOQ1RVQVRJT04gPSBuZXcgU2FmZVVpbnQzMkFycmF5KDB4ODApO1xuXHR2YXIgU1RPUF9VUkxfUkFXID0gbmV3IFNhZmVVaW50MzJBcnJheSgweDgwKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IFNZTUJPTF9UWVBFLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBTWU1CT0xfVFlQRVtpXSA9IElERU5USUZJRVI7XG5cdH1cblxuXHQvLyBmaWxsIGNhdGVnb3JpZXNcblx0W1xuXHQgICAgVFlQRS5FeGNsYW1hdGlvbk1hcmssICAgIC8vICFcblx0ICAgIFRZUEUuUXVvdGF0aW9uTWFyaywgICAgICAvLyBcIlxuXHQgICAgVFlQRS5OdW1iZXJTaWduLCAgICAgICAgIC8vICNcblx0ICAgIFRZUEUuRG9sbGFyU2lnbiwgICAgICAgICAvLyAkXG5cdCAgICBUWVBFLlBlcmNlbnRTaWduLCAgICAgICAgLy8gJVxuXHQgICAgVFlQRS5BbXBlcnNhbmQsICAgICAgICAgIC8vICZcblx0ICAgIFRZUEUuQXBvc3Ryb3BoZSwgICAgICAgICAvLyAnXG5cdCAgICBUWVBFLkxlZnRQYXJlbnRoZXNpcywgICAgLy8gKFxuXHQgICAgVFlQRS5SaWdodFBhcmVudGhlc2lzLCAgIC8vIClcblx0ICAgIFRZUEUuQXN0ZXJpc2ssICAgICAgICAgICAvLyAqXG5cdCAgICBUWVBFLlBsdXNTaWduLCAgICAgICAgICAgLy8gK1xuXHQgICAgVFlQRS5Db21tYSwgICAgICAgICAgICAgIC8vICxcblx0ICAgIFRZUEUuSHlwaGVuTWludXMsICAgICAgICAvLyAtXG5cdCAgICBUWVBFLkZ1bGxTdG9wLCAgICAgICAgICAgLy8gLlxuXHQgICAgVFlQRS5Tb2xpZHVzLCAgICAgICAgICAgIC8vIC9cblx0ICAgIFRZUEUuQ29sb24sICAgICAgICAgICAgICAvLyA6XG5cdCAgICBUWVBFLlNlbWljb2xvbiwgICAgICAgICAgLy8gO1xuXHQgICAgVFlQRS5MZXNzVGhhblNpZ24sICAgICAgIC8vIDxcblx0ICAgIFRZUEUuRXF1YWxzU2lnbiwgICAgICAgICAvLyA9XG5cdCAgICBUWVBFLkdyZWF0ZXJUaGFuU2lnbiwgICAgLy8gPlxuXHQgICAgVFlQRS5RdWVzdGlvbk1hcmssICAgICAgIC8vID9cblx0ICAgIFRZUEUuQ29tbWVyY2lhbEF0LCAgICAgICAvLyBAXG5cdCAgICBUWVBFLkxlZnRTcXVhcmVCcmFja2V0LCAgLy8gW1xuXHQgICAgLy8gVFlQRS5CYWNrc2xhc2gsICAgICAgICAgIC8vIFxcXG5cdCAgICBUWVBFLlJpZ2h0U3F1YXJlQnJhY2tldCwgLy8gXVxuXHQgICAgVFlQRS5DaXJjdW1mbGV4QWNjZW50LCAgIC8vIF5cblx0ICAgIC8vIFRZUEUuTG93TGluZSwgICAgICAgICAgICAvLyBfXG5cdCAgICBUWVBFLkdyYXZlQWNjZW50LCAgICAgICAgLy8gYFxuXHQgICAgVFlQRS5MZWZ0Q3VybHlCcmFja2V0LCAgIC8vIHtcblx0ICAgIFRZUEUuVmVydGljYWxMaW5lLCAgICAgICAvLyB8XG5cdCAgICBUWVBFLlJpZ2h0Q3VybHlCcmFja2V0LCAgLy8gfVxuXHQgICAgVFlQRS5UaWxkZSAgICAgICAgICAgICAgIC8vIH5cblx0XS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHQgICAgU1lNQk9MX1RZUEVbTnVtYmVyKGtleSldID0gUFVOQ1RVQVRPUjtcblx0ICAgIFBVTkNUVUFUSU9OW051bWJlcihrZXkpXSA9IFBVTkNUVUFUT1I7XG5cdH0pO1xuXG5cdGZvciAodmFyIGkgPSA0ODsgaSA8PSA1NzsgaSsrKSB7XG5cdCAgICBTWU1CT0xfVFlQRVtpXSA9IE5VTUJFUjtcblx0fVxuXG5cdFNZTUJPTF9UWVBFW1NQQUNFXSA9IFdISVRFU1BBQ0U7XG5cdFNZTUJPTF9UWVBFW1RBQl0gPSBXSElURVNQQUNFO1xuXHRTWU1CT0xfVFlQRVtOXSA9IFdISVRFU1BBQ0U7XG5cdFNZTUJPTF9UWVBFW1JdID0gV0hJVEVTUEFDRTtcblx0U1lNQk9MX1RZUEVbRl0gPSBXSElURVNQQUNFO1xuXG5cdFNZTUJPTF9UWVBFW1RZUEUuQXBvc3Ryb3BoZV0gPSBTVFJJTkc7XG5cdFNZTUJPTF9UWVBFW1RZUEUuUXVvdGF0aW9uTWFya10gPSBTVFJJTkc7XG5cblx0U1RPUF9VUkxfUkFXW1NQQUNFXSA9IDE7XG5cdFNUT1BfVVJMX1JBV1tUQUJdID0gMTtcblx0U1RPUF9VUkxfUkFXW05dID0gMTtcblx0U1RPUF9VUkxfUkFXW1JdID0gMTtcblx0U1RPUF9VUkxfUkFXW0ZdID0gMTtcblx0U1RPUF9VUkxfUkFXW1RZUEUuQXBvc3Ryb3BoZV0gPSAxO1xuXHRTVE9QX1VSTF9SQVdbVFlQRS5RdW90YXRpb25NYXJrXSA9IDE7XG5cdFNUT1BfVVJMX1JBV1tUWVBFLkxlZnRQYXJlbnRoZXNpc10gPSAxO1xuXHRTVE9QX1VSTF9SQVdbVFlQRS5SaWdodFBhcmVudGhlc2lzXSA9IDE7XG5cblx0Ly8gd2hpdGVzcGFjZSBpcyBwdW5jdHVhdGlvbiAuLi5cblx0UFVOQ1RVQVRJT05bU1BBQ0VdID0gUFVOQ1RVQVRPUjtcblx0UFVOQ1RVQVRJT05bVEFCXSA9IFBVTkNUVUFUT1I7XG5cdFBVTkNUVUFUSU9OW05dID0gUFVOQ1RVQVRPUjtcblx0UFVOQ1RVQVRJT05bUl0gPSBQVU5DVFVBVE9SO1xuXHRQVU5DVFVBVElPTltGXSA9IFBVTkNUVUFUT1I7XG5cdC8vIC4uLiBoeXBlciBtaW51cyBpcyBub3Rcblx0UFVOQ1RVQVRJT05bVFlQRS5IeXBoZW5NaW51c10gPSAwO1xuXG5cdHZhciBfY29uc3QgPSB7XG5cdCAgICBUWVBFOiBUWVBFLFxuXHQgICAgTkFNRTogTkFNRSxcblxuXHQgICAgU1lNQk9MX1RZUEU6IFNZTUJPTF9UWVBFLFxuXHQgICAgUFVOQ1RVQVRJT046IFBVTkNUVUFUSU9OLFxuXHQgICAgU1RPUF9VUkxfUkFXOiBTVE9QX1VSTF9SQVdcblx0fTtcblxuXHR2YXIgUFVOQ1RVQVRJT04kMSA9IF9jb25zdC5QVU5DVFVBVElPTjtcblx0dmFyIFNUT1BfVVJMX1JBVyQxID0gX2NvbnN0LlNUT1BfVVJMX1JBVztcblx0dmFyIFRZUEUkMSA9IF9jb25zdC5UWVBFO1xuXHR2YXIgRlVMTFNUT1AgPSBUWVBFJDEuRnVsbFN0b3A7XG5cdHZhciBQTFVTU0lHTiA9IFRZUEUkMS5QbHVzU2lnbjtcblx0dmFyIEhZUEhFTk1JTlVTID0gVFlQRSQxLkh5cGhlbk1pbnVzO1xuXHR2YXIgUFVOQ1RVQVRPUiQxID0gVFlQRSQxLlB1bmN0dWF0b3I7XG5cdHZhciBUQUIkMSA9IDk7XG5cdHZhciBOJDEgPSAxMDtcblx0dmFyIEYkMSA9IDEyO1xuXHR2YXIgUiQxID0gMTM7XG5cdHZhciBTUEFDRSQxID0gMzI7XG5cdHZhciBCQUNLX1NMQVNIID0gOTI7XG5cdHZhciBFID0gMTAxOyAvLyAnZScuY2hhckNvZGVBdCgwKVxuXG5cdGZ1bmN0aW9uIGZpcnN0Q2hhck9mZnNldChzb3VyY2UpIHtcblx0ICAgIC8vIGRldGVjdCBCT00gKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0J5dGVfb3JkZXJfbWFyaylcblx0ICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGIHx8ICAvLyBVVEYtMTZCRVxuXHQgICAgICAgIHNvdXJjZS5jaGFyQ29kZUF0KDApID09PSAweEZGRkUpIHsgIC8vIFVURi0xNkxFXG5cdCAgICAgICAgcmV0dXJuIDE7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiAwO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNIZXgoY29kZSkge1xuXHQgICAgcmV0dXJuIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHx8IC8vIDAgLi4gOVxuXHQgICAgICAgICAgIChjb2RlID49IDY1ICYmIGNvZGUgPD0gNzApIHx8IC8vIEEgLi4gRlxuXHQgICAgICAgICAgIChjb2RlID49IDk3ICYmIGNvZGUgPD0gMTAyKTsgIC8vIGEgLi4gZlxuXHR9XG5cblx0ZnVuY3Rpb24gaXNOdW1iZXIoY29kZSkge1xuXHQgICAgcmV0dXJuIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nztcblx0fVxuXG5cdGZ1bmN0aW9uIGlzTmV3bGluZShzb3VyY2UsIG9mZnNldCwgY29kZSkge1xuXHQgICAgaWYgKGNvZGUgPT09IE4kMSB8fCBjb2RlID09PSBGJDEgfHwgY29kZSA9PT0gUiQxKSB7XG5cdCAgICAgICAgaWYgKGNvZGUgPT09IFIkMSAmJiBvZmZzZXQgKyAxIDwgc291cmNlLmxlbmd0aCAmJiBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA9PT0gTiQxKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAyO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiAxO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gMDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNtcENoYXIodGVzdFN0ciwgb2Zmc2V0LCByZWZlcmVuY2VDb2RlKSB7XG5cdCAgICB2YXIgY29kZSA9IHRlc3RTdHIuY2hhckNvZGVBdChvZmZzZXQpO1xuXG5cdCAgICAvLyBjb2RlLnRvTG93ZXJDYXNlKClcblx0ICAgIGlmIChjb2RlID49IDY1ICYmIGNvZGUgPD0gOTApIHtcblx0ICAgICAgICBjb2RlID0gY29kZSB8IDMyO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY29kZSA9PT0gcmVmZXJlbmNlQ29kZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNtcFN0cih0ZXN0U3RyLCBzdGFydCwgZW5kLCByZWZlcmVuY2VTdHIpIHtcblx0ICAgIGlmIChlbmQgLSBzdGFydCAhPT0gcmVmZXJlbmNlU3RyLmxlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0ZXN0U3RyLmxlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0ICAgICAgICB2YXIgdGVzdENvZGUgPSB0ZXN0U3RyLmNoYXJDb2RlQXQoaSk7XG5cdCAgICAgICAgdmFyIHJlZkNvZGUgPSByZWZlcmVuY2VTdHIuY2hhckNvZGVBdChpIC0gc3RhcnQpO1xuXG5cdCAgICAgICAgLy8gdGVzdFN0cltpXS50b0xvd2VyQ2FzZSgpXG5cdCAgICAgICAgaWYgKHRlc3RDb2RlID49IDY1ICYmIHRlc3RDb2RlIDw9IDkwKSB7XG5cdCAgICAgICAgICAgIHRlc3RDb2RlID0gdGVzdENvZGUgfCAzMjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodGVzdENvZGUgIT09IHJlZkNvZGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHRydWU7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmRzV2l0aCh0ZXN0U3RyLCByZWZlcmVuY2VTdHIpIHtcblx0ICAgIHJldHVybiBjbXBTdHIodGVzdFN0ciwgdGVzdFN0ci5sZW5ndGggLSByZWZlcmVuY2VTdHIubGVuZ3RoLCB0ZXN0U3RyLmxlbmd0aCwgcmVmZXJlbmNlU3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbmRMYXN0Tm9uU3BhY2VMb2NhdGlvbihzY2FubmVyKSB7XG5cdCAgICBmb3IgKHZhciBpID0gc2Nhbm5lci5zb3VyY2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICB2YXIgY29kZSA9IHNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQoaSk7XG5cblx0ICAgICAgICBpZiAoY29kZSAhPT0gU1BBQ0UkMSAmJiBjb2RlICE9PSBUQUIkMSAmJiBjb2RlICE9PSBSJDEgJiYgY29kZSAhPT0gTiQxICYmIGNvZGUgIT09IEYkMSkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBzY2FubmVyLmdldExvY2F0aW9uKGkgKyAxKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbmRXaGl0ZVNwYWNlRW5kKHNvdXJjZSwgb2Zmc2V0KSB7XG5cdCAgICBmb3IgKDsgb2Zmc2V0IDwgc291cmNlLmxlbmd0aDsgb2Zmc2V0KyspIHtcblx0ICAgICAgICB2YXIgY29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KG9mZnNldCk7XG5cblx0ICAgICAgICBpZiAoY29kZSAhPT0gU1BBQ0UkMSAmJiBjb2RlICE9PSBUQUIkMSAmJiBjb2RlICE9PSBSJDEgJiYgY29kZSAhPT0gTiQxICYmIGNvZGUgIT09IEYkMSkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBmaW5kQ29tbWVudEVuZChzb3VyY2UsIG9mZnNldCkge1xuXHQgICAgdmFyIGNvbW1lbnRFbmQgPSBzb3VyY2UuaW5kZXhPZignKi8nLCBvZmZzZXQpO1xuXG5cdCAgICBpZiAoY29tbWVudEVuZCA9PT0gLTEpIHtcblx0ICAgICAgICByZXR1cm4gc291cmNlLmxlbmd0aDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGNvbW1lbnRFbmQgKyAyO1xuXHR9XG5cblx0ZnVuY3Rpb24gZmluZFN0cmluZ0VuZChzb3VyY2UsIG9mZnNldCwgcXVvdGUpIHtcblx0ICAgIGZvciAoOyBvZmZzZXQgPCBzb3VyY2UubGVuZ3RoOyBvZmZzZXQrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gc291cmNlLmNoYXJDb2RlQXQob2Zmc2V0KTtcblxuXHQgICAgICAgIC8vIFRPRE86IGJhZCBzdHJpbmdcblx0ICAgICAgICBpZiAoY29kZSA9PT0gQkFDS19TTEFTSCkge1xuXHQgICAgICAgICAgICBvZmZzZXQrKztcblx0ICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IHF1b3RlKSB7XG5cdCAgICAgICAgICAgIG9mZnNldCsrO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBmaW5kRGVjaW1hbE51bWJlckVuZChzb3VyY2UsIG9mZnNldCkge1xuXHQgICAgZm9yICg7IG9mZnNldCA8IHNvdXJjZS5sZW5ndGg7IG9mZnNldCsrKSB7XG5cdCAgICAgICAgdmFyIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQpO1xuXG5cdCAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHsgIC8vIG5vdCBhIDAgLi4gOVxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBmaW5kTnVtYmVyRW5kKHNvdXJjZSwgb2Zmc2V0LCBhbGxvd0ZyYWN0aW9uKSB7XG5cdCAgICB2YXIgY29kZTtcblxuXHQgICAgb2Zmc2V0ID0gZmluZERlY2ltYWxOdW1iZXJFbmQoc291cmNlLCBvZmZzZXQpO1xuXG5cdCAgICAvLyBmcmFjdGlvbjogLlxcZCtcblx0ICAgIGlmIChhbGxvd0ZyYWN0aW9uICYmIG9mZnNldCArIDEgPCBzb3VyY2UubGVuZ3RoICYmIHNvdXJjZS5jaGFyQ29kZUF0KG9mZnNldCkgPT09IEZVTExTVE9QKSB7XG5cdCAgICAgICAgY29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KG9mZnNldCArIDEpO1xuXG5cdCAgICAgICAgaWYgKGlzTnVtYmVyKGNvZGUpKSB7XG5cdCAgICAgICAgICAgIG9mZnNldCA9IGZpbmREZWNpbWFsTnVtYmVyRW5kKHNvdXJjZSwgb2Zmc2V0ICsgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBleHBvbmVudDogZVsrLV1cXGQrXG5cdCAgICBpZiAob2Zmc2V0ICsgMSA8IHNvdXJjZS5sZW5ndGgpIHtcblx0ICAgICAgICBpZiAoKHNvdXJjZS5jaGFyQ29kZUF0KG9mZnNldCkgfCAzMikgPT09IEUpIHsgLy8gY2FzZSBpbnNlbnNpdGl2ZSBjaGVjayBmb3IgYGVgXG5cdCAgICAgICAgICAgIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQgKyAxKTtcblxuXHQgICAgICAgICAgICBpZiAoY29kZSA9PT0gUExVU1NJR04gfHwgY29kZSA9PT0gSFlQSEVOTUlOVVMpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgKyAyIDwgc291cmNlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQgKyAyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChpc051bWJlcihjb2RlKSkge1xuXHQgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZmluZERlY2ltYWxOdW1iZXJFbmQoc291cmNlLCBvZmZzZXQgKyAyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIG9mZnNldDtcblx0fVxuXG5cdC8vIHNraXAgZXNjYXBlZCB1bmljb2RlIHNlcXVlbmNlIHRoYXQgY2FuIGVuZHMgd2l0aCBzcGFjZVxuXHQvLyBbMC05YS1mXXsxLDZ9KFxcclxcbnxbIFxcblxcclxcdFxcZl0pP1xuXHRmdW5jdGlvbiBmaW5kRXNjYXNlRW5kKHNvdXJjZSwgb2Zmc2V0KSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IDcgJiYgb2Zmc2V0ICsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gc291cmNlLmNoYXJDb2RlQXQob2Zmc2V0ICsgaSk7XG5cblx0ICAgICAgICBpZiAoaSAhPT0gNiAmJiBpc0hleChjb2RlKSkge1xuXHQgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoaSA+IDApIHtcblx0ICAgICAgICAgICAgb2Zmc2V0ICs9IGkgLSAxICsgaXNOZXdsaW5lKHNvdXJjZSwgb2Zmc2V0ICsgaSwgY29kZSk7XG5cdCAgICAgICAgICAgIGlmIChjb2RlID09PSBTUEFDRSQxIHx8IGNvZGUgPT09IFRBQiQxKSB7XG5cdCAgICAgICAgICAgICAgICBvZmZzZXQrKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gb2Zmc2V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZmluZElkZW50aWZpZXJFbmQoc291cmNlLCBvZmZzZXQpIHtcblx0ICAgIGZvciAoOyBvZmZzZXQgPCBzb3VyY2UubGVuZ3RoOyBvZmZzZXQrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gc291cmNlLmNoYXJDb2RlQXQob2Zmc2V0KTtcblxuXHQgICAgICAgIGlmIChjb2RlID09PSBCQUNLX1NMQVNIKSB7XG5cdCAgICAgICAgICAgIG9mZnNldCA9IGZpbmRFc2Nhc2VFbmQoc291cmNlLCBvZmZzZXQgKyAxKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwICYmIFBVTkNUVUFUSU9OJDFbY29kZV0gPT09IFBVTkNUVUFUT1IkMSkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBmaW5kVXJsUmF3RW5kKHNvdXJjZSwgb2Zmc2V0KSB7XG5cdCAgICBmb3IgKDsgb2Zmc2V0IDwgc291cmNlLmxlbmd0aDsgb2Zmc2V0KyspIHtcblx0ICAgICAgICB2YXIgY29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KG9mZnNldCk7XG5cblx0ICAgICAgICBpZiAoY29kZSA9PT0gQkFDS19TTEFTSCkge1xuXHQgICAgICAgICAgICBvZmZzZXQgPSBmaW5kRXNjYXNlRW5kKHNvdXJjZSwgb2Zmc2V0ICsgMSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHg4MCAmJiBTVE9QX1VSTF9SQVckMVtjb2RlXSA9PT0gMSkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHR2YXIgdXRpbHMgPSB7XG5cdCAgICBmaXJzdENoYXJPZmZzZXQ6IGZpcnN0Q2hhck9mZnNldCxcblxuXHQgICAgaXNIZXg6IGlzSGV4LFxuXHQgICAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuXHQgICAgaXNOZXdsaW5lOiBpc05ld2xpbmUsXG5cblx0ICAgIGNtcENoYXI6IGNtcENoYXIsXG5cdCAgICBjbXBTdHI6IGNtcFN0cixcblx0ICAgIGVuZHNXaXRoOiBlbmRzV2l0aCxcblxuXHQgICAgZmluZExhc3ROb25TcGFjZUxvY2F0aW9uOiBmaW5kTGFzdE5vblNwYWNlTG9jYXRpb24sXG5cdCAgICBmaW5kV2hpdGVTcGFjZUVuZDogZmluZFdoaXRlU3BhY2VFbmQsXG5cdCAgICBmaW5kQ29tbWVudEVuZDogZmluZENvbW1lbnRFbmQsXG5cdCAgICBmaW5kU3RyaW5nRW5kOiBmaW5kU3RyaW5nRW5kLFxuXHQgICAgZmluZERlY2ltYWxOdW1iZXJFbmQ6IGZpbmREZWNpbWFsTnVtYmVyRW5kLFxuXHQgICAgZmluZE51bWJlckVuZDogZmluZE51bWJlckVuZCxcblx0ICAgIGZpbmRFc2Nhc2VFbmQ6IGZpbmRFc2Nhc2VFbmQsXG5cdCAgICBmaW5kSWRlbnRpZmllckVuZDogZmluZElkZW50aWZpZXJFbmQsXG5cdCAgICBmaW5kVXJsUmF3RW5kOiBmaW5kVXJsUmF3RW5kXG5cdH07XG5cblx0dmFyIFRZUEUkMiA9IF9jb25zdC5UWVBFO1xuXHR2YXIgTkFNRSQxID0gX2NvbnN0Lk5BTUU7XG5cdHZhciBTWU1CT0xfVFlQRSQxID0gX2NvbnN0LlNZTUJPTF9UWVBFO1xuXG5cblx0dmFyIGZpcnN0Q2hhck9mZnNldCQxID0gdXRpbHMuZmlyc3RDaGFyT2Zmc2V0O1xuXHR2YXIgY21wU3RyJDEgPSB1dGlscy5jbXBTdHI7XG5cdHZhciBpc051bWJlciQxID0gdXRpbHMuaXNOdW1iZXI7XG5cdHZhciBmaW5kTGFzdE5vblNwYWNlTG9jYXRpb24kMSA9IHV0aWxzLmZpbmRMYXN0Tm9uU3BhY2VMb2NhdGlvbjtcblx0dmFyIGZpbmRXaGl0ZVNwYWNlRW5kJDEgPSB1dGlscy5maW5kV2hpdGVTcGFjZUVuZDtcblx0dmFyIGZpbmRDb21tZW50RW5kJDEgPSB1dGlscy5maW5kQ29tbWVudEVuZDtcblx0dmFyIGZpbmRTdHJpbmdFbmQkMSA9IHV0aWxzLmZpbmRTdHJpbmdFbmQ7XG5cdHZhciBmaW5kTnVtYmVyRW5kJDEgPSB1dGlscy5maW5kTnVtYmVyRW5kO1xuXHR2YXIgZmluZElkZW50aWZpZXJFbmQkMSA9IHV0aWxzLmZpbmRJZGVudGlmaWVyRW5kO1xuXHR2YXIgZmluZFVybFJhd0VuZCQxID0gdXRpbHMuZmluZFVybFJhd0VuZDtcblxuXHR2YXIgTlVMTCA9IDA7XG5cdHZhciBXSElURVNQQUNFJDEgPSBUWVBFJDIuV2hpdGVTcGFjZTtcblx0dmFyIElERU5USUZJRVIkMSA9IFRZUEUkMi5JZGVudGlmaWVyO1xuXHR2YXIgTlVNQkVSJDEgPSBUWVBFJDIuTnVtYmVyO1xuXHR2YXIgU1RSSU5HJDEgPSBUWVBFJDIuU3RyaW5nO1xuXHR2YXIgQ09NTUVOVCQxID0gVFlQRSQyLkNvbW1lbnQ7XG5cdHZhciBQVU5DVFVBVE9SJDIgPSBUWVBFJDIuUHVuY3R1YXRvcjtcblx0dmFyIENETyQxID0gVFlQRSQyLkNETztcblx0dmFyIENEQyQxID0gVFlQRSQyLkNEQztcblx0dmFyIEFUUlVMRSQxID0gVFlQRSQyLkF0cnVsZTtcblx0dmFyIEZVTkNUSU9OJDEgPSBUWVBFJDIuRnVuY3Rpb247XG5cdHZhciBVUkwkMSA9IFRZUEUkMi5Vcmw7XG5cdHZhciBSQVckMSA9IFRZUEUkMi5SYXc7XG5cblx0dmFyIE4kMiA9IDEwO1xuXHR2YXIgRiQyID0gMTI7XG5cdHZhciBSJDIgPSAxMztcblx0dmFyIFNUQVIgPSBUWVBFJDIuQXN0ZXJpc2s7XG5cdHZhciBTTEFTSCA9IFRZUEUkMi5Tb2xpZHVzO1xuXHR2YXIgRlVMTFNUT1AkMSA9IFRZUEUkMi5GdWxsU3RvcDtcblx0dmFyIFBMVVNTSUdOJDEgPSBUWVBFJDIuUGx1c1NpZ247XG5cdHZhciBIWVBIRU5NSU5VUyQxID0gVFlQRSQyLkh5cGhlbk1pbnVzO1xuXHR2YXIgR1JFQVRFUlRIQU5TSUdOID0gVFlQRSQyLkdyZWF0ZXJUaGFuU2lnbjtcblx0dmFyIExFU1NUSEFOU0lHTiA9IFRZUEUkMi5MZXNzVGhhblNpZ247XG5cdHZhciBFWENMQU1BVElPTk1BUksgPSBUWVBFJDIuRXhjbGFtYXRpb25NYXJrO1xuXHR2YXIgQ09NTUVSQ0lBTEFUID0gVFlQRSQyLkNvbW1lcmNpYWxBdDtcblx0dmFyIFFVT1RBVElPTk1BUksgPSBUWVBFJDIuUXVvdGF0aW9uTWFyaztcblx0dmFyIEFQT1NUUk9QSEUgPSBUWVBFJDIuQXBvc3Ryb3BoZTtcblx0dmFyIExFRlRQQVJFTlRIRVNJUyA9IFRZUEUkMi5MZWZ0UGFyZW50aGVzaXM7XG5cdHZhciBSSUdIVFBBUkVOVEhFU0lTID0gVFlQRSQyLlJpZ2h0UGFyZW50aGVzaXM7XG5cdHZhciBMRUZUQ1VSTFlCUkFDS0VUID0gVFlQRSQyLkxlZnRDdXJseUJyYWNrZXQ7XG5cdHZhciBSSUdIVENVUkxZQlJBQ0tFVCA9IFRZUEUkMi5SaWdodEN1cmx5QnJhY2tldDtcblx0dmFyIExFRlRTUVVBUkVCUkFDS0VUID0gVFlQRSQyLkxlZnRTcXVhcmVCcmFja2V0O1xuXHR2YXIgUklHSFRTUVVBUkVCUkFDS0VUID0gVFlQRSQyLlJpZ2h0U3F1YXJlQnJhY2tldDtcblxuXHR2YXIgTUlOX0JVRkZFUl9TSVpFID0gMTYgKiAxMDI0O1xuXHR2YXIgT0ZGU0VUX01BU0sgPSAweDAwRkZGRkZGO1xuXHR2YXIgVFlQRV9TSElGVCA9IDI0O1xuXHR2YXIgU2FmZVVpbnQzMkFycmF5JDEgPSB0eXBlb2YgVWludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDMyQXJyYXkgOiBBcnJheTsgLy8gZmFsbGJhY2sgb24gQXJyYXkgd2hlbiBUeXBlZEFycmF5IGlzIG5vdCBzdXBwb3J0ZWRcblxuXHRmdW5jdGlvbiBjb21wdXRlTGluZXNBbmRDb2x1bW5zKHRva2VuaXplciwgc291cmNlKSB7XG5cdCAgICB2YXIgc291cmNlTGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblx0ICAgIHZhciBzdGFydCA9IGZpcnN0Q2hhck9mZnNldCQxKHNvdXJjZSk7XG5cdCAgICB2YXIgbGluZXMgPSB0b2tlbml6ZXIubGluZXM7XG5cdCAgICB2YXIgbGluZSA9IHRva2VuaXplci5zdGFydExpbmU7XG5cdCAgICB2YXIgY29sdW1ucyA9IHRva2VuaXplci5jb2x1bW5zO1xuXHQgICAgdmFyIGNvbHVtbiA9IHRva2VuaXplci5zdGFydENvbHVtbjtcblxuXHQgICAgaWYgKGxpbmVzID09PSBudWxsIHx8IGxpbmVzLmxlbmd0aCA8IHNvdXJjZUxlbmd0aCArIDEpIHtcblx0ICAgICAgICBsaW5lcyA9IG5ldyBTYWZlVWludDMyQXJyYXkkMShNYXRoLm1heChzb3VyY2VMZW5ndGggKyAxMDI0LCBNSU5fQlVGRkVSX1NJWkUpKTtcblx0ICAgICAgICBjb2x1bW5zID0gbmV3IFNhZmVVaW50MzJBcnJheSQxKGxpbmVzLmxlbmd0aCk7XG5cdCAgICB9XG5cblx0ICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IHNvdXJjZUxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChpKTtcblxuXHQgICAgICAgIGxpbmVzW2ldID0gbGluZTtcblx0ICAgICAgICBjb2x1bW5zW2ldID0gY29sdW1uKys7XG5cblx0ICAgICAgICBpZiAoY29kZSA9PT0gTiQyIHx8IGNvZGUgPT09IFIkMiB8fCBjb2RlID09PSBGJDIpIHtcblx0ICAgICAgICAgICAgaWYgKGNvZGUgPT09IFIkMiAmJiBpICsgMSA8IHNvdXJjZUxlbmd0aCAmJiBzb3VyY2UuY2hhckNvZGVBdChpICsgMSkgPT09IE4kMikge1xuXHQgICAgICAgICAgICAgICAgaSsrO1xuXHQgICAgICAgICAgICAgICAgbGluZXNbaV0gPSBsaW5lO1xuXHQgICAgICAgICAgICAgICAgY29sdW1uc1tpXSA9IGNvbHVtbjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGxpbmUrKztcblx0ICAgICAgICAgICAgY29sdW1uID0gMTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGxpbmVzW2ldID0gbGluZTtcblx0ICAgIGNvbHVtbnNbaV0gPSBjb2x1bW47XG5cblx0ICAgIHRva2VuaXplci5saW5lc0Fuc0NvbHVtbnNDb21wdXRlZCA9IHRydWU7XG5cdCAgICB0b2tlbml6ZXIubGluZXMgPSBsaW5lcztcblx0ICAgIHRva2VuaXplci5jb2x1bW5zID0gY29sdW1ucztcblx0fVxuXG5cdGZ1bmN0aW9uIHRva2VuTGF5b3V0KHRva2VuaXplciwgc291cmNlLCBzdGFydFBvcykge1xuXHQgICAgdmFyIHNvdXJjZUxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cdCAgICB2YXIgb2Zmc2V0QW5kVHlwZSA9IHRva2VuaXplci5vZmZzZXRBbmRUeXBlO1xuXHQgICAgdmFyIGJhbGFuY2UgPSB0b2tlbml6ZXIuYmFsYW5jZTtcblx0ICAgIHZhciB0b2tlbkNvdW50ID0gMDtcblx0ICAgIHZhciBwcmV2VHlwZSA9IDA7XG5cdCAgICB2YXIgb2Zmc2V0ID0gc3RhcnRQb3M7XG5cdCAgICB2YXIgYW5jaG9yID0gMDtcblx0ICAgIHZhciBiYWxhbmNlQ2xvc2VDb2RlID0gMDtcblx0ICAgIHZhciBiYWxhbmNlU3RhcnQgPSAwO1xuXHQgICAgdmFyIGJhbGFuY2VQcmV2ID0gMDtcblxuXHQgICAgaWYgKG9mZnNldEFuZFR5cGUgPT09IG51bGwgfHwgb2Zmc2V0QW5kVHlwZS5sZW5ndGggPCBzb3VyY2VMZW5ndGggKyAxKSB7XG5cdCAgICAgICAgb2Zmc2V0QW5kVHlwZSA9IG5ldyBTYWZlVWludDMyQXJyYXkkMShzb3VyY2VMZW5ndGggKyAxMDI0KTtcblx0ICAgICAgICBiYWxhbmNlID0gbmV3IFNhZmVVaW50MzJBcnJheSQxKHNvdXJjZUxlbmd0aCArIDEwMjQpO1xuXHQgICAgfVxuXG5cdCAgICB3aGlsZSAob2Zmc2V0IDwgc291cmNlTGVuZ3RoKSB7XG5cdCAgICAgICAgdmFyIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQpO1xuXHQgICAgICAgIHZhciB0eXBlID0gY29kZSA8IDB4ODAgPyBTWU1CT0xfVFlQRSQxW2NvZGVdIDogSURFTlRJRklFUiQxO1xuXG5cdCAgICAgICAgYmFsYW5jZVt0b2tlbkNvdW50XSA9IHNvdXJjZUxlbmd0aDtcblxuXHQgICAgICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgICAgICBjYXNlIFdISVRFU1BBQ0UkMTpcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IGZpbmRXaGl0ZVNwYWNlRW5kJDEoc291cmNlLCBvZmZzZXQgKyAxKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGNhc2UgUFVOQ1RVQVRPUiQyOlxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSBiYWxhbmNlQ2xvc2VDb2RlOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlUHJldiA9IGJhbGFuY2VTdGFydCAmIE9GRlNFVF9NQVNLO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlU3RhcnQgPSBiYWxhbmNlW2JhbGFuY2VQcmV2XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZUNsb3NlQ29kZSA9IGJhbGFuY2VTdGFydCA+PiBUWVBFX1NISUZUO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlW3Rva2VuQ291bnRdID0gYmFsYW5jZVByZXY7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VbYmFsYW5jZVByZXYrK10gPSB0b2tlbkNvdW50O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgYmFsYW5jZVByZXYgPCB0b2tlbkNvdW50OyBiYWxhbmNlUHJldisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZVtiYWxhbmNlUHJldl0gPT09IHNvdXJjZUxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VbYmFsYW5jZVByZXZdID0gdG9rZW5Db3VudDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgTEVGVFNRVUFSRUJSQUNLRVQ6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VbdG9rZW5Db3VudF0gPSBiYWxhbmNlU3RhcnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VDbG9zZUNvZGUgPSBSSUdIVFNRVUFSRUJSQUNLRVQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VTdGFydCA9IChiYWxhbmNlQ2xvc2VDb2RlIDw8IFRZUEVfU0hJRlQpIHwgdG9rZW5Db3VudDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICBjYXNlIExFRlRDVVJMWUJSQUNLRVQ6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VbdG9rZW5Db3VudF0gPSBiYWxhbmNlU3RhcnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VDbG9zZUNvZGUgPSBSSUdIVENVUkxZQlJBQ0tFVDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZVN0YXJ0ID0gKGJhbGFuY2VDbG9zZUNvZGUgPDwgVFlQRV9TSElGVCkgfCB0b2tlbkNvdW50O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgTEVGVFBBUkVOVEhFU0lTOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlW3Rva2VuQ291bnRdID0gYmFsYW5jZVN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlQ2xvc2VDb2RlID0gUklHSFRQQVJFTlRIRVNJUztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZVN0YXJ0ID0gKGJhbGFuY2VDbG9zZUNvZGUgPDwgVFlQRV9TSElGVCkgfCB0b2tlbkNvdW50O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gLypcblx0ICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSBTVEFSICYmIHByZXZUeXBlID09PSBTTEFTSCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBDT01NRU5UJDE7XG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZmluZENvbW1lbnRFbmQkMShzb3VyY2UsIG9mZnNldCArIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuQ291bnQtLTsgLy8gcmV3cml0ZSBwcmV2IHRva2VuXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIGVkZ2UgY2FzZSBmb3IgLS4xMjMgYW5kICsuMTIzXG5cdCAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gRlVMTFNUT1AkMSAmJiAocHJldlR5cGUgPT09IFBMVVNTSUdOJDEgfHwgcHJldlR5cGUgPT09IEhZUEhFTk1JTlVTJDEpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCArIDEgPCBzb3VyY2VMZW5ndGggJiYgaXNOdW1iZXIkMShzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQgKyAxKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IE5VTUJFUiQxO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kTnVtYmVyRW5kJDEoc291cmNlLCBvZmZzZXQgKyAyLCBmYWxzZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuQ291bnQtLTsgLy8gcmV3cml0ZSBwcmV2IHRva2VuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gPCEtLVxuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IEVYQ0xBTUFUSU9OTUFSSyAmJiBwcmV2VHlwZSA9PT0gTEVTU1RIQU5TSUdOKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCArIDIgPCBzb3VyY2VMZW5ndGggJiZcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPT09IEhZUEhFTk1JTlVTJDEgJiZcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPT09IEhZUEhFTk1JTlVTJDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IENETyQxO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyAzO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbkNvdW50LS07IC8vIHJld3JpdGUgcHJldiB0b2tlblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIC0tPlxuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IEhZUEhFTk1JTlVTJDEgJiYgcHJldlR5cGUgPT09IEhZUEhFTk1JTlVTJDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ICsgMSA8IHNvdXJjZUxlbmd0aCAmJiBzb3VyY2UuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA9PT0gR1JFQVRFUlRIQU5TSUdOKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBDREMkMTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgMjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5Db3VudC0tOyAvLyByZXdyaXRlIHByZXYgdG9rZW5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBpZGVudChcblx0ICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSBMRUZUUEFSRU5USEVTSVMgJiYgcHJldlR5cGUgPT09IElERU5USUZJRVIkMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG9mZnNldCArIDE7XG5cdCAgICAgICAgICAgICAgICAgICAgdG9rZW5Db3VudC0tOyAvLyByZXdyaXRlIHByZXYgdG9rZW5cblx0ICAgICAgICAgICAgICAgICAgICBiYWxhbmNlW3Rva2VuQ291bnRdID0gYmFsYW5jZVt0b2tlbkNvdW50ICsgMV07XG5cdCAgICAgICAgICAgICAgICAgICAgYmFsYW5jZVN0YXJ0LS07XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyA0IGNoYXIgbGVuZ3RoIGlkZW50aWZpZXIgYW5kIGVxdWFsIHRvIGB1cmwoYCAoY2FzZSBpbnNlbnNpdGl2ZSlcblx0ICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IC0gYW5jaG9yID09PSA0ICYmIGNtcFN0ciQxKHNvdXJjZSwgYW5jaG9yLCBvZmZzZXQsICd1cmwoJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB1cmwoKSBiZWNhdXNlIGl0IGNhbiBjb250YWluIGFueSBzeW1ib2xzIHNlcXVlbmNlIHdpdGggZmV3IGV4Y2VwdGlvbnNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gZmluZFdoaXRlU3BhY2VFbmQkMShzb3VyY2UsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChhbmNob3IpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPT0gTEVGVFBBUkVOVEhFU0lTICYmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICE9PSBSSUdIVFBBUkVOVEhFU0lTICYmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICE9PSBRVU9UQVRJT05NQVJLICYmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICE9PSBBUE9TVFJPUEhFKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cmwoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRBbmRUeXBlW3Rva2VuQ291bnQrK10gPSAoVVJMJDEgPDwgVFlQRV9TSElGVCkgfCBvZmZzZXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlW3Rva2VuQ291bnRdID0gc291cmNlTGVuZ3RoO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3cypcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3IgIT09IG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldEFuZFR5cGVbdG9rZW5Db3VudCsrXSA9IChXSElURVNQQUNFJDEgPDwgVFlQRV9TSElGVCkgfCBhbmNob3I7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZVt0b2tlbkNvdW50XSA9IHNvdXJjZUxlbmd0aDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmF3XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gUkFXJDE7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kVXJsUmF3RW5kJDEoc291cmNlLCBhbmNob3IpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IFVSTCQxO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IEZVTkNUSU9OJDE7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB0eXBlID0gY29kZTtcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IG9mZnNldCArIDE7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICBjYXNlIE5VTUJFUiQxOlxuXHQgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZmluZE51bWJlckVuZCQxKHNvdXJjZSwgb2Zmc2V0ICsgMSwgcHJldlR5cGUgIT09IEZVTExTVE9QJDEpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBtZXJnZSBudW1iZXIgd2l0aCBhIHByZWNlZGluZyBkb3QsIGRhc2ggb3IgcGx1c1xuXHQgICAgICAgICAgICAgICAgaWYgKHByZXZUeXBlID09PSBGVUxMU1RPUCQxIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgcHJldlR5cGUgPT09IEhZUEhFTk1JTlVTJDEgfHxcblx0ICAgICAgICAgICAgICAgICAgICBwcmV2VHlwZSA9PT0gUExVU1NJR04kMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuQ291bnQtLTsgLy8gcmV3cml0ZSBwcmV2IHRva2VuXG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGNhc2UgU1RSSU5HJDE6XG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kU3RyaW5nRW5kJDEoc291cmNlLCBvZmZzZXQgKyAxLCBjb2RlKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICBhbmNob3IgPSBvZmZzZXQ7XG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kSWRlbnRpZmllckVuZCQxKHNvdXJjZSwgb2Zmc2V0KTtcblxuXHQgICAgICAgICAgICAgICAgLy8gbWVyZ2UgaWRlbnRpZmllciB3aXRoIGEgcHJlY2VkaW5nIGRhc2hcblx0ICAgICAgICAgICAgICAgIGlmIChwcmV2VHlwZSA9PT0gSFlQSEVOTUlOVVMkMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIHJld3JpdGUgcHJldiB0b2tlblxuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuQ291bnQtLTtcblx0ICAgICAgICAgICAgICAgICAgICAvLyByZXN0b3JlIHByZXYgcHJldiB0b2tlbiB0eXBlXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNhc2UgQC1wcmVmaXgtaWRlbnRcblx0ICAgICAgICAgICAgICAgICAgICBwcmV2VHlwZSA9IHRva2VuQ291bnQgPT09IDAgPyAwIDogb2Zmc2V0QW5kVHlwZVt0b2tlbkNvdW50IC0gMV0gPj4gVFlQRV9TSElGVDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgaWYgKHByZXZUeXBlID09PSBDT01NRVJDSUFMQVQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyByZXdyaXRlIHByZXYgdG9rZW4gYW5kIGNoYW5nZSB0eXBlIHRvIDxhdC1rZXl3b3JkLXRva2VuPlxuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuQ291bnQtLTtcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlID0gQVRSVUxFJDE7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgb2Zmc2V0QW5kVHlwZVt0b2tlbkNvdW50KytdID0gKHR5cGUgPDwgVFlQRV9TSElGVCkgfCBvZmZzZXQ7XG5cdCAgICAgICAgcHJldlR5cGUgPSB0eXBlO1xuXHQgICAgfVxuXG5cdCAgICAvLyBmaW5hbGl6ZSBhcnJheXNcblx0ICAgIG9mZnNldEFuZFR5cGVbdG9rZW5Db3VudF0gPSBvZmZzZXQ7XG5cdCAgICBiYWxhbmNlW3Rva2VuQ291bnRdID0gc291cmNlTGVuZ3RoO1xuXHQgICAgd2hpbGUgKGJhbGFuY2VTdGFydCAhPT0gMCkge1xuXHQgICAgICAgIGJhbGFuY2VQcmV2ID0gYmFsYW5jZVN0YXJ0ICYgT0ZGU0VUX01BU0s7XG5cdCAgICAgICAgYmFsYW5jZVN0YXJ0ID0gYmFsYW5jZVtiYWxhbmNlUHJldl07XG5cdCAgICAgICAgYmFsYW5jZVtiYWxhbmNlUHJldl0gPSBzb3VyY2VMZW5ndGg7XG5cdCAgICB9XG5cblx0ICAgIHRva2VuaXplci5vZmZzZXRBbmRUeXBlID0gb2Zmc2V0QW5kVHlwZTtcblx0ICAgIHRva2VuaXplci50b2tlbkNvdW50ID0gdG9rZW5Db3VudDtcblx0ICAgIHRva2VuaXplci5iYWxhbmNlID0gYmFsYW5jZTtcblx0fVxuXG5cdC8vXG5cdC8vIHRva2VuaXplclxuXHQvL1xuXG5cdHZhciBUb2tlbml6ZXIgPSBmdW5jdGlvbihzb3VyY2UsIHN0YXJ0T2Zmc2V0LCBzdGFydExpbmUsIHN0YXJ0Q29sdW1uKSB7XG5cdCAgICB0aGlzLm9mZnNldEFuZFR5cGUgPSBudWxsO1xuXHQgICAgdGhpcy5iYWxhbmNlID0gbnVsbDtcblx0ICAgIHRoaXMubGluZXMgPSBudWxsO1xuXHQgICAgdGhpcy5jb2x1bW5zID0gbnVsbDtcblxuXHQgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlLCBzdGFydE9mZnNldCwgc3RhcnRMaW5lLCBzdGFydENvbHVtbik7XG5cdH07XG5cblx0VG9rZW5pemVyLnByb3RvdHlwZSA9IHtcblx0ICAgIHNldFNvdXJjZTogZnVuY3Rpb24oc291cmNlLCBzdGFydE9mZnNldCwgc3RhcnRMaW5lLCBzdGFydENvbHVtbikge1xuXHQgICAgICAgIHZhciBzYWZlU291cmNlID0gU3RyaW5nKHNvdXJjZSB8fCAnJyk7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gZmlyc3RDaGFyT2Zmc2V0JDEoc2FmZVNvdXJjZSk7XG5cblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNhZmVTb3VyY2U7XG5cdCAgICAgICAgdGhpcy5maXJzdENoYXJPZmZzZXQgPSBzdGFydDtcblx0ICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gdHlwZW9mIHN0YXJ0T2Zmc2V0ID09PSAndW5kZWZpbmVkJyA/IDAgOiBzdGFydE9mZnNldDtcblx0ICAgICAgICB0aGlzLnN0YXJ0TGluZSA9IHR5cGVvZiBzdGFydExpbmUgPT09ICd1bmRlZmluZWQnID8gMSA6IHN0YXJ0TGluZTtcblx0ICAgICAgICB0aGlzLnN0YXJ0Q29sdW1uID0gdHlwZW9mIHN0YXJ0Q29sdW1uID09PSAndW5kZWZpbmVkJyA/IDEgOiBzdGFydENvbHVtbjtcblx0ICAgICAgICB0aGlzLmxpbmVzQW5zQ29sdW1uc0NvbXB1dGVkID0gZmFsc2U7XG5cblx0ICAgICAgICB0aGlzLmVvZiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuY3VycmVudFRva2VuID0gLTE7XG5cdCAgICAgICAgdGhpcy50b2tlblR5cGUgPSAwO1xuXHQgICAgICAgIHRoaXMudG9rZW5TdGFydCA9IHN0YXJ0O1xuXHQgICAgICAgIHRoaXMudG9rZW5FbmQgPSBzdGFydDtcblxuXHQgICAgICAgIHRva2VuTGF5b3V0KHRoaXMsIHNhZmVTb3VyY2UsIHN0YXJ0KTtcblx0ICAgICAgICB0aGlzLm5leHQoKTtcblx0ICAgIH0sXG5cblx0ICAgIGxvb2t1cFR5cGU6IGZ1bmN0aW9uKG9mZnNldCkge1xuXHQgICAgICAgIG9mZnNldCArPSB0aGlzLmN1cnJlbnRUb2tlbjtcblxuXHQgICAgICAgIGlmIChvZmZzZXQgPCB0aGlzLnRva2VuQ291bnQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0QW5kVHlwZVtvZmZzZXRdID4+IFRZUEVfU0hJRlQ7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIE5VTEw7XG5cdCAgICB9LFxuXHQgICAgbG9va3VwTm9uV1NUeXBlOiBmdW5jdGlvbihvZmZzZXQpIHtcblx0ICAgICAgICBvZmZzZXQgKz0gdGhpcy5jdXJyZW50VG9rZW47XG5cblx0ICAgICAgICBmb3IgKHZhciB0eXBlOyBvZmZzZXQgPCB0aGlzLnRva2VuQ291bnQ7IG9mZnNldCsrKSB7XG5cdCAgICAgICAgICAgIHR5cGUgPSB0aGlzLm9mZnNldEFuZFR5cGVbb2Zmc2V0XSA+PiBUWVBFX1NISUZUO1xuXG5cdCAgICAgICAgICAgIGlmICh0eXBlICE9PSBXSElURVNQQUNFJDEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIE5VTEw7XG5cdCAgICB9LFxuXHQgICAgbG9va3VwVmFsdWU6IGZ1bmN0aW9uKG9mZnNldCwgcmVmZXJlbmNlU3RyKSB7XG5cdCAgICAgICAgb2Zmc2V0ICs9IHRoaXMuY3VycmVudFRva2VuO1xuXG5cdCAgICAgICAgaWYgKG9mZnNldCA8IHRoaXMudG9rZW5Db3VudCkge1xuXHQgICAgICAgICAgICByZXR1cm4gY21wU3RyJDEoXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZSxcblx0ICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0QW5kVHlwZVtvZmZzZXQgLSAxXSAmIE9GRlNFVF9NQVNLLFxuXHQgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRBbmRUeXBlW29mZnNldF0gJiBPRkZTRVRfTUFTSyxcblx0ICAgICAgICAgICAgICAgIHJlZmVyZW5jZVN0clxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH0sXG5cdCAgICBnZXRUb2tlblN0YXJ0OiBmdW5jdGlvbih0b2tlbk51bSkge1xuXHQgICAgICAgIGlmICh0b2tlbk51bSA9PT0gdGhpcy5jdXJyZW50VG9rZW4pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5TdGFydDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodG9rZW5OdW0gPiAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0b2tlbk51bSA8IHRoaXMudG9rZW5Db3VudFxuXHQgICAgICAgICAgICAgICAgPyB0aGlzLm9mZnNldEFuZFR5cGVbdG9rZW5OdW0gLSAxXSAmIE9GRlNFVF9NQVNLXG5cdCAgICAgICAgICAgICAgICA6IHRoaXMub2Zmc2V0QW5kVHlwZVt0aGlzLnRva2VuQ291bnRdICYgT0ZGU0VUX01BU0s7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RDaGFyT2Zmc2V0O1xuXHQgICAgfSxcblx0ICAgIGdldE9mZnNldEV4Y2x1ZGVXUzogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY3VycmVudFRva2VuID4gMCkge1xuXHQgICAgICAgICAgICBpZiAoKHRoaXMub2Zmc2V0QW5kVHlwZVt0aGlzLmN1cnJlbnRUb2tlbiAtIDFdID4+IFRZUEVfU0hJRlQpID09PSBXSElURVNQQUNFJDEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUb2tlbiA+IDFcblx0ICAgICAgICAgICAgICAgICAgICA/IHRoaXMub2Zmc2V0QW5kVHlwZVt0aGlzLmN1cnJlbnRUb2tlbiAtIDJdICYgT0ZGU0VUX01BU0tcblx0ICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZmlyc3RDaGFyT2Zmc2V0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLnRva2VuU3RhcnQ7XG5cdCAgICB9LFxuXHQgICAgZ2V0UmF3TGVuZ3RoOiBmdW5jdGlvbihzdGFydFRva2VuLCBlbmRUb2tlblR5cGUxLCBlbmRUb2tlblR5cGUyLCBpbmNsdWRlVG9rZW5UeXBlMikge1xuXHQgICAgICAgIHZhciBjdXJzb3IgPSBzdGFydFRva2VuO1xuXHQgICAgICAgIHZhciBiYWxhbmNlRW5kO1xuXG5cdCAgICAgICAgbG9vcDpcblx0ICAgICAgICBmb3IgKDsgY3Vyc29yIDwgdGhpcy50b2tlbkNvdW50OyBjdXJzb3IrKykge1xuXHQgICAgICAgICAgICBiYWxhbmNlRW5kID0gdGhpcy5iYWxhbmNlW2N1cnNvcl07XG5cblx0ICAgICAgICAgICAgLy8gYmVsYW5jZSBlbmQgcG9pbnRzIHRvIG9mZnNldCBiZWZvcmUgc3RhcnRcblx0ICAgICAgICAgICAgaWYgKGJhbGFuY2VFbmQgPCBzdGFydFRva2VuKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gY2hlY2sgdG9rZW4gaXMgc3RvcCB0eXBlXG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vZmZzZXRBbmRUeXBlW2N1cnNvcl0gPj4gVFlQRV9TSElGVCkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBlbmRUb2tlblR5cGUxOlxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgZW5kVG9rZW5UeXBlMjpcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZVRva2VuVHlwZTIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yKys7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG5cblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gZmFzdCBmb3J3YXJkIHRvIHRoZSBlbmQgb2YgYmFsYW5jZWQgYmxvY2tcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWxhbmNlW2JhbGFuY2VFbmRdID09PSBjdXJzb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yID0gYmFsYW5jZUVuZDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBjdXJzb3IgLSB0aGlzLmN1cnJlbnRUb2tlbjtcblx0ICAgIH0sXG5cblx0ICAgIGdldFRva2VuVmFsdWU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5zdWJzdHJpbmcodGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kKTtcblx0ICAgIH0sXG5cdCAgICBzdWJzdHJUb0N1cnNvcjogZnVuY3Rpb24oc3RhcnQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LCB0aGlzLnRva2VuU3RhcnQpO1xuXHQgICAgfSxcblxuXHQgICAgc2tpcFdTOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5jdXJyZW50VG9rZW4sIHNraXBUb2tlbkNvdW50ID0gMDsgaSA8IHRoaXMudG9rZW5Db3VudDsgaSsrLCBza2lwVG9rZW5Db3VudCsrKSB7XG5cdCAgICAgICAgICAgIGlmICgodGhpcy5vZmZzZXRBbmRUeXBlW2ldID4+IFRZUEVfU0hJRlQpICE9PSBXSElURVNQQUNFJDEpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHNraXBUb2tlbkNvdW50ID4gMCkge1xuXHQgICAgICAgICAgICB0aGlzLnNraXAoc2tpcFRva2VuQ291bnQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBza2lwU0M6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHdoaWxlICh0aGlzLnRva2VuVHlwZSA9PT0gV0hJVEVTUEFDRSQxIHx8IHRoaXMudG9rZW5UeXBlID09PSBDT01NRU5UJDEpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHNraXA6IGZ1bmN0aW9uKHRva2VuQ291bnQpIHtcblx0ICAgICAgICB2YXIgbmV4dCA9IHRoaXMuY3VycmVudFRva2VuICsgdG9rZW5Db3VudDtcblxuXHQgICAgICAgIGlmIChuZXh0IDwgdGhpcy50b2tlbkNvdW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMuY3VycmVudFRva2VuID0gbmV4dDtcblx0ICAgICAgICAgICAgdGhpcy50b2tlblN0YXJ0ID0gdGhpcy5vZmZzZXRBbmRUeXBlW25leHQgLSAxXSAmIE9GRlNFVF9NQVNLO1xuXHQgICAgICAgICAgICBuZXh0ID0gdGhpcy5vZmZzZXRBbmRUeXBlW25leHRdO1xuXHQgICAgICAgICAgICB0aGlzLnRva2VuVHlwZSA9IG5leHQgPj4gVFlQRV9TSElGVDtcblx0ICAgICAgICAgICAgdGhpcy50b2tlbkVuZCA9IG5leHQgJiBPRkZTRVRfTUFTSztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IHRoaXMudG9rZW5Db3VudDtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBuZXh0ID0gdGhpcy5jdXJyZW50VG9rZW4gKyAxO1xuXG5cdCAgICAgICAgaWYgKG5leHQgPCB0aGlzLnRva2VuQ291bnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4gPSBuZXh0O1xuXHQgICAgICAgICAgICB0aGlzLnRva2VuU3RhcnQgPSB0aGlzLnRva2VuRW5kO1xuXHQgICAgICAgICAgICBuZXh0ID0gdGhpcy5vZmZzZXRBbmRUeXBlW25leHRdO1xuXHQgICAgICAgICAgICB0aGlzLnRva2VuVHlwZSA9IG5leHQgPj4gVFlQRV9TSElGVDtcblx0ICAgICAgICAgICAgdGhpcy50b2tlbkVuZCA9IG5leHQgJiBPRkZTRVRfTUFTSztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IHRoaXMudG9rZW5Db3VudDtcblx0ICAgICAgICAgICAgdGhpcy5lb2YgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzLnRva2VuVHlwZSA9IE5VTEw7XG5cdCAgICAgICAgICAgIHRoaXMudG9rZW5TdGFydCA9IHRoaXMudG9rZW5FbmQgPSB0aGlzLnNvdXJjZS5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgZWF0OiBmdW5jdGlvbih0b2tlblR5cGUpIHtcblx0ICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgIT09IHRva2VuVHlwZSkge1xuXHQgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy50b2tlblN0YXJ0O1xuXHQgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IE5BTUUkMVt0b2tlblR5cGVdICsgJyBpcyBleHBlY3RlZCc7XG5cblx0ICAgICAgICAgICAgLy8gdHdlYWsgbWVzc2FnZSBhbmQgb2Zmc2V0XG5cdCAgICAgICAgICAgIGlmICh0b2tlblR5cGUgPT09IElERU5USUZJRVIkMSkge1xuXHQgICAgICAgICAgICAgICAgLy8gd2hlbiBpZGVudGlmaWVyIGlzIGV4cGVjdGVkIGJ1dCB0aGVyZSBpcyBhIGZ1bmN0aW9uIG9yIHVybFxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5UeXBlID09PSBGVU5DVElPTiQxIHx8IHRoaXMudG9rZW5UeXBlID09PSBVUkwkMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMudG9rZW5FbmQgLSAxO1xuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gJyBidXQgZnVuY3Rpb24gZm91bmQnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gd2hlbiB0ZXN0IHR5cGUgaXMgcGFydCBvZiBhbm90aGVyIHRva2VuIHNob3cgZXJyb3IgZm9yIGN1cnJlbnQgcG9zaXRpb24gKyAxXG5cdCAgICAgICAgICAgICAgICAvLyBlLmcuIGVhdChIWVBIRU5NSU5VUykgd2lsbCBmYWlsIG9uIFwiLWZvb1wiLCBidXQgcG9pbnRpbmcgb24gXCItXCIgaXMgb2RkXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLnRva2VuU3RhcnQpID09PSB0b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdGhpcy5lcnJvcihtZXNzYWdlLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMubmV4dCgpO1xuXHQgICAgfSxcblx0ICAgIGVhdE5vbldTOiBmdW5jdGlvbih0b2tlblR5cGUpIHtcblx0ICAgICAgICB0aGlzLnNraXBXUygpO1xuXHQgICAgICAgIHRoaXMuZWF0KHRva2VuVHlwZSk7XG5cdCAgICB9LFxuXG5cdCAgICBjb25zdW1lOiBmdW5jdGlvbih0b2tlblR5cGUpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFRva2VuVmFsdWUoKTtcblxuXHQgICAgICAgIHRoaXMuZWF0KHRva2VuVHlwZSk7XG5cblx0ICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICB9LFxuXHQgICAgY29uc3VtZUZ1bmN0aW9uTmFtZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnNvdXJjZS5zdWJzdHJpbmcodGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kIC0gMSk7XG5cblx0ICAgICAgICB0aGlzLmVhdChGVU5DVElPTiQxKTtcblxuXHQgICAgICAgIHJldHVybiBuYW1lO1xuXHQgICAgfSxcblx0ICAgIGNvbnN1bWVOb25XUzogZnVuY3Rpb24odG9rZW5UeXBlKSB7XG5cdCAgICAgICAgdGhpcy5za2lwV1MoKTtcblxuXHQgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWUodG9rZW5UeXBlKTtcblx0ICAgIH0sXG5cblx0ICAgIGV4cGVjdElkZW50aWZpZXI6IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgIT09IElERU5USUZJRVIkMSB8fCBjbXBTdHIkMSh0aGlzLnNvdXJjZSwgdGhpcy50b2tlblN0YXJ0LCB0aGlzLnRva2VuRW5kLCBuYW1lKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcignSWRlbnRpZmllciBgJyArIG5hbWUgKyAnYCBpcyBleHBlY3RlZCcpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMubmV4dCgpO1xuXHQgICAgfSxcblxuXHQgICAgZ2V0TG9jYXRpb246IGZ1bmN0aW9uKG9mZnNldCwgZmlsZW5hbWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMubGluZXNBbnNDb2x1bW5zQ29tcHV0ZWQpIHtcblx0ICAgICAgICAgICAgY29tcHV0ZUxpbmVzQW5kQ29sdW1ucyh0aGlzLCB0aGlzLnNvdXJjZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgc291cmNlOiBmaWxlbmFtZSxcblx0ICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLnN0YXJ0T2Zmc2V0ICsgb2Zmc2V0LFxuXHQgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVzW29mZnNldF0sXG5cdCAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW5zW29mZnNldF1cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblxuXHQgICAgZ2V0TG9jYXRpb25SYW5nZTogZnVuY3Rpb24oc3RhcnQsIGVuZCwgZmlsZW5hbWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMubGluZXNBbnNDb2x1bW5zQ29tcHV0ZWQpIHtcblx0ICAgICAgICAgICAgY29tcHV0ZUxpbmVzQW5kQ29sdW1ucyh0aGlzLCB0aGlzLnNvdXJjZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgc291cmNlOiBmaWxlbmFtZSxcblx0ICAgICAgICAgICAgc3RhcnQ6IHtcblx0ICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5zdGFydE9mZnNldCArIHN0YXJ0LFxuXHQgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lc1tzdGFydF0sXG5cdCAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uc1tzdGFydF1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgZW5kOiB7XG5cdCAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuc3RhcnRPZmZzZXQgKyBlbmQsXG5cdCAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVzW2VuZF0sXG5cdCAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uc1tlbmRdXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblxuXHQgICAgZXJyb3I6IGZ1bmN0aW9uKG1lc3NhZ2UsIG9mZnNldCkge1xuXHQgICAgICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiBvZmZzZXQgIT09ICd1bmRlZmluZWQnICYmIG9mZnNldCA8IHRoaXMuc291cmNlLmxlbmd0aFxuXHQgICAgICAgICAgICA/IHRoaXMuZ2V0TG9jYXRpb24ob2Zmc2V0KVxuXHQgICAgICAgICAgICA6IHRoaXMuZW9mXG5cdCAgICAgICAgICAgICAgICA/IGZpbmRMYXN0Tm9uU3BhY2VMb2NhdGlvbiQxKHRoaXMpXG5cdCAgICAgICAgICAgICAgICA6IHRoaXMuZ2V0TG9jYXRpb24odGhpcy50b2tlblN0YXJ0KTtcblxuXHQgICAgICAgIHRocm93IG5ldyBlcnJvcihcblx0ICAgICAgICAgICAgbWVzc2FnZSB8fCAnVW5leHBlY3RlZCBpbnB1dCcsXG5cdCAgICAgICAgICAgIHRoaXMuc291cmNlLFxuXHQgICAgICAgICAgICBsb2NhdGlvbi5vZmZzZXQsXG5cdCAgICAgICAgICAgIGxvY2F0aW9uLmxpbmUsXG5cdCAgICAgICAgICAgIGxvY2F0aW9uLmNvbHVtblxuXHQgICAgICAgICk7XG5cdCAgICB9LFxuXG5cdCAgICBkdW1wOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcblxuXHQgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLm9mZnNldEFuZFR5cGUsIDAsIHRoaXMudG9rZW5Db3VudCkubWFwKGZ1bmN0aW9uKGl0ZW0sIGlkeCkge1xuXHQgICAgICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XG5cdCAgICAgICAgICAgIHZhciBlbmQgPSBpdGVtICYgT0ZGU0VUX01BU0s7XG5cblx0ICAgICAgICAgICAgb2Zmc2V0ID0gZW5kO1xuXG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICBpZHg6IGlkeCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6IE5BTUUkMVtpdGVtID4+IFRZUEVfU0hJRlRdLFxuXHQgICAgICAgICAgICAgICAgY2h1bms6IHRoaXMuc291cmNlLnN1YnN0cmluZyhzdGFydCwgZW5kKSxcblx0ICAgICAgICAgICAgICAgIGJhbGFuY2U6IHRoaXMuYmFsYW5jZVtpZHhdXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSwgdGhpcyk7XG5cdCAgICB9XG5cdH07XG5cblx0Ly8gZXh0ZW5kIHdpdGggZXJyb3IgY2xhc3Ncblx0VG9rZW5pemVyLkNzc1N5bnRheEVycm9yID0gZXJyb3I7XG5cblx0Ly8gZXh0ZW5kIHRva2VuaXplciB3aXRoIGNvbnN0YW50c1xuXHRPYmplY3Qua2V5cyhfY29uc3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdCAgICBUb2tlbml6ZXJba2V5XSA9IF9jb25zdFtrZXldO1xuXHR9KTtcblxuXHQvLyBleHRlbmQgdG9rZW5pemVyIHdpdGggc3RhdGljIG1ldGhvZHMgZnJvbSB1dGlsc1xuXHRPYmplY3Qua2V5cyh1dGlscykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0ICAgIFRva2VuaXplcltrZXldID0gdXRpbHNba2V5XTtcblx0fSk7XG5cblx0Ly8gd2FybSB1cCB0b2tlbml6ZXIgdG8gZWxpbWl0YXRlIGNvZGUgYnJhbmNoZXMgdGhhdCBuZXZlciBleGVjdXRlXG5cdC8vIGZpeCBzb2Z0IGRlb3B0aW1pemF0aW9ucyAoaW5zdWZmaWNpZW50IHR5cGUgZmVlZGJhY2spXG5cdG5ldyBUb2tlbml6ZXIoJ1xcblxcclxcclxcblxcZjwhLS0tLT4vL1wiXCJcXCdcXCcvKlxcclxcblxcZiovMWE7LlxcXFwzMVxcdFxcKzJ7dXJsKGEpO2Z1bmMoKTsrMS4yZTMgLS40ZS01IC42ZSs3fScpLmdldExvY2F0aW9uKCk7XG5cblx0dmFyIFRva2VuaXplcl8xID0gVG9rZW5pemVyO1xuXG5cdHZhciB0b2tlbml6ZXIgPSBUb2tlbml6ZXJfMTtcblxuXHQvL1xuXHQvLyAgICAgICAgICAgIGl0ZW0gICAgICAgIGl0ZW0gICAgICAgIGl0ZW0gICAgICAgIGl0ZW1cblx0Ly8gICAgICAgICAgLy0tLS0tLVxcICAgIC8tLS0tLS1cXCAgICAvLS0tLS0tXFwgICAgLy0tLS0tLVxcXG5cdC8vICAgICAgICAgIHwgZGF0YSB8ICAgIHwgZGF0YSB8ICAgIHwgZGF0YSB8ICAgIHwgZGF0YSB8XG5cdC8vICBudWxsIDwtLSstcHJldiB8PC0tLSstcHJldiB8PC0tLSstcHJldiB8PC0tLSstcHJldiB8XG5cdC8vICAgICAgICAgIHwgbmV4dC0rLS0tPnwgbmV4dC0rLS0tPnwgbmV4dC0rLS0tPnwgbmV4dC0rLS0+IG51bGxcblx0Ly8gICAgICAgICAgXFwtLS0tLS0vICAgIFxcLS0tLS0tLyAgICBcXC0tLS0tLS8gICAgXFwtLS0tLS0vXG5cdC8vICAgICAgICAgICAgIF4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXG5cdC8vICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgbGlzdCAgICAgICAgICAgICAgICB8XG5cdC8vICAgICAgICAgICAgIHwgICAgICAgICAgICAgIC8tLS0tLS1cXCAgICAgICAgICAgICAgfFxuXHQvLyAgICAgICAgICAgICBcXC0tLS0tLS0tLS0tLS0tKy1oZWFkIHwgICAgICAgICAgICAgIHxcblx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0YWlsLSstLS0tLS0tLS0tLS0tLS9cblx0Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFwtLS0tLS0vXG5cdC8vXG5cblx0ZnVuY3Rpb24gY3JlYXRlSXRlbShkYXRhKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHByZXY6IG51bGwsXG5cdCAgICAgICAgbmV4dDogbnVsbCxcblx0ICAgICAgICBkYXRhOiBkYXRhXG5cdCAgICB9O1xuXHR9XG5cblx0dmFyIGN1cnNvcnMgPSBudWxsO1xuXHR2YXIgTGlzdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5jdXJzb3IgPSBudWxsO1xuXHQgICAgdGhpcy5oZWFkID0gbnVsbDtcblx0ICAgIHRoaXMudGFpbCA9IG51bGw7XG5cdH07XG5cblx0TGlzdC5jcmVhdGVJdGVtID0gY3JlYXRlSXRlbTtcblx0TGlzdC5wcm90b3R5cGUuY3JlYXRlSXRlbSA9IGNyZWF0ZUl0ZW07XG5cblx0TGlzdC5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHNpemUgPSAwO1xuXHQgICAgdmFyIGN1cnNvciA9IHRoaXMuaGVhZDtcblxuXHQgICAgd2hpbGUgKGN1cnNvcikge1xuXHQgICAgICAgIHNpemUrKztcblx0ICAgICAgICBjdXJzb3IgPSBjdXJzb3IubmV4dDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHNpemU7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24oYXJyYXkpIHtcblx0ICAgIHZhciBjdXJzb3IgPSBudWxsO1xuXG5cdCAgICB0aGlzLmhlYWQgPSBudWxsO1xuXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGl0ZW0gPSBjcmVhdGVJdGVtKGFycmF5W2ldKTtcblxuXHQgICAgICAgIGlmIChjdXJzb3IgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgY3Vyc29yLm5leHQgPSBpdGVtO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGVhZCA9IGl0ZW07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaXRlbS5wcmV2ID0gY3Vyc29yO1xuXHQgICAgICAgIGN1cnNvciA9IGl0ZW07XG5cdCAgICB9XG5cblx0ICAgIHRoaXMudGFpbCA9IGN1cnNvcjtcblxuXHQgICAgcmV0dXJuIHRoaXM7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGN1cnNvciA9IHRoaXMuaGVhZDtcblx0ICAgIHZhciByZXN1bHQgPSBbXTtcblxuXHQgICAgd2hpbGUgKGN1cnNvcikge1xuXHQgICAgICAgIHJlc3VsdC5wdXNoKGN1cnNvci5kYXRhKTtcblx0ICAgICAgICBjdXJzb3IgPSBjdXJzb3IubmV4dDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS50b0pTT04gPSBMaXN0LnByb3RvdHlwZS50b0FycmF5O1xuXG5cdExpc3QucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiB0aGlzLmhlYWQgPT09IG51bGw7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiB0aGlzLmhlYWQgJiYgdGhpcy5oZWFkLmRhdGE7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMudGFpbCAmJiB0aGlzLnRhaWwuZGF0YTtcblx0fTtcblxuXHRmdW5jdGlvbiBhbGxvY2F0ZUN1cnNvcihub2RlLCBwcmV2LCBuZXh0KSB7XG5cdCAgICB2YXIgY3Vyc29yO1xuXG5cdCAgICBpZiAoY3Vyc29ycyAhPT0gbnVsbCkge1xuXHQgICAgICAgIGN1cnNvciA9IGN1cnNvcnM7XG5cdCAgICAgICAgY3Vyc29ycyA9IGN1cnNvcnMuY3Vyc29yO1xuXHQgICAgICAgIGN1cnNvci5wcmV2ID0gcHJldjtcblx0ICAgICAgICBjdXJzb3IubmV4dCA9IG5leHQ7XG5cdCAgICAgICAgY3Vyc29yLmN1cnNvciA9IG5vZGUuY3Vyc29yO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBjdXJzb3IgPSB7XG5cdCAgICAgICAgICAgIHByZXY6IHByZXYsXG5cdCAgICAgICAgICAgIG5leHQ6IG5leHQsXG5cdCAgICAgICAgICAgIGN1cnNvcjogbm9kZS5jdXJzb3Jcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXG5cdCAgICBub2RlLmN1cnNvciA9IGN1cnNvcjtcblxuXHQgICAgcmV0dXJuIGN1cnNvcjtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VDdXJzb3Iobm9kZSkge1xuXHQgICAgdmFyIGN1cnNvciA9IG5vZGUuY3Vyc29yO1xuXG5cdCAgICBub2RlLmN1cnNvciA9IGN1cnNvci5jdXJzb3I7XG5cdCAgICBjdXJzb3IucHJldiA9IG51bGw7XG5cdCAgICBjdXJzb3IubmV4dCA9IG51bGw7XG5cdCAgICBjdXJzb3IuY3Vyc29yID0gY3Vyc29ycztcblx0ICAgIGN1cnNvcnMgPSBjdXJzb3I7XG5cdH1cblxuXHRMaXN0LnByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24oZm4sIGNvbnRleHQpIHtcblx0ICAgIHZhciBpdGVtO1xuXG5cdCAgICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgY29udGV4dCA9IHRoaXM7XG5cdCAgICB9XG5cblx0ICAgIC8vIHB1c2ggY3Vyc29yXG5cdCAgICB2YXIgY3Vyc29yID0gYWxsb2NhdGVDdXJzb3IodGhpcywgbnVsbCwgdGhpcy5oZWFkKTtcblxuXHQgICAgd2hpbGUgKGN1cnNvci5uZXh0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgaXRlbSA9IGN1cnNvci5uZXh0O1xuXHQgICAgICAgIGN1cnNvci5uZXh0ID0gaXRlbS5uZXh0O1xuXG5cdCAgICAgICAgZm4uY2FsbChjb250ZXh0LCBpdGVtLmRhdGEsIGl0ZW0sIHRoaXMpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBwb3AgY3Vyc29yXG5cdCAgICByZWxlYXNlQ3Vyc29yKHRoaXMpO1xuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLmVhY2hSaWdodCA9IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgaXRlbTtcblxuXHQgICAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuXHQgICAgfVxuXG5cdCAgICAvLyBwdXNoIGN1cnNvclxuXHQgICAgdmFyIGN1cnNvciA9IGFsbG9jYXRlQ3Vyc29yKHRoaXMsIHRoaXMudGFpbCwgbnVsbCk7XG5cblx0ICAgIHdoaWxlIChjdXJzb3IucHJldiAhPT0gbnVsbCkge1xuXHQgICAgICAgIGl0ZW0gPSBjdXJzb3IucHJldjtcblx0ICAgICAgICBjdXJzb3IucHJldiA9IGl0ZW0ucHJldjtcblxuXHQgICAgICAgIGZuLmNhbGwoY29udGV4dCwgaXRlbS5kYXRhLCBpdGVtLCB0aGlzKTtcblx0ICAgIH1cblxuXHQgICAgLy8gcG9wIGN1cnNvclxuXHQgICAgcmVsZWFzZUN1cnNvcih0aGlzKTtcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5uZXh0VW50aWwgPSBmdW5jdGlvbihzdGFydCwgZm4sIGNvbnRleHQpIHtcblx0ICAgIGlmIChzdGFydCA9PT0gbnVsbCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgdmFyIGl0ZW07XG5cblx0ICAgIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBjb250ZXh0ID0gdGhpcztcblx0ICAgIH1cblxuXHQgICAgLy8gcHVzaCBjdXJzb3Jcblx0ICAgIHZhciBjdXJzb3IgPSBhbGxvY2F0ZUN1cnNvcih0aGlzLCBudWxsLCBzdGFydCk7XG5cblx0ICAgIHdoaWxlIChjdXJzb3IubmV4dCAhPT0gbnVsbCkge1xuXHQgICAgICAgIGl0ZW0gPSBjdXJzb3IubmV4dDtcblx0ICAgICAgICBjdXJzb3IubmV4dCA9IGl0ZW0ubmV4dDtcblxuXHQgICAgICAgIGlmIChmbi5jYWxsKGNvbnRleHQsIGl0ZW0uZGF0YSwgaXRlbSwgdGhpcykpIHtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBwb3AgY3Vyc29yXG5cdCAgICByZWxlYXNlQ3Vyc29yKHRoaXMpO1xuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLnByZXZVbnRpbCA9IGZ1bmN0aW9uKHN0YXJ0LCBmbiwgY29udGV4dCkge1xuXHQgICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgaXRlbTtcblxuXHQgICAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuXHQgICAgfVxuXG5cdCAgICAvLyBwdXNoIGN1cnNvclxuXHQgICAgdmFyIGN1cnNvciA9IGFsbG9jYXRlQ3Vyc29yKHRoaXMsIHN0YXJ0LCBudWxsKTtcblxuXHQgICAgd2hpbGUgKGN1cnNvci5wcmV2ICE9PSBudWxsKSB7XG5cdCAgICAgICAgaXRlbSA9IGN1cnNvci5wcmV2O1xuXHQgICAgICAgIGN1cnNvci5wcmV2ID0gaXRlbS5wcmV2O1xuXG5cdCAgICAgICAgaWYgKGZuLmNhbGwoY29udGV4dCwgaXRlbS5kYXRhLCBpdGVtLCB0aGlzKSkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8vIHBvcCBjdXJzb3Jcblx0ICAgIHJlbGVhc2VDdXJzb3IodGhpcyk7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUuc29tZSA9IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgY3Vyc29yID0gdGhpcy5oZWFkO1xuXG5cdCAgICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgY29udGV4dCA9IHRoaXM7XG5cdCAgICB9XG5cblx0ICAgIHdoaWxlIChjdXJzb3IgIT09IG51bGwpIHtcblx0ICAgICAgICBpZiAoZm4uY2FsbChjb250ZXh0LCBjdXJzb3IuZGF0YSwgY3Vyc29yLCB0aGlzKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBjdXJzb3IgPSBjdXJzb3IubmV4dDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgcmVzdWx0ID0gW107XG5cdCAgICB2YXIgY3Vyc29yID0gdGhpcy5oZWFkO1xuXG5cdCAgICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgY29udGV4dCA9IHRoaXM7XG5cdCAgICB9XG5cblx0ICAgIHdoaWxlIChjdXJzb3IgIT09IG51bGwpIHtcblx0ICAgICAgICByZXN1bHQucHVzaChmbi5jYWxsKGNvbnRleHQsIGN1cnNvci5kYXRhLCBjdXJzb3IsIHRoaXMpKTtcblx0ICAgICAgICBjdXJzb3IgPSBjdXJzb3IubmV4dDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5oZWFkID0gbnVsbDtcblx0ICAgIHRoaXMudGFpbCA9IG51bGw7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHJlc3VsdCA9IG5ldyBMaXN0KCk7XG5cdCAgICB2YXIgY3Vyc29yID0gdGhpcy5oZWFkO1xuXG5cdCAgICB3aGlsZSAoY3Vyc29yICE9PSBudWxsKSB7XG5cdCAgICAgICAgcmVzdWx0Lmluc2VydChjcmVhdGVJdGVtKGN1cnNvci5kYXRhKSk7XG5cdCAgICAgICAgY3Vyc29yID0gY3Vyc29yLm5leHQ7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUudXBkYXRlQ3Vyc29ycyA9IGZ1bmN0aW9uKHByZXZPbGQsIHByZXZOZXcsIG5leHRPbGQsIG5leHROZXcpIHtcblx0ICAgIHZhciBjdXJzb3IgPSB0aGlzLmN1cnNvcjtcblxuXHQgICAgd2hpbGUgKGN1cnNvciAhPT0gbnVsbCkge1xuXHQgICAgICAgIGlmIChjdXJzb3IucHJldiA9PT0gcHJldk9sZCkge1xuXHQgICAgICAgICAgICBjdXJzb3IucHJldiA9IHByZXZOZXc7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGN1cnNvci5uZXh0ID09PSBuZXh0T2xkKSB7XG5cdCAgICAgICAgICAgIGN1cnNvci5uZXh0ID0gbmV4dE5ldztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBjdXJzb3IgPSBjdXJzb3IuY3Vyc29yO1xuXHQgICAgfVxuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbihpdGVtKSB7XG5cdCAgICAvLyAgICAgIGhlYWRcblx0ICAgIC8vICAgIF5cblx0ICAgIC8vIGl0ZW1cblx0ICAgIHRoaXMudXBkYXRlQ3Vyc29ycyhudWxsLCBpdGVtLCB0aGlzLmhlYWQsIGl0ZW0pO1xuXG5cdCAgICAvLyBpbnNlcnQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuXHQgICAgaWYgKHRoaXMuaGVhZCAhPT0gbnVsbCkge1xuXHQgICAgICAgIC8vIG5ldyBpdGVtIDwtIGZpcnN0IGl0ZW1cblx0ICAgICAgICB0aGlzLmhlYWQucHJldiA9IGl0ZW07XG5cblx0ICAgICAgICAvLyBuZXcgaXRlbSAtPiBmaXJzdCBpdGVtXG5cdCAgICAgICAgaXRlbS5uZXh0ID0gdGhpcy5oZWFkO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyBpZiBsaXN0IGhhcyBubyBoZWFkLCB0aGVuIGl0IGFsc28gaGFzIG5vIHRhaWxcblx0ICAgICAgICAvLyBpbiB0aGlzIGNhc2UgdGFpbCBwb2ludHMgdG8gdGhlIG5ldyBpdGVtXG5cdCAgICAgICAgdGhpcy50YWlsID0gaXRlbTtcblx0ICAgIH1cblxuXHQgICAgLy8gaGVhZCBhbHdheXMgcG9pbnRzIHRvIG5ldyBpdGVtXG5cdCAgICB0aGlzLmhlYWQgPSBpdGVtO1xuXG5cdCAgICByZXR1cm4gdGhpcztcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5wcmVwZW5kRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgIHJldHVybiB0aGlzLnByZXBlbmQoY3JlYXRlSXRlbShkYXRhKSk7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oaXRlbSkge1xuXHQgICAgLy8gdGFpbFxuXHQgICAgLy8gICAgICBeXG5cdCAgICAvLyAgICAgIGl0ZW1cblx0ICAgIHRoaXMudXBkYXRlQ3Vyc29ycyh0aGlzLnRhaWwsIGl0ZW0sIG51bGwsIGl0ZW0pO1xuXG5cdCAgICAvLyBpbnNlcnQgdG8gdGhlIGVuZGluZyBvZiB0aGUgbGlzdFxuXHQgICAgaWYgKHRoaXMudGFpbCAhPT0gbnVsbCkge1xuXHQgICAgICAgIC8vIGxhc3QgaXRlbSAtPiBuZXcgaXRlbVxuXHQgICAgICAgIHRoaXMudGFpbC5uZXh0ID0gaXRlbTtcblxuXHQgICAgICAgIC8vIGxhc3QgaXRlbSA8LSBuZXcgaXRlbVxuXHQgICAgICAgIGl0ZW0ucHJldiA9IHRoaXMudGFpbDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gaWYgbGlzdCBoYXMgbm8gdGFpbCwgdGhlbiBpdCBhbHNvIGhhcyBubyBoZWFkXG5cdCAgICAgICAgLy8gaW4gdGhpcyBjYXNlIGhlYWQgcG9pbnRzIHRvIG5ldyBpdGVtXG5cdCAgICAgICAgdGhpcy5oZWFkID0gaXRlbTtcblx0ICAgIH1cblxuXHQgICAgLy8gdGFpbCBhbHdheXMgcG9pbnRzIHRvIG5ldyBpdGVtXG5cdCAgICB0aGlzLnRhaWwgPSBpdGVtO1xuXG5cdCAgICByZXR1cm4gdGhpcztcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5hcHBlbmREYXRhID0gZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgcmV0dXJuIHRoaXMuYXBwZW5kKGNyZWF0ZUl0ZW0oZGF0YSkpO1xuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKGl0ZW0sIGJlZm9yZSkge1xuXHQgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkICYmIGJlZm9yZSAhPT0gbnVsbCkge1xuXHQgICAgICAgIC8vIHByZXYgICBiZWZvcmVcblx0ICAgICAgICAvLyAgICAgIF5cblx0ICAgICAgICAvLyAgICAgaXRlbVxuXHQgICAgICAgIHRoaXMudXBkYXRlQ3Vyc29ycyhiZWZvcmUucHJldiwgaXRlbSwgYmVmb3JlLCBpdGVtKTtcblxuXHQgICAgICAgIGlmIChiZWZvcmUucHJldiA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAvLyBpbnNlcnQgdG8gdGhlIGJlZ2lubmluZyBvZiBsaXN0XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmhlYWQgIT09IGJlZm9yZSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiZWZvcmUgZG9lc25cXCd0IGJlbG9uZyB0byBsaXN0Jyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBzaW5jZSBoZWFkIHBvaW50cyB0byBiZWZvcmUgdGhlcmVmb3JlIGxpc3QgZG9lc24ndCBlbXB0eVxuXHQgICAgICAgICAgICAvLyBubyBuZWVkIHRvIGNoZWNrIHRhaWxcblx0ICAgICAgICAgICAgdGhpcy5oZWFkID0gaXRlbTtcblx0ICAgICAgICAgICAgYmVmb3JlLnByZXYgPSBpdGVtO1xuXHQgICAgICAgICAgICBpdGVtLm5leHQgPSBiZWZvcmU7XG5cblx0ICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJzb3JzKG51bGwsIGl0ZW0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cblx0ICAgICAgICAgICAgLy8gaW5zZXJ0IGJldHdlZW4gdHdvIGl0ZW1zXG5cdCAgICAgICAgICAgIGJlZm9yZS5wcmV2Lm5leHQgPSBpdGVtO1xuXHQgICAgICAgICAgICBpdGVtLnByZXYgPSBiZWZvcmUucHJldjtcblxuXHQgICAgICAgICAgICBiZWZvcmUucHJldiA9IGl0ZW07XG5cdCAgICAgICAgICAgIGl0ZW0ubmV4dCA9IGJlZm9yZTtcblx0ICAgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuYXBwZW5kKGl0ZW0pO1xuXHQgICAgfVxuXHR9O1xuXG5cdExpc3QucHJvdG90eXBlLmluc2VydERhdGEgPSBmdW5jdGlvbihkYXRhLCBiZWZvcmUpIHtcblx0ICAgIHRoaXMuaW5zZXJ0KGNyZWF0ZUl0ZW0oZGF0YSksIGJlZm9yZSk7XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaXRlbSkge1xuXHQgICAgLy8gICAgICBpdGVtXG5cdCAgICAvLyAgICAgICBeXG5cdCAgICAvLyBwcmV2ICAgICBuZXh0XG5cdCAgICB0aGlzLnVwZGF0ZUN1cnNvcnMoaXRlbSwgaXRlbS5wcmV2LCBpdGVtLCBpdGVtLm5leHQpO1xuXG5cdCAgICBpZiAoaXRlbS5wcmV2ICE9PSBudWxsKSB7XG5cdCAgICAgICAgaXRlbS5wcmV2Lm5leHQgPSBpdGVtLm5leHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmICh0aGlzLmhlYWQgIT09IGl0ZW0pIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpdGVtIGRvZXNuXFwndCBiZWxvbmcgdG8gbGlzdCcpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMuaGVhZCA9IGl0ZW0ubmV4dDtcblx0ICAgIH1cblxuXHQgICAgaWYgKGl0ZW0ubmV4dCAhPT0gbnVsbCkge1xuXHQgICAgICAgIGl0ZW0ubmV4dC5wcmV2ID0gaXRlbS5wcmV2O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAodGhpcy50YWlsICE9PSBpdGVtKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaXRlbSBkb2VzblxcJ3QgYmVsb25nIHRvIGxpc3QnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLnRhaWwgPSBpdGVtLnByZXY7XG5cdCAgICB9XG5cblx0ICAgIGl0ZW0ucHJldiA9IG51bGw7XG5cdCAgICBpdGVtLm5leHQgPSBudWxsO1xuXG5cdCAgICByZXR1cm4gaXRlbTtcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5hcHBlbmRMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xuXHQgICAgLy8gaWdub3JlIGVtcHR5IGxpc3RzXG5cdCAgICBpZiAobGlzdC5oZWFkID09PSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLnVwZGF0ZUN1cnNvcnModGhpcy50YWlsLCBsaXN0LnRhaWwsIG51bGwsIGxpc3QuaGVhZCk7XG5cblx0ICAgIC8vIGluc2VydCB0byBlbmQgb2YgdGhlIGxpc3Rcblx0ICAgIGlmICh0aGlzLnRhaWwgIT09IG51bGwpIHtcblx0ICAgICAgICAvLyBpZiBkZXN0aW5hdGlvbiBsaXN0IGhhcyBhIHRhaWwsIHRoZW4gaXQgYWxzbyBoYXMgYSBoZWFkLFxuXHQgICAgICAgIC8vIGJ1dCBoZWFkIGRvZXNuJ3QgY2hhbmdlXG5cblx0ICAgICAgICAvLyBkZXN0IHRhaWwgLT4gc291cmNlIGhlYWRcblx0ICAgICAgICB0aGlzLnRhaWwubmV4dCA9IGxpc3QuaGVhZDtcblxuXHQgICAgICAgIC8vIGRlc3QgdGFpbCA8LSBzb3VyY2UgaGVhZFxuXHQgICAgICAgIGxpc3QuaGVhZC5wcmV2ID0gdGhpcy50YWlsO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyBpZiBsaXN0IGhhcyBubyBhIHRhaWwsIHRoZW4gaXQgYWxzbyBoYXMgbm8gYSBoZWFkXG5cdCAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHBvaW50cyBoZWFkIHRvIG5ldyBpdGVtXG5cdCAgICAgICAgdGhpcy5oZWFkID0gbGlzdC5oZWFkO1xuXHQgICAgfVxuXG5cdCAgICAvLyB0YWlsIGFsd2F5cyBzdGFydCBwb2ludCB0byBuZXcgaXRlbVxuXHQgICAgdGhpcy50YWlsID0gbGlzdC50YWlsO1xuXG5cdCAgICBsaXN0LmhlYWQgPSBudWxsO1xuXHQgICAgbGlzdC50YWlsID0gbnVsbDtcblx0fTtcblxuXHRMaXN0LnByb3RvdHlwZS5pbnNlcnRMaXN0ID0gZnVuY3Rpb24obGlzdCwgYmVmb3JlKSB7XG5cdCAgICBpZiAoYmVmb3JlICE9PSB1bmRlZmluZWQgJiYgYmVmb3JlICE9PSBudWxsKSB7XG5cdCAgICAgICAgLy8gaWdub3JlIGVtcHR5IGxpc3RzXG5cdCAgICAgICAgaWYgKGxpc3QuaGVhZCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy51cGRhdGVDdXJzb3JzKGJlZm9yZS5wcmV2LCBsaXN0LnRhaWwsIGJlZm9yZSwgbGlzdC5oZWFkKTtcblxuXHQgICAgICAgIC8vIGluc2VydCBpbiB0aGUgbWlkZGxlIG9mIGRpc3QgbGlzdFxuXHQgICAgICAgIGlmIChiZWZvcmUucHJldiAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAvLyBiZWZvcmUucHJldiA8LT4gbGlzdC5oZWFkXG5cdCAgICAgICAgICAgIGJlZm9yZS5wcmV2Lm5leHQgPSBsaXN0LmhlYWQ7XG5cdCAgICAgICAgICAgIGxpc3QuaGVhZC5wcmV2ID0gYmVmb3JlLnByZXY7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5oZWFkID0gbGlzdC5oZWFkO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJlZm9yZS5wcmV2ID0gbGlzdC50YWlsO1xuXHQgICAgICAgIGxpc3QudGFpbC5uZXh0ID0gYmVmb3JlO1xuXG5cdCAgICAgICAgbGlzdC5oZWFkID0gbnVsbDtcblx0ICAgICAgICBsaXN0LnRhaWwgPSBudWxsO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLmFwcGVuZExpc3QobGlzdCk7XG5cdCAgICB9XG5cdH07XG5cblx0TGlzdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKG9sZEl0ZW0sIG5ld0l0ZW1Pckxpc3QpIHtcblx0ICAgIGlmICgnaGVhZCcgaW4gbmV3SXRlbU9yTGlzdCkge1xuXHQgICAgICAgIHRoaXMuaW5zZXJ0TGlzdChuZXdJdGVtT3JMaXN0LCBvbGRJdGVtKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5pbnNlcnQobmV3SXRlbU9yTGlzdCwgb2xkSXRlbSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLnJlbW92ZShvbGRJdGVtKTtcblx0fTtcblxuXHR2YXIgbGlzdCA9IExpc3Q7XG5cblx0dmFyIFRZUEUkMyA9IHRva2VuaXplci5UWVBFO1xuXHR2YXIgV0hJVEVTUEFDRSQyID0gVFlQRSQzLldoaXRlU3BhY2U7XG5cdHZhciBDT01NRU5UJDIgPSBUWVBFJDMuQ29tbWVudDtcblxuXHR2YXIgc2VxdWVuY2UgPSBmdW5jdGlvbiByZWFkU2VxdWVuY2UocmVjb2duaXplcikge1xuXHQgICAgdmFyIGNoaWxkcmVuID0gbmV3IGxpc3QoKTtcblx0ICAgIHZhciBjaGlsZCA9IG51bGw7XG5cdCAgICB2YXIgY29udGV4dCA9IHtcblx0ICAgICAgICByZWNvZ25pemVyOiByZWNvZ25pemVyLFxuXHQgICAgICAgIHNwYWNlOiBudWxsLFxuXHQgICAgICAgIGlnbm9yZVdTOiBmYWxzZSxcblx0ICAgICAgICBpZ25vcmVXU0FmdGVyOiBmYWxzZVxuXHQgICAgfTtcblxuXHQgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YpIHtcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSBDT01NRU5UJDI6XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cblx0ICAgICAgICAgICAgY2FzZSBXSElURVNQQUNFJDI6XG5cdCAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5pZ25vcmVXUykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3BhY2UgPSB0aGlzLldoaXRlU3BhY2UoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGNoaWxkID0gcmVjb2duaXplci5nZXROb2RlLmNhbGwodGhpcywgY29udGV4dCk7XG5cblx0ICAgICAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY29udGV4dC5zcGFjZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKGNvbnRleHQuc3BhY2UpO1xuXHQgICAgICAgICAgICBjb250ZXh0LnNwYWNlID0gbnVsbDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKGNoaWxkKTtcblxuXHQgICAgICAgIGlmIChjb250ZXh0Lmlnbm9yZVdTQWZ0ZXIpIHtcblx0ICAgICAgICAgICAgY29udGV4dC5pZ25vcmVXU0FmdGVyID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGNvbnRleHQuaWdub3JlV1MgPSB0cnVlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNvbnRleHQuaWdub3JlV1MgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBjaGlsZHJlbjtcblx0fTtcblxuXHR2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cblx0ZnVuY3Rpb24gY3JlYXRlUGFyc2VDb250ZXh0KG5hbWUpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpc1tuYW1lXSgpO1xuXHQgICAgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIHByb2Nlc3NDb25maWcoY29uZmlnKSB7XG5cdCAgICB2YXIgcGFyc2VyQ29uZmlnID0ge1xuXHQgICAgICAgIGNvbnRleHQ6IHt9LFxuXHQgICAgICAgIHNjb3BlOiB7fSxcblx0ICAgICAgICBhdHJ1bGU6IHt9LFxuXHQgICAgICAgIHBzZXVkbzoge31cblx0ICAgIH07XG5cblx0ICAgIGlmIChjb25maWcucGFyc2VDb250ZXh0KSB7XG5cdCAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBjb25maWcucGFyc2VDb250ZXh0KSB7XG5cdCAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGNvbmZpZy5wYXJzZUNvbnRleHRbbmFtZV0pIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcblx0ICAgICAgICAgICAgICAgICAgICBwYXJzZXJDb25maWcuY29udGV4dFtuYW1lXSA9IGNvbmZpZy5wYXJzZUNvbnRleHRbbmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG5cdCAgICAgICAgICAgICAgICAgICAgcGFyc2VyQ29uZmlnLmNvbnRleHRbbmFtZV0gPSBjcmVhdGVQYXJzZUNvbnRleHQoY29uZmlnLnBhcnNlQ29udGV4dFtuYW1lXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChjb25maWcuc2NvcGUpIHtcblx0ICAgICAgICBmb3IgKHZhciBuYW1lIGluIGNvbmZpZy5zY29wZSkge1xuXHQgICAgICAgICAgICBwYXJzZXJDb25maWcuc2NvcGVbbmFtZV0gPSBjb25maWcuc2NvcGVbbmFtZV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoY29uZmlnLmF0cnVsZSkge1xuXHQgICAgICAgIGZvciAodmFyIG5hbWUgaW4gY29uZmlnLmF0cnVsZSkge1xuXHQgICAgICAgICAgICB2YXIgYXRydWxlID0gY29uZmlnLmF0cnVsZVtuYW1lXTtcblxuXHQgICAgICAgICAgICBpZiAoYXRydWxlLnBhcnNlKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXJDb25maWcuYXRydWxlW25hbWVdID0gYXRydWxlLnBhcnNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoY29uZmlnLnBzZXVkbykge1xuXHQgICAgICAgIGZvciAodmFyIG5hbWUgaW4gY29uZmlnLnBzZXVkbykge1xuXHQgICAgICAgICAgICB2YXIgcHNldWRvID0gY29uZmlnLnBzZXVkb1tuYW1lXTtcblxuXHQgICAgICAgICAgICBpZiAocHNldWRvLnBhcnNlKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXJDb25maWcucHNldWRvW25hbWVdID0gcHNldWRvLnBhcnNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoY29uZmlnLm5vZGUpIHtcblx0ICAgICAgICBmb3IgKHZhciBuYW1lIGluIGNvbmZpZy5ub2RlKSB7XG5cdCAgICAgICAgICAgIHBhcnNlckNvbmZpZ1tuYW1lXSA9IGNvbmZpZy5ub2RlW25hbWVdLnBhcnNlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHBhcnNlckNvbmZpZztcblx0fVxuXG5cdHZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGVQYXJzZXIoY29uZmlnKSB7XG5cdCAgICB2YXIgcGFyc2VyID0ge1xuXHQgICAgICAgIHNjYW5uZXI6IG5ldyB0b2tlbml6ZXIoKSxcblx0ICAgICAgICBmaWxlbmFtZTogJzx1bmtub3duPicsXG5cdCAgICAgICAgbmVlZFBvc2l0aW9uczogZmFsc2UsXG5cdCAgICAgICAgdG9sZXJhbnQ6IGZhbHNlLFxuXHQgICAgICAgIG9uUGFyc2VFcnJvcjogbm9vcCxcblx0ICAgICAgICBwYXJzZUF0cnVsZUV4cHJlc3Npb246IHRydWUsXG5cdCAgICAgICAgcGFyc2VTZWxlY3RvcjogdHJ1ZSxcblx0ICAgICAgICBwYXJzZVZhbHVlOiB0cnVlLFxuXHQgICAgICAgIHBhcnNlQ3VzdG9tUHJvcGVydHk6IGZhbHNlLFxuXG5cdCAgICAgICAgcmVhZFNlcXVlbmNlOiBzZXF1ZW5jZSxcblxuXHQgICAgICAgIHRvbGVyYW50UGFyc2U6IGZ1bmN0aW9uKGNvbnN1bWVyLCBmYWxsYmFjaykge1xuXHQgICAgICAgICAgICBpZiAodGhpcy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLmN1cnJlbnRUb2tlbjtcblxuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3VtZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUGFyc2VFcnJvcihlKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2suY2FsbCh0aGlzLCBzdGFydCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY29uc3VtZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBnZXRMb2NhdGlvbjogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5uZWVkUG9zaXRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FubmVyLmdldExvY2F0aW9uUmFuZ2UoXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kLFxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZW5hbWVcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldExvY2F0aW9uRnJvbUxpc3Q6IGZ1bmN0aW9uKGxpc3QpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubmVlZFBvc2l0aW9ucykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nhbm5lci5nZXRMb2NhdGlvblJhbmdlKFxuXHQgICAgICAgICAgICAgICAgICAgIGxpc3QuaGVhZCAhPT0gbnVsbCA/IGxpc3QuZmlyc3QoKS5sb2Muc3RhcnQub2Zmc2V0IC0gdGhpcy5zY2FubmVyLnN0YXJ0T2Zmc2V0IDogdGhpcy5zY2FubmVyLnRva2VuU3RhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgbGlzdC5oZWFkICE9PSBudWxsID8gbGlzdC5sYXN0KCkubG9jLmVuZC5vZmZzZXQgLSB0aGlzLnNjYW5uZXIuc3RhcnRPZmZzZXQgOiB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCxcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVuYW1lXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgY29uZmlnID0gcHJvY2Vzc0NvbmZpZyhjb25maWcgfHwge30pO1xuXHQgICAgZm9yICh2YXIga2V5IGluIGNvbmZpZykge1xuXHQgICAgICAgIHBhcnNlcltrZXldID0gY29uZmlnW2tleV07XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbihzb3VyY2UsIG9wdGlvbnMpIHtcblx0ICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHQgICAgICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0IHx8ICdkZWZhdWx0Jztcblx0ICAgICAgICB2YXIgYXN0O1xuXG5cdCAgICAgICAgcGFyc2VyLnNjYW5uZXIuc2V0U291cmNlKHNvdXJjZSwgb3B0aW9ucy5vZmZzZXQsIG9wdGlvbnMubGluZSwgb3B0aW9ucy5jb2x1bW4pO1xuXHQgICAgICAgIHBhcnNlci5maWxlbmFtZSA9IG9wdGlvbnMuZmlsZW5hbWUgfHwgJzx1bmtub3duPic7XG5cdCAgICAgICAgcGFyc2VyLm5lZWRQb3NpdGlvbnMgPSBCb29sZWFuKG9wdGlvbnMucG9zaXRpb25zKTtcblx0ICAgICAgICBwYXJzZXIudG9sZXJhbnQgPSBCb29sZWFuKG9wdGlvbnMudG9sZXJhbnQpO1xuXHQgICAgICAgIHBhcnNlci5vblBhcnNlRXJyb3IgPSB0eXBlb2Ygb3B0aW9ucy5vblBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLm9uUGFyc2VFcnJvciA6IG5vb3A7XG5cdCAgICAgICAgcGFyc2VyLnBhcnNlQXRydWxlRXhwcmVzc2lvbiA9ICdwYXJzZUF0cnVsZUV4cHJlc3Npb24nIGluIG9wdGlvbnMgPyBCb29sZWFuKG9wdGlvbnMucGFyc2VBdHJ1bGVFeHByZXNzaW9uKSA6IHRydWU7XG5cdCAgICAgICAgcGFyc2VyLnBhcnNlU2VsZWN0b3IgPSAncGFyc2VTZWxlY3RvcicgaW4gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy5wYXJzZVNlbGVjdG9yKSA6IHRydWU7XG5cdCAgICAgICAgcGFyc2VyLnBhcnNlVmFsdWUgPSAncGFyc2VWYWx1ZScgaW4gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy5wYXJzZVZhbHVlKSA6IHRydWU7XG5cdCAgICAgICAgcGFyc2VyLnBhcnNlQ3VzdG9tUHJvcGVydHkgPSAncGFyc2VDdXN0b21Qcm9wZXJ0eScgaW4gb3B0aW9ucyA/IEJvb2xlYW4ob3B0aW9ucy5wYXJzZUN1c3RvbVByb3BlcnR5KSA6IGZhbHNlO1xuXG5cdCAgICAgICAgaWYgKCFwYXJzZXIuY29udGV4dC5oYXNPd25Qcm9wZXJ0eShjb250ZXh0KSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29udGV4dCBgJyArIGNvbnRleHQgKyAnYCcpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGFzdCA9IHBhcnNlci5jb250ZXh0W2NvbnRleHRdLmNhbGwocGFyc2VyLCBvcHRpb25zKTtcblxuXHQgICAgICAgIGlmICghcGFyc2VyLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5zY2FubmVyLmVycm9yKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYXN0LCBudWxsLCA0KSk7XG5cdCAgICAgICAgcmV0dXJuIGFzdDtcblx0ICAgIH07XG5cdH07XG5cblx0dmFyIGNtcENoYXIkMSA9IHRva2VuaXplci5jbXBDaGFyO1xuXHR2YXIgVFlQRSQ0ID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIElERU5USUZJRVIkMiA9IFRZUEUkNC5JZGVudGlmaWVyO1xuXHR2YXIgU1RSSU5HJDIgPSBUWVBFJDQuU3RyaW5nO1xuXHR2YXIgTlVNQkVSJDIgPSBUWVBFJDQuTnVtYmVyO1xuXHR2YXIgRlVOQ1RJT04kMiA9IFRZUEUkNC5GdW5jdGlvbjtcblx0dmFyIFVSTCQyID0gVFlQRSQ0LlVybDtcblx0dmFyIE5VTUJFUlNJR04gPSBUWVBFJDQuTnVtYmVyU2lnbjtcblx0dmFyIExFRlRQQVJFTlRIRVNJUyQxID0gVFlQRSQ0LkxlZnRQYXJlbnRoZXNpcztcblx0dmFyIExFRlRTUVVBUkVCUkFDS0VUJDEgPSBUWVBFJDQuTGVmdFNxdWFyZUJyYWNrZXQ7XG5cdHZhciBQTFVTU0lHTiQyID0gVFlQRSQ0LlBsdXNTaWduO1xuXHR2YXIgSFlQSEVOTUlOVVMkMiA9IFRZUEUkNC5IeXBoZW5NaW51cztcblx0dmFyIENPTU1BID0gVFlQRSQ0LkNvbW1hO1xuXHR2YXIgU09MSURVUyA9IFRZUEUkNC5Tb2xpZHVzO1xuXHR2YXIgQVNURVJJU0sgPSBUWVBFJDQuQXN0ZXJpc2s7XG5cdHZhciBQRVJDRU5UU0lHTiA9IFRZUEUkNC5QZXJjZW50U2lnbjtcblx0dmFyIEJBQ0tTTEFTSCA9IFRZUEUkNC5CYWNrc2xhc2g7XG5cdHZhciBVID0gMTE3OyAvLyAndScuY2hhckNvZGVBdCgwKVxuXG5cdHZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIGRlZmF1bHRSZWNvZ25pemVyKGNvbnRleHQpIHtcblx0ICAgIHN3aXRjaCAodGhpcy5zY2FubmVyLnRva2VuVHlwZSkge1xuXHQgICAgICAgIGNhc2UgTlVNQkVSU0lHTjpcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuSGV4Q29sb3IoKTtcblxuXHQgICAgICAgIGNhc2UgQ09NTUE6XG5cdCAgICAgICAgICAgIGNvbnRleHQuc3BhY2UgPSBudWxsO1xuXHQgICAgICAgICAgICBjb250ZXh0Lmlnbm9yZVdTQWZ0ZXIgPSB0cnVlO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5PcGVyYXRvcigpO1xuXG5cdCAgICAgICAgY2FzZSBTT0xJRFVTOlxuXHQgICAgICAgIGNhc2UgQVNURVJJU0s6XG5cdCAgICAgICAgY2FzZSBQTFVTU0lHTiQyOlxuXHQgICAgICAgIGNhc2UgSFlQSEVOTUlOVVMkMjpcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuT3BlcmF0b3IoKTtcblxuXHQgICAgICAgIGNhc2UgTEVGVFBBUkVOVEhFU0lTJDE6XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLlBhcmVudGhlc2VzKHRoaXMucmVhZFNlcXVlbmNlLCBjb250ZXh0LnJlY29nbml6ZXIpO1xuXG5cdCAgICAgICAgY2FzZSBMRUZUU1FVQVJFQlJBQ0tFVCQxOlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5CcmFja2V0cyh0aGlzLnJlYWRTZXF1ZW5jZSwgY29udGV4dC5yZWNvZ25pemVyKTtcblxuXHQgICAgICAgIGNhc2UgU1RSSU5HJDI6XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLlN0cmluZygpO1xuXG5cdCAgICAgICAgY2FzZSBOVU1CRVIkMjpcblx0ICAgICAgICAgICAgc3dpdGNoICh0aGlzLnNjYW5uZXIubG9va3VwVHlwZSgxKSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBQRVJDRU5UU0lHTjpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5QZXJjZW50YWdlKCk7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgSURFTlRJRklFUiQyOlxuXHQgICAgICAgICAgICAgICAgICAgIC8vIGVkZ2UgY2FzZTogbnVtYmVyIHdpdGggZm9sb3dpbmcgXFwwIGFuZCBcXDkgaGFjayBzaG91bGRuJ3QgdG8gYmUgYSBEaW1lbnNpb25cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY21wQ2hhciQxKHRoaXMuc2Nhbm5lci5zb3VyY2UsIHRoaXMuc2Nhbm5lci50b2tlbkVuZCwgQkFDS1NMQVNIKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5OdW1iZXIoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaW1lbnNpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuTnVtYmVyKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgIGNhc2UgRlVOQ1RJT04kMjpcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRnVuY3Rpb24odGhpcy5yZWFkU2VxdWVuY2UsIGNvbnRleHQucmVjb2duaXplcik7XG5cblx0ICAgICAgICBjYXNlIFVSTCQyOlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5VcmwoKTtcblxuXHQgICAgICAgIGNhc2UgSURFTlRJRklFUiQyOlxuXHQgICAgICAgICAgICAvLyBjaGVjayBmb3IgdW5pY29kZSByYW5nZSwgaXQgc2hvdWxkIHN0YXJ0IHdpdGggdSsgb3IgVStcblx0ICAgICAgICAgICAgaWYgKGNtcENoYXIkMSh0aGlzLnNjYW5uZXIuc291cmNlLCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCwgVSkgJiZcblx0ICAgICAgICAgICAgICAgIGNtcENoYXIkMSh0aGlzLnNjYW5uZXIuc291cmNlLCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCArIDEsIFBMVVNTSUdOJDIpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Vbmljb2RlUmFuZ2UoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLklkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBhdHJ1bGVFeHByZXNzaW9uID0ge1xuXHQgICAgZ2V0Tm9kZTogX2RlZmF1bHRcblx0fTtcblxuXHR2YXIgVFlQRSQ1ID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIElERU5USUZJRVIkMyA9IFRZUEUkNS5JZGVudGlmaWVyO1xuXHR2YXIgTlVNQkVSJDMgPSBUWVBFJDUuTnVtYmVyO1xuXHR2YXIgTlVNQkVSU0lHTiQxID0gVFlQRSQ1Lk51bWJlclNpZ247XG5cdHZhciBMRUZUU1FVQVJFQlJBQ0tFVCQyID0gVFlQRSQ1LkxlZnRTcXVhcmVCcmFja2V0O1xuXHR2YXIgUExVU1NJR04kMyA9IFRZUEUkNS5QbHVzU2lnbjtcblx0dmFyIFNPTElEVVMkMSA9IFRZUEUkNS5Tb2xpZHVzO1xuXHR2YXIgQVNURVJJU0skMSA9IFRZUEUkNS5Bc3Rlcmlzaztcblx0dmFyIEZVTExTVE9QJDIgPSBUWVBFJDUuRnVsbFN0b3A7XG5cdHZhciBDT0xPTiA9IFRZUEUkNS5Db2xvbjtcblx0dmFyIEdSRUFURVJUSEFOU0lHTiQxID0gVFlQRSQ1LkdyZWF0ZXJUaGFuU2lnbjtcblx0dmFyIFZFUlRJQ0FMTElORSA9IFRZUEUkNS5WZXJ0aWNhbExpbmU7XG5cdHZhciBUSUxERSA9IFRZUEUkNS5UaWxkZTtcblxuXHRmdW5jdGlvbiBnZXROb2RlKGNvbnRleHQpIHtcblx0ICAgIHN3aXRjaCAodGhpcy5zY2FubmVyLnRva2VuVHlwZSkge1xuXHQgICAgICAgIGNhc2UgUExVU1NJR04kMzpcblx0ICAgICAgICBjYXNlIEdSRUFURVJUSEFOU0lHTiQxOlxuXHQgICAgICAgIGNhc2UgVElMREU6XG5cdCAgICAgICAgICAgIGNvbnRleHQuc3BhY2UgPSBudWxsO1xuXHQgICAgICAgICAgICBjb250ZXh0Lmlnbm9yZVdTQWZ0ZXIgPSB0cnVlO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5Db21iaW5hdG9yKCk7XG5cblx0ICAgICAgICBjYXNlIFNPTElEVVMkMTogIC8vIC9kZWVwL1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5Db21iaW5hdG9yKCk7XG5cblx0ICAgICAgICBjYXNlIEZVTExTVE9QJDI6XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkNsYXNzU2VsZWN0b3IoKTtcblxuXHQgICAgICAgIGNhc2UgTEVGVFNRVUFSRUJSQUNLRVQkMjpcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuQXR0cmlidXRlU2VsZWN0b3IoKTtcblxuXHQgICAgICAgIGNhc2UgTlVNQkVSU0lHTiQxOlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5JZFNlbGVjdG9yKCk7XG5cblx0ICAgICAgICBjYXNlIENPTE9OOlxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmxvb2t1cFR5cGUoMSkgPT09IENPTE9OKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Qc2V1ZG9FbGVtZW50U2VsZWN0b3IoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlBzZXVkb0NsYXNzU2VsZWN0b3IoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgY2FzZSBJREVOVElGSUVSJDM6XG5cdCAgICAgICAgY2FzZSBBU1RFUklTSyQxOlxuXHQgICAgICAgIGNhc2UgVkVSVElDQUxMSU5FOlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5UeXBlU2VsZWN0b3IoKTtcblxuXHQgICAgICAgIGNhc2UgTlVNQkVSJDM6XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLlBlcmNlbnRhZ2UoKTtcblx0ICAgIH1cblx0fVxuXHR2YXIgc2VsZWN0b3IgPSB7XG5cdCAgICBnZXROb2RlOiBnZXROb2RlXG5cdH07XG5cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1pbWFnZXMtNC8jZWxlbWVudC1ub3RhdGlvblxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZWxlbWVudFxuXHR2YXIgZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICB2YXIgaWQgPSB0aGlzLklkU2VsZWN0b3IoKTtcblxuXHQgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgIGlkXG5cdCAgICApO1xuXHR9O1xuXG5cdC8vIGxlZ2FjeSBJRSBmdW5jdGlvblxuXHQvLyBleHByZXNzaW9uICcoJyByYXcgJyknXG5cdHZhciBleHByZXNzaW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgIHRoaXMuUmF3KHRoaXMuc2Nhbm5lci5jdXJyZW50VG9rZW4sIDAsIDAsIGZhbHNlLCBmYWxzZSlcblx0ICAgICk7XG5cdH07XG5cblx0dmFyIFRZUEUkNiA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBJREVOVElGSUVSJDQgPSBUWVBFJDYuSWRlbnRpZmllcjtcblx0dmFyIENPTU1BJDEgPSBUWVBFJDYuQ29tbWE7XG5cdHZhciBTRU1JQ09MT04gPSBUWVBFJDYuU2VtaWNvbG9uO1xuXHR2YXIgSFlQSEVOTUlOVVMkMyA9IFRZUEUkNi5IeXBoZW5NaW51cztcblx0dmFyIEVYQ0xBTUFUSU9OTUFSSyQxID0gVFlQRSQ2LkV4Y2xhbWF0aW9uTWFyaztcblxuXHQvLyB2YXIgJygnIGlkZW50ICgnLCcgPHZhbHVlPj8gKT8gJyknXG5cdHZhciBfdmFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBuZXcgbGlzdCgpO1xuXG5cdCAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgIHZhciBpZGVudFN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cblx0ICAgIHRoaXMuc2Nhbm5lci5lYXQoSFlQSEVOTUlOVVMkMyk7XG5cdCAgICBpZiAodGhpcy5zY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSAhPT0gSFlQSEVOTUlOVVMkMykge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lcnJvcignSHlwaGVuTWludXMgaXMgZXhwZWN0ZWQnKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuc2Nhbm5lci5lYXQoSURFTlRJRklFUiQ0KTtcblxuXHQgICAgY2hpbGRyZW4uYXBwZW5kRGF0YSh7XG5cdCAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihpZGVudFN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgbmFtZTogdGhpcy5zY2FubmVyLnN1YnN0clRvQ3Vyc29yKGlkZW50U3RhcnQpXG5cdCAgICB9KTtcblxuXHQgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gQ09NTUEkMSkge1xuXHQgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEodGhpcy5PcGVyYXRvcigpKTtcblx0ICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHRoaXMucGFyc2VDdXN0b21Qcm9wZXJ0eVxuXHQgICAgICAgICAgICA/IHRoaXMuVmFsdWUobnVsbClcblx0ICAgICAgICAgICAgOiB0aGlzLlJhdyh0aGlzLnNjYW5uZXIuY3VycmVudFRva2VuLCBFWENMQU1BVElPTk1BUkskMSwgU0VNSUNPTE9OLCBmYWxzZSwgZmFsc2UpXG5cdCAgICAgICAgKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGNoaWxkcmVuO1xuXHR9O1xuXG5cdHZhciB2YWx1ZSA9IHtcblx0ICAgIGdldE5vZGU6IF9kZWZhdWx0LFxuXHQgICAgJy1tb3otZWxlbWVudCc6IGVsZW1lbnQsXG5cdCAgICAnZWxlbWVudCc6IGVsZW1lbnQsXG5cdCAgICAnZXhwcmVzc2lvbic6IGV4cHJlc3Npb24sXG5cdCAgICAndmFyJzogX3ZhclxuXHR9O1xuXG5cdHZhciBzY29wZSA9IHtcblx0ICAgIEF0cnVsZUV4cHJlc3Npb246IGF0cnVsZUV4cHJlc3Npb24sXG5cdCAgICBTZWxlY3Rvcjogc2VsZWN0b3IsXG5cdCAgICBWYWx1ZTogdmFsdWVcblx0fTtcblxuXHR2YXIgZm9udEZhY2UgPSB7XG5cdCAgICBwYXJzZToge1xuXHQgICAgICAgIGV4cHJlc3Npb246IG51bGwsXG5cdCAgICAgICAgYmxvY2s6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5CbG9jayh0aGlzLkRlY2xhcmF0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkNyA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBTVFJJTkckMyA9IFRZUEUkNy5TdHJpbmc7XG5cdHZhciBJREVOVElGSUVSJDUgPSBUWVBFJDcuSWRlbnRpZmllcjtcblx0dmFyIFVSTCQzID0gVFlQRSQ3LlVybDtcblx0dmFyIExFRlRQQVJFTlRIRVNJUyQyID0gVFlQRSQ3LkxlZnRQYXJlbnRoZXNpcztcblxuXHR2YXIgX2ltcG9ydCA9IHtcblx0ICAgIHBhcnNlOiB7XG5cdCAgICAgICAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBsaXN0KCk7XG5cblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zY2FubmVyLnRva2VuVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBTVFJJTkckMzpcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHRoaXMuU3RyaW5nKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBjYXNlIFVSTCQzOlxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEodGhpcy5VcmwoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdTdHJpbmcgb3IgdXJsKCkgaXMgZXhwZWN0ZWQnKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIubG9va3VwTm9uV1NUeXBlKDApID09PSBJREVOVElGSUVSJDUgfHxcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5sb29rdXBOb25XU1R5cGUoMCkgPT09IExFRlRQQVJFTlRIRVNJUyQyKSB7XG5cdCAgICAgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHRoaXMuV2hpdGVTcGFjZSgpKTtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEodGhpcy5NZWRpYVF1ZXJ5TGlzdCgpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGJsb2NrOiBudWxsXG5cdCAgICB9XG5cdH07XG5cblx0dmFyIG1lZGlhID0ge1xuXHQgICAgcGFyc2U6IHtcblx0ICAgICAgICBleHByZXNzaW9uOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBsaXN0KCkuYXBwZW5kRGF0YShcblx0ICAgICAgICAgICAgICAgIHRoaXMuTWVkaWFRdWVyeUxpc3QoKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgYmxvY2s6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5CbG9jayh0aGlzLlJ1bGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSQ4ID0gdG9rZW5pemVyLlRZUEU7XG5cdHZhciBMRUZUQ1VSTFlCUkFDS0VUJDEgPSBUWVBFJDguTGVmdEN1cmx5QnJhY2tldDtcblxuXHR2YXIgcGFnZSA9IHtcblx0ICAgIHBhcnNlOiB7XG5cdCAgICAgICAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIubG9va3VwTm9uV1NUeXBlKDApID09PSBMRUZUQ1VSTFlCUkFDS0VUJDEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBsaXN0KCkuYXBwZW5kRGF0YShcblx0ICAgICAgICAgICAgICAgIHRoaXMuU2VsZWN0b3JMaXN0KClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGJsb2NrOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuQmxvY2sodGhpcy5EZWNsYXJhdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJDkgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgV0hJVEVTUEFDRSQzID0gVFlQRSQ5LldoaXRlU3BhY2U7XG5cdHZhciBDT01NRU5UJDMgPSBUWVBFJDkuQ29tbWVudDtcblx0dmFyIElERU5USUZJRVIkNiA9IFRZUEUkOS5JZGVudGlmaWVyO1xuXHR2YXIgRlVOQ1RJT04kMyA9IFRZUEUkOS5GdW5jdGlvbjtcblx0dmFyIExFRlRQQVJFTlRIRVNJUyQzID0gVFlQRSQ5LkxlZnRQYXJlbnRoZXNpcztcblx0dmFyIEhZUEhFTk1JTlVTJDQgPSBUWVBFJDkuSHlwaGVuTWludXM7XG5cdHZhciBDT0xPTiQxID0gVFlQRSQ5LkNvbG9uO1xuXG5cdGZ1bmN0aW9uIGNvbnN1bWVSYXcoKSB7XG5cdCAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgIHRoaXMuUmF3KHRoaXMuc2Nhbm5lci5jdXJyZW50VG9rZW4sIDAsIDAsIGZhbHNlLCBmYWxzZSlcblx0ICAgICk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJlbnRoZXNlcygpIHtcblx0ICAgIHZhciBpbmRleCA9IDA7XG5cblx0ICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblxuXHQgICAgLy8gVE9ETzogbWFrZSBpdCBzaW1wbGllclxuXHQgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IElERU5USUZJRVIkNikge1xuXHQgICAgICAgIGluZGV4ID0gMTtcblx0ICAgIH0gZWxzZSBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gSFlQSEVOTUlOVVMkNCAmJlxuXHQgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubG9va3VwVHlwZSgxKSA9PT0gSURFTlRJRklFUiQ2KSB7XG5cdCAgICAgICAgaW5kZXggPSAyO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5kZXggIT09IDAgJiYgdGhpcy5zY2FubmVyLmxvb2t1cE5vbldTVHlwZShpbmRleCkgPT09IENPTE9OJDEpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgICAgICB0aGlzLkRlY2xhcmF0aW9uKClcblx0ICAgICAgICApO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcmVhZFNlcXVlbmNlLmNhbGwodGhpcyk7XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkU2VxdWVuY2UoKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBuZXcgbGlzdCgpO1xuXHQgICAgdmFyIHNwYWNlID0gbnVsbDtcblx0ICAgIHZhciBjaGlsZDtcblxuXHQgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICBzY2FuOlxuXHQgICAgd2hpbGUgKCF0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgc3dpdGNoICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2UgV0hJVEVTUEFDRSQzOlxuXHQgICAgICAgICAgICAgICAgc3BhY2UgPSB0aGlzLldoaXRlU3BhY2UoKTtcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG5cdCAgICAgICAgICAgIGNhc2UgQ09NTUVOVCQzOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG5cdCAgICAgICAgICAgIGNhc2UgRlVOQ1RJT04kMzpcblx0ICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5GdW5jdGlvbihjb25zdW1lUmF3LCB0aGlzLnNjb3BlLkF0cnVsZUV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgY2FzZSBJREVOVElGSUVSJDY6XG5cdCAgICAgICAgICAgICAgICBjaGlsZCA9IHRoaXMuSWRlbnRpZmllcigpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgY2FzZSBMRUZUUEFSRU5USEVTSVMkMzpcblx0ICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5QYXJlbnRoZXNlcyhwYXJlbnRoZXNlcywgdGhpcy5zY29wZS5BdHJ1bGVFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICBicmVhayBzY2FuO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChzcGFjZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHNwYWNlKTtcblx0ICAgICAgICAgICAgc3BhY2UgPSBudWxsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEoY2hpbGQpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY2hpbGRyZW47XG5cdH1cblxuXHR2YXIgc3VwcG9ydHMgPSB7XG5cdCAgICBwYXJzZToge1xuXHQgICAgICAgIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWFkU2VxdWVuY2UuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICBpZiAoY2hpbGRyZW4uaXNFbXB0eSgpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ0NvbmRpdGlvbiBpcyBleHBlY3RlZCcpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgYmxvY2s6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5CbG9jayh0aGlzLlJ1bGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblxuXHR2YXIgYXRydWxlID0ge1xuXHQgICAgJ2ZvbnQtZmFjZSc6IGZvbnRGYWNlLFxuXHQgICAgJ2ltcG9ydCc6IF9pbXBvcnQsXG5cdCAgICAnbWVkaWEnOiBtZWRpYSxcblx0ICAgICdwYWdlJzogcGFnZSxcblx0ICAgICdzdXBwb3J0cyc6IHN1cHBvcnRzXG5cdH07XG5cblx0dmFyIGRpciA9IHtcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgICAgICB0aGlzLklkZW50aWZpZXIoKVxuXHQgICAgICAgICk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIGhhcyQxID0ge1xuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgbGlzdCgpLmFwcGVuZERhdGEoXG5cdCAgICAgICAgICAgIHRoaXMuU2VsZWN0b3JMaXN0KClcblx0ICAgICAgICApO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBsYW5nID0ge1xuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgbGlzdCgpLmFwcGVuZERhdGEoXG5cdCAgICAgICAgICAgIHRoaXMuSWRlbnRpZmllcigpXG5cdCAgICAgICAgKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgc2VsZWN0b3JMaXN0ID0ge1xuXHQgICAgcGFyc2U6IGZ1bmN0aW9uIHNlbGVjdG9yTGlzdCgpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgICAgICB0aGlzLlNlbGVjdG9yTGlzdCgpXG5cdCAgICAgICAgKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgbWF0Y2hlcyA9IHNlbGVjdG9yTGlzdDtcblxuXHR2YXIgbm90ID0gc2VsZWN0b3JMaXN0O1xuXG5cdHZhciBBTExPV19PRl9DTEFVU0UgPSB0cnVlO1xuXG5cdHZhciBudGhXaXRoT2ZDbGF1c2UgPSB7XG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBsaXN0KCkuYXBwZW5kRGF0YShcblx0ICAgICAgICAgICAgdGhpcy5OdGgoQUxMT1dfT0ZfQ0xBVVNFKVxuXHQgICAgICAgICk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIG50aENoaWxkID0gbnRoV2l0aE9mQ2xhdXNlO1xuXG5cdHZhciBudGhMYXN0Q2hpbGQgPSBudGhXaXRoT2ZDbGF1c2U7XG5cblx0dmFyIERJU0FMTE9XX09GX0NMQVVTRSA9IGZhbHNlO1xuXG5cdHZhciBudGggPSB7XG5cdCAgICBwYXJzZTogZnVuY3Rpb24gbnRoKCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgbGlzdCgpLmFwcGVuZERhdGEoXG5cdCAgICAgICAgICAgIHRoaXMuTnRoKERJU0FMTE9XX09GX0NMQVVTRSlcblx0ICAgICAgICApO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBudGhMYXN0T2ZUeXBlID0gbnRoO1xuXG5cdHZhciBudGhPZlR5cGUgPSBudGg7XG5cblx0dmFyIHNsb3R0ZWQgPSB7XG5cdCAgICBwYXJzZTogZnVuY3Rpb24gY29tcG91bmRTZWxlY3RvcigpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgICAgICB0aGlzLlNlbGVjdG9yKClcblx0ICAgICAgICApO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBwc2V1ZG8gPSB7XG5cdCAgICAnZGlyJzogZGlyLFxuXHQgICAgJ2hhcyc6IGhhcyQxLFxuXHQgICAgJ2xhbmcnOiBsYW5nLFxuXHQgICAgJ21hdGNoZXMnOiBtYXRjaGVzLFxuXHQgICAgJ25vdCc6IG5vdCxcblx0ICAgICdudGgtY2hpbGQnOiBudGhDaGlsZCxcblx0ICAgICdudGgtbGFzdC1jaGlsZCc6IG50aExhc3RDaGlsZCxcblx0ICAgICdudGgtbGFzdC1vZi10eXBlJzogbnRoTGFzdE9mVHlwZSxcblx0ICAgICdudGgtb2YtdHlwZSc6IG50aE9mVHlwZSxcblx0ICAgICdzbG90dGVkJzogc2xvdHRlZFxuXHR9O1xuXG5cdHZhciBjbXBDaGFyJDIgPSB0b2tlbml6ZXIuY21wQ2hhcjtcblx0dmFyIGlzTnVtYmVyJDIgPSB0b2tlbml6ZXIuaXNOdW1iZXI7XG5cdHZhciBUWVBFJGEgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgSURFTlRJRklFUiQ3ID0gVFlQRSRhLklkZW50aWZpZXI7XG5cdHZhciBOVU1CRVIkNCA9IFRZUEUkYS5OdW1iZXI7XG5cdHZhciBQTFVTU0lHTiQ0ID0gVFlQRSRhLlBsdXNTaWduO1xuXHR2YXIgSFlQSEVOTUlOVVMkNSA9IFRZUEUkYS5IeXBoZW5NaW51cztcblx0dmFyIE4kMyA9IDExMDsgLy8gJ24nLmNoYXJDb2RlQXQoMClcblx0dmFyIERJU0FMTE9XX1NJR04gPSB0cnVlO1xuXHR2YXIgQUxMT1dfU0lHTiA9IGZhbHNlO1xuXG5cdGZ1bmN0aW9uIGNoZWNrVG9rZW5Jc0ludGVnZXIoc2Nhbm5lciwgZGlzYWxsb3dTaWduKSB7XG5cdCAgICB2YXIgcG9zID0gc2Nhbm5lci50b2tlblN0YXJ0O1xuXG5cdCAgICBpZiAoc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChwb3MpID09PSBQTFVTU0lHTiQ0IHx8XG5cdCAgICAgICAgc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChwb3MpID09PSBIWVBIRU5NSU5VUyQ1KSB7XG5cdCAgICAgICAgaWYgKGRpc2FsbG93U2lnbikge1xuXHQgICAgICAgICAgICBzY2FubmVyLmVycm9yKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBvcysrO1xuXHQgICAgfVxuXG5cdCAgICBmb3IgKDsgcG9zIDwgc2Nhbm5lci50b2tlbkVuZDsgcG9zKyspIHtcblx0ICAgICAgICBpZiAoIWlzTnVtYmVyJDIoc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChwb3MpKSkge1xuXHQgICAgICAgICAgICBzY2FubmVyLmVycm9yKCdVbmV4cGVjdGVkIGlucHV0JywgcG9zKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHQvLyBBbitCIG1pY3Jvc3ludGF4IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2FuYlxuXHR2YXIgQW5QbHVzQiA9IHtcblx0ICAgIG5hbWU6ICdBblBsdXNCJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIGE6IFtTdHJpbmcsIG51bGxdLFxuXHQgICAgICAgIGI6IFtTdHJpbmcsIG51bGxdXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBlbmQgPSBzdGFydDtcblx0ICAgICAgICB2YXIgcHJlZml4ID0gJyc7XG5cdCAgICAgICAgdmFyIGEgPSBudWxsO1xuXHQgICAgICAgIHZhciBiID0gbnVsbDtcblxuXHQgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBOVU1CRVIkNCB8fFxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBQTFVTU0lHTiQ0KSB7XG5cdCAgICAgICAgICAgIGNoZWNrVG9rZW5Jc0ludGVnZXIodGhpcy5zY2FubmVyLCBBTExPV19TSUdOKTtcblx0ICAgICAgICAgICAgcHJlZml4ID0gdGhpcy5zY2FubmVyLmdldFRva2VuVmFsdWUoKTtcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgZW5kID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IElERU5USUZJRVIkNykge1xuXHQgICAgICAgICAgICB2YXIgYlN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cblx0ICAgICAgICAgICAgaWYgKGNtcENoYXIkMih0aGlzLnNjYW5uZXIuc291cmNlLCBiU3RhcnQsIEhZUEhFTk1JTlVTJDUpKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAocHJlZml4ID09PSAnJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHByZWZpeCA9ICctJztcblx0ICAgICAgICAgICAgICAgICAgICBiU3RhcnQrKztcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdVbmV4cGVjdGVkIGh5cGhlbiBtaW51cycpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKCFjbXBDaGFyJDIodGhpcy5zY2FubmVyLnNvdXJjZSwgYlN0YXJ0LCBOJDMpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGEgPSBwcmVmaXggPT09ICcnICA/ICcxJyAgOlxuXHQgICAgICAgICAgICAgICAgcHJlZml4ID09PSAnKycgPyAnKzEnIDpcblx0ICAgICAgICAgICAgICAgIHByZWZpeCA9PT0gJy0nID8gJy0xJyA6XG5cdCAgICAgICAgICAgICAgICBwcmVmaXg7XG5cblx0ICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuc2Nhbm5lci50b2tlbkVuZCAtIGJTdGFydDtcblx0ICAgICAgICAgICAgaWYgKGxlbiA+IDEpIHtcblx0ICAgICAgICAgICAgICAgIC8vIC4ubi0uLlxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChiU3RhcnQgKyAxKSAhPT0gSFlQSEVOTUlOVVMkNSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lcnJvcignVW5leHBlY3RlZCBpbnB1dCcsIGJTdGFydCArIDEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBpZiAobGVuID4gMikge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIC4ubi17bnVtYmVyfS4uXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQgPSBiU3RhcnQgKyAyO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyAuLm4tIHtudW1iZXJ9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGNoZWNrVG9rZW5Jc0ludGVnZXIodGhpcy5zY2FubmVyLCBESVNBTExPV19TSUdOKTtcblx0ICAgICAgICAgICAgICAgIGIgPSAnLScgKyB0aGlzLnNjYW5uZXIuZ2V0VG9rZW5WYWx1ZSgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcHJlZml4ID0gJyc7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBIWVBIRU5NSU5VUyQ1IHx8XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gUExVU1NJR04kNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IHRoaXMuc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBOVU1CRVIkNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNoZWNrVG9rZW5Jc0ludGVnZXIodGhpcy5zY2FubmVyLCBwcmVmaXggIT09ICcnKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIkMih0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLnRva2VuU3RhcnQpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJBdCh0aGlzLnNjYW5uZXIudG9rZW5TdGFydCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0Kys7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByZWZpeCA9PT0gJycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGFuIG9wZXJhdG9yIGJlZm9yZSBudW1iZXJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmVmaXggPT09ICcrJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBwbHVzIGlzIHVzaW5nIGJ5IGRlZmF1bHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gJyc7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgYiA9IHByZWZpeCArIHRoaXMuc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocHJlZml4KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoTlVNQkVSJDQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChwcmVmaXggPT09ICcnIHx8IHByZWZpeCA9PT0gJysnKSB7IC8vIG5vIG51bWJlclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKFxuXHQgICAgICAgICAgICAgICAgICAgICdOdW1iZXIgb3IgaWRlbnRpZmllciBpcyBleHBlY3RlZCcsXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQgKyAoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IFBMVVNTSUdOJDQgfHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gSFlQSEVOTUlOVVMkNVxuXHQgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBiID0gcHJlZml4O1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdBblBsdXNCJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCBlbmQpLFxuXHQgICAgICAgICAgICBhOiBhLFxuXHQgICAgICAgICAgICBiOiBiXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgdmFyIGEgPSBub2RlLmEgIT09IG51bGwgJiYgbm9kZS5hICE9PSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdmFyIGIgPSBub2RlLmIgIT09IG51bGwgJiYgbm9kZS5iICE9PSB1bmRlZmluZWQ7XG5cblx0ICAgICAgICBpZiAoYSkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsoXG5cdCAgICAgICAgICAgICAgICBub2RlLmEgPT09ICcrMScgPyAnK24nIDpcblx0ICAgICAgICAgICAgICAgIG5vZGUuYSA9PT0gICcxJyA/ICAnbicgOlxuXHQgICAgICAgICAgICAgICAgbm9kZS5hID09PSAnLTEnID8gJy1uJyA6XG5cdCAgICAgICAgICAgICAgICBub2RlLmEgKyAnbidcblx0ICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICBpZiAoYikge1xuXHQgICAgICAgICAgICAgICAgYiA9IFN0cmluZyhub2RlLmIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGIuY2hhckF0KDApID09PSAnLScgfHwgYi5jaGFyQXQoMCkgPT09ICcrJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NDaHVuayhiLmNoYXJBdCgwKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NodW5rKGIuc3Vic3RyKDEpKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NodW5rKCcrJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NodW5rKGIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcHJvY2Vzc0NodW5rKFN0cmluZyhub2RlLmIpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkYiA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBBVFJVTEUkMiA9IFRZUEUkYi5BdHJ1bGU7XG5cdHZhciBTRU1JQ09MT04kMSA9IFRZUEUkYi5TZW1pY29sb247XG5cdHZhciBMRUZUQ1VSTFlCUkFDS0VUJDIgPSBUWVBFJGIuTGVmdEN1cmx5QnJhY2tldDtcblx0dmFyIFJJR0hUQ1VSTFlCUkFDS0VUJDEgPSBUWVBFJGIuUmlnaHRDdXJseUJyYWNrZXQ7XG5cblx0ZnVuY3Rpb24gaXNCbG9ja0F0cnVsZSgpIHtcblx0ICAgIGZvciAodmFyIG9mZnNldCA9IDEsIHR5cGU7IHR5cGUgPSB0aGlzLnNjYW5uZXIubG9va3VwVHlwZShvZmZzZXQpOyBvZmZzZXQrKykge1xuXHQgICAgICAgIGlmICh0eXBlID09PSBSSUdIVENVUkxZQlJBQ0tFVCQxKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0eXBlID09PSBMRUZUQ1VSTFlCUkFDS0VUJDIgfHxcblx0ICAgICAgICAgICAgdHlwZSA9PT0gQVRSVUxFJDIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgdGhpcy5zY2FubmVyLnNraXAob2Zmc2V0KTtcblx0ICAgIHRoaXMuc2Nhbm5lci5lYXQoUklHSFRDVVJMWUJSQUNLRVQkMSk7XG5cdH1cblxuXHR2YXIgQXRydWxlID0ge1xuXHQgICAgbmFtZTogJ0F0cnVsZScsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBuYW1lOiBTdHJpbmcsXG5cdCAgICAgICAgZXhwcmVzc2lvbjogWydBdHJ1bGVFeHByZXNzaW9uJywgbnVsbF0sXG5cdCAgICAgICAgYmxvY2s6IFsnQmxvY2snLCBudWxsXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgbmFtZTtcblx0ICAgICAgICB2YXIgbmFtZUxvd2VyQ2FzZTtcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IG51bGw7XG5cdCAgICAgICAgdmFyIGJsb2NrID0gbnVsbDtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoQVRSVUxFJDIpO1xuXG5cdCAgICAgICAgbmFtZSA9IHRoaXMuc2Nhbm5lci5zdWJzdHJUb0N1cnNvcihzdGFydCArIDEpO1xuXHQgICAgICAgIG5hbWVMb3dlckNhc2UgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuQXRydWxlRXhwcmVzc2lvbihuYW1lKTtcblxuXHQgICAgICAgIC8vIHR1cm4gZW1wdHkgQXRydWxlRXhwcmVzc2lvbiBpbnRvIG51bGxcblx0ICAgICAgICBpZiAoZXhwcmVzc2lvbi5jaGlsZHJlbi5oZWFkID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIGV4cHJlc3Npb24gPSBudWxsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblxuXHQgICAgICAgIGlmICh0aGlzLmF0cnVsZS5oYXNPd25Qcm9wZXJ0eShuYW1lTG93ZXJDYXNlKSkge1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuYXRydWxlW25hbWVMb3dlckNhc2VdLmJsb2NrID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSAhPT0gTEVGVENVUkxZQlJBQ0tFVCQyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IG1ha2UgdG9sZXJhbnRcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ0N1cmx5IGJyYWNrZXQgaXMgZXhwZWN0ZWQnKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLmF0cnVsZVtuYW1lTG93ZXJDYXNlXS5ibG9jay5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRvbGVyYW50IHx8ICF0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVhdChTRU1JQ09MT04kMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgU0VNSUNPTE9OJDE6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgY2FzZSBMRUZUQ1VSTFlCUkFDS0VUJDI6XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIGNvbnN1bWUgYmxvY2sgY29udGVudCBhcyBSYXc/XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLkJsb2NrKGlzQmxvY2tBdHJ1bGUuY2FsbCh0aGlzKSA/IHRoaXMuRGVjbGFyYXRpb24gOiB0aGlzLlJ1bGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ1NlbWljb2xvbiBvciBibG9jayBpcyBleHBlY3RlZCcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdBdHJ1bGUnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgbmFtZTogbmFtZSxcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbjogZXhwcmVzc2lvbixcblx0ICAgICAgICAgICAgYmxvY2s6IGJsb2NrXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCdAJyk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUubmFtZSk7XG5cblx0ICAgICAgICBpZiAobm9kZS5leHByZXNzaW9uICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHByb2Nlc3NDaHVuaygnICcpO1xuXHQgICAgICAgICAgICB0aGlzLmdlbmVyYXRlKHByb2Nlc3NDaHVuaywgbm9kZS5leHByZXNzaW9uKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAobm9kZS5ibG9jaykge1xuXHQgICAgICAgICAgICB0aGlzLmdlbmVyYXRlKHByb2Nlc3NDaHVuaywgbm9kZS5ibG9jayk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcHJvY2Vzc0NodW5rKCc7Jyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHdhbGtDb250ZXh0OiAnYXRydWxlJ1xuXHR9O1xuXG5cdHZhciBUWVBFJGMgPSB0b2tlbml6ZXIuVFlQRTtcblx0dmFyIFNFTUlDT0xPTiQyID0gVFlQRSRjLlNlbWljb2xvbjtcblx0dmFyIExFRlRDVVJMWUJSQUNLRVQkMyA9IFRZUEUkYy5MZWZ0Q3VybHlCcmFja2V0O1xuXG5cdGZ1bmN0aW9uIGNvbnN1bWVSYXckMShzdGFydFRva2VuKSB7XG5cdCAgICByZXR1cm4gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgIHRoaXMuUmF3KHN0YXJ0VG9rZW4sIFNFTUlDT0xPTiQyLCBMRUZUQ1VSTFlCUkFDS0VUJDMsIGZhbHNlLCB0cnVlKVxuXHQgICAgKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbnN1bWVEZWZhdWx0U2VxdWVuY2UoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5yZWFkU2VxdWVuY2UodGhpcy5zY29wZS5BdHJ1bGVFeHByZXNzaW9uKTtcblx0fVxuXG5cdHZhciBBdHJ1bGVFeHByZXNzaW9uID0ge1xuXHQgICAgbmFtZTogJ0F0cnVsZUV4cHJlc3Npb24nLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgY2hpbGRyZW46IFtbXV1cblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG51bGw7XG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLnNjYW5uZXIuY3VycmVudFRva2VuO1xuXG5cdCAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodGhpcy5wYXJzZUF0cnVsZUV4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgLy8gY3VzdG9tIGNvbnN1bWVyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmF0cnVsZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF0cnVsZVtuYW1lXS5leHByZXNzaW9uID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLnRvbGVyYW50UGFyc2UodGhpcy5hdHJ1bGVbbmFtZV0uZXhwcmVzc2lvbiwgY29uc3VtZVJhdyQxKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgY29uc3VtZXJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy50b2xlcmFudFBhcnNlKGNvbnN1bWVEZWZhdWx0U2VxdWVuY2UsIGNvbnN1bWVSYXckMSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAodGhpcy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5lb2YgfHwgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IFNFTUlDT0xPTiQyICYmIHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IExFRlRDVVJMWUJSQUNLRVQkMykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNvbnN1bWVSYXckMS5jYWxsKHRoaXMsIHN0YXJ0VG9rZW4pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2hpbGRyZW4gPSBjb25zdW1lUmF3JDEuY2FsbCh0aGlzLCBzdGFydFRva2VuKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2hpbGRyZW4gPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgY2hpbGRyZW4gPSBuZXcgbGlzdCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdBdHJ1bGVFeHByZXNzaW9uJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLmVhY2gocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgIH0sXG5cdCAgICB3YWxrQ29udGV4dDogJ2F0cnVsZUV4cHJlc3Npb24nXG5cdH07XG5cblx0dmFyIFRZUEUkZCA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBJREVOVElGSUVSJDggPSBUWVBFJGQuSWRlbnRpZmllcjtcblx0dmFyIFNUUklORyQ0ID0gVFlQRSRkLlN0cmluZztcblx0dmFyIERPTExBUlNJR04gPSBUWVBFJGQuRG9sbGFyU2lnbjtcblx0dmFyIEFTVEVSSVNLJDIgPSBUWVBFJGQuQXN0ZXJpc2s7XG5cdHZhciBDT0xPTiQyID0gVFlQRSRkLkNvbG9uO1xuXHR2YXIgRVFVQUxTU0lHTiA9IFRZUEUkZC5FcXVhbHNTaWduO1xuXHR2YXIgTEVGVFNRVUFSRUJSQUNLRVQkMyA9IFRZUEUkZC5MZWZ0U3F1YXJlQnJhY2tldDtcblx0dmFyIFJJR0hUU1FVQVJFQlJBQ0tFVCQxID0gVFlQRSRkLlJpZ2h0U3F1YXJlQnJhY2tldDtcblx0dmFyIENJUkNVTUZMRVhBQ0NFTlQgPSBUWVBFJGQuQ2lyY3VtZmxleEFjY2VudDtcblx0dmFyIFZFUlRJQ0FMTElORSQxID0gVFlQRSRkLlZlcnRpY2FsTGluZTtcblx0dmFyIFRJTERFJDEgPSBUWVBFJGQuVGlsZGU7XG5cblx0ZnVuY3Rpb24gZ2V0QXR0cmlidXRlTmFtZSgpIHtcblx0ICAgIGlmICh0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgIHZhciBleHBlY3RJZGVudGlmaWVyID0gZmFsc2U7XG5cdCAgICB2YXIgY2hlY2tDb2xvbiA9IHRydWU7XG5cblx0ICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBBU1RFUklTSyQyKSB7XG5cdCAgICAgICAgZXhwZWN0SWRlbnRpZmllciA9IHRydWU7XG5cdCAgICAgICAgY2hlY2tDb2xvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IFZFUlRJQ0FMTElORSQxKSB7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChJREVOVElGSUVSJDgpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gVkVSVElDQUxMSU5FJDEpIHtcblx0ICAgICAgICBpZiAodGhpcy5zY2FubmVyLmxvb2t1cFR5cGUoMSkgIT09IEVRVUFMU1NJR04pIHtcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVhdChJREVOVElGSUVSJDgpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZXhwZWN0SWRlbnRpZmllcikge1xuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ0lkZW50aWZpZXIgaXMgZXhwZWN0ZWQnLCB0aGlzLnNjYW5uZXIudG9rZW5FbmQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoZXhwZWN0SWRlbnRpZmllcikge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lcnJvcignVmVydGljYWwgbGluZSBpcyBleHBlY3RlZCcpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoY2hlY2tDb2xvbiAmJiB0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBDT0xPTiQyKSB7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KElERU5USUZJRVIkOCk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgIG5hbWU6IHRoaXMuc2Nhbm5lci5zdWJzdHJUb0N1cnNvcihzdGFydClcblx0ICAgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRPcGVyYXRvcigpIHtcblx0ICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgdmFyIHRva2VuVHlwZSA9IHRoaXMuc2Nhbm5lci50b2tlblR5cGU7XG5cblx0ICAgIGlmICh0b2tlblR5cGUgIT09IEVRVUFMU1NJR04gJiYgICAgICAgIC8vID1cblx0ICAgICAgICB0b2tlblR5cGUgIT09IFRJTERFJDEgJiYgICAgICAgICAgICAgLy8gfj1cblx0ICAgICAgICB0b2tlblR5cGUgIT09IENJUkNVTUZMRVhBQ0NFTlQgJiYgIC8vIF49XG5cdCAgICAgICAgdG9rZW5UeXBlICE9PSBET0xMQVJTSUdOICYmICAgICAgICAvLyAkPVxuXHQgICAgICAgIHRva2VuVHlwZSAhPT0gQVNURVJJU0skMiAmJiAgICAgICAgICAvLyAqPVxuXHQgICAgICAgIHRva2VuVHlwZSAhPT0gVkVSVElDQUxMSU5FJDEgICAgICAgICAvLyB8PVxuXHQgICAgKSB7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdBdHRyaWJ1dGUgc2VsZWN0b3IgKD0sIH49LCBePSwgJD0sICo9LCB8PSkgaXMgZXhwZWN0ZWQnKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHRva2VuVHlwZSA9PT0gRVFVQUxTU0lHTikge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChFUVVBTFNTSUdOKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHRoaXMuc2Nhbm5lci5zdWJzdHJUb0N1cnNvcihzdGFydCk7XG5cdH1cblxuXHQvLyAnWycgUyogYXR0cmliX25hbWUgJ10nXG5cdC8vICdbJyBTKiBhdHRyaWJfbmFtZSBTKiBhdHRyaWJfbWF0Y2hlciBTKiBbIElERU5UIHwgU1RSSU5HIF0gUyogYXR0cmliX2ZsYWdzPyBTKiAnXSdcblx0dmFyIEF0dHJpYnV0ZVNlbGVjdG9yID0ge1xuXHQgICAgbmFtZTogJ0F0dHJpYnV0ZVNlbGVjdG9yJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIG5hbWU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICBtYXRjaGVyOiBbU3RyaW5nLCBudWxsXSxcblx0ICAgICAgICB2YWx1ZTogWydTdHJpbmcnLCAnSWRlbnRpZmllcicsIG51bGxdLFxuXHQgICAgICAgIGZsYWdzOiBbU3RyaW5nLCBudWxsXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgbmFtZTtcblx0ICAgICAgICB2YXIgbWF0Y2hlciA9IG51bGw7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gbnVsbDtcblx0ICAgICAgICB2YXIgZmxhZ3MgPSBudWxsO1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChMRUZUU1FVQVJFQlJBQ0tFVCQzKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICBuYW1lID0gZ2V0QXR0cmlidXRlTmFtZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblxuXHQgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlICE9PSBSSUdIVFNRVUFSRUJSQUNLRVQkMSkge1xuXHQgICAgICAgICAgICAvLyBhdm9pZCBjYXNlIGBbbmFtZSBpXWBcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IElERU5USUZJRVIkOCkge1xuXHQgICAgICAgICAgICAgICAgbWF0Y2hlciA9IGdldE9wZXJhdG9yLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblxuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBTVFJJTkckNFxuXHQgICAgICAgICAgICAgICAgICAgID8gdGhpcy5TdHJpbmcoKVxuXHQgICAgICAgICAgICAgICAgICAgIDogdGhpcy5JZGVudGlmaWVyKCk7XG5cblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBmbGFnc1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gSURFTlRJRklFUiQ4KSB7XG5cdCAgICAgICAgICAgICAgICBmbGFncyA9IHRoaXMuc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFJJR0hUU1FVQVJFQlJBQ0tFVCQxKTtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdBdHRyaWJ1dGVTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBuYW1lOiBuYW1lLFxuXHQgICAgICAgICAgICBtYXRjaGVyOiBtYXRjaGVyLFxuXHQgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG5cdCAgICAgICAgICAgIGZsYWdzOiBmbGFnc1xuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHZhciBmbGFnc1ByZWZpeCA9ICcgJztcblxuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnWycpO1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdGUocHJvY2Vzc0NodW5rLCBub2RlLm5hbWUpO1xuXG5cdCAgICAgICAgaWYgKG5vZGUubWF0Y2hlciAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5tYXRjaGVyKTtcblxuXHQgICAgICAgICAgICBpZiAobm9kZS52YWx1ZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZShwcm9jZXNzQ2h1bmssIG5vZGUudmFsdWUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBzcGFjZSBiZXR3ZWVuIHN0cmluZyBhbmQgZmxhZ3MgaXMgbm90IHJlcXVpcmVkXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS52YWx1ZS50eXBlID09PSAnU3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZsYWdzUHJlZml4ID0gJyc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAobm9kZS5mbGFncyAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsoZmxhZ3NQcmVmaXgpO1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5mbGFncyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCddJyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkZSA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBXSElURVNQQUNFJDQgPSBUWVBFJGUuV2hpdGVTcGFjZTtcblx0dmFyIENPTU1FTlQkNCA9IFRZUEUkZS5Db21tZW50O1xuXHR2YXIgU0VNSUNPTE9OJDMgPSBUWVBFJGUuU2VtaWNvbG9uO1xuXHR2YXIgQVRSVUxFJDMgPSBUWVBFJGUuQXRydWxlO1xuXHR2YXIgTEVGVENVUkxZQlJBQ0tFVCQ0ID0gVFlQRSRlLkxlZnRDdXJseUJyYWNrZXQ7XG5cdHZhciBSSUdIVENVUkxZQlJBQ0tFVCQyID0gVFlQRSRlLlJpZ2h0Q3VybHlCcmFja2V0O1xuXG5cdGZ1bmN0aW9uIGNvbnN1bWVSYXckMihzdGFydFRva2VuKSB7XG5cdCAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgMCwgU0VNSUNPTE9OJDMsIHRydWUsIHRydWUpO1xuXHR9XG5cblx0dmFyIEJsb2NrID0ge1xuXHQgICAgbmFtZTogJ0Jsb2NrJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIGNoaWxkcmVuOiBbWydBdHJ1bGUnLCAnUnVsZScsICdEZWNsYXJhdGlvbiddXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbihkZWZhdWx0Q29uc3VtZXIpIHtcblx0ICAgICAgICBpZiAoIWRlZmF1bHRDb25zdW1lcikge1xuXHQgICAgICAgICAgICBkZWZhdWx0Q29uc3VtZXIgPSB0aGlzLkRlY2xhcmF0aW9uO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBsaXN0KCk7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KExFRlRDVVJMWUJSQUNLRVQkNCk7XG5cblx0ICAgICAgICBzY2FuOlxuXHQgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZikge1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgUklHSFRDVVJMWUJSQUNLRVQkMjpcblx0ICAgICAgICAgICAgICAgICAgICBicmVhayBzY2FuO1xuXG5cdCAgICAgICAgICAgICAgICBjYXNlIFdISVRFU1BBQ0UkNDpcblx0ICAgICAgICAgICAgICAgIGNhc2UgQ09NTUVOVCQ0OlxuXHQgICAgICAgICAgICAgICAgY2FzZSBTRU1JQ09MT04kMzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBjYXNlIEFUUlVMRSQzOlxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEodGhpcy50b2xlcmFudFBhcnNlKHRoaXMuQXRydWxlLCBjb25zdW1lUmF3JDIpKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHRoaXMudG9sZXJhbnRQYXJzZShkZWZhdWx0Q29uc3VtZXIsIGNvbnN1bWVSYXckMikpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKCF0aGlzLnRvbGVyYW50IHx8ICF0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoUklHSFRDVVJMWUJSQUNLRVQkMik7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ0Jsb2NrJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygneycpO1xuXHQgICAgICAgIHRoaXMuZWFjaChwcm9jZXNzQ2h1bmssIG5vZGUpO1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnfScpO1xuXHQgICAgfSxcblx0ICAgIHdhbGtDb250ZXh0OiAnYmxvY2snXG5cdH07XG5cblx0dmFyIFRZUEUkZiA9IHRva2VuaXplci5UWVBFO1xuXHR2YXIgTEVGVFNRVUFSRUJSQUNLRVQkNCA9IFRZUEUkZi5MZWZ0U3F1YXJlQnJhY2tldDtcblx0dmFyIFJJR0hUU1FVQVJFQlJBQ0tFVCQyID0gVFlQRSRmLlJpZ2h0U3F1YXJlQnJhY2tldDtcblxuXHQvLyBjdXJyZW50bHkgb25seSBHcmlkIExheW91dCB1c2VzIHNxdWFyZSBicmFja2V0cywgYnV0IGxlZnQgaXQgdW5pdmVyc2FsXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZ3JpZC8jdHJhY2stc2l6aW5nXG5cdC8vIFsgaWRlbnQqIF1cblx0dmFyIEJyYWNrZXRzID0ge1xuXHQgICAgbmFtZTogJ0JyYWNrZXRzJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIGNoaWxkcmVuOiBbW11dXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKHJlYWRTZXF1ZW5jZSwgcmVjb2duaXplcikge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG51bGw7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KExFRlRTUVVBUkVCUkFDS0VUJDQpO1xuXHQgICAgICAgIGNoaWxkcmVuID0gcmVhZFNlcXVlbmNlLmNhbGwodGhpcywgcmVjb2duaXplcik7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChSSUdIVFNRVUFSRUJSQUNLRVQkMik7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnQnJhY2tldHMnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCdbJyk7XG5cdCAgICAgICAgdGhpcy5lYWNoKHByb2Nlc3NDaHVuaywgbm9kZSk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCddJyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIENEQyQyID0gdG9rZW5pemVyLlRZUEUuQ0RDO1xuXG5cdHZhciBDRENfMSA9IHtcblx0ICAgIG5hbWU6ICdDREMnLFxuXHQgICAgc3RydWN0dXJlOiBbXSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoQ0RDJDIpOyAvLyAtLT5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdDREMnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaykge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnLS0+Jyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIENETyQyID0gdG9rZW5pemVyLlRZUEUuQ0RPO1xuXG5cdHZhciBDRE9fMSA9IHtcblx0ICAgIG5hbWU6ICdDRE8nLFxuXHQgICAgc3RydWN0dXJlOiBbXSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoQ0RPJDIpOyAvLyA8IS0tXG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnQ0RPJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydClcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmspIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJzwhLS0nKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRnID0gdG9rZW5pemVyLlRZUEU7XG5cdHZhciBJREVOVElGSUVSJDkgPSBUWVBFJGcuSWRlbnRpZmllcjtcblx0dmFyIEZVTExTVE9QJDMgPSBUWVBFJGcuRnVsbFN0b3A7XG5cblx0Ly8gJy4nIGlkZW50XG5cdHZhciBDbGFzc1NlbGVjdG9yID0ge1xuXHQgICAgbmFtZTogJ0NsYXNzU2VsZWN0b3InLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbmFtZTogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoRlVMTFNUT1AkMyk7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnQ2xhc3NTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnNjYW5uZXIudG9rZW5TdGFydCAtIDEsIHRoaXMuc2Nhbm5lci50b2tlbkVuZCksXG5cdCAgICAgICAgICAgIG5hbWU6IHRoaXMuc2Nhbm5lci5jb25zdW1lKElERU5USUZJRVIkOSlcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJy4nKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5uYW1lKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRoID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIFBMVVNTSUdOJDUgPSBUWVBFJGguUGx1c1NpZ247XG5cdHZhciBTT0xJRFVTJDIgPSBUWVBFJGguU29saWR1cztcblx0dmFyIEdSRUFURVJUSEFOU0lHTiQyID0gVFlQRSRoLkdyZWF0ZXJUaGFuU2lnbjtcblx0dmFyIFRJTERFJDIgPSBUWVBFJGguVGlsZGU7XG5cblx0Ly8gKyB8ID4gfCB+IHwgL2RlZXAvXG5cdHZhciBDb21iaW5hdG9yID0ge1xuXHQgICAgbmFtZTogJ0NvbWJpbmF0b3InLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbmFtZTogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXG5cdCAgICAgICAgc3dpdGNoICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2UgR1JFQVRFUlRIQU5TSUdOJDI6XG5cdCAgICAgICAgICAgIGNhc2UgUExVU1NJR04kNTpcblx0ICAgICAgICAgICAgY2FzZSBUSUxERSQyOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGNhc2UgU09MSURVUyQyOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5leHBlY3RJZGVudGlmaWVyKCdkZWVwJyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFNPTElEVVMkMik7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdDb21iaW5hdG9yIGlzIGV4cGVjdGVkJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ0NvbWJpbmF0b3InLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgbmFtZTogdGhpcy5zY2FubmVyLnN1YnN0clRvQ3Vyc29yKHN0YXJ0KVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuayhub2RlLm5hbWUpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJGkgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgQVNURVJJU0skMyA9IFRZUEUkaS5Bc3Rlcmlzaztcblx0dmFyIFNPTElEVVMkMyA9IFRZUEUkaS5Tb2xpZHVzO1xuXG5cdC8vICcvKicgLiogJyovJ1xuXHR2YXIgQ29tbWVudCA9IHtcblx0ICAgIG5hbWU6ICdDb21tZW50Jyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgdmFyIGVuZCA9IHRoaXMuc2Nhbm5lci50b2tlbkVuZDtcblxuXHQgICAgICAgIGlmICgoZW5kIC0gc3RhcnQgKyAyKSA+PSAyICYmXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChlbmQgLSAyKSA9PT0gQVNURVJJU0skMyAmJlxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQoZW5kIC0gMSkgPT09IFNPTElEVVMkMykge1xuXHQgICAgICAgICAgICBlbmQgLT0gMjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ0NvbW1lbnQnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2Nhbm5lci5zb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0ICsgMiwgZW5kKVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnLyonKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS52YWx1ZSk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCcqLycpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJGogPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgSURFTlRJRklFUiRhID0gVFlQRSRqLklkZW50aWZpZXI7XG5cdHZhciBDT0xPTiQzID0gVFlQRSRqLkNvbG9uO1xuXHR2YXIgRVhDTEFNQVRJT05NQVJLJDIgPSBUWVBFJGouRXhjbGFtYXRpb25NYXJrO1xuXHR2YXIgU09MSURVUyQ0ID0gVFlQRSRqLlNvbGlkdXM7XG5cdHZhciBBU1RFUklTSyQ0ID0gVFlQRSRqLkFzdGVyaXNrO1xuXHR2YXIgRE9MTEFSU0lHTiQxID0gVFlQRSRqLkRvbGxhclNpZ247XG5cdHZhciBIWVBIRU5NSU5VUyQ2ID0gVFlQRSRqLkh5cGhlbk1pbnVzO1xuXHR2YXIgU0VNSUNPTE9OJDQgPSBUWVBFJGouU2VtaWNvbG9uO1xuXHR2YXIgUklHSFRDVVJMWUJSQUNLRVQkMyA9IFRZUEUkai5SaWdodEN1cmx5QnJhY2tldDtcblx0dmFyIFJJR0hUUEFSRU5USEVTSVMkMSA9IFRZUEUkai5SaWdodFBhcmVudGhlc2lzO1xuXHR2YXIgUExVU1NJR04kNiA9IFRZUEUkai5QbHVzU2lnbjtcblx0dmFyIE5VTUJFUlNJR04kMiA9IFRZUEUkai5OdW1iZXJTaWduO1xuXG5cdHZhciBEZWNsYXJhdGlvbiA9IHtcblx0ICAgIG5hbWU6ICdEZWNsYXJhdGlvbicsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBpbXBvcnRhbnQ6IFtCb29sZWFuLCBTdHJpbmddLFxuXHQgICAgICAgIHByb3BlcnR5OiBTdHJpbmcsXG5cdCAgICAgICAgdmFsdWU6IFsnVmFsdWUnLCAnUmF3J11cblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgdmFyIHByb3BlcnR5ID0gcmVhZFByb3BlcnR5LmNhbGwodGhpcyk7XG5cdCAgICAgICAgdmFyIGltcG9ydGFudCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciB2YWx1ZTtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KENPTE9OJDMpO1xuXG5cdCAgICAgICAgaWYgKGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpID8gdGhpcy5wYXJzZUN1c3RvbVByb3BlcnR5IDogdGhpcy5wYXJzZVZhbHVlKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gdGhpcy5WYWx1ZShwcm9wZXJ0eSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLlJhdyh0aGlzLnNjYW5uZXIuY3VycmVudFRva2VuLCBFWENMQU1BVElPTk1BUkskMiwgU0VNSUNPTE9OJDQsIGZhbHNlLCBmYWxzZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IEVYQ0xBTUFUSU9OTUFSSyQyKSB7XG5cdCAgICAgICAgICAgIGltcG9ydGFudCA9IGdldEltcG9ydGFudCh0aGlzLnNjYW5uZXIpO1xuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVE9ETzogaW5jbHVkZSBvciBub3QgdG8gaW5jbHVkZSBzZW1pY29sb24gdG8gcmFuZ2U/XG5cdCAgICAgICAgLy8gaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IFNFTUlDT0xPTikge1xuXHQgICAgICAgIC8vICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIGlmICghdGhpcy5zY2FubmVyLmVvZiAmJlxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIudG9rZW5UeXBlICE9PSBTRU1JQ09MT04kNCAmJlxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIudG9rZW5UeXBlICE9PSBSSUdIVFBBUkVOVEhFU0lTJDEgJiZcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLnRva2VuVHlwZSAhPT0gUklHSFRDVVJMWUJSQUNLRVQkMykge1xuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnRGVjbGFyYXRpb24nLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgaW1wb3J0YW50OiBpbXBvcnRhbnQsXG5cdCAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eSxcblx0ICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlLCBpdGVtKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUucHJvcGVydHkpO1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnOicpO1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdGUocHJvY2Vzc0NodW5rLCBub2RlLnZhbHVlKTtcblxuXHQgICAgICAgIGlmIChub2RlLmltcG9ydGFudCkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5pbXBvcnRhbnQgPT09IHRydWUgPyAnIWltcG9ydGFudCcgOiAnIScgKyBub2RlLmltcG9ydGFudCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGl0ZW0gJiYgaXRlbS5uZXh0KSB7XG5cdCAgICAgICAgICAgIHByb2Nlc3NDaHVuaygnOycpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB3YWxrQ29udGV4dDogJ2RlY2xhcmF0aW9uJ1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkobmFtZSkge1xuXHQgICAgcmV0dXJuIG5hbWUubGVuZ3RoID49IDIgJiZcblx0ICAgICAgICAgICBuYW1lLmNoYXJDb2RlQXQoMCkgPT09IEhZUEhFTk1JTlVTJDYgJiZcblx0ICAgICAgICAgICBuYW1lLmNoYXJDb2RlQXQoMSkgPT09IEhZUEhFTk1JTlVTJDY7XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkUHJvcGVydHkoKSB7XG5cdCAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgIHZhciBwcmVmaXggPSAwO1xuXG5cdCAgICAvLyBoYWNrc1xuXHQgICAgc3dpdGNoICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlKSB7XG5cdCAgICAgICAgY2FzZSBBU1RFUklTSyQ0OlxuXHQgICAgICAgIGNhc2UgRE9MTEFSU0lHTiQxOlxuXHQgICAgICAgIGNhc2UgUExVU1NJR04kNjpcblx0ICAgICAgICBjYXNlIE5VTUJFUlNJR04kMjpcblx0ICAgICAgICAgICAgcHJlZml4ID0gMTtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAvLyBUT0RPOiBub3Qgc3VyZSB3ZSBzaG91bGQgc3VwcG9ydCB0aGlzIGhhY2tcblx0ICAgICAgICBjYXNlIFNPTElEVVMkNDpcblx0ICAgICAgICAgICAgcHJlZml4ID0gdGhpcy5zY2FubmVyLmxvb2t1cFR5cGUoMSkgPT09IFNPTElEVVMkNCA/IDIgOiAxO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgIH1cblxuXHQgICAgaWYgKHRoaXMuc2Nhbm5lci5sb29rdXBUeXBlKHByZWZpeCkgPT09IEhZUEhFTk1JTlVTJDYpIHtcblx0ICAgICAgICBwcmVmaXgrKztcblx0ICAgIH1cblxuXHQgICAgaWYgKHByZWZpeCkge1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwKHByZWZpeCk7XG5cdCAgICB9XG5cblx0ICAgIHRoaXMuc2Nhbm5lci5lYXQoSURFTlRJRklFUiRhKTtcblxuXHQgICAgcmV0dXJuIHRoaXMuc2Nhbm5lci5zdWJzdHJUb0N1cnNvcihzdGFydCk7XG5cdH1cblxuXHQvLyAhIHdzKiBpbXBvcnRhbnRcblx0ZnVuY3Rpb24gZ2V0SW1wb3J0YW50KHNjYW5uZXIpIHtcblx0ICAgIHNjYW5uZXIuZWF0KEVYQ0xBTUFUSU9OTUFSSyQyKTtcblx0ICAgIHNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgIHZhciBpbXBvcnRhbnQgPSBzY2FubmVyLmNvbnN1bWUoSURFTlRJRklFUiRhKTtcblxuXHQgICAgLy8gc3RvcmUgb3JpZ2luYWwgdmFsdWUgaW4gY2FzZSBpdCBkaWZmZXIgZnJvbSBgaW1wb3J0YW50YFxuXHQgICAgLy8gZm9yIGJldHRlciBvcmlnaW5hbCBzb3VyY2UgcmVzdG9yaW5nIGFuZCBoYWNrcyBsaWtlIGAhaWVgIHN1cHBvcnRcblx0ICAgIHJldHVybiBpbXBvcnRhbnQgPT09ICdpbXBvcnRhbnQnID8gdHJ1ZSA6IGltcG9ydGFudDtcblx0fVxuXG5cdHZhciBUWVBFJGsgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgV0hJVEVTUEFDRSQ1ID0gVFlQRSRrLldoaXRlU3BhY2U7XG5cdHZhciBDT01NRU5UJDUgPSBUWVBFJGsuQ29tbWVudDtcblx0dmFyIFNFTUlDT0xPTiQ1ID0gVFlQRSRrLlNlbWljb2xvbjtcblxuXHRmdW5jdGlvbiBjb25zdW1lUmF3JDMoc3RhcnRUb2tlbikge1xuXHQgICAgcmV0dXJuIHRoaXMuUmF3KHN0YXJ0VG9rZW4sIDAsIFNFTUlDT0xPTiQ1LCB0cnVlLCB0cnVlKTtcblx0fVxuXG5cdHZhciBEZWNsYXJhdGlvbkxpc3QgPSB7XG5cdCAgICBuYW1lOiAnRGVjbGFyYXRpb25MaXN0Jyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIGNoaWxkcmVuOiBbWydEZWNsYXJhdGlvbiddXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBuZXcgbGlzdCgpO1xuXG5cdCAgICAgICAgXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zY2FubmVyLnRva2VuVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBXSElURVNQQUNFJDU6XG5cdCAgICAgICAgICAgICAgICBjYXNlIENPTU1FTlQkNTpcblx0ICAgICAgICAgICAgICAgIGNhc2UgU0VNSUNPTE9OJDU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5hcHBlbmREYXRhKHRoaXMudG9sZXJhbnRQYXJzZSh0aGlzLkRlY2xhcmF0aW9uLCBjb25zdW1lUmF3JDMpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdEZWNsYXJhdGlvbkxpc3QnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb25Gcm9tTGlzdChjaGlsZHJlbiksXG5cdCAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHRoaXMuZWFjaChwcm9jZXNzQ2h1bmssIG5vZGUpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBOVU1CRVIkNSA9IHRva2VuaXplci5UWVBFLk51bWJlcjtcblxuXHQvLyBzcGVjaWFsIHJlYWRlciBmb3IgdW5pdHMgdG8gYXZvaWQgYWRqb2luZWQgSUUgaGFja3MgKGkuZS4gJzFweFxcOScpXG5cdGZ1bmN0aW9uIHJlYWRVbml0KHNjYW5uZXIpIHtcblx0ICAgIHZhciB1bml0ID0gc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG5cdCAgICB2YXIgYmFja1NsYXNoUG9zID0gdW5pdC5pbmRleE9mKCdcXFxcJyk7XG5cblx0ICAgIGlmIChiYWNrU2xhc2hQb3MgPiAwKSB7XG5cdCAgICAgICAgLy8gcGF0Y2ggdG9rZW4gb2Zmc2V0XG5cdCAgICAgICAgc2Nhbm5lci50b2tlblN0YXJ0ICs9IGJhY2tTbGFzaFBvcztcblxuXHQgICAgICAgIC8vIHJldHVybiBwYXJ0IGJlZm9yZSBiYWNrc2xhc2hcblx0ICAgICAgICByZXR1cm4gdW5pdC5zdWJzdHJpbmcoMCwgYmFja1NsYXNoUG9zKTtcblx0ICAgIH1cblxuXHQgICAgLy8gbm8gYmFja3NsYXNoIGluIHVuaXQgbmFtZVxuXHQgICAgc2Nhbm5lci5uZXh0KCk7XG5cblx0ICAgIHJldHVybiB1bml0O1xuXHR9XG5cblx0Ly8gbnVtYmVyIGlkZW50XG5cdHZhciBEaW1lbnNpb24gPSB7XG5cdCAgICBuYW1lOiAnRGltZW5zaW9uJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmcsXG5cdCAgICAgICAgdW5pdDogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc2Nhbm5lci5jb25zdW1lKE5VTUJFUiQ1KTtcblx0ICAgICAgICB2YXIgdW5pdCA9IHJlYWRVbml0KHRoaXMuc2Nhbm5lcik7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnRGltZW5zaW9uJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgICAgICAgdW5pdDogdW5pdFxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuayhub2RlLnZhbHVlKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS51bml0KTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRsID0gdG9rZW5pemVyLlRZUEU7XG5cdHZhciBSSUdIVFBBUkVOVEhFU0lTJDIgPSBUWVBFJGwuUmlnaHRQYXJlbnRoZXNpcztcblxuXHQvLyA8ZnVuY3Rpb24tdG9rZW4+IDxzZXF1ZW5jZT4gJyknXG5cdHZhciBfRnVuY3Rpb24gPSB7XG5cdCAgICBuYW1lOiAnRnVuY3Rpb24nLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbmFtZTogU3RyaW5nLFxuXHQgICAgICAgIGNoaWxkcmVuOiBbW11dXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKHJlYWRTZXF1ZW5jZSwgcmVjb2duaXplcikge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBuYW1lID0gdGhpcy5zY2FubmVyLmNvbnN1bWVGdW5jdGlvbk5hbWUoKTtcblx0ICAgICAgICB2YXIgbmFtZUxvd2VyQ2FzZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICB2YXIgY2hpbGRyZW47XG5cblx0ICAgICAgICBjaGlsZHJlbiA9IHJlY29nbml6ZXIuaGFzT3duUHJvcGVydHkobmFtZUxvd2VyQ2FzZSlcblx0ICAgICAgICAgICAgPyByZWNvZ25pemVyW25hbWVMb3dlckNhc2VdLmNhbGwodGhpcywgcmVjb2duaXplcilcblx0ICAgICAgICAgICAgOiByZWFkU2VxdWVuY2UuY2FsbCh0aGlzLCByZWNvZ25pemVyKTtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoUklHSFRQQVJFTlRIRVNJUyQyKTtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdGdW5jdGlvbicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBuYW1lOiBuYW1lLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5uYW1lKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJygnKTtcblx0ICAgICAgICB0aGlzLmVhY2gocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJyknKTtcblx0ICAgIH0sXG5cdCAgICB3YWxrQ29udGV4dDogJ2Z1bmN0aW9uJ1xuXHR9O1xuXG5cdHZhciBpc0hleCQxID0gdG9rZW5pemVyLmlzSGV4O1xuXHR2YXIgVFlQRSRtID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIElERU5USUZJRVIkYiA9IFRZUEUkbS5JZGVudGlmaWVyO1xuXHR2YXIgTlVNQkVSJDYgPSBUWVBFJG0uTnVtYmVyO1xuXHR2YXIgTlVNQkVSU0lHTiQzID0gVFlQRSRtLk51bWJlclNpZ247XG5cblx0ZnVuY3Rpb24gY29uc3VtZUhleFNlcXVlbmNlKHNjYW5uZXIsIHJlcXVpcmVkKSB7XG5cdCAgICBpZiAoIWlzSGV4JDEoc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChzY2FubmVyLnRva2VuU3RhcnQpKSkge1xuXHQgICAgICAgIGlmIChyZXF1aXJlZCkge1xuXHQgICAgICAgICAgICBzY2FubmVyLmVycm9yKCdVbmV4cGVjdGVkIGlucHV0Jywgc2Nhbm5lci50b2tlblN0YXJ0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmb3IgKHZhciBwb3MgPSBzY2FubmVyLnRva2VuU3RhcnQgKyAxOyBwb3MgPCBzY2FubmVyLnRva2VuRW5kOyBwb3MrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChwb3MpO1xuXG5cdCAgICAgICAgLy8gYnJlYWsgb24gbm9uLWhleCBjaGFyXG5cdCAgICAgICAgaWYgKCFpc0hleCQxKGNvZGUpKSB7XG5cdCAgICAgICAgICAgIC8vIGJyZWFrIHRva2VuLCBleGNsdWRlIHN5bWJvbFxuXHQgICAgICAgICAgICBzY2FubmVyLnRva2VuU3RhcnQgPSBwb3M7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8vIHRva2VuIGlzIGZ1bGwgaGV4IHNlcXVlbmNlLCBnbyB0byBuZXh0IHRva2VuXG5cdCAgICBzY2FubmVyLm5leHQoKTtcblx0fVxuXG5cdC8vICMgaWRlbnRcblx0dmFyIEhleENvbG9yID0ge1xuXHQgICAgbmFtZTogJ0hleENvbG9yJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KE5VTUJFUlNJR04kMyk7XG5cblx0ICAgICAgICBcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSBOVU1CRVIkNjpcblx0ICAgICAgICAgICAgICAgIGNvbnN1bWVIZXhTZXF1ZW5jZSh0aGlzLnNjYW5uZXIsIHRydWUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBpZiB0b2tlbiBpcyBpZGVudGlmaWVyIHRoZW4gbnVtYmVyIGNvbnNpc3RzIG9mIGhleCBvbmx5LFxuXHQgICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGFkZCBpZGVudGlmaWVyIHRvIHJlc3VsdFxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IElERU5USUZJRVIkYikge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN1bWVIZXhTZXF1ZW5jZSh0aGlzLnNjYW5uZXIsIGZhbHNlKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgY2FzZSBJREVOVElGSUVSJGI6XG5cdCAgICAgICAgICAgICAgICBjb25zdW1lSGV4U2VxdWVuY2UodGhpcy5zY2FubmVyLCB0cnVlKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ051bWJlciBvciBpZGVudGlmaWVyIGlzIGV4cGVjdGVkJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ0hleENvbG9yJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNjYW5uZXIuc3Vic3RyVG9DdXJzb3Ioc3RhcnQgKyAxKSAvLyBza2lwICNcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJyMnKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS52YWx1ZSk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkbiA9IHRva2VuaXplci5UWVBFO1xuXHR2YXIgSURFTlRJRklFUiRjID0gVFlQRSRuLklkZW50aWZpZXI7XG5cblx0dmFyIElkZW50aWZpZXIgPSB7XG5cdCAgICBuYW1lOiAnSWRlbnRpZmllcicsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBuYW1lOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24odGhpcy5zY2FubmVyLnRva2VuU3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlbkVuZCksXG5cdCAgICAgICAgICAgIG5hbWU6IHRoaXMuc2Nhbm5lci5jb25zdW1lKElERU5USUZJRVIkYylcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5uYW1lKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRvID0gdG9rZW5pemVyLlRZUEU7XG5cdHZhciBJREVOVElGSUVSJGQgPSBUWVBFJG8uSWRlbnRpZmllcjtcblx0dmFyIE5VTUJFUlNJR04kNCA9IFRZUEUkby5OdW1iZXJTaWduO1xuXG5cdC8vICcjJyBpZGVudFxuXHR2YXIgSWRTZWxlY3RvciA9IHtcblx0ICAgIG5hbWU6ICdJZFNlbGVjdG9yJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIG5hbWU6IFN0cmluZ1xuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KE5VTUJFUlNJR04kNCk7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnSWRTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnNjYW5uZXIudG9rZW5TdGFydCAtIDEsIHRoaXMuc2Nhbm5lci50b2tlbkVuZCksXG5cdCAgICAgICAgICAgIG5hbWU6IHRoaXMuc2Nhbm5lci5jb25zdW1lKElERU5USUZJRVIkZClcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJyMnKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5uYW1lKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRwID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIElERU5USUZJRVIkZSA9IFRZUEUkcC5JZGVudGlmaWVyO1xuXHR2YXIgTlVNQkVSJDcgPSBUWVBFJHAuTnVtYmVyO1xuXHR2YXIgTEVGVFBBUkVOVEhFU0lTJDQgPSBUWVBFJHAuTGVmdFBhcmVudGhlc2lzO1xuXHR2YXIgUklHSFRQQVJFTlRIRVNJUyQzID0gVFlQRSRwLlJpZ2h0UGFyZW50aGVzaXM7XG5cdHZhciBDT0xPTiQ0ID0gVFlQRSRwLkNvbG9uO1xuXHR2YXIgU09MSURVUyQ1ID0gVFlQRSRwLlNvbGlkdXM7XG5cblx0dmFyIE1lZGlhRmVhdHVyZSA9IHtcblx0ICAgIG5hbWU6ICdNZWRpYUZlYXR1cmUnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbmFtZTogU3RyaW5nLFxuXHQgICAgICAgIHZhbHVlOiBbJ0lkZW50aWZpZXInLCAnTnVtYmVyJywgJ0RpbWVuc2lvbicsICdSYXRpbycsIG51bGxdXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBuYW1lO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KExFRlRQQVJFTlRIRVNJUyQ0KTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICBuYW1lID0gdGhpcy5zY2FubmVyLmNvbnN1bWUoSURFTlRJRklFUiRlKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSAhPT0gUklHSFRQQVJFTlRIRVNJUyQzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoQ09MT04kNCk7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblxuXHQgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgTlVNQkVSJDc6XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5sb29rdXBUeXBlKDEpID09PSBJREVOVElGSUVSJGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLkRpbWVuc2lvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2FubmVyLmxvb2t1cE5vbldTVHlwZSgxKSA9PT0gU09MSURVUyQ1KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5SYXRpbygpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5OdW1iZXIoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgY2FzZSBJREVOVElGSUVSJGU6XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLklkZW50aWZpZXIoKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lcnJvcignTnVtYmVyLCBkaW1lbnNpb24sIHJhdGlvIG9yIGlkZW50aWZpZXIgaXMgZXhwZWN0ZWQnKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFJJR0hUUEFSRU5USEVTSVMkMyk7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnTWVkaWFGZWF0dXJlJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIG5hbWU6IG5hbWUsXG5cdCAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnKCcpO1xuXHQgICAgICAgIHByb2Nlc3NDaHVuayhub2RlLm5hbWUpO1xuXHQgICAgICAgIGlmIChub2RlLnZhbHVlICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHByb2Nlc3NDaHVuaygnOicpO1xuXHQgICAgICAgICAgICB0aGlzLmdlbmVyYXRlKHByb2Nlc3NDaHVuaywgbm9kZS52YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHByb2Nlc3NDaHVuaygnKScpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJHEgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgV0hJVEVTUEFDRSQ2ID0gVFlQRSRxLldoaXRlU3BhY2U7XG5cdHZhciBDT01NRU5UJDYgPSBUWVBFJHEuQ29tbWVudDtcblx0dmFyIElERU5USUZJRVIkZiA9IFRZUEUkcS5JZGVudGlmaWVyO1xuXHR2YXIgTEVGVFBBUkVOVEhFU0lTJDUgPSBUWVBFJHEuTGVmdFBhcmVudGhlc2lzO1xuXG5cdHZhciBNZWRpYVF1ZXJ5ID0ge1xuXHQgICAgbmFtZTogJ01lZGlhUXVlcnknLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgY2hpbGRyZW46IFtbJ0lkZW50aWZpZXInLCAnTWVkaWFGZWF0dXJlJywgJ1doaXRlU3BhY2UnXV1cblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICAgICAgdmFyIGNoaWxkcmVuID0gbmV3IGxpc3QoKTtcblx0ICAgICAgICB2YXIgY2hpbGQgPSBudWxsO1xuXHQgICAgICAgIHZhciBzcGFjZSA9IG51bGw7XG5cblx0ICAgICAgICBzY2FuOlxuXHQgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZikge1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgQ09NTUVOVCQ2OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgV0hJVEVTUEFDRSQ2OlxuXHQgICAgICAgICAgICAgICAgICAgIHNwYWNlID0gdGhpcy5XaGl0ZVNwYWNlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgSURFTlRJRklFUiRmOlxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5JZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgTEVGVFBBUkVOVEhFU0lTJDU6XG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLk1lZGlhRmVhdHVyZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAoc3BhY2UgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuLmFwcGVuZERhdGEoc3BhY2UpO1xuXHQgICAgICAgICAgICAgICAgc3BhY2UgPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgY2hpbGRyZW4uYXBwZW5kRGF0YShjaGlsZCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNoaWxkID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lcnJvcignSWRlbnRpZmllciBvciBwYXJlbnRoZXNpcyBpcyBleHBlY3RlZCcpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdNZWRpYVF1ZXJ5Jyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLmVhY2gocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgQ09NTUEkMiA9IHRva2VuaXplci5UWVBFLkNvbW1hO1xuXG5cdHZhciBNZWRpYVF1ZXJ5TGlzdCA9IHtcblx0ICAgIG5hbWU6ICdNZWRpYVF1ZXJ5TGlzdCcsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBjaGlsZHJlbjogW1snTWVkaWFRdWVyeSddXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbihyZWxhdGl2ZSkge1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBsaXN0KCk7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YpIHtcblx0ICAgICAgICAgICAgY2hpbGRyZW4uYXBwZW5kRGF0YSh0aGlzLk1lZGlhUXVlcnkocmVsYXRpdmUpKTtcblxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSAhPT0gQ09NTUEkMikge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdNZWRpYVF1ZXJ5TGlzdCcsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbkZyb21MaXN0KGNoaWxkcmVuKSxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgdGhpcy5lYWNoQ29tbWEocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgIH1cblx0fTtcblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC0zLyN0aGUtYW5iLXR5cGVcblx0dmFyIE50aCA9IHtcblx0ICAgIG5hbWU6ICdOdGgnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbnRoOiBbJ0FuUGx1c0InLCAnSWRlbnRpZmllciddLFxuXHQgICAgICAgIHNlbGVjdG9yOiBbJ1NlbGVjdG9yTGlzdCcsIG51bGxdXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKGFsbG93T2ZDbGF1c2UpIHtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgZW5kID0gc3RhcnQ7XG5cdCAgICAgICAgdmFyIHNlbGVjdG9yID0gbnVsbDtcblx0ICAgICAgICB2YXIgcXVlcnk7XG5cblx0ICAgICAgICBpZiAodGhpcy5zY2FubmVyLmxvb2t1cFZhbHVlKDAsICdvZGQnKSB8fCB0aGlzLnNjYW5uZXIubG9va3VwVmFsdWUoMCwgJ2V2ZW4nKSkge1xuXHQgICAgICAgICAgICBxdWVyeSA9IHRoaXMuSWRlbnRpZmllcigpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5BblBsdXNCKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXG5cdCAgICAgICAgaWYgKGFsbG93T2ZDbGF1c2UgJiYgdGhpcy5zY2FubmVyLmxvb2t1cFZhbHVlKDAsICdvZicpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cblx0ICAgICAgICAgICAgc2VsZWN0b3IgPSB0aGlzLlNlbGVjdG9yTGlzdCgpO1xuXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm5lZWRQb3NpdGlvbnMpIHtcblx0ICAgICAgICAgICAgICAgIGVuZCA9IHNlbGVjdG9yLmNoaWxkcmVuLmxhc3QoKS5sb2MuZW5kLm9mZnNldDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm5lZWRQb3NpdGlvbnMpIHtcblx0ICAgICAgICAgICAgICAgIGVuZCA9IHF1ZXJ5LmxvYy5lbmQub2Zmc2V0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ050aCcsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgZW5kKSxcblx0ICAgICAgICAgICAgbnRoOiBxdWVyeSxcblx0ICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgdGhpcy5nZW5lcmF0ZShwcm9jZXNzQ2h1bmssIG5vZGUubnRoKTtcblx0ICAgICAgICBpZiAobm9kZS5zZWxlY3RvciAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsoJyBvZiAnKTtcblx0ICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZShwcm9jZXNzQ2h1bmssIG5vZGUuc2VsZWN0b3IpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblxuXHR2YXIgTlVNQkVSJDggPSB0b2tlbml6ZXIuVFlQRS5OdW1iZXI7XG5cblx0dmFyIF9OdW1iZXIgPSB7XG5cdCAgICBuYW1lOiAnTnVtYmVyJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ051bWJlcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnNjYW5uZXIudG9rZW5TdGFydCwgdGhpcy5zY2FubmVyLnRva2VuRW5kKSxcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2Nhbm5lci5jb25zdW1lKE5VTUJFUiQ4KVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuayhub2RlLnZhbHVlKTtcblx0ICAgIH1cblx0fTtcblxuXHQvLyAnLycgfCAnKicgfCAnLCcgfCAnOicgfCAnKycgfCAnLSdcblx0dmFyIE9wZXJhdG9yID0ge1xuXHQgICAgbmFtZTogJ09wZXJhdG9yJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ09wZXJhdG9yJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNjYW5uZXIuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUudmFsdWUpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJHIgPSB0b2tlbml6ZXIuVFlQRTtcblx0dmFyIExFRlRQQVJFTlRIRVNJUyQ2ID0gVFlQRSRyLkxlZnRQYXJlbnRoZXNpcztcblx0dmFyIFJJR0hUUEFSRU5USEVTSVMkNCA9IFRZUEUkci5SaWdodFBhcmVudGhlc2lzO1xuXG5cdHZhciBQYXJlbnRoZXNlcyA9IHtcblx0ICAgIG5hbWU6ICdQYXJlbnRoZXNlcycsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBjaGlsZHJlbjogW1tdXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbihyZWFkU2VxdWVuY2UsIHJlY29nbml6ZXIpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBudWxsO1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChMRUZUUEFSRU5USEVTSVMkNik7XG5cdCAgICAgICAgY2hpbGRyZW4gPSByZWFkU2VxdWVuY2UuY2FsbCh0aGlzLCByZWNvZ25pemVyKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFJJR0hUUEFSRU5USEVTSVMkNCk7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnUGFyZW50aGVzZXMnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCcoJyk7XG5cdCAgICAgICAgdGhpcy5lYWNoKHByb2Nlc3NDaHVuaywgbm9kZSk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCcpJyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkcyA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBOVU1CRVIkOSA9IFRZUEUkcy5OdW1iZXI7XG5cdHZhciBQRVJDRU5UU0lHTiQxID0gVFlQRSRzLlBlcmNlbnRTaWduO1xuXG5cdHZhciBQZXJjZW50YWdlID0ge1xuXHQgICAgbmFtZTogJ1BlcmNlbnRhZ2UnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgdmFsdWU6IFN0cmluZ1xuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5zY2FubmVyLmNvbnN1bWUoTlVNQkVSJDkpO1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChQRVJDRU5UU0lHTiQxKTtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdQZXJjZW50YWdlJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uKHN0YXJ0LCB0aGlzLnNjYW5uZXIudG9rZW5TdGFydCksXG5cdCAgICAgICAgICAgIHZhbHVlOiBudW1iZXJcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS52YWx1ZSk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCclJyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkdCA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBJREVOVElGSUVSJGcgPSBUWVBFJHQuSWRlbnRpZmllcjtcblx0dmFyIEZVTkNUSU9OJDQgPSBUWVBFJHQuRnVuY3Rpb247XG5cdHZhciBDT0xPTiQ1ID0gVFlQRSR0LkNvbG9uO1xuXHR2YXIgUklHSFRQQVJFTlRIRVNJUyQ1ID0gVFlQRSR0LlJpZ2h0UGFyZW50aGVzaXM7XG5cblx0Ly8gOiBpZGVudCBbICcoJyAuLiAnKScgXT9cblx0dmFyIFBzZXVkb0NsYXNzU2VsZWN0b3IgPSB7XG5cdCAgICBuYW1lOiAnUHNldWRvQ2xhc3NTZWxlY3RvcicsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBuYW1lOiBTdHJpbmcsXG5cdCAgICAgICAgY2hpbGRyZW46IFtbJ1JhdyddLCBudWxsXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBudWxsO1xuXHQgICAgICAgIHZhciBuYW1lO1xuXHQgICAgICAgIHZhciBuYW1lTG93ZXJDYXNlO1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdChDT0xPTiQ1KTtcblxuXHQgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBGVU5DVElPTiQ0KSB7XG5cdCAgICAgICAgICAgIG5hbWUgPSB0aGlzLnNjYW5uZXIuY29uc3VtZUZ1bmN0aW9uTmFtZSgpO1xuXHQgICAgICAgICAgICBuYW1lTG93ZXJDYXNlID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdCAgICAgICAgICAgIGlmICh0aGlzLnBzZXVkby5oYXNPd25Qcm9wZXJ0eShuYW1lTG93ZXJDYXNlKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLnBzZXVkb1tuYW1lTG93ZXJDYXNlXS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBuZXcgbGlzdCgpLmFwcGVuZERhdGEoXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5SYXcodGhpcy5zY2FubmVyLmN1cnJlbnRUb2tlbiwgMCwgMCwgZmFsc2UsIGZhbHNlKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoUklHSFRQQVJFTlRIRVNJUyQ1KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBuYW1lID0gdGhpcy5zY2FubmVyLmNvbnN1bWUoSURFTlRJRklFUiRnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnUHNldWRvQ2xhc3NTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBuYW1lOiBuYW1lLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJzonKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS5uYW1lKTtcblxuXHQgICAgICAgIGlmIChub2RlLmNoaWxkcmVuICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHByb2Nlc3NDaHVuaygnKCcpO1xuXHQgICAgICAgICAgICB0aGlzLmVhY2gocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgICAgICAgICAgcHJvY2Vzc0NodW5rKCcpJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHdhbGtDb250ZXh0OiAnZnVuY3Rpb24nXG5cdH07XG5cblx0dmFyIFRZUEUkdSA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBJREVOVElGSUVSJGggPSBUWVBFJHUuSWRlbnRpZmllcjtcblx0dmFyIEZVTkNUSU9OJDUgPSBUWVBFJHUuRnVuY3Rpb247XG5cdHZhciBDT0xPTiQ2ID0gVFlQRSR1LkNvbG9uO1xuXHR2YXIgUklHSFRQQVJFTlRIRVNJUyQ2ID0gVFlQRSR1LlJpZ2h0UGFyZW50aGVzaXM7XG5cblx0Ly8gOjogaWRlbnQgWyAnKCcgLi4gJyknIF0/XG5cdHZhciBQc2V1ZG9FbGVtZW50U2VsZWN0b3IgPSB7XG5cdCAgICBuYW1lOiAnUHNldWRvRWxlbWVudFNlbGVjdG9yJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIG5hbWU6IFN0cmluZyxcblx0ICAgICAgICBjaGlsZHJlbjogW1snUmF3J10sIG51bGxdXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG51bGw7XG5cdCAgICAgICAgdmFyIG5hbWU7XG5cdCAgICAgICAgdmFyIG5hbWVMb3dlckNhc2U7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KENPTE9OJDYpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoQ09MT04kNik7XG5cblx0ICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gRlVOQ1RJT04kNSkge1xuXHQgICAgICAgICAgICBuYW1lID0gdGhpcy5zY2FubmVyLmNvbnN1bWVGdW5jdGlvbk5hbWUoKTtcblx0ICAgICAgICAgICAgbmFtZUxvd2VyQ2FzZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQgICAgICAgICAgICBpZiAodGhpcy5wc2V1ZG8uaGFzT3duUHJvcGVydHkobmFtZUxvd2VyQ2FzZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5wc2V1ZG9bbmFtZUxvd2VyQ2FzZV0uY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwU0MoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gbmV3IGxpc3QoKS5hcHBlbmREYXRhKFxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuUmF3KHRoaXMuc2Nhbm5lci5jdXJyZW50VG9rZW4sIDAsIDAsIGZhbHNlLCBmYWxzZSlcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFJJR0hUUEFSRU5USEVTSVMkNik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgbmFtZSA9IHRoaXMuc2Nhbm5lci5jb25zdW1lKElERU5USUZJRVIkaCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1BzZXVkb0VsZW1lbnRTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBuYW1lOiBuYW1lLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJzo6Jyk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUubmFtZSk7XG5cblx0ICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwcm9jZXNzQ2h1bmsoJygnKTtcblx0ICAgICAgICAgICAgdGhpcy5lYWNoKHByb2Nlc3NDaHVuaywgbm9kZSk7XG5cdCAgICAgICAgICAgIHByb2Nlc3NDaHVuaygnKScpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB3YWxrQ29udGV4dDogJ2Z1bmN0aW9uJ1xuXHR9O1xuXG5cdHZhciBpc051bWJlciQzID0gdG9rZW5pemVyLmlzTnVtYmVyO1xuXHR2YXIgVFlQRSR2ID0gdG9rZW5pemVyLlRZUEU7XG5cdHZhciBOVU1CRVIkYSA9IFRZUEUkdi5OdW1iZXI7XG5cdHZhciBTT0xJRFVTJDYgPSBUWVBFJHYuU29saWR1cztcblx0dmFyIEZVTExTVE9QJDQgPSBUWVBFJHYuRnVsbFN0b3A7XG5cblx0Ly8gVGVybXMgb2YgPHJhdGlvPiBzaG91bGQgdG8gYmUgYSBwb3NpdGl2ZSBudW1iZXIgKG5vdCB6ZXJvIG9yIG5lZ2F0aXZlKVxuXHQvLyAoc2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9tZWRpYXF1ZXJpZXMtMy8jdmFsdWVzKVxuXHQvLyBIb3dldmVyLCAtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvIHRha2VzIGZyYWN0aW9uYWwgdmFsdWVzIGFzIGEgcmF0aW8ncyB0ZXJtXG5cdC8vIGFuZCB0aGlzIGlzIHVzaW5nIGJ5IHZhcmlvdXMgc2l0ZXMuIFRoZXJlZm9yZSB3ZSByZWxheCBjaGVja2luZyBvbiBwYXJzZVxuXHQvLyB0byB0ZXN0IGEgdGVybSBpcyB1bnNpZ25lZCBudW1iZXIgd2l0aG91dCBleHBvbmVudCBwYXJ0LlxuXHQvLyBBZGRpdGlvbmFsIGNoZWNrcyBtYXkgdG8gYmUgYXBwbGllZCBvbiBsZXhlciB2YWxpZGF0aW9uLlxuXHRmdW5jdGlvbiBjb25zdW1lTnVtYmVyKHNjYW5uZXIpIHtcblx0ICAgIHZhciB2YWx1ZSA9IHNjYW5uZXIuY29uc3VtZU5vbldTKE5VTUJFUiRhKTtcblxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChpKTtcblx0ICAgICAgICBpZiAoIWlzTnVtYmVyJDMoY29kZSkgJiYgY29kZSAhPT0gRlVMTFNUT1AkNCkge1xuXHQgICAgICAgICAgICBzY2FubmVyLmVycm9yKCdVbnNpZ25lZCBudW1iZXIgaXMgZXhwZWN0ZWQnLCBzY2FubmVyLnRva2VuU3RhcnQgLSB2YWx1ZS5sZW5ndGggKyBpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChOdW1iZXIodmFsdWUpID09PSAwKSB7XG5cdCAgICAgICAgc2Nhbm5lci5lcnJvcignWmVybyBudW1iZXIgaXMgbm90IGFsbG93ZWQnLCBzY2FubmVyLnRva2VuU3RhcnQgLSB2YWx1ZS5sZW5ndGgpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdmFsdWU7XG5cdH1cblxuXHQvLyA8cG9zaXRpdmUtaW50ZWdlcj4gUyogJy8nIFMqIDxwb3NpdGl2ZS1pbnRlZ2VyPlxuXHR2YXIgUmF0aW8gPSB7XG5cdCAgICBuYW1lOiAnUmF0aW8nLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbGVmdDogU3RyaW5nLFxuXHQgICAgICAgIHJpZ2h0OiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgdmFyIGxlZnQgPSBjb25zdW1lTnVtYmVyKHRoaXMuc2Nhbm5lcik7XG5cdCAgICAgICAgdmFyIHJpZ2h0O1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmVhdE5vbldTKFNPTElEVVMkNik7XG5cdCAgICAgICAgcmlnaHQgPSBjb25zdW1lTnVtYmVyKHRoaXMuc2Nhbm5lcik7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnUmF0aW8nLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgbGVmdDogbGVmdCxcblx0ICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0XG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUubGVmdCk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCcvJyk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUucmlnaHQpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBSYXcgPSB7XG5cdCAgICBuYW1lOiAnUmF3Jyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBTdHJpbmdcblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oc3RhcnRUb2tlbiwgZW5kVG9rZW5UeXBlMSwgZW5kVG9rZW5UeXBlMiwgaW5jbHVkZVRva2VuVHlwZTIsIGV4Y2x1ZGVXaGl0ZVNwYWNlKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGhpcy5zY2FubmVyLmdldFRva2VuU3RhcnQoc3RhcnRUb2tlbik7XG5cdCAgICAgICAgdmFyIGVuZE9mZnNldDtcblxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5za2lwKFxuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZ2V0UmF3TGVuZ3RoKFxuXHQgICAgICAgICAgICAgICAgc3RhcnRUb2tlbixcblx0ICAgICAgICAgICAgICAgIGVuZFRva2VuVHlwZTEsXG5cdCAgICAgICAgICAgICAgICBlbmRUb2tlblR5cGUyLFxuXHQgICAgICAgICAgICAgICAgaW5jbHVkZVRva2VuVHlwZTJcblx0ICAgICAgICAgICAgKVxuXHQgICAgICAgICk7XG5cblx0ICAgICAgICBpZiAoZXhjbHVkZVdoaXRlU3BhY2UgJiYgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQgPiBzdGFydE9mZnNldCkge1xuXHQgICAgICAgICAgICBlbmRPZmZzZXQgPSB0aGlzLnNjYW5uZXIuZ2V0T2Zmc2V0RXhjbHVkZVdTKCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZW5kT2Zmc2V0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1JhdycsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSxcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2Nhbm5lci5zb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUudmFsdWUpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBUWVBFJHcgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgTEVGVENVUkxZQlJBQ0tFVCQ1ID0gVFlQRSR3LkxlZnRDdXJseUJyYWNrZXQ7XG5cblx0ZnVuY3Rpb24gY29uc3VtZVJhdyQ0KHN0YXJ0VG9rZW4pIHtcblx0ICAgIHJldHVybiB0aGlzLlJhdyhzdGFydFRva2VuLCBMRUZUQ1VSTFlCUkFDS0VUJDUsIDAsIGZhbHNlLCB0cnVlKTtcblx0fVxuXG5cdHZhciBSdWxlID0ge1xuXHQgICAgbmFtZTogJ1J1bGUnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgc2VsZWN0b3I6IFsnU2VsZWN0b3JMaXN0JywgJ1JhdyddLFxuXHQgICAgICAgIGJsb2NrOiBbJ0Jsb2NrJ11cblx0ICAgIH0sXG5cdCAgICBwYXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLnNjYW5uZXIuY3VycmVudFRva2VuO1xuXHQgICAgICAgIHZhciBzdGFydE9mZnNldCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMucGFyc2VTZWxlY3RvclxuXHQgICAgICAgICAgICA/IHRoaXMudG9sZXJhbnRQYXJzZSh0aGlzLlNlbGVjdG9yTGlzdCwgY29uc3VtZVJhdyQ0KVxuXHQgICAgICAgICAgICA6IGNvbnN1bWVSYXckNC5jYWxsKHRoaXMsIHN0YXJ0VG9rZW4pO1xuXHQgICAgICAgIHZhciBibG9jayA9IHRoaXMuQmxvY2sodGhpcy5EZWNsYXJhdGlvbik7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnUnVsZScsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydE9mZnNldCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdCAgICAgICAgICAgIGJsb2NrOiBibG9ja1xuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdGUocHJvY2Vzc0NodW5rLCBub2RlLnNlbGVjdG9yKTtcblx0ICAgICAgICB0aGlzLmdlbmVyYXRlKHByb2Nlc3NDaHVuaywgbm9kZS5ibG9jayk7XG5cdCAgICB9LFxuXHQgICAgd2Fsa0NvbnRleHQ6ICdydWxlJ1xuXHR9O1xuXG5cdHZhciBTZWxlY3RvciA9IHtcblx0ICAgIG5hbWU6ICdTZWxlY3RvcicsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBjaGlsZHJlbjogW1tcblx0ICAgICAgICAgICAgJ1R5cGVTZWxlY3RvcicsXG5cdCAgICAgICAgICAgICdJZFNlbGVjdG9yJyxcblx0ICAgICAgICAgICAgJ0NsYXNzU2VsZWN0b3InLFxuXHQgICAgICAgICAgICAnQXR0cmlidXRlU2VsZWN0b3InLFxuXHQgICAgICAgICAgICAnUHNldWRvQ2xhc3NTZWxlY3RvcicsXG5cdCAgICAgICAgICAgICdQc2V1ZG9FbGVtZW50U2VsZWN0b3InLFxuXHQgICAgICAgICAgICAnQ29tYmluYXRvcicsXG5cdCAgICAgICAgICAgICdXaGl0ZVNwYWNlJ1xuXHQgICAgICAgIF1dXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucmVhZFNlcXVlbmNlKHRoaXMuc2NvcGUuU2VsZWN0b3IpO1xuXG5cdCAgICAgICAgLy8gbm90aGluZyB3ZXJlIGNvbnN1bWVkXG5cdCAgICAgICAgaWYgKGNoaWxkcmVuLmlzRW1wdHkoKSkge1xuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ1NlbGVjdG9yIGlzIGV4cGVjdGVkJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1NlbGVjdG9yJyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLmVhY2gocHJvY2Vzc0NodW5rLCBub2RlKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSR4ID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIENPTU1BJDMgPSBUWVBFJHguQ29tbWE7XG5cdHZhciBMRUZUQ1VSTFlCUkFDS0VUJDYgPSBUWVBFJHguTGVmdEN1cmx5QnJhY2tldDtcblxuXHR2YXIgU2VsZWN0b3JMaXN0ID0ge1xuXHQgICAgbmFtZTogJ1NlbGVjdG9yTGlzdCcsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBjaGlsZHJlbjogW1snU2VsZWN0b3InLCAnUmF3J11dXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBsaXN0KCk7XG5cblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YpIHtcblx0ICAgICAgICAgICAgY2hpbGRyZW4uYXBwZW5kRGF0YSh0aGlzLnBhcnNlU2VsZWN0b3Jcblx0ICAgICAgICAgICAgICAgID8gdGhpcy5TZWxlY3RvcigpXG5cdCAgICAgICAgICAgICAgICA6IHRoaXMuUmF3KHRoaXMuc2Nhbm5lci5jdXJyZW50VG9rZW4sIENPTU1BJDMsIExFRlRDVVJMWUJSQUNLRVQkNiwgZmFsc2UsIGZhbHNlKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIudG9rZW5UeXBlID09PSBDT01NQSQzKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnU2VsZWN0b3JMaXN0Jyxcblx0ICAgICAgICAgICAgbG9jOiB0aGlzLmdldExvY2F0aW9uRnJvbUxpc3QoY2hpbGRyZW4pLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLmVhY2hDb21tYShwcm9jZXNzQ2h1bmssIG5vZGUpO1xuXHQgICAgfSxcblx0ICAgIHdhbGtDb250ZXh0OiAnc2VsZWN0b3InXG5cdH07XG5cblx0dmFyIFNUUklORyQ1ID0gdG9rZW5pemVyLlRZUEUuU3RyaW5nO1xuXG5cdHZhciBfU3RyaW5nID0ge1xuXHQgICAgbmFtZTogJ1N0cmluZycsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICB2YWx1ZTogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdTdHJpbmcnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24odGhpcy5zY2FubmVyLnRva2VuU3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlbkVuZCksXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNjYW5uZXIuY29uc3VtZShTVFJJTkckNSlcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIGdlbmVyYXRlOiBmdW5jdGlvbihwcm9jZXNzQ2h1bmssIG5vZGUpIHtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsobm9kZS52YWx1ZSk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFRZUEUkeSA9IHRva2VuaXplci5UWVBFO1xuXG5cdHZhciBXSElURVNQQUNFJDcgPSBUWVBFJHkuV2hpdGVTcGFjZTtcblx0dmFyIENPTU1FTlQkNyA9IFRZUEUkeS5Db21tZW50O1xuXHR2YXIgRVhDTEFNQVRJT05NQVJLJDMgPSBUWVBFJHkuRXhjbGFtYXRpb25NYXJrO1xuXHR2YXIgQVRSVUxFJDQgPSBUWVBFJHkuQXRydWxlO1xuXHR2YXIgQ0RPJDMgPSBUWVBFJHkuQ0RPO1xuXHR2YXIgQ0RDJDMgPSBUWVBFJHkuQ0RDO1xuXG5cdGZ1bmN0aW9uIGNvbnN1bWVSYXckNShzdGFydFRva2VuKSB7XG5cdCAgICByZXR1cm4gdGhpcy5SYXcoc3RhcnRUb2tlbiwgMCwgMCwgZmFsc2UsIGZhbHNlKTtcblx0fVxuXG5cdHZhciBTdHlsZVNoZWV0ID0ge1xuXHQgICAgbmFtZTogJ1N0eWxlU2hlZXQnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgY2hpbGRyZW46IFtbJ0NvbW1lbnQnLCAnQXRydWxlJywgJ1J1bGUnLCAnUmF3J11dXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBsaXN0KCk7XG5cdCAgICAgICAgdmFyIGNoaWxkO1xuXG5cdCAgICAgICAgXG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLnNjYW5uZXIuZW9mKSB7XG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zY2FubmVyLnRva2VuVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBXSElURVNQQUNFJDc6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuXHQgICAgICAgICAgICAgICAgY2FzZSBDT01NRU5UJDc6XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIGNvbW1lbnRzIGV4Y2VwdCBleGNsYW1hdGlvbiBjb21tZW50cyAoaS5lLiAvKiEgLi4gKi8pIG9uIHRvcCBsZXZlbFxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLnRva2VuU3RhcnQgKyAyKSAhPT0gRVhDTEFNQVRJT05NQVJLJDMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLkNvbW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgY2FzZSBDRE8kMzogLy8gPCEtLVxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5DRE8oKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgY2FzZSBDREMkMzogLy8gLS0+XG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLkNEQygpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBDU1MgU3ludGF4IE1vZHVsZSBMZXZlbCAzXG5cdCAgICAgICAgICAgICAgICAvLyDCpzIuMiBFcnJvciBoYW5kbGluZ1xuXHQgICAgICAgICAgICAgICAgLy8gQXQgdGhlIFwidG9wIGxldmVsXCIgb2YgYSBzdHlsZXNoZWV0LCBhbiA8YXQta2V5d29yZC10b2tlbj4gc3RhcnRzIGFuIGF0LXJ1bGUuXG5cdCAgICAgICAgICAgICAgICBjYXNlIEFUUlVMRSQ0OlxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5BdHJ1bGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgLy8gQW55dGhpbmcgZWxzZSBzdGFydHMgYSBxdWFsaWZpZWQgcnVsZSAuLi5cblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLnRvbGVyYW50UGFyc2UodGhpcy5SdWxlLCBjb25zdW1lUmF3JDUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgY2hpbGRyZW4uYXBwZW5kRGF0YShjaGlsZCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1N0eWxlU2hlZXQnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgdGhpcy5lYWNoKHByb2Nlc3NDaHVuaywgbm9kZSk7XG5cdCAgICB9LFxuXHQgICAgd2Fsa0NvbnRleHQ6ICdzdHlsZXNoZWV0J1xuXHR9O1xuXG5cdHZhciBUWVBFJHogPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgSURFTlRJRklFUiRpID0gVFlQRSR6LklkZW50aWZpZXI7XG5cdHZhciBBU1RFUklTSyQ1ID0gVFlQRSR6LkFzdGVyaXNrO1xuXHR2YXIgVkVSVElDQUxMSU5FJDIgPSBUWVBFJHouVmVydGljYWxMaW5lO1xuXG5cdGZ1bmN0aW9uIGVhdElkZW50aWZpZXJPckFzdGVyaXNrKCkge1xuXHQgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IElERU5USUZJRVIkaSAmJlxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci50b2tlblR5cGUgIT09IEFTVEVSSVNLJDUpIHtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZXJyb3IoJ0lkZW50aWZpZXIgb3IgYXN0ZXJpc2sgaXMgZXhwZWN0ZWQnKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5zY2FubmVyLm5leHQoKTtcblx0fVxuXG5cdC8vIGlkZW50XG5cdC8vIGlkZW50fGlkZW50XG5cdC8vIGlkZW50fCpcblx0Ly8gKlxuXHQvLyAqfGlkZW50XG5cdC8vICp8KlxuXHQvLyB8aWRlbnRcblx0Ly8gfCpcblx0dmFyIFR5cGVTZWxlY3RvciA9IHtcblx0ICAgIG5hbWU6ICdUeXBlU2VsZWN0b3InLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgbmFtZTogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXG5cdCAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50b2tlblR5cGUgPT09IFZFUlRJQ0FMTElORSQyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICAgICAgICAgIGVhdElkZW50aWZpZXJPckFzdGVyaXNrLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZWF0SWRlbnRpZmllck9yQXN0ZXJpc2suY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLnRva2VuVHlwZSA9PT0gVkVSVElDQUxMSU5FJDIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5uZXh0KCk7XG5cdCAgICAgICAgICAgICAgICBlYXRJZGVudGlmaWVyT3JBc3Rlcmlzay5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1R5cGVTZWxlY3RvcicsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICBuYW1lOiB0aGlzLnNjYW5uZXIuc3Vic3RyVG9DdXJzb3Ioc3RhcnQpXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUubmFtZSk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIGlzSGV4JDIgPSB0b2tlbml6ZXIuaXNIZXg7XG5cdHZhciBUWVBFJEEgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgSURFTlRJRklFUiRqID0gVFlQRSRBLklkZW50aWZpZXI7XG5cdHZhciBOVU1CRVIkYiA9IFRZUEUkQS5OdW1iZXI7XG5cdHZhciBQTFVTU0lHTiQ3ID0gVFlQRSRBLlBsdXNTaWduO1xuXHR2YXIgSFlQSEVOTUlOVVMkNyA9IFRZUEUkQS5IeXBoZW5NaW51cztcblx0dmFyIEZVTExTVE9QJDUgPSBUWVBFJEEuRnVsbFN0b3A7XG5cdHZhciBRVUVTVElPTk1BUksgPSBUWVBFJEEuUXVlc3Rpb25NYXJrO1xuXG5cdGZ1bmN0aW9uIHNjYW5Vbmljb2RlTnVtYmVyKHNjYW5uZXIpIHtcblx0ICAgIGZvciAodmFyIHBvcyA9IHNjYW5uZXIudG9rZW5TdGFydCArIDE7IHBvcyA8IHNjYW5uZXIudG9rZW5FbmQ7IHBvcysrKSB7XG5cdCAgICAgICAgdmFyIGNvZGUgPSBzY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHBvcyk7XG5cblx0ICAgICAgICAvLyBicmVhayBvbiBmdWxsc3RvcCBvciBoeXBlcm1pbnVzL3BsdXNzaWduIGFmdGVyIGV4cG9uZW50XG5cdCAgICAgICAgaWYgKGNvZGUgPT09IEZVTExTVE9QJDUgfHwgY29kZSA9PT0gUExVU1NJR04kNykge1xuXHQgICAgICAgICAgICAvLyBicmVhayB0b2tlbiwgZXhjbHVkZSBzeW1ib2xcblx0ICAgICAgICAgICAgc2Nhbm5lci50b2tlblN0YXJ0ID0gcG9zO1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc3ludGF4LTMvI3VyYW5nZVxuXHRmdW5jdGlvbiBzY2FuVW5pY29kZVJhbmdlKHNjYW5uZXIpIHtcblx0ICAgIHZhciBoZXhTdGFydCA9IHNjYW5uZXIudG9rZW5TdGFydCArIDE7IC8vIHNraXAgK1xuXHQgICAgdmFyIGhleExlbmd0aCA9IDA7XG5cblx0ICAgIHNjYW46IHtcblx0ICAgICAgICBpZiAoc2Nhbm5lci50b2tlblR5cGUgPT09IE5VTUJFUiRiKSB7XG5cdCAgICAgICAgICAgIGlmIChzY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHNjYW5uZXIudG9rZW5TdGFydCkgIT09IEZVTExTVE9QJDUgJiYgc2NhblVuaWNvZGVOdW1iZXIoc2Nhbm5lcikpIHtcblx0ICAgICAgICAgICAgICAgIHNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQoc2Nhbm5lci50b2tlblN0YXJ0KSAhPT0gSFlQSEVOTUlOVVMkNykge1xuXHQgICAgICAgICAgICAgICAgYnJlYWsgc2Nhbjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHNjYW5uZXIubmV4dCgpOyAvLyBQTFVTU0lHTlxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChzY2FubmVyLnRva2VuVHlwZSA9PT0gSFlQSEVOTUlOVVMkNykge1xuXHQgICAgICAgICAgICBzY2FubmVyLm5leHQoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoc2Nhbm5lci50b2tlblR5cGUgPT09IE5VTUJFUiRiKSB7XG5cdCAgICAgICAgICAgIHNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChzY2FubmVyLnRva2VuVHlwZSA9PT0gSURFTlRJRklFUiRqKSB7XG5cdCAgICAgICAgICAgIHNjYW5uZXIubmV4dCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChzY2FubmVyLnRva2VuU3RhcnQgPT09IGhleFN0YXJ0KSB7XG5cdCAgICAgICAgICAgIHNjYW5uZXIuZXJyb3IoJ1VuZXhwZWN0ZWQgaW5wdXQnLCBoZXhTdGFydCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyB2YWxpZGF0ZSBmb3IgVSt4ezEsNn0gb3IgVSt4ezEsNn0teHsxLDZ9XG5cdCAgICAvLyB3aGVyZSB4IGlzIFswLTlhLWZBLUZdXG5cdCAgICBmb3IgKHZhciBpID0gaGV4U3RhcnQsIHdhc0h5cGhlbk1pbnVzID0gZmFsc2U7IGkgPCBzY2FubmVyLnRva2VuU3RhcnQ7IGkrKykge1xuXHQgICAgICAgIHZhciBjb2RlID0gc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdChpKTtcblxuXHQgICAgICAgIGlmIChpc0hleCQyKGNvZGUpID09PSBmYWxzZSAmJiAoY29kZSAhPT0gSFlQSEVOTUlOVVMkNyB8fCB3YXNIeXBoZW5NaW51cykpIHtcblx0ICAgICAgICAgICAgc2Nhbm5lci5lcnJvcignVW5leHBlY3RlZCBpbnB1dCcsIGkpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChjb2RlID09PSBIWVBIRU5NSU5VUyQ3KSB7XG5cdCAgICAgICAgICAgIC8vIGhleCBzZXF1ZW5jZSBzaG91bGRuJ3QgYmUgYW4gZW1wdHlcblx0ICAgICAgICAgICAgaWYgKGhleExlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgc2Nhbm5lci5lcnJvcignVW5leHBlY3RlZCBpbnB1dCcsIGkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgd2FzSHlwaGVuTWludXMgPSB0cnVlO1xuXHQgICAgICAgICAgICBoZXhMZW5ndGggPSAwO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGhleExlbmd0aCsrO1xuXG5cdCAgICAgICAgICAgIC8vIHRvbyBsb25nIGhleCBzZXF1ZW5jZVxuXHQgICAgICAgICAgICBpZiAoaGV4TGVuZ3RoID4gNikge1xuXHQgICAgICAgICAgICAgICAgc2Nhbm5lci5lcnJvcignVG9vIGxvbmcgaGV4IHNlcXVlbmNlJywgaSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgIH1cblxuXHQgICAgLy8gY2hlY2sgd2UgaGF2ZSBhIG5vbi16ZXJvIHNlcXVlbmNlXG5cdCAgICBpZiAoaGV4TGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgc2Nhbm5lci5lcnJvcignVW5leHBlY3RlZCBpbnB1dCcsIGkgLSAxKTtcblx0ICAgIH1cblxuXHQgICAgLy8gVSthYmM/Pz9cblx0ICAgIGlmICghd2FzSHlwaGVuTWludXMpIHtcblx0ICAgICAgICAvLyBjb25zdW1lIGFzIG1hbnkgVSswMDNGIFFVRVNUSU9OIE1BUksgKD8pIGNvZGUgcG9pbnRzIGFzIHBvc3NpYmxlXG5cdCAgICAgICAgZm9yICg7IGhleExlbmd0aCA8IDYgJiYgIXNjYW5uZXIuZW9mOyBzY2FubmVyLm5leHQoKSkge1xuXHQgICAgICAgICAgICBpZiAoc2Nhbm5lci50b2tlblR5cGUgIT09IFFVRVNUSU9OTUFSSykge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBoZXhMZW5ndGgrKztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHR2YXIgVW5pY29kZVJhbmdlID0ge1xuXHQgICAgbmFtZTogJ1VuaWNvZGVSYW5nZScsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICB2YWx1ZTogU3RyaW5nXG5cdCAgICB9LFxuXHQgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0O1xuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLm5leHQoKTsgLy8gVSBvciB1XG5cdCAgICAgICAgc2NhblVuaWNvZGVSYW5nZSh0aGlzLnNjYW5uZXIpO1xuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogJ1VuaWNvZGVSYW5nZScsXG5cdCAgICAgICAgICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbihzdGFydCwgdGhpcy5zY2FubmVyLnRva2VuU3RhcnQpLFxuXHQgICAgICAgICAgICB2YWx1ZTogdGhpcy5zY2FubmVyLnN1YnN0clRvQ3Vyc29yKHN0YXJ0KVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKHByb2Nlc3NDaHVuaywgbm9kZSkge1xuXHQgICAgICAgIHByb2Nlc3NDaHVuayhub2RlLnZhbHVlKTtcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgVFlQRSRCID0gdG9rZW5pemVyLlRZUEU7XG5cblx0dmFyIFNUUklORyQ2ID0gVFlQRSRCLlN0cmluZztcblx0dmFyIFVSTCQ0ID0gVFlQRSRCLlVybDtcblx0dmFyIFJBVyQyID0gVFlQRSRCLlJhdztcblx0dmFyIFJJR0hUUEFSRU5USEVTSVMkNyA9IFRZUEUkQi5SaWdodFBhcmVudGhlc2lzO1xuXG5cdC8vIHVybCAnKCcgUyogKHN0cmluZyB8IHJhdykgUyogJyknXG5cdHZhciBVcmwgPSB7XG5cdCAgICBuYW1lOiAnVXJsJyxcblx0ICAgIHN0cnVjdHVyZToge1xuXHQgICAgICAgIHZhbHVlOiBbJ1N0cmluZycsICdSYXcnXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIudG9rZW5TdGFydDtcblx0ICAgICAgICB2YXIgdmFsdWU7XG5cblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFVSTCQ0KTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cblx0ICAgICAgICBzd2l0Y2ggKHRoaXMuc2Nhbm5lci50b2tlblR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSBTVFJJTkckNjpcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5TdHJpbmcoKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgIGNhc2UgUkFXJDI6XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuUmF3KHRoaXMuc2Nhbm5lci5jdXJyZW50VG9rZW4sIDAsIFJBVyQyLCB0cnVlLCBmYWxzZSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FubmVyLmVycm9yKCdTdHJpbmcgb3IgUmF3IGlzIGV4cGVjdGVkJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNraXBTQygpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5lYXQoUklHSFRQQVJFTlRIRVNJUyQ3KTtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdVcmwnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCd1cmwnKTtcblx0ICAgICAgICBwcm9jZXNzQ2h1bmsoJygnKTtcblx0ICAgICAgICB0aGlzLmdlbmVyYXRlKHByb2Nlc3NDaHVuaywgbm9kZS52YWx1ZSk7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKCcpJyk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIGVuZHNXaXRoJDEgPSB0b2tlbml6ZXIuZW5kc1dpdGg7XG5cdHZhciBUWVBFJEMgPSB0b2tlbml6ZXIuVFlQRTtcblxuXHR2YXIgV0hJVEVTUEFDRSQ4ID0gVFlQRSRDLldoaXRlU3BhY2U7XG5cdHZhciBDT01NRU5UJDggPSBUWVBFJEMuQ29tbWVudDtcblx0dmFyIEZVTkNUSU9OJDYgPSBUWVBFJEMuRnVuY3Rpb247XG5cdHZhciBDT0xPTiQ3ID0gVFlQRSRDLkNvbG9uO1xuXHR2YXIgU0VNSUNPTE9OJDYgPSBUWVBFJEMuU2VtaWNvbG9uO1xuXHR2YXIgRVhDTEFNQVRJT05NQVJLJDQgPSBUWVBFJEMuRXhjbGFtYXRpb25NYXJrO1xuXG5cdC8vICdwcm9naWQ6JyB3cyogJ0RYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LicgaWRlbnQgd3MqICcoJyAuKiAnKSdcblx0ZnVuY3Rpb24gY2hlY2tQcm9naWQoc2Nhbm5lcikge1xuXHQgICAgdmFyIG9mZnNldCA9IDA7XG5cblx0ICAgIGZvciAodmFyIHR5cGU7IHR5cGUgPSBzY2FubmVyLmxvb2t1cFR5cGUob2Zmc2V0KTsgb2Zmc2V0KyspIHtcblx0ICAgICAgICBpZiAodHlwZSAhPT0gV0hJVEVTUEFDRSQ4ICYmIHR5cGUgIT09IENPTU1FTlQkOCkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChzY2FubmVyLmxvb2t1cFZhbHVlKG9mZnNldCwgJ2FscGhhKCcpIHx8XG5cdCAgICAgICAgc2Nhbm5lci5sb29rdXBWYWx1ZShvZmZzZXQsICdjaHJvbWEoJykgfHxcblx0ICAgICAgICBzY2FubmVyLmxvb2t1cFZhbHVlKG9mZnNldCwgJ2Ryb3BzaGFkb3coJykpIHtcblx0ICAgICAgICBpZiAoc2Nhbm5lci5sb29rdXBUeXBlKG9mZnNldCkgIT09IEZVTkNUSU9OJDYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKHNjYW5uZXIubG9va3VwVmFsdWUob2Zmc2V0LCAncHJvZ2lkJykgPT09IGZhbHNlIHx8XG5cdCAgICAgICAgICAgIHNjYW5uZXIubG9va3VwVHlwZShvZmZzZXQgKyAxKSAhPT0gQ09MT04kNykge1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHZhciBWYWx1ZSA9IHtcblx0ICAgIG5hbWU6ICdWYWx1ZScsXG5cdCAgICBzdHJ1Y3R1cmU6IHtcblx0ICAgICAgICBjaGlsZHJlbjogW1tdXVxuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuXHQgICAgICAgIC8vIHNwZWNpYWwgcGFyc2VyIGZvciBmaWx0ZXIgcHJvcGVydHkgc2luY2UgaXQgY2FuIGNvbnRhaW5zIG5vbi1zdGFuZGFydCBzeW50YXggZm9yIG9sZCBJRVxuXHQgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gbnVsbCAmJiBlbmRzV2l0aCQxKHByb3BlcnR5LCAnZmlsdGVyJykgJiYgY2hlY2tQcm9naWQodGhpcy5zY2FubmVyKSkge1xuXHQgICAgICAgICAgICB0aGlzLnNjYW5uZXIuc2tpcFNDKCk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLlJhdyh0aGlzLnNjYW5uZXIuY3VycmVudFRva2VuLCBFWENMQU1BVElPTk1BUkskNCwgU0VNSUNPTE9OJDYsIGZhbHNlLCBmYWxzZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLnRva2VuU3RhcnQ7XG5cdCAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5yZWFkU2VxdWVuY2UodGhpcy5zY29wZS5WYWx1ZSk7XG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnVmFsdWUnLFxuXHQgICAgICAgICAgICBsb2M6IHRoaXMuZ2V0TG9jYXRpb24oc3RhcnQsIHRoaXMuc2Nhbm5lci50b2tlblN0YXJ0KSxcblx0ICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgdGhpcy5lYWNoKHByb2Nlc3NDaHVuaywgbm9kZSk7XG5cdCAgICB9XG5cdH07XG5cblx0dmFyIFdISVRFU1BBQ0UkOSA9IHRva2VuaXplci5UWVBFLldoaXRlU3BhY2U7XG5cdHZhciBTUEFDRSQyID0gT2JqZWN0LmZyZWV6ZSh7XG5cdCAgICB0eXBlOiAnV2hpdGVTcGFjZScsXG5cdCAgICBsb2M6IG51bGwsXG5cdCAgICB2YWx1ZTogJyAnXG5cdH0pO1xuXG5cdHZhciBXaGl0ZVNwYWNlID0ge1xuXHQgICAgbmFtZTogJ1doaXRlU3BhY2UnLFxuXHQgICAgc3RydWN0dXJlOiB7XG5cdCAgICAgICAgdmFsdWU6IFN0cmluZ1xuXHQgICAgfSxcblx0ICAgIHBhcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuZWF0KFdISVRFU1BBQ0UkOSk7XG5cdCAgICAgICAgcmV0dXJuIFNQQUNFJDI7XG5cblx0ICAgICAgICAvLyByZXR1cm4ge1xuXHQgICAgICAgIC8vICAgICB0eXBlOiAnV2hpdGVTcGFjZScsXG5cdCAgICAgICAgLy8gICAgIGxvYzogdGhpcy5nZXRMb2NhdGlvbih0aGlzLnNjYW5uZXIudG9rZW5TdGFydCwgdGhpcy5zY2FubmVyLnRva2VuRW5kKSxcblx0ICAgICAgICAvLyAgICAgdmFsdWU6IHRoaXMuc2Nhbm5lci5jb25zdW1lKFdISVRFU1BBQ0UpXG5cdCAgICAgICAgLy8gfTtcblx0ICAgIH0sXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ocHJvY2Vzc0NodW5rLCBub2RlKSB7XG5cdCAgICAgICAgcHJvY2Vzc0NodW5rKG5vZGUudmFsdWUpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBub2RlID0ge1xuXHQgICAgQW5QbHVzQjogQW5QbHVzQixcblx0ICAgIEF0cnVsZTogQXRydWxlLFxuXHQgICAgQXRydWxlRXhwcmVzc2lvbjogQXRydWxlRXhwcmVzc2lvbixcblx0ICAgIEF0dHJpYnV0ZVNlbGVjdG9yOiBBdHRyaWJ1dGVTZWxlY3Rvcixcblx0ICAgIEJsb2NrOiBCbG9jayxcblx0ICAgIEJyYWNrZXRzOiBCcmFja2V0cyxcblx0ICAgIENEQzogQ0RDXzEsXG5cdCAgICBDRE86IENET18xLFxuXHQgICAgQ2xhc3NTZWxlY3RvcjogQ2xhc3NTZWxlY3Rvcixcblx0ICAgIENvbWJpbmF0b3I6IENvbWJpbmF0b3IsXG5cdCAgICBDb21tZW50OiBDb21tZW50LFxuXHQgICAgRGVjbGFyYXRpb246IERlY2xhcmF0aW9uLFxuXHQgICAgRGVjbGFyYXRpb25MaXN0OiBEZWNsYXJhdGlvbkxpc3QsXG5cdCAgICBEaW1lbnNpb246IERpbWVuc2lvbixcblx0ICAgIEZ1bmN0aW9uOiBfRnVuY3Rpb24sXG5cdCAgICBIZXhDb2xvcjogSGV4Q29sb3IsXG5cdCAgICBJZGVudGlmaWVyOiBJZGVudGlmaWVyLFxuXHQgICAgSWRTZWxlY3RvcjogSWRTZWxlY3Rvcixcblx0ICAgIE1lZGlhRmVhdHVyZTogTWVkaWFGZWF0dXJlLFxuXHQgICAgTWVkaWFRdWVyeTogTWVkaWFRdWVyeSxcblx0ICAgIE1lZGlhUXVlcnlMaXN0OiBNZWRpYVF1ZXJ5TGlzdCxcblx0ICAgIE50aDogTnRoLFxuXHQgICAgTnVtYmVyOiBfTnVtYmVyLFxuXHQgICAgT3BlcmF0b3I6IE9wZXJhdG9yLFxuXHQgICAgUGFyZW50aGVzZXM6IFBhcmVudGhlc2VzLFxuXHQgICAgUGVyY2VudGFnZTogUGVyY2VudGFnZSxcblx0ICAgIFBzZXVkb0NsYXNzU2VsZWN0b3I6IFBzZXVkb0NsYXNzU2VsZWN0b3IsXG5cdCAgICBQc2V1ZG9FbGVtZW50U2VsZWN0b3I6IFBzZXVkb0VsZW1lbnRTZWxlY3Rvcixcblx0ICAgIFJhdGlvOiBSYXRpbyxcblx0ICAgIFJhdzogUmF3LFxuXHQgICAgUnVsZTogUnVsZSxcblx0ICAgIFNlbGVjdG9yOiBTZWxlY3Rvcixcblx0ICAgIFNlbGVjdG9yTGlzdDogU2VsZWN0b3JMaXN0LFxuXHQgICAgU3RyaW5nOiBfU3RyaW5nLFxuXHQgICAgU3R5bGVTaGVldDogU3R5bGVTaGVldCxcblx0ICAgIFR5cGVTZWxlY3RvcjogVHlwZVNlbGVjdG9yLFxuXHQgICAgVW5pY29kZVJhbmdlOiBVbmljb2RlUmFuZ2UsXG5cdCAgICBVcmw6IFVybCxcblx0ICAgIFZhbHVlOiBWYWx1ZSxcblx0ICAgIFdoaXRlU3BhY2U6IFdoaXRlU3BhY2Vcblx0fTtcblxuXHR2YXIgcGFyc2VyID0ge1xuXHQgICAgcGFyc2VDb250ZXh0OiB7XG5cdCAgICAgICAgZGVmYXVsdDogJ1N0eWxlU2hlZXQnLFxuXHQgICAgICAgIHN0eWxlc2hlZXQ6ICdTdHlsZVNoZWV0Jyxcblx0ICAgICAgICBhdHJ1bGU6ICdBdHJ1bGUnLFxuXHQgICAgICAgIGF0cnVsZUV4cHJlc3Npb246IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuQXRydWxlRXhwcmVzc2lvbihvcHRpb25zLmF0cnVsZSA/IFN0cmluZyhvcHRpb25zLmF0cnVsZSkgOiBudWxsKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIG1lZGlhUXVlcnlMaXN0OiAnTWVkaWFRdWVyeUxpc3QnLFxuXHQgICAgICAgIG1lZGlhUXVlcnk6ICdNZWRpYVF1ZXJ5Jyxcblx0ICAgICAgICBydWxlOiAnUnVsZScsXG5cdCAgICAgICAgc2VsZWN0b3JMaXN0OiAnU2VsZWN0b3JMaXN0Jyxcblx0ICAgICAgICBzZWxlY3RvcjogJ1NlbGVjdG9yJyxcblx0ICAgICAgICBibG9jazogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkJsb2NrKHRoaXMuRGVjbGFyYXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZGVjbGFyYXRpb25MaXN0OiAnRGVjbGFyYXRpb25MaXN0Jyxcblx0ICAgICAgICBkZWNsYXJhdGlvbjogJ0RlY2xhcmF0aW9uJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZShvcHRpb25zLnByb3BlcnR5ID8gU3RyaW5nKG9wdGlvbnMucHJvcGVydHkpIDogbnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIHNjb3BlOiBzY29wZSxcblx0ICAgIGF0cnVsZTogYXRydWxlLFxuXHQgICAgcHNldWRvOiBwc2V1ZG8sXG5cdCAgICBub2RlOiBub2RlXG5cdH07XG5cblx0dmFyIHBhcnNlciQxID0gY3JlYXRlKHBhcnNlcik7XG5cblx0ZnVuY3Rpb24gcmVhZF9zdHlsZShwYXJzZXIsIHN0YXJ0LCBhdHRyaWJ1dGVzKSB7XG5cdCAgICBjb25zdCBjb250ZW50X3N0YXJ0ID0gcGFyc2VyLmluZGV4O1xuXHQgICAgY29uc3Qgc3R5bGVzID0gcGFyc2VyLnJlYWRfdW50aWwoLzxcXC9zdHlsZT4vKTtcblx0ICAgIGNvbnN0IGNvbnRlbnRfZW5kID0gcGFyc2VyLmluZGV4O1xuXHQgICAgbGV0IGFzdDtcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgYXN0ID0gcGFyc2VyJDEoc3R5bGVzLCB7XG5cdCAgICAgICAgICAgIHBvc2l0aW9uczogdHJ1ZSxcblx0ICAgICAgICAgICAgb2Zmc2V0OiBjb250ZW50X3N0YXJ0LFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgY2F0Y2ggKGVycikge1xuXHQgICAgICAgIGlmIChlcnIubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJykge1xuXHQgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgY29kZTogYGNzcy1zeW50YXgtZXJyb3JgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2Vcblx0ICAgICAgICAgICAgfSwgZXJyLm9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aHJvdyBlcnI7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgYXN0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhc3QpKTtcblx0ICAgIC8vIHRpZHkgdXAgQVNUXG5cdCAgICB3YWxrKGFzdCwge1xuXHQgICAgICAgIGVudGVyOiAobm9kZSkgPT4ge1xuXHQgICAgICAgICAgICAvLyByZXBsYWNlIGByZWY6YWAgbm9kZXNcblx0ICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ1NlbGVjdG9yJykge1xuXHQgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IG5vZGUuY2hpbGRyZW5baV07XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IG5vZGUuY2hpbGRyZW5baSArIDFdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpc19yZWZfc2VsZWN0b3IoYSwgYikpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXJlZi1zZWxlY3RvcmAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncmVmIHNlbGVjdG9ycyBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSwgYS5sb2Muc3RhcnQub2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0RlY2xhcmF0aW9uJyAmJiBub2RlLnZhbHVlLnR5cGUgPT09ICdWYWx1ZScgJiYgbm9kZS52YWx1ZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtZGVjbGFyYXRpb25gLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBEZWNsYXJhdGlvbiBjYW5ub3QgYmUgZW1wdHlgXG5cdCAgICAgICAgICAgICAgICB9LCBub2RlLnN0YXJ0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnUHNldWRvQ2xhc3NTZWxlY3RvcicgJiYgbm9kZS5uYW1lID09PSAnZ2xvYmFsJyAmJiBub2RlLmNoaWxkcmVuID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBjc3Mtc3ludGF4LWVycm9yYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgOmdsb2JhbCgpIG11c3QgY29udGFpbiBhIHNlbGVjdG9yYFxuXHQgICAgICAgICAgICAgICAgfSwgbm9kZS5sb2Muc3RhcnQub2Zmc2V0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAobm9kZS5sb2MpIHtcblx0ICAgICAgICAgICAgICAgIG5vZGUuc3RhcnQgPSBub2RlLmxvYy5zdGFydC5vZmZzZXQ7XG5cdCAgICAgICAgICAgICAgICBub2RlLmVuZCA9IG5vZGUubG9jLmVuZC5vZmZzZXQ7XG5cdCAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5sb2M7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHBhcnNlci5lYXQoJzwvc3R5bGU+JywgdHJ1ZSk7XG5cdCAgICBjb25zdCBlbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6ICdTdHlsZScsXG5cdCAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgZW5kLFxuXHQgICAgICAgIGF0dHJpYnV0ZXMsXG5cdCAgICAgICAgY2hpbGRyZW46IGFzdC5jaGlsZHJlbixcblx0ICAgICAgICBjb250ZW50OiB7XG5cdCAgICAgICAgICAgIHN0YXJ0OiBjb250ZW50X3N0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IGNvbnRlbnRfZW5kLFxuXHQgICAgICAgICAgICBzdHlsZXNcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHR9XG5cdGZ1bmN0aW9uIGlzX3JlZl9zZWxlY3RvcihhLCBiKSB7XG5cdCAgICBpZiAoIWIpXG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgcmV0dXJuIChhLnR5cGUgPT09ICdUeXBlU2VsZWN0b3InICYmXG5cdCAgICAgICAgYS5uYW1lID09PSAncmVmJyAmJlxuXHQgICAgICAgIGIudHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InKTtcblx0fVxuXG5cdC8vIGh0dHBzOi8vZGV2LnczLm9yZy9odG1sNS9odG1sLWF1dGhvci9jaGFycmVmXG5cdHZhciBlbnRpdGllcyA9IHtcblx0ICAgIENvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw6IDg3NTUsXG5cdCAgICBDbG9ja3dpc2VDb250b3VySW50ZWdyYWw6IDg3NTQsXG5cdCAgICBEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3c6IDEwMjM0LFxuXHQgICAgRGlhY3JpdGljYWxEb3VibGVBY3V0ZTogNzMzLFxuXHQgICAgTm90U3F1YXJlU3VwZXJzZXRFcXVhbDogODkzMSxcblx0ICAgIENsb3NlQ3VybHlEb3VibGVRdW90ZTogODIyMSxcblx0ICAgIERvdWJsZUNvbnRvdXJJbnRlZ3JhbDogODc1MSxcblx0ICAgIEZpbGxlZFZlcnlTbWFsbFNxdWFyZTogOTY0Mixcblx0ICAgIE5lZ2F0aXZlVmVyeVRoaW5TcGFjZTogODIwMyxcblx0ICAgIE5vdFByZWNlZGVzU2xhbnRFcXVhbDogODkyOCxcblx0ICAgIE5vdFJpZ2h0VHJpYW5nbGVFcXVhbDogODk0MSxcblx0ICAgIE5vdFN1Y2NlZWRzU2xhbnRFcXVhbDogODkyOSxcblx0ICAgIENhcGl0YWxEaWZmZXJlbnRpYWxEOiA4NTE3LFxuXHQgICAgRG91YmxlTGVmdFJpZ2h0QXJyb3c6IDg2NjAsXG5cdCAgICBEb3VibGVMb25nUmlnaHRBcnJvdzogMTAyMzMsXG5cdCAgICBFbXB0eVZlcnlTbWFsbFNxdWFyZTogOTY0Myxcblx0ICAgIE5lc3RlZEdyZWF0ZXJHcmVhdGVyOiA4ODExLFxuXHQgICAgTm90RG91YmxlVmVydGljYWxCYXI6IDg3NDIsXG5cdCAgICBOb3RMZWZ0VHJpYW5nbGVFcXVhbDogODk0MCxcblx0ICAgIE5vdFNxdWFyZVN1YnNldEVxdWFsOiA4OTMwLFxuXHQgICAgT3BlbkN1cmx5RG91YmxlUXVvdGU6IDgyMjAsXG5cdCAgICBSZXZlcnNlVXBFcXVpbGlicml1bTogMTA2MDcsXG5cdCAgICBEb3VibGVMb25nTGVmdEFycm93OiAxMDIzMixcblx0ICAgIERvd25MZWZ0UmlnaHRWZWN0b3I6IDEwNTc2LFxuXHQgICAgTGVmdEFycm93UmlnaHRBcnJvdzogODY0Nixcblx0ICAgIE5lZ2F0aXZlTWVkaXVtU3BhY2U6IDgyMDMsXG5cdCAgICBSaWdodEFycm93TGVmdEFycm93OiA4NjQ0LFxuXHQgICAgU3F1YXJlU3VwZXJzZXRFcXVhbDogODg1MCxcblx0ICAgIGxlZnRyaWdodHNxdWlnYXJyb3c6IDg2MjEsXG5cdCAgICBEb3duUmlnaHRUZWVWZWN0b3I6IDEwNTkxLFxuXHQgICAgRG93blJpZ2h0VmVjdG9yQmFyOiAxMDU4Myxcblx0ICAgIExvbmdMZWZ0UmlnaHRBcnJvdzogMTAyMzEsXG5cdCAgICBMb25nbGVmdHJpZ2h0YXJyb3c6IDEwMjM0LFxuXHQgICAgTmVnYXRpdmVUaGlja1NwYWNlOiA4MjAzLFxuXHQgICAgUHJlY2VkZXNTbGFudEVxdWFsOiA4ODI4LFxuXHQgICAgUmV2ZXJzZUVxdWlsaWJyaXVtOiA4NjUxLFxuXHQgICAgUmlnaHREb3VibGVCcmFja2V0OiAxMDIxNSxcblx0ICAgIFJpZ2h0RG93blRlZVZlY3RvcjogMTA1ODksXG5cdCAgICBSaWdodERvd25WZWN0b3JCYXI6IDEwNTgxLFxuXHQgICAgUmlnaHRUcmlhbmdsZUVxdWFsOiA4ODg1LFxuXHQgICAgU3F1YXJlSW50ZXJzZWN0aW9uOiA4ODUxLFxuXHQgICAgU3VjY2VlZHNTbGFudEVxdWFsOiA4ODI5LFxuXHQgICAgYmxhY2t0cmlhbmdsZXJpZ2h0OiA5NjU2LFxuXHQgICAgbG9uZ2xlZnRyaWdodGFycm93OiAxMDIzMSxcblx0ICAgIERvdWJsZVVwRG93bkFycm93OiA4NjYxLFxuXHQgICAgRG91YmxlVmVydGljYWxCYXI6IDg3NDEsXG5cdCAgICBEb3duTGVmdFRlZVZlY3RvcjogMTA1OTAsXG5cdCAgICBEb3duTGVmdFZlY3RvckJhcjogMTA1ODIsXG5cdCAgICBGaWxsZWRTbWFsbFNxdWFyZTogOTcyNCxcblx0ICAgIEdyZWF0ZXJTbGFudEVxdWFsOiAxMDg3OCxcblx0ICAgIExlZnREb3VibGVCcmFja2V0OiAxMDIxNCxcblx0ICAgIExlZnREb3duVGVlVmVjdG9yOiAxMDU5Myxcblx0ICAgIExlZnREb3duVmVjdG9yQmFyOiAxMDU4NSxcblx0ICAgIExlZnRUcmlhbmdsZUVxdWFsOiA4ODg0LFxuXHQgICAgTmVnYXRpdmVUaGluU3BhY2U6IDgyMDMsXG5cdCAgICBOb3RSZXZlcnNlRWxlbWVudDogODcxNixcblx0ICAgIE5vdFRpbGRlRnVsbEVxdWFsOiA4Nzc1LFxuXHQgICAgUmlnaHRBbmdsZUJyYWNrZXQ6IDEwMjE3LFxuXHQgICAgUmlnaHRVcERvd25WZWN0b3I6IDEwNTc1LFxuXHQgICAgU3F1YXJlU3Vic2V0RXF1YWw6IDg4NDksXG5cdCAgICBWZXJ0aWNhbFNlcGFyYXRvcjogMTAwNzIsXG5cdCAgICBibGFja3RyaWFuZ2xlZG93bjogOTY2Mixcblx0ICAgIGJsYWNrdHJpYW5nbGVsZWZ0OiA5NjY2LFxuXHQgICAgbGVmdHJpZ2h0aGFycG9vbnM6IDg2NTEsXG5cdCAgICByaWdodGxlZnRoYXJwb29uczogODY1Mixcblx0ICAgIHR3b2hlYWRyaWdodGFycm93OiA4NjA4LFxuXHQgICAgRGlhY3JpdGljYWxBY3V0ZTogMTgwLFxuXHQgICAgRGlhY3JpdGljYWxHcmF2ZTogOTYsXG5cdCAgICBEaWFjcml0aWNhbFRpbGRlOiA3MzIsXG5cdCAgICBEb3VibGVSaWdodEFycm93OiA4NjU4LFxuXHQgICAgRG93bkFycm93VXBBcnJvdzogODY5Myxcblx0ICAgIEVtcHR5U21hbGxTcXVhcmU6IDk3MjMsXG5cdCAgICBHcmVhdGVyRXF1YWxMZXNzOiA4OTIzLFxuXHQgICAgR3JlYXRlckZ1bGxFcXVhbDogODgwNyxcblx0ICAgIExlZnRBbmdsZUJyYWNrZXQ6IDEwMjE2LFxuXHQgICAgTGVmdFVwRG93blZlY3RvcjogMTA1NzcsXG5cdCAgICBMZXNzRXF1YWxHcmVhdGVyOiA4OTIyLFxuXHQgICAgTm9uQnJlYWtpbmdTcGFjZTogMTYwLFxuXHQgICAgTm90UmlnaHRUcmlhbmdsZTogODkzOSxcblx0ICAgIE5vdFN1cGVyc2V0RXF1YWw6IDg4NDEsXG5cdCAgICBSaWdodFRyaWFuZ2xlQmFyOiAxMDcwNCxcblx0ICAgIFJpZ2h0VXBUZWVWZWN0b3I6IDEwNTg4LFxuXHQgICAgUmlnaHRVcFZlY3RvckJhcjogMTA1ODAsXG5cdCAgICBVbmRlclBhcmVudGhlc2lzOiA5MTgxLFxuXHQgICAgVXBBcnJvd0Rvd25BcnJvdzogODY0NSxcblx0ICAgIGNpcmNsZWFycm93cmlnaHQ6IDg2MzUsXG5cdCAgICBkb3duaGFycG9vbnJpZ2h0OiA4NjQyLFxuXHQgICAgbnRyaWFuZ2xlcmlnaHRlcTogODk0MSxcblx0ICAgIHJpZ2h0aGFycG9vbmRvd246IDg2NDEsXG5cdCAgICByaWdodHJpZ2h0YXJyb3dzOiA4NjQ5LFxuXHQgICAgdHdvaGVhZGxlZnRhcnJvdzogODYwNixcblx0ICAgIHZhcnRyaWFuZ2xlcmlnaHQ6IDg4ODMsXG5cdCAgICBDbG9zZUN1cmx5UXVvdGU6IDgyMTcsXG5cdCAgICBDb250b3VySW50ZWdyYWw6IDg3NTAsXG5cdCAgICBEb3VibGVEb3duQXJyb3c6IDg2NTksXG5cdCAgICBEb3VibGVMZWZ0QXJyb3c6IDg2NTYsXG5cdCAgICBEb3duUmlnaHRWZWN0b3I6IDg2NDEsXG5cdCAgICBMZWZ0UmlnaHRWZWN0b3I6IDEwNTc0LFxuXHQgICAgTGVmdFRyaWFuZ2xlQmFyOiAxMDcwMyxcblx0ICAgIExlZnRVcFRlZVZlY3RvcjogMTA1OTIsXG5cdCAgICBMZWZ0VXBWZWN0b3JCYXI6IDEwNTg0LFxuXHQgICAgTG93ZXJSaWdodEFycm93OiA4NjAwLFxuXHQgICAgTm90R3JlYXRlckVxdWFsOiA4ODE3LFxuXHQgICAgTm90R3JlYXRlclRpbGRlOiA4ODIxLFxuXHQgICAgTm90TGVmdFRyaWFuZ2xlOiA4OTM4LFxuXHQgICAgT3ZlclBhcmVudGhlc2lzOiA5MTgwLFxuXHQgICAgUmlnaHREb3duVmVjdG9yOiA4NjQyLFxuXHQgICAgU2hvcnRSaWdodEFycm93OiA4NTk0LFxuXHQgICAgVXBwZXJSaWdodEFycm93OiA4NTk5LFxuXHQgICAgYmlndHJpYW5nbGVkb3duOiA5NjYxLFxuXHQgICAgY2lyY2xlYXJyb3dsZWZ0OiA4NjM0LFxuXHQgICAgY3VydmVhcnJvd3JpZ2h0OiA4NjMxLFxuXHQgICAgZG93bmhhcnBvb25sZWZ0OiA4NjQzLFxuXHQgICAgbGVmdGhhcnBvb25kb3duOiA4NjM3LFxuXHQgICAgbGVmdHJpZ2h0YXJyb3dzOiA4NjQ2LFxuXHQgICAgbkxlZnRyaWdodGFycm93OiA4NjU0LFxuXHQgICAgbmxlZnRyaWdodGFycm93OiA4NjIyLFxuXHQgICAgbnRyaWFuZ2xlbGVmdGVxOiA4OTQwLFxuXHQgICAgcmlnaHRsZWZ0YXJyb3dzOiA4NjQ0LFxuXHQgICAgcmlnaHRzcXVpZ2Fycm93OiA4NjA1LFxuXHQgICAgcmlnaHR0aHJlZXRpbWVzOiA4OTA4LFxuXHQgICAgc3RyYWlnaHRlcHNpbG9uOiAxMDEzLFxuXHQgICAgdHJpYW5nbGVyaWdodGVxOiA4ODg1LFxuXHQgICAgdmFydHJpYW5nbGVsZWZ0OiA4ODgyLFxuXHQgICAgRGlhY3JpdGljYWxEb3Q6IDcyOSxcblx0ICAgIERvdWJsZVJpZ2h0VGVlOiA4ODcyLFxuXHQgICAgRG93bkxlZnRWZWN0b3I6IDg2MzcsXG5cdCAgICBHcmVhdGVyR3JlYXRlcjogMTA5MTQsXG5cdCAgICBIb3Jpem9udGFsTGluZTogOTQ3Mixcblx0ICAgIEludmlzaWJsZUNvbW1hOiA4MjkxLFxuXHQgICAgSW52aXNpYmxlVGltZXM6IDgyOTAsXG5cdCAgICBMZWZ0RG93blZlY3RvcjogODY0Myxcblx0ICAgIExlZnRSaWdodEFycm93OiA4NTk2LFxuXHQgICAgTGVmdHJpZ2h0YXJyb3c6IDg2NjAsXG5cdCAgICBMZXNzU2xhbnRFcXVhbDogMTA4NzcsXG5cdCAgICBMb25nUmlnaHRBcnJvdzogMTAyMzAsXG5cdCAgICBMb25ncmlnaHRhcnJvdzogMTAyMzMsXG5cdCAgICBMb3dlckxlZnRBcnJvdzogODYwMSxcblx0ICAgIE5lc3RlZExlc3NMZXNzOiA4ODEwLFxuXHQgICAgTm90R3JlYXRlckxlc3M6IDg4MjUsXG5cdCAgICBOb3RMZXNzR3JlYXRlcjogODgyNCxcblx0ICAgIE5vdFN1YnNldEVxdWFsOiA4ODQwLFxuXHQgICAgTm90VmVydGljYWxCYXI6IDg3NDAsXG5cdCAgICBPcGVuQ3VybHlRdW90ZTogODIxNixcblx0ICAgIFJldmVyc2VFbGVtZW50OiA4NzE1LFxuXHQgICAgUmlnaHRUZWVWZWN0b3I6IDEwNTg3LFxuXHQgICAgUmlnaHRWZWN0b3JCYXI6IDEwNTc5LFxuXHQgICAgU2hvcnREb3duQXJyb3c6IDg1OTUsXG5cdCAgICBTaG9ydExlZnRBcnJvdzogODU5Mixcblx0ICAgIFNxdWFyZVN1cGVyc2V0OiA4ODQ4LFxuXHQgICAgVGlsZGVGdWxsRXF1YWw6IDg3NzMsXG5cdCAgICBVcHBlckxlZnRBcnJvdzogODU5OCxcblx0ICAgIFplcm9XaWR0aFNwYWNlOiA4MjAzLFxuXHQgICAgY3VydmVhcnJvd2xlZnQ6IDg2MzAsXG5cdCAgICBkb3VibGViYXJ3ZWRnZTogODk2Nixcblx0ICAgIGRvd25kb3duYXJyb3dzOiA4NjUwLFxuXHQgICAgaG9va3JpZ2h0YXJyb3c6IDg2MTgsXG5cdCAgICBsZWZ0bGVmdGFycm93czogODY0Nyxcblx0ICAgIGxlZnRyaWdodGFycm93OiA4NTk2LFxuXHQgICAgbGVmdHRocmVldGltZXM6IDg5MDcsXG5cdCAgICBsb25ncmlnaHRhcnJvdzogMTAyMzAsXG5cdCAgICBsb29wYXJyb3dyaWdodDogODYyMCxcblx0ICAgIG5zaG9ydHBhcmFsbGVsOiA4NzQyLFxuXHQgICAgbnRyaWFuZ2xlcmlnaHQ6IDg5MzksXG5cdCAgICByaWdodGFycm93dGFpbDogODYxMSxcblx0ICAgIHJpZ2h0aGFycG9vbnVwOiA4NjQwLFxuXHQgICAgdHJpYW5nbGVsZWZ0ZXE6IDg4ODQsXG5cdCAgICB1cGhhcnBvb25yaWdodDogODYzOCxcblx0ICAgIEFwcGx5RnVuY3Rpb246IDgyODksXG5cdCAgICBEaWZmZXJlbnRpYWxEOiA4NTE4LFxuXHQgICAgRG91YmxlTGVmdFRlZTogMTA5ODAsXG5cdCAgICBEb3VibGVVcEFycm93OiA4NjU3LFxuXHQgICAgTGVmdFRlZVZlY3RvcjogMTA1ODYsXG5cdCAgICBMZWZ0VmVjdG9yQmFyOiAxMDU3OCxcblx0ICAgIExlc3NGdWxsRXF1YWw6IDg4MDYsXG5cdCAgICBMb25nTGVmdEFycm93OiAxMDIyOSxcblx0ICAgIExvbmdsZWZ0YXJyb3c6IDEwMjMyLFxuXHQgICAgTm90VGlsZGVFcXVhbDogODc3Mixcblx0ICAgIE5vdFRpbGRlVGlsZGU6IDg3NzcsXG5cdCAgICBQb2luY2FyZXBsYW5lOiA4NDYwLFxuXHQgICAgUHJlY2VkZXNFcXVhbDogMTA5MjcsXG5cdCAgICBQcmVjZWRlc1RpbGRlOiA4ODMwLFxuXHQgICAgUmlnaHRBcnJvd0JhcjogODY3Nyxcblx0ICAgIFJpZ2h0VGVlQXJyb3c6IDg2MTQsXG5cdCAgICBSaWdodFRyaWFuZ2xlOiA4ODgzLFxuXHQgICAgUmlnaHRVcFZlY3RvcjogODYzOCxcblx0ICAgIFN1Y2NlZWRzRXF1YWw6IDEwOTI4LFxuXHQgICAgU3VjY2VlZHNUaWxkZTogODgzMSxcblx0ICAgIFN1cGVyc2V0RXF1YWw6IDg4MzksXG5cdCAgICBVcEVxdWlsaWJyaXVtOiAxMDYwNixcblx0ICAgIFZlcnRpY2FsVGlsZGU6IDg3NjgsXG5cdCAgICBWZXJ5VGhpblNwYWNlOiA4MjAyLFxuXHQgICAgYmlndHJpYW5nbGV1cDogOTY1MSxcblx0ICAgIGJsYWNrdHJpYW5nbGU6IDk2NTIsXG5cdCAgICBkaXZpZGVvbnRpbWVzOiA4OTAzLFxuXHQgICAgZmFsbGluZ2RvdHNlcTogODc4Nixcblx0ICAgIGhvb2tsZWZ0YXJyb3c6IDg2MTcsXG5cdCAgICBsZWZ0YXJyb3d0YWlsOiA4NjEwLFxuXHQgICAgbGVmdGhhcnBvb251cDogODYzNixcblx0ICAgIGxvbmdsZWZ0YXJyb3c6IDEwMjI5LFxuXHQgICAgbG9vcGFycm93bGVmdDogODYxOSxcblx0ICAgIG1lYXN1cmVkYW5nbGU6IDg3MzcsXG5cdCAgICBudHJpYW5nbGVsZWZ0OiA4OTM4LFxuXHQgICAgc2hvcnRwYXJhbGxlbDogODc0MSxcblx0ICAgIHNtYWxsc2V0bWludXM6IDg3MjYsXG5cdCAgICB0cmlhbmdsZXJpZ2h0OiA5NjU3LFxuXHQgICAgdXBoYXJwb29ubGVmdDogODYzOSxcblx0ICAgIERvd25BcnJvd0JhcjogMTA1MTUsXG5cdCAgICBEb3duVGVlQXJyb3c6IDg2MTUsXG5cdCAgICBFeHBvbmVudGlhbEU6IDg1MTksXG5cdCAgICBHcmVhdGVyRXF1YWw6IDg4MDUsXG5cdCAgICBHcmVhdGVyVGlsZGU6IDg4MTksXG5cdCAgICBIaWxiZXJ0U3BhY2U6IDg0NTksXG5cdCAgICBIdW1wRG93bkh1bXA6IDg3ODIsXG5cdCAgICBJbnRlcnNlY3Rpb246IDg4OTgsXG5cdCAgICBMZWZ0QXJyb3dCYXI6IDg2NzYsXG5cdCAgICBMZWZ0VGVlQXJyb3c6IDg2MTIsXG5cdCAgICBMZWZ0VHJpYW5nbGU6IDg4ODIsXG5cdCAgICBMZWZ0VXBWZWN0b3I6IDg2MzksXG5cdCAgICBOb3RDb25ncnVlbnQ6IDg4MDIsXG5cdCAgICBOb3RMZXNzRXF1YWw6IDg4MTYsXG5cdCAgICBOb3RMZXNzVGlsZGU6IDg4MjAsXG5cdCAgICBQcm9wb3J0aW9uYWw6IDg3MzMsXG5cdCAgICBSaWdodENlaWxpbmc6IDg5NjksXG5cdCAgICBSb3VuZEltcGxpZXM6IDEwNjA4LFxuXHQgICAgU2hvcnRVcEFycm93OiA4NTkzLFxuXHQgICAgU3F1YXJlU3Vic2V0OiA4ODQ3LFxuXHQgICAgVW5kZXJCcmFja2V0OiA5MTQxLFxuXHQgICAgVmVydGljYWxMaW5lOiAxMjQsXG5cdCAgICBibGFja2xvemVuZ2U6IDEwNzMxLFxuXHQgICAgZXhwb25lbnRpYWxlOiA4NTE5LFxuXHQgICAgcmlzaW5nZG90c2VxOiA4Nzg3LFxuXHQgICAgdHJpYW5nbGVkb3duOiA5NjYzLFxuXHQgICAgdHJpYW5nbGVsZWZ0OiA5NjY3LFxuXHQgICAgQ2lyY2xlTWludXM6IDg4NTQsXG5cdCAgICBDaXJjbGVUaW1lczogODg1NSxcblx0ICAgIEVxdWlsaWJyaXVtOiA4NjUyLFxuXHQgICAgR3JlYXRlckxlc3M6IDg4MjMsXG5cdCAgICBMZWZ0Q2VpbGluZzogODk2OCxcblx0ICAgIExlc3NHcmVhdGVyOiA4ODIyLFxuXHQgICAgTWVkaXVtU3BhY2U6IDgyODcsXG5cdCAgICBOb3RQcmVjZWRlczogODgzMixcblx0ICAgIE5vdFN1Y2NlZWRzOiA4ODMzLFxuXHQgICAgT3ZlckJyYWNrZXQ6IDkxNDAsXG5cdCAgICBSaWdodFZlY3RvcjogODY0MCxcblx0ICAgIFJyaWdodGFycm93OiA4NjY3LFxuXHQgICAgUnVsZURlbGF5ZWQ6IDEwNzQwLFxuXHQgICAgU21hbGxDaXJjbGU6IDg3MjgsXG5cdCAgICBTcXVhcmVVbmlvbjogODg1Mixcblx0ICAgIFN1YnNldEVxdWFsOiA4ODM4LFxuXHQgICAgVXBEb3duQXJyb3c6IDg1OTcsXG5cdCAgICBVcGRvd25hcnJvdzogODY2MSxcblx0ICAgIFZlcnRpY2FsQmFyOiA4NzM5LFxuXHQgICAgYmFja2Vwc2lsb246IDEwMTQsXG5cdCAgICBibGFja3NxdWFyZTogOTY0Mixcblx0ICAgIGNpcmNsZWRjaXJjOiA4ODU4LFxuXHQgICAgY2lyY2xlZGRhc2g6IDg4NjEsXG5cdCAgICBjdXJseWVxcHJlYzogODkyNixcblx0ICAgIGN1cmx5ZXFzdWNjOiA4OTI3LFxuXHQgICAgZGlhbW9uZHN1aXQ6IDk4MzAsXG5cdCAgICBlcXNsYW50bGVzczogMTA5MDEsXG5cdCAgICBleHBlY3RhdGlvbjogODQ5Nixcblx0ICAgIG5SaWdodGFycm93OiA4NjU1LFxuXHQgICAgbnJpZ2h0YXJyb3c6IDg2MDMsXG5cdCAgICBwcmVjY3VybHllcTogODgyOCxcblx0ICAgIHByZWNuYXBwcm94OiAxMDkzNyxcblx0ICAgIHF1YXRlcm5pb25zOiA4NDYxLFxuXHQgICAgc3RyYWlnaHRwaGk6IDk4MSxcblx0ICAgIHN1Y2NjdXJseWVxOiA4ODI5LFxuXHQgICAgc3VjY25hcHByb3g6IDEwOTM4LFxuXHQgICAgdGhpY2thcHByb3g6IDg3NzYsXG5cdCAgICB1cGRvd25hcnJvdzogODU5Nyxcblx0ICAgIEJlcm5vdWxsaXM6IDg0OTIsXG5cdCAgICBDaXJjbGVQbHVzOiA4ODUzLFxuXHQgICAgRXF1YWxUaWxkZTogODc3MCxcblx0ICAgIEZvdXJpZXJ0cmY6IDg0OTcsXG5cdCAgICBJbWFnaW5hcnlJOiA4NTIwLFxuXHQgICAgTGFwbGFjZXRyZjogODQ2Nixcblx0ICAgIExlZnRWZWN0b3I6IDg2MzYsXG5cdCAgICBMbGVmdGFycm93OiA4NjY2LFxuXHQgICAgTm90RWxlbWVudDogODcxMyxcblx0ICAgIE5vdEdyZWF0ZXI6IDg4MTUsXG5cdCAgICBQcm9wb3J0aW9uOiA4NzU5LFxuXHQgICAgUmlnaHRBcnJvdzogODU5NCxcblx0ICAgIFJpZ2h0Rmxvb3I6IDg5NzEsXG5cdCAgICBSaWdodGFycm93OiA4NjU4LFxuXHQgICAgVGlsZGVFcXVhbDogODc3MSxcblx0ICAgIFRpbGRlVGlsZGU6IDg3NzYsXG5cdCAgICBVbmRlckJyYWNlOiA5MTgzLFxuXHQgICAgVXBBcnJvd0JhcjogMTA1MTQsXG5cdCAgICBVcFRlZUFycm93OiA4NjEzLFxuXHQgICAgY2lyY2xlZGFzdDogODg1OSxcblx0ICAgIGNvbXBsZW1lbnQ6IDg3MDUsXG5cdCAgICBjdXJseXdlZGdlOiA4OTExLFxuXHQgICAgZXFzbGFudGd0cjogMTA5MDIsXG5cdCAgICBndHJlcXFsZXNzOiAxMDg5Mixcblx0ICAgIGxlc3NhcHByb3g6IDEwODg1LFxuXHQgICAgbGVzc2VxcWd0cjogMTA4OTEsXG5cdCAgICBsbW91c3RhY2hlOiA5MTM2LFxuXHQgICAgbG9uZ21hcHN0bzogMTAyMzYsXG5cdCAgICBtYXBzdG9kb3duOiA4NjE1LFxuXHQgICAgbWFwc3RvbGVmdDogODYxMixcblx0ICAgIG5MZWZ0YXJyb3c6IDg2NTMsXG5cdCAgICBubGVmdGFycm93OiA4NjAyLFxuXHQgICAgcHJlY2FwcHJveDogMTA5MzUsXG5cdCAgICByaWdodGFycm93OiA4NTk0LFxuXHQgICAgcm1vdXN0YWNoZTogOTEzNyxcblx0ICAgIHNxc3Vic2V0ZXE6IDg4NDksXG5cdCAgICBzcXN1cHNldGVxOiA4ODUwLFxuXHQgICAgc3Vic2V0bmVxcTogMTA5NTUsXG5cdCAgICBzdWNjYXBwcm94OiAxMDkzNixcblx0ICAgIHN1cHNldG5lcXE6IDEwOTU2LFxuXHQgICAgdXB1cGFycm93czogODY0OCxcblx0ICAgIHZhcmVwc2lsb246IDk0OSxcblx0ICAgIHZhcm5vdGhpbmc6IDg3MDksXG5cdCAgICBCYWNrc2xhc2g6IDg3MjYsXG5cdCAgICBDZW50ZXJEb3Q6IDE4Myxcblx0ICAgIENpcmNsZURvdDogODg1Nyxcblx0ICAgIENvbmdydWVudDogODgwMSxcblx0ICAgIENvcHJvZHVjdDogODcyMCxcblx0ICAgIERvdWJsZURvdDogMTY4LFxuXHQgICAgRG93bkFycm93OiA4NTk1LFxuXHQgICAgRG93bkJyZXZlOiA3ODUsXG5cdCAgICBEb3duYXJyb3c6IDg2NTksXG5cdCAgICBIdW1wRXF1YWw6IDg3ODMsXG5cdCAgICBMZWZ0QXJyb3c6IDg1OTIsXG5cdCAgICBMZWZ0Rmxvb3I6IDg5NzAsXG5cdCAgICBMZWZ0YXJyb3c6IDg2NTYsXG5cdCAgICBMZXNzVGlsZGU6IDg4MTgsXG5cdCAgICBNZWxsaW50cmY6IDg0OTksXG5cdCAgICBNaW51c1BsdXM6IDg3MjMsXG5cdCAgICBOb3RDdXBDYXA6IDg4MTMsXG5cdCAgICBOb3RFeGlzdHM6IDg3MDgsXG5cdCAgICBPdmVyQnJhY2U6IDkxODIsXG5cdCAgICBQbHVzTWludXM6IDE3Nyxcblx0ICAgIFRoZXJlZm9yZTogODc1Nixcblx0ICAgIFRoaW5TcGFjZTogODIwMSxcblx0ICAgIFRyaXBsZURvdDogODQxMSxcblx0ICAgIFVuaW9uUGx1czogODg0Nixcblx0ICAgIGJhY2twcmltZTogODI0NSxcblx0ICAgIGJhY2tzaW1lcTogODkwOSxcblx0ICAgIGJpZ290aW1lczogMTA3NTQsXG5cdCAgICBjZW50ZXJkb3Q6IDE4Myxcblx0ICAgIGNoZWNrbWFyazogMTAwMDMsXG5cdCAgICBjb21wbGV4ZXM6IDg0NTAsXG5cdCAgICBkb3RzcXVhcmU6IDg4NjUsXG5cdCAgICBkb3duYXJyb3c6IDg1OTUsXG5cdCAgICBndHJhcHByb3g6IDEwODg2LFxuXHQgICAgZ3RyZXFsZXNzOiA4OTIzLFxuXHQgICAgaGVhcnRzdWl0OiA5ODI5LFxuXHQgICAgbGVmdGFycm93OiA4NTkyLFxuXHQgICAgbGVzc2VxZ3RyOiA4OTIyLFxuXHQgICAgbnBhcmFsbGVsOiA4NzQyLFxuXHQgICAgbnNob3J0bWlkOiA4NzQwLFxuXHQgICAgbnN1YnNldGVxOiA4ODQwLFxuXHQgICAgbnN1cHNldGVxOiA4ODQxLFxuXHQgICAgcGl0Y2hmb3JrOiA4OTE2LFxuXHQgICAgcmF0aW9uYWxzOiA4NDc0LFxuXHQgICAgc3BhZGVzdWl0OiA5ODI0LFxuXHQgICAgc3Vic2V0ZXFxOiAxMDk0OSxcblx0ICAgIHN1YnNldG5lcTogODg0Mixcblx0ICAgIHN1cHNldGVxcTogMTA5NTAsXG5cdCAgICBzdXBzZXRuZXE6IDg4NDMsXG5cdCAgICB0aGVyZWZvcmU6IDg3NTYsXG5cdCAgICB0cmlhbmdsZXE6IDg3OTYsXG5cdCAgICB2YXJwcm9wdG86IDg3MzMsXG5cdCAgICBERG90cmFoZDogMTA1MTMsXG5cdCAgICBEb3RFcXVhbDogODc4NCxcblx0ICAgIEludGVncmFsOiA4NzQ3LFxuXHQgICAgTGVzc0xlc3M6IDEwOTEzLFxuXHQgICAgTm90RXF1YWw6IDg4MDAsXG5cdCAgICBOb3RUaWxkZTogODc2OSxcblx0ICAgIFBhcnRpYWxEOiA4NzA2LFxuXHQgICAgUHJlY2VkZXM6IDg4MjYsXG5cdCAgICBSaWdodFRlZTogODg2Nixcblx0ICAgIFN1Y2NlZWRzOiA4ODI3LFxuXHQgICAgU3VjaFRoYXQ6IDg3MTUsXG5cdCAgICBTdXBlcnNldDogODgzNSxcblx0ICAgIFVhcnJvY2lyOiAxMDU2OSxcblx0ICAgIFVuZGVyQmFyOiA4MTgsXG5cdCAgICBhbmRzbG9wZTogMTA4NDAsXG5cdCAgICBhbmdtc2RhYTogMTA2NjQsXG5cdCAgICBhbmdtc2RhYjogMTA2NjUsXG5cdCAgICBhbmdtc2RhYzogMTA2NjYsXG5cdCAgICBhbmdtc2RhZDogMTA2NjcsXG5cdCAgICBhbmdtc2RhZTogMTA2NjgsXG5cdCAgICBhbmdtc2RhZjogMTA2NjksXG5cdCAgICBhbmdtc2RhZzogMTA2NzAsXG5cdCAgICBhbmdtc2RhaDogMTA2NzEsXG5cdCAgICBhbmdydHZiZDogMTA2NTMsXG5cdCAgICBhcHByb3hlcTogODc3OCxcblx0ICAgIGF3Y29uaW50OiA4NzU1LFxuXHQgICAgYmFja2Nvbmc6IDg3ODAsXG5cdCAgICBiYXJ3ZWRnZTogODk2NSxcblx0ICAgIGJicmt0YnJrOiA5MTQyLFxuXHQgICAgYmlnb3BsdXM6IDEwNzUzLFxuXHQgICAgYmlnc3FjdXA6IDEwNzU4LFxuXHQgICAgYmlndXBsdXM6IDEwNzU2LFxuXHQgICAgYmlnd2VkZ2U6IDg4OTYsXG5cdCAgICBib3htaW51czogODg2Myxcblx0ICAgIGJveHRpbWVzOiA4ODY0LFxuXHQgICAgY2FwYnJjdXA6IDEwODI1LFxuXHQgICAgY2lyY2xlZFI6IDE3NCxcblx0ICAgIGNpcmNsZWRTOiA5NDE2LFxuXHQgICAgY2lyZm5pbnQ6IDEwNzY4LFxuXHQgICAgY2x1YnN1aXQ6IDk4MjcsXG5cdCAgICBjdXBicmNhcDogMTA4MjQsXG5cdCAgICBjdXJseXZlZTogODkxMCxcblx0ICAgIGN3Y29uaW50OiA4NzU0LFxuXHQgICAgZG90ZXFkb3Q6IDg3ODUsXG5cdCAgICBkb3RtaW51czogODc2MCxcblx0ICAgIGRyYmthcm93OiAxMDUxMixcblx0ICAgIGR6aWdyYXJyOiAxMDIzOSxcblx0ICAgIGVsaW50ZXJzOiA5MTkxLFxuXHQgICAgZW1wdHlzZXQ6IDg3MDksXG5cdCAgICBlcXZwYXJzbDogMTA3MjUsXG5cdCAgICBmcGFydGludDogMTA3NjUsXG5cdCAgICBnZXFzbGFudDogMTA4NzgsXG5cdCAgICBnZXNkb3RvbDogMTA4ODQsXG5cdCAgICBnbmFwcHJveDogMTA4OTAsXG5cdCAgICBoa3NlYXJvdzogMTA1MzMsXG5cdCAgICBoa3N3YXJvdzogMTA1MzQsXG5cdCAgICBpbWFnbGluZTogODQ2NCxcblx0ICAgIGltYWdwYXJ0OiA4NDY1LFxuXHQgICAgaW5maW50aWU6IDEwNzE3LFxuXHQgICAgaW50ZWdlcnM6IDg0ODQsXG5cdCAgICBpbnRlcmNhbDogODg5MCxcblx0ICAgIGludGxhcmhrOiAxMDc3NSxcblx0ICAgIGxhZW1wdHl2OiAxMDY3Nixcblx0ICAgIGxkcnVzaGFyOiAxMDU3MSxcblx0ICAgIGxlcXNsYW50OiAxMDg3Nyxcblx0ICAgIGxlc2RvdG9yOiAxMDg4Myxcblx0ICAgIGxsY29ybmVyOiA4OTkwLFxuXHQgICAgbG5hcHByb3g6IDEwODg5LFxuXHQgICAgbHJjb3JuZXI6IDg5OTEsXG5cdCAgICBsdXJkc2hhcjogMTA1NzAsXG5cdCAgICBtYXBzdG91cDogODYxMyxcblx0ICAgIG11bHRpbWFwOiA4ODg4LFxuXHQgICAgbmF0dXJhbHM6IDg0NjksXG5cdCAgICBvdGltZXNhczogMTA4MDYsXG5cdCAgICBwYXJhbGxlbDogODc0MSxcblx0ICAgIHBsdXNhY2lyOiAxMDc4Nyxcblx0ICAgIHBvaW50aW50OiAxMDc3Myxcblx0ICAgIHByZWNuZXFxOiAxMDkzMyxcblx0ICAgIHByZWNuc2ltOiA4OTM2LFxuXHQgICAgcHJvZmFsYXI6IDkwMDYsXG5cdCAgICBwcm9mbGluZTogODk3OCxcblx0ICAgIHByb2ZzdXJmOiA4OTc5LFxuXHQgICAgcmFlbXB0eXY6IDEwNjc1LFxuXHQgICAgcmVhbHBhcnQ6IDg0NzYsXG5cdCAgICBycHBvbGludDogMTA3NzAsXG5cdCAgICBydHJpbHRyaTogMTA3MDIsXG5cdCAgICBzY3BvbGludDogMTA3NzEsXG5cdCAgICBzZXRtaW51czogODcyNixcblx0ICAgIHNob3J0bWlkOiA4NzM5LFxuXHQgICAgc21lcGFyc2w6IDEwNzI0LFxuXHQgICAgc3FzdWJzZXQ6IDg4NDcsXG5cdCAgICBzcXN1cHNldDogODg0OCxcblx0ICAgIHN1YnNldGVxOiA4ODM4LFxuXHQgICAgc3VjY25lcXE6IDEwOTM0LFxuXHQgICAgc3VjY25zaW06IDg5MzcsXG5cdCAgICBzdXBzZXRlcTogODgzOSxcblx0ICAgIHRoZXRhc3ltOiA5NzcsXG5cdCAgICB0aGlja3NpbTogODc2NCxcblx0ICAgIHRpbWVzYmFyOiAxMDgwMSxcblx0ICAgIHRyaWFuZ2xlOiA5NjUzLFxuXHQgICAgdHJpbWludXM6IDEwODEwLFxuXHQgICAgdHJwZXppdW06IDkxODYsXG5cdCAgICB1bGNvcm5lcjogODk4OCxcblx0ICAgIHVyY29ybmVyOiA4OTg5LFxuXHQgICAgdmFya2FwcGE6IDEwMDgsXG5cdCAgICB2YXJzaWdtYTogOTYyLFxuXHQgICAgdmFydGhldGE6IDk3Nyxcblx0ICAgIEJlY2F1c2U6IDg3NTcsXG5cdCAgICBDYXlsZXlzOiA4NDkzLFxuXHQgICAgQ2NvbmludDogODc1Mixcblx0ICAgIENlZGlsbGE6IDE4NCxcblx0ICAgIERpYW1vbmQ6IDg5MDAsXG5cdCAgICBEb3duVGVlOiA4ODY4LFxuXHQgICAgRWxlbWVudDogODcxMixcblx0ICAgIEVwc2lsb246IDkxNyxcblx0ICAgIEltcGxpZXM6IDg2NTgsXG5cdCAgICBMZWZ0VGVlOiA4ODY3LFxuXHQgICAgTmV3TGluZTogMTAsXG5cdCAgICBOb0JyZWFrOiA4Mjg4LFxuXHQgICAgTm90TGVzczogODgxNCxcblx0ICAgIE9taWNyb246IDkyNyxcblx0ICAgIE92ZXJCYXI6IDE3NSxcblx0ICAgIFByb2R1Y3Q6IDg3MTksXG5cdCAgICBVcEFycm93OiA4NTkzLFxuXHQgICAgVXBhcnJvdzogODY1Nyxcblx0ICAgIFVwc2lsb246IDkzMyxcblx0ICAgIGFsZWZzeW06IDg1MDEsXG5cdCAgICBhbmdydHZiOiA4ODk0LFxuXHQgICAgYW5nemFycjogOTA4NCxcblx0ICAgIGFzeW1wZXE6IDg3ODEsXG5cdCAgICBiYWNrc2ltOiA4NzY1LFxuXHQgICAgYmVjYXVzZTogODc1Nyxcblx0ICAgIGJlbXB0eXY6IDEwNjcyLFxuXHQgICAgYmV0d2VlbjogODgxMixcblx0ICAgIGJpZ2NpcmM6IDk3MTEsXG5cdCAgICBiaWdvZG90OiAxMDc1Mixcblx0ICAgIGJpZ3N0YXI6IDk3MzMsXG5cdCAgICBib3hwbHVzOiA4ODYyLFxuXHQgICAgY2N1cHNzbTogMTA4MzIsXG5cdCAgICBjZW1wdHl2OiAxMDY3NCxcblx0ICAgIGNpcnNjaXI6IDEwNjkwLFxuXHQgICAgY29sb25lcTogODc4OCxcblx0ICAgIGNvbmdkb3Q6IDEwODYxLFxuXHQgICAgY3VkYXJybDogMTA1NTIsXG5cdCAgICBjdWRhcnJyOiAxMDU0OSxcblx0ICAgIGN1bGFycnA6IDEwNTU3LFxuXHQgICAgY3VyYXJybTogMTA1NTYsXG5cdCAgICBkYmthcm93OiAxMDUxMSxcblx0ICAgIGRkYWdnZXI6IDgyMjUsXG5cdCAgICBkZG90c2VxOiAxMDg3MSxcblx0ICAgIGRlbXB0eXY6IDEwNjczLFxuXHQgICAgZGlhbW9uZDogODkwMCxcblx0ICAgIGRpZ2FtbWE6IDk4OSxcblx0ICAgIGRvdHBsdXM6IDg3MjQsXG5cdCAgICBkd2FuZ2xlOiAxMDY2Mixcblx0ICAgIGVwc2lsb246IDk0OSxcblx0ICAgIGVxY29sb246IDg3ODksXG5cdCAgICBlcXVpdkREOiAxMDg3Mixcblx0ICAgIGdlc2RvdG86IDEwODgyLFxuXHQgICAgZ3RxdWVzdDogMTA4NzYsXG5cdCAgICBndHJsZXNzOiA4ODIzLFxuXHQgICAgaGFycmNpcjogMTA1NjgsXG5cdCAgICBpbnRwcm9kOiAxMDgxMixcblx0ICAgIGlzaW5kb3Q6IDg5NDksXG5cdCAgICBsYXJyYmZzOiAxMDUyNyxcblx0ICAgIGxhcnJzaW06IDEwNjExLFxuXHQgICAgbGJya3NsZDogMTA2MzksXG5cdCAgICBsYnJrc2x1OiAxMDYzNyxcblx0ICAgIGxkcmRoYXI6IDEwNTk5LFxuXHQgICAgbGVzZG90bzogMTA4ODEsXG5cdCAgICBsZXNzZG90OiA4OTE4LFxuXHQgICAgbGVzc2d0cjogODgyMixcblx0ICAgIGxlc3NzaW06IDg4MTgsXG5cdCAgICBsb3RpbWVzOiAxMDgwNCxcblx0ICAgIGxvemVuZ2U6IDk2NzQsXG5cdCAgICBsdHF1ZXN0OiAxMDg3NSxcblx0ICAgIGx1cnVoYXI6IDEwNTk4LFxuXHQgICAgbWFsdGVzZTogMTAwMTYsXG5cdCAgICBtaW51c2R1OiAxMDc5NCxcblx0ICAgIG5hcHByb3g6IDg3NzcsXG5cdCAgICBuYXR1cmFsOiA5ODM4LFxuXHQgICAgbmVhcnJvdzogODU5OSxcblx0ICAgIG5leGlzdHM6IDg3MDgsXG5cdCAgICBub3RpbnZhOiA4NzEzLFxuXHQgICAgbm90aW52YjogODk1MSxcblx0ICAgIG5vdGludmM6IDg5NTAsXG5cdCAgICBub3RuaXZhOiA4NzE2LFxuXHQgICAgbm90bml2YjogODk1OCxcblx0ICAgIG5vdG5pdmM6IDg5NTcsXG5cdCAgICBucG9saW50OiAxMDc3Mixcblx0ICAgIG5zcXN1YmU6IDg5MzAsXG5cdCAgICBuc3FzdXBlOiA4OTMxLFxuXHQgICAgbnZpbmZpbjogMTA3MTgsXG5cdCAgICBud2Fycm93OiA4NTk4LFxuXHQgICAgb2xjcm9zczogMTA2ODMsXG5cdCAgICBvbWljcm9uOiA5NTksXG5cdCAgICBvcmRlcm9mOiA4NTAwLFxuXHQgICAgb3JzbG9wZTogMTA4MzksXG5cdCAgICBwZXJ0ZW5rOiA4MjQxLFxuXHQgICAgcGxhbmNraDogODQ2Mixcblx0ICAgIHBsdXNjaXI6IDEwNzg2LFxuXHQgICAgcGx1c3NpbTogMTA3OTAsXG5cdCAgICBwbHVzdHdvOiAxMDc5MSxcblx0ICAgIHByZWNzaW06IDg4MzAsXG5cdCAgICBxdWF0aW50OiAxMDc3NCxcblx0ICAgIHF1ZXN0ZXE6IDg3OTksXG5cdCAgICByYXJyYmZzOiAxMDUyOCxcblx0ICAgIHJhcnJzaW06IDEwNjEyLFxuXHQgICAgcmJya3NsZDogMTA2MzgsXG5cdCAgICByYnJrc2x1OiAxMDY0MCxcblx0ICAgIHJkbGRoYXI6IDEwNjAxLFxuXHQgICAgcmVhbGluZTogODQ3NSxcblx0ICAgIHJvdGltZXM6IDEwODA1LFxuXHQgICAgcnVsdWhhcjogMTA2MDAsXG5cdCAgICBzZWFycm93OiA4NjAwLFxuXHQgICAgc2ltcGx1czogMTA3ODgsXG5cdCAgICBzaW1yYXJyOiAxMDYxMCxcblx0ICAgIHN1YmVkb3Q6IDEwOTQ3LFxuXHQgICAgc3VibXVsdDogMTA5NDUsXG5cdCAgICBzdWJwbHVzOiAxMDk0Myxcblx0ICAgIHN1YnJhcnI6IDEwNjE3LFxuXHQgICAgc3VjY3NpbTogODgzMSxcblx0ICAgIHN1cGRzdWI6IDEwOTY4LFxuXHQgICAgc3VwZWRvdDogMTA5NDgsXG5cdCAgICBzdXBoc3ViOiAxMDk2Nyxcblx0ICAgIHN1cGxhcnI6IDEwNjE5LFxuXHQgICAgc3VwbXVsdDogMTA5NDYsXG5cdCAgICBzdXBwbHVzOiAxMDk0NCxcblx0ICAgIHN3YXJyb3c6IDg2MDEsXG5cdCAgICB0b3Bmb3JrOiAxMDk3MCxcblx0ICAgIHRyaXBsdXM6IDEwODA5LFxuXHQgICAgdHJpdGltZTogMTA4MTEsXG5cdCAgICB1cGFycm93OiA4NTkzLFxuXHQgICAgdXBzaWxvbjogOTY1LFxuXHQgICAgdXdhbmdsZTogMTA2NjMsXG5cdCAgICB2emlnemFnOiAxMDY1MCxcblx0ICAgIHppZ3JhcnI6IDg2NjksXG5cdCAgICBBYWN1dGU6IDE5Myxcblx0ICAgIEFicmV2ZTogMjU4LFxuXHQgICAgQWdyYXZlOiAxOTIsXG5cdCAgICBBc3NpZ246IDg3ODgsXG5cdCAgICBBdGlsZGU6IDE5NSxcblx0ICAgIEJhcndlZDogODk2Nixcblx0ICAgIEJ1bXBlcTogODc4Mixcblx0ICAgIENhY3V0ZTogMjYyLFxuXHQgICAgQ2Nhcm9uOiAyNjgsXG5cdCAgICBDY2VkaWw6IDE5OSxcblx0ICAgIENvbG9uZTogMTA4NjgsXG5cdCAgICBDb25pbnQ6IDg3NTEsXG5cdCAgICBDdXBDYXA6IDg3ODEsXG5cdCAgICBEYWdnZXI6IDgyMjUsXG5cdCAgICBEY2Fyb246IDI3MCxcblx0ICAgIERvdERvdDogODQxMixcblx0ICAgIERzdHJvazogMjcyLFxuXHQgICAgRWFjdXRlOiAyMDEsXG5cdCAgICBFY2Fyb246IDI4Mixcblx0ICAgIEVncmF2ZTogMjAwLFxuXHQgICAgRXhpc3RzOiA4NzA3LFxuXHQgICAgRm9yQWxsOiA4NzA0LFxuXHQgICAgR2FtbWFkOiA5ODgsXG5cdCAgICBHYnJldmU6IDI4Nixcblx0ICAgIEdjZWRpbDogMjkwLFxuXHQgICAgSEFSRGN5OiAxMDY2LFxuXHQgICAgSHN0cm9rOiAyOTQsXG5cdCAgICBJYWN1dGU6IDIwNSxcblx0ICAgIElncmF2ZTogMjA0LFxuXHQgICAgSXRpbGRlOiAyOTYsXG5cdCAgICBKc2VyY3k6IDEwMzIsXG5cdCAgICBLY2VkaWw6IDMxMCxcblx0ICAgIExhY3V0ZTogMzEzLFxuXHQgICAgTGFtYmRhOiA5MjMsXG5cdCAgICBMY2Fyb246IDMxNyxcblx0ICAgIExjZWRpbDogMzE1LFxuXHQgICAgTG1pZG90OiAzMTksXG5cdCAgICBMc3Ryb2s6IDMyMSxcblx0ICAgIE5hY3V0ZTogMzIzLFxuXHQgICAgTmNhcm9uOiAzMjcsXG5cdCAgICBOY2VkaWw6IDMyNSxcblx0ICAgIE50aWxkZTogMjA5LFxuXHQgICAgT2FjdXRlOiAyMTEsXG5cdCAgICBPZGJsYWM6IDMzNixcblx0ICAgIE9ncmF2ZTogMjEwLFxuXHQgICAgT3NsYXNoOiAyMTYsXG5cdCAgICBPdGlsZGU6IDIxMyxcblx0ICAgIE90aW1lczogMTA4MDcsXG5cdCAgICBSYWN1dGU6IDM0MCxcblx0ICAgIFJhcnJ0bDogMTA1MTgsXG5cdCAgICBSY2Fyb246IDM0NCxcblx0ICAgIFJjZWRpbDogMzQyLFxuXHQgICAgU0hDSGN5OiAxMDY1LFxuXHQgICAgU09GVGN5OiAxMDY4LFxuXHQgICAgU2FjdXRlOiAzNDYsXG5cdCAgICBTY2Fyb246IDM1Mixcblx0ICAgIFNjZWRpbDogMzUwLFxuXHQgICAgU3F1YXJlOiA5NjMzLFxuXHQgICAgU3Vic2V0OiA4OTEyLFxuXHQgICAgU3Vwc2V0OiA4OTEzLFxuXHQgICAgVGNhcm9uOiAzNTYsXG5cdCAgICBUY2VkaWw6IDM1NCxcblx0ICAgIFRzdHJvazogMzU4LFxuXHQgICAgVWFjdXRlOiAyMTgsXG5cdCAgICBVYnJldmU6IDM2NCxcblx0ICAgIFVkYmxhYzogMzY4LFxuXHQgICAgVWdyYXZlOiAyMTcsXG5cdCAgICBVdGlsZGU6IDM2MCxcblx0ICAgIFZkYXNobDogMTA5ODIsXG5cdCAgICBWZXJiYXI6IDgyMTQsXG5cdCAgICBWdmRhc2g6IDg4NzQsXG5cdCAgICBZYWN1dGU6IDIyMSxcblx0ICAgIFphY3V0ZTogMzc3LFxuXHQgICAgWmNhcm9uOiAzODEsXG5cdCAgICBhYWN1dGU6IDIyNSxcblx0ICAgIGFicmV2ZTogMjU5LFxuXHQgICAgYWdyYXZlOiAyMjQsXG5cdCAgICBhbmRhbmQ6IDEwODM3LFxuXHQgICAgYW5nbXNkOiA4NzM3LFxuXHQgICAgYW5nc3BoOiA4NzM4LFxuXHQgICAgYXBhY2lyOiAxMDg2Myxcblx0ICAgIGFwcHJveDogODc3Nixcblx0ICAgIGF0aWxkZTogMjI3LFxuXHQgICAgYmFydmVlOiA4ODkzLFxuXHQgICAgYmFyd2VkOiA4OTY1LFxuXHQgICAgYmVjYXVzOiA4NzU3LFxuXHQgICAgYmVybm91OiA4NDkyLFxuXHQgICAgYmlnY2FwOiA4ODk4LFxuXHQgICAgYmlnY3VwOiA4ODk5LFxuXHQgICAgYmlndmVlOiA4ODk3LFxuXHQgICAgYmthcm93OiAxMDUwOSxcblx0ICAgIGJvdHRvbTogODg2OSxcblx0ICAgIGJvd3RpZTogODkwNCxcblx0ICAgIGJveGJveDogMTA2OTcsXG5cdCAgICBicHJpbWU6IDgyNDUsXG5cdCAgICBicnZiYXI6IDE2Nixcblx0ICAgIGJ1bGxldDogODIyNixcblx0ICAgIGJ1bXBlcTogODc4Myxcblx0ICAgIGNhY3V0ZTogMjYzLFxuXHQgICAgY2FwYW5kOiAxMDgyMCxcblx0ICAgIGNhcGNhcDogMTA4MjcsXG5cdCAgICBjYXBjdXA6IDEwODIzLFxuXHQgICAgY2FwZG90OiAxMDgxNixcblx0ICAgIGNjYXJvbjogMjY5LFxuXHQgICAgY2NlZGlsOiAyMzEsXG5cdCAgICBjaXJjZXE6IDg3OTEsXG5cdCAgICBjaXJtaWQ6IDEwOTkxLFxuXHQgICAgY29sb25lOiA4Nzg4LFxuXHQgICAgY29tbWF0OiA2NCxcblx0ICAgIGNvbXBmbjogODcyOCxcblx0ICAgIGNvbmludDogODc1MCxcblx0ICAgIGNvcHJvZDogODcyMCxcblx0ICAgIGNvcHlzcjogODQ3MSxcblx0ICAgIGN1bGFycjogODYzMCxcblx0ICAgIGN1cGNhcDogMTA4MjIsXG5cdCAgICBjdXBjdXA6IDEwODI2LFxuXHQgICAgY3VwZG90OiA4ODQ1LFxuXHQgICAgY3VyYXJyOiA4NjMxLFxuXHQgICAgY3VycmVuOiAxNjQsXG5cdCAgICBjeWxjdHk6IDkwMDUsXG5cdCAgICBkYWdnZXI6IDgyMjQsXG5cdCAgICBkYWxldGg6IDg1MDQsXG5cdCAgICBkY2Fyb246IDI3MSxcblx0ICAgIGRmaXNodDogMTA2MjMsXG5cdCAgICBkaXZpZGU6IDI0Nyxcblx0ICAgIGRpdm9ueDogODkwMyxcblx0ICAgIGRsY29ybjogODk5MCxcblx0ICAgIGRsY3JvcDogODk3Myxcblx0ICAgIGRvbGxhcjogMzYsXG5cdCAgICBkcmNvcm46IDg5OTEsXG5cdCAgICBkcmNyb3A6IDg5NzIsXG5cdCAgICBkc3Ryb2s6IDI3Myxcblx0ICAgIGVhY3V0ZTogMjMzLFxuXHQgICAgZWFzdGVyOiAxMDg2Mixcblx0ICAgIGVjYXJvbjogMjgzLFxuXHQgICAgZWNvbG9uOiA4Nzg5LFxuXHQgICAgZWdyYXZlOiAyMzIsXG5cdCAgICBlZ3Nkb3Q6IDEwOTA0LFxuXHQgICAgZWxzZG90OiAxMDkwMyxcblx0ICAgIGVtcHR5djogODcwOSxcblx0ICAgIGVtc3AxMzogODE5Nixcblx0ICAgIGVtc3AxNDogODE5Nyxcblx0ICAgIGVwYXJzbDogMTA3MjMsXG5cdCAgICBlcWNpcmM6IDg3OTAsXG5cdCAgICBlcXVhbHM6IDYxLFxuXHQgICAgZXF1ZXN0OiA4Nzk5LFxuXHQgICAgZmVtYWxlOiA5NzkyLFxuXHQgICAgZmZpbGlnOiA2NDI1OSxcblx0ICAgIGZmbGxpZzogNjQyNjAsXG5cdCAgICBmb3JhbGw6IDg3MDQsXG5cdCAgICBmcmFjMTI6IDE4OSxcblx0ICAgIGZyYWMxMzogODUzMSxcblx0ICAgIGZyYWMxNDogMTg4LFxuXHQgICAgZnJhYzE1OiA4NTMzLFxuXHQgICAgZnJhYzE2OiA4NTM3LFxuXHQgICAgZnJhYzE4OiA4NTM5LFxuXHQgICAgZnJhYzIzOiA4NTMyLFxuXHQgICAgZnJhYzI1OiA4NTM0LFxuXHQgICAgZnJhYzM0OiAxOTAsXG5cdCAgICBmcmFjMzU6IDg1MzUsXG5cdCAgICBmcmFjMzg6IDg1NDAsXG5cdCAgICBmcmFjNDU6IDg1MzYsXG5cdCAgICBmcmFjNTY6IDg1MzgsXG5cdCAgICBmcmFjNTg6IDg1NDEsXG5cdCAgICBmcmFjNzg6IDg1NDIsXG5cdCAgICBnYWN1dGU6IDUwMSxcblx0ICAgIGdhbW1hZDogOTg5LFxuXHQgICAgZ2JyZXZlOiAyODcsXG5cdCAgICBnZXNkb3Q6IDEwODgwLFxuXHQgICAgZ2VzbGVzOiAxMDkwMCxcblx0ICAgIGd0bFBhcjogMTA2NDUsXG5cdCAgICBndHJhcnI6IDEwNjE2LFxuXHQgICAgZ3RyZG90OiA4OTE5LFxuXHQgICAgZ3Ryc2ltOiA4ODE5LFxuXHQgICAgaGFpcnNwOiA4MjAyLFxuXHQgICAgaGFtaWx0OiA4NDU5LFxuXHQgICAgaGFyZGN5OiAxMDk4LFxuXHQgICAgaGVhcnRzOiA5ODI5LFxuXHQgICAgaGVsbGlwOiA4MjMwLFxuXHQgICAgaGVyY29uOiA4ODg5LFxuXHQgICAgaG9tdGh0OiA4NzYzLFxuXHQgICAgaG9yYmFyOiA4MjEzLFxuXHQgICAgaHNsYXNoOiA4NDYzLFxuXHQgICAgaHN0cm9rOiAyOTUsXG5cdCAgICBoeWJ1bGw6IDgyNTksXG5cdCAgICBoeXBoZW46IDgyMDgsXG5cdCAgICBpYWN1dGU6IDIzNyxcblx0ICAgIGlncmF2ZTogMjM2LFxuXHQgICAgaWlpaW50OiAxMDc2NCxcblx0ICAgIGlpbmZpbjogMTA3MTYsXG5cdCAgICBpbmNhcmU6IDg0NTMsXG5cdCAgICBpbm9kb3Q6IDMwNSxcblx0ICAgIGludGNhbDogODg5MCxcblx0ICAgIGlxdWVzdDogMTkxLFxuXHQgICAgaXNpbnN2OiA4OTQ3LFxuXHQgICAgaXRpbGRlOiAyOTcsXG5cdCAgICBqc2VyY3k6IDExMTIsXG5cdCAgICBrYXBwYXY6IDEwMDgsXG5cdCAgICBrY2VkaWw6IDMxMSxcblx0ICAgIGtncmVlbjogMzEyLFxuXHQgICAgbEF0YWlsOiAxMDUyMyxcblx0ICAgIGxhY3V0ZTogMzE0LFxuXHQgICAgbGFncmFuOiA4NDY2LFxuXHQgICAgbGFtYmRhOiA5NTUsXG5cdCAgICBsYW5nbGU6IDEwMjE2LFxuXHQgICAgbGFycmZzOiAxMDUyNSxcblx0ICAgIGxhcnJoazogODYxNyxcblx0ICAgIGxhcnJscDogODYxOSxcblx0ICAgIGxhcnJwbDogMTA1NTMsXG5cdCAgICBsYXJydGw6IDg2MTAsXG5cdCAgICBsYXRhaWw6IDEwNTIxLFxuXHQgICAgbGJyYWNlOiAxMjMsXG5cdCAgICBsYnJhY2s6IDkxLFxuXHQgICAgbGNhcm9uOiAzMTgsXG5cdCAgICBsY2VkaWw6IDMxNixcblx0ICAgIGxkcXVvcjogODIyMixcblx0ICAgIGxlc2RvdDogMTA4NzksXG5cdCAgICBsZXNnZXM6IDEwODk5LFxuXHQgICAgbGZpc2h0OiAxMDYyMCxcblx0ICAgIGxmbG9vcjogODk3MCxcblx0ICAgIGxoYXJ1bDogMTA2MDIsXG5cdCAgICBsbGhhcmQ6IDEwNjAzLFxuXHQgICAgbG1pZG90OiAzMjAsXG5cdCAgICBsbW91c3Q6IDkxMzYsXG5cdCAgICBsb3BsdXM6IDEwNzk3LFxuXHQgICAgbG93YXN0OiA4NzI3LFxuXHQgICAgbG93YmFyOiA5NSxcblx0ICAgIGxwYXJsdDogMTA2NDMsXG5cdCAgICBscmhhcmQ6IDEwNjA1LFxuXHQgICAgbHNhcXVvOiA4MjQ5LFxuXHQgICAgbHNxdW9yOiA4MjE4LFxuXHQgICAgbHN0cm9rOiAzMjIsXG5cdCAgICBsdGhyZWU6IDg5MDcsXG5cdCAgICBsdGltZXM6IDg5MDUsXG5cdCAgICBsdGxhcnI6IDEwNjE0LFxuXHQgICAgbHRyUGFyOiAxMDY0Nixcblx0ICAgIG1hcHN0bzogODYxNCxcblx0ICAgIG1hcmtlcjogOTY0Nixcblx0ICAgIG1jb21tYTogMTA3OTMsXG5cdCAgICBtaWRhc3Q6IDQyLFxuXHQgICAgbWlkY2lyOiAxMDk5Mixcblx0ICAgIG1pZGRvdDogMTgzLFxuXHQgICAgbWludXNiOiA4ODYzLFxuXHQgICAgbWludXNkOiA4NzYwLFxuXHQgICAgbW5wbHVzOiA4NzIzLFxuXHQgICAgbW9kZWxzOiA4ODcxLFxuXHQgICAgbXN0cG9zOiA4NzY2LFxuXHQgICAgblZEYXNoOiA4ODc5LFxuXHQgICAgblZkYXNoOiA4ODc4LFxuXHQgICAgbmFjdXRlOiAzMjQsXG5cdCAgICBuY2Fyb246IDMyOCxcblx0ICAgIG5jZWRpbDogMzI2LFxuXHQgICAgbmVhcmhrOiAxMDUzMixcblx0ICAgIG5lcXVpdjogODgwMixcblx0ICAgIG5lc2VhcjogMTA1MzYsXG5cdCAgICBuZXhpc3Q6IDg3MDgsXG5cdCAgICBubHRyaWU6IDg5NDAsXG5cdCAgICBucHJjdWU6IDg5MjgsXG5cdCAgICBucnRyaWU6IDg5NDEsXG5cdCAgICBuc2NjdWU6IDg5MjksXG5cdCAgICBuc2ltZXE6IDg3NzIsXG5cdCAgICBudGlsZGU6IDI0MSxcblx0ICAgIG51bWVybzogODQ3MCxcblx0ICAgIG52RGFzaDogODg3Nyxcblx0ICAgIG52SGFycjogMTA1MDAsXG5cdCAgICBudmRhc2g6IDg4NzYsXG5cdCAgICBudmxBcnI6IDEwNDk4LFxuXHQgICAgbnZyQXJyOiAxMDQ5OSxcblx0ICAgIG53YXJoazogMTA1MzEsXG5cdCAgICBud25lYXI6IDEwNTM1LFxuXHQgICAgb2FjdXRlOiAyNDMsXG5cdCAgICBvZGJsYWM6IDMzNyxcblx0ICAgIG9kc29sZDogMTA2ODQsXG5cdCAgICBvZ3JhdmU6IDI0Mixcblx0ICAgIG9taW51czogODg1NCxcblx0ICAgIG9yaWdvZjogODg4Nixcblx0ICAgIG9zbGFzaDogMjQ4LFxuXHQgICAgb3RpbGRlOiAyNDUsXG5cdCAgICBvdGltZXM6IDg4NTUsXG5cdCAgICBwYXJzaW06IDEwOTk1LFxuXHQgICAgcGVyY250OiAzNyxcblx0ICAgIHBlcmlvZDogNDYsXG5cdCAgICBwZXJtaWw6IDgyNDAsXG5cdCAgICBwaG1tYXQ6IDg0OTksXG5cdCAgICBwbGFuY2s6IDg0NjMsXG5cdCAgICBwbGFua3Y6IDg0NjMsXG5cdCAgICBwbHVzZG86IDg3MjQsXG5cdCAgICBwbHVzZHU6IDEwNzg5LFxuXHQgICAgcGx1c21uOiAxNzcsXG5cdCAgICBwcmVjZXE6IDEwOTI3LFxuXHQgICAgcHJpbWVzOiA4NDczLFxuXHQgICAgcHJuc2ltOiA4OTM2LFxuXHQgICAgcHJvcHRvOiA4NzMzLFxuXHQgICAgcHJ1cmVsOiA4ODgwLFxuXHQgICAgcHVuY3NwOiA4MjAwLFxuXHQgICAgcXByaW1lOiA4Mjc5LFxuXHQgICAgckF0YWlsOiAxMDUyNCxcblx0ICAgIHJhY3V0ZTogMzQxLFxuXHQgICAgcmFuZ2xlOiAxMDIxNyxcblx0ICAgIHJhcnJhcDogMTA2MTMsXG5cdCAgICByYXJyZnM6IDEwNTI2LFxuXHQgICAgcmFycmhrOiA4NjE4LFxuXHQgICAgcmFycmxwOiA4NjIwLFxuXHQgICAgcmFycnBsOiAxMDU2NSxcblx0ICAgIHJhcnJ0bDogODYxMSxcblx0ICAgIHJhdGFpbDogMTA1MjIsXG5cdCAgICByYnJhY2U6IDEyNSxcblx0ICAgIHJicmFjazogOTMsXG5cdCAgICByY2Fyb246IDM0NSxcblx0ICAgIHJjZWRpbDogMzQzLFxuXHQgICAgcmRxdW9yOiA4MjIxLFxuXHQgICAgcmZpc2h0OiAxMDYyMSxcblx0ICAgIHJmbG9vcjogODk3MSxcblx0ICAgIHJoYXJ1bDogMTA2MDQsXG5cdCAgICBybW91c3Q6IDkxMzcsXG5cdCAgICByb3BsdXM6IDEwNzk4LFxuXHQgICAgcnBhcmd0OiAxMDY0NCxcblx0ICAgIHJzYXF1bzogODI1MCxcblx0ICAgIHJzcXVvcjogODIxNyxcblx0ICAgIHJ0aHJlZTogODkwOCxcblx0ICAgIHJ0aW1lczogODkwNixcblx0ICAgIHNhY3V0ZTogMzQ3LFxuXHQgICAgc2Nhcm9uOiAzNTMsXG5cdCAgICBzY2VkaWw6IDM1MSxcblx0ICAgIHNjbnNpbTogODkzNyxcblx0ICAgIHNlYXJoazogMTA1MzMsXG5cdCAgICBzZXN3YXI6IDEwNTM3LFxuXHQgICAgc2Zyb3duOiA4OTk0LFxuXHQgICAgc2hjaGN5OiAxMDk3LFxuXHQgICAgc2lnbWFmOiA5NjIsXG5cdCAgICBzaWdtYXY6IDk2Mixcblx0ICAgIHNpbWRvdDogMTA4NTgsXG5cdCAgICBzbWFzaHA6IDEwODAzLFxuXHQgICAgc29mdGN5OiAxMTAwLFxuXHQgICAgc29sYmFyOiA5MDIzLFxuXHQgICAgc3BhZGVzOiA5ODI0LFxuXHQgICAgc3FzdWJlOiA4ODQ5LFxuXHQgICAgc3FzdXBlOiA4ODUwLFxuXHQgICAgc3F1YXJlOiA5NjMzLFxuXHQgICAgc3F1YXJmOiA5NjQyLFxuXHQgICAgc3NldG1uOiA4NzI2LFxuXHQgICAgc3NtaWxlOiA4OTk1LFxuXHQgICAgc3N0YXJmOiA4OTAyLFxuXHQgICAgc3ViZG90OiAxMDk0MSxcblx0ICAgIHN1YnNldDogODgzNCxcblx0ICAgIHN1YnNpbTogMTA5NTEsXG5cdCAgICBzdWJzdWI6IDEwOTY1LFxuXHQgICAgc3Vic3VwOiAxMDk2Myxcblx0ICAgIHN1Y2NlcTogMTA5MjgsXG5cdCAgICBzdXBkb3Q6IDEwOTQyLFxuXHQgICAgc3Vwc2V0OiA4ODM1LFxuXHQgICAgc3Vwc2ltOiAxMDk1Mixcblx0ICAgIHN1cHN1YjogMTA5NjQsXG5cdCAgICBzdXBzdXA6IDEwOTY2LFxuXHQgICAgc3dhcmhrOiAxMDUzNCxcblx0ICAgIHN3bndhcjogMTA1MzgsXG5cdCAgICB0YXJnZXQ6IDg5ODIsXG5cdCAgICB0Y2Fyb246IDM1Nyxcblx0ICAgIHRjZWRpbDogMzU1LFxuXHQgICAgdGVscmVjOiA4OTgxLFxuXHQgICAgdGhlcmU0OiA4NzU2LFxuXHQgICAgdGhldGF2OiA5NzcsXG5cdCAgICB0aGluc3A6IDgyMDEsXG5cdCAgICB0aGtzaW06IDg3NjQsXG5cdCAgICB0aW1lc2I6IDg4NjQsXG5cdCAgICB0aW1lc2Q6IDEwODAwLFxuXHQgICAgdG9wYm90OiA5MDE0LFxuXHQgICAgdG9wY2lyOiAxMDk5Myxcblx0ICAgIHRwcmltZTogODI0NCxcblx0ICAgIHRyaWRvdDogOTcwOCxcblx0ICAgIHRzdHJvazogMzU5LFxuXHQgICAgdWFjdXRlOiAyNTAsXG5cdCAgICB1YnJldmU6IDM2NSxcblx0ICAgIHVkYmxhYzogMzY5LFxuXHQgICAgdWZpc2h0OiAxMDYyMixcblx0ICAgIHVncmF2ZTogMjQ5LFxuXHQgICAgdWxjb3JuOiA4OTg4LFxuXHQgICAgdWxjcm9wOiA4OTc1LFxuXHQgICAgdXJjb3JuOiA4OTg5LFxuXHQgICAgdXJjcm9wOiA4OTc0LFxuXHQgICAgdXRpbGRlOiAzNjEsXG5cdCAgICB2YW5ncnQ6IDEwNjUyLFxuXHQgICAgdmFycGhpOiA5NjYsXG5cdCAgICB2YXJyaG86IDEwMDksXG5cdCAgICB2ZWViYXI6IDg4OTEsXG5cdCAgICB2ZWxsaXA6IDg5NDIsXG5cdCAgICB2ZXJiYXI6IDEyNCxcblx0ICAgIHdlZGJhcjogMTA4NDcsXG5cdCAgICB3ZWRnZXE6IDg3OTMsXG5cdCAgICB3ZWllcnA6IDg0NzIsXG5cdCAgICB3cmVhdGg6IDg3NjgsXG5cdCAgICB4b3BsdXM6IDEwNzUzLFxuXHQgICAgeG90aW1lOiAxMDc1NCxcblx0ICAgIHhzcWN1cDogMTA3NTgsXG5cdCAgICB4dXBsdXM6IDEwNzU2LFxuXHQgICAgeHdlZGdlOiA4ODk2LFxuXHQgICAgeWFjdXRlOiAyNTMsXG5cdCAgICB6YWN1dGU6IDM3OCxcblx0ICAgIHpjYXJvbjogMzgyLFxuXHQgICAgemVldHJmOiA4NDg4LFxuXHQgICAgQUVsaWc6IDE5OCxcblx0ICAgIEFjaXJjOiAxOTQsXG5cdCAgICBBbHBoYTogOTEzLFxuXHQgICAgQW1hY3I6IDI1Nixcblx0ICAgIEFvZ29uOiAyNjAsXG5cdCAgICBBcmluZzogMTk3LFxuXHQgICAgQnJldmU6IDcyOCxcblx0ICAgIENjaXJjOiAyNjQsXG5cdCAgICBDb2xvbjogODc1OSxcblx0ICAgIENyb3NzOiAxMDc5OSxcblx0ICAgIERhc2h2OiAxMDk4MCxcblx0ICAgIERlbHRhOiA5MTYsXG5cdCAgICBFY2lyYzogMjAyLFxuXHQgICAgRW1hY3I6IDI3NCxcblx0ICAgIEVvZ29uOiAyODAsXG5cdCAgICBFcXVhbDogMTA4NjksXG5cdCAgICBHYW1tYTogOTE1LFxuXHQgICAgR2NpcmM6IDI4NCxcblx0ICAgIEhhY2VrOiA3MTEsXG5cdCAgICBIY2lyYzogMjkyLFxuXHQgICAgSUpsaWc6IDMwNixcblx0ICAgIEljaXJjOiAyMDYsXG5cdCAgICBJbWFjcjogMjk4LFxuXHQgICAgSW9nb246IDMwMixcblx0ICAgIEl1a2N5OiAxMDMwLFxuXHQgICAgSmNpcmM6IDMwOCxcblx0ICAgIEp1a2N5OiAxMDI4LFxuXHQgICAgS2FwcGE6IDkyMixcblx0ICAgIE9FbGlnOiAzMzgsXG5cdCAgICBPY2lyYzogMjEyLFxuXHQgICAgT21hY3I6IDMzMixcblx0ICAgIE9tZWdhOiA5MzcsXG5cdCAgICBQcmltZTogODI0Myxcblx0ICAgIFJCYXJyOiAxMDUxMixcblx0ICAgIFNjaXJjOiAzNDgsXG5cdCAgICBTaWdtYTogOTMxLFxuXHQgICAgVEhPUk46IDIyMixcblx0ICAgIFRSQURFOiA4NDgyLFxuXHQgICAgVFNIY3k6IDEwMzUsXG5cdCAgICBUaGV0YTogOTIwLFxuXHQgICAgVGlsZGU6IDg3NjQsXG5cdCAgICBVYnJjeTogMTAzOCxcblx0ICAgIFVjaXJjOiAyMTksXG5cdCAgICBVbWFjcjogMzYyLFxuXHQgICAgVW5pb246IDg4OTksXG5cdCAgICBVb2dvbjogMzcwLFxuXHQgICAgVXBUZWU6IDg4NjksXG5cdCAgICBVcmluZzogMzY2LFxuXHQgICAgVkRhc2g6IDg4NzUsXG5cdCAgICBWZGFzaDogODg3Myxcblx0ICAgIFdjaXJjOiAzNzIsXG5cdCAgICBXZWRnZTogODg5Nixcblx0ICAgIFljaXJjOiAzNzQsXG5cdCAgICBhY2lyYzogMjI2LFxuXHQgICAgYWN1dGU6IDE4MCxcblx0ICAgIGFlbGlnOiAyMzAsXG5cdCAgICBhbGVwaDogODUwMSxcblx0ICAgIGFscGhhOiA5NDUsXG5cdCAgICBhbWFjcjogMjU3LFxuXHQgICAgYW1hbGc6IDEwODE1LFxuXHQgICAgYW5nbGU6IDg3MzYsXG5cdCAgICBhbmdydDogODczNSxcblx0ICAgIGFuZ3N0OiA4NDkxLFxuXHQgICAgYW9nb246IDI2MSxcblx0ICAgIGFyaW5nOiAyMjksXG5cdCAgICBhc3ltcDogODc3Nixcblx0ICAgIGF3aW50OiAxMDc2OSxcblx0ICAgIGJjb25nOiA4NzgwLFxuXHQgICAgYmRxdW86IDgyMjIsXG5cdCAgICBiZXBzaTogMTAxNCxcblx0ICAgIGJsYW5rOiA5MjUxLFxuXHQgICAgYmxrMTI6IDk2MTgsXG5cdCAgICBibGsxNDogOTYxNyxcblx0ICAgIGJsazM0OiA5NjE5LFxuXHQgICAgYmxvY2s6IDk2MDgsXG5cdCAgICBib3hETDogOTU1OSxcblx0ICAgIGJveERSOiA5NTU2LFxuXHQgICAgYm94RGw6IDk1NTgsXG5cdCAgICBib3hEcjogOTU1NSxcblx0ICAgIGJveEhEOiA5NTc0LFxuXHQgICAgYm94SFU6IDk1NzcsXG5cdCAgICBib3hIZDogOTU3Mixcblx0ICAgIGJveEh1OiA5NTc1LFxuXHQgICAgYm94VUw6IDk1NjUsXG5cdCAgICBib3hVUjogOTU2Mixcblx0ICAgIGJveFVsOiA5NTY0LFxuXHQgICAgYm94VXI6IDk1NjEsXG5cdCAgICBib3hWSDogOTU4MCxcblx0ICAgIGJveFZMOiA5NTcxLFxuXHQgICAgYm94VlI6IDk1NjgsXG5cdCAgICBib3hWaDogOTU3OSxcblx0ICAgIGJveFZsOiA5NTcwLFxuXHQgICAgYm94VnI6IDk1NjcsXG5cdCAgICBib3hkTDogOTU1Nyxcblx0ICAgIGJveGRSOiA5NTU0LFxuXHQgICAgYm94ZGw6IDk0ODgsXG5cdCAgICBib3hkcjogOTQ4NCxcblx0ICAgIGJveGhEOiA5NTczLFxuXHQgICAgYm94aFU6IDk1NzYsXG5cdCAgICBib3hoZDogOTUxNixcblx0ICAgIGJveGh1OiA5NTI0LFxuXHQgICAgYm94dUw6IDk1NjMsXG5cdCAgICBib3h1UjogOTU2MCxcblx0ICAgIGJveHVsOiA5NDk2LFxuXHQgICAgYm94dXI6IDk0OTIsXG5cdCAgICBib3h2SDogOTU3OCxcblx0ICAgIGJveHZMOiA5NTY5LFxuXHQgICAgYm94dlI6IDk1NjYsXG5cdCAgICBib3h2aDogOTUzMixcblx0ICAgIGJveHZsOiA5NTA4LFxuXHQgICAgYm94dnI6IDk1MDAsXG5cdCAgICBicmV2ZTogNzI4LFxuXHQgICAgYnNlbWk6IDgyNzEsXG5cdCAgICBic2ltZTogODkwOSxcblx0ICAgIGJzb2xiOiAxMDY5Myxcblx0ICAgIGJ1bXBFOiAxMDkyNixcblx0ICAgIGJ1bXBlOiA4NzgzLFxuXHQgICAgY2FyZXQ6IDgyNTcsXG5cdCAgICBjYXJvbjogNzExLFxuXHQgICAgY2NhcHM6IDEwODI5LFxuXHQgICAgY2NpcmM6IDI2NSxcblx0ICAgIGNjdXBzOiAxMDgyOCxcblx0ICAgIGNlZGlsOiAxODQsXG5cdCAgICBjaGVjazogMTAwMDMsXG5cdCAgICBjbHViczogOTgyNyxcblx0ICAgIGNvbG9uOiA1OCxcblx0ICAgIGNvbW1hOiA0NCxcblx0ICAgIGNyYXJyOiA4NjI5LFxuXHQgICAgY3Jvc3M6IDEwMDA3LFxuXHQgICAgY3N1YmU6IDEwOTYxLFxuXHQgICAgY3N1cGU6IDEwOTYyLFxuXHQgICAgY3Rkb3Q6IDg5NDMsXG5cdCAgICBjdWVwcjogODkyNixcblx0ICAgIGN1ZXNjOiA4OTI3LFxuXHQgICAgY3Vwb3I6IDEwODIxLFxuXHQgICAgY3V2ZWU6IDg5MTAsXG5cdCAgICBjdXdlZDogODkxMSxcblx0ICAgIGN3aW50OiA4NzUzLFxuXHQgICAgZGFzaHY6IDg4NjcsXG5cdCAgICBkYmxhYzogNzMzLFxuXHQgICAgZGRhcnI6IDg2NTAsXG5cdCAgICBkZWx0YTogOTQ4LFxuXHQgICAgZGhhcmw6IDg2NDMsXG5cdCAgICBkaGFycjogODY0Mixcblx0ICAgIGRpYW1zOiA5ODMwLFxuXHQgICAgZGlzaW46IDg5NDYsXG5cdCAgICBkb3RlcTogODc4NCxcblx0ICAgIGR0ZG90OiA4OTQ1LFxuXHQgICAgZHRyaWY6IDk2NjIsXG5cdCAgICBkdWFycjogODY5Myxcblx0ICAgIGR1aGFyOiAxMDYwNyxcblx0ICAgIGVERG90OiAxMDg3MSxcblx0ICAgIGVjaXJjOiAyMzQsXG5cdCAgICBlZkRvdDogODc4Nixcblx0ICAgIGVtYWNyOiAyNzUsXG5cdCAgICBlbXB0eTogODcwOSxcblx0ICAgIGVvZ29uOiAyODEsXG5cdCAgICBlcGx1czogMTA4NjUsXG5cdCAgICBlcHNpdjogOTQ5LFxuXHQgICAgZXFzaW06IDg3NzAsXG5cdCAgICBlcXVpdjogODgwMSxcblx0ICAgIGVyRG90OiA4Nzg3LFxuXHQgICAgZXJhcnI6IDEwNjA5LFxuXHQgICAgZXNkb3Q6IDg3ODQsXG5cdCAgICBleGlzdDogODcwNyxcblx0ICAgIGZmbGlnOiA2NDI1Nixcblx0ICAgIGZpbGlnOiA2NDI1Nyxcblx0ICAgIGZsbGlnOiA2NDI1OCxcblx0ICAgIGZsdG5zOiA5NjQ5LFxuXHQgICAgZm9ya3Y6IDEwOTY5LFxuXHQgICAgZnJhc2w6IDgyNjAsXG5cdCAgICBmcm93bjogODk5NCxcblx0ICAgIGdhbW1hOiA5NDcsXG5cdCAgICBnY2lyYzogMjg1LFxuXHQgICAgZ2VzY2M6IDEwOTIxLFxuXHQgICAgZ2ltZWw6IDg1MDMsXG5cdCAgICBnbmVxcTogODgwOSxcblx0ICAgIGduc2ltOiA4OTM1LFxuXHQgICAgZ3JhdmU6IDk2LFxuXHQgICAgZ3NpbWU6IDEwODk0LFxuXHQgICAgZ3NpbWw6IDEwODk2LFxuXHQgICAgZ3RjaXI6IDEwODc0LFxuXHQgICAgZ3Rkb3Q6IDg5MTksXG5cdCAgICBoYXJydzogODYyMSxcblx0ICAgIGhjaXJjOiAyOTMsXG5cdCAgICBob2FycjogODcwMyxcblx0ICAgIGljaXJjOiAyMzgsXG5cdCAgICBpZXhjbDogMTYxLFxuXHQgICAgaWlpbnQ6IDg3NDksXG5cdCAgICBpaW90YTogODQ4OSxcblx0ICAgIGlqbGlnOiAzMDcsXG5cdCAgICBpbWFjcjogMjk5LFxuXHQgICAgaW1hZ2U6IDg0NjUsXG5cdCAgICBpbWF0aDogMzA1LFxuXHQgICAgaW1wZWQ6IDQzNyxcblx0ICAgIGluZmluOiA4NzM0LFxuXHQgICAgaW9nb246IDMwMyxcblx0ICAgIGlwcm9kOiAxMDgxMixcblx0ICAgIGlzaW5FOiA4OTUzLFxuXHQgICAgaXNpbnM6IDg5NDgsXG5cdCAgICBpc2ludjogODcxMixcblx0ICAgIGl1a2N5OiAxMTEwLFxuXHQgICAgamNpcmM6IDMwOSxcblx0ICAgIGptYXRoOiA1NjcsXG5cdCAgICBqdWtjeTogMTEwOCxcblx0ICAgIGthcHBhOiA5NTQsXG5cdCAgICBsQWFycjogODY2Nixcblx0ICAgIGxCYXJyOiAxMDUxMCxcblx0ICAgIGxhbmdkOiAxMDY0MSxcblx0ICAgIGxhcXVvOiAxNzEsXG5cdCAgICBsYXJyYjogODY3Nixcblx0ICAgIGxiYXJyOiAxMDUwOCxcblx0ICAgIGxiYnJrOiAxMDA5OCxcblx0ICAgIGxicmtlOiAxMDYzNSxcblx0ICAgIGxjZWlsOiA4OTY4LFxuXHQgICAgbGRxdW86IDgyMjAsXG5cdCAgICBsZXNjYzogMTA5MjAsXG5cdCAgICBsaGFyZDogODYzNyxcblx0ICAgIGxoYXJ1OiA4NjM2LFxuXHQgICAgbGhibGs6IDk2MDQsXG5cdCAgICBsbGFycjogODY0Nyxcblx0ICAgIGxsdHJpOiA5NzIyLFxuXHQgICAgbG5lcXE6IDg4MDgsXG5cdCAgICBsbnNpbTogODkzNCxcblx0ICAgIGxvYW5nOiAxMDIyMCxcblx0ICAgIGxvYXJyOiA4NzAxLFxuXHQgICAgbG9icms6IDEwMjE0LFxuXHQgICAgbG9wYXI6IDEwNjI5LFxuXHQgICAgbHJhcnI6IDg2NDYsXG5cdCAgICBscmhhcjogODY1MSxcblx0ICAgIGxydHJpOiA4ODk1LFxuXHQgICAgbHNpbWU6IDEwODkzLFxuXHQgICAgbHNpbWc6IDEwODk1LFxuXHQgICAgbHNxdW86IDgyMTYsXG5cdCAgICBsdGNpcjogMTA4NzMsXG5cdCAgICBsdGRvdDogODkxOCxcblx0ICAgIGx0cmllOiA4ODg0LFxuXHQgICAgbHRyaWY6IDk2NjYsXG5cdCAgICBtRERvdDogODc2Mixcblx0ICAgIG1kYXNoOiA4MjEyLFxuXHQgICAgbWljcm86IDE4MSxcblx0ICAgIG1pbnVzOiA4NzIyLFxuXHQgICAgbXVtYXA6IDg4ODgsXG5cdCAgICBuYWJsYTogODcxMSxcblx0ICAgIG5hcG9zOiAzMjksXG5cdCAgICBuYXR1cjogOTgzOCxcblx0ICAgIG5jb25nOiA4Nzc1LFxuXHQgICAgbmRhc2g6IDgyMTEsXG5cdCAgICBuZUFycjogODY2Myxcblx0ICAgIG5lYXJyOiA4NTk5LFxuXHQgICAgbmdzaW06IDg4MjEsXG5cdCAgICBuaEFycjogODY1NCxcblx0ICAgIG5oYXJyOiA4NjIyLFxuXHQgICAgbmhwYXI6IDEwOTk0LFxuXHQgICAgbmxBcnI6IDg2NTMsXG5cdCAgICBubGFycjogODYwMixcblx0ICAgIG5sZXNzOiA4ODE0LFxuXHQgICAgbmxzaW06IDg4MjAsXG5cdCAgICBubHRyaTogODkzOCxcblx0ICAgIG5vdGluOiA4NzEzLFxuXHQgICAgbm90bmk6IDg3MTYsXG5cdCAgICBucHJlYzogODgzMixcblx0ICAgIG5yQXJyOiA4NjU1LFxuXHQgICAgbnJhcnI6IDg2MDMsXG5cdCAgICBucnRyaTogODkzOSxcblx0ICAgIG5zaW1lOiA4NzcyLFxuXHQgICAgbnNtaWQ6IDg3NDAsXG5cdCAgICBuc3BhcjogODc0Mixcblx0ICAgIG5zdWJlOiA4ODQwLFxuXHQgICAgbnN1Y2M6IDg4MzMsXG5cdCAgICBuc3VwZTogODg0MSxcblx0ICAgIG51bXNwOiA4MTk5LFxuXHQgICAgbndBcnI6IDg2NjIsXG5cdCAgICBud2FycjogODU5OCxcblx0ICAgIG9jaXJjOiAyNDQsXG5cdCAgICBvZGFzaDogODg2MSxcblx0ICAgIG9lbGlnOiAzMzksXG5cdCAgICBvZmNpcjogMTA2ODcsXG5cdCAgICBvaGJhcjogMTA2NzcsXG5cdCAgICBvbGFycjogODYzNCxcblx0ICAgIG9sY2lyOiAxMDY4Nixcblx0ICAgIG9saW5lOiA4MjU0LFxuXHQgICAgb21hY3I6IDMzMyxcblx0ICAgIG9tZWdhOiA5NjksXG5cdCAgICBvcGVycDogMTA2ODEsXG5cdCAgICBvcGx1czogODg1Myxcblx0ICAgIG9yYXJyOiA4NjM1LFxuXHQgICAgb3JkZXI6IDg1MDAsXG5cdCAgICBvdmJhcjogOTAyMSxcblx0ICAgIHBhcnNsOiAxMTAwNSxcblx0ICAgIHBob25lOiA5NzQyLFxuXHQgICAgcGx1c2I6IDg4NjIsXG5cdCAgICBwbHVzZTogMTA4NjYsXG5cdCAgICBwb3VuZDogMTYzLFxuXHQgICAgcHJjdWU6IDg4MjgsXG5cdCAgICBwcmltZTogODI0Mixcblx0ICAgIHBybmFwOiAxMDkzNyxcblx0ICAgIHByc2ltOiA4ODMwLFxuXHQgICAgcXVlc3Q6IDYzLFxuXHQgICAgckFhcnI6IDg2NjcsXG5cdCAgICByQmFycjogMTA1MTEsXG5cdCAgICByYWRpYzogODczMCxcblx0ICAgIHJhbmdkOiAxMDY0Mixcblx0ICAgIHJhbmdlOiAxMDY2MSxcblx0ICAgIHJhcXVvOiAxODcsXG5cdCAgICByYXJyYjogODY3Nyxcblx0ICAgIHJhcnJjOiAxMDU0Nyxcblx0ICAgIHJhcnJ3OiA4NjA1LFxuXHQgICAgcmF0aW86IDg3NTgsXG5cdCAgICByYmFycjogMTA1MDksXG5cdCAgICByYmJyazogMTAwOTksXG5cdCAgICByYnJrZTogMTA2MzYsXG5cdCAgICByY2VpbDogODk2OSxcblx0ICAgIHJkcXVvOiA4MjIxLFxuXHQgICAgcmVhbHM6IDg0NzcsXG5cdCAgICByaGFyZDogODY0MSxcblx0ICAgIHJoYXJ1OiA4NjQwLFxuXHQgICAgcmxhcnI6IDg2NDQsXG5cdCAgICBybGhhcjogODY1Mixcblx0ICAgIHJubWlkOiAxMDk5MCxcblx0ICAgIHJvYW5nOiAxMDIyMSxcblx0ICAgIHJvYXJyOiA4NzAyLFxuXHQgICAgcm9icms6IDEwMjE1LFxuXHQgICAgcm9wYXI6IDEwNjMwLFxuXHQgICAgcnJhcnI6IDg2NDksXG5cdCAgICByc3F1bzogODIxNyxcblx0ICAgIHJ0cmllOiA4ODg1LFxuXHQgICAgcnRyaWY6IDk2NTYsXG5cdCAgICBzYnF1bzogODIxOCxcblx0ICAgIHNjY3VlOiA4ODI5LFxuXHQgICAgc2NpcmM6IDM0OSxcblx0ICAgIHNjbmFwOiAxMDkzOCxcblx0ICAgIHNjc2ltOiA4ODMxLFxuXHQgICAgc2RvdGI6IDg4NjUsXG5cdCAgICBzZG90ZTogMTA4NTQsXG5cdCAgICBzZUFycjogODY2NCxcblx0ICAgIHNlYXJyOiA4NjAwLFxuXHQgICAgc2V0bW46IDg3MjYsXG5cdCAgICBzaGFycDogOTgzOSxcblx0ICAgIHNpZ21hOiA5NjMsXG5cdCAgICBzaW1lcTogODc3MSxcblx0ICAgIHNpbWdFOiAxMDkxMixcblx0ICAgIHNpbWxFOiAxMDkxMSxcblx0ICAgIHNpbW5lOiA4Nzc0LFxuXHQgICAgc2xhcnI6IDg1OTIsXG5cdCAgICBzbWlsZTogODk5NSxcblx0ICAgIHNxY2FwOiA4ODUxLFxuXHQgICAgc3FjdXA6IDg4NTIsXG5cdCAgICBzcXN1YjogODg0Nyxcblx0ICAgIHNxc3VwOiA4ODQ4LFxuXHQgICAgc3JhcnI6IDg1OTQsXG5cdCAgICBzdGFyZjogOTczMyxcblx0ICAgIHN0cm5zOiAxNzUsXG5cdCAgICBzdWJuRTogMTA5NTUsXG5cdCAgICBzdWJuZTogODg0Mixcblx0ICAgIHN1cG5FOiAxMDk1Nixcblx0ICAgIHN1cG5lOiA4ODQzLFxuXHQgICAgc3dBcnI6IDg2NjUsXG5cdCAgICBzd2FycjogODYwMSxcblx0ICAgIHN6bGlnOiAyMjMsXG5cdCAgICB0aGV0YTogOTUyLFxuXHQgICAgdGhrYXA6IDg3NzYsXG5cdCAgICB0aG9ybjogMjU0LFxuXHQgICAgdGlsZGU6IDczMixcblx0ICAgIHRpbWVzOiAyMTUsXG5cdCAgICB0cmFkZTogODQ4Mixcblx0ICAgIHRyaXNiOiAxMDcwMSxcblx0ICAgIHRzaGN5OiAxMTE1LFxuXHQgICAgdHdpeHQ6IDg4MTIsXG5cdCAgICB1YnJjeTogMTExOCxcblx0ICAgIHVjaXJjOiAyNTEsXG5cdCAgICB1ZGFycjogODY0NSxcblx0ICAgIHVkaGFyOiAxMDYwNixcblx0ICAgIHVoYXJsOiA4NjM5LFxuXHQgICAgdWhhcnI6IDg2MzgsXG5cdCAgICB1aGJsazogOTYwMCxcblx0ICAgIHVsdHJpOiA5NzIwLFxuXHQgICAgdW1hY3I6IDM2Myxcblx0ICAgIHVvZ29uOiAzNzEsXG5cdCAgICB1cGx1czogODg0Nixcblx0ICAgIHVwc2loOiA5NzgsXG5cdCAgICB1cmluZzogMzY3LFxuXHQgICAgdXJ0cmk6IDk3MjEsXG5cdCAgICB1dGRvdDogODk0NCxcblx0ICAgIHV0cmlmOiA5NjUyLFxuXHQgICAgdXVhcnI6IDg2NDgsXG5cdCAgICB2QmFydjogMTA5ODUsXG5cdCAgICB2RGFzaDogODg3Mixcblx0ICAgIHZhcnBpOiA5ODIsXG5cdCAgICB2ZGFzaDogODg2Nixcblx0ICAgIHZlZWVxOiA4Nzk0LFxuXHQgICAgdmx0cmk6IDg4ODIsXG5cdCAgICB2cHJvcDogODczMyxcblx0ICAgIHZydHJpOiA4ODgzLFxuXHQgICAgd2NpcmM6IDM3Myxcblx0ICAgIHdlZGdlOiA4NzQzLFxuXHQgICAgeGNpcmM6IDk3MTEsXG5cdCAgICB4ZHRyaTogOTY2MSxcblx0ICAgIHhoQXJyOiAxMDIzNCxcblx0ICAgIHhoYXJyOiAxMDIzMSxcblx0ICAgIHhsQXJyOiAxMDIzMixcblx0ICAgIHhsYXJyOiAxMDIyOSxcblx0ICAgIHhvZG90OiAxMDc1Mixcblx0ICAgIHhyQXJyOiAxMDIzMyxcblx0ICAgIHhyYXJyOiAxMDIzMCxcblx0ICAgIHh1dHJpOiA5NjUxLFxuXHQgICAgeWNpcmM6IDM3NSxcblx0ICAgIEFvcGY6IDEyMDEyMCxcblx0ICAgIEFzY3I6IDExOTk2NCxcblx0ICAgIEF1bWw6IDE5Nixcblx0ICAgIEJhcnY6IDEwOTgzLFxuXHQgICAgQmV0YTogOTE0LFxuXHQgICAgQm9wZjogMTIwMTIxLFxuXHQgICAgQnNjcjogODQ5Mixcblx0ICAgIENIY3k6IDEwNjMsXG5cdCAgICBDT1BZOiAxNjksXG5cdCAgICBDZG90OiAyNjYsXG5cdCAgICBDb3BmOiA4NDUwLFxuXHQgICAgQ3NjcjogMTE5OTY2LFxuXHQgICAgREpjeTogMTAyNixcblx0ICAgIERTY3k6IDEwMjksXG5cdCAgICBEWmN5OiAxMDM5LFxuXHQgICAgRGFycjogODYwOSxcblx0ICAgIERvcGY6IDEyMDEyMyxcblx0ICAgIERzY3I6IDExOTk2Nyxcblx0ICAgIEVkb3Q6IDI3OCxcblx0ICAgIEVvcGY6IDEyMDEyNCxcblx0ICAgIEVzY3I6IDg0OTYsXG5cdCAgICBFc2ltOiAxMDg2Nyxcblx0ICAgIEV1bWw6IDIwMyxcblx0ICAgIEZvcGY6IDEyMDEyNSxcblx0ICAgIEZzY3I6IDg0OTcsXG5cdCAgICBHSmN5OiAxMDI3LFxuXHQgICAgR2RvdDogMjg4LFxuXHQgICAgR29wZjogMTIwMTI2LFxuXHQgICAgR3NjcjogMTE5OTcwLFxuXHQgICAgSG9wZjogODQ2MSxcblx0ICAgIEhzY3I6IDg0NTksXG5cdCAgICBJRWN5OiAxMDQ1LFxuXHQgICAgSU9jeTogMTAyNSxcblx0ICAgIElkb3Q6IDMwNCxcblx0ICAgIElvcGY6IDEyMDEyOCxcblx0ICAgIElvdGE6IDkyMSxcblx0ICAgIElzY3I6IDg0NjQsXG5cdCAgICBJdW1sOiAyMDcsXG5cdCAgICBKb3BmOiAxMjAxMjksXG5cdCAgICBKc2NyOiAxMTk5NzMsXG5cdCAgICBLSGN5OiAxMDYxLFxuXHQgICAgS0pjeTogMTAzNixcblx0ICAgIEtvcGY6IDEyMDEzMCxcblx0ICAgIEtzY3I6IDExOTk3NCxcblx0ICAgIExKY3k6IDEwMzMsXG5cdCAgICBMYW5nOiAxMDIxOCxcblx0ICAgIExhcnI6IDg2MDYsXG5cdCAgICBMb3BmOiAxMjAxMzEsXG5cdCAgICBMc2NyOiA4NDY2LFxuXHQgICAgTW9wZjogMTIwMTMyLFxuXHQgICAgTXNjcjogODQ5OSxcblx0ICAgIE5KY3k6IDEwMzQsXG5cdCAgICBOb3BmOiA4NDY5LFxuXHQgICAgTnNjcjogMTE5OTc3LFxuXHQgICAgT29wZjogMTIwMTM0LFxuXHQgICAgT3NjcjogMTE5OTc4LFxuXHQgICAgT3VtbDogMjE0LFxuXHQgICAgUG9wZjogODQ3Myxcblx0ICAgIFBzY3I6IDExOTk3OSxcblx0ICAgIFFVT1Q6IDM0LFxuXHQgICAgUW9wZjogODQ3NCxcblx0ICAgIFFzY3I6IDExOTk4MCxcblx0ICAgIFJhbmc6IDEwMjE5LFxuXHQgICAgUmFycjogODYwOCxcblx0ICAgIFJvcGY6IDg0NzcsXG5cdCAgICBSc2NyOiA4NDc1LFxuXHQgICAgU0hjeTogMTA2NCxcblx0ICAgIFNvcGY6IDEyMDEzOCxcblx0ICAgIFNxcnQ6IDg3MzAsXG5cdCAgICBTc2NyOiAxMTk5ODIsXG5cdCAgICBTdGFyOiA4OTAyLFxuXHQgICAgVFNjeTogMTA2Mixcblx0ICAgIFRvcGY6IDEyMDEzOSxcblx0ICAgIFRzY3I6IDExOTk4Myxcblx0ICAgIFVhcnI6IDg2MDcsXG5cdCAgICBVb3BmOiAxMjAxNDAsXG5cdCAgICBVcHNpOiA5NzgsXG5cdCAgICBVc2NyOiAxMTk5ODQsXG5cdCAgICBVdW1sOiAyMjAsXG5cdCAgICBWYmFyOiAxMDk4Nyxcblx0ICAgIFZlcnQ6IDgyMTQsXG5cdCAgICBWb3BmOiAxMjAxNDEsXG5cdCAgICBWc2NyOiAxMTk5ODUsXG5cdCAgICBXb3BmOiAxMjAxNDIsXG5cdCAgICBXc2NyOiAxMTk5ODYsXG5cdCAgICBYb3BmOiAxMjAxNDMsXG5cdCAgICBYc2NyOiAxMTk5ODcsXG5cdCAgICBZQWN5OiAxMDcxLFxuXHQgICAgWUljeTogMTAzMSxcblx0ICAgIFlVY3k6IDEwNzAsXG5cdCAgICBZb3BmOiAxMjAxNDQsXG5cdCAgICBZc2NyOiAxMTk5ODgsXG5cdCAgICBZdW1sOiAzNzYsXG5cdCAgICBaSGN5OiAxMDQ2LFxuXHQgICAgWmRvdDogMzc5LFxuXHQgICAgWmV0YTogOTE4LFxuXHQgICAgWm9wZjogODQ4NCxcblx0ICAgIFpzY3I6IDExOTk4OSxcblx0ICAgIGFuZGQ6IDEwODQ0LFxuXHQgICAgYW5kdjogMTA4NDIsXG5cdCAgICBhbmdlOiAxMDY2MCxcblx0ICAgIGFvcGY6IDEyMDE0Nixcblx0ICAgIGFwaWQ6IDg3NzksXG5cdCAgICBhcG9zOiAzOSxcblx0ICAgIGFzY3I6IDExOTk5MCxcblx0ICAgIGF1bWw6IDIyOCxcblx0ICAgIGJOb3Q6IDEwOTg5LFxuXHQgICAgYmJyazogOTE0MSxcblx0ICAgIGJldGE6IDk0Nixcblx0ICAgIGJldGg6IDg1MDIsXG5cdCAgICBibm90OiA4OTc2LFxuXHQgICAgYm9wZjogMTIwMTQ3LFxuXHQgICAgYm94SDogOTU1Mixcblx0ICAgIGJveFY6IDk1NTMsXG5cdCAgICBib3hoOiA5NDcyLFxuXHQgICAgYm94djogOTQ3NCxcblx0ICAgIGJzY3I6IDExOTk5MSxcblx0ICAgIGJzaW06IDg3NjUsXG5cdCAgICBic29sOiA5Mixcblx0ICAgIGJ1bGw6IDgyMjYsXG5cdCAgICBidW1wOiA4NzgyLFxuXHQgICAgY2RvdDogMjY3LFxuXHQgICAgY2VudDogMTYyLFxuXHQgICAgY2hjeTogMTA5NSxcblx0ICAgIGNpckU6IDEwNjkxLFxuXHQgICAgY2lyYzogNzEwLFxuXHQgICAgY2lyZTogODc5MSxcblx0ICAgIGNvbXA6IDg3MDUsXG5cdCAgICBjb25nOiA4NzczLFxuXHQgICAgY29wZjogMTIwMTQ4LFxuXHQgICAgY29weTogMTY5LFxuXHQgICAgY3NjcjogMTE5OTkyLFxuXHQgICAgY3N1YjogMTA5NTksXG5cdCAgICBjc3VwOiAxMDk2MCxcblx0ICAgIGRBcnI6IDg2NTksXG5cdCAgICBkSGFyOiAxMDU5Nyxcblx0ICAgIGRhcnI6IDg1OTUsXG5cdCAgICBkYXNoOiA4MjA4LFxuXHQgICAgZGlhbTogODkwMCxcblx0ICAgIGRqY3k6IDExMDYsXG5cdCAgICBkb3BmOiAxMjAxNDksXG5cdCAgICBkc2NyOiAxMTk5OTMsXG5cdCAgICBkc2N5OiAxMTA5LFxuXHQgICAgZHNvbDogMTA3NDIsXG5cdCAgICBkdHJpOiA5NjYzLFxuXHQgICAgZHpjeTogMTExOSxcblx0ICAgIGVEb3Q6IDg3ODUsXG5cdCAgICBlY2lyOiA4NzkwLFxuXHQgICAgZWRvdDogMjc5LFxuXHQgICAgZW1zcDogODE5NSxcblx0ICAgIGVuc3A6IDgxOTQsXG5cdCAgICBlb3BmOiAxMjAxNTAsXG5cdCAgICBlcGFyOiA4OTE3LFxuXHQgICAgZXBzaTogMTAxMyxcblx0ICAgIGVzY3I6IDg0OTUsXG5cdCAgICBlc2ltOiA4NzcwLFxuXHQgICAgZXVtbDogMjM1LFxuXHQgICAgZXVybzogODM2NCxcblx0ICAgIGV4Y2w6IDMzLFxuXHQgICAgZmxhdDogOTgzNyxcblx0ICAgIGZub2Y6IDQwMixcblx0ICAgIGZvcGY6IDEyMDE1MSxcblx0ICAgIGZvcms6IDg5MTYsXG5cdCAgICBmc2NyOiAxMTk5OTUsXG5cdCAgICBnZG90OiAyODksXG5cdCAgICBnZXFxOiA4ODA3LFxuXHQgICAgZ2pjeTogMTEwNyxcblx0ICAgIGduYXA6IDEwODkwLFxuXHQgICAgZ25lcTogMTA4ODgsXG5cdCAgICBnb3BmOiAxMjAxNTIsXG5cdCAgICBnc2NyOiA4NDU4LFxuXHQgICAgZ3NpbTogODgxOSxcblx0ICAgIGd0Y2M6IDEwOTE5LFxuXHQgICAgaEFycjogODY2MCxcblx0ICAgIGhhbGY6IDE4OSxcblx0ICAgIGhhcnI6IDg1OTYsXG5cdCAgICBoYmFyOiA4NDYzLFxuXHQgICAgaG9wZjogMTIwMTUzLFxuXHQgICAgaHNjcjogMTE5OTk3LFxuXHQgICAgaWVjeTogMTA3Nyxcblx0ICAgIGltb2Y6IDg4ODcsXG5cdCAgICBpb2N5OiAxMTA1LFxuXHQgICAgaW9wZjogMTIwMTU0LFxuXHQgICAgaW90YTogOTUzLFxuXHQgICAgaXNjcjogMTE5OTk4LFxuXHQgICAgaXNpbjogODcxMixcblx0ICAgIGl1bWw6IDIzOSxcblx0ICAgIGpvcGY6IDEyMDE1NSxcblx0ICAgIGpzY3I6IDExOTk5OSxcblx0ICAgIGtoY3k6IDEwOTMsXG5cdCAgICBramN5OiAxMTE2LFxuXHQgICAga29wZjogMTIwMTU2LFxuXHQgICAga3NjcjogMTIwMDAwLFxuXHQgICAgbEFycjogODY1Nixcblx0ICAgIGxIYXI6IDEwNTk0LFxuXHQgICAgbGFuZzogMTAyMTYsXG5cdCAgICBsYXJyOiA4NTkyLFxuXHQgICAgbGF0ZTogMTA5MjUsXG5cdCAgICBsY3ViOiAxMjMsXG5cdCAgICBsZGNhOiAxMDU1MCxcblx0ICAgIGxkc2g6IDg2MjYsXG5cdCAgICBsZXFxOiA4ODA2LFxuXHQgICAgbGpjeTogMTExMyxcblx0ICAgIGxuYXA6IDEwODg5LFxuXHQgICAgbG5lcTogMTA4ODcsXG5cdCAgICBsb3BmOiAxMjAxNTcsXG5cdCAgICBsb3pmOiAxMDczMSxcblx0ICAgIGxwYXI6IDQwLFxuXHQgICAgbHNjcjogMTIwMDAxLFxuXHQgICAgbHNpbTogODgxOCxcblx0ICAgIGxzcWI6IDkxLFxuXHQgICAgbHRjYzogMTA5MTgsXG5cdCAgICBsdHJpOiA5NjY3LFxuXHQgICAgbWFjcjogMTc1LFxuXHQgICAgbWFsZTogOTc5NCxcblx0ICAgIG1hbHQ6IDEwMDE2LFxuXHQgICAgbWxjcDogMTA5NzEsXG5cdCAgICBtbGRyOiA4MjMwLFxuXHQgICAgbW9wZjogMTIwMTU4LFxuXHQgICAgbXNjcjogMTIwMDAyLFxuXHQgICAgbmJzcDogMTYwLFxuXHQgICAgbmNhcDogMTA4MTksXG5cdCAgICBuY3VwOiAxMDgxOCxcblx0ICAgIG5nZXE6IDg4MTcsXG5cdCAgICBuZ3RyOiA4ODE1LFxuXHQgICAgbmlzZDogODk1NCxcblx0ICAgIG5qY3k6IDExMTQsXG5cdCAgICBubGRyOiA4MjI5LFxuXHQgICAgbmxlcTogODgxNixcblx0ICAgIG5taWQ6IDg3NDAsXG5cdCAgICBub3BmOiAxMjAxNTksXG5cdCAgICBucGFyOiA4NzQyLFxuXHQgICAgbnNjcjogMTIwMDAzLFxuXHQgICAgbnNpbTogODc2OSxcblx0ICAgIG5zdWI6IDg4MzYsXG5cdCAgICBuc3VwOiA4ODM3LFxuXHQgICAgbnRnbDogODgyNSxcblx0ICAgIG50bGc6IDg4MjQsXG5cdCAgICBvYXN0OiA4ODU5LFxuXHQgICAgb2NpcjogODg1OCxcblx0ICAgIG9kaXY6IDEwODA4LFxuXHQgICAgb2RvdDogODg1Nyxcblx0ICAgIG9nb246IDczMSxcblx0ICAgIG9pbnQ6IDg3NTAsXG5cdCAgICBvbWlkOiAxMDY3OCxcblx0ICAgIG9vcGY6IDEyMDE2MCxcblx0ICAgIG9wYXI6IDEwNjc5LFxuXHQgICAgb3JkZjogMTcwLFxuXHQgICAgb3JkbTogMTg2LFxuXHQgICAgb3JvcjogMTA4MzgsXG5cdCAgICBvc2NyOiA4NTAwLFxuXHQgICAgb3NvbDogODg1Nixcblx0ICAgIG91bWw6IDI0Nixcblx0ICAgIHBhcmE6IDE4Mixcblx0ICAgIHBhcnQ6IDg3MDYsXG5cdCAgICBwZXJwOiA4ODY5LFxuXHQgICAgcGhpdjogOTY2LFxuXHQgICAgcGx1czogNDMsXG5cdCAgICBwb3BmOiAxMjAxNjEsXG5cdCAgICBwcmFwOiAxMDkzNSxcblx0ICAgIHByZWM6IDg4MjYsXG5cdCAgICBwcm5FOiAxMDkzMyxcblx0ICAgIHByb2Q6IDg3MTksXG5cdCAgICBwcm9wOiA4NzMzLFxuXHQgICAgcHNjcjogMTIwMDA1LFxuXHQgICAgcWludDogMTA3NjQsXG5cdCAgICBxb3BmOiAxMjAxNjIsXG5cdCAgICBxc2NyOiAxMjAwMDYsXG5cdCAgICBxdW90OiAzNCxcblx0ICAgIHJBcnI6IDg2NTgsXG5cdCAgICBySGFyOiAxMDU5Nixcblx0ICAgIHJhY2U6IDEwNzE0LFxuXHQgICAgcmFuZzogMTAyMTcsXG5cdCAgICByYXJyOiA4NTk0LFxuXHQgICAgcmN1YjogMTI1LFxuXHQgICAgcmRjYTogMTA1NTEsXG5cdCAgICByZHNoOiA4NjI3LFxuXHQgICAgcmVhbDogODQ3Nixcblx0ICAgIHJlY3Q6IDk2NDUsXG5cdCAgICByaG92OiAxMDA5LFxuXHQgICAgcmluZzogNzMwLFxuXHQgICAgcm9wZjogMTIwMTYzLFxuXHQgICAgcnBhcjogNDEsXG5cdCAgICByc2NyOiAxMjAwMDcsXG5cdCAgICByc3FiOiA5Myxcblx0ICAgIHJ0cmk6IDk2NTcsXG5cdCAgICBzY2FwOiAxMDkzNixcblx0ICAgIHNjbkU6IDEwOTM0LFxuXHQgICAgc2RvdDogODkwMSxcblx0ICAgIHNlY3Q6IDE2Nyxcblx0ICAgIHNlbWk6IDU5LFxuXHQgICAgc2V4dDogMTAwMzgsXG5cdCAgICBzaGN5OiAxMDk2LFxuXHQgICAgc2ltZTogODc3MSxcblx0ICAgIHNpbWc6IDEwOTEwLFxuXHQgICAgc2ltbDogMTA5MDksXG5cdCAgICBzbWlkOiA4NzM5LFxuXHQgICAgc210ZTogMTA5MjQsXG5cdCAgICBzb2xiOiAxMDY5Mixcblx0ICAgIHNvcGY6IDEyMDE2NCxcblx0ICAgIHNwYXI6IDg3NDEsXG5cdCAgICBzcXVmOiA5NjQyLFxuXHQgICAgc3NjcjogMTIwMDA4LFxuXHQgICAgc3RhcjogOTczNCxcblx0ICAgIHN1YkU6IDEwOTQ5LFxuXHQgICAgc3ViZTogODgzOCxcblx0ICAgIHN1Y2M6IDg4MjcsXG5cdCAgICBzdW5nOiA5ODM0LFxuXHQgICAgc3VwMTogMTg1LFxuXHQgICAgc3VwMjogMTc4LFxuXHQgICAgc3VwMzogMTc5LFxuXHQgICAgc3VwRTogMTA5NTAsXG5cdCAgICBzdXBlOiA4ODM5LFxuXHQgICAgdGJyazogOTE0MCxcblx0ICAgIHRkb3Q6IDg0MTEsXG5cdCAgICB0aW50OiA4NzQ5LFxuXHQgICAgdG9lYTogMTA1MzYsXG5cdCAgICB0b3BmOiAxMjAxNjUsXG5cdCAgICB0b3NhOiAxMDUzNyxcblx0ICAgIHRyaWU6IDg3OTYsXG5cdCAgICB0c2NyOiAxMjAwMDksXG5cdCAgICB0c2N5OiAxMDk0LFxuXHQgICAgdUFycjogODY1Nyxcblx0ICAgIHVIYXI6IDEwNTk1LFxuXHQgICAgdWFycjogODU5Myxcblx0ICAgIHVvcGY6IDEyMDE2Nixcblx0ICAgIHVwc2k6IDk2NSxcblx0ICAgIHVzY3I6IDEyMDAxMCxcblx0ICAgIHV0cmk6IDk2NTMsXG5cdCAgICB1dW1sOiAyNTIsXG5cdCAgICB2QXJyOiA4NjYxLFxuXHQgICAgdkJhcjogMTA5ODQsXG5cdCAgICB2YXJyOiA4NTk3LFxuXHQgICAgdmVydDogMTI0LFxuXHQgICAgdm9wZjogMTIwMTY3LFxuXHQgICAgdnNjcjogMTIwMDExLFxuXHQgICAgd29wZjogMTIwMTY4LFxuXHQgICAgd3NjcjogMTIwMDEyLFxuXHQgICAgeGNhcDogODg5OCxcblx0ICAgIHhjdXA6IDg4OTksXG5cdCAgICB4bWFwOiAxMDIzNixcblx0ICAgIHhuaXM6IDg5NTUsXG5cdCAgICB4b3BmOiAxMjAxNjksXG5cdCAgICB4c2NyOiAxMjAwMTMsXG5cdCAgICB4dmVlOiA4ODk3LFxuXHQgICAgeWFjeTogMTEwMyxcblx0ICAgIHlpY3k6IDExMTEsXG5cdCAgICB5b3BmOiAxMjAxNzAsXG5cdCAgICB5c2NyOiAxMjAwMTQsXG5cdCAgICB5dWN5OiAxMTAyLFxuXHQgICAgeXVtbDogMjU1LFxuXHQgICAgemRvdDogMzgwLFxuXHQgICAgemV0YTogOTUwLFxuXHQgICAgemhjeTogMTA3OCxcblx0ICAgIHpvcGY6IDEyMDE3MSxcblx0ICAgIHpzY3I6IDEyMDAxNSxcblx0ICAgIHp3bmo6IDgyMDQsXG5cdCAgICBBTVA6IDM4LFxuXHQgICAgQWN5OiAxMDQwLFxuXHQgICAgQWZyOiAxMjAwNjgsXG5cdCAgICBBbmQ6IDEwODM1LFxuXHQgICAgQmN5OiAxMDQxLFxuXHQgICAgQmZyOiAxMjAwNjksXG5cdCAgICBDYXA6IDg5MTQsXG5cdCAgICBDZnI6IDg0OTMsXG5cdCAgICBDaGk6IDkzNSxcblx0ICAgIEN1cDogODkxNSxcblx0ICAgIERjeTogMTA0NCxcblx0ICAgIERlbDogODcxMSxcblx0ICAgIERmcjogMTIwMDcxLFxuXHQgICAgRG90OiAxNjgsXG5cdCAgICBFTkc6IDMzMCxcblx0ICAgIEVUSDogMjA4LFxuXHQgICAgRWN5OiAxMDY5LFxuXHQgICAgRWZyOiAxMjAwNzIsXG5cdCAgICBFdGE6IDkxOSxcblx0ICAgIEZjeTogMTA2MCxcblx0ICAgIEZmcjogMTIwMDczLFxuXHQgICAgR2N5OiAxMDQzLFxuXHQgICAgR2ZyOiAxMjAwNzQsXG5cdCAgICBIYXQ6IDk0LFxuXHQgICAgSGZyOiA4NDYwLFxuXHQgICAgSWN5OiAxMDQ4LFxuXHQgICAgSWZyOiA4NDY1LFxuXHQgICAgSW50OiA4NzQ4LFxuXHQgICAgSmN5OiAxMDQ5LFxuXHQgICAgSmZyOiAxMjAwNzcsXG5cdCAgICBLY3k6IDEwNTAsXG5cdCAgICBLZnI6IDEyMDA3OCxcblx0ICAgIExjeTogMTA1MSxcblx0ICAgIExmcjogMTIwMDc5LFxuXHQgICAgTHNoOiA4NjI0LFxuXHQgICAgTWFwOiAxMDUwMSxcblx0ICAgIE1jeTogMTA1Mixcblx0ICAgIE1mcjogMTIwMDgwLFxuXHQgICAgTmN5OiAxMDUzLFxuXHQgICAgTmZyOiAxMjAwODEsXG5cdCAgICBOb3Q6IDEwOTg4LFxuXHQgICAgT2N5OiAxMDU0LFxuXHQgICAgT2ZyOiAxMjAwODIsXG5cdCAgICBQY3k6IDEwNTUsXG5cdCAgICBQZnI6IDEyMDA4Myxcblx0ICAgIFBoaTogOTM0LFxuXHQgICAgUHNpOiA5MzYsXG5cdCAgICBRZnI6IDEyMDA4NCxcblx0ICAgIFJFRzogMTc0LFxuXHQgICAgUmN5OiAxMDU2LFxuXHQgICAgUmZyOiA4NDc2LFxuXHQgICAgUmhvOiA5MjksXG5cdCAgICBSc2g6IDg2MjUsXG5cdCAgICBTY3k6IDEwNTcsXG5cdCAgICBTZnI6IDEyMDA4Nixcblx0ICAgIFN1YjogODkxMixcblx0ICAgIFN1bTogODcyMSxcblx0ICAgIFN1cDogODkxMyxcblx0ICAgIFRhYjogOSxcblx0ICAgIFRhdTogOTMyLFxuXHQgICAgVGN5OiAxMDU4LFxuXHQgICAgVGZyOiAxMjAwODcsXG5cdCAgICBVY3k6IDEwNTksXG5cdCAgICBVZnI6IDEyMDA4OCxcblx0ICAgIFZjeTogMTA0Mixcblx0ICAgIFZlZTogODg5Nyxcblx0ICAgIFZmcjogMTIwMDg5LFxuXHQgICAgV2ZyOiAxMjAwOTAsXG5cdCAgICBYZnI6IDEyMDA5MSxcblx0ICAgIFljeTogMTA2Nyxcblx0ICAgIFlmcjogMTIwMDkyLFxuXHQgICAgWmN5OiAxMDQ3LFxuXHQgICAgWmZyOiA4NDg4LFxuXHQgICAgYWNkOiA4NzY3LFxuXHQgICAgYWN5OiAxMDcyLFxuXHQgICAgYWZyOiAxMjAwOTQsXG5cdCAgICBhbXA6IDM4LFxuXHQgICAgYW5kOiA4NzQzLFxuXHQgICAgYW5nOiA4NzM2LFxuXHQgICAgYXBFOiAxMDg2NCxcblx0ICAgIGFwZTogODc3OCxcblx0ICAgIGFzdDogNDIsXG5cdCAgICBiY3k6IDEwNzMsXG5cdCAgICBiZnI6IDEyMDA5NSxcblx0ICAgIGJvdDogODg2OSxcblx0ICAgIGNhcDogODc0NSxcblx0ICAgIGNmcjogMTIwMDk2LFxuXHQgICAgY2hpOiA5NjcsXG5cdCAgICBjaXI6IDk2NzUsXG5cdCAgICBjdXA6IDg3NDYsXG5cdCAgICBkY3k6IDEwNzYsXG5cdCAgICBkZWc6IDE3Nixcblx0ICAgIGRmcjogMTIwMDk3LFxuXHQgICAgZGllOiAxNjgsXG5cdCAgICBkaXY6IDI0Nyxcblx0ICAgIGRvdDogNzI5LFxuXHQgICAgZWN5OiAxMTAxLFxuXHQgICAgZWZyOiAxMjAwOTgsXG5cdCAgICBlZ3M6IDEwOTAyLFxuXHQgICAgZWxsOiA4NDY3LFxuXHQgICAgZWxzOiAxMDkwMSxcblx0ICAgIGVuZzogMzMxLFxuXHQgICAgZXRhOiA5NTEsXG5cdCAgICBldGg6IDI0MCxcblx0ICAgIGZjeTogMTA5Mixcblx0ICAgIGZmcjogMTIwMDk5LFxuXHQgICAgZ0VsOiAxMDg5Mixcblx0ICAgIGdhcDogMTA4ODYsXG5cdCAgICBnY3k6IDEwNzUsXG5cdCAgICBnZWw6IDg5MjMsXG5cdCAgICBnZXE6IDg4MDUsXG5cdCAgICBnZXM6IDEwODc4LFxuXHQgICAgZ2ZyOiAxMjAxMDAsXG5cdCAgICBnZ2c6IDg5MjEsXG5cdCAgICBnbEU6IDEwODk4LFxuXHQgICAgZ2xhOiAxMDkxNyxcblx0ICAgIGdsajogMTA5MTYsXG5cdCAgICBnbkU6IDg4MDksXG5cdCAgICBnbmU6IDEwODg4LFxuXHQgICAgaGZyOiAxMjAxMDEsXG5cdCAgICBpY3k6IDEwODAsXG5cdCAgICBpZmY6IDg2NjAsXG5cdCAgICBpZnI6IDEyMDEwMixcblx0ICAgIGludDogODc0Nyxcblx0ICAgIGpjeTogMTA4MSxcblx0ICAgIGpmcjogMTIwMTAzLFxuXHQgICAga2N5OiAxMDgyLFxuXHQgICAga2ZyOiAxMjAxMDQsXG5cdCAgICBsRWc6IDEwODkxLFxuXHQgICAgbGFwOiAxMDg4NSxcblx0ICAgIGxhdDogMTA5MjMsXG5cdCAgICBsY3k6IDEwODMsXG5cdCAgICBsZWc6IDg5MjIsXG5cdCAgICBsZXE6IDg4MDQsXG5cdCAgICBsZXM6IDEwODc3LFxuXHQgICAgbGZyOiAxMjAxMDUsXG5cdCAgICBsZ0U6IDEwODk3LFxuXHQgICAgbG5FOiA4ODA4LFxuXHQgICAgbG5lOiAxMDg4Nyxcblx0ICAgIGxvejogOTY3NCxcblx0ICAgIGxybTogODIwNixcblx0ICAgIGxzaDogODYyNCxcblx0ICAgIG1hcDogODYxNCxcblx0ICAgIG1jeTogMTA4NCxcblx0ICAgIG1mcjogMTIwMTA2LFxuXHQgICAgbWhvOiA4NDg3LFxuXHQgICAgbWlkOiA4NzM5LFxuXHQgICAgbmFwOiA4Nzc3LFxuXHQgICAgbmN5OiAxMDg1LFxuXHQgICAgbmZyOiAxMjAxMDcsXG5cdCAgICBuZ2U6IDg4MTcsXG5cdCAgICBuZ3Q6IDg4MTUsXG5cdCAgICBuaXM6IDg5NTYsXG5cdCAgICBuaXY6IDg3MTUsXG5cdCAgICBubGU6IDg4MTYsXG5cdCAgICBubHQ6IDg4MTQsXG5cdCAgICBub3Q6IDE3Mixcblx0ICAgIG5wcjogODgzMixcblx0ICAgIG5zYzogODgzMyxcblx0ICAgIG51bTogMzUsXG5cdCAgICBvY3k6IDEwODYsXG5cdCAgICBvZnI6IDEyMDEwOCxcblx0ICAgIG9ndDogMTA2ODksXG5cdCAgICBvaG06IDg0ODYsXG5cdCAgICBvbHQ6IDEwNjg4LFxuXHQgICAgb3JkOiAxMDg0NSxcblx0ICAgIG9ydjogMTA4NDMsXG5cdCAgICBwYXI6IDg3NDEsXG5cdCAgICBwY3k6IDEwODcsXG5cdCAgICBwZnI6IDEyMDEwOSxcblx0ICAgIHBoaTogOTY2LFxuXHQgICAgcGl2OiA5ODIsXG5cdCAgICBwckU6IDEwOTMxLFxuXHQgICAgcHJlOiAxMDkyNyxcblx0ICAgIHBzaTogOTY4LFxuXHQgICAgcWZyOiAxMjAxMTAsXG5cdCAgICByY3k6IDEwODgsXG5cdCAgICByZWc6IDE3NCxcblx0ICAgIHJmcjogMTIwMTExLFxuXHQgICAgcmhvOiA5NjEsXG5cdCAgICBybG06IDgyMDcsXG5cdCAgICByc2g6IDg2MjUsXG5cdCAgICBzY0U6IDEwOTMyLFxuXHQgICAgc2NlOiAxMDkyOCxcblx0ICAgIHNjeTogMTA4OSxcblx0ICAgIHNmcjogMTIwMTEyLFxuXHQgICAgc2h5OiAxNzMsXG5cdCAgICBzaW06IDg3NjQsXG5cdCAgICBzbXQ6IDEwOTIyLFxuXHQgICAgc29sOiA0Nyxcblx0ICAgIHNxdTogOTYzMyxcblx0ICAgIHN1YjogODgzNCxcblx0ICAgIHN1bTogODcyMSxcblx0ICAgIHN1cDogODgzNSxcblx0ICAgIHRhdTogOTY0LFxuXHQgICAgdGN5OiAxMDkwLFxuXHQgICAgdGZyOiAxMjAxMTMsXG5cdCAgICB0b3A6IDg4NjgsXG5cdCAgICB1Y3k6IDEwOTEsXG5cdCAgICB1ZnI6IDEyMDExNCxcblx0ICAgIHVtbDogMTY4LFxuXHQgICAgdmN5OiAxMDc0LFxuXHQgICAgdmVlOiA4NzQ0LFxuXHQgICAgdmZyOiAxMjAxMTUsXG5cdCAgICB3ZnI6IDEyMDExNixcblx0ICAgIHhmcjogMTIwMTE3LFxuXHQgICAgeWN5OiAxMDk5LFxuXHQgICAgeWVuOiAxNjUsXG5cdCAgICB5ZnI6IDEyMDExOCxcblx0ICAgIHpjeTogMTA3OSxcblx0ICAgIHpmcjogMTIwMTE5LFxuXHQgICAgendqOiA4MjA1LFxuXHQgICAgREQ6IDg1MTcsXG5cdCAgICBHVDogNjIsXG5cdCAgICBHZzogODkyMSxcblx0ICAgIEd0OiA4ODExLFxuXHQgICAgSW06IDg0NjUsXG5cdCAgICBMVDogNjAsXG5cdCAgICBMbDogODkyMCxcblx0ICAgIEx0OiA4ODEwLFxuXHQgICAgTXU6IDkyNCxcblx0ICAgIE51OiA5MjUsXG5cdCAgICBPcjogMTA4MzYsXG5cdCAgICBQaTogOTI4LFxuXHQgICAgUHI6IDEwOTM5LFxuXHQgICAgUmU6IDg0NzYsXG5cdCAgICBTYzogMTA5NDAsXG5cdCAgICBYaTogOTI2LFxuXHQgICAgYWM6IDg3NjYsXG5cdCAgICBhZjogODI4OSxcblx0ICAgIGFwOiA4Nzc2LFxuXHQgICAgZGQ6IDg1MTgsXG5cdCAgICBlZTogODUxOSxcblx0ICAgIGVnOiAxMDkwNixcblx0ICAgIGVsOiAxMDkwNSxcblx0ICAgIGdFOiA4ODA3LFxuXHQgICAgZ2U6IDg4MDUsXG5cdCAgICBnZzogODgxMSxcblx0ICAgIGdsOiA4ODIzLFxuXHQgICAgZ3Q6IDYyLFxuXHQgICAgaWM6IDgyOTEsXG5cdCAgICBpaTogODUyMCxcblx0ICAgIGluOiA4NzEyLFxuXHQgICAgaXQ6IDgyOTAsXG5cdCAgICBsRTogODgwNixcblx0ICAgIGxlOiA4ODA0LFxuXHQgICAgbGc6IDg4MjIsXG5cdCAgICBsbDogODgxMCxcblx0ICAgIGx0OiA2MCxcblx0ICAgIG1wOiA4NzIzLFxuXHQgICAgbXU6IDk1Nixcblx0ICAgIG5lOiA4ODAwLFxuXHQgICAgbmk6IDg3MTUsXG5cdCAgICBudTogOTU3LFxuXHQgICAgb1M6IDk0MTYsXG5cdCAgICBvcjogODc0NCxcblx0ICAgIHBpOiA5NjAsXG5cdCAgICBwbTogMTc3LFxuXHQgICAgcHI6IDg4MjYsXG5cdCAgICByeDogODQ3OCxcblx0ICAgIHNjOiA4ODI3LFxuXHQgICAgd3A6IDg0NzIsXG5cdCAgICB3cjogODc2OCxcblx0ICAgIHhpOiA5NTgsXG5cdH07XG5cblx0Y29uc3Qgd2luZG93c18xMjUyID0gW1xuXHQgICAgODM2NCxcblx0ICAgIDEyOSxcblx0ICAgIDgyMTgsXG5cdCAgICA0MDIsXG5cdCAgICA4MjIyLFxuXHQgICAgODIzMCxcblx0ICAgIDgyMjQsXG5cdCAgICA4MjI1LFxuXHQgICAgNzEwLFxuXHQgICAgODI0MCxcblx0ICAgIDM1Mixcblx0ICAgIDgyNDksXG5cdCAgICAzMzgsXG5cdCAgICAxNDEsXG5cdCAgICAzODEsXG5cdCAgICAxNDMsXG5cdCAgICAxNDQsXG5cdCAgICA4MjE2LFxuXHQgICAgODIxNyxcblx0ICAgIDgyMjAsXG5cdCAgICA4MjIxLFxuXHQgICAgODIyNixcblx0ICAgIDgyMTEsXG5cdCAgICA4MjEyLFxuXHQgICAgNzMyLFxuXHQgICAgODQ4Mixcblx0ICAgIDM1Myxcblx0ICAgIDgyNTAsXG5cdCAgICAzMzksXG5cdCAgICAxNTcsXG5cdCAgICAzODIsXG5cdCAgICAzNzYsXG5cdF07XG5cdGNvbnN0IGVudGl0eV9wYXR0ZXJuID0gbmV3IFJlZ0V4cChgJigjPyg/OnhbXFxcXHdcXFxcZF0rfFxcXFxkK3wke09iamVjdC5rZXlzKGVudGl0aWVzKS5qb2luKCd8Jyl9KSkoPzo7fFxcXFxiKWAsICdnJyk7XG5cdGZ1bmN0aW9uIGRlY29kZV9jaGFyYWN0ZXJfcmVmZXJlbmNlcyhodG1sKSB7XG5cdCAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVudGl0eV9wYXR0ZXJuLCAobWF0Y2gsIGVudGl0eSkgPT4ge1xuXHQgICAgICAgIGxldCBjb2RlO1xuXHQgICAgICAgIC8vIEhhbmRsZSBuYW1lZCBlbnRpdGllc1xuXHQgICAgICAgIGlmIChlbnRpdHlbMF0gIT09ICcjJykge1xuXHQgICAgICAgICAgICBjb2RlID0gZW50aXRpZXNbZW50aXR5XTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoZW50aXR5WzFdID09PSAneCcpIHtcblx0ICAgICAgICAgICAgY29kZSA9IHBhcnNlSW50KGVudGl0eS5zdWJzdHJpbmcoMiksIDE2KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGNvZGUgPSBwYXJzZUludChlbnRpdHkuc3Vic3RyaW5nKDEpLCAxMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghY29kZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCh2YWxpZGF0ZV9jb2RlKGNvZGUpKTtcblx0ICAgIH0pO1xuXHR9XG5cdGNvbnN0IE5VTCA9IDA7XG5cdC8vIHNvbWUgY29kZSBwb2ludHMgYXJlIHZlcmJvdGVuLiBJZiB3ZSB3ZXJlIGluc2VydGluZyBIVE1MLCB0aGUgYnJvd3NlciB3b3VsZCByZXBsYWNlIHRoZSBpbGxlZ2FsXG5cdC8vIGNvZGUgcG9pbnRzIHdpdGggYWx0ZXJuYXRpdmVzIGluIHNvbWUgY2FzZXMgLSBzaW5jZSB3ZSdyZSBieXBhc3NpbmcgdGhhdCBtZWNoYW5pc20sIHdlIG5lZWRcblx0Ly8gdG8gcmVwbGFjZSB0aGVtIG91cnNlbHZlc1xuXHQvL1xuXHQvLyBTb3VyY2U6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2hhcmFjdGVyX2VuY29kaW5nc19pbl9IVE1MI0lsbGVnYWxfY2hhcmFjdGVyc1xuXHRmdW5jdGlvbiB2YWxpZGF0ZV9jb2RlKGNvZGUpIHtcblx0ICAgIC8vIGxpbmUgZmVlZCBiZWNvbWVzIGdlbmVyaWMgd2hpdGVzcGFjZVxuXHQgICAgaWYgKGNvZGUgPT09IDEwKSB7XG5cdCAgICAgICAgcmV0dXJuIDMyO1xuXHQgICAgfVxuXHQgICAgLy8gQVNDSUkgcmFuZ2UuIChXaHkgc29tZW9uZSB3b3VsZCB1c2UgSFRNTCBlbnRpdGllcyBmb3IgQVNDSUkgY2hhcmFjdGVycyBJIGRvbid0IGtub3csIGJ1dC4uLilcblx0ICAgIGlmIChjb2RlIDwgMTI4KSB7XG5cdCAgICAgICAgcmV0dXJuIGNvZGU7XG5cdCAgICB9XG5cdCAgICAvLyBjb2RlIHBvaW50cyAxMjgtMTU5IGFyZSBkZWFsdCB3aXRoIGxlbmllbnRseSBieSBicm93c2VycywgYnV0IHRoZXkncmUgaW5jb3JyZWN0LiBXZSBuZWVkXG5cdCAgICAvLyB0byBjb3JyZWN0IHRoZSBtaXN0YWtlIG9yIHdlJ2xsIGVuZCB1cCB3aXRoIG1pc3Npbmcg4oKsIHNpZ25zIGFuZCBzbyBvblxuXHQgICAgaWYgKGNvZGUgPD0gMTU5KSB7XG5cdCAgICAgICAgcmV0dXJuIHdpbmRvd3NfMTI1Mltjb2RlIC0gMTI4XTtcblx0ICAgIH1cblx0ICAgIC8vIGJhc2ljIG11bHRpbGluZ3VhbCBwbGFuZVxuXHQgICAgaWYgKGNvZGUgPCA1NTI5Nikge1xuXHQgICAgICAgIHJldHVybiBjb2RlO1xuXHQgICAgfVxuXHQgICAgLy8gVVRGLTE2IHN1cnJvZ2F0ZSBoYWx2ZXNcblx0ICAgIGlmIChjb2RlIDw9IDU3MzQzKSB7XG5cdCAgICAgICAgcmV0dXJuIE5VTDtcblx0ICAgIH1cblx0ICAgIC8vIHJlc3Qgb2YgdGhlIGJhc2ljIG11bHRpbGluZ3VhbCBwbGFuZVxuXHQgICAgaWYgKGNvZGUgPD0gNjU1MzUpIHtcblx0ICAgICAgICByZXR1cm4gY29kZTtcblx0ICAgIH1cblx0ICAgIC8vIHN1cHBsZW1lbnRhcnkgbXVsdGlsaW5ndWFsIHBsYW5lIDB4MTAwMDAgLSAweDFmZmZmXG5cdCAgICBpZiAoY29kZSA+PSA2NTUzNiAmJiBjb2RlIDw9IDEzMTA3MSkge1xuXHQgICAgICAgIHJldHVybiBjb2RlO1xuXHQgICAgfVxuXHQgICAgLy8gc3VwcGxlbWVudGFyeSBpZGVvZ3JhcGhpYyBwbGFuZSAweDIwMDAwIC0gMHgyZmZmZlxuXHQgICAgaWYgKGNvZGUgPj0gMTMxMDcyICYmIGNvZGUgPD0gMTk2NjA3KSB7XG5cdCAgICAgICAgcmV0dXJuIGNvZGU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTlVMO1xuXHR9XG5cdC8vIGJhc2VkIG9uIGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvc3ludGF4Lmh0bWwjc3ludGF4LXRhZy1vbWlzc2lvblxuXHRjb25zdCBkaXNhbGxvd2VkX2NvbnRlbnRzID0gbmV3IE1hcChbXG5cdCAgICBbJ2xpJywgbmV3IFNldChbJ2xpJ10pXSxcblx0ICAgIFsnZHQnLCBuZXcgU2V0KFsnZHQnLCAnZGQnXSldLFxuXHQgICAgWydkZCcsIG5ldyBTZXQoWydkdCcsICdkZCddKV0sXG5cdCAgICBbXG5cdCAgICAgICAgJ3AnLFxuXHQgICAgICAgIG5ldyBTZXQoJ2FkZHJlc3MgYXJ0aWNsZSBhc2lkZSBibG9ja3F1b3RlIGRpdiBkbCBmaWVsZHNldCBmb290ZXIgZm9ybSBoMSBoMiBoMyBoNCBoNSBoNiBoZWFkZXIgaGdyb3VwIGhyIG1haW4gbWVudSBuYXYgb2wgcCBwcmUgc2VjdGlvbiB0YWJsZSB1bCcuc3BsaXQoJyAnKSksXG5cdCAgICBdLFxuXHQgICAgWydydCcsIG5ldyBTZXQoWydydCcsICdycCddKV0sXG5cdCAgICBbJ3JwJywgbmV3IFNldChbJ3J0JywgJ3JwJ10pXSxcblx0ICAgIFsnb3B0Z3JvdXAnLCBuZXcgU2V0KFsnb3B0Z3JvdXAnXSldLFxuXHQgICAgWydvcHRpb24nLCBuZXcgU2V0KFsnb3B0aW9uJywgJ29wdGdyb3VwJ10pXSxcblx0ICAgIFsndGhlYWQnLCBuZXcgU2V0KFsndGJvZHknLCAndGZvb3QnXSldLFxuXHQgICAgWyd0Ym9keScsIG5ldyBTZXQoWyd0Ym9keScsICd0Zm9vdCddKV0sXG5cdCAgICBbJ3Rmb290JywgbmV3IFNldChbJ3Rib2R5J10pXSxcblx0ICAgIFsndHInLCBuZXcgU2V0KFsndHInLCAndGJvZHknXSldLFxuXHQgICAgWyd0ZCcsIG5ldyBTZXQoWyd0ZCcsICd0aCcsICd0ciddKV0sXG5cdCAgICBbJ3RoJywgbmV3IFNldChbJ3RkJywgJ3RoJywgJ3RyJ10pXSxcblx0XSk7XG5cdC8vIGNhbiB0aGlzIGJlIGEgY2hpbGQgb2YgdGhlIHBhcmVudCBlbGVtZW50LCBvciBkb2VzIGl0IGltcGxpY2l0bHlcblx0Ly8gY2xvc2UgaXQsIGxpa2UgYDxsaT5vbmU8bGk+dHdvYD9cblx0ZnVuY3Rpb24gY2xvc2luZ190YWdfb21pdHRlZChjdXJyZW50LCBuZXh0KSB7XG5cdCAgICBpZiAoZGlzYWxsb3dlZF9jb250ZW50cy5oYXMoY3VycmVudCkpIHtcblx0ICAgICAgICBpZiAoIW5leHQgfHwgZGlzYWxsb3dlZF9jb250ZW50cy5nZXQoY3VycmVudCkuaGFzKG5leHQpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWNvcm5qcy9hY29ybi9ibG9iLzY1ODQ4MTVkY2E3NDQwZTAwZGU4NDFkMWRhZDE1MjMwMmZkZDdjYTUvc3JjL3Rva2VuaXplLmpzXG5cdC8vIFJlcHJvZHVjZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL2Fjb3JuanMvYWNvcm4vYmxvYi9tYXN0ZXIvTElDRU5TRVxuXHRmdW5jdGlvbiBmdWxsX2NoYXJfY29kZV9hdChzdHIsIGkpIHtcblx0ICAgIGNvbnN0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblx0ICAgIGlmIChjb2RlIDw9IDB4ZDdmZiB8fCBjb2RlID49IDB4ZTAwMClcblx0ICAgICAgICByZXR1cm4gY29kZTtcblx0ICAgIGNvbnN0IG5leHQgPSBzdHIuY2hhckNvZGVBdChpICsgMSk7XG5cdCAgICByZXR1cm4gKGNvZGUgPDwgMTApICsgbmV4dCAtIDB4MzVmZGMwMDtcblx0fVxuXG5cdGNvbnN0IGdsb2JhbHMgPSBuZXcgU2V0KFtcblx0ICAgICdhbGVydCcsXG5cdCAgICAnQXJyYXknLFxuXHQgICAgJ0Jvb2xlYW4nLFxuXHQgICAgJ2NsZWFySW50ZXJ2YWwnLFxuXHQgICAgJ2NsZWFyVGltZW91dCcsXG5cdCAgICAnY29uZmlybScsXG5cdCAgICAnY29uc29sZScsXG5cdCAgICAnRGF0ZScsXG5cdCAgICAnZGVjb2RlVVJJJyxcblx0ICAgICdkZWNvZGVVUklDb21wb25lbnQnLFxuXHQgICAgJ2RvY3VtZW50Jyxcblx0ICAgICdlbmNvZGVVUkknLFxuXHQgICAgJ2VuY29kZVVSSUNvbXBvbmVudCcsXG5cdCAgICAnRXJyb3InLFxuXHQgICAgJ0V2YWxFcnJvcicsXG5cdCAgICAnRXZlbnQnLFxuXHQgICAgJ2ZldGNoJyxcblx0ICAgICdnbG9iYWwnLFxuXHQgICAgJ2dsb2JhbFRoaXMnLFxuXHQgICAgJ2hpc3RvcnknLFxuXHQgICAgJ0luZmluaXR5Jyxcblx0ICAgICdJbnRlcm5hbEVycm9yJyxcblx0ICAgICdJbnRsJyxcblx0ICAgICdpc0Zpbml0ZScsXG5cdCAgICAnaXNOYU4nLFxuXHQgICAgJ0pTT04nLFxuXHQgICAgJ2xvY2FsU3RvcmFnZScsXG5cdCAgICAnbG9jYXRpb24nLFxuXHQgICAgJ01hcCcsXG5cdCAgICAnTWF0aCcsXG5cdCAgICAnTmFOJyxcblx0ICAgICduYXZpZ2F0b3InLFxuXHQgICAgJ051bWJlcicsXG5cdCAgICAnT2JqZWN0Jyxcblx0ICAgICdwYXJzZUZsb2F0Jyxcblx0ICAgICdwYXJzZUludCcsXG5cdCAgICAncHJvY2VzcycsXG5cdCAgICAnUHJvbWlzZScsXG5cdCAgICAncHJvbXB0Jyxcblx0ICAgICdSYW5nZUVycm9yJyxcblx0ICAgICdSZWZlcmVuY2VFcnJvcicsXG5cdCAgICAnUmVnRXhwJyxcblx0ICAgICdzZXNzaW9uU3RvcmFnZScsXG5cdCAgICAnU2V0Jyxcblx0ICAgICdzZXRJbnRlcnZhbCcsXG5cdCAgICAnc2V0VGltZW91dCcsXG5cdCAgICAnU3RyaW5nJyxcblx0ICAgICdTeW50YXhFcnJvcicsXG5cdCAgICAnVHlwZUVycm9yJyxcblx0ICAgICd1bmRlZmluZWQnLFxuXHQgICAgJ1VSSUVycm9yJyxcblx0ICAgICdVUkwnLFxuXHQgICAgJ3dpbmRvdydcblx0XSk7XG5cdGNvbnN0IHJlc2VydmVkID0gbmV3IFNldChbXG5cdCAgICAnYXJndW1lbnRzJyxcblx0ICAgICdhd2FpdCcsXG5cdCAgICAnYnJlYWsnLFxuXHQgICAgJ2Nhc2UnLFxuXHQgICAgJ2NhdGNoJyxcblx0ICAgICdjbGFzcycsXG5cdCAgICAnY29uc3QnLFxuXHQgICAgJ2NvbnRpbnVlJyxcblx0ICAgICdkZWJ1Z2dlcicsXG5cdCAgICAnZGVmYXVsdCcsXG5cdCAgICAnZGVsZXRlJyxcblx0ICAgICdkbycsXG5cdCAgICAnZWxzZScsXG5cdCAgICAnZW51bScsXG5cdCAgICAnZXZhbCcsXG5cdCAgICAnZXhwb3J0Jyxcblx0ICAgICdleHRlbmRzJyxcblx0ICAgICdmYWxzZScsXG5cdCAgICAnZmluYWxseScsXG5cdCAgICAnZm9yJyxcblx0ICAgICdmdW5jdGlvbicsXG5cdCAgICAnaWYnLFxuXHQgICAgJ2ltcGxlbWVudHMnLFxuXHQgICAgJ2ltcG9ydCcsXG5cdCAgICAnaW4nLFxuXHQgICAgJ2luc3RhbmNlb2YnLFxuXHQgICAgJ2ludGVyZmFjZScsXG5cdCAgICAnbGV0Jyxcblx0ICAgICduZXcnLFxuXHQgICAgJ251bGwnLFxuXHQgICAgJ3BhY2thZ2UnLFxuXHQgICAgJ3ByaXZhdGUnLFxuXHQgICAgJ3Byb3RlY3RlZCcsXG5cdCAgICAncHVibGljJyxcblx0ICAgICdyZXR1cm4nLFxuXHQgICAgJ3N0YXRpYycsXG5cdCAgICAnc3VwZXInLFxuXHQgICAgJ3N3aXRjaCcsXG5cdCAgICAndGhpcycsXG5cdCAgICAndGhyb3cnLFxuXHQgICAgJ3RydWUnLFxuXHQgICAgJ3RyeScsXG5cdCAgICAndHlwZW9mJyxcblx0ICAgICd2YXInLFxuXHQgICAgJ3ZvaWQnLFxuXHQgICAgJ3doaWxlJyxcblx0ICAgICd3aXRoJyxcblx0ICAgICd5aWVsZCcsXG5cdF0pO1xuXHRjb25zdCB2b2lkX2VsZW1lbnRfbmFtZXMgPSAvXig/OmFyZWF8YmFzZXxicnxjb2x8Y29tbWFuZHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKSQvO1xuXHRmdW5jdGlvbiBpc192b2lkKG5hbWUpIHtcblx0ICAgIHJldHVybiB2b2lkX2VsZW1lbnRfbmFtZXMudGVzdChuYW1lKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICchZG9jdHlwZSc7XG5cdH1cblx0ZnVuY3Rpb24gaXNfdmFsaWQoc3RyKSB7XG5cdCAgICBsZXQgaSA9IDA7XG5cdCAgICB3aGlsZSAoaSA8IHN0ci5sZW5ndGgpIHtcblx0ICAgICAgICBjb25zdCBjb2RlID0gZnVsbF9jaGFyX2NvZGVfYXQoc3RyLCBpKTtcblx0ICAgICAgICBpZiAoIShpID09PSAwID8gaXNJZGVudGlmaWVyU3RhcnQgOiBpc0lkZW50aWZpZXJDaGFyKShjb2RlLCB0cnVlKSlcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0cnVlO1xuXHR9XG5cdGZ1bmN0aW9uIHNhbml0aXplKG5hbWUpIHtcblx0ICAgIHJldHVybiBuYW1lXG5cdCAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aMC05X10rL2csICdfJylcblx0ICAgICAgICAucmVwbGFjZSgvXl8vLCAnJylcblx0ICAgICAgICAucmVwbGFjZSgvXyQvLCAnJylcblx0ICAgICAgICAucmVwbGFjZSgvXlswLTldLywgJ18kJicpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZnV6enltYXRjaChuYW1lLCBuYW1lcykge1xuXHQgICAgY29uc3Qgc2V0ID0gbmV3IEZ1enp5U2V0KG5hbWVzKTtcblx0ICAgIGNvbnN0IG1hdGNoZXMgPSBzZXQuZ2V0KG5hbWUpO1xuXHQgICAgcmV0dXJuIG1hdGNoZXMgJiYgbWF0Y2hlc1swXSAmJiBtYXRjaGVzWzBdWzBdID4gMC43ID8gbWF0Y2hlc1swXVsxXSA6IG51bGw7XG5cdH1cblx0Ly8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9HbGVuY2gvZnV6enlzZXQuanMvYmxvYi9tYXN0ZXIvbGliL2Z1enp5c2V0LmpzXG5cdC8vIEJTRCBMaWNlbnNlZFxuXHRjb25zdCBHUkFNX1NJWkVfTE9XRVIgPSAyO1xuXHRjb25zdCBHUkFNX1NJWkVfVVBQRVIgPSAzO1xuXHQvLyByZXR1cm4gYW4gZWRpdCBkaXN0YW5jZSBmcm9tIDAgdG8gMVxuXHRmdW5jdGlvbiBfZGlzdGFuY2Uoc3RyMSwgc3RyMikge1xuXHQgICAgaWYgKHN0cjEgPT09IG51bGwgJiYgc3RyMiA9PT0gbnVsbClcblx0ICAgICAgICB0aHJvdyAnVHJ5aW5nIHRvIGNvbXBhcmUgdHdvIG51bGwgdmFsdWVzJztcblx0ICAgIGlmIChzdHIxID09PSBudWxsIHx8IHN0cjIgPT09IG51bGwpXG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICBzdHIxID0gU3RyaW5nKHN0cjEpO1xuXHQgICAgc3RyMiA9IFN0cmluZyhzdHIyKTtcblx0ICAgIGNvbnN0IGRpc3RhbmNlID0gbGV2ZW5zaHRlaW4oc3RyMSwgc3RyMik7XG5cdCAgICBpZiAoc3RyMS5sZW5ndGggPiBzdHIyLmxlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiAxIC0gZGlzdGFuY2UgLyBzdHIxLmxlbmd0aDtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAxIC0gZGlzdGFuY2UgLyBzdHIyLmxlbmd0aDtcblx0ICAgIH1cblx0fVxuXHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cdGZ1bmN0aW9uIGxldmVuc2h0ZWluKHN0cjEsIHN0cjIpIHtcblx0ICAgIGNvbnN0IGN1cnJlbnQgPSBbXTtcblx0ICAgIGxldCBwcmV2O1xuXHQgICAgbGV0IHZhbHVlO1xuXHQgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gc3RyMi5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHN0cjEubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgaWYgKGkgJiYgaikge1xuXHQgICAgICAgICAgICAgICAgaWYgKHN0cjEuY2hhckF0KGogLSAxKSA9PT0gc3RyMi5jaGFyQXQoaSAtIDEpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcmV2O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihjdXJyZW50W2pdLCBjdXJyZW50W2ogLSAxXSwgcHJldikgKyAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSBpICsgajtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBwcmV2ID0gY3VycmVudFtqXTtcblx0ICAgICAgICAgICAgY3VycmVudFtqXSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBjdXJyZW50LnBvcCgpO1xuXHR9XG5cdGNvbnN0IG5vbl93b3JkX3JlZ2V4ID0gL1teXFx3LCBdKy87XG5cdGZ1bmN0aW9uIGl0ZXJhdGVfZ3JhbXModmFsdWUsIGdyYW1fc2l6ZSA9IDIpIHtcblx0ICAgIGNvbnN0IHNpbXBsaWZpZWQgPSAnLScgKyB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2Uobm9uX3dvcmRfcmVnZXgsICcnKSArICctJztcblx0ICAgIGNvbnN0IGxlbl9kaWZmID0gZ3JhbV9zaXplIC0gc2ltcGxpZmllZC5sZW5ndGg7XG5cdCAgICBjb25zdCByZXN1bHRzID0gW107XG5cdCAgICBpZiAobGVuX2RpZmYgPiAwKSB7XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5fZGlmZjsgKytpKSB7XG5cdCAgICAgICAgICAgIHZhbHVlICs9ICctJztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbXBsaWZpZWQubGVuZ3RoIC0gZ3JhbV9zaXplICsgMTsgKytpKSB7XG5cdCAgICAgICAgcmVzdWx0cy5wdXNoKHNpbXBsaWZpZWQuc2xpY2UoaSwgaSArIGdyYW1fc2l6ZSkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdHM7XG5cdH1cblx0ZnVuY3Rpb24gZ3JhbV9jb3VudGVyKHZhbHVlLCBncmFtX3NpemUgPSAyKSB7XG5cdCAgICAvLyByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGtleT1ncmFtLCB2YWx1ZT1udW1iZXIgb2Ygb2NjdXJyZW5jZXNcblx0ICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXHQgICAgY29uc3QgZ3JhbXMgPSBpdGVyYXRlX2dyYW1zKHZhbHVlLCBncmFtX3NpemUpO1xuXHQgICAgbGV0IGkgPSAwO1xuXHQgICAgZm9yIChpOyBpIDwgZ3JhbXMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICBpZiAoZ3JhbXNbaV0gaW4gcmVzdWx0KSB7XG5cdCAgICAgICAgICAgIHJlc3VsdFtncmFtc1tpXV0gKz0gMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHJlc3VsdFtncmFtc1tpXV0gPSAxO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0ZnVuY3Rpb24gc29ydF9kZXNjZW5kaW5nKGEsIGIpIHtcblx0ICAgIHJldHVybiBiWzBdIC0gYVswXTtcblx0fVxuXHRjbGFzcyBGdXp6eVNldCB7XG5cdCAgICBjb25zdHJ1Y3RvcihhcnIpIHtcblx0ICAgICAgICB0aGlzLmV4YWN0X3NldCA9IHt9O1xuXHQgICAgICAgIHRoaXMubWF0Y2hfZGljdCA9IHt9O1xuXHQgICAgICAgIHRoaXMuaXRlbXMgPSB7fTtcblx0ICAgICAgICAvLyBpbml0aWFsaXphdGlvblxuXHQgICAgICAgIGZvciAobGV0IGkgPSBHUkFNX1NJWkVfTE9XRVI7IGkgPCBHUkFNX1NJWkVfVVBQRVIgKyAxOyArK2kpIHtcblx0ICAgICAgICAgICAgdGhpcy5pdGVtc1tpXSA9IFtdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBhZGQgYWxsIHRoZSBpdGVtcyB0byB0aGUgc2V0XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGQoYXJyW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBhZGQodmFsdWUpIHtcblx0ICAgICAgICBjb25zdCBub3JtYWxpemVkX3ZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICBpZiAobm9ybWFsaXplZF92YWx1ZSBpbiB0aGlzLmV4YWN0X3NldCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxldCBpID0gR1JBTV9TSVpFX0xPV0VSO1xuXHQgICAgICAgIGZvciAoaTsgaSA8IEdSQU1fU0laRV9VUFBFUiArIDE7ICsraSkge1xuXHQgICAgICAgICAgICB0aGlzLl9hZGQodmFsdWUsIGkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIF9hZGQodmFsdWUsIGdyYW1fc2l6ZSkge1xuXHQgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRfdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtc1tncmFtX3NpemVdIHx8IFtdO1xuXHQgICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXMubGVuZ3RoO1xuXHQgICAgICAgIGl0ZW1zLnB1c2goMCk7XG5cdCAgICAgICAgY29uc3QgZ3JhbV9jb3VudHMgPSBncmFtX2NvdW50ZXIobm9ybWFsaXplZF92YWx1ZSwgZ3JhbV9zaXplKTtcblx0ICAgICAgICBsZXQgc3VtX29mX3NxdWFyZV9ncmFtX2NvdW50cyA9IDA7XG5cdCAgICAgICAgbGV0IGdyYW07XG5cdCAgICAgICAgbGV0IGdyYW1fY291bnQ7XG5cdCAgICAgICAgZm9yIChncmFtIGluIGdyYW1fY291bnRzKSB7XG5cdCAgICAgICAgICAgIGdyYW1fY291bnQgPSBncmFtX2NvdW50c1tncmFtXTtcblx0ICAgICAgICAgICAgc3VtX29mX3NxdWFyZV9ncmFtX2NvdW50cyArPSBNYXRoLnBvdyhncmFtX2NvdW50LCAyKTtcblx0ICAgICAgICAgICAgaWYgKGdyYW0gaW4gdGhpcy5tYXRjaF9kaWN0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoX2RpY3RbZ3JhbV0ucHVzaChbaW5kZXgsIGdyYW1fY291bnRdKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hfZGljdFtncmFtXSA9IFtbaW5kZXgsIGdyYW1fY291bnRdXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCB2ZWN0b3Jfbm9ybWFsID0gTWF0aC5zcXJ0KHN1bV9vZl9zcXVhcmVfZ3JhbV9jb3VudHMpO1xuXHQgICAgICAgIGl0ZW1zW2luZGV4XSA9IFt2ZWN0b3Jfbm9ybWFsLCBub3JtYWxpemVkX3ZhbHVlXTtcblx0ICAgICAgICB0aGlzLml0ZW1zW2dyYW1fc2l6ZV0gPSBpdGVtcztcblx0ICAgICAgICB0aGlzLmV4YWN0X3NldFtub3JtYWxpemVkX3ZhbHVlXSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgZ2V0KHZhbHVlKSB7XG5cdCAgICAgICAgY29uc3Qgbm9ybWFsaXplZF92YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5leGFjdF9zZXRbbm9ybWFsaXplZF92YWx1ZV07XG5cdCAgICAgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgICAgICAgICByZXR1cm4gW1sxLCByZXN1bHRdXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICAvLyBzdGFydCB3aXRoIGhpZ2ggZ3JhbSBzaXplIGFuZCBpZiB0aGVyZSBhcmUgbm8gcmVzdWx0cywgZ28gdG8gbG93ZXIgZ3JhbSBzaXplc1xuXHQgICAgICAgIGZvciAobGV0IGdyYW1fc2l6ZSA9IEdSQU1fU0laRV9VUFBFUjsgZ3JhbV9zaXplID49IEdSQU1fU0laRV9MT1dFUjsgLS1ncmFtX3NpemUpIHtcblx0ICAgICAgICAgICAgcmVzdWx0cyA9IHRoaXMuX19nZXQodmFsdWUsIGdyYW1fc2l6ZSk7XG5cdCAgICAgICAgICAgIGlmIChyZXN1bHRzKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICAgIF9fZ2V0KHZhbHVlLCBncmFtX3NpemUpIHtcblx0ICAgICAgICBjb25zdCBub3JtYWxpemVkX3ZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICBjb25zdCBtYXRjaGVzID0ge307XG5cdCAgICAgICAgY29uc3QgZ3JhbV9jb3VudHMgPSBncmFtX2NvdW50ZXIobm9ybWFsaXplZF92YWx1ZSwgZ3JhbV9zaXplKTtcblx0ICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXNbZ3JhbV9zaXplXTtcblx0ICAgICAgICBsZXQgc3VtX29mX3NxdWFyZV9ncmFtX2NvdW50cyA9IDA7XG5cdCAgICAgICAgbGV0IGdyYW07XG5cdCAgICAgICAgbGV0IGdyYW1fY291bnQ7XG5cdCAgICAgICAgbGV0IGk7XG5cdCAgICAgICAgbGV0IGluZGV4O1xuXHQgICAgICAgIGxldCBvdGhlcl9ncmFtX2NvdW50O1xuXHQgICAgICAgIGZvciAoZ3JhbSBpbiBncmFtX2NvdW50cykge1xuXHQgICAgICAgICAgICBncmFtX2NvdW50ID0gZ3JhbV9jb3VudHNbZ3JhbV07XG5cdCAgICAgICAgICAgIHN1bV9vZl9zcXVhcmVfZ3JhbV9jb3VudHMgKz0gTWF0aC5wb3coZ3JhbV9jb3VudCwgMik7XG5cdCAgICAgICAgICAgIGlmIChncmFtIGluIHRoaXMubWF0Y2hfZGljdCkge1xuXHQgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubWF0Y2hfZGljdFtncmFtXS5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5tYXRjaF9kaWN0W2dyYW1dW2ldWzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIG90aGVyX2dyYW1fY291bnQgPSB0aGlzLm1hdGNoX2RpY3RbZ3JhbV1baV1bMV07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IGluIG1hdGNoZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc1tpbmRleF0gKz0gZ3JhbV9jb3VudCAqIG90aGVyX2dyYW1fY291bnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzW2luZGV4XSA9IGdyYW1fY291bnQgKiBvdGhlcl9ncmFtX2NvdW50O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCB2ZWN0b3Jfbm9ybWFsID0gTWF0aC5zcXJ0KHN1bV9vZl9zcXVhcmVfZ3JhbV9jb3VudHMpO1xuXHQgICAgICAgIGxldCByZXN1bHRzID0gW107XG5cdCAgICAgICAgbGV0IG1hdGNoX3Njb3JlO1xuXHQgICAgICAgIC8vIGJ1aWxkIGEgcmVzdWx0cyBsaXN0IG9mIFtzY29yZSwgc3RyXVxuXHQgICAgICAgIGZvciAoY29uc3QgbWF0Y2hfaW5kZXggaW4gbWF0Y2hlcykge1xuXHQgICAgICAgICAgICBtYXRjaF9zY29yZSA9IG1hdGNoZXNbbWF0Y2hfaW5kZXhdO1xuXHQgICAgICAgICAgICByZXN1bHRzLnB1c2goW1xuXHQgICAgICAgICAgICAgICAgbWF0Y2hfc2NvcmUgLyAodmVjdG9yX25vcm1hbCAqIGl0ZW1zW21hdGNoX2luZGV4XVswXSksXG5cdCAgICAgICAgICAgICAgICBpdGVtc1ttYXRjaF9pbmRleF1bMV0sXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXN1bHRzLnNvcnQoc29ydF9kZXNjZW5kaW5nKTtcblx0ICAgICAgICBsZXQgbmV3X3Jlc3VsdHMgPSBbXTtcblx0ICAgICAgICBjb25zdCBlbmRfaW5kZXggPSBNYXRoLm1pbig1MCwgcmVzdWx0cy5sZW5ndGgpO1xuXHQgICAgICAgIC8vIHRydW5jYXRlIHNvbWV3aGF0IGFyYml0cmFyaWx5IHRvIDUwXG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmRfaW5kZXg7ICsraSkge1xuXHQgICAgICAgICAgICBuZXdfcmVzdWx0cy5wdXNoKFtcblx0ICAgICAgICAgICAgICAgIF9kaXN0YW5jZShyZXN1bHRzW2ldWzFdLCBub3JtYWxpemVkX3ZhbHVlKSxcblx0ICAgICAgICAgICAgICAgIHJlc3VsdHNbaV1bMV0sXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXN1bHRzID0gbmV3X3Jlc3VsdHM7XG5cdCAgICAgICAgcmVzdWx0cy5zb3J0KHNvcnRfZGVzY2VuZGluZyk7XG5cdCAgICAgICAgbmV3X3Jlc3VsdHMgPSBbXTtcblx0ICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV1bMF0gPT0gcmVzdWx0c1swXVswXSkge1xuXHQgICAgICAgICAgICAgICAgbmV3X3Jlc3VsdHMucHVzaChbcmVzdWx0c1tpXVswXSwgdGhpcy5leGFjdF9zZXRbcmVzdWx0c1tpXVsxXV1dKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3X3Jlc3VsdHM7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBsaXN0JDEoaXRlbXMsIGNvbmp1bmN0aW9uID0gJ29yJykge1xuXHQgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSlcblx0ICAgICAgICByZXR1cm4gaXRlbXNbMF07XG5cdCAgICByZXR1cm4gYCR7aXRlbXMuc2xpY2UoMCwgLTEpLmpvaW4oJywgJyl9ICR7Y29uanVuY3Rpb259ICR7aXRlbXNbaXRlbXMubGVuZ3RoIC0gMV19YDtcblx0fVxuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuXHRjb25zdCB2YWxpZF90YWdfbmFtZSA9IC9eXFwhP1thLXpBLVpdezEsfTo/W2EtekEtWjAtOVxcLV0qLztcblx0Y29uc3QgbWV0YV90YWdzID0gbmV3IE1hcChbXG5cdCAgICBbJ3N2ZWx0ZTpoZWFkJywgJ0hlYWQnXSxcblx0ICAgIFsnc3ZlbHRlOm9wdGlvbnMnLCAnT3B0aW9ucyddLFxuXHQgICAgWydzdmVsdGU6d2luZG93JywgJ1dpbmRvdyddLFxuXHQgICAgWydzdmVsdGU6Ym9keScsICdCb2R5J11cblx0XSk7XG5cdGNvbnN0IHZhbGlkX21ldGFfdGFncyA9IEFycmF5LmZyb20obWV0YV90YWdzLmtleXMoKSkuY29uY2F0KCdzdmVsdGU6c2VsZicsICdzdmVsdGU6Y29tcG9uZW50Jyk7XG5cdGNvbnN0IHNwZWNpYWxzID0gbmV3IE1hcChbXG5cdCAgICBbXG5cdCAgICAgICAgJ3NjcmlwdCcsXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICByZWFkOiByZWFkX3NjcmlwdCxcblx0ICAgICAgICAgICAgcHJvcGVydHk6ICdqcycsXG5cdCAgICAgICAgfSxcblx0ICAgIF0sXG5cdCAgICBbXG5cdCAgICAgICAgJ3N0eWxlJyxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIHJlYWQ6IHJlYWRfc3R5bGUsXG5cdCAgICAgICAgICAgIHByb3BlcnR5OiAnY3NzJyxcblx0ICAgICAgICB9LFxuXHQgICAgXSxcblx0XSk7XG5cdGNvbnN0IFNFTEYgPSAvXnN2ZWx0ZTpzZWxmKD89W1xccy8+XSkvO1xuXHRjb25zdCBDT01QT05FTlQgPSAvXnN2ZWx0ZTpjb21wb25lbnQoPz1bXFxzLz5dKS87XG5cdGZ1bmN0aW9uIHBhcmVudF9pc19oZWFkKHN0YWNrKSB7XG5cdCAgICBsZXQgaSA9IHN0YWNrLmxlbmd0aDtcblx0ICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgICBjb25zdCB7IHR5cGUgfSA9IHN0YWNrW2ldO1xuXHQgICAgICAgIGlmICh0eXBlID09PSAnSGVhZCcpXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIGlmICh0eXBlID09PSAnRWxlbWVudCcgfHwgdHlwZSA9PT0gJ0lubGluZUNvbXBvbmVudCcpXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXHRmdW5jdGlvbiB0YWcocGFyc2VyKSB7XG5cdCAgICBjb25zdCBzdGFydCA9IHBhcnNlci5pbmRleCsrO1xuXHQgICAgbGV0IHBhcmVudCA9IHBhcnNlci5jdXJyZW50KCk7XG5cdCAgICBpZiAocGFyc2VyLmVhdCgnIS0tJykpIHtcblx0ICAgICAgICBjb25zdCBkYXRhID0gcGFyc2VyLnJlYWRfdW50aWwoLy0tPi8pO1xuXHQgICAgICAgIHBhcnNlci5lYXQoJy0tPicsIHRydWUsICdjb21tZW50IHdhcyBsZWZ0IG9wZW4sIGV4cGVjdGVkIC0tPicpO1xuXHQgICAgICAgIHBhcnNlci5jdXJyZW50KCkuY2hpbGRyZW4ucHVzaCh7XG5cdCAgICAgICAgICAgIHN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgdHlwZTogJ0NvbW1lbnQnLFxuXHQgICAgICAgICAgICBkYXRhLFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIGNvbnN0IGlzX2Nsb3NpbmdfdGFnID0gcGFyc2VyLmVhdCgnLycpO1xuXHQgICAgY29uc3QgbmFtZSA9IHJlYWRfdGFnX25hbWUocGFyc2VyKTtcblx0ICAgIGlmIChtZXRhX3RhZ3MuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgY29uc3Qgc2x1ZyA9IG1ldGFfdGFncy5nZXQobmFtZSkudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICBpZiAoaXNfY2xvc2luZ190YWcpIHtcblx0ICAgICAgICAgICAgaWYgKChuYW1lID09PSAnc3ZlbHRlOndpbmRvdycgfHwgbmFtZSA9PT0gJ3N2ZWx0ZTpib2R5JykgJiZcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5jdXJyZW50KCkuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLSR7c2x1Z30tY29udGVudGAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYDwke25hbWV9PiBjYW5ub3QgaGF2ZSBjaGlsZHJlbmBcblx0ICAgICAgICAgICAgICAgIH0sIHBhcnNlci5jdXJyZW50KCkuY2hpbGRyZW5bMF0uc3RhcnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAobmFtZSBpbiBwYXJzZXIubWV0YV90YWdzKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBkdXBsaWNhdGUtJHtzbHVnfWAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEEgY29tcG9uZW50IGNhbiBvbmx5IGhhdmUgb25lIDwke25hbWV9PiB0YWdgXG5cdCAgICAgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHBhcnNlci5zdGFjay5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLSR7c2x1Z30tcGxhY2VtZW50YCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPCR7bmFtZX0+IHRhZ3MgY2Fubm90IGJlIGluc2lkZSBlbGVtZW50cyBvciBibG9ja3NgXG5cdCAgICAgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcGFyc2VyLm1ldGFfdGFnc1tuYW1lXSA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgY29uc3QgdHlwZSA9IG1ldGFfdGFncy5oYXMobmFtZSlcblx0ICAgICAgICA/IG1ldGFfdGFncy5nZXQobmFtZSlcblx0ICAgICAgICA6ICgvW0EtWl0vLnRlc3QobmFtZVswXSkgfHwgbmFtZSA9PT0gJ3N2ZWx0ZTpzZWxmJyB8fCBuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpID8gJ0lubGluZUNvbXBvbmVudCdcblx0ICAgICAgICAgICAgOiBuYW1lID09PSAndGl0bGUnICYmIHBhcmVudF9pc19oZWFkKHBhcnNlci5zdGFjaykgPyAnVGl0bGUnXG5cdCAgICAgICAgICAgICAgICA6IG5hbWUgPT09ICdzbG90JyAmJiAhcGFyc2VyLmN1c3RvbUVsZW1lbnQgPyAnU2xvdCcgOiAnRWxlbWVudCc7XG5cdCAgICBjb25zdCBlbGVtZW50ID0ge1xuXHQgICAgICAgIHN0YXJ0LFxuXHQgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICB0eXBlLFxuXHQgICAgICAgIG5hbWUsXG5cdCAgICAgICAgYXR0cmlidXRlczogW10sXG5cdCAgICAgICAgY2hpbGRyZW46IFtdLFxuXHQgICAgfTtcblx0ICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICBpZiAoaXNfY2xvc2luZ190YWcpIHtcblx0ICAgICAgICBpZiAoaXNfdm9pZChuYW1lKSkge1xuXHQgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtdm9pZC1jb250ZW50YCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGA8JHtuYW1lfT4gaXMgYSB2b2lkIGVsZW1lbnQgYW5kIGNhbm5vdCBoYXZlIGNoaWxkcmVuLCBvciBhIGNsb3NpbmcgdGFnYFxuXHQgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBhcnNlci5lYXQoJz4nLCB0cnVlKTtcblx0ICAgICAgICAvLyBjbG9zZSBhbnkgZWxlbWVudHMgdGhhdCBkb24ndCBoYXZlIHRoZWlyIG93biBjbG9zaW5nIHRhZ3MsIGUuZy4gPGRpdj48cD48L2Rpdj5cblx0ICAgICAgICB3aGlsZSAocGFyZW50Lm5hbWUgIT09IG5hbWUpIHtcblx0ICAgICAgICAgICAgaWYgKHBhcmVudC50eXBlICE9PSAnRWxlbWVudCcpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwYXJzZXIubGFzdF9hdXRvX2Nsb3NlZF90YWcgJiYgcGFyc2VyLmxhc3RfYXV0b19jbG9zZWRfdGFnLnRhZyA9PT0gbmFtZVxuXHQgICAgICAgICAgICAgICAgICAgID8gYDwvJHtuYW1lfT4gYXR0ZW1wdGVkIHRvIGNsb3NlIDwke25hbWV9PiB0aGF0IHdhcyBhbHJlYWR5IGF1dG9tYXRpY2FsbHkgY2xvc2VkIGJ5IDwke3BhcnNlci5sYXN0X2F1dG9fY2xvc2VkX3RhZy5yZWFzb259PmBcblx0ICAgICAgICAgICAgICAgICAgICA6IGA8LyR7bmFtZX0+IGF0dGVtcHRlZCB0byBjbG9zZSBhbiBlbGVtZW50IHRoYXQgd2FzIG5vdCBvcGVuYDtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtY2xvc2luZy10YWdgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgIH0sIHN0YXJ0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBwYXJlbnQuZW5kID0gc3RhcnQ7XG5cdCAgICAgICAgICAgIHBhcnNlci5zdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgcGFyZW50ID0gcGFyc2VyLmN1cnJlbnQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcGFyZW50LmVuZCA9IHBhcnNlci5pbmRleDtcblx0ICAgICAgICBwYXJzZXIuc3RhY2sucG9wKCk7XG5cdCAgICAgICAgaWYgKHBhcnNlci5sYXN0X2F1dG9fY2xvc2VkX3RhZyAmJiBwYXJzZXIuc3RhY2subGVuZ3RoIDwgcGFyc2VyLmxhc3RfYXV0b19jbG9zZWRfdGFnLmRlcHRoKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5sYXN0X2F1dG9fY2xvc2VkX3RhZyA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKGNsb3NpbmdfdGFnX29taXR0ZWQocGFyZW50Lm5hbWUsIG5hbWUpKSB7XG5cdCAgICAgICAgcGFyZW50LmVuZCA9IHN0YXJ0O1xuXHQgICAgICAgIHBhcnNlci5zdGFjay5wb3AoKTtcblx0ICAgICAgICBwYXJzZXIubGFzdF9hdXRvX2Nsb3NlZF90YWcgPSB7XG5cdCAgICAgICAgICAgIHRhZzogcGFyZW50Lm5hbWUsXG5cdCAgICAgICAgICAgIHJlYXNvbjogbmFtZSxcblx0ICAgICAgICAgICAgZGVwdGg6IHBhcnNlci5zdGFjay5sZW5ndGgsXG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGNvbnN0IHVuaXF1ZV9uYW1lcyA9IG5ldyBTZXQoKTtcblx0ICAgIGxldCBhdHRyaWJ1dGU7XG5cdCAgICB3aGlsZSAoKGF0dHJpYnV0ZSA9IHJlYWRfYXR0cmlidXRlKHBhcnNlciwgdW5pcXVlX25hbWVzKSkpIHtcblx0ICAgICAgICBlbGVtZW50LmF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xuXHQgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICB9XG5cdCAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKSB7XG5cdCAgICAgICAgY29uc3QgaW5kZXggPSBlbGVtZW50LmF0dHJpYnV0ZXMuZmluZEluZGV4KGF0dHIgPT4gYXR0ci50eXBlID09PSAnQXR0cmlidXRlJyAmJiBhdHRyLm5hbWUgPT09ICd0aGlzJyk7XG5cdCAgICAgICAgaWYgKCF+aW5kZXgpIHtcblx0ICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBtaXNzaW5nLWNvbXBvbmVudC1kZWZpbml0aW9uYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGA8c3ZlbHRlOmNvbXBvbmVudD4gbXVzdCBoYXZlIGEgJ3RoaXMnIGF0dHJpYnV0ZWBcblx0ICAgICAgICAgICAgfSwgc3RhcnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gZWxlbWVudC5hdHRyaWJ1dGVzLnNwbGljZShpbmRleCwgMSlbMF07XG5cdCAgICAgICAgaWYgKGRlZmluaXRpb24udmFsdWUgPT09IHRydWUgfHwgZGVmaW5pdGlvbi52YWx1ZS5sZW5ndGggIT09IDEgfHwgZGVmaW5pdGlvbi52YWx1ZVswXS50eXBlID09PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWNvbXBvbmVudC1kZWZpbml0aW9uYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBpbnZhbGlkIGNvbXBvbmVudCBkZWZpbml0aW9uYFxuXHQgICAgICAgICAgICB9LCBkZWZpbml0aW9uLnN0YXJ0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxlbWVudC5leHByZXNzaW9uID0gZGVmaW5pdGlvbi52YWx1ZVswXS5leHByZXNzaW9uO1xuXHQgICAgfVxuXHQgICAgLy8gc3BlY2lhbCBjYXNlcyDigJMgdG9wLWxldmVsIDxzY3JpcHQ+IGFuZCA8c3R5bGU+XG5cdCAgICBpZiAoc3BlY2lhbHMuaGFzKG5hbWUpICYmIHBhcnNlci5zdGFjay5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICBjb25zdCBzcGVjaWFsID0gc3BlY2lhbHMuZ2V0KG5hbWUpO1xuXHQgICAgICAgIHBhcnNlci5lYXQoJz4nLCB0cnVlKTtcblx0ICAgICAgICBjb25zdCBjb250ZW50ID0gc3BlY2lhbC5yZWFkKHBhcnNlciwgc3RhcnQsIGVsZW1lbnQuYXR0cmlidXRlcyk7XG5cdCAgICAgICAgaWYgKGNvbnRlbnQpXG5cdCAgICAgICAgICAgIHBhcnNlcltzcGVjaWFsLnByb3BlcnR5XS5wdXNoKGNvbnRlbnQpO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIHBhcnNlci5jdXJyZW50KCkuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcblx0ICAgIGNvbnN0IHNlbGZfY2xvc2luZyA9IHBhcnNlci5lYXQoJy8nKSB8fCBpc192b2lkKG5hbWUpO1xuXHQgICAgcGFyc2VyLmVhdCgnPicsIHRydWUpO1xuXHQgICAgaWYgKHNlbGZfY2xvc2luZykge1xuXHQgICAgICAgIC8vIGRvbid0IHB1c2ggc2VsZi1jbG9zaW5nIGVsZW1lbnRzIG9udG8gdGhlIHN0YWNrXG5cdCAgICAgICAgZWxlbWVudC5lbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChuYW1lID09PSAndGV4dGFyZWEnKSB7XG5cdCAgICAgICAgLy8gc3BlY2lhbCBjYXNlXG5cdCAgICAgICAgZWxlbWVudC5jaGlsZHJlbiA9IHJlYWRfc2VxdWVuY2UocGFyc2VyLCAoKSA9PiBwYXJzZXIudGVtcGxhdGUuc2xpY2UocGFyc2VyLmluZGV4LCBwYXJzZXIuaW5kZXggKyAxMSkgPT09ICc8L3RleHRhcmVhPicpO1xuXHQgICAgICAgIHBhcnNlci5yZWFkKC88XFwvdGV4dGFyZWE+Lyk7XG5cdCAgICAgICAgZWxlbWVudC5lbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChuYW1lID09PSAnc2NyaXB0Jykge1xuXHQgICAgICAgIC8vIHNwZWNpYWwgY2FzZVxuXHQgICAgICAgIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuXHQgICAgICAgIGNvbnN0IGRhdGEgPSBwYXJzZXIucmVhZF91bnRpbCgvPFxcL3NjcmlwdD4vKTtcblx0ICAgICAgICBjb25zdCBlbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5wdXNoKHsgc3RhcnQsIGVuZCwgdHlwZTogJ1RleHQnLCBkYXRhIH0pO1xuXHQgICAgICAgIHBhcnNlci5lYXQoJzwvc2NyaXB0PicsIHRydWUpO1xuXHQgICAgICAgIGVsZW1lbnQuZW5kID0gcGFyc2VyLmluZGV4O1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuXHQgICAgICAgIC8vIHNwZWNpYWwgY2FzZVxuXHQgICAgICAgIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuXHQgICAgICAgIGNvbnN0IGRhdGEgPSBwYXJzZXIucmVhZF91bnRpbCgvPFxcL3N0eWxlPi8pO1xuXHQgICAgICAgIGNvbnN0IGVuZCA9IHBhcnNlci5pbmRleDtcblx0ICAgICAgICBlbGVtZW50LmNoaWxkcmVuLnB1c2goeyBzdGFydCwgZW5kLCB0eXBlOiAnVGV4dCcsIGRhdGEgfSk7XG5cdCAgICAgICAgcGFyc2VyLmVhdCgnPC9zdHlsZT4nLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHBhcnNlci5zdGFjay5wdXNoKGVsZW1lbnQpO1xuXHQgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIHJlYWRfdGFnX25hbWUocGFyc2VyKSB7XG5cdCAgICBjb25zdCBzdGFydCA9IHBhcnNlci5pbmRleDtcblx0ICAgIGlmIChwYXJzZXIucmVhZChTRUxGKSkge1xuXHQgICAgICAgIC8vIGNoZWNrIHdlJ3JlIGluc2lkZSBhIGJsb2NrLCBvdGhlcndpc2UgdGhpc1xuXHQgICAgICAgIC8vIHdpbGwgY2F1c2UgaW5maW5pdGUgcmVjdXJzaW9uXG5cdCAgICAgICAgbGV0IGkgPSBwYXJzZXIuc3RhY2subGVuZ3RoO1xuXHQgICAgICAgIGxldCBsZWdhbCA9IGZhbHNlO1xuXHQgICAgICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBwYXJzZXIuc3RhY2tbaV07XG5cdCAgICAgICAgICAgIGlmIChmcmFnbWVudC50eXBlID09PSAnSWZCbG9jaycgfHwgZnJhZ21lbnQudHlwZSA9PT0gJ0VhY2hCbG9jaycgfHwgZnJhZ21lbnQudHlwZSA9PT0gJ0lubGluZUNvbXBvbmVudCcpIHtcblx0ICAgICAgICAgICAgICAgIGxlZ2FsID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghbGVnYWwpIHtcblx0ICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXNlbGYtcGxhY2VtZW50YCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGA8c3ZlbHRlOnNlbGY+IGNvbXBvbmVudHMgY2FuIG9ubHkgZXhpc3QgaW5zaWRlIHsjaWZ9IGJsb2NrcywgeyNlYWNofSBibG9ja3MsIG9yIHNsb3RzIHBhc3NlZCB0byBjb21wb25lbnRzYFxuXHQgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiAnc3ZlbHRlOnNlbGYnO1xuXHQgICAgfVxuXHQgICAgaWYgKHBhcnNlci5yZWFkKENPTVBPTkVOVCkpXG5cdCAgICAgICAgcmV0dXJuICdzdmVsdGU6Y29tcG9uZW50Jztcblx0ICAgIGNvbnN0IG5hbWUgPSBwYXJzZXIucmVhZF91bnRpbCgvKFxcc3xcXC98PikvKTtcblx0ICAgIGlmIChtZXRhX3RhZ3MuaGFzKG5hbWUpKVxuXHQgICAgICAgIHJldHVybiBuYW1lO1xuXHQgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnc3ZlbHRlOicpKSB7XG5cdCAgICAgICAgY29uc3QgbWF0Y2ggPSBmdXp6eW1hdGNoKG5hbWUuc2xpY2UoNyksIHZhbGlkX21ldGFfdGFncyk7XG5cdCAgICAgICAgbGV0IG1lc3NhZ2UgPSBgVmFsaWQgPHN2ZWx0ZTouLi4+IHRhZyBuYW1lcyBhcmUgJHtsaXN0JDEodmFsaWRfbWV0YV90YWdzKX1gO1xuXHQgICAgICAgIGlmIChtYXRjaClcblx0ICAgICAgICAgICAgbWVzc2FnZSArPSBgIChkaWQgeW91IG1lYW4gJyR7bWF0Y2h9Jz8pYDtcblx0ICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICBjb2RlOiAnaW52YWxpZC10YWctbmFtZScsXG5cdCAgICAgICAgICAgIG1lc3NhZ2Vcblx0ICAgICAgICB9LCBzdGFydCk7XG5cdCAgICB9XG5cdCAgICBpZiAoIXZhbGlkX3RhZ19uYW1lLnRlc3QobmFtZSkpIHtcblx0ICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC10YWctbmFtZWAsXG5cdCAgICAgICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCB2YWxpZCB0YWcgbmFtZWBcblx0ICAgICAgICB9LCBzdGFydCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmFtZTtcblx0fVxuXHRmdW5jdGlvbiByZWFkX2F0dHJpYnV0ZShwYXJzZXIsIHVuaXF1ZV9uYW1lcykge1xuXHQgICAgY29uc3Qgc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICBmdW5jdGlvbiBjaGVja191bmlxdWUobmFtZSkge1xuXHQgICAgICAgIGlmICh1bmlxdWVfbmFtZXMuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiBgZHVwbGljYXRlLWF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQXR0cmlidXRlcyBuZWVkIHRvIGJlIHVuaXF1ZSdcblx0ICAgICAgICAgICAgfSwgc3RhcnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB1bmlxdWVfbmFtZXMuYWRkKG5hbWUpO1xuXHQgICAgfVxuXHQgICAgaWYgKHBhcnNlci5lYXQoJ3snKSkge1xuXHQgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgaWYgKHBhcnNlci5lYXQoJy4uLicpKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSByZWFkX2V4cHJlc3Npb24ocGFyc2VyKTtcblx0ICAgICAgICAgICAgcGFyc2VyLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgcGFyc2VyLmVhdCgnfScsIHRydWUpO1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdTcHJlYWQnLFxuXHQgICAgICAgICAgICAgICAgZXhwcmVzc2lvblxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgdmFsdWVfc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwYXJzZXIucmVhZF9pZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgIHBhcnNlci5lYXQoJ30nLCB0cnVlKTtcblx0ICAgICAgICAgICAgY2hlY2tfdW5pcXVlKG5hbWUpO1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdBdHRyaWJ1dGUnLFxuXHQgICAgICAgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBbe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdmFsdWVfc3RhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVfc3RhcnQgKyBuYW1lLmxlbmd0aCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0F0dHJpYnV0ZVNob3J0aGFuZCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZV9zdGFydCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdmFsdWVfc3RhcnQgKyBuYW1lLmxlbmd0aCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1dXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cdCAgICBjb25zdCBuYW1lID0gcGFyc2VyLnJlYWRfdW50aWwoL1tcXHM9XFwvPlwiJ10vKTtcblx0ICAgIGlmICghbmFtZSlcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIGxldCBlbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgY29uc3QgY29sb25faW5kZXggPSBuYW1lLmluZGV4T2YoJzonKTtcblx0ICAgIGNvbnN0IHR5cGUgPSBjb2xvbl9pbmRleCAhPT0gLTEgJiYgZ2V0X2RpcmVjdGl2ZV90eXBlKG5hbWUuc2xpY2UoMCwgY29sb25faW5kZXgpKTtcblx0ICAgIGxldCB2YWx1ZSA9IHRydWU7XG5cdCAgICBpZiAocGFyc2VyLmVhdCgnPScpKSB7XG5cdCAgICAgICAgcGFyc2VyLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgICAgICB2YWx1ZSA9IHJlYWRfYXR0cmlidXRlX3ZhbHVlKHBhcnNlcik7XG5cdCAgICAgICAgZW5kID0gcGFyc2VyLmluZGV4O1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAocGFyc2VyLm1hdGNoX3JlZ2V4KC9bXCInXS8pKSB7XG5cdCAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgY29kZTogYHVuZXhwZWN0ZWQtdG9rZW5gLFxuXHQgICAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgPWBcblx0ICAgICAgICB9LCBwYXJzZXIuaW5kZXgpO1xuXHQgICAgfVxuXHQgICAgaWYgKHR5cGUpIHtcblx0ICAgICAgICBjb25zdCBbZGlyZWN0aXZlX25hbWUsIC4uLm1vZGlmaWVyc10gPSBuYW1lLnNsaWNlKGNvbG9uX2luZGV4ICsgMSkuc3BsaXQoJ3wnKTtcblx0ICAgICAgICBpZiAodHlwZSA9PT0gJ0JpbmRpbmcnICYmIGRpcmVjdGl2ZV9uYW1lICE9PSAndGhpcycpIHtcblx0ICAgICAgICAgICAgY2hlY2tfdW5pcXVlKGRpcmVjdGl2ZV9uYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodHlwZSAhPT0gJ0V2ZW50SGFuZGxlcicpIHtcblx0ICAgICAgICAgICAgY2hlY2tfdW5pcXVlKG5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodHlwZSA9PT0gJ1JlZicpIHtcblx0ICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXJlZi1kaXJlY3RpdmVgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRoZSByZWYgZGlyZWN0aXZlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQg4oCUIHVzZSBcXGBiaW5kOnRoaXM9eyR7ZGlyZWN0aXZlX25hbWV9fVxcYCBpbnN0ZWFkYFxuXHQgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh2YWx1ZVswXSkge1xuXHQgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSB8fCB2YWx1ZVswXS50eXBlID09PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtZGlyZWN0aXZlLXZhbHVlYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRGlyZWN0aXZlIHZhbHVlIG11c3QgYmUgYSBKYXZhU2NyaXB0IGV4cHJlc3Npb24gZW5jbG9zZWQgaW4gY3VybHkgYnJhY2VzYFxuXHQgICAgICAgICAgICAgICAgfSwgdmFsdWVbMF0uc3RhcnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHtcblx0ICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZCxcblx0ICAgICAgICAgICAgdHlwZSxcblx0ICAgICAgICAgICAgbmFtZTogZGlyZWN0aXZlX25hbWUsXG5cdCAgICAgICAgICAgIG1vZGlmaWVycyxcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbjogKHZhbHVlWzBdICYmIHZhbHVlWzBdLmV4cHJlc3Npb24pIHx8IG51bGxcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGlmICh0eXBlID09PSAnVHJhbnNpdGlvbicpIHtcblx0ICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gbmFtZS5zbGljZSgwLCBjb2xvbl9pbmRleCk7XG5cdCAgICAgICAgICAgIGRpcmVjdGl2ZS5pbnRybyA9IGRpcmVjdGlvbiA9PT0gJ2luJyB8fCBkaXJlY3Rpb24gPT09ICd0cmFuc2l0aW9uJztcblx0ICAgICAgICAgICAgZGlyZWN0aXZlLm91dHJvID0gZGlyZWN0aW9uID09PSAnb3V0JyB8fCBkaXJlY3Rpb24gPT09ICd0cmFuc2l0aW9uJztcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFkaXJlY3RpdmUuZXhwcmVzc2lvbiAmJiAodHlwZSA9PT0gJ0JpbmRpbmcnIHx8IHR5cGUgPT09ICdDbGFzcycpKSB7XG5cdCAgICAgICAgICAgIGRpcmVjdGl2ZS5leHByZXNzaW9uID0ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IGRpcmVjdGl2ZS5zdGFydCArIGNvbG9uX2luZGV4ICsgMSxcblx0ICAgICAgICAgICAgICAgIGVuZDogZGlyZWN0aXZlLmVuZCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgICAgIG5hbWU6IGRpcmVjdGl2ZS5uYW1lXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG5cdCAgICB9XG5cdCAgICBjaGVja191bmlxdWUobmFtZSk7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHN0YXJ0LFxuXHQgICAgICAgIGVuZCxcblx0ICAgICAgICB0eXBlOiAnQXR0cmlidXRlJyxcblx0ICAgICAgICBuYW1lLFxuXHQgICAgICAgIHZhbHVlLFxuXHQgICAgfTtcblx0fVxuXHRmdW5jdGlvbiBnZXRfZGlyZWN0aXZlX3R5cGUobmFtZSkge1xuXHQgICAgaWYgKG5hbWUgPT09ICd1c2UnKVxuXHQgICAgICAgIHJldHVybiAnQWN0aW9uJztcblx0ICAgIGlmIChuYW1lID09PSAnYW5pbWF0ZScpXG5cdCAgICAgICAgcmV0dXJuICdBbmltYXRpb24nO1xuXHQgICAgaWYgKG5hbWUgPT09ICdiaW5kJylcblx0ICAgICAgICByZXR1cm4gJ0JpbmRpbmcnO1xuXHQgICAgaWYgKG5hbWUgPT09ICdjbGFzcycpXG5cdCAgICAgICAgcmV0dXJuICdDbGFzcyc7XG5cdCAgICBpZiAobmFtZSA9PT0gJ29uJylcblx0ICAgICAgICByZXR1cm4gJ0V2ZW50SGFuZGxlcic7XG5cdCAgICBpZiAobmFtZSA9PT0gJ2xldCcpXG5cdCAgICAgICAgcmV0dXJuICdMZXQnO1xuXHQgICAgaWYgKG5hbWUgPT09ICdyZWYnKVxuXHQgICAgICAgIHJldHVybiAnUmVmJztcblx0ICAgIGlmIChuYW1lID09PSAnaW4nIHx8IG5hbWUgPT09ICdvdXQnIHx8IG5hbWUgPT09ICd0cmFuc2l0aW9uJylcblx0ICAgICAgICByZXR1cm4gJ1RyYW5zaXRpb24nO1xuXHR9XG5cdGZ1bmN0aW9uIHJlYWRfYXR0cmlidXRlX3ZhbHVlKHBhcnNlcikge1xuXHQgICAgY29uc3QgcXVvdGVfbWFyayA9IHBhcnNlci5lYXQoYCdgKSA/IGAnYCA6IHBhcnNlci5lYXQoYFwiYCkgPyBgXCJgIDogbnVsbDtcblx0ICAgIGNvbnN0IHJlZ2V4ID0gKHF1b3RlX21hcmsgPT09IGAnYCA/IC8nLyA6XG5cdCAgICAgICAgcXVvdGVfbWFyayA9PT0gYFwiYCA/IC9cIi8gOlxuXHQgICAgICAgICAgICAvKFxcLz58W1xcc1wiJz08PmBdKS8pO1xuXHQgICAgY29uc3QgdmFsdWUgPSByZWFkX3NlcXVlbmNlKHBhcnNlciwgKCkgPT4gISFwYXJzZXIubWF0Y2hfcmVnZXgocmVnZXgpKTtcblx0ICAgIGlmIChxdW90ZV9tYXJrKVxuXHQgICAgICAgIHBhcnNlci5pbmRleCArPSAxO1xuXHQgICAgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdGZ1bmN0aW9uIHJlYWRfc2VxdWVuY2UocGFyc2VyLCBkb25lKSB7XG5cdCAgICBsZXQgY3VycmVudF9jaHVuayA9IHtcblx0ICAgICAgICBzdGFydDogcGFyc2VyLmluZGV4LFxuXHQgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICB0eXBlOiAnVGV4dCcsXG5cdCAgICAgICAgcmF3OiAnJyxcblx0ICAgICAgICBkYXRhOiBudWxsXG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gZmx1c2goKSB7XG5cdCAgICAgICAgaWYgKGN1cnJlbnRfY2h1bmsucmF3KSB7XG5cdCAgICAgICAgICAgIGN1cnJlbnRfY2h1bmsuZGF0YSA9IGRlY29kZV9jaGFyYWN0ZXJfcmVmZXJlbmNlcyhjdXJyZW50X2NodW5rLnJhdyk7XG5cdCAgICAgICAgICAgIGN1cnJlbnRfY2h1bmsuZW5kID0gcGFyc2VyLmluZGV4O1xuXHQgICAgICAgICAgICBjaHVua3MucHVzaChjdXJyZW50X2NodW5rKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBjb25zdCBjaHVua3MgPSBbXTtcblx0ICAgIHdoaWxlIChwYXJzZXIuaW5kZXggPCBwYXJzZXIudGVtcGxhdGUubGVuZ3RoKSB7XG5cdCAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZXIuaW5kZXg7XG5cdCAgICAgICAgaWYgKGRvbmUoKSkge1xuXHQgICAgICAgICAgICBmbHVzaCgpO1xuXHQgICAgICAgICAgICByZXR1cm4gY2h1bmtzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChwYXJzZXIuZWF0KCd7JykpIHtcblx0ICAgICAgICAgICAgZmx1c2goKTtcblx0ICAgICAgICAgICAgcGFyc2VyLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHJlYWRfZXhwcmVzc2lvbihwYXJzZXIpO1xuXHQgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICBwYXJzZXIuZWF0KCd9JywgdHJ1ZSk7XG5cdCAgICAgICAgICAgIGNodW5rcy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiBpbmRleCxcblx0ICAgICAgICAgICAgICAgIGVuZDogcGFyc2VyLmluZGV4LFxuXHQgICAgICAgICAgICAgICAgdHlwZTogJ011c3RhY2hlVGFnJyxcblx0ICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjdXJyZW50X2NodW5rID0ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdUZXh0Jyxcblx0ICAgICAgICAgICAgICAgIHJhdzogJycsXG5cdCAgICAgICAgICAgICAgICBkYXRhOiBudWxsXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjdXJyZW50X2NodW5rLnJhdyArPSBwYXJzZXIudGVtcGxhdGVbcGFyc2VyLmluZGV4KytdO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgY29kZTogYHVuZXhwZWN0ZWQtZW9mYCxcblx0ICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCBlbmQgb2YgaW5wdXRgXG5cdCAgICB9KTtcblx0fVxuXG5cdGNvbnN0IFNRVUFSRV9CUkFDS0VUX09QRU4gPSBcIltcIi5jaGFyQ29kZUF0KDApO1xuXHRjb25zdCBTUVVBUkVfQlJBQ0tFVF9DTE9TRSA9IFwiXVwiLmNoYXJDb2RlQXQoMCk7XG5cdGNvbnN0IENVUkxZX0JSQUNLRVRfT1BFTiA9IFwie1wiLmNoYXJDb2RlQXQoMCk7XG5cdGNvbnN0IENVUkxZX0JSQUNLRVRfQ0xPU0UgPSBcIn1cIi5jaGFyQ29kZUF0KDApO1xuXHRmdW5jdGlvbiBpc19icmFja2V0X29wZW4oY29kZSkge1xuXHQgICAgcmV0dXJuIGNvZGUgPT09IFNRVUFSRV9CUkFDS0VUX09QRU4gfHwgY29kZSA9PT0gQ1VSTFlfQlJBQ0tFVF9PUEVOO1xuXHR9XG5cdGZ1bmN0aW9uIGlzX2JyYWNrZXRfY2xvc2UoY29kZSkge1xuXHQgICAgcmV0dXJuIGNvZGUgPT09IFNRVUFSRV9CUkFDS0VUX0NMT1NFIHx8IGNvZGUgPT09IENVUkxZX0JSQUNLRVRfQ0xPU0U7XG5cdH1cblx0ZnVuY3Rpb24gaXNfYnJhY2tldF9wYWlyKG9wZW4sIGNsb3NlKSB7XG5cdCAgICByZXR1cm4gKChvcGVuID09PSBTUVVBUkVfQlJBQ0tFVF9PUEVOICYmIGNsb3NlID09PSBTUVVBUkVfQlJBQ0tFVF9DTE9TRSkgfHxcblx0ICAgICAgICAob3BlbiA9PT0gQ1VSTFlfQlJBQ0tFVF9PUEVOICYmIGNsb3NlID09PSBDVVJMWV9CUkFDS0VUX0NMT1NFKSk7XG5cdH1cblx0ZnVuY3Rpb24gZ2V0X2JyYWNrZXRfY2xvc2Uob3Blbikge1xuXHQgICAgaWYgKG9wZW4gPT09IFNRVUFSRV9CUkFDS0VUX09QRU4pIHtcblx0ICAgICAgICByZXR1cm4gU1FVQVJFX0JSQUNLRVRfQ0xPU0U7XG5cdCAgICB9XG5cdCAgICBpZiAob3BlbiA9PT0gQ1VSTFlfQlJBQ0tFVF9PUEVOKSB7XG5cdCAgICAgICAgcmV0dXJuIENVUkxZX0JSQUNLRVRfQ0xPU0U7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkX2NvbnRleHQocGFyc2VyKSB7XG5cdCAgICBjb25zdCBzdGFydCA9IHBhcnNlci5pbmRleDtcblx0ICAgIGxldCBpID0gcGFyc2VyLmluZGV4O1xuXHQgICAgY29uc3QgY29kZSA9IGZ1bGxfY2hhcl9jb2RlX2F0KHBhcnNlci50ZW1wbGF0ZSwgaSk7XG5cdCAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoY29kZSwgdHJ1ZSkpIHtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiBcIklkZW50aWZpZXJcIixcblx0ICAgICAgICAgICAgbmFtZTogcGFyc2VyLnJlYWRfaWRlbnRpZmllcigpLFxuXHQgICAgICAgICAgICBzdGFydCxcblx0ICAgICAgICAgICAgZW5kOiBwYXJzZXIuaW5kZXhcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHQgICAgaWYgKCFpc19icmFja2V0X29wZW4oY29kZSkpIHtcblx0ICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICBjb2RlOiBcInVuZXhwZWN0ZWQtdG9rZW5cIixcblx0ICAgICAgICAgICAgbWVzc2FnZTogXCJFeHBlY3RlZCBpZGVudGlmaWVyIG9yIGRlc3RydWN0dXJlIHBhdHRlcm5cIlxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgY29uc3QgYnJhY2tldF9zdGFjayA9IFtjb2RlXTtcblx0ICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgIHdoaWxlIChpIDwgcGFyc2VyLnRlbXBsYXRlLmxlbmd0aCkge1xuXHQgICAgICAgIGNvbnN0IGNvZGUgPSBmdWxsX2NoYXJfY29kZV9hdChwYXJzZXIudGVtcGxhdGUsIGkpO1xuXHQgICAgICAgIGlmIChpc19icmFja2V0X29wZW4oY29kZSkpIHtcblx0ICAgICAgICAgICAgYnJhY2tldF9zdGFjay5wdXNoKGNvZGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChpc19icmFja2V0X2Nsb3NlKGNvZGUpKSB7XG5cdCAgICAgICAgICAgIGlmICghaXNfYnJhY2tldF9wYWlyKGJyYWNrZXRfc3RhY2tbYnJhY2tldF9zdGFjay5sZW5ndGggLSAxXSwgY29kZSkpIHtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogXCJ1bmV4cGVjdGVkLXRva2VuXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkICR7U3RyaW5nLmZyb21DaGFyQ29kZShnZXRfYnJhY2tldF9jbG9zZShicmFja2V0X3N0YWNrW2JyYWNrZXRfc3RhY2subGVuZ3RoIC0gMV0pKX1gXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBicmFja2V0X3N0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICBpZiAoYnJhY2tldF9zdGFjay5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgIH1cblx0ICAgIHBhcnNlci5pbmRleCA9IGk7XG5cdCAgICBjb25zdCBwYXR0ZXJuX3N0cmluZyA9IHBhcnNlci50ZW1wbGF0ZS5zbGljZShzdGFydCwgaSk7XG5cdCAgICB0cnkge1xuXHQgICAgICAgIC8vIHRoZSBsZW5ndGggb2YgdGhlIGBzcGFjZV93aXRoX25ld2xpbmVgIGhhcyB0byBiZSBzdGFydCAtIDFcblx0ICAgICAgICAvLyBiZWNhdXNlIHdlIGFkZGVkIGEgYChgIGluIGZyb250IG9mIHRoZSBwYXR0ZXJuX3N0cmluZyxcblx0ICAgICAgICAvLyB3aGljaCBzaGlmdGVkIHRoZSBlbnRpcmUgc3RyaW5nIHRvIHJpZ2h0IGJ5IDFcblx0ICAgICAgICAvLyBzbyB3ZSBvZmZzZXQgaXQgYnkgcmVtb3ZpbmcgMSBjaGFyYWN0ZXIgaW4gdGhlIGBzcGFjZV93aXRoX25ld2xpbmVgXG5cdCAgICAgICAgLy8gdG8gYWNoaWV2ZSB0aGF0LCB3ZSByZW1vdmUgdGhlIDFzdCBzcGFjZSBlbmNvdW50ZXJlZCxcblx0ICAgICAgICAvLyBzbyBpdCB3aWxsIG5vdCBhZmZlY3QgdGhlIGBjb2x1bW5gIG9mIHRoZSBub2RlXG5cdCAgICAgICAgbGV0IHNwYWNlX3dpdGhfbmV3bGluZSA9IHBhcnNlci50ZW1wbGF0ZS5zbGljZSgwLCBzdGFydCkucmVwbGFjZSgvW15cXG5dL2csICcgJyk7XG5cdCAgICAgICAgY29uc3QgZmlyc3Rfc3BhY2UgPSBzcGFjZV93aXRoX25ld2xpbmUuaW5kZXhPZignICcpO1xuXHQgICAgICAgIHNwYWNlX3dpdGhfbmV3bGluZSA9IHNwYWNlX3dpdGhfbmV3bGluZS5zbGljZSgwLCBmaXJzdF9zcGFjZSkgKyBzcGFjZV93aXRoX25ld2xpbmUuc2xpY2UoZmlyc3Rfc3BhY2UgKyAxKTtcblx0ICAgICAgICByZXR1cm4gcGFyc2VfZXhwcmVzc2lvbl9hdChgJHtzcGFjZV93aXRoX25ld2xpbmV9KCR7cGF0dGVybl9zdHJpbmd9ID0gMSlgLCBzdGFydCAtIDEpLmxlZnQ7XG5cdCAgICB9XG5cdCAgICBjYXRjaCAoZXJyb3IpIHtcblx0ICAgICAgICBwYXJzZXIuYWNvcm5fZXJyb3IoZXJyb3IpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gdHJpbV9zdGFydChzdHIpIHtcblx0ICAgIGxldCBpID0gMDtcblx0ICAgIHdoaWxlICh3aGl0ZXNwYWNlLnRlc3Qoc3RyW2ldKSlcblx0ICAgICAgICBpICs9IDE7XG5cdCAgICByZXR1cm4gc3RyLnNsaWNlKGkpO1xuXHR9XG5cdGZ1bmN0aW9uIHRyaW1fZW5kKHN0cikge1xuXHQgICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuXHQgICAgd2hpbGUgKHdoaXRlc3BhY2UudGVzdChzdHJbaSAtIDFdKSlcblx0ICAgICAgICBpIC09IDE7XG5cdCAgICByZXR1cm4gc3RyLnNsaWNlKDAsIGkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdG9fc3RyaW5nKG5vZGUpIHtcblx0ICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG5cdCAgICAgICAgY2FzZSAnSWZCbG9jayc6XG5cdCAgICAgICAgICAgIHJldHVybiAneyNpZn0gYmxvY2snO1xuXHQgICAgICAgIGNhc2UgJ1RoZW5CbG9jayc6XG5cdCAgICAgICAgICAgIHJldHVybiAnezp0aGVufSBibG9jayc7XG5cdCAgICAgICAgY2FzZSAnRWxzZUJsb2NrJzpcblx0ICAgICAgICAgICAgcmV0dXJuICd7OmVsc2V9IGJsb2NrJztcblx0ICAgICAgICBjYXNlICdQZW5kaW5nQmxvY2snOlxuXHQgICAgICAgIGNhc2UgJ0F3YWl0QmxvY2snOlxuXHQgICAgICAgICAgICByZXR1cm4gJ3sjYXdhaXR9IGJsb2NrJztcblx0ICAgICAgICBjYXNlICdDYXRjaEJsb2NrJzpcblx0ICAgICAgICAgICAgcmV0dXJuICd7OmNhdGNofSBibG9jayc7XG5cdCAgICAgICAgY2FzZSAnRWFjaEJsb2NrJzpcblx0ICAgICAgICAgICAgcmV0dXJuICd7I2VhY2h9IGJsb2NrJztcblx0ICAgICAgICBjYXNlICdSYXdNdXN0YWNoZVRhZyc6XG5cdCAgICAgICAgICAgIHJldHVybiAne0BodG1sfSBibG9jayc7XG5cdCAgICAgICAgY2FzZSAnRGVidWdUYWcnOlxuXHQgICAgICAgICAgICByZXR1cm4gJ3tAZGVidWd9IGJsb2NrJztcblx0ICAgICAgICBjYXNlICdFbGVtZW50Jzpcblx0ICAgICAgICBjYXNlICdJbmxpbmVDb21wb25lbnQnOlxuXHQgICAgICAgIGNhc2UgJ1Nsb3QnOlxuXHQgICAgICAgIGNhc2UgJ1RpdGxlJzpcblx0ICAgICAgICAgICAgcmV0dXJuIGA8JHtub2RlLm5hbWV9PiB0YWdgO1xuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgIHJldHVybiBub2RlLnR5cGU7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiB0cmltX3doaXRlc3BhY2UoYmxvY2ssIHRyaW1fYmVmb3JlLCB0cmltX2FmdGVyKSB7XG5cdCAgICBpZiAoIWJsb2NrLmNoaWxkcmVuIHx8IGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICByZXR1cm47IC8vIEF3YWl0QmxvY2tcblx0ICAgIGNvbnN0IGZpcnN0X2NoaWxkID0gYmxvY2suY2hpbGRyZW5bMF07XG5cdCAgICBjb25zdCBsYXN0X2NoaWxkID0gYmxvY2suY2hpbGRyZW5bYmxvY2suY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG5cdCAgICBpZiAoZmlyc3RfY2hpbGQudHlwZSA9PT0gJ1RleHQnICYmIHRyaW1fYmVmb3JlKSB7XG5cdCAgICAgICAgZmlyc3RfY2hpbGQuZGF0YSA9IHRyaW1fc3RhcnQoZmlyc3RfY2hpbGQuZGF0YSk7XG5cdCAgICAgICAgaWYgKCFmaXJzdF9jaGlsZC5kYXRhKVxuXHQgICAgICAgICAgICBibG9jay5jaGlsZHJlbi5zaGlmdCgpO1xuXHQgICAgfVxuXHQgICAgaWYgKGxhc3RfY2hpbGQudHlwZSA9PT0gJ1RleHQnICYmIHRyaW1fYWZ0ZXIpIHtcblx0ICAgICAgICBsYXN0X2NoaWxkLmRhdGEgPSB0cmltX2VuZChsYXN0X2NoaWxkLmRhdGEpO1xuXHQgICAgICAgIGlmICghbGFzdF9jaGlsZC5kYXRhKVxuXHQgICAgICAgICAgICBibG9jay5jaGlsZHJlbi5wb3AoKTtcblx0ICAgIH1cblx0ICAgIGlmIChibG9jay5lbHNlKSB7XG5cdCAgICAgICAgdHJpbV93aGl0ZXNwYWNlKGJsb2NrLmVsc2UsIHRyaW1fYmVmb3JlLCB0cmltX2FmdGVyKTtcblx0ICAgIH1cblx0ICAgIGlmIChmaXJzdF9jaGlsZC5lbHNlaWYpIHtcblx0ICAgICAgICB0cmltX3doaXRlc3BhY2UoZmlyc3RfY2hpbGQsIHRyaW1fYmVmb3JlLCB0cmltX2FmdGVyKTtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBtdXN0YWNoZShwYXJzZXIpIHtcblx0ICAgIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuXHQgICAgcGFyc2VyLmluZGV4ICs9IDE7XG5cdCAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgLy8gey9pZn0sIHsvZWFjaH0gb3Igey9hd2FpdH1cblx0ICAgIGlmIChwYXJzZXIuZWF0KCcvJykpIHtcblx0ICAgICAgICBsZXQgYmxvY2sgPSBwYXJzZXIuY3VycmVudCgpO1xuXHQgICAgICAgIGxldCBleHBlY3RlZDtcblx0ICAgICAgICBpZiAoY2xvc2luZ190YWdfb21pdHRlZChibG9jay5uYW1lKSkge1xuXHQgICAgICAgICAgICBibG9jay5lbmQgPSBzdGFydDtcblx0ICAgICAgICAgICAgcGFyc2VyLnN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICBibG9jayA9IHBhcnNlci5jdXJyZW50KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChibG9jay50eXBlID09PSAnRWxzZUJsb2NrJyB8fCBibG9jay50eXBlID09PSAnUGVuZGluZ0Jsb2NrJyB8fCBibG9jay50eXBlID09PSAnVGhlbkJsb2NrJyB8fCBibG9jay50eXBlID09PSAnQ2F0Y2hCbG9jaycpIHtcblx0ICAgICAgICAgICAgYmxvY2suZW5kID0gc3RhcnQ7XG5cdCAgICAgICAgICAgIHBhcnNlci5zdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgYmxvY2sgPSBwYXJzZXIuY3VycmVudCgpO1xuXHQgICAgICAgICAgICBleHBlY3RlZCA9ICdhd2FpdCc7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChibG9jay50eXBlID09PSAnSWZCbG9jaycpIHtcblx0ICAgICAgICAgICAgZXhwZWN0ZWQgPSAnaWYnO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChibG9jay50eXBlID09PSAnRWFjaEJsb2NrJykge1xuXHQgICAgICAgICAgICBleHBlY3RlZCA9ICdlYWNoJztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoYmxvY2sudHlwZSA9PT0gJ0F3YWl0QmxvY2snKSB7XG5cdCAgICAgICAgICAgIGV4cGVjdGVkID0gJ2F3YWl0Jztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiBgdW5leHBlY3RlZC1ibG9jay1jbG9zZWAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCBibG9jayBjbG9zaW5nIHRhZ2Bcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBhcnNlci5lYXQoZXhwZWN0ZWQsIHRydWUpO1xuXHQgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgcGFyc2VyLmVhdCgnfScsIHRydWUpO1xuXHQgICAgICAgIHdoaWxlIChibG9jay5lbHNlaWYpIHtcblx0ICAgICAgICAgICAgYmxvY2suZW5kID0gcGFyc2VyLmluZGV4O1xuXHQgICAgICAgICAgICBwYXJzZXIuc3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgIGJsb2NrID0gcGFyc2VyLmN1cnJlbnQoKTtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrLmVsc2UpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmVsc2UuZW5kID0gc3RhcnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gc3RyaXAgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlIGFzIG5lY2Vzc2FyeVxuXHQgICAgICAgIGNvbnN0IGNoYXJfYmVmb3JlID0gcGFyc2VyLnRlbXBsYXRlW2Jsb2NrLnN0YXJ0IC0gMV07XG5cdCAgICAgICAgY29uc3QgY2hhcl9hZnRlciA9IHBhcnNlci50ZW1wbGF0ZVtwYXJzZXIuaW5kZXhdO1xuXHQgICAgICAgIGNvbnN0IHRyaW1fYmVmb3JlID0gIWNoYXJfYmVmb3JlIHx8IHdoaXRlc3BhY2UudGVzdChjaGFyX2JlZm9yZSk7XG5cdCAgICAgICAgY29uc3QgdHJpbV9hZnRlciA9ICFjaGFyX2FmdGVyIHx8IHdoaXRlc3BhY2UudGVzdChjaGFyX2FmdGVyKTtcblx0ICAgICAgICB0cmltX3doaXRlc3BhY2UoYmxvY2ssIHRyaW1fYmVmb3JlLCB0cmltX2FmdGVyKTtcblx0ICAgICAgICBibG9jay5lbmQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICAgICAgcGFyc2VyLnN0YWNrLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAocGFyc2VyLmVhdCgnOmVsc2UnKSkge1xuXHQgICAgICAgIGlmIChwYXJzZXIuZWF0KCdpZicpKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiAnaW52YWxpZC1lbHNlaWYnLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYCdlbHNlaWYnIHNob3VsZCBiZSAnZWxzZSBpZidgXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgIC8vIDplbHNlIGlmXG5cdCAgICAgICAgaWYgKHBhcnNlci5lYXQoJ2lmJykpIHtcblx0ICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBwYXJzZXIuY3VycmVudCgpO1xuXHQgICAgICAgICAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ0lmQmxvY2snKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWVsc2VpZi1wbGFjZW1lbnRgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHBhcnNlci5zdGFjay5zb21lKGJsb2NrID0+IGJsb2NrLnR5cGUgPT09ICdJZkJsb2NrJylcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPyBgRXhwZWN0ZWQgdG8gY2xvc2UgJHt0b19zdHJpbmcoYmxvY2spfSBiZWZvcmUgc2VlaW5nIHs6ZWxzZSBpZiAuLi59IGJsb2NrYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA6IGBDYW5ub3QgaGF2ZSBhbiB7OmVsc2UgaWYgLi4ufSBibG9jayBvdXRzaWRlIGFuIHsjaWYgLi4ufSBibG9ja2Bcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHBhcnNlci5yZXF1aXJlX3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHJlYWRfZXhwcmVzc2lvbihwYXJzZXIpO1xuXHQgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICBwYXJzZXIuZWF0KCd9JywgdHJ1ZSk7XG5cdCAgICAgICAgICAgIGJsb2NrLmVsc2UgPSB7XG5cdCAgICAgICAgICAgICAgICBzdGFydDogcGFyc2VyLmluZGV4LFxuXHQgICAgICAgICAgICAgICAgZW5kOiBudWxsLFxuXHQgICAgICAgICAgICAgICAgdHlwZTogJ0Vsc2VCbG9jaycsXG5cdCAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuXHQgICAgICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnSWZCbG9jaycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZjogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBwYXJzZXIuc3RhY2sucHVzaChibG9jay5lbHNlLmNoaWxkcmVuWzBdKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gOmVsc2Vcblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBwYXJzZXIuY3VycmVudCgpO1xuXHQgICAgICAgICAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ0lmQmxvY2snICYmIGJsb2NrLnR5cGUgIT09ICdFYWNoQmxvY2snKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWVsc2UtcGxhY2VtZW50YCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwYXJzZXIuc3RhY2suc29tZShibG9jayA9PiBibG9jay50eXBlID09PSAnSWZCbG9jaycgfHwgYmxvY2sudHlwZSA9PT0gJ0VhY2hCbG9jaycpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgID8gYEV4cGVjdGVkIHRvIGNsb3NlICR7dG9fc3RyaW5nKGJsb2NrKX0gYmVmb3JlIHNlZWluZyB7OmVsc2V9IGJsb2NrYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA6IGBDYW5ub3QgaGF2ZSBhbiB7OmVsc2V9IGJsb2NrIG91dHNpZGUgYW4geyNpZiAuLi59IG9yIHsjZWFjaCAuLi59IGJsb2NrYFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcGFyc2VyLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgcGFyc2VyLmVhdCgnfScsIHRydWUpO1xuXHQgICAgICAgICAgICBibG9jay5lbHNlID0ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdFbHNlQmxvY2snLFxuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBwYXJzZXIuc3RhY2sucHVzaChibG9jay5lbHNlKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChwYXJzZXIubWF0Y2goJzp0aGVuJykgfHwgcGFyc2VyLm1hdGNoKCc6Y2F0Y2gnKSkge1xuXHQgICAgICAgIGNvbnN0IGJsb2NrID0gcGFyc2VyLmN1cnJlbnQoKTtcblx0ICAgICAgICBjb25zdCBpc190aGVuID0gcGFyc2VyLmVhdCgnOnRoZW4nKSB8fCAhcGFyc2VyLmVhdCgnOmNhdGNoJyk7XG5cdCAgICAgICAgaWYgKGlzX3RoZW4pIHtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgIT09ICdQZW5kaW5nQmxvY2snKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXRoZW4tcGxhY2VtZW50YCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwYXJzZXIuc3RhY2suc29tZShibG9jayA9PiBibG9jay50eXBlID09PSAnUGVuZGluZ0Jsb2NrJylcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPyBgRXhwZWN0ZWQgdG8gY2xvc2UgJHt0b19zdHJpbmcoYmxvY2spfSBiZWZvcmUgc2VlaW5nIHs6dGhlbn0gYmxvY2tgXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDogYENhbm5vdCBoYXZlIGFuIHs6dGhlbn0gYmxvY2sgb3V0c2lkZSBhbiB7I2F3YWl0IC4uLn0gYmxvY2tgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgIT09ICdUaGVuQmxvY2snICYmIGJsb2NrLnR5cGUgIT09ICdQZW5kaW5nQmxvY2snKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWNhdGNoLXBsYWNlbWVudGAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcGFyc2VyLnN0YWNrLnNvbWUoYmxvY2sgPT4gYmxvY2sudHlwZSA9PT0gJ1RoZW5CbG9jaycgfHwgYmxvY2sudHlwZSA9PT0gJ1BlbmRpbmdCbG9jaycpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgID8gYEV4cGVjdGVkIHRvIGNsb3NlICR7dG9fc3RyaW5nKGJsb2NrKX0gYmVmb3JlIHNlZWluZyB7OmNhdGNofSBibG9ja2Bcblx0ICAgICAgICAgICAgICAgICAgICAgICAgOiBgQ2Fubm90IGhhdmUgYW4gezpjYXRjaH0gYmxvY2sgb3V0c2lkZSBhbiB7I2F3YWl0IC4uLn0gYmxvY2tgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBibG9jay5lbmQgPSBzdGFydDtcblx0ICAgICAgICBwYXJzZXIuc3RhY2sucG9wKCk7XG5cdCAgICAgICAgY29uc3QgYXdhaXRfYmxvY2sgPSBwYXJzZXIuY3VycmVudCgpO1xuXHQgICAgICAgIGlmICghcGFyc2VyLmVhdCgnfScpKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5yZXF1aXJlX3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgYXdhaXRfYmxvY2tbaXNfdGhlbiA/ICd2YWx1ZScgOiAnZXJyb3InXSA9IHJlYWRfY29udGV4dChwYXJzZXIpO1xuXHQgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICBwYXJzZXIuZWF0KCd9JywgdHJ1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IG5ld19ibG9jayA9IHtcblx0ICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICAgICAgdHlwZTogaXNfdGhlbiA/ICdUaGVuQmxvY2snIDogJ0NhdGNoQmxvY2snLFxuXHQgICAgICAgICAgICBjaGlsZHJlbjogW10sXG5cdCAgICAgICAgICAgIHNraXA6IGZhbHNlXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBhd2FpdF9ibG9ja1tpc190aGVuID8gJ3RoZW4nIDogJ2NhdGNoJ10gPSBuZXdfYmxvY2s7XG5cdCAgICAgICAgcGFyc2VyLnN0YWNrLnB1c2gobmV3X2Jsb2NrKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHBhcnNlci5lYXQoJyMnKSkge1xuXHQgICAgICAgIC8vIHsjaWYgZm9vfSwgeyNlYWNoIGZvb30gb3IgeyNhd2FpdCBmb299XG5cdCAgICAgICAgbGV0IHR5cGU7XG5cdCAgICAgICAgaWYgKHBhcnNlci5lYXQoJ2lmJykpIHtcblx0ICAgICAgICAgICAgdHlwZSA9ICdJZkJsb2NrJztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAocGFyc2VyLmVhdCgnZWFjaCcpKSB7XG5cdCAgICAgICAgICAgIHR5cGUgPSAnRWFjaEJsb2NrJztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAocGFyc2VyLmVhdCgnYXdhaXQnKSkge1xuXHQgICAgICAgICAgICB0eXBlID0gJ0F3YWl0QmxvY2snO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBleHBlY3RlZC1ibG9jay10eXBlYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCBpZiwgZWFjaCBvciBhd2FpdGBcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBhcnNlci5yZXF1aXJlX3doaXRlc3BhY2UoKTtcblx0ICAgICAgICBjb25zdCBleHByZXNzaW9uID0gcmVhZF9leHByZXNzaW9uKHBhcnNlcik7XG5cdCAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlID09PSAnQXdhaXRCbG9jaycgP1xuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICBzdGFydCxcblx0ICAgICAgICAgICAgICAgIGVuZDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHR5cGUsXG5cdCAgICAgICAgICAgICAgICBleHByZXNzaW9uLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG5cdCAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHBlbmRpbmc6IHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICBlbmQ6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BlbmRpbmdCbG9jaycsXG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuXHQgICAgICAgICAgICAgICAgICAgIHNraXA6IHRydWVcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICB0aGVuOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kOiBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUaGVuQmxvY2snLFxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcblx0ICAgICAgICAgICAgICAgICAgICBza2lwOiB0cnVlXG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgY2F0Y2g6IHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICBlbmQ6IG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NhdGNoQmxvY2snLFxuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcblx0ICAgICAgICAgICAgICAgICAgICBza2lwOiB0cnVlXG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB9IDpcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IG51bGwsXG5cdCAgICAgICAgICAgICAgICB0eXBlLFxuXHQgICAgICAgICAgICAgICAgZXhwcmVzc2lvbixcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgIC8vIHsjZWFjaH0gYmxvY2tzIG11c3QgZGVjbGFyZSBhIGNvbnRleHQg4oCTIHsjZWFjaCBsaXN0IGFzIGl0ZW19XG5cdCAgICAgICAgaWYgKHR5cGUgPT09ICdFYWNoQmxvY2snKSB7XG5cdCAgICAgICAgICAgIHBhcnNlci5lYXQoJ2FzJywgdHJ1ZSk7XG5cdCAgICAgICAgICAgIHBhcnNlci5yZXF1aXJlX3doaXRlc3BhY2UoKTtcblx0ICAgICAgICAgICAgYmxvY2suY29udGV4dCA9IHJlYWRfY29udGV4dChwYXJzZXIpO1xuXHQgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICBpZiAocGFyc2VyLmVhdCgnLCcpKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suaW5kZXggPSBwYXJzZXIucmVhZF9pZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWJsb2NrLmluZGV4KVxuXHQgICAgICAgICAgICAgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBleHBlY3RlZC1uYW1lYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkIG5hbWVgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChwYXJzZXIuZWF0KCcoJykpIHtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5rZXkgPSByZWFkX2V4cHJlc3Npb24ocGFyc2VyKTtcblx0ICAgICAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuZWF0KCcpJywgdHJ1ZSk7XG5cdCAgICAgICAgICAgICAgICBwYXJzZXIuYWxsb3dfd2hpdGVzcGFjZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGF3YWl0X2Jsb2NrX3Nob3J0aGFuZCA9IHR5cGUgPT09ICdBd2FpdEJsb2NrJyAmJiBwYXJzZXIuZWF0KCd0aGVuJyk7XG5cdCAgICAgICAgaWYgKGF3YWl0X2Jsb2NrX3Nob3J0aGFuZCkge1xuXHQgICAgICAgICAgICBwYXJzZXIucmVxdWlyZV93aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgIGJsb2NrLnZhbHVlID0gcmVhZF9jb250ZXh0KHBhcnNlcik7XG5cdCAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGF3YWl0X2Jsb2NrX2NhdGNoX3Nob3J0aGFuZCA9ICFhd2FpdF9ibG9ja19zaG9ydGhhbmQgJiYgdHlwZSA9PT0gJ0F3YWl0QmxvY2snICYmIHBhcnNlci5lYXQoJ2NhdGNoJyk7XG5cdCAgICAgICAgaWYgKGF3YWl0X2Jsb2NrX2NhdGNoX3Nob3J0aGFuZCkge1xuXHQgICAgICAgICAgICBwYXJzZXIucmVxdWlyZV93aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmVycm9yID0gcmVhZF9jb250ZXh0KHBhcnNlcik7XG5cdCAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHBhcnNlci5lYXQoJ30nLCB0cnVlKTtcblx0ICAgICAgICBwYXJzZXIuY3VycmVudCgpLmNoaWxkcmVuLnB1c2goYmxvY2spO1xuXHQgICAgICAgIHBhcnNlci5zdGFjay5wdXNoKGJsb2NrKTtcblx0ICAgICAgICBpZiAodHlwZSA9PT0gJ0F3YWl0QmxvY2snKSB7XG5cdCAgICAgICAgICAgIGxldCBjaGlsZF9ibG9jaztcblx0ICAgICAgICAgICAgaWYgKGF3YWl0X2Jsb2NrX3Nob3J0aGFuZCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2sudGhlbi5za2lwID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICBjaGlsZF9ibG9jayA9IGJsb2NrLnRoZW47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoYXdhaXRfYmxvY2tfY2F0Y2hfc2hvcnRoYW5kKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jYXRjaC5za2lwID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICBjaGlsZF9ibG9jayA9IGJsb2NrLmNhdGNoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2sucGVuZGluZy5za2lwID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICBjaGlsZF9ibG9jayA9IGJsb2NrLnBlbmRpbmc7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2hpbGRfYmxvY2suc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIHBhcnNlci5zdGFjay5wdXNoKGNoaWxkX2Jsb2NrKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChwYXJzZXIuZWF0KCdAaHRtbCcpKSB7XG5cdCAgICAgICAgLy8ge0BodG1sIGNvbnRlbnR9IHRhZ1xuXHQgICAgICAgIHBhcnNlci5yZXF1aXJlX3doaXRlc3BhY2UoKTtcblx0ICAgICAgICBjb25zdCBleHByZXNzaW9uID0gcmVhZF9leHByZXNzaW9uKHBhcnNlcik7XG5cdCAgICAgICAgcGFyc2VyLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgICAgICBwYXJzZXIuZWF0KCd9JywgdHJ1ZSk7XG5cdCAgICAgICAgcGFyc2VyLmN1cnJlbnQoKS5jaGlsZHJlbi5wdXNoKHtcblx0ICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogcGFyc2VyLmluZGV4LFxuXHQgICAgICAgICAgICB0eXBlOiAnUmF3TXVzdGFjaGVUYWcnLFxuXHQgICAgICAgICAgICBleHByZXNzaW9uLFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAocGFyc2VyLmVhdCgnQGRlYnVnJykpIHtcblx0ICAgICAgICBsZXQgaWRlbnRpZmllcnM7XG5cdCAgICAgICAgLy8gSW1wbGllcyB7QGRlYnVnfSB3aGljaCBpbmRpY2F0ZXMgXCJkZWJ1ZyBhbGxcIlxuXHQgICAgICAgIGlmIChwYXJzZXIucmVhZCgvXFxzKn0vKSkge1xuXHQgICAgICAgICAgICBpZGVudGlmaWVycyA9IFtdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHJlYWRfZXhwcmVzc2lvbihwYXJzZXIpO1xuXHQgICAgICAgICAgICBpZGVudGlmaWVycyA9IGV4cHJlc3Npb24udHlwZSA9PT0gJ1NlcXVlbmNlRXhwcmVzc2lvbidcblx0ICAgICAgICAgICAgICAgID8gZXhwcmVzc2lvbi5leHByZXNzaW9uc1xuXHQgICAgICAgICAgICAgICAgOiBbZXhwcmVzc2lvbl07XG5cdCAgICAgICAgICAgIGlkZW50aWZpZXJzLmZvckVhY2gobm9kZSA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlICE9PSAnSWRlbnRpZmllcicpIHtcblx0ICAgICAgICAgICAgICAgICAgICBwYXJzZXIuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAnaW52YWxpZC1kZWJ1Zy1hcmdzJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3tAZGVidWcgLi4ufSBhcmd1bWVudHMgbXVzdCBiZSBpZGVudGlmaWVycywgbm90IGFyYml0cmFyeSBleHByZXNzaW9ucydcblx0ICAgICAgICAgICAgICAgICAgICB9LCBub2RlLnN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgICAgIHBhcnNlci5lYXQoJ30nLCB0cnVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcGFyc2VyLmN1cnJlbnQoKS5jaGlsZHJlbi5wdXNoKHtcblx0ICAgICAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogcGFyc2VyLmluZGV4LFxuXHQgICAgICAgICAgICB0eXBlOiAnRGVidWdUYWcnLFxuXHQgICAgICAgICAgICBpZGVudGlmaWVyc1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHJlYWRfZXhwcmVzc2lvbihwYXJzZXIpO1xuXHQgICAgICAgIHBhcnNlci5hbGxvd193aGl0ZXNwYWNlKCk7XG5cdCAgICAgICAgcGFyc2VyLmVhdCgnfScsIHRydWUpO1xuXHQgICAgICAgIHBhcnNlci5jdXJyZW50KCkuY2hpbGRyZW4ucHVzaCh7XG5cdCAgICAgICAgICAgIHN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHBhcnNlci5pbmRleCxcblx0ICAgICAgICAgICAgdHlwZTogJ011c3RhY2hlVGFnJyxcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbixcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHQocGFyc2VyKSB7XG5cdCAgICBjb25zdCBzdGFydCA9IHBhcnNlci5pbmRleDtcblx0ICAgIGxldCBkYXRhID0gJyc7XG5cdCAgICB3aGlsZSAocGFyc2VyLmluZGV4IDwgcGFyc2VyLnRlbXBsYXRlLmxlbmd0aCAmJlxuXHQgICAgICAgICFwYXJzZXIubWF0Y2goJzwnKSAmJlxuXHQgICAgICAgICFwYXJzZXIubWF0Y2goJ3snKSkge1xuXHQgICAgICAgIGRhdGEgKz0gcGFyc2VyLnRlbXBsYXRlW3BhcnNlci5pbmRleCsrXTtcblx0ICAgIH1cblx0ICAgIGNvbnN0IG5vZGUgPSB7XG5cdCAgICAgICAgc3RhcnQsXG5cdCAgICAgICAgZW5kOiBwYXJzZXIuaW5kZXgsXG5cdCAgICAgICAgdHlwZTogJ1RleHQnLFxuXHQgICAgICAgIHJhdzogZGF0YSxcblx0ICAgICAgICBkYXRhOiBkZWNvZGVfY2hhcmFjdGVyX3JlZmVyZW5jZXMoZGF0YSksXG5cdCAgICB9O1xuXHQgICAgcGFyc2VyLmN1cnJlbnQoKS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZnJhZ21lbnQocGFyc2VyKSB7XG5cdCAgICBpZiAocGFyc2VyLm1hdGNoKCc8JykpIHtcblx0ICAgICAgICByZXR1cm4gdGFnO1xuXHQgICAgfVxuXHQgICAgaWYgKHBhcnNlci5tYXRjaCgneycpKSB7XG5cdCAgICAgICAgcmV0dXJuIG11c3RhY2hlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRleHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRMb2NhdG9yKHNvdXJjZSwgb3B0aW9ucykge1xuXHQgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cblx0ICAgIHZhciBvZmZzZXRMaW5lID0gb3B0aW9ucy5vZmZzZXRMaW5lIHx8IDA7XG5cdCAgICB2YXIgb2Zmc2V0Q29sdW1uID0gb3B0aW9ucy5vZmZzZXRDb2x1bW4gfHwgMDtcblx0ICAgIHZhciBvcmlnaW5hbExpbmVzID0gc291cmNlLnNwbGl0KCdcXG4nKTtcblx0ICAgIHZhciBzdGFydCA9IDA7XG5cdCAgICB2YXIgbGluZVJhbmdlcyA9IG9yaWdpbmFsTGluZXMubWFwKGZ1bmN0aW9uIChsaW5lLCBpKSB7XG5cdCAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgbGluZS5sZW5ndGggKyAxO1xuXHQgICAgICAgIHZhciByYW5nZSA9IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgbGluZTogaSB9O1xuXHQgICAgICAgIHN0YXJ0ID0gZW5kO1xuXHQgICAgICAgIHJldHVybiByYW5nZTtcblx0ICAgIH0pO1xuXHQgICAgdmFyIGkgPSAwO1xuXHQgICAgZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgaW5kZXgpIHtcblx0ICAgICAgICByZXR1cm4gcmFuZ2Uuc3RhcnQgPD0gaW5kZXggJiYgaW5kZXggPCByYW5nZS5lbmQ7XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBnZXRMb2NhdGlvbihyYW5nZSwgaW5kZXgpIHtcblx0ICAgICAgICByZXR1cm4geyBsaW5lOiBvZmZzZXRMaW5lICsgcmFuZ2UubGluZSwgY29sdW1uOiBvZmZzZXRDb2x1bW4gKyBpbmRleCAtIHJhbmdlLnN0YXJ0LCBjaGFyYWN0ZXI6IGluZGV4IH07XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBsb2NhdGUoc2VhcmNoLCBzdGFydEluZGV4KSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBzZWFyY2ggPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIHNlYXJjaCA9IHNvdXJjZS5pbmRleE9mKHNlYXJjaCwgc3RhcnRJbmRleCB8fCAwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHJhbmdlID0gbGluZVJhbmdlc1tpXTtcblx0ICAgICAgICB2YXIgZCA9IHNlYXJjaCA+PSByYW5nZS5lbmQgPyAxIDogLTE7XG5cdCAgICAgICAgd2hpbGUgKHJhbmdlKSB7XG5cdCAgICAgICAgICAgIGlmIChyYW5nZUNvbnRhaW5zKHJhbmdlLCBzZWFyY2gpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHJhbmdlLCBzZWFyY2gpO1xuXHQgICAgICAgICAgICBpICs9IGQ7XG5cdCAgICAgICAgICAgIHJhbmdlID0gbGluZVJhbmdlc1tpXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbG9jYXRlO1xuXHR9XG5cdGZ1bmN0aW9uIGxvY2F0ZShzb3VyY2UsIHNlYXJjaCwgb3B0aW9ucykge1xuXHQgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignbG9jYXRlIHRha2VzIGEgeyBzdGFydEluZGV4LCBvZmZzZXRMaW5lLCBvZmZzZXRDb2x1bW4gfSBvYmplY3QgYXMgdGhlIHRoaXJkIGFyZ3VtZW50Jyk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZ2V0TG9jYXRvcihzb3VyY2UsIG9wdGlvbnMpKHNlYXJjaCwgb3B0aW9ucyAmJiBvcHRpb25zLnN0YXJ0SW5kZXgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdGFic190b19zcGFjZXMoc3RyKSB7XG5cdCAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHQrLywgbWF0Y2ggPT4gbWF0Y2guc3BsaXQoJ1xcdCcpLmpvaW4oJyAgJykpO1xuXHR9XG5cdGZ1bmN0aW9uIGdldF9jb2RlX2ZyYW1lKHNvdXJjZSwgbGluZSwgY29sdW1uKSB7XG5cdCAgICBjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgnXFxuJyk7XG5cdCAgICBjb25zdCBmcmFtZV9zdGFydCA9IE1hdGgubWF4KDAsIGxpbmUgLSAyKTtcblx0ICAgIGNvbnN0IGZyYW1lX2VuZCA9IE1hdGgubWluKGxpbmUgKyAzLCBsaW5lcy5sZW5ndGgpO1xuXHQgICAgY29uc3QgZGlnaXRzID0gU3RyaW5nKGZyYW1lX2VuZCArIDEpLmxlbmd0aDtcblx0ICAgIHJldHVybiBsaW5lc1xuXHQgICAgICAgIC5zbGljZShmcmFtZV9zdGFydCwgZnJhbWVfZW5kKVxuXHQgICAgICAgIC5tYXAoKHN0ciwgaSkgPT4ge1xuXHQgICAgICAgIGNvbnN0IGlzRXJyb3JMaW5lID0gZnJhbWVfc3RhcnQgKyBpID09PSBsaW5lO1xuXHQgICAgICAgIGNvbnN0IGxpbmVfbnVtID0gU3RyaW5nKGkgKyBmcmFtZV9zdGFydCArIDEpLnBhZFN0YXJ0KGRpZ2l0cywgJyAnKTtcblx0ICAgICAgICBpZiAoaXNFcnJvckxpbmUpIHtcblx0ICAgICAgICAgICAgY29uc3QgaW5kaWNhdG9yID0gJyAnLnJlcGVhdChkaWdpdHMgKyAyICsgdGFic190b19zcGFjZXMoc3RyLnNsaWNlKDAsIGNvbHVtbikpLmxlbmd0aCkgKyAnXic7XG5cdCAgICAgICAgICAgIHJldHVybiBgJHtsaW5lX251bX06ICR7dGFic190b19zcGFjZXMoc3RyKX1cXG4ke2luZGljYXRvcn1gO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gYCR7bGluZV9udW19OiAke3RhYnNfdG9fc3BhY2VzKHN0cil9YDtcblx0ICAgIH0pXG5cdCAgICAgICAgLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0Y2xhc3MgQ29tcGlsZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHQgICAgdG9TdHJpbmcoKSB7XG5cdCAgICAgICAgcmV0dXJuIGAke3RoaXMubWVzc2FnZX0gKCR7dGhpcy5zdGFydC5saW5lfToke3RoaXMuc3RhcnQuY29sdW1ufSlcXG4ke3RoaXMuZnJhbWV9YDtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBlcnJvciQxKG1lc3NhZ2UsIHByb3BzKSB7XG5cdCAgICBjb25zdCBlcnJvciA9IG5ldyBDb21waWxlRXJyb3IobWVzc2FnZSk7XG5cdCAgICBlcnJvci5uYW1lID0gcHJvcHMubmFtZTtcblx0ICAgIGNvbnN0IHN0YXJ0ID0gbG9jYXRlKHByb3BzLnNvdXJjZSwgcHJvcHMuc3RhcnQsIHsgb2Zmc2V0TGluZTogMSB9KTtcblx0ICAgIGNvbnN0IGVuZCA9IGxvY2F0ZShwcm9wcy5zb3VyY2UsIHByb3BzLmVuZCB8fCBwcm9wcy5zdGFydCwgeyBvZmZzZXRMaW5lOiAxIH0pO1xuXHQgICAgZXJyb3IuY29kZSA9IHByb3BzLmNvZGU7XG5cdCAgICBlcnJvci5zdGFydCA9IHN0YXJ0O1xuXHQgICAgZXJyb3IuZW5kID0gZW5kO1xuXHQgICAgZXJyb3IucG9zID0gcHJvcHMuc3RhcnQ7XG5cdCAgICBlcnJvci5maWxlbmFtZSA9IHByb3BzLmZpbGVuYW1lO1xuXHQgICAgZXJyb3IuZnJhbWUgPSBnZXRfY29kZV9mcmFtZShwcm9wcy5zb3VyY2UsIHN0YXJ0LmxpbmUgLSAxLCBzdGFydC5jb2x1bW4pO1xuXHQgICAgdGhyb3cgZXJyb3I7XG5cdH1cblxuXHRjbGFzcyBQYXJzZXIkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZSwgb3B0aW9ucykge1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcblx0ICAgICAgICB0aGlzLmNzcyA9IFtdO1xuXHQgICAgICAgIHRoaXMuanMgPSBbXTtcblx0ICAgICAgICB0aGlzLm1ldGFfdGFncyA9IHt9O1xuXHQgICAgICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RlbXBsYXRlIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL1xccyskLywgJycpO1xuXHQgICAgICAgIHRoaXMuZmlsZW5hbWUgPSBvcHRpb25zLmZpbGVuYW1lO1xuXHQgICAgICAgIHRoaXMuY3VzdG9tRWxlbWVudCA9IG9wdGlvbnMuY3VzdG9tRWxlbWVudDtcblx0ICAgICAgICB0aGlzLmh0bWwgPSB7XG5cdCAgICAgICAgICAgIHN0YXJ0OiBudWxsLFxuXHQgICAgICAgICAgICBlbmQ6IG51bGwsXG5cdCAgICAgICAgICAgIHR5cGU6ICdGcmFnbWVudCcsXG5cdCAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmh0bWwpO1xuXHQgICAgICAgIGxldCBzdGF0ZSA9IGZyYWdtZW50O1xuXHQgICAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZW1wbGF0ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZSh0aGlzKSB8fCBmcmFnbWVudDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoID4gMSkge1xuXHQgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50KCk7XG5cdCAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBjdXJyZW50LnR5cGUgPT09ICdFbGVtZW50JyA/IGA8JHtjdXJyZW50Lm5hbWV9PmAgOiAnQmxvY2snO1xuXHQgICAgICAgICAgICBjb25zdCBzbHVnID0gY3VycmVudC50eXBlID09PSAnRWxlbWVudCcgPyAnZWxlbWVudCcgOiAnYmxvY2snO1xuXHQgICAgICAgICAgICB0aGlzLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGB1bmNsb3NlZC0ke3NsdWd9YCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke3R5cGV9IHdhcyBsZWZ0IG9wZW5gXG5cdCAgICAgICAgICAgIH0sIGN1cnJlbnQuc3RhcnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc3RhdGUgIT09IGZyYWdtZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgY29kZTogYHVuZXhwZWN0ZWQtZW9mYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCdcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmh0bWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMuaHRtbC5jaGlsZHJlblswXS5zdGFydDtcblx0ICAgICAgICAgICAgd2hpbGUgKHdoaXRlc3BhY2UudGVzdCh0ZW1wbGF0ZVtzdGFydF0pKVxuXHQgICAgICAgICAgICAgICAgc3RhcnQgKz0gMTtcblx0ICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMuaHRtbC5jaGlsZHJlblt0aGlzLmh0bWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0uZW5kO1xuXHQgICAgICAgICAgICB3aGlsZSAod2hpdGVzcGFjZS50ZXN0KHRlbXBsYXRlW2VuZCAtIDFdKSlcblx0ICAgICAgICAgICAgICAgIGVuZCAtPSAxO1xuXHQgICAgICAgICAgICB0aGlzLmh0bWwuc3RhcnQgPSBzdGFydDtcblx0ICAgICAgICAgICAgdGhpcy5odG1sLmVuZCA9IGVuZDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuaHRtbC5zdGFydCA9IHRoaXMuaHRtbC5lbmQgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGN1cnJlbnQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcblx0ICAgIH1cblx0ICAgIGFjb3JuX2Vycm9yKGVycikge1xuXHQgICAgICAgIHRoaXMuZXJyb3Ioe1xuXHQgICAgICAgICAgICBjb2RlOiBgcGFyc2UtZXJyb3JgLFxuXHQgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZS5yZXBsYWNlKC8gXFwoXFxkKzpcXGQrXFwpJC8sICcnKVxuXHQgICAgICAgIH0sIGVyci5wb3MpO1xuXHQgICAgfVxuXHQgICAgZXJyb3IoeyBjb2RlLCBtZXNzYWdlIH0sIGluZGV4ID0gdGhpcy5pbmRleCkge1xuXHQgICAgICAgIGVycm9yJDEobWVzc2FnZSwge1xuXHQgICAgICAgICAgICBuYW1lOiAnUGFyc2VFcnJvcicsXG5cdCAgICAgICAgICAgIGNvZGUsXG5cdCAgICAgICAgICAgIHNvdXJjZTogdGhpcy50ZW1wbGF0ZSxcblx0ICAgICAgICAgICAgc3RhcnQ6IGluZGV4LFxuXHQgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWF0KHN0ciwgcmVxdWlyZWQsIG1lc3NhZ2UpIHtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaChzdHIpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gc3RyLmxlbmd0aDtcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChyZXF1aXJlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGB1bmV4cGVjdGVkLSR7dGhpcy5pbmRleCA9PT0gdGhpcy50ZW1wbGF0ZS5sZW5ndGggPyAnZW9mJyA6ICd0b2tlbid9YCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYEV4cGVjdGVkICR7c3RyfWBcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIG1hdGNoKHN0cikge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlLnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBzdHIubGVuZ3RoKSA9PT0gc3RyO1xuXHQgICAgfVxuXHQgICAgbWF0Y2hfcmVnZXgocGF0dGVybikge1xuXHQgICAgICAgIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKHRoaXMudGVtcGxhdGUuc2xpY2UodGhpcy5pbmRleCkpO1xuXHQgICAgICAgIGlmICghbWF0Y2ggfHwgbWF0Y2guaW5kZXggIT09IDApXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIHJldHVybiBtYXRjaFswXTtcblx0ICAgIH1cblx0ICAgIGFsbG93X3doaXRlc3BhY2UoKSB7XG5cdCAgICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRlbXBsYXRlLmxlbmd0aCAmJlxuXHQgICAgICAgICAgICB3aGl0ZXNwYWNlLnRlc3QodGhpcy50ZW1wbGF0ZVt0aGlzLmluZGV4XSkpIHtcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlYWQocGF0dGVybikge1xuXHQgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubWF0Y2hfcmVnZXgocGF0dGVybik7XG5cdCAgICAgICAgaWYgKHJlc3VsdClcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCArPSByZXN1bHQubGVuZ3RoO1xuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9XG5cdCAgICByZWFkX2lkZW50aWZpZXIoYWxsb3dfcmVzZXJ2ZWQgPSBmYWxzZSkge1xuXHQgICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICBsZXQgaSA9IHRoaXMuaW5kZXg7XG5cdCAgICAgICAgY29uc3QgY29kZSA9IGZ1bGxfY2hhcl9jb2RlX2F0KHRoaXMudGVtcGxhdGUsIGkpO1xuXHQgICAgICAgIGlmICghaXNJZGVudGlmaWVyU3RhcnQoY29kZSwgdHJ1ZSkpXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgICAgICB3aGlsZSAoaSA8IHRoaXMudGVtcGxhdGUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBmdWxsX2NoYXJfY29kZV9hdCh0aGlzLnRlbXBsYXRlLCBpKTtcblx0ICAgICAgICAgICAgaWYgKCFpc0lkZW50aWZpZXJDaGFyKGNvZGUsIHRydWUpKVxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGkgKz0gY29kZSA8PSAweGZmZmYgPyAxIDogMjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IHRoaXMudGVtcGxhdGUuc2xpY2UodGhpcy5pbmRleCwgdGhpcy5pbmRleCA9IGkpO1xuXHQgICAgICAgIGlmICghYWxsb3dfcmVzZXJ2ZWQgJiYgcmVzZXJ2ZWQuaGFzKGlkZW50aWZpZXIpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgY29kZTogYHVuZXhwZWN0ZWQtcmVzZXJ2ZWQtd29yZGAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJyR7aWRlbnRpZmllcn0nIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKYXZhU2NyaXB0IGFuZCBjYW5ub3QgYmUgdXNlZCBoZXJlYFxuXHQgICAgICAgICAgICB9LCBzdGFydCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpZGVudGlmaWVyO1xuXHQgICAgfVxuXHQgICAgcmVhZF91bnRpbChwYXR0ZXJuKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy50ZW1wbGF0ZS5sZW5ndGgpXG5cdCAgICAgICAgICAgIHRoaXMuZXJyb3Ioe1xuXHQgICAgICAgICAgICAgICAgY29kZTogYHVuZXhwZWN0ZWQtZW9mYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCdcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKHRoaXMudGVtcGxhdGUuc2xpY2Uoc3RhcnQpKTtcblx0ICAgICAgICBpZiAobWF0Y2gpIHtcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0ICsgbWF0Y2guaW5kZXg7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlLnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMudGVtcGxhdGUubGVuZ3RoO1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlLnNsaWNlKHN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIHJlcXVpcmVfd2hpdGVzcGFjZSgpIHtcblx0ICAgICAgICBpZiAoIXdoaXRlc3BhY2UudGVzdCh0aGlzLnRlbXBsYXRlW3RoaXMuaW5kZXhdKSkge1xuXHQgICAgICAgICAgICB0aGlzLmVycm9yKHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBtaXNzaW5nLXdoaXRlc3BhY2VgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkIHdoaXRlc3BhY2VgXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmFsbG93X3doaXRlc3BhY2UoKTtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBwYXJzZSQzKHRlbXBsYXRlLCBvcHRpb25zID0ge30pIHtcblx0ICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIkMSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cdCAgICAvLyBUT0RPIHdlIG1heSB3YW50IHRvIGFsbG93IG11bHRpcGxlIDxzdHlsZT4gdGFncyDigJRcblx0ICAgIC8vIG9uZSBzY29wZWQsIG9uZSBnbG9iYWwuIGZvciBub3csIG9ubHkgYWxsb3cgb25lXG5cdCAgICBpZiAocGFyc2VyLmNzcy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgY29kZTogJ2R1cGxpY2F0ZS1zdHlsZScsXG5cdCAgICAgICAgICAgIG1lc3NhZ2U6ICdZb3UgY2FuIG9ubHkgaGF2ZSBvbmUgdG9wLWxldmVsIDxzdHlsZT4gdGFnIHBlciBjb21wb25lbnQnXG5cdCAgICAgICAgfSwgcGFyc2VyLmNzc1sxXS5zdGFydCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBpbnN0YW5jZV9zY3JpcHRzID0gcGFyc2VyLmpzLmZpbHRlcihzY3JpcHQgPT4gc2NyaXB0LmNvbnRleHQgPT09ICdkZWZhdWx0Jyk7XG5cdCAgICBjb25zdCBtb2R1bGVfc2NyaXB0cyA9IHBhcnNlci5qcy5maWx0ZXIoc2NyaXB0ID0+IHNjcmlwdC5jb250ZXh0ID09PSAnbW9kdWxlJyk7XG5cdCAgICBpZiAoaW5zdGFuY2Vfc2NyaXB0cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgcGFyc2VyLmVycm9yKHtcblx0ICAgICAgICAgICAgY29kZTogYGludmFsaWQtc2NyaXB0YCxcblx0ICAgICAgICAgICAgbWVzc2FnZTogYEEgY29tcG9uZW50IGNhbiBvbmx5IGhhdmUgb25lIGluc3RhbmNlLWxldmVsIDxzY3JpcHQ+IGVsZW1lbnRgXG5cdCAgICAgICAgfSwgaW5zdGFuY2Vfc2NyaXB0c1sxXS5zdGFydCk7XG5cdCAgICB9XG5cdCAgICBpZiAobW9kdWxlX3NjcmlwdHMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgIHBhcnNlci5lcnJvcih7XG5cdCAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXNjcmlwdGAsXG5cdCAgICAgICAgICAgIG1lc3NhZ2U6IGBBIGNvbXBvbmVudCBjYW4gb25seSBoYXZlIG9uZSA8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj4gZWxlbWVudGBcblx0ICAgICAgICB9LCBtb2R1bGVfc2NyaXB0c1sxXS5zdGFydCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIGh0bWw6IHBhcnNlci5odG1sLFxuXHQgICAgICAgIGNzczogcGFyc2VyLmNzc1swXSxcblx0ICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2Vfc2NyaXB0c1swXSxcblx0ICAgICAgICBtb2R1bGU6IG1vZHVsZV9zY3JpcHRzWzBdXG5cdCAgICB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNfaGVhZChub2RlKSB7XG5cdCAgICByZXR1cm4gbm9kZSAmJiBub2RlLnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJyAmJiBub2RlLm9iamVjdC5uYW1lID09PSAnQF9kb2N1bWVudCcgJiYgbm9kZS5wcm9wZXJ0eS5uYW1lID09PSAnaGVhZCc7XG5cdH1cblxuXHRjbGFzcyBCbG9jayQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0ICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICB0aGlzLmV2ZW50X2xpc3RlbmVycyA9IFtdO1xuXHQgICAgICAgIHRoaXMudmFyaWFibGVzID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIHRoaXMuaGFzX3VwZGF0ZV9tZXRob2QgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXHQgICAgICAgIHRoaXMucmVuZGVyZXIgPSBvcHRpb25zLnJlbmRlcmVyO1xuXHQgICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG5cdCAgICAgICAgdGhpcy5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuXHQgICAgICAgIHRoaXMud3JhcHBlcnMgPSBbXTtcblx0ICAgICAgICAvLyBmb3Iga2V5ZWQgZWFjaCBibG9ja3Ncblx0ICAgICAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuXHQgICAgICAgIHRoaXMuZmlyc3QgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuYmluZGluZ3MgPSBvcHRpb25zLmJpbmRpbmdzO1xuXHQgICAgICAgIHRoaXMuY2h1bmtzID0ge1xuXHQgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtdLFxuXHQgICAgICAgICAgICBpbml0OiBbXSxcblx0ICAgICAgICAgICAgY3JlYXRlOiBbXSxcblx0ICAgICAgICAgICAgY2xhaW06IFtdLFxuXHQgICAgICAgICAgICBoeWRyYXRlOiBbXSxcblx0ICAgICAgICAgICAgbW91bnQ6IFtdLFxuXHQgICAgICAgICAgICBtZWFzdXJlOiBbXSxcblx0ICAgICAgICAgICAgZml4OiBbXSxcblx0ICAgICAgICAgICAgYW5pbWF0ZTogW10sXG5cdCAgICAgICAgICAgIGludHJvOiBbXSxcblx0ICAgICAgICAgICAgdXBkYXRlOiBbXSxcblx0ICAgICAgICAgICAgb3V0cm86IFtdLFxuXHQgICAgICAgICAgICBkZXN0cm95OiBbXSxcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMuaGFzX2FuaW1hdGlvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaGFzX2ludHJvX21ldGhvZCA9IGZhbHNlOyAvLyBhIGJsb2NrIGNvdWxkIGhhdmUgYW4gaW50cm8gbWV0aG9kIGJ1dCBub3QgaW50cm8gdHJhbnNpdGlvbnMsIGUuZy4gaWYgYSBzaWJsaW5nIGJsb2NrIGhhcyBpbnRyb3Ncblx0ICAgICAgICB0aGlzLmhhc19vdXRyb19tZXRob2QgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLm91dHJvcyA9IDA7XG5cdCAgICAgICAgdGhpcy5nZXRfdW5pcXVlX25hbWUgPSB0aGlzLnJlbmRlcmVyLmNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWVfbWFrZXIoKTtcblx0ICAgICAgICB0aGlzLmFsaWFzZXMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgaWYgKHRoaXMua2V5KVxuXHQgICAgICAgICAgICB0aGlzLmFsaWFzZXMuc2V0KCdrZXknLCB0aGlzLmdldF91bmlxdWVfbmFtZSgna2V5JykpO1xuXHQgICAgfVxuXHQgICAgYXNzaWduX3ZhcmlhYmxlX25hbWVzKCkge1xuXHQgICAgICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgY29uc3QgZHVwZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgbGV0IGkgPSB0aGlzLndyYXBwZXJzLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0aGlzLndyYXBwZXJzW2ldO1xuXHQgICAgICAgICAgICBpZiAoIXdyYXBwZXIudmFyKVxuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIGlmIChzZWVuLmhhcyh3cmFwcGVyLnZhci5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgZHVwZXMuYWRkKHdyYXBwZXIudmFyLm5hbWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHNlZW4uYWRkKHdyYXBwZXIudmFyLm5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBjb3VudHMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgaSA9IHRoaXMud3JhcHBlcnMubGVuZ3RoO1xuXHQgICAgICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMud3JhcHBlcnNbaV07XG5cdCAgICAgICAgICAgIGlmICghd3JhcHBlci52YXIpXG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgbGV0IHN1ZmZpeCA9ICcnO1xuXHQgICAgICAgICAgICBpZiAoZHVwZXMuaGFzKHdyYXBwZXIudmFyLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBpID0gY291bnRzLmdldCh3cmFwcGVyLnZhci5uYW1lKSB8fCAwO1xuXHQgICAgICAgICAgICAgICAgY291bnRzLnNldCh3cmFwcGVyLnZhci5uYW1lLCBpICsgMSk7XG5cdCAgICAgICAgICAgICAgICBzdWZmaXggPSBpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHdyYXBwZXIudmFyLm5hbWUgPSB0aGlzLmdldF91bmlxdWVfbmFtZSh3cmFwcGVyLnZhci5uYW1lICsgc3VmZml4KS5uYW1lO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGFkZF9kZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgZGVwZW5kZW5jaWVzLmZvckVhY2goZGVwZW5kZW5jeSA9PiB7XG5cdCAgICAgICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLmFkZChkZXBlbmRlbmN5KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmhhc191cGRhdGVfbWV0aG9kID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5wYXJlbnQuYWRkX2RlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGFkZF9lbGVtZW50KGlkLCByZW5kZXJfc3RhdGVtZW50LCBjbGFpbV9zdGF0ZW1lbnQsIHBhcmVudF9ub2RlLCBub19kZXRhY2gpIHtcblx0ICAgICAgICB0aGlzLmFkZF92YXJpYWJsZShpZCk7XG5cdCAgICAgICAgdGhpcy5jaHVua3MuY3JlYXRlLnB1c2goYiBgJHtpZH0gPSAke3JlbmRlcl9zdGF0ZW1lbnR9O2ApO1xuXHQgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSkge1xuXHQgICAgICAgICAgICB0aGlzLmNodW5rcy5jbGFpbS5wdXNoKGIgYCR7aWR9ID0gJHtjbGFpbV9zdGF0ZW1lbnQgfHwgcmVuZGVyX3N0YXRlbWVudH07YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChwYXJlbnRfbm9kZSkge1xuXHQgICAgICAgICAgICB0aGlzLmNodW5rcy5tb3VudC5wdXNoKGIgYEBhcHBlbmQoJHtwYXJlbnRfbm9kZX0sICR7aWR9KTtgKTtcblx0ICAgICAgICAgICAgaWYgKGlzX2hlYWQocGFyZW50X25vZGUpICYmICFub19kZXRhY2gpXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNodW5rcy5kZXN0cm95LnB1c2goYiBgQGRldGFjaCgke2lkfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNodW5rcy5tb3VudC5wdXNoKGIgYEBpbnNlcnQoI3RhcmdldCwgJHtpZH0sICNhbmNob3IpO2ApO1xuXHQgICAgICAgICAgICBpZiAoIW5vX2RldGFjaClcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBpZiAoZGV0YWNoaW5nKSBAZGV0YWNoKCR7aWR9KTtgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBhZGRfaW50cm8obG9jYWwpIHtcblx0ICAgICAgICB0aGlzLmhhc19pbnRyb3MgPSB0aGlzLmhhc19pbnRyb19tZXRob2QgPSB0cnVlO1xuXHQgICAgICAgIGlmICghbG9jYWwgJiYgdGhpcy5wYXJlbnQpXG5cdCAgICAgICAgICAgIHRoaXMucGFyZW50LmFkZF9pbnRybygpO1xuXHQgICAgfVxuXHQgICAgYWRkX291dHJvKGxvY2FsKSB7XG5cdCAgICAgICAgdGhpcy5oYXNfb3V0cm9zID0gdGhpcy5oYXNfb3V0cm9fbWV0aG9kID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLm91dHJvcyArPSAxO1xuXHQgICAgICAgIGlmICghbG9jYWwgJiYgdGhpcy5wYXJlbnQpXG5cdCAgICAgICAgICAgIHRoaXMucGFyZW50LmFkZF9vdXRybygpO1xuXHQgICAgfVxuXHQgICAgYWRkX2FuaW1hdGlvbigpIHtcblx0ICAgICAgICB0aGlzLmhhc19hbmltYXRpb24gPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgYWRkX3ZhcmlhYmxlKGlkLCBpbml0KSB7XG5cdCAgICAgICAgaWYgKHRoaXMudmFyaWFibGVzLmhhcyhpZC5uYW1lKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhcmlhYmxlICcke2lkLm5hbWV9JyBhbHJlYWR5IGluaXRpYWxpc2VkIHdpdGggYSBkaWZmZXJlbnQgdmFsdWVgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy52YXJpYWJsZXMuc2V0KGlkLm5hbWUsIHsgaWQsIGluaXQgfSk7XG5cdCAgICB9XG5cdCAgICBhbGlhcyhuYW1lKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmFsaWFzZXMuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYWxpYXNlcy5zZXQobmFtZSwgdGhpcy5nZXRfdW5pcXVlX25hbWUobmFtZSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5hbGlhc2VzLmdldChuYW1lKTtcblx0ICAgIH1cblx0ICAgIGNoaWxkKG9wdGlvbnMpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IEJsb2NrJDEoT2JqZWN0LmFzc2lnbih7fSwgdGhpcywgeyBrZXk6IG51bGwgfSwgb3B0aW9ucywgeyBwYXJlbnQ6IHRoaXMgfSkpO1xuXHQgICAgfVxuXHQgICAgZ2V0X2NvbnRlbnRzKGtleSkge1xuXHQgICAgICAgIGNvbnN0IHsgZGV2IH0gPSB0aGlzLnJlbmRlcmVyLm9wdGlvbnM7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzX291dHJvcykge1xuXHQgICAgICAgICAgICB0aGlzLmFkZF92YXJpYWJsZSh7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJyNjdXJyZW50JyB9KTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmtzLmludHJvLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLmludHJvLnB1c2goYiBgI2N1cnJlbnQgPSB0cnVlO2ApO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jaHVua3MubW91bnQucHVzaChiIGAjY3VycmVudCA9IHRydWU7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmtzLm91dHJvLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLm91dHJvLnB1c2goYiBgI2N1cnJlbnQgPSBmYWxzZTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5hdXRvZm9jdXMpIHtcblx0ICAgICAgICAgICAgdGhpcy5jaHVua3MubW91bnQucHVzaChiIGAke3RoaXMuYXV0b2ZvY3VzfS5mb2N1cygpO2ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnJlbmRlcl9saXN0ZW5lcnMoKTtcblx0ICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG5cdCAgICAgICAgY29uc3Qgbm9vcCA9IHggYEBub29wYDtcblx0ICAgICAgICBwcm9wZXJ0aWVzLmtleSA9IGtleTtcblx0ICAgICAgICBpZiAodGhpcy5maXJzdCkge1xuXHQgICAgICAgICAgICBwcm9wZXJ0aWVzLmZpcnN0ID0geCBgbnVsbGA7XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzLmh5ZHJhdGUucHVzaChiIGB0aGlzLmZpcnN0ID0gJHt0aGlzLmZpcnN0fTtgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY2h1bmtzLmNyZWF0ZS5sZW5ndGggPT09IDAgJiYgdGhpcy5jaHVua3MuaHlkcmF0ZS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5jcmVhdGUgPSBub29wO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgaHlkcmF0ZSA9IHRoaXMuY2h1bmtzLmh5ZHJhdGUubGVuZ3RoID4gMCAmJiAodGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGVcblx0ICAgICAgICAgICAgICAgID8gYiBgdGhpcy5oKCk7YFxuXHQgICAgICAgICAgICAgICAgOiB0aGlzLmNodW5rcy5oeWRyYXRlKTtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5jcmVhdGUgPSB4IGBmdW5jdGlvbiAjY3JlYXRlKCkge1xuXHRcdFx0XHQke3RoaXMuY2h1bmtzLmNyZWF0ZX1cblx0XHRcdFx0JHtoeWRyYXRlfVxuXHRcdFx0fWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSB8fCB0aGlzLmNodW5rcy5jbGFpbS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNodW5rcy5jbGFpbS5sZW5ndGggPT09IDAgJiYgdGhpcy5jaHVua3MuaHlkcmF0ZS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuY2xhaW0gPSBub29wO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcy5jbGFpbSA9IHggYGZ1bmN0aW9uICNjbGFpbSgjbm9kZXMpIHtcblx0XHRcdFx0XHQke3RoaXMuY2h1bmtzLmNsYWltfVxuXHRcdFx0XHRcdCR7dGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGUgJiYgdGhpcy5jaHVua3MuaHlkcmF0ZS5sZW5ndGggPiAwICYmIGIgYHRoaXMuaCgpO2B9XG5cdFx0XHRcdH1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSAmJiB0aGlzLmNodW5rcy5oeWRyYXRlLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5oeWRyYXRlID0geCBgZnVuY3Rpb24gI2h5ZHJhdGUoKSB7XG5cdFx0XHRcdCR7dGhpcy5jaHVua3MuaHlkcmF0ZX1cblx0XHRcdH1gO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5jaHVua3MubW91bnQubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHByb3BlcnRpZXMubW91bnQgPSBub29wO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0aGlzLmV2ZW50X2xpc3RlbmVycy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5tb3VudCA9IHggYGZ1bmN0aW9uICNtb3VudCgjdGFyZ2V0LCAjYW5jaG9yKSB7XG5cdFx0XHRcdCR7dGhpcy5jaHVua3MubW91bnR9XG5cdFx0XHR9YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHByb3BlcnRpZXMubW91bnQgPSB4IGBmdW5jdGlvbiAjbW91bnQoI3RhcmdldCwgI2FuY2hvcikge1xuXHRcdFx0XHQke3RoaXMuY2h1bmtzLm1vdW50fVxuXHRcdFx0fWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmhhc191cGRhdGVfbWV0aG9kIHx8IHRoaXMubWFpbnRhaW5fY29udGV4dCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jaHVua3MudXBkYXRlLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5tYWludGFpbl9jb250ZXh0KSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnVwZGF0ZSA9IG5vb3A7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLm1haW50YWluX2NvbnRleHQgPyB4IGAjbmV3X2N0eGAgOiB4IGAjY3R4YDtcblx0ICAgICAgICAgICAgICAgIGxldCBkaXJ0eSA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnI2RpcnR5JyB9O1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlbmRlcmVyLmNvbnRleHRfb3ZlcmZsb3cgJiYgIXRoaXMucGFyZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHR5cGU6ICdBcnJheVBhdHRlcm4nLCBlbGVtZW50czogW2RpcnR5XSB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcy51cGRhdGUgPSB4IGBmdW5jdGlvbiAjdXBkYXRlKCR7Y3R4fSwgJHtkaXJ0eX0pIHtcblx0XHRcdFx0XHQke3RoaXMubWFpbnRhaW5fY29udGV4dCAmJiBiIGAjY3R4ID0gJHtjdHh9O2B9XG5cdFx0XHRcdFx0JHt0aGlzLmNodW5rcy51cGRhdGV9XG5cdFx0XHRcdH1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmhhc19hbmltYXRpb24pIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5tZWFzdXJlID0geCBgZnVuY3Rpb24gI21lYXN1cmUoKSB7XG5cdFx0XHRcdCR7dGhpcy5jaHVua3MubWVhc3VyZX1cblx0XHRcdH1gO1xuXHQgICAgICAgICAgICBwcm9wZXJ0aWVzLmZpeCA9IHggYGZ1bmN0aW9uICNmaXgoKSB7XG5cdFx0XHRcdCR7dGhpcy5jaHVua3MuZml4fVxuXHRcdFx0fWA7XG5cdCAgICAgICAgICAgIHByb3BlcnRpZXMuYW5pbWF0ZSA9IHggYGZ1bmN0aW9uICNhbmltYXRlKCkge1xuXHRcdFx0XHQke3RoaXMuY2h1bmtzLmFuaW1hdGV9XG5cdFx0XHR9YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzX2ludHJvX21ldGhvZCB8fCB0aGlzLmhhc19vdXRyb19tZXRob2QpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmtzLmludHJvLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcy5pbnRybyA9IG5vb3A7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLmludHJvID0geCBgZnVuY3Rpb24gI2ludHJvKCNsb2NhbCkge1xuXHRcdFx0XHRcdCR7dGhpcy5oYXNfb3V0cm9zICYmIGIgYGlmICgjY3VycmVudCkgcmV0dXJuO2B9XG5cdFx0XHRcdFx0JHt0aGlzLmNodW5rcy5pbnRyb31cblx0XHRcdFx0fWA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmtzLm91dHJvLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcy5vdXRybyA9IG5vb3A7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm91dHJvID0geCBgZnVuY3Rpb24gI291dHJvKCNsb2NhbCkge1xuXHRcdFx0XHRcdCR7dGhpcy5jaHVua3Mub3V0cm99XG5cdFx0XHRcdH1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmNodW5rcy5kZXN0cm95Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICBwcm9wZXJ0aWVzLmRlc3Ryb3kgPSBub29wO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5kZXN0cm95ID0geCBgZnVuY3Rpb24gI2Rlc3Ryb3koZGV0YWNoaW5nKSB7XG5cdFx0XHRcdCR7dGhpcy5jaHVua3MuZGVzdHJveX1cblx0XHRcdH1gO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRoaXMucmVuZGVyZXIuY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgLy8gYWxsb3cgc2hvcnRoYW5kIG5hbWVzXG5cdCAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbbmFtZV07XG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpXG5cdCAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuaWQgPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IHJldHVybl92YWx1ZSA9IHggYHtcblx0XHRcdGtleTogJHtwcm9wZXJ0aWVzLmtleX0sXG5cdFx0XHRmaXJzdDogJHtwcm9wZXJ0aWVzLmZpcnN0fSxcblx0XHRcdGM6ICR7cHJvcGVydGllcy5jcmVhdGV9LFxuXHRcdFx0bDogJHtwcm9wZXJ0aWVzLmNsYWltfSxcblx0XHRcdGg6ICR7cHJvcGVydGllcy5oeWRyYXRlfSxcblx0XHRcdG06ICR7cHJvcGVydGllcy5tb3VudH0sXG5cdFx0XHRwOiAke3Byb3BlcnRpZXMudXBkYXRlfSxcblx0XHRcdHI6ICR7cHJvcGVydGllcy5tZWFzdXJlfSxcblx0XHRcdGY6ICR7cHJvcGVydGllcy5maXh9LFxuXHRcdFx0YTogJHtwcm9wZXJ0aWVzLmFuaW1hdGV9LFxuXHRcdFx0aTogJHtwcm9wZXJ0aWVzLmludHJvfSxcblx0XHRcdG86ICR7cHJvcGVydGllcy5vdXRyb30sXG5cdFx0XHRkOiAke3Byb3BlcnRpZXMuZGVzdHJveX1cblx0XHR9YDtcblx0ICAgICAgICBjb25zdCBibG9jayA9IGRldiAmJiB0aGlzLmdldF91bmlxdWVfbmFtZSgnYmxvY2snKTtcblx0ICAgICAgICBjb25zdCBib2R5ID0gYiBgXG5cdFx0XHQke3RoaXMuY2h1bmtzLmRlY2xhcmF0aW9uc31cblxuXHRcdFx0JHtBcnJheS5mcm9tKHRoaXMudmFyaWFibGVzLnZhbHVlcygpKS5tYXAoKHsgaWQsIGluaXQgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGluaXRcbiAgICAgICAgICAgICAgICA/IGIgYGxldCAke2lkfSA9ICR7aW5pdH1gXG4gICAgICAgICAgICAgICAgOiBiIGBsZXQgJHtpZH1gO1xuICAgICAgICB9KX1cblxuXHRcdFx0JHt0aGlzLmNodW5rcy5pbml0fVxuXG5cdFx0XHQke2RldlxuICAgICAgICAgICAgPyBiIGBcblx0XHRcdFx0XHRjb25zdCAke2Jsb2NrfSA9ICR7cmV0dXJuX3ZhbHVlfTtcblx0XHRcdFx0XHRAZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlUmVnaXN0ZXJCbG9ja1wiLCB7XG5cdFx0XHRcdFx0XHRibG9jazogJHtibG9ja30sXG5cdFx0XHRcdFx0XHRpZDogJHt0aGlzLm5hbWUgfHwgJ2NyZWF0ZV9mcmFnbWVudCd9Lm5hbWUsXG5cdFx0XHRcdFx0XHR0eXBlOiBcIiR7dGhpcy50eXBlfVwiLFxuXHRcdFx0XHRcdFx0c291cmNlOiBcIiR7dGhpcy5jb21tZW50ID8gdGhpcy5jb21tZW50LnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSA6ICcnfVwiLFxuXHRcdFx0XHRcdFx0Y3R4OiAjY3R4XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmV0dXJuICR7YmxvY2t9O2BcbiAgICAgICAgICAgIDogYiBgXG5cdFx0XHRcdFx0cmV0dXJuICR7cmV0dXJuX3ZhbHVlfTtgfVxuXHRcdGA7XG5cdCAgICAgICAgcmV0dXJuIGJvZHk7XG5cdCAgICB9XG5cdCAgICBoYXNfY29udGVudCgpIHtcblx0ICAgICAgICByZXR1cm4gISF0aGlzLmZpcnN0IHx8XG5cdCAgICAgICAgICAgIHRoaXMuZXZlbnRfbGlzdGVuZXJzLmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICAgICAgdGhpcy5jaHVua3MuaW50cm8ubGVuZ3RoID4gMCB8fFxuXHQgICAgICAgICAgICB0aGlzLmNodW5rcy5vdXRyby5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzLmNyZWF0ZS5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzLmh5ZHJhdGUubGVuZ3RoID4gMCB8fFxuXHQgICAgICAgICAgICB0aGlzLmNodW5rcy5jbGFpbS5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzLm1vdW50Lmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICAgICAgdGhpcy5jaHVua3MudXBkYXRlLmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICAgICAgdGhpcy5jaHVua3MuZGVzdHJveS5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgIHRoaXMuaGFzX2FuaW1hdGlvbjtcblx0ICAgIH1cblx0ICAgIHJlbmRlcigpIHtcblx0ICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleSAmJiB0aGlzLmdldF91bmlxdWVfbmFtZSgna2V5Jyk7XG5cdCAgICAgICAgY29uc3QgYXJncyA9IFt4IGAjY3R4YF07XG5cdCAgICAgICAgaWYgKGtleSlcblx0ICAgICAgICAgICAgYXJncy51bnNoaWZ0KGtleSk7XG5cdCAgICAgICAgY29uc3QgZm4gPSBiIGBmdW5jdGlvbiAke3RoaXMubmFtZX0oJHthcmdzfSkge1xuXHRcdFx0JHt0aGlzLmdldF9jb250ZW50cyhrZXkpfVxuXHRcdH1gO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNvbW1lbnRcblx0ICAgICAgICAgICAgPyBiIGBcblx0XHRcdFx0Ly8gJHt0aGlzLmNvbW1lbnR9XG5cdFx0XHRcdCR7Zm59YFxuXHQgICAgICAgICAgICA6IGZuO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyX2xpc3RlbmVycyhjaHVuayA9ICcnKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuZXZlbnRfbGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdmFyaWFibGUoeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICcjbW91bnRlZCcgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzLmRlc3Ryb3kucHVzaChiIGAjbW91bnRlZCA9IGZhbHNlYCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG5cdCAgICAgICAgICAgICAgICBuYW1lOiBgI2Rpc3Bvc2Uke2NodW5rfWBcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdmFyaWFibGUoZGlzcG9zZSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50X2xpc3RlbmVycy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLm1vdW50LnB1c2goYiBgXG5cdFx0XHRcdFx0XHRpZiAoISNtb3VudGVkKSB7XG5cdFx0XHRcdFx0XHRcdCR7ZGlzcG9zZX0gPSAke3RoaXMuZXZlbnRfbGlzdGVuZXJzWzBdfTtcblx0XHRcdFx0XHRcdFx0I21vdW50ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jaHVua3MuZGVzdHJveS5wdXNoKGIgYCR7ZGlzcG9zZX0oKTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLm1vdW50LnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCEjbW91bnRlZCkge1xuXHRcdFx0XHRcdFx0JHtkaXNwb3NlfSA9IFtcblx0XHRcdFx0XHRcdFx0JHt0aGlzLmV2ZW50X2xpc3RlbmVyc31cblx0XHRcdFx0XHRcdF07XG5cdFx0XHRcdFx0XHQjbW91bnRlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBAcnVuX2FsbCgke2Rpc3Bvc2V9KTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuXHQgICAgICAgIC8vIG1ha2UgdGhlc2Ugbm9uLWVudW1lcmFibGUgc28gdGhhdCB0aGV5IGNhbiBiZSBsb2dnZWQgc2Vuc2libHlcblx0ICAgICAgICAvLyAoVE9ETyBpbiBkZXYgb25seT8pXG5cdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuXHQgICAgICAgICAgICByZW5kZXJlcjoge1xuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHJlbmRlcmVyXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHBhcmVudDoge1xuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHBhcmVudFxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5jYW5fdXNlX2lubmVyaHRtbCA9ICFyZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGU7XG5cdCAgICAgICAgdGhpcy5pc19zdGF0aWNfY29udGVudCA9ICFyZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGU7XG5cdCAgICAgICAgYmxvY2sud3JhcHBlcnMucHVzaCh0aGlzKTtcblx0ICAgIH1cblx0ICAgIGNhbm5vdF91c2VfaW5uZXJodG1sKCkge1xuXHQgICAgICAgIHRoaXMuY2FuX3VzZV9pbm5lcmh0bWwgPSBmYWxzZTtcblx0ICAgICAgICBpZiAodGhpcy5wYXJlbnQpXG5cdCAgICAgICAgICAgIHRoaXMucGFyZW50LmNhbm5vdF91c2VfaW5uZXJodG1sKCk7XG5cdCAgICB9XG5cdCAgICBub3Rfc3RhdGljX2NvbnRlbnQoKSB7XG5cdCAgICAgICAgdGhpcy5pc19zdGF0aWNfY29udGVudCA9IGZhbHNlO1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudClcblx0ICAgICAgICAgICAgdGhpcy5wYXJlbnQubm90X3N0YXRpY19jb250ZW50KCk7XG5cdCAgICB9XG5cdCAgICBnZXRfb3JfY3JlYXRlX2FuY2hvcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIC8vIFRPRE8gdXNlIHRoaXMgaW4gRWFjaEJsb2NrIGFuZCBJZkJsb2NrIOKAlCB0cmlja3kgYmVjYXVzZVxuXHQgICAgICAgIC8vIGNoaWxkcmVuIG5lZWQgdG8gYmUgY3JlYXRlZCBmaXJzdFxuXHQgICAgICAgIGNvbnN0IG5lZWRzX2FuY2hvciA9IHRoaXMubmV4dCA/ICF0aGlzLm5leHQuaXNfZG9tX25vZGUoKSA6ICFwYXJlbnRfbm9kZSB8fCAhdGhpcy5wYXJlbnQuaXNfZG9tX25vZGUoKTtcblx0ICAgICAgICBjb25zdCBhbmNob3IgPSBuZWVkc19hbmNob3Jcblx0ICAgICAgICAgICAgPyBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fYW5jaG9yYClcblx0ICAgICAgICAgICAgOiAodGhpcy5uZXh0ICYmIHRoaXMubmV4dC52YXIpIHx8IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnbnVsbCcgfTtcblx0ICAgICAgICBpZiAobmVlZHNfYW5jaG9yKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF9lbGVtZW50KGFuY2hvciwgeCBgQGVtcHR5KClgLCBwYXJlbnRfbm9kZXMgJiYgeCBgQGVtcHR5KClgLCBwYXJlbnRfbm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBhbmNob3I7XG5cdCAgICB9XG5cdCAgICBnZXRfdXBkYXRlX21vdW50X25vZGUoYW5jaG9yKSB7XG5cdCAgICAgICAgcmV0dXJuICgodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNfZG9tX25vZGUoKSlcblx0ICAgICAgICAgICAgPyB0aGlzLnBhcmVudC52YXJcblx0ICAgICAgICAgICAgOiB4IGAke2FuY2hvcn0ucGFyZW50Tm9kZWApO1xuXHQgICAgfVxuXHQgICAgaXNfZG9tX25vZGUoKSB7XG5cdCAgICAgICAgcmV0dXJuICh0aGlzLm5vZGUudHlwZSA9PT0gJ0VsZW1lbnQnIHx8XG5cdCAgICAgICAgICAgIHRoaXMubm9kZS50eXBlID09PSAnVGV4dCcgfHxcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLnR5cGUgPT09ICdNdXN0YWNoZVRhZycpO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKF9ibG9jaywgX3BhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgdGhyb3cgRXJyb3IoJ1dyYXBwZXIgY2xhc3MgaXMgbm90IHJlbmRlcmFibGUnKTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZV9kZWJ1Z2dpbmdfY29tbWVudChub2RlLCBjb21wb25lbnQpIHtcblx0ICAgIGNvbnN0IHsgbG9jYXRlLCBzb3VyY2UgfSA9IGNvbXBvbmVudDtcblx0ICAgIGxldCBjID0gbm9kZS5zdGFydDtcblx0ICAgIGlmIChub2RlLnR5cGUgPT09ICdFbHNlQmxvY2snKSB7XG5cdCAgICAgICAgd2hpbGUgKHNvdXJjZVtjIC0gMV0gIT09ICd7Jylcblx0ICAgICAgICAgICAgYyAtPSAxO1xuXHQgICAgICAgIHdoaWxlIChzb3VyY2VbYyAtIDFdID09PSAneycpXG5cdCAgICAgICAgICAgIGMgLT0gMTtcblx0ICAgIH1cblx0ICAgIGxldCBkO1xuXHQgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lubGluZUNvbXBvbmVudCcgfHwgbm9kZS50eXBlID09PSAnRWxlbWVudCcpIHtcblx0ICAgICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgZCA9IG5vZGUuY2hpbGRyZW5bMF0uc3RhcnQ7XG5cdCAgICAgICAgICAgIHdoaWxlIChzb3VyY2VbZCAtIDFdICE9PSAnPicpXG5cdCAgICAgICAgICAgICAgICBkIC09IDE7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBkID0gbm9kZS5zdGFydDtcblx0ICAgICAgICAgICAgd2hpbGUgKHNvdXJjZVtkXSAhPT0gJz4nKVxuXHQgICAgICAgICAgICAgICAgZCArPSAxO1xuXHQgICAgICAgICAgICBkICs9IDE7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAnVGV4dCcgfHwgbm9kZS50eXBlID09PSAnQ29tbWVudCcpIHtcblx0ICAgICAgICBkID0gbm9kZS5lbmQ7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICAvLyBAdHMtaWdub3JlXG5cdCAgICAgICAgZCA9IG5vZGUuZXhwcmVzc2lvbiA/IG5vZGUuZXhwcmVzc2lvbi5ub2RlLmVuZCA6IGM7XG5cdCAgICAgICAgd2hpbGUgKHNvdXJjZVtkXSAhPT0gJ30nKVxuXHQgICAgICAgICAgICBkICs9IDE7XG5cdCAgICAgICAgd2hpbGUgKHNvdXJjZVtkXSA9PT0gJ30nKVxuXHQgICAgICAgICAgICBkICs9IDE7XG5cdCAgICB9XG5cdCAgICBjb25zdCBzdGFydCA9IGxvY2F0ZShjKTtcblx0ICAgIGNvbnN0IGxvYyA9IGAoJHtzdGFydC5saW5lfToke3N0YXJ0LmNvbHVtbn0pYDtcblx0ICAgIHJldHVybiBgJHtsb2N9ICR7c291cmNlLnNsaWNlKGMsIGQpfWAucmVwbGFjZSgvXFxzL2csICcgJyk7XG5cdH1cblxuXHRjbGFzcyBBd2FpdEJsb2NrQnJhbmNoIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihzdGF0dXMsIHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlLCBzdHJpcF93aGl0ZXNwYWNlLCBuZXh0X3NpYmxpbmcpIHtcblx0ICAgICAgICBzdXBlcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSk7XG5cdCAgICAgICAgdGhpcy52YXIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuXHQgICAgICAgIHRoaXMuYmxvY2sgPSBibG9jay5jaGlsZCh7XG5cdCAgICAgICAgICAgIGNvbW1lbnQ6IGNyZWF0ZV9kZWJ1Z2dpbmdfY29tbWVudChub2RlLCB0aGlzLnJlbmRlcmVyLmNvbXBvbmVudCksXG5cdCAgICAgICAgICAgIG5hbWU6IHRoaXMucmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgY3JlYXRlXyR7c3RhdHVzfV9ibG9ja2ApLFxuXHQgICAgICAgICAgICB0eXBlOiBzdGF0dXNcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmFkZF9jb250ZXh0KHBhcmVudC5ub2RlW3N0YXR1cyArICdfbm9kZSddLCBwYXJlbnQubm9kZVtzdGF0dXMgKyAnX2NvbnRleHRzJ10pO1xuXHQgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBuZXcgRnJhZ21lbnRXcmFwcGVyKHJlbmRlcmVyLCB0aGlzLmJsb2NrLCB0aGlzLm5vZGUuY2hpbGRyZW4sIHBhcmVudCwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICB0aGlzLmlzX2R5bmFtaWMgPSB0aGlzLmJsb2NrLmRlcGVuZGVuY2llcy5zaXplID4gMDtcblx0ICAgIH1cblx0ICAgIGFkZF9jb250ZXh0KG5vZGUsIGNvbnRleHRzKSB7XG5cdCAgICAgICAgaWYgKCFub2RlKVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWUgPSBub2RlLm5hbWU7XG5cdCAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkX3RvX2NvbnRleHQodGhpcy52YWx1ZSwgdHJ1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjb250ZXh0cy5mb3JFYWNoKGNvbnRleHQgPT4ge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRfdG9fY29udGV4dChjb250ZXh0LmtleS5uYW1lLCB0cnVlKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmJsb2NrLnBhcmVudC5nZXRfdW5pcXVlX25hbWUoJ3ZhbHVlJykubmFtZTtcblx0ICAgICAgICAgICAgdGhpcy52YWx1ZV9jb250ZXh0cyA9IGNvbnRleHRzO1xuXHQgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZF90b19jb250ZXh0KHRoaXMudmFsdWUsIHRydWUpO1xuXHQgICAgICAgICAgICB0aGlzLmlzX2Rlc3RydWN0dXJlZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMudmFsdWVfaW5kZXggPSB0aGlzLnJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldCh0aGlzLnZhbHVlKS5pbmRleDtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIHRoaXMuZnJhZ21lbnQucmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKTtcblx0ICAgICAgICBpZiAodGhpcy5pc19kZXN0cnVjdHVyZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJfZGVzdHJ1Y3R1cmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZW5kZXJfZGVzdHJ1Y3R1cmUoKSB7XG5cdCAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnZhbHVlX2NvbnRleHRzLm1hcChwcm9wID0+IGIgYCNjdHhbJHt0aGlzLmJsb2NrLnJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChwcm9wLmtleS5uYW1lKS5pbmRleH1dID0gJHtwcm9wLm1vZGlmaWVyKHggYCNjdHhbJHt0aGlzLnZhbHVlX2luZGV4fV1gKX07YCk7XG5cdCAgICAgICAgY29uc3QgZ2V0X2NvbnRleHQgPSB0aGlzLmJsb2NrLnJlbmRlcmVyLmNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWUoYGdldF8ke3RoaXMuc3RhdHVzfV9jb250ZXh0YCk7XG5cdCAgICAgICAgdGhpcy5ibG9jay5yZW5kZXJlci5ibG9ja3MucHVzaChiIGBcblx0XHRcdGZ1bmN0aW9uICR7Z2V0X2NvbnRleHR9KCNjdHgpIHtcblx0XHRcdFx0JHtwcm9wc31cblx0XHRcdH1cblx0XHRgKTtcblx0ICAgICAgICB0aGlzLmJsb2NrLmNodW5rcy5kZWNsYXJhdGlvbnMucHVzaChiIGAke2dldF9jb250ZXh0fSgjY3R4KWApO1xuXHQgICAgICAgIGlmICh0aGlzLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYCR7Z2V0X2NvbnRleHR9KCNjdHgpYCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cdGNsYXNzIEF3YWl0QmxvY2tXcmFwcGVyIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKSB7XG5cdCAgICAgICAgc3VwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpO1xuXHQgICAgICAgIHRoaXMudmFyID0geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdhd2FpdF9ibG9jaycgfTtcblx0ICAgICAgICB0aGlzLmNhbm5vdF91c2VfaW5uZXJodG1sKCk7XG5cdCAgICAgICAgdGhpcy5ub3Rfc3RhdGljX2NvbnRlbnQoKTtcblx0ICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKHRoaXMubm9kZS5leHByZXNzaW9uLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgbGV0IGlzX2R5bmFtaWMgPSBmYWxzZTtcblx0ICAgICAgICBsZXQgaGFzX2ludHJvcyA9IGZhbHNlO1xuXHQgICAgICAgIGxldCBoYXNfb3V0cm9zID0gZmFsc2U7XG5cdCAgICAgICAgWydwZW5kaW5nJywgJ3RoZW4nLCAnY2F0Y2gnXS5mb3JFYWNoKChzdGF0dXMpID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLm5vZGVbc3RhdHVzXTtcblx0ICAgICAgICAgICAgY29uc3QgYnJhbmNoID0gbmV3IEF3YWl0QmxvY2tCcmFuY2goc3RhdHVzLCByZW5kZXJlciwgYmxvY2ssIHRoaXMsIGNoaWxkLCBzdHJpcF93aGl0ZXNwYWNlLCBuZXh0X3NpYmxpbmcpO1xuXHQgICAgICAgICAgICByZW5kZXJlci5ibG9ja3MucHVzaChicmFuY2guYmxvY2spO1xuXHQgICAgICAgICAgICBpZiAoYnJhbmNoLmlzX2R5bmFtaWMpIHtcblx0ICAgICAgICAgICAgICAgIGlzX2R5bmFtaWMgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgLy8gVE9ETyBzaG91bGQgYmxvY2tzIHVwZGF0ZSB0aGVpciBvd24gcGFyZW50cz9cblx0ICAgICAgICAgICAgICAgIGJsb2NrLmFkZF9kZXBlbmRlbmNpZXMoYnJhbmNoLmJsb2NrLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGJyYW5jaC5ibG9jay5oYXNfaW50cm9zKVxuXHQgICAgICAgICAgICAgICAgaGFzX2ludHJvcyA9IHRydWU7XG5cdCAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suaGFzX291dHJvcylcblx0ICAgICAgICAgICAgICAgIGhhc19vdXRyb3MgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzW3N0YXR1c10gPSBicmFuY2g7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgWydwZW5kaW5nJywgJ3RoZW4nLCAnY2F0Y2gnXS5mb3JFYWNoKHN0YXR1cyA9PiB7XG5cdCAgICAgICAgICAgIHRoaXNbc3RhdHVzXS5ibG9jay5oYXNfdXBkYXRlX21ldGhvZCA9IGlzX2R5bmFtaWM7XG5cdCAgICAgICAgICAgIHRoaXNbc3RhdHVzXS5ibG9jay5oYXNfaW50cm9fbWV0aG9kID0gaGFzX2ludHJvcztcblx0ICAgICAgICAgICAgdGhpc1tzdGF0dXNdLmJsb2NrLmhhc19vdXRyb19tZXRob2QgPSBoYXNfb3V0cm9zO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmIChoYXNfb3V0cm9zKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF9vdXRybygpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMuZ2V0X29yX2NyZWF0ZV9hbmNob3IoYmxvY2ssIHBhcmVudF9ub2RlLCBwYXJlbnRfbm9kZXMpO1xuXHQgICAgICAgIGNvbnN0IHVwZGF0ZV9tb3VudF9ub2RlID0gdGhpcy5nZXRfdXBkYXRlX21vdW50X25vZGUoYW5jaG9yKTtcblx0ICAgICAgICBjb25zdCBzbmlwcGV0ID0gdGhpcy5ub2RlLmV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jayk7XG5cdCAgICAgICAgY29uc3QgaW5mbyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgaW5mb2ApO1xuXHQgICAgICAgIGNvbnN0IHByb21pc2UgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYHByb21pc2VgKTtcblx0ICAgICAgICBibG9jay5hZGRfdmFyaWFibGUocHJvbWlzZSk7XG5cdCAgICAgICAgYmxvY2subWFpbnRhaW5fY29udGV4dCA9IHRydWU7XG5cdCAgICAgICAgY29uc3QgaW5mb19wcm9wcyA9IHggYHtcblx0XHRcdGN0eDogI2N0eCxcblx0XHRcdGN1cnJlbnQ6IG51bGwsXG5cdFx0XHR0b2tlbjogbnVsbCxcblx0XHRcdHBlbmRpbmc6ICR7dGhpcy5wZW5kaW5nLmJsb2NrLm5hbWV9LFxuXHRcdFx0dGhlbjogJHt0aGlzLnRoZW4uYmxvY2submFtZX0sXG5cdFx0XHRjYXRjaDogJHt0aGlzLmNhdGNoLmJsb2NrLm5hbWV9LFxuXHRcdFx0dmFsdWU6ICR7dGhpcy50aGVuLnZhbHVlX2luZGV4fSxcblx0XHRcdGVycm9yOiAke3RoaXMuY2F0Y2gudmFsdWVfaW5kZXh9LFxuXHRcdFx0YmxvY2tzOiAke3RoaXMucGVuZGluZy5ibG9jay5oYXNfb3V0cm9fbWV0aG9kICYmIHggYFssLCxdYH1cblx0XHR9YDtcblx0ICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0bGV0ICR7aW5mb30gPSAke2luZm9fcHJvcHN9O1xuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRAaGFuZGxlX3Byb21pc2UoJHtwcm9taXNlfSA9ICR7c25pcHBldH0sICR7aW5mb30pO1xuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGBcblx0XHRcdCR7aW5mb30uYmxvY2suYygpO1xuXHRcdGApO1xuXHQgICAgICAgIGlmIChwYXJlbnRfbm9kZXMgJiYgdGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGUpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNsYWltLnB1c2goYiBgXG5cdFx0XHRcdCR7aW5mb30uYmxvY2subCgke3BhcmVudF9ub2Rlc30pO1xuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGluaXRpYWxfbW91bnRfbm9kZSA9IHBhcmVudF9ub2RlIHx8ICcjdGFyZ2V0Jztcblx0ICAgICAgICBjb25zdCBhbmNob3Jfbm9kZSA9IHBhcmVudF9ub2RlID8gJ251bGwnIDogJyNhbmNob3InO1xuXHQgICAgICAgIGNvbnN0IGhhc190cmFuc2l0aW9ucyA9IHRoaXMucGVuZGluZy5ibG9jay5oYXNfaW50cm9fbWV0aG9kIHx8IHRoaXMucGVuZGluZy5ibG9jay5oYXNfb3V0cm9fbWV0aG9kO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYFxuXHRcdFx0JHtpbmZvfS5ibG9jay5tKCR7aW5pdGlhbF9tb3VudF9ub2RlfSwgJHtpbmZvfS5hbmNob3IgPSAke2FuY2hvcl9ub2RlfSk7XG5cdFx0XHQke2luZm99Lm1vdW50ID0gKCkgPT4gJHt1cGRhdGVfbW91bnRfbm9kZX07XG5cdFx0XHQke2luZm99LmFuY2hvciA9ICR7YW5jaG9yfTtcblx0XHRgKTtcblx0ICAgICAgICBpZiAoaGFzX3RyYW5zaXRpb25zKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbnRyby5wdXNoKGIgYEB0cmFuc2l0aW9uX2luKCR7aW5mb30uYmxvY2spO2ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSB0aGlzLm5vZGUuZXhwcmVzc2lvbi5keW5hbWljX2RlcGVuZGVuY2llcygpO1xuXHQgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSB4IGBcblx0XHRcdFx0JHtibG9jay5yZW5kZXJlci5kaXJ0eShkZXBlbmRlbmNpZXMpfSAmJlxuXHRcdFx0XHQke3Byb21pc2V9ICE9PSAoJHtwcm9taXNlfSA9ICR7c25pcHBldH0pICYmXG5cdFx0XHRcdEBoYW5kbGVfcHJvbWlzZSgke3Byb21pc2V9LCAke2luZm99KWA7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGAke2luZm99LmN0eCA9ICNjdHg7YCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmcuYmxvY2suaGFzX3VwZGF0ZV9tZXRob2QpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoJHtjb25kaXRpb259KSB7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc3QgI2NoaWxkX2N0eCA9ICNjdHguc2xpY2UoKTtcblx0XHRcdFx0XHRcdCR7dGhpcy50aGVuLnZhbHVlICYmIGIgYCNjaGlsZF9jdHhbJHt0aGlzLnRoZW4udmFsdWVfaW5kZXh9XSA9ICR7aW5mb30ucmVzb2x2ZWQ7YH1cblx0XHRcdFx0XHRcdCR7aW5mb30uYmxvY2sucCgjY2hpbGRfY3R4LCAjZGlydHkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdFx0JHtjb25kaXRpb259XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y29uc3QgI2NoaWxkX2N0eCA9ICNjdHguc2xpY2UoKTtcblx0XHRcdFx0XHRcdCR7dGhpcy50aGVuLnZhbHVlICYmIGIgYCNjaGlsZF9jdHhbJHt0aGlzLnRoZW4udmFsdWVfaW5kZXh9XSA9ICR7aW5mb30ucmVzb2x2ZWQ7YH1cblx0XHRcdFx0XHRcdCR7aW5mb30uYmxvY2sucCgjY2hpbGRfY3R4LCAjZGlydHkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMucGVuZGluZy5ibG9jay5oYXNfb3V0cm9fbWV0aG9kKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5vdXRyby5wdXNoKGIgYFxuXHRcdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgMzsgI2kgKz0gMSkge1xuXHRcdFx0XHRcdGNvbnN0IGJsb2NrID0gJHtpbmZvfS5ibG9ja3NbI2ldO1xuXHRcdFx0XHRcdEB0cmFuc2l0aW9uX291dChibG9jayk7XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYFxuXHRcdFx0JHtpbmZvfS5ibG9jay5kKCR7cGFyZW50X25vZGUgPyBudWxsIDogJ2RldGFjaGluZyd9KTtcblx0XHRcdCR7aW5mb30udG9rZW4gPSBudWxsO1xuXHRcdFx0JHtpbmZvfSA9IG51bGw7XG5cdFx0YCk7XG5cdCAgICAgICAgW3RoaXMucGVuZGluZywgdGhpcy50aGVuLCB0aGlzLmNhdGNoXS5mb3JFYWNoKGJyYW5jaCA9PiB7XG5cdCAgICAgICAgICAgIGJyYW5jaC5yZW5kZXIoYnJhbmNoLmJsb2NrLCBudWxsLCB4IGAjbm9kZXNgKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IFRSVUUgPSB4IGB0cnVlYDtcblx0Y29uc3QgRkFMU0UgPSB4IGBmYWxzZWA7XG5cdGNsYXNzIEV2ZW50SGFuZGxlcldyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3Iobm9kZSwgcGFyZW50KSB7XG5cdCAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICBpZiAoIW5vZGUuZXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICB0aGlzLnBhcmVudC5yZW5kZXJlci5hZGRfdG9fY29udGV4dChub2RlLmhhbmRsZXJfbmFtZS5uYW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5wYXJlbnQucmVuZGVyZXIuY29tcG9uZW50LnBhcnRseV9ob2lzdGVkLnB1c2goYiBgXG5cdFx0XHRcdGZ1bmN0aW9uICR7bm9kZS5oYW5kbGVyX25hbWUubmFtZX0oZXZlbnQpIHtcblx0XHRcdFx0XHRAYnViYmxlKCQkc2VsZiwgZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBnZXRfc25pcHBldChibG9jaykge1xuXHQgICAgICAgIGNvbnN0IHNuaXBwZXQgPSB0aGlzLm5vZGUuZXhwcmVzc2lvbiA/IHRoaXMubm9kZS5leHByZXNzaW9uLm1hbmlwdWxhdGUoYmxvY2spIDogYmxvY2sucmVuZGVyZXIucmVmZXJlbmNlKHRoaXMubm9kZS5oYW5kbGVyX25hbWUpO1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUucmVhc3NpZ25lZCkge1xuXHQgICAgICAgICAgICBibG9jay5tYWludGFpbl9jb250ZXh0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgcmV0dXJuIHggYGZ1bmN0aW9uICgpIHsgaWYgKEBpc19mdW5jdGlvbigke3NuaXBwZXR9KSkgJHtzbmlwcGV0fS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHNuaXBwZXQ7XG5cdCAgICB9XG5cdCAgICByZW5kZXIoYmxvY2ssIHRhcmdldCkge1xuXHQgICAgICAgIGxldCBzbmlwcGV0ID0gdGhpcy5nZXRfc25pcHBldChibG9jayk7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5tb2RpZmllcnMuaGFzKCdwcmV2ZW50RGVmYXVsdCcpKVxuXHQgICAgICAgICAgICBzbmlwcGV0ID0geCBgQHByZXZlbnRfZGVmYXVsdCgke3NuaXBwZXR9KWA7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5tb2RpZmllcnMuaGFzKCdzdG9wUHJvcGFnYXRpb24nKSlcblx0ICAgICAgICAgICAgc25pcHBldCA9IHggYEBzdG9wX3Byb3BhZ2F0aW9uKCR7c25pcHBldH0pYDtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLm1vZGlmaWVycy5oYXMoJ3NlbGYnKSlcblx0ICAgICAgICAgICAgc25pcHBldCA9IHggYEBzZWxmKCR7c25pcHBldH0pYDtcblx0ICAgICAgICBjb25zdCBhcmdzID0gW107XG5cdCAgICAgICAgY29uc3Qgb3B0cyA9IFsncGFzc2l2ZScsICdvbmNlJywgJ2NhcHR1cmUnXS5maWx0ZXIobW9kID0+IHRoaXMubm9kZS5tb2RpZmllcnMuaGFzKG1vZCkpO1xuXHQgICAgICAgIGlmIChvcHRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBhcmdzLnB1c2goKG9wdHMubGVuZ3RoID09PSAxICYmIG9wdHNbMF0gPT09ICdjYXB0dXJlJylcblx0ICAgICAgICAgICAgICAgID8gVFJVRVxuXHQgICAgICAgICAgICAgICAgOiB4IGB7ICR7b3B0cy5tYXAob3B0ID0+IHAgYCR7b3B0fTogdHJ1ZWApfSB9YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGJsb2NrLnJlbmRlcmVyLm9wdGlvbnMuZGV2KSB7XG5cdCAgICAgICAgICAgIGFyZ3MucHVzaChGQUxTRSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChibG9jay5yZW5kZXJlci5vcHRpb25zLmRldikge1xuXHQgICAgICAgICAgICBhcmdzLnB1c2godGhpcy5ub2RlLm1vZGlmaWVycy5oYXMoJ3ByZXZlbnREZWZhdWx0JykgPyBUUlVFIDogRkFMU0UpO1xuXHQgICAgICAgICAgICBhcmdzLnB1c2godGhpcy5ub2RlLm1vZGlmaWVycy5oYXMoJ3N0b3BQcm9wYWdhdGlvbicpID8gVFJVRSA6IEZBTFNFKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suZXZlbnRfbGlzdGVuZXJzLnB1c2goeCBgQGxpc3Rlbigke3RhcmdldH0sIFwiJHt0aGlzLm5vZGUubmFtZX1cIiwgJHtzbmlwcGV0fSwgJHthcmdzfSlgKTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZF9ldmVudF9oYW5kbGVycyhibG9jaywgdGFyZ2V0LCBoYW5kbGVycykge1xuXHQgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IGFkZF9ldmVudF9oYW5kbGVyKGJsb2NrLCB0YXJnZXQsIGhhbmRsZXIpKTtcblx0fVxuXHRmdW5jdGlvbiBhZGRfZXZlbnRfaGFuZGxlcihibG9jaywgdGFyZ2V0LCBoYW5kbGVyKSB7XG5cdCAgICBoYW5kbGVyLnJlbmRlcihibG9jaywgdGFyZ2V0KTtcblx0fVxuXG5cdGNsYXNzIEJvZHlXcmFwcGVyIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSkge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLmhhbmRsZXJzID0gdGhpcy5ub2RlLmhhbmRsZXJzLm1hcChoYW5kbGVyID0+IG5ldyBFdmVudEhhbmRsZXJXcmFwcGVyKGhhbmRsZXIsIHRoaXMpKTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgX3BhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgYWRkX2V2ZW50X2hhbmRsZXJzKGJsb2NrLCB4IGBAX2RvY3VtZW50LmJvZHlgLCB0aGlzLmhhbmRsZXJzKTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZF90b19zZXQoYSwgYikge1xuXHQgICAgLy8gQHRzLWlnbm9yZVxuXHQgICAgYi5mb3JFYWNoKGl0ZW0gPT4ge1xuXHQgICAgICAgIGEuYWRkKGl0ZW0pO1xuXHQgICAgfSk7XG5cdH1cblxuXHRjbGFzcyBEZWJ1Z1RhZ1dyYXBwZXIgZXh0ZW5kcyBXcmFwcGVyIHtcblx0ICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlLCBfc3RyaXBfd2hpdGVzcGFjZSwgX25leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgX3BhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgY29uc3QgeyByZW5kZXJlciB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCB7IGNvbXBvbmVudCB9ID0gcmVuZGVyZXI7XG5cdCAgICAgICAgaWYgKCFyZW5kZXJlci5vcHRpb25zLmRldilcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGNvbnN0IHsgdmFyX2xvb2t1cCB9ID0gY29tcG9uZW50O1xuXHQgICAgICAgIGNvbnN0IHN0YXJ0ID0gY29tcG9uZW50LmxvY2F0ZSh0aGlzLm5vZGUuc3RhcnQgKyAxKTtcblx0ICAgICAgICBjb25zdCBlbmQgPSB7IGxpbmU6IHN0YXJ0LmxpbmUsIGNvbHVtbjogc3RhcnQuY29sdW1uICsgNiB9O1xuXHQgICAgICAgIGNvbnN0IGxvYyA9IHsgc3RhcnQsIGVuZCB9O1xuXHQgICAgICAgIGNvbnN0IGRlYnVnID0ge1xuXHQgICAgICAgICAgICB0eXBlOiAnRGVidWdnZXJTdGF0ZW1lbnQnLFxuXHQgICAgICAgICAgICBsb2Ncblx0ICAgICAgICB9O1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIC8vIERlYnVnIGFsbFxuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuY3JlYXRlLnB1c2goZGVidWcpO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goZGVidWcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgbG9nID0ge1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICAgICAgbmFtZTogJ2xvZycsXG5cdCAgICAgICAgICAgICAgICBsb2Ncblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICB0aGlzLm5vZGUuZXhwcmVzc2lvbnMuZm9yRWFjaChleHByZXNzaW9uID0+IHtcblx0ICAgICAgICAgICAgICAgIGFkZF90b19zZXQoZGVwZW5kZW5jaWVzLCBleHByZXNzaW9uLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjb25zdCBjb250ZXh0dWFsX2lkZW50aWZpZXJzID0gdGhpcy5ub2RlLmV4cHJlc3Npb25zXG5cdCAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSB2YXJfbG9va3VwLmdldChlLm5vZGUubmFtZSk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gISh2YXJpYWJsZSAmJiB2YXJpYWJsZS5ob2lzdGFibGUpO1xuXHQgICAgICAgICAgICB9KVxuXHQgICAgICAgICAgICAgICAgLm1hcChlID0+IGUubm9kZS5uYW1lKTtcblx0ICAgICAgICAgICAgY29uc3QgbG9nZ2VkX2lkZW50aWZpZXJzID0gdGhpcy5ub2RlLmV4cHJlc3Npb25zLm1hcChlID0+IHAgYCR7ZS5ub2RlLm5hbWV9YCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGRlYnVnX3N0YXRlbWVudHMgPSBiIGBcblx0XHRcdFx0JHtjb250ZXh0dWFsX2lkZW50aWZpZXJzLm1hcChuYW1lID0+IGIgYGNvbnN0ICR7bmFtZX0gPSAke3JlbmRlcmVyLnJlZmVyZW5jZShuYW1lKX07YCl9XG5cdFx0XHRcdEBfY29uc29sZS4ke2xvZ30oeyAke2xvZ2dlZF9pZGVudGlmaWVyc30gfSk7XG5cdFx0XHRcdGRlYnVnZ2VyO2A7XG5cdCAgICAgICAgICAgIGlmIChkZXBlbmRlbmNpZXMuc2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gcmVuZGVyZXIuZGlydHkoQXJyYXkuZnJvbShkZXBlbmRlbmNpZXMpKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoJHtjb25kaXRpb259KSB7XG5cdFx0XHRcdFx0XHQke2RlYnVnX3N0YXRlbWVudHN9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuY3JlYXRlLnB1c2goYiBge1xuXHRcdFx0XHQke2RlYnVnX3N0YXRlbWVudHN9XG5cdFx0XHR9YCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgRWxzZUJsb2NrV3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLnZhciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5ibG9jayA9IGJsb2NrLmNoaWxkKHtcblx0ICAgICAgICAgICAgY29tbWVudDogY3JlYXRlX2RlYnVnZ2luZ19jb21tZW50KG5vZGUsIHRoaXMucmVuZGVyZXIuY29tcG9uZW50KSxcblx0ICAgICAgICAgICAgbmFtZTogdGhpcy5yZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGBjcmVhdGVfZWxzZV9ibG9ja2ApLFxuXHQgICAgICAgICAgICB0eXBlOiAnZWxzZSdcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmZyYWdtZW50ID0gbmV3IEZyYWdtZW50V3JhcHBlcihyZW5kZXJlciwgdGhpcy5ibG9jaywgdGhpcy5ub2RlLmNoaWxkcmVuLCBwYXJlbnQsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZyk7XG5cdCAgICAgICAgdGhpcy5pc19keW5hbWljID0gdGhpcy5ibG9jay5kZXBlbmRlbmNpZXMuc2l6ZSA+IDA7XG5cdCAgICB9XG5cdH1cblx0Y2xhc3MgRWFjaEJsb2NrV3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLnVwZGF0ZXMgPSBbXTtcblx0ICAgICAgICB0aGlzLnZhciA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZWFjaCcgfTtcblx0ICAgICAgICB0aGlzLmNhbm5vdF91c2VfaW5uZXJodG1sKCk7XG5cdCAgICAgICAgdGhpcy5ub3Rfc3RhdGljX2NvbnRlbnQoKTtcblx0ICAgICAgICBjb25zdCB7IGRlcGVuZGVuY2llcyB9ID0gbm9kZS5leHByZXNzaW9uO1xuXHQgICAgICAgIGJsb2NrLmFkZF9kZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICB0aGlzLm5vZGUuY29udGV4dHMuZm9yRWFjaChjb250ZXh0ID0+IHtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoY29udGV4dC5rZXkubmFtZSwgdHJ1ZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5ibG9jayA9IGJsb2NrLmNoaWxkKHtcblx0ICAgICAgICAgICAgY29tbWVudDogY3JlYXRlX2RlYnVnZ2luZ19jb21tZW50KHRoaXMubm9kZSwgdGhpcy5yZW5kZXJlci5jb21wb25lbnQpLFxuXHQgICAgICAgICAgICBuYW1lOiByZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKCdjcmVhdGVfZWFjaF9ibG9jaycpLFxuXHQgICAgICAgICAgICB0eXBlOiAnZWFjaCcsXG5cdCAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogcHJvYmFibHkgZXJyb3Jcblx0ICAgICAgICAgICAga2V5OiBub2RlLmtleSxcblx0ICAgICAgICAgICAgYmluZGluZ3M6IG5ldyBNYXAoYmxvY2suYmluZGluZ3MpXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLy8gVE9ETyB0aGlzIHNlZW1zIG1lc3N5XG5cdCAgICAgICAgdGhpcy5ibG9jay5oYXNfYW5pbWF0aW9uID0gdGhpcy5ub2RlLmhhc19hbmltYXRpb247XG5cdCAgICAgICAgdGhpcy5pbmRleF9uYW1lID0gdGhpcy5ub2RlLmluZGV4XG5cdCAgICAgICAgICAgID8geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHRoaXMubm9kZS5pbmRleCB9XG5cdCAgICAgICAgICAgIDogcmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgJHt0aGlzLm5vZGUuY29udGV4dH1faW5kZXhgKTtcblx0ICAgICAgICBjb25zdCBmaXhlZF9sZW5ndGggPSBub2RlLmV4cHJlc3Npb24ubm9kZS50eXBlID09PSAnQXJyYXlFeHByZXNzaW9uJyAmJlxuXHQgICAgICAgICAgICBub2RlLmV4cHJlc3Npb24ubm9kZS5lbGVtZW50cy5ldmVyeShlbGVtZW50ID0+IGVsZW1lbnQudHlwZSAhPT0gJ1NwcmVhZEVsZW1lbnQnKVxuXHQgICAgICAgICAgICA/IG5vZGUuZXhwcmVzc2lvbi5ub2RlLmVsZW1lbnRzLmxlbmd0aFxuXHQgICAgICAgICAgICA6IG51bGw7XG5cdCAgICAgICAgLy8gaGFjayB0aGUgc291cmNlbWFwLCBzbyB0aGF0IGlmIGRhdGEgaXMgbWlzc2luZyB0aGUgYnVnXG5cdCAgICAgICAgLy8gaXMgZWFzeSB0byBmaW5kXG5cdCAgICAgICAgbGV0IGMgPSB0aGlzLm5vZGUuc3RhcnQgKyAyO1xuXHQgICAgICAgIHdoaWxlIChyZW5kZXJlci5jb21wb25lbnQuc291cmNlW2NdICE9PSAnZScpXG5cdCAgICAgICAgICAgIGMgKz0gMTtcblx0ICAgICAgICBjb25zdCBzdGFydCA9IHJlbmRlcmVyLmNvbXBvbmVudC5sb2NhdGUoYyk7XG5cdCAgICAgICAgY29uc3QgZW5kID0geyBsaW5lOiBzdGFydC5saW5lLCBjb2x1bW46IHN0YXJ0LmNvbHVtbiArIDQgfTtcblx0ICAgICAgICBjb25zdCBsZW5ndGggPSB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgbmFtZTogJ2xlbmd0aCcsXG5cdCAgICAgICAgICAgIGxvYzogeyBzdGFydCwgZW5kIH1cblx0ICAgICAgICB9O1xuXHQgICAgICAgIGNvbnN0IGVhY2hfYmxvY2tfdmFsdWUgPSByZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGAke3RoaXMudmFyLm5hbWV9X3ZhbHVlYCk7XG5cdCAgICAgICAgY29uc3QgaXRlcmF0aW9ucyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9ibG9ja3NgKTtcblx0ICAgICAgICByZW5kZXJlci5hZGRfdG9fY29udGV4dChlYWNoX2Jsb2NrX3ZhbHVlLm5hbWUsIHRydWUpO1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF90b19jb250ZXh0KHRoaXMuaW5kZXhfbmFtZS5uYW1lLCB0cnVlKTtcblx0ICAgICAgICB0aGlzLnZhcnMgPSB7XG5cdCAgICAgICAgICAgIGNyZWF0ZV9lYWNoX2Jsb2NrOiB0aGlzLmJsb2NrLm5hbWUsXG5cdCAgICAgICAgICAgIGVhY2hfYmxvY2tfdmFsdWUsXG5cdCAgICAgICAgICAgIGdldF9lYWNoX2NvbnRleHQ6IHJlbmRlcmVyLmNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWUoYGdldF8ke3RoaXMudmFyLm5hbWV9X2NvbnRleHRgKSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9ucyxcblx0ICAgICAgICAgICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBsaXRlcmFsXG5cdCAgICAgICAgICAgIGZpeGVkX2xlbmd0aCxcblx0ICAgICAgICAgICAgZGF0YV9sZW5ndGg6IGZpeGVkX2xlbmd0aCA9PT0gbnVsbCA/IHggYCR7ZWFjaF9ibG9ja192YWx1ZX0uJHtsZW5ndGh9YCA6IGZpeGVkX2xlbmd0aCxcblx0ICAgICAgICAgICAgdmlld19sZW5ndGg6IGZpeGVkX2xlbmd0aCA9PT0gbnVsbCA/IHggYCR7aXRlcmF0aW9uc30ubGVuZ3RoYCA6IGZpeGVkX2xlbmd0aFxuXHQgICAgICAgIH07XG5cdCAgICAgICAgY29uc3Qgc3RvcmUgPSBub2RlLmV4cHJlc3Npb24ubm9kZS50eXBlID09PSAnSWRlbnRpZmllcicgJiZcblx0ICAgICAgICAgICAgbm9kZS5leHByZXNzaW9uLm5vZGUubmFtZVswXSA9PT0gJyQnXG5cdCAgICAgICAgICAgID8gbm9kZS5leHByZXNzaW9uLm5vZGUubmFtZS5zbGljZSgxKVxuXHQgICAgICAgICAgICA6IG51bGw7XG5cdCAgICAgICAgbm9kZS5jb250ZXh0cy5mb3JFYWNoKHByb3AgPT4ge1xuXHQgICAgICAgICAgICB0aGlzLmJsb2NrLmJpbmRpbmdzLnNldChwcm9wLmtleS5uYW1lLCB7XG5cdCAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlLFxuXHQgICAgICAgICAgICAgICAgcHJvcGVydHk6IHRoaXMuaW5kZXhfbmFtZSxcblx0ICAgICAgICAgICAgICAgIG1vZGlmaWVyOiBwcm9wLm1vZGlmaWVyLFxuXHQgICAgICAgICAgICAgICAgc25pcHBldDogcHJvcC5tb2RpZmllcih4IGAke3RoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlfVske3RoaXMuaW5kZXhfbmFtZX1dYCksXG5cdCAgICAgICAgICAgICAgICBzdG9yZSxcblx0ICAgICAgICAgICAgICAgIHRhaWw6IHByb3AubW9kaWZpZXIoeCBgWyR7dGhpcy5pbmRleF9uYW1lfV1gKVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLmluZGV4KSB7XG5cdCAgICAgICAgICAgIHRoaXMuYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKHRoaXMubm9kZS5pbmRleCk7IC8vIHRoaXMgcHJldmVudHMgbmFtZSBjb2xsaXNpb25zICgjMTI1NClcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVuZGVyZXIuYmxvY2tzLnB1c2godGhpcy5ibG9jayk7XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudCA9IG5ldyBGcmFnbWVudFdyYXBwZXIocmVuZGVyZXIsIHRoaXMuYmxvY2ssIG5vZGUuY2hpbGRyZW4sIHRoaXMsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZyk7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5lbHNlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZWxzZSA9IG5ldyBFbHNlQmxvY2tXcmFwcGVyKHJlbmRlcmVyLCBibG9jaywgdGhpcywgdGhpcy5ub2RlLmVsc2UsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZyk7XG5cdCAgICAgICAgICAgIHJlbmRlcmVyLmJsb2Nrcy5wdXNoKHRoaXMuZWxzZS5ibG9jayk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmVsc2UuaXNfZHluYW1pYykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5hZGRfZGVwZW5kZW5jaWVzKHRoaXMuZWxzZS5ibG9jay5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJsb2NrLmFkZF9kZXBlbmRlbmNpZXModGhpcy5ibG9jay5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIGlmICh0aGlzLmJsb2NrLmhhc19vdXRyb3MgfHwgKHRoaXMuZWxzZSAmJiB0aGlzLmVsc2UuYmxvY2suaGFzX291dHJvcykpIHtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX291dHJvKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnQubm9kZXMubGVuZ3RoID09PSAwKVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgY29uc3QgeyByZW5kZXJlciB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCB7IGNvbXBvbmVudCB9ID0gcmVuZGVyZXI7XG5cdCAgICAgICAgY29uc3QgbmVlZHNfYW5jaG9yID0gdGhpcy5uZXh0XG5cdCAgICAgICAgICAgID8gIXRoaXMubmV4dC5pc19kb21fbm9kZSgpIDpcblx0ICAgICAgICAgICAgIXBhcmVudF9ub2RlIHx8ICF0aGlzLnBhcmVudC5pc19kb21fbm9kZSgpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dF9wcm9wcyA9IHRoaXMubm9kZS5jb250ZXh0cy5tYXAocHJvcCA9PiBiIGBjaGlsZF9jdHhbJHtyZW5kZXJlci5jb250ZXh0X2xvb2t1cC5nZXQocHJvcC5rZXkubmFtZSkuaW5kZXh9XSA9ICR7cHJvcC5tb2RpZmllcih4IGBsaXN0W2ldYCl9O2ApO1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuaGFzX2JpbmRpbmcpXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dF9wcm9wcy5wdXNoKGIgYGNoaWxkX2N0eFske3JlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldCh0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZS5uYW1lKS5pbmRleH1dID0gbGlzdDtgKTtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLmhhc19iaW5kaW5nIHx8IHRoaXMubm9kZS5oYXNfaW5kZXhfYmluZGluZyB8fCB0aGlzLm5vZGUuaW5kZXgpXG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dF9wcm9wcy5wdXNoKGIgYGNoaWxkX2N0eFske3JlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldCh0aGlzLmluZGV4X25hbWUubmFtZSkuaW5kZXh9XSA9IGk7YCk7XG5cdCAgICAgICAgY29uc3Qgc25pcHBldCA9IHRoaXMubm9kZS5leHByZXNzaW9uLm1hbmlwdWxhdGUoYmxvY2spO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgbGV0ICR7dGhpcy52YXJzLmVhY2hfYmxvY2tfdmFsdWV9ID0gJHtzbmlwcGV0fTtgKTtcblx0ICAgICAgICBpZiAodGhpcy5yZW5kZXJlci5vcHRpb25zLmRldikge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYEB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KCR7dGhpcy52YXJzLmVhY2hfYmxvY2tfdmFsdWV9KTtgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gVE9ETyB3aGljaCBpcyBiZXR0ZXIg4oCUIE9iamVjdC5jcmVhdGUoYXJyYXkpIG9yIGFycmF5LnNsaWNlKCk/XG5cdCAgICAgICAgcmVuZGVyZXIuYmxvY2tzLnB1c2goYiBgXG5cdFx0XHRmdW5jdGlvbiAke3RoaXMudmFycy5nZXRfZWFjaF9jb250ZXh0fSgjY3R4LCBsaXN0LCBpKSB7XG5cdFx0XHRcdGNvbnN0IGNoaWxkX2N0eCA9ICNjdHguc2xpY2UoKTtcblx0XHRcdFx0JHt0aGlzLmNvbnRleHRfcHJvcHN9XG5cdFx0XHRcdHJldHVybiBjaGlsZF9jdHg7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgaW5pdGlhbF9hbmNob3Jfbm9kZSA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBwYXJlbnRfbm9kZSA/ICdudWxsJyA6ICcjYW5jaG9yJyB9O1xuXHQgICAgICAgIGNvbnN0IGluaXRpYWxfbW91bnRfbm9kZSA9IHBhcmVudF9ub2RlIHx8IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnI3RhcmdldCcgfTtcblx0ICAgICAgICBjb25zdCB1cGRhdGVfYW5jaG9yX25vZGUgPSBuZWVkc19hbmNob3Jcblx0ICAgICAgICAgICAgPyBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fYW5jaG9yYClcblx0ICAgICAgICAgICAgOiAodGhpcy5uZXh0ICYmIHRoaXMubmV4dC52YXIpIHx8IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnbnVsbCcgfTtcblx0ICAgICAgICBjb25zdCB1cGRhdGVfbW91bnRfbm9kZSA9IHRoaXMuZ2V0X3VwZGF0ZV9tb3VudF9ub2RlKHVwZGF0ZV9hbmNob3Jfbm9kZSk7XG5cdCAgICAgICAgY29uc3QgYXJncyA9IHtcblx0ICAgICAgICAgICAgYmxvY2ssXG5cdCAgICAgICAgICAgIHBhcmVudF9ub2RlLFxuXHQgICAgICAgICAgICBwYXJlbnRfbm9kZXMsXG5cdCAgICAgICAgICAgIHNuaXBwZXQsXG5cdCAgICAgICAgICAgIGluaXRpYWxfYW5jaG9yX25vZGUsXG5cdCAgICAgICAgICAgIGluaXRpYWxfbW91bnRfbm9kZSxcblx0ICAgICAgICAgICAgdXBkYXRlX2FuY2hvcl9ub2RlLFxuXHQgICAgICAgICAgICB1cGRhdGVfbW91bnRfbm9kZVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgY29uc3QgYWxsX2RlcGVuZGVuY2llcyA9IG5ldyBTZXQodGhpcy5ibG9jay5kZXBlbmRlbmNpZXMpOyAvLyBUT0RPIHNob3VsZCBiZSBkeW5hbWljIGRlcHMgb25seVxuXHQgICAgICAgIHRoaXMubm9kZS5leHByZXNzaW9uLmR5bmFtaWNfZGVwZW5kZW5jaWVzKCkuZm9yRWFjaCgoZGVwZW5kZW5jeSkgPT4ge1xuXHQgICAgICAgICAgICBhbGxfZGVwZW5kZW5jaWVzLmFkZChkZXBlbmRlbmN5KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGFsbF9kZXBlbmRlbmNpZXM7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5rZXkpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJfa2V5ZWQoYXJncyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnJlbmRlcl91bmtleWVkKGFyZ3MpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5ibG9jay5oYXNfaW50cm9fbWV0aG9kIHx8IHRoaXMuYmxvY2suaGFzX291dHJvX21ldGhvZCkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW50cm8ucHVzaChiIGBcblx0XHRcdFx0Zm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7dGhpcy52YXJzLmRhdGFfbGVuZ3RofTsgI2kgKz0gMSkge1xuXHRcdFx0XHRcdEB0cmFuc2l0aW9uX2luKCR7dGhpcy52YXJzLml0ZXJhdGlvbnN9WyNpXSk7XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobmVlZHNfYW5jaG9yKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF9lbGVtZW50KHVwZGF0ZV9hbmNob3Jfbm9kZSwgeCBgQGVtcHR5KClgLCBwYXJlbnRfbm9kZXMgJiYgeCBgQGVtcHR5KClgLCBwYXJlbnRfbm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmVsc2UpIHtcblx0ICAgICAgICAgICAgY29uc3QgZWFjaF9ibG9ja19lbHNlID0gY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9lbHNlYCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgbGV0ICR7ZWFjaF9ibG9ja19lbHNlfSA9IG51bGw7YCk7XG5cdCAgICAgICAgICAgIC8vIFRPRE8gbmVhdGVuIHRoaXMgdXAuLi4gd2lsbCBlbmQgdXAgd2l0aCBhbiBlbXB0eSBsaW5lIGluIHRoZSBibG9ja1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoISR7dGhpcy52YXJzLmRhdGFfbGVuZ3RofSkge1xuXHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfSA9ICR7dGhpcy5lbHNlLmJsb2NrLm5hbWV9KCNjdHgpO1xuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNyZWF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtlYWNoX2Jsb2NrX2Vsc2V9KSB7XG5cdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9LmMoKTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNsYWltLnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCR7ZWFjaF9ibG9ja19lbHNlfSkge1xuXHRcdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9LmwoJHtwYXJlbnRfbm9kZXN9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtlYWNoX2Jsb2NrX2Vsc2V9KSB7XG5cdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9Lm0oJHtpbml0aWFsX21vdW50X25vZGV9LCAke2luaXRpYWxfYW5jaG9yX25vZGV9KTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGhhc190cmFuc2l0aW9ucyA9ICEhKHRoaXMuZWxzZS5ibG9jay5oYXNfaW50cm9fbWV0aG9kIHx8IHRoaXMuZWxzZS5ibG9jay5oYXNfb3V0cm9fbWV0aG9kKTtcblx0ICAgICAgICAgICAgY29uc3QgZGVzdHJveV9ibG9ja19lbHNlID0gdGhpcy5lbHNlLmJsb2NrLmhhc19vdXRyb19tZXRob2Rcblx0ICAgICAgICAgICAgICAgID8gYiBgXG5cdFx0XHRcdFx0QGdyb3VwX291dHJvcygpO1xuXHRcdFx0XHRcdEB0cmFuc2l0aW9uX291dCgke2VhY2hfYmxvY2tfZWxzZX0sIDEsIDEsICgpID0+IHtcblx0XHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfSA9IG51bGw7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0QGNoZWNrX291dHJvcygpO2Bcblx0ICAgICAgICAgICAgICAgIDogYiBgXG5cdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9LmQoMSk7XG5cdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9ID0gbnVsbDtgO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5lbHNlLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZXMucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoISR7dGhpcy52YXJzLmRhdGFfbGVuZ3RofSAmJiAke2VhY2hfYmxvY2tfZWxzZX0pIHtcblx0XHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfS5wKCNjdHgsICNkaXJ0eSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghJHt0aGlzLnZhcnMuZGF0YV9sZW5ndGh9KSB7XG5cdFx0XHRcdFx0XHQke2VhY2hfYmxvY2tfZWxzZX0gPSAke3RoaXMuZWxzZS5ibG9jay5uYW1lfSgjY3R4KTtcblx0XHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfS5jKCk7XG5cdFx0XHRcdFx0XHQke2hhc190cmFuc2l0aW9ucyAmJiBiIGBAdHJhbnNpdGlvbl9pbigke2VhY2hfYmxvY2tfZWxzZX0sIDEpO2B9XG5cdFx0XHRcdFx0XHQke2VhY2hfYmxvY2tfZWxzZX0ubSgke3VwZGF0ZV9tb3VudF9ub2RlfSwgJHt1cGRhdGVfYW5jaG9yX25vZGV9KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCR7ZWFjaF9ibG9ja19lbHNlfSkge1xuXHRcdFx0XHRcdFx0JHtkZXN0cm95X2Jsb2NrX2Vsc2V9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZXMucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoJHt0aGlzLnZhcnMuZGF0YV9sZW5ndGh9KSB7XG5cdFx0XHRcdFx0XHRpZiAoJHtlYWNoX2Jsb2NrX2Vsc2V9KSB7XG5cdFx0XHRcdFx0XHRcdCR7ZGVzdHJveV9ibG9ja19lbHNlfTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCEke2VhY2hfYmxvY2tfZWxzZX0pIHtcblx0XHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfSA9ICR7dGhpcy5lbHNlLmJsb2NrLm5hbWV9KCNjdHgpO1xuXHRcdFx0XHRcdFx0JHtlYWNoX2Jsb2NrX2Vsc2V9LmMoKTtcblx0XHRcdFx0XHRcdCR7aGFzX3RyYW5zaXRpb25zICYmIGIgYEB0cmFuc2l0aW9uX2luKCR7ZWFjaF9ibG9ja19lbHNlfSwgMSk7YH1cblx0XHRcdFx0XHRcdCR7ZWFjaF9ibG9ja19lbHNlfS5tKCR7dXBkYXRlX21vdW50X25vZGV9LCAke3VwZGF0ZV9hbmNob3Jfbm9kZX0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBcblx0XHRcdFx0aWYgKCR7ZWFjaF9ibG9ja19lbHNlfSkgJHtlYWNoX2Jsb2NrX2Vsc2V9LmQoJHtwYXJlbnRfbm9kZSA/ICcnIDogJ2RldGFjaGluZyd9KTtcblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy51cGRhdGVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdGlmICgke2Jsb2NrLnJlbmRlcmVyLmRpcnR5KEFycmF5LmZyb20oYWxsX2RlcGVuZGVuY2llcykpfSkge1xuXHRcdFx0XHRcdCR7dGhpcy51cGRhdGVzfVxuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudC5yZW5kZXIodGhpcy5ibG9jaywgbnVsbCwgeCBgI25vZGVzYCk7XG5cdCAgICAgICAgaWYgKHRoaXMuZWxzZSkge1xuXHQgICAgICAgICAgICB0aGlzLmVsc2UuZnJhZ21lbnQucmVuZGVyKHRoaXMuZWxzZS5ibG9jaywgbnVsbCwgeCBgI25vZGVzYCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVuZGVyX2tleWVkKHsgYmxvY2ssIHBhcmVudF9ub2RlLCBwYXJlbnRfbm9kZXMsIHNuaXBwZXQsIGluaXRpYWxfYW5jaG9yX25vZGUsIGluaXRpYWxfbW91bnRfbm9kZSwgdXBkYXRlX2FuY2hvcl9ub2RlLCB1cGRhdGVfbW91bnRfbm9kZSB9KSB7XG5cdCAgICAgICAgY29uc3QgeyBjcmVhdGVfZWFjaF9ibG9jaywgaXRlcmF0aW9ucywgZGF0YV9sZW5ndGgsIHZpZXdfbGVuZ3RoIH0gPSB0aGlzLnZhcnM7XG5cdCAgICAgICAgY29uc3QgZ2V0X2tleSA9IGJsb2NrLmdldF91bmlxdWVfbmFtZSgnZ2V0X2tleScpO1xuXHQgICAgICAgIGNvbnN0IGxvb2t1cCA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9sb29rdXBgKTtcblx0ICAgICAgICBibG9jay5hZGRfdmFyaWFibGUoaXRlcmF0aW9ucywgeCBgW11gKTtcblx0ICAgICAgICBibG9jay5hZGRfdmFyaWFibGUobG9va3VwLCB4IGBuZXcgQF9NYXAoKWApO1xuXHQgICAgICAgIGlmICh0aGlzLmZyYWdtZW50Lm5vZGVzWzBdLmlzX2RvbV9ub2RlKCkpIHtcblx0ICAgICAgICAgICAgdGhpcy5ibG9jay5maXJzdCA9IHRoaXMuZnJhZ21lbnQubm9kZXNbMF0udmFyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5ibG9jay5maXJzdCA9IHRoaXMuYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKCdmaXJzdCcpO1xuXHQgICAgICAgICAgICB0aGlzLmJsb2NrLmFkZF9lbGVtZW50KHRoaXMuYmxvY2suZmlyc3QsIHggYEBlbXB0eSgpYCwgcGFyZW50X25vZGVzICYmIHggYEBlbXB0eSgpYCwgbnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRjb25zdCAke2dldF9rZXl9ID0gI2N0eCA9PiAke3RoaXMubm9kZS5rZXkubWFuaXB1bGF0ZShibG9jayl9O1xuXG5cdFx0XHQke3RoaXMucmVuZGVyZXIub3B0aW9ucy5kZXYgJiYgYiBgQHZhbGlkYXRlX2VhY2hfa2V5cygjY3R4LCAke3RoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlfSwgJHt0aGlzLnZhcnMuZ2V0X2VhY2hfY29udGV4dH0sICR7Z2V0X2tleX0pO2B9XG5cdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgJHtkYXRhX2xlbmd0aH07ICNpICs9IDEpIHtcblx0XHRcdFx0bGV0IGNoaWxkX2N0eCA9ICR7dGhpcy52YXJzLmdldF9lYWNoX2NvbnRleHR9KCNjdHgsICR7dGhpcy52YXJzLmVhY2hfYmxvY2tfdmFsdWV9LCAjaSk7XG5cdFx0XHRcdGxldCBrZXkgPSAke2dldF9rZXl9KGNoaWxkX2N0eCk7XG5cdFx0XHRcdCR7bG9va3VwfS5zZXQoa2V5LCAke2l0ZXJhdGlvbnN9WyNpXSA9ICR7Y3JlYXRlX2VhY2hfYmxvY2t9KGtleSwgY2hpbGRfY3R4KSk7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmNyZWF0ZS5wdXNoKGIgYFxuXHRcdFx0Zm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7dmlld19sZW5ndGh9OyAjaSArPSAxKSB7XG5cdFx0XHRcdCR7aXRlcmF0aW9uc31bI2ldLmMoKTtcblx0XHRcdH1cblx0XHRgKTtcblx0ICAgICAgICBpZiAocGFyZW50X25vZGVzICYmIHRoaXMucmVuZGVyZXIub3B0aW9ucy5oeWRyYXRhYmxlKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYFxuXHRcdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgJHt2aWV3X2xlbmd0aH07ICNpICs9IDEpIHtcblx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5sKCR7cGFyZW50X25vZGVzfSk7XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBibG9jay5jaHVua3MubW91bnQucHVzaChiIGBcblx0XHRcdGZvciAobGV0ICNpID0gMDsgI2kgPCAke3ZpZXdfbGVuZ3RofTsgI2kgKz0gMSkge1xuXHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5tKCR7aW5pdGlhbF9tb3VudF9ub2RlfSwgJHtpbml0aWFsX2FuY2hvcl9ub2RlfSk7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgZHluYW1pYyA9IHRoaXMuYmxvY2suaGFzX3VwZGF0ZV9tZXRob2Q7XG5cdCAgICAgICAgY29uc3QgZGVzdHJveSA9IHRoaXMubm9kZS5oYXNfYW5pbWF0aW9uXG5cdCAgICAgICAgICAgID8gKHRoaXMuYmxvY2suaGFzX291dHJvc1xuXHQgICAgICAgICAgICAgICAgPyBgQGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2tgXG5cdCAgICAgICAgICAgICAgICA6IGBAZml4X2FuZF9kZXN0cm95X2Jsb2NrYClcblx0ICAgICAgICAgICAgOiB0aGlzLmJsb2NrLmhhc19vdXRyb3Ncblx0ICAgICAgICAgICAgICAgID8gYEBvdXRyb19hbmRfZGVzdHJveV9ibG9ja2Bcblx0ICAgICAgICAgICAgICAgIDogYEBkZXN0cm95X2Jsb2NrYDtcblx0ICAgICAgICBpZiAodGhpcy5kZXBlbmRlbmNpZXMuc2l6ZSkge1xuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZXMucHVzaChiIGBcblx0XHRcdFx0Y29uc3QgJHt0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZX0gPSAke3NuaXBwZXR9O1xuXHRcdFx0XHQke3RoaXMucmVuZGVyZXIub3B0aW9ucy5kZXYgJiYgYiBgQHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoJHt0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZX0pO2B9XG5cblx0XHRcdFx0JHt0aGlzLmJsb2NrLmhhc19vdXRyb3MgJiYgYiBgQGdyb3VwX291dHJvcygpO2B9XG5cdFx0XHRcdCR7dGhpcy5ub2RlLmhhc19hbmltYXRpb24gJiYgYiBgZm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7dmlld19sZW5ndGh9OyAjaSArPSAxKSAke2l0ZXJhdGlvbnN9WyNpXS5yKCk7YH1cblx0XHRcdFx0JHt0aGlzLnJlbmRlcmVyLm9wdGlvbnMuZGV2ICYmIGIgYEB2YWxpZGF0ZV9lYWNoX2tleXMoI2N0eCwgJHt0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZX0sICR7dGhpcy52YXJzLmdldF9lYWNoX2NvbnRleHR9LCAke2dldF9rZXl9KTtgfVxuXHRcdFx0XHQke2l0ZXJhdGlvbnN9ID0gQHVwZGF0ZV9rZXllZF9lYWNoKCR7aXRlcmF0aW9uc30sICNkaXJ0eSwgJHtnZXRfa2V5fSwgJHtkeW5hbWljID8gMSA6IDB9LCAjY3R4LCAke3RoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlfSwgJHtsb29rdXB9LCAke3VwZGF0ZV9tb3VudF9ub2RlfSwgJHtkZXN0cm95fSwgJHtjcmVhdGVfZWFjaF9ibG9ja30sICR7dXBkYXRlX2FuY2hvcl9ub2RlfSwgJHt0aGlzLnZhcnMuZ2V0X2VhY2hfY29udGV4dH0pO1xuXHRcdFx0XHQke3RoaXMubm9kZS5oYXNfYW5pbWF0aW9uICYmIGIgYGZvciAobGV0ICNpID0gMDsgI2kgPCAke3ZpZXdfbGVuZ3RofTsgI2kgKz0gMSkgJHtpdGVyYXRpb25zfVsjaV0uYSgpO2B9XG5cdFx0XHRcdCR7dGhpcy5ibG9jay5oYXNfb3V0cm9zICYmIGIgYEBjaGVja19vdXRyb3MoKTtgfVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmJsb2NrLmhhc19vdXRyb3MpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgXG5cdFx0XHRcdGZvciAobGV0ICNpID0gMDsgI2kgPCAke3ZpZXdfbGVuZ3RofTsgI2kgKz0gMSkge1xuXHRcdFx0XHRcdEB0cmFuc2l0aW9uX291dCgke2l0ZXJhdGlvbnN9WyNpXSk7XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYFxuXHRcdFx0Zm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7dmlld19sZW5ndGh9OyAjaSArPSAxKSB7XG5cdFx0XHRcdCR7aXRlcmF0aW9uc31bI2ldLmQoJHtwYXJlbnRfbm9kZSA/IG51bGwgOiAnZGV0YWNoaW5nJ30pO1xuXHRcdFx0fVxuXHRcdGApO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyX3Vua2V5ZWQoeyBibG9jaywgcGFyZW50X25vZGVzLCBzbmlwcGV0LCBpbml0aWFsX2FuY2hvcl9ub2RlLCBpbml0aWFsX21vdW50X25vZGUsIHVwZGF0ZV9hbmNob3Jfbm9kZSwgdXBkYXRlX21vdW50X25vZGUgfSkge1xuXHQgICAgICAgIGNvbnN0IHsgY3JlYXRlX2VhY2hfYmxvY2ssIGl0ZXJhdGlvbnMsIGZpeGVkX2xlbmd0aCwgZGF0YV9sZW5ndGgsIHZpZXdfbGVuZ3RoIH0gPSB0aGlzLnZhcnM7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdGxldCAke2l0ZXJhdGlvbnN9ID0gW107XG5cblx0XHRcdGZvciAobGV0ICNpID0gMDsgI2kgPCAke2RhdGFfbGVuZ3RofTsgI2kgKz0gMSkge1xuXHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXSA9ICR7Y3JlYXRlX2VhY2hfYmxvY2t9KCR7dGhpcy52YXJzLmdldF9lYWNoX2NvbnRleHR9KCNjdHgsICR7dGhpcy52YXJzLmVhY2hfYmxvY2tfdmFsdWV9LCAjaSkpO1xuXHRcdFx0fVxuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGBcblx0XHRcdGZvciAobGV0ICNpID0gMDsgI2kgPCAke3ZpZXdfbGVuZ3RofTsgI2kgKz0gMSkge1xuXHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5jKCk7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgaWYgKHBhcmVudF9ub2RlcyAmJiB0aGlzLnJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuY2xhaW0ucHVzaChiIGBcblx0XHRcdFx0Zm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7dmlld19sZW5ndGh9OyAjaSArPSAxKSB7XG5cdFx0XHRcdFx0JHtpdGVyYXRpb25zfVsjaV0ubCgke3BhcmVudF9ub2Rlc30pO1xuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgXG5cdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgJHt2aWV3X2xlbmd0aH07ICNpICs9IDEpIHtcblx0XHRcdFx0JHtpdGVyYXRpb25zfVsjaV0ubSgke2luaXRpYWxfbW91bnRfbm9kZX0sICR7aW5pdGlhbF9hbmNob3Jfbm9kZX0pO1xuXHRcdFx0fVxuXHRcdGApO1xuXHQgICAgICAgIGlmICh0aGlzLmRlcGVuZGVuY2llcy5zaXplKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGhhc190cmFuc2l0aW9ucyA9ICEhKHRoaXMuYmxvY2suaGFzX2ludHJvX21ldGhvZCB8fCB0aGlzLmJsb2NrLmhhc19vdXRyb19tZXRob2QpO1xuXHQgICAgICAgICAgICBjb25zdCBmb3JfbG9vcF9ib2R5ID0gdGhpcy5ibG9jay5oYXNfdXBkYXRlX21ldGhvZFxuXHQgICAgICAgICAgICAgICAgPyBiIGBcblx0XHRcdFx0XHRpZiAoJHtpdGVyYXRpb25zfVsjaV0pIHtcblx0XHRcdFx0XHRcdCR7aXRlcmF0aW9uc31bI2ldLnAoY2hpbGRfY3R4LCAjZGlydHkpO1xuXHRcdFx0XHRcdFx0JHtoYXNfdHJhbnNpdGlvbnMgJiYgYiBgQHRyYW5zaXRpb25faW4oJHt0aGlzLnZhcnMuaXRlcmF0aW9uc31bI2ldLCAxKTtgfVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXSA9ICR7Y3JlYXRlX2VhY2hfYmxvY2t9KGNoaWxkX2N0eCk7XG5cdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5jKCk7XG5cdFx0XHRcdFx0XHQke2hhc190cmFuc2l0aW9ucyAmJiBiIGBAdHJhbnNpdGlvbl9pbigke3RoaXMudmFycy5pdGVyYXRpb25zfVsjaV0sIDEpO2B9XG5cdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5tKCR7dXBkYXRlX21vdW50X25vZGV9LCAke3VwZGF0ZV9hbmNob3Jfbm9kZX0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YFxuXHQgICAgICAgICAgICAgICAgOiBoYXNfdHJhbnNpdGlvbnNcblx0ICAgICAgICAgICAgICAgICAgICA/IGIgYFxuXHRcdFx0XHRcdFx0aWYgKCR7aXRlcmF0aW9uc31bI2ldKSB7XG5cdFx0XHRcdFx0XHRcdEB0cmFuc2l0aW9uX2luKCR7dGhpcy52YXJzLml0ZXJhdGlvbnN9WyNpXSwgMSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXSA9ICR7Y3JlYXRlX2VhY2hfYmxvY2t9KGNoaWxkX2N0eCk7XG5cdFx0XHRcdFx0XHRcdCR7aXRlcmF0aW9uc31bI2ldLmMoKTtcblx0XHRcdFx0XHRcdFx0QHRyYW5zaXRpb25faW4oJHt0aGlzLnZhcnMuaXRlcmF0aW9uc31bI2ldLCAxKTtcblx0XHRcdFx0XHRcdFx0JHtpdGVyYXRpb25zfVsjaV0ubSgke3VwZGF0ZV9tb3VudF9ub2RlfSwgJHt1cGRhdGVfYW5jaG9yX25vZGV9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRgXG5cdCAgICAgICAgICAgICAgICAgICAgOiBiIGBcblx0XHRcdFx0XHRcdGlmICghJHtpdGVyYXRpb25zfVsjaV0pIHtcblx0XHRcdFx0XHRcdFx0JHtpdGVyYXRpb25zfVsjaV0gPSAke2NyZWF0ZV9lYWNoX2Jsb2NrfShjaGlsZF9jdHgpO1xuXHRcdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5jKCk7XG5cdFx0XHRcdFx0XHRcdCR7aXRlcmF0aW9uc31bI2ldLm0oJHt1cGRhdGVfbW91bnRfbm9kZX0sICR7dXBkYXRlX2FuY2hvcl9ub2RlfSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YDtcblx0ICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kID8gMCA6IGAjb2xkX2xlbmd0aGA7XG5cdCAgICAgICAgICAgIGxldCByZW1vdmVfb2xkX2Jsb2Nrcztcblx0ICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2suaGFzX291dHJvcykge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgb3V0ID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKCdvdXQnKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRcdFx0Y29uc3QgJHtvdXR9ID0gaSA9PiBAdHJhbnNpdGlvbl9vdXQoJHtpdGVyYXRpb25zfVtpXSwgMSwgMSwgKCkgPT4ge1xuXHRcdFx0XHRcdFx0JHtpdGVyYXRpb25zfVtpXSA9IG51bGw7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgcmVtb3ZlX29sZF9ibG9ja3MgPSBiIGBcblx0XHRcdFx0XHRAZ3JvdXBfb3V0cm9zKCk7XG5cdFx0XHRcdFx0Zm9yICgjaSA9ICR7ZGF0YV9sZW5ndGh9OyAjaSA8ICR7dmlld19sZW5ndGh9OyAjaSArPSAxKSB7XG5cdFx0XHRcdFx0XHQke291dH0oI2kpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRAY2hlY2tfb3V0cm9zKCk7XG5cdFx0XHRcdGA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZW1vdmVfb2xkX2Jsb2NrcyA9IGIgYFxuXHRcdFx0XHRcdGZvciAoJHt0aGlzLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kID8gbnVsbCA6IHggYCNpID0gJHtkYXRhX2xlbmd0aH1gfTsgI2kgPCAke3RoaXMuYmxvY2suaGFzX3VwZGF0ZV9tZXRob2QgPyB2aWV3X2xlbmd0aCA6ICcjb2xkX2xlbmd0aCd9OyAjaSArPSAxKSB7XG5cdFx0XHRcdFx0XHQke2l0ZXJhdGlvbnN9WyNpXS5kKDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkeyFmaXhlZF9sZW5ndGggJiYgYiBgJHt2aWV3X2xlbmd0aH0gPSAke2RhdGFfbGVuZ3RofTtgfVxuXHRcdFx0XHRgO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vIFdlIGRlY2xhcmUgYGlgIGFzIGJsb2NrIHNjb3BlZCBoZXJlLCBhcyB0aGUgYHJlbW92ZV9vbGRfYmxvY2tzYCBjb2RlXG5cdCAgICAgICAgICAgIC8vIG1heSByZWx5IG9uIGNvbnRpbnVpbmcgd2hlcmUgdGhpcyBpdGVyYXRpb24gc3RvcHBlZC5cblx0ICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gYiBgXG5cdFx0XHRcdCR7IXRoaXMuYmxvY2suaGFzX3VwZGF0ZV9tZXRob2QgJiYgYiBgY29uc3QgI29sZF9sZW5ndGggPSAke3RoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlfS5sZW5ndGg7YH1cblx0XHRcdFx0JHt0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZX0gPSAke3NuaXBwZXR9O1xuXHRcdFx0XHQke3RoaXMucmVuZGVyZXIub3B0aW9ucy5kZXYgJiYgYiBgQHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoJHt0aGlzLnZhcnMuZWFjaF9ibG9ja192YWx1ZX0pO2B9XG5cblx0XHRcdFx0bGV0ICNpO1xuXHRcdFx0XHRmb3IgKCNpID0gJHtzdGFydH07ICNpIDwgJHtkYXRhX2xlbmd0aH07ICNpICs9IDEpIHtcblx0XHRcdFx0XHRjb25zdCBjaGlsZF9jdHggPSAke3RoaXMudmFycy5nZXRfZWFjaF9jb250ZXh0fSgjY3R4LCAke3RoaXMudmFycy5lYWNoX2Jsb2NrX3ZhbHVlfSwgI2kpO1xuXG5cdFx0XHRcdFx0JHtmb3JfbG9vcF9ib2R5fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0JHtyZW1vdmVfb2xkX2Jsb2Nrc31cblx0XHRcdGA7XG5cdCAgICAgICAgICAgIHRoaXMudXBkYXRlcy5wdXNoKHVwZGF0ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmJsb2NrLmhhc19vdXRyb3MpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgXG5cdFx0XHRcdCR7aXRlcmF0aW9uc30gPSAke2l0ZXJhdGlvbnN9LmZpbHRlcihAX0Jvb2xlYW4pO1xuXHRcdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgJHt2aWV3X2xlbmd0aH07ICNpICs9IDEpIHtcblx0XHRcdFx0XHRAdHJhbnNpdGlvbl9vdXQoJHtpdGVyYXRpb25zfVsjaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBAZGVzdHJveV9lYWNoKCR7aXRlcmF0aW9uc30sIGRldGFjaGluZyk7YCk7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBzdHJpbmdfbGl0ZXJhbChkYXRhKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6ICdMaXRlcmFsJyxcblx0ICAgICAgICB2YWx1ZTogZGF0YVxuXHQgICAgfTtcblx0fVxuXHRjb25zdCBlc2NhcGVkID0ge1xuXHQgICAgJ1wiJzogJyZxdW90OycsXG5cdCAgICBcIidcIjogJyYjMzk7Jyxcblx0ICAgICcmJzogJyZhbXA7Jyxcblx0ICAgICc8JzogJyZsdDsnLFxuXHQgICAgJz4nOiAnJmd0OycsXG5cdH07XG5cdGZ1bmN0aW9uIGVzY2FwZV9odG1sKGh0bWwpIHtcblx0ICAgIHJldHVybiBTdHJpbmcoaHRtbCkucmVwbGFjZSgvW1wiJyY8Pl0vZywgbWF0Y2ggPT4gZXNjYXBlZFttYXRjaF0pO1xuXHR9XG5cdGZ1bmN0aW9uIGVzY2FwZV90ZW1wbGF0ZShzdHIpIHtcblx0ICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFxcJHt8YHxcXFxcKS9nLCAnXFxcXCQxJyk7XG5cdH1cblxuXHRjbGFzcyBUZXh0V3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIGRhdGEpIHtcblx0ICAgICAgICBzdXBlcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSk7XG5cdCAgICAgICAgdGhpcy5za2lwID0gdGhpcy5ub2RlLnNob3VsZF9za2lwKCk7XG5cdCAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblx0ICAgICAgICB0aGlzLnZhciA9ICh0aGlzLnNraXAgPyBudWxsIDogeCBgdGApO1xuXHQgICAgfVxuXHQgICAgdXNlX3NwYWNlKCkge1xuXHQgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLmNvbXBvbmVudC5jb21wb25lbnRfb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UpXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICBpZiAoL1tcXFNcXHUwMEEwXS8udGVzdCh0aGlzLmRhdGEpKVxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5ub2RlO1xuXHQgICAgICAgIHdoaWxlIChub2RlKSB7XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdFbGVtZW50JyAmJiBub2RlLm5hbWUgPT09ICdwcmUnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIGlmICh0aGlzLnNraXApXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICBjb25zdCB1c2Vfc3BhY2UgPSB0aGlzLnVzZV9zcGFjZSgpO1xuXHQgICAgICAgIGJsb2NrLmFkZF9lbGVtZW50KHRoaXMudmFyLCB1c2Vfc3BhY2UgPyB4IGBAc3BhY2UoKWAgOiB4IGBAdGV4dChcIiR7dGhpcy5kYXRhfVwiKWAsIHBhcmVudF9ub2RlcyAmJiAodXNlX3NwYWNlID8geCBgQGNsYWltX3NwYWNlKCR7cGFyZW50X25vZGVzfSlgIDogeCBgQGNsYWltX3RleHQoJHtwYXJlbnRfbm9kZXN9LCBcIiR7dGhpcy5kYXRhfVwiKWApLCBwYXJlbnRfbm9kZSk7XG5cdCAgICB9XG5cdH1cblxuXHRjb25zdCBzdmdfYXR0cmlidXRlcyA9ICdhY2NlbnQtaGVpZ2h0IGFjY3VtdWxhdGUgYWRkaXRpdmUgYWxpZ25tZW50LWJhc2VsaW5lIGFsbG93UmVvcmRlciBhbHBoYWJldGljIGFtcGxpdHVkZSBhcmFiaWMtZm9ybSBhc2NlbnQgYXR0cmlidXRlTmFtZSBhdHRyaWJ1dGVUeXBlIGF1dG9SZXZlcnNlIGF6aW11dGggYmFzZUZyZXF1ZW5jeSBiYXNlbGluZS1zaGlmdCBiYXNlUHJvZmlsZSBiYm94IGJlZ2luIGJpYXMgYnkgY2FsY01vZGUgY2FwLWhlaWdodCBjbGFzcyBjbGlwIGNsaXBQYXRoVW5pdHMgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvciBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBjb250ZW50U2NyaXB0VHlwZSBjb250ZW50U3R5bGVUeXBlIGN1cnNvciBjeCBjeSBkIGRlY2VsZXJhdGUgZGVzY2VudCBkaWZmdXNlQ29uc3RhbnQgZGlyZWN0aW9uIGRpc3BsYXkgZGl2aXNvciBkb21pbmFudC1iYXNlbGluZSBkdXIgZHggZHkgZWRnZU1vZGUgZWxldmF0aW9uIGVuYWJsZS1iYWNrZ3JvdW5kIGVuZCBleHBvbmVudCBleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIGZpbGwgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmaWx0ZXIgZmlsdGVyUmVzIGZpbHRlclVuaXRzIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGZvcm1hdCBmcm9tIGZyIGZ4IGZ5IGcxIGcyIGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBnbHlwaFJlZiBncmFkaWVudFRyYW5zZm9ybSBncmFkaWVudFVuaXRzIGhhbmdpbmcgaGVpZ2h0IGhyZWYgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaWQgaWRlb2dyYXBoaWMgaW1hZ2UtcmVuZGVyaW5nIGluIGluMiBpbnRlcmNlcHQgayBrMSBrMiBrMyBrNCBrZXJuZWxNYXRyaXgga2VybmVsVW5pdExlbmd0aCBrZXJuaW5nIGtleVBvaW50cyBrZXlTcGxpbmVzIGtleVRpbWVzIGxhbmcgbGVuZ3RoQWRqdXN0IGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIGxpbWl0aW5nQ29uZUFuZ2xlIGxvY2FsIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgbWFya2VySGVpZ2h0IG1hcmtlclVuaXRzIG1hcmtlcldpZHRoIG1hc2sgbWFza0NvbnRlbnRVbml0cyBtYXNrVW5pdHMgbWF0aGVtYXRpY2FsIG1heCBtZWRpYSBtZXRob2QgbWluIG1vZGUgbmFtZSBudW1PY3RhdmVzIG9mZnNldCBvbmFib3J0IG9uYWN0aXZhdGUgb25iZWdpbiBvbmNsaWNrIG9uZW5kIG9uZXJyb3Igb25mb2N1c2luIG9uZm9jdXNvdXQgb25sb2FkIG9ubW91c2Vkb3duIG9ubW91c2Vtb3ZlIG9ubW91c2VvdXQgb25tb3VzZW92ZXIgb25tb3VzZXVwIG9ucmVwZWF0IG9ucmVzaXplIG9uc2Nyb2xsIG9udW5sb2FkIG9wYWNpdHkgb3BlcmF0b3Igb3JkZXIgb3JpZW50IG9yaWVudGF0aW9uIG9yaWdpbiBvdmVyZmxvdyBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFub3NlLTEgcGFpbnQtb3JkZXIgcGF0aExlbmd0aCBwYXR0ZXJuQ29udGVudFVuaXRzIHBhdHRlcm5UcmFuc2Zvcm0gcGF0dGVyblVuaXRzIHBvaW50ZXItZXZlbnRzIHBvaW50cyBwb2ludHNBdFggcG9pbnRzQXRZIHBvaW50c0F0WiBwcmVzZXJ2ZUFscGhhIHByZXNlcnZlQXNwZWN0UmF0aW8gcHJpbWl0aXZlVW5pdHMgciByYWRpdXMgcmVmWCByZWZZIHJlbmRlcmluZy1pbnRlbnQgcmVwZWF0Q291bnQgcmVwZWF0RHVyIHJlcXVpcmVkRXh0ZW5zaW9ucyByZXF1aXJlZEZlYXR1cmVzIHJlc3RhcnQgcmVzdWx0IHJvdGF0ZSByeCByeSBzY2FsZSBzZWVkIHNoYXBlLXJlbmRlcmluZyBzbG9wZSBzcGFjaW5nIHNwZWN1bGFyQ29uc3RhbnQgc3BlY3VsYXJFeHBvbmVudCBzcGVlZCBzcHJlYWRNZXRob2Qgc3RhcnRPZmZzZXQgc3RkRGV2aWF0aW9uIHN0ZW1oIHN0ZW12IHN0aXRjaFRpbGVzIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3RyaW5nIHN0cm9rZSBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggc3R5bGUgc3VyZmFjZVNjYWxlIHN5c3RlbUxhbmd1YWdlIHRhYmluZGV4IHRhYmxlVmFsdWVzIHRhcmdldCB0YXJnZXRYIHRhcmdldFkgdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHRleHRMZW5ndGggdG8gdHJhbnNmb3JtIHR5cGUgdTEgdTIgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZSB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZhbHVlcyB2ZXJzaW9uIHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHZpZXdCb3ggdmlld1RhcmdldCB2aXNpYmlsaXR5IHdpZHRoIHdpZHRocyB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHggeC1oZWlnaHQgeDEgeDIgeENoYW5uZWxTZWxlY3RvciB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWw6bGFuZyB4bWw6c3BhY2UgeSB5MSB5MiB5Q2hhbm5lbFNlbGVjdG9yIHogem9vbUFuZFBhbicuc3BsaXQoJyAnKTtcblx0Y29uc3Qgc3ZnX2F0dHJpYnV0ZV9sb29rdXAgPSBuZXcgTWFwKCk7XG5cdHN2Z19hdHRyaWJ1dGVzLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICBzdmdfYXR0cmlidXRlX2xvb2t1cC5zZXQobmFtZS50b0xvd2VyQ2FzZSgpLCBuYW1lKTtcblx0fSk7XG5cdGZ1bmN0aW9uIGZpeF9hdHRyaWJ1dGVfY2FzaW5nKG5hbWUpIHtcblx0ICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICByZXR1cm4gc3ZnX2F0dHJpYnV0ZV9sb29rdXAuZ2V0KG5hbWUpIHx8IG5hbWU7XG5cdH1cblxuXHRjb25zdCBodG1sID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xuXHRjb25zdCBtYXRobWwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCc7XG5cdGNvbnN0IHN2ZyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cdGNvbnN0IHhsaW5rID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXHRjb25zdCB4bWwgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcblx0Y29uc3QgeG1sbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucyc7XG5cdGNvbnN0IHZhbGlkX25hbWVzcGFjZXMgPSBbXG5cdCAgICAnaHRtbCcsXG5cdCAgICAnbWF0aG1sJyxcblx0ICAgICdzdmcnLFxuXHQgICAgJ3hsaW5rJyxcblx0ICAgICd4bWwnLFxuXHQgICAgJ3htbG5zJyxcblx0ICAgIGh0bWwsXG5cdCAgICBtYXRobWwsXG5cdCAgICBzdmcsXG5cdCAgICB4bGluayxcblx0ICAgIHhtbCxcblx0ICAgIHhtbG5zLFxuXHRdO1xuXHRjb25zdCBuYW1lc3BhY2VzID0geyBodG1sLCBtYXRobWwsIHN2ZywgeGxpbmssIHhtbCwgeG1sbnMgfTtcblxuXHRmdW5jdGlvbiBoYW5kbGVfc2VsZWN0X3ZhbHVlX2JpbmRpbmcoYXR0ciwgZGVwZW5kZW5jaWVzKSB7XG5cdCAgICBjb25zdCB7IHBhcmVudCB9ID0gYXR0cjtcblx0ICAgIGlmIChwYXJlbnQubm9kZS5uYW1lID09PSBcInNlbGVjdFwiKSB7XG5cdCAgICAgICAgcGFyZW50LnNlbGVjdF9iaW5kaW5nX2RlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcblx0ICAgICAgICBkZXBlbmRlbmNpZXMuZm9yRWFjaCgocHJvcCkgPT4ge1xuXHQgICAgICAgICAgICBwYXJlbnQucmVuZGVyZXIuY29tcG9uZW50LmluZGlyZWN0X2RlcGVuZGVuY2llcy5zZXQocHJvcCwgbmV3IFNldCgpKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIEJhc2VBdHRyaWJ1dGVXcmFwcGVyIHtcblx0ICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgYmxvY2ssIG5vZGUpIHtcblx0ICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuXHQgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHQgICAgICAgIGlmIChub2RlLmRlcGVuZGVuY2llcy5zaXplID4gMCkge1xuXHQgICAgICAgICAgICBwYXJlbnQuY2Fubm90X3VzZV9pbm5lcmh0bWwoKTtcblx0ICAgICAgICAgICAgcGFyZW50Lm5vdF9zdGF0aWNfY29udGVudCgpO1xuXHQgICAgICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKG5vZGUuZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZW5kZXIoX2Jsb2NrKSB7IH1cblx0fVxuXHRjbGFzcyBBdHRyaWJ1dGVXcmFwcGVyIGV4dGVuZHMgQmFzZUF0dHJpYnV0ZVdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocGFyZW50LCBibG9jaywgbm9kZSkge1xuXHQgICAgICAgIHN1cGVyKHBhcmVudCwgYmxvY2ssIG5vZGUpO1xuXHQgICAgICAgIGlmIChub2RlLmRlcGVuZGVuY2llcy5zaXplID4gMCkge1xuXHQgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2Ug4oCUIDxvcHRpb24gdmFsdWU9e2Zvb30+IOKAlCBzZWUgYmVsb3dcblx0ICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50Lm5vZGUubmFtZSA9PT0gJ29wdGlvbicgJiYgbm9kZS5uYW1lID09PSAndmFsdWUnKSB7XG5cdCAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ID0gdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoc2VsZWN0ICYmIChzZWxlY3Qubm9kZS50eXBlICE9PSAnRWxlbWVudCcgfHwgc2VsZWN0Lm5vZGUubmFtZSAhPT0gJ3NlbGVjdCcpKVxuXHQgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogZG91YmxlY2hlY2sgdGhpcywgYnV0IGxvb2tzIHRvIGJlIGNvcnJlY3Rcblx0ICAgICAgICAgICAgICAgICAgICBzZWxlY3QgPSBzZWxlY3QucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgaWYgKHNlbGVjdCAmJiBzZWxlY3Quc2VsZWN0X2JpbmRpbmdfZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZWN0LnNlbGVjdF9iaW5kaW5nX2RlcGVuZGVuY2llcy5mb3JFYWNoKHByb3AgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZGVwZW5kZW5jaWVzLmZvckVhY2goKGRlcGVuZGVuY3kpID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbmRlcmVyLmNvbXBvbmVudC5pbmRpcmVjdF9kZXBlbmRlbmNpZXMuZ2V0KHByb3ApLmFkZChkZXBlbmRlbmN5KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ3ZhbHVlJykge1xuXHQgICAgICAgICAgICAgICAgaGFuZGxlX3NlbGVjdF92YWx1ZV9iaW5kaW5nKHRoaXMsIG5vZGUuZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLm5hbWUgPSBmaXhfYXR0cmlidXRlX2Nhc2luZyh0aGlzLm5vZGUubmFtZSk7XG5cdCAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHRoaXMuZ2V0X21ldGFkYXRhKCk7XG5cdCAgICAgICAgdGhpcy5pc19pbmRpcmVjdGx5X2JvdW5kX3ZhbHVlID0gaXNfaW5kaXJlY3RseV9ib3VuZF92YWx1ZSh0aGlzKTtcblx0ICAgICAgICB0aGlzLnByb3BlcnR5X25hbWUgPSB0aGlzLmlzX2luZGlyZWN0bHlfYm91bmRfdmFsdWVcblx0ICAgICAgICAgICAgPyAnX192YWx1ZSdcblx0ICAgICAgICAgICAgOiB0aGlzLm1ldGFkYXRhICYmIHRoaXMubWV0YWRhdGEucHJvcGVydHlfbmFtZTtcblx0ICAgICAgICB0aGlzLmlzX3NyYyA9IHRoaXMubmFtZSA9PT0gJ3NyYyc7IC8vIFRPRE8gcmV0aXJlIHRoaXMgZXhjZXB0aW9uIGluIGZhdm91ciBvZiBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy8zNzUwXG5cdCAgICAgICAgdGhpcy5pc19zZWxlY3RfdmFsdWVfYXR0cmlidXRlID0gdGhpcy5uYW1lID09PSAndmFsdWUnICYmIHRoaXMucGFyZW50Lm5vZGUubmFtZSA9PT0gJ3NlbGVjdCc7XG5cdCAgICAgICAgdGhpcy5pc19pbnB1dF92YWx1ZSA9IHRoaXMubmFtZSA9PT0gJ3ZhbHVlJyAmJiB0aGlzLnBhcmVudC5ub2RlLm5hbWUgPT09ICdpbnB1dCc7XG5cdCAgICAgICAgdGhpcy5zaG91bGRfY2FjaGUgPSBzaG91bGRfY2FjaGUodGhpcyk7XG5cdCAgICB9XG5cdCAgICByZW5kZXIoYmxvY2spIHtcblx0ICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgY29uc3QgeyBuYW1lLCBwcm9wZXJ0eV9uYW1lLCBzaG91bGRfY2FjaGUsIGlzX2luZGlyZWN0bHlfYm91bmRfdmFsdWUgfSA9IHRoaXM7XG5cdCAgICAgICAgLy8geGxpbmsgaXMgYSBzcGVjaWFsIGNhc2UuLi4gd2UgY291bGQgbWF5YmUgZXh0ZW5kIHRoaXMgdG8gZ2VuZXJpY1xuXHQgICAgICAgIC8vIG5hbWVzcGFjZWQgYXR0cmlidXRlcyBidXQgSSdtIG5vdCBzdXJlIHRoYXQncyBhcHBsaWNhYmxlIGluXG5cdCAgICAgICAgLy8gSFRNTDU/XG5cdCAgICAgICAgY29uc3QgbWV0aG9kID0gLy0vLnRlc3QoZWxlbWVudC5ub2RlLm5hbWUpXG5cdCAgICAgICAgICAgID8gJ0BzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSdcblx0ICAgICAgICAgICAgOiBuYW1lLnNsaWNlKDAsIDYpID09PSAneGxpbms6J1xuXHQgICAgICAgICAgICAgICAgPyAnQHhsaW5rX2F0dHInXG5cdCAgICAgICAgICAgICAgICA6ICdAYXR0cic7XG5cdCAgICAgICAgY29uc3QgaXNfbGVnYWN5X2lucHV0X3R5cGUgPSBlbGVtZW50LnJlbmRlcmVyLmNvbXBvbmVudC5jb21waWxlX29wdGlvbnMubGVnYWN5ICYmIG5hbWUgPT09ICd0eXBlJyAmJiB0aGlzLnBhcmVudC5ub2RlLm5hbWUgPT09ICdpbnB1dCc7XG5cdCAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gdGhpcy5nZXRfZGVwZW5kZW5jaWVzKCk7XG5cdCAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldF92YWx1ZShibG9jayk7XG5cdCAgICAgICAgbGV0IHVwZGF0ZXI7XG5cdCAgICAgICAgY29uc3QgaW5pdCA9IHRoaXMuZ2V0X2luaXQoYmxvY2ssIHZhbHVlKTtcblx0ICAgICAgICBpZiAoaXNfbGVnYWN5X2lucHV0X3R5cGUpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmh5ZHJhdGUucHVzaChiIGBAc2V0X2lucHV0X3R5cGUoJHtlbGVtZW50LnZhcn0sICR7aW5pdH0pO2ApO1xuXHQgICAgICAgICAgICB1cGRhdGVyID0gYiBgQHNldF9pbnB1dF90eXBlKCR7ZWxlbWVudC52YXJ9LCAke3Nob3VsZF9jYWNoZSA/IHRoaXMubGFzdCA6IHZhbHVlfSk7YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5pc19zZWxlY3RfdmFsdWVfYXR0cmlidXRlKSB7XG5cdCAgICAgICAgICAgIC8vIGFubm95aW5nIHNwZWNpYWwgY2FzZVxuXHQgICAgICAgICAgICBjb25zdCBpc19tdWx0aXBsZV9zZWxlY3QgPSBlbGVtZW50Lm5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ211bHRpcGxlJyk7XG5cdCAgICAgICAgICAgIGlmIChpc19tdWx0aXBsZV9zZWxlY3QpIHtcblx0ICAgICAgICAgICAgICAgIHVwZGF0ZXIgPSBiIGBAc2VsZWN0X29wdGlvbnMoJHtlbGVtZW50LnZhcn0sICR7dmFsdWV9KTtgO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdXBkYXRlciA9IGIgYEBzZWxlY3Rfb3B0aW9uKCR7ZWxlbWVudC52YXJ9LCAke3ZhbHVlfSk7YDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBibG9jay5jaHVua3MubW91bnQucHVzaChiIGBcblx0XHRcdFx0JHt1cGRhdGVyfVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNfc3JjKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2goYiBgaWYgKCR7ZWxlbWVudC52YXJ9LnNyYyAhPT0gJHtpbml0fSkgJHttZXRob2R9KCR7ZWxlbWVudC52YXJ9LCBcIiR7bmFtZX1cIiwgJHt0aGlzLmxhc3R9KTtgKTtcblx0ICAgICAgICAgICAgdXBkYXRlciA9IGIgYCR7bWV0aG9kfSgke2VsZW1lbnQudmFyfSwgXCIke25hbWV9XCIsICR7c2hvdWxkX2NhY2hlID8gdGhpcy5sYXN0IDogdmFsdWV9KTtgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChwcm9wZXJ0eV9uYW1lKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2goYiBgJHtlbGVtZW50LnZhcn0uJHtwcm9wZXJ0eV9uYW1lfSA9ICR7aW5pdH07YCk7XG5cdCAgICAgICAgICAgIHVwZGF0ZXIgPSBibG9jay5yZW5kZXJlci5vcHRpb25zLmRldlxuXHQgICAgICAgICAgICAgICAgPyBiIGBAcHJvcF9kZXYoJHtlbGVtZW50LnZhcn0sIFwiJHtwcm9wZXJ0eV9uYW1lfVwiLCAke3Nob3VsZF9jYWNoZSA/IHRoaXMubGFzdCA6IHZhbHVlfSk7YFxuXHQgICAgICAgICAgICAgICAgOiBiIGAke2VsZW1lbnQudmFyfS4ke3Byb3BlcnR5X25hbWV9ID0gJHtzaG91bGRfY2FjaGUgPyB0aGlzLmxhc3QgOiB2YWx1ZX07YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2goYiBgJHttZXRob2R9KCR7ZWxlbWVudC52YXJ9LCBcIiR7bmFtZX1cIiwgJHtpbml0fSk7YCk7XG5cdCAgICAgICAgICAgIHVwZGF0ZXIgPSBiIGAke21ldGhvZH0oJHtlbGVtZW50LnZhcn0sIFwiJHtuYW1lfVwiLCAke3Nob3VsZF9jYWNoZSA/IHRoaXMubGFzdCA6IHZhbHVlfSk7YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGlzX2luZGlyZWN0bHlfYm91bmRfdmFsdWUpIHtcblx0ICAgICAgICAgICAgY29uc3QgdXBkYXRlX3ZhbHVlID0gYiBgJHtlbGVtZW50LnZhcn0udmFsdWUgPSAke2VsZW1lbnQudmFyfS5fX3ZhbHVlO2A7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2godXBkYXRlX3ZhbHVlKTtcblx0ICAgICAgICAgICAgdXBkYXRlciA9IGIgYFxuXHRcdFx0XHQke3VwZGF0ZXJ9XG5cdFx0XHRcdCR7dXBkYXRlX3ZhbHVlfTtcblx0XHRcdGA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBjb25zdCBjb25kaXRpb24gPSB0aGlzLmdldF9kb21fdXBkYXRlX2NvbmRpdGlvbnMoYmxvY2ssIGJsb2NrLnJlbmRlcmVyLmRpcnR5KGRlcGVuZGVuY2llcykpO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdGlmICgke2NvbmRpdGlvbn0pIHtcblx0XHRcdFx0XHQke3VwZGF0ZXJ9XG5cdFx0XHRcdH1gKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gc3BlY2lhbCBjYXNlIOKAkyBhdXRvZm9jdXMuIGhhcyB0byBiZSBoYW5kbGVkIGluIGEgYml0IG9mIGEgd2VpcmQgd2F5XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5pc190cnVlICYmIG5hbWUgPT09ICdhdXRvZm9jdXMnKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmF1dG9mb2N1cyA9IGVsZW1lbnQudmFyO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGdldF9pbml0KGJsb2NrLCB2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMubGFzdCA9IHRoaXMuc2hvdWxkX2NhY2hlICYmIGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnBhcmVudC52YXIubmFtZX1fJHt0aGlzLm5hbWUucmVwbGFjZSgvW15hLXpBLVpfJF0vZywgJ18nKX1fdmFsdWVgKTtcblx0ICAgICAgICBpZiAodGhpcy5zaG91bGRfY2FjaGUpXG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZSh0aGlzLmxhc3QpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLnNob3VsZF9jYWNoZSA/IHggYCR7dGhpcy5sYXN0fSA9ICR7dmFsdWV9YCA6IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgZ2V0X2RvbV91cGRhdGVfY29uZGl0aW9ucyhibG9jaywgZGVwZW5kZW5jeV9jb25kaXRpb24pIHtcblx0ICAgICAgICBjb25zdCB7IHByb3BlcnR5X25hbWUsIHNob3VsZF9jYWNoZSwgbGFzdCB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldF92YWx1ZShibG9jayk7XG5cdCAgICAgICAgbGV0IGNvbmRpdGlvbiA9IGRlcGVuZGVuY3lfY29uZGl0aW9uO1xuXHQgICAgICAgIGlmIChzaG91bGRfY2FjaGUpIHtcblx0ICAgICAgICAgICAgY29uZGl0aW9uID0gdGhpcy5pc19zcmNcblx0ICAgICAgICAgICAgICAgID8geCBgJHtjb25kaXRpb259ICYmICgke2VsZW1lbnQudmFyfS5zcmMgIT09ICgke2xhc3R9ID0gJHt2YWx1ZX0pKWBcblx0ICAgICAgICAgICAgICAgIDogeCBgJHtjb25kaXRpb259ICYmICgke2xhc3R9ICE9PSAoJHtsYXN0fSA9ICR7dmFsdWV9KSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5pc19pbnB1dF92YWx1ZSkge1xuXHQgICAgICAgICAgICBjb25zdCB0eXBlID0gZWxlbWVudC5ub2RlLmdldF9zdGF0aWNfYXR0cmlidXRlX3ZhbHVlKCd0eXBlJyk7XG5cdCAgICAgICAgICAgIGlmICh0eXBlID09PSBudWxsIHx8IHR5cGUgPT09IFwiXCIgfHwgdHlwZSA9PT0gXCJ0ZXh0XCIgfHwgdHlwZSA9PT0gXCJlbWFpbFwiIHx8IHR5cGUgPT09IFwicGFzc3dvcmRcIikge1xuXHQgICAgICAgICAgICAgICAgY29uZGl0aW9uID0geCBgJHtjb25kaXRpb259ICYmICR7ZWxlbWVudC52YXJ9LiR7cHJvcGVydHlfbmFtZX0gIT09ICR7c2hvdWxkX2NhY2hlID8gbGFzdCA6IHZhbHVlfWA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGJsb2NrLmhhc19vdXRyb3MpIHtcblx0ICAgICAgICAgICAgY29uZGl0aW9uID0geCBgISNjdXJyZW50IHx8ICR7Y29uZGl0aW9ufWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBjb25kaXRpb247XG5cdCAgICB9XG5cdCAgICBnZXRfZGVwZW5kZW5jaWVzKCkge1xuXHQgICAgICAgIGNvbnN0IG5vZGVfZGVwZW5kZW5jaWVzID0gdGhpcy5ub2RlLmdldF9kZXBlbmRlbmNpZXMoKTtcblx0ICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KG5vZGVfZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICBub2RlX2RlcGVuZGVuY2llcy5mb3JFYWNoKChwcm9wKSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGluZGlyZWN0X2RlcGVuZGVuY2llcyA9IHRoaXMucGFyZW50LnJlbmRlcmVyLmNvbXBvbmVudC5pbmRpcmVjdF9kZXBlbmRlbmNpZXMuZ2V0KHByb3ApO1xuXHQgICAgICAgICAgICBpZiAoaW5kaXJlY3RfZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgICAgICAgICBpbmRpcmVjdF9kZXBlbmRlbmNpZXMuZm9yRWFjaChpbmRpcmVjdF9kZXBlbmRlbmN5ID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuYWRkKGluZGlyZWN0X2RlcGVuZGVuY3kpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShkZXBlbmRlbmNpZXMpO1xuXHQgICAgfVxuXHQgICAgZ2V0X21ldGFkYXRhKCkge1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudC5ub2RlLm5hbWVzcGFjZSlcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhdHRyaWJ1dGVfbG9va3VwW3RoaXMubmFtZV07XG5cdCAgICAgICAgaWYgKG1ldGFkYXRhICYmIG1ldGFkYXRhLmFwcGxpZXNfdG8gJiYgIW1ldGFkYXRhLmFwcGxpZXNfdG8uaW5jbHVkZXModGhpcy5wYXJlbnQubm9kZS5uYW1lKSlcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuXHQgICAgfVxuXHQgICAgZ2V0X3ZhbHVlKGJsb2NrKSB7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5pc190cnVlKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1ldGFkYXRhICYmIGJvb2xlYW5fYXR0cmlidXRlLmhhcyh0aGlzLm1ldGFkYXRhLnByb3BlcnR5X25hbWUudG9Mb3dlckNhc2UoKSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB4IGB0cnVlYDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4geCBgXCJcImA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuY2h1bmtzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICAgICAgcmV0dXJuIHggYFwiXCJgO1xuXHQgICAgICAgIC8vIFRPRE8gc29tZSBvZiB0aGlzIGNvZGUgaXMgcmVwZWF0ZWQgaW4gVGFnLnRzIOKAlCB3b3VsZCBiZSBnb29kIHRvXG5cdCAgICAgICAgLy8gRFJZIGl0IG91dCBpZiB0aGF0J3MgcG9zc2libGUgd2l0aG91dCBpbnRyb2R1Y2luZyBjcmF6eSBpbmRpcmVjdGlvblxuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuY2h1bmtzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmNodW5rc1swXS50eXBlID09PSAnVGV4dCdcblx0ICAgICAgICAgICAgICAgID8gc3RyaW5nX2xpdGVyYWwodGhpcy5ub2RlLmNodW5rc1swXS5kYXRhKVxuXHQgICAgICAgICAgICAgICAgOiB0aGlzLm5vZGUuY2h1bmtzWzBdLm1hbmlwdWxhdGUoYmxvY2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLm5vZGUubmFtZSA9PT0gJ2NsYXNzJ1xuXHQgICAgICAgICAgICA/IHRoaXMuZ2V0X2NsYXNzX25hbWVfdGV4dChibG9jaylcblx0ICAgICAgICAgICAgOiB0aGlzLnJlbmRlcl9jaHVua3MoYmxvY2spLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSArICR7cmhzfWApO1xuXHQgICAgICAgIC8vICd7Zm9vfSB7YmFyfScg4oCUIHRyZWF0IGFzIHN0cmluZyBjb25jYXRlbmF0aW9uXG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5jaHVua3NbMF0udHlwZSAhPT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0geCBgXCJcIiArICR7dmFsdWV9YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgfVxuXHQgICAgZ2V0X2NsYXNzX25hbWVfdGV4dChibG9jaykge1xuXHQgICAgICAgIGNvbnN0IHNjb3BlZF9jc3MgPSB0aGlzLm5vZGUuY2h1bmtzLnNvbWUoKGNodW5rKSA9PiBjaHVuay5zeW50aGV0aWMpO1xuXHQgICAgICAgIGNvbnN0IHJlbmRlcmVkID0gdGhpcy5yZW5kZXJfY2h1bmtzKGJsb2NrKTtcblx0ICAgICAgICBpZiAoc2NvcGVkX2NzcyAmJiByZW5kZXJlZC5sZW5ndGggPT09IDIpIHtcblx0ICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIHNpdHVhdGlvbiBsaWtlIGNsYXNzPXtwb3NzaWJseVVuZGVmaW5lZH1cblx0ICAgICAgICAgICAgcmVuZGVyZWRbMF0gPSB4IGBAbnVsbF90b19lbXB0eSgke3JlbmRlcmVkWzBdfSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVuZGVyZWQucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9ICsgJHtyaHN9YCk7XG5cdCAgICB9XG5cdCAgICByZW5kZXJfY2h1bmtzKGJsb2NrKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5jaHVua3MubWFwKChjaHVuaykgPT4ge1xuXHQgICAgICAgICAgICBpZiAoY2h1bmsudHlwZSA9PT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX2xpdGVyYWwoY2h1bmsuZGF0YSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGNodW5rLm1hbmlwdWxhdGUoYmxvY2spO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgc3RyaW5naWZ5KCkge1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuaXNfdHJ1ZSlcblx0ICAgICAgICAgICAgcmV0dXJuICcnO1xuXHQgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5ub2RlLmNodW5rcztcblx0ICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKVxuXHQgICAgICAgICAgICByZXR1cm4gYD1cIlwiYDtcblx0ICAgICAgICByZXR1cm4gYD1cIiR7dmFsdWUubWFwKGNodW5rID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjaHVuay50eXBlID09PSAnVGV4dCdcbiAgICAgICAgICAgICAgICA/IGNodW5rLmRhdGEucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpXG4gICAgICAgICAgICAgICAgOiBgXFwkeyR7Y2h1bmsubWFuaXB1bGF0ZSgpfX1gO1xuICAgICAgICB9KS5qb2luKCcnKX1cImA7XG5cdCAgICB9XG5cdH1cblx0Ly8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcblx0Y29uc3QgYXR0cmlidXRlX2xvb2t1cCA9IHtcblx0ICAgIGFsbG93ZnVsbHNjcmVlbjogeyBwcm9wZXJ0eV9uYW1lOiAnYWxsb3dGdWxsc2NyZWVuJywgYXBwbGllc190bzogWydpZnJhbWUnXSB9LFxuXHQgICAgYWxsb3dwYXltZW50cmVxdWVzdDogeyBwcm9wZXJ0eV9uYW1lOiAnYWxsb3dQYXltZW50UmVxdWVzdCcsIGFwcGxpZXNfdG86IFsnaWZyYW1lJ10gfSxcblx0ICAgIGFzeW5jOiB7IGFwcGxpZXNfdG86IFsnc2NyaXB0J10gfSxcblx0ICAgIGF1dG9mb2N1czogeyBhcHBsaWVzX3RvOiBbJ2J1dHRvbicsICdpbnB1dCcsICdrZXlnZW4nLCAnc2VsZWN0JywgJ3RleHRhcmVhJ10gfSxcblx0ICAgIGF1dG9wbGF5OiB7IGFwcGxpZXNfdG86IFsnYXVkaW8nLCAndmlkZW8nXSB9LFxuXHQgICAgY2hlY2tlZDogeyBhcHBsaWVzX3RvOiBbJ2lucHV0J10gfSxcblx0ICAgIGNvbnRyb2xzOiB7IGFwcGxpZXNfdG86IFsnYXVkaW8nLCAndmlkZW8nXSB9LFxuXHQgICAgZGVmYXVsdDogeyBhcHBsaWVzX3RvOiBbJ3RyYWNrJ10gfSxcblx0ICAgIGRlZmVyOiB7IGFwcGxpZXNfdG86IFsnc2NyaXB0J10gfSxcblx0ICAgIGRpc2FibGVkOiB7XG5cdCAgICAgICAgYXBwbGllc190bzogW1xuXHQgICAgICAgICAgICAnYnV0dG9uJyxcblx0ICAgICAgICAgICAgJ2ZpZWxkc2V0Jyxcblx0ICAgICAgICAgICAgJ2lucHV0Jyxcblx0ICAgICAgICAgICAgJ2tleWdlbicsXG5cdCAgICAgICAgICAgICdvcHRncm91cCcsXG5cdCAgICAgICAgICAgICdvcHRpb24nLFxuXHQgICAgICAgICAgICAnc2VsZWN0Jyxcblx0ICAgICAgICAgICAgJ3RleHRhcmVhJyxcblx0ICAgICAgICBdLFxuXHQgICAgfSxcblx0ICAgIGZvcm1ub3ZhbGlkYXRlOiB7IHByb3BlcnR5X25hbWU6ICdmb3JtTm9WYWxpZGF0ZScsIGFwcGxpZXNfdG86IFsnYnV0dG9uJywgJ2lucHV0J10gfSxcblx0ICAgIGhpZGRlbjoge30sXG5cdCAgICBpbmRldGVybWluYXRlOiB7IGFwcGxpZXNfdG86IFsnaW5wdXQnXSB9LFxuXHQgICAgaXNtYXA6IHsgcHJvcGVydHlfbmFtZTogJ2lzTWFwJywgYXBwbGllc190bzogWydpbWcnXSB9LFxuXHQgICAgbG9vcDogeyBhcHBsaWVzX3RvOiBbJ2F1ZGlvJywgJ2Jnc291bmQnLCAndmlkZW8nXSB9LFxuXHQgICAgbXVsdGlwbGU6IHsgYXBwbGllc190bzogWydpbnB1dCcsICdzZWxlY3QnXSB9LFxuXHQgICAgbXV0ZWQ6IHsgYXBwbGllc190bzogWydhdWRpbycsICd2aWRlbyddIH0sXG5cdCAgICBub21vZHVsZTogeyBwcm9wZXJ0eV9uYW1lOiAnbm9Nb2R1bGUnLCBhcHBsaWVzX3RvOiBbJ3NjcmlwdCddIH0sXG5cdCAgICBub3ZhbGlkYXRlOiB7IHByb3BlcnR5X25hbWU6ICdub1ZhbGlkYXRlJywgYXBwbGllc190bzogWydmb3JtJ10gfSxcblx0ICAgIG9wZW46IHsgYXBwbGllc190bzogWydkZXRhaWxzJywgJ2RpYWxvZyddIH0sXG5cdCAgICBwbGF5c2lubGluZTogeyBwcm9wZXJ0eV9uYW1lOiAncGxheXNJbmxpbmUnLCBhcHBsaWVzX3RvOiBbJ3ZpZGVvJ10gfSxcblx0ICAgIHJlYWRvbmx5OiB7IHByb3BlcnR5X25hbWU6ICdyZWFkT25seScsIGFwcGxpZXNfdG86IFsnaW5wdXQnLCAndGV4dGFyZWEnXSB9LFxuXHQgICAgcmVxdWlyZWQ6IHsgYXBwbGllc190bzogWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXSB9LFxuXHQgICAgcmV2ZXJzZWQ6IHsgYXBwbGllc190bzogWydvbCddIH0sXG5cdCAgICBzZWxlY3RlZDogeyBhcHBsaWVzX3RvOiBbJ29wdGlvbiddIH0sXG5cdCAgICB2YWx1ZToge1xuXHQgICAgICAgIGFwcGxpZXNfdG86IFtcblx0ICAgICAgICAgICAgJ2J1dHRvbicsXG5cdCAgICAgICAgICAgICdvcHRpb24nLFxuXHQgICAgICAgICAgICAnaW5wdXQnLFxuXHQgICAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgICAnbWV0ZXInLFxuXHQgICAgICAgICAgICAncHJvZ3Jlc3MnLFxuXHQgICAgICAgICAgICAncGFyYW0nLFxuXHQgICAgICAgICAgICAnc2VsZWN0Jyxcblx0ICAgICAgICAgICAgJ3RleHRhcmVhJyxcblx0ICAgICAgICBdLFxuXHQgICAgfSxcblx0fTtcblx0T2JqZWN0LmtleXMoYXR0cmlidXRlX2xvb2t1cCkuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgIGNvbnN0IG1ldGFkYXRhID0gYXR0cmlidXRlX2xvb2t1cFtuYW1lXTtcblx0ICAgIGlmICghbWV0YWRhdGEucHJvcGVydHlfbmFtZSlcblx0ICAgICAgICBtZXRhZGF0YS5wcm9wZXJ0eV9uYW1lID0gbmFtZTtcblx0fSk7XG5cdC8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG5cdGNvbnN0IGJvb2xlYW5fYXR0cmlidXRlID0gbmV3IFNldChbXG5cdCAgICAnYWxsb3dmdWxsc2NyZWVuJyxcblx0ICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0Jyxcblx0ICAgICdhc3luYycsXG5cdCAgICAnYXV0b2ZvY3VzJyxcblx0ICAgICdhdXRvcGxheScsXG5cdCAgICAnY2hlY2tlZCcsXG5cdCAgICAnY29udHJvbHMnLFxuXHQgICAgJ2RlZmF1bHQnLFxuXHQgICAgJ2RlZmVyJyxcblx0ICAgICdkaXNhYmxlZCcsXG5cdCAgICAnZm9ybW5vdmFsaWRhdGUnLFxuXHQgICAgJ2hpZGRlbicsXG5cdCAgICAnaXNtYXAnLFxuXHQgICAgJ2l0ZW1zY29wZScsXG5cdCAgICAnbG9vcCcsXG5cdCAgICAnbXVsdGlwbGUnLFxuXHQgICAgJ211dGVkJyxcblx0ICAgICdub21vZHVsZScsXG5cdCAgICAnbm92YWxpZGF0ZScsXG5cdCAgICAnb3BlbicsXG5cdCAgICAncGxheXNpbmxpbmUnLFxuXHQgICAgJ3JlYWRvbmx5Jyxcblx0ICAgICdyZXF1aXJlZCcsXG5cdCAgICAncmV2ZXJzZWQnLFxuXHQgICAgJ3NlbGVjdGVkJ1xuXHRdKTtcblx0ZnVuY3Rpb24gc2hvdWxkX2NhY2hlKGF0dHJpYnV0ZSkge1xuXHQgICAgcmV0dXJuIGF0dHJpYnV0ZS5pc19zcmMgfHwgYXR0cmlidXRlLm5vZGUuc2hvdWxkX2NhY2hlKCk7XG5cdH1cblx0ZnVuY3Rpb24gaXNfaW5kaXJlY3RseV9ib3VuZF92YWx1ZShhdHRyaWJ1dGUpIHtcblx0ICAgIGNvbnN0IGVsZW1lbnQgPSBhdHRyaWJ1dGUucGFyZW50O1xuXHQgICAgcmV0dXJuIGF0dHJpYnV0ZS5uYW1lID09PSAndmFsdWUnICYmXG5cdCAgICAgICAgKGVsZW1lbnQubm9kZS5uYW1lID09PSAnb3B0aW9uJyB8fCAvLyBUT0RPIGNoZWNrIGl0J3MgYWN0dWFsbHkgYm91bmRcblx0ICAgICAgICAgICAgKGVsZW1lbnQubm9kZS5uYW1lID09PSAnaW5wdXQnICYmXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50Lm5vZGUuYmluZGluZ3Muc29tZSgoYmluZGluZykgPT4gL2NoZWNrZWR8Z3JvdXAvLnRlc3QoYmluZGluZy5uYW1lKSkpKTtcblx0fVxuXG5cdGNsYXNzIFN0eWxlQXR0cmlidXRlV3JhcHBlciBleHRlbmRzIEF0dHJpYnV0ZVdyYXBwZXIge1xuXHQgICAgcmVuZGVyKGJsb2NrKSB7XG5cdCAgICAgICAgY29uc3Qgc3R5bGVfcHJvcHMgPSBvcHRpbWl6ZV9zdHlsZSh0aGlzLm5vZGUuY2h1bmtzKTtcblx0ICAgICAgICBpZiAoIXN0eWxlX3Byb3BzKVxuXHQgICAgICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyKGJsb2NrKTtcblx0ICAgICAgICBzdHlsZV9wcm9wcy5mb3JFYWNoKChwcm9wKSA9PiB7XG5cdCAgICAgICAgICAgIGxldCB2YWx1ZTtcblx0ICAgICAgICAgICAgaWYgKGlzX2R5bmFtaWMocHJvcC52YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHByb3BfZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wLnZhbHVlXG5cdCAgICAgICAgICAgICAgICAgICAgLm1hcChjaHVuayA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX2xpdGVyYWwoY2h1bmsuZGF0YSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fc2V0KHByb3BfZGVwZW5kZW5jaWVzLCBjaHVuay5keW5hbWljX2RlcGVuZGVuY2llcygpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rLm1hbmlwdWxhdGUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSArICR7cmhzfWApO1xuXHQgICAgICAgICAgICAgICAgLy8gVE9ETyBpcyB0aGlzIG5lY2Vzc2FyeT8gc3R5bGUuc2V0UHJvcGVydHkgYWx3YXlzIHRyZWF0cyB2YWx1ZSBhcyBzdHJpbmcsIG5vP1xuXHQgICAgICAgICAgICAgICAgLy8gaWYgKHByb3AudmFsdWUubGVuZ3RoID09PSAxIHx8IHByb3AudmFsdWVbMF0udHlwZSAhPT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBcdHZhbHVlID0geGBcIlwiICsgJHt2YWx1ZX1gO1xuXHQgICAgICAgICAgICAgICAgLy8gfVxuXHQgICAgICAgICAgICAgICAgaWYgKHByb3BfZGVwZW5kZW5jaWVzLnNpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gYmxvY2sucmVuZGVyZXIuZGlydHkoQXJyYXkuZnJvbShwcm9wX2RlcGVuZGVuY2llcykpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChibG9jay5oYXNfb3V0cm9zKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IHggYCEjY3VycmVudCB8fCAke2NvbmRpdGlvbn1gO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGUgPSBiIGBcblx0XHRcdFx0XHRcdGlmICgke2NvbmRpdGlvbn0pIHtcblx0XHRcdFx0XHRcdFx0QHNldF9zdHlsZSgke3RoaXMucGFyZW50LnZhcn0sIFwiJHtwcm9wLmtleX1cIiwgJHt2YWx1ZX0sICR7cHJvcC5pbXBvcnRhbnQgPyAxIDogbnVsbH0pO1xuXHRcdFx0XHRcdFx0fWA7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKHVwZGF0ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0cmluZ19saXRlcmFsKHByb3AudmFsdWVbMF0uZGF0YSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmh5ZHJhdGUucHVzaChiIGBAc2V0X3N0eWxlKCR7dGhpcy5wYXJlbnQudmFyfSwgXCIke3Byb3Aua2V5fVwiLCAke3ZhbHVlfSwgJHtwcm9wLmltcG9ydGFudCA/IDEgOiBudWxsfSk7YCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gb3B0aW1pemVfc3R5bGUodmFsdWUpIHtcblx0ICAgIGNvbnN0IHByb3BzID0gW107XG5cdCAgICBsZXQgY2h1bmtzID0gdmFsdWUuc2xpY2UoKTtcblx0ICAgIHdoaWxlIChjaHVua3MubGVuZ3RoKSB7XG5cdCAgICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbMF07XG5cdCAgICAgICAgaWYgKGNodW5rLnR5cGUgIT09ICdUZXh0Jylcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgY29uc3Qga2V5X21hdGNoID0gL15cXHMqKFtcXHctXSspOlxccyovLmV4ZWMoY2h1bmsuZGF0YSk7XG5cdCAgICAgICAgaWYgKCFrZXlfbWF0Y2gpXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIGNvbnN0IGtleSA9IGtleV9tYXRjaFsxXTtcblx0ICAgICAgICBjb25zdCBvZmZzZXQgPSBrZXlfbWF0Y2guaW5kZXggKyBrZXlfbWF0Y2hbMF0ubGVuZ3RoO1xuXHQgICAgICAgIGNvbnN0IHJlbWFpbmluZ19kYXRhID0gY2h1bmsuZGF0YS5zbGljZShvZmZzZXQpO1xuXHQgICAgICAgIGlmIChyZW1haW5pbmdfZGF0YSkge1xuXHQgICAgICAgICAgICBjaHVua3NbMF0gPSB7XG5cdCAgICAgICAgICAgICAgICBzdGFydDogY2h1bmsuc3RhcnQgKyBvZmZzZXQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IGNodW5rLmVuZCxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdUZXh0Jyxcblx0ICAgICAgICAgICAgICAgIGRhdGE6IHJlbWFpbmluZ19kYXRhXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjaHVua3Muc2hpZnQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0X3N0eWxlX3ZhbHVlKGNodW5rcyk7XG5cdCAgICAgICAgcHJvcHMucHVzaCh7IGtleSwgdmFsdWU6IHJlc3VsdC52YWx1ZSwgaW1wb3J0YW50OiByZXN1bHQuaW1wb3J0YW50IH0pO1xuXHQgICAgICAgIGNodW5rcyA9IHJlc3VsdC5jaHVua3M7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcHJvcHM7XG5cdH1cblx0ZnVuY3Rpb24gZ2V0X3N0eWxlX3ZhbHVlKGNodW5rcykge1xuXHQgICAgY29uc3QgdmFsdWUgPSBbXTtcblx0ICAgIGxldCBpbl91cmwgPSBmYWxzZTtcblx0ICAgIGxldCBxdW90ZV9tYXJrID0gbnVsbDtcblx0ICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG5cdCAgICBsZXQgY2xvc2VkID0gZmFsc2U7XG5cdCAgICB3aGlsZSAoY2h1bmtzLmxlbmd0aCAmJiAhY2xvc2VkKSB7XG5cdCAgICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3Muc2hpZnQoKTtcblx0ICAgICAgICBpZiAoY2h1bmsudHlwZSA9PT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgIGxldCBjID0gMDtcblx0ICAgICAgICAgICAgd2hpbGUgKGMgPCBjaHVuay5kYXRhLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgY2hhciA9IGNodW5rLmRhdGFbY107XG5cdCAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICdcXFxcJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gcXVvdGVfbWFyaykge1xuXHQgICAgICAgICAgICAgICAgICAgIHF1b3RlX21hcmsgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJ1wiJyB8fCBjaGFyID09PSBcIidcIikge1xuXHQgICAgICAgICAgICAgICAgICAgIHF1b3RlX21hcmsgPSBjaGFyO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJyknICYmIGluX3VybCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGluX3VybCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJ3UnICYmIGNodW5rLmRhdGEuc2xpY2UoYywgYyArIDQpID09PSAndXJsKCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbl91cmwgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJzsnICYmICFpbl91cmwgJiYgIXF1b3RlX21hcmspIHtcblx0ICAgICAgICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgYyArPSAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChjID4gMCkge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1RleHQnLFxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBjaHVuay5zdGFydCxcblx0ICAgICAgICAgICAgICAgICAgICBlbmQ6IGNodW5rLnN0YXJ0ICsgYyxcblx0ICAgICAgICAgICAgICAgICAgICBkYXRhOiBjaHVuay5kYXRhLnNsaWNlKDAsIGMpXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB3aGlsZSAoL1s7XFxzXS8udGVzdChjaHVuay5kYXRhW2NdKSlcblx0ICAgICAgICAgICAgICAgIGMgKz0gMTtcblx0ICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nX2RhdGEgPSBjaHVuay5kYXRhLnNsaWNlKGMpO1xuXHQgICAgICAgICAgICBpZiAocmVtYWluaW5nX2RhdGEpIHtcblx0ICAgICAgICAgICAgICAgIGNodW5rcy51bnNoaWZ0KHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydDogY2h1bmsuc3RhcnQgKyBjLFxuXHQgICAgICAgICAgICAgICAgICAgIGVuZDogY2h1bmsuZW5kLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUZXh0Jyxcblx0ICAgICAgICAgICAgICAgICAgICBkYXRhOiByZW1haW5pbmdfZGF0YVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdmFsdWUucHVzaChjaHVuayk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgbGV0IGltcG9ydGFudCA9IGZhbHNlO1xuXHQgICAgY29uc3QgbGFzdF9jaHVuayA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuXHQgICAgaWYgKGxhc3RfY2h1bmsgJiYgbGFzdF9jaHVuay50eXBlID09PSAnVGV4dCcgJiYgL1xccyohaW1wb3J0YW50XFxzKiQvLnRlc3QobGFzdF9jaHVuay5kYXRhKSkge1xuXHQgICAgICAgIGltcG9ydGFudCA9IHRydWU7XG5cdCAgICAgICAgbGFzdF9jaHVuay5kYXRhID0gbGFzdF9jaHVuay5kYXRhLnJlcGxhY2UoL1xccyohaW1wb3J0YW50XFxzKiQvLCAnJyk7XG5cdCAgICAgICAgaWYgKCFsYXN0X2NodW5rLmRhdGEpXG5cdCAgICAgICAgICAgIHZhbHVlLnBvcCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICBjaHVua3MsXG5cdCAgICAgICAgdmFsdWUsXG5cdCAgICAgICAgaW1wb3J0YW50XG5cdCAgICB9O1xuXHR9XG5cdGZ1bmN0aW9uIGlzX2R5bmFtaWModmFsdWUpIHtcblx0ICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAxIHx8IHZhbHVlWzBdLnR5cGUgIT09ICdUZXh0Jztcblx0fVxuXG5cdGNsYXNzIFNwcmVhZEF0dHJpYnV0ZVdyYXBwZXIgZXh0ZW5kcyBCYXNlQXR0cmlidXRlV3JhcHBlciB7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRfb2JqZWN0KG5vZGUpIHtcblx0ICAgIHdoaWxlIChub2RlLnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJylcblx0ICAgICAgICBub2RlID0gbm9kZS5vYmplY3Q7XG5cdCAgICByZXR1cm4gbm9kZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlcGxhY2Vfb2JqZWN0KG5vZGUsIHJlcGxhY2VtZW50KSB7XG5cdCAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpXG5cdCAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuXHQgICAgY29uc3QgYW5jZXN0b3IgPSBub2RlO1xuXHQgICAgbGV0IHBhcmVudDtcblx0ICAgIHdoaWxlIChub2RlLnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJykge1xuXHQgICAgICAgIHBhcmVudCA9IG5vZGU7XG5cdCAgICAgICAgbm9kZSA9IG5vZGUub2JqZWN0O1xuXHQgICAgfVxuXHQgICAgcGFyZW50Lm9iamVjdCA9IHJlcGxhY2VtZW50O1xuXHQgICAgcmV0dXJuIGFuY2VzdG9yO1xuXHR9XG5cblx0ZnVuY3Rpb24gZmxhdHRlbl9yZWZlcmVuY2Uobm9kZSkge1xuXHQgICAgY29uc3Qgbm9kZXMgPSBbXTtcblx0ICAgIGNvbnN0IHBhcnRzID0gW107XG5cdCAgICB3aGlsZSAobm9kZS50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcblx0ICAgICAgICBub2Rlcy51bnNoaWZ0KG5vZGUucHJvcGVydHkpO1xuXHQgICAgICAgIGlmICghbm9kZS5jb21wdXRlZCkge1xuXHQgICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KG5vZGUucHJvcGVydHkubmFtZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjb25zdCBjb21wdXRlZF9wcm9wZXJ0eSA9IHRvX3N0cmluZyQxKG5vZGUucHJvcGVydHkpO1xuXHQgICAgICAgICAgICBpZiAoY29tcHV0ZWRfcHJvcGVydHkpIHtcblx0ICAgICAgICAgICAgICAgIHBhcnRzLnVuc2hpZnQoYFske2NvbXB1dGVkX3Byb3BlcnR5fV1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBub2RlID0gbm9kZS5vYmplY3Q7XG5cdCAgICB9XG5cdCAgICBjb25zdCBuYW1lID0gbm9kZS50eXBlID09PSAnSWRlbnRpZmllcidcblx0ICAgICAgICA/IG5vZGUubmFtZVxuXHQgICAgICAgIDogbm9kZS50eXBlID09PSAnVGhpc0V4cHJlc3Npb24nID8gJ3RoaXMnIDogbnVsbDtcblx0ICAgIG5vZGVzLnVuc2hpZnQobm9kZSk7XG5cdCAgICBwYXJ0cy51bnNoaWZ0KG5hbWUpO1xuXHQgICAgcmV0dXJuIHsgbmFtZSwgbm9kZXMsIHBhcnRzIH07XG5cdH1cblx0ZnVuY3Rpb24gdG9fc3RyaW5nJDEobm9kZSkge1xuXHQgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcblx0ICAgICAgICBjYXNlICdMaXRlcmFsJzpcblx0ICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhub2RlLnZhbHVlKTtcblx0ICAgICAgICBjYXNlICdJZGVudGlmaWVyJzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5vZGUubmFtZTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIG1hcmtfZWFjaF9ibG9ja19iaW5kaW5ncyhwYXJlbnQsIGJpbmRpbmcpIHtcblx0ICAgIC8vIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIGVhY2ggYmxvY2sgY3JlYXRlcyBhIGNvbnRleHQgaW5jbHVkaW5nXG5cdCAgICAvLyB0aGUgbGlzdCBhbmQgdGhlIGluZGV4LCBpZiB0aGV5J3JlIG5vdCBvdGhlcndpc2UgcmVmZXJlbmNlZFxuXHQgICAgYmluZGluZy5leHByZXNzaW9uLnJlZmVyZW5jZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICBjb25zdCBlYWNoX2Jsb2NrID0gcGFyZW50Lm5vZGUuc2NvcGUuZ2V0X293bmVyKG5hbWUpO1xuXHQgICAgICAgIGlmIChlYWNoX2Jsb2NrKSB7XG5cdCAgICAgICAgICAgIGVhY2hfYmxvY2suaGFzX2JpbmRpbmcgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgaWYgKGJpbmRpbmcubmFtZSA9PT0gXCJncm91cFwiKSB7XG5cdCAgICAgICAgLy8gZm9yIGA8aW5wdXQgYmluZDpncm91cD17fSA+YCwgd2UgbWFrZSBzdXJlIHRoYXQgYWxsIHRoZSBlYWNoIGJsb2NrcyBjcmVhdGVzIGNvbnRleHQgd2l0aCBgaW5kZXhgXG5cdCAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGJpbmRpbmcuZXhwcmVzc2lvbi5jb250ZXh0dWFsX2RlcGVuZGVuY2llcykge1xuXHQgICAgICAgICAgICBjb25zdCBlYWNoX2Jsb2NrID0gcGFyZW50Lm5vZGUuc2NvcGUuZ2V0X293bmVyKG5hbWUpO1xuXHQgICAgICAgICAgICBlYWNoX2Jsb2NrLmhhc19pbmRleF9iaW5kaW5nID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBCaW5kaW5nV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihibG9jaywgbm9kZSwgcGFyZW50KSB7XG5cdCAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICBjb25zdCB7IGRlcGVuZGVuY2llcyB9ID0gdGhpcy5ub2RlLmV4cHJlc3Npb247XG5cdCAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIC8vIFRPRE8gZG9lcyB0aGlzIGFsc28gYXBwbHkgdG8gZS5nLiBgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBiaW5kOmdyb3VwPSdmb28nPmA/XG5cdCAgICAgICAgaGFuZGxlX3NlbGVjdF92YWx1ZV9iaW5kaW5nKHRoaXMsIGRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgaWYgKG5vZGUuaXNfY29udGV4dHVhbCkge1xuXHQgICAgICAgICAgICBtYXJrX2VhY2hfYmxvY2tfYmluZGluZ3ModGhpcy5wYXJlbnQsIHRoaXMubm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMub2JqZWN0ID0gZ2V0X29iamVjdCh0aGlzLm5vZGUuZXhwcmVzc2lvbi5ub2RlKS5uYW1lO1xuXHQgICAgICAgIC8vIHZpZXcgdG8gbW9kZWxcblx0ICAgICAgICB0aGlzLmhhbmRsZXIgPSBnZXRfZXZlbnRfaGFuZGxlcih0aGlzLCBwYXJlbnQucmVuZGVyZXIsIGJsb2NrLCB0aGlzLm9iamVjdCwgdGhpcy5ub2RlLnJhd19leHByZXNzaW9uKTtcblx0ICAgICAgICB0aGlzLnNuaXBwZXQgPSB0aGlzLm5vZGUuZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICB0aGlzLmlzX3JlYWRvbmx5ID0gdGhpcy5ub2RlLmlzX3JlYWRvbmx5O1xuXHQgICAgICAgIHRoaXMubmVlZHNfbG9jayA9IHRoaXMubm9kZS5uYW1lID09PSAnY3VycmVudFRpbWUnOyAvLyBUT0RPIG90aGVycz9cblx0ICAgIH1cblx0ICAgIGdldF9kZXBlbmRlbmNpZXMoKSB7XG5cdCAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCh0aGlzLm5vZGUuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIHRoaXMubm9kZS5leHByZXNzaW9uLmRlcGVuZGVuY2llcy5mb3JFYWNoKChwcm9wKSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGluZGlyZWN0X2RlcGVuZGVuY2llcyA9IHRoaXMucGFyZW50LnJlbmRlcmVyLmNvbXBvbmVudC5pbmRpcmVjdF9kZXBlbmRlbmNpZXMuZ2V0KHByb3ApO1xuXHQgICAgICAgICAgICBpZiAoaW5kaXJlY3RfZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgICAgICAgICBpbmRpcmVjdF9kZXBlbmRlbmNpZXMuZm9yRWFjaChpbmRpcmVjdF9kZXBlbmRlbmN5ID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuYWRkKGluZGlyZWN0X2RlcGVuZGVuY3kpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuXHQgICAgfVxuXHQgICAgaXNfcmVhZG9ubHlfbWVkaWFfYXR0cmlidXRlKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLm5vZGUuaXNfcmVhZG9ubHlfbWVkaWFfYXR0cmlidXRlKCk7XG5cdCAgICB9XG5cdCAgICByZW5kZXIoYmxvY2ssIGxvY2spIHtcblx0ICAgICAgICBpZiAodGhpcy5pc19yZWFkb25seSlcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGNvbnN0IHsgcGFyZW50IH0gPSB0aGlzO1xuXHQgICAgICAgIGNvbnN0IHVwZGF0ZV9jb25kaXRpb25zID0gdGhpcy5uZWVkc19sb2NrID8gW3ggYCEke2xvY2t9YF0gOiBbXTtcblx0ICAgICAgICBjb25zdCBtb3VudF9jb25kaXRpb25zID0gW107XG5cdCAgICAgICAgY29uc3QgZGVwZW5kZW5jeV9hcnJheSA9IEFycmF5LmZyb20odGhpcy5nZXRfZGVwZW5kZW5jaWVzKCkpO1xuXHQgICAgICAgIGlmIChkZXBlbmRlbmN5X2FycmF5Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdXBkYXRlX2NvbmRpdGlvbnMucHVzaChibG9jay5yZW5kZXJlci5kaXJ0eShkZXBlbmRlbmN5X2FycmF5KSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChwYXJlbnQubm9kZS5uYW1lID09PSBcImlucHV0XCIpIHtcblx0ICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmVudC5ub2RlLmdldF9zdGF0aWNfYXR0cmlidXRlX3ZhbHVlKFwidHlwZVwiKTtcblx0ICAgICAgICAgICAgaWYgKHR5cGUgPT09IG51bGwgfHxcblx0ICAgICAgICAgICAgICAgIHR5cGUgPT09IFwiXCIgfHxcblx0ICAgICAgICAgICAgICAgIHR5cGUgPT09IFwidGV4dFwiIHx8XG5cdCAgICAgICAgICAgICAgICB0eXBlID09PSBcImVtYWlsXCIgfHxcblx0ICAgICAgICAgICAgICAgIHR5cGUgPT09IFwicGFzc3dvcmRcIikge1xuXHQgICAgICAgICAgICAgICAgdXBkYXRlX2NvbmRpdGlvbnMucHVzaCh4IGAke3BhcmVudC52YXJ9LiR7dGhpcy5ub2RlLm5hbWV9ICE9PSAke3RoaXMuc25pcHBldH1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcIm51bWJlclwiKSB7XG5cdCAgICAgICAgICAgICAgICB1cGRhdGVfY29uZGl0aW9ucy5wdXNoKHggYEB0b19udW1iZXIoJHtwYXJlbnQudmFyfS4ke3RoaXMubm9kZS5uYW1lfSkgIT09ICR7dGhpcy5zbmlwcGV0fWApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIG1vZGVsIHRvIHZpZXdcblx0ICAgICAgICBsZXQgdXBkYXRlX2RvbSA9IGdldF9kb21fdXBkYXRlcihwYXJlbnQsIHRoaXMpO1xuXHQgICAgICAgIGxldCBtb3VudF9kb20gPSB1cGRhdGVfZG9tO1xuXHQgICAgICAgIC8vIHNwZWNpYWwgY2FzZXNcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMubm9kZS5uYW1lKSB7XG5cdCAgICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGJpbmRpbmdfZ3JvdXAsIGlzX2NvbnRleHQsIGNvbnRleHRzLCBpbmRleCB9ID0gZ2V0X2JpbmRpbmdfZ3JvdXAocGFyZW50LnJlbmRlcmVyLCB0aGlzLm5vZGUsIGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgICAgICBibG9jay5yZW5kZXJlci5hZGRfdG9fY29udGV4dChgJCRiaW5kaW5nX2dyb3Vwc2ApO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpc19jb250ZXh0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmluZGluZ19ncm91cCA9IHggYCR7YmxvY2sucmVuZGVyZXIucmVmZXJlbmNlKCckJGJpbmRpbmdfZ3JvdXBzJyl9WyR7aW5kZXh9XWA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgY29udGV4dHMuc2xpY2UoMCwgLTEpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ19ncm91cCA9IHggYCR7YmluZGluZ19ncm91cH1bJHtibG9jay5yZW5kZXJlci5yZWZlcmVuY2UobmFtZSl9XWA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGAke2JpbmRpbmdfZ3JvdXB9ID0gJHtiaW5kaW5nX2dyb3VwfSB8fCBbXTtgKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYCR7YmluZGluZ19ncm91cCh0cnVlKX0gPSBbXTtgKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmh5ZHJhdGUucHVzaChiIGAke2JpbmRpbmdfZ3JvdXAodHJ1ZSl9LnB1c2goJHtwYXJlbnQudmFyfSk7YCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGAke2JpbmRpbmdfZ3JvdXAodHJ1ZSl9LnNwbGljZSgke2JpbmRpbmdfZ3JvdXAodHJ1ZSl9LmluZGV4T2YoJHtwYXJlbnQudmFyfSksIDEpO2ApO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXNlICd0ZXh0Q29udGVudCc6XG5cdCAgICAgICAgICAgICAgICB1cGRhdGVfY29uZGl0aW9ucy5wdXNoKHggYCR7dGhpcy5zbmlwcGV0fSAhPT0gJHtwYXJlbnQudmFyfS50ZXh0Q29udGVudGApO1xuXHQgICAgICAgICAgICAgICAgbW91bnRfY29uZGl0aW9ucy5wdXNoKHggYCR7dGhpcy5zbmlwcGV0fSAhPT0gdm9pZCAwYCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAnaW5uZXJIVE1MJzpcblx0ICAgICAgICAgICAgICAgIHVwZGF0ZV9jb25kaXRpb25zLnB1c2goeCBgJHt0aGlzLnNuaXBwZXR9ICE9PSAke3BhcmVudC52YXJ9LmlubmVySFRNTGApO1xuXHQgICAgICAgICAgICAgICAgbW91bnRfY29uZGl0aW9ucy5wdXNoKHggYCR7dGhpcy5zbmlwcGV0fSAhPT0gdm9pZCAwYCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAnY3VycmVudFRpbWUnOlxuXHQgICAgICAgICAgICAgICAgdXBkYXRlX2NvbmRpdGlvbnMucHVzaCh4IGAhQF9pc05hTigke3RoaXMuc25pcHBldH0pYCk7XG5cdCAgICAgICAgICAgICAgICBtb3VudF9kb20gPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgJ3BsYXliYWNrUmF0ZSc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3ZvbHVtZSc6XG5cdCAgICAgICAgICAgICAgICB1cGRhdGVfY29uZGl0aW9ucy5wdXNoKHggYCFAX2lzTmFOKCR7dGhpcy5zbmlwcGV0fSlgKTtcblx0ICAgICAgICAgICAgICAgIG1vdW50X2NvbmRpdGlvbnMucHVzaCh4IGAhQF9pc05hTigke3RoaXMuc25pcHBldH0pYCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAncGF1c2VkJzpcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGF1ZGlvIHJlc3RhcnRpbmcgYnkgaXRzZWxmXG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHtwYXJlbnQudmFyLm5hbWV9X2lzX3BhdXNlZGApO1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShsYXN0LCB4IGB0cnVlYCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2NvbmRpdGlvbnMucHVzaCh4IGAke2xhc3R9ICE9PSAoJHtsYXN0fSA9ICR7dGhpcy5zbmlwcGV0fSlgKTtcblx0ICAgICAgICAgICAgICAgICAgICB1cGRhdGVfZG9tID0gYiBgJHtwYXJlbnQudmFyfVske2xhc3R9ID8gXCJwYXVzZVwiIDogXCJwbGF5XCJdKCk7YDtcblx0ICAgICAgICAgICAgICAgICAgICBtb3VudF9kb20gPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYXNlICd2YWx1ZSc6XG5cdCAgICAgICAgICAgICAgICBpZiAocGFyZW50Lm5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ3R5cGUnKSA9PT0gJ2ZpbGUnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RvbSA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgbW91bnRfZG9tID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHVwZGF0ZV9kb20pIHtcblx0ICAgICAgICAgICAgaWYgKHVwZGF0ZV9jb25kaXRpb25zLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IHVwZGF0ZV9jb25kaXRpb25zLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSAmJiAke3Joc31gKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoJHtjb25kaXRpb259KSB7XG5cdFx0XHRcdFx0XHQke3VwZGF0ZV9kb219XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaCh1cGRhdGVfZG9tKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobW91bnRfZG9tKSB7XG5cdCAgICAgICAgICAgIGlmIChtb3VudF9jb25kaXRpb25zLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG1vdW50X2NvbmRpdGlvbnMucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9ICYmICR7cmhzfWApO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCR7Y29uZGl0aW9ufSkge1xuXHRcdFx0XHRcdFx0JHttb3VudF9kb219XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKG1vdW50X2RvbSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gZ2V0X2RvbV91cGRhdGVyKGVsZW1lbnQsIGJpbmRpbmcpIHtcblx0ICAgIGNvbnN0IHsgbm9kZSB9ID0gZWxlbWVudDtcblx0ICAgIGlmIChiaW5kaW5nLmlzX3JlYWRvbmx5X21lZGlhX2F0dHJpYnV0ZSgpKSB7XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICBpZiAoYmluZGluZy5ub2RlLm5hbWUgPT09ICd0aGlzJykge1xuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHQgICAgaWYgKG5vZGUubmFtZSA9PT0gJ3NlbGVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gbm9kZS5nZXRfc3RhdGljX2F0dHJpYnV0ZV92YWx1ZSgnbXVsdGlwbGUnKSA9PT0gdHJ1ZSA/XG5cdCAgICAgICAgICAgIGIgYEBzZWxlY3Rfb3B0aW9ucygke2VsZW1lbnQudmFyfSwgJHtiaW5kaW5nLnNuaXBwZXR9KWAgOlxuXHQgICAgICAgICAgICBiIGBAc2VsZWN0X29wdGlvbigke2VsZW1lbnQudmFyfSwgJHtiaW5kaW5nLnNuaXBwZXR9KWA7XG5cdCAgICB9XG5cdCAgICBpZiAoYmluZGluZy5ub2RlLm5hbWUgPT09ICdncm91cCcpIHtcblx0ICAgICAgICBjb25zdCB0eXBlID0gbm9kZS5nZXRfc3RhdGljX2F0dHJpYnV0ZV92YWx1ZSgndHlwZScpO1xuXHQgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IHR5cGUgPT09ICdjaGVja2JveCdcblx0ICAgICAgICAgICAgPyB4IGB+JHtiaW5kaW5nLnNuaXBwZXR9LmluZGV4T2YoJHtlbGVtZW50LnZhcn0uX192YWx1ZSlgXG5cdCAgICAgICAgICAgIDogeCBgJHtlbGVtZW50LnZhcn0uX192YWx1ZSA9PT0gJHtiaW5kaW5nLnNuaXBwZXR9YDtcblx0ICAgICAgICByZXR1cm4gYiBgJHtlbGVtZW50LnZhcn0uY2hlY2tlZCA9ICR7Y29uZGl0aW9ufTtgO1xuXHQgICAgfVxuXHQgICAgaWYgKGJpbmRpbmcubm9kZS5uYW1lID09PSAndmFsdWUnKSB7XG5cdCAgICAgICAgcmV0dXJuIGIgYEBzZXRfaW5wdXRfdmFsdWUoJHtlbGVtZW50LnZhcn0sICR7YmluZGluZy5zbmlwcGV0fSk7YDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBiIGAke2VsZW1lbnQudmFyfS4ke2JpbmRpbmcubm9kZS5uYW1lfSA9ICR7YmluZGluZy5zbmlwcGV0fTtgO1xuXHR9XG5cdGZ1bmN0aW9uIGdldF9iaW5kaW5nX2dyb3VwKHJlbmRlcmVyLCB2YWx1ZSwgYmxvY2spIHtcblx0ICAgIGNvbnN0IHsgcGFydHMgfSA9IGZsYXR0ZW5fcmVmZXJlbmNlKHZhbHVlLnJhd19leHByZXNzaW9uKTtcblx0ICAgIGxldCBrZXlwYXRoID0gcGFydHMuam9pbignLicpO1xuXHQgICAgY29uc3QgY29udGV4dHMgPSBbXTtcblx0ICAgIGZvciAoY29uc3QgZGVwIG9mIHZhbHVlLmV4cHJlc3Npb24uY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpIHtcblx0ICAgICAgICBjb25zdCBjb250ZXh0ID0gYmxvY2suYmluZGluZ3MuZ2V0KGRlcCk7XG5cdCAgICAgICAgbGV0IGtleTtcblx0ICAgICAgICBsZXQgbmFtZTtcblx0ICAgICAgICBpZiAoY29udGV4dCkge1xuXHQgICAgICAgICAgICBrZXkgPSBjb250ZXh0Lm9iamVjdC5uYW1lO1xuXHQgICAgICAgICAgICBuYW1lID0gY29udGV4dC5wcm9wZXJ0eS5uYW1lO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAga2V5ID0gZGVwO1xuXHQgICAgICAgICAgICBuYW1lID0gZGVwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBrZXlwYXRoID0gYCR7a2V5fUAke2tleXBhdGh9YDtcblx0ICAgICAgICBjb250ZXh0cy5wdXNoKG5hbWUpO1xuXHQgICAgfVxuXHQgICAgaWYgKCFyZW5kZXJlci5iaW5kaW5nX2dyb3Vwcy5oYXMoa2V5cGF0aCkpIHtcblx0ICAgICAgICBjb25zdCBpbmRleCA9IHJlbmRlcmVyLmJpbmRpbmdfZ3JvdXBzLnNpemU7XG5cdCAgICAgICAgY29udGV4dHMuZm9yRWFjaChjb250ZXh0ID0+IHtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoY29udGV4dCwgdHJ1ZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmVuZGVyZXIuYmluZGluZ19ncm91cHMuc2V0KGtleXBhdGgsIHtcblx0ICAgICAgICAgICAgYmluZGluZ19ncm91cDogKHRvX3JlZmVyZW5jZSA9IGZhbHNlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBsZXQgYmluZGluZ19ncm91cCA9ICckJGJpbmRpbmdfZ3JvdXBzJztcblx0ICAgICAgICAgICAgICAgIGxldCBfc2Vjb25kYXJ5X2luZGV4ZXMgPSBjb250ZXh0cztcblx0ICAgICAgICAgICAgICAgIGlmICh0b19yZWZlcmVuY2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiaW5kaW5nX2dyb3VwID0gYmxvY2sucmVuZGVyZXIucmVmZXJlbmNlKGJpbmRpbmdfZ3JvdXApO1xuXHQgICAgICAgICAgICAgICAgICAgIF9zZWNvbmRhcnlfaW5kZXhlcyA9IF9zZWNvbmRhcnlfaW5kZXhlcy5tYXAobmFtZSA9PiBibG9jay5yZW5kZXJlci5yZWZlcmVuY2UobmFtZSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKF9zZWNvbmRhcnlfaW5kZXhlcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHggYCR7YmluZGluZ19ncm91cH1bJHtpbmRleH1dYDtcblx0ICAgICAgICAgICAgICAgICAgICBfc2Vjb25kYXJ5X2luZGV4ZXMuZm9yRWFjaChzZWNvbmRhcnlfaW5kZXggPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSB4IGAke29ian1bJHtzZWNvbmRhcnlfaW5kZXh9XWA7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB4IGAke2JpbmRpbmdfZ3JvdXB9WyR7aW5kZXh9XWA7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGlzX2NvbnRleHQ6IGNvbnRleHRzLmxlbmd0aCA+IDAsXG5cdCAgICAgICAgICAgIGNvbnRleHRzLFxuXHQgICAgICAgICAgICBpbmRleCxcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZW5kZXJlci5iaW5kaW5nX2dyb3Vwcy5nZXQoa2V5cGF0aCk7XG5cdH1cblx0ZnVuY3Rpb24gZ2V0X2V2ZW50X2hhbmRsZXIoYmluZGluZywgcmVuZGVyZXIsIGJsb2NrLCBuYW1lLCBsaHMpIHtcblx0ICAgIGNvbnN0IGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzID0gbmV3IFNldChiaW5kaW5nLm5vZGUuZXhwcmVzc2lvbi5jb250ZXh0dWFsX2RlcGVuZGVuY2llcyk7XG5cdCAgICBjb25zdCBjb250ZXh0ID0gYmxvY2suYmluZGluZ3MuZ2V0KG5hbWUpO1xuXHQgICAgbGV0IHNldF9zdG9yZTtcblx0ICAgIGlmIChjb250ZXh0KSB7XG5cdCAgICAgICAgY29uc3QgeyBvYmplY3QsIHByb3BlcnR5LCBzdG9yZSwgc25pcHBldCB9ID0gY29udGV4dDtcblx0ICAgICAgICBsaHMgPSByZXBsYWNlX29iamVjdChsaHMsIHNuaXBwZXQpO1xuXHQgICAgICAgIGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLmFkZChvYmplY3QubmFtZSk7XG5cdCAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuYWRkKHByb3BlcnR5Lm5hbWUpO1xuXHQgICAgICAgIGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLmRlbGV0ZShuYW1lKTtcblx0ICAgICAgICBpZiAoc3RvcmUpIHtcblx0ICAgICAgICAgICAgc2V0X3N0b3JlID0gYiBgJHtzdG9yZX0uc2V0KCR7YCQke3N0b3JlfWB9KTtgO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIGNvbnN0IG9iamVjdCA9IGdldF9vYmplY3QobGhzKTtcblx0ICAgICAgICBpZiAob2JqZWN0Lm5hbWVbMF0gPT09ICckJykge1xuXHQgICAgICAgICAgICBjb25zdCBzdG9yZSA9IG9iamVjdC5uYW1lLnNsaWNlKDEpO1xuXHQgICAgICAgICAgICBzZXRfc3RvcmUgPSBiIGAke3N0b3JlfS5zZXQoJHtvYmplY3QubmFtZX0pO2A7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgY29uc3QgdmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9kb20ocmVuZGVyZXIsIGJpbmRpbmcucGFyZW50LCBiaW5kaW5nLCBibG9jaywgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpO1xuXHQgICAgY29uc3QgbXV0YXRpb24gPSBiIGBcblx0XHQke2xoc30gPSAke3ZhbHVlfTtcblx0XHQke3NldF9zdG9yZX1cblx0YDtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgdXNlc19jb250ZXh0OiBiaW5kaW5nLm5vZGUuaXNfY29udGV4dHVhbCB8fCBiaW5kaW5nLm5vZGUuZXhwcmVzc2lvbi51c2VzX2NvbnRleHQsXG5cdCAgICAgICAgbXV0YXRpb24sXG5cdCAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMsXG5cdCAgICAgICAgbGhzLFxuXHQgICAgfTtcblx0fVxuXHRmdW5jdGlvbiBnZXRfdmFsdWVfZnJvbV9kb20ocmVuZGVyZXIsIGVsZW1lbnQsIGJpbmRpbmcsIGJsb2NrLCBjb250ZXh0dWFsX2RlcGVuZGVuY2llcykge1xuXHQgICAgY29uc3QgeyBub2RlIH0gPSBlbGVtZW50O1xuXHQgICAgY29uc3QgeyBuYW1lIH0gPSBiaW5kaW5nLm5vZGU7XG5cdCAgICBpZiAobmFtZSA9PT0gJ3RoaXMnKSB7XG5cdCAgICAgICAgcmV0dXJuIHggYCQkdmFsdWVgO1xuXHQgICAgfVxuXHQgICAgLy8gPHNlbGVjdCBiaW5kOnZhbHVlPSdzZWxlY3RlZD5cblx0ICAgIGlmIChub2RlLm5hbWUgPT09ICdzZWxlY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIG5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ211bHRpcGxlJykgPT09IHRydWUgP1xuXHQgICAgICAgICAgICB4IGBAc2VsZWN0X211bHRpcGxlX3ZhbHVlKHRoaXMpYCA6XG5cdCAgICAgICAgICAgIHggYEBzZWxlY3RfdmFsdWUodGhpcylgO1xuXHQgICAgfVxuXHQgICAgY29uc3QgdHlwZSA9IG5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ3R5cGUnKTtcblx0ICAgIC8vIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgYmluZDpncm91cD0nZm9vJz5cblx0ICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSB7XG5cdCAgICAgICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcblx0ICAgICAgICAgICAgY29uc3QgeyBiaW5kaW5nX2dyb3VwLCBjb250ZXh0cyB9ID0gZ2V0X2JpbmRpbmdfZ3JvdXAocmVuZGVyZXIsIGJpbmRpbmcubm9kZSwgYmxvY2spO1xuXHQgICAgICAgICAgICBhZGRfdG9fc2V0KGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLCBjb250ZXh0cyk7XG5cdCAgICAgICAgICAgIHJldHVybiB4IGBAZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoJHtiaW5kaW5nX2dyb3VwKCl9LCB0aGlzLl9fdmFsdWUsIHRoaXMuY2hlY2tlZClgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4geCBgdGhpcy5fX3ZhbHVlYDtcblx0ICAgIH1cblx0ICAgIC8vIDxpbnB1dCB0eXBlPSdyYW5nZXxudW1iZXInIGJpbmQ6dmFsdWU+XG5cdCAgICBpZiAodHlwZSA9PT0gJ3JhbmdlJyB8fCB0eXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIHJldHVybiB4IGBAdG9fbnVtYmVyKHRoaXMuJHtuYW1lfSlgO1xuXHQgICAgfVxuXHQgICAgaWYgKChuYW1lID09PSAnYnVmZmVyZWQnIHx8IG5hbWUgPT09ICdzZWVrYWJsZScgfHwgbmFtZSA9PT0gJ3BsYXllZCcpKSB7XG5cdCAgICAgICAgcmV0dXJuIHggYEB0aW1lX3Jhbmdlc190b19hcnJheSh0aGlzLiR7bmFtZX0pYDtcblx0ICAgIH1cblx0ICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuXHQgICAgcmV0dXJuIHggYHRoaXMuJHtuYW1lfWA7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRfYWN0aW9ucyhibG9jaywgdGFyZ2V0LCBhY3Rpb25zKSB7XG5cdCAgICBhY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IGFkZF9hY3Rpb24oYmxvY2ssIHRhcmdldCwgYWN0aW9uKSk7XG5cdH1cblx0ZnVuY3Rpb24gYWRkX2FjdGlvbihibG9jaywgdGFyZ2V0LCBhY3Rpb24pIHtcblx0ICAgIGNvbnN0IHsgZXhwcmVzc2lvbiB9ID0gYWN0aW9uO1xuXHQgICAgbGV0IHNuaXBwZXQ7XG5cdCAgICBsZXQgZGVwZW5kZW5jaWVzO1xuXHQgICAgaWYgKGV4cHJlc3Npb24pIHtcblx0ICAgICAgICBzbmlwcGV0ID0gZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICBkZXBlbmRlbmNpZXMgPSBleHByZXNzaW9uLmR5bmFtaWNfZGVwZW5kZW5jaWVzKCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBpZCA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHthY3Rpb24ubmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV8kXS9nLCAnXycpfV9hY3Rpb25gKTtcblx0ICAgIGJsb2NrLmFkZF92YXJpYWJsZShpZCk7XG5cdCAgICBjb25zdCBmbiA9IGJsb2NrLnJlbmRlcmVyLnJlZmVyZW5jZShhY3Rpb24ubmFtZSk7XG5cdCAgICBibG9jay5ldmVudF9saXN0ZW5lcnMucHVzaCh4IGBAYWN0aW9uX2Rlc3Ryb3llcigke2lkfSA9ICR7Zm59LmNhbGwobnVsbCwgJHt0YXJnZXR9LCAke3NuaXBwZXR9KSlgKTtcblx0ICAgIGlmIChkZXBlbmRlbmNpZXMgJiYgZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICBsZXQgY29uZGl0aW9uID0geCBgJHtpZH0gJiYgQGlzX2Z1bmN0aW9uKCR7aWR9LnVwZGF0ZSlgO1xuXHQgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBjb25kaXRpb24gPSB4IGAke2NvbmRpdGlvbn0gJiYgJHtibG9jay5yZW5kZXJlci5kaXJ0eShkZXBlbmRlbmNpZXMpfWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBpZiAoJHtjb25kaXRpb259KSAke2lkfS51cGRhdGUuY2FsbChudWxsLCAke3NuaXBwZXR9KTtgKTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGdldF9zbG90X2RlZmluaXRpb24oYmxvY2ssIHNjb3BlLCBsZXRzKSB7XG5cdCAgICBpZiAobGV0cy5sZW5ndGggPT09IDApXG5cdCAgICAgICAgcmV0dXJuIHsgYmxvY2ssIHNjb3BlIH07XG5cdCAgICBjb25zdCBjb250ZXh0X2lucHV0ID0ge1xuXHQgICAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcblx0ICAgICAgICBwcm9wZXJ0aWVzOiBsZXRzLm1hcChsID0+ICh7XG5cdCAgICAgICAgICAgIHR5cGU6ICdQcm9wZXJ0eScsXG5cdCAgICAgICAgICAgIGtpbmQ6ICdpbml0Jyxcblx0ICAgICAgICAgICAga2V5OiBsLm5hbWUsXG5cdCAgICAgICAgICAgIHZhbHVlOiBsLnZhbHVlIHx8IGwubmFtZVxuXHQgICAgICAgIH0pKVxuXHQgICAgfTtcblx0ICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbXTtcblx0ICAgIGNvbnN0IHZhbHVlX21hcCA9IG5ldyBNYXAoKTtcblx0ICAgIGxldHMuZm9yRWFjaChsID0+IHtcblx0ICAgICAgICBsZXQgdmFsdWU7XG5cdCAgICAgICAgaWYgKGwubmFtZXMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgICAgICAvLyBtb3JlIHRoYW4gb25lLCBwcm9iYWJseSBkZXN0cnVjdHVyaW5nXG5cdCAgICAgICAgICAgIGNvbnN0IHVuaXF1ZV9uYW1lID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGwubmFtZXMuam9pbignXycpKS5uYW1lO1xuXHQgICAgICAgICAgICB2YWx1ZV9tYXAuc2V0KGwudmFsdWUsIHVuaXF1ZV9uYW1lKTtcblx0ICAgICAgICAgICAgdmFsdWUgPSB7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogdW5pcXVlX25hbWUgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gbC52YWx1ZSB8fCBsLm5hbWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHByb3BlcnRpZXMucHVzaCh7XG5cdCAgICAgICAgICAgIHR5cGU6ICdQcm9wZXJ0eScsXG5cdCAgICAgICAgICAgIGtpbmQ6ICdpbml0Jyxcblx0ICAgICAgICAgICAga2V5OiBsLm5hbWUsXG5cdCAgICAgICAgICAgIHZhbHVlLFxuXHQgICAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgICBjb25zdCBjaGFuZ2VzX2lucHV0ID0ge1xuXHQgICAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcblx0ICAgICAgICBwcm9wZXJ0aWVzLFxuXHQgICAgfTtcblx0ICAgIGNvbnN0IG5hbWVzID0gbmV3IFNldCgpO1xuXHQgICAgY29uc3QgbmFtZXNfbG9va3VwID0gbmV3IE1hcCgpO1xuXHQgICAgbGV0cy5mb3JFYWNoKGwgPT4ge1xuXHQgICAgICAgIGwubmFtZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgbmFtZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICBpZiAodmFsdWVfbWFwLmhhcyhsLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgbmFtZXNfbG9va3VwLnNldChuYW1lLCB2YWx1ZV9tYXAuZ2V0KGwudmFsdWUpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgICBjb25zdCBjb250ZXh0ID0ge1xuXHQgICAgICAgIHR5cGU6ICdPYmplY3RFeHByZXNzaW9uJyxcblx0ICAgICAgICBwcm9wZXJ0aWVzOiBBcnJheS5mcm9tKG5hbWVzKS5tYXAobmFtZSA9PiBwIGAke2Jsb2NrLnJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChuYW1lKS5pbmRleH06ICR7bmFtZX1gKVxuXHQgICAgfTtcblx0ICAgIGNvbnN0IHsgY29udGV4dF9sb29rdXAgfSA9IGJsb2NrLnJlbmRlcmVyO1xuXHQgICAgLy8gaSBhbSB3ZWxsIGF3YXJlIHRoYXQgdGhpcyBjb2RlIGlzIGdyb3NzXG5cdCAgICAvLyBUT0RPOiBjb250ZXh0LW92ZXJmbG93IG1ha2UgaXQgbGVzcyBncm9zc1xuXHQgICAgY29uc3QgY2hhbmdlcyA9IHtcblx0ICAgICAgICB0eXBlOiAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nLFxuXHQgICAgICAgIGdldCBleHByZXNzaW9uKCkge1xuXHQgICAgICAgICAgICBpZiAoYmxvY2sucmVuZGVyZXIuY29udGV4dF9vdmVyZmxvdykge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBlZCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShuYW1lcykuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gY29udGV4dF9sb29rdXAuZ2V0KG5hbWUpLmluZGV4LnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBNYXRoLmZsb29yKGkgLyAzMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9va3VwX25hbWUgPSBuYW1lc19sb29rdXAuaGFzKG5hbWUpID8gbmFtZXNfbG9va3VwLmdldChuYW1lKSA6IG5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFncm91cGVkW2ddKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBncm91cGVkW2ddID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZFtnXS5wdXNoKHsgbmFtZTogbG9va3VwX25hbWUsIG46IGkgJSAzMSB9KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcblx0ICAgICAgICAgICAgICAgIGZvciAobGV0IGcgPSAwOyBnIDwgZ3JvdXBlZC5sZW5ndGg7IGcgKz0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2ddID0gZ3JvdXBlZFtnXVxuXHQgICAgICAgICAgICAgICAgICAgICAgICA/IGdyb3VwZWRbZ11cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHsgbmFtZSwgbiB9KSA9PiB4IGAke25hbWV9ID8gJHsxIDw8IG59IDogMGApXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9IHwgJHtyaHN9YClcblx0ICAgICAgICAgICAgICAgICAgICAgICAgOiB4IGAwYDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0FycmF5RXhwcmVzc2lvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmFtZXMpXG5cdCAgICAgICAgICAgICAgICAubWFwKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgbG9va3VwX25hbWUgPSBuYW1lc19sb29rdXAuaGFzKG5hbWUpID8gbmFtZXNfbG9va3VwLmdldChuYW1lKSA6IG5hbWU7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBpID0gY29udGV4dF9sb29rdXAuZ2V0KG5hbWUpLmluZGV4LnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHggYCR7bG9va3VwX25hbWV9ID8gJHsxIDw8IGl9IDogMGA7XG5cdCAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9IHwgJHtyaHN9YCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgYmxvY2ssXG5cdCAgICAgICAgc2NvcGUsXG5cdCAgICAgICAgZ2V0X2NvbnRleHQ6IHggYCR7Y29udGV4dF9pbnB1dH0gPT4gJHtjb250ZXh0fWAsXG5cdCAgICAgICAgZ2V0X2NoYW5nZXM6IHggYCR7Y2hhbmdlc19pbnB1dH0gPT4gJHtjaGFuZ2VzfWBcblx0ICAgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBjb21wYXJlX25vZGUoYSwgYikge1xuXHQgICAgaWYgKGEgPT09IGIpXG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICBpZiAoIWEgfHwgIWIpXG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgaWYgKGEudHlwZSAhPT0gYi50eXBlKVxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIHN3aXRjaCAoYS50eXBlKSB7XG5cdCAgICAgICAgY2FzZSBcIklkZW50aWZpZXJcIjpcblx0ICAgICAgICAgICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lO1xuXHQgICAgICAgIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG5cdCAgICAgICAgICAgIHJldHVybiAoY29tcGFyZV9ub2RlKGEub2JqZWN0LCBiLm9iamVjdCkgJiZcblx0ICAgICAgICAgICAgICAgIGNvbXBhcmVfbm9kZShhLnByb3BlcnR5LCBiLnByb3BlcnR5KSAmJlxuXHQgICAgICAgICAgICAgICAgYS5jb21wdXRlZCA9PT0gYi5jb21wdXRlZCk7XG5cdCAgICAgICAgY2FzZSAnTGl0ZXJhbCc6XG5cdCAgICAgICAgICAgIHJldHVybiBhLnZhbHVlID09PSBiLnZhbHVlO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gYmluZF90aGlzKGNvbXBvbmVudCwgYmxvY2ssIGJpbmRpbmcsIHZhcmlhYmxlKSB7XG5cdCAgICBjb25zdCBmbiA9IGNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWUoYCR7dmFyaWFibGUubmFtZX1fYmluZGluZ2ApO1xuXHQgICAgYmxvY2sucmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoZm4ubmFtZSk7XG5cdCAgICBjb25zdCBjYWxsZWUgPSBibG9jay5yZW5kZXJlci5yZWZlcmVuY2UoZm4ubmFtZSk7XG5cdCAgICBjb25zdCB7IGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLCBtdXRhdGlvbiB9ID0gYmluZGluZy5oYW5kbGVyO1xuXHQgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gYmluZGluZy5nZXRfZGVwZW5kZW5jaWVzKCk7XG5cdCAgICBjb25zdCBib2R5ID0gYiBgXG5cdFx0JHttdXRhdGlvbn1cblx0XHQke0FycmF5LmZyb20oZGVwZW5kZW5jaWVzKVxuICAgICAgICAuZmlsdGVyKGRlcCA9PiBkZXBbMF0gIT09ICckJylcbiAgICAgICAgLmZpbHRlcihkZXAgPT4gIWNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLmhhcyhkZXApKVxuICAgICAgICAubWFwKGRlcCA9PiBiIGAke2Jsb2NrLnJlbmRlcmVyLmludmFsaWRhdGUoZGVwKX07YCl9XG5cdGA7XG5cdCAgICBpZiAoY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuc2l6ZSkge1xuXHQgICAgICAgIGNvbnN0IHBhcmFtcyA9IEFycmF5LmZyb20oY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpLm1hcChuYW1lID0+ICh7XG5cdCAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgbmFtZVxuXHQgICAgICAgIH0pKTtcblx0ICAgICAgICBjb21wb25lbnQucGFydGx5X2hvaXN0ZWQucHVzaChiIGBcblx0XHRcdGZ1bmN0aW9uICR7Zm59KCQkdmFsdWUsICR7cGFyYW1zfSkge1xuXHRcdFx0XHRAYmluZGluZ19jYWxsYmFja3NbJCR2YWx1ZSA/ICd1bnNoaWZ0JyA6ICdwdXNoJ10oKCkgPT4ge1xuXHRcdFx0XHRcdCR7Ym9keX1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgYWxpYXNfbWFwID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcblx0ICAgICAgICBmb3IgKGxldCBpZCBvZiBwYXJhbXMpIHtcblx0ICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBibG9jay5yZW5kZXJlci5yZWZlcmVuY2UoaWQubmFtZSk7XG5cdCAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICBpZiAoYmxvY2sudmFyaWFibGVzLmhhcyhpZC5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgbGV0IGFsaWFzID0gaWQubmFtZTtcblx0ICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBibG9jay52YXJpYWJsZXMuaGFzKGFsaWFzKSAmJiAhY29tcGFyZV9ub2RlKGJsb2NrLnZhcmlhYmxlcy5nZXQoYWxpYXMpLmluaXQsIHZhbHVlKTsgYWxpYXMgPSBgJHtpZC5uYW1lfV8ke2krK31gKVxuXHQgICAgICAgICAgICAgICAgICAgIDtcblx0ICAgICAgICAgICAgICAgIGFsaWFzX21hcC5zZXQoYWxpYXMsIGlkLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgaWQgPSB7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogYWxpYXMgfTtcblx0ICAgICAgICAgICAgICAgIGZvdW5kID0gYmxvY2sudmFyaWFibGVzLmhhcyhhbGlhcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYXJncy5wdXNoKGlkKTtcblx0ICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKGlkLCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgYXNzaWduID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGBhc3NpZ25fJHt2YXJpYWJsZS5uYW1lfWApO1xuXHQgICAgICAgIGNvbnN0IHVuYXNzaWduID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGB1bmFzc2lnbl8ke3ZhcmlhYmxlLm5hbWV9YCk7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdGNvbnN0ICR7YXNzaWdufSA9ICgpID0+ICR7Y2FsbGVlfSgke3ZhcmlhYmxlfSwgJHthcmdzfSk7XG5cdFx0XHRjb25zdCAke3VuYXNzaWdufSA9ICgpID0+ICR7Y2FsbGVlfShudWxsLCAke2FyZ3N9KTtcblx0XHRgKTtcblx0ICAgICAgICBjb25zdCBjb25kaXRpb24gPSBBcnJheS5mcm9tKGFyZ3MpXG5cdCAgICAgICAgICAgIC5tYXAobmFtZSA9PiB4IGAke25hbWV9ICE9PSAke2Jsb2NrLnJlbmRlcmVyLnJlZmVyZW5jZShhbGlhc19tYXAuZ2V0KG5hbWUubmFtZSkgfHwgbmFtZS5uYW1lKX1gKVxuXHQgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9IHx8ICR7cmhzfWApO1xuXHQgICAgICAgIC8vIHdlIHB1c2ggdW5hc3NpZ24gYW5kIHVuc2hpZnQgYXNzaWduIHNvIHRoYXQgcmVmZXJlbmNlcyBhcmVcblx0ICAgICAgICAvLyBudWxsZWQgb3V0IGJlZm9yZSB0aGV5J3JlIGNyZWF0ZWQsIHRvIGF2b2lkIGdsaXRjaGVzXG5cdCAgICAgICAgLy8gd2l0aCBzaGlmdGluZyBpbmRpY2VzXG5cdCAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0aWYgKCR7Y29uZGl0aW9ufSkge1xuXHRcdFx0XHQke3VuYXNzaWdufSgpO1xuXHRcdFx0XHQke2FyZ3MubWFwKGEgPT4gYiBgJHthfSA9ICR7YmxvY2sucmVuZGVyZXIucmVmZXJlbmNlKGFsaWFzX21hcC5nZXQoYS5uYW1lKSB8fCBhLm5hbWUpfWApfTtcblx0XHRcdFx0JHthc3NpZ259KCk7XG5cdFx0XHR9YCk7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGAke3VuYXNzaWdufSgpO2ApO1xuXHQgICAgICAgIHJldHVybiBiIGAke2Fzc2lnbn0oKTtgO1xuXHQgICAgfVxuXHQgICAgY29tcG9uZW50LnBhcnRseV9ob2lzdGVkLnB1c2goYiBgXG5cdFx0ZnVuY3Rpb24gJHtmbn0oJCR2YWx1ZSkge1xuXHRcdFx0QGJpbmRpbmdfY2FsbGJhY2tzWyQkdmFsdWUgPyAndW5zaGlmdCcgOiAncHVzaCddKCgpID0+IHtcblx0XHRcdFx0JHtib2R5fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRgKTtcblx0ICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgJHtjYWxsZWV9KG51bGwpO2ApO1xuXHQgICAgcmV0dXJuIGIgYCR7Y2FsbGVlfSgke3ZhcmlhYmxlfSk7YDtcblx0fVxuXG5cdGNsYXNzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgX3Njb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgdGhpcy5zdGFydCA9IGluZm8uc3RhcnQ7XG5cdCAgICAgICAgdGhpcy5lbmQgPSBpbmZvLmVuZDtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBpbmZvLnR5cGU7XG5cdCAgICAgICAgLy8gdGhpcyBtYWtlcyBwcm9wZXJ0aWVzIG5vbi1lbnVtZXJhYmxlLCB3aGljaCBtYWtlcyBsb2dnaW5nXG5cdCAgICAgICAgLy8gYmVhcmFibGUuIG1pZ2h0IGhhdmUgYSBwZXJmb3JtYW5jZSBjb3N0LiBUT0RPIHJlbW92ZSBpbiBwcm9kP1xuXHQgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0ICAgICAgICAgICAgY29tcG9uZW50OiB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogY29tcG9uZW50XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHBhcmVudDoge1xuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHBhcmVudFxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBjYW5ub3RfdXNlX2lubmVyaHRtbCgpIHtcblx0ICAgICAgICBpZiAodGhpcy5jYW5fdXNlX2lubmVyaHRtbCAhPT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5jYW5fdXNlX2lubmVyaHRtbCA9IGZhbHNlO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpXG5cdCAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jYW5ub3RfdXNlX2lubmVyaHRtbCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGZpbmRfbmVhcmVzdChzZWxlY3Rvcikge1xuXHQgICAgICAgIGlmIChzZWxlY3Rvci50ZXN0KHRoaXMudHlwZSkpXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudClcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmZpbmRfbmVhcmVzdChzZWxlY3Rvcik7XG5cdCAgICB9XG5cdCAgICBnZXRfc3RhdGljX2F0dHJpYnV0ZV92YWx1ZShuYW1lKSB7XG5cdCAgICAgICAgY29uc3QgYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzICYmIHRoaXMuYXR0cmlidXRlcy5maW5kKChhdHRyKSA9PiBhdHRyLnR5cGUgPT09ICdBdHRyaWJ1dGUnICYmIGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lKTtcblx0ICAgICAgICBpZiAoIWF0dHJpYnV0ZSlcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgaWYgKGF0dHJpYnV0ZS5pc190cnVlKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICBpZiAoYXR0cmlidXRlLmNodW5rcy5sZW5ndGggPT09IDApXG5cdCAgICAgICAgICAgIHJldHVybiAnJztcblx0ICAgICAgICBpZiAoYXR0cmlidXRlLmNodW5rcy5sZW5ndGggPT09IDEgJiYgYXR0cmlidXRlLmNodW5rc1swXS50eXBlID09PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZS5jaHVua3NbMF0uZGF0YTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICBoYXNfYW5jZXN0b3IodHlwZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/XG5cdCAgICAgICAgICAgIHRoaXMucGFyZW50LnR5cGUgPT09IHR5cGUgfHwgdGhpcy5wYXJlbnQuaGFzX2FuY2VzdG9yKHR5cGUpIDpcblx0ICAgICAgICAgICAgZmFsc2U7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVfc2NvcGVzKGV4cHJlc3Npb24pIHtcblx0ICAgIHJldHVybiBhbmFseXplKGV4cHJlc3Npb24pO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNfZHluYW1pYyQxKHZhcmlhYmxlKSB7XG5cdCAgICBpZiAodmFyaWFibGUpIHtcblx0ICAgICAgICBpZiAodmFyaWFibGUubXV0YXRlZCB8fCB2YXJpYWJsZS5yZWFzc2lnbmVkKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gZHluYW1pYyBpbnRlcm5hbCBzdGF0ZVxuXHQgICAgICAgIGlmICghdmFyaWFibGUubW9kdWxlICYmIHZhcmlhYmxlLndyaXRhYmxlICYmIHZhcmlhYmxlLmV4cG9ydF9uYW1lKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gd3JpdGFibGUgcHJvcHNcblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIG5vZGVzX21hdGNoKGEsIGIpIHtcblx0ICAgIGlmICghIWEgIT09ICEhYilcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShhKSAhPT0gQXJyYXkuaXNBcnJheShiKSlcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICBpZiAoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuXHQgICAgICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICByZXR1cm4gYS5ldmVyeSgoY2hpbGQsIGkpID0+IG5vZGVzX21hdGNoKGNoaWxkLCBiW2ldKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGFfa2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcblx0ICAgICAgICBjb25zdCBiX2tleXMgPSBPYmplY3Qua2V5cyhiKS5zb3J0KCk7XG5cdCAgICAgICAgaWYgKGFfa2V5cy5sZW5ndGggIT09IGJfa2V5cy5sZW5ndGgpXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICBsZXQgaSA9IGFfa2V5cy5sZW5ndGg7XG5cdCAgICAgICAgd2hpbGUgKGktLSkge1xuXHQgICAgICAgICAgICBjb25zdCBrZXkgPSBhX2tleXNbaV07XG5cdCAgICAgICAgICAgIGlmIChiX2tleXNbaV0gIT09IGtleSlcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3N0YXJ0JyB8fCBrZXkgPT09ICdlbmQnKVxuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIGlmICghbm9kZXNfbWF0Y2goYVtrZXldLCBiW2tleV0pKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYSA9PT0gYjtcblx0fVxuXG5cdGZ1bmN0aW9uIGludmFsaWRhdGUocmVuZGVyZXIsIHNjb3BlLCBub2RlLCBuYW1lcywgbWFpbl9leGVjdXRpb25fY29udGV4dCA9IGZhbHNlKSB7XG5cdCAgICBjb25zdCB7IGNvbXBvbmVudCB9ID0gcmVuZGVyZXI7XG5cdCAgICBjb25zdCBbaGVhZCwgLi4udGFpbF0gPSBBcnJheS5mcm9tKG5hbWVzKVxuXHQgICAgICAgIC5maWx0ZXIobmFtZSA9PiB7XG5cdCAgICAgICAgY29uc3Qgb3duZXIgPSBzY29wZS5maW5kX293bmVyKG5hbWUpO1xuXHQgICAgICAgIHJldHVybiAhb3duZXIgfHwgb3duZXIgPT09IGNvbXBvbmVudC5pbnN0YW5jZV9zY29wZTtcblx0ICAgIH0pXG5cdCAgICAgICAgLm1hcChuYW1lID0+IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKSlcblx0ICAgICAgICAuZmlsdGVyKHZhcmlhYmxlID0+IHtcblx0ICAgICAgICByZXR1cm4gdmFyaWFibGUgJiYgKCF2YXJpYWJsZS5ob2lzdGFibGUgJiZcblx0ICAgICAgICAgICAgIXZhcmlhYmxlLmdsb2JhbCAmJlxuXHQgICAgICAgICAgICAhdmFyaWFibGUubW9kdWxlICYmXG5cdCAgICAgICAgICAgICh2YXJpYWJsZS5yZWZlcmVuY2VkIHx8XG5cdCAgICAgICAgICAgICAgICB2YXJpYWJsZS5zdWJzY3JpYmFibGUgfHxcblx0ICAgICAgICAgICAgICAgIHZhcmlhYmxlLmlzX3JlYWN0aXZlX2RlcGVuZGVuY3kgfHxcblx0ICAgICAgICAgICAgICAgIHZhcmlhYmxlLmV4cG9ydF9uYW1lIHx8XG5cdCAgICAgICAgICAgICAgICB2YXJpYWJsZS5uYW1lWzBdID09PSAnJCcpKTtcblx0ICAgIH0pO1xuXHQgICAgZnVuY3Rpb24gZ2V0X2ludmFsaWRhdGVkKHZhcmlhYmxlLCBub2RlKSB7XG5cdCAgICAgICAgaWYgKG1haW5fZXhlY3V0aW9uX2NvbnRleHQgJiYgIXZhcmlhYmxlLnN1YnNjcmliYWJsZSAmJiB2YXJpYWJsZS5uYW1lWzBdICE9PSAnJCcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5vZGUgfHwgeCBgJHt2YXJpYWJsZS5uYW1lfWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZW5kZXJlci5pbnZhbGlkYXRlKHZhcmlhYmxlLm5hbWUpO1xuXHQgICAgfVxuXHQgICAgaWYgKGhlYWQpIHtcblx0ICAgICAgICBjb21wb25lbnQuaGFzX3JlYWN0aXZlX2Fzc2lnbm1lbnRzID0gdHJ1ZTtcblx0ICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nICYmIG5vZGUub3BlcmF0b3IgPT09ICc9JyAmJiBub2Rlc19tYXRjaChub2RlLmxlZnQsIG5vZGUucmlnaHQpICYmIHRhaWwubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBnZXRfaW52YWxpZGF0ZWQoaGVhZCwgbm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjb25zdCBpc19zdG9yZV92YWx1ZSA9IGhlYWQubmFtZVswXSA9PT0gJyQnICYmIGhlYWQubmFtZVsxXSAhPT0gJyQnO1xuXHQgICAgICAgICAgICBjb25zdCBleHRyYV9hcmdzID0gdGFpbC5tYXAodmFyaWFibGUgPT4gZ2V0X2ludmFsaWRhdGVkKHZhcmlhYmxlKSk7XG5cdCAgICAgICAgICAgIGNvbnN0IHBhc3NfdmFsdWUgPSAoZXh0cmFfYXJncy5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgICAgICAobm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nICYmIG5vZGUubGVmdC50eXBlICE9PSAnSWRlbnRpZmllcicpIHx8XG5cdCAgICAgICAgICAgICAgICAobm9kZS50eXBlID09PSAnVXBkYXRlRXhwcmVzc2lvbicgJiYgKCFub2RlLnByZWZpeCB8fCBub2RlLmFyZ3VtZW50LnR5cGUgIT09ICdJZGVudGlmaWVyJykpKTtcblx0ICAgICAgICAgICAgaWYgKHBhc3NfdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIGV4dHJhX2FyZ3MudW5zaGlmdCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICAgICAgICAgIG5hbWU6IGhlYWQubmFtZVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbGV0IGludmFsaWRhdGUgPSBpc19zdG9yZV92YWx1ZVxuXHQgICAgICAgICAgICAgICAgPyB4IGBAc2V0X3N0b3JlX3ZhbHVlKCR7aGVhZC5uYW1lLnNsaWNlKDEpfSwgJHtub2RlfSwgJHtleHRyYV9hcmdzfSlgXG5cdCAgICAgICAgICAgICAgICA6ICFtYWluX2V4ZWN1dGlvbl9jb250ZXh0XG5cdCAgICAgICAgICAgICAgICAgICAgPyB4IGAkJGludmFsaWRhdGUoJHtyZW5kZXJlci5jb250ZXh0X2xvb2t1cC5nZXQoaGVhZC5uYW1lKS5pbmRleH0sICR7bm9kZX0sICR7ZXh0cmFfYXJnc30pYFxuXHQgICAgICAgICAgICAgICAgICAgIDogbm9kZTtcblx0ICAgICAgICAgICAgaWYgKGhlYWQuc3Vic2NyaWJhYmxlICYmIGhlYWQucmVhc3NpZ25lZCkge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlID0gYCQkc3Vic2NyaWJlXyR7aGVhZC5uYW1lfWA7XG5cdCAgICAgICAgICAgICAgICBpbnZhbGlkYXRlID0geCBgJHtzdWJzY3JpYmV9KCR7aW52YWxpZGF0ZX0pYDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gaW52YWxpZGF0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbm9kZTtcblx0fVxuXG5cdGNvbnN0IHJlc2VydmVkX2tleXdvcmRzID0gbmV3IFNldChbXCIkJHByb3BzXCIsIFwiJCRyZXN0UHJvcHNcIl0pO1xuXHRmdW5jdGlvbiBpc19yZXNlcnZlZF9rZXl3b3JkKG5hbWUpIHtcblx0ICAgIHJldHVybiByZXNlcnZlZF9rZXl3b3Jkcy5oYXMobmFtZSk7XG5cdH1cblxuXHRjbGFzcyBFeHByZXNzaW9uIHtcblx0ICAgIC8vIHRvZG86IG93bmVyIHR5cGVcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgb3duZXIsIHRlbXBsYXRlX3Njb3BlLCBpbmZvLCBsYXp5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gJ0V4cHJlc3Npb24nO1xuXHQgICAgICAgIHRoaXMucmVmZXJlbmNlcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHR1YWxfZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMuZGVjbGFyYXRpb25zID0gW107XG5cdCAgICAgICAgdGhpcy51c2VzX2NvbnRleHQgPSBmYWxzZTtcblx0ICAgICAgICAvLyBUT0RPIHJldmVydCB0byBkaXJlY3QgcHJvcGVydHkgYWNjZXNzIGluIHByb2Q/XG5cdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuXHQgICAgICAgICAgICBjb21wb25lbnQ6IHtcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBjb21wb25lbnRcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMubm9kZSA9IGluZm87XG5cdCAgICAgICAgdGhpcy50ZW1wbGF0ZV9zY29wZSA9IHRlbXBsYXRlX3Njb3BlO1xuXHQgICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcblx0ICAgICAgICBjb25zdCB7IGRlcGVuZGVuY2llcywgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMsIHJlZmVyZW5jZXMgfSA9IHRoaXM7XG5cdCAgICAgICAgbGV0IHsgbWFwLCBzY29wZSB9ID0gY3JlYXRlX3Njb3BlcyhpbmZvKTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cdCAgICAgICAgdGhpcy5zY29wZV9tYXAgPSBtYXA7XG5cdCAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHRoaXM7XG5cdCAgICAgICAgbGV0IGZ1bmN0aW9uX2V4cHJlc3Npb247XG5cdCAgICAgICAgLy8gZGlzY292ZXIgZGVwZW5kZW5jaWVzLCBidXQgZG9uJ3QgY2hhbmdlIHRoZSBjb2RlIHlldFxuXHQgICAgICAgIHdhbGsoaW5mbywge1xuXHQgICAgICAgICAgICBlbnRlcihub2RlLCBwYXJlbnQsIGtleSkge1xuXHQgICAgICAgICAgICAgICAgLy8gZG9uJ3QgbWFuaXB1bGF0ZSBzaG9ydGhhbmQgcHJvcHMgdHdpY2Vcblx0ICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgcGFyZW50LnNob3J0aGFuZClcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gbWFwLmdldChub2RlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmICghZnVuY3Rpb25fZXhwcmVzc2lvbiAmJiAvRnVuY3Rpb25FeHByZXNzaW9uLy50ZXN0KG5vZGUudHlwZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbl9leHByZXNzaW9uID0gbm9kZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChpc1JlZmVyZW5jZShub2RlLCBwYXJlbnQpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBub2RlcyB9ID0gZmxhdHRlbl9yZWZlcmVuY2Uobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlcy5hZGQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmhhcyhuYW1lKSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lWzBdID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVfbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZV9zY29wZS5uYW1lcy5oYXMoc3RvcmVfbmFtZSkgfHwgc2NvcGUuaGFzKHN0b3JlX25hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3Iobm9kZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBjb250ZXh0dWFsLXN0b3JlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgU3RvcmVzIG11c3QgYmUgZGVjbGFyZWQgYXQgdGhlIHRvcCBsZXZlbCBvZiB0aGUgY29tcG9uZW50ICh0aGlzIG1heSBjaGFuZ2UgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBTdmVsdGUpYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlX3Njb3BlLmlzX2xldChuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bmN0aW9uX2V4cHJlc3Npb24pIHsgLy8gVE9ETyBzaG91bGQgdGhpcyBiZSBgIWxhenlgID9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5hZGQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGVtcGxhdGVfc2NvcGUubmFtZXMuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24udXNlc19jb250ZXh0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvd25lciA9IHRlbXBsYXRlX3Njb3BlLmdldF9vd25lcihuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNfaW5kZXggPSBvd25lci50eXBlID09PSAnRWFjaEJsb2NrJyAmJiBvd25lci5rZXkgJiYgbmFtZSA9PT0gb3duZXIuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGF6eSB8fCBpc19pbmRleCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfc2NvcGUuZGVwZW5kZW5jaWVzX2Zvcl9uYW1lLmdldChuYW1lKS5mb3JFYWNoKG5hbWUgPT4gZGVwZW5kZW5jaWVzLmFkZChuYW1lKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGF6eSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuYWRkX3JlZmVyZW5jZShuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm5faWZfdW5kZWZpbmVkKG5hbWUsIG5vZGVzWzBdLCB0ZW1wbGF0ZV9zY29wZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gdHJhY2sgYW55IGFzc2lnbm1lbnRzIGZyb20gdGVtcGxhdGUgZXhwcmVzc2lvbnMgYXMgbXV0YWJsZVxuXHQgICAgICAgICAgICAgICAgbGV0IG5hbWVzO1xuXHQgICAgICAgICAgICAgICAgbGV0IGRlZXAgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWVwID0gbm9kZS5sZWZ0LnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMgPSBleHRyYWN0X25hbWVzKGRlZXAgPyBnZXRfb2JqZWN0KG5vZGUubGVmdCkgOiBub2RlLmxlZnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdVcGRhdGVFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuYW1lcyA9IGV4dHJhY3RfbmFtZXMoZ2V0X29iamVjdChub2RlLmFyZ3VtZW50KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5hbWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlX3Njb3BlLm5hbWVzLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfc2NvcGUuZGVwZW5kZW5jaWVzX2Zvcl9uYW1lLmdldChuYW1lKS5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVbZGVlcCA/ICdtdXRhdGVkJyA6ICdyZWFzc2lnbmVkJ10gPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlYWNoX2Jsb2NrID0gdGVtcGxhdGVfc2NvcGUuZ2V0X293bmVyKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaF9ibG9jay5oYXNfYmluZGluZyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuYWRkX3JlZmVyZW5jZShuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlW2RlZXAgPyAnbXV0YXRlZCcgOiAncmVhc3NpZ25lZCddID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBsZWF2ZShub2RlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGZ1bmN0aW9uX2V4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbl9leHByZXNzaW9uID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZHluYW1pY19kZXBlbmRlbmNpZXMoKSB7XG5cdCAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5kZXBlbmRlbmNpZXMpLmZpbHRlcihuYW1lID0+IHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMudGVtcGxhdGVfc2NvcGUuaXNfbGV0KG5hbWUpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgIGlmIChpc19yZXNlcnZlZF9rZXl3b3JkKG5hbWUpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy5jb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgIHJldHVybiBpc19keW5hbWljJDEodmFyaWFibGUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLy8gVE9ETyBtb3ZlIHRoaXMgaW50byBhIHJlbmRlci1kb20gd3JhcHBlcj9cblx0ICAgIG1hbmlwdWxhdGUoYmxvY2spIHtcblx0ICAgICAgICAvLyBUT0RPIGlkZWFsbHkgd2Ugd291bGRuJ3QgZW5kIHVwIGNhbGxpbmcgdGhpcyBtZXRob2Rcblx0ICAgICAgICAvLyBtdWx0aXBsZSB0aW1lc1xuXHQgICAgICAgIGlmICh0aGlzLm1hbmlwdWxhdGVkKVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5tYW5pcHVsYXRlZDtcblx0ICAgICAgICBjb25zdCB7IGNvbXBvbmVudCwgZGVjbGFyYXRpb25zLCBzY29wZV9tYXA6IG1hcCwgdGVtcGxhdGVfc2NvcGUsIG93bmVyIH0gPSB0aGlzO1xuXHQgICAgICAgIGxldCBzY29wZSA9IHRoaXMuc2NvcGU7XG5cdCAgICAgICAgbGV0IGZ1bmN0aW9uX2V4cHJlc3Npb247XG5cdCAgICAgICAgbGV0IGRlcGVuZGVuY2llcztcblx0ICAgICAgICBsZXQgY29udGV4dHVhbF9kZXBlbmRlbmNpZXM7XG5cdCAgICAgICAgY29uc3Qgbm9kZSA9IHdhbGsodGhpcy5ub2RlLCB7XG5cdCAgICAgICAgICAgIGVudGVyKG5vZGUsIHBhcmVudCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ1Byb3BlcnR5JyAmJiBub2RlLnNob3J0aGFuZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5vZGUudmFsdWUpKTtcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnNob3J0aGFuZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG1hcC5oYXMobm9kZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzY29wZSA9IG1hcC5nZXQobm9kZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgaXNSZWZlcmVuY2Uobm9kZSwgcGFyZW50KSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZmxhdHRlbl9yZWZlcmVuY2Uobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmhhcyhuYW1lKSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZV9zY29wZS5uYW1lcy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlX3Njb3BlLmRlcGVuZGVuY2llc19mb3JfbmFtZS5nZXQobmFtZSkuZm9yRWFjaChkZXBlbmRlbmN5ID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuYWRkKGRlcGVuZGVuY3kpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmFkZF9yZWZlcmVuY2UobmFtZSk7IC8vIFRPRE8gaXMgdGhpcyByZWR1bmRhbnQvbWlzcGxhY2VkP1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzX2NvbnRleHR1YWwoY29tcG9uZW50LCB0ZW1wbGF0ZV9zY29wZSwgbmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gYmxvY2sucmVuZGVyZXIucmVmZXJlbmNlKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2UocmVmZXJlbmNlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lwKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoIWZ1bmN0aW9uX2V4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nKSA7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicgfHwgbm9kZS50eXBlID09PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uX2V4cHJlc3Npb24gPSBub2RlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgbGVhdmUobm9kZSwgcGFyZW50KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSlcblx0ICAgICAgICAgICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudDtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBmdW5jdGlvbl9leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKHNhbml0aXplKGdldF9mdW5jdGlvbl9uYW1lKG5vZGUsIG93bmVyKSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYiBgY29uc3QgJHtpZH0gPSAke25vZGV9YDtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzLnNpemUgPT09IDAgJiYgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gaG9pc3QgdGhpcyBvdXQgb2YgdGhlIGNvbXBvbmVudCBjb21wbGV0ZWx5XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5mdWxseV9ob2lzdGVkLnB1c2goZGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2UoaWQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuYWRkX3Zhcih7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpZC5uYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWw6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VkOiB0cnVlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb250ZXh0dWFsX2RlcGVuZGVuY2llcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGNhbiBiZSBob2lzdGVkIGluc2lkZSB0aGUgY29tcG9uZW50IGluaXRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnBhcnRseV9ob2lzdGVkLnB1c2goZGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBibG9jay5yZW5kZXJlci5hZGRfdG9fY29udGV4dChpZC5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlKGJsb2NrLnJlbmRlcmVyLnJlZmVyZW5jZShpZCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBhIGNvbWJvIGJsb2NrL2luaXQgcmVjaXBlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlcHMgPSBBcnJheS5mcm9tKGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJhbXMgPSBbXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5kZXBzLm1hcChuYW1lID0+ICh7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZSB9KSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5ub2RlLnBhcmFtc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0X2FyZ3MgPSBkZXBzLm1hcChuYW1lID0+IGJsb2NrLnJlbmRlcmVyLnJlZmVyZW5jZShuYW1lKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wYXJ0bHlfaG9pc3RlZC5wdXNoKGRlY2xhcmF0aW9uKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sucmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoaWQubmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxlZSA9IGJsb2NrLnJlbmRlcmVyLnJlZmVyZW5jZShpZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZShpZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnBhcmFtcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnMucHVzaChiIGBcblx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbiAke2lkfSguLi5hcmdzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJHtjYWxsZWV9KCR7Y29udGV4dF9hcmdzfSwgLi4uYXJncyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKGIgYFxuXHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uICR7aWR9KCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuICR7Y2FsbGVlfSgke2NvbnRleHRfYXJnc30pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25fZXhwcmVzc2lvbiA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICBjb250ZXh0dWFsX2RlcGVuZGVuY2llcyA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gJ1Byb3BlcnR5Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQubWV0aG9kID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdVcGRhdGVFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzc2lnbmVlID0gbm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nID8gbm9kZS5sZWZ0IDogbm9kZS5hcmd1bWVudDtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmplY3RfbmFtZSA9IGdldF9vYmplY3QoYXNzaWduZWUpLm5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmhhcyhvYmplY3RfbmFtZSkpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxseSAoYGEgPSAxYCwgYGIuYyA9IDJgKSwgdGhlcmUnbGwgYmUgYSBzaW5nbGUgbmFtZVxuXHQgICAgICAgICAgICAgICAgICAgIC8vIChhIG9yIGIpLiBJbiBkZXN0cnVjdHVyaW5nIGNhc2VzIChgW2QsIGVdID0gW2UsIGRdYCkgdGhlcmVcblx0ICAgICAgICAgICAgICAgICAgICAvLyBtYXkgYmUgbW9yZSwgaW4gd2hpY2ggY2FzZSB3ZSBuZWVkIHRvIHRhY2sgdGhlIGV4dHJhIG9uZXNcblx0ICAgICAgICAgICAgICAgICAgICAvLyBvbnRvIHRoZSBpbml0aWFsIGZ1bmN0aW9uIGNhbGxcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lcyA9IG5ldyBTZXQoZXh0cmFjdF9uYW1lcyhhc3NpZ25lZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNlZCA9IG5ldyBTZXQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBuYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSB0ZW1wbGF0ZV9zY29wZS5kZXBlbmRlbmNpZXNfZm9yX25hbWUuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuZm9yRWFjaChuYW1lID0+IHRyYWNlZC5hZGQobmFtZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VkLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBibG9jay5iaW5kaW5ncy5nZXQob2JqZWN0X25hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBgeyNlYWNoIGFycmF5IGFzIGl0ZW19YFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlIGBpdGVtID0gMWAgdG8gYGVhY2hfYXJyYXlbZWFjaF9pbmRleF0gPSAxYCwgdGhpcyBhbGxvdyB1cyB0byBtdXRhdGUgdGhlIGFycmF5XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJhdGhlciB0aGFuIG11dGF0aW5nIHRoZSBsb2NhbCBgaXRlbWAgdmFyaWFibGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzbmlwcGV0LCBvYmplY3QsIHByb3BlcnR5IH0gPSBjb250ZXh0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlZCA9IHJlcGxhY2Vfb2JqZWN0KGFzc2lnbmVlLCBzbmlwcGV0KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5sZWZ0ID0gcmVwbGFjZWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFyZ3VtZW50ID0gcmVwbGFjZWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuYWRkKG9iamVjdC5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuYWRkKHByb3BlcnR5Lm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2UoaW52YWxpZGF0ZShibG9jay5yZW5kZXJlciwgc2NvcGUsIG5vZGUsIHRyYWNlZCkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLm1haW50YWluX2NvbnRleHQgPSB0cnVlO1xuXHQgICAgICAgICAgICBkZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsYXJhdGlvbiA9PiB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGRlY2xhcmF0aW9uKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiAodGhpcy5tYW5pcHVsYXRlZCA9IG5vZGUpO1xuXHQgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIGdldF9mdW5jdGlvbl9uYW1lKF9ub2RlLCBwYXJlbnQpIHtcblx0ICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ0V2ZW50SGFuZGxlcicpIHtcblx0ICAgICAgICByZXR1cm4gYCR7cGFyZW50Lm5hbWV9X2hhbmRsZXJgO1xuXHQgICAgfVxuXHQgICAgaWYgKHBhcmVudC50eXBlID09PSAnQWN0aW9uJykge1xuXHQgICAgICAgIHJldHVybiBgJHtwYXJlbnQubmFtZX1fZnVuY3Rpb25gO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuICdmdW5jJztcblx0fVxuXHRmdW5jdGlvbiBpc19jb250ZXh0dWFsKGNvbXBvbmVudCwgc2NvcGUsIG5hbWUpIHtcblx0ICAgIGlmIChpc19yZXNlcnZlZF9rZXl3b3JkKG5hbWUpKVxuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgLy8gaWYgaXQncyBhIG5hbWUgYmVsb3cgcm9vdCBzY29wZSwgaXQncyBjb250ZXh0dWFsXG5cdCAgICBpZiAoIXNjb3BlLmlzX3RvcF9sZXZlbChuYW1lKSlcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIGNvbnN0IHZhcmlhYmxlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgLy8gaG9pc3RhYmxlcywgbW9kdWxlIGRlY2xhcmF0aW9ucywgYW5kIGltcG9ydHMgYXJlIG5vbi1jb250ZXh0dWFsXG5cdCAgICBpZiAoIXZhcmlhYmxlIHx8IHZhcmlhYmxlLmhvaXN0YWJsZSlcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAvLyBhc3N1bWUgY29udGV4dHVhbFxuXHQgICAgcmV0dXJuIHRydWU7XG5cdH1cblxuXHRjbGFzcyBBY3Rpb24gZXh0ZW5kcyBOb2RlJDEge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICBjb21wb25lbnQud2Fybl9pZl91bmRlZmluZWQoaW5mby5uYW1lLCBpbmZvLCBzY29wZSk7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gaW5mby5uYW1lO1xuXHQgICAgICAgIGNvbXBvbmVudC5hZGRfcmVmZXJlbmNlKGluZm8ubmFtZS5zcGxpdCgnLicpWzBdKTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBpbmZvLmV4cHJlc3Npb25cblx0ICAgICAgICAgICAgPyBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgICAgICB0aGlzLnVzZXNfY29udGV4dCA9IHRoaXMuZXhwcmVzc2lvbiAmJiB0aGlzLmV4cHJlc3Npb24udXNlc19jb250ZXh0O1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgVGFnIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSkge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLmNhbm5vdF91c2VfaW5uZXJodG1sKCk7XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzX2RlcGVuZGVuY2llc19zdGF0aWMoKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5vdF9zdGF0aWNfY29udGVudCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKG5vZGUuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgfVxuXHQgICAgaXNfZGVwZW5kZW5jaWVzX3N0YXRpYygpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmV4cHJlc3Npb24uY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuc2l6ZSA9PT0gMCAmJiB0aGlzLm5vZGUuZXhwcmVzc2lvbi5keW5hbWljX2RlcGVuZGVuY2llcygpLmxlbmd0aCA9PT0gMDtcblx0ICAgIH1cblx0ICAgIHJlbmFtZV90aGlzX21ldGhvZChibG9jaywgdXBkYXRlKSB7XG5cdCAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gdGhpcy5ub2RlLmV4cHJlc3Npb24uZHluYW1pY19kZXBlbmRlbmNpZXMoKTtcblx0ICAgICAgICBsZXQgc25pcHBldCA9IHRoaXMubm9kZS5leHByZXNzaW9uLm1hbmlwdWxhdGUoYmxvY2spO1xuXHQgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5ub2RlLnNob3VsZF9jYWNoZSAmJiBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fdmFsdWVgKTtcblx0ICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5ub2RlLnNob3VsZF9jYWNoZSA/IHZhbHVlIDogc25pcHBldDtcblx0ICAgICAgICBzbmlwcGV0ID0geCBgJHtzbmlwcGV0fSArIFwiXCJgO1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuc2hvdWxkX2NhY2hlKVxuXHQgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUodmFsdWUsIHNuaXBwZXQpOyAvLyBUT0RPIG1heSBuZWVkIHRvIGNvZXJjZSBzbmlwcGV0IHRvIHN0cmluZ1xuXHQgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gYmxvY2sucmVuZGVyZXIuZGlydHkoZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrLmhhc19vdXRyb3MpIHtcblx0ICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IHggYCEjY3VycmVudCB8fCAke2NvbmRpdGlvbn1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNvbnN0IHVwZGF0ZV9jYWNoZWRfdmFsdWUgPSB4IGAke3ZhbHVlfSAhPT0gKCR7dmFsdWV9ID0gJHtzbmlwcGV0fSlgO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5ub2RlLnNob3VsZF9jYWNoZSkge1xuXHQgICAgICAgICAgICAgICAgY29uZGl0aW9uID0geCBgJHtjb25kaXRpb259ICYmICR7dXBkYXRlX2NhY2hlZF92YWx1ZX1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBpZiAoJHtjb25kaXRpb259KSAke3VwZGF0ZShjb250ZW50KX1gKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHsgaW5pdDogY29udGVudCB9O1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgTXVzdGFjaGVUYWdXcmFwcGVyIGV4dGVuZHMgVGFnIHtcblx0ICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKSB7XG5cdCAgICAgICAgc3VwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpO1xuXHQgICAgICAgIHRoaXMudmFyID0geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICd0JyB9O1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgY29uc3QgeyBpbml0IH0gPSB0aGlzLnJlbmFtZV90aGlzX21ldGhvZChibG9jaywgdmFsdWUgPT4geCBgQHNldF9kYXRhKCR7dGhpcy52YXJ9LCAke3ZhbHVlfSlgKTtcblx0ICAgICAgICBibG9jay5hZGRfZWxlbWVudCh0aGlzLnZhciwgeCBgQHRleHQoJHtpbml0fSlgLCBwYXJlbnRfbm9kZXMgJiYgeCBgQGNsYWltX3RleHQoJHtwYXJlbnRfbm9kZXN9LCAke2luaXR9KWAsIHBhcmVudF9ub2RlKTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIFJhd011c3RhY2hlVGFnV3JhcHBlciBleHRlbmRzIFRhZyB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSkge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLnZhciA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAncmF3JyB9O1xuXHQgICAgICAgIHRoaXMuY2Fubm90X3VzZV9pbm5lcmh0bWwoKTtcblx0ICAgICAgICB0aGlzLm5vdF9zdGF0aWNfY29udGVudCgpO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgX3BhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIGNvbnN0IGluX2hlYWQgPSBpc19oZWFkKHBhcmVudF9ub2RlKTtcblx0ICAgICAgICBjb25zdCBjYW5fdXNlX2lubmVyaHRtbCA9ICFpbl9oZWFkICYmIHBhcmVudF9ub2RlICYmICF0aGlzLnByZXYgJiYgIXRoaXMubmV4dDtcblx0ICAgICAgICBpZiAoY2FuX3VzZV9pbm5lcmh0bWwpIHtcblx0ICAgICAgICAgICAgY29uc3QgaW5zZXJ0ID0gY29udGVudCA9PiBiIGAke3BhcmVudF9ub2RlfS5pbm5lckhUTUwgPSAke2NvbnRlbnR9O2BbMF07XG5cdCAgICAgICAgICAgIGNvbnN0IHsgaW5pdCB9ID0gdGhpcy5yZW5hbWVfdGhpc19tZXRob2QoYmxvY2ssIGNvbnRlbnQgPT4gaW5zZXJ0KGNvbnRlbnQpKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goaW5zZXJ0KGluaXQpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG5lZWRzX2FuY2hvciA9IGluX2hlYWQgfHwgKHRoaXMubmV4dCA/ICF0aGlzLm5leHQuaXNfZG9tX25vZGUoKSA6ICghdGhpcy5wYXJlbnQgfHwgIXRoaXMucGFyZW50LmlzX2RvbV9ub2RlKCkpKTtcblx0ICAgICAgICAgICAgY29uc3QgaHRtbF90YWcgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoJ2h0bWxfdGFnJyk7XG5cdCAgICAgICAgICAgIGNvbnN0IGh0bWxfYW5jaG9yID0gbmVlZHNfYW5jaG9yICYmIGJsb2NrLmdldF91bmlxdWVfbmFtZSgnaHRtbF9hbmNob3InKTtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKGh0bWxfdGFnKTtcblx0ICAgICAgICAgICAgY29uc3QgeyBpbml0IH0gPSB0aGlzLnJlbmFtZV90aGlzX21ldGhvZChibG9jaywgY29udGVudCA9PiB4IGAke2h0bWxfdGFnfS5wKCR7Y29udGVudH0pYCk7XG5cdCAgICAgICAgICAgIGNvbnN0IHVwZGF0ZV9hbmNob3IgPSBuZWVkc19hbmNob3IgPyBodG1sX2FuY2hvciA6IHRoaXMubmV4dCA/IHRoaXMubmV4dC52YXIgOiAnbnVsbCc7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2goYiBgJHtodG1sX3RhZ30gPSBuZXcgQEh0bWxUYWcoJHt1cGRhdGVfYW5jaG9yfSk7YCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYCR7aHRtbF90YWd9Lm0oJHtpbml0fSwgJHtwYXJlbnRfbm9kZSB8fCAnI3RhcmdldCd9LCAke3BhcmVudF9ub2RlID8gbnVsbCA6ICcjYW5jaG9yJ30pO2ApO1xuXHQgICAgICAgICAgICBpZiAobmVlZHNfYW5jaG9yKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfZWxlbWVudChodG1sX2FuY2hvciwgeCBgQGVtcHR5KClgLCB4IGBAZW1wdHkoKWAsIHBhcmVudF9ub2RlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoIXBhcmVudF9ub2RlIHx8IGluX2hlYWQpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgaWYgKGRldGFjaGluZykgJHtodG1sX3RhZ30uZCgpO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cblx0Y29uc3QgZXZlbnRzID0gW1xuXHQgICAge1xuXHQgICAgICAgIGV2ZW50X25hbWVzOiBbJ2lucHV0J10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgX25hbWUpID0+IG5vZGUubmFtZSA9PT0gJ3RleHRhcmVhJyB8fFxuXHQgICAgICAgICAgICBub2RlLm5hbWUgPT09ICdpbnB1dCcgJiYgIS9yYWRpb3xjaGVja2JveHxyYW5nZXxmaWxlLy50ZXN0KG5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ3R5cGUnKSlcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnaW5wdXQnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiAobmFtZSA9PT0gJ3RleHRDb250ZW50JyB8fCBuYW1lID09PSAnaW5uZXJIVE1MJykgJiZcblx0ICAgICAgICAgICAgbm9kZS5hdHRyaWJ1dGVzLnNvbWUoYXR0cmlidXRlID0+IGF0dHJpYnV0ZS5uYW1lID09PSAnY29udGVudGVkaXRhYmxlJylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnY2hhbmdlJ10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgX25hbWUpID0+IG5vZGUubmFtZSA9PT0gJ3NlbGVjdCcgfHxcblx0ICAgICAgICAgICAgbm9kZS5uYW1lID09PSAnaW5wdXQnICYmIC9yYWRpb3xjaGVja2JveHxmaWxlLy50ZXN0KG5vZGUuZ2V0X3N0YXRpY19hdHRyaWJ1dGVfdmFsdWUoJ3R5cGUnKSlcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnY2hhbmdlJywgJ2lucHV0J10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgX25hbWUpID0+IG5vZGUubmFtZSA9PT0gJ2lucHV0JyAmJiBub2RlLmdldF9zdGF0aWNfYXR0cmlidXRlX3ZhbHVlKCd0eXBlJykgPT09ICdyYW5nZSdcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnZWxlbWVudHJlc2l6ZSddLFxuXHQgICAgICAgIGZpbHRlcjogKF9ub2RlLCBuYW1lKSA9PiBkaW1lbnNpb25zLnRlc3QobmFtZSlcblx0ICAgIH0sXG5cdCAgICAvLyBtZWRpYSBldmVudHNcblx0ICAgIHtcblx0ICAgICAgICBldmVudF9uYW1lczogWyd0aW1ldXBkYXRlJ10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgbmFtZSkgPT4gbm9kZS5pc19tZWRpYV9ub2RlKCkgJiZcblx0ICAgICAgICAgICAgKG5hbWUgPT09ICdjdXJyZW50VGltZScgfHwgbmFtZSA9PT0gJ3BsYXllZCcgfHwgbmFtZSA9PT0gJ2VuZGVkJylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnZHVyYXRpb25jaGFuZ2UnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiBub2RlLmlzX21lZGlhX25vZGUoKSAmJlxuXHQgICAgICAgICAgICBuYW1lID09PSAnZHVyYXRpb24nXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICAgIGV2ZW50X25hbWVzOiBbJ3BsYXknLCAncGF1c2UnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiBub2RlLmlzX21lZGlhX25vZGUoKSAmJlxuXHQgICAgICAgICAgICBuYW1lID09PSAncGF1c2VkJ1xuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgICBldmVudF9uYW1lczogWydwcm9ncmVzcyddLFxuXHQgICAgICAgIGZpbHRlcjogKG5vZGUsIG5hbWUpID0+IG5vZGUuaXNfbWVkaWFfbm9kZSgpICYmXG5cdCAgICAgICAgICAgIG5hbWUgPT09ICdidWZmZXJlZCdcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnbG9hZGVkbWV0YWRhdGEnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiBub2RlLmlzX21lZGlhX25vZGUoKSAmJlxuXHQgICAgICAgICAgICAobmFtZSA9PT0gJ2J1ZmZlcmVkJyB8fCBuYW1lID09PSAnc2Vla2FibGUnKVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgICBldmVudF9uYW1lczogWyd2b2x1bWVjaGFuZ2UnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiBub2RlLmlzX21lZGlhX25vZGUoKSAmJlxuXHQgICAgICAgICAgICAobmFtZSA9PT0gJ3ZvbHVtZScgfHwgbmFtZSA9PT0gJ211dGVkJylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsncmF0ZWNoYW5nZSddLFxuXHQgICAgICAgIGZpbHRlcjogKG5vZGUsIG5hbWUpID0+IG5vZGUuaXNfbWVkaWFfbm9kZSgpICYmXG5cdCAgICAgICAgICAgIG5hbWUgPT09ICdwbGF5YmFja1JhdGUnXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICAgIGV2ZW50X25hbWVzOiBbJ3NlZWtpbmcnLCAnc2Vla2VkJ10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgbmFtZSkgPT4gbm9kZS5pc19tZWRpYV9ub2RlKCkgJiZcblx0ICAgICAgICAgICAgKG5hbWUgPT09ICdzZWVraW5nJylcblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsnZW5kZWQnXSxcblx0ICAgICAgICBmaWx0ZXI6IChub2RlLCBuYW1lKSA9PiBub2RlLmlzX21lZGlhX25vZGUoKSAmJlxuXHQgICAgICAgICAgICBuYW1lID09PSAnZW5kZWQnXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICAgIGV2ZW50X25hbWVzOiBbJ3Jlc2l6ZSddLFxuXHQgICAgICAgIGZpbHRlcjogKG5vZGUsIG5hbWUpID0+IG5vZGUuaXNfbWVkaWFfbm9kZSgpICYmXG5cdCAgICAgICAgICAgIChuYW1lID09PSAndmlkZW9IZWlnaHQnIHx8IG5hbWUgPT09ICd2aWRlb1dpZHRoJylcblx0ICAgIH0sXG5cdCAgICAvLyBkZXRhaWxzIGV2ZW50XG5cdCAgICB7XG5cdCAgICAgICAgZXZlbnRfbmFtZXM6IFsndG9nZ2xlJ10sXG5cdCAgICAgICAgZmlsdGVyOiAobm9kZSwgX25hbWUpID0+IG5vZGUubmFtZSA9PT0gJ2RldGFpbHMnXG5cdCAgICB9LFxuXHRdO1xuXHRjbGFzcyBFbGVtZW50V3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLnZhciA9IHtcblx0ICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUucmVwbGFjZSgvW15hLXpBLVowLTlfJF0vZywgJ18nKVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy52b2lkID0gaXNfdm9pZChub2RlLm5hbWUpO1xuXHQgICAgICAgIHRoaXMuY2xhc3NfZGVwZW5kZW5jaWVzID0gW107XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLmxldHMuZm9yRWFjaChsID0+IHtcblx0ICAgICAgICAgICAgICAgIGV4dHJhY3RfbmFtZXMobC52YWx1ZSB8fCBsLm5hbWUpLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3RvX2NvbnRleHQobmFtZSwgdHJ1ZSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzLm1hcChhdHRyaWJ1dGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgPT09ICdzbG90Jykge1xuXHQgICAgICAgICAgICAgICAgLy8gVE9ETyBtYWtlIHNlcGFyYXRlIHN1YmNsYXNzIGZvciB0aGlzP1xuXHQgICAgICAgICAgICAgICAgbGV0IG93bmVyID0gdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICB3aGlsZSAob3duZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3duZXIubm9kZS50eXBlID09PSAnSW5saW5lQ29tcG9uZW50Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG93bmVyLm5vZGUudHlwZSA9PT0gJ0VsZW1lbnQnICYmIC8tLy50ZXN0KG93bmVyLm5vZGUubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIG93bmVyID0gb3duZXIucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG93bmVyICYmIG93bmVyLm5vZGUudHlwZSA9PT0gJ0lubGluZUNvbXBvbmVudCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gYXR0cmlidXRlLmdldF9zdGF0aWNfdmFsdWUoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIW93bmVyLnNsb3RzLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZF9ibG9jayA9IGJsb2NrLmNoaWxkKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGNyZWF0ZV9kZWJ1Z2dpbmdfY29tbWVudChub2RlLCB0aGlzLnJlbmRlcmVyLmNvbXBvbmVudCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnJlbmRlcmVyLmNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWUoYGNyZWF0ZV8ke3Nhbml0aXplKG5hbWUpfV9zbG90YCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2xvdCdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgc2NvcGUsIGxldHMgfSA9IHRoaXMubm9kZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQobGV0cy5tYXAobCA9PiBsLm5hbWUubmFtZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBvd25lci5ub2RlLmxldHMuZm9yRWFjaChsID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2Vlbi5oYXMobC5uYW1lLm5hbWUpKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHMucHVzaChsKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyLnNsb3RzLnNldChuYW1lLCBnZXRfc2xvdF9kZWZpbml0aW9uKGNoaWxkX2Jsb2NrLCBzY29wZSwgbGV0cykpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmJsb2Nrcy5wdXNoKGNoaWxkX2Jsb2NrKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zbG90X2Jsb2NrID0gb3duZXIuc2xvdHMuZ2V0KG5hbWUpLmJsb2NrO1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gdGhpcy5zbG90X2Jsb2NrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSA9PT0gJ3N0eWxlJykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHlsZUF0dHJpYnV0ZVdyYXBwZXIodGhpcywgYmxvY2ssIGF0dHJpYnV0ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS50eXBlID09PSAnU3ByZWFkJykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTcHJlYWRBdHRyaWJ1dGVXcmFwcGVyKHRoaXMsIGJsb2NrLCBhdHRyaWJ1dGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgQXR0cmlidXRlV3JhcHBlcih0aGlzLCBibG9jaywgYXR0cmlidXRlKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvLyBvcmRpbmFyaWx5LCB0aGVyZSdsbCBvbmx5IGJlIG9uZS4uLiBidXQgd2UgbmVlZCB0byBoYW5kbGVcblx0ICAgICAgICAvLyB0aGUgcmFyZSBjYXNlIHdoZXJlIGFuIGVsZW1lbnQgY2FuIGhhdmUgbXVsdGlwbGUgYmluZGluZ3MsXG5cdCAgICAgICAgLy8gZS5nLiA8YXVkaW8gYmluZDpwYXVzZWQgYmluZDpjdXJyZW50VGltZT5cblx0ICAgICAgICB0aGlzLmJpbmRpbmdzID0gdGhpcy5ub2RlLmJpbmRpbmdzLm1hcChiaW5kaW5nID0+IG5ldyBCaW5kaW5nV3JhcHBlcihibG9jaywgYmluZGluZywgdGhpcykpO1xuXHQgICAgICAgIHRoaXMuZXZlbnRfaGFuZGxlcnMgPSB0aGlzLm5vZGUuaGFuZGxlcnMubWFwKGV2ZW50X2hhbmRsZXIgPT4gbmV3IEV2ZW50SGFuZGxlcldyYXBwZXIoZXZlbnRfaGFuZGxlciwgdGhpcykpO1xuXHQgICAgICAgIGlmIChub2RlLmludHJvIHx8IG5vZGUub3V0cm8pIHtcblx0ICAgICAgICAgICAgaWYgKG5vZGUuaW50cm8pXG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfaW50cm8obm9kZS5pbnRyby5pc19sb2NhbCk7XG5cdCAgICAgICAgICAgIGlmIChub2RlLm91dHJvKVxuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX291dHJvKG5vZGUub3V0cm8uaXNfbG9jYWwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobm9kZS5hbmltYXRpb24pIHtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX2FuaW1hdGlvbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBhZGQgZGlyZWN0aXZlIGFuZCBoYW5kbGVyIGRlcGVuZGVuY2llc1xuXHQgICAgICAgIFtub2RlLmFuaW1hdGlvbiwgbm9kZS5vdXRybywgLi4ubm9kZS5hY3Rpb25zLCAuLi5ub2RlLmNsYXNzZXNdLmZvckVhY2goZGlyZWN0aXZlID0+IHtcblx0ICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZSAmJiBkaXJlY3RpdmUuZXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyhkaXJlY3RpdmUuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgbm9kZS5oYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuXHQgICAgICAgICAgICBpZiAoaGFuZGxlci5leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKGhhbmRsZXIuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG5cdCAgICAgICAgICAgIGlmIChub2RlLmFjdGlvbnMubGVuZ3RoID4gMCB8fFxuXHQgICAgICAgICAgICAgICAgbm9kZS5hbmltYXRpb24gfHxcblx0ICAgICAgICAgICAgICAgIG5vZGUuYmluZGluZ3MubGVuZ3RoID4gMCB8fFxuXHQgICAgICAgICAgICAgICAgbm9kZS5jbGFzc2VzLmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICAgICAgICAgIG5vZGUuaW50cm8gfHwgbm9kZS5vdXRybyB8fFxuXHQgICAgICAgICAgICAgICAgbm9kZS5oYW5kbGVycy5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5vZGUubmFtZSA9PT0gJ29wdGlvbicgfHxcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLm9wdGlvbnMuZGV2KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jYW5ub3RfdXNlX2lubmVyaHRtbCgpOyAvLyBuZWVkIHRvIHVzZSBhZGRfbG9jYXRpb25cblx0ICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Lm5vdF9zdGF0aWNfY29udGVudCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBuZXcgRnJhZ21lbnRXcmFwcGVyKHJlbmRlcmVyLCBibG9jaywgbm9kZS5jaGlsZHJlbiwgdGhpcywgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICBpZiAodGhpcy5zbG90X2Jsb2NrKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLnBhcmVudC5hZGRfZGVwZW5kZW5jaWVzKGJsb2NrLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIC8vIGFwcGFsbGluZyBoYWNrXG5cdCAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYmxvY2sucGFyZW50LndyYXBwZXJzLmluZGV4T2YodGhpcyk7XG5cdCAgICAgICAgICAgIGJsb2NrLnBhcmVudC53cmFwcGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgICAgICAgICBibG9jay53cmFwcGVycy5wdXNoKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIGNvbnN0IHsgcmVuZGVyZXIgfSA9IHRoaXM7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5uYW1lID09PSAnbm9zY3JpcHQnKVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgaWYgKHRoaXMuc2xvdF9ibG9jaykge1xuXHQgICAgICAgICAgICBibG9jayA9IHRoaXMuc2xvdF9ibG9jaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMudmFyO1xuXHQgICAgICAgIGNvbnN0IG5vZGVzID0gcGFyZW50X25vZGVzICYmIGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9ub2Rlc2ApOyAvLyBpZiB3ZSdyZSBpbiB1bmNsYWltYWJsZSB0ZXJyaXRvcnksIGkuZS4gPGhlYWQ+LCBwYXJlbnRfbm9kZXMgaXMgbnVsbFxuXHQgICAgICAgIGNvbnN0IGNoaWxkcmVuID0geCBgQGNoaWxkcmVuKCR7dGhpcy5ub2RlLm5hbWUgPT09ICd0ZW1wbGF0ZScgPyB4IGAke25vZGV9LmNvbnRlbnRgIDogbm9kZX0pYDtcblx0ICAgICAgICBibG9jay5hZGRfdmFyaWFibGUobm9kZSk7XG5cdCAgICAgICAgY29uc3QgcmVuZGVyX3N0YXRlbWVudCA9IHRoaXMuZ2V0X3JlbmRlcl9zdGF0ZW1lbnQoYmxvY2spO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGAke25vZGV9ID0gJHtyZW5kZXJfc3RhdGVtZW50fTtgKTtcblx0ICAgICAgICBpZiAocmVuZGVyZXIub3B0aW9ucy5oeWRyYXRhYmxlKSB7XG5cdCAgICAgICAgICAgIGlmIChwYXJlbnRfbm9kZXMpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYFxuXHRcdFx0XHRcdCR7bm9kZX0gPSAke3RoaXMuZ2V0X2NsYWltX3N0YXRlbWVudChwYXJlbnRfbm9kZXMpfTtcblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMudm9pZCAmJiB0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYFxuXHRcdFx0XHRcdFx0dmFyICR7bm9kZXN9ID0gJHtjaGlsZHJlbn07XG5cdFx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuY2xhaW0ucHVzaChiIGAke25vZGV9ID0gJHtyZW5kZXJfc3RhdGVtZW50fTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocGFyZW50X25vZGUpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgQGFwcGVuZCgke3BhcmVudF9ub2RlfSwgJHtub2RlfSk7YCk7XG5cdCAgICAgICAgICAgIGlmIChpc19oZWFkKHBhcmVudF9ub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBAZGV0YWNoKCR7bm9kZX0pO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MubW91bnQucHVzaChiIGBAaW5zZXJ0KCN0YXJnZXQsICR7bm9kZX0sICNhbmNob3IpO2ApO1xuXHQgICAgICAgICAgICAvLyBUT0RPIHdlIGV2ZW50dWFsbHkgbmVlZCB0byBjb25zaWRlciB3aGF0IGhhcHBlbnMgdG8gZWxlbWVudHNcblx0ICAgICAgICAgICAgLy8gdGhhdCBiZWxvbmcgdG8gdGhlIHNhbWUgb3V0Z3JvdXAgYXMgYW4gb3V0cm9pbmcgZWxlbWVudC4uLlxuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYGlmIChkZXRhY2hpbmcpIEBkZXRhY2goJHtub2RlfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIGluc2VydCBzdGF0aWMgY2hpbGRyZW4gd2l0aCB0ZXh0Q29udGVudCBvciBpbm5lckhUTUxcblx0ICAgICAgICBjb25zdCBjYW5fdXNlX3RleHRjb250ZW50ID0gdGhpcy5jYW5fdXNlX3RleHRjb250ZW50KCk7XG5cdCAgICAgICAgaWYgKCF0aGlzLm5vZGUubmFtZXNwYWNlICYmICh0aGlzLmNhbl91c2VfaW5uZXJodG1sIHx8IGNhbl91c2VfdGV4dGNvbnRlbnQpICYmIHRoaXMuZnJhZ21lbnQubm9kZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5mcmFnbWVudC5ub2Rlcy5sZW5ndGggPT09IDEgJiYgdGhpcy5mcmFnbWVudC5ub2Rlc1swXS5ub2RlLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNyZWF0ZS5wdXNoKGIgYCR7bm9kZX0udGV4dENvbnRlbnQgPSAke3N0cmluZ19saXRlcmFsKHRoaXMuZnJhZ21lbnQubm9kZXNbMF0uZGF0YSl9O2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcXVhc2k6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1RlbXBsYXRlRWxlbWVudCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHJhdzogJycgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICBjb25zdCBsaXRlcmFsID0ge1xuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUZW1wbGF0ZUxpdGVyYWwnLFxuXHQgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zOiBbXSxcblx0ICAgICAgICAgICAgICAgICAgICBxdWFzaXM6IFtdXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgY29uc3QgY2FuX3VzZV9yYXdfdGV4dCA9ICF0aGlzLmNhbl91c2VfaW5uZXJodG1sICYmIGNhbl91c2VfdGV4dGNvbnRlbnQ7XG5cdCAgICAgICAgICAgICAgICB0b19odG1sKHRoaXMuZnJhZ21lbnQubm9kZXMsIGJsb2NrLCBsaXRlcmFsLCBzdGF0ZSwgY2FuX3VzZV9yYXdfdGV4dCk7XG5cdCAgICAgICAgICAgICAgICBsaXRlcmFsLnF1YXNpcy5wdXNoKHN0YXRlLnF1YXNpKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGAke25vZGV9LiR7dGhpcy5jYW5fdXNlX2lubmVyaHRtbCA/ICdpbm5lckhUTUwnIDogJ3RleHRDb250ZW50J30gPSAke2xpdGVyYWx9O2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmZyYWdtZW50Lm5vZGVzLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBjaGlsZC5yZW5kZXIoYmxvY2ssIHRoaXMubm9kZS5uYW1lID09PSAndGVtcGxhdGUnID8geCBgJHtub2RlfS5jb250ZW50YCA6IG5vZGUsIG5vZGVzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGV2ZW50X2hhbmRsZXJfb3JfYmluZGluZ191c2VzX2NvbnRleHQgPSAodGhpcy5iaW5kaW5ncy5zb21lKGJpbmRpbmcgPT4gYmluZGluZy5oYW5kbGVyLnVzZXNfY29udGV4dCkgfHxcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLmhhbmRsZXJzLnNvbWUoaGFuZGxlciA9PiBoYW5kbGVyLnVzZXNfY29udGV4dCkgfHxcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLmFjdGlvbnMuc29tZShhY3Rpb24gPT4gYWN0aW9uLnVzZXNfY29udGV4dCkpO1xuXHQgICAgICAgIGlmIChldmVudF9oYW5kbGVyX29yX2JpbmRpbmdfdXNlc19jb250ZXh0KSB7XG5cdCAgICAgICAgICAgIGJsb2NrLm1haW50YWluX2NvbnRleHQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmFkZF9hdHRyaWJ1dGVzKGJsb2NrKTtcblx0ICAgICAgICB0aGlzLmFkZF9kaXJlY3RpdmVzX2luX29yZGVyKGJsb2NrKTtcblx0ICAgICAgICB0aGlzLmFkZF90cmFuc2l0aW9ucyhibG9jayk7XG5cdCAgICAgICAgdGhpcy5hZGRfYW5pbWF0aW9uKGJsb2NrKTtcblx0ICAgICAgICB0aGlzLmFkZF9jbGFzc2VzKGJsb2NrKTtcblx0ICAgICAgICB0aGlzLmFkZF9tYW51YWxfc3R5bGVfc2NvcGluZyhibG9jayk7XG5cdCAgICAgICAgaWYgKG5vZGVzICYmIHRoaXMucmVuZGVyZXIub3B0aW9ucy5oeWRyYXRhYmxlICYmICF0aGlzLnZvaWQpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNsYWltLnB1c2goYiBgJHt0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IG5vZGVzIDogY2hpbGRyZW59LmZvckVhY2goQGRldGFjaCk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChyZW5kZXJlci5vcHRpb25zLmRldikge1xuXHQgICAgICAgICAgICBjb25zdCBsb2MgPSByZW5kZXJlci5sb2NhdGUodGhpcy5ub2RlLnN0YXJ0KTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmh5ZHJhdGUucHVzaChiIGBAYWRkX2xvY2F0aW9uKCR7dGhpcy52YXJ9LCAke3JlbmRlcmVyLmZpbGVfdmFyfSwgJHtsb2MubGluZSAtIDF9LCAke2xvYy5jb2x1bW59LCAke3RoaXMubm9kZS5zdGFydH0pO2ApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGNhbl91c2VfdGV4dGNvbnRlbnQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaXNfc3RhdGljX2NvbnRlbnQgJiYgdGhpcy5mcmFnbWVudC5ub2Rlcy5ldmVyeShub2RlID0+IG5vZGUubm9kZS50eXBlID09PSAnVGV4dCcgfHwgbm9kZS5ub2RlLnR5cGUgPT09ICdNdXN0YWNoZVRhZycpO1xuXHQgICAgfVxuXHQgICAgZ2V0X3JlbmRlcl9zdGF0ZW1lbnQoYmxvY2spIHtcblx0ICAgICAgICBjb25zdCB7IG5hbWUsIG5hbWVzcGFjZSB9ID0gdGhpcy5ub2RlO1xuXHQgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IG5hbWVzcGFjZXMuc3ZnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB4IGBAc3ZnX2VsZW1lbnQoXCIke25hbWV9XCIpYDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG5hbWVzcGFjZSkge1xuXHQgICAgICAgICAgICByZXR1cm4geCBgQF9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCIke25hbWVzcGFjZX1cIiwgXCIke25hbWV9XCIpYDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgaXMgPSB0aGlzLmF0dHJpYnV0ZXMuZmluZChhdHRyID0+IGF0dHIubm9kZS5uYW1lID09PSAnaXMnKTtcblx0ICAgICAgICBpZiAoaXMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHggYEBlbGVtZW50X2lzKFwiJHtuYW1lfVwiLCAke2lzLnJlbmRlcl9jaHVua3MoYmxvY2spLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSArICR7cmhzfWApfSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4geCBgQGVsZW1lbnQoXCIke25hbWV9XCIpYDtcblx0ICAgIH1cblx0ICAgIGdldF9jbGFpbV9zdGF0ZW1lbnQobm9kZXMpIHtcblx0ICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5ub2RlLmF0dHJpYnV0ZXNcblx0ICAgICAgICAgICAgLmZpbHRlcigoYXR0cikgPT4gYXR0ci50eXBlID09PSAnQXR0cmlidXRlJylcblx0ICAgICAgICAgICAgLm1hcCgoYXR0cikgPT4gcCBgJHthdHRyLm5hbWV9OiB0cnVlYCk7XG5cdCAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubm9kZS5uYW1lc3BhY2Vcblx0ICAgICAgICAgICAgPyB0aGlzLm5vZGUubmFtZVxuXHQgICAgICAgICAgICA6IHRoaXMubm9kZS5uYW1lLnRvVXBwZXJDYXNlKCk7XG5cdCAgICAgICAgY29uc3Qgc3ZnID0gdGhpcy5ub2RlLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlcy5zdmcgPyAxIDogbnVsbDtcblx0ICAgICAgICByZXR1cm4geCBgQGNsYWltX2VsZW1lbnQoJHtub2Rlc30sIFwiJHtuYW1lfVwiLCB7ICR7YXR0cmlidXRlc30gfSwgJHtzdmd9KWA7XG5cdCAgICB9XG5cdCAgICBhZGRfZGlyZWN0aXZlc19pbl9vcmRlcihibG9jaykge1xuXHQgICAgICAgIGNvbnN0IGJpbmRpbmdfZ3JvdXBzID0gZXZlbnRzXG5cdCAgICAgICAgICAgIC5tYXAoZXZlbnQgPT4gKHtcblx0ICAgICAgICAgICAgZXZlbnRzOiBldmVudC5ldmVudF9uYW1lcyxcblx0ICAgICAgICAgICAgYmluZGluZ3M6IHRoaXMuYmluZGluZ3Ncblx0ICAgICAgICAgICAgICAgIC5maWx0ZXIoYmluZGluZyA9PiBiaW5kaW5nLm5vZGUubmFtZSAhPT0gJ3RoaXMnKVxuXHQgICAgICAgICAgICAgICAgLmZpbHRlcihiaW5kaW5nID0+IGV2ZW50LmZpbHRlcih0aGlzLm5vZGUsIGJpbmRpbmcubm9kZS5uYW1lKSlcblx0ICAgICAgICB9KSlcblx0ICAgICAgICAgICAgLmZpbHRlcihncm91cCA9PiBncm91cC5iaW5kaW5ncy5sZW5ndGgpO1xuXHQgICAgICAgIGNvbnN0IHRoaXNfYmluZGluZyA9IHRoaXMuYmluZGluZ3MuZmluZChiID0+IGIubm9kZS5uYW1lID09PSAndGhpcycpO1xuXHQgICAgICAgIGZ1bmN0aW9uIGdldE9yZGVyKGl0ZW0pIHtcblx0ICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBFdmVudEhhbmRsZXJXcmFwcGVyKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5ub2RlLnN0YXJ0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBCaW5kaW5nV3JhcHBlcikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubm9kZS5zdGFydDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgQWN0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5zdGFydDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmJpbmRpbmdzWzBdLm5vZGUuc3RhcnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgW1xuXHQgICAgICAgICAgICAuLi5iaW5kaW5nX2dyb3Vwcyxcblx0ICAgICAgICAgICAgLi4udGhpcy5ldmVudF9oYW5kbGVycyxcblx0ICAgICAgICAgICAgdGhpc19iaW5kaW5nLFxuXHQgICAgICAgICAgICAuLi50aGlzLm5vZGUuYWN0aW9uc1xuXHQgICAgICAgIF1cblx0ICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuXHQgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gZ2V0T3JkZXIoYSkgLSBnZXRPcmRlcihiKSlcblx0ICAgICAgICAgICAgLmZvckVhY2goaXRlbSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRXZlbnRIYW5kbGVyV3JhcHBlcikge1xuXHQgICAgICAgICAgICAgICAgYWRkX2V2ZW50X2hhbmRsZXIoYmxvY2ssIHRoaXMudmFyLCBpdGVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgQmluZGluZ1dyYXBwZXIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkX3RoaXNfYmluZGluZyhibG9jaywgaXRlbSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIEFjdGlvbikge1xuXHQgICAgICAgICAgICAgICAgYWRkX2FjdGlvbihibG9jaywgdGhpcy52YXIsIGl0ZW0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGRfYmluZGluZ3MoYmxvY2ssIGl0ZW0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBhZGRfYmluZGluZ3MoYmxvY2ssIGJpbmRpbmdfZ3JvdXApIHtcblx0ICAgICAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSB0aGlzO1xuXHQgICAgICAgIGlmIChiaW5kaW5nX2dyb3VwLmJpbmRpbmdzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIHJlbmRlcmVyLmNvbXBvbmVudC5oYXNfcmVhY3RpdmVfYXNzaWdubWVudHMgPSB0cnVlO1xuXHQgICAgICAgIGNvbnN0IGxvY2sgPSBiaW5kaW5nX2dyb3VwLmJpbmRpbmdzLnNvbWUoYmluZGluZyA9PiBiaW5kaW5nLm5lZWRzX2xvY2spID9cblx0ICAgICAgICAgICAgYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke3RoaXMudmFyLm5hbWV9X3VwZGF0aW5nYCkgOlxuXHQgICAgICAgICAgICBudWxsO1xuXHQgICAgICAgIGlmIChsb2NrKVxuXHQgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUobG9jaywgeCBgZmFsc2VgKTtcblx0ICAgICAgICBjb25zdCBoYW5kbGVyID0gcmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV8ke2JpbmRpbmdfZ3JvdXAuZXZlbnRzLmpvaW4oJ18nKX1faGFuZGxlcmApO1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF90b19jb250ZXh0KGhhbmRsZXIubmFtZSk7XG5cdCAgICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGhvdyB0byBoYW5kbGUgbG9ja3Ncblx0ICAgICAgICBjb25zdCBuZWVkc19sb2NrID0gYmluZGluZ19ncm91cC5iaW5kaW5ncy5zb21lKGJpbmRpbmcgPT4gYmluZGluZy5uZWVkc19sb2NrKTtcblx0ICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgY29uc3QgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgYmluZGluZ19ncm91cC5iaW5kaW5ncy5mb3JFYWNoKGJpbmRpbmcgPT4ge1xuXHQgICAgICAgICAgICAvLyBUT0RPIHRoaXMgaXMgYSBtZXNzXG5cdCAgICAgICAgICAgIGFkZF90b19zZXQoZGVwZW5kZW5jaWVzLCBiaW5kaW5nLmdldF9kZXBlbmRlbmNpZXMoKSk7XG5cdCAgICAgICAgICAgIGFkZF90b19zZXQoY29udGV4dHVhbF9kZXBlbmRlbmNpZXMsIGJpbmRpbmcuaGFuZGxlci5jb250ZXh0dWFsX2RlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIGJpbmRpbmcucmVuZGVyKGJsb2NrLCBsb2NrKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvLyBtZWRpYSBiaW5kaW5ncyDigJQgYXdrd2FyZCBzcGVjaWFsIGNhc2UuIFRoZSBuYXRpdmUgdGltZXVwZGF0ZSBldmVudHNcblx0ICAgICAgICAvLyBmaXJlIHRvbyBpbmZyZXF1ZW50bHksIHNvIHdlIG5lZWQgdG8gdGFrZSBtYXR0ZXJzIGludG8gb3VyXG5cdCAgICAgICAgLy8gb3duIGhhbmRzXG5cdCAgICAgICAgbGV0IGFuaW1hdGlvbl9mcmFtZTtcblx0ICAgICAgICBpZiAoYmluZGluZ19ncm91cC5ldmVudHNbMF0gPT09ICd0aW1ldXBkYXRlJykge1xuXHQgICAgICAgICAgICBhbmltYXRpb25fZnJhbWUgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fYW5pbWF0aW9uZnJhbWVgKTtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKGFuaW1hdGlvbl9mcmFtZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGhhc19sb2NhbF9mdW5jdGlvbiA9IGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzLnNpemUgPiAwIHx8IG5lZWRzX2xvY2sgfHwgYW5pbWF0aW9uX2ZyYW1lO1xuXHQgICAgICAgIGxldCBjYWxsZWUgPSByZW5kZXJlci5yZWZlcmVuY2UoaGFuZGxlcik7XG5cdCAgICAgICAgLy8gVE9ETyBkcnkgdGhpcyBvdXQg4oCUIHNpbWlsYXIgY29kZSBmb3IgZXZlbnQgaGFuZGxlcnMgYW5kIGNvbXBvbmVudCBiaW5kaW5nc1xuXHQgICAgICAgIGlmIChoYXNfbG9jYWxfZnVuY3Rpb24pIHtcblx0ICAgICAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpLm1hcChuYW1lID0+IHJlbmRlcmVyLnJlZmVyZW5jZShuYW1lKSk7XG5cdCAgICAgICAgICAgIC8vIG5lZWQgdG8gY3JlYXRlIGEgYmxvY2stbG9jYWwgZnVuY3Rpb24gdGhhdCBjYWxscyBhbiBpbnN0YW5jZS1sZXZlbCBmdW5jdGlvblxuXHQgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX2ZyYW1lKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRcdGZ1bmN0aW9uICR7aGFuZGxlcn0oKSB7XG5cdFx0XHRcdFx0XHRAX2NhbmNlbEFuaW1hdGlvbkZyYW1lKCR7YW5pbWF0aW9uX2ZyYW1lfSk7XG5cdFx0XHRcdFx0XHRpZiAoISR7dGhpcy52YXJ9LnBhdXNlZCkge1xuXHRcdFx0XHRcdFx0XHQke2FuaW1hdGlvbl9mcmFtZX0gPSBAcmFmKCR7aGFuZGxlcn0pO1xuXHRcdFx0XHRcdFx0XHQke25lZWRzX2xvY2sgJiYgYiBgJHtsb2NrfSA9IHRydWU7YH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCR7Y2FsbGVlfS5jYWxsKCR7dGhpcy52YXJ9LCAke2FyZ3N9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdFx0XHRmdW5jdGlvbiAke2hhbmRsZXJ9KCkge1xuXHRcdFx0XHRcdFx0JHtuZWVkc19sb2NrICYmIGIgYCR7bG9ja30gPSB0cnVlO2B9XG5cdFx0XHRcdFx0XHQke2NhbGxlZX0uY2FsbCgke3RoaXMudmFyfSwgJHthcmdzfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYWxsZWUgPSBoYW5kbGVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBwYXJhbXMgPSBBcnJheS5mcm9tKGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzKS5tYXAobmFtZSA9PiAoe1xuXHQgICAgICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG5cdCAgICAgICAgICAgIG5hbWVcblx0ICAgICAgICB9KSk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5jb21wb25lbnQucGFydGx5X2hvaXN0ZWQucHVzaChiIGBcblx0XHRcdGZ1bmN0aW9uICR7aGFuZGxlcn0oJHtwYXJhbXN9KSB7XG5cdFx0XHRcdCR7YmluZGluZ19ncm91cC5iaW5kaW5ncy5tYXAoYiA9PiBiLmhhbmRsZXIubXV0YXRpb24pfVxuXHRcdFx0XHQke0FycmF5LmZyb20oZGVwZW5kZW5jaWVzKVxuICAgICAgICAgICAgLmZpbHRlcihkZXAgPT4gZGVwWzBdICE9PSAnJCcpXG4gICAgICAgICAgICAuZmlsdGVyKGRlcCA9PiAhY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuaGFzKGRlcCkpXG4gICAgICAgICAgICAubWFwKGRlcCA9PiBiIGAke3RoaXMucmVuZGVyZXIuaW52YWxpZGF0ZShkZXApfTtgKX1cblx0XHRcdH1cblx0XHRgKTtcblx0ICAgICAgICBiaW5kaW5nX2dyb3VwLmV2ZW50cy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2VsZW1lbnRyZXNpemUnKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2Vcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6ZV9saXN0ZW5lciA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9yZXNpemVfbGlzdGVuZXJgKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShyZXNpemVfbGlzdGVuZXIpO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgJHtyZXNpemVfbGlzdGVuZXJ9ID0gQGFkZF9yZXNpemVfbGlzdGVuZXIoJHt0aGlzLnZhcn0sICR7Y2FsbGVlfS5iaW5kKCR7dGhpcy52YXJ9KSk7YCk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYCR7cmVzaXplX2xpc3RlbmVyfSgpO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suZXZlbnRfbGlzdGVuZXJzLnB1c2goeCBgQGxpc3Rlbigke3RoaXMudmFyfSwgXCIke25hbWV9XCIsICR7Y2FsbGVlfSlgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGNvbnN0IHNvbWVfaW5pdGlhbF9zdGF0ZV9pc191bmRlZmluZWQgPSBiaW5kaW5nX2dyb3VwLmJpbmRpbmdzXG5cdCAgICAgICAgICAgIC5tYXAoYmluZGluZyA9PiB4IGAke2JpbmRpbmcuc25pcHBldH0gPT09IHZvaWQgMGApXG5cdCAgICAgICAgICAgIC5yZWR1Y2UoKGxocywgcmhzKSA9PiB4IGAke2xoc30gfHwgJHtyaHN9YCk7XG5cdCAgICAgICAgY29uc3Qgc2hvdWxkX2luaXRpYWxpc2UgPSAodGhpcy5ub2RlLm5hbWUgPT09ICdzZWxlY3QnIHx8XG5cdCAgICAgICAgICAgIGJpbmRpbmdfZ3JvdXAuYmluZGluZ3MuZmluZChiaW5kaW5nID0+IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoYmluZGluZy5ub2RlLm5hbWUgPT09ICdpbmRldGVybWluYXRlJyB8fFxuXHQgICAgICAgICAgICAgICAgICAgIGJpbmRpbmcubm9kZS5uYW1lID09PSAndGV4dENvbnRlbnQnIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgYmluZGluZy5ub2RlLm5hbWUgPT09ICdpbm5lckhUTUwnIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgYmluZGluZy5pc19yZWFkb25seV9tZWRpYV9hdHRyaWJ1dGUoKSk7XG5cdCAgICAgICAgICAgIH0pKTtcblx0ICAgICAgICBpZiAoc2hvdWxkX2luaXRpYWxpc2UpIHtcblx0ICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBoYXNfbG9jYWxfZnVuY3Rpb24gPyBoYW5kbGVyIDogeCBgKCkgPT4gJHtjYWxsZWV9LmNhbGwoJHt0aGlzLnZhcn0pYDtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmh5ZHJhdGUucHVzaChiIGBpZiAoJHtzb21lX2luaXRpYWxfc3RhdGVfaXNfdW5kZWZpbmVkfSkgQGFkZF9yZW5kZXJfY2FsbGJhY2soJHtjYWxsYmFja30pO2ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoYmluZGluZ19ncm91cC5ldmVudHNbMF0gPT09ICdlbGVtZW50cmVzaXplJykge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaHlkcmF0ZS5wdXNoKGIgYEBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+ICR7Y2FsbGVlfS5jYWxsKCR7dGhpcy52YXJ9KSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChsb2NrKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGAke2xvY2t9ID0gZmFsc2U7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgYWRkX3RoaXNfYmluZGluZyhibG9jaywgdGhpc19iaW5kaW5nKSB7XG5cdCAgICAgICAgY29uc3QgeyByZW5kZXJlciB9ID0gdGhpcztcblx0ICAgICAgICByZW5kZXJlci5jb21wb25lbnQuaGFzX3JlYWN0aXZlX2Fzc2lnbm1lbnRzID0gdHJ1ZTtcblx0ICAgICAgICBjb25zdCBiaW5kaW5nX2NhbGxiYWNrID0gYmluZF90aGlzKHJlbmRlcmVyLmNvbXBvbmVudCwgYmxvY2ssIHRoaXNfYmluZGluZywgdGhpcy52YXIpO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGJpbmRpbmdfY2FsbGJhY2spO1xuXHQgICAgfVxuXHQgICAgYWRkX2F0dHJpYnV0ZXMoYmxvY2spIHtcblx0ICAgICAgICAvLyBHZXQgYWxsIHRoZSBjbGFzcyBkZXBlbmRlbmNpZXMgZmlyc3Rcblx0ICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubm9kZS5uYW1lID09PSAnY2xhc3MnKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBhdHRyaWJ1dGUubm9kZS5nZXRfZGVwZW5kZW5jaWVzKCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNsYXNzX2RlcGVuZGVuY2llcy5wdXNoKC4uLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLmF0dHJpYnV0ZXMuc29tZShhdHRyID0+IGF0dHIuaXNfc3ByZWFkKSkge1xuXHQgICAgICAgICAgICB0aGlzLmFkZF9zcHJlYWRfYXR0cmlidXRlcyhibG9jayk7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xuXHQgICAgICAgICAgICBhdHRyaWJ1dGUucmVuZGVyKGJsb2NrKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGFkZF9zcHJlYWRfYXR0cmlidXRlcyhibG9jaykge1xuXHQgICAgICAgIGNvbnN0IGxldmVscyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9sZXZlbHNgKTtcblx0ICAgICAgICBjb25zdCBkYXRhID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke3RoaXMudmFyLm5hbWV9X2RhdGFgKTtcblx0ICAgICAgICBjb25zdCBpbml0aWFsX3Byb3BzID0gW107XG5cdCAgICAgICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuXHQgICAgICAgIHRoaXMuYXR0cmlidXRlc1xuXHQgICAgICAgICAgICAuZm9yRWFjaChhdHRyID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXR0ci5ub2RlLmdldF9kZXBlbmRlbmNpZXMoKTtcblx0ICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDBcblx0ICAgICAgICAgICAgICAgID8gYmxvY2sucmVuZGVyZXIuZGlydHkoZGVwZW5kZW5jaWVzKVxuXHQgICAgICAgICAgICAgICAgOiBudWxsO1xuXHQgICAgICAgICAgICBpZiAoYXR0ciBpbnN0YW5jZW9mIFNwcmVhZEF0dHJpYnV0ZVdyYXBwZXIpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHNuaXBwZXQgPSBhdHRyLm5vZGUuZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGluaXRpYWxfcHJvcHMucHVzaChzbmlwcGV0KTtcblx0ICAgICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChjb25kaXRpb24gPyB4IGAke2NvbmRpdGlvbn0gJiYgJHtzbmlwcGV0fWAgOiBzbmlwcGV0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyLnByb3BlcnR5X25hbWUgfHwgYXR0ci5uYW1lO1xuXHQgICAgICAgICAgICAgICAgaW5pdGlhbF9wcm9wcy5wdXNoKHggYHsgJHtuYW1lfTogJHthdHRyLmdldF9pbml0KGJsb2NrLCBhdHRyLmdldF92YWx1ZShibG9jaykpfSB9YCk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBzbmlwcGV0ID0geCBgeyAke25hbWV9OiAke2F0dHIuc2hvdWxkX2NhY2hlID8gYXR0ci5sYXN0IDogYXR0ci5nZXRfdmFsdWUoYmxvY2spfSB9YDtcblx0ICAgICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChjb25kaXRpb24gPyB4IGAke2F0dHIuZ2V0X2RvbV91cGRhdGVfY29uZGl0aW9ucyhibG9jaywgY29uZGl0aW9uKX0gJiYgJHtzbmlwcGV0fWAgOiBzbmlwcGV0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRsZXQgJHtsZXZlbHN9ID0gWyR7aW5pdGlhbF9wcm9wc31dO1xuXG5cdFx0XHRsZXQgJHtkYXRhfSA9IHt9O1xuXHRcdFx0Zm9yIChsZXQgI2kgPSAwOyAjaSA8ICR7bGV2ZWxzfS5sZW5ndGg7ICNpICs9IDEpIHtcblx0XHRcdFx0JHtkYXRhfSA9IEBhc3NpZ24oJHtkYXRhfSwgJHtsZXZlbHN9WyNpXSk7XG5cdFx0XHR9XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgZm4gPSB0aGlzLm5vZGUubmFtZXNwYWNlID09PSBuYW1lc3BhY2VzLnN2ZyA/IHggYEBzZXRfc3ZnX2F0dHJpYnV0ZXNgIDogeCBgQHNldF9hdHRyaWJ1dGVzYDtcblx0ICAgICAgICBibG9jay5jaHVua3MuaHlkcmF0ZS5wdXNoKGIgYCR7Zm59KCR7dGhpcy52YXJ9LCAke2RhdGF9KTtgKTtcblx0ICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHQke2ZufSgke3RoaXMudmFyfSwgJHtkYXRhfSA9IEBnZXRfc3ByZWFkX3VwZGF0ZSgke2xldmVsc30sIFtcblx0XHRcdFx0JHt1cGRhdGVzfVxuXHRcdFx0XSkpO1xuXHRcdGApO1xuXHQgICAgICAgIC8vIGhhbmRsZSBlZGdlIGNhc2VzIGZvciBlbGVtZW50c1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUubmFtZSA9PT0gJ3NlbGVjdCcpIHtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHIgb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlcCBvZiBhdHRyLm5vZGUuZGVwZW5kZW5jaWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmFkZChkZXApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtkYXRhfS5tdWx0aXBsZSkgQHNlbGVjdF9vcHRpb25zKCR7dGhpcy52YXJ9LCAke2RhdGF9LnZhbHVlKTtcblx0XHRcdGApO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdGlmICgke2Jsb2NrLnJlbmRlcmVyLmRpcnR5KEFycmF5LmZyb20oZGVwZW5kZW5jaWVzKSl9ICYmICR7ZGF0YX0ubXVsdGlwbGUpIEBzZWxlY3Rfb3B0aW9ucygke3RoaXMudmFyfSwgJHtkYXRhfS52YWx1ZSk7XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBhZGRfdHJhbnNpdGlvbnMoYmxvY2spIHtcblx0ICAgICAgICBjb25zdCB7IGludHJvLCBvdXRybyB9ID0gdGhpcy5ub2RlO1xuXHQgICAgICAgIGlmICghaW50cm8gJiYgIW91dHJvKVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgaWYgKGludHJvID09PSBvdXRybykge1xuXHQgICAgICAgICAgICAvLyBiaWRpcmVjdGlvbmFsIHRyYW5zaXRpb25cblx0ICAgICAgICAgICAgY29uc3QgbmFtZSA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV90cmFuc2l0aW9uYCk7XG5cdCAgICAgICAgICAgIGNvbnN0IHNuaXBwZXQgPSBpbnRyby5leHByZXNzaW9uXG5cdCAgICAgICAgICAgICAgICA/IGludHJvLmV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jaylcblx0ICAgICAgICAgICAgICAgIDogeCBge31gO1xuXHQgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUobmFtZSk7XG5cdCAgICAgICAgICAgIGNvbnN0IGZuID0gdGhpcy5yZW5kZXJlci5yZWZlcmVuY2UoaW50cm8ubmFtZSk7XG5cdCAgICAgICAgICAgIGNvbnN0IGludHJvX2Jsb2NrID0gYiBgXG5cdFx0XHRcdEBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcblx0XHRcdFx0XHRpZiAoISR7bmFtZX0pICR7bmFtZX0gPSBAY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbigke3RoaXMudmFyfSwgJHtmbn0sICR7c25pcHBldH0sIHRydWUpO1xuXHRcdFx0XHRcdCR7bmFtZX0ucnVuKDEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdGA7XG5cdCAgICAgICAgICAgIGNvbnN0IG91dHJvX2Jsb2NrID0gYiBgXG5cdFx0XHRcdGlmICghJHtuYW1lfSkgJHtuYW1lfSA9IEBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKCR7dGhpcy52YXJ9LCAke2ZufSwgJHtzbmlwcGV0fSwgZmFsc2UpO1xuXHRcdFx0XHQke25hbWV9LnJ1bigwKTtcblx0XHRcdGA7XG5cdCAgICAgICAgICAgIGlmIChpbnRyby5pc19sb2NhbCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmludHJvLnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCNsb2NhbCkge1xuXHRcdFx0XHRcdFx0JHtpbnRyb19ibG9ja31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCNsb2NhbCkge1xuXHRcdFx0XHRcdFx0JHtvdXRyb19ibG9ja31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmludHJvLnB1c2goaW50cm9fYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2gob3V0cm9fYmxvY2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgaWYgKGRldGFjaGluZyAmJiAke25hbWV9KSAke25hbWV9LmVuZCgpO2ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgaW50cm9fbmFtZSA9IGludHJvICYmIGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9pbnRyb2ApO1xuXHQgICAgICAgICAgICBjb25zdCBvdXRyb19uYW1lID0gb3V0cm8gJiYgYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke3RoaXMudmFyLm5hbWV9X291dHJvYCk7XG5cdCAgICAgICAgICAgIGlmIChpbnRybykge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKGludHJvX25hbWUpO1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc25pcHBldCA9IGludHJvLmV4cHJlc3Npb25cblx0ICAgICAgICAgICAgICAgICAgICA/IGludHJvLmV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jaylcblx0ICAgICAgICAgICAgICAgICAgICA6IHggYHt9YDtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gdGhpcy5yZW5kZXJlci5yZWZlcmVuY2UoaW50cm8ubmFtZSk7XG5cdCAgICAgICAgICAgICAgICBsZXQgaW50cm9fYmxvY2s7XG5cdCAgICAgICAgICAgICAgICBpZiAob3V0cm8pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnRyb19ibG9jayA9IGIgYFxuXHRcdFx0XHRcdFx0QGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoJHtvdXRyb19uYW1lfSkgJHtvdXRyb19uYW1lfS5lbmQoMSk7XG5cdFx0XHRcdFx0XHRcdGlmICghJHtpbnRyb19uYW1lfSkgJHtpbnRyb19uYW1lfSA9IEBjcmVhdGVfaW5fdHJhbnNpdGlvbigke3RoaXMudmFyfSwgJHtmbn0sICR7c25pcHBldH0pO1xuXHRcdFx0XHRcdFx0XHQke2ludHJvX25hbWV9LnN0YXJ0KCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRgO1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5vdXRyby5wdXNoKGIgYGlmICgke2ludHJvX25hbWV9KSAke2ludHJvX25hbWV9LmludmFsaWRhdGUoKTtgKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludHJvX2Jsb2NrID0gYiBgXG5cdFx0XHRcdFx0XHRpZiAoISR7aW50cm9fbmFtZX0pIHtcblx0XHRcdFx0XHRcdFx0QGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdCR7aW50cm9fbmFtZX0gPSBAY3JlYXRlX2luX3RyYW5zaXRpb24oJHt0aGlzLnZhcn0sICR7Zm59LCAke3NuaXBwZXR9KTtcblx0XHRcdFx0XHRcdFx0XHQke2ludHJvX25hbWV9LnN0YXJ0KCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGA7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoaW50cm8uaXNfbG9jYWwpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnRyb19ibG9jayA9IGIgYFxuXHRcdFx0XHRcdFx0aWYgKCNsb2NhbCkge1xuXHRcdFx0XHRcdFx0XHQke2ludHJvX2Jsb2NrfVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGA7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW50cm8ucHVzaChpbnRyb19ibG9jayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG91dHJvKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUob3V0cm9fbmFtZSk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBzbmlwcGV0ID0gb3V0cm8uZXhwcmVzc2lvblxuXHQgICAgICAgICAgICAgICAgICAgID8gb3V0cm8uZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKVxuXHQgICAgICAgICAgICAgICAgICAgIDogeCBge31gO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgZm4gPSB0aGlzLnJlbmRlcmVyLnJlZmVyZW5jZShvdXRyby5uYW1lKTtcblx0ICAgICAgICAgICAgICAgIGlmICghaW50cm8pIHtcblx0ICAgICAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW50cm8ucHVzaChiIGBcblx0XHRcdFx0XHRcdGlmICgke291dHJvX25hbWV9KSAke291dHJvX25hbWV9LmVuZCgxKTtcblx0XHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIC8vIFRPRE8gaGlkZSBlbGVtZW50cyB0aGF0IGhhdmUgb3V0cm8nZCAodW5sZXNzIHRoZXkgYmVsb25nIHRvIGEgc3RpbGwtb3V0cm9pbmdcblx0ICAgICAgICAgICAgICAgIC8vIGdyb3VwKSBwcmlvciB0byB0aGVpciByZW1vdmFsIGZyb20gdGhlIERPTVxuXHQgICAgICAgICAgICAgICAgbGV0IG91dHJvX2Jsb2NrID0gYiBgXG5cdFx0XHRcdFx0JHtvdXRyb19uYW1lfSA9IEBjcmVhdGVfb3V0X3RyYW5zaXRpb24oJHt0aGlzLnZhcn0sICR7Zm59LCAke3NuaXBwZXR9KTtcblx0XHRcdFx0YDtcblx0ICAgICAgICAgICAgICAgIGlmIChvdXRyby5pc19sb2NhbCkge1xuXHQgICAgICAgICAgICAgICAgICAgIG91dHJvX2Jsb2NrID0gYiBgXG5cdFx0XHRcdFx0XHRpZiAoI2xvY2FsKSB7XG5cdFx0XHRcdFx0XHRcdCR7b3V0cm9fYmxvY2t9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5vdXRyby5wdXNoKG91dHJvX2Jsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgaWYgKGRldGFjaGluZyAmJiAke291dHJvX25hbWV9KSAke291dHJvX25hbWV9LmVuZCgpO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgYWRkX2FuaW1hdGlvbihibG9jaykge1xuXHQgICAgICAgIGlmICghdGhpcy5ub2RlLmFuaW1hdGlvbilcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGNvbnN0IHsgb3V0cm8gfSA9IHRoaXMubm9kZTtcblx0ICAgICAgICBjb25zdCByZWN0ID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKCdyZWN0Jyk7XG5cdCAgICAgICAgY29uc3Qgc3RvcF9hbmltYXRpb24gPSBibG9jay5nZXRfdW5pcXVlX25hbWUoJ3N0b3BfYW5pbWF0aW9uJyk7XG5cdCAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKHJlY3QpO1xuXHQgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShzdG9wX2FuaW1hdGlvbiwgeCBgQG5vb3BgKTtcblx0ICAgICAgICBibG9jay5jaHVua3MubWVhc3VyZS5wdXNoKGIgYFxuXHRcdFx0JHtyZWN0fSA9ICR7dGhpcy52YXJ9LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5maXgucHVzaChiIGBcblx0XHRcdEBmaXhfcG9zaXRpb24oJHt0aGlzLnZhcn0pO1xuXHRcdFx0JHtzdG9wX2FuaW1hdGlvbn0oKTtcblx0XHRcdCR7b3V0cm8gJiYgYiBgQGFkZF90cmFuc2Zvcm0oJHt0aGlzLnZhcn0sICR7cmVjdH0pO2B9XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5ub2RlLmFuaW1hdGlvbi5leHByZXNzaW9uID8gdGhpcy5ub2RlLmFuaW1hdGlvbi5leHByZXNzaW9uLm1hbmlwdWxhdGUoYmxvY2spIDogeCBge31gO1xuXHQgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLnJlbmRlcmVyLnJlZmVyZW5jZSh0aGlzLm5vZGUuYW5pbWF0aW9uLm5hbWUpO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5hbmltYXRlLnB1c2goYiBgXG5cdFx0XHQke3N0b3BfYW5pbWF0aW9ufSgpO1xuXHRcdFx0JHtzdG9wX2FuaW1hdGlvbn0gPSBAY3JlYXRlX2FuaW1hdGlvbigke3RoaXMudmFyfSwgJHtyZWN0fSwgJHtuYW1lfSwgJHtwYXJhbXN9KTtcblx0XHRgKTtcblx0ICAgIH1cblx0ICAgIGFkZF9jbGFzc2VzKGJsb2NrKSB7XG5cdCAgICAgICAgY29uc3QgaGFzX3NwcmVhZCA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzLnNvbWUoYXR0ciA9PiBhdHRyLmlzX3NwcmVhZCk7XG5cdCAgICAgICAgdGhpcy5ub2RlLmNsYXNzZXMuZm9yRWFjaChjbGFzc19kaXJlY3RpdmUgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCB7IGV4cHJlc3Npb24sIG5hbWUgfSA9IGNsYXNzX2RpcmVjdGl2ZTtcblx0ICAgICAgICAgICAgbGV0IHNuaXBwZXQ7XG5cdCAgICAgICAgICAgIGxldCBkZXBlbmRlbmNpZXM7XG5cdCAgICAgICAgICAgIGlmIChleHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICBzbmlwcGV0ID0gZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IGV4cHJlc3Npb24uZGVwZW5kZW5jaWVzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc25pcHBldCA9IG5hbWU7XG5cdCAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KFtuYW1lXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3QgdXBkYXRlciA9IGIgYEB0b2dnbGVfY2xhc3MoJHt0aGlzLnZhcn0sIFwiJHtuYW1lfVwiLCAke3NuaXBwZXR9KTtgO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaHlkcmF0ZS5wdXNoKHVwZGF0ZXIpO1xuXHQgICAgICAgICAgICBpZiAoaGFzX3NwcmVhZCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKHVwZGF0ZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKChkZXBlbmRlbmNpZXMgJiYgZGVwZW5kZW5jaWVzLnNpemUgPiAwKSB8fCB0aGlzLmNsYXNzX2RlcGVuZGVuY2llcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGFsbF9kZXBlbmRlbmNpZXMgPSB0aGlzLmNsYXNzX2RlcGVuZGVuY2llcy5jb25jYXQoLi4uZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGJsb2NrLnJlbmRlcmVyLmRpcnR5KGFsbF9kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdGlmICgke2NvbmRpdGlvbn0pIHtcblx0XHRcdFx0XHRcdCR7dXBkYXRlcn1cblx0XHRcdFx0XHR9YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGFkZF9tYW51YWxfc3R5bGVfc2NvcGluZyhibG9jaykge1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUubmVlZHNfbWFudWFsX3N0eWxlX3Njb3BpbmcpIHtcblx0ICAgICAgICAgICAgY29uc3QgdXBkYXRlciA9IGIgYEB0b2dnbGVfY2xhc3MoJHt0aGlzLnZhcn0sIFwiJHt0aGlzLm5vZGUuY29tcG9uZW50LnN0eWxlc2hlZXQuaWR9XCIsIHRydWUpO2A7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2godXBkYXRlcik7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaCh1cGRhdGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gdG9faHRtbCh3cmFwcGVycywgYmxvY2ssIGxpdGVyYWwsIHN0YXRlLCBjYW5fdXNlX3Jhd190ZXh0KSB7XG5cdCAgICB3cmFwcGVycy5mb3JFYWNoKHdyYXBwZXIgPT4ge1xuXHQgICAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgVGV4dFdyYXBwZXIpIHtcblx0ICAgICAgICAgICAgaWYgKHdyYXBwZXIudXNlX3NwYWNlKCkpXG5cdCAgICAgICAgICAgICAgICBzdGF0ZS5xdWFzaS52YWx1ZS5yYXcgKz0gJyAnO1xuXHQgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB3cmFwcGVyLm5vZGUucGFyZW50O1xuXHQgICAgICAgICAgICBjb25zdCByYXcgPSBwYXJlbnQgJiYgKHBhcmVudC5uYW1lID09PSAnc2NyaXB0JyB8fFxuXHQgICAgICAgICAgICAgICAgcGFyZW50Lm5hbWUgPT09ICdzdHlsZScgfHxcblx0ICAgICAgICAgICAgICAgIGNhbl91c2VfcmF3X3RleHQpO1xuXHQgICAgICAgICAgICBzdGF0ZS5xdWFzaS52YWx1ZS5yYXcgKz0gKHJhdyA/IHdyYXBwZXIuZGF0YSA6IGVzY2FwZV9odG1sKHdyYXBwZXIuZGF0YSkpXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2AvZywgJ1xcXFxgJylcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCQvZywgJ1xcXFwkJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBNdXN0YWNoZVRhZ1dyYXBwZXIgfHwgd3JhcHBlciBpbnN0YW5jZW9mIFJhd011c3RhY2hlVGFnV3JhcHBlcikge1xuXHQgICAgICAgICAgICBsaXRlcmFsLnF1YXNpcy5wdXNoKHN0YXRlLnF1YXNpKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbC5leHByZXNzaW9ucy5wdXNoKHdyYXBwZXIubm9kZS5leHByZXNzaW9uLm1hbmlwdWxhdGUoYmxvY2spKTtcblx0ICAgICAgICAgICAgc3RhdGUucXVhc2kgPSB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAnVGVtcGxhdGVFbGVtZW50Jyxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiB7IHJhdzogJycgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh3cmFwcGVyLm5vZGUubmFtZSA9PT0gJ25vc2NyaXB0JykgO1xuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBlbGVtZW50XG5cdCAgICAgICAgICAgIHN0YXRlLnF1YXNpLnZhbHVlLnJhdyArPSBgPCR7d3JhcHBlci5ub2RlLm5hbWV9YDtcblx0ICAgICAgICAgICAgd3JhcHBlci5hdHRyaWJ1dGVzLmZvckVhY2goKGF0dHIpID0+IHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlLnF1YXNpLnZhbHVlLnJhdyArPSBgICR7Zml4X2F0dHJpYnV0ZV9jYXNpbmcoYXR0ci5ub2RlLm5hbWUpfT1cImA7XG5cdCAgICAgICAgICAgICAgICBhdHRyLm5vZGUuY2h1bmtzLmZvckVhY2goY2h1bmsgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaHVuay50eXBlID09PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucXVhc2kudmFsdWUucmF3ICs9IGVzY2FwZV9odG1sKGNodW5rLmRhdGEpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbC5xdWFzaXMucHVzaChzdGF0ZS5xdWFzaSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWwuZXhwcmVzc2lvbnMucHVzaChjaHVuay5tYW5pcHVsYXRlKGJsb2NrKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnF1YXNpID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1RlbXBsYXRlRWxlbWVudCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyByYXc6ICcnIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIHN0YXRlLnF1YXNpLnZhbHVlLnJhdyArPSBgXCJgO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgc3RhdGUucXVhc2kudmFsdWUucmF3ICs9ICc+Jztcblx0ICAgICAgICAgICAgaWYgKCF3cmFwcGVyLnZvaWQpIHtcblx0ICAgICAgICAgICAgICAgIHRvX2h0bWwod3JhcHBlci5mcmFnbWVudC5ub2RlcywgYmxvY2ssIGxpdGVyYWwsIHN0YXRlKTtcblx0ICAgICAgICAgICAgICAgIHN0YXRlLnF1YXNpLnZhbHVlLnJhdyArPSBgPC8ke3dyYXBwZXIubm9kZS5uYW1lfT5gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH1cblxuXHRjbGFzcyBIZWFkV3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLmNhbl91c2VfaW5uZXJodG1sID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudCA9IG5ldyBGcmFnbWVudFdyYXBwZXIocmVuZGVyZXIsIGJsb2NrLCBub2RlLmNoaWxkcmVuLCB0aGlzLCBzdHJpcF93aGl0ZXNwYWNlLCBuZXh0X3NpYmxpbmcpO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBfcGFyZW50X25vZGUsIF9wYXJlbnRfbm9kZXMpIHtcblx0ICAgICAgICBsZXQgbm9kZXM7XG5cdCAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIub3B0aW9ucy5oeWRyYXRhYmxlICYmIHRoaXMuZnJhZ21lbnQubm9kZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIG5vZGVzID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKCdoZWFkX25vZGVzJyk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYGNvbnN0ICR7bm9kZXN9ID0gQHF1ZXJ5X3NlbGVjdG9yX2FsbCgnW2RhdGEtc3ZlbHRlPVwiJHt0aGlzLm5vZGUuaWR9XCJdJywgQF9kb2N1bWVudC5oZWFkKTtgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudC5yZW5kZXIoYmxvY2ssIHggYEBfZG9jdW1lbnQuaGVhZGAsIG5vZGVzKTtcblx0ICAgICAgICBpZiAobm9kZXMgJiYgdGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGUpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNsYWltLnB1c2goYiBgJHtub2Rlc30uZm9yRWFjaChAZGV0YWNoKTtgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBpc19lbHNlX2lmKG5vZGUpIHtcblx0ICAgIHJldHVybiAobm9kZSAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09ICdJZkJsb2NrJyk7XG5cdH1cblx0Y2xhc3MgSWZCbG9ja0JyYW5jaCBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLnZhciA9IG51bGw7XG5cdCAgICAgICAgY29uc3QgeyBleHByZXNzaW9uIH0gPSBub2RlO1xuXHQgICAgICAgIGNvbnN0IGlzX2Vsc2UgPSAhZXhwcmVzc2lvbjtcblx0ICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGV4cHJlc3Npb24uZHluYW1pY19kZXBlbmRlbmNpZXMoKTtcblx0ICAgICAgICAgICAgLy8gVE9ETyBpcyB0aGlzIHRoZSByaWdodCBydWxlPyBvciBzaG91bGQgYW55IG5vbi1yZWZlcmVuY2UgY291bnQ/XG5cdCAgICAgICAgICAgIC8vIGNvbnN0IHNob3VsZF9jYWNoZSA9ICFpc19yZWZlcmVuY2UoZXhwcmVzc2lvbi5ub2RlLCBudWxsKSAmJiBkZXBlbmRlbmNpZXMubGVuZ3RoID4gMDtcblx0ICAgICAgICAgICAgbGV0IHNob3VsZF9jYWNoZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICB3YWxrKGV4cHJlc3Npb24ubm9kZSwge1xuXHQgICAgICAgICAgICAgICAgZW50ZXIobm9kZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdDYWxsRXhwcmVzc2lvbicgfHwgbm9kZS50eXBlID09PSAnTmV3RXhwcmVzc2lvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkX2NhY2hlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBpZiAoc2hvdWxkX2NhY2hlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgc2hvd19pZmApO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zbmlwcGV0ID0gZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2suY2hpbGQoe1xuXHQgICAgICAgICAgICBjb21tZW50OiBjcmVhdGVfZGVidWdnaW5nX2NvbW1lbnQobm9kZSwgcGFyZW50LnJlbmRlcmVyLmNvbXBvbmVudCksXG5cdCAgICAgICAgICAgIG5hbWU6IHBhcmVudC5yZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGlzX2Vsc2UgPyBgY3JlYXRlX2Vsc2VfYmxvY2tgIDogYGNyZWF0ZV9pZl9ibG9ja2ApLFxuXHQgICAgICAgICAgICB0eXBlOiBub2RlLmV4cHJlc3Npb24gPyAnaWYnIDogJ2Vsc2UnXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudCA9IG5ldyBGcmFnbWVudFdyYXBwZXIocmVuZGVyZXIsIHRoaXMuYmxvY2ssIG5vZGUuY2hpbGRyZW4sIHBhcmVudCwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICB0aGlzLmlzX2R5bmFtaWMgPSB0aGlzLmJsb2NrLmRlcGVuZGVuY2llcy5zaXplID4gMDtcblx0ICAgIH1cblx0fVxuXHRjbGFzcyBJZkJsb2NrV3JhcHBlciBleHRlbmRzIFdyYXBwZXIge1xuXHQgICAgY29uc3RydWN0b3IocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgICAgICB0aGlzLm5lZWRzX3VwZGF0ZSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMudmFyID0geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdpZl9ibG9jaycgfTtcblx0ICAgICAgICB0aGlzLmNhbm5vdF91c2VfaW5uZXJodG1sKCk7XG5cdCAgICAgICAgdGhpcy5ub3Rfc3RhdGljX2NvbnRlbnQoKTtcblx0ICAgICAgICB0aGlzLmJyYW5jaGVzID0gW107XG5cdCAgICAgICAgY29uc3QgYmxvY2tzID0gW107XG5cdCAgICAgICAgbGV0IGlzX2R5bmFtaWMgPSBmYWxzZTtcblx0ICAgICAgICBsZXQgaGFzX2ludHJvcyA9IGZhbHNlO1xuXHQgICAgICAgIGxldCBoYXNfb3V0cm9zID0gZmFsc2U7XG5cdCAgICAgICAgY29uc3QgY3JlYXRlX2JyYW5jaGVzID0gKG5vZGUpID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgYnJhbmNoID0gbmV3IElmQmxvY2tCcmFuY2gocmVuZGVyZXIsIGJsb2NrLCB0aGlzLCBub2RlLCBzdHJpcF93aGl0ZXNwYWNlLCBuZXh0X3NpYmxpbmcpO1xuXHQgICAgICAgICAgICB0aGlzLmJyYW5jaGVzLnB1c2goYnJhbmNoKTtcblx0ICAgICAgICAgICAgYmxvY2tzLnB1c2goYnJhbmNoLmJsb2NrKTtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyhub2RlLmV4cHJlc3Npb24uZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgaWYgKGJyYW5jaC5ibG9jay5kZXBlbmRlbmNpZXMuc2l6ZSA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIHRoZSBjb25kaXRpb24sIG9yIGl0cyBjb250ZW50cywgaXMgZHluYW1pY1xuXHQgICAgICAgICAgICAgICAgaXNfZHluYW1pYyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKGJyYW5jaC5ibG9jay5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChicmFuY2guZGVwZW5kZW5jaWVzICYmIGJyYW5jaC5kZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgLy8gdGhlIGNvbmRpdGlvbiBpdHNlbGYgaXMgZHluYW1pY1xuXHQgICAgICAgICAgICAgICAgdGhpcy5uZWVkc191cGRhdGUgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suaGFzX2ludHJvcylcblx0ICAgICAgICAgICAgICAgIGhhc19pbnRyb3MgPSB0cnVlO1xuXHQgICAgICAgICAgICBpZiAoYnJhbmNoLmJsb2NrLmhhc19vdXRyb3MpXG5cdCAgICAgICAgICAgICAgICBoYXNfb3V0cm9zID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKGlzX2Vsc2VfaWYobm9kZS5lbHNlKSkge1xuXHQgICAgICAgICAgICAgICAgY3JlYXRlX2JyYW5jaGVzKG5vZGUuZWxzZS5jaGlsZHJlblswXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5lbHNlKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBicmFuY2ggPSBuZXcgSWZCbG9ja0JyYW5jaChyZW5kZXJlciwgYmxvY2ssIHRoaXMsIG5vZGUuZWxzZSwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYnJhbmNoZXMucHVzaChicmFuY2gpO1xuXHQgICAgICAgICAgICAgICAgYmxvY2tzLnB1c2goYnJhbmNoLmJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suZGVwZW5kZW5jaWVzLnNpemUgPiAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaXNfZHluYW1pYyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyhicmFuY2guYmxvY2suZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suaGFzX2ludHJvcylcblx0ICAgICAgICAgICAgICAgICAgICBoYXNfaW50cm9zID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suaGFzX291dHJvcylcblx0ICAgICAgICAgICAgICAgICAgICBoYXNfb3V0cm9zID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgY3JlYXRlX2JyYW5jaGVzKHRoaXMubm9kZSk7XG5cdCAgICAgICAgYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xuXHQgICAgICAgICAgICBibG9jay5oYXNfdXBkYXRlX21ldGhvZCA9IGlzX2R5bmFtaWM7XG5cdCAgICAgICAgICAgIGJsb2NrLmhhc19pbnRyb19tZXRob2QgPSBoYXNfaW50cm9zO1xuXHQgICAgICAgICAgICBibG9jay5oYXNfb3V0cm9fbWV0aG9kID0gaGFzX291dHJvcztcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZW5kZXJlci5ibG9ja3MucHVzaCguLi5ibG9ja3MpO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMudmFyO1xuXHQgICAgICAgIGNvbnN0IG5lZWRzX2FuY2hvciA9IHRoaXMubmV4dCA/ICF0aGlzLm5leHQuaXNfZG9tX25vZGUoKSA6ICFwYXJlbnRfbm9kZSB8fCAhdGhpcy5wYXJlbnQuaXNfZG9tX25vZGUoKTtcblx0ICAgICAgICBjb25zdCBhbmNob3IgPSBuZWVkc19hbmNob3Jcblx0ICAgICAgICAgICAgPyBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fYW5jaG9yYClcblx0ICAgICAgICAgICAgOiAodGhpcy5uZXh0ICYmIHRoaXMubmV4dC52YXIpIHx8ICdudWxsJztcblx0ICAgICAgICBjb25zdCBoYXNfZWxzZSA9ICEodGhpcy5icmFuY2hlc1t0aGlzLmJyYW5jaGVzLmxlbmd0aCAtIDFdLmNvbmRpdGlvbik7XG5cdCAgICAgICAgY29uc3QgaWZfZXhpc3RzX2NvbmRpdGlvbiA9IGhhc19lbHNlID8gbnVsbCA6IG5hbWU7XG5cdCAgICAgICAgY29uc3QgZHluYW1pYyA9IHRoaXMuYnJhbmNoZXNbMF0uYmxvY2suaGFzX3VwZGF0ZV9tZXRob2Q7IC8vIGNhbiB1c2UgWzBdIGFzIHByb3h5IGZvciBhbGwsIHNpbmNlIHRoZXkgbmVjZXNzYXJpbHkgaGF2ZSB0aGUgc2FtZSB2YWx1ZVxuXHQgICAgICAgIGNvbnN0IGhhc19pbnRyb3MgPSB0aGlzLmJyYW5jaGVzWzBdLmJsb2NrLmhhc19pbnRyb19tZXRob2Q7XG5cdCAgICAgICAgY29uc3QgaGFzX291dHJvcyA9IHRoaXMuYnJhbmNoZXNbMF0uYmxvY2suaGFzX291dHJvX21ldGhvZDtcblx0ICAgICAgICBjb25zdCBoYXNfdHJhbnNpdGlvbnMgPSBoYXNfaW50cm9zIHx8IGhhc19vdXRyb3M7XG5cdCAgICAgICAgY29uc3QgdmFycyA9IHsgbmFtZSwgYW5jaG9yLCBpZl9leGlzdHNfY29uZGl0aW9uLCBoYXNfZWxzZSwgaGFzX3RyYW5zaXRpb25zIH07XG5cdCAgICAgICAgY29uc3QgZGV0YWNoaW5nID0gcGFyZW50X25vZGUgJiYgIWlzX2hlYWQocGFyZW50X25vZGUpID8gbnVsbCA6ICdkZXRhY2hpbmcnO1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUuZWxzZSkge1xuXHQgICAgICAgICAgICB0aGlzLmJyYW5jaGVzLmZvckVhY2goYnJhbmNoID0+IHtcblx0ICAgICAgICAgICAgICAgIGlmIChicmFuY2guc25pcHBldClcblx0ICAgICAgICAgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUoYnJhbmNoLmNvbmRpdGlvbik7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBpZiAoaGFzX291dHJvcykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJfY29tcG91bmRfd2l0aF9vdXRyb3MoYmxvY2ssIHBhcmVudF9ub2RlLCBwYXJlbnRfbm9kZXMsIGR5bmFtaWMsIHZhcnMsIGRldGFjaGluZyk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3Mub3V0cm8ucHVzaChiIGBAdHJhbnNpdGlvbl9vdXQoJHtuYW1lfSk7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcl9jb21wb3VuZChibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2RlcywgZHluYW1pYywgdmFycywgZGV0YWNoaW5nKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJfc2ltcGxlKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzLCBkeW5hbWljLCB2YXJzLCBkZXRhY2hpbmcpO1xuXHQgICAgICAgICAgICBpZiAoaGFzX291dHJvcykge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgQHRyYW5zaXRpb25fb3V0KCR7bmFtZX0pO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpZl9leGlzdHNfY29uZGl0aW9uKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGBpZiAoJHtpZl9leGlzdHNfY29uZGl0aW9ufSkgJHtuYW1lfS5jKCk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuY3JlYXRlLnB1c2goYiBgJHtuYW1lfS5jKCk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChwYXJlbnRfbm9kZXMgJiYgdGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGUpIHtcblx0ICAgICAgICAgICAgaWYgKGlmX2V4aXN0c19jb25kaXRpb24pIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYGlmICgke2lmX2V4aXN0c19jb25kaXRpb259KSAke25hbWV9LmwoJHtwYXJlbnRfbm9kZXN9KTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYCR7bmFtZX0ubCgke3BhcmVudF9ub2Rlc30pO2ApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChoYXNfaW50cm9zIHx8IGhhc19vdXRyb3MpIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmludHJvLnB1c2goYiBgQHRyYW5zaXRpb25faW4oJHtuYW1lfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChuZWVkc19hbmNob3IpIHtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX2VsZW1lbnQoYW5jaG9yLCB4IGBAZW1wdHkoKWAsIHBhcmVudF9ub2RlcyAmJiB4IGBAZW1wdHkoKWAsIHBhcmVudF9ub2RlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5icmFuY2hlcy5mb3JFYWNoKGJyYW5jaCA9PiB7XG5cdCAgICAgICAgICAgIGJyYW5jaC5mcmFnbWVudC5yZW5kZXIoYnJhbmNoLmJsb2NrLCBudWxsLCB4IGAjbm9kZXNgKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcl9jb21wb3VuZChibG9jaywgcGFyZW50X25vZGUsIF9wYXJlbnRfbm9kZXMsIGR5bmFtaWMsIHsgbmFtZSwgYW5jaG9yLCBoYXNfZWxzZSwgaWZfZXhpc3RzX2NvbmRpdGlvbiwgaGFzX3RyYW5zaXRpb25zIH0sIGRldGFjaGluZykge1xuXHQgICAgICAgIGNvbnN0IHNlbGVjdF9ibG9ja190eXBlID0gdGhpcy5yZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGBzZWxlY3RfYmxvY2tfdHlwZWApO1xuXHQgICAgICAgIGNvbnN0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgY3VycmVudF9ibG9ja190eXBlYCk7XG5cdCAgICAgICAgY29uc3QgZ2V0X2Jsb2NrID0gaGFzX2Vsc2Vcblx0ICAgICAgICAgICAgPyB4IGAke2N1cnJlbnRfYmxvY2tfdHlwZX0oI2N0eClgXG5cdCAgICAgICAgICAgIDogeCBgJHtjdXJyZW50X2Jsb2NrX3R5cGV9ICYmICR7Y3VycmVudF9ibG9ja190eXBlfSgjY3R4KWA7XG5cdCAgICAgICAgaWYgKHRoaXMubmVlZHNfdXBkYXRlKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRcdGZ1bmN0aW9uICR7c2VsZWN0X2Jsb2NrX3R5cGV9KCNjdHgsICNkaXJ0eSkge1xuXHRcdFx0XHRcdCR7dGhpcy5icmFuY2hlcy5tYXAoKHsgZGVwZW5kZW5jaWVzLCBjb25kaXRpb24sIHNuaXBwZXQsIGJsb2NrIH0pID0+IGNvbmRpdGlvblxuICAgICAgICAgICAgICAgID8gYiBgXG5cdFx0XHRcdFx0JHtzbmlwcGV0ICYmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGIgYGlmICgke2NvbmRpdGlvbn0gPT0gbnVsbCB8fCAke2Jsb2NrLnJlbmRlcmVyLmRpcnR5KGRlcGVuZGVuY2llcyl9KSAke2NvbmRpdGlvbn0gPSAhISR7c25pcHBldH1gXG4gICAgICAgICAgICAgICAgICAgIDogYiBgaWYgKCR7Y29uZGl0aW9ufSA9PSBudWxsKSAke2NvbmRpdGlvbn0gPSAhISR7c25pcHBldH1gKX1cblx0XHRcdFx0XHRpZiAoJHtjb25kaXRpb259KSByZXR1cm4gJHtibG9jay5uYW1lfTtgXG4gICAgICAgICAgICAgICAgOiBiIGByZXR1cm4gJHtibG9jay5uYW1lfTtgKX1cblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRmdW5jdGlvbiAke3NlbGVjdF9ibG9ja190eXBlfSgjY3R4LCAjZGlydHkpIHtcblx0XHRcdFx0XHQke3RoaXMuYnJhbmNoZXMubWFwKCh7IGNvbmRpdGlvbiwgc25pcHBldCwgYmxvY2sgfSkgPT4gY29uZGl0aW9uXG4gICAgICAgICAgICAgICAgPyBiIGBpZiAoJHtzbmlwcGV0IHx8IGNvbmRpdGlvbn0pIHJldHVybiAke2Jsb2NrLm5hbWV9O2BcbiAgICAgICAgICAgICAgICA6IGIgYHJldHVybiAke2Jsb2NrLm5hbWV9O2ApfVxuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdGxldCAke2N1cnJlbnRfYmxvY2tfdHlwZX0gPSAke3NlbGVjdF9ibG9ja190eXBlfSgjY3R4LCAke3RoaXMuZ2V0X2luaXRpYWxfZGlydHlfYml0KCl9KTtcblx0XHRcdGxldCAke25hbWV9ID0gJHtnZXRfYmxvY2t9O1xuXHRcdGApO1xuXHQgICAgICAgIGNvbnN0IGluaXRpYWxfbW91bnRfbm9kZSA9IHBhcmVudF9ub2RlIHx8ICcjdGFyZ2V0Jztcblx0ICAgICAgICBjb25zdCBhbmNob3Jfbm9kZSA9IHBhcmVudF9ub2RlID8gJ251bGwnIDogJyNhbmNob3InO1xuXHQgICAgICAgIGlmIChpZl9leGlzdHNfY29uZGl0aW9uKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYGlmICgke2lmX2V4aXN0c19jb25kaXRpb259KSAke25hbWV9Lm0oJHtpbml0aWFsX21vdW50X25vZGV9LCAke2FuY2hvcl9ub2RlfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MubW91bnQucHVzaChiIGAke25hbWV9Lm0oJHtpbml0aWFsX21vdW50X25vZGV9LCAke2FuY2hvcl9ub2RlfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLm5lZWRzX3VwZGF0ZSkge1xuXHQgICAgICAgICAgICBjb25zdCB1cGRhdGVfbW91bnRfbm9kZSA9IHRoaXMuZ2V0X3VwZGF0ZV9tb3VudF9ub2RlKGFuY2hvcik7XG5cdCAgICAgICAgICAgIGNvbnN0IGNoYW5nZV9ibG9jayA9IGIgYFxuXHRcdFx0XHQke2lmX2V4aXN0c19jb25kaXRpb24gPyBiIGBpZiAoJHtpZl9leGlzdHNfY29uZGl0aW9ufSkgJHtuYW1lfS5kKDEpYCA6IGIgYCR7bmFtZX0uZCgxKWB9O1xuXHRcdFx0XHQke25hbWV9ID0gJHtnZXRfYmxvY2t9O1xuXHRcdFx0XHRpZiAoJHtuYW1lfSkge1xuXHRcdFx0XHRcdCR7bmFtZX0uYygpO1xuXHRcdFx0XHRcdCR7aGFzX3RyYW5zaXRpb25zICYmIGIgYEB0cmFuc2l0aW9uX2luKCR7bmFtZX0sIDEpO2B9XG5cdFx0XHRcdFx0JHtuYW1lfS5tKCR7dXBkYXRlX21vdW50X25vZGV9LCAke2FuY2hvcn0pO1xuXHRcdFx0XHR9XG5cdFx0XHRgO1xuXHQgICAgICAgICAgICBpZiAoZHluYW1pYykge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdGlmICgke2N1cnJlbnRfYmxvY2tfdHlwZX0gPT09ICgke2N1cnJlbnRfYmxvY2tfdHlwZX0gPSAke3NlbGVjdF9ibG9ja190eXBlfSgjY3R4LCAjZGlydHkpKSAmJiAke25hbWV9KSB7XG5cdFx0XHRcdFx0XHQke25hbWV9LnAoI2N0eCwgI2RpcnR5KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JHtjaGFuZ2VfYmxvY2t9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0XHRpZiAoJHtjdXJyZW50X2Jsb2NrX3R5cGV9ICE9PSAoJHtjdXJyZW50X2Jsb2NrX3R5cGV9ID0gJHtzZWxlY3RfYmxvY2tfdHlwZX0oI2N0eCwgI2RpcnR5KSkpIHtcblx0XHRcdFx0XHRcdCR7Y2hhbmdlX2Jsb2NrfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuXHQgICAgICAgICAgICBpZiAoaWZfZXhpc3RzX2NvbmRpdGlvbikge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYGlmICgke2lmX2V4aXN0c19jb25kaXRpb259KSAke25hbWV9LnAoI2N0eCwgI2RpcnR5KTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGAke25hbWV9LnAoI2N0eCwgI2RpcnR5KTtgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaWZfZXhpc3RzX2NvbmRpdGlvbikge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtpZl9leGlzdHNfY29uZGl0aW9ufSkge1xuXHRcdFx0XHRcdCR7bmFtZX0uZCgke2RldGFjaGluZ30pO1xuXHRcdFx0XHR9XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgXG5cdFx0XHRcdCR7bmFtZX0uZCgke2RldGFjaGluZ30pO1xuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgLy8gaWYgYW55IG9mIHRoZSBzaWJsaW5ncyBoYXZlIG91dHJvcywgd2UgbmVlZCB0byBrZWVwIHJlZmVyZW5jZXMgdG8gdGhlIGJsb2Nrc1xuXHQgICAgLy8gKFRPRE8gZG9lcyB0aGlzIG9ubHkgYXBwbHkgdG8gYmlkaSB0cmFuc2l0aW9ucz8pXG5cdCAgICByZW5kZXJfY29tcG91bmRfd2l0aF9vdXRyb3MoYmxvY2ssIHBhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzLCBkeW5hbWljLCB7IG5hbWUsIGFuY2hvciwgaGFzX2Vsc2UsIGhhc190cmFuc2l0aW9ucywgaWZfZXhpc3RzX2NvbmRpdGlvbiB9LCBkZXRhY2hpbmcpIHtcblx0ICAgICAgICBjb25zdCBzZWxlY3RfYmxvY2tfdHlwZSA9IHRoaXMucmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgc2VsZWN0X2Jsb2NrX3R5cGVgKTtcblx0ICAgICAgICBjb25zdCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleGApO1xuXHQgICAgICAgIGNvbnN0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGBwcmV2aW91c19ibG9ja19pbmRleGApO1xuXHQgICAgICAgIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGBpZl9ibG9ja19jcmVhdG9yc2ApO1xuXHQgICAgICAgIGNvbnN0IGlmX2Jsb2NrcyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgaWZfYmxvY2tzYCk7XG5cdCAgICAgICAgY29uc3QgaWZfY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gaGFzX2Vsc2Vcblx0ICAgICAgICAgICAgPyBub2RlcyA9PiBub2Rlc1xuXHQgICAgICAgICAgICA6IG5vZGVzID0+IGIgYGlmICh+JHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9KSB7ICR7bm9kZXN9IH1gO1xuXHQgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpO1xuXHQgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShuYW1lKTtcblx0ICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0Y29uc3QgJHtpZl9ibG9ja19jcmVhdG9yc30gPSBbXG5cdFx0XHRcdCR7dGhpcy5icmFuY2hlcy5tYXAoYnJhbmNoID0+IGJyYW5jaC5ibG9jay5uYW1lKX1cblx0XHRcdF07XG5cblx0XHRcdGNvbnN0ICR7aWZfYmxvY2tzfSA9IFtdO1xuXG5cdFx0XHQke3RoaXMubmVlZHNfdXBkYXRlXG4gICAgICAgICAgICA/IGIgYFxuXHRcdFx0XHRcdGZ1bmN0aW9uICR7c2VsZWN0X2Jsb2NrX3R5cGV9KCNjdHgsICNkaXJ0eSkge1xuXHRcdFx0XHRcdFx0JHt0aGlzLmJyYW5jaGVzLm1hcCgoeyBkZXBlbmRlbmNpZXMsIGNvbmRpdGlvbiwgc25pcHBldCB9LCBpKSA9PiBjb25kaXRpb25cbiAgICAgICAgICAgICAgICA/IGIgYFxuXHRcdFx0XHRcdFx0JHtzbmlwcGV0ICYmIChkZXBlbmRlbmNpZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGIgYGlmICgke2Jsb2NrLnJlbmRlcmVyLmRpcnR5KGRlcGVuZGVuY2llcyl9KSAke2NvbmRpdGlvbn0gPSAhISR7c25pcHBldH1gXG4gICAgICAgICAgICAgICAgICAgIDogYiBgaWYgKCR7Y29uZGl0aW9ufSA9PSBudWxsKSAke2NvbmRpdGlvbn0gPSAhISR7c25pcHBldH1gKX1cblx0XHRcdFx0XHRcdGlmICgke2NvbmRpdGlvbn0pIHJldHVybiAke2l9O2BcbiAgICAgICAgICAgICAgICA6IGIgYHJldHVybiAke2l9O2ApfVxuXHRcdFx0XHRcdFx0JHshaGFzX2Vsc2UgJiYgYiBgcmV0dXJuIC0xO2B9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgXG4gICAgICAgICAgICA6IGIgYFxuXHRcdFx0XHRcdGZ1bmN0aW9uICR7c2VsZWN0X2Jsb2NrX3R5cGV9KCNjdHgsICNkaXJ0eSkge1xuXHRcdFx0XHRcdFx0JHt0aGlzLmJyYW5jaGVzLm1hcCgoeyBjb25kaXRpb24sIHNuaXBwZXQgfSwgaSkgPT4gY29uZGl0aW9uXG4gICAgICAgICAgICAgICAgPyBiIGBpZiAoJHtzbmlwcGV0IHx8IGNvbmRpdGlvbn0pIHJldHVybiAke2l9O2BcbiAgICAgICAgICAgICAgICA6IGIgYHJldHVybiAke2l9O2ApfVxuXHRcdFx0XHRcdFx0JHshaGFzX2Vsc2UgJiYgYiBgcmV0dXJuIC0xO2B9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgfVxuXHRcdGApO1xuXHQgICAgICAgIGlmIChoYXNfZWxzZSkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHQke2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH0gPSAke3NlbGVjdF9ibG9ja190eXBlfSgjY3R4LCAke3RoaXMuZ2V0X2luaXRpYWxfZGlydHlfYml0KCl9KTtcblx0XHRcdFx0JHtuYW1lfSA9ICR7aWZfYmxvY2tzfVske2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH1dID0gJHtpZl9ibG9ja19jcmVhdG9yc31bJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9XSgjY3R4KTtcblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdFx0aWYgKH4oJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9ID0gJHtzZWxlY3RfYmxvY2tfdHlwZX0oI2N0eCwgJHt0aGlzLmdldF9pbml0aWFsX2RpcnR5X2JpdCgpfSkpKSB7XG5cdFx0XHRcdFx0JHtuYW1lfSA9ICR7aWZfYmxvY2tzfVske2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH1dID0gJHtpZl9ibG9ja19jcmVhdG9yc31bJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9XSgjY3R4KTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGluaXRpYWxfbW91bnRfbm9kZSA9IHBhcmVudF9ub2RlIHx8ICcjdGFyZ2V0Jztcblx0ICAgICAgICBjb25zdCBhbmNob3Jfbm9kZSA9IHBhcmVudF9ub2RlID8gJ251bGwnIDogJyNhbmNob3InO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGlmX2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleChiIGAke2lmX2Jsb2Nrc31bJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9XS5tKCR7aW5pdGlhbF9tb3VudF9ub2RlfSwgJHthbmNob3Jfbm9kZX0pO2ApKTtcblx0ICAgICAgICBpZiAodGhpcy5uZWVkc191cGRhdGUpIHtcblx0ICAgICAgICAgICAgY29uc3QgdXBkYXRlX21vdW50X25vZGUgPSB0aGlzLmdldF91cGRhdGVfbW91bnRfbm9kZShhbmNob3IpO1xuXHQgICAgICAgICAgICBjb25zdCBkZXN0cm95X29sZF9ibG9jayA9IGIgYFxuXHRcdFx0XHRAZ3JvdXBfb3V0cm9zKCk7XG5cdFx0XHRcdEB0cmFuc2l0aW9uX291dCgke2lmX2Jsb2Nrc31bJHtwcmV2aW91c19ibG9ja19pbmRleH1dLCAxLCAxLCAoKSA9PiB7XG5cdFx0XHRcdFx0JHtpZl9ibG9ja3N9WyR7cHJldmlvdXNfYmxvY2tfaW5kZXh9XSA9IG51bGw7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRAY2hlY2tfb3V0cm9zKCk7XG5cdFx0XHRgO1xuXHQgICAgICAgICAgICBjb25zdCBjcmVhdGVfbmV3X2Jsb2NrID0gYiBgXG5cdFx0XHRcdCR7bmFtZX0gPSAke2lmX2Jsb2Nrc31bJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9XTtcblx0XHRcdFx0aWYgKCEke25hbWV9KSB7XG5cdFx0XHRcdFx0JHtuYW1lfSA9ICR7aWZfYmxvY2tzfVske2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH1dID0gJHtpZl9ibG9ja19jcmVhdG9yc31bJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9XSgjY3R4KTtcblx0XHRcdFx0XHQke25hbWV9LmMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQke2hhc190cmFuc2l0aW9ucyAmJiBiIGBAdHJhbnNpdGlvbl9pbigke25hbWV9LCAxKTtgfVxuXHRcdFx0XHQke25hbWV9Lm0oJHt1cGRhdGVfbW91bnRfbm9kZX0sICR7YW5jaG9yfSk7XG5cdFx0XHRgO1xuXHQgICAgICAgICAgICBjb25zdCBjaGFuZ2VfYmxvY2sgPSBoYXNfZWxzZVxuXHQgICAgICAgICAgICAgICAgPyBiIGBcblx0XHRcdFx0XHQke2Rlc3Ryb3lfb2xkX2Jsb2NrfVxuXG5cdFx0XHRcdFx0JHtjcmVhdGVfbmV3X2Jsb2NrfVxuXHRcdFx0XHRgXG5cdCAgICAgICAgICAgICAgICA6IGIgYFxuXHRcdFx0XHRcdGlmICgke25hbWV9KSB7XG5cdFx0XHRcdFx0XHQke2Rlc3Ryb3lfb2xkX2Jsb2NrfVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh+JHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9KSB7XG5cdFx0XHRcdFx0XHQke2NyZWF0ZV9uZXdfYmxvY2t9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdCR7bmFtZX0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YDtcblx0ICAgICAgICAgICAgaWYgKGR5bmFtaWMpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0XHRsZXQgJHtwcmV2aW91c19ibG9ja19pbmRleH0gPSAke2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH07XG5cdFx0XHRcdFx0JHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9ID0gJHtzZWxlY3RfYmxvY2tfdHlwZX0oI2N0eCwgI2RpcnR5KTtcblx0XHRcdFx0XHRpZiAoJHtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXh9ID09PSAke3ByZXZpb3VzX2Jsb2NrX2luZGV4fSkge1xuXHRcdFx0XHRcdFx0JHtpZl9jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgoYiBgJHtpZl9ibG9ja3N9WyR7Y3VycmVudF9ibG9ja190eXBlX2luZGV4fV0ucCgjY3R4LCAjZGlydHkpO2ApfVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQke2NoYW5nZV9ibG9ja31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdGxldCAke3ByZXZpb3VzX2Jsb2NrX2luZGV4fSA9ICR7Y3VycmVudF9ibG9ja190eXBlX2luZGV4fTtcblx0XHRcdFx0XHQke2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH0gPSAke3NlbGVjdF9ibG9ja190eXBlfSgjY3R4LCAjZGlydHkpO1xuXHRcdFx0XHRcdGlmICgke2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleH0gIT09ICR7cHJldmlvdXNfYmxvY2tfaW5kZXh9KSB7XG5cdFx0XHRcdFx0XHQke2NoYW5nZV9ibG9ja31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGR5bmFtaWMpIHtcblx0ICAgICAgICAgICAgaWYgKGlmX2V4aXN0c19jb25kaXRpb24pIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBpZiAoJHtpZl9leGlzdHNfY29uZGl0aW9ufSkgJHtuYW1lfS5wKCNjdHgsICNkaXJ0eSk7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgJHtuYW1lfS5wKCNjdHgsICNkaXJ0eSk7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChpZl9jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgoYiBgJHtpZl9ibG9ja3N9WyR7Y3VycmVudF9ibG9ja190eXBlX2luZGV4fV0uZCgke2RldGFjaGluZ30pO2ApKTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcl9zaW1wbGUoYmxvY2ssIHBhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzLCBkeW5hbWljLCB7IG5hbWUsIGFuY2hvciwgaWZfZXhpc3RzX2NvbmRpdGlvbiwgaGFzX3RyYW5zaXRpb25zIH0sIGRldGFjaGluZykge1xuXHQgICAgICAgIGNvbnN0IGJyYW5jaCA9IHRoaXMuYnJhbmNoZXNbMF07XG5cdCAgICAgICAgaWYgKGJyYW5jaC5zbmlwcGV0KVxuXHQgICAgICAgICAgICBibG9jay5hZGRfdmFyaWFibGUoYnJhbmNoLmNvbmRpdGlvbiwgYnJhbmNoLnNuaXBwZXQpO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRsZXQgJHtuYW1lfSA9ICR7YnJhbmNoLmNvbmRpdGlvbn0gJiYgJHticmFuY2guYmxvY2submFtZX0oI2N0eCk7XG5cdFx0YCk7XG5cdCAgICAgICAgY29uc3QgaW5pdGlhbF9tb3VudF9ub2RlID0gcGFyZW50X25vZGUgfHwgJyN0YXJnZXQnO1xuXHQgICAgICAgIGNvbnN0IGFuY2hvcl9ub2RlID0gcGFyZW50X25vZGUgPyAnbnVsbCcgOiAnI2FuY2hvcic7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgaWYgKCR7bmFtZX0pICR7bmFtZX0ubSgke2luaXRpYWxfbW91bnRfbm9kZX0sICR7YW5jaG9yX25vZGV9KTtgKTtcblx0ICAgICAgICBpZiAoYnJhbmNoLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHVwZGF0ZV9tb3VudF9ub2RlID0gdGhpcy5nZXRfdXBkYXRlX21vdW50X25vZGUoYW5jaG9yKTtcblx0ICAgICAgICAgICAgY29uc3QgZW50ZXIgPSBiIGBcblx0XHRcdFx0aWYgKCR7bmFtZX0pIHtcblx0XHRcdFx0XHQke2R5bmFtaWMgJiYgYiBgJHtuYW1lfS5wKCNjdHgsICNkaXJ0eSk7YH1cblx0XHRcdFx0XHQke2hhc190cmFuc2l0aW9ucyAmJlxuICAgICAgICAgICAgICAgIGIgYGlmICgke2Jsb2NrLnJlbmRlcmVyLmRpcnR5KGJyYW5jaC5kZXBlbmRlbmNpZXMpfSkge1xuXHRcdFx0XHRcdFx0XHRAdHJhbnNpdGlvbl9pbigke25hbWV9LCAxKTtcblx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCR7bmFtZX0gPSAke2JyYW5jaC5ibG9jay5uYW1lfSgjY3R4KTtcblx0XHRcdFx0XHQke25hbWV9LmMoKTtcblx0XHRcdFx0XHQke2hhc190cmFuc2l0aW9ucyAmJiBiIGBAdHJhbnNpdGlvbl9pbigke25hbWV9LCAxKTtgfVxuXHRcdFx0XHRcdCR7bmFtZX0ubSgke3VwZGF0ZV9tb3VudF9ub2RlfSwgJHthbmNob3J9KTtcblx0XHRcdFx0fVxuXHRcdFx0YDtcblx0ICAgICAgICAgICAgaWYgKGJyYW5jaC5zbmlwcGV0KSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgaWYgKCR7YmxvY2sucmVuZGVyZXIuZGlydHkoYnJhbmNoLmRlcGVuZGVuY2llcyl9KSAke2JyYW5jaC5jb25kaXRpb259ID0gJHticmFuY2guc25pcHBldH1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBubyBgcCgpYCBoZXJlIOKAlCB3ZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBvdXRyb2luZyBub2Rlcyxcblx0ICAgICAgICAgICAgLy8gYXMgdGhhdCB3aWxsIHR5cGljYWxseSByZXN1bHQgaW4gZ2xpdGNoaW5nXG5cdCAgICAgICAgICAgIGlmIChicmFuY2guYmxvY2suaGFzX291dHJvX21ldGhvZCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdGlmICgke2JyYW5jaC5jb25kaXRpb259KSB7XG5cdFx0XHRcdFx0XHQke2VudGVyfVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoJHtuYW1lfSkge1xuXHRcdFx0XHRcdFx0QGdyb3VwX291dHJvcygpO1xuXHRcdFx0XHRcdFx0QHRyYW5zaXRpb25fb3V0KCR7bmFtZX0sIDEsIDEsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0JHtuYW1lfSA9IG51bGw7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdEBjaGVja19vdXRyb3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdGlmICgke2JyYW5jaC5jb25kaXRpb259KSB7XG5cdFx0XHRcdFx0XHQke2VudGVyfVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoJHtuYW1lfSkge1xuXHRcdFx0XHRcdFx0JHtuYW1lfS5kKDEpO1xuXHRcdFx0XHRcdFx0JHtuYW1lfSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy51cGRhdGUucHVzaChiIGBcblx0XHRcdFx0aWYgKCR7YnJhbmNoLmNvbmRpdGlvbn0pICR7bmFtZX0ucCgjY3R4LCAjZGlydHkpO1xuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpZl9leGlzdHNfY29uZGl0aW9uKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgXG5cdFx0XHRcdGlmICgke2lmX2V4aXN0c19jb25kaXRpb259KSAke25hbWV9LmQoJHtkZXRhY2hpbmd9KTtcblx0XHRcdGApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmRlc3Ryb3kucHVzaChiIGBcblx0XHRcdFx0JHtuYW1lfS5kKCR7ZGV0YWNoaW5nfSk7XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBnZXRfaW5pdGlhbF9kaXJ0eV9iaXQoKSB7XG5cdCAgICAgICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIC8vIFRPRE86IGNvbnRleHQtb3ZlcmZsb3cgbWFrZSBpdCBsZXNzIGdyb3NzXG5cdCAgICAgICAgY29uc3QgdmFsID0geCBgLTFgO1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGdldCB0eXBlKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcmVyLmNvbnRleHRfb3ZlcmZsb3cgPyAnQXJyYXlFeHByZXNzaW9uJyA6ICdVbmFyeUV4cHJlc3Npb24nO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAvLyBhcyBbLTFdXG5cdCAgICAgICAgICAgIGVsZW1lbnRzOiBbdmFsXSxcblx0ICAgICAgICAgICAgLy8gYXMgLTFcblx0ICAgICAgICAgICAgb3BlcmF0b3I6IHZhbC5vcGVyYXRvcixcblx0ICAgICAgICAgICAgcHJlZml4OiB2YWwucHJlZml4LFxuXHQgICAgICAgICAgICBhcmd1bWVudDogdmFsLmFyZ3VtZW50LFxuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBJbmxpbmVDb21wb25lbnRXcmFwcGVyIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKSB7XG5cdCAgICAgICAgc3VwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpO1xuXHQgICAgICAgIHRoaXMuc2xvdHMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgdGhpcy5jYW5ub3RfdXNlX2lubmVyaHRtbCgpO1xuXHQgICAgICAgIHRoaXMubm90X3N0YXRpY19jb250ZW50KCk7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF9kZXBlbmRlbmNpZXModGhpcy5ub2RlLmV4cHJlc3Npb24uZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5ub2RlLmF0dHJpYnV0ZXMuZm9yRWFjaChhdHRyID0+IHtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyhhdHRyLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5ub2RlLmJpbmRpbmdzLmZvckVhY2goYmluZGluZyA9PiB7XG5cdCAgICAgICAgICAgIGlmIChiaW5kaW5nLmlzX2NvbnRleHR1YWwpIHtcblx0ICAgICAgICAgICAgICAgIG1hcmtfZWFjaF9ibG9ja19iaW5kaW5ncyh0aGlzLCBiaW5kaW5nKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKGJpbmRpbmcuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMubm9kZS5oYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuXHQgICAgICAgICAgICBpZiAoaGFuZGxlci5leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5hZGRfZGVwZW5kZW5jaWVzKGhhbmRsZXIuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy52YXIgPSB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgbmFtZTogKHRoaXMubm9kZS5uYW1lID09PSAnc3ZlbHRlOnNlbGYnID8gcmVuZGVyZXIuY29tcG9uZW50Lm5hbWUubmFtZSA6XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5vZGUubmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnID8gJ3N3aXRjaF9pbnN0YW5jZScgOlxuXHQgICAgICAgICAgICAgICAgICAgIHNhbml0aXplKHRoaXMubm9kZS5uYW1lKSkudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLmxldHMuZm9yRWFjaChsID0+IHtcblx0ICAgICAgICAgICAgICAgIGV4dHJhY3RfbmFtZXMobC52YWx1ZSB8fCBsLm5hbWUpLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3RvX2NvbnRleHQobmFtZSwgdHJ1ZSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRfc2xvdCA9IGJsb2NrLmNoaWxkKHtcblx0ICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGNyZWF0ZV9kZWJ1Z2dpbmdfY29tbWVudChub2RlLCByZW5kZXJlci5jb21wb25lbnQpLFxuXHQgICAgICAgICAgICAgICAgbmFtZTogcmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgY3JlYXRlX2RlZmF1bHRfc2xvdGApLFxuXHQgICAgICAgICAgICAgICAgdHlwZTogJ3Nsb3QnXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmJsb2Nrcy5wdXNoKGRlZmF1bHRfc2xvdCk7XG5cdCAgICAgICAgICAgIHRoaXMuc2xvdHMuc2V0KCdkZWZhdWx0JywgZ2V0X3Nsb3RfZGVmaW5pdGlvbihkZWZhdWx0X3Nsb3QsIHRoaXMubm9kZS5zY29wZSwgdGhpcy5ub2RlLmxldHMpKTtcblx0ICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IG5ldyBGcmFnbWVudFdyYXBwZXIocmVuZGVyZXIsIGRlZmF1bHRfc2xvdCwgbm9kZS5jaGlsZHJlbiwgdGhpcywgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAvLyBUT0RPIGlzIHRoaXMgZmlsdGVyaW5nIG5lY2Vzc2FyeT8gKEkgKnRoaW5rKiBzbylcblx0ICAgICAgICAgICAgZGVmYXVsdF9zbG90LmRlcGVuZGVuY2llcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5vZGUuc2NvcGUuaXNfbGV0KG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZF9kZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suYWRkX291dHJvKCk7XG5cdCAgICB9XG5cdCAgICB3YXJuX2lmX3JlYWN0aXZlKCkge1xuXHQgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gdGhpcy5ub2RlO1xuXHQgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy5yZW5kZXJlci5jb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgaWYgKCF2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh2YXJpYWJsZS5yZWFzc2lnbmVkIHx8IHZhcmlhYmxlLmV4cG9ydF9uYW1lIHx8IHZhcmlhYmxlLmlzX3JlYWN0aXZlX2RlcGVuZGVuY3kpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5jb21wb25lbnQud2Fybih0aGlzLm5vZGUsIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6ICdyZWFjdGl2ZS1jb21wb25lbnQnLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYDwke25hbWV9Lz4gd2lsbCBub3QgYmUgcmVhY3RpdmUgaWYgJHtuYW1lfSBjaGFuZ2VzLiBVc2UgPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17JHtuYW1lfX0vPiBpZiB5b3Ugd2FudCB0aGlzIHJlYWN0aXZpdHkuYCxcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgdGhpcy53YXJuX2lmX3JlYWN0aXZlKCk7XG5cdCAgICAgICAgY29uc3QgeyByZW5kZXJlciB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCB7IGNvbXBvbmVudCB9ID0gcmVuZGVyZXI7XG5cdCAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMudmFyO1xuXHQgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShuYW1lKTtcblx0ICAgICAgICBjb25zdCBjb21wb25lbnRfb3B0cyA9IHggYHt9YDtcblx0ICAgICAgICBjb25zdCBzdGF0ZW1lbnRzID0gW107XG5cdCAgICAgICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuXHQgICAgICAgIGlmICh0aGlzLmZyYWdtZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoJyQkc2NvcGUnLCB0cnVlKTtcblx0ICAgICAgICAgICAgY29uc3QgZGVmYXVsdF9zbG90ID0gdGhpcy5zbG90cy5nZXQoJ2RlZmF1bHQnKTtcblx0ICAgICAgICAgICAgdGhpcy5mcmFnbWVudC5ub2Rlcy5mb3JFYWNoKChjaGlsZCkgPT4ge1xuXHQgICAgICAgICAgICAgICAgY2hpbGQucmVuZGVyKGRlZmF1bHRfc2xvdC5ibG9jaywgbnVsbCwgeCBgI25vZGVzYCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBsZXQgcHJvcHM7XG5cdCAgICAgICAgY29uc3QgbmFtZV9jaGFuZ2VzID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke25hbWUubmFtZX1fY2hhbmdlc2ApO1xuXHQgICAgICAgIGNvbnN0IHVzZXNfc3ByZWFkID0gISF0aGlzLm5vZGUuYXR0cmlidXRlcy5maW5kKGEgPT4gYS5pc19zcHJlYWQpO1xuXHQgICAgICAgIC8vIHJlbW92aW5nIGVtcHR5IHNsb3Rcblx0ICAgICAgICBmb3IgKGNvbnN0IHNsb3Qgb2YgdGhpcy5zbG90cy5rZXlzKCkpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLnNsb3RzLmdldChzbG90KS5ibG9jay5oYXNfY29udGVudCgpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZV9ibG9jayh0aGlzLnNsb3RzLmdldChzbG90KS5ibG9jayk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNsb3RzLmRlbGV0ZShzbG90KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBpbml0aWFsX3Byb3BzID0gdGhpcy5zbG90cy5zaXplID4gMFxuXHQgICAgICAgICAgICA/IFtcblx0ICAgICAgICAgICAgICAgIHAgYCQkc2xvdHM6IHtcblx0XHRcdFx0XHQke0FycmF5LmZyb20odGhpcy5zbG90cykubWFwKChbbmFtZSwgc2xvdF0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAgYCR7bmFtZX06IFske3Nsb3QuYmxvY2submFtZX0sICR7c2xvdC5nZXRfY29udGV4dCB8fCBudWxsfSwgJHtzbG90LmdldF9jaGFuZ2VzIHx8IG51bGx9XWA7XG4gICAgICAgICAgICAgICAgfSl9XG5cdFx0XHRcdH1gLFxuXHQgICAgICAgICAgICAgICAgcCBgJCRzY29wZToge1xuXHRcdFx0XHRcdGN0eDogI2N0eFxuXHRcdFx0XHR9YFxuXHQgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIDogW107XG5cdCAgICAgICAgY29uc3QgYXR0cmlidXRlX29iamVjdCA9IHVzZXNfc3ByZWFkXG5cdCAgICAgICAgICAgID8geCBgeyAke2luaXRpYWxfcHJvcHN9IH1gXG5cdCAgICAgICAgICAgIDogeCBge1xuXHRcdFx0XHQke3RoaXMubm9kZS5hdHRyaWJ1dGVzLm1hcChhdHRyID0+IHAgYCR7YXR0ci5uYW1lfTogJHthdHRyLmdldF92YWx1ZShibG9jayl9YCl9LFxuXHRcdFx0XHQke2luaXRpYWxfcHJvcHN9XG5cdFx0XHR9YDtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLmF0dHJpYnV0ZXMubGVuZ3RoIHx8IHRoaXMubm9kZS5iaW5kaW5ncy5sZW5ndGggfHwgaW5pdGlhbF9wcm9wcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgaWYgKCF1c2VzX3NwcmVhZCAmJiB0aGlzLm5vZGUuYmluZGluZ3MubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnRfb3B0cy5wcm9wZXJ0aWVzLnB1c2gocCBgcHJvcHM6ICR7YXR0cmlidXRlX29iamVjdH1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHByb3BzID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke25hbWUubmFtZX1fcHJvcHNgKTtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudF9vcHRzLnByb3BlcnRpZXMucHVzaChwIGBwcm9wczogJHtwcm9wc31gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgLy8gVE9ETyB0aGlzIGlzIGEgdGVycmlibGUgaGFjaywgYnV0IHdpdGhvdXQgaXQgdGhlIGNvbXBvbmVudFxuXHQgICAgICAgICAgICAvLyB3aWxsIGNvbXBsYWluIHRoYXQgb3B0aW9ucy50YXJnZXQgaXMgbWlzc2luZy4gVGhpcyB3b3VsZFxuXHQgICAgICAgICAgICAvLyB3b3JrIGJldHRlciBpZiBjb21wb25lbnRzIGhhZCBzZXBhcmF0ZSBwdWJsaWMgYW5kIHByaXZhdGVcblx0ICAgICAgICAgICAgLy8gQVBJc1xuXHQgICAgICAgICAgICBjb21wb25lbnRfb3B0cy5wcm9wZXJ0aWVzLnB1c2gocCBgJCRpbmxpbmU6IHRydWVgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgZnJhZ21lbnRfZGVwZW5kZW5jaWVzID0gbmV3IFNldCh0aGlzLmZyYWdtZW50ID8gWyckJHNjb3BlJ10gOiBbXSk7XG5cdCAgICAgICAgdGhpcy5zbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuXHQgICAgICAgICAgICBzbG90LmJsb2NrLmRlcGVuZGVuY2llcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgaXNfbGV0ID0gc2xvdC5zY29wZS5pc19sZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IHJlbmRlcmVyLmNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIGlmIChpc19sZXQgfHwgaXNfZHluYW1pYyQxKHZhcmlhYmxlKSlcblx0ICAgICAgICAgICAgICAgICAgICBmcmFnbWVudF9kZXBlbmRlbmNpZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb25zdCBkeW5hbWljX2F0dHJpYnV0ZXMgPSB0aGlzLm5vZGUuYXR0cmlidXRlcy5maWx0ZXIoYSA9PiBhLmdldF9kZXBlbmRlbmNpZXMoKS5sZW5ndGggPiAwKTtcblx0ICAgICAgICBpZiAoIXVzZXNfc3ByZWFkICYmIChkeW5hbWljX2F0dHJpYnV0ZXMubGVuZ3RoID4gMCB8fCB0aGlzLm5vZGUuYmluZGluZ3MubGVuZ3RoID4gMCB8fCBmcmFnbWVudF9kZXBlbmRlbmNpZXMuc2l6ZSA+IDApKSB7XG5cdCAgICAgICAgICAgIHVwZGF0ZXMucHVzaChiIGBjb25zdCAke25hbWVfY2hhbmdlc30gPSB7fTtgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBpZiAodXNlc19zcHJlYWQpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGxldmVscyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgJHt0aGlzLnZhci5uYW1lfV9zcHJlYWRfbGV2ZWxzYCk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsX3Byb3BzID0gW107XG5cdCAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VzID0gW107XG5cdCAgICAgICAgICAgICAgICBjb25zdCBhbGxfZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5ub2RlLmF0dHJpYnV0ZXMuZm9yRWFjaChhdHRyID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBhZGRfdG9fc2V0KGFsbF9kZXBlbmRlbmNpZXMsIGF0dHIuZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5ub2RlLmF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0ciwgaSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgZGVwZW5kZW5jaWVzIH0gPSBhdHRyO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGRlcGVuZGVuY2llcy5zaXplID4gMCAmJiAoZGVwZW5kZW5jaWVzLnNpemUgIT09IGFsbF9kZXBlbmRlbmNpZXMuc2l6ZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPyByZW5kZXJlci5kaXJ0eShBcnJheS5mcm9tKGRlcGVuZGVuY2llcykpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCB1bmNoYW5nZWQgPSBkZXBlbmRlbmNpZXMuc2l6ZSA9PT0gMDtcblx0ICAgICAgICAgICAgICAgICAgICBsZXQgY2hhbmdlX29iamVjdDtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci5pc19zcHJlYWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyLmV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxfcHJvcHMucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZV9vYmplY3QgPSB2YWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIuZXhwcmVzc2lvbi5ub2RlLnR5cGUgIT09ICdPYmplY3RFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVfb2JqZWN0ID0geCBgQGdldF9zcHJlYWRfb2JqZWN0KCR7dmFsdWV9KWA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX29iamVjdCA9IHZhbHVlX29iamVjdDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHggYHsgJHtuYW1lfTogJHthdHRyLmdldF92YWx1ZShibG9jayl9IH1gO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsX3Byb3BzLnB1c2gob2JqKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX29iamVjdCA9IG9iajtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHVuY2hhbmdlZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA/IHggYCR7bGV2ZWxzfVske2l9XWBcblx0ICAgICAgICAgICAgICAgICAgICAgICAgOiBjb25kaXRpb25cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geCBgJHtjb25kaXRpb259ICYmICR7Y2hhbmdlX29iamVjdH1gXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNoYW5nZV9vYmplY3QpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRcdGNvbnN0ICR7bGV2ZWxzfSA9IFtcblx0XHRcdFx0XHRcdCR7aW5pdGlhbF9wcm9wc31cblx0XHRcdFx0XHRdO1xuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgICAgIHN0YXRlbWVudHMucHVzaChiIGBcblx0XHRcdFx0XHRmb3IgKGxldCAjaSA9IDA7ICNpIDwgJHtsZXZlbHN9Lmxlbmd0aDsgI2kgKz0gMSkge1xuXHRcdFx0XHRcdFx0JHtwcm9wc30gPSBAYXNzaWduKCR7cHJvcHN9LCAke2xldmVsc31bI2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgaWYgKGFsbF9kZXBlbmRlbmNpZXMuc2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IHJlbmRlcmVyLmRpcnR5KEFycmF5LmZyb20oYWxsX2RlcGVuZGVuY2llcykpO1xuXHQgICAgICAgICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChiIGBcblx0XHRcdFx0XHRcdGNvbnN0ICR7bmFtZV9jaGFuZ2VzfSA9ICR7Y29uZGl0aW9ufSA/IEBnZXRfc3ByZWFkX3VwZGF0ZSgke2xldmVsc30sIFtcblx0XHRcdFx0XHRcdFx0JHtjaGFuZ2VzfVxuXHRcdFx0XHRcdFx0XSkgOiB7fVxuXHRcdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGIgYFxuXHRcdFx0XHRcdFx0Y29uc3QgJHtuYW1lX2NoYW5nZXN9ID0ge307XG5cdFx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBkeW5hbWljX2F0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXR0cmlidXRlLmdldF9kZXBlbmRlbmNpZXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gcmVuZGVyZXIuZGlydHkoZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGIgYFxuXHRcdFx0XHRcdFx0XHRpZiAoJHtjb25kaXRpb259KSAke25hbWVfY2hhbmdlc30uJHthdHRyaWJ1dGUubmFtZX0gPSAke2F0dHJpYnV0ZS5nZXRfdmFsdWUoYmxvY2spfTtcblx0XHRcdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChmcmFnbWVudF9kZXBlbmRlbmNpZXMuc2l6ZSA+IDApIHtcblx0ICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtyZW5kZXJlci5kaXJ0eShBcnJheS5mcm9tKGZyYWdtZW50X2RlcGVuZGVuY2llcykpfSkge1xuXHRcdFx0XHRcdCR7bmFtZV9jaGFuZ2VzfS4kJHNjb3BlID0geyBkaXJ0eTogI2RpcnR5LCBjdHg6ICNjdHggfTtcblx0XHRcdFx0fWApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBtdW5nZWRfYmluZGluZ3MgPSB0aGlzLm5vZGUuYmluZGluZ3MubWFwKGJpbmRpbmcgPT4ge1xuXHQgICAgICAgICAgICBjb21wb25lbnQuaGFzX3JlYWN0aXZlX2Fzc2lnbm1lbnRzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKGJpbmRpbmcubmFtZSA9PT0gJ3RoaXMnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYmluZF90aGlzKGNvbXBvbmVudCwgYmxvY2ssIG5ldyBCaW5kaW5nV3JhcHBlcihibG9jaywgYmluZGluZywgdGhpcyksIHRoaXMudmFyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb25zdCBpZCA9IGNvbXBvbmVudC5nZXRfdW5pcXVlX25hbWUoYCR7dGhpcy52YXIubmFtZX1fJHtiaW5kaW5nLm5hbWV9X2JpbmRpbmdgKTtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3RvX2NvbnRleHQoaWQubmFtZSk7XG5cdCAgICAgICAgICAgIGNvbnN0IGNhbGxlZSA9IHJlbmRlcmVyLnJlZmVyZW5jZShpZCk7XG5cdCAgICAgICAgICAgIGNvbnN0IHVwZGF0aW5nID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGB1cGRhdGluZ18ke2JpbmRpbmcubmFtZX1gKTtcblx0ICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKHVwZGF0aW5nKTtcblx0ICAgICAgICAgICAgY29uc3Qgc25pcHBldCA9IGJpbmRpbmcuZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgc3RhdGVtZW50cy5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtzbmlwcGV0fSAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdFx0JHtwcm9wc30uJHtiaW5kaW5nLm5hbWV9ID0gJHtzbmlwcGV0fTtcblx0XHRcdFx0fWApO1xuXHQgICAgICAgICAgICB1cGRhdGVzLnB1c2goYiBgXG5cdFx0XHRcdGlmICghJHt1cGRhdGluZ30gJiYgJHtyZW5kZXJlci5kaXJ0eShBcnJheS5mcm9tKGJpbmRpbmcuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpKX0pIHtcblx0XHRcdFx0XHQke3VwZGF0aW5nfSA9IHRydWU7XG5cdFx0XHRcdFx0JHtuYW1lX2NoYW5nZXN9LiR7YmluZGluZy5uYW1lfSA9ICR7c25pcHBldH07XG5cdFx0XHRcdFx0QGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiAke3VwZGF0aW5nfSA9IGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGNvbnRleHR1YWxfZGVwZW5kZW5jaWVzID0gQXJyYXkuZnJvbShiaW5kaW5nLmV4cHJlc3Npb24uY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBBcnJheS5mcm9tKGJpbmRpbmcuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICBsZXQgbGhzID0gYmluZGluZy5yYXdfZXhwcmVzc2lvbjtcblx0ICAgICAgICAgICAgaWYgKGJpbmRpbmcuaXNfY29udGV4dHVhbCAmJiBiaW5kaW5nLmV4cHJlc3Npb24ubm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGJpbmQ6eD17eX0g4oCUIHdlIGNhbid0IGp1c3QgZG8gYHkgPSB4YCwgd2UgbmVlZCB0b1xuXHQgICAgICAgICAgICAgICAgLy8gdG8gYGFycmF5W2luZGV4XSA9IHg7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGJpbmRpbmcuZXhwcmVzc2lvbi5ub2RlO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgeyBvYmplY3QsIHByb3BlcnR5LCBzbmlwcGV0IH0gPSBibG9jay5iaW5kaW5ncy5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICBsaHMgPSBzbmlwcGV0O1xuXHQgICAgICAgICAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMucHVzaChvYmplY3QubmFtZSwgcHJvcGVydHkubmFtZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gW3ggYCN2YWx1ZWBdO1xuXHQgICAgICAgICAgICBpZiAoY29udGV4dHVhbF9kZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IFtdO1xuXHQgICAgICAgICAgICAgICAgY29udGV4dHVhbF9kZXBlbmRlbmNpZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF90b19jb250ZXh0KG5hbWUsIHRydWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChyZW5kZXJlci5yZWZlcmVuY2UobmFtZSkpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRcdGZ1bmN0aW9uICR7aWR9KCN2YWx1ZSkge1xuXHRcdFx0XHRcdFx0JHtjYWxsZWV9LmNhbGwobnVsbCwgI3ZhbHVlLCAke2FyZ3N9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICAgICAgYmxvY2subWFpbnRhaW5fY29udGV4dCA9IHRydWU7IC8vIFRPRE8gcHV0IHRoaXMgc29tZXdoZXJlIG1vcmUgbG9naWNhbFxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdFx0XHRmdW5jdGlvbiAke2lkfSgjdmFsdWUpIHtcblx0XHRcdFx0XHRcdCR7Y2FsbGVlfS5jYWxsKG51bGwsICN2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb25zdCBib2R5ID0gYiBgXG5cdFx0XHRcdGZ1bmN0aW9uICR7aWR9KCR7cGFyYW1zfSkge1xuXHRcdFx0XHRcdCR7bGhzfSA9ICN2YWx1ZTtcblx0XHRcdFx0XHQke3JlbmRlcmVyLmludmFsaWRhdGUoZGVwZW5kZW5jaWVzWzBdKX07XG5cdFx0XHRcdH1cblx0XHRcdGA7XG5cdCAgICAgICAgICAgIGNvbXBvbmVudC5wYXJ0bHlfaG9pc3RlZC5wdXNoKGJvZHkpO1xuXHQgICAgICAgICAgICByZXR1cm4gYiBgQGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gQGJpbmQoJHt0aGlzLnZhcn0sICcke2JpbmRpbmcubmFtZX0nLCAke2lkfSkpO2A7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgY29uc3QgbXVuZ2VkX2hhbmRsZXJzID0gdGhpcy5ub2RlLmhhbmRsZXJzLm1hcChoYW5kbGVyID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgZXZlbnRfaGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXJXcmFwcGVyKGhhbmRsZXIsIHRoaXMpO1xuXHQgICAgICAgICAgICBsZXQgc25pcHBldCA9IGV2ZW50X2hhbmRsZXIuZ2V0X3NuaXBwZXQoYmxvY2spO1xuXHQgICAgICAgICAgICBpZiAoaGFuZGxlci5tb2RpZmllcnMuaGFzKCdvbmNlJykpXG5cdCAgICAgICAgICAgICAgICBzbmlwcGV0ID0geCBgQG9uY2UoJHtzbmlwcGV0fSlgO1xuXHQgICAgICAgICAgICByZXR1cm4gYiBgJHtuYW1lfS4kb24oXCIke2hhbmRsZXIubmFtZX1cIiwgJHtzbmlwcGV0fSk7YDtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLm5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50Jykge1xuXHQgICAgICAgICAgICBjb25zdCBzd2l0Y2hfdmFsdWUgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoJ3N3aXRjaF92YWx1ZScpO1xuXHQgICAgICAgICAgICBjb25zdCBzd2l0Y2hfcHJvcHMgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoJ3N3aXRjaF9wcm9wcycpO1xuXHQgICAgICAgICAgICBjb25zdCBzbmlwcGV0ID0gdGhpcy5ub2RlLmV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRcdHZhciAke3N3aXRjaF92YWx1ZX0gPSAke3NuaXBwZXR9O1xuXG5cdFx0XHRcdGZ1bmN0aW9uICR7c3dpdGNoX3Byb3BzfSgjY3R4KSB7XG5cdFx0XHRcdFx0JHsodGhpcy5ub2RlLmF0dHJpYnV0ZXMubGVuZ3RoID4gMCB8fCB0aGlzLm5vZGUuYmluZGluZ3MubGVuZ3RoID4gMCkgJiYgYiBgXG5cdFx0XHRcdFx0JHtwcm9wcyAmJiBiIGBsZXQgJHtwcm9wc30gPSAke2F0dHJpYnV0ZV9vYmplY3R9O2B9YH1cblx0XHRcdFx0XHQke3N0YXRlbWVudHN9XG5cdFx0XHRcdFx0cmV0dXJuICR7Y29tcG9uZW50X29wdHN9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCR7c3dpdGNoX3ZhbHVlfSkge1xuXHRcdFx0XHRcdCR7bmFtZX0gPSBuZXcgJHtzd2l0Y2hfdmFsdWV9KCR7c3dpdGNoX3Byb3BzfSgjY3R4KSk7XG5cblx0XHRcdFx0XHQke211bmdlZF9iaW5kaW5nc31cblx0XHRcdFx0XHQke211bmdlZF9oYW5kbGVyc31cblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGBpZiAoJHtuYW1lfSkgQGNyZWF0ZV9jb21wb25lbnQoJHtuYW1lfS4kJC5mcmFnbWVudCk7YCk7XG5cdCAgICAgICAgICAgIGlmIChwYXJlbnRfbm9kZXMgJiYgdGhpcy5yZW5kZXJlci5vcHRpb25zLmh5ZHJhdGFibGUpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYGlmICgke25hbWV9KSBAY2xhaW1fY29tcG9uZW50KCR7bmFtZX0uJCQuZnJhZ21lbnQsICR7cGFyZW50X25vZGVzfSk7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgXG5cdFx0XHRcdGlmICgke25hbWV9KSB7XG5cdFx0XHRcdFx0QG1vdW50X2NvbXBvbmVudCgke25hbWV9LCAke3BhcmVudF9ub2RlIHx8ICcjdGFyZ2V0J30sICR7cGFyZW50X25vZGUgPyAnbnVsbCcgOiAnI2FuY2hvcid9KTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMuZ2V0X29yX2NyZWF0ZV9hbmNob3IoYmxvY2ssIHBhcmVudF9ub2RlLCBwYXJlbnRfbm9kZXMpO1xuXHQgICAgICAgICAgICBjb25zdCB1cGRhdGVfbW91bnRfbm9kZSA9IHRoaXMuZ2V0X3VwZGF0ZV9tb3VudF9ub2RlKGFuY2hvcik7XG5cdCAgICAgICAgICAgIGlmICh1cGRhdGVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRcdCR7dXBkYXRlc31cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtzd2l0Y2hfdmFsdWV9ICE9PSAoJHtzd2l0Y2hfdmFsdWV9ID0gJHtzbmlwcGV0fSkpIHtcblx0XHRcdFx0XHRpZiAoJHtuYW1lfSkge1xuXHRcdFx0XHRcdFx0QGdyb3VwX291dHJvcygpO1xuXHRcdFx0XHRcdFx0Y29uc3Qgb2xkX2NvbXBvbmVudCA9ICR7bmFtZX07XG5cdFx0XHRcdFx0XHRAdHJhbnNpdGlvbl9vdXQob2xkX2NvbXBvbmVudC4kJC5mcmFnbWVudCwgMSwgMCwgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRAZGVzdHJveV9jb21wb25lbnQob2xkX2NvbXBvbmVudCwgMSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdEBjaGVja19vdXRyb3MoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoJHtzd2l0Y2hfdmFsdWV9KSB7XG5cdFx0XHRcdFx0XHQke25hbWV9ID0gbmV3ICR7c3dpdGNoX3ZhbHVlfSgke3N3aXRjaF9wcm9wc30oI2N0eCkpO1xuXG5cdFx0XHRcdFx0XHQke211bmdlZF9iaW5kaW5nc31cblx0XHRcdFx0XHRcdCR7bXVuZ2VkX2hhbmRsZXJzfVxuXG5cdFx0XHRcdFx0XHRAY3JlYXRlX2NvbXBvbmVudCgke25hbWV9LiQkLmZyYWdtZW50KTtcblx0XHRcdFx0XHRcdEB0cmFuc2l0aW9uX2luKCR7bmFtZX0uJCQuZnJhZ21lbnQsIDEpO1xuXHRcdFx0XHRcdFx0QG1vdW50X2NvbXBvbmVudCgke25hbWV9LCAke3VwZGF0ZV9tb3VudF9ub2RlfSwgJHthbmNob3J9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JHtuYW1lfSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCR7c3dpdGNoX3ZhbHVlfSkge1xuXHRcdFx0XHRcdCR7dXBkYXRlcy5sZW5ndGggPiAwICYmIGIgYCR7bmFtZX0uJHNldCgke25hbWVfY2hhbmdlc30pO2B9XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW50cm8ucHVzaChiIGBcblx0XHRcdFx0aWYgKCR7bmFtZX0pIEB0cmFuc2l0aW9uX2luKCR7bmFtZX0uJCQuZnJhZ21lbnQsICNsb2NhbCk7XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgaWYgKCR7bmFtZX0pIEB0cmFuc2l0aW9uX291dCgke25hbWV9LiQkLmZyYWdtZW50LCAjbG9jYWwpO2ApO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYGlmICgke25hbWV9KSBAZGVzdHJveV9jb21wb25lbnQoJHtuYW1lfSwgJHtwYXJlbnRfbm9kZSA/IG51bGwgOiAnZGV0YWNoaW5nJ30pO2ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHRoaXMubm9kZS5uYW1lID09PSAnc3ZlbHRlOnNlbGYnXG5cdCAgICAgICAgICAgICAgICA/IGNvbXBvbmVudC5uYW1lXG5cdCAgICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyZXIucmVmZXJlbmNlKHRoaXMubm9kZS5uYW1lKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmluaXQucHVzaChiIGBcblx0XHRcdFx0JHsodGhpcy5ub2RlLmF0dHJpYnV0ZXMubGVuZ3RoID4gMCB8fCB0aGlzLm5vZGUuYmluZGluZ3MubGVuZ3RoID4gMCkgJiYgYiBgXG5cdFx0XHRcdCR7cHJvcHMgJiYgYiBgbGV0ICR7cHJvcHN9ID0gJHthdHRyaWJ1dGVfb2JqZWN0fTtgfWB9XG5cdFx0XHRcdCR7c3RhdGVtZW50c31cblx0XHRcdFx0JHtuYW1lfSA9IG5ldyAke2V4cHJlc3Npb259KCR7Y29tcG9uZW50X29wdHN9KTtcblxuXHRcdFx0XHQke211bmdlZF9iaW5kaW5nc31cblx0XHRcdFx0JHttdW5nZWRfaGFuZGxlcnN9XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmNyZWF0ZS5wdXNoKGIgYEBjcmVhdGVfY29tcG9uZW50KCR7bmFtZX0uJCQuZnJhZ21lbnQpO2ApO1xuXHQgICAgICAgICAgICBpZiAocGFyZW50X25vZGVzICYmIHRoaXMucmVuZGVyZXIub3B0aW9ucy5oeWRyYXRhYmxlKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuY2xhaW0ucHVzaChiIGBAY2xhaW1fY29tcG9uZW50KCR7bmFtZX0uJCQuZnJhZ21lbnQsICR7cGFyZW50X25vZGVzfSk7YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLm1vdW50LnB1c2goYiBgQG1vdW50X2NvbXBvbmVudCgke25hbWV9LCAke3BhcmVudF9ub2RlIHx8ICcjdGFyZ2V0J30sICR7cGFyZW50X25vZGUgPyAnbnVsbCcgOiAnI2FuY2hvcid9KTtgKTtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLmludHJvLnB1c2goYiBgXG5cdFx0XHRcdEB0cmFuc2l0aW9uX2luKCR7bmFtZX0uJCQuZnJhZ21lbnQsICNsb2NhbCk7XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgaWYgKHVwZGF0ZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdFx0JHt1cGRhdGVzfVxuXHRcdFx0XHRcdCR7bmFtZX0uJHNldCgke25hbWVfY2hhbmdlc30pO1xuXHRcdFx0XHRgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuZGVzdHJveS5wdXNoKGIgYFxuXHRcdFx0XHRAZGVzdHJveV9jb21wb25lbnQoJHtuYW1lfSwgJHtwYXJlbnRfbm9kZSA/IG51bGwgOiAnZGV0YWNoaW5nJ30pO1xuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5vdXRyby5wdXNoKGIgYEB0cmFuc2l0aW9uX291dCgke25hbWV9LiQkLmZyYWdtZW50LCAjbG9jYWwpO2ApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGdldF9zbG90X2RhdGEodmFsdWVzLCBibG9jayA9IG51bGwpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgdHlwZTogJ09iamVjdEV4cHJlc3Npb24nLFxuXHQgICAgICAgIHByb3BlcnRpZXM6IEFycmF5LmZyb20odmFsdWVzLnZhbHVlcygpKVxuXHQgICAgICAgICAgICAuZmlsdGVyKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUubmFtZSAhPT0gJ25hbWUnKVxuXHQgICAgICAgICAgICAubWFwKGF0dHJpYnV0ZSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0X3ZhbHVlKGJsb2NrLCBhdHRyaWJ1dGUpO1xuXHQgICAgICAgICAgICByZXR1cm4gcCBgJHthdHRyaWJ1dGUubmFtZX06ICR7dmFsdWV9YDtcblx0ICAgICAgICB9KVxuXHQgICAgfTtcblx0fVxuXHRmdW5jdGlvbiBnZXRfdmFsdWUoYmxvY2ssIGF0dHJpYnV0ZSkge1xuXHQgICAgaWYgKGF0dHJpYnV0ZS5pc190cnVlKVxuXHQgICAgICAgIHJldHVybiB4IGB0cnVlYDtcblx0ICAgIGlmIChhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICByZXR1cm4geCBgXCJcImA7XG5cdCAgICBsZXQgdmFsdWUgPSBhdHRyaWJ1dGUuY2h1bmtzXG5cdCAgICAgICAgLm1hcChjaHVuayA9PiBjaHVuay50eXBlID09PSAnVGV4dCcgPyBzdHJpbmdfbGl0ZXJhbChjaHVuay5kYXRhKSA6IChibG9jayA/IGNodW5rLm1hbmlwdWxhdGUoYmxvY2spIDogY2h1bmsubm9kZSkpXG5cdCAgICAgICAgLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSArICR7cmhzfWApO1xuXHQgICAgaWYgKGF0dHJpYnV0ZS5jaHVua3MubGVuZ3RoID4gMSAmJiBhdHRyaWJ1dGUuY2h1bmtzWzBdLnR5cGUgIT09ICdUZXh0Jykge1xuXHQgICAgICAgIHZhbHVlID0geCBgXCJcIiArICR7dmFsdWV9YDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGNsYXNzIFNsb3RXcmFwcGVyIGV4dGVuZHMgV3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgbm9kZSwgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKSB7XG5cdCAgICAgICAgc3VwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpO1xuXHQgICAgICAgIHRoaXMuZmFsbGJhY2sgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudmFyID0geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdzbG90JyB9O1xuXHQgICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gbmV3IFNldChbJyQkc2NvcGUnXSk7XG5cdCAgICAgICAgdGhpcy5jYW5ub3RfdXNlX2lubmVyaHRtbCgpO1xuXHQgICAgICAgIHRoaXMubm90X3N0YXRpY19jb250ZW50KCk7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGhpcy5mYWxsYmFjayA9IGJsb2NrLmNoaWxkKHtcblx0ICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGNyZWF0ZV9kZWJ1Z2dpbmdfY29tbWVudCh0aGlzLm5vZGUuY2hpbGRyZW5bMF0sIHRoaXMucmVuZGVyZXIuY29tcG9uZW50KSxcblx0ICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgZmFsbGJhY2tfYmxvY2tgKSxcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdmYWxsYmFjaydcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHJlbmRlcmVyLmJsb2Nrcy5wdXNoKHRoaXMuZmFsbGJhY2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmZyYWdtZW50ID0gbmV3IEZyYWdtZW50V3JhcHBlcihyZW5kZXJlciwgdGhpcy5mYWxsYmFjaywgbm9kZS5jaGlsZHJlbiwgdGhpcywgc3RyaXBfd2hpdGVzcGFjZSwgbmV4dF9zaWJsaW5nKTtcblx0ICAgICAgICB0aGlzLm5vZGUudmFsdWVzLmZvckVhY2goYXR0cmlidXRlID0+IHtcblx0ICAgICAgICAgICAgYWRkX3RvX3NldCh0aGlzLmRlcGVuZGVuY2llcywgYXR0cmlidXRlLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgYmxvY2suYWRkX2RlcGVuZGVuY2llcyh0aGlzLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyB0aGlzLCBqdXN0IGluIGNhc2Vcblx0ICAgICAgICBibG9jay5hZGRfaW50cm8oKTtcblx0ICAgICAgICBibG9jay5hZGRfb3V0cm8oKTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgcGFyZW50X25vZGUsIHBhcmVudF9ub2Rlcykge1xuXHQgICAgICAgIGNvbnN0IHsgcmVuZGVyZXIgfSA9IHRoaXM7XG5cdCAgICAgICAgY29uc3QgeyBzbG90X25hbWUgfSA9IHRoaXMubm9kZTtcblx0ICAgICAgICBsZXQgZ2V0X3Nsb3RfY2hhbmdlc19mbjtcblx0ICAgICAgICBsZXQgZ2V0X3Nsb3RfY29udGV4dF9mbjtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLnZhbHVlcy5zaXplID4gMCkge1xuXHQgICAgICAgICAgICBnZXRfc2xvdF9jaGFuZ2VzX2ZuID0gcmVuZGVyZXIuY29tcG9uZW50LmdldF91bmlxdWVfbmFtZShgZ2V0XyR7c2FuaXRpemUoc2xvdF9uYW1lKX1fc2xvdF9jaGFuZ2VzYCk7XG5cdCAgICAgICAgICAgIGdldF9zbG90X2NvbnRleHRfZm4gPSByZW5kZXJlci5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGBnZXRfJHtzYW5pdGl6ZShzbG90X25hbWUpfV9zbG90X2NvbnRleHRgKTtcblx0ICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHggYHt9YDtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICB0aGlzLm5vZGUudmFsdWVzLmZvckVhY2goYXR0cmlidXRlID0+IHtcblx0ICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5jaHVua3MuZm9yRWFjaChjaHVuayA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLmRlcGVuZGVuY2llcykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBhZGRfdG9fc2V0KGRlcGVuZGVuY2llcywgY2h1bmsuY29udGV4dHVhbF9kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRfdG9fc2V0KGRlcGVuZGVuY2llcywgKGNodW5rIGFzIEV4cHJlc3Npb24pLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmRlcGVuZGVuY2llcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSByZW5kZXJlci5jb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUgJiYgIXZhcmlhYmxlLmhvaXN0YWJsZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNfZGVwZW5kZW5jaWVzID0gQXJyYXkuZnJvbShhdHRyaWJ1dGUuZGVwZW5kZW5jaWVzKS5maWx0ZXIoKG5hbWUpID0+IHRoaXMuaXNfZGVwZW5kZW5jeV9keW5hbWljKG5hbWUpKTtcblx0ICAgICAgICAgICAgICAgIGlmIChkeW5hbWljX2RlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wcm9wZXJ0aWVzLnB1c2gocCBgJHthdHRyaWJ1dGUubmFtZX06ICR7cmVuZGVyZXIuZGlydHkoZHluYW1pY19kZXBlbmRlbmNpZXMpfWApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYmxvY2tzLnB1c2goYiBgXG5cdFx0XHRcdGNvbnN0ICR7Z2V0X3Nsb3RfY2hhbmdlc19mbn0gPSAjZGlydHkgPT4gJHtjaGFuZ2VzfTtcblx0XHRcdFx0Y29uc3QgJHtnZXRfc2xvdF9jb250ZXh0X2ZufSA9ICNjdHggPT4gJHtnZXRfc2xvdF9kYXRhKHRoaXMubm9kZS52YWx1ZXMsIGJsb2NrKX07XG5cdFx0XHRgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGdldF9zbG90X2NoYW5nZXNfZm4gPSAnbnVsbCc7XG5cdCAgICAgICAgICAgIGdldF9zbG90X2NvbnRleHRfZm4gPSAnbnVsbCc7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxldCBoYXNfZmFsbGJhY2sgPSAhIXRoaXMuZmFsbGJhY2s7XG5cdCAgICAgICAgaWYgKHRoaXMuZmFsbGJhY2spIHtcblx0ICAgICAgICAgICAgdGhpcy5mcmFnbWVudC5yZW5kZXIodGhpcy5mYWxsYmFjaywgbnVsbCwgeCBgI25vZGVzYCk7XG5cdCAgICAgICAgICAgIGhhc19mYWxsYmFjayA9IHRoaXMuZmFsbGJhY2suaGFzX2NvbnRlbnQoKTtcblx0ICAgICAgICAgICAgaWYgKCFoYXNfZmFsbGJhY2spIHtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLnJlbW92ZV9ibG9jayh0aGlzLmZhbGxiYWNrKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBzbG90ID0gYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGAke3Nhbml0aXplKHNsb3RfbmFtZSl9X3Nsb3RgKTtcblx0ICAgICAgICBjb25zdCBzbG90X2RlZmluaXRpb24gPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7c2FuaXRpemUoc2xvdF9uYW1lKX1fc2xvdF90ZW1wbGF0ZWApO1xuXHQgICAgICAgIGNvbnN0IHNsb3Rfb3JfZmFsbGJhY2sgPSBoYXNfZmFsbGJhY2sgPyBibG9jay5nZXRfdW5pcXVlX25hbWUoYCR7c2FuaXRpemUoc2xvdF9uYW1lKX1fc2xvdF9vcl9mYWxsYmFja2ApIDogc2xvdDtcblx0ICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0Y29uc3QgJHtzbG90X2RlZmluaXRpb259ID0gJHtyZW5kZXJlci5yZWZlcmVuY2UoJyQkc2xvdHMnKX0uJHtzbG90X25hbWV9O1xuXHRcdFx0Y29uc3QgJHtzbG90fSA9IEBjcmVhdGVfc2xvdCgke3Nsb3RfZGVmaW5pdGlvbn0sICNjdHgsICR7cmVuZGVyZXIucmVmZXJlbmNlKCckJHNjb3BlJyl9LCAke2dldF9zbG90X2NvbnRleHRfZm59KTtcblx0XHRcdCR7aGFzX2ZhbGxiYWNrID8gYiBgY29uc3QgJHtzbG90X29yX2ZhbGxiYWNrfSA9ICR7c2xvdH0gfHwgJHt0aGlzLmZhbGxiYWNrLm5hbWV9KCNjdHgpO2AgOiBudWxsfVxuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGBpZiAoJHtzbG90X29yX2ZhbGxiYWNrfSkgJHtzbG90X29yX2ZhbGxiYWNrfS5jKCk7YCk7XG5cdCAgICAgICAgaWYgKHJlbmRlcmVyLm9wdGlvbnMuaHlkcmF0YWJsZSkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuY2xhaW0ucHVzaChiIGBpZiAoJHtzbG90X29yX2ZhbGxiYWNrfSkgJHtzbG90X29yX2ZhbGxiYWNrfS5sKCR7cGFyZW50X25vZGVzfSk7YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJsb2NrLmNodW5rcy5tb3VudC5wdXNoKGIgYFxuXHRcdFx0aWYgKCR7c2xvdF9vcl9mYWxsYmFja30pIHtcblx0XHRcdFx0JHtzbG90X29yX2ZhbGxiYWNrfS5tKCR7cGFyZW50X25vZGUgfHwgJyN0YXJnZXQnfSwgJHtwYXJlbnRfbm9kZSA/ICdudWxsJyA6ICcjYW5jaG9yJ30pO1xuXHRcdFx0fVxuXHRcdGApO1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5pbnRyby5wdXNoKGIgYEB0cmFuc2l0aW9uX2luKCR7c2xvdF9vcl9mYWxsYmFja30sICNsb2NhbCk7YCk7XG5cdCAgICAgICAgYmxvY2suY2h1bmtzLm91dHJvLnB1c2goYiBgQHRyYW5zaXRpb25fb3V0KCR7c2xvdF9vcl9mYWxsYmFja30sICNsb2NhbCk7YCk7XG5cdCAgICAgICAgY29uc3QgZHluYW1pY19kZXBlbmRlbmNpZXMgPSBBcnJheS5mcm9tKHRoaXMuZGVwZW5kZW5jaWVzKS5maWx0ZXIoKG5hbWUpID0+IHRoaXMuaXNfZGVwZW5kZW5jeV9keW5hbWljKG5hbWUpKTtcblx0ICAgICAgICBjb25zdCBmYWxsYmFja19keW5hbWljX2RlcGVuZGVuY2llcyA9IGhhc19mYWxsYmFja1xuXHQgICAgICAgICAgICA/IEFycmF5LmZyb20odGhpcy5mYWxsYmFjay5kZXBlbmRlbmNpZXMpLmZpbHRlcigobmFtZSkgPT4gdGhpcy5pc19kZXBlbmRlbmN5X2R5bmFtaWMobmFtZSkpXG5cdCAgICAgICAgICAgIDogW107XG5cdCAgICAgICAgY29uc3Qgc2xvdF91cGRhdGUgPSBiIGBcblx0XHRcdGlmICgke3Nsb3R9LnAgJiYgJHtyZW5kZXJlci5kaXJ0eShkeW5hbWljX2RlcGVuZGVuY2llcyl9KSB7XG5cdFx0XHRcdEB1cGRhdGVfc2xvdCgke3Nsb3R9LCAke3Nsb3RfZGVmaW5pdGlvbn0sICNjdHgsICR7cmVuZGVyZXIucmVmZXJlbmNlKCckJHNjb3BlJyl9LCAjZGlydHksICR7Z2V0X3Nsb3RfY2hhbmdlc19mbn0sICR7Z2V0X3Nsb3RfY29udGV4dF9mbn0pO1xuXHRcdFx0fVxuXHRcdGA7XG5cdCAgICAgICAgY29uc3QgZmFsbGJhY2tfdXBkYXRlID0gaGFzX2ZhbGxiYWNrICYmIGZhbGxiYWNrX2R5bmFtaWNfZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDAgJiYgYiBgXG5cdFx0XHRpZiAoJHtzbG90X29yX2ZhbGxiYWNrfSAmJiAke3Nsb3Rfb3JfZmFsbGJhY2t9LnAgJiYgJHtyZW5kZXJlci5kaXJ0eShmYWxsYmFja19keW5hbWljX2RlcGVuZGVuY2llcyl9KSB7XG5cdFx0XHRcdCR7c2xvdF9vcl9mYWxsYmFja30ucCgjY3R4LCAjZGlydHkpO1xuXHRcdFx0fVxuXHRcdGA7XG5cdCAgICAgICAgaWYgKGZhbGxiYWNrX3VwZGF0ZSkge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdGlmICgke3Nsb3R9KSB7XG5cdFx0XHRcdFx0JHtzbG90X3VwZGF0ZX1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQke2ZhbGxiYWNrX3VwZGF0ZX1cblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdGlmICgke3Nsb3R9KSB7XG5cdFx0XHRcdFx0JHtzbG90X3VwZGF0ZX1cblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJsb2NrLmNodW5rcy5kZXN0cm95LnB1c2goYiBgaWYgKCR7c2xvdF9vcl9mYWxsYmFja30pICR7c2xvdF9vcl9mYWxsYmFja30uZChkZXRhY2hpbmcpO2ApO1xuXHQgICAgfVxuXHQgICAgaXNfZGVwZW5kZW5jeV9keW5hbWljKG5hbWUpIHtcblx0ICAgICAgICBpZiAobmFtZSA9PT0gJyQkc2NvcGUnKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLnNjb3BlLmlzX2xldChuYW1lKSlcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgaWYgKGlzX3Jlc2VydmVkX2tleXdvcmQobmFtZSkpXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy5yZW5kZXJlci5jb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgcmV0dXJuIGlzX2R5bmFtaWMkMSh2YXJpYWJsZSk7XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBUaXRsZVdyYXBwZXIgZXh0ZW5kcyBXcmFwcGVyIHtcblx0ICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlLCBfc3RyaXBfd2hpdGVzcGFjZSwgX25leHRfc2libGluZykge1xuXHQgICAgICAgIHN1cGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKTtcblx0ICAgIH1cblx0ICAgIHJlbmRlcihibG9jaywgX3BhcmVudF9ub2RlLCBfcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgY29uc3QgaXNfZHluYW1pYyA9ICEhdGhpcy5ub2RlLmNoaWxkcmVuLmZpbmQobm9kZSA9PiBub2RlLnR5cGUgIT09ICdUZXh0Jyk7XG5cdCAgICAgICAgaWYgKGlzX2R5bmFtaWMpIHtcblx0ICAgICAgICAgICAgbGV0IHZhbHVlO1xuXHQgICAgICAgICAgICBjb25zdCBhbGxfZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAvLyBUT0RPIHNvbWUgb2YgdGhpcyBjb2RlIGlzIHJlcGVhdGVkIGluIFRhZy50cyDigJQgd291bGQgYmUgZ29vZCB0b1xuXHQgICAgICAgICAgICAvLyBEUlkgaXQgb3V0IGlmIHRoYXQncyBwb3NzaWJsZSB3aXRob3V0IGludHJvZHVjaW5nIGNyYXp5IGluZGlyZWN0aW9uXG5cdCAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBzaW5nbGUge3RhZ30g4oCUIG1heSBiZSBhIG5vbi1zdHJpbmdcblx0ICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogY2hlY2sgdGhpc1xuXHQgICAgICAgICAgICAgICAgY29uc3QgeyBleHByZXNzaW9uIH0gPSB0aGlzLm5vZGUuY2hpbGRyZW5bMF07XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IGV4cHJlc3Npb24ubWFuaXB1bGF0ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICBhZGRfdG9fc2V0KGFsbF9kZXBlbmRlbmNpZXMsIGV4cHJlc3Npb24uZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vICd7Zm9vfSB7YmFyfScg4oCUIHRyZWF0IGFzIHN0cmluZyBjb25jYXRlbmF0aW9uXG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMubm9kZS5jaGlsZHJlblxuXHQgICAgICAgICAgICAgICAgICAgIC5tYXAoY2h1bmsgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaHVuay50eXBlID09PSAnVGV4dCcpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdfbGl0ZXJhbChjaHVuay5kYXRhKTtcblx0ICAgICAgICAgICAgICAgICAgICBjaHVuay5leHByZXNzaW9uLmRlcGVuZGVuY2llcy5mb3JFYWNoKGQgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGxfZGVwZW5kZW5jaWVzLmFkZChkKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2h1bmsuZXhwcmVzc2lvbi5tYW5pcHVsYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfSArICR7cmhzfWApO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5jaGlsZHJlblswXS50eXBlICE9PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHggYFwiXCIgKyAke3ZhbHVlfWA7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMubm9kZS5zaG91bGRfY2FjaGUgJiYgYmxvY2suZ2V0X3VuaXF1ZV9uYW1lKGB0aXRsZV92YWx1ZWApO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5ub2RlLnNob3VsZF9jYWNoZSlcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShsYXN0KTtcblx0ICAgICAgICAgICAgY29uc3QgaW5pdCA9IHRoaXMubm9kZS5zaG91bGRfY2FjaGUgPyB4IGAke2xhc3R9ID0gJHt2YWx1ZX1gIDogdmFsdWU7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgQF9kb2N1bWVudC50aXRsZSA9ICR7aW5pdH07YCk7XG5cdCAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXIgPSBiIGBAX2RvY3VtZW50LnRpdGxlID0gJHt0aGlzLm5vZGUuc2hvdWxkX2NhY2hlID8gbGFzdCA6IHZhbHVlfTtgO1xuXHQgICAgICAgICAgICBpZiAoYWxsX2RlcGVuZGVuY2llcy5zaXplKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBBcnJheS5mcm9tKGFsbF9kZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IGJsb2NrLnJlbmRlcmVyLmRpcnR5KGRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgICAgICBpZiAoYmxvY2suaGFzX291dHJvcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IHggYCEjY3VycmVudCB8fCAke2NvbmRpdGlvbn1gO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5zaG91bGRfY2FjaGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gPSB4IGAke2NvbmRpdGlvbn0gJiYgKCR7bGFzdH0gIT09ICgke2xhc3R9ID0gJHt2YWx1ZX0pKWA7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBibG9jay5jaHVua3MudXBkYXRlLnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCR7Y29uZGl0aW9ufSkge1xuXHRcdFx0XHRcdFx0JHt1cGRhdGVyfVxuXHRcdFx0XHRcdH1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMFxuXHQgICAgICAgICAgICAgICAgPyBzdHJpbmdfbGl0ZXJhbCh0aGlzLm5vZGUuY2hpbGRyZW5bMF0uZGF0YSlcblx0ICAgICAgICAgICAgICAgIDogeCBgXCJcImA7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5oeWRyYXRlLnB1c2goYiBgQF9kb2N1bWVudC50aXRsZSA9ICR7dmFsdWV9O2ApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IGFzc29jaWF0ZWRfZXZlbnRzID0ge1xuXHQgICAgaW5uZXJXaWR0aDogJ3Jlc2l6ZScsXG5cdCAgICBpbm5lckhlaWdodDogJ3Jlc2l6ZScsXG5cdCAgICBvdXRlcldpZHRoOiAncmVzaXplJyxcblx0ICAgIG91dGVySGVpZ2h0OiAncmVzaXplJyxcblx0ICAgIHNjcm9sbFg6ICdzY3JvbGwnLFxuXHQgICAgc2Nyb2xsWTogJ3Njcm9sbCcsXG5cdH07XG5cdGNvbnN0IHByb3BlcnRpZXMgPSB7XG5cdCAgICBzY3JvbGxYOiAncGFnZVhPZmZzZXQnLFxuXHQgICAgc2Nyb2xsWTogJ3BhZ2VZT2Zmc2V0J1xuXHR9O1xuXHRjb25zdCByZWFkb25seSA9IG5ldyBTZXQoW1xuXHQgICAgJ2lubmVyV2lkdGgnLFxuXHQgICAgJ2lubmVySGVpZ2h0Jyxcblx0ICAgICdvdXRlcldpZHRoJyxcblx0ICAgICdvdXRlckhlaWdodCcsXG5cdCAgICAnb25saW5lJyxcblx0XSk7XG5cdGNsYXNzIFdpbmRvd1dyYXBwZXIgZXh0ZW5kcyBXcmFwcGVyIHtcblx0ICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBub2RlKSB7XG5cdCAgICAgICAgc3VwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIG5vZGUpO1xuXHQgICAgICAgIHRoaXMuaGFuZGxlcnMgPSB0aGlzLm5vZGUuaGFuZGxlcnMubWFwKGhhbmRsZXIgPT4gbmV3IEV2ZW50SGFuZGxlcldyYXBwZXIoaGFuZGxlciwgdGhpcykpO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBfcGFyZW50X25vZGUsIF9wYXJlbnRfbm9kZXMpIHtcblx0ICAgICAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSB0aGlzO1xuXHQgICAgICAgIGNvbnN0IHsgY29tcG9uZW50IH0gPSByZW5kZXJlcjtcblx0ICAgICAgICBjb25zdCBldmVudHMgPSB7fTtcblx0ICAgICAgICBjb25zdCBiaW5kaW5ncyA9IHt9O1xuXHQgICAgICAgIGFkZF9hY3Rpb25zKGJsb2NrLCAnQF93aW5kb3cnLCB0aGlzLm5vZGUuYWN0aW9ucyk7XG5cdCAgICAgICAgYWRkX2V2ZW50X2hhbmRsZXJzKGJsb2NrLCAnQF93aW5kb3cnLCB0aGlzLmhhbmRsZXJzKTtcblx0ICAgICAgICB0aGlzLm5vZGUuYmluZGluZ3MuZm9yRWFjaChiaW5kaW5nID0+IHtcblx0ICAgICAgICAgICAgLy8gaW4gZGV2IG1vZGUsIHRocm93IGlmIHJlYWQtb25seSB2YWx1ZXMgYXJlIHdyaXR0ZW4gdG9cblx0ICAgICAgICAgICAgaWYgKHJlYWRvbmx5LmhhcyhiaW5kaW5nLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICByZW5kZXJlci5yZWFkb25seS5hZGQoYmluZGluZy5leHByZXNzaW9uLm5vZGUubmFtZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYmluZGluZ3NbYmluZGluZy5uYW1lXSA9IGJpbmRpbmcuZXhwcmVzc2lvbi5ub2RlLm5hbWU7XG5cdCAgICAgICAgICAgIC8vIGJpbmQ6b25saW5lIGlzIGEgc3BlY2lhbCBjYXNlLCB3ZSBuZWVkIHRvIGxpc3RlbiBmb3IgdHdvIHNlcGFyYXRlIGV2ZW50c1xuXHQgICAgICAgICAgICBpZiAoYmluZGluZy5uYW1lID09PSAnb25saW5lJylcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgY29uc3QgYXNzb2NpYXRlZF9ldmVudCA9IGFzc29jaWF0ZWRfZXZlbnRzW2JpbmRpbmcubmFtZV07XG5cdCAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1tiaW5kaW5nLm5hbWVdIHx8IGJpbmRpbmcubmFtZTtcblx0ICAgICAgICAgICAgaWYgKCFldmVudHNbYXNzb2NpYXRlZF9ldmVudF0pXG5cdCAgICAgICAgICAgICAgICBldmVudHNbYXNzb2NpYXRlZF9ldmVudF0gPSBbXTtcblx0ICAgICAgICAgICAgZXZlbnRzW2Fzc29jaWF0ZWRfZXZlbnRdLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgbmFtZTogYmluZGluZy5leHByZXNzaW9uLm5vZGUubmFtZSxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wZXJ0eVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb25zdCBzY3JvbGxpbmcgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYHNjcm9sbGluZ2ApO1xuXHQgICAgICAgIGNvbnN0IGNsZWFyX3Njcm9sbGluZyA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgY2xlYXJfc2Nyb2xsaW5nYCk7XG5cdCAgICAgICAgY29uc3Qgc2Nyb2xsaW5nX3RpbWVvdXQgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYHNjcm9sbGluZ190aW1lb3V0YCk7XG5cdCAgICAgICAgT2JqZWN0LmtleXMoZXZlbnRzKS5mb3JFYWNoKGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgaWQgPSBibG9jay5nZXRfdW5pcXVlX25hbWUoYG9ud2luZG93JHtldmVudH1gKTtcblx0ICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBldmVudHNbZXZlbnRdO1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfdG9fY29udGV4dChpZC5uYW1lKTtcblx0ICAgICAgICAgICAgY29uc3QgZm4gPSByZW5kZXJlci5yZWZlcmVuY2UoaWQubmFtZSk7XG5cdCAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ3Njcm9sbCcpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFRPRE8gb3RoZXIgYmlkaXJlY3Rpb25hbCBiaW5kaW5ncy4uLlxuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKHNjcm9sbGluZywgeCBgZmFsc2VgKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLmFkZF92YXJpYWJsZShjbGVhcl9zY3JvbGxpbmcsIHggYCgpID0+IHsgJHtzY3JvbGxpbmd9ID0gZmFsc2UgfWApO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suYWRkX3ZhcmlhYmxlKHNjcm9sbGluZ190aW1lb3V0KTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGJpbmRpbmdzLnNjcm9sbFggJiYgYmluZGluZ3Muc2Nyb2xsWVxuXHQgICAgICAgICAgICAgICAgICAgID8geCBgXCIke2JpbmRpbmdzLnNjcm9sbFh9XCIgaW4gdGhpcy5fc3RhdGUgfHwgXCIke2JpbmRpbmdzLnNjcm9sbFl9XCIgaW4gdGhpcy5fc3RhdGVgXG5cdCAgICAgICAgICAgICAgICAgICAgOiB4IGBcIiR7YmluZGluZ3Muc2Nyb2xsWCB8fCBiaW5kaW5ncy5zY3JvbGxZfVwiIGluIHRoaXMuX3N0YXRlYDtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbFggPSBiaW5kaW5ncy5zY3JvbGxYICYmIHggYHRoaXMuX3N0YXRlLiR7YmluZGluZ3Muc2Nyb2xsWH1gO1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsWSA9IGJpbmRpbmdzLnNjcm9sbFkgJiYgeCBgdGhpcy5fc3RhdGUuJHtiaW5kaW5ncy5zY3JvbGxZfWA7XG5cdCAgICAgICAgICAgICAgICByZW5kZXJlci5tZXRhX2JpbmRpbmdzLnB1c2goYiBgXG5cdFx0XHRcdFx0aWYgKCR7Y29uZGl0aW9ufSkge1xuXHRcdFx0XHRcdFx0QF9zY3JvbGxUbygke3Njcm9sbFggfHwgJ0Bfd2luZG93LnBhZ2VYT2Zmc2V0J30sICR7c2Nyb2xsWSB8fCAnQF93aW5kb3cucGFnZVlPZmZzZXQnfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCR7c2Nyb2xsWCAmJiBgJHtzY3JvbGxYfSA9IEBfd2luZG93LnBhZ2VYT2Zmc2V0O2B9XG5cdFx0XHRcdFx0JHtzY3JvbGxZICYmIGAke3Njcm9sbFl9ID0gQF93aW5kb3cucGFnZVlPZmZzZXQ7YH1cblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgICAgICBibG9jay5ldmVudF9saXN0ZW5lcnMucHVzaCh4IGBcblx0XHRcdFx0XHRAbGlzdGVuKEBfd2luZG93LCBcIiR7ZXZlbnR9XCIsICgpID0+IHtcblx0XHRcdFx0XHRcdCR7c2Nyb2xsaW5nfSA9IHRydWU7XG5cdFx0XHRcdFx0XHRAX2NsZWFyVGltZW91dCgke3Njcm9sbGluZ190aW1lb3V0fSk7XG5cdFx0XHRcdFx0XHQke3Njcm9sbGluZ190aW1lb3V0fSA9IEBfc2V0VGltZW91dCgke2NsZWFyX3Njcm9sbGluZ30sIDEwMCk7XG5cdFx0XHRcdFx0XHQke2ZufSgpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdGApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcHJvcHMuZm9yRWFjaChwcm9wID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5tZXRhX2JpbmRpbmdzLnB1c2goYiBgdGhpcy5fc3RhdGUuJHtwcm9wLm5hbWV9ID0gQF93aW5kb3cuJHtwcm9wLnZhbHVlfTtgKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgYmxvY2suZXZlbnRfbGlzdGVuZXJzLnB1c2goeCBgXG5cdFx0XHRcdFx0QGxpc3RlbihAX3dpbmRvdywgXCIke2V2ZW50fVwiLCAke2ZufSlcblx0XHRcdFx0YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29tcG9uZW50LnBhcnRseV9ob2lzdGVkLnB1c2goYiBgXG5cdFx0XHRcdGZ1bmN0aW9uICR7aWR9KCkge1xuXHRcdFx0XHRcdCR7cHJvcHMubWFwKHByb3AgPT4gcmVuZGVyZXIuaW52YWxpZGF0ZShwcm9wLm5hbWUsIHggYCR7cHJvcC5uYW1lfSA9IEBfd2luZG93LiR7cHJvcC52YWx1ZX1gKSl9XG5cdFx0XHRcdH1cblx0XHRcdGApO1xuXHQgICAgICAgICAgICBibG9jay5jaHVua3MuaW5pdC5wdXNoKGIgYFxuXHRcdFx0XHRAYWRkX3JlbmRlcl9jYWxsYmFjaygke2ZufSk7XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgY29tcG9uZW50Lmhhc19yZWFjdGl2ZV9hc3NpZ25tZW50cyA9IHRydWU7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLy8gc3BlY2lhbCBjYXNlLi4uIG1pZ2h0IG5lZWQgdG8gYWJzdHJhY3QgdGhpcyBvdXQgaWYgd2UgYWRkIG1vcmUgc3BlY2lhbCBjYXNlc1xuXHQgICAgICAgIGlmIChiaW5kaW5ncy5zY3JvbGxYIHx8IGJpbmRpbmdzLnNjcm9sbFkpIHtcblx0ICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gcmVuZGVyZXIuZGlydHkoW2JpbmRpbmdzLnNjcm9sbFgsIGJpbmRpbmdzLnNjcm9sbFldLmZpbHRlcihCb29sZWFuKSk7XG5cdCAgICAgICAgICAgIGNvbnN0IHNjcm9sbFggPSBiaW5kaW5ncy5zY3JvbGxYID8gcmVuZGVyZXIucmVmZXJlbmNlKGJpbmRpbmdzLnNjcm9sbFgpIDogeCBgQF93aW5kb3cucGFnZVhPZmZzZXRgO1xuXHQgICAgICAgICAgICBjb25zdCBzY3JvbGxZID0gYmluZGluZ3Muc2Nyb2xsWSA/IHJlbmRlcmVyLnJlZmVyZW5jZShiaW5kaW5ncy5zY3JvbGxZKSA6IHggYEBfd2luZG93LnBhZ2VZT2Zmc2V0YDtcblx0ICAgICAgICAgICAgYmxvY2suY2h1bmtzLnVwZGF0ZS5wdXNoKGIgYFxuXHRcdFx0XHRpZiAoJHtjb25kaXRpb259ICYmICEke3Njcm9sbGluZ30pIHtcblx0XHRcdFx0XHQke3Njcm9sbGluZ30gPSB0cnVlO1xuXHRcdFx0XHRcdEBfY2xlYXJUaW1lb3V0KCR7c2Nyb2xsaW5nX3RpbWVvdXR9KTtcblx0XHRcdFx0XHRAX3Njcm9sbFRvKCR7c2Nyb2xsWH0sICR7c2Nyb2xsWX0pO1xuXHRcdFx0XHRcdCR7c2Nyb2xsaW5nX3RpbWVvdXR9ID0gQF9zZXRUaW1lb3V0KCR7Y2xlYXJfc2Nyb2xsaW5nfSwgMTAwKTtcblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIGFub3RoZXIgc3BlY2lhbCBjYXNlLiAoSSdtIHN0YXJ0aW5nIHRvIHRoaW5rIHRoZXNlIGFyZSBhbGwgc3BlY2lhbCBjYXNlcy4pXG5cdCAgICAgICAgaWYgKGJpbmRpbmdzLm9ubGluZSkge1xuXHQgICAgICAgICAgICBjb25zdCBpZCA9IGJsb2NrLmdldF91bmlxdWVfbmFtZShgb25saW5lc3RhdHVzY2hhbmdlZGApO1xuXHQgICAgICAgICAgICBjb25zdCBuYW1lID0gYmluZGluZ3Mub25saW5lO1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfdG9fY29udGV4dChpZC5uYW1lKTtcblx0ICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gcmVuZGVyZXIucmVmZXJlbmNlKGlkLm5hbWUpO1xuXHQgICAgICAgICAgICBjb21wb25lbnQucGFydGx5X2hvaXN0ZWQucHVzaChiIGBcblx0XHRcdFx0ZnVuY3Rpb24gJHtpZH0oKSB7XG5cdFx0XHRcdFx0JHtyZW5kZXJlci5pbnZhbGlkYXRlKG5hbWUsIHggYCR7bmFtZX0gPSBAX25hdmlnYXRvci5vbkxpbmVgKX1cblx0XHRcdFx0fVxuXHRcdFx0YCk7XG5cdCAgICAgICAgICAgIGJsb2NrLmNodW5rcy5pbml0LnB1c2goYiBgXG5cdFx0XHRcdEBhZGRfcmVuZGVyX2NhbGxiYWNrKCR7cmVmZXJlbmNlfSk7XG5cdFx0XHRgKTtcblx0ICAgICAgICAgICAgYmxvY2suZXZlbnRfbGlzdGVuZXJzLnB1c2goeCBgQGxpc3RlbihAX3dpbmRvdywgXCJvbmxpbmVcIiwgJHtyZWZlcmVuY2V9KWAsIHggYEBsaXN0ZW4oQF93aW5kb3csIFwib2ZmbGluZVwiLCAke3JlZmVyZW5jZX0pYCk7XG5cdCAgICAgICAgICAgIGNvbXBvbmVudC5oYXNfcmVhY3RpdmVfYXNzaWdubWVudHMgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxpbmsobmV4dCwgcHJldikge1xuXHQgICAgcHJldi5uZXh0ID0gbmV4dDtcblx0ICAgIGlmIChuZXh0KVxuXHQgICAgICAgIG5leHQucHJldiA9IHByZXY7XG5cdH1cblxuXHRjb25zdCB3cmFwcGVycyA9IHtcblx0ICAgIEF3YWl0QmxvY2s6IEF3YWl0QmxvY2tXcmFwcGVyLFxuXHQgICAgQm9keTogQm9keVdyYXBwZXIsXG5cdCAgICBDb21tZW50OiBudWxsLFxuXHQgICAgRGVidWdUYWc6IERlYnVnVGFnV3JhcHBlcixcblx0ICAgIEVhY2hCbG9jazogRWFjaEJsb2NrV3JhcHBlcixcblx0ICAgIEVsZW1lbnQ6IEVsZW1lbnRXcmFwcGVyLFxuXHQgICAgSGVhZDogSGVhZFdyYXBwZXIsXG5cdCAgICBJZkJsb2NrOiBJZkJsb2NrV3JhcHBlcixcblx0ICAgIElubGluZUNvbXBvbmVudDogSW5saW5lQ29tcG9uZW50V3JhcHBlcixcblx0ICAgIE11c3RhY2hlVGFnOiBNdXN0YWNoZVRhZ1dyYXBwZXIsXG5cdCAgICBPcHRpb25zOiBudWxsLFxuXHQgICAgUmF3TXVzdGFjaGVUYWc6IFJhd011c3RhY2hlVGFnV3JhcHBlcixcblx0ICAgIFNsb3Q6IFNsb3RXcmFwcGVyLFxuXHQgICAgVGV4dDogVGV4dFdyYXBwZXIsXG5cdCAgICBUaXRsZTogVGl0bGVXcmFwcGVyLFxuXHQgICAgV2luZG93OiBXaW5kb3dXcmFwcGVyXG5cdH07XG5cdGZ1bmN0aW9uIHRyaW1tYWJsZV9hdChjaGlsZCwgbmV4dF9zaWJsaW5nKSB7XG5cdCAgICAvLyBXaGl0ZXNwYWNlIGlzIHRyaW1tYWJsZSBpZiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuXHQgICAgLy8gVGhlIGNoaWxkIGFuZCBpdHMgc2libGluZyBzaGFyZSBhIGNvbW1vbiBuZWFyZXN0IGVhY2ggYmxvY2sgKG5vdCBhdCBhbiBlYWNoIGJsb2NrIGJvdW5kYXJ5KVxuXHQgICAgLy8gVGhlIG5leHQgc2libGluZydzIHByZXZpb3VzIG5vZGUgaXMgYW4gZWFjaCBibG9ja1xuXHQgICAgcmV0dXJuIChuZXh0X3NpYmxpbmcubm9kZS5maW5kX25lYXJlc3QoL0VhY2hCbG9jay8pID09PSBjaGlsZC5maW5kX25lYXJlc3QoL0VhY2hCbG9jay8pKSB8fCBuZXh0X3NpYmxpbmcubm9kZS5wcmV2LnR5cGUgPT09ICdFYWNoQmxvY2snO1xuXHR9XG5cdGNsYXNzIEZyYWdtZW50V3JhcHBlciB7XG5cdCAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYmxvY2ssIG5vZGVzLCBwYXJlbnQsIHN0cmlwX3doaXRlc3BhY2UsIG5leHRfc2libGluZykge1xuXHQgICAgICAgIHRoaXMubm9kZXMgPSBbXTtcblx0ICAgICAgICBsZXQgbGFzdF9jaGlsZDtcblx0ICAgICAgICBsZXQgd2luZG93X3dyYXBwZXI7XG5cdCAgICAgICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG5cdCAgICAgICAgd2hpbGUgKGktLSkge1xuXHQgICAgICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVzW2ldO1xuXHQgICAgICAgICAgICBpZiAoIWNoaWxkLnR5cGUpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWlzc2luZyB0eXBlYCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCEoY2hpbGQudHlwZSBpbiB3cmFwcGVycykpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVE9ETyBpbXBsZW1lbnQgJHtjaGlsZC50eXBlfWApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSDigJQgdGhpcyBpcyBhbiBlYXN5IHdheSB0byByZW1vdmUgd2hpdGVzcGFjZSBzdXJyb3VuZGluZ1xuXHQgICAgICAgICAgICAvLyA8c3ZlbHRlOndpbmRvdy8+LiBsaWwgaGFja3kgYnV0IGl0IHdvcmtzXG5cdCAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnV2luZG93Jykge1xuXHQgICAgICAgICAgICAgICAgd2luZG93X3dyYXBwZXIgPSBuZXcgV2luZG93V3JhcHBlcihyZW5kZXJlciwgYmxvY2ssIHBhcmVudCwgY2hpbGQpO1xuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgbGV0IHsgZGF0YSB9ID0gY2hpbGQ7XG5cdCAgICAgICAgICAgICAgICAvLyBXZSB3YW50IHRvIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIGluc2lkZSBhbiBlbGVtZW50L2NvbXBvbmVudC9ibG9jayxcblx0ICAgICAgICAgICAgICAgIC8vICp1bmxlc3MqIHRoZXJlIGlzIG5vIHdoaXRlc3BhY2UgYmV0d2VlbiB0aGlzIG5vZGUgYW5kIGl0cyBuZXh0IHNpYmxpbmdcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZF90cmltID0gKG5leHRfc2libGluZyA/IChuZXh0X3NpYmxpbmcubm9kZS50eXBlID09PSAnVGV4dCcgJiYgL15cXHMvLnRlc3QobmV4dF9zaWJsaW5nLm5vZGUuZGF0YSkgJiYgdHJpbW1hYmxlX2F0KGNoaWxkLCBuZXh0X3NpYmxpbmcpKSA6ICFjaGlsZC5oYXNfYW5jZXN0b3IoJ0VhY2hCbG9jaycpKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkX3RyaW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRyaW1fZW5kKGRhdGEpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBnbHVlIHRleHQgbm9kZXMgKHdoaWNoIGNvdWxkIGUuZy4gYmUgc2VwYXJhdGVkIGJ5IGNvbW1lbnRzKSB0b2dldGhlclxuXHQgICAgICAgICAgICAgICAgaWYgKGxhc3RfY2hpbGQgJiYgbGFzdF9jaGlsZC5ub2RlLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgICAgIGxhc3RfY2hpbGQuZGF0YSA9IGRhdGEgKyBsYXN0X2NoaWxkLmRhdGE7XG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gbmV3IFRleHRXcmFwcGVyKHJlbmRlcmVyLCBibG9jaywgcGFyZW50LCBjaGlsZCwgZGF0YSk7XG5cdCAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5za2lwKVxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy51bnNoaWZ0KHdyYXBwZXIpO1xuXHQgICAgICAgICAgICAgICAgbGluayhsYXN0X2NoaWxkLCBsYXN0X2NoaWxkID0gd3JhcHBlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBXcmFwcGVyID0gd3JhcHBlcnNbY2hpbGQudHlwZV07XG5cdCAgICAgICAgICAgICAgICBpZiAoIVdyYXBwZXIpXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gbmV3IFdyYXBwZXIocmVuZGVyZXIsIGJsb2NrLCBwYXJlbnQsIGNoaWxkLCBzdHJpcF93aGl0ZXNwYWNlLCBsYXN0X2NoaWxkIHx8IG5leHRfc2libGluZyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLnVuc2hpZnQod3JhcHBlcik7XG5cdCAgICAgICAgICAgICAgICBsaW5rKGxhc3RfY2hpbGQsIGxhc3RfY2hpbGQgPSB3cmFwcGVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc3RyaXBfd2hpdGVzcGFjZSkge1xuXHQgICAgICAgICAgICBjb25zdCBmaXJzdCA9IHRoaXMubm9kZXNbMF07XG5cdCAgICAgICAgICAgIGlmIChmaXJzdCAmJiBmaXJzdC5ub2RlLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgZmlyc3QuZGF0YSA9IHRyaW1fc3RhcnQoZmlyc3QuZGF0YSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWZpcnN0LmRhdGEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdC52YXIgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuc2hpZnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ub2Rlc1swXSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzWzBdLnByZXYgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAod2luZG93X3dyYXBwZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5ub2Rlcy51bnNoaWZ0KHdpbmRvd193cmFwcGVyKTtcblx0ICAgICAgICAgICAgbGluayhsYXN0X2NoaWxkLCB3aW5kb3dfd3JhcHBlcik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKSB7XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIHRoaXMubm9kZXNbaV0ucmVuZGVyKGJsb2NrLCBwYXJlbnRfbm9kZSwgcGFyZW50X25vZGVzKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBSZW5kZXJlciB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIG9wdGlvbnMpIHtcblx0ICAgICAgICB0aGlzLmNvbnRleHQgPSBbXTtcblx0ICAgICAgICB0aGlzLmluaXRpYWxfY29udGV4dCA9IFtdO1xuXHQgICAgICAgIHRoaXMuY29udGV4dF9sb29rdXAgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgdGhpcy5ibG9ja3MgPSBbXTtcblx0ICAgICAgICB0aGlzLnJlYWRvbmx5ID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMubWV0YV9iaW5kaW5ncyA9IFtdOyAvLyBpbml0aWFsIHZhbHVlcyBmb3IgZS5nLiB3aW5kb3cuaW5uZXJXaWR0aCwgaWYgdGhlcmUncyBhIDxzdmVsdGU6d2luZG93PiBtZXRhIHRhZ1xuXHQgICAgICAgIHRoaXMuYmluZGluZ19ncm91cHMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG5cdCAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgICAgICB0aGlzLmxvY2F0ZSA9IGNvbXBvbmVudC5sb2NhdGU7IC8vIFRPRE8gbWVzc3lcblx0ICAgICAgICB0aGlzLmZpbGVfdmFyID0gb3B0aW9ucy5kZXYgJiYgdGhpcy5jb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKCdmaWxlJyk7XG5cdCAgICAgICAgY29tcG9uZW50LnZhcnMuZmlsdGVyKHYgPT4gIXYuaG9pc3RhYmxlIHx8ICh2LmV4cG9ydF9uYW1lICYmICF2Lm1vZHVsZSkpLmZvckVhY2godiA9PiB0aGlzLmFkZF90b19jb250ZXh0KHYubmFtZSkpO1xuXHQgICAgICAgIC8vIGVuc3VyZSBzdG9yZSB2YWx1ZXMgYXJlIGluY2x1ZGVkIGluIGNvbnRleHRcblx0ICAgICAgICBjb21wb25lbnQudmFycy5maWx0ZXIodiA9PiB2LnN1YnNjcmliYWJsZSkuZm9yRWFjaCh2ID0+IHRoaXMuYWRkX3RvX2NvbnRleHQoYCQke3YubmFtZX1gKSk7XG5cdCAgICAgICAgcmVzZXJ2ZWRfa2V5d29yZHMuZm9yRWFjaChrZXl3b3JkID0+IHtcblx0ICAgICAgICAgICAgaWYgKGNvbXBvbmVudC52YXJfbG9va3VwLmhhcyhrZXl3b3JkKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGRfdG9fY29udGV4dChrZXl3b3JkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmIChjb21wb25lbnQuc2xvdHMuc2l6ZSA+IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdG9fY29udGV4dCgnJCRzY29wZScpO1xuXHQgICAgICAgICAgICB0aGlzLmFkZF90b19jb250ZXh0KCckJHNsb3RzJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmJpbmRpbmdfZ3JvdXBzLnNpemUgPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkX3RvX2NvbnRleHQoJyQkYmluZGluZ19ncm91cHMnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gbWFpbiBibG9ja1xuXHQgICAgICAgIHRoaXMuYmxvY2sgPSBuZXcgQmxvY2skMSh7XG5cdCAgICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLFxuXHQgICAgICAgICAgICBuYW1lOiBudWxsLFxuXHQgICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50Jyxcblx0ICAgICAgICAgICAga2V5OiBudWxsLFxuXHQgICAgICAgICAgICBiaW5kaW5nczogbmV3IE1hcCgpLFxuXHQgICAgICAgICAgICBkZXBlbmRlbmNpZXM6IG5ldyBTZXQoKSxcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmJsb2NrLmhhc191cGRhdGVfbWV0aG9kID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmZyYWdtZW50ID0gbmV3IEZyYWdtZW50V3JhcHBlcih0aGlzLCB0aGlzLmJsb2NrLCBjb21wb25lbnQuZnJhZ21lbnQuY2hpbGRyZW4sIG51bGwsIHRydWUsIG51bGwpO1xuXHQgICAgICAgIC8vIFRPRE8gbWVzc3lcblx0ICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgQmxvY2skMSkge1xuXHQgICAgICAgICAgICAgICAgYmxvY2suYXNzaWduX3ZhcmlhYmxlX25hbWVzKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLmJsb2NrLmFzc2lnbl92YXJpYWJsZV9uYW1lcygpO1xuXHQgICAgICAgIHRoaXMuZnJhZ21lbnQucmVuZGVyKHRoaXMuYmxvY2ssIG51bGwsIHggYCNub2Rlc2ApO1xuXHQgICAgICAgIHRoaXMuY29udGV4dF9vdmVyZmxvdyA9IHRoaXMuY29udGV4dC5sZW5ndGggPiAzMTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZm9yRWFjaChtZW1iZXIgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCB7IHZhcmlhYmxlIH0gPSBtZW1iZXI7XG5cdCAgICAgICAgICAgIGlmICh2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgbWVtYmVyLnByaW9yaXR5ICs9IDI7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUubXV0YXRlZCB8fCB2YXJpYWJsZS5yZWFzc2lnbmVkKVxuXHQgICAgICAgICAgICAgICAgICAgIG1lbWJlci5wcmlvcml0eSArPSA0O1xuXHQgICAgICAgICAgICAgICAgLy8gdGhlc2UgZGV0ZXJtaW5lIHdoZXRoZXIgdmFyaWFibGUgaXMgaW5jbHVkZWQgaW4gaW5pdGlhbCBjb250ZXh0XG5cdCAgICAgICAgICAgICAgICAvLyBhcnJheSwgc28gbXVzdCBoYXZlIHRoZSBoaWdoZXN0IHByaW9yaXR5XG5cdCAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUuZXhwb3J0X25hbWUpXG5cdCAgICAgICAgICAgICAgICAgICAgbWVtYmVyLnByaW9yaXR5ICs9IDE2O1xuXHQgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLnJlZmVyZW5jZWQpXG5cdCAgICAgICAgICAgICAgICAgICAgbWVtYmVyLnByaW9yaXR5ICs9IDMyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG1lbWJlci5pc19ub25fY29udGV4dHVhbCkge1xuXHQgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdmFyaWFibGUgaXMgaW5jbHVkZWQgaW4gaW5pdGlhbCBjb250ZXh0XG5cdCAgICAgICAgICAgICAgICAvLyBhcnJheSwgc28gbXVzdCBoYXZlIHRoZSBoaWdoZXN0IHByaW9yaXR5XG5cdCAgICAgICAgICAgICAgICBtZW1iZXIucHJpb3JpdHkgKz0gODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoIW1lbWJlci5pc19jb250ZXh0dWFsKSB7XG5cdCAgICAgICAgICAgICAgICBtZW1iZXIucHJpb3JpdHkgKz0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5zb3J0KChhLCBiKSA9PiAoYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpIHx8IChhLmluZGV4LnZhbHVlIC0gYi5pbmRleC52YWx1ZSkpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5mb3JFYWNoKChtZW1iZXIsIGkpID0+IG1lbWJlci5pbmRleC52YWx1ZSA9IGkpO1xuXHQgICAgICAgIGxldCBpID0gdGhpcy5jb250ZXh0Lmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMuY29udGV4dFtpXTtcblx0ICAgICAgICAgICAgaWYgKG1lbWJlci52YXJpYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG1lbWJlci52YXJpYWJsZS5yZWZlcmVuY2VkIHx8IG1lbWJlci52YXJpYWJsZS5leHBvcnRfbmFtZSlcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChtZW1iZXIuaXNfbm9uX2NvbnRleHR1YWwpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuaW5pdGlhbF9jb250ZXh0ID0gdGhpcy5jb250ZXh0LnNsaWNlKDAsIGkgKyAxKTtcblx0ICAgIH1cblx0ICAgIGFkZF90b19jb250ZXh0KG5hbWUsIGNvbnRleHR1YWwgPSBmYWxzZSkge1xuXHQgICAgICAgIGlmICghdGhpcy5jb250ZXh0X2xvb2t1cC5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgY29uc3QgbWVtYmVyID0ge1xuXHQgICAgICAgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgICAgICAgIGluZGV4OiB7IHR5cGU6ICdMaXRlcmFsJywgdmFsdWU6IHRoaXMuY29udGV4dC5sZW5ndGggfSxcblx0ICAgICAgICAgICAgICAgIGlzX2NvbnRleHR1YWw6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNfbm9uX2NvbnRleHR1YWw6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgdmFyaWFibGU6IG51bGwsXG5cdCAgICAgICAgICAgICAgICBwcmlvcml0eTogMFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHRfbG9va3VwLnNldChuYW1lLCBtZW1iZXIpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQucHVzaChtZW1iZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBtZW1iZXIgPSB0aGlzLmNvbnRleHRfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICBpZiAoY29udGV4dHVhbCkge1xuXHQgICAgICAgICAgICBtZW1iZXIuaXNfY29udGV4dHVhbCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBtZW1iZXIuaXNfbm9uX2NvbnRleHR1YWwgPSB0cnVlO1xuXHQgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IHRoaXMuY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICBtZW1iZXIudmFyaWFibGUgPSB2YXJpYWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG1lbWJlcjtcblx0ICAgIH1cblx0ICAgIGludmFsaWRhdGUobmFtZSwgdmFsdWUpIHtcblx0ICAgICAgICBjb25zdCB2YXJpYWJsZSA9IHRoaXMuY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMuY29udGV4dF9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgIGlmICh2YXJpYWJsZSAmJiAodmFyaWFibGUuc3Vic2NyaWJhYmxlICYmICh2YXJpYWJsZS5yZWFzc2lnbmVkIHx8IHZhcmlhYmxlLmV4cG9ydF9uYW1lKSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHggYCR7YCQkc3Vic2NyaWJlXyR7bmFtZX1gfSgkJGludmFsaWRhdGUoJHttZW1iZXIuaW5kZXh9LCAke3ZhbHVlIHx8IG5hbWV9KSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobmFtZVswXSA9PT0gJyQnICYmIG5hbWVbMV0gIT09ICckJykge1xuXHQgICAgICAgICAgICByZXR1cm4geCBgJHtuYW1lLnNsaWNlKDEpfS5zZXQoJHt2YWx1ZSB8fCBuYW1lfSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodmFyaWFibGUgJiYgKHZhcmlhYmxlLm1vZHVsZSB8fCAoIXZhcmlhYmxlLnJlZmVyZW5jZWQgJiZcblx0ICAgICAgICAgICAgIXZhcmlhYmxlLmlzX3JlYWN0aXZlX2RlcGVuZGVuY3kgJiZcblx0ICAgICAgICAgICAgIXZhcmlhYmxlLmV4cG9ydF9uYW1lICYmXG5cdCAgICAgICAgICAgICFuYW1lLnN0YXJ0c1dpdGgoJyQkJykpKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdmFsdWUgfHwgbmFtZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHZhbHVlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB4IGAkJGludmFsaWRhdGUoJHttZW1iZXIuaW5kZXh9LCAke3ZhbHVlfSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBpZiB0aGlzIGlzIGEgcmVhY3RpdmUgZGVjbGFyYXRpb24sIGludmFsaWRhdGUgZGVwZW5kZW5jaWVzIHJlY3Vyc2l2ZWx5XG5cdCAgICAgICAgY29uc3QgZGVwcyA9IG5ldyBTZXQoW25hbWVdKTtcblx0ICAgICAgICBkZXBzLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IHJlYWN0aXZlX2RlY2xhcmF0aW9ucyA9IHRoaXMuY29tcG9uZW50LnJlYWN0aXZlX2RlY2xhcmF0aW9ucy5maWx0ZXIoeCA9PiB4LmFzc2lnbmVlcy5oYXMobmFtZSkpO1xuXHQgICAgICAgICAgICByZWFjdGl2ZV9kZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsYXJhdGlvbiA9PiB7XG5cdCAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbi5kZXBlbmRlbmNpZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBkZXBzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvLyBUT0RPIGlkZWFsbHkgZ2xvYmFscyBldGMgd291bGRuJ3QgYmUgaGVyZSBpbiB0aGUgZmlyc3QgcGxhY2Vcblx0ICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IEFycmF5LmZyb20oZGVwcykuZmlsdGVyKG4gPT4gdGhpcy5jb250ZXh0X2xvb2t1cC5oYXMobikpO1xuXHQgICAgICAgIGlmICghZmlsdGVyZWQubGVuZ3RoKVxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICByZXR1cm4gZmlsdGVyZWRcblx0ICAgICAgICAgICAgLm1hcChuID0+IHggYCQkaW52YWxpZGF0ZSgke3RoaXMuY29udGV4dF9sb29rdXAuZ2V0KG4pLmluZGV4fSwgJHtufSlgKVxuXHQgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9LCAke3Joc31gKTtcblx0ICAgIH1cblx0ICAgIGRpcnR5KG5hbWVzLCBpc19yZWFjdGl2ZV9kZWNsYXJhdGlvbiA9IGZhbHNlKSB7XG5cdCAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzO1xuXHQgICAgICAgIGNvbnN0IGRpcnR5ID0gKGlzX3JlYWN0aXZlX2RlY2xhcmF0aW9uXG5cdCAgICAgICAgICAgID8geCBgJCRzZWxmLiQkLmRpcnR5YFxuXHQgICAgICAgICAgICA6IHggYCNkaXJ0eWApO1xuXHQgICAgICAgIGNvbnN0IGdldF9iaXRtYXNrID0gKCkgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCBiaXRtYXNrID0gW107XG5cdCAgICAgICAgICAgIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IG1lbWJlciA9IHJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIGlmICghbWVtYmVyKVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgIGlmIChtZW1iZXIuaW5kZXgudmFsdWUgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnNldCBpbmRleGApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtZW1iZXIuaW5kZXgudmFsdWU7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBpID0gKHZhbHVlIC8gMzEpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAxIDw8ICh2YWx1ZSAlIDMxKTtcblx0ICAgICAgICAgICAgICAgIGlmICghYml0bWFza1tpXSlcblx0ICAgICAgICAgICAgICAgICAgICBiaXRtYXNrW2ldID0geyBuOiAwLCBuYW1lczogW10gfTtcblx0ICAgICAgICAgICAgICAgIGJpdG1hc2tbaV0ubiB8PSBuO1xuXHQgICAgICAgICAgICAgICAgYml0bWFza1tpXS5uYW1lcy5wdXNoKG5hbWUpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIGJpdG1hc2s7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICAvLyBUT0RPOiBjb250ZXh0LW92ZXJmbG93IG1ha2UgaXQgbGVzcyBncm9zc1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8vIFVzaW5nIGEgUGFyZW50aGVzaXplZEV4cHJlc3Npb24gYWxsb3dzIHVzIHRvIGNyZWF0ZVxuXHQgICAgICAgICAgICAvLyB0aGUgZXhwcmVzc2lvbiBsYXppbHkuIFRPRE8gd291bGQgYmUgYmV0dGVyIGlmXG5cdCAgICAgICAgICAgIC8vIGNvbnRleHQgd2FzIGRldGVybWluZWQgYmVmb3JlIHJlbmRlcmluZywgc28gdGhhdFxuXHQgICAgICAgICAgICAvLyB0aGlzIGluZGlyZWN0aW9uIHdhcyB1bm5lY2Vzc2FyeVxuXHQgICAgICAgICAgICB0eXBlOiAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nLFxuXHQgICAgICAgICAgICBnZXQgZXhwcmVzc2lvbigpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGJpdG1hc2sgPSBnZXRfYml0bWFzaygpO1xuXHQgICAgICAgICAgICAgICAgaWYgKCFiaXRtYXNrLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB4IGAke2RpcnR5fSAmIC8qJHtuYW1lcy5qb2luKCcsICcpfSovIDBgO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHJlbmRlcmVyLmNvbnRleHRfb3ZlcmZsb3cpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gYml0bWFza1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChiLCBpKSA9PiAoeyBiLCBpIH0pKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCh7IGIgfSkgPT4gYilcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoeyBiLCBpIH0pID0+IHggYCR7ZGlydHl9WyR7aX1dICYgLyoke2IubmFtZXMuam9pbignLCAnKX0qLyAke2Iubn1gKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9IHwgJHtyaHN9YCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4geCBgJHtkaXJ0eX0gJiAvKiR7bmFtZXMuam9pbignLCAnKX0qLyAke2JpdG1hc2tbMF0ubn1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0ICAgIHJlZmVyZW5jZShub2RlKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICBub2RlID0geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IG5vZGUgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgeyBuYW1lLCBub2RlcyB9ID0gZmxhdHRlbl9yZWZlcmVuY2Uobm9kZSk7XG5cdCAgICAgICAgY29uc3QgbWVtYmVyID0gdGhpcy5jb250ZXh0X2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgLy8gVE9ETyBpcyB0aGlzIGNvcnJlY3Q/XG5cdCAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY29tcG9uZW50LmFkZF9yZWZlcmVuY2UobmFtZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChtZW1iZXIgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHggYC8qJHttZW1iZXIubmFtZX0qLyAjY3R4WyR7bWVtYmVyLmluZGV4fV1gO1xuXHQgICAgICAgICAgICBpZiAobm9kZXNbMF0ubG9jKVxuXHQgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQub2JqZWN0LmxvYyA9IG5vZGVzWzBdLmxvYztcblx0ICAgICAgICAgICAgbm9kZXNbMF0gPSByZXBsYWNlbWVudDtcblx0ICAgICAgICAgICAgcmV0dXJuIG5vZGVzLnJlZHVjZSgobGhzLCByaHMpID0+IHggYCR7bGhzfS4ke3Joc31gKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICB9XG5cdCAgICByZW1vdmVfYmxvY2soYmxvY2spIHtcblx0ICAgICAgICB0aGlzLmJsb2Nrcy5zcGxpY2UodGhpcy5ibG9ja3MuaW5kZXhPZihibG9jayksIDEpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZG9tKGNvbXBvbmVudCwgb3B0aW9ucykge1xuXHQgICAgY29uc3QgeyBuYW1lIH0gPSBjb21wb25lbnQ7XG5cdCAgICBjb25zdCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcihjb21wb25lbnQsIG9wdGlvbnMpO1xuXHQgICAgY29uc3QgeyBibG9jayB9ID0gcmVuZGVyZXI7XG5cdCAgICBibG9jay5oYXNfb3V0cm9fbWV0aG9kID0gdHJ1ZTtcblx0ICAgIC8vIHByZXZlbnQgZnJhZ21lbnQgYmVpbmcgY3JlYXRlZCB0d2ljZSAoIzEwNjMpXG5cdCAgICBpZiAob3B0aW9ucy5jdXN0b21FbGVtZW50KVxuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jcmVhdGUucHVzaChiIGB0aGlzLmMgPSBAbm9vcDtgKTtcblx0ICAgIGNvbnN0IGJvZHkgPSBbXTtcblx0ICAgIGlmIChyZW5kZXJlci5maWxlX3Zhcikge1xuXHQgICAgICAgIGNvbnN0IGZpbGUgPSBjb21wb25lbnQuZmlsZSA/IHggYFwiJHtjb21wb25lbnQuZmlsZX1cImAgOiB4IGB1bmRlZmluZWRgO1xuXHQgICAgICAgIGJvZHkucHVzaChiIGBjb25zdCAke3JlbmRlcmVyLmZpbGVfdmFyfSA9ICR7ZmlsZX07YCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBjc3MgPSBjb21wb25lbnQuc3R5bGVzaGVldC5yZW5kZXIob3B0aW9ucy5maWxlbmFtZSwgIW9wdGlvbnMuY3VzdG9tRWxlbWVudCk7XG5cdCAgICBjb25zdCBzdHlsZXMgPSBjb21wb25lbnQuc3R5bGVzaGVldC5oYXNfc3R5bGVzICYmIG9wdGlvbnMuZGV2XG5cdCAgICAgICAgPyBgJHtjc3MuY29kZX1cXG4vKiMgc291cmNlTWFwcGluZ1VSTD0ke2Nzcy5tYXAudG9VcmwoKX0gKi9gXG5cdCAgICAgICAgOiBjc3MuY29kZTtcblx0ICAgIGNvbnN0IGFkZF9jc3MgPSBjb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKCdhZGRfY3NzJyk7XG5cdCAgICBjb25zdCBzaG91bGRfYWRkX2NzcyA9ICghb3B0aW9ucy5jdXN0b21FbGVtZW50ICYmXG5cdCAgICAgICAgISFzdHlsZXMgJiZcblx0ICAgICAgICBvcHRpb25zLmNzcyAhPT0gZmFsc2UpO1xuXHQgICAgaWYgKHNob3VsZF9hZGRfY3NzKSB7XG5cdCAgICAgICAgYm9keS5wdXNoKGIgYFxuXHRcdFx0ZnVuY3Rpb24gJHthZGRfY3NzfSgpIHtcblx0XHRcdFx0dmFyIHN0eWxlID0gQGVsZW1lbnQoXCJzdHlsZVwiKTtcblx0XHRcdFx0c3R5bGUuaWQgPSBcIiR7Y29tcG9uZW50LnN0eWxlc2hlZXQuaWR9LXN0eWxlXCI7XG5cdFx0XHRcdHN0eWxlLnRleHRDb250ZW50ID0gXCIke3N0eWxlc31cIjtcblx0XHRcdFx0QGFwcGVuZChAX2RvY3VtZW50LmhlYWQsIHN0eWxlKTtcblx0XHRcdH1cblx0XHRgKTtcblx0ICAgIH1cblx0ICAgIC8vIGZpeCBvcmRlclxuXHQgICAgLy8gVE9ETyB0aGUgZGVjb25mbGljdGVkIG5hbWVzIG9mIGJsb2NrcyBhcmUgcmV2ZXJzZWQuLi4gc2hvdWxkIHNldCB0aGVtIGhlcmVcblx0ICAgIGNvbnN0IGJsb2NrcyA9IHJlbmRlcmVyLmJsb2Nrcy5zbGljZSgpLnJldmVyc2UoKTtcblx0ICAgIGJvZHkucHVzaCguLi5ibG9ja3MubWFwKGJsb2NrID0+IHtcblx0ICAgICAgICAvLyBUT0RPIHRoaXMgaXMgYSBob3JyaWJsZSBtZXNzIOKAlCByZW5kZXJlci5ibG9ja3Ncblx0ICAgICAgICAvLyBjb250YWlucyBhIG1peHR1cmUgb2YgQmxvY2tzIGFuZCBOb2Rlc1xuXHQgICAgICAgIGlmIChibG9jay5yZW5kZXIpXG5cdCAgICAgICAgICAgIHJldHVybiBibG9jay5yZW5kZXIoKTtcblx0ICAgICAgICByZXR1cm4gYmxvY2s7XG5cdCAgICB9KSk7XG5cdCAgICBpZiAob3B0aW9ucy5kZXYgJiYgIW9wdGlvbnMuaHlkcmF0YWJsZSkge1xuXHQgICAgICAgIGJsb2NrLmNodW5rcy5jbGFpbS5wdXNoKGIgYHRocm93IG5ldyBAX0Vycm9yKFwib3B0aW9ucy5oeWRyYXRlIG9ubHkgd29ya3MgaWYgdGhlIGNvbXBvbmVudCB3YXMgY29tcGlsZWQgd2l0aCB0aGUgXFxgaHlkcmF0YWJsZTogdHJ1ZVxcYCBvcHRpb25cIik7YCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCB1c2VzX3Byb3BzID0gY29tcG9uZW50LnZhcl9sb29rdXAuaGFzKCckJHByb3BzJyk7XG5cdCAgICBjb25zdCB1c2VzX3Jlc3QgPSBjb21wb25lbnQudmFyX2xvb2t1cC5oYXMoJyQkcmVzdFByb3BzJyk7XG5cdCAgICBjb25zdCAkJHByb3BzID0gdXNlc19wcm9wcyB8fCB1c2VzX3Jlc3QgPyBgJCRuZXdfcHJvcHNgIDogYCQkcHJvcHNgO1xuXHQgICAgY29uc3QgcHJvcHMgPSBjb21wb25lbnQudmFycy5maWx0ZXIodmFyaWFibGUgPT4gIXZhcmlhYmxlLm1vZHVsZSAmJiB2YXJpYWJsZS5leHBvcnRfbmFtZSk7XG5cdCAgICBjb25zdCB3cml0YWJsZV9wcm9wcyA9IHByb3BzLmZpbHRlcih2YXJpYWJsZSA9PiB2YXJpYWJsZS53cml0YWJsZSk7XG5cdCAgICBjb25zdCBvbWl0X3Byb3BzX25hbWVzID0gY29tcG9uZW50LmdldF91bmlxdWVfbmFtZSgnb21pdF9wcm9wc19uYW1lcycpO1xuXHQgICAgY29uc3QgY29tcHV0ZV9yZXN0ID0geCBgQGNvbXB1dGVfcmVzdF9wcm9wcygkJHByb3BzLCAke29taXRfcHJvcHNfbmFtZXMubmFtZX0pYDtcblx0ICAgIGNvbnN0IHJlc3QgPSB1c2VzX3Jlc3QgPyBiIGBcblx0XHRjb25zdCAke29taXRfcHJvcHNfbmFtZXMubmFtZX0gPSBbJHtwcm9wcy5tYXAocHJvcCA9PiBgXCIke3Byb3AuZXhwb3J0X25hbWV9XCJgKS5qb2luKCcsJyl9XTtcblx0XHRsZXQgJCRyZXN0UHJvcHMgPSAke2NvbXB1dGVfcmVzdH07XG5cdGAgOiBudWxsO1xuXHQgICAgY29uc3Qgc2V0ID0gKHVzZXNfcHJvcHMgfHwgdXNlc19yZXN0IHx8IHdyaXRhYmxlX3Byb3BzLmxlbmd0aCA+IDAgfHwgY29tcG9uZW50LnNsb3RzLnNpemUgPiAwKVxuXHQgICAgICAgID8geCBgXG5cdFx0XHQkeyQkcHJvcHN9ID0+IHtcblx0XHRcdFx0JHt1c2VzX3Byb3BzICYmIHJlbmRlcmVyLmludmFsaWRhdGUoJyQkcHJvcHMnLCB4IGAkJHByb3BzID0gQGFzc2lnbihAYXNzaWduKHt9LCAkJHByb3BzKSwgQGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMoJCRuZXdfcHJvcHMpKWApfVxuXHRcdFx0XHQke3VzZXNfcmVzdCAmJiAhdXNlc19wcm9wcyAmJiB4IGAkJHByb3BzID0gQGFzc2lnbihAYXNzaWduKHt9LCAkJHByb3BzKSwgQGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMoJCRuZXdfcHJvcHMpKWB9XG5cdFx0XHRcdCR7dXNlc19yZXN0ICYmIHJlbmRlcmVyLmludmFsaWRhdGUoJyQkcmVzdFByb3BzJywgeCBgJCRyZXN0UHJvcHMgPSAke2NvbXB1dGVfcmVzdH1gKX1cblx0XHRcdFx0JHt3cml0YWJsZV9wcm9wcy5tYXAocHJvcCA9PiBiIGBpZiAoJyR7cHJvcC5leHBvcnRfbmFtZX0nIGluICR7JCRwcm9wc30pICR7cmVuZGVyZXIuaW52YWxpZGF0ZShwcm9wLm5hbWUsIHggYCR7cHJvcC5uYW1lfSA9ICR7JCRwcm9wc30uJHtwcm9wLmV4cG9ydF9uYW1lfWApfTtgKX1cblx0XHRcdFx0JHtjb21wb25lbnQuc2xvdHMuc2l6ZSA+IDAgJiZcbiAgICAgICAgICAgIGIgYGlmICgnJCRzY29wZScgaW4gJHskJHByb3BzfSkgJHtyZW5kZXJlci5pbnZhbGlkYXRlKCckJHNjb3BlJywgeCBgJCRzY29wZSA9ICR7JCRwcm9wc30uJCRzY29wZWApfTtgfVxuXHRcdFx0fVxuXHRcdGBcblx0ICAgICAgICA6IG51bGw7XG5cdCAgICBjb25zdCBhY2Nlc3NvcnMgPSBbXTtcblx0ICAgIGNvbnN0IG5vdF9lcXVhbCA9IGNvbXBvbmVudC5jb21wb25lbnRfb3B0aW9ucy5pbW11dGFibGUgPyB4IGBAbm90X2VxdWFsYCA6IHggYEBzYWZlX25vdF9lcXVhbGA7XG5cdCAgICBsZXQgZGV2X3Byb3BzX2NoZWNrO1xuXHQgICAgbGV0IGluamVjdF9zdGF0ZTtcblx0ICAgIGxldCBjYXB0dXJlX3N0YXRlO1xuXHQgICAgbGV0IHByb3BzX2luamVjdDtcblx0ICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG5cdCAgICAgICAgY29uc3QgdmFyaWFibGUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQocHJvcC5uYW1lKTtcblx0ICAgICAgICBpZiAoIXZhcmlhYmxlLndyaXRhYmxlIHx8IGNvbXBvbmVudC5jb21wb25lbnRfb3B0aW9ucy5hY2Nlc3NvcnMpIHtcblx0ICAgICAgICAgICAgYWNjZXNzb3JzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ01ldGhvZERlZmluaXRpb24nLFxuXHQgICAgICAgICAgICAgICAga2luZDogJ2dldCcsXG5cdCAgICAgICAgICAgICAgICBrZXk6IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBwcm9wLmV4cG9ydF9uYW1lIH0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogeCBgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR7cHJvcC5ob2lzdGFibGUgPyBwcm9wLm5hbWUgOiB4IGB0aGlzLiQkLmN0eFske3JlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChwcm9wLm5hbWUpLmluZGV4fV1gfVxuXHRcdFx0XHR9YFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgYWNjZXNzb3JzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ01ldGhvZERlZmluaXRpb24nLFxuXHQgICAgICAgICAgICAgICAga2luZDogJ2dldCcsXG5cdCAgICAgICAgICAgICAgICBrZXk6IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBwcm9wLmV4cG9ydF9uYW1lIH0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogeCBgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEBfRXJyb3IoXCI8JHtjb21wb25lbnQudGFnfT46IFByb3BzIGNhbm5vdCBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSB1bmxlc3MgY29tcGlsaW5nIHdpdGggJ2FjY2Vzc29yczogdHJ1ZScgb3IgJzxzdmVsdGU6b3B0aW9ucyBhY2Nlc3NvcnMvPidcIik7XG5cdFx0XHRcdH1gXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudF9vcHRpb25zLmFjY2Vzc29ycykge1xuXHQgICAgICAgICAgICBpZiAodmFyaWFibGUud3JpdGFibGUgJiYgIXJlbmRlcmVyLnJlYWRvbmx5Lmhhcyhwcm9wLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBhY2Nlc3NvcnMucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01ldGhvZERlZmluaXRpb24nLFxuXHQgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdzZXQnLFxuXHQgICAgICAgICAgICAgICAgICAgIGtleTogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHByb3AuZXhwb3J0X25hbWUgfSxcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeCBgZnVuY3Rpb24oJHtwcm9wLm5hbWV9KSB7XG5cdFx0XHRcdFx0XHR0aGlzLiRzZXQoeyAke3Byb3AuZXhwb3J0X25hbWV9OiAke3Byb3AubmFtZX0gfSk7XG5cdFx0XHRcdFx0XHRAZmx1c2goKTtcblx0XHRcdFx0XHR9YFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgICAgIGFjY2Vzc29ycy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTWV0aG9kRGVmaW5pdGlvbicsXG5cdCAgICAgICAgICAgICAgICAgICAga2luZDogJ3NldCcsXG5cdCAgICAgICAgICAgICAgICAgICAga2V5OiB7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogcHJvcC5leHBvcnRfbmFtZSB9LFxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB4IGBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEBfRXJyb3IoXCI8JHtjb21wb25lbnQudGFnfT46IENhbm5vdCBzZXQgcmVhZC1vbmx5IHByb3BlcnR5ICcke3Byb3AuZXhwb3J0X25hbWV9J1wiKTtcblx0XHRcdFx0XHR9YFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgYWNjZXNzb3JzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ01ldGhvZERlZmluaXRpb24nLFxuXHQgICAgICAgICAgICAgICAga2luZDogJ3NldCcsXG5cdCAgICAgICAgICAgICAgICBrZXk6IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBwcm9wLmV4cG9ydF9uYW1lIH0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogeCBgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgQF9FcnJvcihcIjwke2NvbXBvbmVudC50YWd9PjogUHJvcHMgY2Fubm90IGJlIHNldCBkaXJlY3RseSBvbiB0aGUgY29tcG9uZW50IGluc3RhbmNlIHVubGVzcyBjb21waWxpbmcgd2l0aCAnYWNjZXNzb3JzOiB0cnVlJyBvciAnPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycy8+J1wiKTtcblx0XHRcdFx0fWBcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAvLyBjaGVja2luZyB0aGF0IGV4cGVjdGVkIG9uZXMgd2VyZSBwYXNzZWRcblx0ICAgICAgICBjb25zdCBleHBlY3RlZCA9IHByb3BzLmZpbHRlcihwcm9wID0+IHByb3Aud3JpdGFibGUgJiYgIXByb3AuaW5pdGlhbGlzZWQpO1xuXHQgICAgICAgIGlmIChleHBlY3RlZC5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgZGV2X3Byb3BzX2NoZWNrID0gYiBgXG5cdFx0XHRcdGNvbnN0IHsgY3R4OiAjY3R4IH0gPSB0aGlzLiQkO1xuXHRcdFx0XHRjb25zdCBwcm9wcyA9ICR7b3B0aW9ucy5jdXN0b21FbGVtZW50ID8geCBgdGhpcy5hdHRyaWJ1dGVzYCA6IHggYG9wdGlvbnMucHJvcHMgfHwge31gfTtcblx0XHRcdFx0JHtleHBlY3RlZC5tYXAocHJvcCA9PiBiIGBcblx0XHRcdFx0aWYgKCR7cmVuZGVyZXIucmVmZXJlbmNlKHByb3AubmFtZSl9ID09PSB1bmRlZmluZWQgJiYgISgnJHtwcm9wLmV4cG9ydF9uYW1lfScgaW4gcHJvcHMpKSB7XG5cdFx0XHRcdFx0QF9jb25zb2xlLndhcm4oXCI8JHtjb21wb25lbnQudGFnfT4gd2FzIGNyZWF0ZWQgd2l0aG91dCBleHBlY3RlZCBwcm9wICcke3Byb3AuZXhwb3J0X25hbWV9J1wiKTtcblx0XHRcdFx0fWApfVxuXHRcdFx0YDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgY2FwdHVyYWJsZV92YXJzID0gY29tcG9uZW50LnZhcnMuZmlsdGVyKHYgPT4gIXYuaW50ZXJuYWwgJiYgIXYuZ2xvYmFsICYmICF2Lm5hbWUuc3RhcnRzV2l0aCgnJCQnKSk7XG5cdCAgICAgICAgaWYgKGNhcHR1cmFibGVfdmFycy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGNhcHR1cmVfc3RhdGUgPSB4IGAoKSA9PiAoeyAke2NhcHR1cmFibGVfdmFycy5tYXAocHJvcCA9PiBwIGAke3Byb3AubmFtZX1gKX0gfSlgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBpbmplY3RhYmxlX3ZhcnMgPSBjYXB0dXJhYmxlX3ZhcnMuZmlsdGVyKHYgPT4gIXYubW9kdWxlICYmIHYud3JpdGFibGUgJiYgdi5uYW1lWzBdICE9PSAnJCcpO1xuXHQgICAgICAgIGlmICh1c2VzX3Byb3BzIHx8IGluamVjdGFibGVfdmFycy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGluamVjdF9zdGF0ZSA9IHggYFxuXHRcdFx0XHQkeyQkcHJvcHN9ID0+IHtcblx0XHRcdFx0XHQke3VzZXNfcHJvcHMgJiYgcmVuZGVyZXIuaW52YWxpZGF0ZSgnJCRwcm9wcycsIHggYCQkcHJvcHMgPSBAYXNzaWduKEBhc3NpZ24oe30sICQkcHJvcHMpLCAkJG5ld19wcm9wcylgKX1cblx0XHRcdFx0XHQke2luamVjdGFibGVfdmFycy5tYXAodiA9PiBiIGBpZiAoJyR7di5uYW1lfScgaW4gJCRwcm9wcykgJHtyZW5kZXJlci5pbnZhbGlkYXRlKHYubmFtZSwgeCBgJHt2Lm5hbWV9ID0gJHskJHByb3BzfS4ke3YubmFtZX1gKX07YCl9XG5cdFx0XHRcdH1cblx0XHRcdGA7XG5cdCAgICAgICAgICAgIHByb3BzX2luamVjdCA9IGIgYFxuXHRcdFx0XHRpZiAoJCRwcm9wcyAmJiBcIiQkaW5qZWN0XCIgaW4gJCRwcm9wcykge1xuXHRcdFx0XHRcdCQkc2VsZi4kaW5qZWN0X3N0YXRlKCQkcHJvcHMuJCRpbmplY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHRgO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8vIGluc3RydW1lbnQgYXNzaWdubWVudHNcblx0ICAgIGlmIChjb21wb25lbnQuYXN0Lmluc3RhbmNlKSB7XG5cdCAgICAgICAgbGV0IHNjb3BlID0gY29tcG9uZW50Lmluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgIGNvbnN0IG1hcCA9IGNvbXBvbmVudC5pbnN0YW5jZV9zY29wZV9tYXA7XG5cdCAgICAgICAgbGV0IGV4ZWN1dGlvbl9jb250ZXh0ID0gbnVsbDtcblx0ICAgICAgICB3YWxrKGNvbXBvbmVudC5hc3QuaW5zdGFuY2UuY29udGVudCwge1xuXHQgICAgICAgICAgICBlbnRlcihub2RlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gbWFwLmdldChub2RlKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWV4ZWN1dGlvbl9jb250ZXh0ICYmICFzY29wZS5ibG9jaykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRpb25fY29udGV4dCA9IG5vZGU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV4ZWN1dGlvbl9jb250ZXh0ICYmIG5vZGUudHlwZSA9PT0gJ0xhYmVsZWRTdGF0ZW1lbnQnICYmIG5vZGUubGFiZWwubmFtZSA9PT0gJyQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXhlY3V0aW9uX2NvbnRleHQgPSBub2RlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBsZWF2ZShub2RlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGV4ZWN1dGlvbl9jb250ZXh0ID09PSBub2RlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXhlY3V0aW9uX2NvbnRleHQgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdVcGRhdGVFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzc2lnbmVlID0gbm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nID8gbm9kZS5sZWZ0IDogbm9kZS5hcmd1bWVudDtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxseSAoYGEgPSAxYCwgYGIuYyA9IDJgKSwgdGhlcmUnbGwgYmUgYSBzaW5nbGUgbmFtZVxuXHQgICAgICAgICAgICAgICAgICAgIC8vIChhIG9yIGIpLiBJbiBkZXN0cnVjdHVyaW5nIGNhc2VzIChgW2QsIGVdID0gW2UsIGRdYCkgdGhlcmVcblx0ICAgICAgICAgICAgICAgICAgICAvLyBtYXkgYmUgbW9yZSwgaW4gd2hpY2ggY2FzZSB3ZSBuZWVkIHRvIHRhY2sgdGhlIGV4dHJhIG9uZXNcblx0ICAgICAgICAgICAgICAgICAgICAvLyBvbnRvIHRoZSBpbml0aWFsIGZ1bmN0aW9uIGNhbGxcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lcyA9IG5ldyBTZXQoZXh0cmFjdF9uYW1lcyhhc3NpZ25lZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZShpbnZhbGlkYXRlKHJlbmRlcmVyLCBzY29wZSwgbm9kZSwgbmFtZXMsIGV4ZWN1dGlvbl9jb250ZXh0ID09PSBudWxsKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb21wb25lbnQucmV3cml0ZV9wcm9wcygoeyBuYW1lLCByZWFzc2lnbmVkLCBleHBvcnRfbmFtZSB9KSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYCQke25hbWV9YDtcblx0ICAgICAgICAgICAgY29uc3QgaSA9IHJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChgJCR7bmFtZX1gKS5pbmRleDtcblx0ICAgICAgICAgICAgY29uc3QgaW5zZXJ0ID0gKHJlYXNzaWduZWQgfHwgZXhwb3J0X25hbWUpXG5cdCAgICAgICAgICAgICAgICA/IGIgYCR7YCQkc3Vic2NyaWJlXyR7bmFtZX1gfSgpYFxuXHQgICAgICAgICAgICAgICAgOiBiIGBAY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsICR7bmFtZX0sICN2YWx1ZSA9PiAkJGludmFsaWRhdGUoJHtpfSwgJHt2YWx1ZX0gPSAjdmFsdWUpKWA7XG5cdCAgICAgICAgICAgIGlmIChjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmRldikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGIgYEB2YWxpZGF0ZV9zdG9yZSgke25hbWV9LCAnJHtuYW1lfScpOyAke2luc2VydH1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBpbnNlcnQ7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBhcmdzID0gW3ggYCQkc2VsZmBdO1xuXHQgICAgY29uc3QgaGFzX2ludmFsaWRhdGUgPSBwcm9wcy5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgY29tcG9uZW50Lmhhc19yZWFjdGl2ZV9hc3NpZ25tZW50cyB8fFxuXHQgICAgICAgIGNvbXBvbmVudC5zbG90cy5zaXplID4gMCB8fFxuXHQgICAgICAgIGNhcHR1cmVfc3RhdGUgfHxcblx0ICAgICAgICBpbmplY3Rfc3RhdGU7XG5cdCAgICBpZiAoaGFzX2ludmFsaWRhdGUpIHtcblx0ICAgICAgICBhcmdzLnB1c2goeCBgJCRwcm9wc2AsIHggYCQkaW52YWxpZGF0ZWApO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAvLyAkJHByb3BzIGFyZyBpcyBzdGlsbCBuZWVkZWQgZm9yIHVua25vd24gcHJvcCBjaGVja1xuXHQgICAgICAgIGFyZ3MucHVzaCh4IGAkJHByb3BzYCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBoYXNfY3JlYXRlX2ZyYWdtZW50ID0gY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYgfHwgYmxvY2suaGFzX2NvbnRlbnQoKTtcblx0ICAgIGlmIChoYXNfY3JlYXRlX2ZyYWdtZW50KSB7XG5cdCAgICAgICAgYm9keS5wdXNoKGIgYFxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50KCNjdHgpIHtcblx0XHRcdFx0JHtibG9jay5nZXRfY29udGVudHMoKX1cblx0XHRcdH1cblx0XHRgKTtcblx0ICAgIH1cblx0ICAgIGJvZHkucHVzaChiIGBcblx0XHQke2NvbXBvbmVudC5leHRyYWN0X2phdmFzY3JpcHQoY29tcG9uZW50LmFzdC5tb2R1bGUpfVxuXG5cdFx0JHtjb21wb25lbnQuZnVsbHlfaG9pc3RlZH1cblx0YCk7XG5cdCAgICBjb25zdCBmaWx0ZXJlZF9wcm9wcyA9IHByb3BzLmZpbHRlcihwcm9wID0+IHtcblx0ICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChwcm9wLm5hbWUpO1xuXHQgICAgICAgIGlmICh2YXJpYWJsZS5ob2lzdGFibGUpXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICBpZiAocHJvcC5uYW1lWzBdID09PSAnJCcpXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH0pO1xuXHQgICAgY29uc3QgcmVhY3RpdmVfc3RvcmVzID0gY29tcG9uZW50LnZhcnMuZmlsdGVyKHZhcmlhYmxlID0+IHZhcmlhYmxlLm5hbWVbMF0gPT09ICckJyAmJiB2YXJpYWJsZS5uYW1lWzFdICE9PSAnJCcpO1xuXHQgICAgY29uc3QgaW5zdGFuY2VfamF2YXNjcmlwdCA9IGNvbXBvbmVudC5leHRyYWN0X2phdmFzY3JpcHQoY29tcG9uZW50LmFzdC5pbnN0YW5jZSk7XG5cdCAgICBjb25zdCBoYXNfZGVmaW5pdGlvbiA9IChjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmRldiB8fFxuXHQgICAgICAgIChpbnN0YW5jZV9qYXZhc2NyaXB0ICYmIGluc3RhbmNlX2phdmFzY3JpcHQubGVuZ3RoID4gMCkgfHxcblx0ICAgICAgICBmaWx0ZXJlZF9wcm9wcy5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgdXNlc19wcm9wcyB8fFxuXHQgICAgICAgIGNvbXBvbmVudC5wYXJ0bHlfaG9pc3RlZC5sZW5ndGggPiAwIHx8XG5cdCAgICAgICAgcmVuZGVyZXIuaW5pdGlhbF9jb250ZXh0Lmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICBjb21wb25lbnQucmVhY3RpdmVfZGVjbGFyYXRpb25zLmxlbmd0aCA+IDAgfHxcblx0ICAgICAgICBjYXB0dXJlX3N0YXRlIHx8XG5cdCAgICAgICAgaW5qZWN0X3N0YXRlKTtcblx0ICAgIGNvbnN0IGRlZmluaXRpb24gPSBoYXNfZGVmaW5pdGlvblxuXHQgICAgICAgID8gY29tcG9uZW50LmFsaWFzKCdpbnN0YW5jZScpXG5cdCAgICAgICAgOiB7IHR5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG51bGwgfTtcblx0ICAgIGNvbnN0IHJlYWN0aXZlX3N0b3JlX3N1YnNjcmlwdGlvbnMgPSByZWFjdGl2ZV9zdG9yZXNcblx0ICAgICAgICAuZmlsdGVyKHN0b3JlID0+IHtcblx0ICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChzdG9yZS5uYW1lLnNsaWNlKDEpKTtcblx0ICAgICAgICByZXR1cm4gIXZhcmlhYmxlIHx8IHZhcmlhYmxlLmhvaXN0YWJsZTtcblx0ICAgIH0pXG5cdCAgICAgICAgLm1hcCgoeyBuYW1lIH0pID0+IGIgYFxuXHRcdFx0JHtjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmRldiAmJiBiIGBAdmFsaWRhdGVfc3RvcmUoJHtuYW1lLnNsaWNlKDEpfSwgJyR7bmFtZS5zbGljZSgxKX0nKTtgfVxuXHRcdFx0QGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCAke25hbWUuc2xpY2UoMSl9LCAkJHZhbHVlID0+ICQkaW52YWxpZGF0ZSgke3JlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldChuYW1lKS5pbmRleH0sICR7bmFtZX0gPSAkJHZhbHVlKSk7XG5cdFx0YCk7XG5cdCAgICBjb25zdCByZXN1YnNjcmliYWJsZV9yZWFjdGl2ZV9zdG9yZV91bnN1YnNjcmliZXJzID0gcmVhY3RpdmVfc3RvcmVzXG5cdCAgICAgICAgLmZpbHRlcihzdG9yZSA9PiB7XG5cdCAgICAgICAgY29uc3QgdmFyaWFibGUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQoc3RvcmUubmFtZS5zbGljZSgxKSk7XG5cdCAgICAgICAgcmV0dXJuIHZhcmlhYmxlICYmICh2YXJpYWJsZS5yZWFzc2lnbmVkIHx8IHZhcmlhYmxlLmV4cG9ydF9uYW1lKTtcblx0ICAgIH0pXG5cdCAgICAgICAgLm1hcCgoeyBuYW1lIH0pID0+IGIgYCQkc2VsZi4kJC5vbl9kZXN0cm95LnB1c2goKCkgPT4gJHtgJCR1bnN1YnNjcmliZV8ke25hbWUuc2xpY2UoMSl9YH0oKSk7YCk7XG5cdCAgICBpZiAoaGFzX2RlZmluaXRpb24pIHtcblx0ICAgICAgICBjb25zdCByZWFjdGl2ZV9kZWNsYXJhdGlvbnMgPSBbXTtcblx0ICAgICAgICBjb25zdCBmaXhlZF9yZWFjdGl2ZV9kZWNsYXJhdGlvbnMgPSBbXTsgLy8gbm90IHJlYWxseSAncmVhY3RpdmUnIGJ1dCB3aGF0ZXZlclxuXHQgICAgICAgIGNvbXBvbmVudC5yZWFjdGl2ZV9kZWNsYXJhdGlvbnMuZm9yRWFjaChkID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gQXJyYXkuZnJvbShkLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIGNvbnN0IHVzZXNfcmVzdF9vcl9wcm9wcyA9ICEhZGVwZW5kZW5jaWVzLmZpbmQobiA9PiBuID09PSAnJCRwcm9wcycgfHwgbiA9PT0gJyQkcmVzdFByb3BzJyk7XG5cdCAgICAgICAgICAgIGNvbnN0IHdyaXRhYmxlID0gZGVwZW5kZW5jaWVzLmZpbHRlcihuID0+IHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG4pO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlICYmICh2YXJpYWJsZS5leHBvcnRfbmFtZSB8fCB2YXJpYWJsZS5tdXRhdGVkIHx8IHZhcmlhYmxlLnJlYXNzaWduZWQpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gIXVzZXNfcmVzdF9vcl9wcm9wcyAmJiB3cml0YWJsZS5sZW5ndGggPiAwICYmIHJlbmRlcmVyLmRpcnR5KHdyaXRhYmxlLCB0cnVlKTtcblx0ICAgICAgICAgICAgbGV0IHN0YXRlbWVudCA9IGQubm9kZTsgLy8gVE9ETyByZW1vdmUgbGFiZWwgKHVzZSBkLm5vZGUuYm9keSkgaWYgaXQncyBub3QgcmVmZXJlbmNlZFxuXHQgICAgICAgICAgICBpZiAoY29uZGl0aW9uKVxuXHQgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gYiBgaWYgKCR7Y29uZGl0aW9ufSkgeyAke3N0YXRlbWVudH0gfWBbMF07XG5cdCAgICAgICAgICAgIGlmIChjb25kaXRpb24gfHwgdXNlc19yZXN0X29yX3Byb3BzKSB7XG5cdCAgICAgICAgICAgICAgICByZWFjdGl2ZV9kZWNsYXJhdGlvbnMucHVzaChzdGF0ZW1lbnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZml4ZWRfcmVhY3RpdmVfZGVjbGFyYXRpb25zLnB1c2goc3RhdGVtZW50KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGNvbnN0IGluamVjdGVkID0gQXJyYXkuZnJvbShjb21wb25lbnQuaW5qZWN0ZWRfcmVhY3RpdmVfZGVjbGFyYXRpb25fdmFycykuZmlsdGVyKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlLmluamVjdGVkICYmIHZhcmlhYmxlLm5hbWVbMF0gIT09ICckJztcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb25zdCByZWFjdGl2ZV9zdG9yZV9kZWNsYXJhdGlvbnMgPSByZWFjdGl2ZV9zdG9yZXMubWFwKHZhcmlhYmxlID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgJG5hbWUgPSB2YXJpYWJsZS5uYW1lO1xuXHQgICAgICAgICAgICBjb25zdCBuYW1lID0gJG5hbWUuc2xpY2UoMSk7XG5cdCAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICBpZiAoc3RvcmUgJiYgKHN0b3JlLnJlYXNzaWduZWQgfHwgc3RvcmUuZXhwb3J0X25hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IGAkJHVuc3Vic2NyaWJlXyR7bmFtZX1gO1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlID0gYCQkc3Vic2NyaWJlXyR7bmFtZX1gO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgaSA9IHJlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldCgkbmFtZSkuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYiBgbGV0ICR7JG5hbWV9LCAke3Vuc3Vic2NyaWJlfSA9IEBub29wLCAke3N1YnNjcmliZX0gPSAoKSA9PiAoJHt1bnN1YnNjcmliZX0oKSwgJHt1bnN1YnNjcmliZX0gPSBAc3Vic2NyaWJlKCR7bmFtZX0sICQkdmFsdWUgPT4gJCRpbnZhbGlkYXRlKCR7aX0sICR7JG5hbWV9ID0gJCR2YWx1ZSkpLCAke25hbWV9KWA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGIgYGxldCAkeyRuYW1lfTtgO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGxldCB1bmtub3duX3Byb3BzX2NoZWNrO1xuXHQgICAgICAgIGlmIChjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmRldiAmJiAhKHVzZXNfcHJvcHMgfHwgdXNlc19yZXN0KSkge1xuXHQgICAgICAgICAgICB1bmtub3duX3Byb3BzX2NoZWNrID0gYiBgXG5cdFx0XHRcdGNvbnN0IHdyaXRhYmxlX3Byb3BzID0gWyR7d3JpdGFibGVfcHJvcHMubWFwKHByb3AgPT4geCBgJyR7cHJvcC5leHBvcnRfbmFtZX0nYCl9XTtcblx0XHRcdFx0QF9PYmplY3Qua2V5cygkJHByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdFx0aWYgKCF+d3JpdGFibGVfcHJvcHMuaW5kZXhPZihrZXkpICYmIGtleS5zbGljZSgwLCAyKSAhPT0gJyQkJykgQF9jb25zb2xlLndhcm4oXFxgPCR7Y29tcG9uZW50LnRhZ30+IHdhcyBjcmVhdGVkIHdpdGggdW5rbm93biBwcm9wICdcXCR7a2V5fSdcXGApO1xuXHRcdFx0XHR9KTtcblx0XHRcdGA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IHJldHVybl92YWx1ZSA9IHtcblx0ICAgICAgICAgICAgdHlwZTogJ0FycmF5RXhwcmVzc2lvbicsXG5cdCAgICAgICAgICAgIGVsZW1lbnRzOiByZW5kZXJlci5pbml0aWFsX2NvbnRleHQubWFwKG1lbWJlciA9PiAoe1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICAgICAgbmFtZTogbWVtYmVyLm5hbWVcblx0ICAgICAgICAgICAgfSkpXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBib2R5LnB1c2goYiBgXG5cdFx0XHRmdW5jdGlvbiAke2RlZmluaXRpb259KCR7YXJnc30pIHtcblx0XHRcdFx0JHtyZXN0fVxuXG5cdFx0XHRcdCR7cmVhY3RpdmVfc3RvcmVfZGVjbGFyYXRpb25zfVxuXG5cdFx0XHRcdCR7cmVhY3RpdmVfc3RvcmVfc3Vic2NyaXB0aW9uc31cblxuXHRcdFx0XHQke3Jlc3Vic2NyaWJhYmxlX3JlYWN0aXZlX3N0b3JlX3Vuc3Vic2NyaWJlcnN9XG5cblx0XHRcdFx0JHtpbnN0YW5jZV9qYXZhc2NyaXB0fVxuXG5cdFx0XHRcdCR7dW5rbm93bl9wcm9wc19jaGVja31cblxuXHRcdFx0XHQke2NvbXBvbmVudC5zbG90cy5zaXplIHx8IGNvbXBvbmVudC5jb21waWxlX29wdGlvbnMuZGV2ID8gYiBgbGV0IHsgJCRzbG90cyA9IHt9LCAkJHNjb3BlIH0gPSAkJHByb3BzO2AgOiBudWxsfVxuXHRcdFx0XHQke2NvbXBvbmVudC5jb21waWxlX29wdGlvbnMuZGV2ICYmIGIgYEB2YWxpZGF0ZV9zbG90cygnJHtjb21wb25lbnQudGFnfScsICQkc2xvdHMsIFske1suLi5jb21wb25lbnQuc2xvdHMua2V5cygpXS5tYXAoa2V5ID0+IGAnJHtrZXl9J2ApLmpvaW4oJywnKX1dKTtgfVxuXG5cdFx0XHRcdCR7cmVuZGVyZXIuYmluZGluZ19ncm91cHMuc2l6ZSA+IDAgJiYgYiBgY29uc3QgJCRiaW5kaW5nX2dyb3VwcyA9IFske1suLi5yZW5kZXJlci5iaW5kaW5nX2dyb3Vwcy5rZXlzKCldLm1hcChfID0+IHggYFtdYCl9XTtgfVxuXG5cdFx0XHRcdCR7Y29tcG9uZW50LnBhcnRseV9ob2lzdGVkfVxuXG5cdFx0XHRcdCR7c2V0ICYmIGIgYCQkc2VsZi4kJHNldCA9ICR7c2V0fTtgfVxuXG5cdFx0XHRcdCR7Y2FwdHVyZV9zdGF0ZSAmJiBiIGAkJHNlbGYuJGNhcHR1cmVfc3RhdGUgPSAke2NhcHR1cmVfc3RhdGV9O2B9XG5cblx0XHRcdFx0JHtpbmplY3Rfc3RhdGUgJiYgYiBgJCRzZWxmLiRpbmplY3Rfc3RhdGUgPSAke2luamVjdF9zdGF0ZX07YH1cblxuXHRcdFx0XHQke2luamVjdGVkLm1hcChuYW1lID0+IGIgYGxldCAke25hbWV9O2ApfVxuXG5cdFx0XHRcdCR7IC8qIGJlZm9yZSByZWFjdGl2ZSBkZWNsYXJhdGlvbnMgKi9wcm9wc19pbmplY3R9XG5cblx0XHRcdFx0JHtyZWFjdGl2ZV9kZWNsYXJhdGlvbnMubGVuZ3RoID4gMCAmJiBiIGBcblx0XHRcdFx0JCRzZWxmLiQkLnVwZGF0ZSA9ICgpID0+IHtcblx0XHRcdFx0XHQke3JlYWN0aXZlX2RlY2xhcmF0aW9uc31cblx0XHRcdFx0fTtcblx0XHRcdFx0YH1cblxuXHRcdFx0XHQke2ZpeGVkX3JlYWN0aXZlX2RlY2xhcmF0aW9uc31cblxuXHRcdFx0XHQke3VzZXNfcHJvcHMgJiYgYiBgJCRwcm9wcyA9IEBleGNsdWRlX2ludGVybmFsX3Byb3BzKCQkcHJvcHMpO2B9XG5cblx0XHRcdFx0cmV0dXJuICR7cmV0dXJuX3ZhbHVlfTtcblx0XHRcdH1cblx0XHRgKTtcblx0ICAgIH1cblx0ICAgIGNvbnN0IHByb3BfaW5kZXhlcyA9IHggYHtcblx0XHQke3Byb3BzLmZpbHRlcih2ID0+IHYuZXhwb3J0X25hbWUgJiYgIXYubW9kdWxlKS5tYXAodiA9PiBwIGAke3YuZXhwb3J0X25hbWV9OiAke3JlbmRlcmVyLmNvbnRleHRfbG9va3VwLmdldCh2Lm5hbWUpLmluZGV4fWApfVxuXHR9YDtcblx0ICAgIGxldCBkaXJ0eTtcblx0ICAgIGlmIChyZW5kZXJlci5jb250ZXh0X292ZXJmbG93KSB7XG5cdCAgICAgICAgZGlydHkgPSB4IGBbXWA7XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJlci5jb250ZXh0Lmxlbmd0aDsgaSArPSAzMSkge1xuXHQgICAgICAgICAgICBkaXJ0eS5lbGVtZW50cy5wdXNoKHggYC0xYCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKG9wdGlvbnMuY3VzdG9tRWxlbWVudCkge1xuXHQgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYiBgXG5cdFx0XHRjbGFzcyAke25hbWV9IGV4dGVuZHMgQFN2ZWx0ZUVsZW1lbnQge1xuXHRcdFx0XHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0XHRcdFx0c3VwZXIoKTtcblxuXHRcdFx0XHRcdCR7Y3NzLmNvZGUgJiYgYiBgdGhpcy5zaGFkb3dSb290LmlubmVySFRNTCA9IFxcYDxzdHlsZT4ke2Nzcy5jb2RlLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJyl9JHtvcHRpb25zLmRldiA/IGBcXG4vKiMgc291cmNlTWFwcGluZ1VSTD0ke2Nzcy5tYXAudG9VcmwoKX0gKi9gIDogJyd9PC9zdHlsZT5cXGA7YH1cblxuXHRcdFx0XHRcdEBpbml0KHRoaXMsIHsgdGFyZ2V0OiB0aGlzLnNoYWRvd1Jvb3QgfSwgJHtkZWZpbml0aW9ufSwgJHtoYXNfY3JlYXRlX2ZyYWdtZW50ID8gJ2NyZWF0ZV9mcmFnbWVudCcgOiAnbnVsbCd9LCAke25vdF9lcXVhbH0sICR7cHJvcF9pbmRleGVzfSwgJHtkaXJ0eX0pO1xuXG5cdFx0XHRcdFx0JHtkZXZfcHJvcHNfY2hlY2t9XG5cblx0XHRcdFx0XHRpZiAob3B0aW9ucykge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMudGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHRcdEBpbnNlcnQob3B0aW9ucy50YXJnZXQsIHRoaXMsIG9wdGlvbnMuYW5jaG9yKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0JHsocHJvcHMubGVuZ3RoID4gMCB8fCB1c2VzX3Byb3BzIHx8IHVzZXNfcmVzdCkgJiYgYiBgXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5wcm9wcykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLiRzZXQob3B0aW9ucy5wcm9wcyk7XG5cdFx0XHRcdFx0XHRcdEBmbHVzaCgpO1xuXHRcdFx0XHRcdFx0fWB9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0YFswXTtcblx0ICAgICAgICBpZiAocHJvcHMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBkZWNsYXJhdGlvbi5ib2R5LmJvZHkucHVzaCh7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAnTWV0aG9kRGVmaW5pdGlvbicsXG5cdCAgICAgICAgICAgICAgICBraW5kOiAnZ2V0Jyxcblx0ICAgICAgICAgICAgICAgIHN0YXRpYzogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGtleTogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdvYnNlcnZlZEF0dHJpYnV0ZXMnIH0sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogeCBgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFske3Byb3BzLm1hcChwcm9wID0+IHggYFwiJHtwcm9wLmV4cG9ydF9uYW1lfVwiYCl9XTtcblx0XHRcdFx0fWBcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRlY2xhcmF0aW9uLmJvZHkuYm9keS5wdXNoKC4uLmFjY2Vzc29ycyk7XG5cdCAgICAgICAgYm9keS5wdXNoKGRlY2xhcmF0aW9uKTtcblx0ICAgICAgICBpZiAoY29tcG9uZW50LnRhZyAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgIGJvZHkucHVzaChiIGBcblx0XHRcdFx0QF9jdXN0b21FbGVtZW50cy5kZWZpbmUoXCIke2NvbXBvbmVudC50YWd9XCIsICR7bmFtZX0pO1xuXHRcdFx0YCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgY29uc3Qgc3VwZXJjbGFzcyA9IHtcblx0ICAgICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuXHQgICAgICAgICAgICBuYW1lOiBvcHRpb25zLmRldiA/ICdAU3ZlbHRlQ29tcG9uZW50RGV2JyA6ICdAU3ZlbHRlQ29tcG9uZW50J1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBiIGBcblx0XHRcdGNsYXNzICR7bmFtZX0gZXh0ZW5kcyAke3N1cGVyY2xhc3N9IHtcblx0XHRcdFx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdFx0XHRcdHN1cGVyKCR7b3B0aW9ucy5kZXYgJiYgYG9wdGlvbnNgfSk7XG5cdFx0XHRcdFx0JHtzaG91bGRfYWRkX2NzcyAmJiBiIGBpZiAoIUBfZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIke2NvbXBvbmVudC5zdHlsZXNoZWV0LmlkfS1zdHlsZVwiKSkgJHthZGRfY3NzfSgpO2B9XG5cdFx0XHRcdFx0QGluaXQodGhpcywgb3B0aW9ucywgJHtkZWZpbml0aW9ufSwgJHtoYXNfY3JlYXRlX2ZyYWdtZW50ID8gJ2NyZWF0ZV9mcmFnbWVudCcgOiAnbnVsbCd9LCAke25vdF9lcXVhbH0sICR7cHJvcF9pbmRleGVzfSwgJHtkaXJ0eX0pO1xuXHRcdFx0XHRcdCR7b3B0aW9ucy5kZXYgJiYgYiBgQGRpc3BhdGNoX2RldihcIlN2ZWx0ZVJlZ2lzdGVyQ29tcG9uZW50XCIsIHsgY29tcG9uZW50OiB0aGlzLCB0YWdOYW1lOiBcIiR7bmFtZS5uYW1lfVwiLCBvcHRpb25zLCBpZDogY3JlYXRlX2ZyYWdtZW50Lm5hbWUgfSk7YH1cblxuXHRcdFx0XHRcdCR7ZGV2X3Byb3BzX2NoZWNrfVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0YFswXTtcblx0ICAgICAgICBkZWNsYXJhdGlvbi5ib2R5LmJvZHkucHVzaCguLi5hY2Nlc3NvcnMpO1xuXHQgICAgICAgIGJvZHkucHVzaChkZWNsYXJhdGlvbik7XG5cdCAgICB9XG5cdCAgICByZXR1cm4geyBqczogZmxhdHRlbiQxKGJvZHksIFtdKSwgY3NzIH07XG5cdH1cblx0ZnVuY3Rpb24gZmxhdHRlbiQxKG5vZGVzLCB0YXJnZXQpIHtcblx0ICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcblx0ICAgICAgICAgICAgZmxhdHRlbiQxKG5vZGUsIHRhcmdldCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0YXJnZXQucHVzaChub2RlKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gQXdhaXRCbG9jayAobm9kZSwgcmVuZGVyZXIsIG9wdGlvbnMpIHtcblx0ICAgIHJlbmRlcmVyLnB1c2goKTtcblx0ICAgIHJlbmRlcmVyLnJlbmRlcihub2RlLnBlbmRpbmcuY2hpbGRyZW4sIG9wdGlvbnMpO1xuXHQgICAgY29uc3QgcGVuZGluZyA9IHJlbmRlcmVyLnBvcCgpO1xuXHQgICAgcmVuZGVyZXIucHVzaCgpO1xuXHQgICAgcmVuZGVyZXIucmVuZGVyKG5vZGUudGhlbi5jaGlsZHJlbiwgb3B0aW9ucyk7XG5cdCAgICBjb25zdCB0aGVuID0gcmVuZGVyZXIucG9wKCk7XG5cdCAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbih4IGBcblx0XHRmdW5jdGlvbihfX3ZhbHVlKSB7XG5cdFx0XHRpZiAoQGlzX3Byb21pc2UoX192YWx1ZSkpIHJldHVybiAke3BlbmRpbmd9O1xuXHRcdFx0cmV0dXJuIChmdW5jdGlvbigke25vZGUudGhlbl9ub2RlID8gbm9kZS50aGVuX25vZGUgOiAnJ30pIHsgcmV0dXJuICR7dGhlbn07IH0oX192YWx1ZSkpO1xuXHRcdH0oJHtub2RlLmV4cHJlc3Npb24ubm9kZX0pXG5cdGApO1xuXHR9XG5cblx0ZnVuY3Rpb24gQ29tbWVudCQxIChfbm9kZSwgX3JlbmRlcmVyLCBfb3B0aW9ucykge1xuXHQgICAgLy8gVE9ETyBwcmVzZXJ2ZSBjb21tZW50c1xuXHQgICAgLy8gaWYgKG9wdGlvbnMucHJlc2VydmVDb21tZW50cykge1xuXHQgICAgLy8gXHRyZW5kZXJlci5hcHBlbmQoYDwhLS0ke25vZGUuZGF0YX0tLT5gKTtcblx0ICAgIC8vIH1cblx0fVxuXG5cdGZ1bmN0aW9uIERlYnVnVGFnIChub2RlLCByZW5kZXJlciwgb3B0aW9ucykge1xuXHQgICAgaWYgKCFvcHRpb25zLmRldilcblx0ICAgICAgICByZXR1cm47XG5cdCAgICBjb25zdCBmaWxlbmFtZSA9IG9wdGlvbnMuZmlsZW5hbWUgfHwgbnVsbDtcblx0ICAgIGNvbnN0IHsgbGluZSwgY29sdW1uIH0gPSBvcHRpb25zLmxvY2F0ZShub2RlLnN0YXJ0ICsgMSk7XG5cdCAgICBjb25zdCBvYmogPSB4IGB7XG5cdFx0JHtub2RlLmV4cHJlc3Npb25zLm1hcChlID0+IHAgYCR7ZS5ub2RlLm5hbWV9YCl9XG5cdH1gO1xuXHQgICAgcmVuZGVyZXIuYWRkX2V4cHJlc3Npb24oeCBgQGRlYnVnKCR7ZmlsZW5hbWUgPyB4IGBcIiR7ZmlsZW5hbWV9XCJgIDogeCBgbnVsbGB9LCAke2xpbmUgLSAxfSwgJHtjb2x1bW59LCAke29ian0pYCk7XG5cdH1cblxuXHRmdW5jdGlvbiBFYWNoQmxvY2sgKG5vZGUsIHJlbmRlcmVyLCBvcHRpb25zKSB7XG5cdCAgICBjb25zdCBhcmdzID0gW25vZGUuY29udGV4dF9ub2RlXTtcblx0ICAgIGlmIChub2RlLmluZGV4KVxuXHQgICAgICAgIGFyZ3MucHVzaCh7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogbm9kZS5pbmRleCB9KTtcblx0ICAgIHJlbmRlcmVyLnB1c2goKTtcblx0ICAgIHJlbmRlcmVyLnJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcblx0ICAgIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmVyLnBvcCgpO1xuXHQgICAgY29uc3QgY29uc2VxdWVudCA9IHggYEBlYWNoKCR7bm9kZS5leHByZXNzaW9uLm5vZGV9LCAoJHthcmdzfSkgPT4gJHtyZXN1bHR9KWA7XG5cdCAgICBpZiAobm9kZS5lbHNlKSB7XG5cdCAgICAgICAgcmVuZGVyZXIucHVzaCgpO1xuXHQgICAgICAgIHJlbmRlcmVyLnJlbmRlcihub2RlLmVsc2UuY2hpbGRyZW4sIG9wdGlvbnMpO1xuXHQgICAgICAgIGNvbnN0IGFsdGVybmF0ZSA9IHJlbmRlcmVyLnBvcCgpO1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYCR7bm9kZS5leHByZXNzaW9uLm5vZGV9Lmxlbmd0aCA/ICR7Y29uc2VxdWVudH0gOiAke2FsdGVybmF0ZX1gKTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKGNvbnNlcXVlbnQpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0X2NsYXNzX2F0dHJpYnV0ZV92YWx1ZShhdHRyaWJ1dGUpIHtcblx0ICAgIC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ug4oCUIGBjbGFzcz17cG9zc2libHlVbmRlZmluZWR9YCB3aXRoIHNjb3BlZCBDU1Ncblx0ICAgIGlmIChhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMiAmJiBhdHRyaWJ1dGUuY2h1bmtzWzFdLnN5bnRoZXRpYykge1xuXHQgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlLmNodW5rc1swXS5ub2RlO1xuXHQgICAgICAgIHJldHVybiB4IGBAZXNjYXBlKEBudWxsX3RvX2VtcHR5KCR7dmFsdWV9KSkgKyBcIiR7YXR0cmlidXRlLmNodW5rc1sxXS5kYXRhfVwiYDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBnZXRfYXR0cmlidXRlX3ZhbHVlKGF0dHJpYnV0ZSk7XG5cdH1cblx0ZnVuY3Rpb24gZ2V0X2F0dHJpYnV0ZV92YWx1ZShhdHRyaWJ1dGUpIHtcblx0ICAgIGlmIChhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICByZXR1cm4geCBgXCJcImA7XG5cdCAgICByZXR1cm4gYXR0cmlidXRlLmNodW5rc1xuXHQgICAgICAgIC5tYXAoKGNodW5rKSA9PiB7XG5cdCAgICAgICAgcmV0dXJuIGNodW5rLnR5cGUgPT09ICdUZXh0J1xuXHQgICAgICAgICAgICA/IHN0cmluZ19saXRlcmFsKGNodW5rLmRhdGEucmVwbGFjZSgvXCIvZywgJyZxdW90OycpKVxuXHQgICAgICAgICAgICA6IHggYEBlc2NhcGUoJHtjaHVuay5ub2RlfSlgO1xuXHQgICAgfSlcblx0ICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9ICsgJHtyaHN9YCk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRfc2xvdF9zY29wZShsZXRzKSB7XG5cdCAgICBpZiAobGV0cy5sZW5ndGggPT09IDApXG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcblx0ICAgICAgICBwcm9wZXJ0aWVzOiBsZXRzLm1hcChsID0+IHtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdQcm9wZXJ0eScsXG5cdCAgICAgICAgICAgICAgICBraW5kOiAnaW5pdCcsXG5cdCAgICAgICAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgc2hvcnRoYW5kOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIGtleTogbC5uYW1lLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGwudmFsdWUgfHwgbC5uYW1lXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSlcblx0ICAgIH07XG5cdH1cblxuXHQvLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuXHRjb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcblx0ICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuXHQgICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuXHQgICAgJ2FzeW5jJyxcblx0ICAgICdhdXRvZm9jdXMnLFxuXHQgICAgJ2F1dG9wbGF5Jyxcblx0ICAgICdjaGVja2VkJyxcblx0ICAgICdjb250cm9scycsXG5cdCAgICAnZGVmYXVsdCcsXG5cdCAgICAnZGVmZXInLFxuXHQgICAgJ2Rpc2FibGVkJyxcblx0ICAgICdmb3Jtbm92YWxpZGF0ZScsXG5cdCAgICAnaGlkZGVuJyxcblx0ICAgICdpc21hcCcsXG5cdCAgICAnbG9vcCcsXG5cdCAgICAnbXVsdGlwbGUnLFxuXHQgICAgJ211dGVkJyxcblx0ICAgICdub21vZHVsZScsXG5cdCAgICAnbm92YWxpZGF0ZScsXG5cdCAgICAnb3BlbicsXG5cdCAgICAncGxheXNpbmxpbmUnLFxuXHQgICAgJ3JlYWRvbmx5Jyxcblx0ICAgICdyZXF1aXJlZCcsXG5cdCAgICAncmV2ZXJzZWQnLFxuXHQgICAgJ3NlbGVjdGVkJ1xuXHRdKTtcblxuXHQvLyBzaW1pbGFyIGxvZ2ljIGZyb20gYGNvbXBpbGUvcmVuZGVyX2RvbS93cmFwcGVycy9GcmFnbWVudGBcblx0Ly8gV2Ugd2FudCB0byByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBpbnNpZGUgYW4gZWxlbWVudC9jb21wb25lbnQvYmxvY2ssXG5cdC8vICp1bmxlc3MqIHRoZXJlIGlzIG5vIHdoaXRlc3BhY2UgYmV0d2VlbiB0aGlzIG5vZGUgYW5kIGl0cyBuZXh0IHNpYmxpbmdcblx0ZnVuY3Rpb24gcmVtb3ZlX3doaXRlc3BhY2VfY2hpbGRyZW4oY2hpbGRyZW4sIG5leHQpIHtcblx0ICAgIGNvbnN0IG5vZGVzID0gW107XG5cdCAgICBsZXQgbGFzdF9jaGlsZDtcblx0ICAgIGxldCBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuXHQgICAgd2hpbGUgKGktLSkge1xuXHQgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG5cdCAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICBpZiAoY2hpbGQuc2hvdWxkX3NraXAoKSkge1xuXHQgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbGV0IHsgZGF0YSB9ID0gY2hpbGQ7XG5cdCAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZF90cmltID0gbmV4dFxuXHQgICAgICAgICAgICAgICAgICAgID8gbmV4dC50eXBlID09PSAnVGV4dCcgJiZcblx0ICAgICAgICAgICAgICAgICAgICAgICAgL15cXHMvLnRlc3QobmV4dC5kYXRhKSAmJlxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cmltbWFibGVfYXQkMShjaGlsZCwgbmV4dClcblx0ICAgICAgICAgICAgICAgICAgICA6ICFjaGlsZC5oYXNfYW5jZXN0b3IoJ0VhY2hCbG9jaycpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHNob3VsZF90cmltKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRyaW1fZW5kKGRhdGEpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gZ2x1ZSB0ZXh0IG5vZGVzICh3aGljaCBjb3VsZCBlLmcuIGJlIHNlcGFyYXRlZCBieSBjb21tZW50cykgdG9nZXRoZXJcblx0ICAgICAgICAgICAgaWYgKGxhc3RfY2hpbGQgJiYgbGFzdF9jaGlsZC50eXBlID09PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgIGxhc3RfY2hpbGQuZGF0YSA9IGRhdGEgKyBsYXN0X2NoaWxkLmRhdGE7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBub2Rlcy51bnNoaWZ0KGNoaWxkKTtcblx0ICAgICAgICAgICAgbGluayhsYXN0X2NoaWxkLCBsYXN0X2NoaWxkID0gY2hpbGQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgbm9kZXMudW5zaGlmdChjaGlsZCk7XG5cdCAgICAgICAgICAgIGxpbmsobGFzdF9jaGlsZCwgbGFzdF9jaGlsZCA9IGNoaWxkKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBjb25zdCBmaXJzdCA9IG5vZGVzWzBdO1xuXHQgICAgaWYgKGZpcnN0ICYmIGZpcnN0LnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgIGZpcnN0LmRhdGEgPSB0cmltX3N0YXJ0KGZpcnN0LmRhdGEpO1xuXHQgICAgICAgIGlmICghZmlyc3QuZGF0YSkge1xuXHQgICAgICAgICAgICBmaXJzdC52YXIgPSBudWxsO1xuXHQgICAgICAgICAgICBub2Rlcy5zaGlmdCgpO1xuXHQgICAgICAgICAgICBpZiAobm9kZXNbMF0pIHtcblx0ICAgICAgICAgICAgICAgIG5vZGVzWzBdLnByZXYgPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5vZGVzO1xuXHR9XG5cdGZ1bmN0aW9uIHRyaW1tYWJsZV9hdCQxKGNoaWxkLCBuZXh0X3NpYmxpbmcpIHtcblx0ICAgIC8vIFdoaXRlc3BhY2UgaXMgdHJpbW1hYmxlIGlmIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG5cdCAgICAvLyBUaGUgY2hpbGQgYW5kIGl0cyBzaWJsaW5nIHNoYXJlIGEgY29tbW9uIG5lYXJlc3QgZWFjaCBibG9jayAobm90IGF0IGFuIGVhY2ggYmxvY2sgYm91bmRhcnkpXG5cdCAgICAvLyBUaGUgbmV4dCBzaWJsaW5nJ3MgcHJldmlvdXMgbm9kZSBpcyBhbiBlYWNoIGJsb2NrXG5cdCAgICByZXR1cm4gKG5leHRfc2libGluZy5maW5kX25lYXJlc3QoL0VhY2hCbG9jay8pID09PVxuXHQgICAgICAgIGNoaWxkLmZpbmRfbmVhcmVzdCgvRWFjaEJsb2NrLykgfHwgbmV4dF9zaWJsaW5nLnByZXYudHlwZSA9PT0gJ0VhY2hCbG9jaycpO1xuXHR9XG5cblx0ZnVuY3Rpb24gRWxlbWVudCAobm9kZSwgcmVuZGVyZXIsIG9wdGlvbnMpIHtcblx0ICAgIGNvbnN0IGNoaWxkcmVuID0gcmVtb3ZlX3doaXRlc3BhY2VfY2hpbGRyZW4obm9kZS5jaGlsZHJlbiwgbm9kZS5uZXh0KTtcblx0ICAgIC8vIGF3a3dhcmQgc3BlY2lhbCBjYXNlXG5cdCAgICBsZXQgbm9kZV9jb250ZW50cztcblx0ICAgIGNvbnN0IGNvbnRlbnRlZGl0YWJsZSA9IChub2RlLm5hbWUgIT09ICd0ZXh0YXJlYScgJiZcblx0ICAgICAgICBub2RlLm5hbWUgIT09ICdpbnB1dCcgJiZcblx0ICAgICAgICBub2RlLmF0dHJpYnV0ZXMuc29tZSgoYXR0cmlidXRlKSA9PiBhdHRyaWJ1dGUubmFtZSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScpKTtcblx0ICAgIGNvbnN0IHNsb3QgPSBub2RlLmdldF9zdGF0aWNfYXR0cmlidXRlX3ZhbHVlKCdzbG90Jyk7XG5cdCAgICBjb25zdCBuZWFyZXN0X2lubGluZV9jb21wb25lbnQgPSBub2RlLmZpbmRfbmVhcmVzdCgvSW5saW5lQ29tcG9uZW50Lyk7XG5cdCAgICBpZiAoc2xvdCAmJiBuZWFyZXN0X2lubGluZV9jb21wb25lbnQpIHtcblx0ICAgICAgICByZW5kZXJlci5wdXNoKCk7XG5cdCAgICB9XG5cdCAgICByZW5kZXJlci5hZGRfc3RyaW5nKGA8JHtub2RlLm5hbWV9YCk7XG5cdCAgICBjb25zdCBjbGFzc19leHByZXNzaW9uX2xpc3QgPSBub2RlLmNsYXNzZXMubWFwKGNsYXNzX2RpcmVjdGl2ZSA9PiB7XG5cdCAgICAgICAgY29uc3QgeyBleHByZXNzaW9uLCBuYW1lIH0gPSBjbGFzc19kaXJlY3RpdmU7XG5cdCAgICAgICAgY29uc3Qgc25pcHBldCA9IGV4cHJlc3Npb24gPyBleHByZXNzaW9uLm5vZGUgOiB4IGAjY3R4LiR7bmFtZX1gOyAvLyBUT0RPIGlzIHRoaXMgcmlnaHQ/XG5cdCAgICAgICAgcmV0dXJuIHggYCR7c25pcHBldH0gPyBcIiR7bmFtZX1cIiA6IFwiXCJgO1xuXHQgICAgfSk7XG5cdCAgICBpZiAobm9kZS5uZWVkc19tYW51YWxfc3R5bGVfc2NvcGluZykge1xuXHQgICAgICAgIGNsYXNzX2V4cHJlc3Npb25fbGlzdC5wdXNoKHggYFwiJHtub2RlLmNvbXBvbmVudC5zdHlsZXNoZWV0LmlkfVwiYCk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBjbGFzc19leHByZXNzaW9uID0gY2xhc3NfZXhwcmVzc2lvbl9saXN0Lmxlbmd0aCA+IDAgJiZcblx0ICAgICAgICBjbGFzc19leHByZXNzaW9uX2xpc3QucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9ICsgJyAnICsgJHtyaHN9YCk7XG5cdCAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLnNvbWUoYXR0ciA9PiBhdHRyLmlzX3NwcmVhZCkpIHtcblx0ICAgICAgICAvLyBUT0RPIGRyeSB0aGlzIG91dFxuXHQgICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcblx0ICAgICAgICBub2RlLmF0dHJpYnV0ZXMuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYXR0cmlidXRlLmlzX3NwcmVhZCkge1xuXHQgICAgICAgICAgICAgICAgYXJncy5wdXNoKGF0dHJpYnV0ZS5leHByZXNzaW9uLm5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3ZhbHVlJyAmJiBub2RlLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5vZGVfY29udGVudHMgPSBnZXRfYXR0cmlidXRlX3ZhbHVlKGF0dHJpYnV0ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChhdHRyaWJ1dGUuaXNfdHJ1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh4IGB7ICR7YXR0cmlidXRlLm5hbWV9OiB0cnVlIH1gKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZSkgJiZcblx0ICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMSAmJlxuXHQgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5jaHVua3NbMF0udHlwZSAhPT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gYSBib29sZWFuIGF0dHJpYnV0ZSB3aXRoIG9uZSBub24tVGV4dCBjaHVua1xuXHQgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh4IGB7ICR7YXR0cmlidXRlLm5hbWV9OiAke2F0dHJpYnV0ZS5jaHVua3NbMF0ubm9kZX0gfHwgbnVsbCB9YCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goeCBgeyAke2F0dHJpYnV0ZS5uYW1lfTogJHtnZXRfYXR0cmlidXRlX3ZhbHVlKGF0dHJpYnV0ZSl9IH1gKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYEBzcHJlYWQoWyR7YXJnc31dLCAke2NsYXNzX2V4cHJlc3Npb259KWApO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgbGV0IGFkZF9jbGFzc19hdHRyaWJ1dGUgPSAhIWNsYXNzX2V4cHJlc3Npb247XG5cdCAgICAgICAgbm9kZS5hdHRyaWJ1dGVzLmZvckVhY2goYXR0cmlidXRlID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgIGlmIChuYW1lID09PSAndmFsdWUnICYmIG5vZGUubmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlX2NvbnRlbnRzID0gZ2V0X2F0dHJpYnV0ZV92YWx1ZShhdHRyaWJ1dGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGF0dHJpYnV0ZS5pc190cnVlKSB7XG5cdCAgICAgICAgICAgICAgICByZW5kZXJlci5hZGRfc3RyaW5nKGAgJHthdHRyaWJ1dGUubmFtZX1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUpICYmXG5cdCAgICAgICAgICAgICAgICBhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMSAmJlxuXHQgICAgICAgICAgICAgICAgYXR0cmlidXRlLmNodW5rc1swXS50eXBlICE9PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGEgYm9vbGVhbiBhdHRyaWJ1dGUgd2l0aCBvbmUgbm9uLVRleHQgY2h1bmtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9zdHJpbmcoYCBgKTtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYCR7YXR0cmlidXRlLmNodW5rc1swXS5ub2RlfSA/IFwiJHthdHRyaWJ1dGUubmFtZX1cIiA6IFwiXCJgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSAnY2xhc3MnICYmIGNsYXNzX2V4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgICAgIGFkZF9jbGFzc19hdHRyaWJ1dGUgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9zdHJpbmcoYCAke2F0dHJpYnV0ZS5uYW1lfT1cImApO1xuXHQgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkX2V4cHJlc3Npb24oeCBgWyR7Z2V0X2NsYXNzX2F0dHJpYnV0ZV92YWx1ZShhdHRyaWJ1dGUpfSwgJHtjbGFzc19leHByZXNzaW9ufV0uam9pbignICcpLnRyaW0oKWApO1xuXHQgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3N0cmluZyhgXCJgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMSAmJiBhdHRyaWJ1dGUuY2h1bmtzWzBdLnR5cGUgIT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc25pcHBldCA9IGF0dHJpYnV0ZS5jaHVua3NbMF0ubm9kZTtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYEBhZGRfYXR0cmlidXRlKFwiJHthdHRyaWJ1dGUubmFtZX1cIiwgJHtzbmlwcGV0fSwgJHtib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUpID8gMSA6IDB9KWApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkX3N0cmluZyhgICR7YXR0cmlidXRlLm5hbWV9PVwiYCk7XG5cdCAgICAgICAgICAgICAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbigobmFtZSA9PT0gJ2NsYXNzJyA/IGdldF9jbGFzc19hdHRyaWJ1dGVfdmFsdWUgOiBnZXRfYXR0cmlidXRlX3ZhbHVlKShhdHRyaWJ1dGUpKTtcblx0ICAgICAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9zdHJpbmcoYFwiYCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAoYWRkX2NsYXNzX2F0dHJpYnV0ZSkge1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbih4IGBAYWRkX2NsYXNzZXMoWyR7Y2xhc3NfZXhwcmVzc2lvbn1dLmpvaW4oJyAnKS50cmltKCkpYCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgbm9kZS5iaW5kaW5ncy5mb3JFYWNoKGJpbmRpbmcgPT4ge1xuXHQgICAgICAgIGNvbnN0IHsgbmFtZSwgZXhwcmVzc2lvbiB9ID0gYmluZGluZztcblx0ICAgICAgICBpZiAoYmluZGluZy5pc19yZWFkb25seSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSA7XG5cdCAgICAgICAgZWxzZSBpZiAoY29udGVudGVkaXRhYmxlICYmIChuYW1lID09PSAndGV4dENvbnRlbnQnIHx8IG5hbWUgPT09ICdpbm5lckhUTUwnKSkge1xuXHQgICAgICAgICAgICBub2RlX2NvbnRlbnRzID0gZXhwcmVzc2lvbi5ub2RlO1xuXHQgICAgICAgICAgICAvLyBUT0RPIHdoZXJlIHdhcyB0aGlzIHVzZWQ/XG5cdCAgICAgICAgICAgIC8vIHZhbHVlID0gbmFtZSA9PT0gJ3RleHRDb250ZW50JyA/IHhgQGVzY2FwZSgkJHZhbHVlKWAgOiB4YCQkdmFsdWVgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChiaW5kaW5nLm5hbWUgPT09ICd2YWx1ZScgJiYgbm9kZS5uYW1lID09PSAndGV4dGFyZWEnKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHNuaXBwZXQgPSBleHByZXNzaW9uLm5vZGU7XG5cdCAgICAgICAgICAgIG5vZGVfY29udGVudHMgPSB4IGAke3NuaXBwZXR9IHx8IFwiXCJgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3Qgc25pcHBldCA9IGV4cHJlc3Npb24ubm9kZTtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYWRkX2V4cHJlc3Npb24oeCBgQGFkZF9hdHRyaWJ1dGUoXCIke25hbWV9XCIsICR7c25pcHBldH0sIDEpYCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICBpZiAob3B0aW9ucy5oeWRyYXRhYmxlICYmIG9wdGlvbnMuaGVhZF9pZCkge1xuXHQgICAgICAgIHJlbmRlcmVyLmFkZF9zdHJpbmcoYCBkYXRhLXN2ZWx0ZT1cIiR7b3B0aW9ucy5oZWFkX2lkfVwiYCk7XG5cdCAgICB9XG5cdCAgICByZW5kZXJlci5hZGRfc3RyaW5nKCc+Jyk7XG5cdCAgICBpZiAobm9kZV9jb250ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgaWYgKGNvbnRlbnRlZGl0YWJsZSkge1xuXHQgICAgICAgICAgICByZW5kZXJlci5wdXNoKCk7XG5cdCAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihjaGlsZHJlbiwgb3B0aW9ucyk7XG5cdCAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmVyLnBvcCgpO1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbih4IGAoJCR2YWx1ZSA9PiAkJHZhbHVlID09PSB2b2lkIDAgPyAke3Jlc3VsdH0gOiAkJHZhbHVlKSgke25vZGVfY29udGVudHN9KWApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmVuZGVyZXIuYWRkX2V4cHJlc3Npb24obm9kZV9jb250ZW50cyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghaXNfdm9pZChub2RlLm5hbWUpKSB7XG5cdCAgICAgICAgICAgIHJlbmRlcmVyLmFkZF9zdHJpbmcoYDwvJHtub2RlLm5hbWV9PmApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKHNsb3QgJiYgbmVhcmVzdF9pbmxpbmVfY29tcG9uZW50KSB7XG5cdCAgICAgICAgcmVuZGVyZXIucmVuZGVyKGNoaWxkcmVuLCBvcHRpb25zKTtcblx0ICAgICAgICBpZiAoIWlzX3ZvaWQobm9kZS5uYW1lKSkge1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfc3RyaW5nKGA8LyR7bm9kZS5uYW1lfT5gKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgbGV0cyA9IG5vZGUubGV0cztcblx0ICAgICAgICBjb25zdCBzZWVuID0gbmV3IFNldChsZXRzLm1hcChsID0+IGwubmFtZS5uYW1lKSk7XG5cdCAgICAgICAgbmVhcmVzdF9pbmxpbmVfY29tcG9uZW50LmxldHMuZm9yRWFjaChsID0+IHtcblx0ICAgICAgICAgICAgaWYgKCFzZWVuLmhhcyhsLm5hbWUubmFtZSkpXG5cdCAgICAgICAgICAgICAgICBsZXRzLnB1c2gobCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgb3B0aW9ucy5zbG90X3Njb3Blcy5zZXQoc2xvdCwge1xuXHQgICAgICAgICAgICBpbnB1dDogZ2V0X3Nsb3Rfc2NvcGUobm9kZS5sZXRzKSxcblx0ICAgICAgICAgICAgb3V0cHV0OiByZW5kZXJlci5wb3AoKVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgcmVuZGVyZXIucmVuZGVyKGNoaWxkcmVuLCBvcHRpb25zKTtcblx0ICAgICAgICBpZiAoIWlzX3ZvaWQobm9kZS5uYW1lKSkge1xuXHQgICAgICAgICAgICByZW5kZXJlci5hZGRfc3RyaW5nKGA8LyR7bm9kZS5uYW1lfT5gKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBIZWFkIChub2RlLCByZW5kZXJlciwgb3B0aW9ucykge1xuXHQgICAgY29uc3QgaGVhZF9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBoZWFkX2lkOiBub2RlLmlkIH0pO1xuXHQgICAgcmVuZGVyZXIucHVzaCgpO1xuXHQgICAgcmVuZGVyZXIucmVuZGVyKG5vZGUuY2hpbGRyZW4sIGhlYWRfb3B0aW9ucyk7XG5cdCAgICBjb25zdCByZXN1bHQgPSByZW5kZXJlci5wb3AoKTtcblx0ICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYCQkcmVzdWx0LmhlYWQgKz0gJHtyZXN1bHR9LCBcIlwiYCk7XG5cdH1cblxuXHRmdW5jdGlvbiBIdG1sVGFnIChub2RlLCByZW5kZXJlciwgX29wdGlvbnMpIHtcblx0ICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbi5ub2RlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIElmQmxvY2sgKG5vZGUsIHJlbmRlcmVyLCBvcHRpb25zKSB7XG5cdCAgICBjb25zdCBjb25kaXRpb24gPSBub2RlLmV4cHJlc3Npb24ubm9kZTtcblx0ICAgIHJlbmRlcmVyLnB1c2goKTtcblx0ICAgIHJlbmRlcmVyLnJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcblx0ICAgIGNvbnN0IGNvbnNlcXVlbnQgPSByZW5kZXJlci5wb3AoKTtcblx0ICAgIHJlbmRlcmVyLnB1c2goKTtcblx0ICAgIGlmIChub2RlLmVsc2UpXG5cdCAgICAgICAgcmVuZGVyZXIucmVuZGVyKG5vZGUuZWxzZS5jaGlsZHJlbiwgb3B0aW9ucyk7XG5cdCAgICBjb25zdCBhbHRlcm5hdGUgPSByZW5kZXJlci5wb3AoKTtcblx0ICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYCR7Y29uZGl0aW9ufSA/ICR7Y29uc2VxdWVudH0gOiAke2FsdGVybmF0ZX1gKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldF9wcm9wX3ZhbHVlKGF0dHJpYnV0ZSkge1xuXHQgICAgaWYgKGF0dHJpYnV0ZS5pc190cnVlKVxuXHQgICAgICAgIHJldHVybiB4IGB0cnVlYDtcblx0ICAgIGlmIChhdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgICByZXR1cm4geCBgJydgO1xuXHQgICAgcmV0dXJuIGF0dHJpYnV0ZS5jaHVua3Ncblx0ICAgICAgICAubWFwKGNodW5rID0+IHtcblx0ICAgICAgICBpZiAoY2h1bmsudHlwZSA9PT0gJ1RleHQnKVxuXHQgICAgICAgICAgICByZXR1cm4gc3RyaW5nX2xpdGVyYWwoY2h1bmsuZGF0YSk7XG5cdCAgICAgICAgcmV0dXJuIGNodW5rLm5vZGU7XG5cdCAgICB9KVxuXHQgICAgICAgIC5yZWR1Y2UoKGxocywgcmhzKSA9PiB4IGAke2xoc30gKyAke3Joc31gKTtcblx0fVxuXHRmdW5jdGlvbiBJbmxpbmVDb21wb25lbnQgKG5vZGUsIHJlbmRlcmVyLCBvcHRpb25zKSB7XG5cdCAgICBjb25zdCBiaW5kaW5nX3Byb3BzID0gW107XG5cdCAgICBjb25zdCBiaW5kaW5nX2ZucyA9IFtdO1xuXHQgICAgbm9kZS5iaW5kaW5ncy5mb3JFYWNoKGJpbmRpbmcgPT4ge1xuXHQgICAgICAgIHJlbmRlcmVyLmhhc19iaW5kaW5ncyA9IHRydWU7XG5cdCAgICAgICAgLy8gVE9ETyB0aGlzIHByb2JhYmx5IHdvbid0IHdvcmsgZm9yIGNvbnRleHR1YWwgYmluZGluZ3Ncblx0ICAgICAgICBjb25zdCBzbmlwcGV0ID0gYmluZGluZy5leHByZXNzaW9uLm5vZGU7XG5cdCAgICAgICAgYmluZGluZ19wcm9wcy5wdXNoKHAgYCR7YmluZGluZy5uYW1lfTogJHtzbmlwcGV0fWApO1xuXHQgICAgICAgIGJpbmRpbmdfZm5zLnB1c2gocCBgJHtiaW5kaW5nLm5hbWV9OiAkJHZhbHVlID0+IHsgJHtzbmlwcGV0fSA9ICQkdmFsdWU7ICQkc2V0dGxlZCA9IGZhbHNlIH1gKTtcblx0ICAgIH0pO1xuXHQgICAgY29uc3QgdXNlc19zcHJlYWQgPSBub2RlLmF0dHJpYnV0ZXMuZmluZChhdHRyID0+IGF0dHIuaXNfc3ByZWFkKTtcblx0ICAgIGxldCBwcm9wcztcblx0ICAgIGlmICh1c2VzX3NwcmVhZCkge1xuXHQgICAgICAgIHByb3BzID0geCBgQF9PYmplY3QuYXNzaWduKCR7bm9kZS5hdHRyaWJ1dGVzXG4gICAgICAgICAgICAubWFwKGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmlzX3NwcmVhZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGUuZXhwcmVzc2lvbi5ub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHggYHsgJHthdHRyaWJ1dGUubmFtZX06ICR7Z2V0X3Byb3BfdmFsdWUoYXR0cmlidXRlKX0gfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY29uY2F0KGJpbmRpbmdfcHJvcHMubWFwKHAgPT4geCBgeyAke3B9IH1gKSl9KWA7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICBwcm9wcyA9IHggYHtcblx0XHRcdCR7bm9kZS5hdHRyaWJ1dGVzLm1hcChhdHRyaWJ1dGUgPT4gcCBgJHthdHRyaWJ1dGUubmFtZX06ICR7Z2V0X3Byb3BfdmFsdWUoYXR0cmlidXRlKX1gKX0sXG5cdFx0XHQke2JpbmRpbmdfcHJvcHN9XG5cdFx0fWA7XG5cdCAgICB9XG5cdCAgICBjb25zdCBiaW5kaW5ncyA9IHggYHtcblx0XHQke2JpbmRpbmdfZm5zfVxuXHR9YDtcblx0ICAgIGNvbnN0IGV4cHJlc3Npb24gPSAobm9kZS5uYW1lID09PSAnc3ZlbHRlOnNlbGYnXG5cdCAgICAgICAgPyByZW5kZXJlci5uYW1lXG5cdCAgICAgICAgOiBub2RlLm5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50J1xuXHQgICAgICAgICAgICA/IHggYCgke25vZGUuZXhwcmVzc2lvbi5ub2RlfSkgfHwgQG1pc3NpbmdfY29tcG9uZW50YFxuXHQgICAgICAgICAgICA6IG5vZGUubmFtZS5zcGxpdCgnLicpLnJlZHVjZSgoKGxocywgcmhzKSA9PiB4IGAke2xoc30uJHtyaHN9YCkpKTtcblx0ICAgIGNvbnN0IHNsb3RfZm5zID0gW107XG5cdCAgICBjb25zdCBjaGlsZHJlbiA9IHJlbW92ZV93aGl0ZXNwYWNlX2NoaWxkcmVuKG5vZGUuY2hpbGRyZW4sIG5vZGUubmV4dCk7XG5cdCAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgICAgY29uc3Qgc2xvdF9zY29wZXMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgcmVuZGVyZXIucHVzaCgpO1xuXHQgICAgICAgIHJlbmRlcmVyLnJlbmRlcihjaGlsZHJlbiwgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuXHQgICAgICAgICAgICBzbG90X3Njb3Blc1xuXHQgICAgICAgIH0pKTtcblx0ICAgICAgICBzbG90X3Njb3Blcy5zZXQoJ2RlZmF1bHQnLCB7XG5cdCAgICAgICAgICAgIGlucHV0OiBnZXRfc2xvdF9zY29wZShub2RlLmxldHMpLFxuXHQgICAgICAgICAgICBvdXRwdXQ6IHJlbmRlcmVyLnBvcCgpXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgc2xvdF9zY29wZXMuZm9yRWFjaCgoeyBpbnB1dCwgb3V0cHV0IH0sIG5hbWUpID0+IHtcblx0ICAgICAgICAgICAgaWYgKCFpc19lbXB0eV90ZW1wbGF0ZV9saXRlcmFsKG91dHB1dCkpIHtcblx0ICAgICAgICAgICAgICAgIHNsb3RfZm5zLnB1c2gocCBgJHtuYW1lfTogKCR7aW5wdXR9KSA9PiAke291dHB1dH1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgY29uc3Qgc2xvdHMgPSB4IGB7XG5cdFx0JHtzbG90X2Zuc31cblx0fWA7XG5cdCAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbih4IGBAdmFsaWRhdGVfY29tcG9uZW50KCR7ZXhwcmVzc2lvbn0sIFwiJHtub2RlLm5hbWV9XCIpLiQkcmVuZGVyKCQkcmVzdWx0LCAke3Byb3BzfSwgJHtiaW5kaW5nc30sICR7c2xvdHN9KWApO1xuXHR9XG5cdGZ1bmN0aW9uIGlzX2VtcHR5X3RlbXBsYXRlX2xpdGVyYWwodGVtcGxhdGVfbGl0ZXJhbCkge1xuXHQgICAgcmV0dXJuICh0ZW1wbGF0ZV9saXRlcmFsLmV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMCAmJlxuXHQgICAgICAgIHRlbXBsYXRlX2xpdGVyYWwucXVhc2lzLmxlbmd0aCA9PT0gMSAmJlxuXHQgICAgICAgIHRlbXBsYXRlX2xpdGVyYWwucXVhc2lzWzBdLnZhbHVlLnJhdyA9PT0gXCJcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBTbG90IChub2RlLCByZW5kZXJlciwgb3B0aW9ucykge1xuXHQgICAgY29uc3Qgc2xvdF9kYXRhID0gZ2V0X3Nsb3RfZGF0YShub2RlLnZhbHVlcyk7XG5cdCAgICByZW5kZXJlci5wdXNoKCk7XG5cdCAgICByZW5kZXJlci5yZW5kZXIobm9kZS5jaGlsZHJlbiwgb3B0aW9ucyk7XG5cdCAgICBjb25zdCByZXN1bHQgPSByZW5kZXJlci5wb3AoKTtcblx0ICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKHggYFxuXHRcdCQkc2xvdHMuJHtub2RlLnNsb3RfbmFtZX1cblx0XHRcdD8gJCRzbG90cy4ke25vZGUuc2xvdF9uYW1lfSgke3Nsb3RfZGF0YX0pXG5cdFx0XHQ6ICR7cmVzdWx0fVxuXHRgKTtcblx0fVxuXG5cdGZ1bmN0aW9uIFRhZyQxIChub2RlLCByZW5kZXJlciwgX29wdGlvbnMpIHtcblx0ICAgIGNvbnN0IHNuaXBwZXQgPSBub2RlLmV4cHJlc3Npb24ubm9kZTtcblx0ICAgIHJlbmRlcmVyLmFkZF9leHByZXNzaW9uKG5vZGUucGFyZW50ICYmXG5cdCAgICAgICAgbm9kZS5wYXJlbnQudHlwZSA9PT0gJ0VsZW1lbnQnICYmXG5cdCAgICAgICAgbm9kZS5wYXJlbnQubmFtZSA9PT0gJ3N0eWxlJ1xuXHQgICAgICAgID8gc25pcHBldFxuXHQgICAgICAgIDogeCBgQGVzY2FwZSgke3NuaXBwZXR9KWApO1xuXHR9XG5cblx0ZnVuY3Rpb24gVGV4dCAobm9kZSwgcmVuZGVyZXIsIF9vcHRpb25zKSB7XG5cdCAgICBsZXQgdGV4dCA9IG5vZGUuZGF0YTtcblx0ICAgIGlmICghbm9kZS5wYXJlbnQgfHxcblx0ICAgICAgICBub2RlLnBhcmVudC50eXBlICE9PSAnRWxlbWVudCcgfHxcblx0ICAgICAgICAobm9kZS5wYXJlbnQubmFtZSAhPT0gJ3NjcmlwdCcgJiYgbm9kZS5wYXJlbnQubmFtZSAhPT0gJ3N0eWxlJykpIHtcblx0ICAgICAgICAvLyB1bmxlc3MgdGhpcyBUZXh0IG5vZGUgaXMgaW5zaWRlIGEgPHNjcmlwdD4gb3IgPHN0eWxlPiBlbGVtZW50LCBlc2NhcGUgJiw8LD5cblx0ICAgICAgICB0ZXh0ID0gZXNjYXBlX2h0bWwodGV4dCk7XG5cdCAgICB9XG5cdCAgICByZW5kZXJlci5hZGRfc3RyaW5nKHRleHQpO1xuXHR9XG5cblx0ZnVuY3Rpb24gVGl0bGUgKG5vZGUsIHJlbmRlcmVyLCBvcHRpb25zKSB7XG5cdCAgICByZW5kZXJlci5wdXNoKCk7XG5cdCAgICByZW5kZXJlci5hZGRfc3RyaW5nKGA8dGl0bGU+YCk7XG5cdCAgICByZW5kZXJlci5yZW5kZXIobm9kZS5jaGlsZHJlbiwgb3B0aW9ucyk7XG5cdCAgICByZW5kZXJlci5hZGRfc3RyaW5nKGA8L3RpdGxlPmApO1xuXHQgICAgY29uc3QgcmVzdWx0ID0gcmVuZGVyZXIucG9wKCk7XG5cdCAgICByZW5kZXJlci5hZGRfZXhwcmVzc2lvbih4IGAkJHJlc3VsdC50aXRsZSA9ICR7cmVzdWx0fSwgXCJcImApO1xuXHR9XG5cblx0ZnVuY3Rpb24gbm9vcCQxKCkgeyB9XG5cdGNvbnN0IGhhbmRsZXJzJDEgPSB7XG5cdCAgICBBd2FpdEJsb2NrLFxuXHQgICAgQm9keTogbm9vcCQxLFxuXHQgICAgQ29tbWVudDogQ29tbWVudCQxLFxuXHQgICAgRGVidWdUYWcsXG5cdCAgICBFYWNoQmxvY2ssXG5cdCAgICBFbGVtZW50LFxuXHQgICAgSGVhZCxcblx0ICAgIElmQmxvY2ssXG5cdCAgICBJbmxpbmVDb21wb25lbnQsXG5cdCAgICBNdXN0YWNoZVRhZzogVGFnJDEsXG5cdCAgICBPcHRpb25zOiBub29wJDEsXG5cdCAgICBSYXdNdXN0YWNoZVRhZzogSHRtbFRhZyxcblx0ICAgIFNsb3QsXG5cdCAgICBUZXh0LFxuXHQgICAgVGl0bGUsXG5cdCAgICBXaW5kb3c6IG5vb3AkMVxuXHR9O1xuXHRjbGFzcyBSZW5kZXJlciQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKHsgbmFtZSB9KSB7XG5cdCAgICAgICAgdGhpcy5oYXNfYmluZGluZ3MgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnN0YWNrID0gW107XG5cdCAgICAgICAgdGhpcy50YXJnZXRzID0gW107XG5cdCAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblx0ICAgICAgICB0aGlzLnB1c2goKTtcblx0ICAgIH1cblx0ICAgIGFkZF9zdHJpbmcoc3RyKSB7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50LnZhbHVlICs9IGVzY2FwZV90ZW1wbGF0ZShzdHIpO1xuXHQgICAgfVxuXHQgICAgYWRkX2V4cHJlc3Npb24obm9kZSkge1xuXHQgICAgICAgIHRoaXMubGl0ZXJhbC5xdWFzaXMucHVzaCh7XG5cdCAgICAgICAgICAgIHR5cGU6ICdUZW1wbGF0ZUVsZW1lbnQnLFxuXHQgICAgICAgICAgICB2YWx1ZTogeyByYXc6IHRoaXMuY3VycmVudC52YWx1ZSwgY29va2VkOiBudWxsIH0sXG5cdCAgICAgICAgICAgIHRhaWw6IGZhbHNlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5saXRlcmFsLmV4cHJlc3Npb25zLnB1c2gobm9kZSk7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50LnZhbHVlID0gJyc7XG5cdCAgICB9XG5cdCAgICBwdXNoKCkge1xuXHQgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQgPSB7IHZhbHVlOiAnJyB9O1xuXHQgICAgICAgIGNvbnN0IGxpdGVyYWwgPSB0aGlzLmxpdGVyYWwgPSB7XG5cdCAgICAgICAgICAgIHR5cGU6ICdUZW1wbGF0ZUxpdGVyYWwnLFxuXHQgICAgICAgICAgICBleHByZXNzaW9uczogW10sXG5cdCAgICAgICAgICAgIHF1YXNpczogW11cblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7IGN1cnJlbnQsIGxpdGVyYWwgfSk7XG5cdCAgICB9XG5cdCAgICBwb3AoKSB7XG5cdCAgICAgICAgdGhpcy5saXRlcmFsLnF1YXNpcy5wdXNoKHtcblx0ICAgICAgICAgICAgdHlwZTogJ1RlbXBsYXRlRWxlbWVudCcsXG5cdCAgICAgICAgICAgIHZhbHVlOiB7IHJhdzogdGhpcy5jdXJyZW50LnZhbHVlLCBjb29rZWQ6IG51bGwgfSxcblx0ICAgICAgICAgICAgdGFpbDogdHJ1ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGNvbnN0IHBvcHBlZCA9IHRoaXMuc3RhY2sucG9wKCk7XG5cdCAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgICBpZiAobGFzdCkge1xuXHQgICAgICAgICAgICB0aGlzLmxpdGVyYWwgPSBsYXN0LmxpdGVyYWw7XG5cdCAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGxhc3QuY3VycmVudDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHBvcHBlZC5saXRlcmFsO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKG5vZGVzLCBvcHRpb25zKSB7XG5cdCAgICAgICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzJDFbbm9kZS50eXBlXTtcblx0ICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGhhbmRsZXIgZm9yICcke25vZGUudHlwZX0nIG5vZGVzYCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaGFuZGxlcihub2RlLCB0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHNzcihjb21wb25lbnQsIG9wdGlvbnMpIHtcblx0ICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyJDEoe1xuXHQgICAgICAgIG5hbWU6IGNvbXBvbmVudC5uYW1lXG5cdCAgICB9KTtcblx0ICAgIGNvbnN0IHsgbmFtZSB9ID0gY29tcG9uZW50O1xuXHQgICAgLy8gY3JlYXRlICQkcmVuZGVyIGZ1bmN0aW9uXG5cdCAgICByZW5kZXJlci5yZW5kZXIodHJpbShjb21wb25lbnQuZnJhZ21lbnQuY2hpbGRyZW4pLCBPYmplY3QuYXNzaWduKHtcblx0ICAgICAgICBsb2NhdGU6IGNvbXBvbmVudC5sb2NhdGVcblx0ICAgIH0sIG9wdGlvbnMpKTtcblx0ICAgIC8vIFRPRE8gcHV0IHRoaXMgaW5zaWRlIHRoZSBSZW5kZXJlciBjbGFzc1xuXHQgICAgY29uc3QgbGl0ZXJhbCA9IHJlbmRlcmVyLnBvcCgpO1xuXHQgICAgLy8gVE9ETyBjb25jYXRlbmF0ZSBDU1MgbWFwc1xuXHQgICAgY29uc3QgY3NzID0gb3B0aW9ucy5jdXN0b21FbGVtZW50ID9cblx0ICAgICAgICB7IGNvZGU6IG51bGwsIG1hcDogbnVsbCB9IDpcblx0ICAgICAgICBjb21wb25lbnQuc3R5bGVzaGVldC5yZW5kZXIob3B0aW9ucy5maWxlbmFtZSwgdHJ1ZSk7XG5cdCAgICBjb25zdCB1c2VzX3Jlc3QgPSBjb21wb25lbnQudmFyX2xvb2t1cC5oYXMoJyQkcmVzdFByb3BzJyk7XG5cdCAgICBjb25zdCBwcm9wcyA9IGNvbXBvbmVudC52YXJzLmZpbHRlcih2YXJpYWJsZSA9PiAhdmFyaWFibGUubW9kdWxlICYmIHZhcmlhYmxlLmV4cG9ydF9uYW1lKTtcblx0ICAgIGNvbnN0IHJlc3QgPSB1c2VzX3Jlc3QgPyBiIGBsZXQgJCRyZXN0UHJvcHMgPSBAY29tcHV0ZV9yZXN0X3Byb3BzKCQkcHJvcHMsIFske3Byb3BzLm1hcChwcm9wID0+IGBcIiR7cHJvcC5leHBvcnRfbmFtZX1cImApLmpvaW4oJywnKX1dKTtgIDogbnVsbDtcblx0ICAgIGNvbnN0IHJlYWN0aXZlX3N0b3JlcyA9IGNvbXBvbmVudC52YXJzLmZpbHRlcih2YXJpYWJsZSA9PiB2YXJpYWJsZS5uYW1lWzBdID09PSAnJCcgJiYgdmFyaWFibGUubmFtZVsxXSAhPT0gJyQnKTtcblx0ICAgIGNvbnN0IHJlYWN0aXZlX3N0b3JlX3ZhbHVlcyA9IHJlYWN0aXZlX3N0b3Jlc1xuXHQgICAgICAgIC5tYXAoKHsgbmFtZSB9KSA9PiB7XG5cdCAgICAgICAgY29uc3Qgc3RvcmVfbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG5cdCAgICAgICAgY29uc3Qgc3RvcmUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQoc3RvcmVfbmFtZSk7XG5cdCAgICAgICAgaWYgKHN0b3JlICYmIHN0b3JlLmhvaXN0YWJsZSlcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgY29uc3QgYXNzaWdubWVudCA9IGIgYCR7bmFtZX0gPSBAZ2V0X3N0b3JlX3ZhbHVlKCR7c3RvcmVfbmFtZX0pO2A7XG5cdCAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5jb21waWxlX29wdGlvbnMuZGV2XG5cdCAgICAgICAgICAgID8gYiBgQHZhbGlkYXRlX3N0b3JlKCR7c3RvcmVfbmFtZX0sICcke3N0b3JlX25hbWV9Jyk7ICR7YXNzaWdubWVudH1gXG5cdCAgICAgICAgICAgIDogYXNzaWdubWVudDtcblx0ICAgIH0pXG5cdCAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcblx0ICAgIGNvbXBvbmVudC5yZXdyaXRlX3Byb3BzKCh7IG5hbWUgfSkgPT4ge1xuXHQgICAgICAgIGNvbnN0IHZhbHVlID0gYCQke25hbWV9YDtcblx0ICAgICAgICBsZXQgaW5zZXJ0ID0gYiBgJHt2YWx1ZX0gPSBAZ2V0X3N0b3JlX3ZhbHVlKCR7bmFtZX0pYDtcblx0ICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYpIHtcblx0ICAgICAgICAgICAgaW5zZXJ0ID0gYiBgQHZhbGlkYXRlX3N0b3JlKCR7bmFtZX0sICcke25hbWV9Jyk7ICR7aW5zZXJ0fWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpbnNlcnQ7XG5cdCAgICB9KTtcblx0ICAgIGNvbnN0IGluc3RhbmNlX2phdmFzY3JpcHQgPSBjb21wb25lbnQuZXh0cmFjdF9qYXZhc2NyaXB0KGNvbXBvbmVudC5hc3QuaW5zdGFuY2UpO1xuXHQgICAgLy8gVE9ETyBvbmx5IGRvIHRoaXMgZm9yIHByb3BzIHdpdGggYSBkZWZhdWx0IHZhbHVlXG5cdCAgICBjb25zdCBwYXJlbnRfYmluZGluZ3MgPSBpbnN0YW5jZV9qYXZhc2NyaXB0XG5cdCAgICAgICAgPyBjb21wb25lbnQudmFyc1xuXHQgICAgICAgICAgICAuZmlsdGVyKHZhcmlhYmxlID0+ICF2YXJpYWJsZS5tb2R1bGUgJiYgdmFyaWFibGUuZXhwb3J0X25hbWUpXG5cdCAgICAgICAgICAgIC5tYXAocHJvcCA9PiB7XG5cdCAgICAgICAgICAgIHJldHVybiBiIGBpZiAoJCRwcm9wcy4ke3Byb3AuZXhwb3J0X25hbWV9ID09PSB2b2lkIDAgJiYgJCRiaW5kaW5ncy4ke3Byb3AuZXhwb3J0X25hbWV9ICYmICR7cHJvcC5uYW1lfSAhPT0gdm9pZCAwKSAkJGJpbmRpbmdzLiR7cHJvcC5leHBvcnRfbmFtZX0oJHtwcm9wLm5hbWV9KTtgO1xuXHQgICAgICAgIH0pXG5cdCAgICAgICAgOiBbXTtcblx0ICAgIGNvbnN0IHJlYWN0aXZlX2RlY2xhcmF0aW9ucyA9IGNvbXBvbmVudC5yZWFjdGl2ZV9kZWNsYXJhdGlvbnMubWFwKGQgPT4ge1xuXHQgICAgICAgIGNvbnN0IGJvZHkgPSBkLm5vZGUuYm9keTtcblx0ICAgICAgICBsZXQgc3RhdGVtZW50ID0gYiBgJHtib2R5fWA7XG5cdCAgICAgICAgaWYgKGQuZGVjbGFyYXRpb24pIHtcblx0ICAgICAgICAgICAgY29uc3QgZGVjbGFyZWQgPSBleHRyYWN0X25hbWVzKGQuZGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICBjb25zdCBpbmplY3RlZCA9IGRlY2xhcmVkLmZpbHRlcihuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuYW1lWzBdICE9PSAnJCcgJiYgY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpLmluamVjdGVkO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgY29uc3Qgc2VsZl9kZXBlbmRlbmNpZXMgPSBpbmplY3RlZC5maWx0ZXIobmFtZSA9PiBkLmRlcGVuZGVuY2llcy5oYXMobmFtZSkpO1xuXHQgICAgICAgICAgICBpZiAoaW5qZWN0ZWQubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBpbiBzb21lIGNhc2VzIHdlIG5lZWQgdG8gZG8gYGxldCBmb287IFtleHByZXNzaW9uXWAsIGluXG5cdCAgICAgICAgICAgICAgICAvLyBvdGhlcnMgd2UgY2FuIGRvIGBsZXQgW2V4cHJlc3Npb25dYFxuXHQgICAgICAgICAgICAgICAgY29uc3Qgc2VwYXJhdGUgPSAoc2VsZl9kZXBlbmRlbmNpZXMubGVuZ3RoID4gMCB8fFxuXHQgICAgICAgICAgICAgICAgICAgIGRlY2xhcmVkLmxlbmd0aCA+IGluamVjdGVkLmxlbmd0aCk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBib2R5LmV4cHJlc3Npb247XG5cdCAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSBzZXBhcmF0ZVxuXHQgICAgICAgICAgICAgICAgICAgID8gYiBgXG5cdFx0XHRcdFx0XHQke2luamVjdGVkLm1hcChuYW1lID0+IGIgYGxldCAke25hbWV9O2ApfVxuXHRcdFx0XHRcdFx0JHtzdGF0ZW1lbnR9YFxuXHQgICAgICAgICAgICAgICAgICAgIDogYiBgXG5cdFx0XHRcdFx0XHRsZXQgJHtsZWZ0fSA9ICR7cmlnaHR9YDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHsgLy8gVE9ETyBkbyBub3QgYWRkIGxhYmVsIGlmIGl0J3Mgbm90IHJlZmVyZW5jZWRcblx0ICAgICAgICAgICAgc3RhdGVtZW50ID0gYiBgJDogeyAke3N0YXRlbWVudH0gfWA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBzdGF0ZW1lbnQ7XG5cdCAgICB9KTtcblx0ICAgIGNvbnN0IG1haW4gPSByZW5kZXJlci5oYXNfYmluZGluZ3Ncblx0ICAgICAgICA/IGIgYFxuXHRcdFx0bGV0ICQkc2V0dGxlZDtcblx0XHRcdGxldCAkJHJlbmRlcmVkO1xuXG5cdFx0XHRkbyB7XG5cdFx0XHRcdCQkc2V0dGxlZCA9IHRydWU7XG5cblx0XHRcdFx0JHtyZWFjdGl2ZV9zdG9yZV92YWx1ZXN9XG5cblx0XHRcdFx0JHtyZWFjdGl2ZV9kZWNsYXJhdGlvbnN9XG5cblx0XHRcdFx0JCRyZW5kZXJlZCA9ICR7bGl0ZXJhbH07XG5cdFx0XHR9IHdoaWxlICghJCRzZXR0bGVkKTtcblxuXHRcdFx0cmV0dXJuICQkcmVuZGVyZWQ7XG5cdFx0YFxuXHQgICAgICAgIDogYiBgXG5cdFx0XHQke3JlYWN0aXZlX3N0b3JlX3ZhbHVlc31cblxuXHRcdFx0JHtyZWFjdGl2ZV9kZWNsYXJhdGlvbnN9XG5cblx0XHRcdHJldHVybiAke2xpdGVyYWx9O2A7XG5cdCAgICBjb25zdCBibG9ja3MgPSBbXG5cdCAgICAgICAgcmVzdCxcblx0ICAgICAgICAuLi5yZWFjdGl2ZV9zdG9yZXMubWFwKCh7IG5hbWUgfSkgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCBzdG9yZV9uYW1lID0gbmFtZS5zbGljZSgxKTtcblx0ICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQoc3RvcmVfbmFtZSk7XG5cdCAgICAgICAgICAgIGlmIChzdG9yZSAmJiBzdG9yZS5ob2lzdGFibGUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBiIGBsZXQgJHtuYW1lfSA9IEBnZXRfc3RvcmVfdmFsdWUoJHtzdG9yZV9uYW1lfSk7YDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gYiBgbGV0ICR7bmFtZX07YDtcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBpbnN0YW5jZV9qYXZhc2NyaXB0LFxuXHQgICAgICAgIC4uLnBhcmVudF9iaW5kaW5ncyxcblx0ICAgICAgICBjc3MuY29kZSAmJiBiIGAkJHJlc3VsdC5jc3MuYWRkKCNjc3MpO2AsXG5cdCAgICAgICAgbWFpblxuXHQgICAgXS5maWx0ZXIoQm9vbGVhbik7XG5cdCAgICBjb25zdCBqcyA9IGIgYFxuXHRcdCR7Y3NzLmNvZGUgPyBiIGBcblx0XHRjb25zdCAjY3NzID0ge1xuXHRcdFx0Y29kZTogXCIke2Nzcy5jb2RlfVwiLFxuXHRcdFx0bWFwOiAke2Nzcy5tYXAgPyBzdHJpbmdfbGl0ZXJhbChjc3MubWFwLnRvU3RyaW5nKCkpIDogJ251bGwnfVxuXHRcdH07YCA6IG51bGx9XG5cblx0XHQke2NvbXBvbmVudC5leHRyYWN0X2phdmFzY3JpcHQoY29tcG9uZW50LmFzdC5tb2R1bGUpfVxuXG5cdFx0JHtjb21wb25lbnQuZnVsbHlfaG9pc3RlZH1cblxuXHRcdGNvbnN0ICR7bmFtZX0gPSBAY3JlYXRlX3Nzcl9jb21wb25lbnQoKCQkcmVzdWx0LCAkJHByb3BzLCAkJGJpbmRpbmdzLCAkJHNsb3RzKSA9PiB7XG5cdFx0XHQke2Jsb2Nrc31cblx0XHR9KTtcblx0YDtcblx0ICAgIHJldHVybiB7IGpzLCBjc3MgfTtcblx0fVxuXHRmdW5jdGlvbiB0cmltKG5vZGVzKSB7XG5cdCAgICBsZXQgc3RhcnQgPSAwO1xuXHQgICAgZm9yICg7IHN0YXJ0IDwgbm9kZXMubGVuZ3RoOyBzdGFydCArPSAxKSB7XG5cdCAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW3N0YXJ0XTtcblx0ICAgICAgICBpZiAobm9kZS50eXBlICE9PSAnVGV4dCcpXG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5yZXBsYWNlKC9eXFxzKy8sICcnKTtcblx0ICAgICAgICBpZiAobm9kZS5kYXRhKVxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgIH1cblx0ICAgIGxldCBlbmQgPSBub2Rlcy5sZW5ndGg7XG5cdCAgICBmb3IgKDsgZW5kID4gc3RhcnQ7IGVuZCAtPSAxKSB7XG5cdCAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2VuZCAtIDFdO1xuXHQgICAgICAgIGlmIChub2RlLnR5cGUgIT09ICdUZXh0Jylcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLnJlcGxhY2UoL1xccyskLywgJycpO1xuXHQgICAgICAgIGlmIChub2RlLmRhdGEpXG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5vZGVzLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXHR9XG5cblx0Y29uc3Qgd3JhcHBlcnMkMSA9IHsgZXNtLCBjanMgfTtcblx0ZnVuY3Rpb24gY3JlYXRlX21vZHVsZShwcm9ncmFtLCBmb3JtYXQsIG5hbWUsIGJhbm5lciwgc3ZlbHRlUGF0aCA9ICdzdmVsdGUnLCBoZWxwZXJzLCBnbG9iYWxzLCBpbXBvcnRzLCBtb2R1bGVfZXhwb3J0cykge1xuXHQgICAgY29uc3QgaW50ZXJuYWxfcGF0aCA9IGAke3N2ZWx0ZVBhdGh9L2ludGVybmFsYDtcblx0ICAgIGhlbHBlcnMuc29ydCgoYSwgYikgPT4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDEpO1xuXHQgICAgZ2xvYmFscy5zb3J0KChhLCBiKSA9PiAoYS5uYW1lIDwgYi5uYW1lKSA/IC0xIDogMSk7XG5cdCAgICBpZiAoZm9ybWF0ID09PSAnZXNtJykge1xuXHQgICAgICAgIHJldHVybiBlc20ocHJvZ3JhbSwgbmFtZSwgYmFubmVyLCBzdmVsdGVQYXRoLCBpbnRlcm5hbF9wYXRoLCBoZWxwZXJzLCBnbG9iYWxzLCBpbXBvcnRzLCBtb2R1bGVfZXhwb3J0cyk7XG5cdCAgICB9XG5cdCAgICBpZiAoZm9ybWF0ID09PSAnY2pzJylcblx0ICAgICAgICByZXR1cm4gY2pzKHByb2dyYW0sIG5hbWUsIGJhbm5lciwgc3ZlbHRlUGF0aCwgaW50ZXJuYWxfcGF0aCwgaGVscGVycywgZ2xvYmFscywgaW1wb3J0cywgbW9kdWxlX2V4cG9ydHMpO1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKGBvcHRpb25zLmZvcm1hdCBpcyBpbnZhbGlkIChtdXN0IGJlICR7bGlzdCQxKE9iamVjdC5rZXlzKHdyYXBwZXJzJDEpKX0pYCk7XG5cdH1cblx0ZnVuY3Rpb24gZWRpdF9zb3VyY2Uoc291cmNlLCBzdmVsdGVQYXRoKSB7XG5cdCAgICByZXR1cm4gc291cmNlID09PSAnc3ZlbHRlJyB8fCBzb3VyY2Uuc3RhcnRzV2l0aCgnc3ZlbHRlLycpXG5cdCAgICAgICAgPyBzb3VyY2UucmVwbGFjZSgnc3ZlbHRlJywgc3ZlbHRlUGF0aClcblx0ICAgICAgICA6IHNvdXJjZTtcblx0fVxuXHRmdW5jdGlvbiBnZXRfaW50ZXJuYWxfZ2xvYmFscyhnbG9iYWxzLCBoZWxwZXJzKSB7XG5cdCAgICByZXR1cm4gZ2xvYmFscy5sZW5ndGggPiAwICYmIHtcblx0ICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG5cdCAgICAgICAga2luZDogJ2NvbnN0Jyxcblx0ICAgICAgICBkZWNsYXJhdGlvbnM6IFt7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcblx0ICAgICAgICAgICAgICAgIGlkOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ09iamVjdFBhdHRlcm4nLFxuXHQgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IGdsb2JhbHMubWFwKGcgPT4gKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1Byb3BlcnR5Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRoYW5kOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQ6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBnLm5hbWUgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGcuYWxpYXMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdpbml0J1xuXHQgICAgICAgICAgICAgICAgICAgIH0pKVxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGluaXQ6IGhlbHBlcnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09ICdnbG9iYWxzJykuYWxpYXNcblx0ICAgICAgICAgICAgfV1cblx0ICAgIH07XG5cdH1cblx0ZnVuY3Rpb24gZXNtKHByb2dyYW0sIG5hbWUsIGJhbm5lciwgc3ZlbHRlUGF0aCwgaW50ZXJuYWxfcGF0aCwgaGVscGVycywgZ2xvYmFscywgaW1wb3J0cywgbW9kdWxlX2V4cG9ydHMpIHtcblx0ICAgIGNvbnN0IGltcG9ydF9kZWNsYXJhdGlvbiA9IHtcblx0ICAgICAgICB0eXBlOiAnSW1wb3J0RGVjbGFyYXRpb24nLFxuXHQgICAgICAgIHNwZWNpZmllcnM6IGhlbHBlcnMubWFwKGggPT4gKHtcblx0ICAgICAgICAgICAgdHlwZTogJ0ltcG9ydFNwZWNpZmllcicsXG5cdCAgICAgICAgICAgIGxvY2FsOiBoLmFsaWFzLFxuXHQgICAgICAgICAgICBpbXBvcnRlZDogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGgubmFtZSB9XG5cdCAgICAgICAgfSkpLFxuXHQgICAgICAgIHNvdXJjZTogeyB0eXBlOiAnTGl0ZXJhbCcsIHZhbHVlOiBpbnRlcm5hbF9wYXRoIH1cblx0ICAgIH07XG5cdCAgICBjb25zdCBpbnRlcm5hbF9nbG9iYWxzID0gZ2V0X2ludGVybmFsX2dsb2JhbHMoZ2xvYmFscywgaGVscGVycyk7XG5cdCAgICAvLyBlZGl0IHVzZXIgaW1wb3J0c1xuXHQgICAgaW1wb3J0cy5mb3JFYWNoKG5vZGUgPT4ge1xuXHQgICAgICAgIG5vZGUuc291cmNlLnZhbHVlID0gZWRpdF9zb3VyY2Uobm9kZS5zb3VyY2UudmFsdWUsIHN2ZWx0ZVBhdGgpO1xuXHQgICAgfSk7XG5cdCAgICBjb25zdCBleHBvcnRzID0gbW9kdWxlX2V4cG9ydHMubGVuZ3RoID4gMCAmJiB7XG5cdCAgICAgICAgdHlwZTogJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nLFxuXHQgICAgICAgIHNwZWNpZmllcnM6IG1vZHVsZV9leHBvcnRzLm1hcCh4ID0+ICh7XG5cdCAgICAgICAgICAgIHR5cGU6ICdTcGVjaWZpZXInLFxuXHQgICAgICAgICAgICBsb2NhbDogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHgubmFtZSB9LFxuXHQgICAgICAgICAgICBleHBvcnRlZDogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHguYXMgfVxuXHQgICAgICAgIH0pKVxuXHQgICAgfTtcblx0ICAgIHByb2dyYW0uYm9keSA9IGIgYFxuXHRcdC8qICR7YmFubmVyfSAqL1xuXG5cdFx0JHtpbXBvcnRfZGVjbGFyYXRpb259XG5cdFx0JHtpbnRlcm5hbF9nbG9iYWxzfVxuXHRcdCR7aW1wb3J0c31cblxuXHRcdCR7cHJvZ3JhbS5ib2R5fVxuXG5cdFx0ZXhwb3J0IGRlZmF1bHQgJHtuYW1lfTtcblx0XHQke2V4cG9ydHN9XG5cdGA7XG5cdH1cblx0ZnVuY3Rpb24gY2pzKHByb2dyYW0sIG5hbWUsIGJhbm5lciwgc3ZlbHRlUGF0aCwgaW50ZXJuYWxfcGF0aCwgaGVscGVycywgZ2xvYmFscywgaW1wb3J0cywgbW9kdWxlX2V4cG9ydHMpIHtcblx0ICAgIGNvbnN0IGludGVybmFsX3JlcXVpcmVzID0ge1xuXHQgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0aW9uJyxcblx0ICAgICAgICBraW5kOiAnY29uc3QnLFxuXHQgICAgICAgIGRlY2xhcmF0aW9uczogW3tcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuXHQgICAgICAgICAgICAgICAgaWQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiAnT2JqZWN0UGF0dGVybicsXG5cdCAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogaGVscGVycy5tYXAoaCA9PiAoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUHJvcGVydHknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydGhhbmQ6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGgubmFtZSB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaC5hbGlhcyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ2luaXQnXG5cdCAgICAgICAgICAgICAgICAgICAgfSkpXG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgaW5pdDogeCBgcmVxdWlyZShcIiR7aW50ZXJuYWxfcGF0aH1cIilgXG5cdCAgICAgICAgICAgIH1dXG5cdCAgICB9O1xuXHQgICAgY29uc3QgaW50ZXJuYWxfZ2xvYmFscyA9IGdldF9pbnRlcm5hbF9nbG9iYWxzKGdsb2JhbHMsIGhlbHBlcnMpO1xuXHQgICAgY29uc3QgdXNlcl9yZXF1aXJlcyA9IGltcG9ydHMubWFwKG5vZGUgPT4ge1xuXHQgICAgICAgIGNvbnN0IGluaXQgPSB4IGByZXF1aXJlKFwiJHtlZGl0X3NvdXJjZShub2RlLnNvdXJjZS52YWx1ZSwgc3ZlbHRlUGF0aCl9XCIpYDtcblx0ICAgICAgICBpZiAobm9kZS5zcGVjaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICByZXR1cm4gYiBgJHtpbml0fTtgO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG5cdCAgICAgICAgICAgIGtpbmQ6ICdjb25zdCcsXG5cdCAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW3tcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdG9yJyxcblx0ICAgICAgICAgICAgICAgICAgICBpZDogbm9kZS5zcGVjaWZpZXJzWzBdLnR5cGUgPT09ICdJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXInXG5cdCAgICAgICAgICAgICAgICAgICAgICAgID8geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IG5vZGUuc3BlY2lmaWVyc1swXS5sb2NhbC5uYW1lIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnT2JqZWN0UGF0dGVybicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBub2RlLnNwZWNpZmllcnMubWFwKHMgPT4gKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUHJvcGVydHknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRoYW5kOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBzLnR5cGUgPT09ICdJbXBvcnRTcGVjaWZpZXInID8gcy5pbXBvcnRlZCA6IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZGVmYXVsdCcgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcy5sb2NhbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAnaW5pdCdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgICAgIGluaXRcblx0ICAgICAgICAgICAgICAgIH1dXG5cdCAgICAgICAgfTtcblx0ICAgIH0pO1xuXHQgICAgY29uc3QgZXhwb3J0cyA9IG1vZHVsZV9leHBvcnRzLm1hcCh4ID0+IGIgYGV4cG9ydHMuJHt7IHR5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogeC5hcyB9fSA9ICR7eyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHgubmFtZSB9fTtgKTtcblx0ICAgIHByb2dyYW0uYm9keSA9IGIgYFxuXHRcdC8qICR7YmFubmVyfSAqL1xuXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFx0JHtpbnRlcm5hbF9yZXF1aXJlc31cblx0XHQke2ludGVybmFsX2dsb2JhbHN9XG5cdFx0JHt1c2VyX3JlcXVpcmVzfVxuXG5cdFx0JHtwcm9ncmFtLmJvZHl9XG5cblx0XHRleHBvcnRzLmRlZmF1bHQgPSAke25hbWV9O1xuXHRcdCR7ZXhwb3J0c31cblx0YDtcblx0fVxuXG5cdHZhciBDaHVuayA9IGZ1bmN0aW9uIENodW5rKHN0YXJ0LCBlbmQsIGNvbnRlbnQpIHtcblx0XHR0aGlzLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy5vcmlnaW5hbCA9IGNvbnRlbnQ7XG5cblx0XHR0aGlzLmludHJvID0gJyc7XG5cdFx0dGhpcy5vdXRybyA9ICcnO1xuXG5cdFx0dGhpcy5jb250ZW50ID0gY29udGVudDtcblx0XHR0aGlzLnN0b3JlTmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMuZWRpdGVkID0gZmFsc2U7XG5cblx0XHQvLyB3ZSBtYWtlIHRoZXNlIG5vbi1lbnVtZXJhYmxlLCBmb3Igc2FuaXR5IHdoaWxlIGRlYnVnZ2luZ1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0XHRcdHByZXZpb3VzOiB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0bmV4dDogICAgIHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBudWxsIH1cblx0XHR9KTtcblx0fTtcblxuXHRDaHVuay5wcm90b3R5cGUuYXBwZW5kTGVmdCA9IGZ1bmN0aW9uIGFwcGVuZExlZnQgKGNvbnRlbnQpIHtcblx0XHR0aGlzLm91dHJvICs9IGNvbnRlbnQ7XG5cdH07XG5cblx0Q2h1bmsucHJvdG90eXBlLmFwcGVuZFJpZ2h0ID0gZnVuY3Rpb24gYXBwZW5kUmlnaHQgKGNvbnRlbnQpIHtcblx0XHR0aGlzLmludHJvID0gdGhpcy5pbnRybyArIGNvbnRlbnQ7XG5cdH07XG5cblx0Q2h1bmsucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuXHRcdHZhciBjaHVuayA9IG5ldyBDaHVuayh0aGlzLnN0YXJ0LCB0aGlzLmVuZCwgdGhpcy5vcmlnaW5hbCk7XG5cblx0XHRjaHVuay5pbnRybyA9IHRoaXMuaW50cm87XG5cdFx0Y2h1bmsub3V0cm8gPSB0aGlzLm91dHJvO1xuXHRcdGNodW5rLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnQ7XG5cdFx0Y2h1bmsuc3RvcmVOYW1lID0gdGhpcy5zdG9yZU5hbWU7XG5cdFx0Y2h1bmsuZWRpdGVkID0gdGhpcy5lZGl0ZWQ7XG5cblx0XHRyZXR1cm4gY2h1bms7XG5cdH07XG5cblx0Q2h1bmsucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMgKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQgPCBpbmRleCAmJiBpbmRleCA8IHRoaXMuZW5kO1xuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS5lYWNoTmV4dCA9IGZ1bmN0aW9uIGVhY2hOZXh0IChmbikge1xuXHRcdHZhciBjaHVuayA9IHRoaXM7XG5cdFx0d2hpbGUgKGNodW5rKSB7XG5cdFx0XHRmbihjaHVuayk7XG5cdFx0XHRjaHVuayA9IGNodW5rLm5leHQ7XG5cdFx0fVxuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS5lYWNoUHJldmlvdXMgPSBmdW5jdGlvbiBlYWNoUHJldmlvdXMgKGZuKSB7XG5cdFx0dmFyIGNodW5rID0gdGhpcztcblx0XHR3aGlsZSAoY2h1bmspIHtcblx0XHRcdGZuKGNodW5rKTtcblx0XHRcdGNodW5rID0gY2h1bmsucHJldmlvdXM7XG5cdFx0fVxuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS5lZGl0ID0gZnVuY3Rpb24gZWRpdCAoY29udGVudCwgc3RvcmVOYW1lLCBjb250ZW50T25seSkge1xuXHRcdHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG5cdFx0aWYgKCFjb250ZW50T25seSkge1xuXHRcdFx0dGhpcy5pbnRybyA9ICcnO1xuXHRcdFx0dGhpcy5vdXRybyA9ICcnO1xuXHRcdH1cblx0XHR0aGlzLnN0b3JlTmFtZSA9IHN0b3JlTmFtZTtcblxuXHRcdHRoaXMuZWRpdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS5wcmVwZW5kTGVmdCA9IGZ1bmN0aW9uIHByZXBlbmRMZWZ0IChjb250ZW50KSB7XG5cdFx0dGhpcy5vdXRybyA9IGNvbnRlbnQgKyB0aGlzLm91dHJvO1xuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS5wcmVwZW5kUmlnaHQgPSBmdW5jdGlvbiBwcmVwZW5kUmlnaHQgKGNvbnRlbnQpIHtcblx0XHR0aGlzLmludHJvID0gY29udGVudCArIHRoaXMuaW50cm87XG5cdH07XG5cblx0Q2h1bmsucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGluZGV4KSB7XG5cdFx0dmFyIHNsaWNlSW5kZXggPSBpbmRleCAtIHRoaXMuc3RhcnQ7XG5cblx0XHR2YXIgb3JpZ2luYWxCZWZvcmUgPSB0aGlzLm9yaWdpbmFsLnNsaWNlKDAsIHNsaWNlSW5kZXgpO1xuXHRcdHZhciBvcmlnaW5hbEFmdGVyID0gdGhpcy5vcmlnaW5hbC5zbGljZShzbGljZUluZGV4KTtcblxuXHRcdHRoaXMub3JpZ2luYWwgPSBvcmlnaW5hbEJlZm9yZTtcblxuXHRcdHZhciBuZXdDaHVuayA9IG5ldyBDaHVuayhpbmRleCwgdGhpcy5lbmQsIG9yaWdpbmFsQWZ0ZXIpO1xuXHRcdG5ld0NodW5rLm91dHJvID0gdGhpcy5vdXRybztcblx0XHR0aGlzLm91dHJvID0gJyc7XG5cblx0XHR0aGlzLmVuZCA9IGluZGV4O1xuXG5cdFx0aWYgKHRoaXMuZWRpdGVkKSB7XG5cdFx0XHQvLyBUT0RPIGlzIHRoaXMgYmxvY2sgbmVjZXNzYXJ5Py4uLlxuXHRcdFx0bmV3Q2h1bmsuZWRpdCgnJywgZmFsc2UpO1xuXHRcdFx0dGhpcy5jb250ZW50ID0gJyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29udGVudCA9IG9yaWdpbmFsQmVmb3JlO1xuXHRcdH1cblxuXHRcdG5ld0NodW5rLm5leHQgPSB0aGlzLm5leHQ7XG5cdFx0aWYgKG5ld0NodW5rLm5leHQpIHsgbmV3Q2h1bmsubmV4dC5wcmV2aW91cyA9IG5ld0NodW5rOyB9XG5cdFx0bmV3Q2h1bmsucHJldmlvdXMgPSB0aGlzO1xuXHRcdHRoaXMubmV4dCA9IG5ld0NodW5rO1xuXG5cdFx0cmV0dXJuIG5ld0NodW5rO1xuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRybyArIHRoaXMuY29udGVudCArIHRoaXMub3V0cm87XG5cdH07XG5cblx0Q2h1bmsucHJvdG90eXBlLnRyaW1FbmQgPSBmdW5jdGlvbiB0cmltRW5kIChyeCkge1xuXHRcdHRoaXMub3V0cm8gPSB0aGlzLm91dHJvLnJlcGxhY2UocngsICcnKTtcblx0XHRpZiAodGhpcy5vdXRyby5sZW5ndGgpIHsgcmV0dXJuIHRydWU7IH1cblxuXHRcdHZhciB0cmltbWVkID0gdGhpcy5jb250ZW50LnJlcGxhY2UocngsICcnKTtcblxuXHRcdGlmICh0cmltbWVkLmxlbmd0aCkge1xuXHRcdFx0aWYgKHRyaW1tZWQgIT09IHRoaXMuY29udGVudCkge1xuXHRcdFx0XHR0aGlzLnNwbGl0KHRoaXMuc3RhcnQgKyB0cmltbWVkLmxlbmd0aCkuZWRpdCgnJywgdW5kZWZpbmVkLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZWRpdCgnJywgdW5kZWZpbmVkLCB0cnVlKTtcblxuXHRcdFx0dGhpcy5pbnRybyA9IHRoaXMuaW50cm8ucmVwbGFjZShyeCwgJycpO1xuXHRcdFx0aWYgKHRoaXMuaW50cm8ubGVuZ3RoKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0fVxuXHR9O1xuXG5cdENodW5rLnByb3RvdHlwZS50cmltU3RhcnQgPSBmdW5jdGlvbiB0cmltU3RhcnQgKHJ4KSB7XG5cdFx0dGhpcy5pbnRybyA9IHRoaXMuaW50cm8ucmVwbGFjZShyeCwgJycpO1xuXHRcdGlmICh0aGlzLmludHJvLmxlbmd0aCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdFx0dmFyIHRyaW1tZWQgPSB0aGlzLmNvbnRlbnQucmVwbGFjZShyeCwgJycpO1xuXG5cdFx0aWYgKHRyaW1tZWQubGVuZ3RoKSB7XG5cdFx0XHRpZiAodHJpbW1lZCAhPT0gdGhpcy5jb250ZW50KSB7XG5cdFx0XHRcdHRoaXMuc3BsaXQodGhpcy5lbmQgLSB0cmltbWVkLmxlbmd0aCk7XG5cdFx0XHRcdHRoaXMuZWRpdCgnJywgdW5kZWZpbmVkLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZWRpdCgnJywgdW5kZWZpbmVkLCB0cnVlKTtcblxuXHRcdFx0dGhpcy5vdXRybyA9IHRoaXMub3V0cm8ucmVwbGFjZShyeCwgJycpO1xuXHRcdFx0aWYgKHRoaXMub3V0cm8ubGVuZ3RoKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBidG9hJDEgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBlbnZpcm9ubWVudDogYHdpbmRvdy5idG9hYCBvciBgQnVmZmVyYCBzaG91bGQgYmUgc3VwcG9ydGVkLicpO1xuXHR9O1xuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5idG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0YnRvYSQxID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKTsgfTtcblx0fSBlbHNlIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0YnRvYSQxID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAndXRmLTgnKS50b1N0cmluZygnYmFzZTY0Jyk7IH07XG5cdH1cblxuXHR2YXIgU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTWFwKHByb3BlcnRpZXMpIHtcblx0XHR0aGlzLnZlcnNpb24gPSAzO1xuXHRcdHRoaXMuZmlsZSA9IHByb3BlcnRpZXMuZmlsZTtcblx0XHR0aGlzLnNvdXJjZXMgPSBwcm9wZXJ0aWVzLnNvdXJjZXM7XG5cdFx0dGhpcy5zb3VyY2VzQ29udGVudCA9IHByb3BlcnRpZXMuc291cmNlc0NvbnRlbnQ7XG5cdFx0dGhpcy5uYW1lcyA9IHByb3BlcnRpZXMubmFtZXM7XG5cdFx0dGhpcy5tYXBwaW5ncyA9IGVuY29kZShwcm9wZXJ0aWVzLm1hcHBpbmdzKTtcblx0fTtcblxuXHRTb3VyY2VNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcblx0fTtcblxuXHRTb3VyY2VNYXAucHJvdG90eXBlLnRvVXJsID0gZnVuY3Rpb24gdG9VcmwgKCkge1xuXHRcdHJldHVybiAnZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBidG9hJDEodGhpcy50b1N0cmluZygpKTtcblx0fTtcblxuXHRmdW5jdGlvbiBndWVzc0luZGVudChjb2RlKSB7XG5cdFx0dmFyIGxpbmVzID0gY29kZS5zcGxpdCgnXFxuJyk7XG5cblx0XHR2YXIgdGFiYmVkID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChsaW5lKSB7IHJldHVybiAvXlxcdCsvLnRlc3QobGluZSk7IH0pO1xuXHRcdHZhciBzcGFjZWQgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24gKGxpbmUpIHsgcmV0dXJuIC9eIHsyLH0vLnRlc3QobGluZSk7IH0pO1xuXG5cdFx0aWYgKHRhYmJlZC5sZW5ndGggPT09IDAgJiYgc3BhY2VkLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gTW9yZSBsaW5lcyB0YWJiZWQgdGhhbiBzcGFjZWQ/IEFzc3VtZSB0YWJzLCBhbmRcblx0XHQvLyBkZWZhdWx0IHRvIHRhYnMgaW4gdGhlIGNhc2Ugb2YgYSB0aWUgKG9yIG5vdGhpbmdcblx0XHQvLyB0byBnbyBvbilcblx0XHRpZiAodGFiYmVkLmxlbmd0aCA+PSBzcGFjZWQubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gJ1xcdCc7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIGd1ZXNzIHRoZSBtdWx0aXBsZVxuXHRcdHZhciBtaW4gPSBzcGFjZWQucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuXHRcdFx0dmFyIG51bVNwYWNlcyA9IC9eICsvLmV4ZWMoY3VycmVudClbMF0ubGVuZ3RoO1xuXHRcdFx0cmV0dXJuIE1hdGgubWluKG51bVNwYWNlcywgcHJldmlvdXMpO1xuXHRcdH0sIEluZmluaXR5KTtcblxuXHRcdHJldHVybiBuZXcgQXJyYXkobWluICsgMSkuam9pbignICcpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UmVsYXRpdmVQYXRoKGZyb20sIHRvKSB7XG5cdFx0dmFyIGZyb21QYXJ0cyA9IGZyb20uc3BsaXQoL1svXFxcXF0vKTtcblx0XHR2YXIgdG9QYXJ0cyA9IHRvLnNwbGl0KC9bL1xcXFxdLyk7XG5cblx0XHRmcm9tUGFydHMucG9wKCk7IC8vIGdldCBkaXJuYW1lXG5cblx0XHR3aGlsZSAoZnJvbVBhcnRzWzBdID09PSB0b1BhcnRzWzBdKSB7XG5cdFx0XHRmcm9tUGFydHMuc2hpZnQoKTtcblx0XHRcdHRvUGFydHMuc2hpZnQoKTtcblx0XHR9XG5cblx0XHRpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkgeyBmcm9tUGFydHNbaV0gPSAnLi4nOyB9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cykuam9pbignLycpO1xuXHR9XG5cblx0dmFyIHRvU3RyaW5nJDEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5cdGZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nKSB7XG5cdFx0cmV0dXJuIHRvU3RyaW5nJDEuY2FsbCh0aGluZykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TG9jYXRvciQxKHNvdXJjZSkge1xuXHRcdHZhciBvcmlnaW5hbExpbmVzID0gc291cmNlLnNwbGl0KCdcXG4nKTtcblx0XHR2YXIgbGluZU9mZnNldHMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBwb3MgPSAwOyBpIDwgb3JpZ2luYWxMaW5lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGluZU9mZnNldHMucHVzaChwb3MpO1xuXHRcdFx0cG9zICs9IG9yaWdpbmFsTGluZXNbaV0ubGVuZ3RoICsgMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9jYXRlKGluZGV4KSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHR2YXIgaiA9IGxpbmVPZmZzZXRzLmxlbmd0aDtcblx0XHRcdHdoaWxlIChpIDwgaikge1xuXHRcdFx0XHR2YXIgbSA9IChpICsgaikgPj4gMTtcblx0XHRcdFx0aWYgKGluZGV4IDwgbGluZU9mZnNldHNbbV0pIHtcblx0XHRcdFx0XHRqID0gbTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gbSArIDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBsaW5lID0gaSAtIDE7XG5cdFx0XHR2YXIgY29sdW1uID0gaW5kZXggLSBsaW5lT2Zmc2V0c1tsaW5lXTtcblx0XHRcdHJldHVybiB7IGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uIH07XG5cdFx0fTtcblx0fVxuXG5cdHZhciBNYXBwaW5ncyA9IGZ1bmN0aW9uIE1hcHBpbmdzKGhpcmVzKSB7XG5cdFx0dGhpcy5oaXJlcyA9IGhpcmVzO1xuXHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUxpbmUgPSAwO1xuXHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUNvbHVtbiA9IDA7XG5cdFx0dGhpcy5yYXcgPSBbXTtcblx0XHR0aGlzLnJhd1NlZ21lbnRzID0gdGhpcy5yYXdbdGhpcy5nZW5lcmF0ZWRDb2RlTGluZV0gPSBbXTtcblx0XHR0aGlzLnBlbmRpbmcgPSBudWxsO1xuXHR9O1xuXG5cdE1hcHBpbmdzLnByb3RvdHlwZS5hZGRFZGl0ID0gZnVuY3Rpb24gYWRkRWRpdCAoc291cmNlSW5kZXgsIGNvbnRlbnQsIGxvYywgbmFtZUluZGV4KSB7XG5cdFx0aWYgKGNvbnRlbnQubGVuZ3RoKSB7XG5cdFx0XHR2YXIgc2VnbWVudCA9IFt0aGlzLmdlbmVyYXRlZENvZGVDb2x1bW4sIHNvdXJjZUluZGV4LCBsb2MubGluZSwgbG9jLmNvbHVtbl07XG5cdFx0XHRpZiAobmFtZUluZGV4ID49IDApIHtcblx0XHRcdFx0c2VnbWVudC5wdXNoKG5hbWVJbmRleCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnJhd1NlZ21lbnRzLnB1c2goc2VnbWVudCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnBlbmRpbmcpIHtcblx0XHRcdHRoaXMucmF3U2VnbWVudHMucHVzaCh0aGlzLnBlbmRpbmcpO1xuXHRcdH1cblxuXHRcdHRoaXMuYWR2YW5jZShjb250ZW50KTtcblx0XHR0aGlzLnBlbmRpbmcgPSBudWxsO1xuXHR9O1xuXG5cdE1hcHBpbmdzLnByb3RvdHlwZS5hZGRVbmVkaXRlZENodW5rID0gZnVuY3Rpb24gYWRkVW5lZGl0ZWRDaHVuayAoc291cmNlSW5kZXgsIGNodW5rLCBvcmlnaW5hbCwgbG9jLCBzb3VyY2VtYXBMb2NhdGlvbnMpIHtcblx0XHR2YXIgb3JpZ2luYWxDaGFySW5kZXggPSBjaHVuay5zdGFydDtcblx0XHR2YXIgZmlyc3QgPSB0cnVlO1xuXG5cdFx0d2hpbGUgKG9yaWdpbmFsQ2hhckluZGV4IDwgY2h1bmsuZW5kKSB7XG5cdFx0XHRpZiAodGhpcy5oaXJlcyB8fCBmaXJzdCB8fCBzb3VyY2VtYXBMb2NhdGlvbnNbb3JpZ2luYWxDaGFySW5kZXhdKSB7XG5cdFx0XHRcdHRoaXMucmF3U2VnbWVudHMucHVzaChbdGhpcy5nZW5lcmF0ZWRDb2RlQ29sdW1uLCBzb3VyY2VJbmRleCwgbG9jLmxpbmUsIGxvYy5jb2x1bW5dKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9yaWdpbmFsW29yaWdpbmFsQ2hhckluZGV4XSA9PT0gJ1xcbicpIHtcblx0XHRcdFx0bG9jLmxpbmUgKz0gMTtcblx0XHRcdFx0bG9jLmNvbHVtbiA9IDA7XG5cdFx0XHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUxpbmUgKz0gMTtcblx0XHRcdFx0dGhpcy5yYXdbdGhpcy5nZW5lcmF0ZWRDb2RlTGluZV0gPSB0aGlzLnJhd1NlZ21lbnRzID0gW107XG5cdFx0XHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUNvbHVtbiA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2MuY29sdW1uICs9IDE7XG5cdFx0XHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUNvbHVtbiArPSAxO1xuXHRcdFx0fVxuXG5cdFx0XHRvcmlnaW5hbENoYXJJbmRleCArPSAxO1xuXHRcdFx0Zmlyc3QgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLnBlbmRpbmcgPSBbdGhpcy5nZW5lcmF0ZWRDb2RlQ29sdW1uLCBzb3VyY2VJbmRleCwgbG9jLmxpbmUsIGxvYy5jb2x1bW5dO1xuXHR9O1xuXG5cdE1hcHBpbmdzLnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24gYWR2YW5jZSAoc3RyKSB7XG5cdFx0aWYgKCFzdHIpIHsgcmV0dXJuOyB9XG5cblx0XHR2YXIgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpO1xuXG5cdFx0aWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUxpbmUrKztcblx0XHRcdFx0dGhpcy5yYXdbdGhpcy5nZW5lcmF0ZWRDb2RlTGluZV0gPSB0aGlzLnJhd1NlZ21lbnRzID0gW107XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmdlbmVyYXRlZENvZGVDb2x1bW4gPSAwO1xuXHRcdH1cblxuXHRcdHRoaXMuZ2VuZXJhdGVkQ29kZUNvbHVtbiArPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGg7XG5cdH07XG5cblx0dmFyIG4gPSAnXFxuJztcblxuXHR2YXIgd2FybmVkID0ge1xuXHRcdGluc2VydExlZnQ6IGZhbHNlLFxuXHRcdGluc2VydFJpZ2h0OiBmYWxzZSxcblx0XHRzdG9yZU5hbWU6IGZhbHNlXG5cdH07XG5cblx0dmFyIE1hZ2ljU3RyaW5nID0gZnVuY3Rpb24gTWFnaWNTdHJpbmcoc3RyaW5nLCBvcHRpb25zKSB7XG5cdFx0aWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cblx0XHR2YXIgY2h1bmsgPSBuZXcgQ2h1bmsoMCwgc3RyaW5nLmxlbmd0aCwgc3RyaW5nKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0XHRcdG9yaWdpbmFsOiAgICAgICAgICAgICAgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHN0cmluZyB9LFxuXHRcdFx0b3V0cm86ICAgICAgICAgICAgICAgICB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogJycgfSxcblx0XHRcdGludHJvOiAgICAgICAgICAgICAgICAgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6ICcnIH0sXG5cdFx0XHRmaXJzdENodW5rOiAgICAgICAgICAgIHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBjaHVuayB9LFxuXHRcdFx0bGFzdENodW5rOiAgICAgICAgICAgICB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogY2h1bmsgfSxcblx0XHRcdGxhc3RTZWFyY2hlZENodW5rOiAgICAgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IGNodW5rIH0sXG5cdFx0XHRieVN0YXJ0OiAgICAgICAgICAgICAgIHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB7fSB9LFxuXHRcdFx0YnlFbmQ6ICAgICAgICAgICAgICAgICB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZToge30gfSxcblx0XHRcdGZpbGVuYW1lOiAgICAgICAgICAgICAgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IG9wdGlvbnMuZmlsZW5hbWUgfSxcblx0XHRcdGluZGVudEV4Y2x1c2lvblJhbmdlczogeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IG9wdGlvbnMuaW5kZW50RXhjbHVzaW9uUmFuZ2VzIH0sXG5cdFx0XHRzb3VyY2VtYXBMb2NhdGlvbnM6ICAgIHsgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB7fSB9LFxuXHRcdFx0c3RvcmVkTmFtZXM6ICAgICAgICAgICB7IHdyaXRhYmxlOiB0cnVlLCB2YWx1ZToge30gfSxcblx0XHRcdGluZGVudFN0cjogICAgICAgICAgICAgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IGd1ZXNzSW5kZW50KHN0cmluZykgfVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5ieVN0YXJ0WzBdID0gY2h1bms7XG5cdFx0dGhpcy5ieUVuZFtzdHJpbmcubGVuZ3RoXSA9IGNodW5rO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5hZGRTb3VyY2VtYXBMb2NhdGlvbiA9IGZ1bmN0aW9uIGFkZFNvdXJjZW1hcExvY2F0aW9uIChjaGFyKSB7XG5cdFx0dGhpcy5zb3VyY2VtYXBMb2NhdGlvbnNbY2hhcl0gPSB0cnVlO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQgKGNvbnRlbnQpIHtcblx0XHRpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ291dHJvIGNvbnRlbnQgbXVzdCBiZSBhIHN0cmluZycpOyB9XG5cblx0XHR0aGlzLm91dHJvICs9IGNvbnRlbnQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLmFwcGVuZExlZnQgPSBmdW5jdGlvbiBhcHBlbmRMZWZ0IChpbmRleCwgY29udGVudCkge1xuXHRcdGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5zZXJ0ZWQgY29udGVudCBtdXN0IGJlIGEgc3RyaW5nJyk7IH1cblxuXHRcdHRoaXMuX3NwbGl0KGluZGV4KTtcblxuXHRcdHZhciBjaHVuayA9IHRoaXMuYnlFbmRbaW5kZXhdO1xuXG5cdFx0aWYgKGNodW5rKSB7XG5cdFx0XHRjaHVuay5hcHBlbmRMZWZ0KGNvbnRlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmludHJvICs9IGNvbnRlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5hcHBlbmRSaWdodCA9IGZ1bmN0aW9uIGFwcGVuZFJpZ2h0IChpbmRleCwgY29udGVudCkge1xuXHRcdGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5zZXJ0ZWQgY29udGVudCBtdXN0IGJlIGEgc3RyaW5nJyk7IH1cblxuXHRcdHRoaXMuX3NwbGl0KGluZGV4KTtcblxuXHRcdHZhciBjaHVuayA9IHRoaXMuYnlTdGFydFtpbmRleF07XG5cblx0XHRpZiAoY2h1bmspIHtcblx0XHRcdGNodW5rLmFwcGVuZFJpZ2h0KGNvbnRlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm91dHJvICs9IGNvbnRlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcblx0XHR2YXIgY2xvbmVkID0gbmV3IE1hZ2ljU3RyaW5nKHRoaXMub3JpZ2luYWwsIHsgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUgfSk7XG5cblx0XHR2YXIgb3JpZ2luYWxDaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblx0XHR2YXIgY2xvbmVkQ2h1bmsgPSAoY2xvbmVkLmZpcnN0Q2h1bmsgPSBjbG9uZWQubGFzdFNlYXJjaGVkQ2h1bmsgPSBvcmlnaW5hbENodW5rLmNsb25lKCkpO1xuXG5cdFx0d2hpbGUgKG9yaWdpbmFsQ2h1bmspIHtcblx0XHRcdGNsb25lZC5ieVN0YXJ0W2Nsb25lZENodW5rLnN0YXJ0XSA9IGNsb25lZENodW5rO1xuXHRcdFx0Y2xvbmVkLmJ5RW5kW2Nsb25lZENodW5rLmVuZF0gPSBjbG9uZWRDaHVuaztcblxuXHRcdFx0dmFyIG5leHRPcmlnaW5hbENodW5rID0gb3JpZ2luYWxDaHVuay5uZXh0O1xuXHRcdFx0dmFyIG5leHRDbG9uZWRDaHVuayA9IG5leHRPcmlnaW5hbENodW5rICYmIG5leHRPcmlnaW5hbENodW5rLmNsb25lKCk7XG5cblx0XHRcdGlmIChuZXh0Q2xvbmVkQ2h1bmspIHtcblx0XHRcdFx0Y2xvbmVkQ2h1bmsubmV4dCA9IG5leHRDbG9uZWRDaHVuaztcblx0XHRcdFx0bmV4dENsb25lZENodW5rLnByZXZpb3VzID0gY2xvbmVkQ2h1bms7XG5cblx0XHRcdFx0Y2xvbmVkQ2h1bmsgPSBuZXh0Q2xvbmVkQ2h1bms7XG5cdFx0XHR9XG5cblx0XHRcdG9yaWdpbmFsQ2h1bmsgPSBuZXh0T3JpZ2luYWxDaHVuaztcblx0XHR9XG5cblx0XHRjbG9uZWQubGFzdENodW5rID0gY2xvbmVkQ2h1bms7XG5cblx0XHRpZiAodGhpcy5pbmRlbnRFeGNsdXNpb25SYW5nZXMpIHtcblx0XHRcdGNsb25lZC5pbmRlbnRFeGNsdXNpb25SYW5nZXMgPSB0aGlzLmluZGVudEV4Y2x1c2lvblJhbmdlcy5zbGljZSgpO1xuXHRcdH1cblxuXHRcdE9iamVjdC5rZXlzKHRoaXMuc291cmNlbWFwTG9jYXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChsb2MpIHtcblx0XHRcdGNsb25lZC5zb3VyY2VtYXBMb2NhdGlvbnNbbG9jXSA9IHRydWU7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2xvbmVkO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5nZW5lcmF0ZURlY29kZWRNYXAgPSBmdW5jdGlvbiBnZW5lcmF0ZURlY29kZWRNYXAgKG9wdGlvbnMpIHtcblx0XHRcdHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgc291cmNlSW5kZXggPSAwO1xuXHRcdHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuc3RvcmVkTmFtZXMpO1xuXHRcdHZhciBtYXBwaW5ncyA9IG5ldyBNYXBwaW5ncyhvcHRpb25zLmhpcmVzKTtcblxuXHRcdHZhciBsb2NhdGUgPSBnZXRMb2NhdG9yJDEodGhpcy5vcmlnaW5hbCk7XG5cblx0XHRpZiAodGhpcy5pbnRybykge1xuXHRcdFx0bWFwcGluZ3MuYWR2YW5jZSh0aGlzLmludHJvKTtcblx0XHR9XG5cblx0XHR0aGlzLmZpcnN0Q2h1bmsuZWFjaE5leHQoZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHR2YXIgbG9jID0gbG9jYXRlKGNodW5rLnN0YXJ0KTtcblxuXHRcdFx0aWYgKGNodW5rLmludHJvLmxlbmd0aCkgeyBtYXBwaW5ncy5hZHZhbmNlKGNodW5rLmludHJvKTsgfVxuXG5cdFx0XHRpZiAoY2h1bmsuZWRpdGVkKSB7XG5cdFx0XHRcdG1hcHBpbmdzLmFkZEVkaXQoXG5cdFx0XHRcdFx0c291cmNlSW5kZXgsXG5cdFx0XHRcdFx0Y2h1bmsuY29udGVudCxcblx0XHRcdFx0XHRsb2MsXG5cdFx0XHRcdFx0Y2h1bmsuc3RvcmVOYW1lID8gbmFtZXMuaW5kZXhPZihjaHVuay5vcmlnaW5hbCkgOiAtMVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWFwcGluZ3MuYWRkVW5lZGl0ZWRDaHVuayhzb3VyY2VJbmRleCwgY2h1bmssIHRoaXMkMS5vcmlnaW5hbCwgbG9jLCB0aGlzJDEuc291cmNlbWFwTG9jYXRpb25zKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNodW5rLm91dHJvLmxlbmd0aCkgeyBtYXBwaW5ncy5hZHZhbmNlKGNodW5rLm91dHJvKTsgfVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbGU6IG9wdGlvbnMuZmlsZSA/IG9wdGlvbnMuZmlsZS5zcGxpdCgvWy9cXFxcXS8pLnBvcCgpIDogbnVsbCxcblx0XHRcdHNvdXJjZXM6IFtvcHRpb25zLnNvdXJjZSA/IGdldFJlbGF0aXZlUGF0aChvcHRpb25zLmZpbGUgfHwgJycsIG9wdGlvbnMuc291cmNlKSA6IG51bGxdLFxuXHRcdFx0c291cmNlc0NvbnRlbnQ6IG9wdGlvbnMuaW5jbHVkZUNvbnRlbnQgPyBbdGhpcy5vcmlnaW5hbF0gOiBbbnVsbF0sXG5cdFx0XHRuYW1lczogbmFtZXMsXG5cdFx0XHRtYXBwaW5nczogbWFwcGluZ3MucmF3XG5cdFx0fTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUuZ2VuZXJhdGVNYXAgPSBmdW5jdGlvbiBnZW5lcmF0ZU1hcCAob3B0aW9ucykge1xuXHRcdHJldHVybiBuZXcgU291cmNlTWFwKHRoaXMuZ2VuZXJhdGVEZWNvZGVkTWFwKG9wdGlvbnMpKTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUuZ2V0SW5kZW50U3RyaW5nID0gZnVuY3Rpb24gZ2V0SW5kZW50U3RyaW5nICgpIHtcblx0XHRyZXR1cm4gdGhpcy5pbmRlbnRTdHIgPT09IG51bGwgPyAnXFx0JyA6IHRoaXMuaW5kZW50U3RyO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5pbmRlbnQgPSBmdW5jdGlvbiBpbmRlbnQgKGluZGVudFN0ciwgb3B0aW9ucykge1xuXHRcdHZhciBwYXR0ZXJuID0gL15bXlxcclxcbl0vZ207XG5cblx0XHRpZiAoaXNPYmplY3QoaW5kZW50U3RyKSkge1xuXHRcdFx0b3B0aW9ucyA9IGluZGVudFN0cjtcblx0XHRcdGluZGVudFN0ciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpbmRlbnRTdHIgPSBpbmRlbnRTdHIgIT09IHVuZGVmaW5lZCA/IGluZGVudFN0ciA6IHRoaXMuaW5kZW50U3RyIHx8ICdcXHQnO1xuXG5cdFx0aWYgKGluZGVudFN0ciA9PT0gJycpIHsgcmV0dXJuIHRoaXM7IH0gLy8gbm9vcFxuXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHQvLyBQcm9jZXNzIGV4Y2x1c2lvbiByYW5nZXNcblx0XHR2YXIgaXNFeGNsdWRlZCA9IHt9O1xuXG5cdFx0aWYgKG9wdGlvbnMuZXhjbHVkZSkge1xuXHRcdFx0dmFyIGV4Y2x1c2lvbnMgPVxuXHRcdFx0XHR0eXBlb2Ygb3B0aW9ucy5leGNsdWRlWzBdID09PSAnbnVtYmVyJyA/IFtvcHRpb25zLmV4Y2x1ZGVdIDogb3B0aW9ucy5leGNsdWRlO1xuXHRcdFx0ZXhjbHVzaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleGNsdXNpb24pIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IGV4Y2x1c2lvblswXTsgaSA8IGV4Y2x1c2lvblsxXTsgaSArPSAxKSB7XG5cdFx0XHRcdFx0aXNFeGNsdWRlZFtpXSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZhciBzaG91bGRJbmRlbnROZXh0Q2hhcmFjdGVyID0gb3B0aW9ucy5pbmRlbnRTdGFydCAhPT0gZmFsc2U7XG5cdFx0dmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG5cdFx0XHRpZiAoc2hvdWxkSW5kZW50TmV4dENoYXJhY3RlcikgeyByZXR1cm4gKFwiXCIgKyBpbmRlbnRTdHIgKyBtYXRjaCk7IH1cblx0XHRcdHNob3VsZEluZGVudE5leHRDaGFyYWN0ZXIgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH07XG5cblx0XHR0aGlzLmludHJvID0gdGhpcy5pbnRyby5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VyKTtcblxuXHRcdHZhciBjaGFySW5kZXggPSAwO1xuXHRcdHZhciBjaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblxuXHRcdHdoaWxlIChjaHVuaykge1xuXHRcdFx0dmFyIGVuZCA9IGNodW5rLmVuZDtcblxuXHRcdFx0aWYgKGNodW5rLmVkaXRlZCkge1xuXHRcdFx0XHRpZiAoIWlzRXhjbHVkZWRbY2hhckluZGV4XSkge1xuXHRcdFx0XHRcdGNodW5rLmNvbnRlbnQgPSBjaHVuay5jb250ZW50LnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZXIpO1xuXG5cdFx0XHRcdFx0aWYgKGNodW5rLmNvbnRlbnQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRzaG91bGRJbmRlbnROZXh0Q2hhcmFjdGVyID0gY2h1bmsuY29udGVudFtjaHVuay5jb250ZW50Lmxlbmd0aCAtIDFdID09PSAnXFxuJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoYXJJbmRleCA9IGNodW5rLnN0YXJ0O1xuXG5cdFx0XHRcdHdoaWxlIChjaGFySW5kZXggPCBlbmQpIHtcblx0XHRcdFx0XHRpZiAoIWlzRXhjbHVkZWRbY2hhckluZGV4XSkge1xuXHRcdFx0XHRcdFx0dmFyIGNoYXIgPSB0aGlzLm9yaWdpbmFsW2NoYXJJbmRleF07XG5cblx0XHRcdFx0XHRcdGlmIChjaGFyID09PSAnXFxuJykge1xuXHRcdFx0XHRcdFx0XHRzaG91bGRJbmRlbnROZXh0Q2hhcmFjdGVyID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY2hhciAhPT0gJ1xccicgJiYgc2hvdWxkSW5kZW50TmV4dENoYXJhY3Rlcikge1xuXHRcdFx0XHRcdFx0XHRzaG91bGRJbmRlbnROZXh0Q2hhcmFjdGVyID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGNoYXJJbmRleCA9PT0gY2h1bmsuc3RhcnQpIHtcblx0XHRcdFx0XHRcdFx0XHRjaHVuay5wcmVwZW5kUmlnaHQoaW5kZW50U3RyKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zcGxpdENodW5rKGNodW5rLCBjaGFySW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdGNodW5rID0gY2h1bmsubmV4dDtcblx0XHRcdFx0XHRcdFx0XHRjaHVuay5wcmVwZW5kUmlnaHQoaW5kZW50U3RyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNoYXJJbmRleCArPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJJbmRleCA9IGNodW5rLmVuZDtcblx0XHRcdGNodW5rID0gY2h1bmsubmV4dDtcblx0XHR9XG5cblx0XHR0aGlzLm91dHJvID0gdGhpcy5vdXRyby5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VyKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQgKCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbWFnaWNTdHJpbmcuaW5zZXJ0KC4uLikgaXMgZGVwcmVjYXRlZC4gVXNlIHByZXBlbmRSaWdodCguLi4pIG9yIGFwcGVuZExlZnQoLi4uKScpO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5pbnNlcnRMZWZ0ID0gZnVuY3Rpb24gaW5zZXJ0TGVmdCAoaW5kZXgsIGNvbnRlbnQpIHtcblx0XHRpZiAoIXdhcm5lZC5pbnNlcnRMZWZ0KSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ21hZ2ljU3RyaW5nLmluc2VydExlZnQoLi4uKSBpcyBkZXByZWNhdGVkLiBVc2UgbWFnaWNTdHJpbmcuYXBwZW5kTGVmdCguLi4pIGluc3RlYWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdFx0XHR3YXJuZWQuaW5zZXJ0TGVmdCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXBwZW5kTGVmdChpbmRleCwgY29udGVudCk7XG5cdH07XG5cblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLmluc2VydFJpZ2h0ID0gZnVuY3Rpb24gaW5zZXJ0UmlnaHQgKGluZGV4LCBjb250ZW50KSB7XG5cdFx0aWYgKCF3YXJuZWQuaW5zZXJ0UmlnaHQpIHtcblx0XHRcdGNvbnNvbGUud2FybignbWFnaWNTdHJpbmcuaW5zZXJ0UmlnaHQoLi4uKSBpcyBkZXByZWNhdGVkLiBVc2UgbWFnaWNTdHJpbmcucHJlcGVuZFJpZ2h0KC4uLikgaW5zdGVhZCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0XHRcdHdhcm5lZC5pbnNlcnRSaWdodCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHJlcGVuZFJpZ2h0KGluZGV4LCBjb250ZW50KTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIG1vdmUgKHN0YXJ0LCBlbmQsIGluZGV4KSB7XG5cdFx0aWYgKGluZGV4ID49IHN0YXJ0ICYmIGluZGV4IDw9IGVuZCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBtb3ZlIGEgc2VsZWN0aW9uIGluc2lkZSBpdHNlbGYnKTsgfVxuXG5cdFx0dGhpcy5fc3BsaXQoc3RhcnQpO1xuXHRcdHRoaXMuX3NwbGl0KGVuZCk7XG5cdFx0dGhpcy5fc3BsaXQoaW5kZXgpO1xuXG5cdFx0dmFyIGZpcnN0ID0gdGhpcy5ieVN0YXJ0W3N0YXJ0XTtcblx0XHR2YXIgbGFzdCA9IHRoaXMuYnlFbmRbZW5kXTtcblxuXHRcdHZhciBvbGRMZWZ0ID0gZmlyc3QucHJldmlvdXM7XG5cdFx0dmFyIG9sZFJpZ2h0ID0gbGFzdC5uZXh0O1xuXG5cdFx0dmFyIG5ld1JpZ2h0ID0gdGhpcy5ieVN0YXJ0W2luZGV4XTtcblx0XHRpZiAoIW5ld1JpZ2h0ICYmIGxhc3QgPT09IHRoaXMubGFzdENodW5rKSB7IHJldHVybiB0aGlzOyB9XG5cdFx0dmFyIG5ld0xlZnQgPSBuZXdSaWdodCA/IG5ld1JpZ2h0LnByZXZpb3VzIDogdGhpcy5sYXN0Q2h1bms7XG5cblx0XHRpZiAob2xkTGVmdCkgeyBvbGRMZWZ0Lm5leHQgPSBvbGRSaWdodDsgfVxuXHRcdGlmIChvbGRSaWdodCkgeyBvbGRSaWdodC5wcmV2aW91cyA9IG9sZExlZnQ7IH1cblxuXHRcdGlmIChuZXdMZWZ0KSB7IG5ld0xlZnQubmV4dCA9IGZpcnN0OyB9XG5cdFx0aWYgKG5ld1JpZ2h0KSB7IG5ld1JpZ2h0LnByZXZpb3VzID0gbGFzdDsgfVxuXG5cdFx0aWYgKCFmaXJzdC5wcmV2aW91cykgeyB0aGlzLmZpcnN0Q2h1bmsgPSBsYXN0Lm5leHQ7IH1cblx0XHRpZiAoIWxhc3QubmV4dCkge1xuXHRcdFx0dGhpcy5sYXN0Q2h1bmsgPSBmaXJzdC5wcmV2aW91cztcblx0XHRcdHRoaXMubGFzdENodW5rLm5leHQgPSBudWxsO1xuXHRcdH1cblxuXHRcdGZpcnN0LnByZXZpb3VzID0gbmV3TGVmdDtcblx0XHRsYXN0Lm5leHQgPSBuZXdSaWdodCB8fCBudWxsO1xuXG5cdFx0aWYgKCFuZXdMZWZ0KSB7IHRoaXMuZmlyc3RDaHVuayA9IGZpcnN0OyB9XG5cdFx0aWYgKCFuZXdSaWdodCkgeyB0aGlzLmxhc3RDaHVuayA9IGxhc3Q7IH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUub3ZlcndyaXRlID0gZnVuY3Rpb24gb3ZlcndyaXRlIChzdGFydCwgZW5kLCBjb250ZW50LCBvcHRpb25zKSB7XG5cdFx0aWYgKHR5cGVvZiBjb250ZW50ICE9PSAnc3RyaW5nJykgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXBsYWNlbWVudCBjb250ZW50IG11c3QgYmUgYSBzdHJpbmcnKTsgfVxuXG5cdFx0d2hpbGUgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSB0aGlzLm9yaWdpbmFsLmxlbmd0aDsgfVxuXHRcdHdoaWxlIChlbmQgPCAwKSB7IGVuZCArPSB0aGlzLm9yaWdpbmFsLmxlbmd0aDsgfVxuXG5cdFx0aWYgKGVuZCA+IHRoaXMub3JpZ2luYWwubGVuZ3RoKSB7IHRocm93IG5ldyBFcnJvcignZW5kIGlzIG91dCBvZiBib3VuZHMnKTsgfVxuXHRcdGlmIChzdGFydCA9PT0gZW5kKVxuXHRcdFx0eyB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBvdmVyd3JpdGUgYSB6ZXJvLWxlbmd0aCByYW5nZSDigJMgdXNlIGFwcGVuZExlZnQgb3IgcHJlcGVuZFJpZ2h0IGluc3RlYWQnKTsgfVxuXG5cdFx0dGhpcy5fc3BsaXQoc3RhcnQpO1xuXHRcdHRoaXMuX3NwbGl0KGVuZCk7XG5cblx0XHRpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuXHRcdFx0aWYgKCF3YXJuZWQuc3RvcmVOYW1lKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignVGhlIGZpbmFsIGFyZ3VtZW50IHRvIG1hZ2ljU3RyaW5nLm92ZXJ3cml0ZSguLi4pIHNob3VsZCBiZSBhbiBvcHRpb25zIG9iamVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yaWNoLWhhcnJpcy9tYWdpYy1zdHJpbmcnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdFx0XHRcdHdhcm5lZC5zdG9yZU5hbWUgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRvcHRpb25zID0geyBzdG9yZU5hbWU6IHRydWUgfTtcblx0XHR9XG5cdFx0dmFyIHN0b3JlTmFtZSA9IG9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RvcmVOYW1lIDogZmFsc2U7XG5cdFx0dmFyIGNvbnRlbnRPbmx5ID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jb250ZW50T25seSA6IGZhbHNlO1xuXG5cdFx0aWYgKHN0b3JlTmFtZSkge1xuXHRcdFx0dmFyIG9yaWdpbmFsID0gdGhpcy5vcmlnaW5hbC5zbGljZShzdGFydCwgZW5kKTtcblx0XHRcdHRoaXMuc3RvcmVkTmFtZXNbb3JpZ2luYWxdID0gdHJ1ZTtcblx0XHR9XG5cblx0XHR2YXIgZmlyc3QgPSB0aGlzLmJ5U3RhcnRbc3RhcnRdO1xuXHRcdHZhciBsYXN0ID0gdGhpcy5ieUVuZFtlbmRdO1xuXG5cdFx0aWYgKGZpcnN0KSB7XG5cdFx0XHRpZiAoZW5kID4gZmlyc3QuZW5kICYmIGZpcnN0Lm5leHQgIT09IHRoaXMuYnlTdGFydFtmaXJzdC5lbmRdKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IG92ZXJ3cml0ZSBhY3Jvc3MgYSBzcGxpdCBwb2ludCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJzdC5lZGl0KGNvbnRlbnQsIHN0b3JlTmFtZSwgY29udGVudE9ubHkpO1xuXG5cdFx0XHRpZiAoZmlyc3QgIT09IGxhc3QpIHtcblx0XHRcdFx0dmFyIGNodW5rID0gZmlyc3QubmV4dDtcblx0XHRcdFx0d2hpbGUgKGNodW5rICE9PSBsYXN0KSB7XG5cdFx0XHRcdFx0Y2h1bmsuZWRpdCgnJywgZmFsc2UpO1xuXHRcdFx0XHRcdGNodW5rID0gY2h1bmsubmV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNodW5rLmVkaXQoJycsIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbXVzdCBiZSBpbnNlcnRpbmcgYXQgdGhlIGVuZFxuXHRcdFx0dmFyIG5ld0NodW5rID0gbmV3IENodW5rKHN0YXJ0LCBlbmQsICcnKS5lZGl0KGNvbnRlbnQsIHN0b3JlTmFtZSk7XG5cblx0XHRcdC8vIFRPRE8gbGFzdCBjaHVuayBpbiB0aGUgYXJyYXkgbWF5IG5vdCBiZSB0aGUgbGFzdCBjaHVuaywgaWYgaXQncyBtb3ZlZC4uLlxuXHRcdFx0bGFzdC5uZXh0ID0gbmV3Q2h1bms7XG5cdFx0XHRuZXdDaHVuay5wcmV2aW91cyA9IGxhc3Q7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gcHJlcGVuZCAoY29udGVudCkge1xuXHRcdGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignb3V0cm8gY29udGVudCBtdXN0IGJlIGEgc3RyaW5nJyk7IH1cblxuXHRcdHRoaXMuaW50cm8gPSBjb250ZW50ICsgdGhpcy5pbnRybztcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUucHJlcGVuZExlZnQgPSBmdW5jdGlvbiBwcmVwZW5kTGVmdCAoaW5kZXgsIGNvbnRlbnQpIHtcblx0XHRpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2luc2VydGVkIGNvbnRlbnQgbXVzdCBiZSBhIHN0cmluZycpOyB9XG5cblx0XHR0aGlzLl9zcGxpdChpbmRleCk7XG5cblx0XHR2YXIgY2h1bmsgPSB0aGlzLmJ5RW5kW2luZGV4XTtcblxuXHRcdGlmIChjaHVuaykge1xuXHRcdFx0Y2h1bmsucHJlcGVuZExlZnQoY29udGVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuaW50cm8gPSBjb250ZW50ICsgdGhpcy5pbnRybztcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLnByZXBlbmRSaWdodCA9IGZ1bmN0aW9uIHByZXBlbmRSaWdodCAoaW5kZXgsIGNvbnRlbnQpIHtcblx0XHRpZiAodHlwZW9mIGNvbnRlbnQgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2luc2VydGVkIGNvbnRlbnQgbXVzdCBiZSBhIHN0cmluZycpOyB9XG5cblx0XHR0aGlzLl9zcGxpdChpbmRleCk7XG5cblx0XHR2YXIgY2h1bmsgPSB0aGlzLmJ5U3RhcnRbaW5kZXhdO1xuXG5cdFx0aWYgKGNodW5rKSB7XG5cdFx0XHRjaHVuay5wcmVwZW5kUmlnaHQoY29udGVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMub3V0cm8gPSBjb250ZW50ICsgdGhpcy5vdXRybztcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoc3RhcnQsIGVuZCkge1xuXHRcdHdoaWxlIChzdGFydCA8IDApIHsgc3RhcnQgKz0gdGhpcy5vcmlnaW5hbC5sZW5ndGg7IH1cblx0XHR3aGlsZSAoZW5kIDwgMCkgeyBlbmQgKz0gdGhpcy5vcmlnaW5hbC5sZW5ndGg7IH1cblxuXHRcdGlmIChzdGFydCA9PT0gZW5kKSB7IHJldHVybiB0aGlzOyB9XG5cblx0XHRpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRoaXMub3JpZ2luYWwubGVuZ3RoKSB7IHRocm93IG5ldyBFcnJvcignQ2hhcmFjdGVyIGlzIG91dCBvZiBib3VuZHMnKTsgfVxuXHRcdGlmIChzdGFydCA+IGVuZCkgeyB0aHJvdyBuZXcgRXJyb3IoJ2VuZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzdGFydCcpOyB9XG5cblx0XHR0aGlzLl9zcGxpdChzdGFydCk7XG5cdFx0dGhpcy5fc3BsaXQoZW5kKTtcblxuXHRcdHZhciBjaHVuayA9IHRoaXMuYnlTdGFydFtzdGFydF07XG5cblx0XHR3aGlsZSAoY2h1bmspIHtcblx0XHRcdGNodW5rLmludHJvID0gJyc7XG5cdFx0XHRjaHVuay5vdXRybyA9ICcnO1xuXHRcdFx0Y2h1bmsuZWRpdCgnJyk7XG5cblx0XHRcdGNodW5rID0gZW5kID4gY2h1bmsuZW5kID8gdGhpcy5ieVN0YXJ0W2NodW5rLmVuZF0gOiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUubGFzdENoYXIgPSBmdW5jdGlvbiBsYXN0Q2hhciAoKSB7XG5cdFx0aWYgKHRoaXMub3V0cm8ubGVuZ3RoKVxuXHRcdFx0eyByZXR1cm4gdGhpcy5vdXRyb1t0aGlzLm91dHJvLmxlbmd0aCAtIDFdOyB9XG5cdFx0dmFyIGNodW5rID0gdGhpcy5sYXN0Q2h1bms7XG5cdFx0ZG8ge1xuXHRcdFx0aWYgKGNodW5rLm91dHJvLmxlbmd0aClcblx0XHRcdFx0eyByZXR1cm4gY2h1bmsub3V0cm9bY2h1bmsub3V0cm8ubGVuZ3RoIC0gMV07IH1cblx0XHRcdGlmIChjaHVuay5jb250ZW50Lmxlbmd0aClcblx0XHRcdFx0eyByZXR1cm4gY2h1bmsuY29udGVudFtjaHVuay5jb250ZW50Lmxlbmd0aCAtIDFdOyB9XG5cdFx0XHRpZiAoY2h1bmsuaW50cm8ubGVuZ3RoKVxuXHRcdFx0XHR7IHJldHVybiBjaHVuay5pbnRyb1tjaHVuay5pbnRyby5sZW5ndGggLSAxXTsgfVxuXHRcdH0gd2hpbGUgKGNodW5rID0gY2h1bmsucHJldmlvdXMpO1xuXHRcdGlmICh0aGlzLmludHJvLmxlbmd0aClcblx0XHRcdHsgcmV0dXJuIHRoaXMuaW50cm9bdGhpcy5pbnRyby5sZW5ndGggLSAxXTsgfVxuXHRcdHJldHVybiAnJztcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUubGFzdExpbmUgPSBmdW5jdGlvbiBsYXN0TGluZSAoKSB7XG5cdFx0dmFyIGxpbmVJbmRleCA9IHRoaXMub3V0cm8ubGFzdEluZGV4T2Yobik7XG5cdFx0aWYgKGxpbmVJbmRleCAhPT0gLTEpXG5cdFx0XHR7IHJldHVybiB0aGlzLm91dHJvLnN1YnN0cihsaW5lSW5kZXggKyAxKTsgfVxuXHRcdHZhciBsaW5lU3RyID0gdGhpcy5vdXRybztcblx0XHR2YXIgY2h1bmsgPSB0aGlzLmxhc3RDaHVuaztcblx0XHRkbyB7XG5cdFx0XHRpZiAoY2h1bmsub3V0cm8ubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRsaW5lSW5kZXggPSBjaHVuay5vdXRyby5sYXN0SW5kZXhPZihuKTtcblx0XHRcdFx0aWYgKGxpbmVJbmRleCAhPT0gLTEpXG5cdFx0XHRcdFx0eyByZXR1cm4gY2h1bmsub3V0cm8uc3Vic3RyKGxpbmVJbmRleCArIDEpICsgbGluZVN0cjsgfVxuXHRcdFx0XHRsaW5lU3RyID0gY2h1bmsub3V0cm8gKyBsaW5lU3RyO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2h1bmsuY29udGVudC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGxpbmVJbmRleCA9IGNodW5rLmNvbnRlbnQubGFzdEluZGV4T2Yobik7XG5cdFx0XHRcdGlmIChsaW5lSW5kZXggIT09IC0xKVxuXHRcdFx0XHRcdHsgcmV0dXJuIGNodW5rLmNvbnRlbnQuc3Vic3RyKGxpbmVJbmRleCArIDEpICsgbGluZVN0cjsgfVxuXHRcdFx0XHRsaW5lU3RyID0gY2h1bmsuY29udGVudCArIGxpbmVTdHI7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjaHVuay5pbnRyby5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGxpbmVJbmRleCA9IGNodW5rLmludHJvLmxhc3RJbmRleE9mKG4pO1xuXHRcdFx0XHRpZiAobGluZUluZGV4ICE9PSAtMSlcblx0XHRcdFx0XHR7IHJldHVybiBjaHVuay5pbnRyby5zdWJzdHIobGluZUluZGV4ICsgMSkgKyBsaW5lU3RyOyB9XG5cdFx0XHRcdGxpbmVTdHIgPSBjaHVuay5pbnRybyArIGxpbmVTdHI7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAoY2h1bmsgPSBjaHVuay5wcmV2aW91cyk7XG5cdFx0bGluZUluZGV4ID0gdGhpcy5pbnRyby5sYXN0SW5kZXhPZihuKTtcblx0XHRpZiAobGluZUluZGV4ICE9PSAtMSlcblx0XHRcdHsgcmV0dXJuIHRoaXMuaW50cm8uc3Vic3RyKGxpbmVJbmRleCArIDEpICsgbGluZVN0cjsgfVxuXHRcdHJldHVybiB0aGlzLmludHJvICsgbGluZVN0cjtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuXHRcdFx0aWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQgPSAwO1xuXHRcdFx0aWYgKCBlbmQgPT09IHZvaWQgMCApIGVuZCA9IHRoaXMub3JpZ2luYWwubGVuZ3RoO1xuXG5cdFx0d2hpbGUgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSB0aGlzLm9yaWdpbmFsLmxlbmd0aDsgfVxuXHRcdHdoaWxlIChlbmQgPCAwKSB7IGVuZCArPSB0aGlzLm9yaWdpbmFsLmxlbmd0aDsgfVxuXG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXG5cdFx0Ly8gZmluZCBzdGFydCBjaHVua1xuXHRcdHZhciBjaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblx0XHR3aGlsZSAoY2h1bmsgJiYgKGNodW5rLnN0YXJ0ID4gc3RhcnQgfHwgY2h1bmsuZW5kIDw9IHN0YXJ0KSkge1xuXHRcdFx0Ly8gZm91bmQgZW5kIGNodW5rIGJlZm9yZSBzdGFydFxuXHRcdFx0aWYgKGNodW5rLnN0YXJ0IDwgZW5kICYmIGNodW5rLmVuZCA+PSBlbmQpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblxuXHRcdFx0Y2h1bmsgPSBjaHVuay5uZXh0O1xuXHRcdH1cblxuXHRcdGlmIChjaHVuayAmJiBjaHVuay5lZGl0ZWQgJiYgY2h1bmsuc3RhcnQgIT09IHN0YXJ0KVxuXHRcdFx0eyB0aHJvdyBuZXcgRXJyb3IoKFwiQ2Fubm90IHVzZSByZXBsYWNlZCBjaGFyYWN0ZXIgXCIgKyBzdGFydCArIFwiIGFzIHNsaWNlIHN0YXJ0IGFuY2hvci5cIikpOyB9XG5cblx0XHR2YXIgc3RhcnRDaHVuayA9IGNodW5rO1xuXHRcdHdoaWxlIChjaHVuaykge1xuXHRcdFx0aWYgKGNodW5rLmludHJvICYmIChzdGFydENodW5rICE9PSBjaHVuayB8fCBjaHVuay5zdGFydCA9PT0gc3RhcnQpKSB7XG5cdFx0XHRcdHJlc3VsdCArPSBjaHVuay5pbnRybztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNvbnRhaW5zRW5kID0gY2h1bmsuc3RhcnQgPCBlbmQgJiYgY2h1bmsuZW5kID49IGVuZDtcblx0XHRcdGlmIChjb250YWluc0VuZCAmJiBjaHVuay5lZGl0ZWQgJiYgY2h1bmsuZW5kICE9PSBlbmQpXG5cdFx0XHRcdHsgdGhyb3cgbmV3IEVycm9yKChcIkNhbm5vdCB1c2UgcmVwbGFjZWQgY2hhcmFjdGVyIFwiICsgZW5kICsgXCIgYXMgc2xpY2UgZW5kIGFuY2hvci5cIikpOyB9XG5cblx0XHRcdHZhciBzbGljZVN0YXJ0ID0gc3RhcnRDaHVuayA9PT0gY2h1bmsgPyBzdGFydCAtIGNodW5rLnN0YXJ0IDogMDtcblx0XHRcdHZhciBzbGljZUVuZCA9IGNvbnRhaW5zRW5kID8gY2h1bmsuY29udGVudC5sZW5ndGggKyBlbmQgLSBjaHVuay5lbmQgOiBjaHVuay5jb250ZW50Lmxlbmd0aDtcblxuXHRcdFx0cmVzdWx0ICs9IGNodW5rLmNvbnRlbnQuc2xpY2Uoc2xpY2VTdGFydCwgc2xpY2VFbmQpO1xuXG5cdFx0XHRpZiAoY2h1bmsub3V0cm8gJiYgKCFjb250YWluc0VuZCB8fCBjaHVuay5lbmQgPT09IGVuZCkpIHtcblx0XHRcdFx0cmVzdWx0ICs9IGNodW5rLm91dHJvO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29udGFpbnNFbmQpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdGNodW5rID0gY2h1bmsubmV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIFRPRE8gZGVwcmVjYXRlIHRoaXM/IG5vdCByZWFsbHkgdmVyeSB1c2VmdWxcblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLnNuaXAgPSBmdW5jdGlvbiBzbmlwIChzdGFydCwgZW5kKSB7XG5cdFx0dmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuXHRcdGNsb25lLnJlbW92ZSgwLCBzdGFydCk7XG5cdFx0Y2xvbmUucmVtb3ZlKGVuZCwgY2xvbmUub3JpZ2luYWwubGVuZ3RoKTtcblxuXHRcdHJldHVybiBjbG9uZTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUuX3NwbGl0ID0gZnVuY3Rpb24gX3NwbGl0IChpbmRleCkge1xuXHRcdGlmICh0aGlzLmJ5U3RhcnRbaW5kZXhdIHx8IHRoaXMuYnlFbmRbaW5kZXhdKSB7IHJldHVybjsgfVxuXG5cdFx0dmFyIGNodW5rID0gdGhpcy5sYXN0U2VhcmNoZWRDaHVuaztcblx0XHR2YXIgc2VhcmNoRm9yd2FyZCA9IGluZGV4ID4gY2h1bmsuZW5kO1xuXG5cdFx0d2hpbGUgKGNodW5rKSB7XG5cdFx0XHRpZiAoY2h1bmsuY29udGFpbnMoaW5kZXgpKSB7IHJldHVybiB0aGlzLl9zcGxpdENodW5rKGNodW5rLCBpbmRleCk7IH1cblxuXHRcdFx0Y2h1bmsgPSBzZWFyY2hGb3J3YXJkID8gdGhpcy5ieVN0YXJ0W2NodW5rLmVuZF0gOiB0aGlzLmJ5RW5kW2NodW5rLnN0YXJ0XTtcblx0XHR9XG5cdH07XG5cblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLl9zcGxpdENodW5rID0gZnVuY3Rpb24gX3NwbGl0Q2h1bmsgKGNodW5rLCBpbmRleCkge1xuXHRcdGlmIChjaHVuay5lZGl0ZWQgJiYgY2h1bmsuY29udGVudC5sZW5ndGgpIHtcblx0XHRcdC8vIHplcm8tbGVuZ3RoIGVkaXRlZCBjaHVua3MgYXJlIGEgc3BlY2lhbCBjYXNlIChvdmVybGFwcGluZyByZXBsYWNlbWVudHMpXG5cdFx0XHR2YXIgbG9jID0gZ2V0TG9jYXRvciQxKHRoaXMub3JpZ2luYWwpKGluZGV4KTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0KFwiQ2Fubm90IHNwbGl0IGEgY2h1bmsgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGVkaXRlZCAoXCIgKyAobG9jLmxpbmUpICsgXCI6XCIgKyAobG9jLmNvbHVtbikgKyBcIiDigJMgXFxcIlwiICsgKGNodW5rLm9yaWdpbmFsKSArIFwiXFxcIilcIilcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0dmFyIG5ld0NodW5rID0gY2h1bmsuc3BsaXQoaW5kZXgpO1xuXG5cdFx0dGhpcy5ieUVuZFtpbmRleF0gPSBjaHVuaztcblx0XHR0aGlzLmJ5U3RhcnRbaW5kZXhdID0gbmV3Q2h1bms7XG5cdFx0dGhpcy5ieUVuZFtuZXdDaHVuay5lbmRdID0gbmV3Q2h1bms7XG5cblx0XHRpZiAoY2h1bmsgPT09IHRoaXMubGFzdENodW5rKSB7IHRoaXMubGFzdENodW5rID0gbmV3Q2h1bms7IH1cblxuXHRcdHRoaXMubGFzdFNlYXJjaGVkQ2h1bmsgPSBjaHVuaztcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG5cdFx0dmFyIHN0ciA9IHRoaXMuaW50cm87XG5cblx0XHR2YXIgY2h1bmsgPSB0aGlzLmZpcnN0Q2h1bms7XG5cdFx0d2hpbGUgKGNodW5rKSB7XG5cdFx0XHRzdHIgKz0gY2h1bmsudG9TdHJpbmcoKTtcblx0XHRcdGNodW5rID0gY2h1bmsubmV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3RyICsgdGhpcy5vdXRybztcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkgKCkge1xuXHRcdHZhciBjaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblx0XHRkbyB7XG5cdFx0XHRpZiAoY2h1bmsuaW50cm8ubGVuZ3RoICYmIGNodW5rLmludHJvLnRyaW0oKSB8fFxuXHRcdFx0XHRcdGNodW5rLmNvbnRlbnQubGVuZ3RoICYmIGNodW5rLmNvbnRlbnQudHJpbSgpIHx8XG5cdFx0XHRcdFx0Y2h1bmsub3V0cm8ubGVuZ3RoICYmIGNodW5rLm91dHJvLnRyaW0oKSlcblx0XHRcdFx0eyByZXR1cm4gZmFsc2U7IH1cblx0XHR9IHdoaWxlIChjaHVuayA9IGNodW5rLm5leHQpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiBsZW5ndGggKCkge1xuXHRcdHZhciBjaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblx0XHR2YXIgbGVuZ3RoID0gMDtcblx0XHRkbyB7XG5cdFx0XHRsZW5ndGggKz0gY2h1bmsuaW50cm8ubGVuZ3RoICsgY2h1bmsuY29udGVudC5sZW5ndGggKyBjaHVuay5vdXRyby5sZW5ndGg7XG5cdFx0fSB3aGlsZSAoY2h1bmsgPSBjaHVuay5uZXh0KTtcblx0XHRyZXR1cm4gbGVuZ3RoO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS50cmltTGluZXMgPSBmdW5jdGlvbiB0cmltTGluZXMgKCkge1xuXHRcdHJldHVybiB0aGlzLnRyaW0oJ1tcXFxcclxcXFxuXScpO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24gdHJpbSAoY2hhclR5cGUpIHtcblx0XHRyZXR1cm4gdGhpcy50cmltU3RhcnQoY2hhclR5cGUpLnRyaW1FbmQoY2hhclR5cGUpO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS50cmltRW5kQWJvcnRlZCA9IGZ1bmN0aW9uIHRyaW1FbmRBYm9ydGVkIChjaGFyVHlwZSkge1xuXHRcdHZhciByeCA9IG5ldyBSZWdFeHAoKGNoYXJUeXBlIHx8ICdcXFxccycpICsgJyskJyk7XG5cblx0XHR0aGlzLm91dHJvID0gdGhpcy5vdXRyby5yZXBsYWNlKHJ4LCAnJyk7XG5cdFx0aWYgKHRoaXMub3V0cm8ubGVuZ3RoKSB7IHJldHVybiB0cnVlOyB9XG5cblx0XHR2YXIgY2h1bmsgPSB0aGlzLmxhc3RDaHVuaztcblxuXHRcdGRvIHtcblx0XHRcdHZhciBlbmQgPSBjaHVuay5lbmQ7XG5cdFx0XHR2YXIgYWJvcnRlZCA9IGNodW5rLnRyaW1FbmQocngpO1xuXG5cdFx0XHQvLyBpZiBjaHVuayB3YXMgdHJpbW1lZCwgd2UgaGF2ZSBhIG5ldyBsYXN0Q2h1bmtcblx0XHRcdGlmIChjaHVuay5lbmQgIT09IGVuZCkge1xuXHRcdFx0XHRpZiAodGhpcy5sYXN0Q2h1bmsgPT09IGNodW5rKSB7XG5cdFx0XHRcdFx0dGhpcy5sYXN0Q2h1bmsgPSBjaHVuay5uZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5ieUVuZFtjaHVuay5lbmRdID0gY2h1bms7XG5cdFx0XHRcdHRoaXMuYnlTdGFydFtjaHVuay5uZXh0LnN0YXJ0XSA9IGNodW5rLm5leHQ7XG5cdFx0XHRcdHRoaXMuYnlFbmRbY2h1bmsubmV4dC5lbmRdID0gY2h1bmsubmV4dDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGFib3J0ZWQpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRcdGNodW5rID0gY2h1bmsucHJldmlvdXM7XG5cdFx0fSB3aGlsZSAoY2h1bmspO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdE1hZ2ljU3RyaW5nLnByb3RvdHlwZS50cmltRW5kID0gZnVuY3Rpb24gdHJpbUVuZCAoY2hhclR5cGUpIHtcblx0XHR0aGlzLnRyaW1FbmRBYm9ydGVkKGNoYXJUeXBlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0TWFnaWNTdHJpbmcucHJvdG90eXBlLnRyaW1TdGFydEFib3J0ZWQgPSBmdW5jdGlvbiB0cmltU3RhcnRBYm9ydGVkIChjaGFyVHlwZSkge1xuXHRcdHZhciByeCA9IG5ldyBSZWdFeHAoJ14nICsgKGNoYXJUeXBlIHx8ICdcXFxccycpICsgJysnKTtcblxuXHRcdHRoaXMuaW50cm8gPSB0aGlzLmludHJvLnJlcGxhY2UocngsICcnKTtcblx0XHRpZiAodGhpcy5pbnRyby5sZW5ndGgpIHsgcmV0dXJuIHRydWU7IH1cblxuXHRcdHZhciBjaHVuayA9IHRoaXMuZmlyc3RDaHVuaztcblxuXHRcdGRvIHtcblx0XHRcdHZhciBlbmQgPSBjaHVuay5lbmQ7XG5cdFx0XHR2YXIgYWJvcnRlZCA9IGNodW5rLnRyaW1TdGFydChyeCk7XG5cblx0XHRcdGlmIChjaHVuay5lbmQgIT09IGVuZCkge1xuXHRcdFx0XHQvLyBzcGVjaWFsIGNhc2UuLi5cblx0XHRcdFx0aWYgKGNodW5rID09PSB0aGlzLmxhc3RDaHVuaykgeyB0aGlzLmxhc3RDaHVuayA9IGNodW5rLm5leHQ7IH1cblxuXHRcdFx0XHR0aGlzLmJ5RW5kW2NodW5rLmVuZF0gPSBjaHVuaztcblx0XHRcdFx0dGhpcy5ieVN0YXJ0W2NodW5rLm5leHQuc3RhcnRdID0gY2h1bmsubmV4dDtcblx0XHRcdFx0dGhpcy5ieUVuZFtjaHVuay5uZXh0LmVuZF0gPSBjaHVuay5uZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYWJvcnRlZCkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdFx0Y2h1bmsgPSBjaHVuay5uZXh0O1xuXHRcdH0gd2hpbGUgKGNodW5rKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRNYWdpY1N0cmluZy5wcm90b3R5cGUudHJpbVN0YXJ0ID0gZnVuY3Rpb24gdHJpbVN0YXJ0IChjaGFyVHlwZSkge1xuXHRcdHRoaXMudHJpbVN0YXJ0QWJvcnRlZChjaGFyVHlwZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0Y29uc3QgVU5LTk9XTiA9IHt9O1xuXHRmdW5jdGlvbiBnYXRoZXJfcG9zc2libGVfdmFsdWVzKG5vZGUsIHNldCkge1xuXHQgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0xpdGVyYWwnKSB7XG5cdCAgICAgICAgc2V0LmFkZChub2RlLnZhbHVlKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbicpIHtcblx0ICAgICAgICBnYXRoZXJfcG9zc2libGVfdmFsdWVzKG5vZGUuY29uc2VxdWVudCwgc2V0KTtcblx0ICAgICAgICBnYXRoZXJfcG9zc2libGVfdmFsdWVzKG5vZGUuYWx0ZXJuYXRlLCBzZXQpO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgc2V0LmFkZChVTktOT1dOKTtcblx0ICAgIH1cblx0fVxuXG5cdHZhciBCbG9ja0FwcGxpZXNUb05vZGU7XG5cdChmdW5jdGlvbiAoQmxvY2tBcHBsaWVzVG9Ob2RlKSB7XG5cdCAgICBCbG9ja0FwcGxpZXNUb05vZGVbQmxvY2tBcHBsaWVzVG9Ob2RlW1wiTm90UG9zc2libGVcIl0gPSAwXSA9IFwiTm90UG9zc2libGVcIjtcblx0ICAgIEJsb2NrQXBwbGllc1RvTm9kZVtCbG9ja0FwcGxpZXNUb05vZGVbXCJQb3NzaWJsZVwiXSA9IDFdID0gXCJQb3NzaWJsZVwiO1xuXHQgICAgQmxvY2tBcHBsaWVzVG9Ob2RlW0Jsb2NrQXBwbGllc1RvTm9kZVtcIlVua25vd25TZWxlY3RvclR5cGVcIl0gPSAyXSA9IFwiVW5rbm93blNlbGVjdG9yVHlwZVwiO1xuXHR9KShCbG9ja0FwcGxpZXNUb05vZGUgfHwgKEJsb2NrQXBwbGllc1RvTm9kZSA9IHt9KSk7XG5cdGNsYXNzIFNlbGVjdG9yJDEge1xuXHQgICAgY29uc3RydWN0b3Iobm9kZSwgc3R5bGVzaGVldCkge1xuXHQgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cdCAgICAgICAgdGhpcy5zdHlsZXNoZWV0ID0gc3R5bGVzaGVldDtcblx0ICAgICAgICB0aGlzLmJsb2NrcyA9IGdyb3VwX3NlbGVjdG9ycyhub2RlKTtcblx0ICAgICAgICAvLyB0YWtlIHRyYWlsaW5nIDpnbG9iYWwoLi4uKSBzZWxlY3RvcnMgb3V0IG9mIGNvbnNpZGVyYXRpb25cblx0ICAgICAgICBsZXQgaSA9IHRoaXMuYmxvY2tzLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoaSA+IDApIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmJsb2Nrc1tpIC0gMV0uZ2xvYmFsKVxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGkgLT0gMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5sb2NhbF9ibG9ja3MgPSB0aGlzLmJsb2Nrcy5zbGljZSgwLCBpKTtcblx0ICAgICAgICB0aGlzLnVzZWQgPSB0aGlzLmxvY2FsX2Jsb2Nrcy5sZW5ndGggPT09IDA7XG5cdCAgICB9XG5cdCAgICBhcHBseShub2RlLCBzdGFjaykge1xuXHQgICAgICAgIGNvbnN0IHRvX2VuY2Fwc3VsYXRlID0gW107XG5cdCAgICAgICAgYXBwbHlfc2VsZWN0b3IodGhpcy5sb2NhbF9ibG9ja3Muc2xpY2UoKSwgbm9kZSwgc3RhY2suc2xpY2UoKSwgdG9fZW5jYXBzdWxhdGUpO1xuXHQgICAgICAgIGlmICh0b19lbmNhcHN1bGF0ZS5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHRvX2VuY2Fwc3VsYXRlLmZvckVhY2goKHsgbm9kZSwgYmxvY2sgfSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zdHlsZXNoZWV0Lm5vZGVzX3dpdGhfY3NzX2NsYXNzLmFkZChub2RlKTtcblx0ICAgICAgICAgICAgICAgIGJsb2NrLnNob3VsZF9lbmNhcHN1bGF0ZSA9IHRydWU7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB0aGlzLnVzZWQgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIG1pbmlmeShjb2RlKSB7XG5cdCAgICAgICAgbGV0IGMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChpID4gMCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGJsb2NrLnN0YXJ0IC0gYyA+IDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlLm92ZXJ3cml0ZShjLCBibG9jay5zdGFydCwgYmxvY2suY29tYmluYXRvci5uYW1lIHx8ICcgJyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYyA9IGJsb2NrLmVuZDtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHRyYW5zZm9ybShjb2RlLCBhdHRyLCBtYXhfYW1vdW50X2NsYXNzX3NwZWNpZmljaXR5X2luY3JlYXNlZCkge1xuXHQgICAgICAgIGNvbnN0IGFtb3VudF9jbGFzc19zcGVjaWZpY2l0eV90b19pbmNyZWFzZSA9IG1heF9hbW91bnRfY2xhc3Nfc3BlY2lmaWNpdHlfaW5jcmVhc2VkIC0gdGhpcy5ibG9ja3MuZmlsdGVyKGJsb2NrID0+IGJsb2NrLnNob3VsZF9lbmNhcHN1bGF0ZSkubGVuZ3RoO1xuXHQgICAgICAgIGF0dHIgPSBhdHRyLnJlcGVhdChhbW91bnRfY2xhc3Nfc3BlY2lmaWNpdHlfdG9faW5jcmVhc2UgKyAxKTtcblx0ICAgICAgICBmdW5jdGlvbiBlbmNhcHN1bGF0ZV9ibG9jayhibG9jaykge1xuXHQgICAgICAgICAgICBsZXQgaSA9IGJsb2NrLnNlbGVjdG9ycy5sZW5ndGg7XG5cdCAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gYmxvY2suc2VsZWN0b3JzW2ldO1xuXHQgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09ICdQc2V1ZG9FbGVtZW50U2VsZWN0b3InIHx8IHNlbGVjdG9yLnR5cGUgPT09ICdQc2V1ZG9DbGFzc1NlbGVjdG9yJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5uYW1lICE9PSAncm9vdCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLnByZXBlbmRSaWdodChzZWxlY3Rvci5zdGFydCwgYXR0cik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09ICdUeXBlU2VsZWN0b3InICYmIHNlbGVjdG9yLm5hbWUgPT09ICcqJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGUub3ZlcndyaXRlKHNlbGVjdG9yLnN0YXJ0LCBzZWxlY3Rvci5lbmQsIGF0dHIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZS5hcHBlbmRMZWZ0KHNlbGVjdG9yLmVuZCwgYXR0cik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKChibG9jaykgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYmxvY2suZ2xvYmFsKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGJsb2NrLnNlbGVjdG9yc1swXTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gc2VsZWN0b3IuY2hpbGRyZW5bMF07XG5cdCAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gc2VsZWN0b3IuY2hpbGRyZW5bc2VsZWN0b3IuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG5cdCAgICAgICAgICAgICAgICBjb2RlLnJlbW92ZShzZWxlY3Rvci5zdGFydCwgZmlyc3Quc3RhcnQpLnJlbW92ZShsYXN0LmVuZCwgc2VsZWN0b3IuZW5kKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoYmxvY2suc2hvdWxkX2VuY2Fwc3VsYXRlKVxuXHQgICAgICAgICAgICAgICAgZW5jYXBzdWxhdGVfYmxvY2soYmxvY2spO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgdmFsaWRhdGUoY29tcG9uZW50KSB7XG5cdCAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCgoYmxvY2spID0+IHtcblx0ICAgICAgICAgICAgbGV0IGkgPSBibG9jay5zZWxlY3RvcnMubGVuZ3RoO1xuXHQgICAgICAgICAgICB3aGlsZSAoaS0tID4gMSkge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBibG9jay5zZWxlY3RvcnNbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InICYmIHNlbGVjdG9yLm5hbWUgPT09ICdnbG9iYWwnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKHNlbGVjdG9yLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBjc3MtaW52YWxpZC1nbG9iYWxgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgOmdsb2JhbCguLi4pIG11c3QgYmUgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBjb21wb3VuZCBzZWxlY3RvcmBcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGxldCBzdGFydCA9IDA7XG5cdCAgICAgICAgbGV0IGVuZCA9IHRoaXMuYmxvY2tzLmxlbmd0aDtcblx0ICAgICAgICBmb3IgKDsgc3RhcnQgPCBlbmQ7IHN0YXJ0ICs9IDEpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmJsb2Nrc1tzdGFydF0uZ2xvYmFsKVxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAoOyBlbmQgPiBzdGFydDsgZW5kIC09IDEpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmJsb2Nrc1tlbmQgLSAxXS5nbG9iYWwpXG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2tzW2ldLmdsb2JhbCkge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKHRoaXMuYmxvY2tzW2ldLnNlbGVjdG9yc1swXSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBjc3MtaW52YWxpZC1nbG9iYWxgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGA6Z2xvYmFsKC4uLikgY2FuIGJlIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgYSBzZWxlY3RvciBzZXF1ZW5jZSwgYnV0IG5vdCBpbiB0aGUgbWlkZGxlYFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBnZXRfYW1vdW50X2NsYXNzX3NwZWNpZmljaXR5X2luY3JlYXNlZCgpIHtcblx0ICAgICAgICBsZXQgY291bnQgPSAwO1xuXHQgICAgICAgIGZvciAoY29uc3QgYmxvY2sgb2YgdGhpcy5ibG9ja3MpIHtcblx0ICAgICAgICAgICAgaWYgKGJsb2NrLnNob3VsZF9lbmNhcHN1bGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgY291bnQrKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gY291bnQ7XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gYXBwbHlfc2VsZWN0b3IoYmxvY2tzLCBub2RlLCBzdGFjaywgdG9fZW5jYXBzdWxhdGUpIHtcblx0ICAgIGNvbnN0IGJsb2NrID0gYmxvY2tzLnBvcCgpO1xuXHQgICAgaWYgKCFibG9jaylcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICBpZiAoIW5vZGUpIHtcblx0ICAgICAgICByZXR1cm4gYmxvY2tzLmV2ZXJ5KGJsb2NrID0+IGJsb2NrLmdsb2JhbCk7XG5cdCAgICB9XG5cdCAgICBzd2l0Y2ggKGJsb2NrX21pZ2h0X2FwcGx5X3RvX25vZGUoYmxvY2ssIG5vZGUpKSB7XG5cdCAgICAgICAgY2FzZSBCbG9ja0FwcGxpZXNUb05vZGUuTm90UG9zc2libGU6XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICBjYXNlIEJsb2NrQXBwbGllc1RvTm9kZS5Vbmtub3duU2VsZWN0b3JUeXBlOlxuXHQgICAgICAgICAgICAvLyBiYWlsLiBUT0RPIGZpZ3VyZSBvdXQgd2hhdCB0aGVzZSBjb3VsZCBiZVxuXHQgICAgICAgICAgICB0b19lbmNhcHN1bGF0ZS5wdXNoKHsgbm9kZSwgYmxvY2sgfSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgICAgaWYgKGJsb2NrLmNvbWJpbmF0b3IpIHtcblx0ICAgICAgICBpZiAoYmxvY2suY29tYmluYXRvci50eXBlID09PSAnV2hpdGVTcGFjZScpIHtcblx0ICAgICAgICAgICAgZm9yIChjb25zdCBhbmNlc3Rvcl9ibG9jayBvZiBibG9ja3MpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChhbmNlc3Rvcl9ibG9jay5nbG9iYWwpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3RhY2tfbm9kZSBvZiBzdGFjaykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja19taWdodF9hcHBseV90b19ub2RlKGFuY2VzdG9yX2Jsb2NrLCBzdGFja19ub2RlKSAhPT0gQmxvY2tBcHBsaWVzVG9Ob2RlLk5vdFBvc3NpYmxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlOiBzdGFja19ub2RlLCBibG9jazogYW5jZXN0b3JfYmxvY2sgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRvX2VuY2Fwc3VsYXRlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlLCBibG9jayB9KTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoYmxvY2tzLmV2ZXJ5KGJsb2NrID0+IGJsb2NrLmdsb2JhbCkpIHtcblx0ICAgICAgICAgICAgICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlLCBibG9jayB9KTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoYmxvY2suY29tYmluYXRvci5uYW1lID09PSAnPicpIHtcblx0ICAgICAgICAgICAgaWYgKGFwcGx5X3NlbGVjdG9yKGJsb2Nrcywgc3RhY2sucG9wKCksIHN0YWNrLCB0b19lbmNhcHN1bGF0ZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlLCBibG9jayB9KTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gVE9ETyBvdGhlciBjb21iaW5hdG9yc1xuXHQgICAgICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlLCBibG9jayB9KTtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHRvX2VuY2Fwc3VsYXRlLnB1c2goeyBub2RlLCBibG9jayB9KTtcblx0ICAgIHJldHVybiB0cnVlO1xuXHR9XG5cdGZ1bmN0aW9uIGJsb2NrX21pZ2h0X2FwcGx5X3RvX25vZGUoYmxvY2ssIG5vZGUpIHtcblx0ICAgIGxldCBpID0gYmxvY2suc2VsZWN0b3JzLmxlbmd0aDtcblx0ICAgIHdoaWxlIChpLS0pIHtcblx0ICAgICAgICBjb25zdCBzZWxlY3RvciA9IGJsb2NrLnNlbGVjdG9yc1tpXTtcblx0ICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIHNlbGVjdG9yLm5hbWUgPT09ICdzdHJpbmcnICYmIHNlbGVjdG9yLm5hbWUucmVwbGFjZSgvXFxcXCguKS9nLCAnJDEnKTtcblx0ICAgICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InIHx8IHNlbGVjdG9yLnR5cGUgPT09ICdQc2V1ZG9FbGVtZW50U2VsZWN0b3InKSB7XG5cdCAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoc2VsZWN0b3IudHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InICYmIG5hbWUgPT09ICdnbG9iYWwnKSB7XG5cdCAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkbid0IHNlZSB0aGlzIGhlcmUuLi4gbWF5YmUgd2Ugc2hvdWxkIGVuZm9yY2UgdGhhdCA6Z2xvYmFsKC4uLilcblx0ICAgICAgICAgICAgLy8gY2Fubm90IGJlIHNhbmR3aWNoZWQgYmV0d2VlbiBub24tZ2xvYmFsIHNlbGVjdG9ycz9cblx0ICAgICAgICAgICAgcmV0dXJuIEJsb2NrQXBwbGllc1RvTm9kZS5Ob3RQb3NzaWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHNlbGVjdG9yLnR5cGUgPT09ICdDbGFzc1NlbGVjdG9yJykge1xuXHQgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZV9tYXRjaGVzKG5vZGUsICdjbGFzcycsIG5hbWUsICd+PScsIGZhbHNlKSAmJiAhbm9kZS5jbGFzc2VzLnNvbWUoYyA9PiBjLm5hbWUgPT09IG5hbWUpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIEJsb2NrQXBwbGllc1RvTm9kZS5Ob3RQb3NzaWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoc2VsZWN0b3IudHlwZSA9PT0gJ0lkU2VsZWN0b3InKSB7XG5cdCAgICAgICAgICAgIGlmICghYXR0cmlidXRlX21hdGNoZXMobm9kZSwgJ2lkJywgbmFtZSwgJz0nLCBmYWxzZSkpXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gQmxvY2tBcHBsaWVzVG9Ob2RlLk5vdFBvc3NpYmxlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChzZWxlY3Rvci50eXBlID09PSAnQXR0cmlidXRlU2VsZWN0b3InKSB7XG5cdCAgICAgICAgICAgIGlmICghYXR0cmlidXRlX21hdGNoZXMobm9kZSwgc2VsZWN0b3IubmFtZS5uYW1lLCBzZWxlY3Rvci52YWx1ZSAmJiB1bnF1b3RlKHNlbGVjdG9yLnZhbHVlKSwgc2VsZWN0b3IubWF0Y2hlciwgc2VsZWN0b3IuZmxhZ3MpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIEJsb2NrQXBwbGllc1RvTm9kZS5Ob3RQb3NzaWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoc2VsZWN0b3IudHlwZSA9PT0gJ1R5cGVTZWxlY3RvcicpIHtcblx0ICAgICAgICAgICAgaWYgKG5vZGUubmFtZS50b0xvd2VyQ2FzZSgpICE9PSBuYW1lLnRvTG93ZXJDYXNlKCkgJiYgbmFtZSAhPT0gJyonKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIEJsb2NrQXBwbGllc1RvTm9kZS5Ob3RQb3NzaWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBCbG9ja0FwcGxpZXNUb05vZGUuVW5rbm93blNlbGVjdG9yVHlwZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQmxvY2tBcHBsaWVzVG9Ob2RlLlBvc3NpYmxlO1xuXHR9XG5cdGZ1bmN0aW9uIHRlc3RfYXR0cmlidXRlKG9wZXJhdG9yLCBleHBlY3RlZF92YWx1ZSwgY2FzZV9pbnNlbnNpdGl2ZSwgdmFsdWUpIHtcblx0ICAgIGlmIChjYXNlX2luc2Vuc2l0aXZlKSB7XG5cdCAgICAgICAgZXhwZWN0ZWRfdmFsdWUgPSBleHBlY3RlZF92YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblx0ICAgIH1cblx0ICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcblx0ICAgICAgICBjYXNlICc9JzogcmV0dXJuIHZhbHVlID09PSBleHBlY3RlZF92YWx1ZTtcblx0ICAgICAgICBjYXNlICd+PSc6IHJldHVybiB2YWx1ZS5zcGxpdCgvXFxzLykuaW5jbHVkZXMoZXhwZWN0ZWRfdmFsdWUpO1xuXHQgICAgICAgIGNhc2UgJ3w9JzogcmV0dXJuIGAke3ZhbHVlfS1gLnN0YXJ0c1dpdGgoYCR7ZXhwZWN0ZWRfdmFsdWV9LWApO1xuXHQgICAgICAgIGNhc2UgJ149JzogcmV0dXJuIHZhbHVlLnN0YXJ0c1dpdGgoZXhwZWN0ZWRfdmFsdWUpO1xuXHQgICAgICAgIGNhc2UgJyQ9JzogcmV0dXJuIHZhbHVlLmVuZHNXaXRoKGV4cGVjdGVkX3ZhbHVlKTtcblx0ICAgICAgICBjYXNlICcqPSc6IHJldHVybiB2YWx1ZS5pbmNsdWRlcyhleHBlY3RlZF92YWx1ZSk7XG5cdCAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKGB0aGlzIHNob3VsZG4ndCBoYXBwZW5gKTtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBhdHRyaWJ1dGVfbWF0Y2hlcyhub2RlLCBuYW1lLCBleHBlY3RlZF92YWx1ZSwgb3BlcmF0b3IsIGNhc2VfaW5zZW5zaXRpdmUpIHtcblx0ICAgIGNvbnN0IHNwcmVhZCA9IG5vZGUuYXR0cmlidXRlcy5maW5kKGF0dHIgPT4gYXR0ci50eXBlID09PSAnU3ByZWFkJyk7XG5cdCAgICBpZiAoc3ByZWFkKVxuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgaWYgKG5vZGUuYmluZGluZ3Muc29tZSgoYmluZGluZykgPT4gYmluZGluZy5uYW1lID09PSBuYW1lKSlcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIGNvbnN0IGF0dHIgPSBub2RlLmF0dHJpYnV0ZXMuZmluZCgoYXR0cikgPT4gYXR0ci5uYW1lID09PSBuYW1lKTtcblx0ICAgIGlmICghYXR0cilcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICBpZiAoYXR0ci5pc190cnVlKVxuXHQgICAgICAgIHJldHVybiBvcGVyYXRvciA9PT0gbnVsbDtcblx0ICAgIGlmICghZXhwZWN0ZWRfdmFsdWUpXG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICBpZiAoYXR0ci5jaHVua3MubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyLmNodW5rc1swXTtcblx0ICAgICAgICBpZiAoIXZhbHVlKVxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdUZXh0Jylcblx0ICAgICAgICAgICAgcmV0dXJuIHRlc3RfYXR0cmlidXRlKG9wZXJhdG9yLCBleHBlY3RlZF92YWx1ZSwgY2FzZV9pbnNlbnNpdGl2ZSwgdmFsdWUuZGF0YSk7XG5cdCAgICB9XG5cdCAgICBjb25zdCBwb3NzaWJsZV92YWx1ZXMgPSBuZXcgU2V0KCk7XG5cdCAgICBsZXQgcHJldl92YWx1ZXMgPSBbXTtcblx0ICAgIGZvciAoY29uc3QgY2h1bmsgb2YgYXR0ci5jaHVua3MpIHtcblx0ICAgICAgICBjb25zdCBjdXJyZW50X3Bvc3NpYmxlX3ZhbHVlcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICBpZiAoY2h1bmsudHlwZSA9PT0gJ1RleHQnKSB7XG5cdCAgICAgICAgICAgIGN1cnJlbnRfcG9zc2libGVfdmFsdWVzLmFkZChjaHVuay5kYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGdhdGhlcl9wb3NzaWJsZV92YWx1ZXMoY2h1bmsubm9kZSwgY3VycmVudF9wb3NzaWJsZV92YWx1ZXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBpbXBvc3NpYmxlIHRvIGZpbmQgb3V0IGFsbCBjb21iaW5hdGlvbnNcblx0ICAgICAgICBpZiAoY3VycmVudF9wb3NzaWJsZV92YWx1ZXMuaGFzKFVOS05PV04pKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICBpZiAocHJldl92YWx1ZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBjb25zdCBzdGFydF93aXRoX3NwYWNlID0gW107XG5cdCAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IFtdO1xuXHQgICAgICAgICAgICBjdXJyZW50X3Bvc3NpYmxlX3ZhbHVlcy5mb3JFYWNoKChjdXJyZW50X3Bvc3NpYmxlX3ZhbHVlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAoL15cXHMvLnRlc3QoY3VycmVudF9wb3NzaWJsZV92YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydF93aXRoX3NwYWNlLnB1c2goY3VycmVudF9wb3NzaWJsZV92YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcucHVzaChjdXJyZW50X3Bvc3NpYmxlX3ZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGlmIChyZW1haW5pbmcubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHN0YXJ0X3dpdGhfc3BhY2UubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHByZXZfdmFsdWVzLmZvckVhY2gocHJldl92YWx1ZSA9PiBwb3NzaWJsZV92YWx1ZXMuYWRkKHByZXZfdmFsdWUpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkID0gW107XG5cdCAgICAgICAgICAgICAgICBwcmV2X3ZhbHVlcy5mb3JFYWNoKChwcmV2X3ZhbHVlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nLmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkLnB1c2gocHJldl92YWx1ZSArIHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgcHJldl92YWx1ZXMgPSBjb21iaW5lZDtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0X3dpdGhfc3BhY2UuZm9yRWFjaCgodmFsdWUpID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoL1xccyQvLnRlc3QodmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlX3ZhbHVlcy5hZGQodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJldl92YWx1ZXMucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHByZXZfdmFsdWVzLmZvckVhY2gocHJldl92YWx1ZSA9PiBwb3NzaWJsZV92YWx1ZXMuYWRkKHByZXZfdmFsdWUpKTtcblx0ICAgICAgICAgICAgICAgIHByZXZfdmFsdWVzID0gW107XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgY3VycmVudF9wb3NzaWJsZV92YWx1ZXMuZm9yRWFjaCgoY3VycmVudF9wb3NzaWJsZV92YWx1ZSkgPT4ge1xuXHQgICAgICAgICAgICBpZiAoL1xccyQvLnRlc3QoY3VycmVudF9wb3NzaWJsZV92YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgIHBvc3NpYmxlX3ZhbHVlcy5hZGQoY3VycmVudF9wb3NzaWJsZV92YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBwcmV2X3ZhbHVlcy5wdXNoKGN1cnJlbnRfcG9zc2libGVfdmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKHByZXZfdmFsdWVzLmxlbmd0aCA8IGN1cnJlbnRfcG9zc2libGVfdmFsdWVzLnNpemUpIHtcblx0ICAgICAgICAgICAgcHJldl92YWx1ZXMucHVzaCgnICcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocHJldl92YWx1ZXMubGVuZ3RoID4gMjApIHtcblx0ICAgICAgICAgICAgLy8gbWlnaHQgZ3JvdyBleHBvbmVudGlhbGx5LCBiYWlsIG91dFxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBwcmV2X3ZhbHVlcy5mb3JFYWNoKHByZXZfdmFsdWUgPT4gcG9zc2libGVfdmFsdWVzLmFkZChwcmV2X3ZhbHVlKSk7XG5cdCAgICBpZiAocG9zc2libGVfdmFsdWVzLmhhcyhVTktOT1dOKSlcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIGZvciAoY29uc3QgdmFsdWUgb2YgcG9zc2libGVfdmFsdWVzKSB7XG5cdCAgICAgICAgaWYgKHRlc3RfYXR0cmlidXRlKG9wZXJhdG9yLCBleHBlY3RlZF92YWx1ZSwgY2FzZV9pbnNlbnNpdGl2ZSwgdmFsdWUpKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXHRmdW5jdGlvbiB1bnF1b3RlKHZhbHVlKSB7XG5cdCAgICBpZiAodmFsdWUudHlwZSA9PT0gJ0lkZW50aWZpZXInKVxuXHQgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuXHQgICAgY29uc3Qgc3RyID0gdmFsdWUudmFsdWU7XG5cdCAgICBpZiAoc3RyWzBdID09PSBzdHJbc3RyLmxlbmd0aCAtIDFdICYmIHN0clswXSA9PT0gXCInXCIgfHwgc3RyWzBdID09PSAnXCInKSB7XG5cdCAgICAgICAgcmV0dXJuIHN0ci5zbGljZSgxLCBzdHIubGVuZ3RoIC0gMSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc3RyO1xuXHR9XG5cdGNsYXNzIEJsb2NrJDIge1xuXHQgICAgY29uc3RydWN0b3IoY29tYmluYXRvcikge1xuXHQgICAgICAgIHRoaXMuY29tYmluYXRvciA9IGNvbWJpbmF0b3I7XG5cdCAgICAgICAgdGhpcy5nbG9iYWwgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IFtdO1xuXHQgICAgICAgIHRoaXMuc3RhcnQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZW5kID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnNob3VsZF9lbmNhcHN1bGF0ZSA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgYWRkKHNlbGVjdG9yKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3JzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc2VsZWN0b3Iuc3RhcnQ7XG5cdCAgICAgICAgICAgIHRoaXMuZ2xvYmFsID0gc2VsZWN0b3IudHlwZSA9PT0gJ1BzZXVkb0NsYXNzU2VsZWN0b3InICYmIHNlbGVjdG9yLm5hbWUgPT09ICdnbG9iYWwnO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcblx0ICAgICAgICB0aGlzLmVuZCA9IHNlbGVjdG9yLmVuZDtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBncm91cF9zZWxlY3RvcnMoc2VsZWN0b3IpIHtcblx0ICAgIGxldCBibG9jayA9IG5ldyBCbG9jayQyKG51bGwpO1xuXHQgICAgY29uc3QgYmxvY2tzID0gW2Jsb2NrXTtcblx0ICAgIHNlbGVjdG9yLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdCAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdXaGl0ZVNwYWNlJyB8fCBjaGlsZC50eXBlID09PSAnQ29tYmluYXRvcicpIHtcblx0ICAgICAgICAgICAgYmxvY2sgPSBuZXcgQmxvY2skMihjaGlsZCk7XG5cdCAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGJsb2NrLmFkZChjaGlsZCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gYmxvY2tzO1xuXHR9XG5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcblx0ZnVuY3Rpb24gaGFzaChzdHIpIHtcblx0ICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHIvZywgXCJcIik7XG5cdCAgICBsZXQgaGFzaCA9IDUzODE7XG5cdCAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG5cdCAgICB3aGlsZSAoaS0tKVxuXHQgICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuXHQgICAgcmV0dXJuIChoYXNoID4+PiAwKS50b1N0cmluZygzNik7XG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmVfY3NzX3ByZWZpeChuYW1lKSB7XG5cdCAgICByZXR1cm4gbmFtZS5yZXBsYWNlKC9eLSgod2Via2l0KXwobW96KXwobyl8KG1zKSktLywgJycpO1xuXHR9XG5cdGNvbnN0IGlzX2tleWZyYW1lc19ub2RlID0gKG5vZGUpID0+IHJlbW92ZV9jc3NfcHJlZml4KG5vZGUubmFtZSkgPT09ICdrZXlmcmFtZXMnO1xuXHRjb25zdCBhdF9ydWxlX2hhc19kZWNsYXJhdGlvbiA9ICh7IGJsb2NrIH0pID0+IGJsb2NrICYmXG5cdCAgICBibG9jay5jaGlsZHJlbiAmJlxuXHQgICAgYmxvY2suY2hpbGRyZW4uZmluZCgobm9kZSkgPT4gbm9kZS50eXBlID09PSAnRGVjbGFyYXRpb24nKTtcblx0ZnVuY3Rpb24gbWluaWZ5X2RlY2xhcmF0aW9ucyhjb2RlLCBzdGFydCwgZGVjbGFyYXRpb25zKSB7XG5cdCAgICBsZXQgYyA9IHN0YXJ0O1xuXHQgICAgZGVjbGFyYXRpb25zLmZvckVhY2goKGRlY2xhcmF0aW9uLCBpKSA9PiB7XG5cdCAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gaSA+IDAgPyAnOycgOiAnJztcblx0ICAgICAgICBpZiAoKGRlY2xhcmF0aW9uLm5vZGUuc3RhcnQgLSBjKSA+IHNlcGFyYXRvci5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgY29kZS5vdmVyd3JpdGUoYywgZGVjbGFyYXRpb24ubm9kZS5zdGFydCwgc2VwYXJhdG9yKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZGVjbGFyYXRpb24ubWluaWZ5KGNvZGUpO1xuXHQgICAgICAgIGMgPSBkZWNsYXJhdGlvbi5ub2RlLmVuZDtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIGM7XG5cdH1cblx0Y2xhc3MgUnVsZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKG5vZGUsIHN0eWxlc2hlZXQsIHBhcmVudCkge1xuXHQgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cdCAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvcnMgPSBub2RlLnNlbGVjdG9yLmNoaWxkcmVuLm1hcCgobm9kZSkgPT4gbmV3IFNlbGVjdG9yJDEobm9kZSwgc3R5bGVzaGVldCkpO1xuXHQgICAgICAgIHRoaXMuZGVjbGFyYXRpb25zID0gbm9kZS5ibG9jay5jaGlsZHJlbi5tYXAoKG5vZGUpID0+IG5ldyBEZWNsYXJhdGlvbiQxKG5vZGUpKTtcblx0ICAgIH1cblx0ICAgIGFwcGx5KG5vZGUsIHN0YWNrKSB7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvcnMuZm9yRWFjaChzZWxlY3RvciA9PiBzZWxlY3Rvci5hcHBseShub2RlLCBzdGFjaykpOyAvLyBUT0RPIG1vdmUgdGhlIGxvZ2ljIGluIGhlcmU/XG5cdCAgICB9XG5cdCAgICBpc191c2VkKGRldikge1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5ub2RlLnR5cGUgPT09ICdBdHJ1bGUnICYmIGlzX2tleWZyYW1lc19ub2RlKHRoaXMucGFyZW50Lm5vZGUpKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5kZWNsYXJhdGlvbnMubGVuZ3RoID09PSAwKVxuXHQgICAgICAgICAgICByZXR1cm4gZGV2O1xuXHQgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9ycy5zb21lKHMgPT4gcy51c2VkKTtcblx0ICAgIH1cblx0ICAgIG1pbmlmeShjb2RlLCBfZGV2KSB7XG5cdCAgICAgICAgbGV0IGMgPSB0aGlzLm5vZGUuc3RhcnQ7XG5cdCAgICAgICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnNlbGVjdG9ycy5mb3JFYWNoKChzZWxlY3RvcikgPT4ge1xuXHQgICAgICAgICAgICBpZiAoc2VsZWN0b3IudXNlZCkge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gc3RhcnRlZCA/ICcsJyA6ICcnO1xuXHQgICAgICAgICAgICAgICAgaWYgKChzZWxlY3Rvci5ub2RlLnN0YXJ0IC0gYykgPiBzZXBhcmF0b3IubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZS5vdmVyd3JpdGUoYywgc2VsZWN0b3Iubm9kZS5zdGFydCwgc2VwYXJhdG9yKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHNlbGVjdG9yLm1pbmlmeShjb2RlKTtcblx0ICAgICAgICAgICAgICAgIGMgPSBzZWxlY3Rvci5ub2RlLmVuZDtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgY29kZS5yZW1vdmUoYywgdGhpcy5ub2RlLmJsb2NrLnN0YXJ0KTtcblx0ICAgICAgICBjID0gdGhpcy5ub2RlLmJsb2NrLnN0YXJ0ICsgMTtcblx0ICAgICAgICBjID0gbWluaWZ5X2RlY2xhcmF0aW9ucyhjb2RlLCBjLCB0aGlzLmRlY2xhcmF0aW9ucyk7XG5cdCAgICAgICAgY29kZS5yZW1vdmUoYywgdGhpcy5ub2RlLmJsb2NrLmVuZCAtIDEpO1xuXHQgICAgfVxuXHQgICAgdHJhbnNmb3JtKGNvZGUsIGlkLCBrZXlmcmFtZXMsIG1heF9hbW91bnRfY2xhc3Nfc3BlY2lmaWNpdHlfaW5jcmVhc2VkKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50Lm5vZGUudHlwZSA9PT0gJ0F0cnVsZScgJiYgaXNfa2V5ZnJhbWVzX25vZGUodGhpcy5wYXJlbnQubm9kZSkpXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIGNvbnN0IGF0dHIgPSBgLiR7aWR9YDtcblx0ICAgICAgICB0aGlzLnNlbGVjdG9ycy5mb3JFYWNoKHNlbGVjdG9yID0+IHNlbGVjdG9yLnRyYW5zZm9ybShjb2RlLCBhdHRyLCBtYXhfYW1vdW50X2NsYXNzX3NwZWNpZmljaXR5X2luY3JlYXNlZCkpO1xuXHQgICAgICAgIHRoaXMuZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbGFyYXRpb24gPT4gZGVjbGFyYXRpb24udHJhbnNmb3JtKGNvZGUsIGtleWZyYW1lcykpO1xuXHQgICAgfVxuXHQgICAgdmFsaWRhdGUoY29tcG9uZW50KSB7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvcnMuZm9yRWFjaChzZWxlY3RvciA9PiB7XG5cdCAgICAgICAgICAgIHNlbGVjdG9yLnZhbGlkYXRlKGNvbXBvbmVudCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICB3YXJuX29uX3VudXNlZF9zZWxlY3RvcihoYW5kbGVyKSB7XG5cdCAgICAgICAgdGhpcy5zZWxlY3RvcnMuZm9yRWFjaChzZWxlY3RvciA9PiB7XG5cdCAgICAgICAgICAgIGlmICghc2VsZWN0b3IudXNlZClcblx0ICAgICAgICAgICAgICAgIGhhbmRsZXIoc2VsZWN0b3IpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZ2V0X21heF9hbW91bnRfY2xhc3Nfc3BlY2lmaWNpdHlfaW5jcmVhc2VkKCkge1xuXHQgICAgICAgIHJldHVybiBNYXRoLm1heCguLi50aGlzLnNlbGVjdG9ycy5tYXAoc2VsZWN0b3IgPT4gc2VsZWN0b3IuZ2V0X2Ftb3VudF9jbGFzc19zcGVjaWZpY2l0eV9pbmNyZWFzZWQoKSkpO1xuXHQgICAgfVxuXHR9XG5cdGNsYXNzIERlY2xhcmF0aW9uJDEge1xuXHQgICAgY29uc3RydWN0b3Iobm9kZSkge1xuXHQgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cdCAgICB9XG5cdCAgICB0cmFuc2Zvcm0oY29kZSwga2V5ZnJhbWVzKSB7XG5cdCAgICAgICAgY29uc3QgcHJvcGVydHkgPSB0aGlzLm5vZGUucHJvcGVydHkgJiYgcmVtb3ZlX2Nzc19wcmVmaXgodGhpcy5ub2RlLnByb3BlcnR5LnRvTG93ZXJDYXNlKCkpO1xuXHQgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuaW1hdGlvbicgfHwgcHJvcGVydHkgPT09ICdhbmltYXRpb24tbmFtZScpIHtcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLnZhbHVlLmNoaWxkcmVuLmZvckVhY2goKGJsb2NrKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAoYmxvY2sudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGJsb2NrLm5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGtleWZyYW1lcy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZS5vdmVyd3JpdGUoYmxvY2suc3RhcnQsIGJsb2NrLmVuZCwga2V5ZnJhbWVzLmdldChuYW1lKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBtaW5pZnkoY29kZSkge1xuXHQgICAgICAgIGlmICghdGhpcy5ub2RlLnByb3BlcnR5KVxuXHQgICAgICAgICAgICByZXR1cm47IC8vIEBhcHBseSwgYW5kIHBvc3NpYmx5IG90aGVyIHdlaXJkIGNhc2VzP1xuXHQgICAgICAgIGNvbnN0IGMgPSB0aGlzLm5vZGUuc3RhcnQgKyB0aGlzLm5vZGUucHJvcGVydHkubGVuZ3RoO1xuXHQgICAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5ub2RlLnZhbHVlLmNoaWxkcmVuXG5cdCAgICAgICAgICAgID8gdGhpcy5ub2RlLnZhbHVlLmNoaWxkcmVuWzBdXG5cdCAgICAgICAgICAgIDogdGhpcy5ub2RlLnZhbHVlO1xuXHQgICAgICAgIGxldCBzdGFydCA9IGZpcnN0LnN0YXJ0O1xuXHQgICAgICAgIHdoaWxlICgvXFxzLy50ZXN0KGNvZGUub3JpZ2luYWxbc3RhcnRdKSlcblx0ICAgICAgICAgICAgc3RhcnQgKz0gMTtcblx0ICAgICAgICBpZiAoc3RhcnQgLSBjID4gMSkge1xuXHQgICAgICAgICAgICBjb2RlLm92ZXJ3cml0ZShjLCBzdGFydCwgJzonKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblx0Y2xhc3MgQXRydWxlJDEge1xuXHQgICAgY29uc3RydWN0b3Iobm9kZSkge1xuXHQgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXHQgICAgICAgIHRoaXMuZGVjbGFyYXRpb25zID0gW107XG5cdCAgICB9XG5cdCAgICBhcHBseShub2RlLCBzdGFjaykge1xuXHQgICAgICAgIGlmICh0aGlzLm5vZGUubmFtZSA9PT0gJ21lZGlhJyB8fCB0aGlzLm5vZGUubmFtZSA9PT0gJ3N1cHBvcnRzJykge1xuXHQgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHQgICAgICAgICAgICAgICAgY2hpbGQuYXBwbHkobm9kZSwgc3RhY2spO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoaXNfa2V5ZnJhbWVzX25vZGUodGhpcy5ub2RlKSkge1xuXHQgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKHJ1bGUpID0+IHtcblx0ICAgICAgICAgICAgICAgIHJ1bGUuc2VsZWN0b3JzLmZvckVhY2goc2VsZWN0b3IgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLnVzZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlzX3VzZWQoX2Rldikge1xuXHQgICAgICAgIHJldHVybiB0cnVlOyAvLyBUT0RPXG5cdCAgICB9XG5cdCAgICBtaW5pZnkoY29kZSwgZGV2KSB7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZS5uYW1lID09PSAnbWVkaWEnKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25fY2hhciA9IGNvZGUub3JpZ2luYWxbdGhpcy5ub2RlLmV4cHJlc3Npb24uc3RhcnRdO1xuXHQgICAgICAgICAgICBsZXQgYyA9IHRoaXMubm9kZS5zdGFydCArIChleHByZXNzaW9uX2NoYXIgPT09ICcoJyA/IDYgOiA3KTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5leHByZXNzaW9uLnN0YXJ0ID4gYylcblx0ICAgICAgICAgICAgICAgIGNvZGUucmVtb3ZlKGMsIHRoaXMubm9kZS5leHByZXNzaW9uLnN0YXJ0KTtcblx0ICAgICAgICAgICAgdGhpcy5ub2RlLmV4cHJlc3Npb24uY2hpbGRyZW4uZm9yRWFjaCgocXVlcnkpID0+IHtcblx0ICAgICAgICAgICAgICAgIC8vIFRPRE8gbWluaWZ5IHF1ZXJpZXNcblx0ICAgICAgICAgICAgICAgIGMgPSBxdWVyeS5lbmQ7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjb2RlLnJlbW92ZShjLCB0aGlzLm5vZGUuYmxvY2suc3RhcnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0aGlzLm5vZGUubmFtZSA9PT0gJ3N1cHBvcnRzJykge1xuXHQgICAgICAgICAgICBsZXQgYyA9IHRoaXMubm9kZS5zdGFydCArIDk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuZXhwcmVzc2lvbi5zdGFydCAtIGMgPiAxKVxuXHQgICAgICAgICAgICAgICAgY29kZS5vdmVyd3JpdGUoYywgdGhpcy5ub2RlLmV4cHJlc3Npb24uc3RhcnQsICcgJyk7XG5cdCAgICAgICAgICAgIHRoaXMubm9kZS5leHByZXNzaW9uLmNoaWxkcmVuLmZvckVhY2goKHF1ZXJ5KSA9PiB7XG5cdCAgICAgICAgICAgICAgICAvLyBUT0RPIG1pbmlmeSBxdWVyaWVzXG5cdCAgICAgICAgICAgICAgICBjID0gcXVlcnkuZW5kO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgY29kZS5yZW1vdmUoYywgdGhpcy5ub2RlLmJsb2NrLnN0YXJ0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGxldCBjID0gdGhpcy5ub2RlLnN0YXJ0ICsgdGhpcy5ub2RlLm5hbWUubGVuZ3RoICsgMTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5ub2RlLmV4cHJlc3Npb24uc3RhcnQgLSBjID4gMSlcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlLm92ZXJ3cml0ZShjLCB0aGlzLm5vZGUuZXhwcmVzc2lvbi5zdGFydCwgJyAnKTtcblx0ICAgICAgICAgICAgICAgIGMgPSB0aGlzLm5vZGUuZXhwcmVzc2lvbi5lbmQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5ibG9jayAmJiB0aGlzLm5vZGUuYmxvY2suc3RhcnQgLSBjID4gMCkge1xuXHQgICAgICAgICAgICAgICAgY29kZS5yZW1vdmUoYywgdGhpcy5ub2RlLmJsb2NrLnN0YXJ0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBUT0RPIG90aGVyIGF0cnVsZXNcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLmJsb2NrKSB7XG5cdCAgICAgICAgICAgIGxldCBjID0gdGhpcy5ub2RlLmJsb2NrLnN0YXJ0ICsgMTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuZGVjbGFyYXRpb25zLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgYyA9IG1pbmlmeV9kZWNsYXJhdGlvbnMoY29kZSwgYywgdGhpcy5kZWNsYXJhdGlvbnMpO1xuXHQgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGF0cnVsZSBoYXMgY2hpbGRyZW4sIGxlYXZlIHRoZSBsYXN0IGRlY2xhcmF0aW9uIHNlbWljb2xvbiBhbG9uZVxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuXHQgICAgICAgICAgICAgICAgICAgIGMrKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzX3VzZWQoZGV2KSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGUucmVtb3ZlKGMsIGNoaWxkLm5vZGUuc3RhcnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNoaWxkLm1pbmlmeShjb2RlLCBkZXYpO1xuXHQgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZC5ub2RlLmVuZDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGNvZGUucmVtb3ZlKGMsIHRoaXMubm9kZS5ibG9jay5lbmQgLSAxKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICB0cmFuc2Zvcm0oY29kZSwgaWQsIGtleWZyYW1lcywgbWF4X2Ftb3VudF9jbGFzc19zcGVjaWZpY2l0eV9pbmNyZWFzZWQpIHtcblx0ICAgICAgICBpZiAoaXNfa2V5ZnJhbWVzX25vZGUodGhpcy5ub2RlKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5vZGUuZXhwcmVzc2lvbi5jaGlsZHJlbi5mb3JFYWNoKCh7IHR5cGUsIG5hbWUsIHN0YXJ0LCBlbmQgfSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJy1nbG9iYWwtJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZS5yZW1vdmUoc3RhcnQsIHN0YXJ0ICsgOCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgocnVsZSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5zZWxlY3RvcnMuZm9yRWFjaChzZWxlY3RvciA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IudXNlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLm92ZXJ3cml0ZShzdGFydCwgZW5kLCBrZXlmcmFtZXMuZ2V0KG5hbWUpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHQgICAgICAgICAgICBjaGlsZC50cmFuc2Zvcm0oY29kZSwgaWQsIGtleWZyYW1lcywgbWF4X2Ftb3VudF9jbGFzc19zcGVjaWZpY2l0eV9pbmNyZWFzZWQpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgdmFsaWRhdGUoY29tcG9uZW50KSB7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcblx0ICAgICAgICAgICAgY2hpbGQudmFsaWRhdGUoY29tcG9uZW50KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHdhcm5fb25fdW51c2VkX3NlbGVjdG9yKGhhbmRsZXIpIHtcblx0ICAgICAgICBpZiAodGhpcy5ub2RlLm5hbWUgIT09ICdtZWRpYScpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHQgICAgICAgICAgICBjaGlsZC53YXJuX29uX3VudXNlZF9zZWxlY3RvcihoYW5kbGVyKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGdldF9tYXhfYW1vdW50X2NsYXNzX3NwZWNpZmljaXR5X2luY3JlYXNlZCgpIHtcblx0ICAgICAgICByZXR1cm4gTWF0aC5tYXgoLi4udGhpcy5jaGlsZHJlbi5tYXAocnVsZSA9PiBydWxlLmdldF9tYXhfYW1vdW50X2NsYXNzX3NwZWNpZmljaXR5X2luY3JlYXNlZCgpKSk7XG5cdCAgICB9XG5cdH1cblx0Y2xhc3MgU3R5bGVzaGVldCB7XG5cdCAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIGFzdCwgZmlsZW5hbWUsIGRldikge1xuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0ICAgICAgICB0aGlzLmtleWZyYW1lcyA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLm5vZGVzX3dpdGhfY3NzX2NsYXNzID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuXHQgICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcblx0ICAgICAgICB0aGlzLmRldiA9IGRldjtcblx0ICAgICAgICBpZiAoYXN0LmNzcyAmJiBhc3QuY3NzLmNoaWxkcmVuLmxlbmd0aCkge1xuXHQgICAgICAgICAgICB0aGlzLmlkID0gYHN2ZWx0ZS0ke2hhc2goYXN0LmNzcy5jb250ZW50LnN0eWxlcyl9YDtcblx0ICAgICAgICAgICAgdGhpcy5oYXNfc3R5bGVzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcblx0ICAgICAgICAgICAgbGV0IGRlcHRoID0gMDtcblx0ICAgICAgICAgICAgbGV0IGN1cnJlbnRfYXRydWxlID0gbnVsbDtcblx0ICAgICAgICAgICAgd2Fsayhhc3QuY3NzLCB7XG5cdCAgICAgICAgICAgICAgICBlbnRlcjogKG5vZGUpID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQXRydWxlJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHJ1bGUgPSBuZXcgQXRydWxlJDEobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYXRydWxlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfYXRydWxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2F0cnVsZS5jaGlsZHJlbi5wdXNoKGF0cnVsZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVwdGggPD0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGF0cnVsZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2tleWZyYW1lc19ub2RlKG5vZGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmV4cHJlc3Npb24uY2hpbGRyZW4uZm9yRWFjaCgoZXhwcmVzc2lvbikgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uLnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJiAhZXhwcmVzc2lvbi5uYW1lLnN0YXJ0c1dpdGgoJy1nbG9iYWwtJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlmcmFtZXMuc2V0KGV4cHJlc3Npb24ubmFtZSwgYCR7dGhpcy5pZH0tJHtleHByZXNzaW9uLm5hbWV9YCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXRfcnVsZV9oYXNfZGVjbGFyYXRpb24obm9kZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0X3J1bGVfZGVjbGFyYXRpb25zID0gbm9kZS5ibG9jay5jaGlsZHJlblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLnR5cGUgPT09ICdEZWNsYXJhdGlvbicpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChub2RlID0+IG5ldyBEZWNsYXJhdGlvbiQxKG5vZGUpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0cnVsZS5kZWNsYXJhdGlvbnMucHVzaCguLi5hdF9ydWxlX2RlY2xhcmF0aW9ucyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hdHJ1bGUgPSBhdHJ1bGU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdSdWxlJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBydWxlID0gbmV3IFJ1bGUkMShub2RlLCB0aGlzLCBjdXJyZW50X2F0cnVsZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X2F0cnVsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hdHJ1bGUuY2hpbGRyZW4ucHVzaChydWxlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkZXB0aCA8PSAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gocnVsZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZGVwdGggKz0gMTtcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBsZWF2ZTogKG5vZGUpID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQXRydWxlJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hdHJ1bGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZGVwdGggLT0gMTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmhhc19zdHlsZXMgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBhcHBseShub2RlKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmhhc19zdHlsZXMpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuXHQgICAgICAgIGxldCBwYXJlbnQgPSBub2RlO1xuXHQgICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50KSB7XG5cdCAgICAgICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ0VsZW1lbnQnKVxuXHQgICAgICAgICAgICAgICAgc3RhY2sudW5zaGlmdChwYXJlbnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuXHQgICAgICAgICAgICBjaGlsZC5hcHBseShub2RlLCBzdGFjayk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVpZnkoKSB7XG5cdCAgICAgICAgdGhpcy5ub2Rlc193aXRoX2Nzc19jbGFzcy5mb3JFYWNoKChub2RlKSA9PiB7XG5cdCAgICAgICAgICAgIG5vZGUuYWRkX2Nzc19jbGFzcygpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmVuZGVyKGZpbGUsIHNob3VsZF90cmFuc2Zvcm1fc2VsZWN0b3JzKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmhhc19zdHlsZXMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHsgY29kZTogbnVsbCwgbWFwOiBudWxsIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGNvZGUgPSBuZXcgTWFnaWNTdHJpbmcodGhpcy5zb3VyY2UpO1xuXHQgICAgICAgIHdhbGsodGhpcy5hc3QuY3NzLCB7XG5cdCAgICAgICAgICAgIGVudGVyOiAobm9kZSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29kZS5hZGRTb3VyY2VtYXBMb2NhdGlvbihub2RlLnN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgIGNvZGUuYWRkU291cmNlbWFwTG9jYXRpb24obm9kZS5lbmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKHNob3VsZF90cmFuc2Zvcm1fc2VsZWN0b3JzKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KC4uLnRoaXMuY2hpbGRyZW4ubWFwKHJ1bGUgPT4gcnVsZS5nZXRfbWF4X2Ftb3VudF9jbGFzc19zcGVjaWZpY2l0eV9pbmNyZWFzZWQoKSkpO1xuXHQgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBjaGlsZC50cmFuc2Zvcm0oY29kZSwgdGhpcy5pZCwgdGhpcy5rZXlmcmFtZXMsIG1heCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBsZXQgYyA9IDA7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcblx0ICAgICAgICAgICAgaWYgKGNoaWxkLmlzX3VzZWQodGhpcy5kZXYpKSB7XG5cdCAgICAgICAgICAgICAgICBjb2RlLnJlbW92ZShjLCBjaGlsZC5ub2RlLnN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgIGNoaWxkLm1pbmlmeShjb2RlLCB0aGlzLmRldik7XG5cdCAgICAgICAgICAgICAgICBjID0gY2hpbGQubm9kZS5lbmQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb2RlLnJlbW92ZShjLCB0aGlzLnNvdXJjZS5sZW5ndGgpO1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGNvZGU6IGNvZGUudG9TdHJpbmcoKSxcblx0ICAgICAgICAgICAgbWFwOiBjb2RlLmdlbmVyYXRlTWFwKHtcblx0ICAgICAgICAgICAgICAgIGluY2x1ZGVDb250ZW50OiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLmZpbGVuYW1lLFxuXHQgICAgICAgICAgICAgICAgZmlsZVxuXHQgICAgICAgICAgICB9KVxuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdCAgICB2YWxpZGF0ZShjb21wb25lbnQpIHtcblx0ICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHQgICAgICAgICAgICBjaGlsZC52YWxpZGF0ZShjb21wb25lbnQpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgd2Fybl9vbl91bnVzZWRfc2VsZWN0b3JzKGNvbXBvbmVudCkge1xuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG5cdCAgICAgICAgICAgIGNoaWxkLndhcm5fb25fdW51c2VkX3NlbGVjdG9yKChzZWxlY3RvcikgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm4oc2VsZWN0b3Iubm9kZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBjc3MtdW51c2VkLXNlbGVjdG9yYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVW51c2VkIENTUyBzZWxlY3RvcmBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IHRlc3QgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuVEVTVDtcblxuXHRjbGFzcyBBYnN0cmFjdEJsb2NrIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICB9XG5cdCAgICB3YXJuX2lmX2VtcHR5X2Jsb2NrKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5jaGlsZHJlbiB8fCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDEpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bMF07XG5cdCAgICAgICAgaWYgKCFjaGlsZCB8fCAoY2hpbGQudHlwZSA9PT0gJ1RleHQnICYmICEvW14gXFxyXFxuXFxmXFx2XFx0XS8udGVzdChjaGlsZC5kYXRhKSkpIHtcblx0ICAgICAgICAgICAgdGhpcy5jb21wb25lbnQud2Fybih0aGlzLCB7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiAnZW1wdHktYmxvY2snLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0VtcHR5IGJsb2NrJ1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBQZW5kaW5nQmxvY2sgZXh0ZW5kcyBBYnN0cmFjdEJsb2NrIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIGlmICghaW5mby5za2lwKSB7XG5cdCAgICAgICAgICAgIHRoaXMud2Fybl9pZl9lbXB0eV9ibG9jaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIFRoZW5CbG9jayBleHRlbmRzIEFic3RyYWN0QmxvY2sge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGUuY2hpbGQoKTtcblx0ICAgICAgICBpZiAocGFyZW50LnRoZW5fbm9kZSkge1xuXHQgICAgICAgICAgICBwYXJlbnQudGhlbl9jb250ZXh0cy5mb3JFYWNoKGNvbnRleHQgPT4ge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zY29wZS5hZGQoY29udGV4dC5rZXkubmFtZSwgcGFyZW50LmV4cHJlc3Npb24uZGVwZW5kZW5jaWVzLCB0aGlzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBtYXBfY2hpbGRyZW4oY29tcG9uZW50LCBwYXJlbnQsIHRoaXMuc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIGlmICghaW5mby5za2lwKSB7XG5cdCAgICAgICAgICAgIHRoaXMud2Fybl9pZl9lbXB0eV9ibG9jaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIENhdGNoQmxvY2sgZXh0ZW5kcyBBYnN0cmFjdEJsb2NrIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlLmNoaWxkKCk7XG5cdCAgICAgICAgaWYgKHBhcmVudC5jYXRjaF9ub2RlKSB7XG5cdCAgICAgICAgICAgIHBhcmVudC5jYXRjaF9jb250ZXh0cy5mb3JFYWNoKGNvbnRleHQgPT4ge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zY29wZS5hZGQoY29udGV4dC5rZXkubmFtZSwgcGFyZW50LmV4cHJlc3Npb24uZGVwZW5kZW5jaWVzLCB0aGlzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBtYXBfY2hpbGRyZW4oY29tcG9uZW50LCBwYXJlbnQsIHRoaXMuc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIGlmICghaW5mby5za2lwKSB7XG5cdCAgICAgICAgICAgIHRoaXMud2Fybl9pZl9lbXB0eV9ibG9jaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVucGFja19kZXN0cnVjdHVyaW5nKGNvbnRleHRzLCBub2RlLCBtb2RpZmllcikge1xuXHQgICAgaWYgKCFub2RlKVxuXHQgICAgICAgIHJldHVybjtcblx0ICAgIGlmIChub2RlLnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHQgICAgICAgIGNvbnRleHRzLnB1c2goe1xuXHQgICAgICAgICAgICBrZXk6IG5vZGUsXG5cdCAgICAgICAgICAgIG1vZGlmaWVyXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdSZXN0RWxlbWVudCcpIHtcblx0ICAgICAgICBjb250ZXh0cy5wdXNoKHtcblx0ICAgICAgICAgICAga2V5OiBub2RlLmFyZ3VtZW50LFxuXHQgICAgICAgICAgICBtb2RpZmllclxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAnQXJyYXlQYXR0ZXJuJykge1xuXHQgICAgICAgIG5vZGUuZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xuXHQgICAgICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdSZXN0RWxlbWVudCcpIHtcblx0ICAgICAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKGNvbnRleHRzLCBlbGVtZW50LCBub2RlID0+IHggYCR7bW9kaWZpZXIobm9kZSl9LnNsaWNlKCR7aX0pYCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdBc3NpZ25tZW50UGF0dGVybicpIHtcblx0ICAgICAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKGNvbnRleHRzLCBlbGVtZW50LmxlZnQsIG5vZGUgPT4geCBgJHttb2RpZmllcihub2RlKX1bJHtpfV0gIT09IHVuZGVmaW5lZCA/ICR7bW9kaWZpZXIobm9kZSl9WyR7aX1dIDogJHtlbGVtZW50LnJpZ2h0fWApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdW5wYWNrX2Rlc3RydWN0dXJpbmcoY29udGV4dHMsIGVsZW1lbnQsIG5vZGUgPT4geCBgJHttb2RpZmllcihub2RlKX1bJHtpfV1gKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAnT2JqZWN0UGF0dGVybicpIHtcblx0ICAgICAgICBjb25zdCB1c2VkX3Byb3BlcnRpZXMgPSBbXTtcblx0ICAgICAgICBub2RlLnByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcblx0ICAgICAgICAgICAgaWYgKHByb3BlcnR5LnR5cGUgPT09ICdSZXN0RWxlbWVudCcpIHtcblx0ICAgICAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKGNvbnRleHRzLCBwcm9wZXJ0eS5hcmd1bWVudCwgbm9kZSA9PiB4IGBAb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcygke21vZGlmaWVyKG5vZGUpfSwgWyR7dXNlZF9wcm9wZXJ0aWVzfV0pYCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wZXJ0eS5rZXk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnR5LnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgdXNlZF9wcm9wZXJ0aWVzLnB1c2goeCBgXCIke2tleS5uYW1lfVwiYCk7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRQYXR0ZXJuJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKGNvbnRleHRzLCB2YWx1ZS5sZWZ0LCBub2RlID0+IHggYCR7bW9kaWZpZXIobm9kZSl9LiR7a2V5Lm5hbWV9ICE9PSB1bmRlZmluZWQgPyAke21vZGlmaWVyKG5vZGUpfS4ke2tleS5uYW1lfSA6ICR7dmFsdWUucmlnaHR9YCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB1bnBhY2tfZGVzdHJ1Y3R1cmluZyhjb250ZXh0cywgdmFsdWUsIG5vZGUgPT4geCBgJHttb2RpZmllcihub2RlKX0uJHtrZXkubmFtZX1gKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgQXdhaXRCbG9jayQxIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gbmV3IEV4cHJlc3Npb24oY29tcG9uZW50LCB0aGlzLCBzY29wZSwgaW5mby5leHByZXNzaW9uKTtcblx0ICAgICAgICB0aGlzLnRoZW5fbm9kZSA9IGluZm8udmFsdWU7XG5cdCAgICAgICAgdGhpcy5jYXRjaF9ub2RlID0gaW5mby5lcnJvcjtcblx0ICAgICAgICBpZiAodGhpcy50aGVuX25vZGUpIHtcblx0ICAgICAgICAgICAgdGhpcy50aGVuX2NvbnRleHRzID0gW107XG5cdCAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKHRoaXMudGhlbl9jb250ZXh0cywgaW5mby52YWx1ZSwgbm9kZSA9PiBub2RlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY2F0Y2hfbm9kZSkge1xuXHQgICAgICAgICAgICB0aGlzLmNhdGNoX2NvbnRleHRzID0gW107XG5cdCAgICAgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKHRoaXMuY2F0Y2hfY29udGV4dHMsIGluZm8uZXJyb3IsIG5vZGUgPT4gbm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMucGVuZGluZyA9IG5ldyBQZW5kaW5nQmxvY2soY29tcG9uZW50LCB0aGlzLCBzY29wZSwgaW5mby5wZW5kaW5nKTtcblx0ICAgICAgICB0aGlzLnRoZW4gPSBuZXcgVGhlbkJsb2NrKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIGluZm8udGhlbik7XG5cdCAgICAgICAgdGhpcy5jYXRjaCA9IG5ldyBDYXRjaEJsb2NrKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIGluZm8uY2F0Y2gpO1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgRXZlbnRIYW5kbGVyIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCB0ZW1wbGF0ZV9zY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCB0ZW1wbGF0ZV9zY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy51c2VzX2NvbnRleHQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmNhbl9tYWtlX3Bhc3NpdmUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLm5hbWUgPSBpbmZvLm5hbWU7XG5cdCAgICAgICAgdGhpcy5tb2RpZmllcnMgPSBuZXcgU2V0KGluZm8ubW9kaWZpZXJzKTtcblx0ICAgICAgICBpZiAoaW5mby5leHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IG5ldyBFeHByZXNzaW9uKGNvbXBvbmVudCwgdGhpcywgdGVtcGxhdGVfc2NvcGUsIGluZm8uZXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgIHRoaXMudXNlc19jb250ZXh0ID0gdGhpcy5leHByZXNzaW9uLnVzZXNfY29udGV4dDtcblx0ICAgICAgICAgICAgaWYgKC9GdW5jdGlvbkV4cHJlc3Npb24vLnRlc3QoaW5mby5leHByZXNzaW9uLnR5cGUpICYmIGluZm8uZXhwcmVzc2lvbi5wYXJhbXMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBUT0RPIG1ha2UgdGhpcyBkZXRlY3Rpb24gbW9yZSBhY2N1cmF0ZSDigJQgaWYgYGV2ZW50LnByZXZlbnREZWZhdWx0YCBpc24ndCBjYWxsZWQsIGFuZFxuXHQgICAgICAgICAgICAgICAgLy8gYGV2ZW50YCBpcyBwYXNzZWQgdG8gYW5vdGhlciBmdW5jdGlvbiwgd2UgY2FuIG1ha2UgaXQgcGFzc2l2ZVxuXHQgICAgICAgICAgICAgICAgdGhpcy5jYW5fbWFrZV9wYXNzaXZlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChpbmZvLmV4cHJlc3Npb24udHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdCAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IGNvbXBvbmVudC5ub2RlX2Zvcl9kZWNsYXJhdGlvbi5nZXQoaW5mby5leHByZXNzaW9uLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHsuLi59YCwgd2Ugd2FudCB0aGUgW2Fycm93XSBmdW5jdGlvbiBleHByZXNzaW9uIG5vZGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRvciA9IG5vZGUuZGVjbGFyYXRpb25zLmZpbmQoZCA9PiBkLmlkLm5hbWUgPT09IGluZm8uZXhwcmVzc2lvbi5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGRlY2xhcmF0b3IgJiYgZGVjbGFyYXRvci5pbml0O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSAmJiAobm9kZS50eXBlID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyB8fCBub2RlLnR5cGUgPT09ICdBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbicpICYmIG5vZGUucGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbl9tYWtlX3Bhc3NpdmUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5oYW5kbGVyX25hbWUgPSBjb21wb25lbnQuZ2V0X3VuaXF1ZV9uYW1lKGAke3Nhbml0aXplKHRoaXMubmFtZSl9X2hhbmRsZXJgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBnZXQgcmVhc3NpZ25lZCgpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuZXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmV4cHJlc3Npb24ubm9kZTtcblx0ICAgICAgICBpZiAoL0Z1bmN0aW9uRXhwcmVzc2lvbi8udGVzdChub2RlLnR5cGUpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5keW5hbWljX2RlcGVuZGVuY2llcygpLmxlbmd0aCA+IDA7XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBCb2R5IGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuXHQgICAgICAgIGluZm8uYXR0cmlidXRlcy5mb3JFYWNoKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnRXZlbnRIYW5kbGVyJykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKG5ldyBFdmVudEhhbmRsZXIoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdH1cblxuXHRjb25zdCBwYXR0ZXJuID0gL15cXHMqc3ZlbHRlLWlnbm9yZVxccysoW1xcc1xcU10rKVxccyokL207XG5cdGNsYXNzIENvbW1lbnQkMiBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIHRoaXMuZGF0YSA9IGluZm8uZGF0YTtcblx0ICAgICAgICBjb25zdCBtYXRjaCA9IHBhdHRlcm4uZXhlYyh0aGlzLmRhdGEpO1xuXHQgICAgICAgIHRoaXMuaWdub3JlcyA9IG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQoL1teXFxTXS8pLm1hcCh4ID0+IHgudHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIEVsc2VCbG9jayBleHRlbmRzIEFic3RyYWN0QmxvY2sge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLmNoaWxkcmVuID0gbWFwX2NoaWxkcmVuKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIHRoaXMud2Fybl9pZl9lbXB0eV9ibG9jaygpO1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgRWFjaEJsb2NrJDEgZXh0ZW5kcyBBYnN0cmFjdEJsb2NrIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5oYXNfYmluZGluZyA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaGFzX2luZGV4X2JpbmRpbmcgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pO1xuXHQgICAgICAgIHRoaXMuY29udGV4dCA9IGluZm8uY29udGV4dC5uYW1lIHx8ICdlYWNoJzsgLy8gVE9ETyB0aGlzIGlzIHVzZWQgdG8gZmFjaWxpdGF0ZSBiaW5kaW5nOyBjdXJyZW50bHkgZmFpbHMgd2l0aCBkZXN0cnVjdHVyaW5nXG5cdCAgICAgICAgdGhpcy5jb250ZXh0X25vZGUgPSBpbmZvLmNvbnRleHQ7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IGluZm8uaW5kZXg7XG5cdCAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlLmNoaWxkKCk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuXHQgICAgICAgIHVucGFja19kZXN0cnVjdHVyaW5nKHRoaXMuY29udGV4dHMsIGluZm8uY29udGV4dCwgbm9kZSA9PiBub2RlKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goY29udGV4dCA9PiB7XG5cdCAgICAgICAgICAgIHRoaXMuc2NvcGUuYWRkKGNvbnRleHQua2V5Lm5hbWUsIHRoaXMuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMsIHRoaXMpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICh0aGlzLmluZGV4KSB7XG5cdCAgICAgICAgICAgIC8vIGluZGV4IGNhbiBvbmx5IGNoYW5nZSBpZiB0aGlzIGlzIGEga2V5ZWQgZWFjaCBibG9ja1xuXHQgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBpbmZvLmtleSA/IHRoaXMuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMgOiBuZXcgU2V0KFtdKTtcblx0ICAgICAgICAgICAgdGhpcy5zY29wZS5hZGQodGhpcy5pbmRleCwgZGVwZW5kZW5jaWVzLCB0aGlzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5rZXkgPSBpbmZvLmtleVxuXHQgICAgICAgICAgICA/IG5ldyBFeHByZXNzaW9uKGNvbXBvbmVudCwgdGhpcywgdGhpcy5zY29wZSwgaW5mby5rZXkpXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgICAgICB0aGlzLmhhc19hbmltYXRpb24gPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmNoaWxkcmVuID0gbWFwX2NoaWxkcmVuKGNvbXBvbmVudCwgdGhpcywgdGhpcy5zY29wZSwgaW5mby5jaGlsZHJlbik7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzX2FuaW1hdGlvbikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggIT09IDEpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbi5maW5kKGNoaWxkID0+ICEhY2hpbGQuYW5pbWF0aW9uKTtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihjaGlsZC5hbmltYXRpb24sIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1hbmltYXRpb25gLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBbiBlbGVtZW50IHRoYXQgdXNlIHRoZSBhbmltYXRlIGRpcmVjdGl2ZSBtdXN0IGJlIHRoZSBzb2xlIGNoaWxkIG9mIGEga2V5ZWQgZWFjaCBibG9ja2Bcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMud2Fybl9pZl9lbXB0eV9ibG9jaygpO1xuXHQgICAgICAgIHRoaXMuZWxzZSA9IGluZm8uZWxzZVxuXHQgICAgICAgICAgICA/IG5ldyBFbHNlQmxvY2soY29tcG9uZW50LCB0aGlzLCB0aGlzLnNjb3BlLCBpbmZvLmVsc2UpXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIEF0dHJpYnV0ZSBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcblx0ICAgICAgICBpZiAoaW5mby50eXBlID09PSAnU3ByZWFkJykge1xuXHQgICAgICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xuXHQgICAgICAgICAgICB0aGlzLmlzX3NwcmVhZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuaXNfdHJ1ZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IHRoaXMuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXM7XG5cdCAgICAgICAgICAgIHRoaXMuY2h1bmtzID0gbnVsbDtcblx0ICAgICAgICAgICAgdGhpcy5pc19zdGF0aWMgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMubmFtZSA9IGluZm8ubmFtZTtcblx0ICAgICAgICAgICAgdGhpcy5pc190cnVlID0gaW5mby52YWx1ZSA9PT0gdHJ1ZTtcblx0ICAgICAgICAgICAgdGhpcy5pc19zdGF0aWMgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICAgICAgdGhpcy5jaHVua3MgPSB0aGlzLmlzX3RydWVcblx0ICAgICAgICAgICAgICAgID8gW11cblx0ICAgICAgICAgICAgICAgIDogaW5mby52YWx1ZS5tYXAobm9kZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ1RleHQnKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzX3N0YXRpYyA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBub2RlLmV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICAgICAgICAgIGFkZF90b19zZXQodGhpcy5kZXBlbmRlbmNpZXMsIGV4cHJlc3Npb24uZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGdldF9kZXBlbmRlbmNpZXMoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNfc3ByZWFkKVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uLmR5bmFtaWNfZGVwZW5kZW5jaWVzKCk7XG5cdCAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMuY2h1bmtzLmZvckVhY2goY2h1bmsgPT4ge1xuXHQgICAgICAgICAgICBpZiAoY2h1bmsudHlwZSA9PT0gJ0V4cHJlc3Npb24nKSB7XG5cdCAgICAgICAgICAgICAgICBhZGRfdG9fc2V0KGRlcGVuZGVuY2llcywgY2h1bmsuZHluYW1pY19kZXBlbmRlbmNpZXMoKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShkZXBlbmRlbmNpZXMpO1xuXHQgICAgfVxuXHQgICAgZ2V0X3ZhbHVlKGJsb2NrKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNfdHJ1ZSlcblx0ICAgICAgICAgICAgcmV0dXJuIHggYHRydWVgO1xuXHQgICAgICAgIGlmICh0aGlzLmNodW5rcy5sZW5ndGggPT09IDApXG5cdCAgICAgICAgICAgIHJldHVybiB4IGBcIlwiYDtcblx0ICAgICAgICBpZiAodGhpcy5jaHVua3MubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNodW5rc1swXS50eXBlID09PSAnVGV4dCdcblx0ICAgICAgICAgICAgICAgID8gc3RyaW5nX2xpdGVyYWwodGhpcy5jaHVua3NbMF0uZGF0YSlcblx0ICAgICAgICAgICAgICAgIDogdGhpcy5jaHVua3NbMF0ubWFuaXB1bGF0ZShibG9jayk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGxldCBleHByZXNzaW9uID0gdGhpcy5jaHVua3Ncblx0ICAgICAgICAgICAgLm1hcChjaHVuayA9PiBjaHVuay50eXBlID09PSAnVGV4dCcgPyBzdHJpbmdfbGl0ZXJhbChjaHVuay5kYXRhKSA6IGNodW5rLm1hbmlwdWxhdGUoYmxvY2spKVxuXHQgICAgICAgICAgICAucmVkdWNlKChsaHMsIHJocykgPT4geCBgJHtsaHN9ICsgJHtyaHN9YCk7XG5cdCAgICAgICAgaWYgKHRoaXMuY2h1bmtzWzBdLnR5cGUgIT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICBleHByZXNzaW9uID0geCBgXCJcIiArICR7ZXhwcmVzc2lvbn1gO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcblx0ICAgIH1cblx0ICAgIGdldF9zdGF0aWNfdmFsdWUoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNfc3ByZWFkIHx8IHRoaXMuZGVwZW5kZW5jaWVzLnNpemUgPiAwKVxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcy5pc190cnVlXG5cdCAgICAgICAgICAgID8gdHJ1ZVxuXHQgICAgICAgICAgICA6IHRoaXMuY2h1bmtzWzBdXG5cdCAgICAgICAgICAgICAgICAvLyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IHdoZW4gYGlzX3N0YXRpYyA9IHRydWVgXG5cdCAgICAgICAgICAgICAgICA/IHRoaXMuY2h1bmtzWzBdLmRhdGFcblx0ICAgICAgICAgICAgICAgIDogJyc7XG5cdCAgICB9XG5cdCAgICBzaG91bGRfY2FjaGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaXNfc3RhdGljXG5cdCAgICAgICAgICAgID8gZmFsc2Vcblx0ICAgICAgICAgICAgOiB0aGlzLmNodW5rcy5sZW5ndGggPT09IDFcblx0ICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogcHJvYmFibHkgZXJyb3Jcblx0ICAgICAgICAgICAgICAgID8gdGhpcy5jaHVua3NbMF0ubm9kZS50eXBlICE9PSAnSWRlbnRpZmllcicgfHwgdGhpcy5zY29wZS5uYW1lcy5oYXModGhpcy5jaHVua3NbMF0ubm9kZS5uYW1lKVxuXHQgICAgICAgICAgICAgICAgOiB0cnVlO1xuXHQgICAgfVxuXHR9XG5cblx0Ly8gVE9ETyB0aGlzIHNob3VsZCBsaXZlIGluIGEgc3BlY2lmaWMgYmluZGluZ1xuXHRjb25zdCByZWFkX29ubHlfbWVkaWFfYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuXHQgICAgJ2R1cmF0aW9uJyxcblx0ICAgICdidWZmZXJlZCcsXG5cdCAgICAnc2Vla2FibGUnLFxuXHQgICAgJ3BsYXllZCcsXG5cdCAgICAnc2Vla2luZycsXG5cdCAgICAnZW5kZWQnLFxuXHQgICAgJ3ZpZGVvSGVpZ2h0Jyxcblx0ICAgICd2aWRlb1dpZHRoJ1xuXHRdKTtcblx0Y2xhc3MgQmluZGluZyBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIGlmIChpbmZvLmV4cHJlc3Npb24udHlwZSAhPT0gJ0lkZW50aWZpZXInICYmIGluZm8uZXhwcmVzc2lvbi50eXBlICE9PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcblx0ICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGluZm8sIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWRpcmVjdGl2ZS12YWx1ZScsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQ2FuIG9ubHkgYmluZCB0byBhbiBpZGVudGlmaWVyIChlLmcuIGBmb29gKSBvciBhIG1lbWJlciBleHByZXNzaW9uIChlLmcuIGBmb28uYmFyYCBvciBgZm9vW2Jhel1gKSdcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMubmFtZSA9IGluZm8ubmFtZTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pO1xuXHQgICAgICAgIHRoaXMucmF3X2V4cHJlc3Npb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGluZm8uZXhwcmVzc2lvbikpO1xuXHQgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZ2V0X29iamVjdCh0aGlzLmV4cHJlc3Npb24ubm9kZSk7XG5cdCAgICAgICAgdGhpcy5pc19jb250ZXh0dWFsID0gQXJyYXkuZnJvbSh0aGlzLmV4cHJlc3Npb24ucmVmZXJlbmNlcykuc29tZShuYW1lID0+IHNjb3BlLm5hbWVzLmhhcyhuYW1lKSk7XG5cdCAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHRyYWNrIHRoaXMgYXMgYSBtdXRhYmxlIHJlZlxuXHQgICAgICAgIGlmIChzY29wZS5pc19sZXQobmFtZSkpIHtcblx0ICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWJpbmRpbmcnLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Nhbm5vdCBiaW5kIHRvIGEgdmFyaWFibGUgZGVjbGFyZWQgd2l0aCB0aGUgbGV0OiBkaXJlY3RpdmUnXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChzY29wZS5uYW1lcy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgaWYgKHNjb3BlLmlzX2F3YWl0KG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IodGhpcywge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWJpbmRpbmcnLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDYW5ub3QgYmluZCB0byBhIHZhcmlhYmxlIGRlY2xhcmVkIHdpdGggeyNhd2FpdCAuLi4gdGhlbn0gb3IgezpjYXRjaH0gYmxvY2tzJ1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgc2NvcGUuZGVwZW5kZW5jaWVzX2Zvcl9uYW1lLmdldChuYW1lKS5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5tdXRhdGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgaWYgKCF2YXJpYWJsZSB8fCB2YXJpYWJsZS5nbG9iYWwpXG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IodGhpcy5leHByZXNzaW9uLm5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiAnYmluZGluZy11bmRlY2xhcmVkJyxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtuYW1lfSBpcyBub3QgZGVjbGFyZWRgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgdmFyaWFibGVbdGhpcy5leHByZXNzaW9uLm5vZGUudHlwZSA9PT0gJ01lbWJlckV4cHJlc3Npb24nID8gJ211dGF0ZWQnIDogJ3JlYXNzaWduZWQnXSA9IHRydWU7XG5cdCAgICAgICAgICAgIGlmIChpbmZvLmV4cHJlc3Npb24udHlwZSA9PT0gJ0lkZW50aWZpZXInICYmICF2YXJpYWJsZS53cml0YWJsZSlcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcih0aGlzLmV4cHJlc3Npb24ubm9kZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWJpbmRpbmcnLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDYW5ub3QgYmluZCB0byBhIHZhcmlhYmxlIHdoaWNoIGlzIG5vdCB3cml0YWJsZScsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgdHlwZSA9IHBhcmVudC5nZXRfc3RhdGljX2F0dHJpYnV0ZV92YWx1ZSgndHlwZScpO1xuXHQgICAgICAgIHRoaXMuaXNfcmVhZG9ubHkgPSAoZGltZW5zaW9ucy50ZXN0KHRoaXMubmFtZSkgfHxcblx0ICAgICAgICAgICAgKHBhcmVudC5pc19tZWRpYV9ub2RlICYmIHBhcmVudC5pc19tZWRpYV9ub2RlKCkgJiYgcmVhZF9vbmx5X21lZGlhX2F0dHJpYnV0ZXMuaGFzKHRoaXMubmFtZSkpIHx8XG5cdCAgICAgICAgICAgIChwYXJlbnQubmFtZSA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnZmlsZScpIC8vIFRPRE8gb3RoZXJzP1xuXHQgICAgICAgICk7XG5cdCAgICB9XG5cdCAgICBpc19yZWFkb25seV9tZWRpYV9hdHRyaWJ1dGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlYWRfb25seV9tZWRpYV9hdHRyaWJ1dGVzLmhhcyh0aGlzLm5hbWUpO1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgVHJhbnNpdGlvbiBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIGNvbXBvbmVudC53YXJuX2lmX3VuZGVmaW5lZChpbmZvLm5hbWUsIGluZm8sIHNjb3BlKTtcblx0ICAgICAgICB0aGlzLm5hbWUgPSBpbmZvLm5hbWU7XG5cdCAgICAgICAgY29tcG9uZW50LmFkZF9yZWZlcmVuY2UoaW5mby5uYW1lLnNwbGl0KCcuJylbMF0pO1xuXHQgICAgICAgIHRoaXMuZGlyZWN0aXZlID0gaW5mby5pbnRybyAmJiBpbmZvLm91dHJvID8gJ3RyYW5zaXRpb24nIDogaW5mby5pbnRybyA/ICdpbicgOiAnb3V0Jztcblx0ICAgICAgICB0aGlzLmlzX2xvY2FsID0gaW5mby5tb2RpZmllcnMuaW5jbHVkZXMoJ2xvY2FsJyk7XG5cdCAgICAgICAgaWYgKChpbmZvLmludHJvICYmIHBhcmVudC5pbnRybykgfHwgKGluZm8ub3V0cm8gJiYgcGFyZW50Lm91dHJvKSkge1xuXHQgICAgICAgICAgICBjb25zdCBwYXJlbnRfdHJhbnNpdGlvbiA9IChwYXJlbnQuaW50cm8gfHwgcGFyZW50Lm91dHJvKTtcblx0ICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuZGlyZWN0aXZlID09PSBwYXJlbnRfdHJhbnNpdGlvbi5kaXJlY3RpdmVcblx0ICAgICAgICAgICAgICAgID8gYEFuIGVsZW1lbnQgY2FuIG9ubHkgaGF2ZSBvbmUgJyR7dGhpcy5kaXJlY3RpdmV9JyBkaXJlY3RpdmVgXG5cdCAgICAgICAgICAgICAgICA6IGBBbiBlbGVtZW50IGNhbm5vdCBoYXZlIGJvdGggJHtkZXNjcmliZShwYXJlbnRfdHJhbnNpdGlvbil9IGRpcmVjdGl2ZSBhbmQgJHtkZXNjcmliZSh0aGlzKX0gZGlyZWN0aXZlYDtcblx0ICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGluZm8sIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBkdXBsaWNhdGUtdHJhbnNpdGlvbmAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBpbmZvLmV4cHJlc3Npb25cblx0ICAgICAgICAgICAgPyBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24sIHRydWUpXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBkZXNjcmliZSh0cmFuc2l0aW9uKSB7XG5cdCAgICByZXR1cm4gdHJhbnNpdGlvbi5kaXJlY3RpdmUgPT09ICd0cmFuc2l0aW9uJ1xuXHQgICAgICAgID8gYGEgJ3RyYW5zaXRpb24nYFxuXHQgICAgICAgIDogYGFuICcke3RyYW5zaXRpb24uZGlyZWN0aXZlfSdgO1xuXHR9XG5cblx0Y2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgY29tcG9uZW50Lndhcm5faWZfdW5kZWZpbmVkKGluZm8ubmFtZSwgaW5mbywgc2NvcGUpO1xuXHQgICAgICAgIHRoaXMubmFtZSA9IGluZm8ubmFtZTtcblx0ICAgICAgICBjb21wb25lbnQuYWRkX3JlZmVyZW5jZShpbmZvLm5hbWUuc3BsaXQoJy4nKVswXSk7XG5cdCAgICAgICAgaWYgKHBhcmVudC5hbmltYXRpb24pIHtcblx0ICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBkdXBsaWNhdGUtYW5pbWF0aW9uYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBbiBlbGVtZW50IGNhbiBvbmx5IGhhdmUgb25lICdhbmltYXRlJyBkaXJlY3RpdmVgXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBibG9jayA9IHBhcmVudC5wYXJlbnQ7XG5cdCAgICAgICAgaWYgKCFibG9jayB8fCBibG9jay50eXBlICE9PSAnRWFjaEJsb2NrJyB8fCAhYmxvY2sua2V5KSB7XG5cdCAgICAgICAgICAgIC8vIFRPRE8gY2FuIHdlIHJlbGF4IHRoZSAnaW1tZWRpYXRlIGNoaWxkJyBydWxlP1xuXHQgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IodGhpcywge1xuXHQgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYW5pbWF0aW9uYCxcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBbiBlbGVtZW50IHRoYXQgdXNlIHRoZSBhbmltYXRlIGRpcmVjdGl2ZSBtdXN0IGJlIHRoZSBpbW1lZGlhdGUgY2hpbGQgb2YgYSBrZXllZCBlYWNoIGJsb2NrYFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYmxvY2suaGFzX2FuaW1hdGlvbiA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gaW5mby5leHByZXNzaW9uXG5cdCAgICAgICAgICAgID8gbmV3IEV4cHJlc3Npb24oY29tcG9uZW50LCB0aGlzLCBzY29wZSwgaW5mby5leHByZXNzaW9uLCB0cnVlKVxuXHQgICAgICAgICAgICA6IG51bGw7XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBDbGFzcyBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIHRoaXMubmFtZSA9IGluZm8ubmFtZTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBpbmZvLmV4cHJlc3Npb25cblx0ICAgICAgICAgICAgPyBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgIH1cblx0fVxuXG5cdC8vIFdoaXRlc3BhY2UgaW5zaWRlIG9uZSBvZiB0aGVzZSBlbGVtZW50cyB3aWxsIG5vdCByZXN1bHQgaW5cblx0Ly8gYSB3aGl0ZXNwYWNlIG5vZGUgYmVpbmcgY3JlYXRlZCBpbiBhbnkgY2lyY3Vtc3RhbmNlcy4gKFRoaXNcblx0Ly8gbGlzdCBpcyBhbG1vc3QgY2VydGFpbmx5IHZlcnkgaW5jb21wbGV0ZSlcblx0Y29uc3QgZWxlbWVudHNfd2l0aG91dF90ZXh0ID0gbmV3IFNldChbXG5cdCAgICAnYXVkaW8nLFxuXHQgICAgJ2RhdGFsaXN0Jyxcblx0ICAgICdkbCcsXG5cdCAgICAnb3B0Z3JvdXAnLFxuXHQgICAgJ3NlbGVjdCcsXG5cdCAgICAndmlkZW8nLFxuXHRdKTtcblx0Y2xhc3MgVGV4dCQxIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5kYXRhID0gaW5mby5kYXRhO1xuXHQgICAgICAgIHRoaXMuc3ludGhldGljID0gaW5mby5zeW50aGV0aWMgfHwgZmFsc2U7XG5cdCAgICB9XG5cdCAgICBzaG91bGRfc2tpcCgpIHtcblx0ICAgICAgICBpZiAoL1xcUy8udGVzdCh0aGlzLmRhdGEpKVxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgY29uc3QgcGFyZW50X2VsZW1lbnQgPSB0aGlzLmZpbmRfbmVhcmVzdCgvKD86RWxlbWVudHxJbmxpbmVDb21wb25lbnR8SGVhZCkvKTtcblx0ICAgICAgICBpZiAoIXBhcmVudF9lbGVtZW50KVxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgaWYgKHBhcmVudF9lbGVtZW50LnR5cGUgPT09ICdIZWFkJylcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgaWYgKHBhcmVudF9lbGVtZW50LnR5cGUgPT09ICdJbmxpbmVDb21wb25lbnQnKVxuXHQgICAgICAgICAgICByZXR1cm4gcGFyZW50X2VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIHRoaXMgPT09IHBhcmVudF9lbGVtZW50LmNoaWxkcmVuWzBdO1xuXHQgICAgICAgIC8vIHN2ZyBuYW1lc3BhY2UgZXhjbHVzaW9uc1xuXHQgICAgICAgIGlmICgvc3ZnJC8udGVzdChwYXJlbnRfZWxlbWVudC5uYW1lc3BhY2UpKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByZXYgJiYgdGhpcy5wcmV2LnR5cGUgPT09IFwiRWxlbWVudFwiICYmIHRoaXMucHJldi5uYW1lID09PSBcInRzcGFuXCIpXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBwYXJlbnRfZWxlbWVudC5uYW1lc3BhY2UgfHwgZWxlbWVudHNfd2l0aG91dF90ZXh0LmhhcyhwYXJlbnRfZWxlbWVudC5uYW1lKTtcblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IGFwcGxpY2FibGUgPSBuZXcgU2V0KFsnSWRlbnRpZmllcicsICdPYmplY3RFeHByZXNzaW9uJywgJ0FycmF5RXhwcmVzc2lvbicsICdQcm9wZXJ0eSddKTtcblx0Y2xhc3MgTGV0IGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5uYW1lcyA9IFtdO1xuXHQgICAgICAgIHRoaXMubmFtZSA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBpbmZvLm5hbWUgfTtcblx0ICAgICAgICBjb25zdCB7IG5hbWVzIH0gPSB0aGlzO1xuXHQgICAgICAgIGlmIChpbmZvLmV4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGluZm8uZXhwcmVzc2lvbjtcblx0ICAgICAgICAgICAgd2FsayhpbmZvLmV4cHJlc3Npb24sIHtcblx0ICAgICAgICAgICAgICAgIGVudGVyKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWFwcGxpY2FibGUuaGFzKG5vZGUudHlwZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKG5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWxldCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgbGV0IGRpcmVjdGl2ZSB2YWx1ZSBtdXN0IGJlIGFuIGlkZW50aWZpZXIgb3IgYW4gb2JqZWN0L2FycmF5IHBhdHRlcm5gXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChub2RlLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAvLyBzbGlnaHRseSB1bmZvcnR1bmF0ZSBoYWNrXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0FycmF5RXhwcmVzc2lvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlID0gJ0FycmF5UGF0dGVybic7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdPYmplY3RFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSAnT2JqZWN0UGF0dGVybic7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIG5hbWVzLnB1c2godGhpcy5uYW1lLm5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IHN2ZyQxID0gL14oPzphbHRHbHlwaHxhbHRHbHlwaERlZnxhbHRHbHlwaEl0ZW18YW5pbWF0ZXxhbmltYXRlQ29sb3J8YW5pbWF0ZU1vdGlvbnxhbmltYXRlVHJhbnNmb3JtfGNpcmNsZXxjbGlwUGF0aHxjb2xvci1wcm9maWxlfGN1cnNvcnxkZWZzfGRlc2N8ZGlzY2FyZHxlbGxpcHNlfGZlQmxlbmR8ZmVDb2xvck1hdHJpeHxmZUNvbXBvbmVudFRyYW5zZmVyfGZlQ29tcG9zaXRlfGZlQ29udm9sdmVNYXRyaXh8ZmVEaWZmdXNlTGlnaHRpbmd8ZmVEaXNwbGFjZW1lbnRNYXB8ZmVEaXN0YW50TGlnaHR8ZmVEcm9wU2hhZG93fGZlRmxvb2R8ZmVGdW5jQXxmZUZ1bmNCfGZlRnVuY0d8ZmVGdW5jUnxmZUdhdXNzaWFuQmx1cnxmZUltYWdlfGZlTWVyZ2V8ZmVNZXJnZU5vZGV8ZmVNb3JwaG9sb2d5fGZlT2Zmc2V0fGZlUG9pbnRMaWdodHxmZVNwZWN1bGFyTGlnaHRpbmd8ZmVTcG90TGlnaHR8ZmVUaWxlfGZlVHVyYnVsZW5jZXxmaWx0ZXJ8Zm9udHxmb250LWZhY2V8Zm9udC1mYWNlLWZvcm1hdHxmb250LWZhY2UtbmFtZXxmb250LWZhY2Utc3JjfGZvbnQtZmFjZS11cml8Zm9yZWlnbk9iamVjdHxnfGdseXBofGdseXBoUmVmfGhhdGNofGhhdGNocGF0aHxoa2VybnxpbWFnZXxsaW5lfGxpbmVhckdyYWRpZW50fG1hcmtlcnxtYXNrfG1lc2h8bWVzaGdyYWRpZW50fG1lc2hwYXRjaHxtZXNocm93fG1ldGFkYXRhfG1pc3NpbmctZ2x5cGh8bXBhdGh8cGF0aHxwYXR0ZXJufHBvbHlnb258cG9seWxpbmV8cmFkaWFsR3JhZGllbnR8cmVjdHxzZXR8c29saWRjb2xvcnxzdG9wfHN2Z3xzd2l0Y2h8c3ltYm9sfHRleHR8dGV4dFBhdGh8dHJlZnx0c3Bhbnx1bmtub3dufHVzZXx2aWV3fHZrZXJuKSQvO1xuXHRjb25zdCBhcmlhX2F0dHJpYnV0ZXMgPSAnYWN0aXZlZGVzY2VuZGFudCBhdG9taWMgYXV0b2NvbXBsZXRlIGJ1c3kgY2hlY2tlZCBjb2xjb3VudCBjb2xpbmRleCBjb2xzcGFuIGNvbnRyb2xzIGN1cnJlbnQgZGVzY3JpYmVkYnkgZGV0YWlscyBkaXNhYmxlZCBkcm9wZWZmZWN0IGVycm9ybWVzc2FnZSBleHBhbmRlZCBmbG93dG8gZ3JhYmJlZCBoYXNwb3B1cCBoaWRkZW4gaW52YWxpZCBrZXlzaG9ydGN1dHMgbGFiZWwgbGFiZWxsZWRieSBsZXZlbCBsaXZlIG1vZGFsIG11bHRpbGluZSBtdWx0aXNlbGVjdGFibGUgb3JpZW50YXRpb24gb3ducyBwbGFjZWhvbGRlciBwb3NpbnNldCBwcmVzc2VkIHJlYWRvbmx5IHJlbGV2YW50IHJlcXVpcmVkIHJvbGVkZXNjcmlwdGlvbiByb3djb3VudCByb3dpbmRleCByb3dzcGFuIHNlbGVjdGVkIHNldHNpemUgc29ydCB2YWx1ZW1heCB2YWx1ZW1pbiB2YWx1ZW5vdyB2YWx1ZXRleHQnLnNwbGl0KCcgJyk7XG5cdGNvbnN0IGFyaWFfYXR0cmlidXRlX3NldCA9IG5ldyBTZXQoYXJpYV9hdHRyaWJ1dGVzKTtcblx0Y29uc3QgYXJpYV9yb2xlcyA9ICdhbGVydCBhbGVydGRpYWxvZyBhcHBsaWNhdGlvbiBhcnRpY2xlIGJhbm5lciBibG9ja3F1b3RlIGJ1dHRvbiBjYXB0aW9uIGNlbGwgY2hlY2tib3ggY29kZSBjb2x1bW5oZWFkZXIgY29tYm9ib3ggY29tcGxlbWVudGFyeSBjb250ZW50aW5mbyBkZWZpbml0aW9uIGRlbGV0aW9uIGRpYWxvZyBkaXJlY3RvcnkgZG9jdW1lbnQgZW1waGFzaXMgZmVlZCBmaWd1cmUgZm9ybSBnZW5lcmljIGdyaWQgZ3JpZGNlbGwgZ3JvdXAgaGVhZGluZyBpbWcgbGluayBsaXN0IGxpc3Rib3ggbGlzdGl0ZW0gbG9nIG1haW4gbWFycXVlZSBtYXRoIG1ldGVyIG1lbnUgbWVudWJhciBtZW51aXRlbSBtZW51aXRlbWNoZWNrYm94IG1lbnVpdGVtcmFkaW8gbmF2aWdhdGlvbiBub25lIG5vdGUgb3B0aW9uIHBhcmFncmFwaCBwcmVzZW50YXRpb24gcHJvZ3Jlc3NiYXIgcmFkaW8gcmFkaW9ncm91cCByZWdpb24gcm93IHJvd2dyb3VwIHJvd2hlYWRlciBzY3JvbGxiYXIgc2VhcmNoIHNlYXJjaGJveCBzZXBhcmF0b3Igc2xpZGVyIHNwaW5idXR0b24gc3RhdHVzIHN0cm9uZyBzdWJzY3JpcHQgc3VwZXJzY3JpcHQgc3dpdGNoIHRhYiB0YWJsZSB0YWJsaXN0IHRhYnBhbmVsIHRlcm0gdGV4dGJveCB0aW1lIHRpbWVyIHRvb2xiYXIgdG9vbHRpcCB0cmVlIHRyZWVncmlkIHRyZWVpdGVtJy5zcGxpdCgnICcpO1xuXHRjb25zdCBhcmlhX3JvbGVfc2V0ID0gbmV3IFNldChhcmlhX3JvbGVzKTtcblx0Y29uc3QgYTExeV9yZXF1aXJlZF9hdHRyaWJ1dGVzID0ge1xuXHQgICAgYTogWydocmVmJ10sXG5cdCAgICBhcmVhOiBbJ2FsdCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieSddLFxuXHQgICAgLy8gaHRtbC1oYXMtbGFuZ1xuXHQgICAgaHRtbDogWydsYW5nJ10sXG5cdCAgICAvLyBpZnJhbWUtaGFzLXRpdGxlXG5cdCAgICBpZnJhbWU6IFsndGl0bGUnXSxcblx0ICAgIGltZzogWydhbHQnXSxcblx0ICAgIG9iamVjdDogWyd0aXRsZScsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieSddXG5cdH07XG5cdGNvbnN0IGExMXlfZGlzdHJhY3RpbmdfZWxlbWVudHMgPSBuZXcgU2V0KFtcblx0ICAgICdibGluaycsXG5cdCAgICAnbWFycXVlZSdcblx0XSk7XG5cdGNvbnN0IGExMXlfcmVxdWlyZWRfY29udGVudCA9IG5ldyBTZXQoW1xuXHQgICAgLy8gYW5jaG9yLWhhcy1jb250ZW50XG5cdCAgICAnYScsXG5cdCAgICAvLyBoZWFkaW5nLWhhcy1jb250ZW50XG5cdCAgICAnaDEnLFxuXHQgICAgJ2gyJyxcblx0ICAgICdoMycsXG5cdCAgICAnaDQnLFxuXHQgICAgJ2g1Jyxcblx0ICAgICdoNidcblx0XSk7XG5cdGNvbnN0IGExMXlfbm9fb25jaGFuZ2UgPSBuZXcgU2V0KFtcblx0ICAgICdzZWxlY3QnLFxuXHQgICAgJ29wdGlvbidcblx0XSk7XG5cdGNvbnN0IGExMXlfbGFiZWxhYmxlID0gbmV3IFNldChbXG5cdCAgICBcImJ1dHRvblwiLFxuXHQgICAgXCJpbnB1dFwiLFxuXHQgICAgXCJrZXlnZW5cIixcblx0ICAgIFwibWV0ZXJcIixcblx0ICAgIFwib3V0cHV0XCIsXG5cdCAgICBcInByb2dyZXNzXCIsXG5cdCAgICBcInNlbGVjdFwiLFxuXHQgICAgXCJ0ZXh0YXJlYVwiXG5cdF0pO1xuXHRjb25zdCBpbnZpc2libGVfZWxlbWVudHMgPSBuZXcgU2V0KFsnbWV0YScsICdodG1sJywgJ3NjcmlwdCcsICdzdHlsZSddKTtcblx0Y29uc3QgdmFsaWRfbW9kaWZpZXJzID0gbmV3IFNldChbXG5cdCAgICAncHJldmVudERlZmF1bHQnLFxuXHQgICAgJ3N0b3BQcm9wYWdhdGlvbicsXG5cdCAgICAnY2FwdHVyZScsXG5cdCAgICAnb25jZScsXG5cdCAgICAncGFzc2l2ZScsXG5cdCAgICAnc2VsZidcblx0XSk7XG5cdGNvbnN0IHBhc3NpdmVfZXZlbnRzID0gbmV3IFNldChbXG5cdCAgICAnd2hlZWwnLFxuXHQgICAgJ3RvdWNoc3RhcnQnLFxuXHQgICAgJ3RvdWNobW92ZScsXG5cdCAgICAndG91Y2hlbmQnLFxuXHQgICAgJ3RvdWNoY2FuY2VsJ1xuXHRdKTtcblx0ZnVuY3Rpb24gZ2V0X25hbWVzcGFjZShwYXJlbnQsIGVsZW1lbnQsIGV4cGxpY2l0X25hbWVzcGFjZSkge1xuXHQgICAgY29uc3QgcGFyZW50X2VsZW1lbnQgPSBwYXJlbnQuZmluZF9uZWFyZXN0KC9eRWxlbWVudC8pO1xuXHQgICAgaWYgKCFwYXJlbnRfZWxlbWVudCkge1xuXHQgICAgICAgIHJldHVybiBleHBsaWNpdF9uYW1lc3BhY2UgfHwgKHN2ZyQxLnRlc3QoZWxlbWVudC5uYW1lKVxuXHQgICAgICAgICAgICA/IG5hbWVzcGFjZXMuc3ZnXG5cdCAgICAgICAgICAgIDogbnVsbCk7XG5cdCAgICB9XG5cdCAgICBpZiAoc3ZnJDEudGVzdChlbGVtZW50Lm5hbWUudG9Mb3dlckNhc2UoKSkpXG5cdCAgICAgICAgcmV0dXJuIG5hbWVzcGFjZXMuc3ZnO1xuXHQgICAgaWYgKHBhcmVudF9lbGVtZW50Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZvcmVpZ25vYmplY3QnKVxuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgcmV0dXJuIHBhcmVudF9lbGVtZW50Lm5hbWVzcGFjZTtcblx0fVxuXHRjbGFzcyBFbGVtZW50JDEgZXh0ZW5kcyBOb2RlJDEge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBbXTtcblx0ICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXTtcblx0ICAgICAgICB0aGlzLmJpbmRpbmdzID0gW107XG5cdCAgICAgICAgdGhpcy5jbGFzc2VzID0gW107XG5cdCAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuXHQgICAgICAgIHRoaXMubGV0cyA9IFtdO1xuXHQgICAgICAgIHRoaXMuaW50cm8gPSBudWxsO1xuXHQgICAgICAgIHRoaXMub3V0cm8gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm5hbWUgPSBpbmZvLm5hbWU7XG5cdCAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBnZXRfbmFtZXNwYWNlKHBhcmVudCwgdGhpcywgY29tcG9uZW50Lm5hbWVzcGFjZSk7XG5cdCAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gJ3RleHRhcmVhJykge1xuXHQgICAgICAgICAgICBpZiAoaW5mby5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZV9hdHRyaWJ1dGUgPSBpbmZvLmF0dHJpYnV0ZXMuZmluZChub2RlID0+IG5vZGUubmFtZSA9PT0gJ3ZhbHVlJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFsdWVfYXR0cmlidXRlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKHZhbHVlX2F0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgdGV4dGFyZWEtZHVwbGljYXRlLXZhbHVlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEEgPHRleHRhcmVhPiBjYW4gaGF2ZSBlaXRoZXIgYSB2YWx1ZSBhdHRyaWJ1dGUgb3IgKGVxdWl2YWxlbnRseSkgY2hpbGQgY29udGVudCwgYnV0IG5vdCBib3RoYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlZ3JlZ2lvdXMgaGFjaywgYnV0IGl0J3MgdGhlIGVhc2llc3Qgd2F5IHRvIGdldCA8dGV4dGFyZWE+XG5cdCAgICAgICAgICAgICAgICAvLyBjaGlsZHJlbiB0cmVhdGVkIHRoZSBzYW1lIHdheSBhcyBhIHZhbHVlIGF0dHJpYnV0ZVxuXHQgICAgICAgICAgICAgICAgaW5mby5hdHRyaWJ1dGVzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBdHRyaWJ1dGUnLFxuXHQgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd2YWx1ZScsXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluZm8uY2hpbGRyZW5cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgaW5mby5jaGlsZHJlbiA9IFtdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICdvcHRpb24nKSB7XG5cdCAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSDigJQgdHJlYXQgdGhlc2UgdGhlIHNhbWUgd2F5OlxuXHQgICAgICAgICAgICAvLyAgIDxvcHRpb24+e2Zvb308L29wdGlvbj5cblx0ICAgICAgICAgICAgLy8gICA8b3B0aW9uIHZhbHVlPXtmb299Pntmb299PC9vcHRpb24+XG5cdCAgICAgICAgICAgIGNvbnN0IHZhbHVlX2F0dHJpYnV0ZSA9IGluZm8uYXR0cmlidXRlcy5maW5kKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUubmFtZSA9PT0gJ3ZhbHVlJyk7XG5cdCAgICAgICAgICAgIGlmICghdmFsdWVfYXR0cmlidXRlKSB7XG5cdCAgICAgICAgICAgICAgICBpbmZvLmF0dHJpYnV0ZXMucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0F0dHJpYnV0ZScsXG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3ZhbHVlJyxcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5mby5jaGlsZHJlbixcblx0ICAgICAgICAgICAgICAgICAgICBzeW50aGV0aWM6IHRydWVcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGhhc19sZXQgPSBpbmZvLmF0dHJpYnV0ZXMuc29tZShub2RlID0+IG5vZGUudHlwZSA9PT0gJ0xldCcpO1xuXHQgICAgICAgIGlmIChoYXNfbGV0KSB7XG5cdCAgICAgICAgICAgIHNjb3BlID0gc2NvcGUuY2hpbGQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gQmluZGluZyByZWxpZXMgb24gQXR0cmlidXRlLCBkZWZlciBpdHMgZXZhbHVhdGlvblxuXHQgICAgICAgIGNvbnN0IG9yZGVyID0gWydCaW5kaW5nJ107IC8vIGV2ZXJ5dGhpbmcgZWxzZSBpcyAtMVxuXHQgICAgICAgIGluZm8uYXR0cmlidXRlcy5zb3J0KChhLCBiKSA9PiBvcmRlci5pbmRleE9mKGEudHlwZSkgLSBvcmRlci5pbmRleE9mKGIudHlwZSkpO1xuXHQgICAgICAgIGluZm8uYXR0cmlidXRlcy5mb3JFYWNoKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnQWN0aW9uJzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMucHVzaChuZXcgQWN0aW9uKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0F0dHJpYnV0ZSc6XG5cdCAgICAgICAgICAgICAgICBjYXNlICdTcHJlYWQnOlxuXHQgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZVxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWUgPT09ICd4bWxucycpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlID0gbm9kZS52YWx1ZVswXS5kYXRhO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGUoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnQmluZGluZyc6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0NsYXNzJzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzZXMucHVzaChuZXcgQ2xhc3MoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnRXZlbnRIYW5kbGVyJzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2gobmV3IEV2ZW50SGFuZGxlcihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBub2RlKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdMZXQnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IG5ldyBMZXQoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXRzLnB1c2gobCk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbmV3IFNldChbbC5uYW1lLm5hbWVdKTtcblx0ICAgICAgICAgICAgICAgICAgICBsLm5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFkZChuYW1lLCBkZXBlbmRlbmNpZXMsIHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY2FzZSAnVHJhbnNpdGlvbic6XG5cdCAgICAgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uID0gbmV3IFRyYW5zaXRpb24oY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmludHJvKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRybyA9IHRyYW5zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm91dHJvKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRybyA9IHRyYW5zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0FuaW1hdGlvbic6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBpbXBsZW1lbnRlZDogJHtub2RlLnR5cGV9YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHRoaXMsIHRoaXMuc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIHRoaXMudmFsaWRhdGUoKTtcblx0ICAgICAgICBjb21wb25lbnQuc3R5bGVzaGVldC5hcHBseSh0aGlzKTtcblx0ICAgIH1cblx0ICAgIHZhbGlkYXRlKCkge1xuXHQgICAgICAgIGlmIChhMTF5X2Rpc3RyYWN0aW5nX2VsZW1lbnRzLmhhcyh0aGlzLm5hbWUpKSB7XG5cdCAgICAgICAgICAgIC8vIG5vLWRpc3RyYWN0aW5nLWVsZW1lbnRzXG5cdCAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Lndhcm4odGhpcywge1xuXHQgICAgICAgICAgICAgICAgY29kZTogYGExMXktZGlzdHJhY3RpbmctZWxlbWVudHNgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IEF2b2lkIDwke3RoaXMubmFtZX0+IGVsZW1lbnRzYFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gJ2ZpZ2NhcHRpb24nKSB7XG5cdCAgICAgICAgICAgIGxldCB7IHBhcmVudCB9ID0gdGhpcztcblx0ICAgICAgICAgICAgbGV0IGlzX2ZpZ3VyZV9wYXJlbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5uYW1lID09PSAnZmlndXJlJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlzX2ZpZ3VyZV9wYXJlbnQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnRWxlbWVudCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCFpc19maWd1cmVfcGFyZW50KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC53YXJuKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1zdHJ1Y3R1cmVgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiA8ZmlnY2FwdGlvbj4gbXVzdCBiZSBhbiBpbW1lZGlhdGUgY2hpbGQgb2YgPGZpZ3VyZT5gXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnZmlndXJlJykge1xuXHQgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uZmlsdGVyKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0NvbW1lbnQnKVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdUZXh0Jylcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gL1xcUy8udGVzdChub2RlLmRhdGEpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNoaWxkcmVuLmZpbmRJbmRleChjaGlsZCA9PiBjaGlsZC5uYW1lID09PSAnZmlnY2FwdGlvbicpO1xuXHQgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xICYmIChpbmRleCAhPT0gMCAmJiBpbmRleCAhPT0gY2hpbGRyZW4ubGVuZ3RoIC0gMSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Lndhcm4oY2hpbGRyZW5baW5kZXhdLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYGExMXktc3RydWN0dXJlYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQTExeTogPGZpZ2NhcHRpb24+IG11c3QgYmUgZmlyc3Qgb3IgbGFzdCBjaGlsZCBvZiA8ZmlndXJlPmBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMudmFsaWRhdGVfYXR0cmlidXRlcygpO1xuXHQgICAgICAgIHRoaXMudmFsaWRhdGVfc3BlY2lhbF9jYXNlcygpO1xuXHQgICAgICAgIHRoaXMudmFsaWRhdGVfYmluZGluZ3MoKTtcblx0ICAgICAgICB0aGlzLnZhbGlkYXRlX2NvbnRlbnQoKTtcblx0ICAgICAgICB0aGlzLnZhbGlkYXRlX2V2ZW50X2hhbmRsZXJzKCk7XG5cdCAgICB9XG5cdCAgICB2YWxpZGF0ZV9hdHRyaWJ1dGVzKCkge1xuXHQgICAgICAgIGNvbnN0IHsgY29tcG9uZW50LCBwYXJlbnQgfSA9IHRoaXM7XG5cdCAgICAgICAgY29uc3QgYXR0cmlidXRlX21hcCA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYXR0cmlidXRlLmlzX3NwcmVhZClcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgIC8vIGFyaWEtcHJvcHNcblx0ICAgICAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnYXJpYS0nKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGludmlzaWJsZV9lbGVtZW50cy5oYXModGhpcy5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIGFyaWEtdW5zdXBwb3J0ZWQtZWxlbWVudHNcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGExMXktYXJpYS1hdHRyaWJ1dGVzYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IDwke3RoaXMubmFtZX0+IHNob3VsZCBub3QgaGF2ZSBhcmlhLSogYXR0cmlidXRlc2Bcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBuYW1lLnNsaWNlKDUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKCFhcmlhX2F0dHJpYnV0ZV9zZXQuaGFzKHR5cGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBmdXp6eW1hdGNoKHR5cGUsIGFyaWFfYXR0cmlidXRlcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgQTExeTogVW5rbm93biBhcmlhIGF0dHJpYnV0ZSAnYXJpYS0ke3R5cGV9J2A7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGAgKGRpZCB5b3UgbWVhbiAnJHttYXRjaH0nPylgO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS11bmtub3duLWFyaWEtYXR0cmlidXRlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdhcmlhLWhpZGRlbicgJiYgL15oWzEtNl0kLy50ZXN0KHRoaXMubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGExMXktaGlkZGVuYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IDwke3RoaXMubmFtZX0+IGVsZW1lbnQgc2hvdWxkIG5vdCBiZSBoaWRkZW5gXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gYXJpYS1yb2xlXG5cdCAgICAgICAgICAgIGlmIChuYW1lID09PSAncm9sZScpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpbnZpc2libGVfZWxlbWVudHMuaGFzKHRoaXMubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBhcmlhLXVuc3VwcG9ydGVkLWVsZW1lbnRzXG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm4oYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LW1pc3BsYWNlZC1yb2xlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IDwke3RoaXMubmFtZX0+IHNob3VsZCBub3QgaGF2ZSByb2xlIGF0dHJpYnV0ZWBcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlLmdldF9zdGF0aWNfdmFsdWUoKTtcblx0ICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhYXJpYV9yb2xlX3NldC5oYXModmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gZnV6enltYXRjaCh2YWx1ZSwgYXJpYV9yb2xlcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgQTExeTogVW5rbm93biByb2xlICcke3ZhbHVlfSdgO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaClcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBgIChkaWQgeW91IG1lYW4gJyR7bWF0Y2h9Jz8pYDtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGExMXktdW5rbm93bi1yb2xlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vIG5vLWFjY2Vzcy1rZXlcblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdhY2Nlc3NrZXknKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1hY2Nlc3NrZXlgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiBBdm9pZCB1c2luZyBhY2Nlc3NrZXlgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBuby1hdXRvZm9jdXNcblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdhdXRvZm9jdXMnKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1hdXRvZm9jdXNgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiBBdm9pZCB1c2luZyBhdXRvZm9jdXNgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBzY29wZVxuXHQgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3Njb3BlJyAmJiB0aGlzLm5hbWUgIT09ICd0aCcpIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LW1pc3BsYWNlZC1zY29wZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IFRoZSBzY29wZSBhdHRyaWJ1dGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aXRoIDx0aD4gZWxlbWVudHNgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyB0YWJpbmRleC1uby1wb3NpdGl2ZVxuXHQgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3RhYmluZGV4Jykge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGUuZ2V0X3N0YXRpY192YWx1ZSgpO1xuXHQgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvIGlzIHRhYmluZGV4PXRydWUgY29ycmVjdCBjYXNlP1xuXHQgICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkgJiYgK3ZhbHVlID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1wb3NpdGl2ZS10YWJpbmRleGAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiBhdm9pZCB0YWJpbmRleCB2YWx1ZXMgYWJvdmUgemVyb2Bcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoLyheWzAtOS0uXSl8W1xcXiRAJSYjPyF8KClbXFxde31eKit+O10vLnRlc3QobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaWxsZWdhbC1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnJHtuYW1lfScgaXMgbm90IGEgdmFsaWQgYXR0cmlidXRlIG5hbWVgLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdzbG90Jykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGUuaXNfc3RhdGljKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1zbG90LWF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBzbG90IGF0dHJpYnV0ZSBjYW5ub3QgaGF2ZSBhIGR5bmFtaWMgdmFsdWVgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LnNsb3Rfb3V0bGV0cy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBkdXBsaWNhdGUtc2xvdC1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRHVwbGljYXRlICcke25hbWV9JyBzbG90YFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zbG90X291dGxldHMuYWRkKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKCEocGFyZW50LnR5cGUgPT09ICdJbmxpbmVDb21wb25lbnQnIHx8IHdpdGhpbl9jdXN0b21fZWxlbWVudChwYXJlbnQpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtc2xvdHRlZC1jb250ZW50YCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEVsZW1lbnQgd2l0aCBhIHNsb3Q9Jy4uLicgYXR0cmlidXRlIG11c3QgYmUgYSBjaGlsZCBvZiBhIGNvbXBvbmVudCBvciBhIGRlc2NlbmRhbnQgb2YgYSBjdXN0b20gZWxlbWVudGAsXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpcycpIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdhdm9pZC1pcycsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRoZSAnaXMnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkIGNyb3NzLWJyb3dzZXIgYW5kIHNob3VsZCBiZSBhdm9pZGVkYFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYXR0cmlidXRlX21hcC5zZXQoYXR0cmlidXRlLm5hbWUsIGF0dHJpYnV0ZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICB2YWxpZGF0ZV9zcGVjaWFsX2Nhc2VzKCkge1xuXHQgICAgICAgIGNvbnN0IHsgY29tcG9uZW50LCBhdHRyaWJ1dGVzLCBoYW5kbGVycyB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCBhdHRyaWJ1dGVfbWFwID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIGNvbnN0IGhhbmRsZXJzX21hcCA9IG5ldyBNYXAoKTtcblx0ICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goYXR0cmlidXRlID0+IChhdHRyaWJ1dGVfbWFwLnNldChhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlKSkpO1xuXHQgICAgICAgIGhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiAoaGFuZGxlcnNfbWFwLnNldChoYW5kbGVyLm5hbWUsIGhhbmRsZXIpKSk7XG5cdCAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gJ2EnKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGhyZWZfYXR0cmlidXRlID0gYXR0cmlidXRlX21hcC5nZXQoJ2hyZWYnKSB8fCBhdHRyaWJ1dGVfbWFwLmdldCgneGxpbms6aHJlZicpO1xuXHQgICAgICAgICAgICBjb25zdCBpZF9hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVfbWFwLmdldCgnaWQnKTtcblx0ICAgICAgICAgICAgY29uc3QgbmFtZV9hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVfbWFwLmdldCgnbmFtZScpO1xuXHQgICAgICAgICAgICBpZiAoaHJlZl9hdHRyaWJ1dGUpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZfdmFsdWUgPSBocmVmX2F0dHJpYnV0ZS5nZXRfc3RhdGljX3ZhbHVlKCk7XG5cdCAgICAgICAgICAgICAgICBpZiAoaHJlZl92YWx1ZSA9PT0gJycgfHwgaHJlZl92YWx1ZSA9PT0gJyMnIHx8IC9eXFxXKmphdmFzY3JpcHQ6L2kudGVzdChocmVmX3ZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGhyZWZfYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LWludmFsaWQtYXR0cmlidXRlYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6ICcke2hyZWZfdmFsdWV9JyBpcyBub3QgYSB2YWxpZCAke2hyZWZfYXR0cmlidXRlLm5hbWV9IGF0dHJpYnV0ZWBcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGlkX2F0dHJpYnV0ZV92YWxpZCA9IGlkX2F0dHJpYnV0ZSAmJiBpZF9hdHRyaWJ1dGUuZ2V0X3N0YXRpY192YWx1ZSgpICE9PSAnJztcblx0ICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVfYXR0cmlidXRlX3ZhbGlkID0gbmFtZV9hdHRyaWJ1dGUgJiYgbmFtZV9hdHRyaWJ1dGUuZ2V0X3N0YXRpY192YWx1ZSgpICE9PSAnJztcblx0ICAgICAgICAgICAgICAgIGlmICghaWRfYXR0cmlidXRlX3ZhbGlkICYmICFuYW1lX2F0dHJpYnV0ZV92YWxpZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGExMXktbWlzc2luZy1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQTExeTogPGE+IGVsZW1lbnQgc2hvdWxkIGhhdmUgYW4gaHJlZiBhdHRyaWJ1dGVgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkX2F0dHJpYnV0ZXMgPSBhMTF5X3JlcXVpcmVkX2F0dHJpYnV0ZXNbdGhpcy5uYW1lXTtcblx0ICAgICAgICAgICAgaWYgKHJlcXVpcmVkX2F0dHJpYnV0ZXMpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGhhc19hdHRyaWJ1dGUgPSByZXF1aXJlZF9hdHRyaWJ1dGVzLnNvbWUobmFtZSA9PiBhdHRyaWJ1dGVfbWFwLmhhcyhuYW1lKSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWhhc19hdHRyaWJ1dGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzaG91bGRfaGF2ZV9hdHRyaWJ1dGUodGhpcywgcmVxdWlyZWRfYXR0cmlidXRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gJ2lucHV0Jykge1xuXHQgICAgICAgICAgICBjb25zdCB0eXBlID0gYXR0cmlidXRlX21hcC5nZXQoJ3R5cGUnKTtcblx0ICAgICAgICAgICAgaWYgKHR5cGUgJiYgdHlwZS5nZXRfc3RhdGljX3ZhbHVlKCkgPT09ICdpbWFnZScpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkX2F0dHJpYnV0ZXMgPSBbJ2FsdCcsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGFiZWxsZWRieSddO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgaGFzX2F0dHJpYnV0ZSA9IHJlcXVpcmVkX2F0dHJpYnV0ZXMuc29tZShuYW1lID0+IGF0dHJpYnV0ZV9tYXAuaGFzKG5hbWUpKTtcblx0ICAgICAgICAgICAgICAgIGlmICghaGFzX2F0dHJpYnV0ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNob3VsZF9oYXZlX2F0dHJpYnV0ZSh0aGlzLCByZXF1aXJlZF9hdHRyaWJ1dGVzLCAnaW5wdXQgdHlwZT1cImltYWdlXCInKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnaW1nJykge1xuXHQgICAgICAgICAgICBjb25zdCBhbHRfYXR0cmlidXRlID0gYXR0cmlidXRlX21hcC5nZXQoJ2FsdCcpO1xuXHQgICAgICAgICAgICBjb25zdCBhcmlhX2hpZGRlbl9hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVfbWFwLmdldCgnYXJpYS1oaWRkZW4nKTtcblx0ICAgICAgICAgICAgY29uc3QgYXJpYV9oaWRkZW5fZXhpc3QgPSBhcmlhX2hpZGRlbl9hdHRyaWJ1dGUgJiYgYXJpYV9oaWRkZW5fYXR0cmlidXRlLmdldF9zdGF0aWNfdmFsdWUoKTtcblx0ICAgICAgICAgICAgaWYgKGFsdF9hdHRyaWJ1dGUgJiYgIWFyaWFfaGlkZGVuX2V4aXN0KSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBhbHRfdmFsdWUgPSBhbHRfYXR0cmlidXRlLmdldF9zdGF0aWNfdmFsdWUoKTtcblx0ICAgICAgICAgICAgICAgIGlmICgvXFxiKGltYWdlfHBpY3R1cmV8cGhvdG8pXFxiL2kudGVzdChhbHRfdmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm4odGhpcywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1pbWctcmVkdW5kYW50LWFsdGAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiBTY3JlZW5yZWFkZXJzIGFscmVhZHkgYW5ub3VuY2UgPGltZz4gZWxlbWVudHMgYXMgYW4gaW1hZ2UuYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICdsYWJlbCcpIHtcblx0ICAgICAgICAgICAgY29uc3QgaGFzX2lucHV0X2NoaWxkID0gdGhpcy5jaGlsZHJlbi5zb21lKGkgPT4gKGkgaW5zdGFuY2VvZiBFbGVtZW50JDEgJiYgYTExeV9sYWJlbGFibGUuaGFzKGkubmFtZSkpKTtcblx0ICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVfbWFwLmhhcygnZm9yJykgJiYgIWhhc19pbnB1dF9jaGlsZCkge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm4odGhpcywge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LWxhYmVsLWhhcy1hc3NvY2lhdGVkLWNvbnRyb2xgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBMTF5OiBBIGZvcm0gbGFiZWwgbXVzdCBiZSBhc3NvY2lhdGVkIHdpdGggYSBjb250cm9sLmBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmlzX21lZGlhX25vZGUoKSkge1xuXHQgICAgICAgICAgICBpZiAoYXR0cmlidXRlX21hcC5oYXMoJ211dGVkJykpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBsZXQgaGFzX2NhcHRpb247XG5cdCAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5jaGlsZHJlbi5maW5kKChpKSA9PiBpLm5hbWUgPT09ICd0cmFjaycpO1xuXHQgICAgICAgICAgICBpZiAodHJhY2spIHtcblx0ICAgICAgICAgICAgICAgIGhhc19jYXB0aW9uID0gdHJhY2suYXR0cmlidXRlcy5maW5kKGEgPT4gYS5uYW1lID09PSAna2luZCcgJiYgYS5nZXRfc3RhdGljX3ZhbHVlKCkgPT09ICdjYXB0aW9ucycpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghaGFzX2NhcHRpb24pIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgYTExeS1tZWRpYS1oYXMtY2FwdGlvbmAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEExMXk6IE1lZGlhIGVsZW1lbnRzIG11c3QgaGF2ZSBhIDx0cmFjayBraW5kPVwiY2FwdGlvbnNcIj5gXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoYTExeV9ub19vbmNoYW5nZS5oYXModGhpcy5uYW1lKSkge1xuXHQgICAgICAgICAgICBpZiAoaGFuZGxlcnNfbWFwLmhhcygnY2hhbmdlJykgJiYgIWhhbmRsZXJzX21hcC5oYXMoJ2JsdXInKSkge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50Lndhcm4odGhpcywge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LW5vLW9uY2hhbmdlYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQTExeTogb246Ymx1ciBtdXN0IGJlIHVzZWQgaW5zdGVhZCBvZiBvbjpjaGFuZ2UsIHVubGVzcyBhYnNvbHV0ZWx5IG5lY2Vzc2FyeSBhbmQgaXQgY2F1c2VzIG5vIG5lZ2F0aXZlIGNvbnNlcXVlbmNlcyBmb3Iga2V5Ym9hcmQgb25seSBvciBzY3JlZW4gcmVhZGVyIHVzZXJzLmBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgdmFsaWRhdGVfYmluZGluZ3MoKSB7XG5cdCAgICAgICAgY29uc3QgeyBjb21wb25lbnQgfSA9IHRoaXM7XG5cdCAgICAgICAgY29uc3QgY2hlY2tfdHlwZV9hdHRyaWJ1dGUgPSAoKSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5maW5kKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5uYW1lID09PSAndHlwZScpO1xuXHQgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZSlcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZS5pc19zdGF0aWMpIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC10eXBlYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJ3R5cGUnIGF0dHJpYnV0ZSBjYW5ub3QgYmUgZHluYW1pYyBpZiBpbnB1dCB1c2VzIHR3by13YXkgYmluZGluZ2Bcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlLmdldF9zdGF0aWNfdmFsdWUoKTtcblx0ICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYG1pc3NpbmctdHlwZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCd0eXBlJyBhdHRyaWJ1dGUgbXVzdCBiZSBzcGVjaWZpZWRgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goYmluZGluZyA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gYmluZGluZztcblx0ICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd2YWx1ZScpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgIT09ICdpbnB1dCcgJiZcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgIT09ICd0ZXh0YXJlYScgJiZcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgIT09ICdzZWxlY3QnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAndmFsdWUnIGlzIG5vdCBhIHZhbGlkIGJpbmRpbmcgb24gPCR7dGhpcy5uYW1lfT4gZWxlbWVudHNgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnc2VsZWN0Jykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5maW5kKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5uYW1lID09PSAnbXVsdGlwbGUnKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlICYmICFhdHRyaWJ1dGUuaXNfc3RhdGljKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBkeW5hbWljLW11bHRpcGxlLWF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJ211bHRpcGxlJyBhdHRyaWJ1dGUgY2Fubm90IGJlIGR5bmFtaWMgaWYgc2VsZWN0IHVzZXMgdHdvLXdheSBiaW5kaW5nYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBjaGVja190eXBlX2F0dHJpYnV0ZSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdjaGVja2VkJyB8fCBuYW1lID09PSAnaW5kZXRlcm1pbmF0ZScpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgIT09ICdpbnB1dCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYmluZGluZywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1iaW5kaW5nYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCcke25hbWV9JyBpcyBub3QgYSB2YWxpZCBiaW5kaW5nIG9uIDwke3RoaXMubmFtZX0+IGVsZW1lbnRzYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGNoZWNrX3R5cGVfYXR0cmlidXRlKCk7XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2NoZWNrYm94Jykge1xuXHQgICAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gYCcke25hbWV9JyBiaW5kaW5nIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCI+YDtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3JhZGlvJylcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBgIOKAlCBmb3IgPGlucHV0IHR5cGU9XCJyYWRpb1wiPiwgdXNlICdncm91cCcgYmluZGluZ2A7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHsgY29kZTogYGludmFsaWQtYmluZGluZ2AsIG1lc3NhZ2UgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSAhPT0gJ2lucHV0Jykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihiaW5kaW5nLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWJpbmRpbmdgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJ2dyb3VwJyBpcyBub3QgYSB2YWxpZCBiaW5kaW5nIG9uIDwke3RoaXMubmFtZX0+IGVsZW1lbnRzYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGNoZWNrX3R5cGVfYXR0cmlidXRlKCk7XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2NoZWNrYm94JyAmJiB0eXBlICE9PSAncmFkaW8nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnZ3JvdXAnIGJpbmRpbmcgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIj4gb3IgPGlucHV0IHR5cGU9XCJyYWRpb1wiPmBcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSAnZmlsZXMnKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lICE9PSAnaW5wdXQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnZmlsZXMnIGlzIG5vdCBhIHZhbGlkIGJpbmRpbmcgb24gPCR7dGhpcy5uYW1lfT4gZWxlbWVudHNgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gY2hlY2tfdHlwZV9hdHRyaWJ1dGUoKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAnZmlsZScpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYmluZGluZywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1iaW5kaW5nYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCdmaWxlcycgYmluZGluZyBjYW4gb25seSBiZSB1c2VkIHdpdGggPGlucHV0IHR5cGU9XCJmaWxlXCI+YFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdvcGVuJykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSAhPT0gJ2RldGFpbHMnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnJHtuYW1lfScgYmluZGluZyBjYW4gb25seSBiZSB1c2VkIHdpdGggPGRldGFpbHM+YFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdjdXJyZW50VGltZScgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICdkdXJhdGlvbicgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICdwYXVzZWQnIHx8XG5cdCAgICAgICAgICAgICAgICBuYW1lID09PSAnYnVmZmVyZWQnIHx8XG5cdCAgICAgICAgICAgICAgICBuYW1lID09PSAnc2Vla2FibGUnIHx8XG5cdCAgICAgICAgICAgICAgICBuYW1lID09PSAncGxheWVkJyB8fFxuXHQgICAgICAgICAgICAgICAgbmFtZSA9PT0gJ3ZvbHVtZScgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICdtdXRlZCcgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICdwbGF5YmFja1JhdGUnIHx8XG5cdCAgICAgICAgICAgICAgICBuYW1lID09PSAnc2Vla2luZycgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICdlbmRlZCcpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgIT09ICdhdWRpbycgJiYgdGhpcy5uYW1lICE9PSAndmlkZW8nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnJHtuYW1lfScgYmluZGluZyBjYW4gb25seSBiZSB1c2VkIHdpdGggPGF1ZGlvPiBvciA8dmlkZW8+YFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICd2aWRlb0hlaWdodCcgfHxcblx0ICAgICAgICAgICAgICAgIG5hbWUgPT09ICd2aWRlb1dpZHRoJykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSAhPT0gJ3ZpZGVvJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihiaW5kaW5nLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWJpbmRpbmdgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJyR7bmFtZX0nIGJpbmRpbmcgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIDx2aWRlbz5gXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoZGltZW5zaW9ucy50ZXN0KG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnc3ZnJyAmJiAobmFtZSA9PT0gJ29mZnNldFdpZHRoJyB8fCBuYW1lID09PSAnb2Zmc2V0SGVpZ2h0JykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYmluZGluZywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAnaW52YWxpZC1iaW5kaW5nJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCcke2JpbmRpbmcubmFtZX0nIGlzIG5vdCBhIHZhbGlkIGJpbmRpbmcgb24gPHN2Zz4uIFVzZSAnJHtuYW1lLnJlcGxhY2UoJ29mZnNldCcsICdjbGllbnQnKX0nIGluc3RlYWRgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChzdmckMS50ZXN0KHRoaXMubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYmluZGluZywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAnaW52YWxpZC1iaW5kaW5nJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCcke2JpbmRpbmcubmFtZX0nIGlzIG5vdCBhIHZhbGlkIGJpbmRpbmcgb24gU1ZHIGVsZW1lbnRzYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNfdm9pZCh0aGlzLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGJpbmRpbmcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ2ludmFsaWQtYmluZGluZycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnJHtiaW5kaW5nLm5hbWV9JyBpcyBub3QgYSB2YWxpZCBiaW5kaW5nIG9uIHZvaWQgZWxlbWVudHMgbGlrZSA8JHt0aGlzLm5hbWV9Pi4gVXNlIGEgd3JhcHBlciBlbGVtZW50IGluc3RlYWRgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ3RleHRDb250ZW50JyB8fFxuXHQgICAgICAgICAgICAgICAgbmFtZSA9PT0gJ2lubmVySFRNTCcpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRlZGl0YWJsZSA9IHRoaXMuYXR0cmlidXRlcy5maW5kKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5uYW1lID09PSAnY29udGVudGVkaXRhYmxlJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnRlZGl0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihiaW5kaW5nLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBtaXNzaW5nLWNvbnRlbnRlZGl0YWJsZS1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJ2NvbnRlbnRlZGl0YWJsZScgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGZvciB0ZXh0Q29udGVudCBhbmQgaW5uZXJIVE1MIHR3by13YXkgYmluZGluZ3NgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChjb250ZW50ZWRpdGFibGUgJiYgIWNvbnRlbnRlZGl0YWJsZS5pc19zdGF0aWMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoY29udGVudGVkaXRhYmxlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBkeW5hbWljLWNvbnRlbnRlZGl0YWJsZS1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJ2NvbnRlbnRlZGl0YWJsZScgYXR0cmlidXRlIGNhbm5vdCBiZSBkeW5hbWljIGlmIGVsZW1lbnQgdXNlcyB0d28td2F5IGJpbmRpbmdgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ3RoaXMnKSB7XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYmluZGluZywge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWJpbmRpbmdgLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnJHtiaW5kaW5nLm5hbWV9JyBpcyBub3QgYSB2YWxpZCBiaW5kaW5nYFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHZhbGlkYXRlX2NvbnRlbnQoKSB7XG5cdCAgICAgICAgaWYgKCFhMTF5X3JlcXVpcmVkX2NvbnRlbnQuaGFzKHRoaXMubmFtZSkpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICBpZiAodGhpcy5iaW5kaW5nc1xuXHQgICAgICAgICAgICAuc29tZSgoYmluZGluZykgPT4gWyd0ZXh0Q29udGVudCcsICdpbm5lckhUTUwnXS5pbmNsdWRlcyhiaW5kaW5nLm5hbWUpKSlcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC53YXJuKHRoaXMsIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBhMTF5LW1pc3NpbmctY29udGVudGAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQTExeTogPCR7dGhpcy5uYW1lfT4gZWxlbWVudCBzaG91bGQgaGF2ZSBjaGlsZCBjb250ZW50YFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICB2YWxpZGF0ZV9ldmVudF9oYW5kbGVycygpIHtcblx0ICAgICAgICBjb25zdCB7IGNvbXBvbmVudCB9ID0gdGhpcztcblx0ICAgICAgICB0aGlzLmhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG5cdCAgICAgICAgICAgIGlmIChoYW5kbGVyLm1vZGlmaWVycy5oYXMoJ3Bhc3NpdmUnKSAmJiBoYW5kbGVyLm1vZGlmaWVycy5oYXMoJ3ByZXZlbnREZWZhdWx0JykpIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihoYW5kbGVyLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogJ2ludmFsaWQtZXZlbnQtbW9kaWZpZXInLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUaGUgJ3Bhc3NpdmUnIGFuZCAncHJldmVudERlZmF1bHQnIG1vZGlmaWVycyBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcmBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGhhbmRsZXIubW9kaWZpZXJzLmZvckVhY2gobW9kaWZpZXIgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKCF2YWxpZF9tb2RpZmllcnMuaGFzKG1vZGlmaWVyKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihoYW5kbGVyLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWV2ZW50LW1vZGlmaWVyJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFZhbGlkIGV2ZW50IG1vZGlmaWVycyBhcmUgJHtsaXN0JDEoQXJyYXkuZnJvbSh2YWxpZF9tb2RpZmllcnMpKX1gXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09ICdwYXNzaXZlJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwYXNzaXZlX2V2ZW50cy5oYXMoaGFuZGxlci5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5jYW5fbWFrZV9wYXNzaXZlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQud2FybihoYW5kbGVyLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ3JlZHVuZGFudC1ldmVudC1tb2RpZmllcicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRvdWNoIGV2ZW50IGhhbmRsZXJzIHRoYXQgZG9uJ3QgdXNlIHRoZSAnZXZlbnQnIG9iamVjdCBhcmUgcGFzc2l2ZSBieSBkZWZhdWx0YFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGhhbmRsZXIsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdyZWR1bmRhbnQtZXZlbnQtbW9kaWZpZXInLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRoZSBwYXNzaXZlIG1vZGlmaWVyIG9ubHkgd29ya3Mgd2l0aCB3aGVlbCBhbmQgdG91Y2ggZXZlbnRzYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5sZWdhY3kgJiYgKG1vZGlmaWVyID09PSAnb25jZScgfHwgbW9kaWZpZXIgPT09ICdwYXNzaXZlJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHRoaXMgY291bGQgYmUgc3VwcG9ydGVkLCBidXQgaXQgd291bGQgbmVlZCBhIGZldyBjaGFuZ2VzIHRvXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gaG93IGV2ZW50IGxpc3RlbmVycyB3b3JrXG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGhhbmRsZXIsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ2ludmFsaWQtZXZlbnQtbW9kaWZpZXInLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVGhlICcke21vZGlmaWVyfScgbW9kaWZpZXIgY2Fubm90IGJlIHVzZWQgaW4gbGVnYWN5IG1vZGVgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBpZiAocGFzc2l2ZV9ldmVudHMuaGFzKGhhbmRsZXIubmFtZSkgJiYgaGFuZGxlci5jYW5fbWFrZV9wYXNzaXZlICYmICFoYW5kbGVyLm1vZGlmaWVycy5oYXMoJ3ByZXZlbnREZWZhdWx0JykpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHRvdWNoL3doZWVsIGV2ZW50cyBzaG91bGQgYmUgcGFzc2l2ZSBieSBkZWZhdWx0XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVyLm1vZGlmaWVycy5hZGQoJ3Bhc3NpdmUnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgaXNfbWVkaWFfbm9kZSgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5uYW1lID09PSAnYXVkaW8nIHx8IHRoaXMubmFtZSA9PT0gJ3ZpZGVvJztcblx0ICAgIH1cblx0ICAgIGFkZF9jc3NfY2xhc3MoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5zb21lKGF0dHIgPT4gYXR0ci5pc19zcHJlYWQpKSB7XG5cdCAgICAgICAgICAgIHRoaXMubmVlZHNfbWFudWFsX3N0eWxlX3Njb3BpbmcgPSB0cnVlO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IHsgaWQgfSA9IHRoaXMuY29tcG9uZW50LnN0eWxlc2hlZXQ7XG5cdCAgICAgICAgY29uc3QgY2xhc3NfYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmZpbmQoYSA9PiBhLm5hbWUgPT09ICdjbGFzcycpO1xuXHQgICAgICAgIGlmIChjbGFzc19hdHRyaWJ1dGUgJiYgIWNsYXNzX2F0dHJpYnV0ZS5pc190cnVlKSB7XG5cdCAgICAgICAgICAgIGlmIChjbGFzc19hdHRyaWJ1dGUuY2h1bmtzLmxlbmd0aCA9PT0gMSAmJiBjbGFzc19hdHRyaWJ1dGUuY2h1bmtzWzBdLnR5cGUgPT09ICdUZXh0Jykge1xuXHQgICAgICAgICAgICAgICAgY2xhc3NfYXR0cmlidXRlLmNodW5rc1swXS5kYXRhICs9IGAgJHtpZH1gO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY2xhc3NfYXR0cmlidXRlLmNodW5rcy5wdXNoKG5ldyBUZXh0JDEodGhpcy5jb21wb25lbnQsIHRoaXMsIHRoaXMuc2NvcGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVGV4dCcsXG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YTogYCAke2lkfWAsXG5cdCAgICAgICAgICAgICAgICAgICAgc3ludGhldGljOiB0cnVlXG5cdCAgICAgICAgICAgICAgICB9KSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGUodGhpcy5jb21wb25lbnQsIHRoaXMsIHRoaXMuc2NvcGUsIHtcblx0ICAgICAgICAgICAgICAgIHR5cGU6ICdBdHRyaWJ1dGUnLFxuXHQgICAgICAgICAgICAgICAgbmFtZTogJ2NsYXNzJyxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBbeyB0eXBlOiAnVGV4dCcsIGRhdGE6IGlkLCBzeW50aGV0aWM6IHRydWUgfV1cblx0ICAgICAgICAgICAgfSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXHRmdW5jdGlvbiBzaG91bGRfaGF2ZV9hdHRyaWJ1dGUobm9kZSwgYXR0cmlidXRlcywgbmFtZSA9IG5vZGUubmFtZSkge1xuXHQgICAgY29uc3QgYXJ0aWNsZSA9IC9eW2FlaW91XS8udGVzdChhdHRyaWJ1dGVzWzBdKSA/ICdhbicgOiAnYSc7XG5cdCAgICBjb25zdCBzZXF1ZW5jZSA9IGF0dHJpYnV0ZXMubGVuZ3RoID4gMSA/XG5cdCAgICAgICAgYXR0cmlidXRlcy5zbGljZSgwLCAtMSkuam9pbignLCAnKSArIGAgb3IgJHthdHRyaWJ1dGVzW2F0dHJpYnV0ZXMubGVuZ3RoIC0gMV19YCA6XG5cdCAgICAgICAgYXR0cmlidXRlc1swXTtcblx0ICAgIG5vZGUuY29tcG9uZW50Lndhcm4obm9kZSwge1xuXHQgICAgICAgIGNvZGU6IGBhMTF5LW1pc3NpbmctYXR0cmlidXRlYCxcblx0ICAgICAgICBtZXNzYWdlOiBgQTExeTogPCR7bmFtZX0+IGVsZW1lbnQgc2hvdWxkIGhhdmUgJHthcnRpY2xlfSAke3NlcXVlbmNlfSBhdHRyaWJ1dGVgXG5cdCAgICB9KTtcblx0fVxuXHRmdW5jdGlvbiB3aXRoaW5fY3VzdG9tX2VsZW1lbnQocGFyZW50KSB7XG5cdCAgICB3aGlsZSAocGFyZW50KSB7XG5cdCAgICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnSW5saW5lQ29tcG9uZW50Jylcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ0VsZW1lbnQnICYmIC8tLy50ZXN0KHBhcmVudC5uYW1lKSlcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNsYXNzIEhlYWQkMSBleHRlbmRzIE5vZGUkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIGlmIChpbmZvLmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihpbmZvLmF0dHJpYnV0ZXNbMF0sIHtcblx0ICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPHN2ZWx0ZTpoZWFkPiBzaG91bGQgbm90IGhhdmUgYW55IGF0dHJpYnV0ZXMgb3IgZGlyZWN0aXZlc2Bcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBtYXBfY2hpbGRyZW4oY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvLmNoaWxkcmVuLmZpbHRlcihjaGlsZCA9PiB7XG5cdCAgICAgICAgICAgIHJldHVybiAoY2hpbGQudHlwZSAhPT0gJ1RleHQnIHx8IC9cXFMvLnRlc3QoY2hpbGQuZGF0YSkpO1xuXHQgICAgICAgIH0pKTtcblx0ICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaWQgPSBgc3ZlbHRlLSR7aGFzaCh0aGlzLmNvbXBvbmVudC5zb3VyY2Uuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5lbmQpKX1gO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIElmQmxvY2skMSBleHRlbmRzIEFic3RyYWN0QmxvY2sge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pO1xuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBtYXBfY2hpbGRyZW4oY29tcG9uZW50LCB0aGlzLCBzY29wZSwgaW5mby5jaGlsZHJlbik7XG5cdCAgICAgICAgdGhpcy5lbHNlID0gaW5mby5lbHNlXG5cdCAgICAgICAgICAgID8gbmV3IEVsc2VCbG9jayhjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmVsc2UpXG5cdCAgICAgICAgICAgIDogbnVsbDtcblx0ICAgICAgICB0aGlzLndhcm5faWZfZW1wdHlfYmxvY2soKTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIElubGluZUNvbXBvbmVudCQxIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gW107XG5cdCAgICAgICAgdGhpcy5iaW5kaW5ncyA9IFtdO1xuXHQgICAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcblx0ICAgICAgICB0aGlzLmxldHMgPSBbXTtcblx0ICAgICAgICBpZiAoaW5mby5uYW1lICE9PSAnc3ZlbHRlOmNvbXBvbmVudCcgJiYgaW5mby5uYW1lICE9PSAnc3ZlbHRlOnNlbGYnKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBpbmZvLm5hbWUuc3BsaXQoJy4nKVswXTsgLy8gYWNjb21tb2RhdGUgbmFtZXNwYWNlc1xuXHQgICAgICAgICAgICBjb21wb25lbnQud2Fybl9pZl91bmRlZmluZWQobmFtZSwgaW5mbywgc2NvcGUpO1xuXHQgICAgICAgICAgICBjb21wb25lbnQuYWRkX3JlZmVyZW5jZShuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5uYW1lID0gaW5mby5uYW1lO1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IHRoaXMubmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnXG5cdCAgICAgICAgICAgID8gbmV3IEV4cHJlc3Npb24oY29tcG9uZW50LCB0aGlzLCBzY29wZSwgaW5mby5leHByZXNzaW9uKVxuXHQgICAgICAgICAgICA6IG51bGw7XG5cdCAgICAgICAgaW5mby5hdHRyaWJ1dGVzLmZvckVhY2gobm9kZSA9PiB7XG5cdCAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cdCAgICAgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdBY3Rpb24nOlxuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLWFjdGlvbmAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBY3Rpb25zIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gRE9NIGVsZW1lbnRzLCBub3QgY29tcG9uZW50c2Bcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0F0dHJpYnV0ZSc6XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ3Nsb3QnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1wcm9wYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAnc2xvdCcgaXMgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2UgaW4gbmFtZWQgc2xvdHNgXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG5cdCAgICAgICAgICAgICAgICBjYXNlICdTcHJlYWQnOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGUoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnQmluZGluZyc6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0NsYXNzJzpcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3Iobm9kZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1jbGFzc2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBDbGFzc2VzIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gRE9NIGVsZW1lbnRzLCBub3QgY29tcG9uZW50c2Bcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ0V2ZW50SGFuZGxlcic6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKG5ldyBFdmVudEhhbmRsZXIoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnTGV0Jzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxldHMucHVzaChuZXcgTGV0KGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ1RyYW5zaXRpb24nOlxuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLXRyYW5zaXRpb25gLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVHJhbnNpdGlvbnMgY2FuIG9ubHkgYmUgYXBwbGllZCB0byBET00gZWxlbWVudHMsIG5vdCBjb21wb25lbnRzYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBpbXBsZW1lbnRlZDogJHtub2RlLnR5cGV9YCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICh0aGlzLmxldHMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGUuY2hpbGQoKTtcblx0ICAgICAgICAgICAgdGhpcy5sZXRzLmZvckVhY2gobCA9PiB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KFtsLm5hbWUubmFtZV0pO1xuXHQgICAgICAgICAgICAgICAgbC5uYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUuYWRkKG5hbWUsIGRlcGVuZGVuY2llcywgdGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcblx0ICAgICAgICAgICAgaGFuZGxlci5tb2RpZmllcnMuZm9yRWFjaChtb2RpZmllciA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXIgIT09ICdvbmNlJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihoYW5kbGVyLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkLWV2ZW50LW1vZGlmaWVyJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV2ZW50IG1vZGlmaWVycyBvdGhlciB0aGFuICdvbmNlJyBjYW4gb25seSBiZSB1c2VkIG9uIERPTSBlbGVtZW50c2Bcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHRoaXMsIHRoaXMuc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgfVxuXHR9XG5cblx0Y2xhc3MgVGFnJDIgZXh0ZW5kcyBOb2RlJDEge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBuZXcgRXhwcmVzc2lvbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmV4cHJlc3Npb24pO1xuXHQgICAgICAgIHRoaXMuc2hvdWxkX2NhY2hlID0gKGluZm8uZXhwcmVzc2lvbi50eXBlICE9PSAnSWRlbnRpZmllcicgfHxcblx0ICAgICAgICAgICAgKHRoaXMuZXhwcmVzc2lvbi5kZXBlbmRlbmNpZXMuc2l6ZSAmJiBzY29wZS5uYW1lcy5oYXMoaW5mby5leHByZXNzaW9uLm5hbWUpKSk7XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBNdXN0YWNoZVRhZyBleHRlbmRzIFRhZyQyIHtcblx0fVxuXG5cdGNsYXNzIE9wdGlvbnMgZXh0ZW5kcyBOb2RlJDEge1xuXHR9XG5cblx0Y2xhc3MgUmF3TXVzdGFjaGVUYWcgZXh0ZW5kcyBUYWckMiB7XG5cdH1cblxuXHRjbGFzcyBEZWJ1Z1RhZyQxIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGluZm8uaWRlbnRpZmllcnMubWFwKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IEV4cHJlc3Npb24oY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBub2RlKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIFNsb3QkMSBleHRlbmRzIEVsZW1lbnQkMSB7XG5cdCAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pIHtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8pO1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIGluZm8uYXR0cmlidXRlcy5mb3JFYWNoKGF0dHIgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYXR0ci50eXBlICE9PSAnQXR0cmlidXRlJykge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHIsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1zbG90LWRpcmVjdGl2ZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYDxzbG90PiBjYW5ub3QgaGF2ZSBkaXJlY3RpdmVzYFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGF0dHIubmFtZSA9PT0gJ25hbWUnKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoYXR0ci52YWx1ZS5sZW5ndGggIT09IDEgfHwgYXR0ci52YWx1ZVswXS50eXBlICE9PSAnVGV4dCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0ciwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgZHluYW1pYy1zbG90LW5hbWVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPHNsb3Q+IG5hbWUgY2Fubm90IGJlIGR5bmFtaWNgXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNsb3RfbmFtZSA9IGF0dHIudmFsdWVbMF0uZGF0YTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNsb3RfbmFtZSA9PT0gJ2RlZmF1bHQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHIsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtc2xvdC1uYW1lYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYGRlZmF1bHQgaXMgYSByZXNlcnZlZCB3b3JkIOKAlCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIHNsb3QgbmFtZWBcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnZhbHVlcy5zZXQoYXR0ci5uYW1lLCBuZXcgQXR0cmlidXRlKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIGF0dHIpKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAoIXRoaXMuc2xvdF9uYW1lKVxuXHQgICAgICAgICAgICB0aGlzLnNsb3RfbmFtZSA9ICdkZWZhdWx0Jztcblx0ICAgICAgICBpZiAodGhpcy5zbG90X25hbWUgPT09ICdkZWZhdWx0Jykge1xuXHQgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBkZWZhdWx0IHNsb3QsIGFkZCBvdXIgZGVwZW5kZW5jaWVzIHRvIGFueVxuXHQgICAgICAgICAgICAvLyBvdGhlciBzbG90cyAod2hpY2ggaW5oZXJpdCBvdXIgc2xvdCB2YWx1ZXMpIHRoYXQgd2VyZVxuXHQgICAgICAgICAgICAvLyBwcmV2aW91c2x5IGVuY291bnRlcmVkXG5cdCAgICAgICAgICAgIGNvbXBvbmVudC5zbG90cy5mb3JFYWNoKChzbG90KSA9PiB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKChhdHRyaWJ1dGUsIG5hbWUpID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXNsb3QudmFsdWVzLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzbG90LnZhbHVlcy5zZXQobmFtZSwgYXR0cmlidXRlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGNvbXBvbmVudC5zbG90cy5oYXMoJ2RlZmF1bHQnKSkge1xuXHQgICAgICAgICAgICAvLyBvdGhlcndpc2UsIGdvIHRoZSBvdGhlciB3YXkg4oCUIGluaGVyaXQgdmFsdWVzIGZyb21cblx0ICAgICAgICAgICAgLy8gYSBwcmV2aW91c2x5IGVuY291bnRlcmVkIGRlZmF1bHQgc2xvdFxuXHQgICAgICAgICAgICBjb25zdCBkZWZhdWx0X3Nsb3QgPSBjb21wb25lbnQuc2xvdHMuZ2V0KCdkZWZhdWx0Jyk7XG5cdCAgICAgICAgICAgIGRlZmF1bHRfc2xvdC52YWx1ZXMuZm9yRWFjaCgoYXR0cmlidXRlLCBuYW1lKSA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMudmFsdWVzLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzLnNldChuYW1lLCBhdHRyaWJ1dGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29tcG9uZW50LnNsb3RzLnNldCh0aGlzLnNsb3RfbmFtZSwgdGhpcyk7XG5cdCAgICB9XG5cdH1cblxuXHRjbGFzcyBUaXRsZSQxIGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbykge1xuXHQgICAgICAgIHN1cGVyKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgaW5mbyk7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGluZm8uY2hpbGRyZW4pO1xuXHQgICAgICAgIGlmIChpbmZvLmF0dHJpYnV0ZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoaW5mby5hdHRyaWJ1dGVzWzBdLCB7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiBgaWxsZWdhbC1hdHRyaWJ1dGVgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYDx0aXRsZT4gY2Fubm90IGhhdmUgYXR0cmlidXRlc2Bcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGluZm8uY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG5cdCAgICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSAnVGV4dCcgJiYgY2hpbGQudHlwZSAhPT0gJ011c3RhY2hlVGFnJykge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGNoaWxkLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogJ2lsbGVnYWwtc3RydWN0dXJlJyxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPHRpdGxlPiBjYW4gb25seSBjb250YWluIHRleHQgYW5kIHt0YWdzfWBcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5zaG91bGRfY2FjaGUgPSBpbmZvLmNoaWxkcmVuLmxlbmd0aCA9PT0gMVxuXHQgICAgICAgICAgICA/IChpbmZvLmNoaWxkcmVuWzBdLnR5cGUgIT09ICdJZGVudGlmaWVyJyB8fFxuXHQgICAgICAgICAgICAgICAgc2NvcGUubmFtZXMuaGFzKGluZm8uY2hpbGRyZW5bMF0ubmFtZSkpXG5cdCAgICAgICAgICAgIDogdHJ1ZTtcblx0ICAgIH1cblx0fVxuXG5cdGNvbnN0IHZhbGlkX2JpbmRpbmdzID0gW1xuXHQgICAgJ2lubmVyV2lkdGgnLFxuXHQgICAgJ2lubmVySGVpZ2h0Jyxcblx0ICAgICdvdXRlcldpZHRoJyxcblx0ICAgICdvdXRlckhlaWdodCcsXG5cdCAgICAnc2Nyb2xsWCcsXG5cdCAgICAnc2Nyb2xsWScsXG5cdCAgICAnb25saW5lJ1xuXHRdO1xuXHRjbGFzcyBXaW5kb3cgZXh0ZW5kcyBOb2RlJDEge1xuXHQgICAgY29uc3RydWN0b3IoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKSB7XG5cdCAgICAgICAgc3VwZXIoY29tcG9uZW50LCBwYXJlbnQsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG5cdCAgICAgICAgdGhpcy5iaW5kaW5ncyA9IFtdO1xuXHQgICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xuXHQgICAgICAgIGluZm8uYXR0cmlidXRlcy5mb3JFYWNoKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnRXZlbnRIYW5kbGVyJykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKG5ldyBFdmVudEhhbmRsZXIoY29tcG9uZW50LCB0aGlzLCBzY29wZSwgbm9kZSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ0JpbmRpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS5leHByZXNzaW9uLnR5cGUgIT09ICdJZGVudGlmaWVyJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFydHMgfSA9IGZsYXR0ZW5fcmVmZXJlbmNlKG5vZGUuZXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBpcyB0aGlzIGNvbnN0cmFpbnQgbmVjZXNzYXJ5P1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLmV4cHJlc3Npb24sIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGludmFsaWQtYmluZGluZ2AsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBCaW5kaW5ncyBvbiA8c3ZlbHRlOndpbmRvdz4gbXVzdCBiZSB0byB0b3AtbGV2ZWwgcHJvcGVydGllcywgZS5nLiAnJHtwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXX0nIHJhdGhlciB0aGFuICcke3BhcnRzLmpvaW4oJy4nKX0nYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKCF+dmFsaWRfYmluZGluZ3MuaW5kZXhPZihub2RlLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAobm9kZS5uYW1lID09PSAnd2lkdGgnID8gJ2lubmVyV2lkdGgnIDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID09PSAnaGVpZ2h0JyA/ICdpbm5lckhlaWdodCcgOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnV6enltYXRjaChub2RlLm5hbWUsIHZhbGlkX2JpbmRpbmdzKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAnJHtub2RlLm5hbWV9JyBpcyBub3QgYSB2YWxpZCBiaW5kaW5nIG9uIDxzdmVsdGU6d2luZG93PmA7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1iaW5kaW5nYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke21lc3NhZ2V9IChkaWQgeW91IG1lYW4gJyR7bWF0Y2h9Jz8pYFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1iaW5kaW5nYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke21lc3NhZ2V9IOKAlCB2YWxpZCBiaW5kaW5ncyBhcmUgJHtsaXN0JDEodmFsaWRfYmluZGluZ3MpfWBcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdBY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMucHVzaChuZXcgQWN0aW9uKGNvbXBvbmVudCwgdGhpcywgc2NvcGUsIG5vZGUpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0X2NvbnN0cnVjdG9yKHR5cGUpIHtcblx0ICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgIGNhc2UgJ0F3YWl0QmxvY2snOiByZXR1cm4gQXdhaXRCbG9jayQxO1xuXHQgICAgICAgIGNhc2UgJ0JvZHknOiByZXR1cm4gQm9keTtcblx0ICAgICAgICBjYXNlICdDb21tZW50JzogcmV0dXJuIENvbW1lbnQkMjtcblx0ICAgICAgICBjYXNlICdFYWNoQmxvY2snOiByZXR1cm4gRWFjaEJsb2NrJDE7XG5cdCAgICAgICAgY2FzZSAnRWxlbWVudCc6IHJldHVybiBFbGVtZW50JDE7XG5cdCAgICAgICAgY2FzZSAnSGVhZCc6IHJldHVybiBIZWFkJDE7XG5cdCAgICAgICAgY2FzZSAnSWZCbG9jayc6IHJldHVybiBJZkJsb2NrJDE7XG5cdCAgICAgICAgY2FzZSAnSW5saW5lQ29tcG9uZW50JzogcmV0dXJuIElubGluZUNvbXBvbmVudCQxO1xuXHQgICAgICAgIGNhc2UgJ011c3RhY2hlVGFnJzogcmV0dXJuIE11c3RhY2hlVGFnO1xuXHQgICAgICAgIGNhc2UgJ09wdGlvbnMnOiByZXR1cm4gT3B0aW9ucztcblx0ICAgICAgICBjYXNlICdSYXdNdXN0YWNoZVRhZyc6IHJldHVybiBSYXdNdXN0YWNoZVRhZztcblx0ICAgICAgICBjYXNlICdEZWJ1Z1RhZyc6IHJldHVybiBEZWJ1Z1RhZyQxO1xuXHQgICAgICAgIGNhc2UgJ1Nsb3QnOiByZXR1cm4gU2xvdCQxO1xuXHQgICAgICAgIGNhc2UgJ1RleHQnOiByZXR1cm4gVGV4dCQxO1xuXHQgICAgICAgIGNhc2UgJ1RpdGxlJzogcmV0dXJuIFRpdGxlJDE7XG5cdCAgICAgICAgY2FzZSAnV2luZG93JzogcmV0dXJuIFdpbmRvdztcblx0ICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYE5vdCBpbXBsZW1lbnRlZDogJHt0eXBlfWApO1xuXHQgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHBhcmVudCwgc2NvcGUsIGNoaWxkcmVuKSB7XG5cdCAgICBsZXQgbGFzdCA9IG51bGw7XG5cdCAgICBsZXQgaWdub3JlcyA9IFtdO1xuXHQgICAgcmV0dXJuIGNoaWxkcmVuLm1hcChjaGlsZCA9PiB7XG5cdCAgICAgICAgY29uc3QgY29uc3RydWN0b3IgPSBnZXRfY29uc3RydWN0b3IoY2hpbGQudHlwZSk7XG5cdCAgICAgICAgY29uc3QgdXNlX2lnbm9yZXMgPSBjaGlsZC50eXBlICE9PSAnVGV4dCcgJiYgY2hpbGQudHlwZSAhPT0gJ0NvbW1lbnQnICYmIGlnbm9yZXMubGVuZ3RoO1xuXHQgICAgICAgIGlmICh1c2VfaWdub3Jlcylcblx0ICAgICAgICAgICAgY29tcG9uZW50LnB1c2hfaWdub3JlcyhpZ25vcmVzKTtcblx0ICAgICAgICBjb25zdCBub2RlID0gbmV3IGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgcGFyZW50LCBzY29wZSwgY2hpbGQpO1xuXHQgICAgICAgIGlmICh1c2VfaWdub3Jlcylcblx0ICAgICAgICAgICAgY29tcG9uZW50LnBvcF9pZ25vcmVzKCksIGlnbm9yZXMgPSBbXTtcblx0ICAgICAgICBpZiAobm9kZS50eXBlID09PSAnQ29tbWVudCcgJiYgbm9kZS5pZ25vcmVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBpZ25vcmVzLnB1c2goLi4ubm9kZS5pZ25vcmVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGxhc3QpXG5cdCAgICAgICAgICAgIGxhc3QubmV4dCA9IG5vZGU7XG5cdCAgICAgICAgbm9kZS5wcmV2ID0gbGFzdDtcblx0ICAgICAgICBsYXN0ID0gbm9kZTtcblx0ICAgICAgICByZXR1cm4gbm9kZTtcblx0ICAgIH0pO1xuXHR9XG5cblx0Y2xhc3MgVGVtcGxhdGVTY29wZSB7XG5cdCAgICBjb25zdHJ1Y3RvcihwYXJlbnQpIHtcblx0ICAgICAgICB0aGlzLm93bmVycyA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICB0aGlzLm5hbWVzID0gbmV3IFNldChwYXJlbnQgPyBwYXJlbnQubmFtZXMgOiBbXSk7XG5cdCAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXNfZm9yX25hbWUgPSBuZXcgTWFwKHBhcmVudCA/IHBhcmVudC5kZXBlbmRlbmNpZXNfZm9yX25hbWUgOiBbXSk7XG5cdCAgICB9XG5cdCAgICBhZGQobmFtZSwgZGVwZW5kZW5jaWVzLCBvd25lcikge1xuXHQgICAgICAgIHRoaXMubmFtZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzX2Zvcl9uYW1lLnNldChuYW1lLCBkZXBlbmRlbmNpZXMpO1xuXHQgICAgICAgIHRoaXMub3duZXJzLnNldChuYW1lLCBvd25lcik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICBjaGlsZCgpIHtcblx0ICAgICAgICBjb25zdCBjaGlsZCA9IG5ldyBUZW1wbGF0ZVNjb3BlKHRoaXMpO1xuXHQgICAgICAgIHJldHVybiBjaGlsZDtcblx0ICAgIH1cblx0ICAgIGlzX3RvcF9sZXZlbChuYW1lKSB7XG5cdCAgICAgICAgcmV0dXJuICF0aGlzLnBhcmVudCB8fCAhdGhpcy5uYW1lcy5oYXMobmFtZSkgJiYgdGhpcy5wYXJlbnQuaXNfdG9wX2xldmVsKG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZ2V0X293bmVyKG5hbWUpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5vd25lcnMuZ2V0KG5hbWUpIHx8ICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5nZXRfb3duZXIobmFtZSkpO1xuXHQgICAgfVxuXHQgICAgaXNfbGV0KG5hbWUpIHtcblx0ICAgICAgICBjb25zdCBvd25lciA9IHRoaXMuZ2V0X293bmVyKG5hbWUpO1xuXHQgICAgICAgIHJldHVybiBvd25lciAmJiAob3duZXIudHlwZSA9PT0gJ0VsZW1lbnQnIHx8IG93bmVyLnR5cGUgPT09ICdJbmxpbmVDb21wb25lbnQnKTtcblx0ICAgIH1cblx0ICAgIGlzX2F3YWl0KG5hbWUpIHtcblx0ICAgICAgICBjb25zdCBvd25lciA9IHRoaXMuZ2V0X293bmVyKG5hbWUpO1xuXHQgICAgICAgIHJldHVybiBvd25lciAmJiAob3duZXIudHlwZSA9PT0gJ1RoZW5CbG9jaycgfHwgb3duZXIudHlwZSA9PT0gJ0NhdGNoQmxvY2snKTtcblx0ICAgIH1cblx0fVxuXG5cdGNsYXNzIEZyYWdtZW50IGV4dGVuZHMgTm9kZSQxIHtcblx0ICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudCwgaW5mbykge1xuXHQgICAgICAgIGNvbnN0IHNjb3BlID0gbmV3IFRlbXBsYXRlU2NvcGUoKTtcblx0ICAgICAgICBzdXBlcihjb21wb25lbnQsIG51bGwsIHNjb3BlLCBpbmZvKTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG1hcF9jaGlsZHJlbihjb21wb25lbnQsIHRoaXMsIHNjb3BlLCBpbmZvLmNoaWxkcmVuKTtcblx0ICAgIH1cblx0fVxuXG5cdC8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZFxuXHR2YXIgaW50ZXJuYWxfZXhwb3J0cyA9IG5ldyBTZXQoW1wiSHRtbFRhZ1wiLCBcIlN2ZWx0ZUNvbXBvbmVudFwiLCBcIlN2ZWx0ZUNvbXBvbmVudERldlwiLCBcIlN2ZWx0ZUVsZW1lbnRcIiwgXCJhY3Rpb25fZGVzdHJveWVyXCIsIFwiYWRkX2F0dHJpYnV0ZVwiLCBcImFkZF9jbGFzc2VzXCIsIFwiYWRkX2ZsdXNoX2NhbGxiYWNrXCIsIFwiYWRkX2xvY2F0aW9uXCIsIFwiYWRkX3JlbmRlcl9jYWxsYmFja1wiLCBcImFkZF9yZXNpemVfbGlzdGVuZXJcIiwgXCJhZGRfdHJhbnNmb3JtXCIsIFwiYWZ0ZXJVcGRhdGVcIiwgXCJhcHBlbmRcIiwgXCJhcHBlbmRfZGV2XCIsIFwiYXNzaWduXCIsIFwiYXR0clwiLCBcImF0dHJfZGV2XCIsIFwiYmVmb3JlVXBkYXRlXCIsIFwiYmluZFwiLCBcImJpbmRpbmdfY2FsbGJhY2tzXCIsIFwiYmxhbmtfb2JqZWN0XCIsIFwiYnViYmxlXCIsIFwiY2hlY2tfb3V0cm9zXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFpbV9jb21wb25lbnRcIiwgXCJjbGFpbV9lbGVtZW50XCIsIFwiY2xhaW1fc3BhY2VcIiwgXCJjbGFpbV90ZXh0XCIsIFwiY2xlYXJfbG9vcHNcIiwgXCJjb21wb25lbnRfc3Vic2NyaWJlXCIsIFwiY29tcHV0ZV9yZXN0X3Byb3BzXCIsIFwiY3JlYXRlRXZlbnREaXNwYXRjaGVyXCIsIFwiY3JlYXRlX2FuaW1hdGlvblwiLCBcImNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb25cIiwgXCJjcmVhdGVfY29tcG9uZW50XCIsIFwiY3JlYXRlX2luX3RyYW5zaXRpb25cIiwgXCJjcmVhdGVfb3V0X3RyYW5zaXRpb25cIiwgXCJjcmVhdGVfc2xvdFwiLCBcImNyZWF0ZV9zc3JfY29tcG9uZW50XCIsIFwiY3VycmVudF9jb21wb25lbnRcIiwgXCJjdXN0b21fZXZlbnRcIiwgXCJkYXRhc2V0X2RldlwiLCBcImRlYnVnXCIsIFwiZGVzdHJveV9ibG9ja1wiLCBcImRlc3Ryb3lfY29tcG9uZW50XCIsIFwiZGVzdHJveV9lYWNoXCIsIFwiZGV0YWNoXCIsIFwiZGV0YWNoX2FmdGVyX2RldlwiLCBcImRldGFjaF9iZWZvcmVfZGV2XCIsIFwiZGV0YWNoX2JldHdlZW5fZGV2XCIsIFwiZGV0YWNoX2RldlwiLCBcImRpcnR5X2NvbXBvbmVudHNcIiwgXCJkaXNwYXRjaF9kZXZcIiwgXCJlYWNoXCIsIFwiZWxlbWVudFwiLCBcImVsZW1lbnRfaXNcIiwgXCJlbXB0eVwiLCBcImVzY2FwZVwiLCBcImVzY2FwZWRcIiwgXCJleGNsdWRlX2ludGVybmFsX3Byb3BzXCIsIFwiZml4X2FuZF9kZXN0cm95X2Jsb2NrXCIsIFwiZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9ja1wiLCBcImZpeF9wb3NpdGlvblwiLCBcImZsdXNoXCIsIFwiZ2V0Q29udGV4dFwiLCBcImdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlXCIsIFwiZ2V0X2N1cnJlbnRfY29tcG9uZW50XCIsIFwiZ2V0X3Nsb3RfY2hhbmdlc1wiLCBcImdldF9zbG90X2NvbnRleHRcIiwgXCJnZXRfc3ByZWFkX29iamVjdFwiLCBcImdldF9zcHJlYWRfdXBkYXRlXCIsIFwiZ2V0X3N0b3JlX3ZhbHVlXCIsIFwiZ2xvYmFsc1wiLCBcImdyb3VwX291dHJvc1wiLCBcImhhbmRsZV9wcm9taXNlXCIsIFwiaGFzX3Byb3BcIiwgXCJpZGVudGl0eVwiLCBcImluaXRcIiwgXCJpbnNlcnRcIiwgXCJpbnNlcnRfZGV2XCIsIFwiaW50cm9zXCIsIFwiaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXJcIiwgXCJpc19jbGllbnRcIiwgXCJpc19jcm9zc29yaWdpblwiLCBcImlzX2VtcHR5XCIsIFwiaXNfZnVuY3Rpb25cIiwgXCJpc19wcm9taXNlXCIsIFwibGlzdGVuXCIsIFwibGlzdGVuX2RldlwiLCBcImxvb3BcIiwgXCJsb29wX2d1YXJkXCIsIFwibWlzc2luZ19jb21wb25lbnRcIiwgXCJtb3VudF9jb21wb25lbnRcIiwgXCJub29wXCIsIFwibm90X2VxdWFsXCIsIFwibm93XCIsIFwibnVsbF90b19lbXB0eVwiLCBcIm9iamVjdF93aXRob3V0X3Byb3BlcnRpZXNcIiwgXCJvbkRlc3Ryb3lcIiwgXCJvbk1vdW50XCIsIFwib25jZVwiLCBcIm91dHJvX2FuZF9kZXN0cm95X2Jsb2NrXCIsIFwicHJldmVudF9kZWZhdWx0XCIsIFwicHJvcF9kZXZcIiwgXCJxdWVyeV9zZWxlY3Rvcl9hbGxcIiwgXCJyYWZcIiwgXCJydW5cIiwgXCJydW5fYWxsXCIsIFwic2FmZV9ub3RfZXF1YWxcIiwgXCJzY2hlZHVsZV91cGRhdGVcIiwgXCJzZWxlY3RfbXVsdGlwbGVfdmFsdWVcIiwgXCJzZWxlY3Rfb3B0aW9uXCIsIFwic2VsZWN0X29wdGlvbnNcIiwgXCJzZWxlY3RfdmFsdWVcIiwgXCJzZWxmXCIsIFwic2V0Q29udGV4dFwiLCBcInNldF9hdHRyaWJ1dGVzXCIsIFwic2V0X2N1cnJlbnRfY29tcG9uZW50XCIsIFwic2V0X2N1c3RvbV9lbGVtZW50X2RhdGFcIiwgXCJzZXRfZGF0YVwiLCBcInNldF9kYXRhX2RldlwiLCBcInNldF9pbnB1dF90eXBlXCIsIFwic2V0X2lucHV0X3ZhbHVlXCIsIFwic2V0X25vd1wiLCBcInNldF9yYWZcIiwgXCJzZXRfc3RvcmVfdmFsdWVcIiwgXCJzZXRfc3R5bGVcIiwgXCJzZXRfc3ZnX2F0dHJpYnV0ZXNcIiwgXCJzcGFjZVwiLCBcInNwcmVhZFwiLCBcInN0b3BfcHJvcGFnYXRpb25cIiwgXCJzdWJzY3JpYmVcIiwgXCJzdmdfZWxlbWVudFwiLCBcInRleHRcIiwgXCJ0aWNrXCIsIFwidGltZV9yYW5nZXNfdG9fYXJyYXlcIiwgXCJ0b19udW1iZXJcIiwgXCJ0b2dnbGVfY2xhc3NcIiwgXCJ0cmFuc2l0aW9uX2luXCIsIFwidHJhbnNpdGlvbl9vdXRcIiwgXCJ1cGRhdGVfa2V5ZWRfZWFjaFwiLCBcInVwZGF0ZV9zbG90XCIsIFwidmFsaWRhdGVfY29tcG9uZW50XCIsIFwidmFsaWRhdGVfZWFjaF9hcmd1bWVudFwiLCBcInZhbGlkYXRlX2VhY2hfa2V5c1wiLCBcInZhbGlkYXRlX3Nsb3RzXCIsIFwidmFsaWRhdGVfc3RvcmVcIiwgXCJ4bGlua19hdHRyXCJdKTtcblxuXHRmdW5jdGlvbiBpc191c2VkX2FzX3JlZmVyZW5jZShub2RlLCBwYXJlbnQpIHtcblx0ICAgIGlmICghaXNSZWZlcmVuY2Uobm9kZSwgcGFyZW50KSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIGlmICghcGFyZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXHQgICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuXHQgICAgICAgIC8vIGRpc3JlZ2FyZCB0aGUgYGZvb2AgaW4gYGNvbnN0IGZvbyA9IGJhcmBcblx0ICAgICAgICBjYXNlICdWYXJpYWJsZURlY2xhcmF0b3InOlxuXHQgICAgICAgICAgICByZXR1cm4gbm9kZSAhPT0gcGFyZW50LmlkO1xuXHQgICAgICAgIC8vIGRpc3JlZ2FyZCB0aGUgYGZvb2AsIGBiYXJgIGluIGBmdW5jdGlvbiBmb28oYmFyKXt9YFxuXHQgICAgICAgIGNhc2UgJ0Z1bmN0aW9uRGVjbGFyYXRpb24nOlxuXHQgICAgICAgIC8vIGRpc3JlZ2FyZCB0aGUgYGZvb2AgaW4gYGltcG9ydCB7IGZvbyB9IGZyb20gJ2ZvbydgXG5cdCAgICAgICAgY2FzZSAnSW1wb3J0U3BlY2lmaWVyJzpcblx0ICAgICAgICAvLyBkaXNyZWdhcmQgdGhlIGBmb29gIGluIGBpbXBvcnQgZm9vIGZyb20gJ2ZvbydgXG5cdCAgICAgICAgY2FzZSAnSW1wb3J0RGVmYXVsdFNwZWNpZmllcic6XG5cdCAgICAgICAgLy8gZGlzcmVnYXJkIHRoZSBgZm9vYCBpbiBgaW1wb3J0ICogYXMgZm9vIGZyb20gJ2ZvbydgXG5cdCAgICAgICAgY2FzZSAnSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyJzpcblx0ICAgICAgICAvLyBkaXNyZWdhcmQgdGhlIGBmb29gIGluIGBleHBvcnQgeyBmb28gfWBcblx0ICAgICAgICBjYXNlICdFeHBvcnRTcGVjaWZpZXInOlxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja19ncmFwaF9mb3JfY3ljbGVzKGVkZ2VzKSB7XG5cdCAgICBjb25zdCBncmFwaCA9IGVkZ2VzLnJlZHVjZSgoZywgZWRnZSkgPT4ge1xuXHQgICAgICAgIGNvbnN0IFt1LCB2XSA9IGVkZ2U7XG5cdCAgICAgICAgaWYgKCFnLmhhcyh1KSlcblx0ICAgICAgICAgICAgZy5zZXQodSwgW10pO1xuXHQgICAgICAgIGlmICghZy5oYXModikpXG5cdCAgICAgICAgICAgIGcuc2V0KHYsIFtdKTtcblx0ICAgICAgICBnLmdldCh1KS5wdXNoKHYpO1xuXHQgICAgICAgIHJldHVybiBnO1xuXHQgICAgfSwgbmV3IE1hcCgpKTtcblx0ICAgIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG5cdCAgICBjb25zdCBvbl9zdGFjayA9IG5ldyBTZXQoKTtcblx0ICAgIGNvbnN0IGN5Y2xlcyA9IFtdO1xuXHQgICAgZnVuY3Rpb24gdmlzaXQodikge1xuXHQgICAgICAgIHZpc2l0ZWQuYWRkKHYpO1xuXHQgICAgICAgIG9uX3N0YWNrLmFkZCh2KTtcblx0ICAgICAgICBncmFwaC5nZXQodikuZm9yRWFjaCh3ID0+IHtcblx0ICAgICAgICAgICAgaWYgKCF2aXNpdGVkLmhhcyh3KSkge1xuXHQgICAgICAgICAgICAgICAgdmlzaXQodyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAob25fc3RhY2suaGFzKHcpKSB7XG5cdCAgICAgICAgICAgICAgICBjeWNsZXMucHVzaChbLi4ub25fc3RhY2ssIHddKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIG9uX3N0YWNrLmRlbGV0ZSh2KTtcblx0ICAgIH1cblx0ICAgIGdyYXBoLmZvckVhY2goKF8sIHYpID0+IHtcblx0ICAgICAgICBpZiAoIXZpc2l0ZWQuaGFzKHYpKSB7XG5cdCAgICAgICAgICAgIHZpc2l0KHYpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIGN5Y2xlc1swXTtcblx0fVxuXG5cdGNsYXNzIENvbXBvbmVudCB7XG5cdCAgICBjb25zdHJ1Y3Rvcihhc3QsIHNvdXJjZSwgbmFtZSwgY29tcGlsZV9vcHRpb25zLCBzdGF0cywgd2FybmluZ3MpIHtcblx0ICAgICAgICB0aGlzLmlnbm9yZV9zdGFjayA9IFtdO1xuXHQgICAgICAgIHRoaXMudmFycyA9IFtdO1xuXHQgICAgICAgIHRoaXMudmFyX2xvb2t1cCA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLmltcG9ydHMgPSBbXTtcblx0ICAgICAgICB0aGlzLmhvaXN0YWJsZV9ub2RlcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICB0aGlzLm5vZGVfZm9yX2RlY2xhcmF0aW9uID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIHRoaXMucGFydGx5X2hvaXN0ZWQgPSBbXTtcblx0ICAgICAgICB0aGlzLmZ1bGx5X2hvaXN0ZWQgPSBbXTtcblx0ICAgICAgICB0aGlzLnJlYWN0aXZlX2RlY2xhcmF0aW9ucyA9IFtdO1xuXHQgICAgICAgIHRoaXMucmVhY3RpdmVfZGVjbGFyYXRpb25fbm9kZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgdGhpcy5oYXNfcmVhY3RpdmVfYXNzaWdubWVudHMgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmluamVjdGVkX3JlYWN0aXZlX2RlY2xhcmF0aW9uX3ZhcnMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgdGhpcy5oZWxwZXJzID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIHRoaXMuZ2xvYmFscyA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLmluZGlyZWN0X2RlcGVuZGVuY2llcyA9IG5ldyBNYXAoKTtcblx0ICAgICAgICB0aGlzLmFsaWFzZXMgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgdGhpcy51c2VkX25hbWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMuZ2xvYmFsbHlfdXNlZF9uYW1lcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICB0aGlzLnNsb3RzID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIHRoaXMuc2xvdF9vdXRsZXRzID0gbmV3IFNldCgpO1xuXHQgICAgICAgIHRoaXMubmFtZSA9IHsgdHlwZTogJ0lkZW50aWZpZXInLCBuYW1lIH07XG5cdCAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzO1xuXHQgICAgICAgIHRoaXMud2FybmluZ3MgPSB3YXJuaW5ncztcblx0ICAgICAgICB0aGlzLmFzdCA9IGFzdDtcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgICAgICB0aGlzLmNvbXBpbGVfb3B0aW9ucyA9IGNvbXBpbGVfb3B0aW9ucztcblx0ICAgICAgICAvLyB0aGUgaW5zdGFuY2UgSlMgZ2V0cyBtdXRhdGVkLCBzbyB3ZSBwYXJrXG5cdCAgICAgICAgLy8gYSBjb3B5IGhlcmUgZm9yIGxhdGVyLiBUT0RPIHRoaXMgZmVlbHMgZ3Jvc3Ncblx0ICAgICAgICB0aGlzLm9yaWdpbmFsX2FzdCA9IHtcblx0ICAgICAgICAgICAgaHRtbDogYXN0Lmh0bWwsXG5cdCAgICAgICAgICAgIGNzczogYXN0LmNzcyxcblx0ICAgICAgICAgICAgaW5zdGFuY2U6IGFzdC5pbnN0YW5jZSAmJiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFzdC5pbnN0YW5jZSkpLFxuXHQgICAgICAgICAgICBtb2R1bGU6IGFzdC5tb2R1bGVcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMuZmlsZSA9XG5cdCAgICAgICAgICAgIGNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZSAmJlxuXHQgICAgICAgICAgICAgICAgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJ1xuXHQgICAgICAgICAgICAgICAgICAgID8gY29tcGlsZV9vcHRpb25zLmZpbGVuYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHByb2Nlc3MuY3dkKCksICcnKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXlsvXFxcXF0vLCAnJylcblx0ICAgICAgICAgICAgICAgICAgICA6IGNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZSk7XG5cdCAgICAgICAgdGhpcy5sb2NhdGUgPSBnZXRMb2NhdG9yKHRoaXMuc291cmNlLCB7IG9mZnNldExpbmU6IDEgfSk7XG5cdCAgICAgICAgLy8gc3R5bGVzXG5cdCAgICAgICAgdGhpcy5zdHlsZXNoZWV0ID0gbmV3IFN0eWxlc2hlZXQoc291cmNlLCBhc3QsIGNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZSwgY29tcGlsZV9vcHRpb25zLmRldik7XG5cdCAgICAgICAgdGhpcy5zdHlsZXNoZWV0LnZhbGlkYXRlKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY29tcG9uZW50X29wdGlvbnMgPSBwcm9jZXNzX2NvbXBvbmVudF9vcHRpb25zKHRoaXMsIHRoaXMuYXN0Lmh0bWwuY2hpbGRyZW4pO1xuXHQgICAgICAgIHRoaXMubmFtZXNwYWNlID1cblx0ICAgICAgICAgICAgbmFtZXNwYWNlc1t0aGlzLmNvbXBvbmVudF9vcHRpb25zLm5hbWVzcGFjZV0gfHxcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50X29wdGlvbnMubmFtZXNwYWNlO1xuXHQgICAgICAgIGlmIChjb21waWxlX29wdGlvbnMuY3VzdG9tRWxlbWVudCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRfb3B0aW9ucy50YWcgPT09IHVuZGVmaW5lZCAmJlxuXHQgICAgICAgICAgICAgICAgY29tcGlsZV9vcHRpb25zLnRhZyA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBzdmVsdGVPcHRpb25zID0gYXN0Lmh0bWwuY2hpbGRyZW4uZmluZChjaGlsZCA9PiBjaGlsZC5uYW1lID09PSAnc3ZlbHRlOm9wdGlvbnMnKSB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcblx0ICAgICAgICAgICAgICAgIHRoaXMud2FybihzdmVsdGVPcHRpb25zLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogJ2N1c3RvbS1lbGVtZW50LW5vLXRhZycsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYE5vIGN1c3RvbSBlbGVtZW50ICd0YWcnIG9wdGlvbiB3YXMgc3BlY2lmaWVkLiBUbyBhdXRvbWF0aWNhbGx5IHJlZ2lzdGVyIGEgY3VzdG9tIGVsZW1lbnQsIHNwZWNpZnkgYSBuYW1lIHdpdGggYSBoeXBoZW4gaW4gaXQsIGUuZy4gPHN2ZWx0ZTpvcHRpb25zIHRhZz1cIm15LXRoaW5nXCIvPi4gVG8gaGlkZSB0aGlzIHdhcm5pbmcsIHVzZSA8c3ZlbHRlOm9wdGlvbnMgdGFnPXtudWxsfS8+YCxcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMudGFnID0gdGhpcy5jb21wb25lbnRfb3B0aW9ucy50YWcgfHwgY29tcGlsZV9vcHRpb25zLnRhZztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMudGFnID0gdGhpcy5uYW1lLm5hbWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMud2Fsa19tb2R1bGVfanMoKTtcblx0ICAgICAgICB0aGlzLndhbGtfaW5zdGFuY2VfanNfcHJlX3RlbXBsYXRlKCk7XG5cdCAgICAgICAgdGhpcy5mcmFnbWVudCA9IG5ldyBGcmFnbWVudCh0aGlzLCBhc3QuaHRtbCk7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRfdW5pcXVlX25hbWUobmFtZSk7XG5cdCAgICAgICAgdGhpcy53YWxrX2luc3RhbmNlX2pzX3Bvc3RfdGVtcGxhdGUoKTtcblx0ICAgICAgICBpZiAoIWNvbXBpbGVfb3B0aW9ucy5jdXN0b21FbGVtZW50KVxuXHQgICAgICAgICAgICB0aGlzLnN0eWxlc2hlZXQucmVpZnkoKTtcblx0ICAgICAgICB0aGlzLnN0eWxlc2hlZXQud2Fybl9vbl91bnVzZWRfc2VsZWN0b3JzKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgYWRkX3Zhcih2YXJpYWJsZSkge1xuXHQgICAgICAgIHRoaXMudmFycy5wdXNoKHZhcmlhYmxlKTtcblx0ICAgICAgICB0aGlzLnZhcl9sb29rdXAuc2V0KHZhcmlhYmxlLm5hbWUsIHZhcmlhYmxlKTtcblx0ICAgIH1cblx0ICAgIGFkZF9yZWZlcmVuY2UobmFtZSkge1xuXHQgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICBpZiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgdmFyaWFibGUucmVmZXJlbmNlZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGlzX3Jlc2VydmVkX2tleXdvcmQobmFtZSkpIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdmFyKHtcblx0ICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICBpbmplY3RlZDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIHJlZmVyZW5jZWQ6IHRydWUsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChuYW1lWzBdID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdmFyKHtcblx0ICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICBpbmplY3RlZDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIHJlZmVyZW5jZWQ6IHRydWUsXG5cdCAgICAgICAgICAgICAgICBtdXRhdGVkOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjb25zdCBzdWJzY3JpYmFibGVfbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG5cdCAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChzdWJzY3JpYmFibGVfbmFtZSk7XG5cdCAgICAgICAgICAgIGlmICh2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgdmFyaWFibGUucmVmZXJlbmNlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB2YXJpYWJsZS5zdWJzY3JpYmFibGUgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnVzZWRfbmFtZXMuYWRkKG5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGFsaWFzKG5hbWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuYWxpYXNlcy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgdGhpcy5hbGlhc2VzLnNldChuYW1lLCB0aGlzLmdldF91bmlxdWVfbmFtZShuYW1lKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmFsaWFzZXMuZ2V0KG5hbWUpO1xuXHQgICAgfVxuXHQgICAgZ2xvYmFsKG5hbWUpIHtcblx0ICAgICAgICBjb25zdCBhbGlhcyA9IHRoaXMuYWxpYXMobmFtZSk7XG5cdCAgICAgICAgdGhpcy5nbG9iYWxzLnNldChuYW1lLCBhbGlhcyk7XG5cdCAgICAgICAgcmV0dXJuIGFsaWFzO1xuXHQgICAgfVxuXHQgICAgZ2VuZXJhdGUocmVzdWx0KSB7XG5cdCAgICAgICAgbGV0IGpzID0gbnVsbDtcblx0ICAgICAgICBsZXQgY3NzID0gbnVsbDtcblx0ICAgICAgICBpZiAocmVzdWx0KSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHsgY29tcGlsZV9vcHRpb25zLCBuYW1lIH0gPSB0aGlzO1xuXHQgICAgICAgICAgICBjb25zdCB7IGZvcm1hdCA9ICdlc20nIH0gPSBjb21waWxlX29wdGlvbnM7XG5cdCAgICAgICAgICAgIGNvbnN0IGJhbm5lciA9IGAke3RoaXMuZmlsZSA/IGAke3RoaXMuZmlsZX0gYCA6IGBgfWdlbmVyYXRlZCBieSBTdmVsdGUgdiR7JzMuMjQuMSd9YDtcblx0ICAgICAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHsgdHlwZTogJ1Byb2dyYW0nLCBib2R5OiByZXN1bHQuanMgfTtcblx0ICAgICAgICAgICAgd2Fsayhwcm9ncmFtLCB7XG5cdCAgICAgICAgICAgICAgICBlbnRlcjogKG5vZGUsIHBhcmVudCwga2V5KSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5hbWVbMF0gPT09ICdAJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZVsxXSA9PT0gJ18nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpYXMgPSB0aGlzLmdsb2JhbChub2RlLm5hbWUuc2xpY2UoMikpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IGFsaWFzLm5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IG5vZGUubmFtZS5zbGljZSgxKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGlsZV9vcHRpb25zLmRldikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxfZXhwb3J0cy5oYXMoYCR7bmFtZX1fZGV2YCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgKz0gJ19kZXYnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGludGVybmFsX2V4cG9ydHMuaGFzKGAke25hbWV9RGV2YCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgKz0gJ0Rldic7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpYXMgPSB0aGlzLmFsaWFzKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVycy5zZXQobmFtZSwgYWxpYXMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IGFsaWFzLm5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5uYW1lWzBdICE9PSAnIycgJiYgIWlzX3ZhbGlkKG5vZGUubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaGFjayBhbGxvd3MgeGBmb28uJHtiYXJ9YCB3aGVyZSBiYXIgY291bGQgYmUgaW52YWxpZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGl0ZXJhbCA9IHsgdHlwZTogJ0xpdGVyYWwnLCB2YWx1ZTogbm9kZS5uYW1lIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdQcm9wZXJ0eScgJiYga2V5ID09PSAna2V5Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5rZXkgPSBsaXRlcmFsO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyZW50LnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJyAmJiBrZXkgPT09ICdwcm9wZXJ0eScpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQucHJvcGVydHkgPSBsaXRlcmFsO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5jb21wdXRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VkX2dsb2JhbHMgPSBBcnJheS5mcm9tKHRoaXMuZ2xvYmFscywgKFtuYW1lLCBhbGlhc10pID0+IG5hbWUgIT09IGFsaWFzLm5hbWUgJiYgeyBuYW1lLCBhbGlhcyB9KS5maWx0ZXIoQm9vbGVhbik7XG5cdCAgICAgICAgICAgIGlmIChyZWZlcmVuY2VkX2dsb2JhbHMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmhlbHBlcnMuc2V0KCdnbG9iYWxzJywgdGhpcy5hbGlhcygnZ2xvYmFscycpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb25zdCBpbXBvcnRlZF9oZWxwZXJzID0gQXJyYXkuZnJvbSh0aGlzLmhlbHBlcnMsIChbbmFtZSwgYWxpYXNdKSA9PiAoe1xuXHQgICAgICAgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgICAgICAgIGFsaWFzLFxuXHQgICAgICAgICAgICB9KSk7XG5cdCAgICAgICAgICAgIGNyZWF0ZV9tb2R1bGUocHJvZ3JhbSwgZm9ybWF0LCBuYW1lLCBiYW5uZXIsIGNvbXBpbGVfb3B0aW9ucy5zdmVsdGVQYXRoLCBpbXBvcnRlZF9oZWxwZXJzLCByZWZlcmVuY2VkX2dsb2JhbHMsIHRoaXMuaW1wb3J0cywgdGhpcy52YXJzXG5cdCAgICAgICAgICAgICAgICAuZmlsdGVyKHZhcmlhYmxlID0+IHZhcmlhYmxlLm1vZHVsZSAmJiB2YXJpYWJsZS5leHBvcnRfbmFtZSlcblx0ICAgICAgICAgICAgICAgIC5tYXAodmFyaWFibGUgPT4gKHtcblx0ICAgICAgICAgICAgICAgIG5hbWU6IHZhcmlhYmxlLm5hbWUsXG5cdCAgICAgICAgICAgICAgICBhczogdmFyaWFibGUuZXhwb3J0X25hbWUsXG5cdCAgICAgICAgICAgIH0pKSk7XG5cdCAgICAgICAgICAgIGNzcyA9IGNvbXBpbGVfb3B0aW9ucy5jdXN0b21FbGVtZW50XG5cdCAgICAgICAgICAgICAgICA/IHsgY29kZTogbnVsbCwgbWFwOiBudWxsIH1cblx0ICAgICAgICAgICAgICAgIDogcmVzdWx0LmNzcztcblx0ICAgICAgICAgICAganMgPSBwcmludChwcm9ncmFtLCB7XG5cdCAgICAgICAgICAgICAgICBzb3VyY2VNYXBTb3VyY2U6IGNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAganMubWFwLnNvdXJjZXMgPSBbXG5cdCAgICAgICAgICAgICAgICBjb21waWxlX29wdGlvbnMuZmlsZW5hbWUgPyBnZXRfcmVsYXRpdmVfcGF0aChjb21waWxlX29wdGlvbnMub3V0cHV0RmlsZW5hbWUgfHwgJycsIGNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZSkgOiBudWxsXG5cdCAgICAgICAgICAgIF07XG5cdCAgICAgICAgICAgIGpzLm1hcC5zb3VyY2VzQ29udGVudCA9IFtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc291cmNlXG5cdCAgICAgICAgICAgIF07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGpzLFxuXHQgICAgICAgICAgICBjc3MsXG5cdCAgICAgICAgICAgIGFzdDogdGhpcy5vcmlnaW5hbF9hc3QsXG5cdCAgICAgICAgICAgIHdhcm5pbmdzOiB0aGlzLndhcm5pbmdzLFxuXHQgICAgICAgICAgICB2YXJzOiB0aGlzLnZhcnNcblx0ICAgICAgICAgICAgICAgIC5maWx0ZXIodiA9PiAhdi5nbG9iYWwgJiYgIXYuaW50ZXJuYWwpXG5cdCAgICAgICAgICAgICAgICAubWFwKHYgPT4gKHtcblx0ICAgICAgICAgICAgICAgIG5hbWU6IHYubmFtZSxcblx0ICAgICAgICAgICAgICAgIGV4cG9ydF9uYW1lOiB2LmV4cG9ydF9uYW1lIHx8IG51bGwsXG5cdCAgICAgICAgICAgICAgICBpbmplY3RlZDogdi5pbmplY3RlZCB8fCBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIG1vZHVsZTogdi5tb2R1bGUgfHwgZmFsc2UsXG5cdCAgICAgICAgICAgICAgICBtdXRhdGVkOiB2Lm11dGF0ZWQgfHwgZmFsc2UsXG5cdCAgICAgICAgICAgICAgICByZWFzc2lnbmVkOiB2LnJlYXNzaWduZWQgfHwgZmFsc2UsXG5cdCAgICAgICAgICAgICAgICByZWZlcmVuY2VkOiB2LnJlZmVyZW5jZWQgfHwgZmFsc2UsXG5cdCAgICAgICAgICAgICAgICB3cml0YWJsZTogdi53cml0YWJsZSB8fCBmYWxzZSxcblx0ICAgICAgICAgICAgICAgIHJlZmVyZW5jZWRfZnJvbV9zY3JpcHQ6IHYucmVmZXJlbmNlZF9mcm9tX3NjcmlwdCB8fCBmYWxzZSxcblx0ICAgICAgICAgICAgfSkpLFxuXHQgICAgICAgICAgICBzdGF0czogdGhpcy5zdGF0cy5yZW5kZXIoKSxcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHQgICAgZ2V0X3VuaXF1ZV9uYW1lKG5hbWUsIHNjb3BlKSB7XG5cdCAgICAgICAgaWYgKHRlc3QpXG5cdCAgICAgICAgICAgIG5hbWUgPSBgJHtuYW1lfSRgO1xuXHQgICAgICAgIGxldCBhbGlhcyA9IG5hbWU7XG5cdCAgICAgICAgZm9yIChsZXQgaSA9IDE7IHJlc2VydmVkLmhhcyhhbGlhcykgfHxcblx0ICAgICAgICAgICAgdGhpcy52YXJfbG9va3VwLmhhcyhhbGlhcykgfHxcblx0ICAgICAgICAgICAgdGhpcy51c2VkX25hbWVzLmhhcyhhbGlhcykgfHxcblx0ICAgICAgICAgICAgdGhpcy5nbG9iYWxseV91c2VkX25hbWVzLmhhcyhhbGlhcykgfHxcblx0ICAgICAgICAgICAgKHNjb3BlICYmIHNjb3BlLmhhcyhhbGlhcykpOyBhbGlhcyA9IGAke25hbWV9XyR7aSsrfWApXG5cdCAgICAgICAgICAgIDtcblx0ICAgICAgICB0aGlzLnVzZWRfbmFtZXMuYWRkKGFsaWFzKTtcblx0ICAgICAgICByZXR1cm4geyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGFsaWFzIH07XG5cdCAgICB9XG5cdCAgICBnZXRfdW5pcXVlX25hbWVfbWFrZXIoKSB7XG5cdCAgICAgICAgY29uc3QgbG9jYWxfdXNlZF9uYW1lcyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICBmdW5jdGlvbiBhZGQobmFtZSkge1xuXHQgICAgICAgICAgICBsb2NhbF91c2VkX25hbWVzLmFkZChuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVzZXJ2ZWQuZm9yRWFjaChhZGQpO1xuXHQgICAgICAgIGludGVybmFsX2V4cG9ydHMuZm9yRWFjaChhZGQpO1xuXHQgICAgICAgIHRoaXMudmFyX2xvb2t1cC5mb3JFYWNoKChfdmFsdWUsIGtleSkgPT4gYWRkKGtleSkpO1xuXHQgICAgICAgIHJldHVybiAobmFtZSkgPT4ge1xuXHQgICAgICAgICAgICBpZiAodGVzdClcblx0ICAgICAgICAgICAgICAgIG5hbWUgPSBgJHtuYW1lfSRgO1xuXHQgICAgICAgICAgICBsZXQgYWxpYXMgPSBuYW1lO1xuXHQgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgdGhpcy51c2VkX25hbWVzLmhhcyhhbGlhcykgfHwgbG9jYWxfdXNlZF9uYW1lcy5oYXMoYWxpYXMpOyBhbGlhcyA9IGAke25hbWV9XyR7aSsrfWApXG5cdCAgICAgICAgICAgICAgICA7XG5cdCAgICAgICAgICAgIGxvY2FsX3VzZWRfbmFtZXMuYWRkKGFsaWFzKTtcblx0ICAgICAgICAgICAgdGhpcy5nbG9iYWxseV91c2VkX25hbWVzLmFkZChhbGlhcyk7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG5cdCAgICAgICAgICAgICAgICBuYW1lOiBhbGlhc1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdCAgICBlcnJvcihwb3MsIGUpIHtcblx0ICAgICAgICBlcnJvciQxKGUubWVzc2FnZSwge1xuXHQgICAgICAgICAgICBuYW1lOiAnVmFsaWRhdGlvbkVycm9yJyxcblx0ICAgICAgICAgICAgY29kZTogZS5jb2RlLFxuXHQgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuXHQgICAgICAgICAgICBzdGFydDogcG9zLnN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHBvcy5lbmQsXG5cdCAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmNvbXBpbGVfb3B0aW9ucy5maWxlbmFtZSxcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHdhcm4ocG9zLCB3YXJuaW5nKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaWdub3JlcyAmJiB0aGlzLmlnbm9yZXMuaGFzKHdhcm5pbmcuY29kZSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubG9jYXRlKHBvcy5zdGFydCk7XG5cdCAgICAgICAgY29uc3QgZW5kID0gdGhpcy5sb2NhdGUocG9zLmVuZCk7XG5cdCAgICAgICAgY29uc3QgZnJhbWUgPSBnZXRfY29kZV9mcmFtZSh0aGlzLnNvdXJjZSwgc3RhcnQubGluZSAtIDEsIHN0YXJ0LmNvbHVtbik7XG5cdCAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKHtcblx0ICAgICAgICAgICAgY29kZTogd2FybmluZy5jb2RlLFxuXHQgICAgICAgICAgICBtZXNzYWdlOiB3YXJuaW5nLm1lc3NhZ2UsXG5cdCAgICAgICAgICAgIGZyYW1lLFxuXHQgICAgICAgICAgICBzdGFydCxcblx0ICAgICAgICAgICAgZW5kLFxuXHQgICAgICAgICAgICBwb3M6IHBvcy5zdGFydCxcblx0ICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuY29tcGlsZV9vcHRpb25zLmZpbGVuYW1lLFxuXHQgICAgICAgICAgICB0b1N0cmluZzogKCkgPT4gYCR7d2FybmluZy5tZXNzYWdlfSAoJHtzdGFydC5saW5lfToke3N0YXJ0LmNvbHVtbn0pXFxuJHtmcmFtZX1gLFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgZXh0cmFjdF9pbXBvcnRzKG5vZGUpIHtcblx0ICAgICAgICB0aGlzLmltcG9ydHMucHVzaChub2RlKTtcblx0ICAgIH1cblx0ICAgIGV4dHJhY3RfZXhwb3J0cyhub2RlKSB7XG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0V4cG9ydERlZmF1bHREZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiBgZGVmYXVsdC1leHBvcnRgLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYEEgY29tcG9uZW50IGNhbm5vdCBoYXZlIGEgZGVmYXVsdCBleHBvcnRgLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nKSB7XG5cdCAgICAgICAgICAgIGlmIChub2RlLnNvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogYG5vdC1pbXBsZW1lbnRlZGAsXG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEEgY29tcG9uZW50IGN1cnJlbnRseSBjYW5ub3QgaGF2ZSBhbiBleHBvcnQgLi4uIGZyb21gLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5vZGUuZGVjbGFyYXRpb24pIHtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlLmRlY2xhcmF0aW9uLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbGFyYXRvciA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RfbmFtZXMoZGVjbGFyYXRvci5pZCkuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmV4cG9ydF9uYW1lID0gbmFtZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZS53cml0YWJsZSAmJiAhKHZhcmlhYmxlLnJlZmVyZW5jZWQgfHwgdmFyaWFibGUucmVmZXJlbmNlZF9mcm9tX3NjcmlwdCB8fCB2YXJpYWJsZS5zdWJzY3JpYmFibGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuKGRlY2xhcmF0b3IsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYHVudXNlZC1leHBvcnQtbGV0YCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7dGhpcy5uYW1lLm5hbWV9IGhhcyB1bnVzZWQgZXhwb3J0IHByb3BlcnR5ICcke25hbWV9Jy4gSWYgaXQgaXMgZm9yIGV4dGVybmFsIHJlZmVyZW5jZSBvbmx5LCBwbGVhc2UgY29uc2lkZXIgdXNpbmcgXFxgZXhwb3J0IGNvbnN0ICR7bmFtZX1cXGBgXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBub2RlLmRlY2xhcmF0aW9uLmlkO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5leHBvcnRfbmFtZSA9IG5hbWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kZWNsYXJhdGlvbjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIG5vZGUuc3BlY2lmaWVycy5mb3JFYWNoKHNwZWNpZmllciA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSB0aGlzLnZhcl9sb29rdXAuZ2V0KHNwZWNpZmllci5sb2NhbC5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUuZXhwb3J0X25hbWUgPSBzcGVjaWZpZXIuZXhwb3J0ZWQubmFtZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLndyaXRhYmxlICYmICEodmFyaWFibGUucmVmZXJlbmNlZCB8fCB2YXJpYWJsZS5yZWZlcmVuY2VkX2Zyb21fc2NyaXB0IHx8IHZhcmlhYmxlLnN1YnNjcmliYWJsZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FybihzcGVjaWZpZXIsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgdW51c2VkLWV4cG9ydC1sZXRgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke3RoaXMubmFtZS5uYW1lfSBoYXMgdW51c2VkIGV4cG9ydCBwcm9wZXJ0eSAnJHtzcGVjaWZpZXIuZXhwb3J0ZWQubmFtZX0nLiBJZiBpdCBpcyBmb3IgZXh0ZXJuYWwgcmVmZXJlbmNlIG9ubHksIHBsZWFzZSBjb25zaWRlciB1c2luZyBcXGBleHBvcnQgY29uc3QgJHtzcGVjaWZpZXIuZXhwb3J0ZWQubmFtZX1cXGBgXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBleHRyYWN0X2phdmFzY3JpcHQoc2NyaXB0KSB7XG5cdCAgICAgICAgaWYgKCFzY3JpcHQpXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIHJldHVybiBzY3JpcHQuY29udGVudC5ib2R5LmZpbHRlcihub2RlID0+IHtcblx0ICAgICAgICAgICAgaWYgKCFub2RlKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5ob2lzdGFibGVfbm9kZXMuaGFzKG5vZGUpKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5yZWFjdGl2ZV9kZWNsYXJhdGlvbl9ub2Rlcy5oYXMobm9kZSkpXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicpXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdFeHBvcnREZWNsYXJhdGlvbicgJiYgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aCA+IDApXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgd2Fsa19tb2R1bGVfanMoKSB7XG5cdCAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcztcblx0ICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmFzdC5tb2R1bGU7XG5cdCAgICAgICAgaWYgKCFzY3JpcHQpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB3YWxrKHNjcmlwdC5jb250ZW50LCB7XG5cdCAgICAgICAgICAgIGVudGVyKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdMYWJlbGVkU3RhdGVtZW50JyAmJiBub2RlLmxhYmVsLm5hbWUgPT09ICckJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKG5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ21vZHVsZS1zY3JpcHQtcmVhY3RpdmUtZGVjbGFyYXRpb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnJDogaGFzIG5vIGVmZmVjdCBpbiBhIG1vZHVsZSBzY3JpcHQnLFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGNvbnN0IHsgc2NvcGUsIGdsb2JhbHMgfSA9IGNyZWF0ZV9zY29wZXMoc2NyaXB0LmNvbnRlbnQpO1xuXHQgICAgICAgIHRoaXMubW9kdWxlX3Njb3BlID0gc2NvcGU7XG5cdCAgICAgICAgc2NvcGUuZGVjbGFyYXRpb25zLmZvckVhY2goKG5vZGUsIG5hbWUpID0+IHtcblx0ICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICckJykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogJ2lsbGVnYWwtZGVjbGFyYXRpb24nLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUaGUgJCBwcmVmaXggaXMgcmVzZXJ2ZWQsIGFuZCBjYW5ub3QgYmUgdXNlZCBmb3IgdmFyaWFibGUgYW5kIGltcG9ydCBuYW1lc2AsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjb25zdCB3cml0YWJsZSA9IG5vZGUudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nICYmIChub2RlLmtpbmQgPT09ICd2YXInIHx8IG5vZGUua2luZCA9PT0gJ2xldCcpO1xuXHQgICAgICAgICAgICB0aGlzLmFkZF92YXIoe1xuXHQgICAgICAgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgICAgICAgIG1vZHVsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIGhvaXN0YWJsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIHdyaXRhYmxlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGdsb2JhbHMuZm9yRWFjaCgobm9kZSwgbmFtZSkgPT4ge1xuXHQgICAgICAgICAgICBpZiAobmFtZVswXSA9PT0gJyQnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmVycm9yKG5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlOiAnaWxsZWdhbC1zdWJzY3JpcHRpb24nLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBDYW5ub3QgcmVmZXJlbmNlIHN0b3JlIHZhbHVlIGluc2lkZSA8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5gLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZF92YXIoe1xuXHQgICAgICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgZ2xvYmFsOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZTogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb25zdCB7IGJvZHkgfSA9IHNjcmlwdC5jb250ZW50O1xuXHQgICAgICAgIGxldCBpID0gYm9keS5sZW5ndGg7XG5cdCAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBib2R5W2ldO1xuXHQgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSW1wb3J0RGVjbGFyYXRpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmV4dHJhY3RfaW1wb3J0cyhub2RlKTtcblx0ICAgICAgICAgICAgICAgIGJvZHkuc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICgvXkV4cG9ydC8udGVzdChub2RlLnR5cGUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHRoaXMuZXh0cmFjdF9leHBvcnRzKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYm9keVtpXSA9IHJlcGxhY2VtZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYm9keS5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICB3YWxrX2luc3RhbmNlX2pzX3ByZV90ZW1wbGF0ZSgpIHtcblx0ICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmFzdC5pbnN0YW5jZTtcblx0ICAgICAgICBpZiAoIXNjcmlwdClcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIC8vIGluamVjdCB2YXJzIGZvciByZWFjdGl2ZSBkZWNsYXJhdGlvbnNcblx0ICAgICAgICBzY3JpcHQuY29udGVudC5ib2R5LmZvckVhY2gobm9kZSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgIT09ICdMYWJlbGVkU3RhdGVtZW50Jylcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgaWYgKG5vZGUuYm9keS50eXBlICE9PSAnRXhwcmVzc2lvblN0YXRlbWVudCcpXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIGNvbnN0IHsgZXhwcmVzc2lvbiB9ID0gbm9kZS5ib2R5O1xuXHQgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi50eXBlICE9PSAnQXNzaWdubWVudEV4cHJlc3Npb24nKVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5sZWZ0LnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJylcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgZXh0cmFjdF9uYW1lcyhleHByZXNzaW9uLmxlZnQpLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMudmFyX2xvb2t1cC5oYXMobmFtZSkgJiYgbmFtZVswXSAhPT0gJyQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmplY3RlZF9yZWFjdGl2ZV9kZWNsYXJhdGlvbl92YXJzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgY29uc3QgeyBzY29wZTogaW5zdGFuY2Vfc2NvcGUsIG1hcCwgZ2xvYmFscyB9ID0gY3JlYXRlX3Njb3BlcyhzY3JpcHQuY29udGVudCk7XG5cdCAgICAgICAgdGhpcy5pbnN0YW5jZV9zY29wZSA9IGluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgIHRoaXMuaW5zdGFuY2Vfc2NvcGVfbWFwID0gbWFwO1xuXHQgICAgICAgIGluc3RhbmNlX3Njb3BlLmRlY2xhcmF0aW9ucy5mb3JFYWNoKChub2RlLCBuYW1lKSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChuYW1lWzBdID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXJyb3Iobm9kZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdpbGxlZ2FsLWRlY2xhcmF0aW9uJyxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVGhlICQgcHJlZml4IGlzIHJlc2VydmVkLCBhbmQgY2Fubm90IGJlIHVzZWQgZm9yIHZhcmlhYmxlIGFuZCBpbXBvcnQgbmFtZXNgLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3Qgd3JpdGFibGUgPSBub2RlLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJyAmJiAobm9kZS5raW5kID09PSAndmFyJyB8fCBub2RlLmtpbmQgPT09ICdsZXQnKTtcblx0ICAgICAgICAgICAgdGhpcy5hZGRfdmFyKHtcblx0ICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICBpbml0aWFsaXNlZDogaW5zdGFuY2Vfc2NvcGUuaW5pdGlhbGlzZWRfZGVjbGFyYXRpb25zLmhhcyhuYW1lKSxcblx0ICAgICAgICAgICAgICAgIHdyaXRhYmxlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB0aGlzLm5vZGVfZm9yX2RlY2xhcmF0aW9uLnNldChuYW1lLCBub2RlKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBnbG9iYWxzLmZvckVhY2goKG5vZGUsIG5hbWUpID0+IHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMudmFyX2xvb2t1cC5oYXMobmFtZSkpXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmluamVjdGVkX3JlYWN0aXZlX2RlY2xhcmF0aW9uX3ZhcnMuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZF92YXIoe1xuXHQgICAgICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgaW5qZWN0ZWQ6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgcmVhc3NpZ25lZDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXNlZDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGlzX3Jlc2VydmVkX2tleXdvcmQobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkX3Zhcih7XG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgICAgICAgICAgICBpbmplY3RlZDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKG5hbWVbMF0gPT09ICckJykge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICckJyB8fCBuYW1lWzFdID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKG5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ2lsbGVnYWwtZ2xvYmFsJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7bmFtZX0gaXMgYW4gaWxsZWdhbCB2YXJpYWJsZSBuYW1lYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGRfdmFyKHtcblx0ICAgICAgICAgICAgICAgICAgICBuYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgIGluamVjdGVkOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgIG11dGF0ZWQ6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkX3JlZmVyZW5jZShuYW1lLnNsaWNlKDEpKTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChuYW1lLnNsaWNlKDEpKTtcblx0ICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLnN1YnNjcmliYWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUucmVmZXJlbmNlZF9mcm9tX3NjcmlwdCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZF92YXIoe1xuXHQgICAgICAgICAgICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgZ2xvYmFsOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZTogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLnRyYWNrX3JlZmVyZW5jZXNfYW5kX211dGF0aW9ucygpO1xuXHQgICAgfVxuXHQgICAgd2Fsa19pbnN0YW5jZV9qc19wb3N0X3RlbXBsYXRlKCkge1xuXHQgICAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuYXN0Lmluc3RhbmNlO1xuXHQgICAgICAgIGlmICghc2NyaXB0KVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgdGhpcy5wb3N0X3RlbXBsYXRlX3dhbGsoKTtcblx0ICAgICAgICB0aGlzLmhvaXN0X2luc3RhbmNlX2RlY2xhcmF0aW9ucygpO1xuXHQgICAgICAgIHRoaXMuZXh0cmFjdF9yZWFjdGl2ZV9kZWNsYXJhdGlvbnMoKTtcblx0ICAgIH1cblx0ICAgIHBvc3RfdGVtcGxhdGVfd2FsaygpIHtcblx0ICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmFzdC5pbnN0YW5jZTtcblx0ICAgICAgICBpZiAoIXNjcmlwdClcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXM7XG5cdCAgICAgICAgY29uc3QgeyBjb250ZW50IH0gPSBzY3JpcHQ7XG5cdCAgICAgICAgY29uc3QgeyBpbnN0YW5jZV9zY29wZSwgaW5zdGFuY2Vfc2NvcGVfbWFwOiBtYXAgfSA9IHRoaXM7XG5cdCAgICAgICAgbGV0IHNjb3BlID0gaW5zdGFuY2Vfc2NvcGU7XG5cdCAgICAgICAgY29uc3QgdG9fcmVtb3ZlID0gW107XG5cdCAgICAgICAgY29uc3QgcmVtb3ZlID0gKHBhcmVudCwgcHJvcCwgaW5kZXgpID0+IHtcblx0ICAgICAgICAgICAgdG9fcmVtb3ZlLnVuc2hpZnQoW3BhcmVudCwgcHJvcCwgaW5kZXhdKTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGxldCBzY29wZV91cGRhdGVkID0gZmFsc2U7XG5cdCAgICAgICAgbGV0IGdlbmVyYXRvcl9jb3VudCA9IDA7XG5cdCAgICAgICAgd2Fsayhjb250ZW50LCB7XG5cdCAgICAgICAgICAgIGVudGVyKG5vZGUsIHBhcmVudCwgcHJvcCwgaW5kZXgpIHtcblx0ICAgICAgICAgICAgICAgIGlmICgobm9kZS50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHwgbm9kZS50eXBlID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJykgJiYgbm9kZS5nZW5lcmF0b3IgPT09IHRydWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBnZW5lcmF0b3JfY291bnQrKztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBtYXAuZ2V0KG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5leHRyYWN0X2ltcG9ydHMobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdG8gdXNlIGFjdHVhbCByZW1vdmVcblx0ICAgICAgICAgICAgICAgICAgICByZW1vdmUocGFyZW50LCBwcm9wLCBpbmRleCk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpcCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKC9eRXhwb3J0Ly50ZXN0KG5vZGUudHlwZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IGNvbXBvbmVudC5leHRyYWN0X2V4cG9ydHMobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZShyZXBsYWNlbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB0byB1c2UgYWN0dWFsIHJlbW92ZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUocGFyZW50LCBwcm9wLCBpbmRleCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNraXAoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuX29uX3VuZGVmaW5lZF9zdG9yZV92YWx1ZV9yZWZlcmVuY2VzKG5vZGUsIHBhcmVudCwgc2NvcGUpO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBsZWF2ZShub2RlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoKG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nIHx8IG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicpICYmIG5vZGUuZ2VuZXJhdG9yID09PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdG9yX2NvdW50LS07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBkbyBpdCBvbiBsZWF2ZSwgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wXG5cdCAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5kZXYgJiYgY29tcG9uZW50LmNvbXBpbGVfb3B0aW9ucy5sb29wR3VhcmRUaW1lb3V0ID4gMCAmJiBnZW5lcmF0b3JfY291bnQgPD0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvX3JlcGxhY2VfZm9yX2xvb3BfcHJvdGVjdCA9IGNvbXBvbmVudC5sb29wX3Byb3RlY3Qobm9kZSwgc2NvcGUsIGNvbXBvbmVudC5jb21waWxlX29wdGlvbnMubG9vcEd1YXJkVGltZW91dCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRvX3JlcGxhY2VfZm9yX2xvb3BfcHJvdGVjdCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2UodG9fcmVwbGFjZV9mb3JfbG9vcF9wcm90ZWN0KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfdXBkYXRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG1hcC5oYXMobm9kZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBmb3IgKGNvbnN0IFtwYXJlbnQsIHByb3AsIGluZGV4XSBvZiB0b19yZW1vdmUpIHtcblx0ICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50W3Byb3BdLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGFyZW50W3Byb3BdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzY29wZV91cGRhdGVkKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHsgc2NvcGUsIG1hcCB9ID0gY3JlYXRlX3Njb3BlcyhzY3JpcHQuY29udGVudCk7XG5cdCAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Vfc2NvcGUgPSBzY29wZTtcblx0ICAgICAgICAgICAgdGhpcy5pbnN0YW5jZV9zY29wZV9tYXAgPSBtYXA7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgdHJhY2tfcmVmZXJlbmNlc19hbmRfbXV0YXRpb25zKCkge1xuXHQgICAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuYXN0Lmluc3RhbmNlO1xuXHQgICAgICAgIGlmICghc2NyaXB0KVxuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcztcblx0ICAgICAgICBjb25zdCB7IGNvbnRlbnQgfSA9IHNjcmlwdDtcblx0ICAgICAgICBjb25zdCB7IGluc3RhbmNlX3Njb3BlLCBtb2R1bGVfc2NvcGUsIGluc3RhbmNlX3Njb3BlX21hcDogbWFwIH0gPSB0aGlzO1xuXHQgICAgICAgIGxldCBzY29wZSA9IGluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgIHdhbGsoY29udGVudCwge1xuXHQgICAgICAgICAgICBlbnRlcihub2RlLCBwYXJlbnQpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBtYXAuZ2V0KG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdVcGRhdGVFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzc2lnbmVlID0gbm9kZS50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nID8gbm9kZS5sZWZ0IDogbm9kZS5hcmd1bWVudDtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lcyA9IGV4dHJhY3RfbmFtZXMoYXNzaWduZWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZXAgPSBhc3NpZ25lZS50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbic7XG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NvcGVfb3duZXIgPSBzY29wZS5maW5kX293bmVyKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGVfb3duZXIgIT09IG51bGxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2NvcGVfb3duZXIgPT09IGluc3RhbmNlX3Njb3BlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG1vZHVsZV9zY29wZSAmJiBtb2R1bGVfc2NvcGUuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlW2RlZXAgPyAnbXV0YXRlZCcgOiAncmVhc3NpZ25lZCddID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGlzX3VzZWRfYXNfcmVmZXJlbmNlKG5vZGUsIHBhcmVudCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmplY3QgPSBnZXRfb2JqZWN0KG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5maW5kX293bmVyKG9iamVjdC5uYW1lKSA9PT0gaW5zdGFuY2Vfc2NvcGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQob2JqZWN0Lm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5yZWZlcmVuY2VkX2Zyb21fc2NyaXB0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGxlYXZlKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICB3YXJuX29uX3VuZGVmaW5lZF9zdG9yZV92YWx1ZV9yZWZlcmVuY2VzKG5vZGUsIHBhcmVudCwgc2NvcGUpIHtcblx0ICAgICAgICBpZiAobm9kZS50eXBlID09PSAnTGFiZWxlZFN0YXRlbWVudCcgJiZcblx0ICAgICAgICAgICAgbm9kZS5sYWJlbC5uYW1lID09PSAnJCcgJiZcblx0ICAgICAgICAgICAgcGFyZW50LnR5cGUgIT09ICdQcm9ncmFtJykge1xuXHQgICAgICAgICAgICB0aGlzLndhcm4obm9kZSwge1xuXHQgICAgICAgICAgICAgICAgY29kZTogJ25vbi10b3AtbGV2ZWwtcmVhY3RpdmUtZGVjbGFyYXRpb24nLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogJyQ6IGhhcyBubyBlZmZlY3Qgb3V0c2lkZSBvZiB0aGUgdG9wLWxldmVsJyxcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpc1JlZmVyZW5jZShub2RlLCBwYXJlbnQpKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG9iamVjdCA9IGdldF9vYmplY3Qobm9kZSk7XG5cdCAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gb2JqZWN0O1xuXHQgICAgICAgICAgICBpZiAobmFtZVswXSA9PT0gJyQnKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMud2Fybl9pZl91bmRlZmluZWQobmFtZSwgb2JqZWN0LCBudWxsKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChuYW1lWzFdICE9PSAnJCcgJiYgc2NvcGUuaGFzKG5hbWUuc2xpY2UoMSkpICYmIHNjb3BlLmZpbmRfb3duZXIobmFtZS5zbGljZSgxKSkgIT09IHRoaXMuaW5zdGFuY2Vfc2NvcGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKG5vZGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYGNvbnRleHR1YWwtc3RvcmVgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgU3RvcmVzIG11c3QgYmUgZGVjbGFyZWQgYXQgdGhlIHRvcCBsZXZlbCBvZiB0aGUgY29tcG9uZW50ICh0aGlzIG1heSBjaGFuZ2UgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBTdmVsdGUpYFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgbG9vcF9wcm90ZWN0KG5vZGUsIHNjb3BlLCB0aW1lb3V0KSB7XG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ1doaWxlU3RhdGVtZW50JyB8fFxuXHQgICAgICAgICAgICBub2RlLnR5cGUgPT09ICdGb3JTdGF0ZW1lbnQnIHx8XG5cdCAgICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ0RvV2hpbGVTdGF0ZW1lbnQnKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gdGhpcy5nZXRfdW5pcXVlX25hbWUoJ2d1YXJkJywgc2NvcGUpO1xuXHQgICAgICAgICAgICB0aGlzLnVzZWRfbmFtZXMuYWRkKGd1YXJkLm5hbWUpO1xuXHQgICAgICAgICAgICBjb25zdCBiZWZvcmUgPSBiIGBjb25zdCAke2d1YXJkfSA9IEBsb29wX2d1YXJkKCR7dGltZW91dH0pYDtcblx0ICAgICAgICAgICAgY29uc3QgaW5zaWRlID0gYiBgJHtndWFyZH0oKTtgO1xuXHQgICAgICAgICAgICAvLyB3cmFwIGV4cHJlc3Npb24gc3RhdGVtZW50IHdpdGggQmxvY2tTdGF0ZW1lbnRcblx0ICAgICAgICAgICAgaWYgKG5vZGUuYm9keS50eXBlICE9PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlLmJvZHkgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50Jyxcblx0ICAgICAgICAgICAgICAgICAgICBib2R5OiBbbm9kZS5ib2R5XSxcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbm9kZS5ib2R5LmJvZHkucHVzaChpbnNpZGVbMF0pO1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50Jyxcblx0ICAgICAgICAgICAgICAgIGJvZHk6IFtcblx0ICAgICAgICAgICAgICAgICAgICBiZWZvcmVbMF0sXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZSxcblx0ICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHQgICAgcmV3cml0ZV9wcm9wcyhnZXRfaW5zZXJ0KSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmFzdC5pbnN0YW5jZSlcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXM7XG5cdCAgICAgICAgY29uc3QgeyBpbnN0YW5jZV9zY29wZSwgaW5zdGFuY2Vfc2NvcGVfbWFwOiBtYXAgfSA9IHRoaXM7XG5cdCAgICAgICAgbGV0IHNjb3BlID0gaW5zdGFuY2Vfc2NvcGU7XG5cdCAgICAgICAgd2Fsayh0aGlzLmFzdC5pbnN0YW5jZS5jb250ZW50LCB7XG5cdCAgICAgICAgICAgIGVudGVyKG5vZGUsIHBhcmVudCwga2V5LCBpbmRleCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKC9GdW5jdGlvbi8udGVzdChub2RlLnR5cGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpcCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG1hcC5oYXMobm9kZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzY29wZSA9IG1hcC5nZXQobm9kZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5raW5kID09PSAndmFyJyB8fCBzY29wZSA9PT0gaW5zdGFuY2Vfc2NvcGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsYXJhdG9yID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNsYXJhdG9yLmlkLnR5cGUgIT09ICdJZGVudGlmaWVyJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc2VydHMgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0X25hbWVzKGRlY2xhcmF0b3IuaWQpLmZvckVhY2gobmFtZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gY29tcG9uZW50LnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUuZXhwb3J0X25hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gaXMgdGhpcyBzdGlsbCB0cnVlIHBvc3QtIzM1Mzk/XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoZGVjbGFyYXRvciwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdkZXN0cnVjdHVyZWQtcHJvcCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYENhbm5vdCBkZWNsYXJlIHByb3BzIGluIGRlc3RydWN0dXJlZCBkZWNsYXJhdGlvbmAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUuc3Vic2NyaWJhYmxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRzLnB1c2goZ2V0X2luc2VydCh2YXJpYWJsZSkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydHMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFtrZXldLnNwbGljZShpbmRleCArIDEsIDAsIC4uLmluc2VydHMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGRlY2xhcmF0b3IuaWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXBvbmVudC52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZS5leHBvcnRfbmFtZSAmJiB2YXJpYWJsZS53cml0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc2VydCA9IHZhcmlhYmxlLnN1YnNjcmliYWJsZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdldF9pbnNlcnQodmFyaWFibGUpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRba2V5XS5zcGxpY2UoaW5kZXggKyAxLCAwLCBpbnNlcnQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0b3IuaWQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogW3tcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUHJvcGVydHknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRoYW5kOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ2luaXQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyB0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IHZhcmlhYmxlLmV4cG9ydF9uYW1lIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRlY2xhcmF0b3IuaW5pdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBc3NpZ25tZW50UGF0dGVybicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBkZWNsYXJhdG9yLmlkLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGRlY2xhcmF0b3IuaW5pdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVjbGFyYXRvci5pZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0b3IuaW5pdCA9IHggYCQkcHJvcHNgO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFyaWFibGUuc3Vic2NyaWJhYmxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zZXJ0ID0gZ2V0X2luc2VydCh2YXJpYWJsZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50W2tleV0uc3BsaWNlKGluZGV4ICsgMSwgMCwgLi4uaW5zZXJ0KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBsZWF2ZShub2RlLCBwYXJlbnQsIF9rZXksIGluZGV4KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nICYmIG5vZGUuZGVjbGFyYXRpb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYm9keVtpbmRleF0gPSBub2RlLmRlY2xhcmF0aW9uO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgaG9pc3RfaW5zdGFuY2VfZGVjbGFyYXRpb25zKCkge1xuXHQgICAgICAgIC8vIHdlIGNhbiBzYWZlbHkgaG9pc3QgdmFyaWFibGUgZGVjbGFyYXRpb25zIHRoYXQgYXJlXG5cdCAgICAgICAgLy8gaW5pdGlhbGlzZWQgdG8gbGl0ZXJhbHMsIGFuZCBmdW5jdGlvbnMgdGhhdCBkb24ndFxuXHQgICAgICAgIC8vIHJlZmVyZW5jZSBpbnN0YW5jZSB2YXJpYWJsZXMgb3RoZXIgdGhhbiBvdGhlclxuXHQgICAgICAgIC8vIGhvaXN0YWJsZSBmdW5jdGlvbnMuIFRPRE8gb3RoZXJzP1xuXHQgICAgICAgIGNvbnN0IHsgaG9pc3RhYmxlX25vZGVzLCB2YXJfbG9va3VwLCBpbmplY3RlZF9yZWFjdGl2ZV9kZWNsYXJhdGlvbl92YXJzLCBpbXBvcnRzLCB9ID0gdGhpcztcblx0ICAgICAgICBjb25zdCB0b3BfbGV2ZWxfZnVuY3Rpb25fZGVjbGFyYXRpb25zID0gbmV3IE1hcCgpO1xuXHQgICAgICAgIGNvbnN0IHsgYm9keSB9ID0gdGhpcy5hc3QuaW5zdGFuY2UuY29udGVudDtcblx0ICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGJvZHlbaV07XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgYWxsX2hvaXN0YWJsZSA9IG5vZGUuZGVjbGFyYXRpb25zLmV2ZXJ5KGQgPT4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghZC5pbml0KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGQuaW5pdC50eXBlICE9PSAnTGl0ZXJhbCcpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBjb25zdCB2YWx1ZXMgY2FuIGJlIGNoYW5nZWQgYnkgZS5nLiBzdmVsdGUgZGV2dG9vbHNcblx0ICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBtZWFucyB3ZSBjYW4ndCBob2lzdCBpdFxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmtpbmQgIT09ICdjb25zdCcgJiYgdGhpcy5jb21waWxlX29wdGlvbnMuZGV2KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBkLmlkO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLnZhcl9sb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh2LnJlYXNzaWduZWQpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodi5leHBvcnRfbmFtZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhcl9sb29rdXAuZ2V0KG5hbWUpLnJlYXNzaWduZWQpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YXJzLmZpbmQodmFyaWFibGUgPT4gdmFyaWFibGUubmFtZSA9PT0gbmFtZSAmJiB2YXJpYWJsZS5tb2R1bGUpKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIGlmIChhbGxfaG9pc3RhYmxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5kZWNsYXJhdGlvbnMuZm9yRWFjaChkID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSB0aGlzLnZhcl9sb29rdXAuZ2V0KGQuaWQubmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmhvaXN0YWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlX25vZGVzLmFkZChub2RlKTtcblx0ICAgICAgICAgICAgICAgICAgICBib2R5LnNwbGljZShpLS0sIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZnVsbHlfaG9pc3RlZC5wdXNoKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJyAmJlxuXHQgICAgICAgICAgICAgICAgbm9kZS5kZWNsYXJhdGlvbiAmJlxuXHQgICAgICAgICAgICAgICAgbm9kZS5kZWNsYXJhdGlvbi50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIHRvcF9sZXZlbF9mdW5jdGlvbl9kZWNsYXJhdGlvbnMuc2V0KG5vZGUuZGVjbGFyYXRpb24uaWQubmFtZSwgbm9kZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0b3BfbGV2ZWxfZnVuY3Rpb25fZGVjbGFyYXRpb25zLnNldChub2RlLmlkLm5hbWUsIG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgY29uc3Qgd2Fsa2luZyA9IG5ldyBTZXQoKTtcblx0ICAgICAgICBjb25zdCBpc19ob2lzdGFibGUgPSBmbl9kZWNsYXJhdGlvbiA9PiB7XG5cdCAgICAgICAgICAgIGlmIChmbl9kZWNsYXJhdGlvbi50eXBlID09PSAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIGZuX2RlY2xhcmF0aW9uID0gZm5fZGVjbGFyYXRpb24uZGVjbGFyYXRpb247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3QgaW5zdGFuY2Vfc2NvcGUgPSB0aGlzLmluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgICAgICBsZXQgc2NvcGUgPSB0aGlzLmluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgICAgICBjb25zdCBtYXAgPSB0aGlzLmluc3RhbmNlX3Njb3BlX21hcDtcblx0ICAgICAgICAgICAgbGV0IGhvaXN0YWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgIC8vIGhhbmRsZSBjeWNsZXNcblx0ICAgICAgICAgICAgd2Fsa2luZy5hZGQoZm5fZGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICB3YWxrKGZuX2RlY2xhcmF0aW9uLCB7XG5cdCAgICAgICAgICAgICAgICBlbnRlcihub2RlLCBwYXJlbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWhvaXN0YWJsZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzKG5vZGUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlID0gbWFwLmdldChub2RlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVmZXJlbmNlKG5vZGUsIHBhcmVudCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBmbGF0dGVuX3JlZmVyZW5jZShub2RlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3duZXIgPSBzY29wZS5maW5kX293bmVyKG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0ZWRfcmVhY3RpdmVfZGVjbGFyYXRpb25fdmFycy5oYXMobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5hbWVbMF0gPT09ICckJyAmJiAhb3duZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG93bmVyID09PSBpbnN0YW5jZV9zY29wZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSB2YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZS5yZWFzc2lnbmVkIHx8IHZhcmlhYmxlLm11dGF0ZWQpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZm5fZGVjbGFyYXRpb24uaWQubmFtZSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUuaG9pc3RhYmxlKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3BfbGV2ZWxfZnVuY3Rpb25fZGVjbGFyYXRpb25zLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyX2RlY2xhcmF0aW9uID0gdG9wX2xldmVsX2Z1bmN0aW9uX2RlY2xhcmF0aW9ucy5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhbGtpbmcuaGFzKG90aGVyX2RlY2xhcmF0aW9uKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGUgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3RoZXJfZGVjbGFyYXRpb24udHlwZSA9PT0gJ0V4cG9ydE5hbWVkRGVjbGFyYXRpb24nICYmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGtpbmcuaGFzKG90aGVyX2RlY2xhcmF0aW9uLmRlY2xhcmF0aW9uKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGUgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzX2hvaXN0YWJsZShvdGhlcl9kZWNsYXJhdGlvbikpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lwKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGxlYXZlKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgY2hlY2tlZC5hZGQoZm5fZGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICB3YWxraW5nLmRlbGV0ZShmbl9kZWNsYXJhdGlvbik7XG5cdCAgICAgICAgICAgIHJldHVybiBob2lzdGFibGU7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBub2RlXSBvZiB0b3BfbGV2ZWxfZnVuY3Rpb25fZGVjbGFyYXRpb25zKSB7XG5cdCAgICAgICAgICAgIGlmIChpc19ob2lzdGFibGUobm9kZSkpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdGhpcy52YXJfbG9va3VwLmdldChuYW1lKTtcblx0ICAgICAgICAgICAgICAgIHZhcmlhYmxlLmhvaXN0YWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICBob2lzdGFibGVfbm9kZXMuYWRkKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgaSA9IGJvZHkuaW5kZXhPZihub2RlKTtcblx0ICAgICAgICAgICAgICAgIGJvZHkuc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5mdWxseV9ob2lzdGVkLnB1c2gobm9kZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yIChjb25zdCB7IHNwZWNpZmllcnMgfSBvZiBpbXBvcnRzKSB7XG5cdCAgICAgICAgICAgIGZvciAoY29uc3Qgc3BlY2lmaWVyIG9mIHNwZWNpZmllcnMpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdmFyX2xvb2t1cC5nZXQoc3BlY2lmaWVyLmxvY2FsLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKCF2YXJpYWJsZS5tdXRhdGVkIHx8IHZhcmlhYmxlLnN1YnNjcmliYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlLmhvaXN0YWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBleHRyYWN0X3JlYWN0aXZlX2RlY2xhcmF0aW9ucygpIHtcblx0ICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzO1xuXHQgICAgICAgIGNvbnN0IHVuc29ydGVkX3JlYWN0aXZlX2RlY2xhcmF0aW9ucyA9IFtdO1xuXHQgICAgICAgIHRoaXMuYXN0Lmluc3RhbmNlLmNvbnRlbnQuYm9keS5mb3JFYWNoKG5vZGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnTGFiZWxlZFN0YXRlbWVudCcgJiYgbm9kZS5sYWJlbC5uYW1lID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucmVhY3RpdmVfZGVjbGFyYXRpb25fbm9kZXMuYWRkKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgYXNzaWduZWVzID0gbmV3IFNldCgpO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgYXNzaWduZWVfbm9kZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cdCAgICAgICAgICAgICAgICBsZXQgc2NvcGUgPSB0aGlzLmluc3RhbmNlX3Njb3BlO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5pbnN0YW5jZV9zY29wZV9tYXA7XG5cdCAgICAgICAgICAgICAgICB3YWxrKG5vZGUuYm9keSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGVudGVyKG5vZGUsIHBhcmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBtYXAuZ2V0KG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdBc3NpZ25tZW50RXhwcmVzc2lvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBnZXRfb2JqZWN0KG5vZGUubGVmdCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0X2lkZW50aWZpZXJzKGxlZnQpLmZvckVhY2gobm9kZSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWVfbm9kZXMuYWRkKG5vZGUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlcy5hZGQobm9kZS5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUub3BlcmF0b3IgIT09ICc9Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5hZGQobGVmdC5uYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdVcGRhdGVFeHByZXNzaW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IGdldF9vYmplY3Qobm9kZS5hcmd1bWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZXMuYWRkKGlkZW50aWZpZXIubmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWZlcmVuY2Uobm9kZSwgcGFyZW50KSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IGdldF9vYmplY3Qobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFzc2lnbmVlX25vZGVzLmhhcyhpZGVudGlmaWVyKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gaWRlbnRpZmllcjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvd25lciA9IHNjb3BlLmZpbmRfb3duZXIobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFibGUgPSBjb21wb25lbnQudmFyX2xvb2t1cC5nZXQobmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5pc19yZWFjdGl2ZV9kZXBlbmRlbmN5ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc193cml0YWJsZV9vcl9tdXRhdGVkID0gdmFyaWFibGUgJiYgKHZhcmlhYmxlLndyaXRhYmxlIHx8IHZhcmlhYmxlLm11dGF0ZWQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIW93bmVyIHx8IG93bmVyID09PSBjb21wb25lbnQuaW5zdGFuY2Vfc2NvcGUpICYmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuYW1lWzBdID09PSAnJCcgfHwgaXNfd3JpdGFibGVfb3JfbXV0YXRlZCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmFkZChuYW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXAoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgbGVhdmUobm9kZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmhhcyhub2RlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB7IGV4cHJlc3Npb24gfSA9IG5vZGUuYm9keTtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gZXhwcmVzc2lvbiAmJiBleHByZXNzaW9uLmxlZnQ7XG5cdCAgICAgICAgICAgICAgICB1bnNvcnRlZF9yZWFjdGl2ZV9kZWNsYXJhdGlvbnMucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgYXNzaWduZWVzLFxuXHQgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcyxcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLFxuXHQgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBjb25zdCBsb29rdXAgPSBuZXcgTWFwKCk7XG5cdCAgICAgICAgdW5zb3J0ZWRfcmVhY3RpdmVfZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbGFyYXRpb24gPT4ge1xuXHQgICAgICAgICAgICBkZWNsYXJhdGlvbi5hc3NpZ25lZXMuZm9yRWFjaChuYW1lID0+IHtcblx0ICAgICAgICAgICAgICAgIGlmICghbG9va3VwLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGxvb2t1cC5zZXQobmFtZSwgW10pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gVE9ETyB3YXJuIG9yIGVycm9yIGlmIGEgbmFtZSBpcyBhc3NpZ25lZCB0byBpblxuXHQgICAgICAgICAgICAgICAgLy8gbXVsdGlwbGUgcmVhY3RpdmUgZGVjbGFyYXRpb25zP1xuXHQgICAgICAgICAgICAgICAgbG9va3VwLmdldChuYW1lKS5wdXNoKGRlY2xhcmF0aW9uKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgY29uc3QgY3ljbGUgPSBjaGVja19ncmFwaF9mb3JfY3ljbGVzKHVuc29ydGVkX3JlYWN0aXZlX2RlY2xhcmF0aW9ucy5yZWR1Y2UoKGFjYywgZGVjbGFyYXRpb24pID0+IHtcblx0ICAgICAgICAgICAgZGVjbGFyYXRpb24uYXNzaWduZWVzLmZvckVhY2godiA9PiB7XG5cdCAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbi5kZXBlbmRlbmNpZXMuZm9yRWFjaCh3ID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWRlY2xhcmF0aW9uLmFzc2lnbmVlcy5oYXModykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYWNjLnB1c2goW3YsIHddKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHJldHVybiBhY2M7XG5cdCAgICAgICAgfSwgW10pKTtcblx0ICAgICAgICBpZiAoY3ljbGUgJiYgY3ljbGUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uTGlzdCA9IGxvb2t1cC5nZXQoY3ljbGVbMF0pO1xuXHQgICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uTGlzdFswXTtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvcihkZWNsYXJhdGlvbi5ub2RlLCB7XG5cdCAgICAgICAgICAgICAgICBjb2RlOiAnY3ljbGljYWwtcmVhY3RpdmUtZGVjbGFyYXRpb24nLFxuXHQgICAgICAgICAgICAgICAgbWVzc2FnZTogYEN5Y2xpY2FsIGRlcGVuZGVuY3kgZGV0ZWN0ZWQ6ICR7Y3ljbGUuam9pbignIOKGkiAnKX1gXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb25zdCBhZGRfZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbiA9PiB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnJlYWN0aXZlX2RlY2xhcmF0aW9ucy5pbmNsdWRlcyhkZWNsYXJhdGlvbikpXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIGRlY2xhcmF0aW9uLmRlcGVuZGVuY2llcy5mb3JFYWNoKG5hbWUgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKGRlY2xhcmF0aW9uLmFzc2lnbmVlcy5oYXMobmFtZSkpXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgY29uc3QgZWFybGllcl9kZWNsYXJhdGlvbnMgPSBsb29rdXAuZ2V0KG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGVhcmxpZXJfZGVjbGFyYXRpb25zKVxuXHQgICAgICAgICAgICAgICAgICAgIGVhcmxpZXJfZGVjbGFyYXRpb25zLmZvckVhY2goYWRkX2RlY2xhcmF0aW9uKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMucmVhY3RpdmVfZGVjbGFyYXRpb25zLnB1c2goZGVjbGFyYXRpb24pO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdW5zb3J0ZWRfcmVhY3RpdmVfZGVjbGFyYXRpb25zLmZvckVhY2goYWRkX2RlY2xhcmF0aW9uKTtcblx0ICAgIH1cblx0ICAgIHdhcm5faWZfdW5kZWZpbmVkKG5hbWUsIG5vZGUsIHRlbXBsYXRlX3Njb3BlKSB7XG5cdCAgICAgICAgaWYgKG5hbWVbMF0gPT09ICckJykge1xuXHQgICAgICAgICAgICBpZiAobmFtZSA9PT0gJyQnIHx8IG5hbWVbMV0gPT09ICckJyAmJiAhaXNfcmVzZXJ2ZWRfa2V5d29yZChuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihub2RlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29kZTogJ2lsbGVnYWwtZ2xvYmFsJyxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtuYW1lfSBpcyBhbiBpbGxlZ2FsIHZhcmlhYmxlIG5hbWVgXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmhhc19yZWFjdGl2ZV9hc3NpZ25tZW50cyA9IHRydWU7IC8vIFRPRE8gZG9lcyB0aGlzIGJlbG9uZyBoZXJlP1xuXHQgICAgICAgICAgICBpZiAoaXNfcmVzZXJ2ZWRfa2V5d29yZChuYW1lKSlcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLnZhcl9sb29rdXAuaGFzKG5hbWUpICYmICF0aGlzLnZhcl9sb29rdXAuZ2V0KG5hbWUpLmdsb2JhbClcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGlmICh0ZW1wbGF0ZV9zY29wZSAmJiB0ZW1wbGF0ZV9zY29wZS5uYW1lcy5oYXMobmFtZSkpXG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICBpZiAoZ2xvYmFscy5oYXMobmFtZSkgJiYgbm9kZS50eXBlICE9PSAnSW5saW5lQ29tcG9uZW50Jylcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIGxldCBtZXNzYWdlID0gYCcke25hbWV9JyBpcyBub3QgZGVmaW5lZGA7XG5cdCAgICAgICAgaWYgKCF0aGlzLmFzdC5pbnN0YW5jZSlcblx0ICAgICAgICAgICAgbWVzc2FnZSArPSBgLiBDb25zaWRlciBhZGRpbmcgYSA8c2NyaXB0PiBibG9jayB3aXRoICdleHBvcnQgbGV0ICR7bmFtZX0nIHRvIGRlY2xhcmUgYSBwcm9wYDtcblx0ICAgICAgICB0aGlzLndhcm4obm9kZSwge1xuXHQgICAgICAgICAgICBjb2RlOiAnbWlzc2luZy1kZWNsYXJhdGlvbicsXG5cdCAgICAgICAgICAgIG1lc3NhZ2UsXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBwdXNoX2lnbm9yZXMoaWdub3Jlcykge1xuXHQgICAgICAgIHRoaXMuaWdub3JlcyA9IG5ldyBTZXQodGhpcy5pZ25vcmVzIHx8IFtdKTtcblx0ICAgICAgICBhZGRfdG9fc2V0KHRoaXMuaWdub3JlcywgaWdub3Jlcyk7XG5cdCAgICAgICAgdGhpcy5pZ25vcmVfc3RhY2sucHVzaCh0aGlzLmlnbm9yZXMpO1xuXHQgICAgfVxuXHQgICAgcG9wX2lnbm9yZXMoKSB7XG5cdCAgICAgICAgdGhpcy5pZ25vcmVfc3RhY2sucG9wKCk7XG5cdCAgICAgICAgdGhpcy5pZ25vcmVzID0gdGhpcy5pZ25vcmVfc3RhY2tbdGhpcy5pZ25vcmVfc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gcHJvY2Vzc19jb21wb25lbnRfb3B0aW9ucyhjb21wb25lbnQsIG5vZGVzKSB7XG5cdCAgICBjb25zdCBjb21wb25lbnRfb3B0aW9ucyA9IHtcblx0ICAgICAgICBpbW11dGFibGU6IGNvbXBvbmVudC5jb21waWxlX29wdGlvbnMuaW1tdXRhYmxlIHx8IGZhbHNlLFxuXHQgICAgICAgIGFjY2Vzc29yczogJ2FjY2Vzc29ycycgaW4gY29tcG9uZW50LmNvbXBpbGVfb3B0aW9uc1xuXHQgICAgICAgICAgICA/IGNvbXBvbmVudC5jb21waWxlX29wdGlvbnMuYWNjZXNzb3JzXG5cdCAgICAgICAgICAgIDogISFjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmN1c3RvbUVsZW1lbnQsXG5cdCAgICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAhIWNvbXBvbmVudC5jb21waWxlX29wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlLFxuXHQgICAgfTtcblx0ICAgIGNvbnN0IG5vZGUgPSBub2Rlcy5maW5kKG5vZGUgPT4gbm9kZS5uYW1lID09PSAnc3ZlbHRlOm9wdGlvbnMnKTtcblx0ICAgIGZ1bmN0aW9uIGdldF92YWx1ZShhdHRyaWJ1dGUsIGNvZGUsIG1lc3NhZ2UpIHtcblx0ICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBhdHRyaWJ1dGU7XG5cdCAgICAgICAgY29uc3QgY2h1bmsgPSB2YWx1ZVswXTtcblx0ICAgICAgICBpZiAoIWNodW5rKVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkge1xuXHQgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7IGNvZGUsIG1lc3NhZ2UgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjaHVuay50eXBlID09PSAnVGV4dCcpXG5cdCAgICAgICAgICAgIHJldHVybiBjaHVuay5kYXRhO1xuXHQgICAgICAgIGlmIChjaHVuay5leHByZXNzaW9uLnR5cGUgIT09ICdMaXRlcmFsJykge1xuXHQgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7IGNvZGUsIG1lc3NhZ2UgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBjaHVuay5leHByZXNzaW9uLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgaWYgKG5vZGUpIHtcblx0ICAgICAgICBub2RlLmF0dHJpYnV0ZXMuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuXHQgICAgICAgICAgICBpZiAoYXR0cmlidXRlLnR5cGUgPT09ICdBdHRyaWJ1dGUnKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGF0dHJpYnV0ZTtcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RhZyc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZSA9ICdpbnZhbGlkLXRhZy1hdHRyaWJ1dGUnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYCd0YWcnIG11c3QgYmUgYSBzdHJpbmcgbGl0ZXJhbGA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IGdldF92YWx1ZShhdHRyaWJ1dGUsIGNvZGUsIG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhZyAhPT0gJ3N0cmluZycgJiYgdGFnICE9PSBudWxsKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHJpYnV0ZSwgeyBjb2RlLCBtZXNzYWdlIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnICYmICEvXlthLXpBLVpdW2EtekEtWjAtOV0qLVthLXpBLVowLTktXSskLy50ZXN0KHRhZykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC10YWctcHJvcGVydHlgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGB0YWcgbmFtZSBtdXN0IGJlIHR3byBvciBtb3JlIHdvcmRzIGpvaW5lZCBieSB0aGUgJy0nIGNoYXJhY3RlcmAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnICYmICFjb21wb25lbnQuY29tcGlsZV9vcHRpb25zLmN1c3RvbUVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC53YXJuKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdtaXNzaW5nLWN1c3RvbS1lbGVtZW50LWNvbXBpbGUtb3B0aW9ucycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRoZSAndGFnJyBvcHRpb24gaXMgdXNlZCB3aGVuIGdlbmVyYXRpbmcgYSBjdXN0b20gZWxlbWVudC4gRGlkIHlvdSBmb3JnZXQgdGhlICdjdXN0b21FbGVtZW50OiB0cnVlJyBjb21waWxlIG9wdGlvbj9gXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRfb3B0aW9ucy50YWcgPSB0YWc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICduYW1lc3BhY2UnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSAnaW52YWxpZC1uYW1lc3BhY2UtYXR0cmlidXRlJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgJ25hbWVzcGFjZScgYXR0cmlidXRlIG11c3QgYmUgYSBzdHJpbmcgbGl0ZXJhbCByZXByZXNlbnRpbmcgYSB2YWxpZCBuYW1lc3BhY2VgO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBucyA9IGdldF92YWx1ZShhdHRyaWJ1dGUsIGNvZGUsIG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5zICE9PSAnc3RyaW5nJylcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5lcnJvcihhdHRyaWJ1dGUsIHsgY29kZSwgbWVzc2FnZSB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkX25hbWVzcGFjZXMuaW5kZXhPZihucykgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGZ1enp5bWF0Y2gobnMsIHZhbGlkX25hbWVzcGFjZXMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1uYW1lc3BhY2UtcHJvcGVydHlgLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBuYW1lc3BhY2UgJyR7bnN9JyAoZGlkIHlvdSBtZWFuICcke21hdGNofSc/KWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLW5hbWVzcGFjZS1wcm9wZXJ0eWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIG5hbWVzcGFjZSAnJHtuc30nYCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRfb3B0aW9ucy5uYW1lc3BhY2UgPSBucztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FjY2Vzc29ycyc6XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW1tdXRhYmxlJzpcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdwcmVzZXJ2ZVdoaXRlc3BhY2UnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBgaW52YWxpZC0ke25hbWV9LXZhbHVlYDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke25hbWV9IGF0dHJpYnV0ZSBtdXN0IGJlIHRydWUgb3IgZmFsc2VgO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldF92YWx1ZShhdHRyaWJ1dGUsIGNvZGUsIG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7IGNvZGUsIG1lc3NhZ2UgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudF9vcHRpb25zW25hbWVdID0gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuZXJyb3IoYXR0cmlidXRlLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgaW52YWxpZC1vcHRpb25zLWF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPHN2ZWx0ZTpvcHRpb25zPiB1bmtub3duIGF0dHJpYnV0ZWAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50LmVycm9yKGF0dHJpYnV0ZSwge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvZGU6IGBpbnZhbGlkLW9wdGlvbnMtYXR0cmlidXRlYCxcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgPHN2ZWx0ZTpvcHRpb25zPiBjYW4gb25seSBoYXZlIHN0YXRpYyAndGFnJywgJ25hbWVzcGFjZScsICdhY2Nlc3NvcnMnLCAnaW1tdXRhYmxlJyBhbmQgJ3ByZXNlcnZlV2hpdGVzcGFjZScgYXR0cmlidXRlc2AsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNvbXBvbmVudF9vcHRpb25zO1xuXHR9XG5cdGZ1bmN0aW9uIGdldF9yZWxhdGl2ZV9wYXRoKGZyb20sIHRvKSB7XG5cdCAgICBjb25zdCBmcm9tX3BhcnRzID0gZnJvbS5zcGxpdCgvWy9cXFxcXS8pO1xuXHQgICAgY29uc3QgdG9fcGFydHMgPSB0by5zcGxpdCgvWy9cXFxcXS8pO1xuXHQgICAgZnJvbV9wYXJ0cy5wb3AoKTsgLy8gZ2V0IGRpcm5hbWVcblx0ICAgIHdoaWxlIChmcm9tX3BhcnRzWzBdID09PSB0b19wYXJ0c1swXSkge1xuXHQgICAgICAgIGZyb21fcGFydHMuc2hpZnQoKTtcblx0ICAgICAgICB0b19wYXJ0cy5zaGlmdCgpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZyb21fcGFydHMubGVuZ3RoKSB7XG5cdCAgICAgICAgbGV0IGkgPSBmcm9tX3BhcnRzLmxlbmd0aDtcblx0ICAgICAgICB3aGlsZSAoaS0tKVxuXHQgICAgICAgICAgICBmcm9tX3BhcnRzW2ldID0gJy4uJztcblx0ICAgIH1cblx0ICAgIHJldHVybiBmcm9tX3BhcnRzLmNvbmNhdCh0b19wYXJ0cykuam9pbignLycpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0X25hbWVfZnJvbV9maWxlbmFtZShmaWxlbmFtZSkge1xuXHQgICAgaWYgKCFmaWxlbmFtZSlcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIGNvbnN0IHBhcnRzID0gZmlsZW5hbWUuc3BsaXQoL1svXFxcXF0vKS5tYXAoZW5jb2RlVVJJKTtcblx0ICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgY29uc3QgaW5kZXhfbWF0Y2ggPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXS5tYXRjaCgvXmluZGV4KFxcLlxcdyspLyk7XG5cdCAgICAgICAgaWYgKGluZGV4X21hdGNoKSB7XG5cdCAgICAgICAgICAgIHBhcnRzLnBvcCgpO1xuXHQgICAgICAgICAgICBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSArPSBpbmRleF9tYXRjaFsxXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBjb25zdCBiYXNlID0gcGFydHMucG9wKClcblx0ICAgICAgICAucmVwbGFjZSgvJS9nLCAndScpXG5cdCAgICAgICAgLnJlcGxhY2UoL1xcLlteLl0rJC8sIFwiXCIpXG5cdCAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aXyQwLTldKy9nLCAnXycpXG5cdCAgICAgICAgLnJlcGxhY2UoL15fLywgJycpXG5cdCAgICAgICAgLnJlcGxhY2UoL18kLywgJycpXG5cdCAgICAgICAgLnJlcGxhY2UoL14oXFxkKS8sICdfJDEnKTtcblx0ICAgIGlmICghYmFzZSkge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGRlcml2ZSBjb21wb25lbnQgbmFtZSBmcm9tIGZpbGUgJHtmaWxlbmFtZX1gKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBiYXNlWzBdLnRvVXBwZXJDYXNlKCkgKyBiYXNlLnNsaWNlKDEpO1xuXHR9XG5cblx0Y29uc3QgdmFsaWRfb3B0aW9ucyA9IFtcblx0ICAgICdmb3JtYXQnLFxuXHQgICAgJ25hbWUnLFxuXHQgICAgJ2ZpbGVuYW1lJyxcblx0ICAgICdnZW5lcmF0ZScsXG5cdCAgICAnb3V0cHV0RmlsZW5hbWUnLFxuXHQgICAgJ2Nzc091dHB1dEZpbGVuYW1lJyxcblx0ICAgICdzdmVsdGVQYXRoJyxcblx0ICAgICdkZXYnLFxuXHQgICAgJ2FjY2Vzc29ycycsXG5cdCAgICAnaW1tdXRhYmxlJyxcblx0ICAgICdoeWRyYXRhYmxlJyxcblx0ICAgICdsZWdhY3knLFxuXHQgICAgJ2N1c3RvbUVsZW1lbnQnLFxuXHQgICAgJ3RhZycsXG5cdCAgICAnY3NzJyxcblx0ICAgICdsb29wR3VhcmRUaW1lb3V0Jyxcblx0ICAgICdwcmVzZXJ2ZUNvbW1lbnRzJyxcblx0ICAgICdwcmVzZXJ2ZVdoaXRlc3BhY2UnXG5cdF07XG5cdGZ1bmN0aW9uIHZhbGlkYXRlX29wdGlvbnMob3B0aW9ucywgd2FybmluZ3MpIHtcblx0ICAgIGNvbnN0IHsgbmFtZSwgZmlsZW5hbWUsIGxvb3BHdWFyZFRpbWVvdXQsIGRldiB9ID0gb3B0aW9ucztcblx0ICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcblx0ICAgICAgICBpZiAoIXZhbGlkX29wdGlvbnMuaW5jbHVkZXMoa2V5KSkge1xuXHQgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGZ1enp5bWF0Y2goa2V5LCB2YWxpZF9vcHRpb25zKTtcblx0ICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgVW5yZWNvZ25pemVkIG9wdGlvbiAnJHtrZXl9J2A7XG5cdCAgICAgICAgICAgIGlmIChtYXRjaClcblx0ICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYCAoZGlkIHlvdSBtZWFuICcke21hdGNofSc/KWA7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIGlmIChuYW1lICYmICEvXlthLXpBLVpfJF1bYS16QS1aXyQwLTldKiQvLnRlc3QobmFtZSkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG9wdGlvbnMubmFtZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllciAoZ290ICcke25hbWV9JylgKTtcblx0ICAgIH1cblx0ICAgIGlmIChuYW1lICYmIC9eW2Etel0vLnRlc3QobmFtZSkpIHtcblx0ICAgICAgICBjb25zdCBtZXNzYWdlID0gYG9wdGlvbnMubmFtZSBzaG91bGQgYmUgY2FwaXRhbGlzZWRgO1xuXHQgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuXHQgICAgICAgICAgICBjb2RlOiBgb3B0aW9ucy1sb3dlcmNhc2UtbmFtZWAsXG5cdCAgICAgICAgICAgIG1lc3NhZ2UsXG5cdCAgICAgICAgICAgIGZpbGVuYW1lLFxuXHQgICAgICAgICAgICB0b1N0cmluZzogKCkgPT4gbWVzc2FnZSxcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGlmIChsb29wR3VhcmRUaW1lb3V0ICYmICFkZXYpIHtcblx0ICAgICAgICBjb25zdCBtZXNzYWdlID0gJ29wdGlvbnMubG9vcEd1YXJkVGltZW91dCBpcyBmb3Igb3B0aW9ucy5kZXYgPSB0cnVlIG9ubHknO1xuXHQgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuXHQgICAgICAgICAgICBjb2RlOiBgb3B0aW9ucy1sb29wLWd1YXJkLXRpbWVvdXRgLFxuXHQgICAgICAgICAgICBtZXNzYWdlLFxuXHQgICAgICAgICAgICBmaWxlbmFtZSxcblx0ICAgICAgICAgICAgdG9TdHJpbmc6ICgpID0+IG1lc3NhZ2UsXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdH1cblx0ZnVuY3Rpb24gY29tcGlsZShzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuXHQgICAgb3B0aW9ucyA9IGFzc2lnbih7IGdlbmVyYXRlOiAnZG9tJywgZGV2OiBmYWxzZSB9LCBvcHRpb25zKTtcblx0ICAgIGNvbnN0IHN0YXRzID0gbmV3IFN0YXRzKCk7XG5cdCAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuXHQgICAgdmFsaWRhdGVfb3B0aW9ucyhvcHRpb25zLCB3YXJuaW5ncyk7XG5cdCAgICBzdGF0cy5zdGFydCgncGFyc2UnKTtcblx0ICAgIGNvbnN0IGFzdCA9IHBhcnNlJDMoc291cmNlLCBvcHRpb25zKTtcblx0ICAgIHN0YXRzLnN0b3AoJ3BhcnNlJyk7XG5cdCAgICBzdGF0cy5zdGFydCgnY3JlYXRlIGNvbXBvbmVudCcpO1xuXHQgICAgY29uc3QgY29tcG9uZW50ID0gbmV3IENvbXBvbmVudChhc3QsIHNvdXJjZSwgb3B0aW9ucy5uYW1lIHx8IGdldF9uYW1lX2Zyb21fZmlsZW5hbWUob3B0aW9ucy5maWxlbmFtZSkgfHwgJ0NvbXBvbmVudCcsIG9wdGlvbnMsIHN0YXRzLCB3YXJuaW5ncyk7XG5cdCAgICBzdGF0cy5zdG9wKCdjcmVhdGUgY29tcG9uZW50Jyk7XG5cdCAgICBjb25zdCByZXN1bHQgPSBvcHRpb25zLmdlbmVyYXRlID09PSBmYWxzZVxuXHQgICAgICAgID8gbnVsbFxuXHQgICAgICAgIDogb3B0aW9ucy5nZW5lcmF0ZSA9PT0gJ3Nzcidcblx0ICAgICAgICAgICAgPyBzc3IoY29tcG9uZW50LCBvcHRpb25zKVxuXHQgICAgICAgICAgICA6IGRvbShjb21wb25lbnQsIG9wdGlvbnMpO1xuXHQgICAgcmV0dXJuIGNvbXBvbmVudC5nZW5lcmF0ZShyZXN1bHQpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfYXR0cmlidXRlcyhzdHIpIHtcblx0ICAgIGNvbnN0IGF0dHJzID0ge307XG5cdCAgICBzdHIuc3BsaXQoL1xccysvKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChhdHRyID0+IHtcblx0ICAgICAgICBjb25zdCBwID0gYXR0ci5pbmRleE9mKCc9Jyk7XG5cdCAgICAgICAgaWYgKHAgPT09IC0xKSB7XG5cdCAgICAgICAgICAgIGF0dHJzW2F0dHJdID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGF0dHJzW2F0dHIuc2xpY2UoMCwgcCldID0gYCdcImAuaW5jbHVkZXMoYXR0cltwICsgMV0pID9cblx0ICAgICAgICAgICAgICAgIGF0dHIuc2xpY2UocCArIDIsIC0xKSA6XG5cdCAgICAgICAgICAgICAgICBhdHRyLnNsaWNlKHAgKyAxKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBhdHRycztcblx0fVxuXHRhc3luYyBmdW5jdGlvbiByZXBsYWNlX2FzeW5jKHN0ciwgcmUsIGZ1bmMpIHtcblx0ICAgIGNvbnN0IHJlcGxhY2VtZW50cyA9IFtdO1xuXHQgICAgc3RyLnJlcGxhY2UocmUsICguLi5hcmdzKSA9PiB7XG5cdCAgICAgICAgcmVwbGFjZW1lbnRzLnB1c2goZnVuYyguLi5hcmdzKS50aGVuKHJlcyA9PiAoe1xuXHQgICAgICAgICAgICBvZmZzZXQ6IGFyZ3NbYXJncy5sZW5ndGggLSAyXSxcblx0ICAgICAgICAgICAgbGVuZ3RoOiBhcmdzWzBdLmxlbmd0aCxcblx0ICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IHJlcyxcblx0ICAgICAgICB9KSkpO1xuXHQgICAgICAgIHJldHVybiAnJztcblx0ICAgIH0pO1xuXHQgICAgbGV0IG91dCA9ICcnO1xuXHQgICAgbGV0IGxhc3RfZW5kID0gMDtcblx0ICAgIGZvciAoY29uc3QgeyBvZmZzZXQsIGxlbmd0aCwgcmVwbGFjZW1lbnQgfSBvZiBhd2FpdCBQcm9taXNlLmFsbChyZXBsYWNlbWVudHMpKSB7XG5cdCAgICAgICAgb3V0ICs9IHN0ci5zbGljZShsYXN0X2VuZCwgb2Zmc2V0KSArIHJlcGxhY2VtZW50O1xuXHQgICAgICAgIGxhc3RfZW5kID0gb2Zmc2V0ICsgbGVuZ3RoO1xuXHQgICAgfVxuXHQgICAgb3V0ICs9IHN0ci5zbGljZShsYXN0X2VuZCk7XG5cdCAgICByZXR1cm4gb3V0O1xuXHR9XG5cdGFzeW5jIGZ1bmN0aW9uIHByZXByb2Nlc3Moc291cmNlLCBwcmVwcm9jZXNzb3IsIG9wdGlvbnMpIHtcblx0ICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogZG91YmxlY2hlY2tcblx0ICAgIGNvbnN0IGZpbGVuYW1lID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5maWxlbmFtZSkgfHwgcHJlcHJvY2Vzc29yLmZpbGVuYW1lOyAvLyBsZWdhY3lcblx0ICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IFtdO1xuXHQgICAgY29uc3QgcHJlcHJvY2Vzc29ycyA9IEFycmF5LmlzQXJyYXkocHJlcHJvY2Vzc29yKSA/IHByZXByb2Nlc3NvciA6IFtwcmVwcm9jZXNzb3JdO1xuXHQgICAgY29uc3QgbWFya3VwID0gcHJlcHJvY2Vzc29ycy5tYXAocCA9PiBwLm1hcmt1cCkuZmlsdGVyKEJvb2xlYW4pO1xuXHQgICAgY29uc3Qgc2NyaXB0ID0gcHJlcHJvY2Vzc29ycy5tYXAocCA9PiBwLnNjcmlwdCkuZmlsdGVyKEJvb2xlYW4pO1xuXHQgICAgY29uc3Qgc3R5bGUgPSBwcmVwcm9jZXNzb3JzLm1hcChwID0+IHAuc3R5bGUpLmZpbHRlcihCb29sZWFuKTtcblx0ICAgIGZvciAoY29uc3QgZm4gb2YgbWFya3VwKSB7XG5cdCAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gYXdhaXQgZm4oe1xuXHQgICAgICAgICAgICBjb250ZW50OiBzb3VyY2UsXG5cdCAgICAgICAgICAgIGZpbGVuYW1lXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgaWYgKHByb2Nlc3NlZCAmJiBwcm9jZXNzZWQuZGVwZW5kZW5jaWVzKVxuXHQgICAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaCguLi5wcm9jZXNzZWQuZGVwZW5kZW5jaWVzKTtcblx0ICAgICAgICBzb3VyY2UgPSBwcm9jZXNzZWQgPyBwcm9jZXNzZWQuY29kZSA6IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIGZvciAoY29uc3QgZm4gb2Ygc2NyaXB0KSB7XG5cdCAgICAgICAgc291cmNlID0gYXdhaXQgcmVwbGFjZV9hc3luYyhzb3VyY2UsIC88IS0tW15dKj8tLT58PHNjcmlwdChcXHNbXl0qPyk/KD86PihbXl0qPyk8XFwvc2NyaXB0PnxcXC8+KS9naSwgYXN5bmMgKG1hdGNoLCBhdHRyaWJ1dGVzID0gJycsIGNvbnRlbnQgPSAnJykgPT4ge1xuXHQgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXMgJiYgIWNvbnRlbnQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcyB8fCAnJztcblx0ICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gYXdhaXQgZm4oe1xuXHQgICAgICAgICAgICAgICAgY29udGVudCxcblx0ICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHBhcnNlX2F0dHJpYnV0ZXMoYXR0cmlidXRlcyksXG5cdCAgICAgICAgICAgICAgICBmaWxlbmFtZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgaWYgKHByb2Nlc3NlZCAmJiBwcm9jZXNzZWQuZGVwZW5kZW5jaWVzKVxuXHQgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goLi4ucHJvY2Vzc2VkLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIHJldHVybiBwcm9jZXNzZWQgPyBgPHNjcmlwdCR7YXR0cmlidXRlc30+JHtwcm9jZXNzZWQuY29kZX08L3NjcmlwdD5gIDogbWF0Y2g7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBmb3IgKGNvbnN0IGZuIG9mIHN0eWxlKSB7XG5cdCAgICAgICAgc291cmNlID0gYXdhaXQgcmVwbGFjZV9hc3luYyhzb3VyY2UsIC88IS0tW15dKj8tLT58PHN0eWxlKFxcc1teXSo/KT8oPzo+KFteXSo/KTxcXC9zdHlsZT58XFwvPikvZ2ksIGFzeW5jIChtYXRjaCwgYXR0cmlidXRlcyA9ICcnLCBjb250ZW50ID0gJycpID0+IHtcblx0ICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzICYmICFjb250ZW50KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gYXdhaXQgZm4oe1xuXHQgICAgICAgICAgICAgICAgY29udGVudCxcblx0ICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHBhcnNlX2F0dHJpYnV0ZXMoYXR0cmlidXRlcyksXG5cdCAgICAgICAgICAgICAgICBmaWxlbmFtZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgaWYgKHByb2Nlc3NlZCAmJiBwcm9jZXNzZWQuZGVwZW5kZW5jaWVzKVxuXHQgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goLi4ucHJvY2Vzc2VkLmRlcGVuZGVuY2llcyk7XG5cdCAgICAgICAgICAgIHJldHVybiBwcm9jZXNzZWQgPyBgPHN0eWxlJHthdHRyaWJ1dGVzfT4ke3Byb2Nlc3NlZC5jb2RlfTwvc3R5bGU+YCA6IG1hdGNoO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICAvLyBUT0RPIHJldHVybiBzZXBhcmF0ZWQgb3V0cHV0LCBpbiBmdXR1cmUgdmVyc2lvbiB3aGVyZSBzdmVsdGUuY29tcGlsZSBzdXBwb3J0cyBpdDpcblx0ICAgICAgICAvLyBzdHlsZTogeyBjb2RlOiBzdHlsZUNvZGUsIG1hcDogc3R5bGVNYXAgfSxcblx0ICAgICAgICAvLyBzY3JpcHQgeyBjb2RlOiBzY3JpcHRDb2RlLCBtYXA6IHNjcmlwdE1hcCB9LFxuXHQgICAgICAgIC8vIG1hcmt1cCB7IGNvZGU6IG1hcmt1cENvZGUsIG1hcDogbWFya3VwTWFwIH0sXG5cdCAgICAgICAgY29kZTogc291cmNlLFxuXHQgICAgICAgIGRlcGVuZGVuY2llczogWy4uLm5ldyBTZXQoZGVwZW5kZW5jaWVzKV0sXG5cdCAgICAgICAgdG9TdHJpbmcoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fVxuXG5cdGNvbnN0IFZFUlNJT04gPSAnMy4yNC4xJztcblxuXHRleHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xuXHRleHBvcnRzLmNvbXBpbGUgPSBjb21waWxlO1xuXHRleHBvcnRzLnBhcnNlID0gcGFyc2UkMztcblx0ZXhwb3J0cy5wcmVwcm9jZXNzID0gcHJlcHJvY2Vzcztcblx0ZXhwb3J0cy53YWxrID0gd2FsaztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGlsZXIuanMubWFwXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBUUE7QUEyREE7QUFVQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBWUE7QUFZQTtBQWNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBc0JBO0FBR0E7QUFlQTtBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQW9CQTtBQXNDQTtBQUVBO0FBaUJBO0FBYUE7QUFFQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBY0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQXVDQTtBQWdCQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWlCQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBVUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBR0E7QUFJQTtBQUNBO0FBQ0E7QUFJQTtBQUlBO0FBR0E7QUFFQTtBQUVBO0FBR0E7QUFJQTtBQUlBO0FBbUJBO0FBK0JBO0FBSUE7QUFlQTtBQVFBO0FBRUE7QUFXQTtBQU1BO0FBUUE7QUFNQTtBQWVBO0FBRUE7QUFlQTtBQUVBO0FBTUE7QUFpREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQTRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFVQTtBQUNBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFTQTtBQUNBO0FBRUE7QUFPQTtBQUNBO0FBQ0E7QUF5QkE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeUJBO0FBQ0E7QUFpQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFzREE7QUFXQTtBQUNBO0FBRUE7QUFjQTtBQUNBO0FBRUE7QUF3QkE7QUFlQTtBQXdFQTtBQWtCQTtBQUNBO0FBRUE7QUFrQkE7QUFDQTtBQUVBO0FBY0E7QUFFQTtBQWlDQTtBQTZCQTtBQUVBO0FBQ0E7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQTRCQTtBQUVBO0FBSUE7QUFDQTtBQXlHQTtBQUdBO0FBZ0JBO0FBaUJBO0FBU0E7QUFRQTtBQUlBO0FBaUVBO0FBR0E7QUFrQkE7QUFHQTtBQWNBO0FBSUE7QUFxQ0E7QUFXQTtBQU9BO0FBRUE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBd0JBO0FBdUJBO0FBZ0JBO0FBWUE7QUFVQTtBQStDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQW9DQTtBQThCQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBb0JBO0FBNkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWFBO0FBRUE7QUFJQTtBQUZBO0FBOEJBO0FBY0E7QUFpQkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBUUE7QUFDQTtBQTBCQTtBQXdDQTtBQTRGQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEyRkE7QUFDQTtBQWlCQTtBQUNBO0FBR0E7QUFlQTtBQXdDQTtBQTREQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBOEJBO0FBbURBO0FBNEJBO0FBU0E7QUFFQTtBQUlBO0FBMkZBO0FBUUE7QUEyQkE7QUFzQkE7QUFhQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBb0JBO0FBRUE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBNkNBO0FBQ0E7QUFFQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBbUJBO0FBMkJBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFxQkE7QUFFQTtBQUVBO0FBS0E7QUFTQTtBQUNBO0FBQ0E7QUF5Q0E7QUFrQkE7QUFxQkE7QUFZQTtBQWdCQTtBQU1BO0FBbUNBO0FBQ0E7QUFDQTtBQWdDQTtBQThCQTtBQTBDQTtBQUNBO0FBRUE7QUFDQTtBQVVBO0FBR0E7QUErREE7QUFDQTs7Ozs7QUF3RUE7Ozs7O0FBcUJBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBY0E7QUFvQkE7QUFPQTtBQVNBO0FBTUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQWdCQTtBQUtBO0FBS0E7QUFRQTtBQW9CQTtBQVdBO0FBbUJBO0FBZUE7QUFvREE7QUFhQTtBQVFBO0FBcUJBO0FBQ0E7QUFVQTtBQW1CQTtBQUNBO0FBQ0E7QUFjQTtBQUNBO0FBQ0E7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFzQkE7QUFXQTtBQWFBO0FBd0JBO0FBK0JBO0FBK0JBO0FBaUJBO0FBNkNBO0FBdUJBO0FBY0E7QUF3Q0E7QUFDQTtBQUNBO0FBSUE7QUFXQTtBQW1CQTtBQUNBO0FBY0E7QUFDQTtBQWNBO0FBQ0E7QUFLQTtBQVFBO0FBTUE7QUFDQTtBQUNBO0FBZ0JBO0FBQ0E7QUFTQTtBQW9CQTtBQTJCQTtBQVdBO0FBZUE7QUFlQTtBQTRCQTtBQUNBO0FBbUJBO0FBZUE7QUFDQTtBQUNBO0FBZ0JBO0FBQ0E7QUFFQTtBQWFBO0FBSUE7QUFtQkE7QUFnQkE7QUFFQTtBQUtBO0FBRUE7QUFjQTtBQUNBO0FBNENBO0FBRUE7QUFLQTtBQWNBO0FBRUE7QUFvQkE7QUFDQTtBQUNBO0FBRUE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFTQTtBQU9BO0FBS0E7QUFXQTtBQU9BO0FBTUE7QUFLQTtBQVdBO0FBVUE7QUFTQTtBQUdBO0FBT0E7QUFjQTtBQUNBO0FBQ0E7QUFHQTtBQVdBO0FBS0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFpQ0E7QUFNQTtBQUtBO0FBQ0E7QUFNQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFjQTtBQVdBO0FBZUE7QUFLQTtBQUVBO0FBV0E7QUFJQTtBQWFBO0FBWUE7QUFjQTtBQStCQTtBQWFBO0FBNEJBO0FBYUE7QUFYQTtBQXNCQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBb0NBO0FBQ0E7QUFRQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFTQTtBQUlBO0FBZ0JBO0FBRUE7QUFXQTtBQXlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUF3RkE7QUFpREE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBR0E7QUFpTEE7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQXVDQTtBQU1BO0FBZ0JBO0FBbURBO0FBMEVBO0FBV0E7QUFLQTtBQUtBO0FBeUtBO0FBcVRBO0FBdUhBO0FBNElBO0FBbURBO0FBQ0E7QUE2Q0E7QUE4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBdUZBO0FBS0E7QUF5Q0E7QUFFQTtBQXlGQTtBQUNBO0FBU0E7QUEyRUE7QUFtQkE7QUErREE7QUErTUE7QUErR0E7QUFvQ0E7QUEwQkE7QUF1QkE7QUFZQTtBQWtDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdDQTtBQXNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaENBO0FBOERBO0FBTUE7QUEwQkE7QUFFQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFzQkE7QUFxQkE7QUF1REE7QUFnQkE7QUFhQTtBQVNBO0FBRUE7QUFrQkE7QUFDQTtBQStIQTtBQXNHQTtBQUlBO0FBSUE7QUFLQTtBQUtBO0FBT0E7QUFLQTtBQUtBO0FBS0E7QUFHQTtBQUlBO0FBRUE7QUFPQTtBQUlBO0FBTUE7QUFtQkE7QUFJQTtBQWFBO0FBRUE7QUFFQTtBQUNBO0FBS0E7QUFVQTtBQWNBO0FBQ0E7QUFFQTtBQW1HQTtBQUtBO0FBWUE7QUFzRUE7QUFFQTtBQU1BO0FBQ0E7QUFnSEE7QUFHQTtBQUtBO0FBS0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUF1SEE7QUFVQTtBQVdBO0FBVUE7QUFlQTtBQVlBO0FBZUE7QUFZQTtBQXdFQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBR0E7QUFHQTtBQUNBO0FBSUE7QUFXQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBR0E7QUFHQTtBQUNBO0FBSUE7QUFZQTtBQUNBO0FBQ0E7QUFJQTtBQUtBO0FBQ0E7QUFRQTtBQWlCQTtBQUNBO0FBQ0E7QUE4QkE7QUFPQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUlBO0FBU0E7QUFPQTtBQUVBO0FBd09BO0FBd0JBO0FBZ0NBO0FBa0JBO0FBc0NBO0FBZ0NBO0FBQ0E7QUFhQTtBQUNBO0FBZUE7QUFxSkE7QUFvTEE7QUFzQkE7QUE2Q0E7QUFNQTtBQUdBO0FBK0JBO0FBR0E7QUFlQTtBQTZGQTtBQVVBO0FBaUJBO0FBaUVBO0FBTUE7QUF3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBcUJBO0FBQ0E7QUF1QkE7QUFhQTtBQWdDQTtBQXVGQTtBQUNBO0FBQ0E7QUFvQ0E7QUFvQkE7QUFlQTtBQTRCQTtBQTBDQTtBQXlFQTtBQUNBO0FBQ0E7QUFFQTtBQTBDQTtBQVNBO0FBbUJBO0FBT0E7QUFDQTtBQWlEQTtBQU1BO0FBR0E7QUFJQTtBQU1BO0FBNEJBO0FBc0RBO0FBRUE7QUFNQTtBQUlBO0FBZ0JBO0FBQ0E7QUFjQTtBQXFDQTtBQWlNQTtBQXdFQTtBQXVGQTtBQTZEQTtBQTZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7QUFxSEE7QUF5R0E7QUFTQTtBQUlBO0FBSUE7QUFDQTtBQUNBO0FBS0E7QUFtQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQThDQTtBQUVBO0FBU0E7QUFFQTtBQVdBO0FBb0JBO0FBQ0E7QUFTQTtBQVVBO0FBUUE7QUFLQTtBQUVBO0FBbUJBO0FBcUJBO0FBcURBO0FBZ0NBO0FBb0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF1R0E7QUFHQTtBQXVEQTtBQXloRUE7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFJQTtBQUNBO0FBSUE7QUFJQTtBQUlBO0FBSUE7QUFJQTtBQU1BO0FBb0JBO0FBQ0E7QUFVQTtBQUNBO0FBNklBO0FBQ0E7QUFHQTtBQWdCQTtBQXdDQTtBQXNCQTtBQUlBO0FBOENBO0FBdUNBO0FBV0E7QUF5QkE7QUF1R0E7QUFzREE7QUFhQTtBQUlBO0FBTUE7QUFTQTtBQWNBO0FBQ0E7QUEwRkE7QUE0TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBd0JBO0FBeUNBO0FBaUJBO0FBQUE7QUFpR0E7QUF5REE7QUEwREE7QUFjQTtBQWdUQTtBQUNBO0FBNkNBO0FBb0JBO0FBa05BO0FBaUhBO0FBQ0E7QUF3QkE7QUFDQTtBQW9EQTtBQWdGQTtBQXVMQTtBQXdCQTtBQXFFQTtBQUlBO0FBU0E7QUFDQTtBQW9CQTtBQW9CQTtBQWtDQTtBQXdCQTtBQXdCQTtBQTJPQTtBQUNBO0FBd0lBO0FBSUE7QUFvQkE7QUFRQTtBQUNBO0FBQ0E7QUFnQkE7QUF5Q0E7QUE4REE7QUFDQTtBQVNBO0FBVUE7QUEwQkE7QUF5REE7QUFrQ0E7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUF3TEE7QUFDQTtBQU1BO0FBZ0JBO0FBTUE7QUFJQTtBQXdDQTtBQUdBO0FBdUNBO0FBNEpBO0FBT0E7QUFTQTtBQU9BO0FBNkNBO0FBa0NBO0FBQ0E7QUFtSEE7QUFDQTtBQUNBO0FBMEJBO0FBQ0E7QUFrREE7QUFFQTtBQWtHQTtBQVFBO0FBZUE7QUFHQTtBQXdCQTtBQXVCQTtBQTU1akJBO0FBazlqQkE7QUFDQTtBQThCQTtBQXlCQTtBQVdBO0FBTUE7QUFzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFjQTtBQUNBO0FBSEE7QUF5Q0E7QUFJQTtBQUdBO0FBb0NBO0FBcUZBO0FBbURBO0FBd0JBO0FBd0NBO0FBQ0E7QUFDQTtBQVlBO0FBb0JBO0FBT0E7QUFjQTtBQTRCQTtBQUNBO0FBR0E7QUF1SUE7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQVFBO0FBR0E7QUFzQ0E7QUFzQ0E7QUFxREE7QUFxQkE7QUFxRkE7QUFDQTtBQW9HQTtBQTBEQTtBQUNBO0FBNENBO0FBS0E7QUF3Q0E7QUEwSUE7QUEvc21CQTtBQXcybUJBO0FBQ0E7QUEyQ0E7QUFNQTtBQUVBO0FBb0RBO0FBc0JBO0FBdURBO0FBQ0E7QUFDQTtBQUNBO0FBd0hBO0FBRkE7QUF5QkE7QUFnTEE7QUFrQkE7QUFzR0E7QUFDQTtBQUVBO0FBRkE7QUFTQTtBQTZFQTtBQUtBO0FBcUJBO0FBMkNBO0FBY0E7QUE2Q0E7QUFDQTtBQUNBO0FBaUJBO0FBQ0E7QUFPQTtBQUNBO0FBU0E7QUFvREE7QUFJQTtBQUdBO0FBY0E7QUFXQTtBQWVBO0FBQ0E7QUFPQTtBQUNBO0FBZ0VBO0FBVUE7QUFnQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQXdCQTtBQXVCQTtBQTBCQTtBQUNBO0FBR0E7QUFDQTtBQThGQTtBQStCQTtBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQTRCQTtBQXVEQTtBQVNBO0FBa01BO0FBQ0E7QUFDQTtBQUNBO0FBa0NBO0FBc0NBO0FBNEJBO0FBQ0E7QUFDQTtBQXdCQTtBQTJCQTtBQUNBO0FBQ0E7QUFPQTtBQWFBO0FBU0E7QUFpQkE7QUF1QkE7QUFnQ0E7QUFDQTtBQStGQTtBQXdGQTtBQTZGQTtBQUlBO0FBRUE7QUE2QkE7QUFrQkE7QUFDQTtBQVlBO0FBb0lBO0FBdUdBO0FBbUZBO0FBZ0dBO0FBQ0E7QUFDQTtBQUtBO0FBY0E7QUE2UkE7QUFHQTtBQTZFQTtBQVNBO0FBMkRBO0FBa0NBO0FBR0E7QUFnSUE7QUFHQTtBQXdDQTtBQXdCQTtBQXVFQTtBQW1DQTtBQTZDQTtBQXVIQTtBQWlDQTtBQWdCQTtBQUNBO0FBc0VBO0FBb0RBO0FBdURBO0FBcUNBO0FBcUVBO0FBa0NBO0FBU0E7QUFVQTtBQWdCQTtBQUtBO0FBeVVBO0FBQ0E7QUFPQTtBQThEQTtBQVVBO0FBd0ZBO0FBUUE7QUFRQTtBQXlCQTtBQW1DQTtBQXNEQTtBQXVCQTtBQUNBO0FBQ0E7QUF5QkE7QUE2QkE7QUF3QkE7QUFFQTtBQVVBO0FBRUE7QUEwRUE7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQWVBO0FBQ0E7QUFTQTtBQThDQTtBQXVEQTtBQUdBO0FBd0JBO0FBR0E7QUFPQTtBQUVBO0FBV0E7QUFPQTtBQU9BO0FBT0E7QUFHQTtBQW9XQTtBQUNBO0FBUUE7QUErRkE7QUF1QkE7QUFnSEE7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQTJEQTtBQXNIQTtBQVlBO0FBR0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQXNFQTtBQUNBO0FBZUE7QUE0R0E7QUEyUUE7QUFtSEE7QUFVQTtBQVdBO0FBd0dBO0FBd0NBO0FBNkRBO0FBQ0E7QUFDQTtBQUpBO0FBaUJBO0FBQ0E7QUE0Q0E7QUFnSkE7QUFDQTtBQTRDQTtBQXNJQTtBQWdKQTtBQUNBO0FBK0NBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/svelte/compiler.js\n");

/***/ })

}]);