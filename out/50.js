(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[50],{

/***/ "../../js/character.ts":
/*!********************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/character.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//import { Token } from './interfaces'\nvar IdentifierStart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a]|[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar IdentifierPart = /[\\x24\\x5f\\x41-\\x5a\\x61-\\x7a\\x30-\\x39]|[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDD30-\\uDD39\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF50\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD46\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E\\uDC5F\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCE9\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\nvar default_1 = /** @class */ (function () {\n    function default_1() {\n    }\n    default_1.prototype.testCodePoint = function (regexp) {\n        if ((this.input.charCodeAt(this.index) & 0xfc00) === 0xd800\n            && (this.input.charCodeAt(this.index + 1) & 0xfc00) === 0xdc00) {\n            this._volatility = this.input[this.index] + this.input[this.index + 1];\n            return regexp.test(this._volatility) ? 2 : 0;\n        }\n        else {\n            return regexp.test(this.input[this.index]) ? 1 : 0;\n        }\n    };\n    default_1.prototype.testUnicodeEscape = function (regexp) {\n        var index = this.index + 1, code = 0;\n        if (this.input[index++] === \"u\") {\n            var cp = 0;\n            if (this.input[index] === \"{\") {\n                while ((code = this.hexValue(this.input.charCodeAt(++index))) >= 0) {\n                    cp = cp * 16 + code;\n                }\n                if (this.input[index++] !== \"}\") { /* || index < this.index + 5*/\n                    return 0;\n                }\n            }\n            else {\n                var len = 4;\n                while (len--) {\n                    code = this.hexValue(this.input.charCodeAt(index++));\n                    if (code >= 0) {\n                        cp = cp * 16 + code;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n            }\n            return regexp.test(this.fromCodePoint(cp))\n                ? index - this.index\n                : -(index - this.index);\n        }\n        return 0;\n    };\n    default_1.prototype.scanHex = function (length) {\n        if (length === void 0) { length = this.end; }\n        var value = 0, code = 0, len = length;\n        while (len) {\n            code = this.hexValue(this.input.charCodeAt(this.index));\n            if (code >= 0) {\n                len--;\n                value = value * 16 + code;\n            }\n            else {\n                break;\n            }\n            this.index++;\n        }\n        return [value, length - len];\n    };\n    default_1.prototype.hexValue = function (ch) {\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 :\n            ch >= 0x41 && ch <= 0x46 ? ch - 0x41 + 10 :\n                ch >= 0x61 && ch <= 0x66 ? ch - 0x61 + 10 : -1;\n    };\n    default_1.prototype.decimalValue = function (ch) {\n        return ch >= 0x30 && ch <= 0x39 ? ch - 0x30 : -1;\n    };\n    default_1.prototype.octalValue = function (ch) {\n        return ch >= 0x30 && ch <= 0x37 ? ch - 0x30 : -1;\n    };\n    default_1.prototype.binaryValue = function (ch) {\n        return ch === 0x30 || ch == 0x31 ? ch - 0x30 : -1;\n    };\n    //https://github.com/jquery/esprima/blob/master/src/character.ts\n    default_1.prototype.isWhiteSpace = function (ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n        /*return /^\\x20|\\x09|\\x0B|\\x0C|\\xA0|\\xfeff$/.test(char);*/\n    };\n    default_1.prototype.isLineTerminator = function (ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n        /*return /^\\x0A|\\x0D|\\x2028|\\x2029$/.test(char);*/\n    };\n    default_1.prototype.fromCodePoint = function (cp) {\n        return this._volatility = cp < 0x10000\n            ? String.fromCharCode(cp)\n            : String.fromCharCode(0xd800 + (cp - 0x10000) >> 10)\n                + String.fromCharCode(0xdc00 + (cp - 0x10000) & 1023);\n    };\n    default_1.prototype.inIdentifierStart = function () {\n        var ch = this.input.charCodeAt(this.index);\n        return (ch === 0x24) || (ch === 0x5F) ||\n            (ch >= 0x41 && ch <= 0x5A) ||\n            (ch >= 0x61 && ch <= 0x7A) ? 1 : (ch >= 0x80\n            ? this.testCodePoint(IdentifierStart)\n            : (ch === 0x5c ? this.testUnicodeEscape(IdentifierStart) : 0));\n        /*return /^[_$a-zA-Z\\u0080-\\uffffff]$/.test(char);*/\n    };\n    default_1.prototype.inIdentifierPart = function () {\n        var ch = this.input.charCodeAt(this.index);\n        return (ch === 0x24) || (ch === 0x5F) ||\n            (ch >= 0x41 && ch <= 0x5A) ||\n            (ch >= 0x61 && ch <= 0x7A) ||\n            (ch >= 0x30 && ch <= 0x39) ? 1 : (ch >= 0x80\n            ? this.testCodePoint(IdentifierPart)\n            : (ch === 0x5c ? this.testUnicodeEscape(IdentifierPart) : 0));\n        /*return /^[\\w$\\u0080-\\uffffff]$/.test(char);*/\n    };\n    return default_1;\n}());\nexports.default = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vanMvY2hhcmFjdGVyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9tbnQvZC9Qcm9ncmFtRmlsZXMvR2l0SHViL0Rpc29uL2pzL2NoYXJhY3Rlci50cz9lYmFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuL2ludGVyZmFjZXMnXHJcbmNvbnN0IElkZW50aWZpZXJTdGFydCA9IC9bXFx4MjRcXHg1ZlxceDQxLVxceDVhXFx4NjEtXFx4N2FdfFtcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MC1cXHUwNTg4XFx1MDVEMC1cXHUwNUVBXFx1MDVFRi1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MDlGQ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODYtXFx1MEU4QVxcdTBFOEMtXFx1MEVBM1xcdTBFQTVcXHUwRUE3LVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc4XFx1MTg4MC1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDOTAtXFx1MUNCQVxcdTFDQkQtXFx1MUNCRlxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGM1xcdTFDRjVcXHUxQ0Y2XFx1MUNGQVxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUItXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRlxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZFRlxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkVGXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0JGXFx1QTdDMi1cXHVBN0M2XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOEZFXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2N1xcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTM1XFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMlxcdUREMDAtXFx1REQyM1xcdURGMDAtXFx1REYxQ1xcdURGMjdcXHVERjMwLVxcdURGNDVcXHVERkUwLVxcdURGRjZdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ0NFxcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzM0XFx1REM0Ny1cXHVEQzRBXFx1REM1RlxcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERUI4XFx1REYwMC1cXHVERjFBXXxcXHVEODA2W1xcdURDMDAtXFx1REMyQlxcdURDQTAtXFx1RENERlxcdURDRkZcXHVEREEwLVxcdUREQTdcXHVEREFBLVxcdURERDBcXHVEREUxXFx1RERFM1xcdURFMDBcXHVERTBCLVxcdURFMzJcXHVERTNBXFx1REU1MFxcdURFNUMtXFx1REU4OVxcdURFOURcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4RlxcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDMwXFx1REQ0NlxcdURENjAtXFx1REQ2NVxcdURENjdcXHVERDY4XFx1REQ2QS1cXHVERDg5XFx1REQ5OFxcdURFRTAtXFx1REVGMl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURFNDAtXFx1REU3RlxcdURGMDAtXFx1REY0QVxcdURGNTBcXHVERjkzLVxcdURGOUZcXHVERkUwXFx1REZFMVxcdURGRTNdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkY3XXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwLVxcdUREMUVcXHVERDUwLVxcdURENTJcXHVERDY0LVxcdURENjdcXHVERDcwLVxcdURFRkJdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4MzhbXFx1REQwMC1cXHVERDJDXFx1REQzNy1cXHVERDNEXFx1REQ0RVxcdURFQzAtXFx1REVFQl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVERDAwLVxcdURENDNcXHVERDRCXXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdLztcclxuY29uc3QgSWRlbnRpZmllclBhcnQgPSAvW1xceDI0XFx4NWZcXHg0MS1cXHg1YVxceDYxLVxceDdhXFx4MzAtXFx4MzldfFtcXHhBQVxceEI1XFx4QjdcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzAwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RUYtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDdGRFxcdTA4MDAtXFx1MDgyRFxcdTA4NDAtXFx1MDg1QlxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA4RDMtXFx1MDhFMVxcdTA4RTMtXFx1MDk2M1xcdTA5NjYtXFx1MDk2RlxcdTA5NzEtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkMtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlFNi1cXHUwOUYxXFx1MDlGQ1xcdTA5RkVcXHUwQTAxLVxcdTBBMDNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE2Ni1cXHUwQTc1XFx1MEE4MS1cXHUwQTgzXFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJDLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUQwXFx1MEFFMC1cXHUwQUUzXFx1MEFFNi1cXHUwQUVGXFx1MEFGOS1cXHUwQUZGXFx1MEIwMS1cXHUwQjAzXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0MtXFx1MEI0NFxcdTBCNDdcXHUwQjQ4XFx1MEI0Qi1cXHUwQjREXFx1MEI1NlxcdTBCNTdcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2M1xcdTBCNjYtXFx1MEI2RlxcdTBCNzFcXHUwQjgyXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkJFLVxcdTBCQzJcXHUwQkM2LVxcdTBCQzhcXHUwQkNBLVxcdTBCQ0RcXHUwQkQwXFx1MEJEN1xcdTBCRTYtXFx1MEJFRlxcdTBDMDAtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0QtXFx1MEM0NFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM1OC1cXHUwQzVBXFx1MEM2MC1cXHUwQzYzXFx1MEM2Ni1cXHUwQzZGXFx1MEM4MC1cXHUwQzgzXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCQy1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NEXFx1MENENVxcdTBDRDZcXHUwQ0RFXFx1MENFMC1cXHUwQ0UzXFx1MENFNi1cXHUwQ0VGXFx1MENGMVxcdTBDRjJcXHUwRDAwLVxcdTBEMDNcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBENDRcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENEVcXHUwRDU0LVxcdTBENTdcXHUwRDVGLVxcdTBENjNcXHUwRDY2LVxcdTBENkZcXHUwRDdBLVxcdTBEN0ZcXHUwRDgyXFx1MEQ4M1xcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRENBXFx1MERDRi1cXHUwREQ0XFx1MERENlxcdTBERDgtXFx1MERERlxcdTBERTYtXFx1MERFRlxcdTBERjJcXHUwREYzXFx1MEUwMS1cXHUwRTNBXFx1MEU0MC1cXHUwRTRFXFx1MEU1MC1cXHUwRTU5XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4Ni1cXHUwRThBXFx1MEU4Qy1cXHUwRUEzXFx1MEVBNVxcdTBFQTctXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYxOFxcdTBGMTlcXHUwRjIwLVxcdTBGMjlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjNFLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjcxLVxcdTBGODRcXHUwRjg2LVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAwMC1cXHUxMDQ5XFx1MTA1MC1cXHUxMDlEXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM1RlxcdTEzNjktXFx1MTM3MVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxNFxcdTE3MjAtXFx1MTczNFxcdTE3NDAtXFx1MTc1M1xcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3NzJcXHUxNzczXFx1MTc4MC1cXHUxN0QzXFx1MTdEN1xcdTE3RENcXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTgwQi1cXHUxODBEXFx1MTgxMC1cXHUxODE5XFx1MTgyMC1cXHUxODc4XFx1MTg4MC1cXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0Ni1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MTlEMC1cXHUxOURBXFx1MUEwMC1cXHUxQTFCXFx1MUEyMC1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3Ri1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUFBN1xcdTFBQjAtXFx1MUFCRFxcdTFCMDAtXFx1MUI0QlxcdTFCNTAtXFx1MUI1OVxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUJGM1xcdTFDMDAtXFx1MUMzN1xcdTFDNDAtXFx1MUM0OVxcdTFDNEQtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDOTAtXFx1MUNCQVxcdTFDQkQtXFx1MUNCRlxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNGQVxcdTFEMDAtXFx1MURGOVxcdTFERkItXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDBDXFx1MjAwRFxcdTIwM0ZcXHUyMDQwXFx1MjA1NFxcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjBEMC1cXHUyMERDXFx1MjBFMVxcdTIwRTUtXFx1MjBGMFxcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDdGLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyREUwLVxcdTJERkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMkZcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDk5LVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkZcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUZcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MkJcXHVBNjQwLVxcdUE2NkZcXHVBNjc0LVxcdUE2N0RcXHVBNjdGLVxcdUE2RjFcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QkZcXHVBN0MyLVxcdUE3QzZcXHVBN0Y3LVxcdUE4MjdcXHVBODQwLVxcdUE4NzNcXHVBODgwLVxcdUE4QzVcXHVBOEQwLVxcdUE4RDlcXHVBOEUwLVxcdUE4RjdcXHVBOEZCXFx1QThGRC1cXHVBOTJEXFx1QTkzMC1cXHVBOTUzXFx1QTk2MC1cXHVBOTdDXFx1QTk4MC1cXHVBOUMwXFx1QTlDRi1cXHVBOUQ5XFx1QTlFMC1cXHVBOUZFXFx1QUEwMC1cXHVBQTM2XFx1QUE0MC1cXHVBQTREXFx1QUE1MC1cXHVBQTU5XFx1QUE2MC1cXHVBQTc2XFx1QUE3QS1cXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVGXFx1QUFGMi1cXHVBQUY2XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY3XFx1QUI3MC1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVBQkYwLVxcdUFCRjlcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFELVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRlxcdUZFMzNcXHVGRTM0XFx1RkU0RC1cXHVGRTRGXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYxMC1cXHVGRjE5XFx1RkYyMS1cXHVGRjNBXFx1RkYzRlxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURERkRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERUUwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjRBXFx1REY1MC1cXHVERjdBXFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQTAtXFx1RENBOVxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDAtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTM1XFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNlxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdUREMzlcXHVERjAwLVxcdURGMUNcXHVERjI3XFx1REYzMC1cXHVERjUwXFx1REZFMC1cXHVERkY2XXxcXHVEODA0W1xcdURDMDAtXFx1REM0NlxcdURDNjYtXFx1REM2RlxcdURDN0YtXFx1RENCQVxcdURDRDAtXFx1RENFOFxcdURDRjAtXFx1RENGOVxcdUREMDAtXFx1REQzNFxcdUREMzYtXFx1REQzRlxcdURENDQtXFx1REQ0NlxcdURENTAtXFx1REQ3M1xcdURENzZcXHVERDgwLVxcdUREQzRcXHVEREM5LVxcdUREQ0NcXHVEREQwLVxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTM3XFx1REUzRVxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFRUFcXHVERUYwLVxcdURFRjlcXHVERjAwLVxcdURGMDNcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzQi1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjUwXFx1REY1N1xcdURGNUQtXFx1REY2M1xcdURGNjYtXFx1REY2Q1xcdURGNzAtXFx1REY3NF18XFx1RDgwNVtcXHVEQzAwLVxcdURDNEFcXHVEQzUwLVxcdURDNTlcXHVEQzVFXFx1REM1RlxcdURDODAtXFx1RENDNVxcdURDQzdcXHVEQ0QwLVxcdURDRDlcXHVERDgwLVxcdUREQjVcXHVEREI4LVxcdUREQzBcXHVEREQ4LVxcdURERERcXHVERTAwLVxcdURFNDBcXHVERTQ0XFx1REU1MC1cXHVERTU5XFx1REU4MC1cXHVERUI4XFx1REVDMC1cXHVERUM5XFx1REYwMC1cXHVERjFBXFx1REYxRC1cXHVERjJCXFx1REYzMC1cXHVERjM5XXxcXHVEODA2W1xcdURDMDAtXFx1REMzQVxcdURDQTAtXFx1RENFOVxcdURDRkZcXHVEREEwLVxcdUREQTdcXHVEREFBLVxcdURERDdcXHVERERBLVxcdURERTFcXHVEREUzXFx1RERFNFxcdURFMDAtXFx1REUzRVxcdURFNDdcXHVERTUwLVxcdURFOTlcXHVERTlEXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMzNlxcdURDMzgtXFx1REM0MFxcdURDNTAtXFx1REM1OVxcdURDNzItXFx1REM4RlxcdURDOTItXFx1RENBN1xcdURDQTktXFx1RENCNlxcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDM2XFx1REQzQVxcdUREM0NcXHVERDNEXFx1REQzRi1cXHVERDQ3XFx1REQ1MC1cXHVERDU5XFx1REQ2MC1cXHVERDY1XFx1REQ2N1xcdURENjhcXHVERDZBLVxcdUREOEVcXHVERDkwXFx1REQ5MVxcdUREOTMtXFx1REQ5OFxcdUREQTAtXFx1RERBOVxcdURFRTAtXFx1REVGNl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU2MC1cXHVERTY5XFx1REVEMC1cXHVERUVEXFx1REVGMC1cXHVERUY0XFx1REYwMC1cXHVERjM2XFx1REY0MC1cXHVERjQzXFx1REY1MC1cXHVERjU5XFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURFNDAtXFx1REU3RlxcdURGMDAtXFx1REY0QVxcdURGNEYtXFx1REY4N1xcdURGOEYtXFx1REY5RlxcdURGRTBcXHVERkUxXFx1REZFM118XFx1RDgyMVtcXHVEQzAwLVxcdURGRjddfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENTAtXFx1REQ1MlxcdURENjQtXFx1REQ2N1xcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTlcXHVEQzlEXFx1REM5RV18XFx1RDgzNFtcXHVERDY1LVxcdURENjlcXHVERDZELVxcdURENzJcXHVERDdCLVxcdUREODJcXHVERDg1LVxcdUREOEJcXHVEREFBLVxcdUREQURcXHVERTQyLVxcdURFNDRdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQlxcdURGQ0UtXFx1REZGRl18XFx1RDgzNltcXHVERTAwLVxcdURFMzZcXHVERTNCLVxcdURFNkNcXHVERTc1XFx1REU4NFxcdURFOUItXFx1REU5RlxcdURFQTEtXFx1REVBRl18XFx1RDgzOFtcXHVEQzAwLVxcdURDMDZcXHVEQzA4LVxcdURDMThcXHVEQzFCLVxcdURDMjFcXHVEQzIzXFx1REMyNFxcdURDMjYtXFx1REMyQVxcdUREMDAtXFx1REQyQ1xcdUREMzAtXFx1REQzRFxcdURENDAtXFx1REQ0OVxcdURENEVcXHVERUMwLVxcdURFRjldfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1RENEMC1cXHVEQ0Q2XFx1REQwMC1cXHVERDRCXFx1REQ1MC1cXHVERDU5XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdfFxcdURCNDBbXFx1REQwMC1cXHVEREVGXS87XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBwdWJsaWMgaW5wdXQ6IHN0cmluZztcclxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG4gICAgcHVibGljIGVuZDogbnVtYmVyO1xyXG4gICAgcHVibGljIF92b2xhdGlsaXR5OiBhbnk7XHJcbiAgICBwdWJsaWMgX3Njb3BlczogYW55O1xyXG4gICAgcHJpdmF0ZSB0ZXN0Q29kZVBvaW50KHJlZ2V4cDogUmVnRXhwKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpICYgMHhmYzAwKSA9PT0gMHhkODAwXHJcbiAgICAgICAgICAgICYmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5pbmRleCArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZvbGF0aWxpdHkgPSB0aGlzLmlucHV0W3RoaXMuaW5kZXhdICsgdGhpcy5pbnB1dFt0aGlzLmluZGV4ICsgMV07XHJcbiAgICAgICAgICAgIHJldHVybiByZWdleHAudGVzdCh0aGlzLl92b2xhdGlsaXR5KSA/IDIgOiAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWdleHAudGVzdCh0aGlzLmlucHV0W3RoaXMuaW5kZXhdKSA/IDEgOiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRlc3RVbmljb2RlRXNjYXBlKHJlZ2V4cDogUmVnRXhwKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5pbmRleCArIDEsIGNvZGUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmlucHV0W2luZGV4KytdID09PSBcInVcIikge1xyXG4gICAgICAgICAgICBsZXQgY3AgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnB1dFtpbmRleF0gPT09IFwie1wiKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoXHJcbiAgICAgICAgICAgICAgICAgICAgKGNvZGUgPSB0aGlzLmhleFZhbHVlKHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK2luZGV4KSkpID49IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNwID0gY3AgKiAxNiArIGNvZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dFtpbmRleCsrXSAhPT0gXCJ9XCIpIHsvKiB8fCBpbmRleCA8IHRoaXMuaW5kZXggKyA1Ki9cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBsZW4gPSA0O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlbi0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IHRoaXMuaGV4VmFsdWUodGhpcy5pbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNwID0gY3AgKiAxNiArIGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZWdleHAudGVzdCh0aGlzLmZyb21Db2RlUG9pbnQoY3ApKVxyXG4gICAgICAgICAgICAgICAgPyBpbmRleCAtIHRoaXMuaW5kZXhcclxuICAgICAgICAgICAgICAgIDogLShpbmRleCAtIHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIHNjYW5IZXgobGVuZ3RoOiBudW1iZXIgPSB0aGlzLmVuZCk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IDAsIGNvZGUgPSAwLCBsZW4gPSBsZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGxlbikge1xyXG4gICAgICAgICAgICBjb2RlID0gdGhpcy5oZXhWYWx1ZSh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5pbmRleCkpO1xyXG4gICAgICAgICAgICBpZiAoY29kZSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZW4tLTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIGNvZGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbdmFsdWUsIGxlbmd0aCAtIGxlbl07XHJcbiAgICB9XHJcbiAgICBoZXhWYWx1ZShjaDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoID49IDB4MzAgJiYgY2ggPD0gMHgzOSA/IGNoIC0gMHgzMCA6XHJcbiAgICAgICAgICAgIGNoID49IDB4NDEgJiYgY2ggPD0gMHg0NiA/IGNoIC0gMHg0MSArIDEwIDpcclxuICAgICAgICAgICAgICAgIGNoID49IDB4NjEgJiYgY2ggPD0gMHg2NiA/IGNoIC0gMHg2MSArIDEwIDogLTE7XHJcbiAgICB9XHJcbiAgICBkZWNpbWFsVmFsdWUoY2g6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBjaCA+PSAweDMwICYmIGNoIDw9IDB4MzkgPyBjaCAtIDB4MzAgOiAtMTtcclxuICAgIH1cclxuICAgIG9jdGFsVmFsdWUoY2g6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBjaCA+PSAweDMwICYmIGNoIDw9IDB4MzcgPyBjaCAtIDB4MzAgOiAtMTtcclxuICAgIH1cclxuICAgIGJpbmFyeVZhbHVlKGNoOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gY2ggPT09IDB4MzAgfHwgY2ggPT0gMHgzMSA/IGNoIC0gMHgzMCA6IC0xO1xyXG4gICAgfVxyXG4gICAgLy9odHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2VzcHJpbWEvYmxvYi9tYXN0ZXIvc3JjL2NoYXJhY3Rlci50c1xyXG4gICAgaXNXaGl0ZVNwYWNlKGNoOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gKGNoID09PSAweDIwKSB8fCAoY2ggPT09IDB4MDkpIHx8IChjaCA9PT0gMHgwQikgfHwgKGNoID09PSAweDBDKSB8fCAoY2ggPT09IDB4QTApIHx8XHJcbiAgICAgICAgICAgIChjaCA+PSAweDE2ODAgJiYgWzB4MTY4MCwgMHgyMDAwLCAweDIwMDEsIDB4MjAwMiwgMHgyMDAzLCAweDIwMDQsIDB4MjAwNSwgMHgyMDA2LCAweDIwMDcsIDB4MjAwOCwgMHgyMDA5LCAweDIwMEEsIDB4MjAyRiwgMHgyMDVGLCAweDMwMDAsIDB4RkVGRl0uaW5kZXhPZihjaCkgPj0gMCk7XHJcbiAgICAgICAgLypyZXR1cm4gL15cXHgyMHxcXHgwOXxcXHgwQnxcXHgwQ3xcXHhBMHxcXHhmZWZmJC8udGVzdChjaGFyKTsqL1xyXG4gICAgfVxyXG4gICAgaXNMaW5lVGVybWluYXRvcihjaDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChjaCA9PT0gMHgwQSkgfHwgKGNoID09PSAweDBEKSB8fCAoY2ggPT09IDB4MjAyOCkgfHwgKGNoID09PSAweDIwMjkpO1xyXG4gICAgICAgIC8qcmV0dXJuIC9eXFx4MEF8XFx4MER8XFx4MjAyOHxcXHgyMDI5JC8udGVzdChjaGFyKTsqL1xyXG4gICAgfVxyXG4gICAgZnJvbUNvZGVQb2ludChjcDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbGF0aWxpdHkgPSBjcCA8IDB4MTAwMDBcclxuICAgICAgICAgICAgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNwKVxyXG4gICAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKGNwIC0gMHgxMDAwMCkgPj4gMTApXHJcbiAgICAgICAgICAgICsgU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAoY3AgLSAweDEwMDAwKSAmIDEwMjMpO1xyXG4gICAgfVxyXG4gICAgaW5JZGVudGlmaWVyU3RhcnQoKSB7XHJcbiAgICAgICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIHJldHVybiAoY2ggPT09IDB4MjQpIHx8IChjaCA9PT0gMHg1RikgfHxcclxuICAgICAgICAgICAgKGNoID49IDB4NDEgJiYgY2ggPD0gMHg1QSkgfHxcclxuICAgICAgICAgICAgKGNoID49IDB4NjEgJiYgY2ggPD0gMHg3QSkgPyAxIDogKFxyXG4gICAgICAgICAgICAgICAgY2ggPj0gMHg4MFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy50ZXN0Q29kZVBvaW50KElkZW50aWZpZXJTdGFydClcclxuICAgICAgICAgICAgICAgICAgICA6IChjaCA9PT0gMHg1YyA/IHRoaXMudGVzdFVuaWNvZGVFc2NhcGUoSWRlbnRpZmllclN0YXJ0KSA6IDApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgLypyZXR1cm4gL15bXyRhLXpBLVpcXHUwMDgwLVxcdWZmZmZmZl0kLy50ZXN0KGNoYXIpOyovXHJcbiAgICB9XHJcbiAgICBpbklkZW50aWZpZXJQYXJ0KCkge1xyXG4gICAgICAgIGxldCBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcclxuICAgICAgICByZXR1cm4gKGNoID09PSAweDI0KSB8fCAoY2ggPT09IDB4NUYpIHx8XHJcbiAgICAgICAgICAgIChjaCA+PSAweDQxICYmIGNoIDw9IDB4NUEpIHx8XHJcbiAgICAgICAgICAgIChjaCA+PSAweDYxICYmIGNoIDw9IDB4N0EpIHx8XHJcbiAgICAgICAgICAgIChjaCA+PSAweDMwICYmIGNoIDw9IDB4MzkpID8gMSA6IChcclxuICAgICAgICAgICAgICAgIGNoID49IDB4ODBcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMudGVzdENvZGVQb2ludChJZGVudGlmaWVyUGFydClcclxuICAgICAgICAgICAgICAgICAgICA6IChjaCA9PT0gMHg1YyA/IHRoaXMudGVzdFVuaWNvZGVFc2NhcGUoSWRlbnRpZmllclBhcnQpIDogMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAvKnJldHVybiAvXltcXHckXFx1MDA4MC1cXHVmZmZmZmZdJC8udGVzdChjaGFyKTsqL1xyXG4gICAgfVxyXG4gICAgLyppc0ZvbGxvd2luZ0FuRXhwcmVzc2lvbih0b2tlbj86IFRva2VuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRva2VuID8gW1xyXG4gICAgICAgICAgICAnaW4nLCAndHlwZW9mJywgJ2luc3RhbmNlb2YnLCAnbmV3JyxcclxuICAgICAgICAgICAgJ3JldHVybicsICdjYXNlJywgJ2RlbGV0ZScsICd0aHJvdycsICd2b2lkJyxcclxuICAgICAgICAgICAgLy8gYXNzaWdubWVudCBvcGVyYXRvcnNcclxuICAgICAgICAgICAgJz0nLCAnKz0nLCAnLT0nLCAnKj0nLCAnKio9JywgJy89JywgJyU9JywgJzw8PScsICc+Pj0nLCAnPj4+PScsXHJcbiAgICAgICAgICAgICcmPScsICd8PScsICdePScsICcsJyxcclxuICAgICAgICAgICAgLy8gYmluYXJ5L3VuYXJ5IG9wZXJhdG9yc1xyXG4gICAgICAgICAgICAnKycsICctJywgJyonLCAnKionLCAnLycsICclJywgJysrJywgJy0tJywgJzw8JywgJz4+JywgJz4+PicsICcmJyxcclxuICAgICAgICAgICAgJ3wnLCAnXicsICchJywgJ34nLCAnJiYnLCAnfHwnLCAnPycsICc6JywgJz09PScsICc9PScsICc+PScsXHJcbiAgICAgICAgICAgICc8PScsICc8JywgJz4nLCAnIT0nLCAnIT09J1xyXG4gICAgICAgIF0uaW5kZXhPZih0b2tlbi52YWx1ZSkgPj0gMCA6IGZhbHNlO1xyXG4gICAgfSovXHJcbn0iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQStIQTtBQXpIQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFjQTtBQUFBOzsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../js/character.ts\n");

/***/ }),

/***/ "../../js/index.ts":
/*!****************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Parser = exports.Tokenizer = void 0;\nvar head_1 = __webpack_require__(/*! ./lexical/head */ \"../../js/lexical/head.ts\");\nvar index_1 = __webpack_require__(/*! ./lexical/index */ \"../../js/lexical/index.ts\");\nvar parser_1 = __webpack_require__(/*! ./parser */ \"../../js/parser.ts\");\nvar tokenizer_1 = __webpack_require__(/*! ./tokenizer */ \"../../js/tokenizer.ts\");\nvar head_2 = __webpack_require__(/*! ./syntax/head */ \"../../js/syntax/head.ts\");\nvar expression_1 = __webpack_require__(/*! ./syntax/expression */ \"../../js/syntax/expression.ts\");\nvar declaration_1 = __webpack_require__(/*! ./syntax/declaration */ \"../../js/syntax/declaration.ts\");\nvar statement_1 = __webpack_require__(/*! ./syntax/statement */ \"../../js/syntax/statement.ts\");\nvar module_declaration_1 = __webpack_require__(/*! ./syntax/module_declaration */ \"../../js/syntax/module_declaration.ts\");\nhead_2.async_getter.open();\nvar EXPRESSION_TREE = head_2.async_getter.EXPRESSION_TREE;\nvar SYNTAX_TREE = head_2.createMatchTree([\n    declaration_1.default,\n    module_declaration_1.default,\n    statement_1.default\n], EXPRESSION_TREE);\nvar EXPRESSION_ITEM_PATTERN = {};\nvar DECLARATION_ITEM_PATTERN = {};\nvar STATEMENT_ITEM_PATTERN = {};\nvar STATEMENT_LIST_ITEM_PATTERN = {};\nvar MODULE_ITEM_PATTERN = {};\nfor (var _i = 0, _a = [\n    [\n        expression_1.default,\n        [EXPRESSION_ITEM_PATTERN]\n    ],\n    [\n        declaration_1.default,\n        [DECLARATION_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\n    ],\n    [\n        statement_1.default,\n        [STATEMENT_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\n    ],\n    [\n        module_declaration_1.default,\n        [MODULE_ITEM_PATTERN, STATEMENT_LIST_ITEM_PATTERN]\n    ],\n]; _i < _a.length; _i++) {\n    var _b = _a[_i], descriptor = _b[0], patterns = _b[1];\n    for (var key in descriptor) {\n        if (key) {\n            for (var _c = 0, patterns_1 = patterns; _c < patterns_1.length; _c++) {\n                var pattern = patterns_1[_c];\n                pattern[key] = true;\n            }\n        }\n    }\n}\nfunction isExpression(node) {\n    return EXPRESSION_ITEM_PATTERN[node.type];\n}\nfunction isDeclaration(node) {\n    return DECLARATION_ITEM_PATTERN[node.type];\n}\nfunction isStatement(node) {\n    return STATEMENT_ITEM_PATTERN[node.type];\n}\nfunction isStatementListItem(node) {\n    return STATEMENT_LIST_ITEM_PATTERN[node.type];\n}\nfunction isModuleItem(node) {\n    return MODULE_ITEM_PATTERN[node.type];\n}\nvar TOKEN_TYPE_MAPPERS = index_1.TOKEN_TYPE_SET.reduce(function (map, _a) {\n    var type = _a[0], id_set = _a[1];\n    for (var _i = 0, id_set_1 = id_set; _i < id_set_1.length; _i++) {\n        var id = id_set_1[_i];\n        map[\" \" + id] = type;\n    }\n    return map;\n}, {});\nvar PUNCTUATORS_TREE = head_1.createSearchTree(index_1.PUNCTUATORS);\nvar PRIMARY_EXPR_START_PUNCTUATORS_TREE = head_1.createSearchTree([index_1.REGEXP_DESCRIPTOR], head_1.createSearchTree(index_1.PUNCTUATORS, undefined, [\"/=\"]));\nvar Tokenizer = /** @class */ (function (_super) {\n    __extends(Tokenizer, _super);\n    function Tokenizer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.TYPE_ENUMS = index_1.TYPE_ENUMS;\n        _this.PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\n        _this.PUNCTUATORS_TREE = PUNCTUATORS_TREE;\n        return _this;\n    }\n    return Tokenizer;\n}(tokenizer_1.default));\nexports.Tokenizer = Tokenizer;\nvar Dison = /** @class */ (function (_super) {\n    __extends(Dison, _super);\n    function Dison() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.token_hooks = head_2.token_hooks;\n        _this.TYPE_ENUMS = index_1.TYPE_ENUMS;\n        _this.PRIMARY_EXPR_START_PUNCTUATORS_TREE = PRIMARY_EXPR_START_PUNCTUATORS_TREE;\n        _this.PUNCTUATORS_TREE = PUNCTUATORS_TREE;\n        _this.TOKEN_TYPE_MAPPERS = TOKEN_TYPE_MAPPERS;\n        _this.SYNTAX_TREE = SYNTAX_TREE;\n        _this.EXPRESSION_TREE = EXPRESSION_TREE;\n        _this.isExpression = isExpression;\n        _this.isStatement = isStatement;\n        _this.isStatementListItem = isStatementListItem;\n        _this.isDeclaration = isDeclaration;\n        _this.isModuleItem = isModuleItem;\n        return _this;\n    }\n    return Dison;\n}(parser_1.default));\nexports.Parser = Dison;\nexports.default = Dison;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vanMvaW5kZXgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL21udC9kL1Byb2dyYW1GaWxlcy9HaXRIdWIvRGlzb24vanMvaW5kZXgudHM/MDI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7XHJcbiAgICBUb2tlbiwgTm9kZSwgQ29udGV4dCwgQ09OVEVYVCwgTWF0Y2hUcmVlXHJcbn0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuXHJcbmltcG9ydCB7IGNyZWF0ZVNlYXJjaFRyZWUgfSBmcm9tICcuL2xleGljYWwvaGVhZCdcclxuXHJcbmltcG9ydCB7XHJcbiAgICBUWVBFX0VOVU1TLFxyXG4gICAgUFVOQ1RVQVRPUlMsXHJcbiAgICBUT0tFTl9UWVBFX1NFVCxcclxuICAgIFJFR0VYUF9ERVNDUklQVE9SXHJcbn0gZnJvbSBcIi4vbGV4aWNhbC9pbmRleFwiO1xyXG5cclxuaW1wb3J0IFBhcnNlciBmcm9tICcuL3BhcnNlcic7XHJcbmltcG9ydCBUb2tlbml6ZXJPcmlnaW4gZnJvbSAnLi90b2tlbml6ZXInO1xyXG5cclxuaW1wb3J0IHsgYXN5bmNfZ2V0dGVyLCB0b2tlbl9ob29rcywgY3JlYXRlTWF0Y2hUcmVlIH0gZnJvbSAnLi9zeW50YXgvaGVhZCdcclxuXHJcbmltcG9ydCBFeHByZXNzaW9ucyBmcm9tICcuL3N5bnRheC9leHByZXNzaW9uJ1xyXG5pbXBvcnQgRGVjbGFyYXRpb25zIGZyb20gJy4vc3ludGF4L2RlY2xhcmF0aW9uJ1xyXG5pbXBvcnQgU3RhdGVtZW50cyBmcm9tICcuL3N5bnRheC9zdGF0ZW1lbnQnXHJcbmltcG9ydCBNb2R1bGVEZWNsYXJhdGlvbnMgZnJvbSAnLi9zeW50YXgvbW9kdWxlX2RlY2xhcmF0aW9uJ1xyXG5cclxuXHJcbmFzeW5jX2dldHRlci5vcGVuKCk7XHJcbmxldCBFWFBSRVNTSU9OX1RSRUU6IE1hdGNoVHJlZSA9IGFzeW5jX2dldHRlci5FWFBSRVNTSU9OX1RSRUU7XHJcblxyXG5jb25zdCBTWU5UQVhfVFJFRSA9IGNyZWF0ZU1hdGNoVHJlZShbXHJcbiAgICBEZWNsYXJhdGlvbnMsXHJcbiAgICBNb2R1bGVEZWNsYXJhdGlvbnMsXHJcbiAgICBTdGF0ZW1lbnRzXHJcbl0sIEVYUFJFU1NJT05fVFJFRSk7XHJcblxyXG5cclxubGV0IEVYUFJFU1NJT05fSVRFTV9QQVRURVJOID0ge307XHJcbmxldCBERUNMQVJBVElPTl9JVEVNX1BBVFRFUk4gPSB7fTtcclxubGV0IFNUQVRFTUVOVF9JVEVNX1BBVFRFUk4gPSB7fTtcclxubGV0IFNUQVRFTUVOVF9MSVNUX0lURU1fUEFUVEVSTiA9IHt9O1xyXG5sZXQgTU9EVUxFX0lURU1fUEFUVEVSTiA9IHt9O1xyXG5mb3IgKFxyXG4gICAgY29uc3QgW2Rlc2NyaXB0b3IsIHBhdHRlcm5zXVxyXG4gICAgb2ZcclxuICAgIFtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIEV4cHJlc3Npb25zLFxyXG4gICAgICAgICAgICBbRVhQUkVTU0lPTl9JVEVNX1BBVFRFUk5dXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIERlY2xhcmF0aW9ucyxcclxuICAgICAgICAgICAgW0RFQ0xBUkFUSU9OX0lURU1fUEFUVEVSTiwgU1RBVEVNRU5UX0xJU1RfSVRFTV9QQVRURVJOXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBTdGF0ZW1lbnRzLFxyXG4gICAgICAgICAgICBbU1RBVEVNRU5UX0lURU1fUEFUVEVSTiwgU1RBVEVNRU5UX0xJU1RfSVRFTV9QQVRURVJOXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBNb2R1bGVEZWNsYXJhdGlvbnMsXHJcbiAgICAgICAgICAgIFtNT0RVTEVfSVRFTV9QQVRURVJOLCBTVEFURU1FTlRfTElTVF9JVEVNX1BBVFRFUk5dXHJcbiAgICAgICAgXSxcclxuICAgIF0gYXMgQXJyYXk8W1JlY29yZDxzdHJpbmcsIGFueT4sIEFycmF5PFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+Pl0+XHJcbikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGlmIChrZXkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0V4cHJlc3Npb24obm9kZTogTm9kZSkge1xyXG4gICAgcmV0dXJuIEVYUFJFU1NJT05fSVRFTV9QQVRURVJOW25vZGUudHlwZV07XHJcbn1cclxuZnVuY3Rpb24gaXNEZWNsYXJhdGlvbihub2RlOiBOb2RlKSB7XHJcbiAgICByZXR1cm4gREVDTEFSQVRJT05fSVRFTV9QQVRURVJOW25vZGUudHlwZV07XHJcbn1cclxuZnVuY3Rpb24gaXNTdGF0ZW1lbnQobm9kZTogTm9kZSkge1xyXG4gICAgcmV0dXJuIFNUQVRFTUVOVF9JVEVNX1BBVFRFUk5bbm9kZS50eXBlXTtcclxufVxyXG5mdW5jdGlvbiBpc1N0YXRlbWVudExpc3RJdGVtKG5vZGU6IE5vZGUpIHtcclxuICAgIHJldHVybiBTVEFURU1FTlRfTElTVF9JVEVNX1BBVFRFUk5bbm9kZS50eXBlXTtcclxufVxyXG5mdW5jdGlvbiBpc01vZHVsZUl0ZW0obm9kZTogTm9kZSkge1xyXG4gICAgcmV0dXJuIE1PRFVMRV9JVEVNX1BBVFRFUk5bbm9kZS50eXBlXTtcclxufVxyXG5cclxuXHJcbmNvbnN0IFRPS0VOX1RZUEVfTUFQUEVSUzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPiA9IFRPS0VOX1RZUEVfU0VULnJlZHVjZShcclxuICAgIChtYXAsIFt0eXBlLCBpZF9zZXRdKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaWQgb2YgaWRfc2V0KSB7XHJcbiAgICAgICAgICAgIG1hcFtcIiBcIiArIGlkXSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXA7XHJcbiAgICB9LCB7fVxyXG4pO1xyXG5jb25zdCBQVU5DVFVBVE9SU19UUkVFID0gY3JlYXRlU2VhcmNoVHJlZShQVU5DVFVBVE9SUyk7XHJcbmNvbnN0IFBSSU1BUllfRVhQUl9TVEFSVF9QVU5DVFVBVE9SU19UUkVFID0gY3JlYXRlU2VhcmNoVHJlZShcclxuICAgIFtSRUdFWFBfREVTQ1JJUFRPUl0sXHJcbiAgICBjcmVhdGVTZWFyY2hUcmVlKFBVTkNUVUFUT1JTLCB1bmRlZmluZWQsIFtcIi89XCJdKSxcclxuKTtcclxuXHJcblxyXG5cclxuY2xhc3MgVG9rZW5pemVyIGV4dGVuZHMgVG9rZW5pemVyT3JpZ2luIHtcclxuICAgIFRZUEVfRU5VTVMgPSBUWVBFX0VOVU1TO1xyXG4gICAgUFJJTUFSWV9FWFBSX1NUQVJUX1BVTkNUVUFUT1JTX1RSRUUgPSBQUklNQVJZX0VYUFJfU1RBUlRfUFVOQ1RVQVRPUlNfVFJFRTtcclxuICAgIFBVTkNUVUFUT1JTX1RSRUUgPSBQVU5DVFVBVE9SU19UUkVFO1xyXG59XHJcbmNsYXNzIERpc29uIGV4dGVuZHMgUGFyc2VyIHtcclxuICAgIHRva2VuX2hvb2tzID0gdG9rZW5faG9va3M7XHJcbiAgICBUWVBFX0VOVU1TID0gVFlQRV9FTlVNUztcclxuICAgIFBSSU1BUllfRVhQUl9TVEFSVF9QVU5DVFVBVE9SU19UUkVFID0gUFJJTUFSWV9FWFBSX1NUQVJUX1BVTkNUVUFUT1JTX1RSRUU7XHJcbiAgICBQVU5DVFVBVE9SU19UUkVFID0gUFVOQ1RVQVRPUlNfVFJFRTtcclxuICAgIFRPS0VOX1RZUEVfTUFQUEVSUyA9IFRPS0VOX1RZUEVfTUFQUEVSUztcclxuICAgIFNZTlRBWF9UUkVFID0gU1lOVEFYX1RSRUU7XHJcbiAgICBFWFBSRVNTSU9OX1RSRUUgPSBFWFBSRVNTSU9OX1RSRUU7XHJcblxyXG4gICAgaXNFeHByZXNzaW9uID0gaXNFeHByZXNzaW9uO1xyXG4gICAgaXNTdGF0ZW1lbnQgPSBpc1N0YXRlbWVudDtcclxuICAgIGlzU3RhdGVtZW50TGlzdEl0ZW0gPSBpc1N0YXRlbWVudExpc3RJdGVtO1xyXG4gICAgaXNEZWNsYXJhdGlvbiA9IGlzRGVjbGFyYXRpb247XHJcbiAgICBpc01vZHVsZUl0ZW0gPSBpc01vZHVsZUl0ZW07XHJcbn1cclxuZXhwb3J0IHtcclxuICAgIFRva2VuaXplcixcclxuICAgIERpc29uIGFzIFBhcnNlclxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBEaXNvbjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBTUE7QUFFQTtBQU9BO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBcUJBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBaUJBO0FBaEJBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQUE7QUFBQTtBQUdBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../js/index.ts\n");

/***/ }),

/***/ "../../js/interfaces.ts":
/*!*********************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/interfaces.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NUMERIC_KEYWORD_MAPPINGS = void 0;\nvar NUMERIC_KEYWORD_MAPPINGS;\n(function (NUMERIC_KEYWORD_MAPPINGS) {\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\".\"] = 36] = \".\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"x\"] = 8] = \"x\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"b\"] = 1] = \"b\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"o\"] = 2] = \"o\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"X\"] = 8] = \"X\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"B\"] = 1] = \"B\";\n    NUMERIC_KEYWORD_MAPPINGS[NUMERIC_KEYWORD_MAPPINGS[\"O\"] = 2] = \"O\";\n})(NUMERIC_KEYWORD_MAPPINGS || (NUMERIC_KEYWORD_MAPPINGS = {}));\nexports.NUMERIC_KEYWORD_MAPPINGS = NUMERIC_KEYWORD_MAPPINGS;\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/interfaces.ts\n");

/***/ }),

/***/ "../../js/lexical/head.ts":
/*!***********************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/lexical/head.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._Scanner = exports.createSearchTree = void 0;\nfunction createSearchTree(data, root, block_list) {\n    if (root === void 0) { root = {}; }\n    if (block_list === void 0) { block_list = []; }\n    var _loop_1 = function (item) {\n        var node = root;\n        switch (true) {\n            case typeof item === \"string\":\n                item = {\n                    type: \"Punctuator\",\n                    key: item,\n                };\n                break;\n            default:\n                item.type === undefined && (item.type = \"Punctuator\");\n                break;\n        }\n        if (~block_list.indexOf(item.key)) {\n            return \"continue\";\n        }\n        for (var _i = 0, _a = item.key; _i < _a.length; _i++) {\n            var part = _a[_i];\n            node = node[part] || (node[part] = {});\n        }\n        if (node[\" END\" /* END */] && !item.overload) {\n            var next_item_1 = node[\" END\" /* END */];\n            var curr_item_1 = item;\n            if (typeof next_item_1 === \"function\") {\n                if (curr_item_1.filter) {\n                    node[\" END\" /* END */] = function (tokenizer) {\n                        return curr_item_1.filter(tokenizer) ? curr_item_1 : next_item_1(tokenizer);\n                    };\n                }\n                else {\n                    node[\" END\" /* END */] = function (tokenizer) {\n                        return next_item_1(tokenizer) || curr_item_1;\n                    };\n                }\n                return \"continue\";\n            }\n            else if (curr_item_1.filter) {\n                node[\" END\" /* END */] = function (tokenizer) {\n                    return curr_item_1.filter(tokenizer) ? curr_item_1 : next_item_1;\n                };\n                return \"continue\";\n            }\n            else {\n                console.warn(\"conflict:\", node, node[\" END\" /* END */], item);\n            }\n        }\n        node[\" END\" /* END */] = item.filter ?\n            function (tokenizer) { return item.filter(tokenizer) && item; } :\n            item;\n    };\n    for (var _i = 0, _a = data; _i < _a.length; _i++) {\n        var item = _a[_i];\n        _loop_1(item);\n    }\n    return root;\n}\nexports.createSearchTree = createSearchTree;\nfunction _Scanner(use_escape_mode) {\n    if (use_escape_mode === void 0) { use_escape_mode = false; }\n    return function (tokenizer, start) {\n        if (start === void 0) { start = tokenizer.index; }\n        var error;\n        var line_number = tokenizer.line_number;\n        var line_start = tokenizer.line_start;\n        var root = this.scan_tree;\n        var nodes = [];\n        var str = \"\";\n        var char;\n        var backslash_count = 0;\n        var token;\n        var self = this;\n        if (use_escape_mode) {\n            var has_escape = void 0;\n            while (char = tokenizer.input[tokenizer.index++]) {\n                has_escape = backslash_count % 2;\n                if (char === \"\\\\\" /* ESCAPE */) {\n                    backslash_count += 1;\n                    if (has_escape) {\n                        str += char;\n                        token = _next(\"\\\\\" /* ESCAPE */);\n                        if (token) {\n                            return token;\n                        }\n                    }\n                }\n                else {\n                    str += char;\n                    backslash_count = 0;\n                    if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\n                        tokenizer.index -= 1;\n                        token = _next(has_escape ? \"\\\\\" /* ESCAPE */ + \"\\n\" : \"\\n\");\n                        if (token) {\n                            return token;\n                        }\n                        tokenizer.index += 1;\n                        tokenizer.line_number += 1;\n                        tokenizer.line_start = tokenizer.index;\n                    }\n                    else {\n                        token = _next(!has_escape ? char : \"\\\\\" /* ESCAPE */ + char);\n                        if (token) {\n                            return token;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            while (char = tokenizer.input[tokenizer.index]) {\n                str += char;\n                backslash_count = 0;\n                if (tokenizer.isLineTerminator(char.charCodeAt(0))) {\n                    token = _next(\"\\n\");\n                    if (token) {\n                        return token;\n                    }\n                    tokenizer.index += 1;\n                    tokenizer.line_number += 1;\n                    tokenizer.line_start = tokenizer.index;\n                }\n                else {\n                    tokenizer.index += 1;\n                    token = _next(char);\n                    if (token) {\n                        return token;\n                    }\n                }\n            }\n        }\n        if ((token = _next(\"\" /* EOF */))) {\n            return token;\n        }\n        else {\n            var token_1 = _get_token(tokenizer.index);\n            tokenizer.err(token_1);\n            return token_1;\n        }\n        function _next(key) {\n            var index = 0, node, res;\n            for (; index < nodes.length; index += 2) {\n                node = nodes[index][key];\n                if (node) {\n                    if (res = _finally(node, nodes[index + 1])) {\n                        return res;\n                    }\n                    nodes[index] = node;\n                }\n                else {\n                    nodes.splice(index, 2);\n                    index -= 2;\n                }\n            }\n            if (node = root[key]) {\n                if (res = _finally(node, str.length - 1)) {\n                    return res;\n                }\n                nodes.push(node, str.length - 1);\n            }\n        }\n        function _get_token(end_index) {\n            tokenizer._scopes = self;\n            tokenizer._volatility = str.slice(0, end_index);\n            return tokenizer.createToken(self.type, [start, tokenizer.index], undefined, { line: line_number, column: start - line_start });\n        }\n        function _finally(node, end_index) {\n            node[\" ERR\" /* ERROR */] && (error = node[\" ERR\" /* ERROR */]);\n            var part = node[\" ATT\" /* ATTACH */] ? node[\" ATT\" /* ATTACH */](tokenizer, self) : node[\" STR\" /* STRING */];\n            if (part !== undefined) {\n                str = str.slice(0, end_index) + part;\n            }\n            switch (true) {\n                case node[\" END\" /* END */] && true:\n                    if (node[\" END\" /* END */] === true || node[\" END\" /* END */](tokenizer, self)) {\n                        var token_2 = _get_token(end_index);\n                        if (error) {\n                            token_2.error = error;\n                            tokenizer.err(token_2);\n                        }\n                        return token_2;\n                    }\n                    break;\n                case node[\" NEXT\" /* NEXT */] && true:\n                    tokenizer._scopes = self;\n                    tokenizer._volatility = str.slice(0, end_index);\n                    return node[\" NEXT\" /* NEXT */](tokenizer, self);\n            }\n        }\n    };\n}\nexports._Scanner = _Scanner;\n/**\nfunction createScanTree(data: Array<any>[]) {\n    let root: Record<string, any> = {};\n    for (let branch of data) {\n        let node = root;\n        for (let i = 0, limit = branch.length - 1, part: string; i < limit; i++) {\n            part = branch[i];\n            node = node[part] || (node[part] = {});\n        }\n        let actions = branch[branch.length - 1];\n        for (let i = 0; i < actions.length; i += 2) {\n            node[actions[i]] = actions[i + 1];\n        }\n    }\n    return root;\n}\n\n\n\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/lexical/head.ts\n");

/***/ }),

/***/ "../../js/lexical/index.ts":
/*!************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/lexical/index.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REGEXP_DESCRIPTOR = exports.TOKEN_TYPE_SET = exports.PUNCTUATORS = exports.TYPE_ENUMS = void 0;\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/lexical/head.ts\");\nvar TOKEN_TYPE_SET = [\n    [\n        \"Keyword\",\n        [\n            \"void\",\n            \"delete\",\n            \"new\",\n            \"class\", \"extends\",\n            \"function\",\n            \"throw\",\n            \"with\",\n            \"yield\",\n            \"in\", \"instanceof\", \"typeof\",\n            \"this\", \"super\",\n            \"var\", \"const\",\n            \"break\", \"continue\", \"return\",\n            \"if\", \"else\",\n            \"switch\", \"case\", \"default\",\n            \"try\", \"catch\", \"finally\",\n            \"do\", \"while\", \"for\",\n            \"await\",\n            \"import\", \"export\",\n            \"debugger\",\n            \"enum\" //用于错误检测\n        ]\n    ],\n    [\"Identifier\", [\"let\", \"async\"]],\n    [\"Boolean\", [\"true\", \"false\"]],\n    [\"Null\", [\"null\"]]\n];\nexports.TOKEN_TYPE_SET = TOKEN_TYPE_SET;\nvar octal_escape = (_a = {},\n    //_state: MATCH_STATUS.ATTACH,\n    _a[\" ATT\" /* ATTACH */] = function (tokenizer, self) {\n        var code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index - 1));\n        var value = 0;\n        code && (self.octal = true);\n        var len = code <= 3 ? 2 : 1;\n        while (true) {\n            value = value * 8 + code;\n            code = tokenizer.octalValue(tokenizer.input.charCodeAt(tokenizer.index));\n            if (code < 0 || --len < 0) {\n                break;\n            }\n            self.octal = true;\n            tokenizer.index += 1;\n        }\n        return String.fromCharCode(value);\n    },\n    _a);\nvar octal_escape_tree = {\n    \"\\\\0\": octal_escape,\n    \"\\\\1\": octal_escape,\n    \"\\\\2\": octal_escape,\n    \"\\\\3\": octal_escape,\n    \"\\\\4\": octal_escape,\n    \"\\\\5\": octal_escape,\n    \"\\\\6\": octal_escape,\n    \"\\\\7\": octal_escape,\n};\nvar strbase_scan_tree = (_b = {},\n    _b[\"\\\\\" /* ESCAPE */ + \"\\n\"] = (_c = {}, _c[\" STR\" /* STRING */] = \"\", _c),\n    _b[\"\\\\n\"] = (_d = {}, _d[\" STR\" /* STRING */] = \"\\n\", _d),\n    _b[\"\\\\r\"] = (_e = {}, _e[\" STR\" /* STRING */] = \"\\r\", _e),\n    _b[\"\\\\t\"] = (_f = {}, _f[\" STR\" /* STRING */] = \"\\t\", _f),\n    _b[\"\\\\b\"] = (_g = {}, _g[\" STR\" /* STRING */] = \"\\b\", _g),\n    _b[\"\\\\f\"] = (_h = {}, _h[\" STR\" /* STRING */] = \"\\f\", _h),\n    _b[\"\\\\v\"] = (_j = {}, _j[\" STR\" /* STRING */] = \"\\v\", _j),\n    _b[\"\\\\u\"] = (_k = {},\n        //_state: MATCH_STATUS.ATTACH,\n        _k[\" ATT\" /* ATTACH */] = function (tokenizer) {\n            if (tokenizer.input[tokenizer.index] === \"{\") {\n                tokenizer.index++;\n                var code = tokenizer.scanHex()[0];\n                if (tokenizer.input[tokenizer.index] === \"}\") {\n                    tokenizer.index++;\n                    if (code <= 0x10ffff) {\n                        return String.fromCharCode(code);\n                    }\n                }\n            }\n            else {\n                var _a = tokenizer.scanHex(4), code = _a[0], len = _a[1];\n                if (len === 4) {\n                    return String.fromCharCode(code);\n                }\n            }\n            return false;\n        },\n        _k),\n    _b[\"\\\\x\"] = (_l = {},\n        //_state: MATCH_STATUS.ATTACH,\n        _l[\" ATT\" /* ATTACH */] = function (tokenizer) {\n            var _a = tokenizer.scanHex(2), code = _a[0], len = _a[1];\n            if (len === 2) {\n                return String.fromCharCode(code);\n            }\n            return false;\n        },\n        _l),\n    _b);\nvar not_allow_octal_escape = (_m = {},\n    //_state: MATCH_STATUS.ERROR,\n    _m[\" ERR\" /* ERROR */] = \"Octal escape sequences are not allowed in template strings\",\n    _m);\n//let template_curly_stack = [];\nvar template_base = {\n    type: \"Template\",\n    scan_tree: __assign((_o = {}, _o[\"\" /* EOF */] = (_p = {},\n        //_state: MATCH_STATUS.END,\n        _p[\" ERR\" /* ERROR */] = \"Unexpected token\",\n        _p[\" END\" /* END */] = function (tokenizer) {\n            tokenizer.curly_stack.shift();\n            return true;\n        },\n        _p), _o[\"\\\\0\"] = (_q = {}, _q[\" STR\" /* STRING */] = \"\\0\", _q), _o[\"\\\\1\"] = not_allow_octal_escape, _o[\"\\\\2\"] = not_allow_octal_escape, _o[\"\\\\3\"] = not_allow_octal_escape, _o[\"\\\\4\"] = not_allow_octal_escape, _o[\"\\\\5\"] = not_allow_octal_escape, _o[\"\\\\6\"] = not_allow_octal_escape, _o[\"\\\\7\"] = not_allow_octal_escape, _o[\"`\"] = (_r = {},\n        _r[\" END\" /* END */] = function (tokenizer) {\n            tokenizer.curly_stack.shift();\n            return true;\n        },\n        _r), _o[\"$\"] = {\n        \"{\": (_s = {},\n            _s[\" END\" /* END */] = true,\n            _s)\n    }, _o), strbase_scan_tree),\n    scanner: head_1._Scanner(true)\n};\nvar PUNCTUATORS = [\n    {\n        key: \"\\\"\",\n        type: \"String\",\n        scan_tree: __assign(__assign({ '\"': (_t = {},\n                _t[\" END\" /* END */] = true,\n                _t), \"\\n\": (_u = {},\n                //_state: MATCH_STATUS.ERROR\n                _u[\" ERR\" /* ERROR */] = \"Invalid or unexpected token\",\n                _u) }, strbase_scan_tree), octal_escape_tree),\n        escape_scan: head_1._Scanner(true),\n        octal: false,\n        scanner: function (tokenizer, start) {\n            this.octal = false;\n            return this.escape_scan(tokenizer, start);\n        }\n    },\n    {\n        key: \"'\",\n        type: \"String\",\n        scan_tree: __assign(__assign({ \"'\": (_v = {},\n                _v[\" END\" /* END */] = true,\n                _v), \"\\n\": (_w = {},\n                //_state: MATCH_STATUS.ERROR\n                _w[\" ERR\" /* ERROR */] = \"Invalid or unexpected token\",\n                _w) }, strbase_scan_tree), octal_escape_tree),\n        escape_scan: head_1._Scanner(true),\n        octal: false,\n        scanner: function (tokenizer, start) {\n            this.octal = false;\n            return this.escape_scan(tokenizer, start);\n        }\n    },\n    __assign(__assign({ key: \"`\" }, template_base), { escape_scan: head_1._Scanner(true), scanner: function (tokenizer, start) {\n            tokenizer.curly_stack.unshift(\"`\");\n            return this.escape_scan(tokenizer, start);\n        } }),\n    __assign(__assign({ key: \"}\" }, template_base), { filter: function (tokenizer) {\n            return tokenizer.curly_stack[0] === \"`\";\n        } }),\n    {\n        key: '/*', bound: '*/', type: \"Comments\",\n        scan_tree: (_x = {\n                \"*\": {\n                    \"/\": (_y = {},\n                        //_state: MATCH_STATUS.END\n                        _y[\" END\" /* END */] = true,\n                        _y)\n                }\n            },\n            _x[\"\" /* EOF */] = (_z = {},\n                _z[\" END\" /* END */] = true,\n                _z[\" ERR\" /* ERROR */] = \"Unexpected token\",\n                _z),\n            _x),\n        scanner: head_1._Scanner(false)\n    },\n    {\n        key: '//', bound: '\\n', type: \"Comments\",\n        scan_tree: (_0 = {\n                \"\\n\": (_1 = {},\n                    _1[\" END\" /* END */] = true,\n                    _1)\n            },\n            _0[\"\" /* EOF */] = (_2 = {},\n                _2[\" END\" /* END */] = true,\n                _2),\n            _0),\n        scanner: head_1._Scanner(false)\n    },\n    //[\"(\", \")\"], [\"[\", \"]\"], [\"{\", \"}\"],\n    \"(\", \")\", \"[\", \"]\", \"{\", \"}\",\n    ';', '.', '?.',\n    '++', '--', '~', '!',\n    '**', '*', '/', '%',\n    '+', '-',\n    '<<', '>>', '>>>',\n    '<', '>', '<=', '>=', '==', '!=', '===', '!==',\n    '&',\n    '^',\n    '|',\n    '&&',\n    '||',\n    '?', \":\",\n    '=', '+=', '-=', '*=', '/=', '%=', '**=', '<<=', '>>=', '>>>=', '&=', '|=', '^=',\n    '...',\n    ',',\n    '=>'\n];\nexports.PUNCTUATORS = PUNCTUATORS;\nvar REGEXP_DESCRIPTOR = {\n    key: '/', type: \"RegularExpression\",\n    scan_tree: (_3 = {\n            '/': (_4 = {},\n                _4[\" END\" /* END */] = function (tokenizer, self) {\n                    return !self.class_marker;\n                },\n                _4),\n            '[': (_5 = {},\n                _5[\" ATT\" /* ATTACH */] = function (tokenizer, self) {\n                    self.class_marker = true;\n                },\n                _5),\n            ']': (_6 = {},\n                _6[\" ATT\" /* ATTACH */] = function (tokenizer, self) {\n                    self.class_marker = false;\n                },\n                _6),\n            '\\n': (_7 = {},\n                _7[\" ERR\" /* ERROR */] = \"Invalid or unexpected token\",\n                _7),\n            '\\\\\\n': (_8 = {},\n                _8[\" ERR\" /* ERROR */] = \"Invalid or unexpected token\",\n                _8)\n        },\n        _3[\"\" /* EOF */] = (_9 = {},\n            _9[\" END\" /* END */] = true,\n            _9[\" ERR\" /* ERROR */] = \"Invalid or unexpected token\",\n            _9),\n        _3),\n    overload: true,\n    escape_scan: head_1._Scanner(true),\n    class_marker: false,\n    scanner: function (tokenizer, start) {\n        this.class_marker = false;\n        var token = this.escape_scan(tokenizer, start);\n        if (token) {\n            token.regex = {\n                pattern: token.value.slice(1, token.value[token.value.length - 1] !== \"/\" ? undefined : -1),\n                flags: \"\"\n            };\n            var start_1 = tokenizer.index;\n            var length_1 = 0;\n            do {\n                tokenizer.index += length_1;\n                length_1 = tokenizer.inIdentifierPart();\n            } while (length_1);\n            if (start_1 !== tokenizer.index) {\n                token.regex.flags = tokenizer.input.slice(start_1, tokenizer.index);\n                token.value += token.regex.flags;\n                token.range[1] += tokenizer.index - start_1;\n                token.loc.end.column += tokenizer.index - start_1;\n            }\n            return token;\n        }\n    }\n};\nexports.REGEXP_DESCRIPTOR = REGEXP_DESCRIPTOR;\n//const IS_RADIX = NUMERIC_TYPE.BINARY | NUMERIC_TYPE.OCTAL | NUMERIC_TYPE.HEX;\nvar TYPE_ENUMS = {\n    Identifier: \"Identifier\",\n    Keyword: \"Keyword\",\n    String: \"String\",\n    Boolean: \"Boolean\",\n    Numeric: \"Numeric\",\n    Punctuator: \"Punctuator\",\n    RegularExpression: \"RegularExpression\",\n    Template: \"Template\",\n    TemplateElement: \"TemplateElement\",\n    Comments: \"Comments\",\n    Null: \"Null\"\n};\nexports.TYPE_ENUMS = TYPE_ENUMS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/lexical/index.ts\n");

/***/ }),

/***/ "../../js/parser.ts":
/*!*****************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/parser.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tokenizer_1 = __webpack_require__(/*! ./tokenizer */ \"../../js/tokenizer.ts\");\nvar head_1 = __webpack_require__(/*! ./syntax/head */ \"../../js/syntax/head.ts\");\nvar Script = head_1.NODES.Script, Module = head_1.NODES.Module;\nvar default_1 = /** @class */ (function (_super) {\n    __extends(default_1, _super);\n    function default_1() {\n        var _this = _super.call(this) || this;\n        _this.TYPE_ALIAS = head_1.TYPE_ALIAS;\n        _this.padding_token = {\n            type: \"\" /* BOUNDARY */,\n            value: \"\" /* BOUNDARY */\n        };\n        _this.save_comments = false;\n        return _this;\n    }\n    Object.defineProperty(default_1.prototype, \"is_primary_expr_start\", {\n        get: function () {\n            if (this.tokens.length) {\n                var last_node = this.tokens[this.tokens.length - 1];\n                return this.isStatementListItem(last_node)\n                    || last_node.type === this.TYPE_ENUMS.Keyword\n                    || last_node.type === this.TYPE_ENUMS.Punctuator && !(/^\\{\\}|\\(\\)|\\[\\]$/.test(last_node.value));\n            }\n            else {\n                return true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    //token_hooks: Record<string, (token: Token, tokenizer?: Tokenizer) => Token> = token_hooks;\n    default_1.prototype.err = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.error_logs.push.apply(this.error_logs, args);\n    };\n    default_1.prototype.parse = function (input) {\n        return this.parseScript(input);\n    };\n    default_1.prototype.parseModule = function (input) {\n        var tokens = this._parse(input, 13 /* isModule */, true, 12 /* strict */, true);\n        var module = new Module(tokens);\n        if (tokens.length) {\n            head_1.attachLocation(module, tokens[0], tokens[tokens.length - 1]);\n        }\n        return module;\n    };\n    default_1.prototype.parseScript = function (input) {\n        var tokens = this._parse(input);\n        var script = new Script(tokens);\n        if (tokens.length) {\n            head_1.attachLocation(module, tokens[0], tokens[tokens.length - 1]);\n        }\n        return script;\n    };\n    default_1.prototype.parseExpression = function (context) {\n        context.wrap(14 /* isExpression */, true);\n        var res = this.parseNode(this.EXPRESSION_TREE, context, this.isExpression);\n        context.unwrap();\n        return res;\n    };\n    default_1.prototype.parseNode = function (match_tree, context, test) {\n        var tokens = context.tokens;\n        this.parseCustom(match_tree, context);\n        var res;\n        if (tokens.length) {\n            var index = 0;\n            if (test(tokens[0])) {\n                index = 1;\n                res = tokens[0];\n            }\n            if (tokens.length > index) {\n                this.err.apply(this, tokens.slice(index));\n            }\n        }\n        return res;\n    };\n    default_1.prototype.parseRangeAsNode = function (match_tree, context, left, lexcal_terminator, test) {\n        var res = this.parseRange(match_tree, context, left, lexcal_terminator, test);\n        if (!res.content) {\n            this.err(res);\n        }\n        return res.content;\n    };\n    default_1.prototype.parseRangeAsExpression = function (context, left, lexcal_terminator) {\n        context.wrap(14 /* isExpression */, true);\n        var res = this.parseRangeAsNode(this.EXPRESSION_TREE, context, left, lexcal_terminator, this.isExpression);\n        context.unwrap();\n        return res;\n    };\n    default_1.prototype._parse = function (input) {\n        var environments = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            environments[_i - 1] = arguments[_i];\n        }\n        //this.logs = [];\n        this.match_tree_stack = [];\n        this.context_stack = [];\n        this.init(input);\n        var context = head_1._Context(this);\n        environments.length && context.store.apply(context, environments);\n        //this.parseBlock(context);\n        var tokens = context.tokens;\n        this.parseCustom(this.SYNTAX_TREE, context);\n        if (tokens.length) {\n            if (!this.isStatementListItem(tokens[tokens.length - 1])) {\n                this.err(tokens.pop());\n            }\n        }\n        if (this.error_logs.length) {\n            console.warn(\"error:\", this.error_logs);\n        }\n        //console.log(\"logs:\", this.logs);\n        return this.tokens;\n    };\n    default_1.prototype.parseCustom = function (root, context, begin, test) {\n        if (begin === void 0) { begin = 0; }\n        var point = context.store(6 /* begin */, begin);\n        var cursor = begin - 1;\n        var backflow_tape = new Array(begin);\n        backflow_tape.push(cursor);\n        var extreme;\n        var state;\n        this.context_stack.unshift(context);\n        this.match_tree_stack.unshift(root);\n        while (true) {\n            if (cursor < begin || context.getToken(cursor)) {\n                if (!(extreme\n                    && (extreme[2 /* right */] < cursor\n                        && backflow_tape.length <= 3 + extreme[2 /* right */]\n                    //匹配边界断句\n                    )\n                    && ((state = this.finallize(context, extreme))\n                        || (extreme = undefined)))) {\n                    var longest = this.walk(root, context, cursor, backflow_tape, extreme === null || extreme === void 0 ? void 0 : extreme[2 /* right */]);\n                    //longest && this.logs.push(\"walk\", longest[MATCHED_RECORDS.left], longest[MATCHED_RECORDS.right], longest[MATCHED_RECORDS.matched][MATCHED.wrapper].name);\n                    if (longest) {\n                        var longest_precedence = longest[0 /* precedence */];\n                        var extreme_precedence = extreme && extreme[0 /* precedence */];\n                        if (( //如果该记录优先级为true，则立即处理\n                        longest_precedence[0 /* VALUE */] !== true\n                            || (extreme = longest, false)) && (!extreme_precedence\n                            || !(extreme_precedence[0 /* VALUE */] > longest_precedence[0 /* VALUE */]\n                                || extreme_precedence[1 /* RIGHT_ASSOCIATIVE */] === longest_precedence[0 /* VALUE */] //左结合\n                            )) || !(state = this.finallize(context, extreme))) {\n                            extreme = longest;\n                            //cursor += 1;\n                            //也可以单步步进，不过这样更效率一些也和当前收集器无冲突\n                            cursor += longest[2 /* right */] - longest[1 /* left */] || 1;\n                            continue;\n                        }\n                    }\n                    else {\n                        cursor += 1;\n                        continue;\n                    }\n                }\n            }\n            else if (!(extreme\n                && (state = this.finallize(context, extreme)))) {\n                break;\n            }\n            if (extreme) {\n                if (test\n                    && extreme[1 /* left */] <= begin\n                    && test(context.getToken(begin))) {\n                    context.restore(point);\n                    this.context_stack.shift();\n                    this.match_tree_stack.shift();\n                    return context.getToken(begin);\n                }\n                cursor = extreme[1 /* left */];\n            }\n            cursor >= begin && state !== -1 && (cursor = backflow_tape[cursor]);\n            state = 0;\n            extreme = undefined;\n            backflow_tape.splice(cursor + 1, backflow_tape.length - (cursor + 1));\n        }\n        this.context_stack.shift();\n        this.match_tree_stack.shift();\n        context.restore(point);\n    };\n    default_1.prototype.parseRange = function (match_tree, context, left, lexcal_terminator, test) {\n        var tokens = context.tokens;\n        this.terminator_stack.unshift(lexcal_terminator);\n        this.parseCustom(match_tree, context, left + 1);\n        this.terminator_stack.shift();\n        var before_token = tokens[left];\n        var after_token = tokens[tokens.length - 1];\n        var value = before_token.value;\n        var end = tokens.length - 1;\n        if (lexcal_terminator(after_token)) {\n            value += after_token.value;\n        }\n        else {\n            end += 1;\n            this.err(before_token);\n        }\n        var content = null, next = left + 1;\n        if (test) {\n            if (test(tokens[next])) {\n                content = tokens[next];\n                next += 1;\n            }\n            if (next < end) {\n                this.err.apply(this, this.tokens.splice(next, end - next));\n            }\n        }\n        else {\n            content = tokens.splice(next, end - next);\n        }\n        var res = {\n            type: this.TYPE_ENUMS.Punctuator,\n            value: value,\n            content: content\n        };\n        head_1.attachLocation(res, before_token, after_token);\n        tokens.splice(left, tokens.length - left, res);\n        return res;\n    };\n    default_1.prototype.walk = function (root, context, start, backflow_tape, minimum) {\n        var padding_token = this.padding_token;\n        var TYPE_ALIAS = this.TYPE_ALIAS;\n        var tokens = context.tokens;\n        var begin = context[6 /* begin */];\n        //let steps: Array<number> = [];\n        return explore(root, start);\n        function get_records(matched, end) {\n            if (!matched[5 /* filter */]\n                || matched[5 /* filter */](context, start, end)) {\n                return [\n                    matched[0 /* precedence */],\n                    start,\n                    end,\n                    matched\n                ];\n            }\n        }\n        function explore(parent, index) {\n            var res;\n            var matched;\n            if (parent[\" WAL\" /* WALKER */]) {\n                parent[\" WAL\" /* WALKER */](context, index - 1);\n            }\n            if (parent[\" TER\" /* TERMINAL */]) {\n                if (!(index - 1 <= minimum)) {\n                    matched = parent[\" END\" /* END */];\n                    if (matched && (res = get_records(matched, index - 1))) {\n                        minimum = index - 1;\n                    }\n                }\n                return res;\n            }\n            var token = index >= begin\n                ? context.getToken(index) || (index <= tokens.length && padding_token)\n                : padding_token;\n            if (!token) {\n                return;\n            }\n            var has_backflow = false;\n            if (backflow_tape.length <= index + 1) {\n                has_backflow = true;\n                backflow_tape.push(start);\n            }\n            var matched_node;\n            var alias = TYPE_ALIAS[token.type];\n            var cursor = 0, length = 1, type;\n            var longest;\n            var node;\n            var value_node, type_node;\n            if (alias) {\n                length = alias.length;\n                type = alias[cursor];\n            }\n            else {\n                type = token.type;\n            }\n            while (true) {\n                if (node = parent[type]) {\n                    res = undefined;\n                    if (!((value_node = node[token.value])\n                        && (res = explore(value_node, index + 1)))\n                        && !((type_node = node[\" TYPE\" /* TYPE_ONLY */])\n                            && (res = explore(type_node, index + 1)))\n                        && !(index <= minimum)) {\n                        if (matched = (matched_node = value_node) && matched_node[\" END\" /* END */]\n                            || (matched_node = type_node) && matched_node[\" END\" /* END */]) {\n                            if ((res = get_records(matched, index))) {\n                                minimum = index;\n                            }\n                            else if (has_backflow && index > start) {\n                                backflow_tape.splice(index + 1, backflow_tape.length - index - 1);\n                            }\n                        }\n                    }\n                    longest = res || longest;\n                }\n                if (++cursor >= length) {\n                    return longest;\n                }\n                else {\n                    type = alias[cursor];\n                }\n            }\n        }\n    };\n    default_1.prototype.createNode = function (context) {\n        var _a;\n        var left = context[2 /* left */];\n        var right = context[3 /* right */];\n        var matched = context[9 /* matched */];\n        var tokens = context.tokens;\n        var begin = context[6 /* begin */];\n        var node = new matched[2 /* wrapper */]();\n        var length = tokens.length;\n        var start = left, end = right < length ? right : length - 1;\n        var offset = left, key, pipes, nth;\n        var token, res;\n        context[0 /* collected */] = node;\n        function restore_volatility() {\n            context[2 /* left */] = left;\n            context[3 /* right */] = right;\n            context[9 /* matched */] = matched;\n            context[0 /* collected */] = node;\n        }\n        for (var _i = 0, _b = matched[1 /* props */]; _i < _b.length; _i++) {\n            var prop = _b[_i];\n            _a = prop, key = _a[0], nth = _a[1], pipes = _a[2];\n            if (key instanceof head_1.Mark) {\n                token = key.data(context, offset);\n                restore_volatility();\n                if (token === undefined) {\n                    continue;\n                }\n                key = key.key;\n            }\n            else {\n                token = offset >= begin && offset < length ? tokens[offset] : null;\n                for (var i in pipes) {\n                    res = pipes[i](context, token, offset);\n                    res === undefined || (token = res);\n                    restore_volatility();\n                }\n                if (key instanceof head_1.Cover) {\n                    if (key.value === null) {\n                        if (offset === start) {\n                            offset < end && (start = offset + 1);\n                        }\n                        else if (offset > begin && offset - 1 < end) {\n                            end = offset - 1;\n                        }\n                    }\n                    else if (offset < length && end < offset) {\n                        end = offset;\n                    }\n                    offset += 1;\n                    continue;\n                }\n                else if (offset < length && end < offset) {\n                    end = offset;\n                }\n                offset += 1;\n            }\n            if (nth <= 1) {\n                node[key] = nth === 0 ? token : [token];\n            }\n            else {\n                node[key].push(token);\n            }\n        }\n        start >= begin || (start = begin);\n        var start_token = tokens[start];\n        var end_token = tokens[end];\n        head_1.attachLocation(node, start_token, end_token);\n        context[4 /* start */] = start;\n        context[5 /* end */] = end;\n        return node;\n    };\n    default_1.prototype.getToken = function (index) {\n        return this.tokens.length > index ? this.tokens[index] : this.nextToken();\n    };\n    default_1.prototype.finallize = function (context, record) {\n        var left = record[1], right = record[2], matched = record[3] /*, steps*/;\n        var validator = matched[4 /* validator */];\n        var collected;\n        var start, end;\n        context[2 /* left */] = left;\n        context[3 /* right */] = right;\n        context[9 /* matched */] = matched;\n        var tokens = context.tokens;\n        var handler = matched[3 /* handler */];\n        //this.logs.push(\"finallize\", left, right, matched[MATCHED.wrapper].name);\n        if (!validator || (collected = validator(context)) === true) {\n            collected = this.createNode(context);\n            start = context[4 /* start */];\n            end = context[5 /* end */];\n            if (handler) {\n                collected = handler(context);\n            }\n        }\n        else if (collected) {\n            start = context[4 /* start */];\n            end = context[5 /* end */];\n        }\n        if (!collected) {\n            return collected === undefined || collected === false\n                ? 0\n                : (collected === null ? 1 : -1);\n        }\n        //debugger;\n        //this.logs.push(\"finallize\", collected);\n        var length = end - start + 1;\n        if (collected instanceof Array) {\n            tokens.splice.apply(tokens, __spreadArrays([start, length], collected));\n        }\n        else {\n            tokens.splice(start, length, collected);\n        }\n        return length;\n    };\n    return default_1;\n}(tokenizer_1.default));\nexports.default = default_1;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../astexplorer/website/node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/parser.ts\n");

/***/ }),

/***/ "../../js/syntax/declaration.ts":
/*!*****************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/declaration.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/syntax/head.ts\");\n//import { Expressions, UNIT_EXPRESSION_TREE } from './expression';\nvar Grouping = head_1.NODES.Grouping;\nfunction get_variable_declarator(context, id, init, range, loc) {\n    var parser = context[1 /* parser */];\n    if (id instanceof Grouping) {\n        parser.err(id);\n    }\n    else if (context[12 /* strict */]) {\n        init || head_1.validateBinding(context, id);\n    }\n    if (id.name === \"let\") {\n        var kind = context.tokens[context[6 /* begin */] - 1];\n        if (kind.value === \"let\" || kind.value === \"const\") {\n            parser.err(id);\n        }\n    }\n    return {\n        type: \"VariableDeclarator\",\n        id: id, init: init, range: range, loc: loc\n    };\n}\nvar VariableDeclarators = {\n    Success: {\n        handler: [\n            head_1.join_content,\n            function (context) {\n                var collected = context[0];\n                head_1.validateLineTerminator(context);\n                collected.content = head_1.join_content(context).content;\n                return collected;\n            }\n        ],\n        precedence: [true, 0],\n        collector: [\n            {\n                success: head_1._Or(\"Success\", \"\" /* BOUNDARY */),\n                content: head_1._Or(head_1._Pattern(\"Identifier\").pipe(function (context, identifier) {\n                    return get_variable_declarator(context, identifier, null, identifier.range, identifier.loc);\n                }), head_1._Pattern(\"AssignmentPattern\").pipe(function (context, pattern) {\n                    return get_variable_declarator(context, pattern.left, pattern.right, pattern.range, pattern.loc);\n                })),\n                _next: head_1._NonCollecting(\"Punctuator ,\"),\n            },\n            [\n                [\"type\", head_1._Mark(\"VariableDeclarators\")],\n                [\"_next\", head_1._Option(\"Punctuator ;\")]\n            ]\n        ]\n    }\n};\nvar VARIABLE_DECLARATOR_TREE;\nhead_1.async_getter.get(\"UNIT_EXPRESSION_TREE\", function (UNIT_EXPRESSION_TREE) {\n    VARIABLE_DECLARATOR_TREE = head_1.createMatchTree(VariableDeclarators, UNIT_EXPRESSION_TREE);\n});\nfunction reinterpreat_expression_as_declaration(context, expr) {\n    var collected = context[0], parser = context[1];\n    expr.type = collected.type;\n    if (expr.id) {\n        if (head_1.isRestrictedWord(expr.id.name)) {\n            parser.err(expr.id);\n        }\n    }\n    else {\n        parser.err(expr);\n    }\n    for (var key in expr) {\n        collected[key] = expr[key];\n    }\n    return expr.id;\n}\nvar Declarations = head_1.async_getter.Declarations = {\n    \"ClassDeclaration\": {\n        filter: function (context, left, right) {\n            var tokens = context.tokens;\n            return !(tokens[right] instanceof Grouping);\n        },\n        collector: [\n            {\n                _prev: head_1._NonCapturing(head_1.TOPLEVEL_ITEM_PATTERN),\n                id: head_1._Pattern(\"ClassExpression\").pipe(reinterpreat_expression_as_declaration)\n            }\n        ]\n    },\n    \"FunctionDeclaration\": {\n        filter: \"ClassDeclaration\",\n        collector: [\n            {\n                _prev: head_1._NonCapturing(head_1.TOPLEVEL_ITEM_PATTERN),\n                id: head_1._Pattern(\"FunctionExpression\").pipe(reinterpreat_expression_as_declaration)\n            }\n        ]\n    },\n    \"VariableDeclaration\": [\n        {\n            validator: [\n                function (context) {\n                    var parser = context[1], left = context[2];\n                    context.wrap(18 /* bindingElement */, true);\n                    var res = parser.parseCustom(VARIABLE_DECLARATOR_TREE, context, left + 1, function (node) { return node.type === \"VariableDeclarators\"; });\n                    context.unwrap();\n                    return res && 0;\n                },\n                null\n            ],\n            collector: [\n                {\n                    //_: _NonCapturing(TOPLEVEL_ITEM_PATTERN),\n                    kind: head_1._Or(\"Keyword var const let\", \"Identifier let\").pipe(function (context, token) {\n                        return token.name === undefined ? token.value : token.name;\n                    }),\n                    declarations: head_1._Or(\"Identifier\", \"Punctuator [ {\")\n                },\n                [\n                    [\"declarations\", head_1._Pattern(\"VariableDeclarators\").pipe(function (context, token) {\n                            return token.content;\n                        })],\n                ]\n            ]\n        }\n    ]\n};\nhead_1.async_getter.get(\"Declarations\", function (declarations) {\n    for (var type_name in declarations) {\n        type_name && (head_1.TYPE_ALIAS[type_name] = [type_name, \"[Declaration]\"]);\n    }\n});\nexports.default = Declarations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/declaration.ts\n");

/***/ }),

/***/ "../../js/syntax/expression.ts":
/*!****************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/expression.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse_params = exports.parseObjectPattern = exports.parseArrayPattern = exports.Expressions = exports.PrimaryExpressions = void 0;\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/syntax/head.ts\");\nvar pattern_1 = __webpack_require__(/*! ./pattern */ \"../../js/syntax/pattern.ts\");\nObject.defineProperty(exports, \"parseArrayPattern\", { enumerable: true, get: function () { return pattern_1.parseArrayPattern; } });\nObject.defineProperty(exports, \"parseObjectPattern\", { enumerable: true, get: function () { return pattern_1.parseObjectPattern; } });\nvar Grouping = head_1.NODES.Grouping;\ninit_token_hooks();\nfunction walk_primary_expression(context, index) {\n    context[1 /* parser */].parseRange(PRIMARY_EXPRESSION_TREE, context, index, head_1.is_right_parentheses);\n}\nvar ARGUMENTS_PATTERN = head_1._Or(head_1._Punctuator(\"(\").walk(walk_primary_expression), \"Punctuator ()\").pipe(function (context, token, index) {\n    var parser = context[1 /* parser */];\n    var store = context.store(18 /* bindingElement */, false, 19 /* spreadElement */, true, 7 /* tokens */, token.content);\n    var res = parser.parseNode(ARGUMENTS_TREE, context, function (node) { return node.type === \"Success\"; });\n    context.restore(store);\n    return res ? res.content : [];\n});\nvar PARAMS_PATTERN = head_1._Or(head_1._Punctuator(\"(\").walk(function (context, left) {\n    var parser = context[1 /* parser */];\n    var store = context.store(18 /* bindingElement */, true, 19 /* spreadElement */, true, 10 /* bindingSet */, []);\n    parser.parseRange(PARAMS_TREE, context, left, head_1.is_right_parentheses, function (node) { return node.type === \"Success\"; }).type = \"Params\";\n    context.restore(store);\n}), head_1._Pattern(\"Params\")).pipe(function (context, token, left) {\n    var collected = context[0], parser = context[1];\n    var kind = collected.kind;\n    var params = token.content ? token.content.content : [];\n    var params_count = kind === \"get\" ? 0 : kind === \"set\" ? 1 : false;\n    if (params_count !== false && params.length !== params_count) {\n        parser.err.apply(parser, params.splice(params_count, params.length - params_count));\n    }\n    return params;\n});\nvar BODY_PATTERN = head_1._Or(head_1._Punctuator(\"{\").walk(function (context, left) {\n    var generator = !!this.generator, async = !!this.async;\n    var parser = context[1 /* parser */];\n    var body_context = head_1._Context(parser);\n    body_context[15 /* inFunctionBody */] = left + 1;\n    body_context[12 /* strict */] = context[12 /* strict */];\n    body_context[21 /* allowYield */] = generator;\n    body_context[20 /* allowAwait */] = async;\n    var node = parser.parseRange(parser.SYNTAX_TREE, body_context, left, head_1.is_right_braces);\n    node.type = \"Body\";\n    node.generator = generator;\n    node.async = async;\n    var block = new head_1.NODES.BlockStatement();\n    block.body = node.content;\n    head_1.attachLocation(block, node);\n    node.content = block;\n}, true), \"Body\");\nvar FUNCTION_BODY_PATTERN = head_1._Or(BODY_PATTERN).pipe(function (context, token) {\n    return token.content;\n});\nvar PrimaryExpressions = {\n    \"\": [\n        {\n            collector: {\n                type: head_1._Mark(\"Punctuator\"),\n                value: head_1._Mark(\"{}\"),\n                content: head_1._Punctuator(\"{\").pipe(function (context, token, left) {\n                    return context[1 /* parser */].parseRange(PROPERTIES_TREE, context, left, head_1.is_right_braces).content || [];\n                })\n            }\n        },\n        {\n            collector: {\n                type: head_1._Mark(\"Punctuator\"),\n                value: head_1._Mark(\"()\"),\n                content: head_1._Punctuator(\"(\").walk(walk_primary_expression).pipe(function (context, token, index) {\n                    return token.content;\n                })\n            }\n        },\n        {\n            collector: {\n                type: head_1._Mark(\"Punctuator\"),\n                value: head_1._Mark(\"[]\"),\n                content: head_1._Punctuator(\"[\").pipe(function (context, node, index) {\n                    return context[1 /* parser */].parseRange(PRIMARY_EXPRESSION_TREE, context, index, head_1.is_right_brackets).content;\n                })\n            }\n        },\n    ],\n    \"Identifier\": [],\n    \"Literal\": [ //已在 tokenizer => token_hooks 中处理\n    ],\n    \"ThisExpression\": {\n        collector: {\n            token: head_1._NonCollecting(\"Keyword this\")\n        }\n    },\n    \"TemplateLiteral\": {\n        filter: function (context, left, right) {\n            var value = context.getToken(right).value;\n            return value[0] === \"`\";\n        },\n        collector: [\n            {\n                _: head_1._NonCapturing(head_1._Option(\"[Expression]\")),\n                expressions: head_1._Mark(function () { return []; }),\n                quasis: head_1._Pattern(\"Template\").pipe(function (context, token, index) {\n                    var collected = context[0], parser = context[1];\n                    var value;\n                    var expressions = collected.expressions;\n                    var quasis = [];\n                    var tail = false;\n                    var end;\n                    while (true) {\n                        token = context.getToken(index);\n                        value = token.value;\n                        token.value = \"\";\n                        if (value[value.length - 1] === \"`\") {\n                            end = -1;\n                            tail = true;\n                        }\n                        else {\n                            end = -2;\n                            tail = false;\n                        }\n                        quasis.push({\n                            type: \"TemplateElement\",\n                            value: {\n                                raw: value.slice(1, end),\n                                cooked: parser._volatility\n                            },\n                            tail: tail\n                        });\n                        if (tail) {\n                            break;\n                        }\n                        expressions.push(parser.parseRangeAsExpression(context, index, function (token) {\n                            return token.type === parser.TYPE_ENUMS.Template\n                                && token.value[0] === \"}\";\n                        }));\n                    }\n                    return quasis;\n                }),\n            }\n        ]\n    },\n    \"FunctionExpression\": [\n        {\n            collector: [\n                {\n                    async: head_1._Or(head_1._Series(head_1._Mark(true), head_1._NonCollecting(\"Keyword async\")), head_1._Mark(false)),\n                    __: head_1._NonCollecting(\"Keyword function\"),\n                    generator: head_1._Or(head_1._Series(head_1._Mark(true), head_1._NonCollecting(\"Punctuator *\")), head_1._Mark(false)),\n                    id: head_1._Or(head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, head_1._Mark(null)),\n                    params: PARAMS_PATTERN,\n                    body: FUNCTION_BODY_PATTERN,\n                    expression: head_1._Mark(false)\n                }\n            ]\n        },\n        {\n            validator: function (context) {\n                var parser = context[1], left = context[2];\n                context[4 /* start */] = context[5 /* end */] = left;\n                return head_1.reinterpretIdentifierAsKeyword(context.getToken(left));\n                //return parser.parseKeyword(context.getToken(left));\n            },\n            filter: [\n                function () {\n                    return false;\n                },\n                head_1.isAligned\n            ],\n            collector: [\n                { _: head_1._Series(\"Identifier async\", \"Identifier\") },\n                {\n                    async: \"Identifier async\",\n                    _next: head_1._NonCapturing(\"Keyword function\"),\n                },\n                {\n                    async: \"Identifier async\",\n                    params: head_1._NonCapturing(head_1._Punctuator(\"(\").walk(walk_primary_expression), \"Punctuator ()\", \"Identifier\"),\n                    token: head_1._NonCapturing(\"Punctuator =>\"),\n                },\n            ]\n        }\n    ],\n    \"ArrowFunctionExpression\": {\n        handler: [\n            null,\n            function (context) {\n                var collected = context[0], parser = context[1], left = context[2], right = context[3];\n                var token = context.getToken(right);\n                token.value = \"_=>\";\n                var body_context = head_1._Context(parser);\n                body_context[12 /* strict */] = context[12 /* strict */];\n                body_context[20 /* allowAwait */] = collected.async;\n                if (parser.parseCustom(parser.EXPRESSION_TREE, body_context, left, function (node) { return true; })) {\n                    return null;\n                }\n            },\n            null\n        ],\n        precedence: [3, true, new Number(3)],\n        collector: [\n            {\n                async: head_1._Or(head_1._Series(head_1._Mark(true), head_1._NonCollecting(\"Keyword async\")), head_1._Mark(false)),\n                generator: head_1._Mark(false),\n                id: head_1._Mark(null),\n                params: head_1._Or(head_1._Punctuator(\"()\").pipe(function (context, token) {\n                    context.wrap(7 /* tokens */, token.content);\n                    var res = parse_params(context, token.content);\n                    context.unwrap();\n                    return res;\n                }), head_1._Pattern(\"Identifier\").pipe(function (context, token) {\n                    head_1.validateAssignment(context, token);\n                    return [token];\n                })),\n                token: head_1._NonCollecting(\"Punctuator =>\"),\n                body: FUNCTION_BODY_PATTERN,\n                expression: head_1._Mark(false)\n            },\n            [\"body\", head_1._Mark()],\n            [\n                //_=>作用为隔断匹配，使后续的表达式使用当前方法声明的环境\n                [\"token\", head_1._NonCollecting(\"Punctuator _=>\")],\n                [\"body\", \"[Expression]\"],\n                [\"expression\", head_1._Mark(true)]\n            ]\n        ]\n    },\n    \"ClassExpression\": {\n        collector: [\n            {\n                _: head_1._NonCollecting(\"Keyword class\"),\n                id: head_1._Or(head_1.IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, head_1._Mark(null)),\n                superClass: head_1._Or(head_1._Series(head_1._NonCollecting(\"Keyword extends\"), head_1.IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN), head_1._Mark(null)),\n                body: head_1._Punctuator(\"{\").pipe(function (context, token, left) {\n                    var _a;\n                    var parser = context[1 /* parser */];\n                    var res = parser.parseRange(METHOD_DEFINITIONS_TREE, context, left, head_1.is_right_braces, function (node) { return node.type === \"Success\"; });\n                    return {\n                        type: \"ClassBody\",\n                        body: ((_a = res.content) === null || _a === void 0 ? void 0 : _a.content) || [],\n                        range: res.range,\n                        loc: res.loc\n                    };\n                })\n            }\n        ]\n    },\n    \"Super\": {\n        validator: function (context) {\n            var parser = context[1], left = context[2], right = context[3];\n            if (!context[15 /* inFunctionBody */] || right === left) {\n                parser.err(context.getToken(left));\n            }\n            return true;\n        },\n        collector: {\n            token: head_1._NonCollecting(\"Keyword super\"),\n            _next: head_1._NonCapturing(\"Punctuator ( . [\")\n        }\n    },\n};\nexports.PrimaryExpressions = PrimaryExpressions;\nvar Expressions = head_1.async_getter.Expressions = __assign(__assign({}, PrimaryExpressions), { \"\": PrimaryExpressions[\"\"].concat({\n        validator: function (context) {\n            var parser = context[1 /* parser */];\n            var left = context[2 /* left */];\n            var token = context.getToken(left);\n            var store = context.store(10 /* bindingSet */, null, 18 /* bindingElement */, false, 7 /* tokens */, token.content);\n            var grouping = new Grouping(parser.parseExpression(context));\n            context.restore(store);\n            context[4 /* start */] = context[5 /* end */] = left;\n            return grouping;\n        },\n        collector: {\n            token: \"Punctuator ()\"\n        }\n    }), \"ArrayExpression\": {\n        precedence: 20,\n        collector: {\n            elements: head_1._Punctuator(\"[]\").pipe(function (context, node, index) {\n                var store = context.store(19 /* spreadElement */, true, 18 /* bindingElement */, false);\n                var res = head_1.parse_and_extract(ARRAY_ELEMENTS_TREE, context, node);\n                context.restore(store);\n                return res;\n            }),\n        }\n    }, \"ObjectExpression\": {\n        precedence: 20,\n        collector: {\n            properties: head_1._Punctuator(\"{}\").pipe(function (context, node, index) {\n                return head_1.parse_and_extract(OBJECT_PROPERTIES_TREE, context, node);\n                //return node.content || [];\n            }),\n        }\n    }, \"TaggedTemplateExpression\": {\n        collector: [\n            {\n                tag: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                quasi: \"TemplateLiteral\"\n            }\n        ]\n    }, \"MemberExpression\": [\n        {\n            precedence: 20,\n            collector: {\n                object: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                property: head_1._Series(head_1._NonCollecting(\"Punctuator .\"), head_1._Or(\"Identifier\", head_1._Pattern(\"Keyword\").pipe(function (context, token) {\n                    return head_1.reinterpretKeywordAsIdentifier(token);\n                    //return context[CONTEXT.parser].parseIdentifier(token);\n                }))),\n                computed: head_1._Mark(false)\n            }\n        },\n        {\n            filter: \"CallExpression\",\n            precedence: 20,\n            collector: {\n                object: head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\n                property: head_1._Or(head_1._Punctuator(\"[\").pipe(function (context, token, left) {\n                    var store = context.store(18 /* bindingElement */, false);\n                    var res = context[1 /* parser */].parseRangeAsExpression(context, left, head_1.is_right_brackets);\n                    context.restore(store);\n                    return res;\n                }), head_1._Punctuator(\"[]\").pipe(function (context, token, left) {\n                    var store = context.store(7 /* tokens */, token.content, 18 /* bindingElement */, false);\n                    var res = context[1 /* parser */].parseExpression(context);\n                    context.restore(store);\n                    return res;\n                })),\n                computed: head_1._Mark(true)\n            }\n        }\n    ], \"MetaProperty\": {\n        handler: function (_a) {\n            var collected = _a[0];\n            collected.meta.type = \"Identifier\";\n            return collected;\n        },\n        collector: [\n            {\n                meta: \"Keyword import\",\n                _: head_1._NonCollecting(\"Punctuator .\"),\n                property: \"Identifier meta\"\n            },\n            {\n                meta: \"Keyword new\",\n                _: head_1._NonCollecting(\"Punctuator .\"),\n                property: \"Identifier target\"\n            }\n        ]\n    }, \"NewExpression\": {\n        precedence: new Number(20) /*_Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword new\"),\n                callee: head_1._Or(head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, head_1._Pattern(\"ArrowFunctionExpression\").pipe(function (context, token) {\n                    context[1 /* parser */].err(token);\n                })),\n                arguments: head_1._Or(head_1._Mark(function () { return []; }), ARGUMENTS_PATTERN)\n            }\n        ]\n    }, \"CallExpression\": {\n        precedence: 20 /* _Precedence(20, PRECEDENCE_FEATURES.RIGHT_TERMINAL)*/,\n        filter: function (context, left) {\n            var tokens = context.tokens;\n            var first_token = tokens[left], second_token = tokens[left + 1];\n            if (second_token === context[8 /* rightAssociativeNode */]) {\n                return false;\n            }\n            var first_token_type = first_token.type;\n            if (first_token instanceof Grouping\n                || first_token_type !== \"ArrowFunctionExpression\") {\n                return true;\n            }\n        },\n        collector: {\n            callee: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n            arguments: ARGUMENTS_PATTERN\n        }\n    }, \"UpdateExpression\": [\n        {\n            handler: function (context) {\n                var collected = context[0];\n                collected.operator = collected.operator.value;\n                return collected;\n            },\n            precedence: 17,\n            collector: {\n                operator: \"Punctuator ++ --\",\n                argument: head_1._Or(\"MemberExpression\", head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\n                prefix: head_1._Mark(true),\n            }\n        },\n        {\n            validator: function (context) {\n                var collected = context[1 /* parser */].createNode(context);\n                collected.operator = collected.operator.value;\n                return collected;\n            },\n            filter: function (context, left, right) {\n                return head_1.isAligned(context, left, left + 1);\n            },\n            precedence: 18,\n            collector: {\n                argument: head_1._Or(\"MemberExpression\", head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\n                operator: \"Punctuator ++ --\",\n                prefix: head_1._Mark(false),\n                _: head_1._Option(head_1._NonCapturing(head_1._Punctuator(\"[\", \"(\").pipe(function (context, token) {\n                    context[8 /* rightAssociativeNode */] = token;\n                }), head_1._Punctuator(\".\").pipe(function (context, token) {\n                    context[1 /* parser */].err(token);\n                })))\n            }\n        }\n    ], \"AwaitExpression\": [\n        {\n            precedence: 17,\n            filter: function (context) {\n                return context[20 /* allowAwait */];\n            },\n            collector: {\n                token: head_1._NonCollecting(\"Keyword await\"),\n                argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN\n            }\n        },\n        {\n            handler: function (_a) {\n                var token = _a[0].token;\n                return head_1.reinterpretKeywordAsIdentifier(token);\n                //return parser.parseIdentifier(collected.token);\n            },\n            filter: function (context) {\n                return !context[20 /* allowAwait */];\n            },\n            collector: {\n                token: \"Keyword await\",\n            }\n        },\n    ], \"UnaryExpression\": {\n        handler: function (context) {\n            var collected = context[0];\n            collected.operator = collected.operator.value;\n            return collected;\n        },\n        precedence: 17,\n        collector: [\n            {\n                operator: head_1._Or(\"Punctuator ~ ! + -\", \"Keyword delete void typeof\"),\n                argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                prefix: head_1._Mark(true)\n            }\n        ]\n    }, \"BinaryExpression\": {\n        handler: function (context) {\n            var collected = context[0];\n            collected.operator = collected.operator.value;\n            return collected;\n        },\n        validator: function (context) {\n            return context[3 /* right */] - context[2 /* left */] >= 2;\n        },\n        precedence: [16, 15, 14, 13, 12, 11, 10, 9, 8, 7],\n        collector: [\n            {\n                left: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                operator: \"Punctuator **\",\n                right: head_1._Option(head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN)\n            },\n            [\"operator\", \"Punctuator * / %\"],\n            [\"operator\", \"Punctuator + -\"],\n            [\"operator\", \"Punctuator << >> >>>\"],\n            [\"operator\", head_1._Or(\"Punctuator < <= > >=\", \"Keyword in instanceof\")],\n            [\"operator\", \"Punctuator == != === !==\"],\n            [\"operator\", \"Punctuator &\"],\n            [\"operator\", \"Punctuator ^\"],\n            [\"operator\", \"Punctuator |\"],\n            [\"operator\", \"Punctuator ??\"]\n        ]\n    }, \"LogicalExpression\": {\n        validator: function (context) {\n            if (context[3 /* right */] - context[2 /* left */] === 2) {\n                var collected = context[1 /* parser */].createNode(context);\n                collected.operator = collected.operator.value;\n                return collected;\n            }\n        },\n        precedence: [6, 5],\n        collector: [\n            {\n                left: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                operator: \"Punctuator &&\",\n                right: head_1._Option(head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN)\n            },\n            [\"operator\", \"Punctuator ||\"]\n        ]\n    }, \"ConditionalExpression\": [\n        {\n            validator: function (context) {\n                var parser = context[1], left = context[2], right = context[3];\n                if (right - left >= 4) {\n                    return true;\n                }\n                if (!context[14 /* isExpression */] || context[18 /* bindingElement */]) {\n                    var store = context.store(14 /* isExpression */, true, 18 /* bindingElement */, null);\n                    parser.parseCustom(parser.EXPRESSION_TREE, context, left, function (node) { return node.type === \"ConditionalExpression\"; });\n                    context.restore(store);\n                    return null;\n                }\n            },\n            precedence: new Number(3),\n            collector: [\n                {\n                    test: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                    token: head_1._NonCollecting(\"Punctuator ?\")\n                },\n                [\"consequent\", head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN],\n                [\"_\", head_1._NonCollecting(\"Punctuator :\")],\n                [\"alternate\", head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN]\n            ]\n        },\n    ], \"YieldExpression\": [\n        {\n            /*filter(context: Context) {\n                return context[CONTEXT.allowYield];\n            },*/\n            precedence: 2,\n            collector: [\n                {\n                    token: head_1._NonCollecting(\"Keyword yield\"),\n                    _: head_1._NonCollecting(\"Punctuator *\"),\n                    argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                    delegate: head_1._Mark(true)\n                },\n                {\n                    token: head_1._NonCollecting(\"Keyword yield\"),\n                    argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                    delegate: head_1._Mark(false)\n                }\n            ]\n        },\n    ], \"AssignmentExpression\": {\n        validator: \"LogicalExpression\",\n        precedence: new Number(3),\n        collector: {\n            left: head_1._Or(head_1._Or(\"[Expression]\").pipe(function (context, expr) {\n                context[1 /* parser */].err(expr);\n            }), \"AssignmentExpression\", \"MemberExpression\", \"AssignmentPattern\", \"ArrayPattern\", \"ObjectPattern\", head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\n            operator: head_1.ASSIGNMENT_PUNCTUATORS_PATTERN,\n            right: head_1._Option(\"[Expression]\") //占位避免错误断句\n        }\n    }, \"SequenceExpression\": {\n        handler: function (context) {\n            var collected = context[0];\n            var expressions = collected.expressions;\n            if (expressions[0] instanceof head_1.NODES.SequenceExpression) {\n                expressions[0].expressions.push(expressions[1]);\n                collected.expressions = expressions[0].expressions;\n            }\n            return collected;\n        },\n        validator: function (context) {\n            var left = context[2], right = context[3];\n            if (right - left === 2) {\n                return true;\n            }\n        },\n        precedence: 1,\n        collector: {\n            expressions: head_1._Series(head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, head_1._NonCollecting(\"Punctuator ,\"), head_1._Option(head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN))\n        }\n    } });\nexports.Expressions = Expressions;\nvar COMPUTED_PROPERTY_NAME_PATTERN = head_1._Punctuator(\"[]\").pipe(function (context, token) {\n    var collected = context[0], parser = context[1];\n    collected.computed = true;\n    context.wrap(7 /* tokens */, token.content);\n    var res = parser.parseExpression(context);\n    context.unwrap();\n    return res;\n});\nvar LITERAL_PROPERTY_NAME_PATTERN = head_1._Or(\"Identifier\", \"Keyword\", \"Literal\").pipe(function (context, key) {\n    var parser = context[1];\n    if (key instanceof Grouping) {\n        parser.err(key);\n    }\n    else {\n        switch (key.type) {\n            case \"Keyword\":\n                return head_1.reinterpretKeywordAsIdentifier(key);\n            //return parser.parseIdentifier(key);\n            case \"Literal\":\n                if (key.regex) {\n                    parser.err(key);\n                }\n                break;\n        }\n    }\n});\nvar PROPERTY_NAME_PATTERN = head_1._Or(COMPUTED_PROPERTY_NAME_PATTERN, LITERAL_PROPERTY_NAME_PATTERN);\nvar MethodDefinitions = __assign(__assign({}, head_1._SuccessCollector(head_1._Pattern(\"MethodDefinition\"))), { \"\": {\n        validator: function (context) {\n            context[4 /* start */] = context[5 /* end */] = context[3 /* right */];\n            return [];\n        },\n        collector: {\n            _: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n            __: \"Punctuator ;\"\n        }\n    }, MethodDefinition: {\n        handler: function (context) {\n            var collected = context[0];\n            var value = collected.value;\n            collected.kind = value.kind;\n            delete value.kind;\n            collected.computed = value.computed;\n            delete value.computed;\n            collected.key = value.key;\n            delete value.key;\n            return collected;\n        },\n        collector: [\n            {\n                _prev: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n                key: head_1._Mark(\"\"),\n                static: head_1._Mark(true),\n                computed: head_1._Mark(false),\n                _static: head_1._NonCollecting(\"Identifier static\"),\n                value: \"FunctionExpression\",\n                kind: head_1._Mark(\"\"),\n            },\n            [\n                [\"static\", head_1._Mark(false)],\n                [\"_static\", head_1._Mark()]\n            ]\n        ]\n    }, FunctionExpression: {\n        collector: [\n            {\n                _prev: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n                static: head_1._Option(head_1._NonCapturing(\"Identifier static\")),\n                async: head_1._Or(head_1._Series(head_1._Mark(true), head_1._NonCollecting(\"Identifier async\")), head_1._Mark(false)),\n                generator: head_1._Or(head_1._Series(head_1._Mark(true), head_1._NonCollecting(\"Punctuator *\")), head_1._Mark(false)),\n                kind: head_1._Mark(\"method\"),\n                computed: head_1._Mark(false),\n                key: PROPERTY_NAME_PATTERN,\n                id: head_1._Mark(null),\n                params: PARAMS_PATTERN,\n                expression: head_1._Mark(false),\n                body: FUNCTION_BODY_PATTERN\n            },\n            [\n                [\"generator\", head_1._Mark(false)],\n                [\n                    \"kind\",\n                    head_1._Or(\"Identifier get set\").pipe(function (context, token, left) {\n                        return token.value;\n                    })\n                ]\n            ]\n        ]\n    } });\nvar Arguments = {\n    \"Success\": {\n        handler: head_1.join_content,\n        //precedence: 0,\n        collector: {\n            success: head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */), \"Success\"),\n            content: head_1._Or(\"SpreadElement\", head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN),\n            _: head_1._Or(head_1._NonCollecting(\"Punctuator ,\"), \"\" /* BOUNDARY */, head_1._NonCapturing(\"Punctuator )\")),\n        }\n    }\n};\nvar Params = {\n    \"Success\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            if (collected.content instanceof Grouping) {\n                parser.err(collected.content);\n            }\n            return head_1.join_content(context);\n        },\n        collector: [\n            {\n                success: head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */), \"Success\"),\n                content: \"AssignmentPattern\",\n                _: head_1._Or(head_1._NonCollecting(\"Punctuator ,\", \"\" /* BOUNDARY */), head_1._NonCapturing(\"Punctuator )\")),\n            },\n            [\n                \"content\",\n                head_1._Or(\"Identifier\").pipe(function (context, token) {\n                    head_1.validateBinding(context, token);\n                })\n            ],\n            [\"content\", head_1._Or(\"ArrayPattern\", \"ObjectPattern\")],\n            [\n                [\"content\", \"RestElement\"],\n                [\"_\", head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */), head_1._NonCapturing(\"Punctuator )\"))]\n            ]\n        ]\n    }\n};\nvar ArrayElements = {\n    \"Success\": {\n        handler: head_1.join_content,\n        precedence: 0,\n        collector: [\n            {\n                success: head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */), \"Success\"),\n                content: head_1._Or(\"SpreadElement\", head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN),\n                _: head_1._NonCollecting(\"Punctuator ,\", \"\" /* BOUNDARY */),\n            },\n            [\n                [\"content\", head_1._Mark(null)],\n                [\"_\", head_1._NonCollecting(\"Punctuator ,\")]\n            ]\n        ]\n    }\n};\nvar Properties = {\n    \"Property\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1], left = context[2], right = context[3];\n            var _a = collected.value, params = _a[0], body = _a[1];\n            var expr = new head_1.NODES.FunctionExpression();\n            expr.id = null;\n            expr.params = params;\n            expr.body = body.content;\n            expr.generator = body.generator;\n            expr.expression = false;\n            expr.async = body.async;\n            head_1.attachLocation(expr, collected, context.getToken(right - 1));\n            collected.value = expr;\n            collected.type = \"ObjectProperty\";\n            return collected;\n        },\n        collector: [\n            {\n                _prev: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Punctuator ,\", \"ObjectProperty\"),\n                async: head_1._Option(head_1._NonCollecting(\"Identifier async\")),\n                generator: head_1._Option(head_1._NonCollecting(\"Punctuator *\")),\n                kind: head_1._Mark(\"init\"),\n                computed: head_1._Mark(false),\n                key: PROPERTY_NAME_PATTERN,\n                value: head_1._Series(PARAMS_PATTERN, BODY_PATTERN),\n                _next: head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */, \"Punctuator ,\"), head_1._NonCapturing(\"Punctuator }\")),\n                //_NonCapturing(MATCH_MARKS.BOUNDARY, \"Punctuator ,\", \"Punctuator }\"),\n                method: head_1._Mark(true),\n                shorthand: head_1._Mark(false)\n            },\n            [\n                [\"async\", head_1._Mark()],\n                [\"generator\", head_1._Mark()],\n                [\n                    \"kind\", head_1._Or(head_1._Series(head_1._NonCollecting(\"Identifier get\"), head_1._Mark(\"get\")), head_1._Series(head_1._NonCollecting(\"Identifier set\"), head_1._Mark(\"set\")))\n                ],\n                [\"method\", head_1._Mark(false)]\n            ]\n        ]\n    }\n};\nvar ObjectProperties = __assign(__assign({}, head_1._SuccessCollector(head_1._Or(\"Property\", head_1._Or(\"ObjectProperty\").pipe(function (context, token) {\n    token.type = \"Property\";\n})))), { \"Property\": {\n        collector: [\n            {\n                _prev: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n                key: PROPERTY_NAME_PATTERN,\n                value: head_1._Series(head_1._NonCollecting(\"Punctuator :\"), head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN),\n                _next: head_1._Or(head_1._NonCollecting(\"\" /* BOUNDARY */, \"Punctuator ,\"), head_1._NonCapturing(\"Punctuator }\")),\n                kind: head_1._Mark(\"init\"),\n                computed: head_1._Mark(false),\n                method: head_1._Mark(false),\n                shorthand: head_1._Mark(false),\n            },\n            [\n                [\"key\", \"Identifier\"],\n                [\"value\", window.test1 = head_1._Mark(function (context) {\n                        return context[0 /* collected */].key;\n                    })],\n                [\"shorthand\", head_1._Mark(true)]\n            ]\n        ]\n    } });\n/*\nlet PRIMARY_EXPRESSION_TREE = createMatchTree(\n    PrimaryExpressions\n)\nlet METHOD_DEFINITIONS_TREE = createMatchTree(\n    MethodDefinitions, PRIMARY_EXPRESSION_TREE\n);\nlet PROPERTIES_TREE = createMatchTree(\n    Properties,\n    PRIMARY_EXPRESSION_TREE\n);*/\nvar PRIMARY_EXPRESSION_TREE, METHOD_DEFINITIONS_TREE, PROPERTIES_TREE, UNIT_EXPRESSION_TREE, ARRAY_ELEMENTS_TREE, OBJECT_PROPERTIES_TREE, PARAMS_TREE, ARGUMENTS_TREE, EXPRESSION_TREE;\nhead_1.async_getter.get(\"Patterns\", function (Patterns) {\n    PRIMARY_EXPRESSION_TREE = head_1.createMatchTree(PrimaryExpressions);\n    METHOD_DEFINITIONS_TREE = head_1.createMatchTree(MethodDefinitions, PRIMARY_EXPRESSION_TREE);\n    PROPERTIES_TREE = head_1.createMatchTree(Properties, PRIMARY_EXPRESSION_TREE);\n    UNIT_EXPRESSION_TREE = head_1.createMatchTree([Expressions, Patterns], undefined, [\"SequenceExpression\"]);\n    ARRAY_ELEMENTS_TREE = head_1.createMatchTree(ArrayElements, UNIT_EXPRESSION_TREE);\n    OBJECT_PROPERTIES_TREE = head_1.createMatchTree(ObjectProperties, UNIT_EXPRESSION_TREE);\n    PARAMS_TREE = head_1.createMatchTree(Params, UNIT_EXPRESSION_TREE);\n    ARGUMENTS_TREE = head_1.createMatchTree(Arguments, UNIT_EXPRESSION_TREE);\n    EXPRESSION_TREE = head_1.createMatchTree({ SequenceExpression: Expressions.SequenceExpression }, UNIT_EXPRESSION_TREE);\n    head_1.async_getter.EXPRESSION_TREE = EXPRESSION_TREE;\n    head_1.async_getter.UNIT_EXPRESSION_TREE = UNIT_EXPRESSION_TREE;\n});\nhead_1.async_getter.get(\"Expressions\", function (expressions) {\n    for (var type_name in expressions) {\n        if (type_name) {\n            head_1.TYPE_ALIAS[type_name] = [type_name, \"[Expression]\"];\n        }\n    }\n});\nexports.default = Expressions;\nfunction parse_params(context, tokens) {\n    if (tokens.length) {\n        var parser = context[1 /* parser */];\n        var restore = context.store(7 /* tokens */, tokens, 18 /* bindingElement */, true);\n        context[12 /* strict */] && context.wrap(10 /* bindingSet */, []);\n        parser.parseCustom(PARAMS_TREE, context);\n        context.restore(restore);\n        return head_1.extract_success(parser, tokens);\n    }\n    return [];\n}\nexports.parse_params = parse_params;\nfunction init_token_hooks() {\n    function getLiteral(parse_value, token, tokenizer) {\n        return {\n            type: \"Literal\",\n            value: parse_value(token, tokenizer),\n            raw: token.value,\n            range: token.range,\n            loc: token.loc\n        };\n    }\n    var getStringLiteral = getLiteral.bind(null, function (token, tokenizer) { return tokenizer._volatility; });\n    var getRegularLiteral = getLiteral.bind(null, function (token, tokenizer) {\n        var regex = token.regex;\n        try {\n            return new RegExp(regex.pattern, regex.flags);\n        }\n        catch (e) {\n            return null;\n        }\n    });\n    head_1.token_hooks.Keyword = function (token, parser) {\n        var context = parser.context_stack[0];\n        if (!context[21 /* allowYield */] && token.value === \"yield\") {\n            return head_1.reinterpretKeywordAsIdentifier(token);\n        }\n        return token;\n    };\n    head_1.token_hooks.Identifier = head_1.reinterpretKeywordAsIdentifier;\n    head_1.token_hooks.Numeric = getLiteral.bind(null, function (token) { return Number(token.value); });\n    head_1.token_hooks.Boolean = getLiteral.bind(null, function (token) { return token.value === \"true\"; });\n    head_1.token_hooks.String = function (token, parser) {\n        token = getStringLiteral(token, parser);\n        if (parser._scopes.octal && parser.context_stack[0][12 /* strict */]) {\n            parser.err(token);\n        }\n        return token;\n    };\n    head_1.token_hooks.Null = getLiteral.bind(null, function () { return null; });\n    head_1.token_hooks.RegularExpression = function (token, tokenizer) {\n        var res = getRegularLiteral(token, tokenizer);\n        res.regex = token.regex;\n        return res;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/expression.ts\n");

/***/ }),

/***/ "../../js/syntax/head.ts":
/*!**********************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/head.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._Loop = exports._Mark = exports._NonCollecting = exports._NonCapturing = exports._Series = exports._Or = exports._Option = exports._Context = exports.validateAssignment = exports.validateIdentifier = exports.isStrictModeReservedWord = exports.isFutureReservedWord = exports.isRestrictedWord = exports.createMatchTree = exports.TYPE_ALIAS = exports.NODES = exports.validateLineTerminator = exports.validateBinding = exports.ASSIGNMENT_PUNCTUATORS_PATTERN = exports.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = exports.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = exports.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = exports.IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = exports.join_content = exports._SuccessCollector = exports.TOPLEVEL_ITEM_PATTERN = exports.RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN = exports.STATEMANT_LIST_ITEM_PATTERN = exports.isAligned = exports.Mark = exports.Cover = exports.attachLocation = exports.reinterpretKeywordAsIdentifier = exports.reinterpretIdentifierAsKeyword = exports._Validate = exports.is_right_braces = exports.is_right_brackets = exports.is_right_parentheses = exports._Pattern = exports._Identifier = exports._Keyword = exports._Punctuator = exports.parse_and_extract = exports.extract_success = exports.get_inner_group = exports.parse_next_statement = exports.token_hooks = exports.async_getter = void 0;\nvar index_1 = __webpack_require__(/*! ../lexical/index */ \"../../js/lexical/index.ts\");\nvar type_punctuator = index_1.TYPE_ENUMS.Punctuator;\nvar type_keyword = index_1.TYPE_ENUMS.Keyword;\nvar type_identifier = index_1.TYPE_ENUMS.Identifier;\nfunction _Punctuator() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    values.unshift(type_punctuator);\n    return _Or(values);\n}\nexports._Punctuator = _Punctuator;\nfunction _Keyword() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    values.unshift(type_keyword);\n    return _Or(values);\n}\nexports._Keyword = _Keyword;\nfunction _Identifier() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    values.unshift(type_identifier);\n    return _Or(values);\n}\nexports._Identifier = _Identifier;\nfunction _Pattern() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return _Or(args);\n}\nexports._Pattern = _Pattern;\nvar OPERATOR_ID = 0;\nfunction _calc_nth(props, key) {\n    var nth = 0;\n    if (!(key instanceof Cover) && props.length) {\n        key instanceof Mark && (key = key.key);\n        for (var i = props.length - 1; i >= 0; i--) {\n            var prop = props[i], _key = prop[0];\n            if (_key === key\n                || _key instanceof Mark\n                    && _key.key === key\n                    && (_key.value !== undefined || _key.data !== Mark.prototype.data)) {\n                if (prop[1] === 0) {\n                    prop = props[i] = [prop[0], 1, prop[2]];\n                }\n                nth = prop[1] + 1;\n            }\n            else if (!(_key instanceof Cover && _key.origin === key)) {\n                break;\n            }\n        }\n    }\n    return nth;\n}\nvar Operator = /** @class */ (function () {\n    function Operator(operands) {\n        this.operands = operands;\n        this.sub_operators = [];\n    }\n    Operator.prototype.pipe = function (pipe) {\n        if (this._pipes) {\n            this._pipes.push(pipe);\n        }\n        else {\n            this._pipes = [pipe];\n        }\n        return this;\n    };\n    Operator.prototype.walk = function (walker, bind_env) {\n        this._walker = walker;\n        this._bind_env = !!bind_env;\n        return this;\n    };\n    Object.defineProperty(Operator.prototype, \"factors\", {\n        get: function () {\n            if (!this._factors) {\n                this._factors = [];\n                for (var _i = 0, _a = this.operands; _i < _a.length; _i++) {\n                    var operand = _a[_i];\n                    if (operand instanceof Operator || operand instanceof Mark) {\n                        this._factors.push(operand);\n                    }\n                    else {\n                        var parts = typeof operand === \"string\" ?\n                            operand.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/) :\n                            operand;\n                        this._factors.push([\n                            parts[0],\n                            parts.length > 1\n                                ? parts.slice(1)\n                                : [\" TYPE\" /* TYPE_ONLY */]\n                        ]);\n                    }\n                }\n            }\n            return this._factors;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Operator.prototype.map = function (parents, factor, key, pipes) {\n        var result = [];\n        var _pipes = pipes\n            ? this._pipes ?\n                this._pipes.concat(pipes)\n                : pipes\n            : this._pipes;\n        if (factor instanceof Operator || factor instanceof Mark) {\n            return factor.attach(parents, key, _pipes);\n        }\n        else {\n            var type = factor[0], values = factor[1];\n            for (var _i = 0, parents_1 = parents; _i < parents_1.length; _i++) {\n                var prev_item = parents_1[_i];\n                var root = prev_item[0], props = prev_item[1];\n                props = props.slice();\n                props.push([key, _calc_nth(props, key), _pipes]);\n                var parent_1 = this.getNode(root, type);\n                var walker = this._walker;\n                if (walker && this._bind_env) {\n                    walker = walker.bind(props.reduce(function (res, prop) {\n                        var key = prop[0];\n                        if (key instanceof Mark) {\n                            res[key.key] = key.value;\n                        }\n                        else {\n                            res[key instanceof Cover ? key.origin : key] = true;\n                        }\n                        return res;\n                    }, {}));\n                }\n                for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {\n                    var value = values_1[_a];\n                    var value_node = this.getNode(parent_1, value, root);\n                    if (value_node[\" WAL\" /* WALKER */]\n                        && value_node[\" WAL\" /* WALKER */] !== walker) {\n                        console.warn(\"conflict:\", value_node, value_node[\" WAL\" /* WALKER */], walker);\n                    }\n                    if (walker) {\n                        value_node[\" WAL\" /* WALKER */] = walker;\n                    }\n                    result.push([\n                        value_node,\n                        props,\n                        null /*[root, factor[0], value, prev_item]//Loop*/\n                    ]);\n                }\n            }\n        }\n        return result;\n    };\n    Operator.prototype.getNode = function (parent, key, root) {\n        var _a;\n        var child = parent[key];\n        if (child) {\n            if (child[\" ID\" /* IDENTIFIER */] !== OPERATOR_ID) {\n                parent[key] = child = __assign({}, child);\n                child[\" ID\" /* IDENTIFIER */] = OPERATOR_ID;\n            }\n            return child;\n        }\n        child = parent[key] = (_a = {},\n            _a[\" ID\" /* IDENTIFIER */] = OPERATOR_ID,\n            _a);\n        if (root) {\n            child[\" DEEP\" /* DEEPTH */] = root[\" DEEP\" /* DEEPTH */] + 1;\n            root[\" TER\" /* TERMINAL */] = false;\n            child[\" TER\" /* TERMINAL */] = true;\n            /*if (root[MATCH_MARKS.MATCH_END]) {\n                root[MATCH_MARKS.MATCH_END][MATCHED_RECORDS.precedence][PRECEDENCE.TERMINAL] = false;\n            }*/\n        }\n        return child;\n    };\n    Operator.prototype.setWrap = function (records) {\n        throw 'not used';\n        for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {\n            var record = records_1[_i];\n            var prev_item = record, curr_item = prev_item;\n            while ((curr_item = prev_item[2] && prev_item[2][3]) && curr_item[2]) {\n                prev_item = curr_item;\n            }\n            if (prev_item[2]) {\n                var linked = prev_item[2];\n                var node = this.getNode(record[0], linked[1]);\n                if (node[linked[2]] && node[linked[2]] !== prev_item[0]) {\n                    throw node[linked[2]];\n                }\n                node[linked[2]] = prev_item[0];\n            }\n        }\n        return records;\n    };\n    Operator.prototype.getDeepNodes = function (parents, key, pipes) {\n        var children = parents, factors = this.factors;\n        for (var _i = 0, factors_1 = factors; _i < factors_1.length; _i++) {\n            var factor = factors_1[_i];\n            children = this.map(children, factor, key, pipes);\n        }\n        return children;\n    };\n    Operator.prototype.getNextNodes = function (parents, key, pipes) {\n        var children = [], factors = this.factors;\n        for (var _i = 0, factors_2 = factors; _i < factors_2.length; _i++) {\n            var factor = factors_2[_i];\n            Array.prototype.push.apply(children, this.map(parents, factor, key, pipes));\n        }\n        return children;\n    };\n    return Operator;\n}());\nvar Option = /** @class */ (function (_super) {\n    __extends(Option, _super);\n    function Option() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Option.prototype.attach = function (parents, key, pipes) {\n        var children = this.getNextNodes(parents, key, pipes).concat(parents);\n        return children;\n    };\n    return Option;\n}(Operator));\nvar Or = /** @class */ (function (_super) {\n    __extends(Or, _super);\n    function Or() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Or.prototype.attach = function (parents, key, pipes) {\n        return this.getNextNodes(parents, key, pipes);\n    };\n    return Or;\n}(Operator));\nvar Series = /** @class */ (function (_super) {\n    __extends(Series, _super);\n    function Series() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Series.prototype.attach = function (parents, key, pipes) {\n        return this.getDeepNodes(parents, key, pipes);\n    };\n    return Series;\n}(Operator));\n/*\nclass And extends Operator  {\n    attach(parents: IterationRecord, key: string) {\n        throw \"not used\";\n        return [];\n    }\n}\nclass Not extends Operator {\n    attach(parents: IterationRecord, key: string) {\n        throw \"not used\";\n        return [];\n        \n    }\n}*/\nvar Cover = /** @class */ (function () {\n    function Cover(origin, value) {\n        this.origin = origin;\n        this.value = value;\n        if (origin instanceof Cover) {\n            this.origin = origin.origin;\n        }\n    }\n    return Cover;\n}());\nexports.Cover = Cover;\nvar NonCapturing = /** @class */ (function (_super) {\n    __extends(NonCapturing, _super);\n    function NonCapturing() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NonCapturing.prototype.attach = function (parents, key, pipes) {\n        return this.getNextNodes(parents, new Cover(key, null), pipes);\n    };\n    return NonCapturing;\n}(Operator));\nvar NonCollecting = /** @class */ (function (_super) {\n    __extends(NonCollecting, _super);\n    function NonCollecting() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NonCollecting.prototype.attach = function (parents, key, pipes) {\n        return this.getNextNodes(parents, new Cover(key, \"\"), pipes);\n    };\n    return NonCollecting;\n}(Operator));\nvar Loop = /** @class */ (function (_super) {\n    __extends(Loop, _super);\n    function Loop() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    //Loop 内部的 Option 可能会导致 Loop 取值混乱(当前用不到这种情况，不处理这种情况能减少消耗)\n    Loop.prototype.attach = function (parents, key) {\n        throw 'not used';\n        //有点耗费性能，不是很必要用这个，已在parser核心部分去除Loop的支持\n        var baks = [];\n        for (var _i = 0, parents_2 = parents; _i < parents_2.length; _i++) {\n            var parent_2 = parents_2[_i];\n            baks.push(parent_2[2]);\n            parent_2[2] = null;\n        }\n        var res = this.setWrap(this.getNextNodes(parents, key));\n        for (var index in parents) {\n            parents[index][2] = baks[index];\n        }\n        return res;\n    };\n    return Loop;\n}(Operator));\nvar Mark = /** @class */ (function () {\n    function Mark(value) {\n        if (typeof value === \"function\") {\n            this.data = value;\n        }\n        else {\n            this.value = value;\n        }\n    }\n    Mark.prototype.data = function (context, index) {\n        return this.value;\n    };\n    Mark.prototype.attach = function (parents, key, pipes) {\n        var value = this.value;\n        if (!(key instanceof Cover) && (value !== undefined || this.data !== Mark.prototype.data)) {\n            if (key === \"type\") {\n                Mark.MATCHED_RECORD[2 /* wrapper */] = _get_wrapper_function(value);\n                ;\n            }\n            else {\n                var result = [];\n                this.key = key;\n                for (var _i = 0, parents_3 = parents; _i < parents_3.length; _i++) {\n                    var parent_3 = parents_3[_i];\n                    var props = parent_3[1].slice();\n                    props.push([this, _calc_nth(props, this), undefined]);\n                    result.push([parent_3[0], props, parent_3[2]]);\n                }\n                return result;\n            }\n        }\n        return parents;\n    };\n    return Mark;\n}());\nexports.Mark = Mark;\nfunction _Option() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new Option(some);\n}\nexports._Option = _Option;\n/*\nfunction _Not(...some: Operands) {\n    return new Not(some);\n}\nfunction _And(...some: Operands) {\n    return new And(some);\n}*/\nfunction _Or() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new Or(some);\n}\nexports._Or = _Or;\nfunction _Series() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new Series(some);\n}\nexports._Series = _Series;\nfunction _NonCapturing() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new NonCapturing(some);\n}\nexports._NonCapturing = _NonCapturing;\nfunction _NonCollecting() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new NonCollecting(some);\n}\nexports._NonCollecting = _NonCollecting;\nfunction _Loop() {\n    var some = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        some[_i] = arguments[_i];\n    }\n    return new Loop(some);\n}\nexports._Loop = _Loop;\nfunction _Mark(some) {\n    return new Mark(some);\n}\nexports._Mark = _Mark;\nvar NODES = {\n    Grouping: function (node, grouping) {\n        this.type = \"Grouping\";\n        for (var key in node) {\n            this[key] = node[key];\n        }\n        if (grouping) {\n            this.range = grouping.range;\n            this.loc = grouping.loc;\n        }\n    },\n    Directive: function (type, expression, directive, range, loc) {\n        this.type = type;\n        this.expression = expression;\n        this.directive = directive;\n        this.range = range;\n        this.loc = loc;\n    },\n    Script: function (body) {\n        this.type = \"Program\";\n        this.sourceType = \"script\";\n        this.body = body;\n    },\n    Module: function (body) {\n        this.type = \"Program\";\n        this.sourceType = \"module\";\n        this.body = body;\n    }\n};\nexports.NODES = NODES;\nfunction _get_adapt(data, index) {\n    return data instanceof Array ? index < data.length\n        ? data[index]\n        : data[data.length - 1] : data;\n}\nfunction _get_wrapper_function(type) {\n    return NODES[type]\n        || (NODES[type]\n            = type ? eval(\"(function \" + type + \"(){this.type=\\\"\" + type + \"\\\"})\") : function () { });\n}\nfunction createMatchTree(data, root, block_list, prevent_update) {\n    var _a;\n    if (block_list === void 0) { block_list = []; }\n    if (prevent_update === void 0) { prevent_update = false; }\n    prevent_update || (OPERATOR_ID += 1);\n    root = root ? prevent_update ? root : __assign({}, root) : (_a = {}, _a[\" DEEP\" /* DEEPTH */] = -1, _a);\n    if (data instanceof Array) {\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var item = data_1[_i];\n            root = createMatchTree(item, root, block_list, true);\n        }\n    }\n    else {\n        for (var type in data) {\n            var wrapper = _get_wrapper_function(type);\n            for (var _b = 0, _c = data[type] instanceof Array ? data[type] : [data[type]]; _b < _c.length; _b++) {\n                var item = _c[_b];\n                var collectors = item.collector, handlers = item.handler, overload = item.overload, _d = item.precedence /*PRECEDENCE_FEATURES.IMMEDIATE*/, precedences = _d === void 0 ? true : _d /*PRECEDENCE_FEATURES.IMMEDIATE*/, filters = item.filter, validators = item.validator;\n                if (!collectors || ~block_list.indexOf(type)) {\n                    continue;\n                }\n                typeof filters === \"string\" && (filters = data[filters].filter);\n                typeof handlers === \"string\" && (handlers = data[handlers].handler);\n                typeof validators === \"string\" && (validators = data[validators].validator);\n                collectors instanceof Array || (collectors = [collectors]);\n                for (var index = 0; index < collectors.length; index++) {\n                    var collector = collectors[index];\n                    var precedence = _get_adapt(precedences, index);\n                    var handler = _get_adapt(handlers, index);\n                    var filter = _get_adapt(filters, index);\n                    var validator = _get_adapt(validators, index);\n                    Mark.MATCHED_RECORD = [\n                        [precedence instanceof Number ? Number(precedence) : precedence, precedence],\n                        null,\n                        wrapper,\n                        handler,\n                        validator,\n                        filter\n                    ];\n                    if (collector instanceof Array) {\n                        var _collector = __assign({}, collectors[index - 1]);\n                        collector[0] && !(collector[0] instanceof Array) && (collector = [collector]);\n                        for (var _e = 0, collector_1 = collector; _e < collector_1.length; _e++) {\n                            var _f = collector_1[_e], key = _f[0], value = _f[1];\n                            _collector[key] = value;\n                        }\n                        collectors[index] = collector = _collector;\n                    }\n                    var nodes = [[root, [], null]];\n                    //保证所有 key 都是同类型字符开头(否则可能会出现遍历顺序与定义顺序不同)\n                    for (var key in collector) {\n                        var operator = collector[key];\n                        if (!(operator instanceof Operator || operator instanceof Mark)) {\n                            operator = _Or(operator);\n                        }\n                        nodes = operator.attach(nodes, key);\n                    }\n                    for (var _g = 0, nodes_1 = nodes; _g < nodes_1.length; _g++) {\n                        var _h = nodes_1[_g], last_node = _h[0], props = _h[1];\n                        var matched_record = Mark.MATCHED_RECORD.slice();\n                        matched_record[1 /* props */] = props;\n                        if (!overload && last_node[\" END\" /* END */]) {\n                            console.warn(\"conflict:\", last_node, last_node[\" END\" /* END */], matched_record);\n                        }\n                        last_node[\" END\" /* END */] = matched_record;\n                    }\n                }\n            }\n        }\n    }\n    return root;\n}\nexports.createMatchTree = createMatchTree;\nfunction _Context(parser) {\n    var state_stack = [];\n    var context = new Array(22 /* length */);\n    context[1 /* parser */] = parser;\n    context[11 /* labelSet */] = [];\n    //context[CONTEXT.tokens] = tokens;\n    context.wrap = wrap;\n    context.unwrap = unwrap;\n    context.store = store;\n    context.restore = restore;\n    context.getToken = getToken;\n    Object.defineProperty(context, \"tokens\", {\n        get: function () {\n            return this[7 /* tokens */] || this[1 /* parser */].tokens;\n        }\n    });\n    return context;\n    function getToken(index) {\n        var tokens = this[7 /* tokens */];\n        return !tokens ? this[1 /* parser */].getToken(index) : tokens[index];\n        //return context[CONTEXT.tokens][index];\n    }\n    function wrap(key, value) {\n        state_stack.push(context[key], key);\n        context[key] = value;\n        return context;\n    }\n    ;\n    function unwrap() {\n        context[state_stack.pop()] = state_stack.pop();\n        return context;\n    }\n    ;\n    function store() {\n        var restore_point = state_stack.length;\n        for (var index = 0; index < arguments.length; index += 2) {\n            wrap(arguments[index], arguments[index + 1]);\n        }\n        return restore_point;\n    }\n    function restore(point) {\n        while (state_stack.length > point) {\n            unwrap();\n        }\n        return state_stack.length;\n    }\n}\nexports._Context = _Context;\nvar FutureReservedWord = [\"enum\", \"export\", \"import\", \"super\"];\nvar StrictModeReservedWord = [\n    \"implements\", \"interface\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"let\"\n];\nvar RestrictedWord = [\"eval\", \"arguments\"];\nfunction isFutureReservedWord(id) {\n    return FutureReservedWord.indexOf(id) >= 0;\n}\nexports.isFutureReservedWord = isFutureReservedWord;\nfunction isStrictModeReservedWord(id) {\n    return StrictModeReservedWord.indexOf(id) >= 0;\n}\nexports.isStrictModeReservedWord = isStrictModeReservedWord;\nfunction isRestrictedWord(id) {\n    return RestrictedWord.indexOf(id) >= 0;\n}\nexports.isRestrictedWord = isRestrictedWord;\nfunction _if_strict_throw_err(context, token) {\n    if (context[12 /* strict */]) {\n        context[1 /* parser */].err(token);\n    }\n}\nfunction _if_reserved_throw_err(context, token) {\n    validateIdentifier(context, token);\n}\nvar THROW_RESTRICT_WORDS_PATTERN = _Or(\"Identifier eval arguments\").pipe(_if_strict_throw_err);\nvar THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier implements interface package private protected public static yield let\").pipe(_if_strict_throw_err);\nvar IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\", THROW_STRICT_RESERVED_WORDS_PATTERN);\nexports.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN;\nvar EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = _Or(\"[Expression]\", THROW_STRICT_RESERVED_WORDS_PATTERN);\nexports.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN = EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN;\nvar IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\"Identifier\").pipe(_if_reserved_throw_err);\nexports.IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN;\nvar EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = _Or(\"[Expression]\", IDENTIFIER_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN);\nexports.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN = EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN;\n/*const STRICT_RESERVED_WORDS = _Or(\n    \"Identifier implements interface package private protected public static yield let\"\n);*/\nfunction validateIdentifier(context, node) {\n    if (context[12 /* strict */]) {\n        if (!isStrictModeReservedWord(node.name)) {\n            return true;\n        }\n        context[1 /* parser */].err(node);\n        return false;\n    }\n}\nexports.validateIdentifier = validateIdentifier;\nfunction validateAssignment(context, node) {\n    if (context[12 /* strict */]) {\n        if (!(isRestrictedWord(node.name)\n            || isStrictModeReservedWord(node.name))) {\n            return true;\n        }\n        context[1 /* parser */].err(node);\n        return false;\n    }\n}\nexports.validateAssignment = validateAssignment;\nfunction validateBinding(context, node) {\n    if (validateAssignment(context, node) === true) {\n        var binding_set = context[10 /* bindingSet */];\n        if (binding_set) {\n            binding_set.push(node.name);\n            if (binding_set.indexOf(node.name) !== binding_set.length - 1) {\n                context[1 /* parser */].err(node);\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.validateBinding = validateBinding;\nfunction validateLineTerminator(context) {\n    var collected = context[0], parser = context[1], right = context[3];\n    if (collected._next) {\n        delete collected._next;\n    }\n    else {\n        var next_token = context.getToken(right + 1);\n        if (next_token\n            && !(next_token.type === type_punctuator && next_token.value === \"}\")\n            && next_token.loc.start.line === collected.loc.end.line) {\n            parser.err(next_token);\n        }\n    }\n    return collected;\n}\nexports.validateLineTerminator = validateLineTerminator;\nfunction _SuccessCollector(pattern) {\n    return {\n        Success: {\n            handler: join_content,\n            precedence: 0,\n            collector: [\n                {\n                    success: _Or(_NonCollecting(\"\" /* BOUNDARY */), \"Success\"),\n                    content: pattern,\n                }\n            ]\n        }\n    };\n}\nexports._SuccessCollector = _SuccessCollector;\nvar join_content = function (_a) {\n    var collected = _a[0];\n    var success = collected.success, content = collected.content;\n    if (success) {\n        success.content.push(content);\n        return success;\n    }\n    else {\n        collected.content = [content];\n        return collected;\n    }\n};\nexports.join_content = join_content;\nvar TYPE_ALIAS = {};\nexports.TYPE_ALIAS = TYPE_ALIAS;\nvar ASSIGNMENT_PUNCTUATORS_PATTERN = _Or(\"Punctuator = += -= **= *= /= %= <<= >>= >>>= &= ^= |=\");\nexports.ASSIGNMENT_PUNCTUATORS_PATTERN = ASSIGNMENT_PUNCTUATORS_PATTERN;\nvar MODULE_ITEM_PATTERN = _Or(\"ImportDeclaration\", \"ExportAllDeclaration\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\");\nvar STATEMANT_LIST_ITEM_PATTERN = _Or(\"[Declaration]\", \"[Statement]\");\nexports.STATEMANT_LIST_ITEM_PATTERN = STATEMANT_LIST_ITEM_PATTERN;\nvar RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN = _Or(\"SwitchCase\", MODULE_ITEM_PATTERN, STATEMANT_LIST_ITEM_PATTERN);\nexports.RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN = RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN;\nvar TOPLEVEL_ITEM_PATTERN = _Or(\"\" /* BOUNDARY */, \"SwitchCase\", MODULE_ITEM_PATTERN, STATEMANT_LIST_ITEM_PATTERN);\nexports.TOPLEVEL_ITEM_PATTERN = TOPLEVEL_ITEM_PATTERN;\nfunction isAligned(context, left, right) {\n    var tokens = context.tokens;\n    for (var index = left; index < right; index++) {\n        if (tokens[index].loc.end.line !== tokens[index + 1].loc.start.line) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isAligned = isAligned;\nfunction attachLocation(source, start, end) {\n    if (end === void 0) { end = start; }\n    source.range = [start.range[0], end.range[1]];\n    source.loc = {\n        start: start.loc.start,\n        end: end.loc.end\n    };\n}\nexports.attachLocation = attachLocation;\nfunction reinterpretKeywordAsIdentifier(_a, tokenizer) {\n    var value = _a.value, range = _a.range, loc = _a.loc;\n    var name = tokenizer ? tokenizer._volatility : value;\n    var identifier = {\n        type: \"Identifier\",\n        name: name, range: range, loc: loc\n    };\n    Object.defineProperty(identifier, \"value\", {\n        configurable: true,\n        enumerable: false,\n        value: name\n    });\n    return identifier;\n}\nexports.reinterpretKeywordAsIdentifier = reinterpretKeywordAsIdentifier;\nfunction reinterpretIdentifierAsKeyword(_a) {\n    var value = _a.value, range = _a.range, loc = _a.loc;\n    return {\n        type: \"Keyword\",\n        value: value,\n        range: range,\n        loc: loc\n    };\n}\nexports.reinterpretIdentifierAsKeyword = reinterpretIdentifierAsKeyword;\nfunction _Validate(type, value) {\n    return function (token) {\n        return token.type === type && token.value === value;\n    };\n}\nexports._Validate = _Validate;\nvar is_right_parentheses = _Validate(type_punctuator, \")\");\nexports.is_right_parentheses = is_right_parentheses;\nvar is_right_brackets = _Validate(type_punctuator, \"]\");\nexports.is_right_brackets = is_right_brackets;\nvar is_right_braces = _Validate(type_punctuator, \"}\");\nexports.is_right_braces = is_right_braces;\nfunction extract_success(parser, nodes) {\n    var res = nodes;\n    if (nodes.length) {\n        var index = 0;\n        if (nodes[0].type === \"Success\") {\n            index = 1;\n            res = nodes[0].content;\n        }\n        else {\n            res = [];\n        }\n        if (nodes.length > index) {\n            parser.err.apply(parser, nodes.slice(index));\n        }\n    }\n    return res;\n}\nexports.extract_success = extract_success;\nfunction parse_and_extract(match_tree, context, node) {\n    var parser = context[1];\n    var tokens = node.content;\n    if (tokens.length) {\n        context.wrap(7 /* tokens */, tokens);\n        //context[CONTEXT.tokens] = tokens;\n        parser.parseCustom(match_tree, context);\n        tokens = extract_success(parser, tokens);\n        context.unwrap();\n    }\n    return tokens;\n}\nexports.parse_and_extract = parse_and_extract;\nfunction get_inner_group(token) {\n    while (token.content.length === 1\n        && token.content[0].value === \"()\"\n        && token.content[0].type === type_punctuator) {\n        token = token.content[0];\n    }\n    return token;\n}\nexports.get_inner_group = get_inner_group;\nfunction parse_next_statement(context, start) {\n    if (start === void 0) { start = context[3 /* right */] + 1; }\n    var parser = context[1 /* parser */];\n    if (parser.parseCustom(parser.SYNTAX_TREE, context, start, parser.isStatementListItem)) {\n        return 0;\n    }\n}\nexports.parse_next_statement = parse_next_statement;\nvar token_hooks = {};\nexports.token_hooks = token_hooks;\nfunction AsyncGetter() {\n    var await_tasks = {};\n    var async_data = {};\n    var is_open = false;\n    var async_mapper = {\n        open: function () {\n            is_open = true;\n            var tasks = [];\n            for (var key in await_tasks) {\n                if (async_data.hasOwnProperty(key)) {\n                    var data = async_data[key];\n                    for (var _i = 0, _a = await_tasks[key]; _i < _a.length; _i++) {\n                        var task = _a[_i];\n                        tasks.push([task, data]);\n                    }\n                }\n            }\n            for (var _b = 0, tasks_1 = tasks; _b < tasks_1.length; _b++) {\n                var task = tasks_1[_b];\n                task[0](task[1]);\n            }\n        },\n        get: function (key, callback) {\n            if (await_tasks[key]) {\n                await_tasks[key].push(callback);\n                if (is_open && async_data.hasOwnProperty(key)) {\n                    callback(async_data[key]);\n                }\n            }\n            else {\n                if (async_mapper.hasOwnProperty(key)) {\n                    async_data[key] = async_mapper[key];\n                    is_open && callback(async_data[key]);\n                }\n                Object.defineProperty(async_mapper, key, {\n                    enumerable: true,\n                    configurable: true,\n                    set: function (data) {\n                        if (async_data.hasOwnProperty(key)) {\n                            debugger;\n                        }\n                        async_data[key] = data;\n                        if (is_open) {\n                            for (var _i = 0, _a = await_tasks[key]; _i < _a.length; _i++) {\n                                var cbfun = _a[_i];\n                                cbfun(data);\n                            }\n                        }\n                    },\n                    get: function () {\n                        return async_data[key];\n                    }\n                });\n                await_tasks[key] = [callback];\n            }\n        }\n    };\n    return async_mapper;\n}\nvar async_getter = AsyncGetter();\nexports.async_getter = async_getter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/head.ts\n");

/***/ }),

/***/ "../../js/syntax/module_declaration.ts":
/*!************************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/module_declaration.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/syntax/head.ts\");\nvar Grouping = head_1.NODES.Grouping;\nvar STRING_LITERAL_PATTERN = head_1._Or(\"Literal\").pipe(function (context, token) {\n    if (token instanceof Grouping || typeof token.value !== \"string\") {\n        context[1 /* parser */].err(token);\n    }\n});\nvar ImportSpecifiers = __assign(__assign({}, head_1._SuccessCollector(head_1._Pattern(\"ImportSpecifier\"))), { \n    /*\"Success\": {\n        handler: join_content,\n        precedence: 0,\n        collector: [\n            {\n                success: _Or(MARKS.BOUNDARY, \"Success\"),\n                content: \"ImportSpecifier\",\n            }\n        ]\n    },*/\n    ImportSpecifier: {\n        collector: {\n            _prev: head_1._NonCapturing(\"Success\", \"\" /* BOUNDARY */),\n            imported: \"Identifier\",\n            local: head_1._Or(head_1._Series(head_1._NonCollecting(\"Identifier as\"), \"Identifier\", head_1._NonCollecting(\"Punctuator ,\", \"\" /* BOUNDARY */)), head_1._Or(\"Punctuator ,\", \"\" /* BOUNDARY */).pipe(function (context) {\n                var collected = context[0];\n                return collected.imported;\n            }))\n        }\n    } });\nvar IMPORT_SPECIFIERS_TREE = head_1.createMatchTree(ImportSpecifiers);\nvar EXPORT_SPECIFIERS_TREE = head_1.createMatchTree(__assign(__assign({}, head_1._SuccessCollector(head_1._Pattern(\"ExportSpecifier\"))), { ExportSpecifier: {\n        collector: {\n            _prev: head_1._NonCapturing(\"Success\", \"\" /* BOUNDARY */),\n            local: \"Identifier\",\n            exported: head_1._Or(head_1._Series(head_1._NonCollecting(\"Identifier as\"), \"Identifier\", head_1._NonCollecting(\"Punctuator ,\", \"\" /* BOUNDARY */)), head_1._Or(\"Punctuator ,\", \"\" /* BOUNDARY */).pipe(function (context) {\n                var collected = context[0];\n                return collected.local;\n            }))\n        }\n    } }));\nvar ModuleDeclarations = {\n    \"ImportDeclaration\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            if (!context[13 /* isModule */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword import\"),\n                specifiers: head_1._Or(head_1._Punctuator(\"{}\").pipe(function (context, token) {\n                    return head_1.parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\n                }), head_1._Series(head_1._NonCollecting(\"Punctuator *\"), head_1._NonCollecting(\"Identifier as\"), head_1._Identifier().pipe(function (context, token) {\n                    return [\n                        {\n                            type: \"ImportNamespaceSpecifier\",\n                            local: token\n                        }\n                    ];\n                })), head_1._Series(head_1._Identifier().pipe(function (context, Identifier) {\n                    return {\n                        type: \"ImportDefaultSpecifier\",\n                        local: Identifier\n                    };\n                }), head_1._Option(head_1._Series(head_1._NonCollecting(\"Punctuator ,\"), head_1._Or(head_1._Series(head_1._Punctuator(\"{}\").pipe(function (context, token) {\n                    return head_1.parse_and_extract(IMPORT_SPECIFIERS_TREE, context, token);\n                }), head_1._Mark(function (context) {\n                    var collected = context[0];\n                    var specifiers = collected.specifiers;\n                    specifiers.splice.apply(specifiers, __spreadArrays([1, 1], specifiers[1]));\n                })), head_1._Series(head_1._NonCollecting(\"Punctuator *\"), head_1._NonCollecting(\"Identifier as\"), head_1._Identifier().pipe(function (context, token) {\n                    return {\n                        type: \"ImportNamespaceSpecifier\",\n                        local: token\n                    };\n                }))))), head_1._Mark(function () { }) //使结果收集为数组\n                )),\n                _: head_1._NonCollecting(\"Identifier from\"),\n                source: STRING_LITERAL_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            }\n        ]\n    },\n    \"ExportAllDeclaration\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            if (!context[13 /* isModule */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        collector: {\n            _: head_1._NonCollecting(head_1._Series(\"Keyword export\", \"Punctuator *\", \"Identifier from\")),\n            source: STRING_LITERAL_PATTERN,\n            _next: head_1._Option(\"Punctuator ;\"),\n        },\n    },\n    \"ExportNamedDeclaration\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            collected.declaration || head_1.validateLineTerminator(context);\n            if (!context[13 /* isModule */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        collector: [\n            {\n                _: head_1._NonCollecting(\"Keyword export\"),\n                declaration: \"VariableDeclaration\",\n                specifiers: head_1._Mark(function () { return []; }),\n                source: head_1._Mark(null)\n            },\n            {\n                _: head_1._NonCollecting(\"Keyword export\"),\n                declaration: head_1._Mark(null),\n                specifiers: head_1._Punctuator(\"{}\").pipe(function (context, token) {\n                    return head_1.parse_and_extract(EXPORT_SPECIFIERS_TREE, context, token);\n                }),\n                source: head_1._Mark(null),\n                _next: head_1._Option(\"Punctuator ;\")\n            }\n        ]\n    },\n    \"ExportDefaultDeclaration\": {\n        handler: function (context) {\n            var collected = context[0];\n            head_1.validateLineTerminator(context);\n            if (!context[13 /* isModule */]) {\n                context[1 /* parser */].err(collected);\n            }\n            return collected;\n        },\n        precedence: 1.5,\n        collector: [\n            {\n                type: head_1._Mark(\"ExportDefaultDeclaration\"),\n                _: head_1._NonCollecting(\"Keyword export\"),\n                __: head_1._NonCollecting(\"Keyword default\"),\n                declaration: \"[Expression]\",\n                _next: head_1._Option(\"Punctuator ;\")\n            }\n        ]\n    }\n};\nexports.default = ModuleDeclarations;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/module_declaration.ts\n");

/***/ }),

/***/ "../../js/syntax/pattern.ts":
/*!*************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/pattern.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseObjectPattern = exports.parseArrayPattern = exports.Patterns = void 0;\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/syntax/head.ts\");\n//import { UNIT_EXPRESSION_TREE } from './expression';\nvar Grouping = head_1.NODES.Grouping;\nvar UNIT_EXPRESSION_TREE;\nvar PETTERN_ELEMENTS_TREE;\nvar PATTERN_PROPERTIES_TREE;\n//console.log(123123, UNIT_EXPRESSION_TREE, UNIT_EXPRESSION_TREE);\nhead_1.async_getter.get(\"UNIT_EXPRESSION_TREE\", function (data) {\n    UNIT_EXPRESSION_TREE = data;\n    PETTERN_ELEMENTS_TREE = head_1.createMatchTree(PatternElements, UNIT_EXPRESSION_TREE);\n    PATTERN_PROPERTIES_TREE = head_1.createMatchTree(PatternProperties, UNIT_EXPRESSION_TREE);\n});\nvar Patterns = head_1.async_getter.Patterns = {\n    ArrayPattern: {\n        handler: function (context) {\n            var collected = context[0];\n            collected.is_binding || context.wrap(10 /* bindingSet */, null);\n            var res = parseArrayPattern(context, collected.elements);\n            collected.is_binding || context.unwrap();\n            return res;\n        },\n        precedence: 20,\n        filter: [\n            null,\n            function (context) {\n                return context[18 /* bindingElement */] /* === context[CONTEXT.tokens]*/;\n            }\n        ],\n        collector: [\n            {\n                elements: head_1._Or(\"Punctuator []\"),\n                _next: head_1._NonCapturing(head_1.ASSIGNMENT_PUNCTUATORS_PATTERN),\n            },\n            {\n                _prev: head_1._NonCapturing(\"Punctuator  ...\", \"\" /* BOUNDARY */, \"Success\"),\n                elements: head_1._Or(\"Punctuator []\"),\n                is_binding: head_1._Mark(true)\n            }\n        ]\n    },\n    ObjectPattern: {\n        handler: function (context) {\n            var collected = context[0];\n            collected.is_binding || context.wrap(10 /* bindingSet */, null);\n            var res = parseObjectPattern(context, collected.properties);\n            collected.is_binding || context.unwrap();\n            return res;\n        },\n        precedence: 20,\n        filter: [\n            null, null,\n            function (context, left, right) {\n                return context[18 /* bindingElement */] /* === tokens*/\n                    || context[14 /* isExpression */];\n            },\n            function (context) {\n                return context[18 /* bindingElement */] /*=== context[CONTEXT.tokens]*/;\n            }\n        ],\n        collector: [\n            {\n                _prev: head_1._NonCapturing(head_1.ASSIGNMENT_PUNCTUATORS_PATTERN),\n                properties: head_1._Or(\"Punctuator {}\"),\n                _next: head_1._NonCapturing(head_1.ASSIGNMENT_PUNCTUATORS_PATTERN)\n            },\n            [\n                [\"_prev\", head_1._NonCapturing(\"Punctuator  ,\")],\n                [\"is_binding\", head_1._Mark(true)]\n            ],\n            [\"_prev\", head_1._Mark()],\n            [\n                [\"_prev\", head_1._NonCapturing(\"Punctuator ...\", \"\" /* BOUNDARY */, \"Success\")],\n                [\"_next\", head_1._Mark()],\n            ]\n        ]\n    },\n    AssignmentPattern: {\n        filter: function (context) {\n            return context[18 /* bindingElement */] /* === context[CONTEXT.tokens]*/;\n        },\n        precedence: 1.5,\n        collector: {\n            _: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n            left: head_1._Or(\"ArrayPattern\", \"ObjectPattern\", head_1._Or(\"Identifier\").pipe(function (context, identifier) {\n                if (identifier instanceof Grouping) {\n                    context[1 /* parser */].err(identifier);\n                }\n                else {\n                    head_1.validateBinding(context, identifier);\n                }\n            })),\n            __: head_1._NonCollecting(\"Punctuator =\"),\n            right: \"[Expression]\"\n        }\n    },\n    \"\": [\n        {\n            handler: function (context) {\n                var token = context[0].token, parser = context[1], left = context[2], right = context[3];\n                token = head_1.get_inner_group(token);\n                var store = context.store(7 /* tokens */, token.content, 18 /* bindingElement */, true, 10 /* bindingSet */, null);\n                var node = parser.parseNode(UNIT_EXPRESSION_TREE, context, function (node) { return parser.isExpression(node)\n                    || node.type === \"ArrayPattern\"\n                    || node.type === \"ObjectPattern\"\n                    || node.type === \"AssignmentPattern\"; });\n                context.restore(store);\n                if (!node) {\n                    parser.err(token);\n                }\n                return new Grouping(node, token);\n            },\n            collector: [\n                {\n                    _prev: head_1._NonCapturing(head_1._Series(\"Keyword export\", \"Keyword default\"), \"Punctuator ,\", \"Success\", head_1.TOPLEVEL_ITEM_PATTERN, head_1.ASSIGNMENT_PUNCTUATORS_PATTERN),\n                    token: head_1._Or(\"Punctuator ()\"),\n                    _next: head_1._NonCapturing(head_1.ASSIGNMENT_PUNCTUATORS_PATTERN)\n                }\n            ]\n        },\n        {\n            validator: function (context) {\n                var parser = context[1], right = context[3];\n                var argument = context.getToken(right);\n                argument instanceof Grouping && parser.err(argument);\n                return true;\n            },\n            filter: function (context) {\n                return context[19 /* spreadElement */];\n            },\n            precedence: 1.5,\n            collector: {\n                type: head_1._Mark(\"SpreadElement\"),\n                token: head_1._NonCollecting(\"Punctuator ...\"),\n                argument: \"[Expression]\"\n            }\n        },\n        {\n            validator: function (context) {\n                var parser = context[1], right = context[3];\n                var argument = context.getToken(right);\n                argument instanceof Grouping && parser.err(argument);\n                return true;\n            },\n            filter: function (context) {\n                return context[18 /* bindingElement */];\n            },\n            precedence: 1.5,\n            collector: {\n                type: head_1._Mark(\"RestElement\"),\n                token: head_1._NonCollecting(\"Punctuator ...\"),\n                argument: head_1._Or(head_1._Or(\"Identifier\").pipe(function (context, token) {\n                    head_1.validateBinding(context, token);\n                }), \"ArrayPattern\", \"ObjectPattern\")\n            }\n        }\n    ]\n};\nexports.Patterns = Patterns;\nfunction parseArrayPattern(context, token) {\n    var pattern = new head_1.NODES.ArrayPattern();\n    context.wrap(18 /* bindingElement */, true);\n    pattern.elements = head_1.parse_and_extract(PETTERN_ELEMENTS_TREE, context, token);\n    context.unwrap();\n    pattern.range = token.range;\n    pattern.loc = token.loc;\n    return pattern;\n}\nexports.parseArrayPattern = parseArrayPattern;\nfunction parseObjectPattern(context, token) {\n    var pattern = new head_1.NODES.ObjectPattern();\n    context.wrap(18 /* bindingElement */, true);\n    pattern.properties = head_1.parse_and_extract(PATTERN_PROPERTIES_TREE, context, token);\n    context.unwrap();\n    pattern.range = token.range;\n    pattern.loc = token.loc;\n    return pattern;\n}\nexports.parseObjectPattern = parseObjectPattern;\nvar PatternElements = {\n    Success: {\n        handler: head_1.join_content,\n        collector: [\n            {\n                success: head_1._Or(\"\" /* BOUNDARY */, \"Success\"),\n                content: head_1._Or(head_1._Or(\"Identifier\").pipe(function (context, identifier) {\n                    if (identifier instanceof Grouping) {\n                        context[1 /* parser */].err(identifier);\n                    }\n                    else {\n                        head_1.validateBinding(context, identifier);\n                    }\n                }), head_1._Or(\"ArrayPattern\", \"ObjectPattern\", \"AssignmentPattern\")),\n                _next: head_1._NonCollecting(head_1._Or(\"Punctuator ,\", \"\" /* BOUNDARY */))\n            },\n            [\n                [\"content\", \"RestElement\"],\n                [\"_next\", head_1._NonCollecting(\"\" /* BOUNDARY */)]\n            ],\n            {\n                success: head_1._Or(\"\" /* BOUNDARY */, \"Success\"),\n                content: head_1._Mark(null),\n                _next: head_1._NonCollecting(\"Punctuator ,\")\n            }\n        ]\n    }\n};\nvar PatternProperties = __assign(__assign({}, head_1._SuccessCollector(head_1._Pattern(\"Property\"))), { Property: [\n        {\n            collector: [\n                {\n                    _prev: head_1._NonCapturing(\"\" /* BOUNDARY */, \"Success\"),\n                    key: head_1._Or(\"Punctuator []\").pipe(function (context, token) {\n                        context.wrap(7 /* tokens */, token.content);\n                        var res = context[1 /* parser */].parseExpression(context);\n                        context.unwrap();\n                        return res;\n                    }),\n                    value: head_1._Series(head_1._NonCollecting(\"Punctuator :\"), head_1._Or(head_1._Or(\"Identifier\").pipe(function (context, token) {\n                        head_1.validateBinding(context, token);\n                    }), head_1._Or(\"Punctuator []\").pipe(parseArrayPattern), head_1._Or(\"Punctuator {}\").pipe(parseObjectPattern)), head_1._Option(head_1._Series(head_1._NonCollecting(\"Punctuator =\"), \"[Expression]\")), head_1._Mark(function (context) {\n                        var collected = context[0];\n                        var value = collected.value;\n                        if (value.length > 1) {\n                            var _value = new head_1.NODES.AssignmentPattern();\n                            _value.left = value[0];\n                            _value.right = value[1];\n                            head_1.attachLocation(_value, value[0], value[1]);\n                            collected.value = _value;\n                        }\n                        else {\n                            collected.value = value[0];\n                        }\n                        return undefined;\n                    })),\n                    _next: head_1._NonCollecting(\"\" /* BOUNDARY */, \"Punctuator ,\"),\n                    computed: head_1._Mark(true),\n                    kind: head_1._Mark(\"init\"),\n                    method: head_1._Mark(false),\n                    shorthand: head_1._Mark(false),\n                },\n                [\n                    [\n                        \"key\",\n                        head_1._Or(\"Identifier\").pipe(function (context, identifier) {\n                            if (identifier instanceof Grouping) {\n                                context[1 /* parser */].err(identifier);\n                            }\n                        })\n                    ],\n                    [\"computed\", head_1._Mark(false)]\n                ],\n                [\n                    [\n                        \"value\",\n                        head_1._Or(head_1._Series(head_1._NonCollecting(\"Punctuator =\"), \"[Expression]\").pipe(function (context, token) {\n                            var collected = context[0];\n                            var left = collected.key;\n                            var res = new head_1.NODES.AssignmentPattern();\n                            res.left = left;\n                            res.right = token;\n                            head_1.attachLocation(res, left, token);\n                            return res;\n                        }), head_1._Mark(function (context) {\n                            return context[0 /* collected */].key;\n                        }))\n                    ],\n                    [\n                        \"shorthand\",\n                        head_1._Mark(function (context) {\n                            head_1.validateBinding(context, context[0 /* collected */].key);\n                            return true;\n                        })\n                    ]\n                ]\n            ]\n        },\n        {\n            validator: function () {\n                return false;\n            },\n            precedence: new Number(3),\n            collector: {\n                __: head_1._Series(head_1._Or(\"\" /* BOUNDARY */, \"Success\"), head_1._Or(\"Punctuator []\", \"Identifier\"), \"Punctuator :\", head_1._Or(\"Identifier\", \"Punctuator [] {}\"), \"Punctuator =\")\n            }\n        }\n    ] });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/pattern.ts\n");

/***/ }),

/***/ "../../js/syntax/statement.ts":
/*!***************************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/syntax/statement.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar head_1 = __webpack_require__(/*! ./head */ \"../../js/syntax/head.ts\");\nvar expression_1 = __webpack_require__(/*! ./expression */ \"../../js/syntax/expression.ts\");\nvar declaration_1 = __webpack_require__(/*! ./declaration */ \"../../js/syntax/declaration.ts\");\nvar Grouping = head_1.NODES.Grouping;\nvar VariableDeclaration = declaration_1.default.VariableDeclaration;\nvar BLOCK_STATEMENT_PATTERN = head_1._Or(\"Block\", head_1._Or(\"Punctuator {\").walk(function (context, left) {\n    var parser = context[1 /* parser */];\n    parser.parseRange(parser.SYNTAX_TREE, context, left, head_1.is_right_braces).type = \"Block\";\n})).pipe(function (context, token) {\n    var res = new head_1.NODES.BlockStatement();\n    res.body = token.content;\n    head_1.attachLocation(res, token);\n    return res;\n});\nvar GROUPING_EXPRESSION = head_1._Or(\"Punctuator ()\", head_1._Punctuator(\"(\").walk(function (context, index) {\n    var parser = context[1];\n    var store = context.store(10 /* bindingSet */, null, 18 /* bindingElement */, false);\n    parser.parseRange(parser.EXPRESSION_TREE, context, index, head_1.is_right_parentheses, parser.isExpression);\n    context.restore(store);\n})).pipe(function (context, token) {\n    if (token.content) {\n        return token.content;\n    }\n    else {\n        context[1 /* parser */].err(token);\n        return null;\n    }\n});\nvar Statements = head_1.async_getter.Statements = {\n    \"\": {\n        handler: function (_a) {\n            var collected = _a[0], parser = _a[1];\n            parser.err(collected.error);\n            return [];\n        },\n        precedence: 0,\n        collector: [\n            {\n                error: head_1._Or(\"Punctuator\", \"Keyword\"),\n                _next: head_1._NonCapturing(head_1.RIGHT_SIDE_TOPLEVEL_ITEM_PATTERN, \"Punctuator }\"),\n            }\n        ]\n    },\n    \"BreakStatement\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            var label = collected.label;\n            if (label) {\n                if (label instanceof Grouping\n                    || context[11 /* labelSet */].indexOf(label.name) < 0) {\n                    parser.err(label);\n                }\n            }\n            else if (!context[16 /* inIteration */] && !context[17 /* inSwitch */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        filter: [\n            function (context, left) {\n                return head_1.isAligned(context, left, left + 1);\n            },\n            null,\n        ],\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword break\"),\n                label: head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            },\n            [\"label\", head_1._Mark(null)]\n        ]\n    },\n    \"ContinueStatement\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            var label = collected.label;\n            head_1.validateLineTerminator(context);\n            if (label) {\n                if (label instanceof Grouping\n                    || context[11 /* labelSet */].indexOf(label.name) < 0) {\n                    parser.err(label);\n                }\n            }\n            else if (!context[16 /* inIteration */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        filter: \"BreakStatement\",\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword continue\"),\n                label: head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            },\n            [\"label\", head_1._Mark(null)],\n        ]\n    },\n    \"ReturnStatement\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            if (!context[15 /* inFunctionBody */]) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        validator: function (context) {\n            var left = context[2], right = context[3];\n            if (left === right) {\n                var next_token = context.getToken(left + 1);\n                if (next_token && context.getToken(left).loc.end.line === next_token.loc.start.line) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        filter: \"BreakStatement\",\n        precedence: 0,\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword return\"),\n                argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            },\n            [\"argument\", head_1._Mark(null)]\n        ]\n    },\n    \"BlockStatement\": {\n        overload: true,\n        //precedence: 0,\n        collector: [\n            {\n                _prev: head_1._NonCapturing(head_1.TOPLEVEL_ITEM_PATTERN),\n                body: head_1._Punctuator(\"{\").pipe(function (context, token, left) {\n                    var parser = context[1 /* parser */];\n                    return parser.parseRange(parser.SYNTAX_TREE, context, left, head_1.is_right_braces).content;\n                })\n            }\n        ]\n    },\n    \"DoWhileStatement\": {\n        validator: \"ForStatement\",\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            //collected.test = parser.parseExpression(context, collected.test);\n            return collected;\n        },\n        collector: [\n            {\n                keyword: head_1._NonCollecting(\"Keyword do\"),\n            },\n            [\n                [\"body\", head_1.STATEMANT_LIST_ITEM_PATTERN],\n                [\"test\", head_1._Series(head_1._NonCollecting(\"Keyword while\"), GROUPING_EXPRESSION)],\n                [\"_next\", head_1._Option(\"Punctuator ;\")]\n            ]\n        ]\n    },\n    \"EmptyStatement\": [\n        {\n            collector: [\n                {\n                    _prev: head_1._NonCapturing(head_1.TOPLEVEL_ITEM_PATTERN),\n                    _: head_1._NonCollecting(\"Punctuator ;\")\n                }\n            ]\n        }\n    ],\n    \"ExpressionStatement\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1], left = context[2];\n            head_1.validateLineTerminator(context);\n            var begin = context[6 /* begin */];\n            if ((!context[7 /* tokens */] ||\n                context[15 /* inFunctionBody */] === begin)\n                && (begin >= left ||\n                    context.getToken(left - 1).directive)) {\n                var expression = collected.expression;\n                if (expression\n                    && expression.type === \"Literal\"\n                    && typeof expression.value === \"string\"\n                    && expression.raw.length > 2) {\n                    collected = new head_1.NODES.Directive(collected.type, expression, expression.raw.slice(1, -1), collected.range, collected.loc);\n                    if (collected.directive === \"use strict\") {\n                        context[12 /* strict */] = true;\n                    }\n                }\n            }\n            return collected;\n        },\n        precedence: 0,\n        collector: [\n            {\n                expression: head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            }\n        ]\n    },\n    \"ForStatement\": {\n        validator: [\n            function (context) {\n                context.wrap(16 /* inIteration */, true);\n                var res = head_1.parse_next_statement(context);\n                context.unwrap();\n                return res;\n            },\n            null\n        ],\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            var iterator = collected.iterator, body = collected.body, range = collected.range, loc = collected.loc;\n            collected = iterator.content;\n            if (collected) {\n                collected.body = body;\n                collected.range = range;\n                collected.loc = loc;\n                return collected;\n            }\n            else {\n                parser.err(iterator);\n                return [];\n            }\n        },\n        collector: [\n            {\n                keyword: head_1._NonCollecting(\"Keyword for\"),\n                iterator: head_1._Or(\"Punctuator ()\", head_1._Punctuator(\"(\").walk(function (context, left) {\n                    var parser = context[1 /* parser */];\n                    context.wrap(14 /* isExpression */, true);\n                    parser.parseRange(FOR_ITERATOR_TREE, context, left, head_1.is_right_parentheses, parser.isStatement);\n                    context.unwrap();\n                }))\n            },\n            [\"body\", head_1.STATEMANT_LIST_ITEM_PATTERN]\n        ]\n    },\n    \"ForInStatement\": { //ForStatement\n    },\n    \"ForOfStatement\": { //ForStatement\n    },\n    \"IfStatement\": {\n        validator: function (context) {\n            var left = context[2], right = context[3];\n            if ((right - left) % 2 === 1) {\n                return head_1.parse_next_statement(context);\n            }\n            return true;\n        },\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword if\"),\n                test: GROUPING_EXPRESSION,\n                consequent: head_1._Mark(null),\n                alternate: head_1._Mark(null)\n            },\n            [\"consequent\", head_1.STATEMANT_LIST_ITEM_PATTERN],\n            [\n                \"alternate\", head_1._Series(head_1._NonCollecting(\"Keyword else\"), head_1._Option(head_1.STATEMANT_LIST_ITEM_PATTERN))\n            ]\n        ]\n    },\n    \"LabeledStatement\": {\n        validator: [\n            function (context) {\n                var parser = context[1], left = context[2];\n                var label = context.getToken(left);\n                var label_name = label.name;\n                var label_set = context[11 /* labelSet */];\n                if (label_set.indexOf(label_name) >= 0) {\n                    parser.err(label);\n                }\n                label_set.unshift(label_name);\n                var res = head_1.parse_next_statement(context);\n                label_set.shift();\n                return res;\n            },\n            null\n        ],\n        precedence: 0,\n        collector: [\n            {\n                label: head_1._Series(head_1.IDENTIFIER_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, head_1._NonCollecting(\"Punctuator :\"))\n            },\n            [\"body\", head_1.STATEMANT_LIST_ITEM_PATTERN]\n        ]\n    },\n    \"SwitchStatement\": [\n        {\n            collector: [\n                {\n                    token: head_1._NonCollecting(\"Keyword switch\"),\n                    discriminant: GROUPING_EXPRESSION,\n                    cases: head_1._Punctuator(\"{\").pipe(function (context, token, left) {\n                        var parser = context[1 /* parser */];\n                        context.wrap(17 /* inSwitch */, true);\n                        var cases = parser.parseRange(parser.SYNTAX_TREE, context, left, head_1.is_right_braces).content;\n                        context.unwrap();\n                        var has_default = false;\n                        for (var _i = 0, cases_1 = cases; _i < cases_1.length; _i++) {\n                            var item = cases_1[_i];\n                            if (item.type === \"SwitchCase\") {\n                                if (item.test) {\n                                    continue;\n                                }\n                                if (!has_default) {\n                                    has_default = true;\n                                    continue;\n                                }\n                            }\n                            parser.err(item);\n                        }\n                        return cases;\n                    })\n                }\n            ]\n        },\n        {\n            handler: function (_a) {\n                var collected = _a[0];\n                collected.consequent = [];\n                return collected;\n            },\n            precedence: 0,\n            filter: function (content) {\n                return content[17 /* inSwitch */] /*=== content[CONTEXT.tokens]*/;\n            },\n            collector: [\n                {\n                    type: head_1._Mark(\"SwitchCase\"),\n                    test: head_1._Or(head_1._Series(head_1._NonCollecting(\"Keyword case\"), head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN), head_1._Series(head_1._NonCollecting(\"Keyword default\"), head_1._Mark(null))),\n                    __: head_1._NonCollecting(\"Punctuator :\")\n                },\n            ]\n        },\n        {\n            handler: function (_a) {\n                var collected = _a[0];\n                collected.token.consequent.push(collected.consequent);\n                return collected.token;\n            },\n            collector: {\n                token: \"SwitchCase\",\n                consequent: head_1.STATEMANT_LIST_ITEM_PATTERN\n            }\n        }\n    ],\n    \"ThrowStatement\": {\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            head_1.validateLineTerminator(context);\n            if (collected.loc.start.line !== collected.argument.loc.start.line) {\n                parser.err(collected);\n            }\n            return collected;\n        },\n        precedence: 0,\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword throw\"),\n                argument: head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN,\n                _next: head_1._Option(\"Punctuator ;\")\n            }\n        ]\n    },\n    \"TryStatement\": {\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword try\"),\n                block: BLOCK_STATEMENT_PATTERN /*\"Punctuator {}\"*/,\n                handler: head_1._Series(head_1._NonCollecting(\"Keyword catch\"), \"Punctuator ()\", BLOCK_STATEMENT_PATTERN, head_1._Mark(function (context) {\n                    var collected = context[0], parser = context[1];\n                    var _a = collected.handler, param = _a[0], body = _a[1];\n                    var params = expression_1.parse_params(context, param.content);\n                    if (params.length !== 1) {\n                        parser.err(param);\n                    }\n                    collected.handler = {\n                        type: \"CatchClause\",\n                        param: params[0],\n                        body: body\n                    };\n                })),\n                finalizer: head_1._Mark(null)\n            },\n            [\"finalizer\", head_1._Series(head_1._NonCollecting(\"Keyword finally\"), BLOCK_STATEMENT_PATTERN)],\n            [\"handler\", head_1._Mark(null)],\n        ]\n    },\n    \"WhileStatement\": {\n        validator: \"ForStatement\",\n        /*handler(context: Context) {\n            let [collected, parser] = context;\n            //collected.test = parser.parseExpression(context, collected.test);\n            return collected;\n        },*/\n        collector: [\n            {\n                token: head_1._NonCollecting(\"Keyword while\"),\n                test: GROUPING_EXPRESSION\n            },\n            [\"body\", head_1.STATEMANT_LIST_ITEM_PATTERN]\n        ]\n    },\n    \"WithStatement\": {\n        validator: [\n            head_1.parse_next_statement,\n            null\n        ],\n        handler: function (context) {\n            var collected = context[0], parser = context[1];\n            if (context[12 /* strict */]) {\n                parser.err(collected);\n            }\n            //collected.object = parser.parseExpression(context, collected.object);\n            return collected;\n        },\n        collector: [\n            {\n                token: \"Keyword with\",\n                object: \"Punctuator ()\"\n            },\n            [\"body\", head_1.STATEMANT_LIST_ITEM_PATTERN]\n        ]\n    }\n};\nhead_1.async_getter.get(\"Statements\", function (statements) {\n    for (var type_name in statements) {\n        if (type_name) {\n            type_name && (head_1.TYPE_ALIAS[type_name] = [type_name, \"[Statement]\"]);\n        }\n    }\n});\nexports.default = Statements;\nvar ForIterator = {\n    VariableDeclaration: VariableDeclaration,\n    ForStatement: [\n        {\n            collector: [\n                {\n                    init: head_1._Or(\"VariableDeclaration\", head_1._Series(head_1._NonCollecting(\"\" /* BOUNDARY */), head_1._Or(head_1.EXPRESSION_OR_THROW_STRICT_RESERVED_WORDS_PATTERN, head_1._Mark(null)), //EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS\n                    head_1._NonCollecting(\"Punctuator ;\"))),\n                    test: head_1._Series(head_1._Or(head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, head_1._Mark(null)), head_1._NonCollecting(\"Punctuator ;\")),\n                    update: head_1._Series(head_1._Or(head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, head_1._Mark(null)), head_1._NonCapturing(\"Punctuator )\")),\n                    body: head_1._Mark(null)\n                }\n            ]\n        },\n        {\n            handler: function (context) {\n                var collected = context[0], parser = context[1];\n                var left = collected.left;\n                var kind, declarator;\n                if (left instanceof Array) {\n                    kind = left[0], declarator = left[1];\n                }\n                else {\n                    declarator = left;\n                }\n                if (declarator.value === \"()\" && declarator.type === \"Punctuator\") {\n                    var wrapper = declarator;\n                    declarator = head_1.get_inner_group(declarator);\n                    if (declarator.content.length > 0) {\n                        if (kind) {\n                            parser.err(declarator);\n                        }\n                        else if (declarator.content.length > 1) {\n                            parser.err.apply(parser, declarator.content.slice(1));\n                        }\n                        declarator = new Grouping(declarator.content[0], wrapper);\n                    }\n                }\n                if (declarator.type === \"Punctuator\") {\n                    switch (declarator.value) {\n                        case \"{}\":\n                            declarator = expression_1.parseObjectPattern(context, declarator);\n                            break;\n                        case \"[]\":\n                            declarator = expression_1.parseArrayPattern(context, declarator);\n                            break;\n                        default:\n                            parser.err(declarator);\n                            declarator = null;\n                    }\n                }\n                else if (declarator.type !== \"Identifier\") {\n                    parser.err(declarator);\n                    declarator = null;\n                }\n                else {\n                    head_1.validateAssignment(context, declarator);\n                }\n                if (kind) {\n                    left = new head_1.NODES.VariableDeclaration();\n                    left.declarations = [\n                        {\n                            type: \"VariableDeclarator\",\n                            id: declarator,\n                            init: null\n                        }\n                    ];\n                    left.kind = kind.value;\n                    left.range = [kind.range[0], declarator.range[1]];\n                    left.loc = {\n                        start: kind.loc.start,\n                        end: declarator.loc.end\n                    };\n                    collected.left = left;\n                }\n                else {\n                    collected.left = declarator;\n                }\n                return collected;\n            },\n            validator: function (context) {\n                return context[3 /* right */] >= context.tokens.length - 1;\n            },\n            filter: [function () { return false; }, null],\n            precedence: 1.5,\n            collector: [\n                {\n                    _: head_1._Series(//和 VariableDeclaration 不冲突的占位 \n                    \"\" /* BOUNDARY */, head_1._Or(head_1._Series(head_1._Or(\"Keyword var const let\"), head_1._Or(\"Identifier\", \"Punctuator {} [] ()\")), head_1._Series(\"Identifier let\", head_1._Or(\"Identifier\", \"Punctuator {} ()\"))))\n                },\n                {\n                    type: head_1._Mark(\"ForOfStatement\"),\n                    _prev: head_1._NonCollecting(\"\" /* BOUNDARY */),\n                    left: head_1._Series(head_1._Option(head_1._Or(\"Identifier let\", \"Keyword var const let\")), head_1._Or(\"Identifier\", \"Punctuator {} [] ()\")),\n                    token: head_1._NonCollecting(\"Identifier of\"),\n                    right: head_1._Option(head_1._Series(head_1.EXPRESSION_OR_VALIDATE_STRICT_RESERVED_WORDS_PATTERN, head_1._Option(head_1._NonCapturing(\"Punctuator )\")))),\n                    body: head_1._Mark(null),\n                },\n                [\n                    [\"type\", head_1._Mark(\"ForInStatement\")],\n                    [\"token\", head_1._NonCollecting(\"Keyword in\")],\n                    [\"each\", head_1._Mark(false)]\n                ]\n            ]\n        }\n    ]\n};\nvar FOR_ITERATOR_TREE;\nhead_1.async_getter.get(\"EXPRESSION_TREE\", function (EXPRESSION_TREE) {\n    FOR_ITERATOR_TREE = head_1.createMatchTree(ForIterator, EXPRESSION_TREE);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/syntax/statement.ts\n");

/***/ }),

/***/ "../../js/tokenizer.ts":
/*!********************************************************!*\
  !*** /mnt/d/ProgramFiles/GitHub/Dison/js/tokenizer.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar character_1 = __webpack_require__(/*! ./character */ \"../../js/character.ts\");\nvar interfaces_1 = __webpack_require__(/*! ./interfaces */ \"../../js/interfaces.ts\");\nvar default_1 = /** @class */ (function (_super) {\n    __extends(default_1, _super);\n    function default_1(options) {\n        var _this = _super.call(this) || this;\n        _this.token_hooks = {};\n        _this.save_comments = true;\n        for (var key in options) {\n            _this[key] = options[key];\n        }\n        return _this;\n        //console.log(333, TOKEN_TYPES,TOKEN_TYPE_MAP);\n    }\n    default_1.prototype.err = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        //debugger;\n        this.error_logs.push.apply(this.error_logs, arguments);\n    };\n    default_1.prototype.init = function (input) {\n        this.line_number = 0;\n        this.line_start = 0;\n        this.index = 0;\n        this.input = input;\n        this.end = this.input.length;\n        this.error_logs = [];\n        this.tokens = [];\n        this.terminator_stack = [];\n        this.curly_stack = [];\n    };\n    default_1.prototype.tokenize = function (input) {\n        this.init(input);\n        while (this.nextToken())\n            ;\n        return this.tokens;\n    };\n    default_1.prototype.nextToken = function () {\n        while (this.index < this.end\n            && (this.terminator_stack.length === 0\n                || this.tokens.length === 0\n                || !this.terminator_stack[0](this.tokens[this.tokens.length - 1]))) {\n            var token = this._nextToken();\n            if (token) {\n                var hook = this.token_hooks[token.type];\n                hook && (token = hook(token, this));\n                if (this.save_comments || token.type !== this.TYPE_ENUMS.Comments) {\n                    this.tokens.push(token);\n                    return token;\n                }\n            }\n            else if (this.index < this.end) {\n                this.err(this.createToken(\"error\", [this.index, ++this.index]));\n            }\n        }\n    };\n    default_1.prototype.createToken = function (type, range, value, start, end) {\n        if (value === void 0) { value = this.input.slice(range[0], range[1]); }\n        if (start === void 0) { start = {\n            line: this.line_number,\n            column: range[0] - this.line_start\n        }; }\n        if (end === void 0) { end = {\n            line: this.line_number,\n            column: range[1] - this.line_start\n        }; }\n        return {\n            type: type,\n            value: value,\n            range: range,\n            loc: {\n                start: start, end: end\n            }\n        };\n    };\n    default_1.prototype.match = function (node) {\n        var start = this.index, end = this.index;\n        var prev_node;\n        do {\n            prev_node = node;\n            node = prev_node[this.input[end++]];\n        } while (node);\n        var target = prev_node[\" END\" /* END */];\n        if (target && (target.type || (target = target(this)))) {\n            this.index = end - 1;\n            return target.scanner ?\n                target.scanner(this, start) :\n                this.createToken(this.TYPE_ENUMS[target.type] || target.type, [start, this.index], target.key);\n        }\n    };\n    default_1.prototype.nextIdentifier = function () {\n        var length = this.inIdentifierStart();\n        var token;\n        if (length > 0) {\n            var start = this.index;\n            var str = \"\";\n            do {\n                str += length === 1 ? this.input[this.index] : this._volatility;\n                this.index += length;\n                length = this.inIdentifierPart();\n            } while (length > 0);\n            var type = this.TOKEN_TYPE_MAPPERS[\" \" + str];\n            token = this.createToken(this.TYPE_ENUMS[type || \"Identifier\"], [start, this.index]);\n            this._volatility = str;\n            if (type && str.length !== this.index - start) {\n                this.err(token);\n            }\n        }\n        if (length < 0) {\n            this.err(this.createToken(\"error\", [this.index, this.index -= length]));\n        }\n        return token;\n    };\n    Object.defineProperty(default_1.prototype, \"is_primary_expr_start\", {\n        /*get maybe_regex() {\n            if (this.input[this.index] === \"/\") {\n                let is_primary_expr_start = (this as any).is_primary_expr_start;\n                return is_primary_expr_start !== undefined\n                    ? is_primary_expr_start\n                    : !this.tokens.length || this.tokens[this.tokens.length - 1].type === TOKEN_TYPE_ENUMS.Punctuator;\n            }\n        }*/\n        get: function () {\n            if (this.tokens.length) {\n                var last_node = this.tokens[this.tokens.length - 1];\n                return last_node.type === this.TYPE_ENUMS.Keyword\n                    || last_node.type === this.TYPE_ENUMS.Punctuator && last_node.content === undefined;\n            }\n            else {\n                return true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    default_1.prototype.nextPunctuator = function () {\n        return this.match(!this.is_primary_expr_start ? this.PUNCTUATORS_TREE : this.PRIMARY_EXPR_START_PUNCTUATORS_TREE);\n    };\n    default_1.prototype.nextNumeric = function () {\n        var _this = this;\n        var start = this.index;\n        var ch = this.input.charCodeAt(this.index);\n        var number;\n        var flags = 4 /* DECIMAL */;\n        var _get_token = function () {\n            _this._volatility = flags & 2 /* OCTAL */ ? (flags & ~4 /* DECIMAL */) : flags;\n            return _this.createToken(_this.TYPE_ENUMS.Numeric, [start, _this.index]);\n        };\n        var _get_error = function (message) {\n            if (message === void 0) { message = \"Invalid or unexpected token\"; }\n            var error = _get_token();\n            error.error = message;\n            error.input = _this.input.slice(start, _this.index + 1);\n            _this.err(error);\n            return error;\n        };\n        var decimalValue = this.decimalValue;\n        switch (ch) {\n            case 0x2e: //\".\"\n                if (decimalValue(this.input.charCodeAt(this.index + 1)) >= 0) {\n                    this.index += 1;\n                    flags |= 32 /* FLOAT */;\n                    break;\n                }\n                else {\n                    return;\n                }\n            case 0x30: //\"0\"\n                flags = interfaces_1.NUMERIC_KEYWORD_MAPPINGS[this.input[++this.index]];\n                if (!flags) {\n                    number = decimalValue(this.input.charCodeAt(this.index));\n                    if (number >= 0) {\n                        flags = 4 /* DECIMAL */;\n                        number < 8 && (flags |= 2 /* OCTAL */);\n                    }\n                    else if (!this.inIdentifierStart()) {\n                        flags = 4 /* DECIMAL */;\n                        return _get_token();\n                    }\n                    else {\n                        return _get_error();\n                    }\n                }\n                break;\n            default:\n                if (decimalValue(ch) < 0) {\n                    return;\n                }\n        }\n        if (flags & 4 /* DECIMAL */) {\n            while ((ch = this.input.charCodeAt(++this.index))) {\n                number = decimalValue(ch);\n                if (number >= 0) {\n                    number < 8 || (flags &= ~2 /* OCTAL */);\n                    continue;\n                }\n                switch (ch) {\n                    case 0x65: //\"e\"\n                    case 0x45: //\"E\"\n                        if (!(flags & (64 /* E */ | 2 /* OCTAL */))) {\n                            flags |= 64 /* E */;\n                            ch = this.input.charCodeAt(this.index + 1);\n                            if (ch === 0x2b || ch === 0x2d) { //+ -\n                                this.index += 1;\n                            }\n                            continue;\n                        }\n                        else {\n                            return _get_error();\n                        }\n                    case 0x2e: //\".\"\n                        if (!(flags & (32 /* FLOAT */ | 64 /* E */ | 2 /* OCTAL */))) {\n                            flags |= 32 /* FLOAT */;\n                            continue;\n                        }\n                    default:\n                        return this.inIdentifierStart()\n                            ? _get_error()\n                            : _get_token();\n                }\n            }\n            return _get_token();\n        }\n        else {\n            var test = flags & 8 /* HEX */\n                ? this.hexValue : (flags & 1 /* BINARY */\n                ? this.binaryValue\n                : this.octalValue);\n            while (test(this.input.charCodeAt(++this.index)) >= 0)\n                ;\n            return this.index > start + 3 && !this.inIdentifierStart()\n                ? _get_token()\n                : _get_error();\n        }\n    };\n    default_1.prototype.skipNonsenses = function () {\n        for (var cp = void 0; this.index < this.end; this.index++) {\n            cp = this.input.charCodeAt(this.index);\n            switch (true) {\n                case this.isWhiteSpace(cp):\n                    break;\n                case this.isLineTerminator(cp):\n                    this.line_number++;\n                    this.line_start = this.index + 1;\n                    break;\n                default:\n                    return true;\n            }\n        }\n    };\n    default_1.prototype._nextToken = function () {\n        return this.skipNonsenses() && (this.nextIdentifier() ||\n            this.nextNumeric() ||\n            this.nextPunctuator());\n    };\n    return default_1;\n}(character_1.default));\nexports.default = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../js/tokenizer.ts\n");

/***/ })

}]);